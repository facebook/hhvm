<?hh
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

namespace thrift\test;

class module_CONSTANTS implements \IThriftConstants {
  /**
   * Original thrift constant:-
   * i32 var1
   */
  const int var1 = 10;

  /**
   * Original thrift constant:-
   * string var2
   */
  const string var2 = "20";

  /**
   * Original thrift constant:-
   * struct module.MyStruct var3
   */
  <<__Memoize>>
  public static function var3()[write_props]: \thrift\test\MyStruct{
    return \thrift\test\MyStruct::fromShape(
      shape(
        "field" => 30,
        "set_string" => Set {
          "10",
          "20",
        },
      )
    );
  }

  /**
   * Original thrift constant:-
   * i32 var4
   */
  const int var4 = 40;

  /**
   * Original thrift constant:-
   * string var5
   */
  const string var5 = "50";

  /**
   * Original thrift constant:-
   * struct module.MyStruct var6
   */
  <<__Memoize>>
  public static function var6()[write_props]: \thrift\test\MyStruct{
    return \thrift\test\MyStruct::fromShape(
      shape(
        "field" => 60,
        "set_string" => Set {
          "30",
          "40",
        },
      )
    );
  }


  public static function getAllStructuredAnnotations()[write_props]: dict<string, dict<string, \IThriftStruct>> {
    return dict[
      'var1' => dict[
        '\thrift\test\Config' => \thrift\test\Config::fromShape(
          shape(
            "path" => "foo",
          )
        ),
      ],
      'var2' => dict[
        '\thrift\test\Config' => \thrift\test\Config::fromShape(
          shape(
            "path" => "bar",
          )
        ),
      ],
      'var3' => dict[
        '\thrift\test\Config' => \thrift\test\Config::fromShape(
          shape(
            "path" => "baz",
          )
        ),
      ],
      'var4' => dict[
        '\thrift\test\Config' => \thrift\test\Config::fromShape(
          shape(
            "path" => "foo2",
          )
        ),
      ],
      'var5' => dict[
        '\thrift\test\Config' => \thrift\test\Config::fromShape(
          shape(
            "path" => "bar2",
          )
        ),
      ],
      'var6' => dict[
        '\thrift\test\Config' => \thrift\test\Config::fromShape(
          shape(
            "path" => "baz2",
          )
        ),
      ],
    ];
  }
}

