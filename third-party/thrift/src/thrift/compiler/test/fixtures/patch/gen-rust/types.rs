// @generated by Thrift for src/module.thrift
// This file is probably not the place you want to edit!

//! Thrift type definitions for `module`.

#![allow(clippy::redundant_closure)]


#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct MyData {
    pub data1: ::std::string::String,
    pub data2: ::std::primitive::i32,
    // This field forces `..Default::default()` when instantiating this
    // struct, to make code future-proof against new fields added later to
    // the definition in Thrift. If you don't want this, add the annotation
    // `(rust.exhaustive)` to the Thrift struct to eliminate this field.
    #[doc(hidden)]
    pub _dot_dot_Default_default: self::dot_dot::OtherFields,
}

#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
pub enum InnerUnion {
    innerOption(::std::vec::Vec<::std::primitive::u8>),
    UnknownField(::std::primitive::i32),
}

#[derive(Clone, PartialEq, Debug)]
pub enum MyUnion {
    option1(::std::string::String),
    option2(::std::primitive::i32),
    option3(crate::types::InnerUnion),
    UnknownField(::std::primitive::i32),
}

#[derive(Clone, PartialEq)]
pub struct MyStruct {
    pub boolVal: ::std::primitive::bool,
    pub byteVal: ::std::primitive::i8,
    pub i16Val: ::std::primitive::i16,
    pub i32Val: ::std::primitive::i32,
    pub i64Val: ::std::primitive::i64,
    pub floatVal: ::std::primitive::f32,
    pub doubleVal: ::std::primitive::f64,
    pub stringVal: ::std::string::String,
    pub binaryVal: ::std::vec::Vec<::std::primitive::u8>,
    pub enumVal: crate::types::MyEnum,
    pub structVal: crate::types::MyData,
    pub unionVal: crate::types::MyUnion,
    pub lateStructVal: crate::types::LateDefStruct,
    pub optBoolVal: ::std::option::Option<::std::primitive::bool>,
    pub optByteVal: ::std::option::Option<::std::primitive::i8>,
    pub optI16Val: ::std::option::Option<::std::primitive::i16>,
    pub optI32Val: ::std::option::Option<::std::primitive::i32>,
    pub optI64Val: ::std::option::Option<::std::primitive::i64>,
    pub optFloatVal: ::std::option::Option<::std::primitive::f32>,
    pub optDoubleVal: ::std::option::Option<::std::primitive::f64>,
    pub optStringVal: ::std::option::Option<::std::string::String>,
    pub optBinaryVal: ::std::option::Option<::std::vec::Vec<::std::primitive::u8>>,
    pub optEnumVal: ::std::option::Option<crate::types::MyEnum>,
    pub optStructVal: ::std::option::Option<crate::types::MyData>,
    pub optLateStructVal: ::std::option::Option<crate::types::LateDefStruct>,
    pub optListVal: ::std::option::Option<::std::vec::Vec<::std::primitive::i16>>,
    pub optSetVal: ::std::option::Option<::std::collections::BTreeSet<::std::string::String>>,
    pub optMapVal: ::std::option::Option<::std::collections::BTreeMap<::std::string::String, ::std::string::String>>,
    // This field forces `..Default::default()` when instantiating this
    // struct, to make code future-proof against new fields added later to
    // the definition in Thrift. If you don't want this, add the annotation
    // `(rust.exhaustive)` to the Thrift struct to eliminate this field.
    #[doc(hidden)]
    pub _dot_dot_Default_default: self::dot_dot::OtherFields,
}

#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct LateDefStruct {
    // This field forces `..Default::default()` when instantiating this
    // struct, to make code future-proof against new fields added later to
    // the definition in Thrift. If you don't want this, add the annotation
    // `(rust.exhaustive)` to the Thrift struct to eliminate this field.
    #[doc(hidden)]
    pub _dot_dot_Default_default: self::dot_dot::OtherFields,
}

#[derive(Clone, PartialEq)]
pub struct MyDataFieldPatch {
    pub data1: patch::types::StringPatch,
    pub data2: patch::types::I32Patch,
    // This field forces `..Default::default()` when instantiating this
    // struct, to make code future-proof against new fields added later to
    // the definition in Thrift. If you don't want this, add the annotation
    // `(rust.exhaustive)` to the Thrift struct to eliminate this field.
    #[doc(hidden)]
    pub _dot_dot_Default_default: self::dot_dot::OtherFields,
}

#[derive(Clone, PartialEq)]
pub struct MyDataPatch {
    #[doc = "Assigns a value. If set, all other operations are ignored."]
    pub assign: ::std::option::Option<::std::boxed::Box<crate::types::MyData>>,
    #[doc = "Clears a value. Applies first."]
    pub clear: ::std::primitive::bool,
    #[doc = "Patches any previously set values. Applies second."]
    pub patchPrior: crate::types::MyDataFieldPatch,
    #[doc = "Initialize fields, using the given defaults. Applies third."]
    pub ensure: crate::types::MyData,
    #[doc = "Patches any set value, including newly set values. Applies last."]
    pub patch: crate::types::MyDataFieldPatch,
    // This field forces `..Default::default()` when instantiating this
    // struct, to make code future-proof against new fields added later to
    // the definition in Thrift. If you don't want this, add the annotation
    // `(rust.exhaustive)` to the Thrift struct to eliminate this field.
    #[doc(hidden)]
    pub _dot_dot_Default_default: self::dot_dot::OtherFields,
}

#[derive(Clone, PartialEq)]
pub struct InnerUnionFieldPatch {
    pub innerOption: patch::types::BinaryPatch,
    // This field forces `..Default::default()` when instantiating this
    // struct, to make code future-proof against new fields added later to
    // the definition in Thrift. If you don't want this, add the annotation
    // `(rust.exhaustive)` to the Thrift struct to eliminate this field.
    #[doc(hidden)]
    pub _dot_dot_Default_default: self::dot_dot::OtherFields,
}

#[derive(Clone, PartialEq)]
pub struct InnerUnionPatch {
    #[doc = "Assigns a value. If set, all other operations are ignored."]
    pub assign: ::std::option::Option<::std::boxed::Box<crate::types::InnerUnion>>,
    #[doc = "Clears any set value. Applies first."]
    pub clear: ::std::primitive::bool,
    #[doc = "Patches any previously set values. Applies second."]
    pub patchPrior: crate::types::InnerUnionFieldPatch,
    #[doc = "Assigns the value, if not already set to the same field. Applies third."]
    pub ensure: crate::types::InnerUnion,
    #[doc = "Patches any set value, including newly set values. Applies last."]
    pub patch: crate::types::InnerUnionFieldPatch,
    // This field forces `..Default::default()` when instantiating this
    // struct, to make code future-proof against new fields added later to
    // the definition in Thrift. If you don't want this, add the annotation
    // `(rust.exhaustive)` to the Thrift struct to eliminate this field.
    #[doc(hidden)]
    pub _dot_dot_Default_default: self::dot_dot::OtherFields,
}

#[derive(Clone, PartialEq)]
pub struct MyUnionFieldPatch {
    pub option1: patch::types::StringPatch,
    pub option2: patch::types::I32Patch,
    pub option3: crate::types::InnerUnionPatch,
    // This field forces `..Default::default()` when instantiating this
    // struct, to make code future-proof against new fields added later to
    // the definition in Thrift. If you don't want this, add the annotation
    // `(rust.exhaustive)` to the Thrift struct to eliminate this field.
    #[doc(hidden)]
    pub _dot_dot_Default_default: self::dot_dot::OtherFields,
}

#[derive(Clone, PartialEq)]
pub struct MyUnionPatch {
    #[doc = "Assigns a value. If set, all other operations are ignored."]
    pub assign: ::std::option::Option<::std::boxed::Box<crate::types::MyUnion>>,
    #[doc = "Clears any set value. Applies first."]
    pub clear: ::std::primitive::bool,
    #[doc = "Patches any previously set values. Applies second."]
    pub patchPrior: crate::types::MyUnionFieldPatch,
    #[doc = "Assigns the value, if not already set to the same field. Applies third."]
    pub ensure: crate::types::MyUnion,
    #[doc = "Patches any set value, including newly set values. Applies last."]
    pub patch: crate::types::MyUnionFieldPatch,
    // This field forces `..Default::default()` when instantiating this
    // struct, to make code future-proof against new fields added later to
    // the definition in Thrift. If you don't want this, add the annotation
    // `(rust.exhaustive)` to the Thrift struct to eliminate this field.
    #[doc(hidden)]
    pub _dot_dot_Default_default: self::dot_dot::OtherFields,
}

#[derive(Clone, PartialEq)]
pub struct MyStructFieldPatch {
    pub boolVal: patch::types::BoolPatch,
    pub byteVal: patch::types::BytePatch,
    pub i16Val: patch::types::I16Patch,
    pub i32Val: patch::types::I32Patch,
    pub i64Val: patch::types::I64Patch,
    pub floatVal: patch::types::FloatPatch,
    pub doubleVal: patch::types::DoublePatch,
    pub stringVal: patch::types::StringPatch,
    pub binaryVal: patch::types::BinaryPatch,
    pub enumVal: crate::types::MyStructFieldN10Patch,
    pub structVal: crate::types::MyDataPatch,
    pub unionVal: crate::types::MyUnionPatch,
    pub lateStructVal: crate::types::LateDefStructPatch,
    pub optBoolVal: patch::types::BoolPatch,
    pub optByteVal: patch::types::BytePatch,
    pub optI16Val: patch::types::I16Patch,
    pub optI32Val: patch::types::I32Patch,
    pub optI64Val: patch::types::I64Patch,
    pub optFloatVal: patch::types::FloatPatch,
    pub optDoubleVal: patch::types::DoublePatch,
    pub optStringVal: patch::types::StringPatch,
    pub optBinaryVal: patch::types::BinaryPatch,
    pub optEnumVal: crate::types::MyStructFieldN23Patch,
    pub optStructVal: crate::types::MyDataPatch,
    pub optLateStructVal: crate::types::LateDefStructPatch,
    pub optListVal: crate::types::MyStructFieldN26Patch,
    pub optSetVal: crate::types::MyStructFieldN27Patch,
    pub optMapVal: crate::types::MyStructFieldN28Patch,
    // This field forces `..Default::default()` when instantiating this
    // struct, to make code future-proof against new fields added later to
    // the definition in Thrift. If you don't want this, add the annotation
    // `(rust.exhaustive)` to the Thrift struct to eliminate this field.
    #[doc(hidden)]
    pub _dot_dot_Default_default: self::dot_dot::OtherFields,
}

#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct MyStructFieldN10Patch {
    #[doc = "Assigns a value. If set, all other operations are ignored."]
    pub assign: ::std::option::Option<crate::types::MyEnum>,
    #[doc = "Clears a value. Applies first."]
    pub clear: ::std::primitive::bool,
    // This field forces `..Default::default()` when instantiating this
    // struct, to make code future-proof against new fields added later to
    // the definition in Thrift. If you don't want this, add the annotation
    // `(rust.exhaustive)` to the Thrift struct to eliminate this field.
    #[doc(hidden)]
    pub _dot_dot_Default_default: self::dot_dot::OtherFields,
}

#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct MyStructFieldN23Patch {
    #[doc = "Assigns a value. If set, all other operations are ignored."]
    pub assign: ::std::option::Option<crate::types::MyEnum>,
    #[doc = "Clears a value. Applies first."]
    pub clear: ::std::primitive::bool,
    // This field forces `..Default::default()` when instantiating this
    // struct, to make code future-proof against new fields added later to
    // the definition in Thrift. If you don't want this, add the annotation
    // `(rust.exhaustive)` to the Thrift struct to eliminate this field.
    #[doc(hidden)]
    pub _dot_dot_Default_default: self::dot_dot::OtherFields,
}

#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct MyStructFieldN26Patch {
    #[doc = "Assigns a value. If set, all other operations are ignored."]
    pub assign: ::std::option::Option<::std::vec::Vec<::std::primitive::i16>>,
    #[doc = "Clears a value. Applies first."]
    pub clear: ::std::primitive::bool,
    #[doc = "Removes entries, if present. Applies third."]
    pub remove: ::std::vec::Vec<::std::primitive::i16>,
    #[doc = "Prepends to the front of a given list."]
    pub prepend: ::std::vec::Vec<::std::primitive::i16>,
    #[doc = "Appends to the back of a given list."]
    pub append: ::std::vec::Vec<::std::primitive::i16>,
    // This field forces `..Default::default()` when instantiating this
    // struct, to make code future-proof against new fields added later to
    // the definition in Thrift. If you don't want this, add the annotation
    // `(rust.exhaustive)` to the Thrift struct to eliminate this field.
    #[doc(hidden)]
    pub _dot_dot_Default_default: self::dot_dot::OtherFields,
}

#[derive(Clone, PartialEq)]
pub struct MyStructFieldN27Patch {
    #[doc = "Assigns a value. If set, all other operations are ignored."]
    pub assign: ::std::option::Option<::std::collections::BTreeSet<::std::string::String>>,
    #[doc = "Clears a value. Applies first."]
    pub clear: ::std::primitive::bool,
    #[doc = "Removes entries, if present. Applies third."]
    pub remove: ::std::collections::BTreeSet<::std::string::String>,
    #[doc = "Adds entries, if not already present. Applies fourth."]
    pub add: ::std::collections::BTreeSet<::std::string::String>,
    // This field forces `..Default::default()` when instantiating this
    // struct, to make code future-proof against new fields added later to
    // the definition in Thrift. If you don't want this, add the annotation
    // `(rust.exhaustive)` to the Thrift struct to eliminate this field.
    #[doc(hidden)]
    pub _dot_dot_Default_default: self::dot_dot::OtherFields,
}

#[derive(Clone, PartialEq)]
pub struct MyStructFieldN28Patch {
    #[doc = "Assigns a value. If set, all other operations are ignored."]
    pub assign: ::std::option::Option<::std::collections::BTreeMap<::std::string::String, ::std::string::String>>,
    #[doc = "Clears a value. Applies first."]
    pub clear: ::std::primitive::bool,
    #[doc = "Add the given values, if the keys are not already present. Applies forth."]
    pub add: ::std::collections::BTreeMap<::std::string::String, ::std::string::String>,
    #[doc = "Removes entries, if present. Applies third."]
    pub remove: ::fbthrift::builtin_types::HashSet<::std::string::String>,
    #[doc = "Adds or replaces the given key/value pairs. Applies fifth."]
    pub put: ::std::collections::BTreeMap<::std::string::String, ::std::string::String>,
    // This field forces `..Default::default()` when instantiating this
    // struct, to make code future-proof against new fields added later to
    // the definition in Thrift. If you don't want this, add the annotation
    // `(rust.exhaustive)` to the Thrift struct to eliminate this field.
    #[doc(hidden)]
    pub _dot_dot_Default_default: self::dot_dot::OtherFields,
}

#[derive(Clone, PartialEq)]
pub struct MyStructPatch {
    #[doc = "Assigns a value. If set, all other operations are ignored."]
    pub assign: ::std::option::Option<::std::boxed::Box<crate::types::MyStruct>>,
    #[doc = "Clears a value. Applies first."]
    pub clear: ::std::primitive::bool,
    #[doc = "Patches any previously set values. Applies second."]
    pub patchPrior: crate::types::MyStructFieldPatch,
    #[doc = "Initialize fields, using the given defaults. Applies third."]
    pub ensure: crate::types::MyStruct,
    #[doc = "Patches any set value, including newly set values. Applies last."]
    pub patch: crate::types::MyStructFieldPatch,
    // This field forces `..Default::default()` when instantiating this
    // struct, to make code future-proof against new fields added later to
    // the definition in Thrift. If you don't want this, add the annotation
    // `(rust.exhaustive)` to the Thrift struct to eliminate this field.
    #[doc(hidden)]
    pub _dot_dot_Default_default: self::dot_dot::OtherFields,
}

#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct LateDefStructFieldPatch {
    // This field forces `..Default::default()` when instantiating this
    // struct, to make code future-proof against new fields added later to
    // the definition in Thrift. If you don't want this, add the annotation
    // `(rust.exhaustive)` to the Thrift struct to eliminate this field.
    #[doc(hidden)]
    pub _dot_dot_Default_default: self::dot_dot::OtherFields,
}

#[derive(Clone, PartialEq)]
pub struct LateDefStructPatch {
    #[doc = "Assigns a value. If set, all other operations are ignored."]
    pub assign: ::std::option::Option<::std::boxed::Box<crate::types::LateDefStruct>>,
    #[doc = "Clears a value. Applies first."]
    pub clear: ::std::primitive::bool,
    #[doc = "Patches any previously set values. Applies second."]
    pub patchPrior: crate::types::LateDefStructFieldPatch,
    #[doc = "Initialize fields, using the given defaults. Applies third."]
    pub ensure: crate::types::LateDefStruct,
    #[doc = "Patches any set value, including newly set values. Applies last."]
    pub patch: crate::types::LateDefStructFieldPatch,
    // This field forces `..Default::default()` when instantiating this
    // struct, to make code future-proof against new fields added later to
    // the definition in Thrift. If you don't want this, add the annotation
    // `(rust.exhaustive)` to the Thrift struct to eliminate this field.
    #[doc(hidden)]
    pub _dot_dot_Default_default: self::dot_dot::OtherFields,
}

#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct MyEnum(pub ::std::primitive::i32);

impl MyEnum {
    pub const MyValue0: Self = MyEnum(0i32);
}

impl ::fbthrift::ThriftEnum for MyEnum {
    fn enumerate() -> &'static [(Self, &'static str)] {
        &[
            (Self::MyValue0, "MyValue0"),
        ]
    }

    fn variants() -> &'static [&'static str] {
        &[
            "MyValue0",
        ]
    }

    fn variant_values() -> &'static [Self] {
        &[
            Self::MyValue0,
        ]
    }
}

impl ::std::default::Default for MyEnum {
    fn default() -> Self {
        Self(::fbthrift::__UNKNOWN_ID)
    }
}

impl<'a> ::std::convert::From<&'a MyEnum> for ::std::primitive::i32 {
    #[inline]
    fn from(x: &'a MyEnum) -> Self {
        x.0
    }
}

impl ::std::convert::From<MyEnum> for ::std::primitive::i32 {
    #[inline]
    fn from(x: MyEnum) -> Self {
        x.0
    }
}

impl ::std::convert::From<::std::primitive::i32> for MyEnum {
    #[inline]
    fn from(x: ::std::primitive::i32) -> Self {
        Self(x)
    }
}

impl ::std::fmt::Display for MyEnum {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        static VARIANTS_BY_NUMBER: &[(&::std::primitive::str, ::std::primitive::i32)] = &[
            ("MyValue0", 0),
        ];
        ::fbthrift::help::enum_display(VARIANTS_BY_NUMBER, fmt, self.0)
    }
}

impl ::std::fmt::Debug for MyEnum {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(fmt, "MyEnum::{}", self)
    }
}

impl ::std::str::FromStr for MyEnum {
    type Err = ::anyhow::Error;

    fn from_str(string: &::std::primitive::str) -> ::std::result::Result<Self, Self::Err> {
        static VARIANTS_BY_NAME: &[(&::std::primitive::str, ::std::primitive::i32)] = &[
            ("MyValue0", 0),
        ];
        ::fbthrift::help::enum_from_str(VARIANTS_BY_NAME, string, "MyEnum").map(Self)
    }
}

impl ::fbthrift::GetTType for MyEnum {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::I32;
}

impl<P> ::fbthrift::Serialize<P> for MyEnum
where
    P: ::fbthrift::ProtocolWriter,
{
    #[inline]
    fn write(&self, p: &mut P) {
        p.write_i32(self.into())
    }
}

impl<P> ::fbthrift::Deserialize<P> for MyEnum
where
    P: ::fbthrift::ProtocolReader,
{
    #[inline]
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        ::std::result::Result::Ok(Self::from(p.read_i32()?))
    }
}

#[allow(clippy::derivable_impls)]
impl ::std::default::Default for self::MyData {
    fn default() -> Self {
        Self {
            data1: ::std::default::Default::default(),
            data2: ::std::default::Default::default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        }
    }
}

impl ::std::fmt::Debug for self::MyData {
    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        formatter
            .debug_struct("MyData")
            .field("data1", &self.data1)
            .field("data2", &self.data2)
            .finish()
    }
}

unsafe impl ::std::marker::Send for self::MyData {}
unsafe impl ::std::marker::Sync for self::MyData {}

impl ::fbthrift::GetTType for self::MyData {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
}

impl ::fbthrift::GetUri for self::MyData {
    fn uri() -> &'static str {
        "test.dev/fixtures/patch/MyData"
    }
}

impl<P> ::fbthrift::Serialize<P> for self::MyData
where
    P: ::fbthrift::ProtocolWriter,
{
    fn write(&self, p: &mut P) {
        p.write_struct_begin("MyData");
        p.write_field_begin("data1", ::fbthrift::TType::String, 1);
        ::fbthrift::Serialize::write(&self.data1, p);
        p.write_field_end();
        p.write_field_begin("data2", ::fbthrift::TType::I32, 2);
        ::fbthrift::Serialize::write(&self.data2, p);
        p.write_field_end();
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for self::MyData
where
    P: ::fbthrift::ProtocolReader,
{
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        static FIELDS: &[::fbthrift::Field] = &[
            ::fbthrift::Field::new("data1", ::fbthrift::TType::String, 1),
            ::fbthrift::Field::new("data2", ::fbthrift::TType::I32, 2),
        ];
        let mut field_data1 = ::std::option::Option::None;
        let mut field_data2 = ::std::option::Option::None;
        let _ = p.read_struct_begin(|_| ())?;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            match (fty, fid as ::std::primitive::i32) {
                (::fbthrift::TType::Stop, _) => break,
                (::fbthrift::TType::String, 1) => field_data1 = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::I32, 2) => field_data2 = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (fty, _) => p.skip(fty)?,
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(Self {
            data1: field_data1.unwrap_or_default(),
            data2: field_data2.unwrap_or_default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        })
    }
}



impl ::std::default::Default for InnerUnion {
    fn default() -> Self {
        Self::UnknownField(-1)
    }
}

impl ::fbthrift::GetTType for InnerUnion {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
}

impl ::fbthrift::GetUri for self::InnerUnion {
    fn uri() -> &'static str {
        "test.dev/fixtures/patch/InnerUnion"
    }
}

impl<P> ::fbthrift::Serialize<P> for InnerUnion
where
    P: ::fbthrift::ProtocolWriter,
{
    fn write(&self, p: &mut P) {
        p.write_struct_begin("InnerUnion");
        match self {
            Self::innerOption(inner) => {
                p.write_field_begin("innerOption", ::fbthrift::TType::String, 1);
                ::fbthrift::Serialize::write(inner, p);
                p.write_field_end();
            }
            Self::UnknownField(_) => {}
        }
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for InnerUnion
where
    P: ::fbthrift::ProtocolReader,
{
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        static FIELDS: &[::fbthrift::Field] = &[
            ::fbthrift::Field::new("innerOption", ::fbthrift::TType::String, 1),
        ];
        let _ = p.read_struct_begin(|_| ())?;
        let mut once = false;
        let mut alt = ::std::option::Option::None;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            match (fty, fid as ::std::primitive::i32, once) {
                (::fbthrift::TType::Stop, _, _) => break,
                (::fbthrift::TType::String, 1, false) => {
                    once = true;
                    alt = ::std::option::Option::Some(Self::innerOption(::fbthrift::Deserialize::read(p)?));
                }
                (fty, _, false) => p.skip(fty)?,
                (badty, badid, true) => return ::std::result::Result::Err(::std::convert::From::from(::fbthrift::ApplicationException::new(
                    ::fbthrift::ApplicationExceptionErrorCode::ProtocolError,
                    format!(
                        "unwanted extra union {} field ty {:?} id {}",
                        "InnerUnion",
                        badty,
                        badid,
                    ),
                ))),
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(alt.unwrap_or_default())
    }
}


impl ::std::default::Default for MyUnion {
    fn default() -> Self {
        Self::UnknownField(-1)
    }
}

impl ::fbthrift::GetTType for MyUnion {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
}

impl ::fbthrift::GetUri for self::MyUnion {
    fn uri() -> &'static str {
        "test.dev/fixtures/patch/MyUnion"
    }
}

impl<P> ::fbthrift::Serialize<P> for MyUnion
where
    P: ::fbthrift::ProtocolWriter,
{
    fn write(&self, p: &mut P) {
        p.write_struct_begin("MyUnion");
        match self {
            Self::option1(inner) => {
                p.write_field_begin("option1", ::fbthrift::TType::String, 1);
                ::fbthrift::Serialize::write(inner, p);
                p.write_field_end();
            }
            Self::option2(inner) => {
                p.write_field_begin("option2", ::fbthrift::TType::I32, 2);
                ::fbthrift::Serialize::write(inner, p);
                p.write_field_end();
            }
            Self::option3(inner) => {
                p.write_field_begin("option3", ::fbthrift::TType::Struct, 3);
                ::fbthrift::Serialize::write(inner, p);
                p.write_field_end();
            }
            Self::UnknownField(_) => {}
        }
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for MyUnion
where
    P: ::fbthrift::ProtocolReader,
{
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        static FIELDS: &[::fbthrift::Field] = &[
            ::fbthrift::Field::new("option1", ::fbthrift::TType::String, 1),
            ::fbthrift::Field::new("option2", ::fbthrift::TType::I32, 2),
            ::fbthrift::Field::new("option3", ::fbthrift::TType::Struct, 3),
        ];
        let _ = p.read_struct_begin(|_| ())?;
        let mut once = false;
        let mut alt = ::std::option::Option::None;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            match (fty, fid as ::std::primitive::i32, once) {
                (::fbthrift::TType::Stop, _, _) => break,
                (::fbthrift::TType::String, 1, false) => {
                    once = true;
                    alt = ::std::option::Option::Some(Self::option1(::fbthrift::Deserialize::read(p)?));
                }
                (::fbthrift::TType::I32, 2, false) => {
                    once = true;
                    alt = ::std::option::Option::Some(Self::option2(::fbthrift::Deserialize::read(p)?));
                }
                (::fbthrift::TType::Struct, 3, false) => {
                    once = true;
                    alt = ::std::option::Option::Some(Self::option3(::fbthrift::Deserialize::read(p)?));
                }
                (fty, _, false) => p.skip(fty)?,
                (badty, badid, true) => return ::std::result::Result::Err(::std::convert::From::from(::fbthrift::ApplicationException::new(
                    ::fbthrift::ApplicationExceptionErrorCode::ProtocolError,
                    format!(
                        "unwanted extra union {} field ty {:?} id {}",
                        "MyUnion",
                        badty,
                        badid,
                    ),
                ))),
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(alt.unwrap_or_default())
    }
}

#[allow(clippy::derivable_impls)]
impl ::std::default::Default for self::MyStruct {
    fn default() -> Self {
        Self {
            boolVal: ::std::default::Default::default(),
            byteVal: ::std::default::Default::default(),
            i16Val: ::std::default::Default::default(),
            i32Val: ::std::default::Default::default(),
            i64Val: ::std::default::Default::default(),
            floatVal: ::std::default::Default::default(),
            doubleVal: ::std::default::Default::default(),
            stringVal: ::std::default::Default::default(),
            binaryVal: ::std::default::Default::default(),
            enumVal: ::std::default::Default::default(),
            structVal: ::std::default::Default::default(),
            unionVal: ::std::default::Default::default(),
            lateStructVal: ::std::default::Default::default(),
            optBoolVal: ::std::option::Option::None,
            optByteVal: ::std::option::Option::None,
            optI16Val: ::std::option::Option::None,
            optI32Val: ::std::option::Option::None,
            optI64Val: ::std::option::Option::None,
            optFloatVal: ::std::option::Option::None,
            optDoubleVal: ::std::option::Option::None,
            optStringVal: ::std::option::Option::None,
            optBinaryVal: ::std::option::Option::None,
            optEnumVal: ::std::option::Option::None,
            optStructVal: ::std::option::Option::None,
            optLateStructVal: ::std::option::Option::None,
            optListVal: ::std::option::Option::None,
            optSetVal: ::std::option::Option::None,
            optMapVal: ::std::option::Option::None,
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        }
    }
}

impl ::std::fmt::Debug for self::MyStruct {
    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        formatter
            .debug_struct("MyStruct")
            .field("boolVal", &self.boolVal)
            .field("byteVal", &self.byteVal)
            .field("i16Val", &self.i16Val)
            .field("i32Val", &self.i32Val)
            .field("i64Val", &self.i64Val)
            .field("floatVal", &self.floatVal)
            .field("doubleVal", &self.doubleVal)
            .field("stringVal", &self.stringVal)
            .field("binaryVal", &self.binaryVal)
            .field("enumVal", &self.enumVal)
            .field("structVal", &self.structVal)
            .field("unionVal", &self.unionVal)
            .field("lateStructVal", &self.lateStructVal)
            .field("optBoolVal", &self.optBoolVal)
            .field("optByteVal", &self.optByteVal)
            .field("optI16Val", &self.optI16Val)
            .field("optI32Val", &self.optI32Val)
            .field("optI64Val", &self.optI64Val)
            .field("optFloatVal", &self.optFloatVal)
            .field("optDoubleVal", &self.optDoubleVal)
            .field("optStringVal", &self.optStringVal)
            .field("optBinaryVal", &self.optBinaryVal)
            .field("optEnumVal", &self.optEnumVal)
            .field("optStructVal", &self.optStructVal)
            .field("optLateStructVal", &self.optLateStructVal)
            .field("optListVal", &self.optListVal)
            .field("optSetVal", &self.optSetVal)
            .field("optMapVal", &self.optMapVal)
            .finish()
    }
}

unsafe impl ::std::marker::Send for self::MyStruct {}
unsafe impl ::std::marker::Sync for self::MyStruct {}

impl ::fbthrift::GetTType for self::MyStruct {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
}

impl ::fbthrift::GetUri for self::MyStruct {
    fn uri() -> &'static str {
        "test.dev/fixtures/patch/MyStruct"
    }
}

impl<P> ::fbthrift::Serialize<P> for self::MyStruct
where
    P: ::fbthrift::ProtocolWriter,
{
    fn write(&self, p: &mut P) {
        p.write_struct_begin("MyStruct");
        p.write_field_begin("boolVal", ::fbthrift::TType::Bool, -1);
        ::fbthrift::Serialize::write(&self.boolVal, p);
        p.write_field_end();
        p.write_field_begin("byteVal", ::fbthrift::TType::Byte, -2);
        ::fbthrift::Serialize::write(&self.byteVal, p);
        p.write_field_end();
        p.write_field_begin("i16Val", ::fbthrift::TType::I16, -3);
        ::fbthrift::Serialize::write(&self.i16Val, p);
        p.write_field_end();
        p.write_field_begin("i32Val", ::fbthrift::TType::I32, -4);
        ::fbthrift::Serialize::write(&self.i32Val, p);
        p.write_field_end();
        p.write_field_begin("i64Val", ::fbthrift::TType::I64, -5);
        ::fbthrift::Serialize::write(&self.i64Val, p);
        p.write_field_end();
        p.write_field_begin("floatVal", ::fbthrift::TType::Float, -6);
        ::fbthrift::Serialize::write(&self.floatVal, p);
        p.write_field_end();
        p.write_field_begin("doubleVal", ::fbthrift::TType::Double, -7);
        ::fbthrift::Serialize::write(&self.doubleVal, p);
        p.write_field_end();
        p.write_field_begin("stringVal", ::fbthrift::TType::String, -8);
        ::fbthrift::Serialize::write(&self.stringVal, p);
        p.write_field_end();
        p.write_field_begin("binaryVal", ::fbthrift::TType::String, -9);
        ::fbthrift::Serialize::write(&self.binaryVal, p);
        p.write_field_end();
        p.write_field_begin("enumVal", ::fbthrift::TType::I32, -10);
        ::fbthrift::Serialize::write(&self.enumVal, p);
        p.write_field_end();
        p.write_field_begin("structVal", ::fbthrift::TType::Struct, -11);
        ::fbthrift::Serialize::write(&self.structVal, p);
        p.write_field_end();
        p.write_field_begin("unionVal", ::fbthrift::TType::Struct, -12);
        ::fbthrift::Serialize::write(&self.unionVal, p);
        p.write_field_end();
        p.write_field_begin("lateStructVal", ::fbthrift::TType::Struct, -13);
        ::fbthrift::Serialize::write(&self.lateStructVal, p);
        p.write_field_end();
        if let ::std::option::Option::Some(some) = &self.optBoolVal {
            p.write_field_begin("optBoolVal", ::fbthrift::TType::Bool, -14);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        if let ::std::option::Option::Some(some) = &self.optByteVal {
            p.write_field_begin("optByteVal", ::fbthrift::TType::Byte, -15);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        if let ::std::option::Option::Some(some) = &self.optI16Val {
            p.write_field_begin("optI16Val", ::fbthrift::TType::I16, -16);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        if let ::std::option::Option::Some(some) = &self.optI32Val {
            p.write_field_begin("optI32Val", ::fbthrift::TType::I32, -17);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        if let ::std::option::Option::Some(some) = &self.optI64Val {
            p.write_field_begin("optI64Val", ::fbthrift::TType::I64, -18);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        if let ::std::option::Option::Some(some) = &self.optFloatVal {
            p.write_field_begin("optFloatVal", ::fbthrift::TType::Float, -19);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        if let ::std::option::Option::Some(some) = &self.optDoubleVal {
            p.write_field_begin("optDoubleVal", ::fbthrift::TType::Double, -20);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        if let ::std::option::Option::Some(some) = &self.optStringVal {
            p.write_field_begin("optStringVal", ::fbthrift::TType::String, -21);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        if let ::std::option::Option::Some(some) = &self.optBinaryVal {
            p.write_field_begin("optBinaryVal", ::fbthrift::TType::String, -22);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        if let ::std::option::Option::Some(some) = &self.optEnumVal {
            p.write_field_begin("optEnumVal", ::fbthrift::TType::I32, -23);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        if let ::std::option::Option::Some(some) = &self.optStructVal {
            p.write_field_begin("optStructVal", ::fbthrift::TType::Struct, -24);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        if let ::std::option::Option::Some(some) = &self.optLateStructVal {
            p.write_field_begin("optLateStructVal", ::fbthrift::TType::Struct, -25);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        if let ::std::option::Option::Some(some) = &self.optListVal {
            p.write_field_begin("optListVal", ::fbthrift::TType::List, -26);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        if let ::std::option::Option::Some(some) = &self.optSetVal {
            p.write_field_begin("optSetVal", ::fbthrift::TType::Set, -27);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        if let ::std::option::Option::Some(some) = &self.optMapVal {
            p.write_field_begin("optMapVal", ::fbthrift::TType::Map, -28);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for self::MyStruct
where
    P: ::fbthrift::ProtocolReader,
{
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        static FIELDS: &[::fbthrift::Field] = &[
            ::fbthrift::Field::new("binaryVal", ::fbthrift::TType::String, -9),
            ::fbthrift::Field::new("boolVal", ::fbthrift::TType::Bool, -1),
            ::fbthrift::Field::new("byteVal", ::fbthrift::TType::Byte, -2),
            ::fbthrift::Field::new("doubleVal", ::fbthrift::TType::Double, -7),
            ::fbthrift::Field::new("enumVal", ::fbthrift::TType::I32, -10),
            ::fbthrift::Field::new("floatVal", ::fbthrift::TType::Float, -6),
            ::fbthrift::Field::new("i16Val", ::fbthrift::TType::I16, -3),
            ::fbthrift::Field::new("i32Val", ::fbthrift::TType::I32, -4),
            ::fbthrift::Field::new("i64Val", ::fbthrift::TType::I64, -5),
            ::fbthrift::Field::new("lateStructVal", ::fbthrift::TType::Struct, -13),
            ::fbthrift::Field::new("optBinaryVal", ::fbthrift::TType::String, -22),
            ::fbthrift::Field::new("optBoolVal", ::fbthrift::TType::Bool, -14),
            ::fbthrift::Field::new("optByteVal", ::fbthrift::TType::Byte, -15),
            ::fbthrift::Field::new("optDoubleVal", ::fbthrift::TType::Double, -20),
            ::fbthrift::Field::new("optEnumVal", ::fbthrift::TType::I32, -23),
            ::fbthrift::Field::new("optFloatVal", ::fbthrift::TType::Float, -19),
            ::fbthrift::Field::new("optI16Val", ::fbthrift::TType::I16, -16),
            ::fbthrift::Field::new("optI32Val", ::fbthrift::TType::I32, -17),
            ::fbthrift::Field::new("optI64Val", ::fbthrift::TType::I64, -18),
            ::fbthrift::Field::new("optLateStructVal", ::fbthrift::TType::Struct, -25),
            ::fbthrift::Field::new("optListVal", ::fbthrift::TType::List, -26),
            ::fbthrift::Field::new("optMapVal", ::fbthrift::TType::Map, -28),
            ::fbthrift::Field::new("optSetVal", ::fbthrift::TType::Set, -27),
            ::fbthrift::Field::new("optStringVal", ::fbthrift::TType::String, -21),
            ::fbthrift::Field::new("optStructVal", ::fbthrift::TType::Struct, -24),
            ::fbthrift::Field::new("stringVal", ::fbthrift::TType::String, -8),
            ::fbthrift::Field::new("structVal", ::fbthrift::TType::Struct, -11),
            ::fbthrift::Field::new("unionVal", ::fbthrift::TType::Struct, -12),
        ];
        let mut field_boolVal = ::std::option::Option::None;
        let mut field_byteVal = ::std::option::Option::None;
        let mut field_i16Val = ::std::option::Option::None;
        let mut field_i32Val = ::std::option::Option::None;
        let mut field_i64Val = ::std::option::Option::None;
        let mut field_floatVal = ::std::option::Option::None;
        let mut field_doubleVal = ::std::option::Option::None;
        let mut field_stringVal = ::std::option::Option::None;
        let mut field_binaryVal = ::std::option::Option::None;
        let mut field_enumVal = ::std::option::Option::None;
        let mut field_structVal = ::std::option::Option::None;
        let mut field_unionVal = ::std::option::Option::None;
        let mut field_lateStructVal = ::std::option::Option::None;
        let mut field_optBoolVal = ::std::option::Option::None;
        let mut field_optByteVal = ::std::option::Option::None;
        let mut field_optI16Val = ::std::option::Option::None;
        let mut field_optI32Val = ::std::option::Option::None;
        let mut field_optI64Val = ::std::option::Option::None;
        let mut field_optFloatVal = ::std::option::Option::None;
        let mut field_optDoubleVal = ::std::option::Option::None;
        let mut field_optStringVal = ::std::option::Option::None;
        let mut field_optBinaryVal = ::std::option::Option::None;
        let mut field_optEnumVal = ::std::option::Option::None;
        let mut field_optStructVal = ::std::option::Option::None;
        let mut field_optLateStructVal = ::std::option::Option::None;
        let mut field_optListVal = ::std::option::Option::None;
        let mut field_optSetVal = ::std::option::Option::None;
        let mut field_optMapVal = ::std::option::Option::None;
        let _ = p.read_struct_begin(|_| ())?;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            match (fty, fid as ::std::primitive::i32) {
                (::fbthrift::TType::Stop, _) => break,
                (::fbthrift::TType::Bool, -1) => field_boolVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Byte, -2) => field_byteVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::I16, -3) => field_i16Val = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::I32, -4) => field_i32Val = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::I64, -5) => field_i64Val = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Float, -6) => field_floatVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Double, -7) => field_doubleVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::String, -8) => field_stringVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::String, -9) => field_binaryVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::I32, -10) => field_enumVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -11) => field_structVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -12) => field_unionVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -13) => field_lateStructVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Bool, -14) => field_optBoolVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Byte, -15) => field_optByteVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::I16, -16) => field_optI16Val = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::I32, -17) => field_optI32Val = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::I64, -18) => field_optI64Val = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Float, -19) => field_optFloatVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Double, -20) => field_optDoubleVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::String, -21) => field_optStringVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::String, -22) => field_optBinaryVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::I32, -23) => field_optEnumVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -24) => field_optStructVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -25) => field_optLateStructVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::List, -26) => field_optListVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Set, -27) => field_optSetVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Map, -28) => field_optMapVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (fty, _) => p.skip(fty)?,
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(Self {
            boolVal: field_boolVal.unwrap_or_default(),
            byteVal: field_byteVal.unwrap_or_default(),
            i16Val: field_i16Val.unwrap_or_default(),
            i32Val: field_i32Val.unwrap_or_default(),
            i64Val: field_i64Val.unwrap_or_default(),
            floatVal: field_floatVal.unwrap_or_default(),
            doubleVal: field_doubleVal.unwrap_or_default(),
            stringVal: field_stringVal.unwrap_or_default(),
            binaryVal: field_binaryVal.unwrap_or_default(),
            enumVal: field_enumVal.unwrap_or_default(),
            structVal: field_structVal.unwrap_or_default(),
            unionVal: field_unionVal.unwrap_or_default(),
            lateStructVal: field_lateStructVal.unwrap_or_default(),
            optBoolVal: field_optBoolVal,
            optByteVal: field_optByteVal,
            optI16Val: field_optI16Val,
            optI32Val: field_optI32Val,
            optI64Val: field_optI64Val,
            optFloatVal: field_optFloatVal,
            optDoubleVal: field_optDoubleVal,
            optStringVal: field_optStringVal,
            optBinaryVal: field_optBinaryVal,
            optEnumVal: field_optEnumVal,
            optStructVal: field_optStructVal,
            optLateStructVal: field_optLateStructVal,
            optListVal: field_optListVal,
            optSetVal: field_optSetVal,
            optMapVal: field_optMapVal,
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        })
    }
}


#[allow(clippy::derivable_impls)]
impl ::std::default::Default for self::LateDefStruct {
    fn default() -> Self {
        Self {
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        }
    }
}

impl ::std::fmt::Debug for self::LateDefStruct {
    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        formatter
            .debug_struct("LateDefStruct")
            .finish()
    }
}

unsafe impl ::std::marker::Send for self::LateDefStruct {}
unsafe impl ::std::marker::Sync for self::LateDefStruct {}

impl ::fbthrift::GetTType for self::LateDefStruct {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
}

impl ::fbthrift::GetUri for self::LateDefStruct {
    fn uri() -> &'static str {
        "test.dev/fixtures/patch/LateDefStruct"
    }
}

impl<P> ::fbthrift::Serialize<P> for self::LateDefStruct
where
    P: ::fbthrift::ProtocolWriter,
{
    fn write(&self, p: &mut P) {
        p.write_struct_begin("LateDefStruct");
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for self::LateDefStruct
where
    P: ::fbthrift::ProtocolReader,
{
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        static FIELDS: &[::fbthrift::Field] = &[
        ];
        let _ = p.read_struct_begin(|_| ())?;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            match (fty, fid as ::std::primitive::i32) {
                (::fbthrift::TType::Stop, _) => break,
                (fty, _) => p.skip(fty)?,
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(Self {
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        })
    }
}


#[allow(clippy::derivable_impls)]
impl ::std::default::Default for self::MyDataFieldPatch {
    fn default() -> Self {
        Self {
            data1: ::std::default::Default::default(),
            data2: ::std::default::Default::default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        }
    }
}

impl ::std::fmt::Debug for self::MyDataFieldPatch {
    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        formatter
            .debug_struct("MyDataFieldPatch")
            .field("data1", &self.data1)
            .field("data2", &self.data2)
            .finish()
    }
}

unsafe impl ::std::marker::Send for self::MyDataFieldPatch {}
unsafe impl ::std::marker::Sync for self::MyDataFieldPatch {}

impl ::fbthrift::GetTType for self::MyDataFieldPatch {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
}

impl ::fbthrift::GetUri for self::MyDataFieldPatch {
    fn uri() -> &'static str {
        "test.dev/fixtures/patch/MyDataFieldPatch"
    }
}

impl<P> ::fbthrift::Serialize<P> for self::MyDataFieldPatch
where
    P: ::fbthrift::ProtocolWriter,
{
    fn write(&self, p: &mut P) {
        p.write_struct_begin("MyDataFieldPatch");
        p.write_field_begin("data1", ::fbthrift::TType::Struct, 1);
        ::fbthrift::Serialize::write(&self.data1, p);
        p.write_field_end();
        p.write_field_begin("data2", ::fbthrift::TType::Struct, 2);
        ::fbthrift::Serialize::write(&self.data2, p);
        p.write_field_end();
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for self::MyDataFieldPatch
where
    P: ::fbthrift::ProtocolReader,
{
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        static FIELDS: &[::fbthrift::Field] = &[
            ::fbthrift::Field::new("data1", ::fbthrift::TType::Struct, 1),
            ::fbthrift::Field::new("data2", ::fbthrift::TType::Struct, 2),
        ];
        let mut field_data1 = ::std::option::Option::None;
        let mut field_data2 = ::std::option::Option::None;
        let _ = p.read_struct_begin(|_| ())?;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            match (fty, fid as ::std::primitive::i32) {
                (::fbthrift::TType::Stop, _) => break,
                (::fbthrift::TType::Struct, 1) => field_data1 = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, 2) => field_data2 = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (fty, _) => p.skip(fty)?,
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(Self {
            data1: field_data1.unwrap_or_default(),
            data2: field_data2.unwrap_or_default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        })
    }
}


#[allow(clippy::derivable_impls)]
impl ::std::default::Default for self::MyDataPatch {
    fn default() -> Self {
        Self {
            assign: ::std::option::Option::None,
            clear: ::std::default::Default::default(),
            patchPrior: ::std::default::Default::default(),
            ensure: ::std::default::Default::default(),
            patch: ::std::default::Default::default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        }
    }
}

impl ::std::fmt::Debug for self::MyDataPatch {
    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        formatter
            .debug_struct("MyDataPatch")
            .field("assign", &self.assign)
            .field("clear", &self.clear)
            .field("patchPrior", &self.patchPrior)
            .field("ensure", &self.ensure)
            .field("patch", &self.patch)
            .finish()
    }
}

unsafe impl ::std::marker::Send for self::MyDataPatch {}
unsafe impl ::std::marker::Sync for self::MyDataPatch {}

impl ::fbthrift::GetTType for self::MyDataPatch {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
}

impl ::fbthrift::GetUri for self::MyDataPatch {
    fn uri() -> &'static str {
        "test.dev/fixtures/patch/MyDataPatch"
    }
}

impl<P> ::fbthrift::Serialize<P> for self::MyDataPatch
where
    P: ::fbthrift::ProtocolWriter,
{
    fn write(&self, p: &mut P) {
        p.write_struct_begin("MyDataPatch");
        if let ::std::option::Option::Some(some) = &self.assign {
            p.write_field_begin("assign", ::fbthrift::TType::Struct, 1);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        p.write_field_begin("clear", ::fbthrift::TType::Bool, 2);
        ::fbthrift::Serialize::write(&self.clear, p);
        p.write_field_end();
        p.write_field_begin("patchPrior", ::fbthrift::TType::Struct, 3);
        ::fbthrift::Serialize::write(&self.patchPrior, p);
        p.write_field_end();
        p.write_field_begin("ensure", ::fbthrift::TType::Struct, 5);
        ::fbthrift::Serialize::write(&self.ensure, p);
        p.write_field_end();
        p.write_field_begin("patch", ::fbthrift::TType::Struct, 6);
        ::fbthrift::Serialize::write(&self.patch, p);
        p.write_field_end();
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for self::MyDataPatch
where
    P: ::fbthrift::ProtocolReader,
{
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        static FIELDS: &[::fbthrift::Field] = &[
            ::fbthrift::Field::new("assign", ::fbthrift::TType::Struct, 1),
            ::fbthrift::Field::new("clear", ::fbthrift::TType::Bool, 2),
            ::fbthrift::Field::new("ensure", ::fbthrift::TType::Struct, 5),
            ::fbthrift::Field::new("patch", ::fbthrift::TType::Struct, 6),
            ::fbthrift::Field::new("patchPrior", ::fbthrift::TType::Struct, 3),
        ];
        let mut field_assign = ::std::option::Option::None;
        let mut field_clear = ::std::option::Option::None;
        let mut field_patchPrior = ::std::option::Option::None;
        let mut field_ensure = ::std::option::Option::None;
        let mut field_patch = ::std::option::Option::None;
        let _ = p.read_struct_begin(|_| ())?;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            match (fty, fid as ::std::primitive::i32) {
                (::fbthrift::TType::Stop, _) => break,
                (::fbthrift::TType::Struct, 1) => field_assign = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Bool, 2) => field_clear = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, 3) => field_patchPrior = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, 5) => field_ensure = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, 6) => field_patch = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (fty, _) => p.skip(fty)?,
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(Self {
            assign: field_assign,
            clear: field_clear.unwrap_or_default(),
            patchPrior: field_patchPrior.unwrap_or_default(),
            ensure: field_ensure.unwrap_or_default(),
            patch: field_patch.unwrap_or_default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        })
    }
}


#[allow(clippy::derivable_impls)]
impl ::std::default::Default for self::InnerUnionFieldPatch {
    fn default() -> Self {
        Self {
            innerOption: ::std::default::Default::default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        }
    }
}

impl ::std::fmt::Debug for self::InnerUnionFieldPatch {
    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        formatter
            .debug_struct("InnerUnionFieldPatch")
            .field("innerOption", &self.innerOption)
            .finish()
    }
}

unsafe impl ::std::marker::Send for self::InnerUnionFieldPatch {}
unsafe impl ::std::marker::Sync for self::InnerUnionFieldPatch {}

impl ::fbthrift::GetTType for self::InnerUnionFieldPatch {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
}

impl ::fbthrift::GetUri for self::InnerUnionFieldPatch {
    fn uri() -> &'static str {
        "test.dev/fixtures/patch/InnerUnionFieldPatch"
    }
}

impl<P> ::fbthrift::Serialize<P> for self::InnerUnionFieldPatch
where
    P: ::fbthrift::ProtocolWriter,
{
    fn write(&self, p: &mut P) {
        p.write_struct_begin("InnerUnionFieldPatch");
        p.write_field_begin("innerOption", ::fbthrift::TType::Struct, 1);
        ::fbthrift::Serialize::write(&self.innerOption, p);
        p.write_field_end();
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for self::InnerUnionFieldPatch
where
    P: ::fbthrift::ProtocolReader,
{
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        static FIELDS: &[::fbthrift::Field] = &[
            ::fbthrift::Field::new("innerOption", ::fbthrift::TType::Struct, 1),
        ];
        let mut field_innerOption = ::std::option::Option::None;
        let _ = p.read_struct_begin(|_| ())?;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            match (fty, fid as ::std::primitive::i32) {
                (::fbthrift::TType::Stop, _) => break,
                (::fbthrift::TType::Struct, 1) => field_innerOption = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (fty, _) => p.skip(fty)?,
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(Self {
            innerOption: field_innerOption.unwrap_or_default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        })
    }
}


#[allow(clippy::derivable_impls)]
impl ::std::default::Default for self::InnerUnionPatch {
    fn default() -> Self {
        Self {
            assign: ::std::option::Option::None,
            clear: ::std::default::Default::default(),
            patchPrior: ::std::default::Default::default(),
            ensure: ::std::default::Default::default(),
            patch: ::std::default::Default::default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        }
    }
}

impl ::std::fmt::Debug for self::InnerUnionPatch {
    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        formatter
            .debug_struct("InnerUnionPatch")
            .field("assign", &self.assign)
            .field("clear", &self.clear)
            .field("patchPrior", &self.patchPrior)
            .field("ensure", &self.ensure)
            .field("patch", &self.patch)
            .finish()
    }
}

unsafe impl ::std::marker::Send for self::InnerUnionPatch {}
unsafe impl ::std::marker::Sync for self::InnerUnionPatch {}

impl ::fbthrift::GetTType for self::InnerUnionPatch {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
}

impl ::fbthrift::GetUri for self::InnerUnionPatch {
    fn uri() -> &'static str {
        "test.dev/fixtures/patch/InnerUnionPatch"
    }
}

impl<P> ::fbthrift::Serialize<P> for self::InnerUnionPatch
where
    P: ::fbthrift::ProtocolWriter,
{
    fn write(&self, p: &mut P) {
        p.write_struct_begin("InnerUnionPatch");
        if let ::std::option::Option::Some(some) = &self.assign {
            p.write_field_begin("assign", ::fbthrift::TType::Struct, 1);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        p.write_field_begin("clear", ::fbthrift::TType::Bool, 2);
        ::fbthrift::Serialize::write(&self.clear, p);
        p.write_field_end();
        p.write_field_begin("patchPrior", ::fbthrift::TType::Struct, 3);
        ::fbthrift::Serialize::write(&self.patchPrior, p);
        p.write_field_end();
        p.write_field_begin("ensure", ::fbthrift::TType::Struct, 4);
        ::fbthrift::Serialize::write(&self.ensure, p);
        p.write_field_end();
        p.write_field_begin("patch", ::fbthrift::TType::Struct, 6);
        ::fbthrift::Serialize::write(&self.patch, p);
        p.write_field_end();
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for self::InnerUnionPatch
where
    P: ::fbthrift::ProtocolReader,
{
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        static FIELDS: &[::fbthrift::Field] = &[
            ::fbthrift::Field::new("assign", ::fbthrift::TType::Struct, 1),
            ::fbthrift::Field::new("clear", ::fbthrift::TType::Bool, 2),
            ::fbthrift::Field::new("ensure", ::fbthrift::TType::Struct, 4),
            ::fbthrift::Field::new("patch", ::fbthrift::TType::Struct, 6),
            ::fbthrift::Field::new("patchPrior", ::fbthrift::TType::Struct, 3),
        ];
        let mut field_assign = ::std::option::Option::None;
        let mut field_clear = ::std::option::Option::None;
        let mut field_patchPrior = ::std::option::Option::None;
        let mut field_ensure = ::std::option::Option::None;
        let mut field_patch = ::std::option::Option::None;
        let _ = p.read_struct_begin(|_| ())?;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            match (fty, fid as ::std::primitive::i32) {
                (::fbthrift::TType::Stop, _) => break,
                (::fbthrift::TType::Struct, 1) => field_assign = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Bool, 2) => field_clear = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, 3) => field_patchPrior = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, 4) => field_ensure = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, 6) => field_patch = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (fty, _) => p.skip(fty)?,
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(Self {
            assign: field_assign,
            clear: field_clear.unwrap_or_default(),
            patchPrior: field_patchPrior.unwrap_or_default(),
            ensure: field_ensure.unwrap_or_default(),
            patch: field_patch.unwrap_or_default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        })
    }
}


#[allow(clippy::derivable_impls)]
impl ::std::default::Default for self::MyUnionFieldPatch {
    fn default() -> Self {
        Self {
            option1: ::std::default::Default::default(),
            option2: ::std::default::Default::default(),
            option3: ::std::default::Default::default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        }
    }
}

impl ::std::fmt::Debug for self::MyUnionFieldPatch {
    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        formatter
            .debug_struct("MyUnionFieldPatch")
            .field("option1", &self.option1)
            .field("option2", &self.option2)
            .field("option3", &self.option3)
            .finish()
    }
}

unsafe impl ::std::marker::Send for self::MyUnionFieldPatch {}
unsafe impl ::std::marker::Sync for self::MyUnionFieldPatch {}

impl ::fbthrift::GetTType for self::MyUnionFieldPatch {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
}

impl ::fbthrift::GetUri for self::MyUnionFieldPatch {
    fn uri() -> &'static str {
        "test.dev/fixtures/patch/MyUnionFieldPatch"
    }
}

impl<P> ::fbthrift::Serialize<P> for self::MyUnionFieldPatch
where
    P: ::fbthrift::ProtocolWriter,
{
    fn write(&self, p: &mut P) {
        p.write_struct_begin("MyUnionFieldPatch");
        p.write_field_begin("option1", ::fbthrift::TType::Struct, 1);
        ::fbthrift::Serialize::write(&self.option1, p);
        p.write_field_end();
        p.write_field_begin("option2", ::fbthrift::TType::Struct, 2);
        ::fbthrift::Serialize::write(&self.option2, p);
        p.write_field_end();
        p.write_field_begin("option3", ::fbthrift::TType::Struct, 3);
        ::fbthrift::Serialize::write(&self.option3, p);
        p.write_field_end();
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for self::MyUnionFieldPatch
where
    P: ::fbthrift::ProtocolReader,
{
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        static FIELDS: &[::fbthrift::Field] = &[
            ::fbthrift::Field::new("option1", ::fbthrift::TType::Struct, 1),
            ::fbthrift::Field::new("option2", ::fbthrift::TType::Struct, 2),
            ::fbthrift::Field::new("option3", ::fbthrift::TType::Struct, 3),
        ];
        let mut field_option1 = ::std::option::Option::None;
        let mut field_option2 = ::std::option::Option::None;
        let mut field_option3 = ::std::option::Option::None;
        let _ = p.read_struct_begin(|_| ())?;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            match (fty, fid as ::std::primitive::i32) {
                (::fbthrift::TType::Stop, _) => break,
                (::fbthrift::TType::Struct, 1) => field_option1 = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, 2) => field_option2 = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, 3) => field_option3 = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (fty, _) => p.skip(fty)?,
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(Self {
            option1: field_option1.unwrap_or_default(),
            option2: field_option2.unwrap_or_default(),
            option3: field_option3.unwrap_or_default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        })
    }
}


#[allow(clippy::derivable_impls)]
impl ::std::default::Default for self::MyUnionPatch {
    fn default() -> Self {
        Self {
            assign: ::std::option::Option::None,
            clear: ::std::default::Default::default(),
            patchPrior: ::std::default::Default::default(),
            ensure: ::std::default::Default::default(),
            patch: ::std::default::Default::default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        }
    }
}

impl ::std::fmt::Debug for self::MyUnionPatch {
    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        formatter
            .debug_struct("MyUnionPatch")
            .field("assign", &self.assign)
            .field("clear", &self.clear)
            .field("patchPrior", &self.patchPrior)
            .field("ensure", &self.ensure)
            .field("patch", &self.patch)
            .finish()
    }
}

unsafe impl ::std::marker::Send for self::MyUnionPatch {}
unsafe impl ::std::marker::Sync for self::MyUnionPatch {}

impl ::fbthrift::GetTType for self::MyUnionPatch {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
}

impl ::fbthrift::GetUri for self::MyUnionPatch {
    fn uri() -> &'static str {
        "test.dev/fixtures/patch/MyUnionPatch"
    }
}

impl<P> ::fbthrift::Serialize<P> for self::MyUnionPatch
where
    P: ::fbthrift::ProtocolWriter,
{
    fn write(&self, p: &mut P) {
        p.write_struct_begin("MyUnionPatch");
        if let ::std::option::Option::Some(some) = &self.assign {
            p.write_field_begin("assign", ::fbthrift::TType::Struct, 1);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        p.write_field_begin("clear", ::fbthrift::TType::Bool, 2);
        ::fbthrift::Serialize::write(&self.clear, p);
        p.write_field_end();
        p.write_field_begin("patchPrior", ::fbthrift::TType::Struct, 3);
        ::fbthrift::Serialize::write(&self.patchPrior, p);
        p.write_field_end();
        p.write_field_begin("ensure", ::fbthrift::TType::Struct, 4);
        ::fbthrift::Serialize::write(&self.ensure, p);
        p.write_field_end();
        p.write_field_begin("patch", ::fbthrift::TType::Struct, 6);
        ::fbthrift::Serialize::write(&self.patch, p);
        p.write_field_end();
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for self::MyUnionPatch
where
    P: ::fbthrift::ProtocolReader,
{
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        static FIELDS: &[::fbthrift::Field] = &[
            ::fbthrift::Field::new("assign", ::fbthrift::TType::Struct, 1),
            ::fbthrift::Field::new("clear", ::fbthrift::TType::Bool, 2),
            ::fbthrift::Field::new("ensure", ::fbthrift::TType::Struct, 4),
            ::fbthrift::Field::new("patch", ::fbthrift::TType::Struct, 6),
            ::fbthrift::Field::new("patchPrior", ::fbthrift::TType::Struct, 3),
        ];
        let mut field_assign = ::std::option::Option::None;
        let mut field_clear = ::std::option::Option::None;
        let mut field_patchPrior = ::std::option::Option::None;
        let mut field_ensure = ::std::option::Option::None;
        let mut field_patch = ::std::option::Option::None;
        let _ = p.read_struct_begin(|_| ())?;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            match (fty, fid as ::std::primitive::i32) {
                (::fbthrift::TType::Stop, _) => break,
                (::fbthrift::TType::Struct, 1) => field_assign = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Bool, 2) => field_clear = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, 3) => field_patchPrior = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, 4) => field_ensure = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, 6) => field_patch = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (fty, _) => p.skip(fty)?,
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(Self {
            assign: field_assign,
            clear: field_clear.unwrap_or_default(),
            patchPrior: field_patchPrior.unwrap_or_default(),
            ensure: field_ensure.unwrap_or_default(),
            patch: field_patch.unwrap_or_default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        })
    }
}


#[allow(clippy::derivable_impls)]
impl ::std::default::Default for self::MyStructFieldPatch {
    fn default() -> Self {
        Self {
            boolVal: ::std::default::Default::default(),
            byteVal: ::std::default::Default::default(),
            i16Val: ::std::default::Default::default(),
            i32Val: ::std::default::Default::default(),
            i64Val: ::std::default::Default::default(),
            floatVal: ::std::default::Default::default(),
            doubleVal: ::std::default::Default::default(),
            stringVal: ::std::default::Default::default(),
            binaryVal: ::std::default::Default::default(),
            enumVal: ::std::default::Default::default(),
            structVal: ::std::default::Default::default(),
            unionVal: ::std::default::Default::default(),
            lateStructVal: ::std::default::Default::default(),
            optBoolVal: ::std::default::Default::default(),
            optByteVal: ::std::default::Default::default(),
            optI16Val: ::std::default::Default::default(),
            optI32Val: ::std::default::Default::default(),
            optI64Val: ::std::default::Default::default(),
            optFloatVal: ::std::default::Default::default(),
            optDoubleVal: ::std::default::Default::default(),
            optStringVal: ::std::default::Default::default(),
            optBinaryVal: ::std::default::Default::default(),
            optEnumVal: ::std::default::Default::default(),
            optStructVal: ::std::default::Default::default(),
            optLateStructVal: ::std::default::Default::default(),
            optListVal: ::std::default::Default::default(),
            optSetVal: ::std::default::Default::default(),
            optMapVal: ::std::default::Default::default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        }
    }
}

impl ::std::fmt::Debug for self::MyStructFieldPatch {
    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        formatter
            .debug_struct("MyStructFieldPatch")
            .field("boolVal", &self.boolVal)
            .field("byteVal", &self.byteVal)
            .field("i16Val", &self.i16Val)
            .field("i32Val", &self.i32Val)
            .field("i64Val", &self.i64Val)
            .field("floatVal", &self.floatVal)
            .field("doubleVal", &self.doubleVal)
            .field("stringVal", &self.stringVal)
            .field("binaryVal", &self.binaryVal)
            .field("enumVal", &self.enumVal)
            .field("structVal", &self.structVal)
            .field("unionVal", &self.unionVal)
            .field("lateStructVal", &self.lateStructVal)
            .field("optBoolVal", &self.optBoolVal)
            .field("optByteVal", &self.optByteVal)
            .field("optI16Val", &self.optI16Val)
            .field("optI32Val", &self.optI32Val)
            .field("optI64Val", &self.optI64Val)
            .field("optFloatVal", &self.optFloatVal)
            .field("optDoubleVal", &self.optDoubleVal)
            .field("optStringVal", &self.optStringVal)
            .field("optBinaryVal", &self.optBinaryVal)
            .field("optEnumVal", &self.optEnumVal)
            .field("optStructVal", &self.optStructVal)
            .field("optLateStructVal", &self.optLateStructVal)
            .field("optListVal", &self.optListVal)
            .field("optSetVal", &self.optSetVal)
            .field("optMapVal", &self.optMapVal)
            .finish()
    }
}

unsafe impl ::std::marker::Send for self::MyStructFieldPatch {}
unsafe impl ::std::marker::Sync for self::MyStructFieldPatch {}

impl ::fbthrift::GetTType for self::MyStructFieldPatch {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
}

impl ::fbthrift::GetUri for self::MyStructFieldPatch {
    fn uri() -> &'static str {
        "test.dev/fixtures/patch/MyStructFieldPatch"
    }
}

impl<P> ::fbthrift::Serialize<P> for self::MyStructFieldPatch
where
    P: ::fbthrift::ProtocolWriter,
{
    fn write(&self, p: &mut P) {
        p.write_struct_begin("MyStructFieldPatch");
        p.write_field_begin("boolVal", ::fbthrift::TType::Struct, -1);
        ::fbthrift::Serialize::write(&self.boolVal, p);
        p.write_field_end();
        p.write_field_begin("byteVal", ::fbthrift::TType::Struct, -2);
        ::fbthrift::Serialize::write(&self.byteVal, p);
        p.write_field_end();
        p.write_field_begin("i16Val", ::fbthrift::TType::Struct, -3);
        ::fbthrift::Serialize::write(&self.i16Val, p);
        p.write_field_end();
        p.write_field_begin("i32Val", ::fbthrift::TType::Struct, -4);
        ::fbthrift::Serialize::write(&self.i32Val, p);
        p.write_field_end();
        p.write_field_begin("i64Val", ::fbthrift::TType::Struct, -5);
        ::fbthrift::Serialize::write(&self.i64Val, p);
        p.write_field_end();
        p.write_field_begin("floatVal", ::fbthrift::TType::Struct, -6);
        ::fbthrift::Serialize::write(&self.floatVal, p);
        p.write_field_end();
        p.write_field_begin("doubleVal", ::fbthrift::TType::Struct, -7);
        ::fbthrift::Serialize::write(&self.doubleVal, p);
        p.write_field_end();
        p.write_field_begin("stringVal", ::fbthrift::TType::Struct, -8);
        ::fbthrift::Serialize::write(&self.stringVal, p);
        p.write_field_end();
        p.write_field_begin("binaryVal", ::fbthrift::TType::Struct, -9);
        ::fbthrift::Serialize::write(&self.binaryVal, p);
        p.write_field_end();
        p.write_field_begin("enumVal", ::fbthrift::TType::Struct, -10);
        ::fbthrift::Serialize::write(&self.enumVal, p);
        p.write_field_end();
        p.write_field_begin("structVal", ::fbthrift::TType::Struct, -11);
        ::fbthrift::Serialize::write(&self.structVal, p);
        p.write_field_end();
        p.write_field_begin("unionVal", ::fbthrift::TType::Struct, -12);
        ::fbthrift::Serialize::write(&self.unionVal, p);
        p.write_field_end();
        p.write_field_begin("lateStructVal", ::fbthrift::TType::Struct, -13);
        ::fbthrift::Serialize::write(&self.lateStructVal, p);
        p.write_field_end();
        p.write_field_begin("optBoolVal", ::fbthrift::TType::Struct, -14);
        ::fbthrift::Serialize::write(&self.optBoolVal, p);
        p.write_field_end();
        p.write_field_begin("optByteVal", ::fbthrift::TType::Struct, -15);
        ::fbthrift::Serialize::write(&self.optByteVal, p);
        p.write_field_end();
        p.write_field_begin("optI16Val", ::fbthrift::TType::Struct, -16);
        ::fbthrift::Serialize::write(&self.optI16Val, p);
        p.write_field_end();
        p.write_field_begin("optI32Val", ::fbthrift::TType::Struct, -17);
        ::fbthrift::Serialize::write(&self.optI32Val, p);
        p.write_field_end();
        p.write_field_begin("optI64Val", ::fbthrift::TType::Struct, -18);
        ::fbthrift::Serialize::write(&self.optI64Val, p);
        p.write_field_end();
        p.write_field_begin("optFloatVal", ::fbthrift::TType::Struct, -19);
        ::fbthrift::Serialize::write(&self.optFloatVal, p);
        p.write_field_end();
        p.write_field_begin("optDoubleVal", ::fbthrift::TType::Struct, -20);
        ::fbthrift::Serialize::write(&self.optDoubleVal, p);
        p.write_field_end();
        p.write_field_begin("optStringVal", ::fbthrift::TType::Struct, -21);
        ::fbthrift::Serialize::write(&self.optStringVal, p);
        p.write_field_end();
        p.write_field_begin("optBinaryVal", ::fbthrift::TType::Struct, -22);
        ::fbthrift::Serialize::write(&self.optBinaryVal, p);
        p.write_field_end();
        p.write_field_begin("optEnumVal", ::fbthrift::TType::Struct, -23);
        ::fbthrift::Serialize::write(&self.optEnumVal, p);
        p.write_field_end();
        p.write_field_begin("optStructVal", ::fbthrift::TType::Struct, -24);
        ::fbthrift::Serialize::write(&self.optStructVal, p);
        p.write_field_end();
        p.write_field_begin("optLateStructVal", ::fbthrift::TType::Struct, -25);
        ::fbthrift::Serialize::write(&self.optLateStructVal, p);
        p.write_field_end();
        p.write_field_begin("optListVal", ::fbthrift::TType::Struct, -26);
        ::fbthrift::Serialize::write(&self.optListVal, p);
        p.write_field_end();
        p.write_field_begin("optSetVal", ::fbthrift::TType::Struct, -27);
        ::fbthrift::Serialize::write(&self.optSetVal, p);
        p.write_field_end();
        p.write_field_begin("optMapVal", ::fbthrift::TType::Struct, -28);
        ::fbthrift::Serialize::write(&self.optMapVal, p);
        p.write_field_end();
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for self::MyStructFieldPatch
where
    P: ::fbthrift::ProtocolReader,
{
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        static FIELDS: &[::fbthrift::Field] = &[
            ::fbthrift::Field::new("binaryVal", ::fbthrift::TType::Struct, -9),
            ::fbthrift::Field::new("boolVal", ::fbthrift::TType::Struct, -1),
            ::fbthrift::Field::new("byteVal", ::fbthrift::TType::Struct, -2),
            ::fbthrift::Field::new("doubleVal", ::fbthrift::TType::Struct, -7),
            ::fbthrift::Field::new("enumVal", ::fbthrift::TType::Struct, -10),
            ::fbthrift::Field::new("floatVal", ::fbthrift::TType::Struct, -6),
            ::fbthrift::Field::new("i16Val", ::fbthrift::TType::Struct, -3),
            ::fbthrift::Field::new("i32Val", ::fbthrift::TType::Struct, -4),
            ::fbthrift::Field::new("i64Val", ::fbthrift::TType::Struct, -5),
            ::fbthrift::Field::new("lateStructVal", ::fbthrift::TType::Struct, -13),
            ::fbthrift::Field::new("optBinaryVal", ::fbthrift::TType::Struct, -22),
            ::fbthrift::Field::new("optBoolVal", ::fbthrift::TType::Struct, -14),
            ::fbthrift::Field::new("optByteVal", ::fbthrift::TType::Struct, -15),
            ::fbthrift::Field::new("optDoubleVal", ::fbthrift::TType::Struct, -20),
            ::fbthrift::Field::new("optEnumVal", ::fbthrift::TType::Struct, -23),
            ::fbthrift::Field::new("optFloatVal", ::fbthrift::TType::Struct, -19),
            ::fbthrift::Field::new("optI16Val", ::fbthrift::TType::Struct, -16),
            ::fbthrift::Field::new("optI32Val", ::fbthrift::TType::Struct, -17),
            ::fbthrift::Field::new("optI64Val", ::fbthrift::TType::Struct, -18),
            ::fbthrift::Field::new("optLateStructVal", ::fbthrift::TType::Struct, -25),
            ::fbthrift::Field::new("optListVal", ::fbthrift::TType::Struct, -26),
            ::fbthrift::Field::new("optMapVal", ::fbthrift::TType::Struct, -28),
            ::fbthrift::Field::new("optSetVal", ::fbthrift::TType::Struct, -27),
            ::fbthrift::Field::new("optStringVal", ::fbthrift::TType::Struct, -21),
            ::fbthrift::Field::new("optStructVal", ::fbthrift::TType::Struct, -24),
            ::fbthrift::Field::new("stringVal", ::fbthrift::TType::Struct, -8),
            ::fbthrift::Field::new("structVal", ::fbthrift::TType::Struct, -11),
            ::fbthrift::Field::new("unionVal", ::fbthrift::TType::Struct, -12),
        ];
        let mut field_boolVal = ::std::option::Option::None;
        let mut field_byteVal = ::std::option::Option::None;
        let mut field_i16Val = ::std::option::Option::None;
        let mut field_i32Val = ::std::option::Option::None;
        let mut field_i64Val = ::std::option::Option::None;
        let mut field_floatVal = ::std::option::Option::None;
        let mut field_doubleVal = ::std::option::Option::None;
        let mut field_stringVal = ::std::option::Option::None;
        let mut field_binaryVal = ::std::option::Option::None;
        let mut field_enumVal = ::std::option::Option::None;
        let mut field_structVal = ::std::option::Option::None;
        let mut field_unionVal = ::std::option::Option::None;
        let mut field_lateStructVal = ::std::option::Option::None;
        let mut field_optBoolVal = ::std::option::Option::None;
        let mut field_optByteVal = ::std::option::Option::None;
        let mut field_optI16Val = ::std::option::Option::None;
        let mut field_optI32Val = ::std::option::Option::None;
        let mut field_optI64Val = ::std::option::Option::None;
        let mut field_optFloatVal = ::std::option::Option::None;
        let mut field_optDoubleVal = ::std::option::Option::None;
        let mut field_optStringVal = ::std::option::Option::None;
        let mut field_optBinaryVal = ::std::option::Option::None;
        let mut field_optEnumVal = ::std::option::Option::None;
        let mut field_optStructVal = ::std::option::Option::None;
        let mut field_optLateStructVal = ::std::option::Option::None;
        let mut field_optListVal = ::std::option::Option::None;
        let mut field_optSetVal = ::std::option::Option::None;
        let mut field_optMapVal = ::std::option::Option::None;
        let _ = p.read_struct_begin(|_| ())?;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            match (fty, fid as ::std::primitive::i32) {
                (::fbthrift::TType::Stop, _) => break,
                (::fbthrift::TType::Struct, -1) => field_boolVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -2) => field_byteVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -3) => field_i16Val = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -4) => field_i32Val = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -5) => field_i64Val = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -6) => field_floatVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -7) => field_doubleVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -8) => field_stringVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -9) => field_binaryVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -10) => field_enumVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -11) => field_structVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -12) => field_unionVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -13) => field_lateStructVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -14) => field_optBoolVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -15) => field_optByteVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -16) => field_optI16Val = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -17) => field_optI32Val = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -18) => field_optI64Val = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -19) => field_optFloatVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -20) => field_optDoubleVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -21) => field_optStringVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -22) => field_optBinaryVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -23) => field_optEnumVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -24) => field_optStructVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -25) => field_optLateStructVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -26) => field_optListVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -27) => field_optSetVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -28) => field_optMapVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (fty, _) => p.skip(fty)?,
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(Self {
            boolVal: field_boolVal.unwrap_or_default(),
            byteVal: field_byteVal.unwrap_or_default(),
            i16Val: field_i16Val.unwrap_or_default(),
            i32Val: field_i32Val.unwrap_or_default(),
            i64Val: field_i64Val.unwrap_or_default(),
            floatVal: field_floatVal.unwrap_or_default(),
            doubleVal: field_doubleVal.unwrap_or_default(),
            stringVal: field_stringVal.unwrap_or_default(),
            binaryVal: field_binaryVal.unwrap_or_default(),
            enumVal: field_enumVal.unwrap_or_default(),
            structVal: field_structVal.unwrap_or_default(),
            unionVal: field_unionVal.unwrap_or_default(),
            lateStructVal: field_lateStructVal.unwrap_or_default(),
            optBoolVal: field_optBoolVal.unwrap_or_default(),
            optByteVal: field_optByteVal.unwrap_or_default(),
            optI16Val: field_optI16Val.unwrap_or_default(),
            optI32Val: field_optI32Val.unwrap_or_default(),
            optI64Val: field_optI64Val.unwrap_or_default(),
            optFloatVal: field_optFloatVal.unwrap_or_default(),
            optDoubleVal: field_optDoubleVal.unwrap_or_default(),
            optStringVal: field_optStringVal.unwrap_or_default(),
            optBinaryVal: field_optBinaryVal.unwrap_or_default(),
            optEnumVal: field_optEnumVal.unwrap_or_default(),
            optStructVal: field_optStructVal.unwrap_or_default(),
            optLateStructVal: field_optLateStructVal.unwrap_or_default(),
            optListVal: field_optListVal.unwrap_or_default(),
            optSetVal: field_optSetVal.unwrap_or_default(),
            optMapVal: field_optMapVal.unwrap_or_default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        })
    }
}


#[allow(clippy::derivable_impls)]
impl ::std::default::Default for self::MyStructFieldN10Patch {
    fn default() -> Self {
        Self {
            assign: ::std::option::Option::None,
            clear: ::std::default::Default::default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        }
    }
}

impl ::std::fmt::Debug for self::MyStructFieldN10Patch {
    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        formatter
            .debug_struct("MyStructFieldN10Patch")
            .field("assign", &self.assign)
            .field("clear", &self.clear)
            .finish()
    }
}

unsafe impl ::std::marker::Send for self::MyStructFieldN10Patch {}
unsafe impl ::std::marker::Sync for self::MyStructFieldN10Patch {}

impl ::fbthrift::GetTType for self::MyStructFieldN10Patch {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
}

impl ::fbthrift::GetUri for self::MyStructFieldN10Patch {
    fn uri() -> &'static str {
        "test.dev/fixtures/patch/MyStructFieldN10Patch"
    }
}

impl<P> ::fbthrift::Serialize<P> for self::MyStructFieldN10Patch
where
    P: ::fbthrift::ProtocolWriter,
{
    fn write(&self, p: &mut P) {
        p.write_struct_begin("MyStructFieldN10Patch");
        if let ::std::option::Option::Some(some) = &self.assign {
            p.write_field_begin("assign", ::fbthrift::TType::I32, 1);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        p.write_field_begin("clear", ::fbthrift::TType::Bool, 2);
        ::fbthrift::Serialize::write(&self.clear, p);
        p.write_field_end();
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for self::MyStructFieldN10Patch
where
    P: ::fbthrift::ProtocolReader,
{
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        static FIELDS: &[::fbthrift::Field] = &[
            ::fbthrift::Field::new("assign", ::fbthrift::TType::I32, 1),
            ::fbthrift::Field::new("clear", ::fbthrift::TType::Bool, 2),
        ];
        let mut field_assign = ::std::option::Option::None;
        let mut field_clear = ::std::option::Option::None;
        let _ = p.read_struct_begin(|_| ())?;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            match (fty, fid as ::std::primitive::i32) {
                (::fbthrift::TType::Stop, _) => break,
                (::fbthrift::TType::I32, 1) => field_assign = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Bool, 2) => field_clear = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (fty, _) => p.skip(fty)?,
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(Self {
            assign: field_assign,
            clear: field_clear.unwrap_or_default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        })
    }
}


#[allow(clippy::derivable_impls)]
impl ::std::default::Default for self::MyStructFieldN23Patch {
    fn default() -> Self {
        Self {
            assign: ::std::option::Option::None,
            clear: ::std::default::Default::default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        }
    }
}

impl ::std::fmt::Debug for self::MyStructFieldN23Patch {
    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        formatter
            .debug_struct("MyStructFieldN23Patch")
            .field("assign", &self.assign)
            .field("clear", &self.clear)
            .finish()
    }
}

unsafe impl ::std::marker::Send for self::MyStructFieldN23Patch {}
unsafe impl ::std::marker::Sync for self::MyStructFieldN23Patch {}

impl ::fbthrift::GetTType for self::MyStructFieldN23Patch {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
}

impl ::fbthrift::GetUri for self::MyStructFieldN23Patch {
    fn uri() -> &'static str {
        "test.dev/fixtures/patch/MyStructFieldN23Patch"
    }
}

impl<P> ::fbthrift::Serialize<P> for self::MyStructFieldN23Patch
where
    P: ::fbthrift::ProtocolWriter,
{
    fn write(&self, p: &mut P) {
        p.write_struct_begin("MyStructFieldN23Patch");
        if let ::std::option::Option::Some(some) = &self.assign {
            p.write_field_begin("assign", ::fbthrift::TType::I32, 1);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        p.write_field_begin("clear", ::fbthrift::TType::Bool, 2);
        ::fbthrift::Serialize::write(&self.clear, p);
        p.write_field_end();
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for self::MyStructFieldN23Patch
where
    P: ::fbthrift::ProtocolReader,
{
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        static FIELDS: &[::fbthrift::Field] = &[
            ::fbthrift::Field::new("assign", ::fbthrift::TType::I32, 1),
            ::fbthrift::Field::new("clear", ::fbthrift::TType::Bool, 2),
        ];
        let mut field_assign = ::std::option::Option::None;
        let mut field_clear = ::std::option::Option::None;
        let _ = p.read_struct_begin(|_| ())?;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            match (fty, fid as ::std::primitive::i32) {
                (::fbthrift::TType::Stop, _) => break,
                (::fbthrift::TType::I32, 1) => field_assign = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Bool, 2) => field_clear = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (fty, _) => p.skip(fty)?,
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(Self {
            assign: field_assign,
            clear: field_clear.unwrap_or_default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        })
    }
}


#[allow(clippy::derivable_impls)]
impl ::std::default::Default for self::MyStructFieldN26Patch {
    fn default() -> Self {
        Self {
            assign: ::std::option::Option::None,
            clear: ::std::default::Default::default(),
            remove: ::std::default::Default::default(),
            prepend: ::std::default::Default::default(),
            append: ::std::default::Default::default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        }
    }
}

impl ::std::fmt::Debug for self::MyStructFieldN26Patch {
    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        formatter
            .debug_struct("MyStructFieldN26Patch")
            .field("assign", &self.assign)
            .field("clear", &self.clear)
            .field("remove", &self.remove)
            .field("prepend", &self.prepend)
            .field("append", &self.append)
            .finish()
    }
}

unsafe impl ::std::marker::Send for self::MyStructFieldN26Patch {}
unsafe impl ::std::marker::Sync for self::MyStructFieldN26Patch {}

impl ::fbthrift::GetTType for self::MyStructFieldN26Patch {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
}

impl ::fbthrift::GetUri for self::MyStructFieldN26Patch {
    fn uri() -> &'static str {
        "test.dev/fixtures/patch/MyStructFieldN26Patch"
    }
}

impl<P> ::fbthrift::Serialize<P> for self::MyStructFieldN26Patch
where
    P: ::fbthrift::ProtocolWriter,
{
    fn write(&self, p: &mut P) {
        p.write_struct_begin("MyStructFieldN26Patch");
        if let ::std::option::Option::Some(some) = &self.assign {
            p.write_field_begin("assign", ::fbthrift::TType::List, 1);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        p.write_field_begin("clear", ::fbthrift::TType::Bool, 2);
        ::fbthrift::Serialize::write(&self.clear, p);
        p.write_field_end();
        p.write_field_begin("remove", ::fbthrift::TType::List, 7);
        ::fbthrift::Serialize::write(&self.remove, p);
        p.write_field_end();
        p.write_field_begin("prepend", ::fbthrift::TType::List, 8);
        ::fbthrift::Serialize::write(&self.prepend, p);
        p.write_field_end();
        p.write_field_begin("append", ::fbthrift::TType::List, 9);
        ::fbthrift::Serialize::write(&self.append, p);
        p.write_field_end();
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for self::MyStructFieldN26Patch
where
    P: ::fbthrift::ProtocolReader,
{
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        static FIELDS: &[::fbthrift::Field] = &[
            ::fbthrift::Field::new("append", ::fbthrift::TType::List, 9),
            ::fbthrift::Field::new("assign", ::fbthrift::TType::List, 1),
            ::fbthrift::Field::new("clear", ::fbthrift::TType::Bool, 2),
            ::fbthrift::Field::new("prepend", ::fbthrift::TType::List, 8),
            ::fbthrift::Field::new("remove", ::fbthrift::TType::List, 7),
        ];
        let mut field_assign = ::std::option::Option::None;
        let mut field_clear = ::std::option::Option::None;
        let mut field_remove = ::std::option::Option::None;
        let mut field_prepend = ::std::option::Option::None;
        let mut field_append = ::std::option::Option::None;
        let _ = p.read_struct_begin(|_| ())?;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            match (fty, fid as ::std::primitive::i32) {
                (::fbthrift::TType::Stop, _) => break,
                (::fbthrift::TType::List, 1) => field_assign = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Bool, 2) => field_clear = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::List, 7) => field_remove = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::List, 8) => field_prepend = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::List, 9) => field_append = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (fty, _) => p.skip(fty)?,
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(Self {
            assign: field_assign,
            clear: field_clear.unwrap_or_default(),
            remove: field_remove.unwrap_or_default(),
            prepend: field_prepend.unwrap_or_default(),
            append: field_append.unwrap_or_default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        })
    }
}


#[allow(clippy::derivable_impls)]
impl ::std::default::Default for self::MyStructFieldN27Patch {
    fn default() -> Self {
        Self {
            assign: ::std::option::Option::None,
            clear: ::std::default::Default::default(),
            remove: ::std::default::Default::default(),
            add: ::std::default::Default::default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        }
    }
}

impl ::std::fmt::Debug for self::MyStructFieldN27Patch {
    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        formatter
            .debug_struct("MyStructFieldN27Patch")
            .field("assign", &self.assign)
            .field("clear", &self.clear)
            .field("remove", &self.remove)
            .field("add", &self.add)
            .finish()
    }
}

unsafe impl ::std::marker::Send for self::MyStructFieldN27Patch {}
unsafe impl ::std::marker::Sync for self::MyStructFieldN27Patch {}

impl ::fbthrift::GetTType for self::MyStructFieldN27Patch {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
}

impl ::fbthrift::GetUri for self::MyStructFieldN27Patch {
    fn uri() -> &'static str {
        "test.dev/fixtures/patch/MyStructFieldN27Patch"
    }
}

impl<P> ::fbthrift::Serialize<P> for self::MyStructFieldN27Patch
where
    P: ::fbthrift::ProtocolWriter,
{
    fn write(&self, p: &mut P) {
        p.write_struct_begin("MyStructFieldN27Patch");
        if let ::std::option::Option::Some(some) = &self.assign {
            p.write_field_begin("assign", ::fbthrift::TType::Set, 1);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        p.write_field_begin("clear", ::fbthrift::TType::Bool, 2);
        ::fbthrift::Serialize::write(&self.clear, p);
        p.write_field_end();
        p.write_field_begin("remove", ::fbthrift::TType::Set, 7);
        ::fbthrift::Serialize::write(&self.remove, p);
        p.write_field_end();
        p.write_field_begin("add", ::fbthrift::TType::Set, 8);
        ::fbthrift::Serialize::write(&self.add, p);
        p.write_field_end();
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for self::MyStructFieldN27Patch
where
    P: ::fbthrift::ProtocolReader,
{
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        static FIELDS: &[::fbthrift::Field] = &[
            ::fbthrift::Field::new("add", ::fbthrift::TType::Set, 8),
            ::fbthrift::Field::new("assign", ::fbthrift::TType::Set, 1),
            ::fbthrift::Field::new("clear", ::fbthrift::TType::Bool, 2),
            ::fbthrift::Field::new("remove", ::fbthrift::TType::Set, 7),
        ];
        let mut field_assign = ::std::option::Option::None;
        let mut field_clear = ::std::option::Option::None;
        let mut field_remove = ::std::option::Option::None;
        let mut field_add = ::std::option::Option::None;
        let _ = p.read_struct_begin(|_| ())?;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            match (fty, fid as ::std::primitive::i32) {
                (::fbthrift::TType::Stop, _) => break,
                (::fbthrift::TType::Set, 1) => field_assign = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Bool, 2) => field_clear = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Set, 7) => field_remove = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Set, 8) => field_add = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (fty, _) => p.skip(fty)?,
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(Self {
            assign: field_assign,
            clear: field_clear.unwrap_or_default(),
            remove: field_remove.unwrap_or_default(),
            add: field_add.unwrap_or_default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        })
    }
}


#[allow(clippy::derivable_impls)]
impl ::std::default::Default for self::MyStructFieldN28Patch {
    fn default() -> Self {
        Self {
            assign: ::std::option::Option::None,
            clear: ::std::default::Default::default(),
            add: ::std::default::Default::default(),
            remove: ::std::default::Default::default(),
            put: ::std::default::Default::default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        }
    }
}

impl ::std::fmt::Debug for self::MyStructFieldN28Patch {
    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        formatter
            .debug_struct("MyStructFieldN28Patch")
            .field("assign", &self.assign)
            .field("clear", &self.clear)
            .field("add", &self.add)
            .field("remove", &self.remove)
            .field("put", &self.put)
            .finish()
    }
}

unsafe impl ::std::marker::Send for self::MyStructFieldN28Patch {}
unsafe impl ::std::marker::Sync for self::MyStructFieldN28Patch {}

impl ::fbthrift::GetTType for self::MyStructFieldN28Patch {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
}

impl ::fbthrift::GetUri for self::MyStructFieldN28Patch {
    fn uri() -> &'static str {
        "test.dev/fixtures/patch/MyStructFieldN28Patch"
    }
}

impl<P> ::fbthrift::Serialize<P> for self::MyStructFieldN28Patch
where
    P: ::fbthrift::ProtocolWriter,
{
    fn write(&self, p: &mut P) {
        p.write_struct_begin("MyStructFieldN28Patch");
        if let ::std::option::Option::Some(some) = &self.assign {
            p.write_field_begin("assign", ::fbthrift::TType::Map, 1);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        p.write_field_begin("clear", ::fbthrift::TType::Bool, 2);
        ::fbthrift::Serialize::write(&self.clear, p);
        p.write_field_end();
        p.write_field_begin("add", ::fbthrift::TType::Map, 5);
        ::fbthrift::Serialize::write(&self.add, p);
        p.write_field_end();
        p.write_field_begin("remove", ::fbthrift::TType::Set, 7);
        ::fbthrift::Serialize::write(&self.remove, p);
        p.write_field_end();
        p.write_field_begin("put", ::fbthrift::TType::Map, 9);
        ::fbthrift::Serialize::write(&self.put, p);
        p.write_field_end();
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for self::MyStructFieldN28Patch
where
    P: ::fbthrift::ProtocolReader,
{
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        static FIELDS: &[::fbthrift::Field] = &[
            ::fbthrift::Field::new("add", ::fbthrift::TType::Map, 5),
            ::fbthrift::Field::new("assign", ::fbthrift::TType::Map, 1),
            ::fbthrift::Field::new("clear", ::fbthrift::TType::Bool, 2),
            ::fbthrift::Field::new("put", ::fbthrift::TType::Map, 9),
            ::fbthrift::Field::new("remove", ::fbthrift::TType::Set, 7),
        ];
        let mut field_assign = ::std::option::Option::None;
        let mut field_clear = ::std::option::Option::None;
        let mut field_add = ::std::option::Option::None;
        let mut field_remove = ::std::option::Option::None;
        let mut field_put = ::std::option::Option::None;
        let _ = p.read_struct_begin(|_| ())?;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            match (fty, fid as ::std::primitive::i32) {
                (::fbthrift::TType::Stop, _) => break,
                (::fbthrift::TType::Map, 1) => field_assign = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Bool, 2) => field_clear = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Map, 5) => field_add = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Set, 7) => field_remove = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Map, 9) => field_put = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (fty, _) => p.skip(fty)?,
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(Self {
            assign: field_assign,
            clear: field_clear.unwrap_or_default(),
            add: field_add.unwrap_or_default(),
            remove: field_remove.unwrap_or_default(),
            put: field_put.unwrap_or_default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        })
    }
}


#[allow(clippy::derivable_impls)]
impl ::std::default::Default for self::MyStructPatch {
    fn default() -> Self {
        Self {
            assign: ::std::option::Option::None,
            clear: ::std::default::Default::default(),
            patchPrior: ::std::default::Default::default(),
            ensure: ::std::default::Default::default(),
            patch: ::std::default::Default::default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        }
    }
}

impl ::std::fmt::Debug for self::MyStructPatch {
    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        formatter
            .debug_struct("MyStructPatch")
            .field("assign", &self.assign)
            .field("clear", &self.clear)
            .field("patchPrior", &self.patchPrior)
            .field("ensure", &self.ensure)
            .field("patch", &self.patch)
            .finish()
    }
}

unsafe impl ::std::marker::Send for self::MyStructPatch {}
unsafe impl ::std::marker::Sync for self::MyStructPatch {}

impl ::fbthrift::GetTType for self::MyStructPatch {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
}

impl ::fbthrift::GetUri for self::MyStructPatch {
    fn uri() -> &'static str {
        "test.dev/fixtures/patch/MyStructPatch"
    }
}

impl<P> ::fbthrift::Serialize<P> for self::MyStructPatch
where
    P: ::fbthrift::ProtocolWriter,
{
    fn write(&self, p: &mut P) {
        p.write_struct_begin("MyStructPatch");
        if let ::std::option::Option::Some(some) = &self.assign {
            p.write_field_begin("assign", ::fbthrift::TType::Struct, 1);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        p.write_field_begin("clear", ::fbthrift::TType::Bool, 2);
        ::fbthrift::Serialize::write(&self.clear, p);
        p.write_field_end();
        p.write_field_begin("patchPrior", ::fbthrift::TType::Struct, 3);
        ::fbthrift::Serialize::write(&self.patchPrior, p);
        p.write_field_end();
        p.write_field_begin("ensure", ::fbthrift::TType::Struct, 5);
        ::fbthrift::Serialize::write(&self.ensure, p);
        p.write_field_end();
        p.write_field_begin("patch", ::fbthrift::TType::Struct, 6);
        ::fbthrift::Serialize::write(&self.patch, p);
        p.write_field_end();
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for self::MyStructPatch
where
    P: ::fbthrift::ProtocolReader,
{
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        static FIELDS: &[::fbthrift::Field] = &[
            ::fbthrift::Field::new("assign", ::fbthrift::TType::Struct, 1),
            ::fbthrift::Field::new("clear", ::fbthrift::TType::Bool, 2),
            ::fbthrift::Field::new("ensure", ::fbthrift::TType::Struct, 5),
            ::fbthrift::Field::new("patch", ::fbthrift::TType::Struct, 6),
            ::fbthrift::Field::new("patchPrior", ::fbthrift::TType::Struct, 3),
        ];
        let mut field_assign = ::std::option::Option::None;
        let mut field_clear = ::std::option::Option::None;
        let mut field_patchPrior = ::std::option::Option::None;
        let mut field_ensure = ::std::option::Option::None;
        let mut field_patch = ::std::option::Option::None;
        let _ = p.read_struct_begin(|_| ())?;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            match (fty, fid as ::std::primitive::i32) {
                (::fbthrift::TType::Stop, _) => break,
                (::fbthrift::TType::Struct, 1) => field_assign = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Bool, 2) => field_clear = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, 3) => field_patchPrior = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, 5) => field_ensure = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, 6) => field_patch = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (fty, _) => p.skip(fty)?,
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(Self {
            assign: field_assign,
            clear: field_clear.unwrap_or_default(),
            patchPrior: field_patchPrior.unwrap_or_default(),
            ensure: field_ensure.unwrap_or_default(),
            patch: field_patch.unwrap_or_default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        })
    }
}


#[allow(clippy::derivable_impls)]
impl ::std::default::Default for self::LateDefStructFieldPatch {
    fn default() -> Self {
        Self {
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        }
    }
}

impl ::std::fmt::Debug for self::LateDefStructFieldPatch {
    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        formatter
            .debug_struct("LateDefStructFieldPatch")
            .finish()
    }
}

unsafe impl ::std::marker::Send for self::LateDefStructFieldPatch {}
unsafe impl ::std::marker::Sync for self::LateDefStructFieldPatch {}

impl ::fbthrift::GetTType for self::LateDefStructFieldPatch {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
}

impl ::fbthrift::GetUri for self::LateDefStructFieldPatch {
    fn uri() -> &'static str {
        "test.dev/fixtures/patch/LateDefStructFieldPatch"
    }
}

impl<P> ::fbthrift::Serialize<P> for self::LateDefStructFieldPatch
where
    P: ::fbthrift::ProtocolWriter,
{
    fn write(&self, p: &mut P) {
        p.write_struct_begin("LateDefStructFieldPatch");
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for self::LateDefStructFieldPatch
where
    P: ::fbthrift::ProtocolReader,
{
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        static FIELDS: &[::fbthrift::Field] = &[
        ];
        let _ = p.read_struct_begin(|_| ())?;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            match (fty, fid as ::std::primitive::i32) {
                (::fbthrift::TType::Stop, _) => break,
                (fty, _) => p.skip(fty)?,
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(Self {
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        })
    }
}


#[allow(clippy::derivable_impls)]
impl ::std::default::Default for self::LateDefStructPatch {
    fn default() -> Self {
        Self {
            assign: ::std::option::Option::None,
            clear: ::std::default::Default::default(),
            patchPrior: ::std::default::Default::default(),
            ensure: ::std::default::Default::default(),
            patch: ::std::default::Default::default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        }
    }
}

impl ::std::fmt::Debug for self::LateDefStructPatch {
    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        formatter
            .debug_struct("LateDefStructPatch")
            .field("assign", &self.assign)
            .field("clear", &self.clear)
            .field("patchPrior", &self.patchPrior)
            .field("ensure", &self.ensure)
            .field("patch", &self.patch)
            .finish()
    }
}

unsafe impl ::std::marker::Send for self::LateDefStructPatch {}
unsafe impl ::std::marker::Sync for self::LateDefStructPatch {}

impl ::fbthrift::GetTType for self::LateDefStructPatch {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
}

impl ::fbthrift::GetUri for self::LateDefStructPatch {
    fn uri() -> &'static str {
        "test.dev/fixtures/patch/LateDefStructPatch"
    }
}

impl<P> ::fbthrift::Serialize<P> for self::LateDefStructPatch
where
    P: ::fbthrift::ProtocolWriter,
{
    fn write(&self, p: &mut P) {
        p.write_struct_begin("LateDefStructPatch");
        if let ::std::option::Option::Some(some) = &self.assign {
            p.write_field_begin("assign", ::fbthrift::TType::Struct, 1);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        p.write_field_begin("clear", ::fbthrift::TType::Bool, 2);
        ::fbthrift::Serialize::write(&self.clear, p);
        p.write_field_end();
        p.write_field_begin("patchPrior", ::fbthrift::TType::Struct, 3);
        ::fbthrift::Serialize::write(&self.patchPrior, p);
        p.write_field_end();
        p.write_field_begin("ensure", ::fbthrift::TType::Struct, 5);
        ::fbthrift::Serialize::write(&self.ensure, p);
        p.write_field_end();
        p.write_field_begin("patch", ::fbthrift::TType::Struct, 6);
        ::fbthrift::Serialize::write(&self.patch, p);
        p.write_field_end();
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for self::LateDefStructPatch
where
    P: ::fbthrift::ProtocolReader,
{
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        static FIELDS: &[::fbthrift::Field] = &[
            ::fbthrift::Field::new("assign", ::fbthrift::TType::Struct, 1),
            ::fbthrift::Field::new("clear", ::fbthrift::TType::Bool, 2),
            ::fbthrift::Field::new("ensure", ::fbthrift::TType::Struct, 5),
            ::fbthrift::Field::new("patch", ::fbthrift::TType::Struct, 6),
            ::fbthrift::Field::new("patchPrior", ::fbthrift::TType::Struct, 3),
        ];
        let mut field_assign = ::std::option::Option::None;
        let mut field_clear = ::std::option::Option::None;
        let mut field_patchPrior = ::std::option::Option::None;
        let mut field_ensure = ::std::option::Option::None;
        let mut field_patch = ::std::option::Option::None;
        let _ = p.read_struct_begin(|_| ())?;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            match (fty, fid as ::std::primitive::i32) {
                (::fbthrift::TType::Stop, _) => break,
                (::fbthrift::TType::Struct, 1) => field_assign = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Bool, 2) => field_clear = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, 3) => field_patchPrior = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, 5) => field_ensure = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, 6) => field_patch = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (fty, _) => p.skip(fty)?,
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(Self {
            assign: field_assign,
            clear: field_clear.unwrap_or_default(),
            patchPrior: field_patchPrior.unwrap_or_default(),
            ensure: field_ensure.unwrap_or_default(),
            patch: field_patch.unwrap_or_default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        })
    }
}


mod dot_dot {
    #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct OtherFields(pub(crate) ());

    #[allow(dead_code)] // if serde isn't being used
    pub(super) fn default_for_serde_deserialize() -> OtherFields {
        OtherFields(())
    }
}
