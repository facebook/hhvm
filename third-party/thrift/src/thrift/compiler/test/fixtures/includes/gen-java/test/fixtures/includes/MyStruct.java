/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.includes;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import com.google.common.collect.*;
import java.util.*;
import javax.annotation.Nullable;
import org.apache.thrift.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;
import static com.google.common.base.MoreObjects.toStringHelper;
import static com.google.common.base.MoreObjects.ToStringHelper;

@SwiftGenerated
@com.facebook.swift.codec.ThriftStruct(value="MyStruct", builder=MyStruct.Builder.class)
public final class MyStruct implements com.facebook.thrift.payload.ThriftSerializable {

    @ThriftConstructor
    public MyStruct(
        @com.facebook.swift.codec.ThriftField(value=1, name="MyIncludedField", requiredness=Requiredness.NONE) final test.fixtures.includes.includes.Included myIncludedField,
        @com.facebook.swift.codec.ThriftField(value=2, name="MyOtherIncludedField", requiredness=Requiredness.NONE) final test.fixtures.includes.includes.Included myOtherIncludedField,
        @com.facebook.swift.codec.ThriftField(value=3, name="MyIncludedInt", requiredness=Requiredness.NONE) final long myIncludedInt
    ) {
        this.myIncludedField = myIncludedField;
        this.myOtherIncludedField = myOtherIncludedField;
        this.myIncludedInt = myIncludedInt;
    }
    
    @ThriftConstructor
    protected MyStruct() {
      this.myIncludedField = new test.fixtures.includes.includes.Included.Builder().setMyIntField(2L).setMyTransitiveField(test.fixtures.includes.transitive.Constants.EXAMPLE_FOO).build();
      this.myOtherIncludedField = null;
      this.myIncludedInt = 42L;
    }
    
    public static class Builder {
    
        private test.fixtures.includes.includes.Included myIncludedField = new test.fixtures.includes.includes.Included.Builder().setMyIntField(2L).setMyTransitiveField(test.fixtures.includes.transitive.Constants.EXAMPLE_FOO).build();
        private test.fixtures.includes.includes.Included myOtherIncludedField = null;
        private long myIncludedInt = 42L;
    
        @com.facebook.swift.codec.ThriftField(value=1, name="MyIncludedField", requiredness=Requiredness.NONE)
        public Builder setMyIncludedField(test.fixtures.includes.includes.Included myIncludedField) {
            this.myIncludedField = myIncludedField;
            return this;
        }
    
        public test.fixtures.includes.includes.Included getMyIncludedField() { return myIncludedField; }
    
            @com.facebook.swift.codec.ThriftField(value=2, name="MyOtherIncludedField", requiredness=Requiredness.NONE)
        public Builder setMyOtherIncludedField(test.fixtures.includes.includes.Included myOtherIncludedField) {
            this.myOtherIncludedField = myOtherIncludedField;
            return this;
        }
    
        public test.fixtures.includes.includes.Included getMyOtherIncludedField() { return myOtherIncludedField; }
    
            @com.facebook.swift.codec.ThriftField(value=3, name="MyIncludedInt", requiredness=Requiredness.NONE)
        public Builder setMyIncludedInt(long myIncludedInt) {
            this.myIncludedInt = myIncludedInt;
            return this;
        }
    
        public long getMyIncludedInt() { return myIncludedInt; }
    
        public Builder() { }
        public Builder(MyStruct other) {
            this.myIncludedField = other.myIncludedField;
            this.myOtherIncludedField = other.myOtherIncludedField;
            this.myIncludedInt = other.myIncludedInt;
        }
    
        @ThriftConstructor
        public MyStruct build() {
            MyStruct result = new MyStruct (
                this.myIncludedField,
                this.myOtherIncludedField,
                this.myIncludedInt
            );
            return result;
        }
    }
        
    public static final Map<String, Integer> NAMES_TO_IDS = new HashMap();
    public static final Map<String, Integer> THRIFT_NAMES_TO_IDS = new HashMap();
    public static final Map<Integer, TField> FIELD_METADATA = new HashMap<>();
    private static final TStruct STRUCT_DESC = new TStruct("MyStruct");
    private final test.fixtures.includes.includes.Included myIncludedField;
    public static final int _MYINCLUDEDFIELD = 1;
    private static final TField MY_INCLUDED_FIELD_FIELD_DESC = new TField("MyIncludedField", TType.STRUCT, (short)1);
        private final test.fixtures.includes.includes.Included myOtherIncludedField;
    public static final int _MYOTHERINCLUDEDFIELD = 2;
    private static final TField MY_OTHER_INCLUDED_FIELD_FIELD_DESC = new TField("MyOtherIncludedField", TType.STRUCT, (short)2);
        private final long myIncludedInt;
    public static final int _MYINCLUDEDINT = 3;
    private static final TField MY_INCLUDED_INT_FIELD_DESC = new TField("MyIncludedInt", TType.I64, (short)3);
    static {
      NAMES_TO_IDS.put("myIncludedField", 1);
      THRIFT_NAMES_TO_IDS.put("MyIncludedField", 1);
      FIELD_METADATA.put(1, MY_INCLUDED_FIELD_FIELD_DESC);
      NAMES_TO_IDS.put("myOtherIncludedField", 2);
      THRIFT_NAMES_TO_IDS.put("MyOtherIncludedField", 2);
      FIELD_METADATA.put(2, MY_OTHER_INCLUDED_FIELD_FIELD_DESC);
      NAMES_TO_IDS.put("myIncludedInt", 3);
      THRIFT_NAMES_TO_IDS.put("MyIncludedInt", 3);
      FIELD_METADATA.put(3, MY_INCLUDED_INT_FIELD_DESC);
    }
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=1, name="MyIncludedField", requiredness=Requiredness.NONE)
    public test.fixtures.includes.includes.Included getMyIncludedField() { return myIncludedField; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=2, name="MyOtherIncludedField", requiredness=Requiredness.NONE)
    public test.fixtures.includes.includes.Included getMyOtherIncludedField() { return myOtherIncludedField; }
    
    
    
    @com.facebook.swift.codec.ThriftField(value=3, name="MyIncludedInt", requiredness=Requiredness.NONE)
    public long getMyIncludedInt() { return myIncludedInt; }
    
    @java.lang.Override
    public String toString() {
        ToStringHelper helper = toStringHelper(this);
        helper.add("myIncludedField", myIncludedField);
        helper.add("myOtherIncludedField", myOtherIncludedField);
        helper.add("myIncludedInt", myIncludedInt);
        return helper.toString();
    }
    
    @java.lang.Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        MyStruct other = (MyStruct)o;
    
        return
            Objects.equals(myIncludedField, other.myIncludedField) &&
            Objects.equals(myOtherIncludedField, other.myOtherIncludedField) &&
            Objects.equals(myIncludedInt, other.myIncludedInt) &&
            true;
    }
    
    @java.lang.Override
    public int hashCode() {
        return Arrays.deepHashCode(new java.lang.Object[] {
            myIncludedField,
            myOtherIncludedField,
            myIncludedInt
        });
    }
    
    
    public static com.facebook.thrift.payload.Reader<MyStruct> asReader() {
      return MyStruct::read0;
    }
    
    public static MyStruct read0(TProtocol oprot) throws TException {
      TField __field;
      oprot.readStructBegin(MyStruct.NAMES_TO_IDS, MyStruct.THRIFT_NAMES_TO_IDS, MyStruct.FIELD_METADATA);
      MyStruct.Builder builder = new MyStruct.Builder();
      while (true) {
        __field = oprot.readFieldBegin();
        if (__field.type == TType.STOP) { break; }
        switch (__field.id) {
        case _MYINCLUDEDFIELD:
          if (__field.type == TType.STRUCT) {
            test.fixtures.includes.includes.Included myIncludedField = test.fixtures.includes.includes.Included.read0(oprot);
            builder.setMyIncludedField(myIncludedField);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _MYOTHERINCLUDEDFIELD:
          if (__field.type == TType.STRUCT) {
            test.fixtures.includes.includes.Included myOtherIncludedField = test.fixtures.includes.includes.Included.read0(oprot);
            builder.setMyOtherIncludedField(myOtherIncludedField);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _MYINCLUDEDINT:
          if (__field.type == TType.I64) {
            long myIncludedInt = oprot.readI64();
            builder.setMyIncludedInt(myIncludedInt);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(oprot, __field.type);
          break;
        }
        oprot.readFieldEnd();
      }
      oprot.readStructEnd();
      return builder.build();
    }
    
    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      if (myIncludedField != null) {
        oprot.writeFieldBegin(MY_INCLUDED_FIELD_FIELD_DESC);
        this.myIncludedField.write0(oprot);
        oprot.writeFieldEnd();
      }
      if (myOtherIncludedField != null) {
        oprot.writeFieldBegin(MY_OTHER_INCLUDED_FIELD_FIELD_DESC);
        this.myOtherIncludedField.write0(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MY_INCLUDED_INT_FIELD_DESC);
      oprot.writeI64(this.myIncludedInt);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    private static class _MyStructLazy {
        private static final MyStruct _DEFAULT = new MyStruct.Builder().build();
    }
    
    public static MyStruct defaultInstance() {
        return  _MyStructLazy._DEFAULT;
    }
}
