(* @generated by hphp/hack/tools/visitors/genvisitors *)
open Ast_visitors_ancestors
class virtual ['self] endo =
  object (self : 'self)
    inherit [_] endo_base
    method on_Cst_define env this = this
    method on_Cst_const env this = this
    method on_cst_kind env this =
      match this with
      | Cst_define -> self#on_Cst_define env this
      | Cst_const -> self#on_Cst_const env this
    method on_id env ((c0, c1) as this) =
      let r0 = self#on_Pos_t env c0 in
      let r1 = self#on_string env c1 in if c0 == r0 && c1 == r1
      then this
      else (r0, r1)
    method on_pstring env ((c0, c1) as this) =
      let r0 = self#on_Pos_t env c0 in
      let r1 = self#on_string env c1 in if c0 == r0 && c1 == r1
      then this
      else (r0, r1)
    method on_Covariant env this = this
    method on_Contravariant env this = this
    method on_Invariant env this = this
    method on_variance env this =
      match this with
      | Covariant -> self#on_Covariant env this
      | Contravariant -> self#on_Contravariant env this
      | Invariant -> self#on_Invariant env this
    method on_NSClass env this = this
    method on_NSFun env this = this
    method on_NSConst env this = this
    method on_ns_kind env this =
      match this with
      | NSClass -> self#on_NSClass env this
      | NSFun -> self#on_NSFun env this
      | NSConst -> self#on_NSConst env this
    method on_program env = self#on_list self#on_def env
    method on_Fun env this c0 =
      let r0 = self#on_fun_ env c0 in
      if c0 == r0 then this else Fun r0
    method on_Class env this c0 =
      let r0 = self#on_class_ env c0 in
      if c0 == r0 then this else Class r0
    method on_Stmt env this c0 =
      let r0 = self#on_stmt env c0 in
      if c0 == r0 then this else Stmt r0
    method on_Typedef env this c0 =
      let r0 = self#on_typedef env c0 in
      if c0 == r0 then this else Typedef r0
    method on_Constant env this c0 =
      let r0 = self#on_gconst env c0 in
      if c0 == r0 then this else Constant r0
    method on_Namespace env this c0 c1 =
      let r0 = self#on_id env c0 in
      let r1 = self#on_program env c1 in if c0 == r0 && c1 == r1
      then this
      else Namespace (r0, r1)
    method on_NamespaceUse env this c0 =
      let r0 =
        self#on_list
          (fun env ((c0, c1, c2) as this) ->
               let r0 = self#on_ns_kind env c0 in
               let r1 = self#on_id env c1 in
               let r2 = self#on_id env c2 in
               if c0 == r0 && c1 == r1 && c2 == r2
               then this
               else (r0, r1, r2)) env c0
      in
      if c0 == r0 then this else NamespaceUse r0
    method on_SetNamespaceEnv env this c0 =
      let r0 = self#on_Namespace_env env c0 in
      if c0 == r0
      then this
      else SetNamespaceEnv r0
    method on_def env this =
      match this with
      | Fun c0 -> self#on_Fun env this c0
      | Class c0 -> self#on_Class env this c0
      | Stmt c0 -> self#on_Stmt env this c0
      | Typedef c0 -> self#on_Typedef env this c0
      | Constant c0 -> self#on_Constant env this c0
      | Namespace (c0, c1) -> self#on_Namespace env this c0 c1
      | NamespaceUse c0 -> self#on_NamespaceUse env this c0
      | SetNamespaceEnv c0 -> self#on_SetNamespaceEnv env this c0
    method on_typedef env this =
      let r0 = self#on_id env this.t_id in
      let r1 = self#on_list self#on_tparam env this.t_tparams in
      let r2 = self#on_tconstraint env this.t_constraint in
      let r3 = self#on_typedef_kind env this.t_kind in
      let r4 =
        self#on_list self#on_user_attribute env
          this.t_user_attributes
      in
      let r5 = self#on_Namespace_env env this.t_namespace in
      let r6 = self#on_FileInfo_mode env this.t_mode in
      if  this.t_id == r0
       && this.t_tparams == r1
       && this.t_constraint == r2
       && this.t_kind == r3
       && this.t_user_attributes == r4
       && this.t_namespace == r5
       && this.t_mode == r6
      then this
      else
        {
          t_id = r0;
          t_tparams = r1;
          t_constraint = r2;
          t_kind = r3;
          t_user_attributes = r4;
          t_namespace = r5;
          t_mode = r6
        }
    method on_gconst env this =
      let r0 = self#on_FileInfo_mode env this.cst_mode in
      let r1 = self#on_cst_kind env this.cst_kind in
      let r2 = self#on_id env this.cst_name in
      let r3 = self#on_option self#on_hint env this.cst_type in
      let r4 = self#on_expr env this.cst_value in
      let r5 = self#on_Namespace_env env this.cst_namespace in
      if  this.cst_mode == r0
       && this.cst_kind == r1
       && this.cst_name == r2
       && this.cst_type == r3
       && this.cst_value == r4
       && this.cst_namespace == r5
      then this
      else
        {
          cst_mode = r0;
          cst_kind = r1;
          cst_name = r2;
          cst_type = r3;
          cst_value = r4;
          cst_namespace = r5
        }
    method on_Constraint_as env this = this
    method on_Constraint_eq env this = this
    method on_Constraint_super env this = this
    method on_constraint_kind env this =
      match this with
      | Constraint_as -> self#on_Constraint_as env this
      | Constraint_eq -> self#on_Constraint_eq env this
      | Constraint_super -> self#on_Constraint_super env this
    method on_tparam env ((c0, c1, c2) as this) =
      let r0 = self#on_variance env c0 in
      let r1 = self#on_id env c1 in
      let r2 =
        self#on_list
          (fun env ((c0, c1) as this) ->
               let r0 = self#on_constraint_kind env c0 in
               let r1 = self#on_hint env c1 in
               if c0 == r0 && c1 == r1
               then this
               else (r0, r1)) env c2
      in
      if c0 == r0 && c1 == r1 && c2 == r2
      then this
      else (r0, r1, r2)
    method on_tconstraint env = self#on_option self#on_hint env
    method on_Alias env this c0 =
      let r0 = self#on_hint env c0 in
      if c0 == r0 then this else Alias r0
    method on_NewType env this c0 =
      let r0 = self#on_hint env c0 in
      if c0 == r0 then this else NewType r0
    method on_typedef_kind env this =
      match this with
      | Alias c0 -> self#on_Alias env this c0
      | NewType c0 -> self#on_NewType env this c0
    method on_class_ env this =
      let r0 = self#on_FileInfo_mode env this.c_mode in
      let r1 =
        self#on_list self#on_user_attribute env
          this.c_user_attributes
      in
      let r2 = self#on_bool env this.c_final in
      let r3 = self#on_class_kind env this.c_kind in
      let r4 = self#on_bool env this.c_is_xhp in
      let r5 = self#on_id env this.c_name in
      let r6 = self#on_list self#on_tparam env this.c_tparams in
      let r7 = self#on_list self#on_hint env this.c_extends in
      let r8 = self#on_list self#on_hint env this.c_implements in
      let r9 = self#on_list self#on_class_elt env this.c_body in
      let r10 = self#on_Namespace_env env this.c_namespace in
      let r11 = self#on_option self#on_enum_ env this.c_enum in
      let r12 = self#on_Pos_t env this.c_span in
      if  this.c_mode == r0
       && this.c_user_attributes == r1
       && this.c_final == r2
       && this.c_kind == r3
       && this.c_is_xhp == r4
       && this.c_name == r5
       && this.c_tparams == r6
       && this.c_extends == r7
       && this.c_implements == r8
       && this.c_body == r9
       && this.c_namespace == r10
       && this.c_enum == r11
       && this.c_span == r12
      then this
      else
        {
          c_mode = r0;
          c_user_attributes = r1;
          c_final = r2;
          c_kind = r3;
          c_is_xhp = r4;
          c_name = r5;
          c_tparams = r6;
          c_extends = r7;
          c_implements = r8;
          c_body = r9;
          c_namespace = r10;
          c_enum = r11;
          c_span = r12
        }
    method on_enum_ env this =
      let r0 = self#on_hint env this.e_base in
      let r1 = self#on_option self#on_hint env this.e_constraint in

      if this.e_base == r0 && this.e_constraint == r1
      then this
      else { e_base = r0; e_constraint = r1 }
    method on_user_attribute env this =
      let r0 = self#on_id env this.ua_name in
      let r1 = self#on_list self#on_expr env this.ua_params in
      if this.ua_name == r0 && this.ua_params == r1
      then this
      else { ua_name = r0; ua_params = r1 }
    method on_Cabstract env this = this
    method on_Cnormal env this = this
    method on_Cinterface env this = this
    method on_Ctrait env this = this
    method on_Cenum env this = this
    method on_class_kind env this =
      match this with
      | Cabstract -> self#on_Cabstract env this
      | Cnormal -> self#on_Cnormal env this
      | Cinterface -> self#on_Cinterface env this
      | Ctrait -> self#on_Ctrait env this
      | Cenum -> self#on_Cenum env this
    method on_MustExtend env this = this
    method on_MustImplement env this = this
    method on_trait_req_kind env this =
      match this with
      | MustExtend -> self#on_MustExtend env this
      | MustImplement -> self#on_MustImplement env this
    method on_Const env this c0 c1 =
      let r0 = self#on_option self#on_hint env c0 in
      let r1 =
        self#on_list
          (fun env ((c0, c1) as this) ->
               let r0 = self#on_id env c0 in
               let r1 = self#on_expr env c1 in
               if c0 == r0 && c1 == r1
               then this
               else (r0, r1)) env c1
      in if c0 == r0 && c1 == r1
      then this
      else Const (r0, r1)
    method on_AbsConst env this c0 c1 =
      let r0 = self#on_option self#on_hint env c0 in
      let r1 = self#on_id env c1 in if c0 == r0 && c1 == r1
      then this
      else AbsConst (r0, r1)
    method on_Attributes env this c0 =
      let r0 = self#on_list self#on_class_attr env c0 in
      if c0 == r0 then this else Attributes r0
    method on_TypeConst env this c0 =
      let r0 = self#on_typeconst env c0 in
      if c0 == r0 then this else TypeConst r0
    method on_ClassUse env this c0 =
      let r0 = self#on_hint env c0 in
      if c0 == r0 then this else ClassUse r0
    method on_XhpAttrUse env this c0 =
      let r0 = self#on_hint env c0 in
      if c0 == r0 then this else XhpAttrUse r0
    method on_ClassTraitRequire env this c0 c1 =
      let r0 = self#on_trait_req_kind env c0 in
      let r1 = self#on_hint env c1 in if c0 == r0 && c1 == r1
      then this
      else ClassTraitRequire (r0, r1)
    method on_ClassVars env this c0 c1 c2 =
      let r0 = self#on_list self#on_kind env c0 in
      let r1 = self#on_option self#on_hint env c1 in
      let r2 = self#on_list self#on_class_var env c2 in
      if c0 == r0 && c1 == r1 && c2 == r2
      then this
      else ClassVars (r0, r1, r2)
    method on_XhpAttr env this c0 c1 c2 c3 =
      let r0 = self#on_option self#on_hint env c0 in
      let r1 = self#on_class_var env c1 in
      let r2 = self#on_bool env c2 in
      let r3 =
        self#on_option
          (fun env ((c0, c1) as this) ->
               let r0 = self#on_Pos_t env c0 in
               let r1 = self#on_list self#on_expr env c1 in
               if c0 == r0 && c1 == r1
               then this
               else (r0, r1)) env c3
      in
      if c0 == r0 && c1 == r1 && c2 == r2 && c3 == r3
      then this
      else XhpAttr (r0, r1, r2, r3)
    method on_Method env this c0 =
      let r0 = self#on_method_ env c0 in
      if c0 == r0 then this else Method r0
    method on_XhpCategory env this c0 =
      let r0 = self#on_list self#on_pstring env c0 in
      if c0 == r0 then this else XhpCategory r0
    method on_XhpChild env this c0 =
      let r0 = self#on_xhp_child env c0 in
      if c0 == r0 then this else XhpChild r0

    method on_xhp_child env this =
      match this with
      | ChildName c0 -> self#on_ChildName env this c0
      | ChildList c0 -> self#on_ChildList env this c0
      | ChildUnary (c0, c1) -> self#on_ChildUnary env this c0 c1
      | ChildBinary (c0, c1) -> self#on_ChildBinary env this c0 c1

    method on_ChildName env this c0 =
      let r0 = self#on_id env c0 in
      if c0 == r0 then this else ChildName r0

    method on_ChildList env this c0 =
      let r0 = self#on_list self#on_xhp_child env c0 in
      if c0 == r0 then this else ChildList r0

    method on_ChildUnary env this c0 c1 =
      let r0 = self#on_xhp_child env c0 in
      let r1 = self#on_xhp_child_op env c1 in
      if c0 == r0 && c1 == r1 then this else ChildUnary (r0, r1)

    method on_ChildBinary env this c0 c1 =
      let r0 = self#on_xhp_child env c0 in
      let r1 = self#on_xhp_child env c1 in
      if c0 == r0 && c1 == r1 then this else ChildBinary (r0, r1)

    method on_xhp_child_op env this =
      match this with
      | ChildStar -> self#on_ChildStar env this
      | ChildPlus -> self#on_ChildPlus env this
      | ChildQuestion -> self#on_ChildQuestion env this

    method on_ChildStar env this = this
    method on_ChildPlus env this = this
    method on_ChildQuestion env this = this

    method on_class_elt env this =
      match this with
      | Const (c0, c1) -> self#on_Const env this c0 c1
      | AbsConst (c0, c1) -> self#on_AbsConst env this c0 c1
      | Attributes c0 -> self#on_Attributes env this c0
      | TypeConst c0 -> self#on_TypeConst env this c0
      | ClassUse c0 -> self#on_ClassUse env this c0
      | XhpAttrUse c0 -> self#on_XhpAttrUse env this c0
      | ClassTraitRequire (c0, c1) as this ->
          self#on_ClassTraitRequire env this c0 c1
      | ClassVars (c0, c1, c2) as this ->
          self#on_ClassVars env this c0 c1 c2
      | XhpAttr (c0, c1, c2, c3) as this ->
          self#on_XhpAttr env this c0 c1 c2 c3
      | Method c0 -> self#on_Method env this c0
      | XhpChild c0 -> self#on_XhpChild env this c0
      | XhpCategory c0 -> self#on_XhpCategory env this c0
    method on_CA_name env this c0 =
      let r0 = self#on_id env c0 in
      if c0 == r0 then this else CA_name r0
    method on_CA_field env this c0 =
      let r0 = self#on_ca_field env c0 in
      if c0 == r0 then this else CA_field r0
    method on_class_attr env this =
      match this with
      | CA_name c0 -> self#on_CA_name env this c0
      | CA_field c0 -> self#on_CA_field env this c0
    method on_ca_field env this =
      let r0 = self#on_ca_type env this.ca_type in
      let r1 = self#on_id env this.ca_id in
      let r2 = self#on_option self#on_expr env this.ca_value in
      let r3 = self#on_bool env this.ca_required in
      if  this.ca_type == r0
       && this.ca_id == r1
       && this.ca_value == r2
       && this.ca_required == r3
      then this
      else { ca_type = r0; ca_id = r1; ca_value = r2; ca_required = r3 }
    method on_CA_hint env this c0 =
      let r0 = self#on_hint env c0 in
      if c0 == r0 then this else CA_hint r0
    method on_CA_enum env this c0 =
      let r0 = self#on_list self#on_string env c0 in
      if c0 == r0 then this else CA_enum r0
    method on_ca_type env this =
      match this with
      | CA_hint c0 -> self#on_CA_hint env this c0
      | CA_enum c0 -> self#on_CA_enum env this c0
    method on_Final env this = this
    method on_Static env this = this
    method on_Abstract env this = this
    method on_Private env this = this
    method on_Public env this = this
    method on_Protected env this = this
    method on_kind env this =
      match this with
      | Final -> self#on_Final env this
      | Static -> self#on_Static env this
      | Abstract -> self#on_Abstract env this
      | Private -> self#on_Private env this
      | Public -> self#on_Public env this
      | Protected -> self#on_Protected env this
    method on_OG_nullthrows env this = this
    method on_OG_nullsafe env this = this
    method on_og_null_flavor env this =
      match this with
      | OG_nullthrows -> self#on_OG_nullthrows env this
      | OG_nullsafe -> self#on_OG_nullsafe env this
    method on_class_var env ((c0, c1, c2) as this) =
      let r0 = self#on_Pos_t env c0 in
      let r1 = self#on_id env c1 in
      let r2 = self#on_option self#on_expr env c2 in
      if c0 == r0 && c1 == r1 && c2 == r2
      then this
      else (r0, r1, r2)
    method on_method_ env this =
      let r0 = self#on_list self#on_kind env this.m_kind in
      let r1 = self#on_list self#on_tparam env this.m_tparams in
      let r2 =
        self#on_list
          (fun env ((c0, c1, c2) as this) ->
               let r0 = self#on_hint env c0 in
               let r1 = self#on_constraint_kind env c1 in
               let r2 = self#on_hint env c2 in
               if c0 == r0 && c1 == r1 && c2 == r2
               then this
               else (r0, r1, r2)) env this.m_constrs
      in
      let r3 = self#on_id env this.m_name in
      let r4 = self#on_list self#on_fun_param env this.m_params in
      let r5 = self#on_block env this.m_body in
      let r6 =
        self#on_list self#on_user_attribute env
          this.m_user_attributes
      in
      let r7 = self#on_option self#on_hint env this.m_ret in
      let r8 = self#on_bool env this.m_ret_by_ref in
      let r9 = self#on_fun_kind env this.m_fun_kind in
      let r10 = self#on_Pos_t env this.m_span in
      if  this.m_kind == r0
       && this.m_tparams == r1
       && this.m_constrs == r2
       && this.m_name == r3
       && this.m_params == r4
       && this.m_body == r5
       && this.m_user_attributes == r6
       && this.m_ret == r7
       && this.m_ret_by_ref == r8
       && this.m_fun_kind == r9
       && this.m_span == r10
      then this
      else
        {
          m_kind = r0;
          m_tparams = r1;
          m_constrs = r2;
          m_name = r3;
          m_params = r4;
          m_body = r5;
          m_user_attributes = r6;
          m_ret = r7;
          m_ret_by_ref = r8;
          m_fun_kind = r9;
          m_span = r10
        }
    method on_typeconst env this =
      let r0 = self#on_bool env this.tconst_abstract in
      let r1 = self#on_id env this.tconst_name in
      let r2 =
        self#on_option self#on_hint env this.tconst_constraint in
      let r3 = self#on_option self#on_hint env this.tconst_type in
      let r4 = self#on_Pos_t env this.tconst_span in
      if  this.tconst_abstract == r0
       && this.tconst_name == r1
       && this.tconst_constraint == r2
       && this.tconst_type == r3
       && this.tconst_span == r4
      then this
      else
        {
          tconst_abstract = r0;
          tconst_name = r1;
          tconst_constraint = r2;
          tconst_type = r3;
          tconst_span = r4
        }
    method on_is_reference env = self#on_bool env
    method on_is_variadic env = self#on_bool env
    method on_fun_param env this =
      let r0 = self#on_option self#on_hint env this.param_hint in
      let r1 = self#on_is_reference env this.param_is_reference in
      let r2 = self#on_is_variadic env this.param_is_variadic in
      let r3 = self#on_id env this.param_id in
      let r4 = self#on_option self#on_expr env this.param_expr in
      let r5 = self#on_option self#on_kind env this.param_modifier in

      let r6 =
        self#on_list self#on_user_attribute env
          this.param_user_attributes
      in
      if  this.param_hint == r0
       && this.param_is_reference == r1
       && this.param_is_variadic == r2
       && this.param_id == r3
       && this.param_expr == r4
       && this.param_modifier == r5
       && this.param_user_attributes == r6
      then this
      else
        {
          param_hint = r0;
          param_is_reference = r1;
          param_is_variadic = r2;
          param_id = r3;
          param_expr = r4;
          param_modifier = r5;
          param_user_attributes = r6
        }
    method on_fun_ env this =
      let r0 = self#on_FileInfo_mode env this.f_mode in
      let r1 = self#on_list self#on_tparam env this.f_tparams in
      let r2 = self#on_option self#on_hint env this.f_ret in
      let r3 = self#on_bool env this.f_ret_by_ref in
      let r4 = self#on_id env this.f_name in
      let r5 = self#on_list self#on_fun_param env this.f_params in
      let r6 = self#on_block env this.f_body in
      let r7 =
        self#on_list self#on_user_attribute env
          this.f_user_attributes
      in
      let r8 = self#on_fun_kind env this.f_fun_kind in
      let r9 = self#on_Namespace_env env this.f_namespace in
      let r10 = self#on_Pos_t env this.f_span in
      if  this.f_mode == r0
       && this.f_tparams == r1
       && this.f_ret == r2
       && this.f_ret_by_ref == r3
       && this.f_name == r4
       && this.f_params == r5
       && this.f_body == r6
       && this.f_user_attributes == r7
       && this.f_fun_kind == r8
       && this.f_namespace == r9
       && this.f_span == r10
      then this
      else
        {
          f_mode = r0;
          f_tparams = r1;
          f_ret = r2;
          f_ret_by_ref = r3;
          f_name = r4;
          f_params = r5;
          f_body = r6;
          f_user_attributes = r7;
          f_fun_kind = r8;
          f_namespace = r9;
          f_span = r10
        }
    method on_FSync env this = this
    method on_FAsync env this = this
    method on_FGenerator env this = this
    method on_FAsyncGenerator env this = this
    method on_fun_kind env this =
      match this with
      | FSync -> self#on_FSync env this
      | FAsync -> self#on_FAsync env this
      | FGenerator -> self#on_FGenerator env this
      | FAsyncGenerator -> self#on_FAsyncGenerator env this
    method on_hint env ((c0, c1) as this) =
      let r0 = self#on_Pos_t env c0 in
      let r1 = self#on_hint_ env c1 in if c0 == r0 && c1 == r1
      then this
      else (r0, r1)
    method on_Hoption env this c0 =
      let r0 = self#on_hint env c0 in
      if c0 == r0 then this else Hoption r0
    method on_Hfun env this c0 c1 c2 =
      let r0 = self#on_list self#on_hint env c0 in
      let r1 = self#on_bool env c1 in
      let r2 = self#on_hint env c2 in
      if c0 == r0 && c1 == r1 && c2 == r2
      then this
      else Hfun (r0, r1, r2)
    method on_Htuple env this c0 =
      let r0 = self#on_list self#on_hint env c0 in
      if c0 == r0 then this else Htuple r0
    method on_Happly env this c0 c1 =
      let r0 = self#on_id env c0 in
      let r1 = self#on_list self#on_hint env c1 in if c0 == r0 && c1 == r1
      then this
      else Happly (r0, r1)
    method on_Hshape env this c0 =
      let r0 = self#on_bool env c0.si_allows_unknown_fields in
      let r1 = self#on_list self#on_shape_field env c0.si_shape_field_list in
      if   c0.si_allows_unknown_fields == r0
        && c0.si_shape_field_list == r1
      then this
      else
        Hshape {
          si_allows_unknown_fields = r0;
          si_shape_field_list = r1
        }
    method on_Haccess env this c0 c1 c2 =
      let r0 = self#on_id env c0 in
      let r1 = self#on_id env c1 in
      let r2 = self#on_list self#on_id env c2 in
      if c0 == r0 && c1 == r1 && c2 == r2
      then this
      else Haccess (r0, r1, r2)
    method on_Hsoft env this c0 =
      let r0 = self#on_hint env c0 in
      if c0 == r0 then this else Hsoft r0
    method on_hint_ env this =
    match this with
      | Hoption c0 -> self#on_Hoption env this c0
      | Hfun (c0, c1, c2) -> self#on_Hfun env this c0 c1 c2
      | Htuple c0 -> self#on_Htuple env this c0
      | Happly (c0, c1) -> self#on_Happly env this c0 c1
      | Hshape c0 -> self#on_Hshape env this c0
      | Haccess (c0, c1, c2) as this ->
          self#on_Haccess env this c0 c1 c2
      | Hsoft c0 -> self#on_Hsoft env this c0
    method on_SFlit env this c0 =
      let r0 = self#on_pstring env c0 in
      if c0 == r0 then this else SFlit r0
    method on_SFclass_const env this c0 c1 =
      let r0 = self#on_id env c0 in
      let r1 = self#on_pstring env c1 in if c0 == r0 && c1 == r1
      then this
      else SFclass_const (r0, r1)
    method on_shape_field_name env this =
      match this with
      | SFlit c0 -> self#on_SFlit env this c0
      | SFclass_const (c0, c1) as this ->
          self#on_SFclass_const env this c0 c1
    method on_shape_field env this =
      let r0 = self#on_bool env this.sf_optional in
      let r1 = self#on_shape_field_name env this.sf_name in
      let r2 = self#on_hint env this.sf_hint in
      if  this.sf_optional == r0
       && this.sf_name == r1
       && this.sf_hint == r2
      then this
      else
        {
          sf_optional = r0;
          sf_name = r1;
          sf_hint = r2
        }
    method on_Unsafe env this = this
    method on_Fallthrough env this = this
    method on_Expr env this c0 =
      let r0 = self#on_expr env c0 in
      if c0 == r0 then this else Expr r0
    method on_Block env this c0 =
      let r0 = self#on_block env c0 in
      if c0 == r0 then this else Block r0
    method on_Break env this c0 =
      let r0 = self#on_Pos_t env c0 in
      if c0 == r0 then this else Break r0
    method on_Continue env this c0 =
      let r0 = self#on_Pos_t env c0 in
      if c0 == r0 then this else Continue r0
    method on_Throw env this c0 =
      let r0 = self#on_expr env c0 in
      if c0 == r0 then this else Throw r0
    method on_Return env this c0 c1 =
      let r0 = self#on_Pos_t env c0 in
      let r1 = self#on_option self#on_expr env c1 in if c0 == r0 && c1 == r1
      then this
      else Return (r0, r1)
    method on_Static_var env this c0 =
      let r0 = self#on_list self#on_expr env c0 in
      if c0 == r0 then this else Static_var r0
    method on_Global_var env this c0 =
      let r0 = self#on_list self#on_expr env c0 in
      if c0 == r0 then this else Global_var r0
    method on_If env this c0 c1 c2 =
      let r0 = self#on_expr env c0 in
      let r1 = self#on_block env c1 in
      let r2 = self#on_block env c2 in
      if c0 == r0 && c1 == r1 && c2 == r2
      then this
      else If (r0, r1, r2)
    method on_Do env this c0 c1 =
      let r0 = self#on_block env c0 in
      let r1 = self#on_expr env c1 in if c0 == r0 && c1 == r1
      then this
      else Do (r0, r1)
    method on_While env this c0 c1 =
      let r0 = self#on_expr env c0 in
      let r1 = self#on_block env c1 in if c0 == r0 && c1 == r1
      then this
      else While (r0, r1)
    method on_For env this c0 c1 c2 c3 =
      let r0 = self#on_expr env c0 in
      let r1 = self#on_expr env c1 in
      let r2 = self#on_expr env c2 in
      let r3 = self#on_block env c3 in
      if c0 == r0 && c1 == r1 && c2 == r2 && c3 == r3
      then this
      else For (r0, r1, r2, r3)
    method on_Switch env this c0 c1 =
      let r0 = self#on_expr env c0 in
      let r1 = self#on_list self#on_case env c1 in if c0 == r0 && c1 == r1
      then this
      else Switch (r0, r1)
    method on_Foreach env this c0 c1 c2 c3 =
      let r0 = self#on_expr env c0 in
      let r1 = self#on_option self#on_Pos_t env c1 in
      let r2 = self#on_as_expr env c2 in
      let r3 = self#on_block env c3 in
      if c0 == r0 && c1 == r1 && c2 == r2 && c3 == r3
      then this
      else Foreach (r0, r1, r2, r3)
    method on_Try env this c0 c1 c2 =
      let r0 = self#on_block env c0 in
      let r1 = self#on_list self#on_catch env c1 in
      let r2 = self#on_block env c2 in
      if c0 == r0 && c1 == r1 && c2 == r2
      then this
      else Try (r0, r1, r2)
    method on_Def_inline env this c0 =
      let r0 = self#on_def env c0 in
      if c0 == r0
      then this
      else Def_inline r0
    method on_Noop env this = this
    method on_stmt env this =
      match this with
      | Unsafe -> self#on_Unsafe env this
      | Fallthrough -> self#on_Fallthrough env this
      | Expr c0 -> self#on_Expr env this c0
      | Block c0 -> self#on_Block env this c0
      | Break c0 -> self#on_Break env this c0
      | Continue c0 -> self#on_Continue env this c0
      | Throw c0 -> self#on_Throw env this c0
      | Return (c0, c1) -> self#on_Return env this c0 c1
      | GotoLabel c0 -> self#on_GotoLabel env this c0
      | Goto c0 -> self#on_Goto env this c0
      | Static_var c0 -> self#on_Static_var env this c0
      | Global_var c0 -> self#on_Global_var env this c0
      | If (c0, c1, c2) -> self#on_If env this c0 c1 c2
      | Do (c0, c1) -> self#on_Do env this c0 c1
      | While (c0, c1) -> self#on_While env this c0 c1
      | For (c0, c1, c2, c3) -> self#on_For env this c0 c1 c2 c3
      | Switch (c0, c1) -> self#on_Switch env this c0 c1
      | Foreach (c0, c1, c2, c3) as this ->
          self#on_Foreach env this c0 c1 c2 c3
      | Try (c0, c1, c2) -> self#on_Try env this c0 c1 c2
      | Def_inline c0 ->
          self#on_Def_inline env this c0
      | Noop -> self#on_Noop env this
    method on_As_v env this c0 =
      let r0 = self#on_expr env c0 in
      if c0 == r0 then this else As_v r0
    method on_As_kv env this c0 c1 =
      let r0 = self#on_expr env c0 in
      let r1 = self#on_expr env c1 in if c0 == r0 && c1 == r1
      then this
      else As_kv (r0, r1)
    method on_as_expr env this =
      match this with
      | As_v c0 -> self#on_As_v env this c0
      | As_kv (c0, c1) -> self#on_As_kv env this c0 c1
    method on_block env = self#on_list self#on_stmt env
    method on_expr env ((c0, c1) as this) =
      let r0 = self#on_Pos_t env c0 in
      let r1 = self#on_expr_ env c1 in if c0 == r0 && c1 == r1
      then this
      else (r0, r1)
    method on_Array env this c0 =
      let r0 = self#on_list self#on_afield env c0 in
      if c0 == r0 then this else Array r0
    method on_Darray env this c0 =
      let r0 =
        self#on_list
          (fun env ((c0, c1) as this) ->
               let r0 = self#on_expr env c0 in
               let r1 = self#on_expr env c1 in
               if c0 == r0 && c1 == r1
               then this
               else (r0, r1)) env c0
      in
      if c0 = r0 then this else Darray r0
    method on_Varray env this c0 =
      let r0 = self#on_list self#on_expr env c0 in
      if c0 = r0 then this else Varray r0
    method on_Shape env this c0 =
      let r0 =
        self#on_list
          (fun env ((c0, c1) as this) ->
               let r0 = self#on_shape_field_name env c0 in
               let r1 = self#on_expr env c1 in
               if c0 == r0 && c1 == r1
               then this
               else (r0, r1)) env c0
      in
      if c0 == r0 then this else Shape r0
    method on_Collection env this c0 c1 =
      let r0 = self#on_id env c0 in
      let r1 = self#on_list self#on_afield env c1 in if c0 == r0 && c1 == r1
      then this
      else Collection (r0, r1)
    method on_Null env this = this
    method on_True env this = this
    method on_False env this = this
    method on_Id env this c0 =
      let r0 = self#on_id env c0 in
      if c0 == r0 then this else Id r0
    method on_Id_type_arguments env this c0 c1 =
      let r0 = self#on_id env c0 in
      let r1 = self#on_list self#on_hint env c1 in
      if c0 == r0 && c1 == r1
      then this
      else Id_type_arguments (r0, r1)
    method on_Lvar env this c0 =
      let r0 = self#on_id env c0 in
      if c0 == r0 then this else Lvar r0
    method on_Lvarvar env this c0 c1 =
      let r0 = self#on_int env c0 in
      let r1 = self#on_id env c1 in if c0 == r0 && c1 == r1
      then this
      else Lvarvar (r0, r1)
    method on_Dollardollar env this = this
    method on_Clone env this c0 =
      let r0 = self#on_expr env c0 in
      if c0 == r0 then this else Clone r0
    method on_Obj_get env this c0 c1 c2 =
      let r0 = self#on_expr env c0 in
      let r1 = self#on_expr env c1 in
      let r2 = self#on_og_null_flavor env c2 in
      if c0 == r0 && c1 == r1 && c2 == r2
      then this
      else Obj_get (r0, r1, r2)
    method on_Array_get env this c0 c1 =
      let r0 = self#on_expr env c0 in
      let r1 = self#on_option self#on_expr env c1 in if c0 == r0 && c1 == r1
      then this
      else Array_get (r0, r1)
    method on_Class_get env this c0 c1 =
      let r0 = self#on_id env c0 in
      let r1 = self#on_pstring env c1 in if c0 == r0 && c1 == r1
      then this
      else Class_get (r0, r1)
    method on_Class_const env this c0 c1 =
      let r0 = self#on_id env c0 in
      let r1 = self#on_pstring env c1 in if c0 == r0 && c1 == r1
      then this
      else Class_const (r0, r1)
    method on_Call env this c0 c1 c2 =
      let r0 = self#on_expr env c0 in
      let r1 = self#on_list self#on_expr env c1 in
      let r2 = self#on_list self#on_expr env c2 in
      if c0 == r0 && c1 == r1 && c2 == r2
      then this
      else Call (r0, r1, r2)
    method on_Int env this c0 =
      let r0 = self#on_pstring env c0 in
      if c0 == r0 then this else Int r0
    method on_Float env this c0 =
      let r0 = self#on_pstring env c0 in
      if c0 == r0 then this else Float r0
    method on_String env this c0 =
      let r0 = self#on_pstring env c0 in
      if c0 == r0 then this else String r0
    method on_String2 env this c0 =
      let r0 = self#on_list self#on_expr env c0 in
      if c0 == r0 then this else String2 r0
    method on_Yield env this c0 =
      let r0 = self#on_afield env c0 in
      if c0 == r0 then this else Yield r0
    method on_Yield_break env this = this
    method on_Await env this c0 =
      let r0 = self#on_expr env c0 in
      if c0 == r0 then this else Await r0
    method on_List env this c0 =
      let r0 = self#on_list self#on_expr env c0 in
      if c0 == r0 then this else List r0
    method on_Expr_list env this c0 =
      let r0 = self#on_list self#on_expr env c0 in
      if c0 == r0 then this else Expr_list r0
    method on_Cast env this c0 c1 =
      let r0 = self#on_hint env c0 in
      let r1 = self#on_expr env c1 in if c0 == r0 && c1 == r1
      then this
      else Cast (r0, r1)
    method on_Unop env this c0 c1 =
      let r0 = self#on_uop env c0 in
      let r1 = self#on_expr env c1 in if c0 == r0 && c1 == r1
      then this
      else Unop (r0, r1)
    method on_Binop env this c0 c1 c2 =
      let r0 = self#on_bop env c0 in
      let r1 = self#on_expr env c1 in
      let r2 = self#on_expr env c2 in
      if c0 == r0 && c1 == r1 && c2 == r2
      then this
      else Binop (r0, r1, r2)
    method on_Pipe env this c0 c1 =
      let r0 = self#on_expr env c0 in
      let r1 = self#on_expr env c1 in if c0 == r0 && c1 == r1
      then this
      else Pipe (r0, r1)
    method on_Eif env this c0 c1 c2 =
      let r0 = self#on_expr env c0 in
      let r1 = self#on_option self#on_expr env c1 in
      let r2 = self#on_expr env c2 in
      if c0 == r0 && c1 == r1 && c2 == r2
      then this
      else Eif (r0, r1, r2)
    method on_NullCoalesce env this c0 c1 =
      let r0 = self#on_expr env c0 in
      let r1 = self#on_expr env c1 in if c0 == r0 && c1 == r1
      then this
      else NullCoalesce (r0, r1)
    method on_InstanceOf env this c0 c1 =
      let r0 = self#on_expr env c0 in
      let r1 = self#on_expr env c1 in if c0 == r0 && c1 == r1
      then this
      else InstanceOf (r0, r1)
    method on_New env this c0 c1 c2 =
      let r0 = self#on_expr env c0 in
      let r1 = self#on_list self#on_expr env c1 in
      let r2 = self#on_list self#on_expr env c2 in
      if c0 == r0 && c1 == r1 && c2 == r2
      then this
      else New (r0, r1, r2)
    method on_Efun env this c0 c1 =
      let r0 = self#on_fun_ env c0 in
      let r1 =
        self#on_list
          (fun env ((c0, c1) as this) ->
               let r0 = self#on_id env c0 in
               let r1 = self#on_bool env c1 in
               if c0 == r0 && c1 == r1
               then this
               else (r0, r1)) env c1
      in if c0 == r0 && c1 == r1
      then this
      else Efun (r0, r1)
    method on_Lfun env this c0 =
      let r0 = self#on_fun_ env c0 in
      if c0 == r0 then this else Lfun r0
    method on_Xml env this c0 c1 c2 =
      let r0 = self#on_id env c0 in
      let r1 =
        self#on_list
          (fun env ((c0, c1) as this) ->
               let r0 = self#on_id env c0 in
               let r1 = self#on_expr env c1 in
               if c0 == r0 && c1 == r1
               then this
               else (r0, r1)) env c1
      in
      let r2 = self#on_list self#on_expr env c2 in
      if c0 == r0 && c1 == r1 && c2 == r2
      then this
      else Xml (r0, r1, r2)
    method on_Unsafeexpr env this c0 =
      let r0 = self#on_expr env c0 in
      if c0 == r0 then this else Unsafeexpr r0
    method on_Import env this c0 c1 =
      let r0 = self#on_import_flavor env c0 in
      let r1 = self#on_expr env c1 in if c0 == r0 && c1 == r1
      then this
      else Import (r0, r1)
    method on_GotoLabel env this c0 =
      let r0 = self#on_pstring env c0 in
      if c0 == r0 then this else GotoLabel r0
    method on_Goto env this c0 =
      let r0 = self#on_pstring env c0 in
      if c0 == r0 then this else Goto r0
    method on_expr_ env this =
      match this with
      | Array c0 -> self#on_Array env this c0
      | Darray c0 -> self#on_Darray env this c0
      | Varray c0 -> self#on_Varray env this c0
      | Shape c0 -> self#on_Shape env this c0
      | Collection (c0, c1) as this ->
          self#on_Collection env this c0 c1
      | Null -> self#on_Null env this
      | True -> self#on_True env this
      | False -> self#on_False env this
      | Id c0 -> self#on_Id env this c0
      | Id_type_arguments (c0, c1) -> self#on_Id_type_arguments env this c0 c1
      | Lvar c0 -> self#on_Lvar env this c0
      | Lvarvar (c0, c1) -> self#on_Lvarvar env this c0 c1
      | Dollardollar -> self#on_Dollardollar env this
      | Clone c0 -> self#on_Clone env this c0
      | Obj_get (c0, c1, c2) as this ->
          self#on_Obj_get env this c0 c1 c2
      | Array_get (c0, c1) -> self#on_Array_get env this c0 c1
      | Class_get (c0, c1) -> self#on_Class_get env this c0 c1
      | Class_const (c0, c1) as this ->
          self#on_Class_const env this c0 c1
      | Call (c0, c1, c2) -> self#on_Call env this c0 c1 c2
      | Int c0 -> self#on_Int env this c0
      | Float c0 -> self#on_Float env this c0
      | String c0 -> self#on_String env this c0
      | String2 c0 -> self#on_String2 env this c0
      | Yield c0 -> self#on_Yield env this c0
      | Yield_break -> self#on_Yield_break env this
      | Await c0 -> self#on_Await env this c0
      | List c0 -> self#on_List env this c0
      | Expr_list c0 -> self#on_Expr_list env this c0
      | Cast (c0, c1) -> self#on_Cast env this c0 c1
      | Unop (c0, c1) -> self#on_Unop env this c0 c1
      | Binop (c0, c1, c2) -> self#on_Binop env this c0 c1 c2
      | Pipe (c0, c1) -> self#on_Pipe env this c0 c1
      | Eif (c0, c1, c2) -> self#on_Eif env this c0 c1 c2
      | NullCoalesce (c0, c1) as this ->
          self#on_NullCoalesce env this c0 c1
      | InstanceOf (c0, c1) as this ->
          self#on_InstanceOf env this c0 c1
      | New (c0, c1, c2) -> self#on_New env this c0 c1 c2
      | Efun (c0, c1) -> self#on_Efun env this c0 c1
      | Lfun c0 -> self#on_Lfun env this c0
      | Xml (c0, c1, c2) -> self#on_Xml env this c0 c1 c2
      | Unsafeexpr c0 -> self#on_Unsafeexpr env this c0
      | Import (c0, c1) -> self#on_Import env this c0 c1
    method on_Include env this = this
    method on_Require env this = this
    method on_IncludeOnce env this = this
    method on_RequireOnce env this = this
    method on_import_flavor env this =
      match this with
      | Include -> self#on_Include env this
      | Require -> self#on_Require env this
      | IncludeOnce -> self#on_IncludeOnce env this
      | RequireOnce -> self#on_RequireOnce env this
    method on_AFvalue env this c0 =
      let r0 = self#on_expr env c0 in
      if c0 == r0 then this else AFvalue r0
    method on_AFkvalue env this c0 c1 =
      let r0 = self#on_expr env c0 in
      let r1 = self#on_expr env c1 in if c0 == r0 && c1 == r1
      then this
      else AFkvalue (r0, r1)
    method on_afield env this =
      match this with
      | AFvalue c0 -> self#on_AFvalue env this c0
      | AFkvalue (c0, c1) -> self#on_AFkvalue env this c0 c1
    method on_Plus env this = this
    method on_Minus env this = this
    method on_Star env this = this
    method on_Slash env this = this
    method on_Eqeq env this = this
    method on_EQeqeq env this = this
    method on_Starstar env this = this
    method on_Diff env this = this
    method on_Diff2 env this = this
    method on_AMpamp env this = this
    method on_BArbar env this = this
    method on_Lt env this = this
    method on_Lte env this = this
    method on_Gt env this = this
    method on_Gte env this = this
    method on_Cmp env this = this
    method on_Dot env this = this
    method on_Amp env this = this
    method on_Bar env this = this
    method on_Ltlt env this = this
    method on_Gtgt env this = this
    method on_Percent env this = this
    method on_Xor env this = this
    method on_Eq env this c0 =
      let r0 = self#on_option self#on_bop env c0 in
      if c0 == r0 then this else Eq r0
    method on_bop env this =
      match this with
      | Plus -> self#on_Plus env this
      | Minus -> self#on_Minus env this
      | Star -> self#on_Star env this
      | Slash -> self#on_Slash env this
      | Eqeq -> self#on_Eqeq env this
      | EQeqeq -> self#on_EQeqeq env this
      | Starstar -> self#on_Starstar env this
      | Diff -> self#on_Diff env this
      | Diff2 -> self#on_Diff2 env this
      | AMpamp -> self#on_AMpamp env this
      | BArbar -> self#on_BArbar env this
      | Lt -> self#on_Lt env this
      | Lte -> self#on_Lte env this
      | Gt -> self#on_Gt env this
      | Gte -> self#on_Gte env this
      | Dot -> self#on_Dot env this
      | Amp -> self#on_Amp env this
      | Bar -> self#on_Bar env this
      | Ltlt -> self#on_Ltlt env this
      | Gtgt -> self#on_Gtgt env this
      | Cmp -> self#on_Cmp env this
      | Percent -> self#on_Percent env this
      | Xor -> self#on_Xor env this
      | Eq c0 -> self#on_Eq env this c0
    method on_Utild env this = this
    method on_Unot env this = this
    method on_Uplus env this = this
    method on_Uminus env this = this
    method on_Uincr env this = this
    method on_Udecr env this = this
    method on_Upincr env this = this
    method on_Updecr env this = this
    method on_Uref env this = this
    method on_Usplat env this = this
    method on_uop env this =
      match this with
      | Utild -> self#on_Utild env this
      | Unot -> self#on_Unot env this
      | Uplus -> self#on_Uplus env this
      | Uminus -> self#on_Uminus env this
      | Uincr -> self#on_Uincr env this
      | Udecr -> self#on_Udecr env this
      | Upincr -> self#on_Upincr env this
      | Updecr -> self#on_Updecr env this
      | Uref -> self#on_Uref env this
      | Usplat -> self#on_Usplat env this
    method on_Default env this c0 =
      let r0 = self#on_block env c0 in
      if c0 == r0 then this else Default r0
    method on_Case env this c0 c1 =
      let r0 = self#on_expr env c0 in
      let r1 = self#on_block env c1 in if c0 == r0 && c1 == r1
      then this
      else Case (r0, r1)
    method on_case env this =
      match this with
      | Default c0 -> self#on_Default env this c0
      | Case (c0, c1) -> self#on_Case env this c0 c1
    method on_catch env ((c0, c1, c2) as this) =
      let r0 = self#on_id env c0 in
      let r1 = self#on_id env c1 in
      let r2 = self#on_block env c2 in
      if c0 == r0 && c1 == r1 && c2 == r2
      then this
      else (r0, r1, r2)
    method on_field env ((c0, c1) as this) =
      let r0 = self#on_expr env c0 in
      let r1 = self#on_expr env c1 in if c0 == r0 && c1 == r1
      then this
      else (r0, r1)
    method on_attr env ((c0, c1) as this) =
      let r0 = self#on_id env c0 in
      let r1 = self#on_expr env c1 in if c0 == r0 && c1 == r1
      then this
      else (r0, r1)
    method on_AHint env this c0 =
      let r0 = self#on_hint env c0 in
      if c0 == r0 then this else AHint r0
    method on_AExpr env this c0 =
      let r0 = self#on_expr env c0 in
      if c0 == r0 then this else AExpr r0
    method on_AStmt env this c0 =
      let r0 = self#on_stmt env c0 in
      if c0 == r0 then this else AStmt r0
    method on_ADef env this c0 =
      let r0 = self#on_def env c0 in
      if c0 == r0 then this else ADef r0
    method on_AProgram env this c0 =
      let r0 = self#on_program env c0 in
      if c0 == r0 then this else AProgram r0
    method on_any env this =
      match this with
      | AHint c0 -> self#on_AHint env this c0
      | AExpr c0 -> self#on_AExpr env this c0
      | AStmt c0 -> self#on_AStmt env this c0
      | ADef c0 -> self#on_ADef env this c0
      | AProgram c0 -> self#on_AProgram env this c0
  end
