/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/service-schema/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/service-schema/gen-cpp2/module_types.tcc"
#include "thrift/compiler/test/fixtures/service-schema/gen-cpp2/module_constants.h"
#include "thrift/compiler/test/fixtures/service-schema/gen-cpp2/module_data.h"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

[[maybe_unused]] static constexpr std::string_view kModuleName = "module";


namespace apache { namespace thrift {

const std::string_view TEnumTraits<::facebook::thrift::test::Result>::__fbthrift_module_name_internal_do_not_use = kModuleName;
folly::Range<::facebook::thrift::test::Result const*> const TEnumTraits<::facebook::thrift::test::Result>::values = folly::range(TEnumDataStorage<::facebook::thrift::test::Result>::values);
folly::Range<std::string_view const*> const TEnumTraits<::facebook::thrift::test::Result>::names = folly::range(TEnumDataStorage<::facebook::thrift::test::Result>::names);

bool TEnumTraits<::facebook::thrift::test::Result>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::facebook::thrift::test::Result>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

const std::vector<std::any>& TEnumTraits<::facebook::thrift::test::Result>::annotations() noexcept {
  return ::apache::thrift::detail::annotation::empty_annotations();
}

const std::vector<std::any>& TEnumTraits<::facebook::thrift::test::Result>::enumValueAnnotations(::facebook::thrift::test::Result value) noexcept {
  switch (static_cast<std::int32_t>(value)) {
    default:
      return ::apache::thrift::detail::annotation::empty_annotations();
  }
}


}} // apache::thrift



namespace facebook::thrift::test {

std::string_view CustomException::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/CustomException";
}

std::string_view CustomException::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<CustomException>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view CustomException::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<CustomException>::name;
}

CustomException::CustomException(const CustomException&) = default;
CustomException& CustomException::operator=(const CustomException&) = default;
CustomException::CustomException() :
    __fbthrift_field_result( ::facebook::thrift::test::Result::SO_SO) {
}


CustomException::~CustomException() {}

CustomException::CustomException([[maybe_unused]] CustomException&& other) noexcept :
    __fbthrift_field_name(std::move(other.__fbthrift_field_name)),
    __fbthrift_field_result(std::move(other.__fbthrift_field_result)),
    __isset(other.__isset) {
}

CustomException& CustomException::operator=([[maybe_unused]] CustomException&& other) noexcept {
    this->__fbthrift_field_name = std::move(other.__fbthrift_field_name);
    this->__fbthrift_field_result = std::move(other.__fbthrift_field_result);
    __isset = other.__isset;
    return *this;
}


CustomException::CustomException(apache::thrift::FragileConstructor, ::std::string name__arg, ::facebook::thrift::test::Result result__arg) :
    __fbthrift_field_name(std::move(name__arg)),
    __fbthrift_field_result(std::move(result__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}

void CustomException::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_name = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_result = ::facebook::thrift::test::Result();
  __isset = {};
}

void CustomException::__fbthrift_clear_terse_fields() {
}

bool CustomException::__fbthrift_is_empty() const {
  return false;
}

bool CustomException::operator==([[maybe_unused]] const CustomException& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool CustomException::operator<([[maybe_unused]] const CustomException& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::facebook::thrift::test::Result CustomException::get_result() const {
  return __fbthrift_field_result;
}

::facebook::thrift::test::Result& CustomException::set_result(::facebook::thrift::test::Result result_) {
  result_ref() = result_;
  return __fbthrift_field_result;
}

void swap([[maybe_unused]] CustomException& a, [[maybe_unused]] CustomException& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_name, b.__fbthrift_field_name);
  swap(a.__fbthrift_field_result, b.__fbthrift_field_result);
  swap(a.__isset, b.__isset);
}


} // namespace facebook::thrift::test

namespace facebook::thrift::test { namespace {
[[maybe_unused]] FOLLY_ERASE void validateAdapters() {
}
}} // namespace facebook::thrift::test
namespace apache::thrift::detail::annotation {
}
