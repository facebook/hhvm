<?php
// Copyright 2004-present Facebook. All Rights Reserved.
// This file is @generated by
// fbcode/hphp/facebook/tools/code_model/Generate.sh

namespace HH\CodeModel {

/**
 *  try block catchStatements [finallyStatement]
 */
class TryStatement /*implements ITryStatement*/ {
  use Statement;
  use Node;

  private /*?IBlockStatement*/ $block;
  private /*?Vector<ICatchStatement>*/ $catchStatements;
  private /*?IFinallyStatement*/ $finallyStatement;

  /**
   *  try block catchStatements [finallyStatement]
   */
  public function getBlock() /*: IBlockStatement*/ {
    if ($this->block === null) {
      throw new \Exception("Block is not initialized");
    }
    return $this->block;
  }
  /**
   *  try block catchStatements [finallyStatement]
   */
  public function setBlock(/*IBlockStatement*/ $value) /*: this*/ {
    $this->block = $value;
    return $this;
  }

  /**
   *  try block catchStatements [finallyStatement]
   */
  public function getCatchStatements() /*: Vector<ICatchStatement>*/ {
    if ($this->catchStatements === null) {
      $this->catchStatements = Vector {};
    }
    return $this->catchStatements;
  }
  /**
   *  try block catchStatements [finallyStatement]
   */
  public function setCatchStatements(/*Vector<ICatchStatement>*/ $value)
     /*: this*/ {
    $this->catchStatements = $value;
    return $this;
  }

  /**
   *  try block catchStatements [finallyStatement]
   */
  public function getFinallyStatement() /*: ?IFinallyStatement*/ {
    return $this->finallyStatement;
  }
  /**
   *  try block catchStatements [finallyStatement]
   */
  public function setFinallyStatement(/*?IFinallyStatement*/ $value)
     /*: this*/ {
    $this->finallyStatement = $value;
    return $this;
  }

  /**
   * Returns $visitor->visitTryStatement($this) if
   * such a method exists on $visitor.
   * Otherwise returns $visitor->visitStatement($this) if
   * such a method exists on $visitor.
   * Otherwise returns $visitor->visitNode($this) if
   */
  public function accept(/*mixed*/ $visitor) /*: mixed*/ {
    if (method_exists($visitor, "visitTryStatement")) {
      // UNSAFE
      return $visitor->visitTryStatement($this);
    } else if (method_exists($visitor, "visitStatement")) {
      // UNSAFE
      return $visitor->visitStatement($this);
    } else {
      return $visitor->visitNode($this);
    }
  }

  /**
   * Yields a list of nodes that are children of this node.
   * A node has exactly one parent, so doing a depth
   * first traversal of a node graph using getChildren will
   * traverse a spanning tree.
   */
  public function getChildren() /*: Continuation<INode>*/ {
    if ($this->block !== null) {
      yield $this->block;
    }
    if ($this->catchStatements !== null) {
      foreach ($this->catchStatements as $elem) {
        yield $elem;
      }
    }
    if ($this->finallyStatement !== null) {
      yield $this->finallyStatement;
    }
  }
}
}
