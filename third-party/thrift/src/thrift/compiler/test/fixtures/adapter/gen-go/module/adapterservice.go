// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package module

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	cpp0 "thrift/annotation/cpp"
	python1 "thrift/annotation/python"
	thrift2 "thrift/annotation/thrift"
	scope3 "thrift/annotation/scope"
	hack4 "thrift/annotation/hack"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var _ = cpp0.GoUnusedProtection__
var _ = python1.GoUnusedProtection__
var _ = thrift2.GoUnusedProtection__
var _ = scope3.GoUnusedProtection__
var _ = hack4.GoUnusedProtection__
type AdapterService interface {
  Count() (_r *CountingStruct, err error)
  // Parameters:
  //  - Arg
  AdaptedTypes(arg *HeapAllocated) (_r *HeapAllocated, err error)
}

type AdapterServiceClientInterface interface {
  thrift.ClientInterface
  Count() (_r *CountingStruct, err error)
  // Parameters:
  //  - Arg
  AdaptedTypes(arg *HeapAllocated) (_r *HeapAllocated, err error)
}

type AdapterServiceClient struct {
  AdapterServiceClientInterface
  CC thrift.ClientConn
}

func(client *AdapterServiceClient) Open() error {
  return client.CC.Open()
}

func(client *AdapterServiceClient) Close() error {
  return client.CC.Close()
}

func(client *AdapterServiceClient) IsOpen() bool {
  return client.CC.IsOpen()
}

func NewAdapterServiceClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *AdapterServiceClient {
  return &AdapterServiceClient{ CC: thrift.NewClientConn(t, f) }
}

func NewAdapterServiceClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *AdapterServiceClient {
  return &AdapterServiceClient{ CC: thrift.NewClientConnWithProtocols(t, iprot, oprot) }
}

func NewAdapterServiceClientProtocol(prot thrift.Protocol) *AdapterServiceClient {
  return NewAdapterServiceClient(prot.Transport(), prot, prot)
}

func (p *AdapterServiceClient) Count() (_r *CountingStruct, err error) {
  var args AdapterServiceCountArgs
  err = p.CC.SendMsg("count", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCount()
}


func (p *AdapterServiceClient) recvCount() (value *CountingStruct, err error) {
  var __result AdapterServiceCountResult
  err = p.CC.RecvMsg("count", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

// Parameters:
//  - Arg
func (p *AdapterServiceClient) AdaptedTypes(arg *HeapAllocated) (_r *HeapAllocated, err error) {
  args := AdapterServiceAdaptedTypesArgs{
    Arg : arg,
  }
  err = p.CC.SendMsg("adaptedTypes", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAdaptedTypes()
}


func (p *AdapterServiceClient) recvAdaptedTypes() (value *HeapAllocated, err error) {
  var __result AdapterServiceAdaptedTypesResult
  err = p.CC.RecvMsg("adaptedTypes", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}


type AdapterServiceThreadsafeClient struct {
  AdapterServiceClientInterface
  CC thrift.ClientConn
  Mu sync.Mutex
}

func(client *AdapterServiceThreadsafeClient) Open() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Open()
}

func(client *AdapterServiceThreadsafeClient) Close() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Close()
}

func(client *AdapterServiceThreadsafeClient) IsOpen() bool {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.IsOpen()
}

func NewAdapterServiceThreadsafeClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *AdapterServiceThreadsafeClient {
  return &AdapterServiceThreadsafeClient{ CC: thrift.NewClientConn(t, f) }
}

func NewAdapterServiceThreadsafeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *AdapterServiceThreadsafeClient {
  return &AdapterServiceThreadsafeClient{ CC: thrift.NewClientConnWithProtocols(t, iprot, oprot) }
}

func NewAdapterServiceThreadsafeClientProtocol(prot thrift.Protocol) *AdapterServiceThreadsafeClient {
  return NewAdapterServiceThreadsafeClient(prot.Transport(), prot, prot)
}

func (p *AdapterServiceThreadsafeClient) Count() (_r *CountingStruct, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  var args AdapterServiceCountArgs
  err = p.CC.SendMsg("count", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCount()
}


func (p *AdapterServiceThreadsafeClient) recvCount() (value *CountingStruct, err error) {
  var __result AdapterServiceCountResult
  err = p.CC.RecvMsg("count", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

// Parameters:
//  - Arg
func (p *AdapterServiceThreadsafeClient) AdaptedTypes(arg *HeapAllocated) (_r *HeapAllocated, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := AdapterServiceAdaptedTypesArgs{
    Arg : arg,
  }
  err = p.CC.SendMsg("adaptedTypes", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAdaptedTypes()
}


func (p *AdapterServiceThreadsafeClient) recvAdaptedTypes() (value *HeapAllocated, err error) {
  var __result AdapterServiceAdaptedTypesResult
  err = p.CC.RecvMsg("adaptedTypes", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}


type AdapterServiceChannelClient struct {
  RequestChannel thrift.RequestChannel
}

func (c *AdapterServiceChannelClient) Close() error {
  return c.RequestChannel.Close()
}

func (c *AdapterServiceChannelClient) IsOpen() bool {
  return c.RequestChannel.IsOpen()
}

func (c *AdapterServiceChannelClient) Open() error {
  return c.RequestChannel.Open()
}

func NewAdapterServiceChannelClient(channel thrift.RequestChannel) *AdapterServiceChannelClient {
  return &AdapterServiceChannelClient{RequestChannel: channel}
}

func (p *AdapterServiceChannelClient) Count(ctx context.Context) (_r *CountingStruct, err error) {
  args := AdapterServiceCountArgs{
  }
  var __result AdapterServiceCountResult
  err = p.RequestChannel.Call(ctx, "count", &args, &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

// Parameters:
//  - Arg
func (p *AdapterServiceChannelClient) AdaptedTypes(ctx context.Context, arg *HeapAllocated) (_r *HeapAllocated, err error) {
  args := AdapterServiceAdaptedTypesArgs{
    Arg : arg,
  }
  var __result AdapterServiceAdaptedTypesResult
  err = p.RequestChannel.Call(ctx, "adaptedTypes", &args, &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}


type AdapterServiceProcessor struct {
  processorMap map[string]thrift.ProcessorFunction
  functionServiceMap map[string]string
  handler AdapterService
}

func (p *AdapterServiceProcessor) AddToProcessorMap(key string, processor thrift.ProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *AdapterServiceProcessor) AddToFunctionServiceMap(key, service string) {
  p.functionServiceMap[key] = service
}

func (p *AdapterServiceProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction, err error) {
  if processor, ok := p.processorMap[key]; ok {
    return processor, nil
  }
  return nil, nil // generic error message will be sent
}

func (p *AdapterServiceProcessor) ProcessorMap() map[string]thrift.ProcessorFunction {
  return p.processorMap
}

func (p *AdapterServiceProcessor) FunctionServiceMap() map[string]string {
  return p.functionServiceMap
}

func NewAdapterServiceProcessor(handler AdapterService) *AdapterServiceProcessor {
  self31 := &AdapterServiceProcessor{handler:handler, processorMap:make(map[string]thrift.ProcessorFunction), functionServiceMap:make(map[string]string)}
  self31.processorMap["count"] = &adapterServiceProcessorCount{handler:handler}
  self31.processorMap["adaptedTypes"] = &adapterServiceProcessorAdaptedTypes{handler:handler}
  self31.functionServiceMap["count"] = "AdapterService"
  self31.functionServiceMap["adaptedTypes"] = "AdapterService"
  return self31
}

type adapterServiceProcessorCount struct {
  handler AdapterService
}

func (p *AdapterServiceCountResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *adapterServiceProcessorCount) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := AdapterServiceCountArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *adapterServiceProcessorCount) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("count", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *adapterServiceProcessorCount) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  var __result AdapterServiceCountResult
  if retval, err := p.handler.Count(); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing count: " + err.Error(), err)
      return x, x
    }
  } else {
    __result.Success = retval
  }
  return &__result, nil
}

type adapterServiceProcessorAdaptedTypes struct {
  handler AdapterService
}

func (p *AdapterServiceAdaptedTypesResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *adapterServiceProcessorAdaptedTypes) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := AdapterServiceAdaptedTypesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *adapterServiceProcessorAdaptedTypes) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("adaptedTypes", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *adapterServiceProcessorAdaptedTypes) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*AdapterServiceAdaptedTypesArgs)
  var __result AdapterServiceAdaptedTypesResult
  if retval, err := p.handler.AdaptedTypes(args.Arg); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing adaptedTypes: " + err.Error(), err)
      return x, x
    }
  } else {
    __result.Success = retval
  }
  return &__result, nil
}


// HELPER FUNCTIONS AND STRUCTURES

type AdapterServiceCountArgs struct {
  thrift.IRequest
}

func NewAdapterServiceCountArgs() *AdapterServiceCountArgs {
  return &AdapterServiceCountArgs{}
}

type AdapterServiceCountArgsBuilder struct {
  obj *AdapterServiceCountArgs
}

func NewAdapterServiceCountArgsBuilder() *AdapterServiceCountArgsBuilder{
  return &AdapterServiceCountArgsBuilder{
    obj: NewAdapterServiceCountArgs(),
  }
}

func (p AdapterServiceCountArgsBuilder) Emit() *AdapterServiceCountArgs{
  return &AdapterServiceCountArgs{
  }
}

func (p *AdapterServiceCountArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdapterServiceCountArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("count_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdapterServiceCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("AdapterServiceCountArgs({})")
}

// Attributes:
//  - Success
type AdapterServiceCountResult struct {
  thrift.IResponse
  Success *CountingStruct `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewAdapterServiceCountResult() *AdapterServiceCountResult {
  return &AdapterServiceCountResult{}
}

var AdapterServiceCountResult_Success_DEFAULT *CountingStruct
func (p *AdapterServiceCountResult) GetSuccess() *CountingStruct {
  if !p.IsSetSuccess() {
    return AdapterServiceCountResult_Success_DEFAULT
  }
  return p.Success
}
func (p *AdapterServiceCountResult) DefaultGetSuccess() *CountingStruct {
  if !p.IsSetSuccess() {
    return NewCountingStruct()
  }
  return p.Success
}
func (p *AdapterServiceCountResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type AdapterServiceCountResultBuilder struct {
  obj *AdapterServiceCountResult
}

func NewAdapterServiceCountResultBuilder() *AdapterServiceCountResultBuilder{
  return &AdapterServiceCountResultBuilder{
    obj: NewAdapterServiceCountResult(),
  }
}

func (p AdapterServiceCountResultBuilder) Emit() *AdapterServiceCountResult{
  return &AdapterServiceCountResult{
    Success: p.obj.Success,
  }
}

func (a *AdapterServiceCountResultBuilder) Success(success *CountingStruct) *AdapterServiceCountResultBuilder {
  a.obj.Success = success
  return a
}

func (a *AdapterServiceCountResult) SetSuccess(success *CountingStruct) *AdapterServiceCountResult {
  a.Success = success
  return a
}

func (p *AdapterServiceCountResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdapterServiceCountResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewCountingStruct()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdapterServiceCountResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("count_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdapterServiceCountResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdapterServiceCountResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("AdapterServiceCountResult({Success:%s})", successVal)
}

// Attributes:
//  - Arg
type AdapterServiceAdaptedTypesArgs struct {
  thrift.IRequest
  Arg *HeapAllocated `thrift:"arg,1" db:"arg" json:"arg"`
}

func NewAdapterServiceAdaptedTypesArgs() *AdapterServiceAdaptedTypesArgs {
  return &AdapterServiceAdaptedTypesArgs{
    Arg: NewHeapAllocated(),
  }
}

var AdapterServiceAdaptedTypesArgs_Arg_DEFAULT *HeapAllocated
func (p *AdapterServiceAdaptedTypesArgs) GetArg() *HeapAllocated {
  if !p.IsSetArg() {
    return AdapterServiceAdaptedTypesArgs_Arg_DEFAULT
  }
  return p.Arg
}
func (p *AdapterServiceAdaptedTypesArgs) DefaultGetArg() *HeapAllocated {
  if !p.IsSetArg() {
    return NewHeapAllocated()
  }
  return p.Arg
}
func (p *AdapterServiceAdaptedTypesArgs) IsSetArg() bool {
  return p != nil && p.Arg != nil
}

type AdapterServiceAdaptedTypesArgsBuilder struct {
  obj *AdapterServiceAdaptedTypesArgs
}

func NewAdapterServiceAdaptedTypesArgsBuilder() *AdapterServiceAdaptedTypesArgsBuilder{
  return &AdapterServiceAdaptedTypesArgsBuilder{
    obj: NewAdapterServiceAdaptedTypesArgs(),
  }
}

func (p AdapterServiceAdaptedTypesArgsBuilder) Emit() *AdapterServiceAdaptedTypesArgs{
  return &AdapterServiceAdaptedTypesArgs{
    Arg: p.obj.Arg,
  }
}

func (a *AdapterServiceAdaptedTypesArgsBuilder) Arg(arg *HeapAllocated) *AdapterServiceAdaptedTypesArgsBuilder {
  a.obj.Arg = arg
  return a
}

func (a *AdapterServiceAdaptedTypesArgs) SetArg(arg *HeapAllocated) *AdapterServiceAdaptedTypesArgs {
  a.Arg = arg
  return a
}

func (p *AdapterServiceAdaptedTypesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdapterServiceAdaptedTypesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Arg = NewHeapAllocated()
  if err := p.Arg.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Arg), err)
  }
  return nil
}

func (p *AdapterServiceAdaptedTypesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("adaptedTypes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdapterServiceAdaptedTypesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("arg", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:arg: ", p), err) }
  if err := p.Arg.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Arg), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:arg: ", p), err) }
  return err
}

func (p *AdapterServiceAdaptedTypesArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var argVal string
  if p.Arg == nil {
    argVal = "<nil>"
  } else {
    argVal = fmt.Sprintf("%v", p.Arg)
  }
  return fmt.Sprintf("AdapterServiceAdaptedTypesArgs({Arg:%s})", argVal)
}

// Attributes:
//  - Success
type AdapterServiceAdaptedTypesResult struct {
  thrift.IResponse
  Success *HeapAllocated `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewAdapterServiceAdaptedTypesResult() *AdapterServiceAdaptedTypesResult {
  return &AdapterServiceAdaptedTypesResult{}
}

var AdapterServiceAdaptedTypesResult_Success_DEFAULT *HeapAllocated
func (p *AdapterServiceAdaptedTypesResult) GetSuccess() *HeapAllocated {
  if !p.IsSetSuccess() {
    return AdapterServiceAdaptedTypesResult_Success_DEFAULT
  }
  return p.Success
}
func (p *AdapterServiceAdaptedTypesResult) DefaultGetSuccess() *HeapAllocated {
  if !p.IsSetSuccess() {
    return NewHeapAllocated()
  }
  return p.Success
}
func (p *AdapterServiceAdaptedTypesResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type AdapterServiceAdaptedTypesResultBuilder struct {
  obj *AdapterServiceAdaptedTypesResult
}

func NewAdapterServiceAdaptedTypesResultBuilder() *AdapterServiceAdaptedTypesResultBuilder{
  return &AdapterServiceAdaptedTypesResultBuilder{
    obj: NewAdapterServiceAdaptedTypesResult(),
  }
}

func (p AdapterServiceAdaptedTypesResultBuilder) Emit() *AdapterServiceAdaptedTypesResult{
  return &AdapterServiceAdaptedTypesResult{
    Success: p.obj.Success,
  }
}

func (a *AdapterServiceAdaptedTypesResultBuilder) Success(success *HeapAllocated) *AdapterServiceAdaptedTypesResultBuilder {
  a.obj.Success = success
  return a
}

func (a *AdapterServiceAdaptedTypesResult) SetSuccess(success *HeapAllocated) *AdapterServiceAdaptedTypesResult {
  a.Success = success
  return a
}

func (p *AdapterServiceAdaptedTypesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdapterServiceAdaptedTypesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewHeapAllocated()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdapterServiceAdaptedTypesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("adaptedTypes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdapterServiceAdaptedTypesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdapterServiceAdaptedTypesResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("AdapterServiceAdaptedTypesResult({Success:%s})", successVal)
}


