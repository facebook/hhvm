// Autogenerated by Thrift for thrift/compiler/test/fixtures/interactions/src/module.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package module

import (
    "context"
    "errors"
    "fmt"
    "io"
    "reflect"

    shared "shared"
    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
    metadata "github.com/facebook/fbthrift/thrift/lib/thrift/metadata"
)

// (needed to ensure safety because of naive import list construction)
var _ = shared.GoUnusedProtection__
var _ = context.Background
var _ = errors.New
var _ = fmt.Printf
var _ = io.EOF
var _ = reflect.Ptr
var _ = thrift.VOID
var _ = metadata.GoUnusedProtection__

type MyInteraction interface {
    Frobnicate(ctx context.Context) (int32, error)
    Ping(ctx context.Context) (error)
}

type MyInteractionClient interface {
    io.Closer
    Frobnicate(ctx context.Context) (int32, error)
    Ping(ctx context.Context) (error)
    Truthify(ctx context.Context) (<-chan bool /* elem stream */, <-chan error /* stream err */, error)
}

type myInteractionClientImpl struct {
    ch thrift.RequestChannel
}
// Compile time interface enforcer
var _ MyInteractionClient = (*myInteractionClientImpl)(nil)

func NewMyInteractionChannelClient(channel thrift.RequestChannel) MyInteractionClient {
    return &myInteractionClientImpl{
        ch: channel,
    }
}

func (c *myInteractionClientImpl) Close() error {
    return c.ch.Close()
}

func (c *myInteractionClientImpl) Frobnicate(ctx context.Context) (int32, error) {
    fbthriftReq := &reqMyInteractionFrobnicate{
    }
    fbthriftResp := newRespMyInteractionFrobnicate()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "frobnicate", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return 0, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return 0, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *myInteractionClientImpl) Ping(ctx context.Context) (error) {
    fbthriftReq := &reqMyInteractionPing{
    }
    return c.ch.SendRequestNoResponse(ctx, "ping", fbthriftReq)
}

func (c *myInteractionClientImpl) Truthify(ctx context.Context) (<-chan bool /* elem stream */, <-chan error /* stream err */, error) {
    // Must be a cancellable context to prevent goroutine leaks
    if ctx.Done() == nil {
		return nil, nil, errors.New("context does not support cancellation")
	}
    fbthriftStreamCtx, fbthriftStreamCancel := context.WithCancel(ctx)

    fbthriftReq := &reqMyInteractionTruthify{
    }
    fbthriftResp := newRespMyInteractionTruthify()

    fbthriftErrChan := make(chan error, 1)
    fbthriftElemChan := make(chan bool, thrift.DefaultStreamBufferSize)

    fbthriftOnStreamNextFn := func(d thrift.Decoder) error {
        fbthriftStreamValue := newStreamMyInteractionTruthify()
        fbthriftSpecErr := fbthriftStreamValue.Read(d)
        if fbthriftSpecErr != nil {
            return fbthriftSpecErr
        } else if fbthriftStreamEx := fbthriftStreamValue.Exception(); fbthriftStreamEx != nil {
            return fbthriftStreamEx
        }
        fbthriftElemChan <- fbthriftStreamValue.GetSuccess()
        return nil
    }
    fbthriftOnStreamErrorFn := func(err error) {
        fbthriftErrChan <- err
        close(fbthriftElemChan)
        close(fbthriftErrChan)
    }
    fbthriftOnStreamCompleteFn := func() {
        close(fbthriftElemChan)
        close(fbthriftErrChan)
    }

    fbthriftErr := c.ch.SendRequestStream(
        fbthriftStreamCtx,
        "truthify",
        fbthriftReq,
        fbthriftResp,
        fbthriftOnStreamNextFn,
        fbthriftOnStreamErrorFn,
        fbthriftOnStreamCompleteFn,
    )
    if fbthriftErr != nil {
        fbthriftStreamCancel()
        return nil, nil, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        fbthriftStreamCancel()
        return nil, nil, fbthriftEx
    }
    return fbthriftElemChan, fbthriftErrChan, nil
}


type MyInteractionFast interface {
    Frobnicate(ctx context.Context) (int32, error)
    Ping(ctx context.Context) (error)
}

type MyInteractionFastClient interface {
    io.Closer
    Frobnicate(ctx context.Context) (int32, error)
    Ping(ctx context.Context) (error)
    Truthify(ctx context.Context) (<-chan bool /* elem stream */, <-chan error /* stream err */, error)
}

type myInteractionFastClientImpl struct {
    ch thrift.RequestChannel
}
// Compile time interface enforcer
var _ MyInteractionFastClient = (*myInteractionFastClientImpl)(nil)

func NewMyInteractionFastChannelClient(channel thrift.RequestChannel) MyInteractionFastClient {
    return &myInteractionFastClientImpl{
        ch: channel,
    }
}

func (c *myInteractionFastClientImpl) Close() error {
    return c.ch.Close()
}

func (c *myInteractionFastClientImpl) Frobnicate(ctx context.Context) (int32, error) {
    fbthriftReq := &reqMyInteractionFastFrobnicate{
    }
    fbthriftResp := newRespMyInteractionFastFrobnicate()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "frobnicate", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return 0, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return 0, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *myInteractionFastClientImpl) Ping(ctx context.Context) (error) {
    fbthriftReq := &reqMyInteractionFastPing{
    }
    return c.ch.SendRequestNoResponse(ctx, "ping", fbthriftReq)
}

func (c *myInteractionFastClientImpl) Truthify(ctx context.Context) (<-chan bool /* elem stream */, <-chan error /* stream err */, error) {
    // Must be a cancellable context to prevent goroutine leaks
    if ctx.Done() == nil {
		return nil, nil, errors.New("context does not support cancellation")
	}
    fbthriftStreamCtx, fbthriftStreamCancel := context.WithCancel(ctx)

    fbthriftReq := &reqMyInteractionFastTruthify{
    }
    fbthriftResp := newRespMyInteractionFastTruthify()

    fbthriftErrChan := make(chan error, 1)
    fbthriftElemChan := make(chan bool, thrift.DefaultStreamBufferSize)

    fbthriftOnStreamNextFn := func(d thrift.Decoder) error {
        fbthriftStreamValue := newStreamMyInteractionFastTruthify()
        fbthriftSpecErr := fbthriftStreamValue.Read(d)
        if fbthriftSpecErr != nil {
            return fbthriftSpecErr
        } else if fbthriftStreamEx := fbthriftStreamValue.Exception(); fbthriftStreamEx != nil {
            return fbthriftStreamEx
        }
        fbthriftElemChan <- fbthriftStreamValue.GetSuccess()
        return nil
    }
    fbthriftOnStreamErrorFn := func(err error) {
        fbthriftErrChan <- err
        close(fbthriftElemChan)
        close(fbthriftErrChan)
    }
    fbthriftOnStreamCompleteFn := func() {
        close(fbthriftElemChan)
        close(fbthriftErrChan)
    }

    fbthriftErr := c.ch.SendRequestStream(
        fbthriftStreamCtx,
        "truthify",
        fbthriftReq,
        fbthriftResp,
        fbthriftOnStreamNextFn,
        fbthriftOnStreamErrorFn,
        fbthriftOnStreamCompleteFn,
    )
    if fbthriftErr != nil {
        fbthriftStreamCancel()
        return nil, nil, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        fbthriftStreamCancel()
        return nil, nil, fbthriftEx
    }
    return fbthriftElemChan, fbthriftErrChan, nil
}


type SerialInteraction interface {
    Frobnicate(ctx context.Context) (error)
}

type SerialInteractionClient interface {
    io.Closer
    Frobnicate(ctx context.Context) (error)
}

type serialInteractionClientImpl struct {
    ch thrift.RequestChannel
}
// Compile time interface enforcer
var _ SerialInteractionClient = (*serialInteractionClientImpl)(nil)

func NewSerialInteractionChannelClient(channel thrift.RequestChannel) SerialInteractionClient {
    return &serialInteractionClientImpl{
        ch: channel,
    }
}

func (c *serialInteractionClientImpl) Close() error {
    return c.ch.Close()
}

func (c *serialInteractionClientImpl) Frobnicate(ctx context.Context) (error) {
    fbthriftReq := &reqSerialInteractionFrobnicate{
    }
    fbthriftResp := newRespSerialInteractionFrobnicate()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "frobnicate", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return fbthriftEx
    }
    return nil
}


type BoxedInteraction interface {
    GetABox(ctx context.Context) (*ShouldBeBoxed, error)
}

type BoxedInteractionClient interface {
    io.Closer
    GetABox(ctx context.Context) (*ShouldBeBoxed, error)
}

type boxedInteractionClientImpl struct {
    ch thrift.RequestChannel
}
// Compile time interface enforcer
var _ BoxedInteractionClient = (*boxedInteractionClientImpl)(nil)

func NewBoxedInteractionChannelClient(channel thrift.RequestChannel) BoxedInteractionClient {
    return &boxedInteractionClientImpl{
        ch: channel,
    }
}

func (c *boxedInteractionClientImpl) Close() error {
    return c.ch.Close()
}

func (c *boxedInteractionClientImpl) GetABox(ctx context.Context) (*ShouldBeBoxed, error) {
    fbthriftReq := &reqBoxedInteractionGetABox{
    }
    fbthriftResp := newRespBoxedInteractionGetABox()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "getABox", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return nil, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return nil, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}



type MyService interface {
    Foo(ctx context.Context) (error)
}

type MyServiceClient interface {
    io.Closer
    Foo(ctx context.Context) (error)
}

type myServiceClientImpl struct {
    ch thrift.RequestChannel
}
// Compile time interface enforcer
var _ MyServiceClient = (*myServiceClientImpl)(nil)

func NewMyServiceChannelClient(channel thrift.RequestChannel) MyServiceClient {
    return &myServiceClientImpl{
        ch: channel,
    }
}

func (c *myServiceClientImpl) Close() error {
    return c.ch.Close()
}

func (c *myServiceClientImpl) Foo(ctx context.Context) (error) {
    fbthriftReq := &reqMyServiceFoo{
    }
    fbthriftResp := newRespMyServiceFoo()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "foo", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return fbthriftEx
    }
    return nil
}


type MyServiceProcessor struct {
    processorFunctionMap map[string]thrift.ProcessorFunction
    functionServiceMap   map[string]string
    handler              MyService
}

func NewMyServiceProcessor(handler MyService) *MyServiceProcessor {
    p := &MyServiceProcessor{
        handler:              handler,
        processorFunctionMap: make(map[string]thrift.ProcessorFunction),
        functionServiceMap:   make(map[string]string),
    }
    p.AddToProcessorFunctionMap("foo", &procFuncMyServiceFoo{handler: handler})
    p.AddToFunctionServiceMap("foo", "MyService")

    return p
}

func (p *MyServiceProcessor) AddToProcessorFunctionMap(key string, processorFunction thrift.ProcessorFunction) {
    p.processorFunctionMap[key] = processorFunction
}

func (p *MyServiceProcessor) AddToFunctionServiceMap(key, service string) {
    p.functionServiceMap[key] = service
}

func (p *MyServiceProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction) {
    return p.processorFunctionMap[key]
}

func (p *MyServiceProcessor) ProcessorFunctionMap() map[string]thrift.ProcessorFunction {
    return p.processorFunctionMap
}

func (p *MyServiceProcessor) FunctionServiceMap() map[string]string {
    return p.functionServiceMap
}

func (p *MyServiceProcessor) PackageName() string {
    return "module"
}

func (p *MyServiceProcessor) GetThriftMetadata() *metadata.ThriftMetadata {
    return GetThriftMetadataForService("module.MyService")
}


type procFuncMyServiceFoo struct {
    handler MyService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncMyServiceFoo)(nil)

func (p *procFuncMyServiceFoo) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqMyServiceFoo()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncMyServiceFoo) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) error {
    messageType := thrift.REPLY
    switch result.(type) {
    case *thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err := encoder.WriteMessageBegin("foo", messageType, seqId); err != nil {
        return err
    }
    if err := result.Write(encoder); err != nil {
        return err
    }
    if err := encoder.WriteMessageEnd(); err != nil {
        return err
    }
    return encoder.Flush()
}

func (p *procFuncMyServiceFoo) RunContext(ctx context.Context, reqStruct thrift.ReadableStruct) (thrift.WritableStruct, error) {
    result := newRespMyServiceFoo()
    err := p.handler.Foo(ctx)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing Foo: " + err.Error(), err)
        return x, x
    }

    return result, nil
}


type Factories interface {
    Foo(ctx context.Context) (error)
}

type FactoriesClient interface {
    io.Closer
    Foo(ctx context.Context) (error)
}

type factoriesClientImpl struct {
    ch thrift.RequestChannel
}
// Compile time interface enforcer
var _ FactoriesClient = (*factoriesClientImpl)(nil)

func NewFactoriesChannelClient(channel thrift.RequestChannel) FactoriesClient {
    return &factoriesClientImpl{
        ch: channel,
    }
}

func (c *factoriesClientImpl) Close() error {
    return c.ch.Close()
}

func (c *factoriesClientImpl) Foo(ctx context.Context) (error) {
    fbthriftReq := &reqFactoriesFoo{
    }
    fbthriftResp := newRespFactoriesFoo()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "foo", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return fbthriftEx
    }
    return nil
}


type FactoriesProcessor struct {
    processorFunctionMap map[string]thrift.ProcessorFunction
    functionServiceMap   map[string]string
    handler              Factories
}

func NewFactoriesProcessor(handler Factories) *FactoriesProcessor {
    p := &FactoriesProcessor{
        handler:              handler,
        processorFunctionMap: make(map[string]thrift.ProcessorFunction),
        functionServiceMap:   make(map[string]string),
    }
    p.AddToProcessorFunctionMap("foo", &procFuncFactoriesFoo{handler: handler})
    p.AddToFunctionServiceMap("foo", "Factories")

    return p
}

func (p *FactoriesProcessor) AddToProcessorFunctionMap(key string, processorFunction thrift.ProcessorFunction) {
    p.processorFunctionMap[key] = processorFunction
}

func (p *FactoriesProcessor) AddToFunctionServiceMap(key, service string) {
    p.functionServiceMap[key] = service
}

func (p *FactoriesProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction) {
    return p.processorFunctionMap[key]
}

func (p *FactoriesProcessor) ProcessorFunctionMap() map[string]thrift.ProcessorFunction {
    return p.processorFunctionMap
}

func (p *FactoriesProcessor) FunctionServiceMap() map[string]string {
    return p.functionServiceMap
}

func (p *FactoriesProcessor) PackageName() string {
    return "module"
}

func (p *FactoriesProcessor) GetThriftMetadata() *metadata.ThriftMetadata {
    return GetThriftMetadataForService("module.Factories")
}


type procFuncFactoriesFoo struct {
    handler Factories
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncFactoriesFoo)(nil)

func (p *procFuncFactoriesFoo) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqFactoriesFoo()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncFactoriesFoo) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) error {
    messageType := thrift.REPLY
    switch result.(type) {
    case *thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err := encoder.WriteMessageBegin("foo", messageType, seqId); err != nil {
        return err
    }
    if err := result.Write(encoder); err != nil {
        return err
    }
    if err := encoder.WriteMessageEnd(); err != nil {
        return err
    }
    return encoder.Flush()
}

func (p *procFuncFactoriesFoo) RunContext(ctx context.Context, reqStruct thrift.ReadableStruct) (thrift.WritableStruct, error) {
    result := newRespFactoriesFoo()
    err := p.handler.Foo(ctx)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing Foo: " + err.Error(), err)
        return x, x
    }

    return result, nil
}


type Perform interface {
    Foo(ctx context.Context) (error)
}

type PerformClient interface {
    io.Closer
    Foo(ctx context.Context) (error)
}

type performClientImpl struct {
    ch thrift.RequestChannel
}
// Compile time interface enforcer
var _ PerformClient = (*performClientImpl)(nil)

func NewPerformChannelClient(channel thrift.RequestChannel) PerformClient {
    return &performClientImpl{
        ch: channel,
    }
}

func (c *performClientImpl) Close() error {
    return c.ch.Close()
}

func (c *performClientImpl) Foo(ctx context.Context) (error) {
    fbthriftReq := &reqPerformFoo{
    }
    fbthriftResp := newRespPerformFoo()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "foo", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return fbthriftEx
    }
    return nil
}


type PerformProcessor struct {
    processorFunctionMap map[string]thrift.ProcessorFunction
    functionServiceMap   map[string]string
    handler              Perform
}

func NewPerformProcessor(handler Perform) *PerformProcessor {
    p := &PerformProcessor{
        handler:              handler,
        processorFunctionMap: make(map[string]thrift.ProcessorFunction),
        functionServiceMap:   make(map[string]string),
    }
    p.AddToProcessorFunctionMap("foo", &procFuncPerformFoo{handler: handler})
    p.AddToFunctionServiceMap("foo", "Perform")

    return p
}

func (p *PerformProcessor) AddToProcessorFunctionMap(key string, processorFunction thrift.ProcessorFunction) {
    p.processorFunctionMap[key] = processorFunction
}

func (p *PerformProcessor) AddToFunctionServiceMap(key, service string) {
    p.functionServiceMap[key] = service
}

func (p *PerformProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction) {
    return p.processorFunctionMap[key]
}

func (p *PerformProcessor) ProcessorFunctionMap() map[string]thrift.ProcessorFunction {
    return p.processorFunctionMap
}

func (p *PerformProcessor) FunctionServiceMap() map[string]string {
    return p.functionServiceMap
}

func (p *PerformProcessor) PackageName() string {
    return "module"
}

func (p *PerformProcessor) GetThriftMetadata() *metadata.ThriftMetadata {
    return GetThriftMetadataForService("module.Perform")
}


type procFuncPerformFoo struct {
    handler Perform
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncPerformFoo)(nil)

func (p *procFuncPerformFoo) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqPerformFoo()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncPerformFoo) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) error {
    messageType := thrift.REPLY
    switch result.(type) {
    case *thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err := encoder.WriteMessageBegin("foo", messageType, seqId); err != nil {
        return err
    }
    if err := result.Write(encoder); err != nil {
        return err
    }
    if err := encoder.WriteMessageEnd(); err != nil {
        return err
    }
    return encoder.Flush()
}

func (p *procFuncPerformFoo) RunContext(ctx context.Context, reqStruct thrift.ReadableStruct) (thrift.WritableStruct, error) {
    result := newRespPerformFoo()
    err := p.handler.Foo(ctx)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing Foo: " + err.Error(), err)
        return x, x
    }

    return result, nil
}


type InteractWithShared interface {
    DoSomeSimilarThings(ctx context.Context) (*shared.DoSomethingResult, error)
}

type InteractWithSharedClient interface {
    io.Closer
    DoSomeSimilarThings(ctx context.Context) (*shared.DoSomethingResult, error)
}

type interactWithSharedClientImpl struct {
    ch thrift.RequestChannel
}
// Compile time interface enforcer
var _ InteractWithSharedClient = (*interactWithSharedClientImpl)(nil)

func NewInteractWithSharedChannelClient(channel thrift.RequestChannel) InteractWithSharedClient {
    return &interactWithSharedClientImpl{
        ch: channel,
    }
}

func (c *interactWithSharedClientImpl) Close() error {
    return c.ch.Close()
}

func (c *interactWithSharedClientImpl) DoSomeSimilarThings(ctx context.Context) (*shared.DoSomethingResult, error) {
    fbthriftReq := &reqInteractWithSharedDoSomeSimilarThings{
    }
    fbthriftResp := newRespInteractWithSharedDoSomeSimilarThings()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "do_some_similar_things", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return nil, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return nil, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}


type InteractWithSharedProcessor struct {
    processorFunctionMap map[string]thrift.ProcessorFunction
    functionServiceMap   map[string]string
    handler              InteractWithShared
}

func NewInteractWithSharedProcessor(handler InteractWithShared) *InteractWithSharedProcessor {
    p := &InteractWithSharedProcessor{
        handler:              handler,
        processorFunctionMap: make(map[string]thrift.ProcessorFunction),
        functionServiceMap:   make(map[string]string),
    }
    p.AddToProcessorFunctionMap("do_some_similar_things", &procFuncInteractWithSharedDoSomeSimilarThings{handler: handler})
    p.AddToFunctionServiceMap("do_some_similar_things", "InteractWithShared")

    return p
}

func (p *InteractWithSharedProcessor) AddToProcessorFunctionMap(key string, processorFunction thrift.ProcessorFunction) {
    p.processorFunctionMap[key] = processorFunction
}

func (p *InteractWithSharedProcessor) AddToFunctionServiceMap(key, service string) {
    p.functionServiceMap[key] = service
}

func (p *InteractWithSharedProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction) {
    return p.processorFunctionMap[key]
}

func (p *InteractWithSharedProcessor) ProcessorFunctionMap() map[string]thrift.ProcessorFunction {
    return p.processorFunctionMap
}

func (p *InteractWithSharedProcessor) FunctionServiceMap() map[string]string {
    return p.functionServiceMap
}

func (p *InteractWithSharedProcessor) PackageName() string {
    return "module"
}

func (p *InteractWithSharedProcessor) GetThriftMetadata() *metadata.ThriftMetadata {
    return GetThriftMetadataForService("module.InteractWithShared")
}


type procFuncInteractWithSharedDoSomeSimilarThings struct {
    handler InteractWithShared
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncInteractWithSharedDoSomeSimilarThings)(nil)

func (p *procFuncInteractWithSharedDoSomeSimilarThings) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqInteractWithSharedDoSomeSimilarThings()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncInteractWithSharedDoSomeSimilarThings) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) error {
    messageType := thrift.REPLY
    switch result.(type) {
    case *thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err := encoder.WriteMessageBegin("do_some_similar_things", messageType, seqId); err != nil {
        return err
    }
    if err := result.Write(encoder); err != nil {
        return err
    }
    if err := encoder.WriteMessageEnd(); err != nil {
        return err
    }
    return encoder.Flush()
}

func (p *procFuncInteractWithSharedDoSomeSimilarThings) RunContext(ctx context.Context, reqStruct thrift.ReadableStruct) (thrift.WritableStruct, error) {
    result := newRespInteractWithSharedDoSomeSimilarThings()
    retval, err := p.handler.DoSomeSimilarThings(ctx)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing DoSomeSimilarThings: " + err.Error(), err)
        return x, x
    }

    result.Success = retval
    return result, nil
}


type BoxService interface {
}

type BoxServiceClient interface {
    io.Closer
}

type boxServiceClientImpl struct {
    ch thrift.RequestChannel
}
// Compile time interface enforcer
var _ BoxServiceClient = (*boxServiceClientImpl)(nil)

func NewBoxServiceChannelClient(channel thrift.RequestChannel) BoxServiceClient {
    return &boxServiceClientImpl{
        ch: channel,
    }
}

func (c *boxServiceClientImpl) Close() error {
    return c.ch.Close()
}


type BoxServiceProcessor struct {
    processorFunctionMap map[string]thrift.ProcessorFunction
    functionServiceMap   map[string]string
    handler              BoxService
}

func NewBoxServiceProcessor(handler BoxService) *BoxServiceProcessor {
    p := &BoxServiceProcessor{
        handler:              handler,
        processorFunctionMap: make(map[string]thrift.ProcessorFunction),
        functionServiceMap:   make(map[string]string),
    }

    return p
}

func (p *BoxServiceProcessor) AddToProcessorFunctionMap(key string, processorFunction thrift.ProcessorFunction) {
    p.processorFunctionMap[key] = processorFunction
}

func (p *BoxServiceProcessor) AddToFunctionServiceMap(key, service string) {
    p.functionServiceMap[key] = service
}

func (p *BoxServiceProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction) {
    return p.processorFunctionMap[key]
}

func (p *BoxServiceProcessor) ProcessorFunctionMap() map[string]thrift.ProcessorFunction {
    return p.processorFunctionMap
}

func (p *BoxServiceProcessor) FunctionServiceMap() map[string]string {
    return p.functionServiceMap
}

func (p *BoxServiceProcessor) PackageName() string {
    return "module"
}

func (p *BoxServiceProcessor) GetThriftMetadata() *metadata.ThriftMetadata {
    return GetThriftMetadataForService("module.BoxService")
}


