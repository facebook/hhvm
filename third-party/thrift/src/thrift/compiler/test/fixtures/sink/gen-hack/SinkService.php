<?hh
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/**
 * Original thrift service:-
 * SinkService
 */
interface SinkServiceAsyncIf extends \IThriftAsyncIf {
}

/**
 * Original thrift service:-
 * SinkService
 */
interface SinkServiceIf extends \IThriftSyncIf {
}

/**
 * Original thrift service:-
 * SinkService
 */
interface SinkServiceAsyncClientIf extends SinkServiceAsyncIf {
  /**
   * Original thrift definition:-
   * void, sink<SinkPayload, FinalResponse>
   *   method();
   */
  public function method(): Awaitable<\ResponseAndClientSink<void, SinkPayload, FinalResponse>>;

  /**
   * Original thrift definition:-
   * InitialResponse, sink<SinkPayload, FinalResponse>
   *   methodAndReponse();
   */
  public function methodAndReponse(): Awaitable<\ResponseAndClientSink<InitialResponse, SinkPayload, FinalResponse>>;

  /**
   * Original thrift definition:-
   * void, sink<SinkPayload, FinalResponse>
   *   methodThrow()
   *   throws (1: InitialException ex);
   */
  public function methodThrow(): Awaitable<\ResponseAndClientSink<void, SinkPayload, FinalResponse>>;

  /**
   * Original thrift definition:-
   * void, sink<SinkPayload, throws (1: SinkException1 ex), FinalResponse>
   *   methodSinkThrow();
   */
  public function methodSinkThrow(): Awaitable<\ResponseAndClientSink<void, SinkPayload, FinalResponse>>;

  /**
   * Original thrift definition:-
   * void, sink<SinkPayload, FinalResponse, throws (1: SinkException2 ex)>
   *   methodFinalThrow();
   */
  public function methodFinalThrow(): Awaitable<\ResponseAndClientSink<void, SinkPayload, FinalResponse>>;

  /**
   * Original thrift definition:-
   * void, sink<SinkPayload, throws (1: SinkException1 ex), FinalResponse, throws (1: SinkException2 ex)>
   *   methodBothThrow();
   */
  public function methodBothThrow(): Awaitable<\ResponseAndClientSink<void, SinkPayload, FinalResponse>>;

  /**
   * Original thrift definition:-
   * void, sink<SinkPayload, FinalResponse>
   *   methodFast();
   */
  public function methodFast(): Awaitable<\ResponseAndClientSink<void, SinkPayload, FinalResponse>>;
}

/**
 * Original thrift service:-
 * SinkService
 */
interface SinkServiceClientIf extends \IThriftSyncIf {
  /**
   * Original thrift definition:-
   * void, sink<SinkPayload, FinalResponse>
   *   method();
   */
  public function method(): Awaitable<\ResponseAndClientSink<void, SinkPayload, FinalResponse>>;

  /**
   * Original thrift definition:-
   * InitialResponse, sink<SinkPayload, FinalResponse>
   *   methodAndReponse();
   */
  public function methodAndReponse(): Awaitable<\ResponseAndClientSink<InitialResponse, SinkPayload, FinalResponse>>;

  /**
   * Original thrift definition:-
   * void, sink<SinkPayload, FinalResponse>
   *   methodThrow()
   *   throws (1: InitialException ex);
   */
  public function methodThrow(): Awaitable<\ResponseAndClientSink<void, SinkPayload, FinalResponse>>;

  /**
   * Original thrift definition:-
   * void, sink<SinkPayload, throws (1: SinkException1 ex), FinalResponse>
   *   methodSinkThrow();
   */
  public function methodSinkThrow(): Awaitable<\ResponseAndClientSink<void, SinkPayload, FinalResponse>>;

  /**
   * Original thrift definition:-
   * void, sink<SinkPayload, FinalResponse, throws (1: SinkException2 ex)>
   *   methodFinalThrow();
   */
  public function methodFinalThrow(): Awaitable<\ResponseAndClientSink<void, SinkPayload, FinalResponse>>;

  /**
   * Original thrift definition:-
   * void, sink<SinkPayload, throws (1: SinkException1 ex), FinalResponse, throws (1: SinkException2 ex)>
   *   methodBothThrow();
   */
  public function methodBothThrow(): Awaitable<\ResponseAndClientSink<void, SinkPayload, FinalResponse>>;

  /**
   * Original thrift definition:-
   * void, sink<SinkPayload, FinalResponse>
   *   methodFast();
   */
  public function methodFast(): Awaitable<\ResponseAndClientSink<void, SinkPayload, FinalResponse>>;
}

/**
 * Original thrift service:-
 * SinkService
 */
trait SinkServiceClientBase {
  require extends \ThriftClientBase;


  protected function sendImpl_method_SinkEncode(): (function(?SinkPayload, ?\Exception) : (string, bool)) {
    $protocol = $this->output_;
    return function(
      ?SinkPayload $sink_payload, ?\Exception $ex
    ) use (
      $protocol,
    ) {

      $transport = $protocol->getTransport();
      invariant(
        $transport is \TMemoryBuffer,
        "Sink methods require TMemoryBuffer transport"
      );

      $is_application_ex = false;

      if ($ex !== null) {
        if ($ex is \TApplicationException) {
          $is_application_ex = true;
          $result = $ex;
        } else {
          $result = new \TApplicationException($ex->getMessage()."\n".$ex->getTraceAsString());
        }
      } else {
        $result = SinkService_method_SinkPayload::fromShape(shape(
          'success' => $sink_payload,
        ));
      }

      $result->write($protocol);
      $protocol->writeMessageEnd();
      $transport->flush();
      $msg = $transport->getBuffer();
      $transport->resetBuffer();
      return tuple($msg, $is_application_ex);
    };
  }

  protected function recvImpl_method_FinalResponse(): (function(?string, ?\Exception) : FinalResponse) {
    $protocol = $this->input_;
    return function(
      ?string $sink_final_response, ?\Exception $ex
    ) use (
      $protocol,
    ) {
      try {
        if ($ex !== null) {
          throw $ex;
        }
        $transport = $protocol->getTransport();
        invariant(
          $transport is \TMemoryBuffer,
          "Stream methods require TMemoryBuffer transport"
        );

        $transport->resetBuffer();
        $transport->write($sink_final_response as nonnull);
        $result = SinkService_method_FinalResponse::withDefaultValues();
        $result->read($protocol);
        $protocol->readMessageEnd();
      } catch (\THandlerShortCircuitException $ex) {
        throw $ex->result;
      }
      if ($result->success !== null) {
       return $result->success;
      }
      throw new \TApplicationException("method failed: unknown result", \TApplicationException::MISSING_RESULT);
    };
  }

  protected function recvImpl_method_FirstResponse(?int $expectedsequenceid = null, shape(?'read_options' => int) $options = shape()): void {
    try {
      $this->eventHandler_->preRecv('method', $expectedsequenceid);
      if ($this->input_ is \TBinaryProtocolAccelerated) {
        $result = \thrift_protocol_read_binary($this->input_, 'SinkService_method_FirstResponse', $this->input_->isStrictRead(), Shapes::idx($options, 'read_options', 0));
      } else if ($this->input_ is \TCompactProtocolAccelerated)
      {
        $result = \thrift_protocol_read_compact($this->input_, 'SinkService_method_FirstResponse', Shapes::idx($options, 'read_options', 0));
      }
      else
      {
        $rseqid = 0;
        $fname = '';
        $mtype = 0;

        $this->input_->readMessageBegin(
          inout $fname,
          inout $mtype,
          inout $rseqid,
        );
        if ($mtype === \TMessageType::EXCEPTION) {
          $x = new \TApplicationException();
          $x->read($this->input_);
          $this->input_->readMessageEnd();
          throw $x;
        }
        $result = SinkService_method_FirstResponse::withDefaultValues();
        $result->read($this->input_);
        $this->input_->readMessageEnd();
        if ($expectedsequenceid !== null && ($rseqid !== $expectedsequenceid)) {
          throw new \TProtocolException("method failed: sequence id is out of order");
        }
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
          $this->eventHandler_->recvException('method', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->recvError('method', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postRecv('method', $expectedsequenceid, $ex->result);
          return;
      }
    } catch (\Exception $ex) {
      $this->eventHandler_->recvError('method', $expectedsequenceid, $ex);
      throw $ex;
    }
    $this->eventHandler_->postRecv('method', $expectedsequenceid, null);
    return;
  }

  protected function sendImpl_methodAndReponse_SinkEncode(): (function(?SinkPayload, ?\Exception) : (string, bool)) {
    $protocol = $this->output_;
    return function(
      ?SinkPayload $sink_payload, ?\Exception $ex
    ) use (
      $protocol,
    ) {

      $transport = $protocol->getTransport();
      invariant(
        $transport is \TMemoryBuffer,
        "Sink methods require TMemoryBuffer transport"
      );

      $is_application_ex = false;

      if ($ex !== null) {
        if ($ex is \TApplicationException) {
          $is_application_ex = true;
          $result = $ex;
        } else {
          $result = new \TApplicationException($ex->getMessage()."\n".$ex->getTraceAsString());
        }
      } else {
        $result = SinkService_methodAndReponse_SinkPayload::fromShape(shape(
          'success' => $sink_payload,
        ));
      }

      $result->write($protocol);
      $protocol->writeMessageEnd();
      $transport->flush();
      $msg = $transport->getBuffer();
      $transport->resetBuffer();
      return tuple($msg, $is_application_ex);
    };
  }

  protected function recvImpl_methodAndReponse_FinalResponse(): (function(?string, ?\Exception) : FinalResponse) {
    $protocol = $this->input_;
    return function(
      ?string $sink_final_response, ?\Exception $ex
    ) use (
      $protocol,
    ) {
      try {
        if ($ex !== null) {
          throw $ex;
        }
        $transport = $protocol->getTransport();
        invariant(
          $transport is \TMemoryBuffer,
          "Stream methods require TMemoryBuffer transport"
        );

        $transport->resetBuffer();
        $transport->write($sink_final_response as nonnull);
        $result = SinkService_methodAndReponse_FinalResponse::withDefaultValues();
        $result->read($protocol);
        $protocol->readMessageEnd();
      } catch (\THandlerShortCircuitException $ex) {
        throw $ex->result;
      }
      if ($result->success !== null) {
       return $result->success;
      }
      throw new \TApplicationException("methodAndReponse failed: unknown result", \TApplicationException::MISSING_RESULT);
    };
  }

  protected function recvImpl_methodAndReponse_FirstResponse(?int $expectedsequenceid = null, shape(?'read_options' => int) $options = shape()): InitialResponse {
    try {
      $this->eventHandler_->preRecv('methodAndReponse', $expectedsequenceid);
      if ($this->input_ is \TBinaryProtocolAccelerated) {
        $result = \thrift_protocol_read_binary($this->input_, 'SinkService_methodAndReponse_FirstResponse', $this->input_->isStrictRead(), Shapes::idx($options, 'read_options', 0));
      } else if ($this->input_ is \TCompactProtocolAccelerated)
      {
        $result = \thrift_protocol_read_compact($this->input_, 'SinkService_methodAndReponse_FirstResponse', Shapes::idx($options, 'read_options', 0));
      }
      else
      {
        $rseqid = 0;
        $fname = '';
        $mtype = 0;

        $this->input_->readMessageBegin(
          inout $fname,
          inout $mtype,
          inout $rseqid,
        );
        if ($mtype === \TMessageType::EXCEPTION) {
          $x = new \TApplicationException();
          $x->read($this->input_);
          $this->input_->readMessageEnd();
          throw $x;
        }
        $result = SinkService_methodAndReponse_FirstResponse::withDefaultValues();
        $result->read($this->input_);
        $this->input_->readMessageEnd();
        if ($expectedsequenceid !== null && ($rseqid !== $expectedsequenceid)) {
          throw new \TProtocolException("methodAndReponse failed: sequence id is out of order");
        }
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
          $this->eventHandler_->recvException('methodAndReponse', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->recvError('methodAndReponse', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postRecv('methodAndReponse', $expectedsequenceid, $ex->result);
          return $ex->result;
      }
    } catch (\Exception $ex) {
      $this->eventHandler_->recvError('methodAndReponse', $expectedsequenceid, $ex);
      throw $ex;
    }
    if ($result->success !== null) {
      $success = $result->success;
      $this->eventHandler_->postRecv('methodAndReponse', $expectedsequenceid, $success);
      return $success;
    }
    $x = new \TApplicationException("methodAndReponse failed: unknown result", \TApplicationException::MISSING_RESULT);
    $this->eventHandler_->recvError('methodAndReponse', $expectedsequenceid, $x);
    throw $x;
  }

  protected function sendImpl_methodThrow_SinkEncode(): (function(?SinkPayload, ?\Exception) : (string, bool)) {
    $protocol = $this->output_;
    return function(
      ?SinkPayload $sink_payload, ?\Exception $ex
    ) use (
      $protocol,
    ) {

      $transport = $protocol->getTransport();
      invariant(
        $transport is \TMemoryBuffer,
        "Sink methods require TMemoryBuffer transport"
      );

      $is_application_ex = false;

      if ($ex !== null) {
        if ($ex is \TApplicationException) {
          $is_application_ex = true;
          $result = $ex;
        } else {
          $result = new \TApplicationException($ex->getMessage()."\n".$ex->getTraceAsString());
        }
      } else {
        $result = SinkService_methodThrow_SinkPayload::fromShape(shape(
          'success' => $sink_payload,
        ));
      }

      $result->write($protocol);
      $protocol->writeMessageEnd();
      $transport->flush();
      $msg = $transport->getBuffer();
      $transport->resetBuffer();
      return tuple($msg, $is_application_ex);
    };
  }

  protected function recvImpl_methodThrow_FinalResponse(): (function(?string, ?\Exception) : FinalResponse) {
    $protocol = $this->input_;
    return function(
      ?string $sink_final_response, ?\Exception $ex
    ) use (
      $protocol,
    ) {
      try {
        if ($ex !== null) {
          throw $ex;
        }
        $transport = $protocol->getTransport();
        invariant(
          $transport is \TMemoryBuffer,
          "Stream methods require TMemoryBuffer transport"
        );

        $transport->resetBuffer();
        $transport->write($sink_final_response as nonnull);
        $result = SinkService_methodThrow_FinalResponse::withDefaultValues();
        $result->read($protocol);
        $protocol->readMessageEnd();
      } catch (\THandlerShortCircuitException $ex) {
        throw $ex->result;
      }
      if ($result->success !== null) {
       return $result->success;
      }
      throw new \TApplicationException("methodThrow failed: unknown result", \TApplicationException::MISSING_RESULT);
    };
  }

  protected function recvImpl_methodThrow_FirstResponse(?int $expectedsequenceid = null, shape(?'read_options' => int) $options = shape()): void {
    try {
      $this->eventHandler_->preRecv('methodThrow', $expectedsequenceid);
      if ($this->input_ is \TBinaryProtocolAccelerated) {
        $result = \thrift_protocol_read_binary($this->input_, 'SinkService_methodThrow_FirstResponse', $this->input_->isStrictRead(), Shapes::idx($options, 'read_options', 0));
      } else if ($this->input_ is \TCompactProtocolAccelerated)
      {
        $result = \thrift_protocol_read_compact($this->input_, 'SinkService_methodThrow_FirstResponse', Shapes::idx($options, 'read_options', 0));
      }
      else
      {
        $rseqid = 0;
        $fname = '';
        $mtype = 0;

        $this->input_->readMessageBegin(
          inout $fname,
          inout $mtype,
          inout $rseqid,
        );
        if ($mtype === \TMessageType::EXCEPTION) {
          $x = new \TApplicationException();
          $x->read($this->input_);
          $this->input_->readMessageEnd();
          throw $x;
        }
        $result = SinkService_methodThrow_FirstResponse::withDefaultValues();
        $result->read($this->input_);
        $this->input_->readMessageEnd();
        if ($expectedsequenceid !== null && ($rseqid !== $expectedsequenceid)) {
          throw new \TProtocolException("methodThrow failed: sequence id is out of order");
        }
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
          $this->eventHandler_->recvException('methodThrow', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->recvError('methodThrow', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postRecv('methodThrow', $expectedsequenceid, $ex->result);
          return;
      }
    } catch (\Exception $ex) {
      $this->eventHandler_->recvError('methodThrow', $expectedsequenceid, $ex);
      throw $ex;
    }
    if ($result->ex !== null) {
      $x = $result->ex;
      $this->eventHandler_->recvException('methodThrow', $expectedsequenceid, $x);
      throw $x;
    }
    $this->eventHandler_->postRecv('methodThrow', $expectedsequenceid, null);
    return;
  }

  protected function sendImpl_methodSinkThrow_SinkEncode(): (function(?SinkPayload, ?\Exception) : (string, bool)) {
    $protocol = $this->output_;
    return function(
      ?SinkPayload $sink_payload, ?\Exception $ex
    ) use (
      $protocol,
    ) {

      $transport = $protocol->getTransport();
      invariant(
        $transport is \TMemoryBuffer,
        "Sink methods require TMemoryBuffer transport"
      );

      $is_application_ex = false;

      if ($ex !== null) {
        if ($ex is SinkException1) {
          $result = SinkService_methodSinkThrow_SinkPayload::fromShape(shape(
            'ex' => $ex,
          ));
        } else if ($ex is \TApplicationException) {
          $is_application_ex = true;
          $result = $ex;
        } else {
          $result = new \TApplicationException($ex->getMessage()."\n".$ex->getTraceAsString());
        }
      } else {
        $result = SinkService_methodSinkThrow_SinkPayload::fromShape(shape(
          'success' => $sink_payload,
        ));
      }

      $result->write($protocol);
      $protocol->writeMessageEnd();
      $transport->flush();
      $msg = $transport->getBuffer();
      $transport->resetBuffer();
      return tuple($msg, $is_application_ex);
    };
  }

  protected function recvImpl_methodSinkThrow_FinalResponse(): (function(?string, ?\Exception) : FinalResponse) {
    $protocol = $this->input_;
    return function(
      ?string $sink_final_response, ?\Exception $ex
    ) use (
      $protocol,
    ) {
      try {
        if ($ex !== null) {
          throw $ex;
        }
        $transport = $protocol->getTransport();
        invariant(
          $transport is \TMemoryBuffer,
          "Stream methods require TMemoryBuffer transport"
        );

        $transport->resetBuffer();
        $transport->write($sink_final_response as nonnull);
        $result = SinkService_methodSinkThrow_FinalResponse::withDefaultValues();
        $result->read($protocol);
        $protocol->readMessageEnd();
      } catch (\THandlerShortCircuitException $ex) {
        throw $ex->result;
      }
      if ($result->success !== null) {
       return $result->success;
      }
      throw new \TApplicationException("methodSinkThrow failed: unknown result", \TApplicationException::MISSING_RESULT);
    };
  }

  protected function recvImpl_methodSinkThrow_FirstResponse(?int $expectedsequenceid = null, shape(?'read_options' => int) $options = shape()): void {
    try {
      $this->eventHandler_->preRecv('methodSinkThrow', $expectedsequenceid);
      if ($this->input_ is \TBinaryProtocolAccelerated) {
        $result = \thrift_protocol_read_binary($this->input_, 'SinkService_methodSinkThrow_FirstResponse', $this->input_->isStrictRead(), Shapes::idx($options, 'read_options', 0));
      } else if ($this->input_ is \TCompactProtocolAccelerated)
      {
        $result = \thrift_protocol_read_compact($this->input_, 'SinkService_methodSinkThrow_FirstResponse', Shapes::idx($options, 'read_options', 0));
      }
      else
      {
        $rseqid = 0;
        $fname = '';
        $mtype = 0;

        $this->input_->readMessageBegin(
          inout $fname,
          inout $mtype,
          inout $rseqid,
        );
        if ($mtype === \TMessageType::EXCEPTION) {
          $x = new \TApplicationException();
          $x->read($this->input_);
          $this->input_->readMessageEnd();
          throw $x;
        }
        $result = SinkService_methodSinkThrow_FirstResponse::withDefaultValues();
        $result->read($this->input_);
        $this->input_->readMessageEnd();
        if ($expectedsequenceid !== null && ($rseqid !== $expectedsequenceid)) {
          throw new \TProtocolException("methodSinkThrow failed: sequence id is out of order");
        }
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
          $this->eventHandler_->recvException('methodSinkThrow', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->recvError('methodSinkThrow', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postRecv('methodSinkThrow', $expectedsequenceid, $ex->result);
          return;
      }
    } catch (\Exception $ex) {
      $this->eventHandler_->recvError('methodSinkThrow', $expectedsequenceid, $ex);
      throw $ex;
    }
    $this->eventHandler_->postRecv('methodSinkThrow', $expectedsequenceid, null);
    return;
  }

  protected function sendImpl_methodFinalThrow_SinkEncode(): (function(?SinkPayload, ?\Exception) : (string, bool)) {
    $protocol = $this->output_;
    return function(
      ?SinkPayload $sink_payload, ?\Exception $ex
    ) use (
      $protocol,
    ) {

      $transport = $protocol->getTransport();
      invariant(
        $transport is \TMemoryBuffer,
        "Sink methods require TMemoryBuffer transport"
      );

      $is_application_ex = false;

      if ($ex !== null) {
        if ($ex is \TApplicationException) {
          $is_application_ex = true;
          $result = $ex;
        } else {
          $result = new \TApplicationException($ex->getMessage()."\n".$ex->getTraceAsString());
        }
      } else {
        $result = SinkService_methodFinalThrow_SinkPayload::fromShape(shape(
          'success' => $sink_payload,
        ));
      }

      $result->write($protocol);
      $protocol->writeMessageEnd();
      $transport->flush();
      $msg = $transport->getBuffer();
      $transport->resetBuffer();
      return tuple($msg, $is_application_ex);
    };
  }

  protected function recvImpl_methodFinalThrow_FinalResponse(): (function(?string, ?\Exception) : FinalResponse) {
    $protocol = $this->input_;
    return function(
      ?string $sink_final_response, ?\Exception $ex
    ) use (
      $protocol,
    ) {
      try {
        if ($ex !== null) {
          throw $ex;
        }
        $transport = $protocol->getTransport();
        invariant(
          $transport is \TMemoryBuffer,
          "Stream methods require TMemoryBuffer transport"
        );

        $transport->resetBuffer();
        $transport->write($sink_final_response as nonnull);
        $result = SinkService_methodFinalThrow_FinalResponse::withDefaultValues();
        $result->read($protocol);
        $protocol->readMessageEnd();
      } catch (\THandlerShortCircuitException $ex) {
        throw $ex->result;
      }
      if ($result->success !== null) {
       return $result->success;
      }
      if ($result->ex !== null) {
        throw $result->ex;
      }
      throw new \TApplicationException("methodFinalThrow failed: unknown result", \TApplicationException::MISSING_RESULT);
    };
  }

  protected function recvImpl_methodFinalThrow_FirstResponse(?int $expectedsequenceid = null, shape(?'read_options' => int) $options = shape()): void {
    try {
      $this->eventHandler_->preRecv('methodFinalThrow', $expectedsequenceid);
      if ($this->input_ is \TBinaryProtocolAccelerated) {
        $result = \thrift_protocol_read_binary($this->input_, 'SinkService_methodFinalThrow_FirstResponse', $this->input_->isStrictRead(), Shapes::idx($options, 'read_options', 0));
      } else if ($this->input_ is \TCompactProtocolAccelerated)
      {
        $result = \thrift_protocol_read_compact($this->input_, 'SinkService_methodFinalThrow_FirstResponse', Shapes::idx($options, 'read_options', 0));
      }
      else
      {
        $rseqid = 0;
        $fname = '';
        $mtype = 0;

        $this->input_->readMessageBegin(
          inout $fname,
          inout $mtype,
          inout $rseqid,
        );
        if ($mtype === \TMessageType::EXCEPTION) {
          $x = new \TApplicationException();
          $x->read($this->input_);
          $this->input_->readMessageEnd();
          throw $x;
        }
        $result = SinkService_methodFinalThrow_FirstResponse::withDefaultValues();
        $result->read($this->input_);
        $this->input_->readMessageEnd();
        if ($expectedsequenceid !== null && ($rseqid !== $expectedsequenceid)) {
          throw new \TProtocolException("methodFinalThrow failed: sequence id is out of order");
        }
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
          $this->eventHandler_->recvException('methodFinalThrow', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->recvError('methodFinalThrow', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postRecv('methodFinalThrow', $expectedsequenceid, $ex->result);
          return;
      }
    } catch (\Exception $ex) {
      $this->eventHandler_->recvError('methodFinalThrow', $expectedsequenceid, $ex);
      throw $ex;
    }
    $this->eventHandler_->postRecv('methodFinalThrow', $expectedsequenceid, null);
    return;
  }

  protected function sendImpl_methodBothThrow_SinkEncode(): (function(?SinkPayload, ?\Exception) : (string, bool)) {
    $protocol = $this->output_;
    return function(
      ?SinkPayload $sink_payload, ?\Exception $ex
    ) use (
      $protocol,
    ) {

      $transport = $protocol->getTransport();
      invariant(
        $transport is \TMemoryBuffer,
        "Sink methods require TMemoryBuffer transport"
      );

      $is_application_ex = false;

      if ($ex !== null) {
        if ($ex is SinkException1) {
          $result = SinkService_methodBothThrow_SinkPayload::fromShape(shape(
            'ex' => $ex,
          ));
        } else if ($ex is \TApplicationException) {
          $is_application_ex = true;
          $result = $ex;
        } else {
          $result = new \TApplicationException($ex->getMessage()."\n".$ex->getTraceAsString());
        }
      } else {
        $result = SinkService_methodBothThrow_SinkPayload::fromShape(shape(
          'success' => $sink_payload,
        ));
      }

      $result->write($protocol);
      $protocol->writeMessageEnd();
      $transport->flush();
      $msg = $transport->getBuffer();
      $transport->resetBuffer();
      return tuple($msg, $is_application_ex);
    };
  }

  protected function recvImpl_methodBothThrow_FinalResponse(): (function(?string, ?\Exception) : FinalResponse) {
    $protocol = $this->input_;
    return function(
      ?string $sink_final_response, ?\Exception $ex
    ) use (
      $protocol,
    ) {
      try {
        if ($ex !== null) {
          throw $ex;
        }
        $transport = $protocol->getTransport();
        invariant(
          $transport is \TMemoryBuffer,
          "Stream methods require TMemoryBuffer transport"
        );

        $transport->resetBuffer();
        $transport->write($sink_final_response as nonnull);
        $result = SinkService_methodBothThrow_FinalResponse::withDefaultValues();
        $result->read($protocol);
        $protocol->readMessageEnd();
      } catch (\THandlerShortCircuitException $ex) {
        throw $ex->result;
      }
      if ($result->success !== null) {
       return $result->success;
      }
      if ($result->ex !== null) {
        throw $result->ex;
      }
      throw new \TApplicationException("methodBothThrow failed: unknown result", \TApplicationException::MISSING_RESULT);
    };
  }

  protected function recvImpl_methodBothThrow_FirstResponse(?int $expectedsequenceid = null, shape(?'read_options' => int) $options = shape()): void {
    try {
      $this->eventHandler_->preRecv('methodBothThrow', $expectedsequenceid);
      if ($this->input_ is \TBinaryProtocolAccelerated) {
        $result = \thrift_protocol_read_binary($this->input_, 'SinkService_methodBothThrow_FirstResponse', $this->input_->isStrictRead(), Shapes::idx($options, 'read_options', 0));
      } else if ($this->input_ is \TCompactProtocolAccelerated)
      {
        $result = \thrift_protocol_read_compact($this->input_, 'SinkService_methodBothThrow_FirstResponse', Shapes::idx($options, 'read_options', 0));
      }
      else
      {
        $rseqid = 0;
        $fname = '';
        $mtype = 0;

        $this->input_->readMessageBegin(
          inout $fname,
          inout $mtype,
          inout $rseqid,
        );
        if ($mtype === \TMessageType::EXCEPTION) {
          $x = new \TApplicationException();
          $x->read($this->input_);
          $this->input_->readMessageEnd();
          throw $x;
        }
        $result = SinkService_methodBothThrow_FirstResponse::withDefaultValues();
        $result->read($this->input_);
        $this->input_->readMessageEnd();
        if ($expectedsequenceid !== null && ($rseqid !== $expectedsequenceid)) {
          throw new \TProtocolException("methodBothThrow failed: sequence id is out of order");
        }
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
          $this->eventHandler_->recvException('methodBothThrow', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->recvError('methodBothThrow', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postRecv('methodBothThrow', $expectedsequenceid, $ex->result);
          return;
      }
    } catch (\Exception $ex) {
      $this->eventHandler_->recvError('methodBothThrow', $expectedsequenceid, $ex);
      throw $ex;
    }
    $this->eventHandler_->postRecv('methodBothThrow', $expectedsequenceid, null);
    return;
  }

  protected function sendImpl_methodFast_SinkEncode(): (function(?SinkPayload, ?\Exception) : (string, bool)) {
    $protocol = $this->output_;
    return function(
      ?SinkPayload $sink_payload, ?\Exception $ex
    ) use (
      $protocol,
    ) {

      $transport = $protocol->getTransport();
      invariant(
        $transport is \TMemoryBuffer,
        "Sink methods require TMemoryBuffer transport"
      );

      $is_application_ex = false;

      if ($ex !== null) {
        if ($ex is \TApplicationException) {
          $is_application_ex = true;
          $result = $ex;
        } else {
          $result = new \TApplicationException($ex->getMessage()."\n".$ex->getTraceAsString());
        }
      } else {
        $result = SinkService_methodFast_SinkPayload::fromShape(shape(
          'success' => $sink_payload,
        ));
      }

      $result->write($protocol);
      $protocol->writeMessageEnd();
      $transport->flush();
      $msg = $transport->getBuffer();
      $transport->resetBuffer();
      return tuple($msg, $is_application_ex);
    };
  }

  protected function recvImpl_methodFast_FinalResponse(): (function(?string, ?\Exception) : FinalResponse) {
    $protocol = $this->input_;
    return function(
      ?string $sink_final_response, ?\Exception $ex
    ) use (
      $protocol,
    ) {
      try {
        if ($ex !== null) {
          throw $ex;
        }
        $transport = $protocol->getTransport();
        invariant(
          $transport is \TMemoryBuffer,
          "Stream methods require TMemoryBuffer transport"
        );

        $transport->resetBuffer();
        $transport->write($sink_final_response as nonnull);
        $result = SinkService_methodFast_FinalResponse::withDefaultValues();
        $result->read($protocol);
        $protocol->readMessageEnd();
      } catch (\THandlerShortCircuitException $ex) {
        throw $ex->result;
      }
      if ($result->success !== null) {
       return $result->success;
      }
      throw new \TApplicationException("methodFast failed: unknown result", \TApplicationException::MISSING_RESULT);
    };
  }

  protected function recvImpl_methodFast_FirstResponse(?int $expectedsequenceid = null, shape(?'read_options' => int) $options = shape()): void {
    try {
      $this->eventHandler_->preRecv('methodFast', $expectedsequenceid);
      if ($this->input_ is \TBinaryProtocolAccelerated) {
        $result = \thrift_protocol_read_binary($this->input_, 'SinkService_methodFast_FirstResponse', $this->input_->isStrictRead(), Shapes::idx($options, 'read_options', 0));
      } else if ($this->input_ is \TCompactProtocolAccelerated)
      {
        $result = \thrift_protocol_read_compact($this->input_, 'SinkService_methodFast_FirstResponse', Shapes::idx($options, 'read_options', 0));
      }
      else
      {
        $rseqid = 0;
        $fname = '';
        $mtype = 0;

        $this->input_->readMessageBegin(
          inout $fname,
          inout $mtype,
          inout $rseqid,
        );
        if ($mtype === \TMessageType::EXCEPTION) {
          $x = new \TApplicationException();
          $x->read($this->input_);
          $this->input_->readMessageEnd();
          throw $x;
        }
        $result = SinkService_methodFast_FirstResponse::withDefaultValues();
        $result->read($this->input_);
        $this->input_->readMessageEnd();
        if ($expectedsequenceid !== null && ($rseqid !== $expectedsequenceid)) {
          throw new \TProtocolException("methodFast failed: sequence id is out of order");
        }
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
          $this->eventHandler_->recvException('methodFast', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->recvError('methodFast', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postRecv('methodFast', $expectedsequenceid, $ex->result);
          return;
      }
    } catch (\Exception $ex) {
      $this->eventHandler_->recvError('methodFast', $expectedsequenceid, $ex);
      throw $ex;
    }
    $this->eventHandler_->postRecv('methodFast', $expectedsequenceid, null);
    return;
  }
}

class SinkServiceAsyncClient extends \ThriftClientBase implements SinkServiceAsyncClientIf {
  use SinkServiceClientBase;

  /**
   * Original thrift definition:-
   * void, sink<SinkPayload, FinalResponse>
   *   method();
   */
  public async function method(): Awaitable<\ResponseAndClientSink<void, SinkPayload, FinalResponse>> {
    $hh_frame_metadata = $this->getHHFrameMetadata();
    if ($hh_frame_metadata !== null) {
      \HH\set_frame_metadata($hh_frame_metadata);
    }
    $rpc_options = $this->getAndResetOptions() ?? \ThriftClientBase::defaultOptions();
    $channel = $this->channel_;
    $out_transport = $this->output_->getTransport();
    $in_transport = $this->input_->getTransport();
    invariant(
      $channel !== null && $out_transport is \TMemoryBuffer && $in_transport is \TMemoryBuffer,
      "Sink methods require nonnull channel and TMemoryBuffer transport"
    );

    $args = SinkService_method_args::withDefaultValues();
    await $this->asyncHandler_->genBefore("SinkService", "method", $args);
    $currentseqid = $this->sendImplHelper($args, "method", false);
    $msg = $out_transport->getBuffer();
    $out_transport->resetBuffer();
    list($result_msg, $_read_headers, $sink) = await $channel->genSendRequestSink($rpc_options, $msg);

    $payload_serializer = $this->sendImpl_method_SinkEncode();
    $final_response_deserializer = $this->recvImpl_method_FinalResponse();
    $client_sink_func = async function(
      AsyncGenerator<null, SinkPayload, void> $pld_generator
    ) use ($sink, $payload_serializer, $final_response_deserializer) {
      return await $sink->genSink<SinkPayload, FinalResponse>(
        $pld_generator, 
        $payload_serializer, 
        $final_response_deserializer, 
      );
    };

    $in_transport->resetBuffer();
    $in_transport->write($result_msg);
    $this->recvImpl_method_FirstResponse($currentseqid);

    await $this->asyncHandler_->genAfter();
    return new \ResponseAndClientSink<void, SinkPayload, FinalResponse>(null, $client_sink_func);
  }

  /**
   * Original thrift definition:-
   * InitialResponse, sink<SinkPayload, FinalResponse>
   *   methodAndReponse();
   */
  public async function methodAndReponse(): Awaitable<\ResponseAndClientSink<InitialResponse, SinkPayload, FinalResponse>> {
    $hh_frame_metadata = $this->getHHFrameMetadata();
    if ($hh_frame_metadata !== null) {
      \HH\set_frame_metadata($hh_frame_metadata);
    }
    $rpc_options = $this->getAndResetOptions() ?? \ThriftClientBase::defaultOptions();
    $channel = $this->channel_;
    $out_transport = $this->output_->getTransport();
    $in_transport = $this->input_->getTransport();
    invariant(
      $channel !== null && $out_transport is \TMemoryBuffer && $in_transport is \TMemoryBuffer,
      "Sink methods require nonnull channel and TMemoryBuffer transport"
    );

    $args = SinkService_methodAndReponse_args::withDefaultValues();
    await $this->asyncHandler_->genBefore("SinkService", "methodAndReponse", $args);
    $currentseqid = $this->sendImplHelper($args, "methodAndReponse", false);
    $msg = $out_transport->getBuffer();
    $out_transport->resetBuffer();
    list($result_msg, $_read_headers, $sink) = await $channel->genSendRequestSink($rpc_options, $msg);

    $payload_serializer = $this->sendImpl_methodAndReponse_SinkEncode();
    $final_response_deserializer = $this->recvImpl_methodAndReponse_FinalResponse();
    $client_sink_func = async function(
      AsyncGenerator<null, SinkPayload, void> $pld_generator
    ) use ($sink, $payload_serializer, $final_response_deserializer) {
      return await $sink->genSink<SinkPayload, FinalResponse>(
        $pld_generator, 
        $payload_serializer, 
        $final_response_deserializer, 
      );
    };

    $in_transport->resetBuffer();
    $in_transport->write($result_msg);
    $first_response = $this->recvImpl_methodAndReponse_FirstResponse($currentseqid);

    await $this->asyncHandler_->genAfter();
    return new \ResponseAndClientSink<InitialResponse, SinkPayload, FinalResponse>($first_response, $client_sink_func);
  }

  /**
   * Original thrift definition:-
   * void, sink<SinkPayload, FinalResponse>
   *   methodThrow()
   *   throws (1: InitialException ex);
   */
  public async function methodThrow(): Awaitable<\ResponseAndClientSink<void, SinkPayload, FinalResponse>> {
    $hh_frame_metadata = $this->getHHFrameMetadata();
    if ($hh_frame_metadata !== null) {
      \HH\set_frame_metadata($hh_frame_metadata);
    }
    $rpc_options = $this->getAndResetOptions() ?? \ThriftClientBase::defaultOptions();
    $channel = $this->channel_;
    $out_transport = $this->output_->getTransport();
    $in_transport = $this->input_->getTransport();
    invariant(
      $channel !== null && $out_transport is \TMemoryBuffer && $in_transport is \TMemoryBuffer,
      "Sink methods require nonnull channel and TMemoryBuffer transport"
    );

    $args = SinkService_methodThrow_args::withDefaultValues();
    await $this->asyncHandler_->genBefore("SinkService", "methodThrow", $args);
    $currentseqid = $this->sendImplHelper($args, "methodThrow", false);
    $msg = $out_transport->getBuffer();
    $out_transport->resetBuffer();
    list($result_msg, $_read_headers, $sink) = await $channel->genSendRequestSink($rpc_options, $msg);

    $payload_serializer = $this->sendImpl_methodThrow_SinkEncode();
    $final_response_deserializer = $this->recvImpl_methodThrow_FinalResponse();
    $client_sink_func = async function(
      AsyncGenerator<null, SinkPayload, void> $pld_generator
    ) use ($sink, $payload_serializer, $final_response_deserializer) {
      return await $sink->genSink<SinkPayload, FinalResponse>(
        $pld_generator, 
        $payload_serializer, 
        $final_response_deserializer, 
      );
    };

    $in_transport->resetBuffer();
    $in_transport->write($result_msg);
    $this->recvImpl_methodThrow_FirstResponse($currentseqid);

    await $this->asyncHandler_->genAfter();
    return new \ResponseAndClientSink<void, SinkPayload, FinalResponse>(null, $client_sink_func);
  }

  /**
   * Original thrift definition:-
   * void, sink<SinkPayload, throws (1: SinkException1 ex), FinalResponse>
   *   methodSinkThrow();
   */
  public async function methodSinkThrow(): Awaitable<\ResponseAndClientSink<void, SinkPayload, FinalResponse>> {
    $hh_frame_metadata = $this->getHHFrameMetadata();
    if ($hh_frame_metadata !== null) {
      \HH\set_frame_metadata($hh_frame_metadata);
    }
    $rpc_options = $this->getAndResetOptions() ?? \ThriftClientBase::defaultOptions();
    $channel = $this->channel_;
    $out_transport = $this->output_->getTransport();
    $in_transport = $this->input_->getTransport();
    invariant(
      $channel !== null && $out_transport is \TMemoryBuffer && $in_transport is \TMemoryBuffer,
      "Sink methods require nonnull channel and TMemoryBuffer transport"
    );

    $args = SinkService_methodSinkThrow_args::withDefaultValues();
    await $this->asyncHandler_->genBefore("SinkService", "methodSinkThrow", $args);
    $currentseqid = $this->sendImplHelper($args, "methodSinkThrow", false);
    $msg = $out_transport->getBuffer();
    $out_transport->resetBuffer();
    list($result_msg, $_read_headers, $sink) = await $channel->genSendRequestSink($rpc_options, $msg);

    $payload_serializer = $this->sendImpl_methodSinkThrow_SinkEncode();
    $final_response_deserializer = $this->recvImpl_methodSinkThrow_FinalResponse();
    $client_sink_func = async function(
      AsyncGenerator<null, SinkPayload, void> $pld_generator
    ) use ($sink, $payload_serializer, $final_response_deserializer) {
      return await $sink->genSink<SinkPayload, FinalResponse>(
        $pld_generator, 
        $payload_serializer, 
        $final_response_deserializer, 
      );
    };

    $in_transport->resetBuffer();
    $in_transport->write($result_msg);
    $this->recvImpl_methodSinkThrow_FirstResponse($currentseqid);

    await $this->asyncHandler_->genAfter();
    return new \ResponseAndClientSink<void, SinkPayload, FinalResponse>(null, $client_sink_func);
  }

  /**
   * Original thrift definition:-
   * void, sink<SinkPayload, FinalResponse, throws (1: SinkException2 ex)>
   *   methodFinalThrow();
   */
  public async function methodFinalThrow(): Awaitable<\ResponseAndClientSink<void, SinkPayload, FinalResponse>> {
    $hh_frame_metadata = $this->getHHFrameMetadata();
    if ($hh_frame_metadata !== null) {
      \HH\set_frame_metadata($hh_frame_metadata);
    }
    $rpc_options = $this->getAndResetOptions() ?? \ThriftClientBase::defaultOptions();
    $channel = $this->channel_;
    $out_transport = $this->output_->getTransport();
    $in_transport = $this->input_->getTransport();
    invariant(
      $channel !== null && $out_transport is \TMemoryBuffer && $in_transport is \TMemoryBuffer,
      "Sink methods require nonnull channel and TMemoryBuffer transport"
    );

    $args = SinkService_methodFinalThrow_args::withDefaultValues();
    await $this->asyncHandler_->genBefore("SinkService", "methodFinalThrow", $args);
    $currentseqid = $this->sendImplHelper($args, "methodFinalThrow", false);
    $msg = $out_transport->getBuffer();
    $out_transport->resetBuffer();
    list($result_msg, $_read_headers, $sink) = await $channel->genSendRequestSink($rpc_options, $msg);

    $payload_serializer = $this->sendImpl_methodFinalThrow_SinkEncode();
    $final_response_deserializer = $this->recvImpl_methodFinalThrow_FinalResponse();
    $client_sink_func = async function(
      AsyncGenerator<null, SinkPayload, void> $pld_generator
    ) use ($sink, $payload_serializer, $final_response_deserializer) {
      return await $sink->genSink<SinkPayload, FinalResponse>(
        $pld_generator, 
        $payload_serializer, 
        $final_response_deserializer, 
      );
    };

    $in_transport->resetBuffer();
    $in_transport->write($result_msg);
    $this->recvImpl_methodFinalThrow_FirstResponse($currentseqid);

    await $this->asyncHandler_->genAfter();
    return new \ResponseAndClientSink<void, SinkPayload, FinalResponse>(null, $client_sink_func);
  }

  /**
   * Original thrift definition:-
   * void, sink<SinkPayload, throws (1: SinkException1 ex), FinalResponse, throws (1: SinkException2 ex)>
   *   methodBothThrow();
   */
  public async function methodBothThrow(): Awaitable<\ResponseAndClientSink<void, SinkPayload, FinalResponse>> {
    $hh_frame_metadata = $this->getHHFrameMetadata();
    if ($hh_frame_metadata !== null) {
      \HH\set_frame_metadata($hh_frame_metadata);
    }
    $rpc_options = $this->getAndResetOptions() ?? \ThriftClientBase::defaultOptions();
    $channel = $this->channel_;
    $out_transport = $this->output_->getTransport();
    $in_transport = $this->input_->getTransport();
    invariant(
      $channel !== null && $out_transport is \TMemoryBuffer && $in_transport is \TMemoryBuffer,
      "Sink methods require nonnull channel and TMemoryBuffer transport"
    );

    $args = SinkService_methodBothThrow_args::withDefaultValues();
    await $this->asyncHandler_->genBefore("SinkService", "methodBothThrow", $args);
    $currentseqid = $this->sendImplHelper($args, "methodBothThrow", false);
    $msg = $out_transport->getBuffer();
    $out_transport->resetBuffer();
    list($result_msg, $_read_headers, $sink) = await $channel->genSendRequestSink($rpc_options, $msg);

    $payload_serializer = $this->sendImpl_methodBothThrow_SinkEncode();
    $final_response_deserializer = $this->recvImpl_methodBothThrow_FinalResponse();
    $client_sink_func = async function(
      AsyncGenerator<null, SinkPayload, void> $pld_generator
    ) use ($sink, $payload_serializer, $final_response_deserializer) {
      return await $sink->genSink<SinkPayload, FinalResponse>(
        $pld_generator, 
        $payload_serializer, 
        $final_response_deserializer, 
      );
    };

    $in_transport->resetBuffer();
    $in_transport->write($result_msg);
    $this->recvImpl_methodBothThrow_FirstResponse($currentseqid);

    await $this->asyncHandler_->genAfter();
    return new \ResponseAndClientSink<void, SinkPayload, FinalResponse>(null, $client_sink_func);
  }

  /**
   * Original thrift definition:-
   * void, sink<SinkPayload, FinalResponse>
   *   methodFast();
   */
  public async function methodFast(): Awaitable<\ResponseAndClientSink<void, SinkPayload, FinalResponse>> {
    $hh_frame_metadata = $this->getHHFrameMetadata();
    if ($hh_frame_metadata !== null) {
      \HH\set_frame_metadata($hh_frame_metadata);
    }
    $rpc_options = $this->getAndResetOptions() ?? \ThriftClientBase::defaultOptions();
    $channel = $this->channel_;
    $out_transport = $this->output_->getTransport();
    $in_transport = $this->input_->getTransport();
    invariant(
      $channel !== null && $out_transport is \TMemoryBuffer && $in_transport is \TMemoryBuffer,
      "Sink methods require nonnull channel and TMemoryBuffer transport"
    );

    $args = SinkService_methodFast_args::withDefaultValues();
    await $this->asyncHandler_->genBefore("SinkService", "methodFast", $args);
    $currentseqid = $this->sendImplHelper($args, "methodFast", false);
    $msg = $out_transport->getBuffer();
    $out_transport->resetBuffer();
    list($result_msg, $_read_headers, $sink) = await $channel->genSendRequestSink($rpc_options, $msg);

    $payload_serializer = $this->sendImpl_methodFast_SinkEncode();
    $final_response_deserializer = $this->recvImpl_methodFast_FinalResponse();
    $client_sink_func = async function(
      AsyncGenerator<null, SinkPayload, void> $pld_generator
    ) use ($sink, $payload_serializer, $final_response_deserializer) {
      return await $sink->genSink<SinkPayload, FinalResponse>(
        $pld_generator, 
        $payload_serializer, 
        $final_response_deserializer, 
      );
    };

    $in_transport->resetBuffer();
    $in_transport->write($result_msg);
    $this->recvImpl_methodFast_FirstResponse($currentseqid);

    await $this->asyncHandler_->genAfter();
    return new \ResponseAndClientSink<void, SinkPayload, FinalResponse>(null, $client_sink_func);
  }

}

class SinkServiceClient extends \ThriftClientBase implements SinkServiceClientIf {
  use SinkServiceClientBase;

  /**
   * Original thrift definition:-
   * void, sink<SinkPayload, FinalResponse>
   *   method();
   */
  public async function method(): Awaitable<\ResponseAndClientSink<void, SinkPayload, FinalResponse>> {
    $hh_frame_metadata = $this->getHHFrameMetadata();
    if ($hh_frame_metadata !== null) {
      \HH\set_frame_metadata($hh_frame_metadata);
    }
    $rpc_options = $this->getAndResetOptions() ?? \ThriftClientBase::defaultOptions();
    $channel = $this->channel_;
    $out_transport = $this->output_->getTransport();
    $in_transport = $this->input_->getTransport();
    invariant(
      $channel !== null && $out_transport is \TMemoryBuffer && $in_transport is \TMemoryBuffer,
      "Sink methods require nonnull channel and TMemoryBuffer transport"
    );

    $args = SinkService_method_args::withDefaultValues();
    await $this->asyncHandler_->genBefore("SinkService", "method", $args);
    $currentseqid = $this->sendImplHelper($args, "method", false);
    $msg = $out_transport->getBuffer();
    $out_transport->resetBuffer();
    list($result_msg, $_read_headers, $sink) = await $channel->genSendRequestSink($rpc_options, $msg);

    $payload_serializer = $this->sendImpl_method_SinkEncode();
    $final_response_deserializer = $this->recvImpl_method_FinalResponse();
    $client_sink_func = async function(
      AsyncGenerator<null, SinkPayload, void> $pld_generator
    ) use ($sink, $payload_serializer, $final_response_deserializer) {
      return await $sink->genSink<SinkPayload, FinalResponse>(
        $pld_generator, 
        $payload_serializer, 
        $final_response_deserializer, 
      );
    };

    $in_transport->resetBuffer();
    $in_transport->write($result_msg);
    $this->recvImpl_method_FirstResponse($currentseqid);

    await $this->asyncHandler_->genAfter();
    return new \ResponseAndClientSink<void, SinkPayload, FinalResponse>(null, $client_sink_func);
  }

  /**
   * Original thrift definition:-
   * InitialResponse, sink<SinkPayload, FinalResponse>
   *   methodAndReponse();
   */
  public async function methodAndReponse(): Awaitable<\ResponseAndClientSink<InitialResponse, SinkPayload, FinalResponse>> {
    $hh_frame_metadata = $this->getHHFrameMetadata();
    if ($hh_frame_metadata !== null) {
      \HH\set_frame_metadata($hh_frame_metadata);
    }
    $rpc_options = $this->getAndResetOptions() ?? \ThriftClientBase::defaultOptions();
    $channel = $this->channel_;
    $out_transport = $this->output_->getTransport();
    $in_transport = $this->input_->getTransport();
    invariant(
      $channel !== null && $out_transport is \TMemoryBuffer && $in_transport is \TMemoryBuffer,
      "Sink methods require nonnull channel and TMemoryBuffer transport"
    );

    $args = SinkService_methodAndReponse_args::withDefaultValues();
    await $this->asyncHandler_->genBefore("SinkService", "methodAndReponse", $args);
    $currentseqid = $this->sendImplHelper($args, "methodAndReponse", false);
    $msg = $out_transport->getBuffer();
    $out_transport->resetBuffer();
    list($result_msg, $_read_headers, $sink) = await $channel->genSendRequestSink($rpc_options, $msg);

    $payload_serializer = $this->sendImpl_methodAndReponse_SinkEncode();
    $final_response_deserializer = $this->recvImpl_methodAndReponse_FinalResponse();
    $client_sink_func = async function(
      AsyncGenerator<null, SinkPayload, void> $pld_generator
    ) use ($sink, $payload_serializer, $final_response_deserializer) {
      return await $sink->genSink<SinkPayload, FinalResponse>(
        $pld_generator, 
        $payload_serializer, 
        $final_response_deserializer, 
      );
    };

    $in_transport->resetBuffer();
    $in_transport->write($result_msg);
    $first_response = $this->recvImpl_methodAndReponse_FirstResponse($currentseqid);

    await $this->asyncHandler_->genAfter();
    return new \ResponseAndClientSink<InitialResponse, SinkPayload, FinalResponse>($first_response, $client_sink_func);
  }

  /**
   * Original thrift definition:-
   * void, sink<SinkPayload, FinalResponse>
   *   methodThrow()
   *   throws (1: InitialException ex);
   */
  public async function methodThrow(): Awaitable<\ResponseAndClientSink<void, SinkPayload, FinalResponse>> {
    $hh_frame_metadata = $this->getHHFrameMetadata();
    if ($hh_frame_metadata !== null) {
      \HH\set_frame_metadata($hh_frame_metadata);
    }
    $rpc_options = $this->getAndResetOptions() ?? \ThriftClientBase::defaultOptions();
    $channel = $this->channel_;
    $out_transport = $this->output_->getTransport();
    $in_transport = $this->input_->getTransport();
    invariant(
      $channel !== null && $out_transport is \TMemoryBuffer && $in_transport is \TMemoryBuffer,
      "Sink methods require nonnull channel and TMemoryBuffer transport"
    );

    $args = SinkService_methodThrow_args::withDefaultValues();
    await $this->asyncHandler_->genBefore("SinkService", "methodThrow", $args);
    $currentseqid = $this->sendImplHelper($args, "methodThrow", false);
    $msg = $out_transport->getBuffer();
    $out_transport->resetBuffer();
    list($result_msg, $_read_headers, $sink) = await $channel->genSendRequestSink($rpc_options, $msg);

    $payload_serializer = $this->sendImpl_methodThrow_SinkEncode();
    $final_response_deserializer = $this->recvImpl_methodThrow_FinalResponse();
    $client_sink_func = async function(
      AsyncGenerator<null, SinkPayload, void> $pld_generator
    ) use ($sink, $payload_serializer, $final_response_deserializer) {
      return await $sink->genSink<SinkPayload, FinalResponse>(
        $pld_generator, 
        $payload_serializer, 
        $final_response_deserializer, 
      );
    };

    $in_transport->resetBuffer();
    $in_transport->write($result_msg);
    $this->recvImpl_methodThrow_FirstResponse($currentseqid);

    await $this->asyncHandler_->genAfter();
    return new \ResponseAndClientSink<void, SinkPayload, FinalResponse>(null, $client_sink_func);
  }

  /**
   * Original thrift definition:-
   * void, sink<SinkPayload, throws (1: SinkException1 ex), FinalResponse>
   *   methodSinkThrow();
   */
  public async function methodSinkThrow(): Awaitable<\ResponseAndClientSink<void, SinkPayload, FinalResponse>> {
    $hh_frame_metadata = $this->getHHFrameMetadata();
    if ($hh_frame_metadata !== null) {
      \HH\set_frame_metadata($hh_frame_metadata);
    }
    $rpc_options = $this->getAndResetOptions() ?? \ThriftClientBase::defaultOptions();
    $channel = $this->channel_;
    $out_transport = $this->output_->getTransport();
    $in_transport = $this->input_->getTransport();
    invariant(
      $channel !== null && $out_transport is \TMemoryBuffer && $in_transport is \TMemoryBuffer,
      "Sink methods require nonnull channel and TMemoryBuffer transport"
    );

    $args = SinkService_methodSinkThrow_args::withDefaultValues();
    await $this->asyncHandler_->genBefore("SinkService", "methodSinkThrow", $args);
    $currentseqid = $this->sendImplHelper($args, "methodSinkThrow", false);
    $msg = $out_transport->getBuffer();
    $out_transport->resetBuffer();
    list($result_msg, $_read_headers, $sink) = await $channel->genSendRequestSink($rpc_options, $msg);

    $payload_serializer = $this->sendImpl_methodSinkThrow_SinkEncode();
    $final_response_deserializer = $this->recvImpl_methodSinkThrow_FinalResponse();
    $client_sink_func = async function(
      AsyncGenerator<null, SinkPayload, void> $pld_generator
    ) use ($sink, $payload_serializer, $final_response_deserializer) {
      return await $sink->genSink<SinkPayload, FinalResponse>(
        $pld_generator, 
        $payload_serializer, 
        $final_response_deserializer, 
      );
    };

    $in_transport->resetBuffer();
    $in_transport->write($result_msg);
    $this->recvImpl_methodSinkThrow_FirstResponse($currentseqid);

    await $this->asyncHandler_->genAfter();
    return new \ResponseAndClientSink<void, SinkPayload, FinalResponse>(null, $client_sink_func);
  }

  /**
   * Original thrift definition:-
   * void, sink<SinkPayload, FinalResponse, throws (1: SinkException2 ex)>
   *   methodFinalThrow();
   */
  public async function methodFinalThrow(): Awaitable<\ResponseAndClientSink<void, SinkPayload, FinalResponse>> {
    $hh_frame_metadata = $this->getHHFrameMetadata();
    if ($hh_frame_metadata !== null) {
      \HH\set_frame_metadata($hh_frame_metadata);
    }
    $rpc_options = $this->getAndResetOptions() ?? \ThriftClientBase::defaultOptions();
    $channel = $this->channel_;
    $out_transport = $this->output_->getTransport();
    $in_transport = $this->input_->getTransport();
    invariant(
      $channel !== null && $out_transport is \TMemoryBuffer && $in_transport is \TMemoryBuffer,
      "Sink methods require nonnull channel and TMemoryBuffer transport"
    );

    $args = SinkService_methodFinalThrow_args::withDefaultValues();
    await $this->asyncHandler_->genBefore("SinkService", "methodFinalThrow", $args);
    $currentseqid = $this->sendImplHelper($args, "methodFinalThrow", false);
    $msg = $out_transport->getBuffer();
    $out_transport->resetBuffer();
    list($result_msg, $_read_headers, $sink) = await $channel->genSendRequestSink($rpc_options, $msg);

    $payload_serializer = $this->sendImpl_methodFinalThrow_SinkEncode();
    $final_response_deserializer = $this->recvImpl_methodFinalThrow_FinalResponse();
    $client_sink_func = async function(
      AsyncGenerator<null, SinkPayload, void> $pld_generator
    ) use ($sink, $payload_serializer, $final_response_deserializer) {
      return await $sink->genSink<SinkPayload, FinalResponse>(
        $pld_generator, 
        $payload_serializer, 
        $final_response_deserializer, 
      );
    };

    $in_transport->resetBuffer();
    $in_transport->write($result_msg);
    $this->recvImpl_methodFinalThrow_FirstResponse($currentseqid);

    await $this->asyncHandler_->genAfter();
    return new \ResponseAndClientSink<void, SinkPayload, FinalResponse>(null, $client_sink_func);
  }

  /**
   * Original thrift definition:-
   * void, sink<SinkPayload, throws (1: SinkException1 ex), FinalResponse, throws (1: SinkException2 ex)>
   *   methodBothThrow();
   */
  public async function methodBothThrow(): Awaitable<\ResponseAndClientSink<void, SinkPayload, FinalResponse>> {
    $hh_frame_metadata = $this->getHHFrameMetadata();
    if ($hh_frame_metadata !== null) {
      \HH\set_frame_metadata($hh_frame_metadata);
    }
    $rpc_options = $this->getAndResetOptions() ?? \ThriftClientBase::defaultOptions();
    $channel = $this->channel_;
    $out_transport = $this->output_->getTransport();
    $in_transport = $this->input_->getTransport();
    invariant(
      $channel !== null && $out_transport is \TMemoryBuffer && $in_transport is \TMemoryBuffer,
      "Sink methods require nonnull channel and TMemoryBuffer transport"
    );

    $args = SinkService_methodBothThrow_args::withDefaultValues();
    await $this->asyncHandler_->genBefore("SinkService", "methodBothThrow", $args);
    $currentseqid = $this->sendImplHelper($args, "methodBothThrow", false);
    $msg = $out_transport->getBuffer();
    $out_transport->resetBuffer();
    list($result_msg, $_read_headers, $sink) = await $channel->genSendRequestSink($rpc_options, $msg);

    $payload_serializer = $this->sendImpl_methodBothThrow_SinkEncode();
    $final_response_deserializer = $this->recvImpl_methodBothThrow_FinalResponse();
    $client_sink_func = async function(
      AsyncGenerator<null, SinkPayload, void> $pld_generator
    ) use ($sink, $payload_serializer, $final_response_deserializer) {
      return await $sink->genSink<SinkPayload, FinalResponse>(
        $pld_generator, 
        $payload_serializer, 
        $final_response_deserializer, 
      );
    };

    $in_transport->resetBuffer();
    $in_transport->write($result_msg);
    $this->recvImpl_methodBothThrow_FirstResponse($currentseqid);

    await $this->asyncHandler_->genAfter();
    return new \ResponseAndClientSink<void, SinkPayload, FinalResponse>(null, $client_sink_func);
  }

  /**
   * Original thrift definition:-
   * void, sink<SinkPayload, FinalResponse>
   *   methodFast();
   */
  public async function methodFast(): Awaitable<\ResponseAndClientSink<void, SinkPayload, FinalResponse>> {
    $hh_frame_metadata = $this->getHHFrameMetadata();
    if ($hh_frame_metadata !== null) {
      \HH\set_frame_metadata($hh_frame_metadata);
    }
    $rpc_options = $this->getAndResetOptions() ?? \ThriftClientBase::defaultOptions();
    $channel = $this->channel_;
    $out_transport = $this->output_->getTransport();
    $in_transport = $this->input_->getTransport();
    invariant(
      $channel !== null && $out_transport is \TMemoryBuffer && $in_transport is \TMemoryBuffer,
      "Sink methods require nonnull channel and TMemoryBuffer transport"
    );

    $args = SinkService_methodFast_args::withDefaultValues();
    await $this->asyncHandler_->genBefore("SinkService", "methodFast", $args);
    $currentseqid = $this->sendImplHelper($args, "methodFast", false);
    $msg = $out_transport->getBuffer();
    $out_transport->resetBuffer();
    list($result_msg, $_read_headers, $sink) = await $channel->genSendRequestSink($rpc_options, $msg);

    $payload_serializer = $this->sendImpl_methodFast_SinkEncode();
    $final_response_deserializer = $this->recvImpl_methodFast_FinalResponse();
    $client_sink_func = async function(
      AsyncGenerator<null, SinkPayload, void> $pld_generator
    ) use ($sink, $payload_serializer, $final_response_deserializer) {
      return await $sink->genSink<SinkPayload, FinalResponse>(
        $pld_generator, 
        $payload_serializer, 
        $final_response_deserializer, 
      );
    };

    $in_transport->resetBuffer();
    $in_transport->write($result_msg);
    $this->recvImpl_methodFast_FirstResponse($currentseqid);

    await $this->asyncHandler_->genAfter();
    return new \ResponseAndClientSink<void, SinkPayload, FinalResponse>(null, $client_sink_func);
  }

  /* send and recv functions */
}

// HELPER FUNCTIONS AND STRUCTURES

class SinkService_method_args implements \IThriftSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
  ];
  const dict<string, int> FIELDMAP = dict[
  ];

  const type TConstructorShape = shape(
  );

  const int STRUCTURAL_ID = 957977401221134810;

  public function __construct()[] {
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
    );
  }

  public function getName()[]: string {
    return 'SinkService_method_args';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.method_args",
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class SinkService_method_FirstResponse implements \IThriftSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
  ];
  const dict<string, int> FIELDMAP = dict[
  ];

  const type TConstructorShape = shape(
  );

  const int STRUCTURAL_ID = 957977401221134810;

  public function __construct()[] {
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
    );
  }

  public function getName()[]: string {
    return 'SinkService_method_FirstResponse';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.SinkService_method_FirstResponse",
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class SinkService_method_SinkPayload implements \IThriftSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    0 => shape(
      'var' => 'success',
      'type' => \TType::STRUCT,
      'class' => SinkPayload::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'success' => 0,
  ];

  const type TConstructorShape = shape(
    ?'success' => ?SinkPayload,
  );

  const int STRUCTURAL_ID = 5047864711357047518;
  public ?SinkPayload $success;

  public function __construct(?SinkPayload $success = null)[] {
    $this->success = $success;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'success'),
    );
  }

  public function getName()[]: string {
    return 'SinkService_method_SinkPayload';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.SinkService_method_SinkPayload",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 0,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.SinkPayload",
                    )
                  ),
                )
              ),
              "name" => "success",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class SinkService_method_FinalResponse implements \IThriftSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    0 => shape(
      'var' => 'success',
      'type' => \TType::STRUCT,
      'class' => FinalResponse::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'success' => 0,
  ];

  const type TConstructorShape = shape(
    ?'success' => ?FinalResponse,
  );

  const int STRUCTURAL_ID = 7640464975912492398;
  public ?FinalResponse $success;

  public function __construct(?FinalResponse $success = null)[] {
    $this->success = $success;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'success'),
    );
  }

  public function getName()[]: string {
    return 'SinkService_method_FinalResponse';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.SinkService_method_FinalResponse",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 0,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.FinalResponse",
                    )
                  ),
                )
              ),
              "name" => "success",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class SinkService_methodAndReponse_args implements \IThriftSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
  ];
  const dict<string, int> FIELDMAP = dict[
  ];

  const type TConstructorShape = shape(
  );

  const int STRUCTURAL_ID = 957977401221134810;

  public function __construct()[] {
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
    );
  }

  public function getName()[]: string {
    return 'SinkService_methodAndReponse_args';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.methodAndReponse_args",
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class SinkService_methodAndReponse_FirstResponse implements \IThriftSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    0 => shape(
      'var' => 'success',
      'type' => \TType::STRUCT,
      'class' => InitialResponse::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'success' => 0,
  ];

  const type TConstructorShape = shape(
    ?'success' => ?InitialResponse,
  );

  const int STRUCTURAL_ID = 1156060868779247352;
  public ?InitialResponse $success;

  public function __construct(?InitialResponse $success = null)[] {
    $this->success = $success;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'success'),
    );
  }

  public function getName()[]: string {
    return 'SinkService_methodAndReponse_FirstResponse';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.SinkService_methodAndReponse_FirstResponse",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 0,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.InitialResponse",
                    )
                  ),
                )
              ),
              "name" => "success",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class SinkService_methodAndReponse_SinkPayload implements \IThriftSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    0 => shape(
      'var' => 'success',
      'type' => \TType::STRUCT,
      'class' => SinkPayload::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'success' => 0,
  ];

  const type TConstructorShape = shape(
    ?'success' => ?SinkPayload,
  );

  const int STRUCTURAL_ID = 5047864711357047518;
  public ?SinkPayload $success;

  public function __construct(?SinkPayload $success = null)[] {
    $this->success = $success;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'success'),
    );
  }

  public function getName()[]: string {
    return 'SinkService_methodAndReponse_SinkPayload';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.SinkService_methodAndReponse_SinkPayload",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 0,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.SinkPayload",
                    )
                  ),
                )
              ),
              "name" => "success",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class SinkService_methodAndReponse_FinalResponse implements \IThriftSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    0 => shape(
      'var' => 'success',
      'type' => \TType::STRUCT,
      'class' => FinalResponse::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'success' => 0,
  ];

  const type TConstructorShape = shape(
    ?'success' => ?FinalResponse,
  );

  const int STRUCTURAL_ID = 7640464975912492398;
  public ?FinalResponse $success;

  public function __construct(?FinalResponse $success = null)[] {
    $this->success = $success;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'success'),
    );
  }

  public function getName()[]: string {
    return 'SinkService_methodAndReponse_FinalResponse';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.SinkService_methodAndReponse_FinalResponse",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 0,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.FinalResponse",
                    )
                  ),
                )
              ),
              "name" => "success",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class SinkService_methodThrow_args implements \IThriftSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
  ];
  const dict<string, int> FIELDMAP = dict[
  ];

  const type TConstructorShape = shape(
  );

  const int STRUCTURAL_ID = 957977401221134810;

  public function __construct()[] {
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
    );
  }

  public function getName()[]: string {
    return 'SinkService_methodThrow_args';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.methodThrow_args",
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class SinkService_methodThrow_FirstResponse implements \IThriftSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'ex',
      'type' => \TType::STRUCT,
      'class' => InitialException::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'ex' => 1,
  ];

  const type TConstructorShape = shape(
    ?'ex' => ?InitialException,
  );

  const int STRUCTURAL_ID = 5881917388606205109;
  public ?InitialException $ex;

  public function __construct(?InitialException $ex = null)[] {
    $this->ex = $ex;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'ex'),
    );
  }

  public function getName()[]: string {
    return 'SinkService_methodThrow_FirstResponse';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.SinkService_methodThrow_FirstResponse",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.InitialException",
                    )
                  ),
                )
              ),
              "name" => "ex",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class SinkService_methodThrow_SinkPayload implements \IThriftSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    0 => shape(
      'var' => 'success',
      'type' => \TType::STRUCT,
      'class' => SinkPayload::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'success' => 0,
  ];

  const type TConstructorShape = shape(
    ?'success' => ?SinkPayload,
  );

  const int STRUCTURAL_ID = 5047864711357047518;
  public ?SinkPayload $success;

  public function __construct(?SinkPayload $success = null)[] {
    $this->success = $success;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'success'),
    );
  }

  public function getName()[]: string {
    return 'SinkService_methodThrow_SinkPayload';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.SinkService_methodThrow_SinkPayload",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 0,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.SinkPayload",
                    )
                  ),
                )
              ),
              "name" => "success",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class SinkService_methodThrow_FinalResponse implements \IThriftSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    0 => shape(
      'var' => 'success',
      'type' => \TType::STRUCT,
      'class' => FinalResponse::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'success' => 0,
  ];

  const type TConstructorShape = shape(
    ?'success' => ?FinalResponse,
  );

  const int STRUCTURAL_ID = 7640464975912492398;
  public ?FinalResponse $success;

  public function __construct(?FinalResponse $success = null)[] {
    $this->success = $success;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'success'),
    );
  }

  public function getName()[]: string {
    return 'SinkService_methodThrow_FinalResponse';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.SinkService_methodThrow_FinalResponse",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 0,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.FinalResponse",
                    )
                  ),
                )
              ),
              "name" => "success",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class SinkService_methodSinkThrow_args implements \IThriftSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
  ];
  const dict<string, int> FIELDMAP = dict[
  ];

  const type TConstructorShape = shape(
  );

  const int STRUCTURAL_ID = 957977401221134810;

  public function __construct()[] {
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
    );
  }

  public function getName()[]: string {
    return 'SinkService_methodSinkThrow_args';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.methodSinkThrow_args",
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class SinkService_methodSinkThrow_FirstResponse implements \IThriftSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
  ];
  const dict<string, int> FIELDMAP = dict[
  ];

  const type TConstructorShape = shape(
  );

  const int STRUCTURAL_ID = 957977401221134810;

  public function __construct()[] {
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
    );
  }

  public function getName()[]: string {
    return 'SinkService_methodSinkThrow_FirstResponse';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.SinkService_methodSinkThrow_FirstResponse",
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class SinkService_methodSinkThrow_SinkPayload implements \IThriftSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    0 => shape(
      'var' => 'success',
      'type' => \TType::STRUCT,
      'class' => SinkPayload::class,
    ),
    1 => shape(
      'var' => 'ex',
      'type' => \TType::STRUCT,
      'class' => SinkException1::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'success' => 0,
    'ex' => 1,
  ];

  const type TConstructorShape = shape(
    ?'success' => ?SinkPayload,
    ?'ex' => ?SinkException1,
  );

  const int STRUCTURAL_ID = 8919728181176611439;
  public ?SinkPayload $success;
  public ?SinkException1 $ex;

  public function __construct(?SinkPayload $success = null, ?SinkException1 $ex = null)[] {
    $this->success = $success;
    $this->ex = $ex;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'success'),
      Shapes::idx($shape, 'ex'),
    );
  }

  public function getName()[]: string {
    return 'SinkService_methodSinkThrow_SinkPayload';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.SinkService_methodSinkThrow_SinkPayload",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 0,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.SinkPayload",
                    )
                  ),
                )
              ),
              "name" => "success",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.SinkException1",
                    )
                  ),
                )
              ),
              "name" => "ex",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class SinkService_methodSinkThrow_FinalResponse implements \IThriftSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    0 => shape(
      'var' => 'success',
      'type' => \TType::STRUCT,
      'class' => FinalResponse::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'success' => 0,
  ];

  const type TConstructorShape = shape(
    ?'success' => ?FinalResponse,
  );

  const int STRUCTURAL_ID = 7640464975912492398;
  public ?FinalResponse $success;

  public function __construct(?FinalResponse $success = null)[] {
    $this->success = $success;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'success'),
    );
  }

  public function getName()[]: string {
    return 'SinkService_methodSinkThrow_FinalResponse';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.SinkService_methodSinkThrow_FinalResponse",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 0,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.FinalResponse",
                    )
                  ),
                )
              ),
              "name" => "success",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class SinkService_methodFinalThrow_args implements \IThriftSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
  ];
  const dict<string, int> FIELDMAP = dict[
  ];

  const type TConstructorShape = shape(
  );

  const int STRUCTURAL_ID = 957977401221134810;

  public function __construct()[] {
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
    );
  }

  public function getName()[]: string {
    return 'SinkService_methodFinalThrow_args';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.methodFinalThrow_args",
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class SinkService_methodFinalThrow_FirstResponse implements \IThriftSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
  ];
  const dict<string, int> FIELDMAP = dict[
  ];

  const type TConstructorShape = shape(
  );

  const int STRUCTURAL_ID = 957977401221134810;

  public function __construct()[] {
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
    );
  }

  public function getName()[]: string {
    return 'SinkService_methodFinalThrow_FirstResponse';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.SinkService_methodFinalThrow_FirstResponse",
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class SinkService_methodFinalThrow_SinkPayload implements \IThriftSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    0 => shape(
      'var' => 'success',
      'type' => \TType::STRUCT,
      'class' => SinkPayload::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'success' => 0,
  ];

  const type TConstructorShape = shape(
    ?'success' => ?SinkPayload,
  );

  const int STRUCTURAL_ID = 5047864711357047518;
  public ?SinkPayload $success;

  public function __construct(?SinkPayload $success = null)[] {
    $this->success = $success;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'success'),
    );
  }

  public function getName()[]: string {
    return 'SinkService_methodFinalThrow_SinkPayload';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.SinkService_methodFinalThrow_SinkPayload",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 0,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.SinkPayload",
                    )
                  ),
                )
              ),
              "name" => "success",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class SinkService_methodFinalThrow_FinalResponse implements \IThriftSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    0 => shape(
      'var' => 'success',
      'type' => \TType::STRUCT,
      'class' => FinalResponse::class,
    ),
    1 => shape(
      'var' => 'ex',
      'type' => \TType::STRUCT,
      'class' => SinkException2::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'success' => 0,
    'ex' => 1,
  ];

  const type TConstructorShape = shape(
    ?'success' => ?FinalResponse,
    ?'ex' => ?SinkException2,
  );

  const int STRUCTURAL_ID = 1352924921392902231;
  public ?FinalResponse $success;
  public ?SinkException2 $ex;

  public function __construct(?FinalResponse $success = null, ?SinkException2 $ex = null)[] {
    $this->success = $success;
    $this->ex = $ex;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'success'),
      Shapes::idx($shape, 'ex'),
    );
  }

  public function getName()[]: string {
    return 'SinkService_methodFinalThrow_FinalResponse';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.SinkService_methodFinalThrow_FinalResponse",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 0,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.FinalResponse",
                    )
                  ),
                )
              ),
              "name" => "success",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.SinkException2",
                    )
                  ),
                )
              ),
              "name" => "ex",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class SinkService_methodBothThrow_args implements \IThriftSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
  ];
  const dict<string, int> FIELDMAP = dict[
  ];

  const type TConstructorShape = shape(
  );

  const int STRUCTURAL_ID = 957977401221134810;

  public function __construct()[] {
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
    );
  }

  public function getName()[]: string {
    return 'SinkService_methodBothThrow_args';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.methodBothThrow_args",
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class SinkService_methodBothThrow_FirstResponse implements \IThriftSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
  ];
  const dict<string, int> FIELDMAP = dict[
  ];

  const type TConstructorShape = shape(
  );

  const int STRUCTURAL_ID = 957977401221134810;

  public function __construct()[] {
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
    );
  }

  public function getName()[]: string {
    return 'SinkService_methodBothThrow_FirstResponse';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.SinkService_methodBothThrow_FirstResponse",
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class SinkService_methodBothThrow_SinkPayload implements \IThriftSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    0 => shape(
      'var' => 'success',
      'type' => \TType::STRUCT,
      'class' => SinkPayload::class,
    ),
    1 => shape(
      'var' => 'ex',
      'type' => \TType::STRUCT,
      'class' => SinkException1::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'success' => 0,
    'ex' => 1,
  ];

  const type TConstructorShape = shape(
    ?'success' => ?SinkPayload,
    ?'ex' => ?SinkException1,
  );

  const int STRUCTURAL_ID = 8919728181176611439;
  public ?SinkPayload $success;
  public ?SinkException1 $ex;

  public function __construct(?SinkPayload $success = null, ?SinkException1 $ex = null)[] {
    $this->success = $success;
    $this->ex = $ex;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'success'),
      Shapes::idx($shape, 'ex'),
    );
  }

  public function getName()[]: string {
    return 'SinkService_methodBothThrow_SinkPayload';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.SinkService_methodBothThrow_SinkPayload",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 0,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.SinkPayload",
                    )
                  ),
                )
              ),
              "name" => "success",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.SinkException1",
                    )
                  ),
                )
              ),
              "name" => "ex",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class SinkService_methodBothThrow_FinalResponse implements \IThriftSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    0 => shape(
      'var' => 'success',
      'type' => \TType::STRUCT,
      'class' => FinalResponse::class,
    ),
    1 => shape(
      'var' => 'ex',
      'type' => \TType::STRUCT,
      'class' => SinkException2::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'success' => 0,
    'ex' => 1,
  ];

  const type TConstructorShape = shape(
    ?'success' => ?FinalResponse,
    ?'ex' => ?SinkException2,
  );

  const int STRUCTURAL_ID = 1352924921392902231;
  public ?FinalResponse $success;
  public ?SinkException2 $ex;

  public function __construct(?FinalResponse $success = null, ?SinkException2 $ex = null)[] {
    $this->success = $success;
    $this->ex = $ex;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'success'),
      Shapes::idx($shape, 'ex'),
    );
  }

  public function getName()[]: string {
    return 'SinkService_methodBothThrow_FinalResponse';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.SinkService_methodBothThrow_FinalResponse",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 0,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.FinalResponse",
                    )
                  ),
                )
              ),
              "name" => "success",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.SinkException2",
                    )
                  ),
                )
              ),
              "name" => "ex",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class SinkService_methodFast_args implements \IThriftSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
  ];
  const dict<string, int> FIELDMAP = dict[
  ];

  const type TConstructorShape = shape(
  );

  const int STRUCTURAL_ID = 957977401221134810;

  public function __construct()[] {
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
    );
  }

  public function getName()[]: string {
    return 'SinkService_methodFast_args';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.methodFast_args",
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class SinkService_methodFast_FirstResponse implements \IThriftSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
  ];
  const dict<string, int> FIELDMAP = dict[
  ];

  const type TConstructorShape = shape(
  );

  const int STRUCTURAL_ID = 957977401221134810;

  public function __construct()[] {
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
    );
  }

  public function getName()[]: string {
    return 'SinkService_methodFast_FirstResponse';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.SinkService_methodFast_FirstResponse",
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class SinkService_methodFast_SinkPayload implements \IThriftSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    0 => shape(
      'var' => 'success',
      'type' => \TType::STRUCT,
      'class' => SinkPayload::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'success' => 0,
  ];

  const type TConstructorShape = shape(
    ?'success' => ?SinkPayload,
  );

  const int STRUCTURAL_ID = 5047864711357047518;
  public ?SinkPayload $success;

  public function __construct(?SinkPayload $success = null)[] {
    $this->success = $success;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'success'),
    );
  }

  public function getName()[]: string {
    return 'SinkService_methodFast_SinkPayload';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.SinkService_methodFast_SinkPayload",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 0,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.SinkPayload",
                    )
                  ),
                )
              ),
              "name" => "success",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class SinkService_methodFast_FinalResponse implements \IThriftSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    0 => shape(
      'var' => 'success',
      'type' => \TType::STRUCT,
      'class' => FinalResponse::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'success' => 0,
  ];

  const type TConstructorShape = shape(
    ?'success' => ?FinalResponse,
  );

  const int STRUCTURAL_ID = 7640464975912492398;
  public ?FinalResponse $success;

  public function __construct(?FinalResponse $success = null)[] {
    $this->success = $success;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'success'),
    );
  }

  public function getName()[]: string {
    return 'SinkService_methodFast_FinalResponse';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.SinkService_methodFast_FinalResponse",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 0,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.FinalResponse",
                    )
                  ),
                )
              ),
              "name" => "success",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class SinkServiceStaticMetadata implements \IThriftServiceStaticMetadata {
  public static function getServiceMetadata()[]: \tmeta_ThriftService {
    return tmeta_ThriftService::fromShape(
      shape(
        "name" => "module.SinkService",
        "functions" => vec[
          tmeta_ThriftFunction::fromShape(
            shape(
              "name" => "method",
              "return_type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_sink" => tmeta_ThriftSinkType::fromShape(
                    shape(
                      "elemType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_struct" => tmeta_ThriftStructType::fromShape(
                            shape(
                              "name" => "module.SinkPayload",
                            )
                          ),
                        )
                      ),
                      "finalResponseType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_struct" => tmeta_ThriftStructType::fromShape(
                            shape(
                              "name" => "module.FinalResponse",
                            )
                          ),
                        )
                      ),
                      "initialResponseType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_VOID_TYPE,
                        )
                      ),
                    )
                  ),
                )
              ),
            )
          ),
          tmeta_ThriftFunction::fromShape(
            shape(
              "name" => "methodAndReponse",
              "return_type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_sink" => tmeta_ThriftSinkType::fromShape(
                    shape(
                      "elemType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_struct" => tmeta_ThriftStructType::fromShape(
                            shape(
                              "name" => "module.SinkPayload",
                            )
                          ),
                        )
                      ),
                      "finalResponseType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_struct" => tmeta_ThriftStructType::fromShape(
                            shape(
                              "name" => "module.FinalResponse",
                            )
                          ),
                        )
                      ),
                      "initialResponseType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_struct" => tmeta_ThriftStructType::fromShape(
                            shape(
                              "name" => "module.InitialResponse",
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
            )
          ),
          tmeta_ThriftFunction::fromShape(
            shape(
              "name" => "methodThrow",
              "return_type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_sink" => tmeta_ThriftSinkType::fromShape(
                    shape(
                      "elemType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_struct" => tmeta_ThriftStructType::fromShape(
                            shape(
                              "name" => "module.SinkPayload",
                            )
                          ),
                        )
                      ),
                      "finalResponseType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_struct" => tmeta_ThriftStructType::fromShape(
                            shape(
                              "name" => "module.FinalResponse",
                            )
                          ),
                        )
                      ),
                      "initialResponseType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_VOID_TYPE,
                        )
                      ),
                    )
                  ),
                )
              ),
              "exceptions" => vec[
                tmeta_ThriftField::fromShape(
                  shape(
                    "id" => 1,
                    "type" => tmeta_ThriftType::fromShape(
                      shape(
                        "t_struct" => tmeta_ThriftStructType::fromShape(
                          shape(
                            "name" => "module.InitialException",
                          )
                        ),
                      )
                    ),
                    "name" => "ex",
                  )
                ),
              ],
            )
          ),
          tmeta_ThriftFunction::fromShape(
            shape(
              "name" => "methodSinkThrow",
              "return_type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_sink" => tmeta_ThriftSinkType::fromShape(
                    shape(
                      "elemType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_struct" => tmeta_ThriftStructType::fromShape(
                            shape(
                              "name" => "module.SinkPayload",
                            )
                          ),
                        )
                      ),
                      "finalResponseType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_struct" => tmeta_ThriftStructType::fromShape(
                            shape(
                              "name" => "module.FinalResponse",
                            )
                          ),
                        )
                      ),
                      "initialResponseType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_VOID_TYPE,
                        )
                      ),
                    )
                  ),
                )
              ),
            )
          ),
          tmeta_ThriftFunction::fromShape(
            shape(
              "name" => "methodFinalThrow",
              "return_type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_sink" => tmeta_ThriftSinkType::fromShape(
                    shape(
                      "elemType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_struct" => tmeta_ThriftStructType::fromShape(
                            shape(
                              "name" => "module.SinkPayload",
                            )
                          ),
                        )
                      ),
                      "finalResponseType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_struct" => tmeta_ThriftStructType::fromShape(
                            shape(
                              "name" => "module.FinalResponse",
                            )
                          ),
                        )
                      ),
                      "initialResponseType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_VOID_TYPE,
                        )
                      ),
                    )
                  ),
                )
              ),
            )
          ),
          tmeta_ThriftFunction::fromShape(
            shape(
              "name" => "methodBothThrow",
              "return_type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_sink" => tmeta_ThriftSinkType::fromShape(
                    shape(
                      "elemType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_struct" => tmeta_ThriftStructType::fromShape(
                            shape(
                              "name" => "module.SinkPayload",
                            )
                          ),
                        )
                      ),
                      "finalResponseType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_struct" => tmeta_ThriftStructType::fromShape(
                            shape(
                              "name" => "module.FinalResponse",
                            )
                          ),
                        )
                      ),
                      "initialResponseType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_VOID_TYPE,
                        )
                      ),
                    )
                  ),
                )
              ),
            )
          ),
          tmeta_ThriftFunction::fromShape(
            shape(
              "name" => "methodFast",
              "return_type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_sink" => tmeta_ThriftSinkType::fromShape(
                    shape(
                      "elemType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_struct" => tmeta_ThriftStructType::fromShape(
                            shape(
                              "name" => "module.SinkPayload",
                            )
                          ),
                        )
                      ),
                      "finalResponseType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_struct" => tmeta_ThriftStructType::fromShape(
                            shape(
                              "name" => "module.FinalResponse",
                            )
                          ),
                        )
                      ),
                      "initialResponseType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_VOID_TYPE,
                        )
                      ),
                    )
                  ),
                )
              ),
            )
          ),
        ],
      )
    );
  }

  public static function getServiceMetadataResponse()[]: \tmeta_ThriftServiceMetadataResponse {
    return \tmeta_ThriftServiceMetadataResponse::fromShape(
      shape(
        'context' => \tmeta_ThriftServiceContext::fromShape(
          shape(
            'service_info' => self::getServiceMetadata(),
            'module' => \tmeta_ThriftModuleContext::fromShape(
              shape(
                'name' => 'module',
              )
            ),
          )
        ),
        'metadata' => \tmeta_ThriftMetadata::fromShape(
          shape(
            'enums' => dict[
            ],
            'structs' => dict[
              'module.SinkPayload' => SinkPayload::getStructMetadata(),
              'module.FinalResponse' => FinalResponse::getStructMetadata(),
              'module.InitialResponse' => InitialResponse::getStructMetadata(),
            ],
            'exceptions' => dict[
              'module.InitialException' => InitialException::getExceptionMetadata(),
            ],
            'services' => dict[
            ],
          )
        ),
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TServiceAnnotations {
    return shape(
      'service' => dict[],
      'functions' => dict[
      ],
    );
  }
}

