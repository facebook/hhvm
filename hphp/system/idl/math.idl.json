{
    "preamble": "",
    "consts": [
        {
            "name": "PHP_ROUND_HALF_UP",
            "type": "Int64",
            "desc": "Round val up to precision decimal places away from zero, when it is half way there. Making 1.5 into 2 and -1.5 into -2."
        },
        {
            "name": "PHP_ROUND_HALF_DOWN",
            "type": "Int64",
            "desc": "Round val down to precision decimal places towards zero, when it is half way there. Making 1.5 into 1 and -1.5 into -1."
        },
        {
            "name": "PHP_ROUND_HALF_EVEN",
            "type": "Int64",
            "desc": "Round val to precision decimal places towards the next even value."
        },
        {
            "name": "PHP_ROUND_HALF_ODD",
            "type": "Int64",
            "desc": "Round val to precision decimal places towards the next odd value."
        }
    ],
    "funcs": [
        {
            "name": "pi",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Double",
                "desc": "The value of pi as float."
            },
            "args": [
            ]
        },
        {
            "name": "min",
            "desc": "If the first and only parameter is an array, min() returns the lowest value in that array. If at least two parameters are provided, min() returns the smallest of these values.\n\nPHP will evaluate a non-numeric string as 0 if compared to integer, but still return the string if it's seen as the numerically lowest value. If multiple arguments evaluate to 0, min() will return the lowest alphanumerical string value if any strings are given, else a numeric 0 is returned.",
            "flags": [
                "HasDocComment",
                "VariableArguments"
            ],
            "return": {
                "type": "Variant",
                "desc": "min() returns the numerically lowest of the parameter values."
            },
            "args": [
                {
                    "name": "value",
                    "type": "Variant",
                    "desc": "An array containing the values."
                }
            ]
        },
        {
            "name": "max",
            "desc": "If the first and only parameter is an array, max() returns the highest value in that array. If at least two parameters are provided, max() returns the biggest of these values.\n\nPHP will evaluate a non-numeric string as 0 if compared to integer, but still return the string if it's seen as the numerically highest value. If multiple arguments evaluate to 0, max() will return a numeric 0 if given, else the alphabetical highest string value will be returned.",
            "flags": [
                "HasDocComment",
                "VariableArguments"
            ],
            "return": {
                "type": "Variant",
                "desc": "max() returns the numerically highest of the parameter values. If multiple values can be considered of the same size, the one that is listed first will be returned.\n\nWhen max() is given multiple arrays, the longest array is returned. If all the arrays have the same length, max() will use lexicographic ordering to find the return value.\n\nWhen given a string it will be cast as an integer when comparing."
            },
            "args": [
                {
                    "name": "value",
                    "type": "Variant",
                    "desc": "An array containing the values."
                }
            ]
        },
        {
            "name": "abs",
            "desc": "Returns the absolute value of number.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "The absolute value of number. If the argument number is of type float, the return type is also float, otherwise it is integer (as float usually has a bigger value range than integer)."
            },
            "args": [
                {
                    "name": "number",
                    "type": "Variant",
                    "desc": "The numeric value to process"
                }
            ]
        },
        {
            "name": "is_finite",
            "desc": "Checks whether val is a legal finite on this platform.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Boolean",
                "desc": "TRUE if val is a legal finite number within the allowed range for a PHP float on this platform, else FALSE."
            },
            "args": [
                {
                    "name": "val",
                    "type": "Double",
                    "desc": "The value to check"
                }
            ]
        },
        {
            "name": "is_infinite",
            "desc": "Returns TRUE if val is infinite (positive or negative), like the result of log(0) or any value too big to fit into a float on this platform.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Boolean",
                "desc": "TRUE if val is infinite, else FALSE."
            },
            "args": [
                {
                    "name": "val",
                    "type": "Double",
                    "desc": "The value to check"
                }
            ]
        },
        {
            "name": "is_nan",
            "desc": "Checks whether val is 'not a number', like the result of acos(1.01).",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE if val is 'not a number', else FALSE."
            },
            "args": [
                {
                    "name": "val",
                    "type": "Double",
                    "desc": "The value to check"
                }
            ]
        },
        {
            "name": "ceil",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "value rounded up to the next highest integer. The return value of ceil() is still of type float as the value range of float is usually bigger than that of integer."
            },
            "args": [
                {
                    "name": "number",
                    "type": "Variant",
                    "desc": "The value to round"
                }
            ]
        },
        {
            "name": "floor",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "value rounded to the next lowest integer. The return value of floor() is still of type float because the value range of float is usually bigger than that of integer."
            },
            "args": [
                {
                    "name": "number",
                    "type": "Variant",
                    "desc": "The numeric value to round"
                }
            ]
        },
        {
            "name": "round",
            "desc": "Returns the rounded value of val to specified precision (number of digits after the decimal point). precision can also be negative or zero (default).\n\nPHP doesn't handle strings like \"12,300.2\" correctly by default. See converting from strings.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "The rounded value"
            },
            "args": [
                {
                    "name": "val",
                    "type": "Variant",
                    "desc": "The value to round"
                },
                {
                    "name": "precision",
                    "type": "Int64",
                    "value": "0",
                    "desc": "The optional number of decimal digits to round to."
                },
                {
                    "name": "mode",
                    "type": "Int64",
                    "value": "1",
                    "desc": "One of the PHP_ROUND_HALF_* constants to determine how rounding should occur."
                }
            ]
        },
        {
            "name": "deg2rad",
            "desc": "This function converts number from degrees to the radian equivalent.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Double",
                "desc": "The radian equivalent of number"
            },
            "args": [
                {
                    "name": "number",
                    "type": "Double",
                    "desc": "Angular value in degrees"
                }
            ]
        },
        {
            "name": "rad2deg",
            "desc": "This function converts number from radian to degrees.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Double",
                "desc": "The equivalent of number in degrees"
            },
            "args": [
                {
                    "name": "number",
                    "type": "Double",
                    "desc": "A radian value"
                }
            ]
        },
        {
            "name": "decbin",
            "desc": "Returns a string containing a binary representation of the given number argument.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "String",
                "desc": "Binary string representation of number"
            },
            "args": [
                {
                    "name": "number",
                    "type": "Int64",
                    "desc": null
                }
            ]
        },
        {
            "name": "dechex",
            "desc": "Returns a string containing a hexadecimal representation of the given number argument. The largest number that can be converted is 4294967295 in decimal resulting to \"ffffffff\".",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "String",
                "desc": "Hexadecimal string representation of number"
            },
            "args": [
                {
                    "name": "number",
                    "type": "Int64",
                    "desc": "Decimal value to convert"
                }
            ]
        },
        {
            "name": "decoct",
            "desc": "Returns a string containing an octal representation of the given number argument. The largest number that can be converted is 4294967295 in decimal resulting to \"37777777777\".",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "String",
                "desc": "Octal string representation of number"
            },
            "args": [
                {
                    "name": "number",
                    "type": "Int64",
                    "desc": "Decimal value to convert"
                }
            ]
        },
        {
            "name": "bindec",
            "desc": "Returns the decimal equivalent of the binary number represented by the binary_string argument.\n\nbindec() converts a binary number to an integer or, if needed for size reasons, float.\n\nbindec() interprets all binary_string values as unsigned integers. This is because bindec() sees the most significant bit as another order of magnitude rather than as the sign bit.\nWarning\n\nThe parameter must be a string. Using other data types will produce unexpected results.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "The decimal value of binary_string"
            },
            "args": [
                {
                    "name": "binary_string",
                    "type": "String",
                    "desc": "The binary string to convert"
                }
            ]
        },
        {
            "name": "hexdec",
            "desc": "Returns the decimal equivalent of the hexadecimal number represented by the hex_string argument. hexdec() converts a hexadecimal string to a decimal number.\n\nhexdec() will ignore any non-hexadecimal characters it encounters.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "The decimal representation of hex_string"
            },
            "args": [
                {
                    "name": "hex_string",
                    "type": "String",
                    "desc": "The hexadecimal string to convert"
                }
            ]
        },
        {
            "name": "octdec",
            "desc": "Returns the decimal equivalent of the octal number represented by the octal_string argument.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "The decimal representation of octal_string"
            },
            "args": [
                {
                    "name": "octal_string",
                    "type": "String",
                    "desc": "The octal string to convert"
                }
            ]
        },
        {
            "name": "base_convert",
            "desc": "Returns a string containing number represented in base tobase. The base in which number is given is specified in frombase. Both frombase and tobase have to be between 2 and 36, inclusive. Digits in numbers with a base higher than 10 will be represented with the letters a-z, with a meaning 10, b meaning 11 and z meaning 35. Warning base_convert() may lose precision on large numbers due to properties related to the internal \"double\" or \"float\" type used. Please see the Floating point numbers section in the manual for more specific information and limitations.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "number converted to base tobase"
            },
            "args": [
                {
                    "name": "number",
                    "type": "String",
                    "desc": "The number to convert"
                },
                {
                    "name": "frombase",
                    "type": "Int64",
                    "desc": "The base number is in"
                },
                {
                    "name": "tobase",
                    "type": "Int64",
                    "desc": "The base to convert number to"
                }
            ]
        },
        {
            "name": "pow",
            "desc": "Returns base raised to the power of exp. Warning\n\nIn PHP 4.0.6 and earlier pow() always returned a float, and did not issue warnings.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Numeric",
                "desc": "base raised to the power of exp. If the result can be represented as integer it will be returned as type integer, else it will be returned as type float. If the power cannot be computed FALSE will be returned instead."
            },
            "args": [
                {
                    "name": "base",
                    "type": "Variant",
                    "desc": "The base to use"
                },
                {
                    "name": "exp",
                    "type": "Variant",
                    "desc": "The exponent"
                }
            ]
        },
        {
            "name": "exp",
            "desc": "Returns e raised to the power of arg.\n\n'e' is the base of the natural system of logarithms, or approximately 2.718282.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Double",
                "desc": "'e' raised to the power of arg"
            },
            "args": [
                {
                    "name": "arg",
                    "type": "Double",
                    "desc": "The argument to process"
                }
            ]
        },
        {
            "name": "expm1",
            "desc": "expm1() returns the equivalent to 'exp(arg) - 1' computed in a way that is accurate even if the value of arg is near zero, a case where 'exp (arg) - 1' would be inaccurate due to subtraction of two numbers that are nearly equal.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Double",
                "desc": "'e' to the power of arg minus one"
            },
            "args": [
                {
                    "name": "arg",
                    "type": "Double",
                    "desc": "The argument to process"
                }
            ]
        },
        {
            "name": "log10",
            "desc": "Returns the base-10 logarithm of arg.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Double",
                "desc": "The base-10 logarithm of arg"
            },
            "args": [
                {
                    "name": "arg",
                    "type": "Double",
                    "desc": "The argument to process"
                }
            ]
        },
        {
            "name": "log1p",
            "desc": "log1p() returns log(1 + number) computed in a way that is accurate even when the value of number is close to zero. log() might only return log(1) in this case due to lack of precision.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Double",
                "desc": "log(1 + number)"
            },
            "args": [
                {
                    "name": "number",
                    "type": "Double",
                    "desc": "The argument to process"
                }
            ]
        },
        {
            "name": "log",
            "desc": "If the optional base parameter is specified, log() returns logbase arg, otherwise log() returns the natural logarithm of arg.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Double",
                "desc": "The logarithm of arg to base, if given, or the natural logarithm."
            },
            "args": [
                {
                    "name": "arg",
                    "type": "Double",
                    "desc": "The value to calculate the logarithm for"
                },
                {
                    "name": "base",
                    "type": "Double",
                    "value": "0",
                    "desc": "The optional logarithmic base to use (defaults to 'e' and so to the natural logarithm)."
                }
            ]
        },
        {
            "name": "cos",
            "desc": "cos() returns the cosine of the arg parameter. The arg parameter is in radians.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Double",
                "desc": "The cosine of arg"
            },
            "args": [
                {
                    "name": "arg",
                    "type": "Double",
                    "desc": "An angle in radians"
                }
            ]
        },
        {
            "name": "cosh",
            "desc": "Returns the hyperbolic cosine of arg, defined as (exp(arg) + exp(-arg))\/2.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Double",
                "desc": "The hyperbolic cosine of arg"
            },
            "args": [
                {
                    "name": "arg",
                    "type": "Double",
                    "desc": "The argument to process"
                }
            ]
        },
        {
            "name": "sin",
            "desc": "sin() returns the sine of the arg parameter. The arg parameter is in radians.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Double",
                "desc": "The sine of arg"
            },
            "args": [
                {
                    "name": "arg",
                    "type": "Double",
                    "desc": "A value in radians"
                }
            ]
        },
        {
            "name": "sinh",
            "desc": "Returns the hyperbolic sine of arg, defined as (exp(arg) - exp(-arg))\/2.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Double",
                "desc": "The hyperbolic sine of arg"
            },
            "args": [
                {
                    "name": "arg",
                    "type": "Double",
                    "desc": "The argument to process"
                }
            ]
        },
        {
            "name": "tan",
            "desc": "tan() returns the tangent of the arg parameter. The arg parameter is in radians.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Double",
                "desc": "The tangent of arg"
            },
            "args": [
                {
                    "name": "arg",
                    "type": "Double",
                    "desc": "The argument to process in radians"
                }
            ]
        },
        {
            "name": "tanh",
            "desc": "Returns the hyperbolic tangent of arg, defined as sinh(arg)\/cosh(arg).",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Double",
                "desc": "The hyperbolic tangent of arg"
            },
            "args": [
                {
                    "name": "arg",
                    "type": "Double",
                    "desc": "The argument to process"
                }
            ]
        },
        {
            "name": "acos",
            "desc": "Returns the arc cosine of arg in radians. acos() is the complementary function of cos(), which means that a==cos(acos(a)) for every value of a that is within acos()' range.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Double",
                "desc": "The arc cosine of arg in radians."
            },
            "args": [
                {
                    "name": "arg",
                    "type": "Double",
                    "desc": "The argument to process"
                }
            ]
        },
        {
            "name": "acosh",
            "desc": "Returns the inverse hyperbolic cosine of arg, i.e. the value whose hyperbolic cosine is arg.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Double",
                "desc": "The inverse hyperbolic cosine of arg"
            },
            "args": [
                {
                    "name": "arg",
                    "type": "Double",
                    "desc": "The value to process"
                }
            ]
        },
        {
            "name": "asin",
            "desc": "Returns the arc sine of arg in radians. asin() is the complementary function of sin(), which means that a==sin(asin(a)) for every value of a that is within asin()'s range.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Double",
                "desc": "The arc sine of arg in radians"
            },
            "args": [
                {
                    "name": "arg",
                    "type": "Double",
                    "desc": "The argument to process"
                }
            ]
        },
        {
            "name": "asinh",
            "desc": "Returns the inverse hyperbolic sine of arg, i.e. the value whose hyperbolic sine is arg.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Double",
                "desc": "The inverse hyperbolic sine of arg"
            },
            "args": [
                {
                    "name": "arg",
                    "type": "Double",
                    "desc": "The argument to process"
                }
            ]
        },
        {
            "name": "atan",
            "desc": "Returns the arc tangent of arg in radians. atan() is the complementary function of tan(), which means that a==tan(atan(a)) for every value of a that is within atan()'s range.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Double",
                "desc": "The arc tangent of arg in radians."
            },
            "args": [
                {
                    "name": "arg",
                    "type": "Double",
                    "desc": "The argument to process"
                }
            ]
        },
        {
            "name": "atanh",
            "desc": "Returns the inverse hyperbolic tangent of arg, i.e. the value whose hyperbolic tangent is arg.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Double",
                "desc": "Inverse hyperbolic tangent of arg"
            },
            "args": [
                {
                    "name": "arg",
                    "type": "Double",
                    "desc": "The argument to process"
                }
            ]
        },
        {
            "name": "atan2",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Double",
                "desc": "The arc tangent of y\/x in radians."
            },
            "args": [
                {
                    "name": "y",
                    "type": "Double",
                    "desc": "Dividend parameter"
                },
                {
                    "name": "x",
                    "type": "Double",
                    "desc": "Divisor parameter"
                }
            ]
        },
        {
            "name": "hypot",
            "desc": "hypot() returns the length of the hypotenuse of a right-angle triangle with sides of length x and y, or the distance of the point (x, y) from the origin. This is equivalent to sqrt(x*x + y*y).",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Double",
                "desc": "Calculated length of the hypotenuse"
            },
            "args": [
                {
                    "name": "x",
                    "type": "Double",
                    "desc": "Length of first side"
                },
                {
                    "name": "y",
                    "type": "Double",
                    "desc": "Length of second side"
                }
            ]
        },
        {
            "name": "fmod",
            "desc": "Returns the floating point remainder of dividing the dividend (x) by the divisor (y). The reminder (r) is defined as: x = i * y + r, for some integer i. If y is non-zero, r has the same sign as x and a magnitude less than the magnitude of y.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Double",
                "desc": "The floating point remainder of x\/y"
            },
            "args": [
                {
                    "name": "x",
                    "type": "Double",
                    "desc": "The dividend"
                },
                {
                    "name": "y",
                    "type": "Double",
                    "desc": "The divisor"
                }
            ]
        },
        {
            "name": "sqrt",
            "desc": "Returns the square root of arg.",
            "flags": [
                "HasDocComment",
                "ZendParamMode"
            ],
            "return": {
                "type": "Double",
                "desc": "The square root of arg or the special value NAN for negative numbers."
            },
            "args": [
                {
                    "name": "arg",
                    "type": "Double",
                    "desc": "The argument to process"
                }
            ]
        },
        {
            "name": "getrandmax",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Int64",
                "desc": "The largest possible random value returned by rand()"
            },
            "args": [
            ]
        },
        {
            "name": "srand",
            "desc": "Seeds the random number generator with seed or with a random value if no seed is given. As of PHP 4.2.0, there is no need to seed the random number generator with srand() or mt_srand() as this is now done automatically.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": null,
                "desc": "No value is returned."
            },
            "args": [
                {
                    "name": "seed",
                    "type": "Variant",
                    "value": "null_variant",
                    "desc": "Optional seed value"
                }
            ]
        },
        {
            "name": "rand",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Int64",
                "desc": "A pseudo random value between min (or 0) and max (or getrandmax(), inclusive)."
            },
            "args": [
                {
                    "name": "min",
                    "type": "Int64",
                    "value": "0",
                    "desc": "The lowest value to return (default: 0)"
                },
                {
                    "name": "max",
                    "type": "Int64",
                    "value": "RAND_MAX",
                    "desc": "The highest value to return (default: getrandmax())"
                }
            ]
        },
        {
            "name": "mt_getrandmax",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Int64",
                "desc": "Returns the maximum random value returned by mt_rand()"
            },
            "args": [
            ]
        },
        {
            "name": "mt_srand",
            "desc": "Seeds the random number generator with seed or with a random value if no seed is given. As of PHP 4.2.0, there is no need to seed the random number generator with srand() or mt_srand() as this is now done automatically.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": null,
                "desc": "No value is returned."
            },
            "args": [
                {
                    "name": "seed",
                    "type": "Variant",
                    "value": "null_variant",
                    "desc": "An optional seed value"
                }
            ]
        },
        {
            "name": "mt_rand",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Int64",
                "desc": "A random integer value between min (or 0) and max (or mt_getrandmax(), inclusive)"
            },
            "args": [
                {
                    "name": "min",
                    "type": "Int64",
                    "value": "0",
                    "desc": "Optional lowest value to be returned (default: 0)"
                },
                {
                    "name": "max",
                    "type": "Int64",
                    "value": "RAND_MAX",
                    "desc": "Optional highest value to be returned (default: mt_getrandmax())"
                }
            ]
        },
        {
            "name": "lcg_value",
            "desc": "lcg_value() returns a pseudo random number in the range of (0, 1). The function combines two CGs with periods of 2^31 - 85 and 2^31 - 249. The period of this function is equal to the product of both primes.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Double",
                "desc": "A pseudo random float value in the range of (0, 1)"
            },
            "args": [
            ]
        }
    ],
    "classes": [
    ]
}
