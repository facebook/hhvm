/**
 * Autogenerated by Thrift for src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#include "thrift/compiler/test/fixtures/mcpp2-compare/gen-cpp2/module_data.h"

#include <thrift/lib/cpp2/gen/module_data_cpp.h>

namespace apache {
namespace thrift {

const std::array<::some::valid::ns::MyEnumA, 3> TEnumDataStorage<::some::valid::ns::MyEnumA>::values = {{
  type::fieldA,
  type::fieldB,
  type::fieldC,
}};
const std::array<folly::StringPiece, 3> TEnumDataStorage<::some::valid::ns::MyEnumA>::names = {{
  "fieldA",
  "fieldB",
  "fieldC",
}};

const std::array<::some::valid::ns::AnnotatedEnum, 3> TEnumDataStorage<::some::valid::ns::AnnotatedEnum>::values = {{
  type::FIELDA,
  type::FIELDB,
  type::FIELDC,
}};
const std::array<folly::StringPiece, 3> TEnumDataStorage<::some::valid::ns::AnnotatedEnum>::names = {{
  "FIELDA",
  "FIELDB",
  "FIELDC",
}};

const std::array<::some::valid::ns::AnnotatedEnum2, 3> TEnumDataStorage<::some::valid::ns::AnnotatedEnum2>::values = {{
  type::FIELDA,
  type::FIELDB,
  type::FIELDC,
}};
const std::array<folly::StringPiece, 3> TEnumDataStorage<::some::valid::ns::AnnotatedEnum2>::names = {{
  "FIELDA",
  "FIELDB",
  "FIELDC",
}};

const std::array<::some::valid::ns::MyEnumB, 1> TEnumDataStorage<::some::valid::ns::MyEnumB>::values = {{
  type::AField,
}};
const std::array<folly::StringPiece, 1> TEnumDataStorage<::some::valid::ns::MyEnumB>::names = {{
  "AField",
}};

const std::array<::some::valid::ns::SimpleUnion::Type, 2> TEnumDataStorage<::some::valid::ns::SimpleUnion::Type>::values = {{
  type::intValue,
  type::stringValue,
}};
const std::array<folly::StringPiece, 2> TEnumDataStorage<::some::valid::ns::SimpleUnion::Type>::names = {{
  "intValue",
  "stringValue",
}};

const std::array<::some::valid::ns::ComplexUnion::Type, 28> TEnumDataStorage<::some::valid::ns::ComplexUnion::Type>::values = {{
  type::intValue,
  type::opt_intValue,
  type::stringValue,
  type::opt_stringValue,
  type::intValue2,
  type::intValue3,
  type::doubelValue,
  type::boolValue,
  type::union_list,
  type::union_set,
  type::union_map,
  type::opt_union_map,
  type::enum_field,
  type::enum_container,
  type::a_struct,
  type::a_set_struct,
  type::a_union,
  type::opt_a_union,
  type::a_union_list,
  type::a_union_typedef,
  type::a_union_typedef_list,
  type::MyBinaryField,
  type::MyBinaryField2,
  type::MyBinaryListField4,
  type::ref_field,
  type::ref_field2,
  type::excp_field,
  type::MyCustomField,
}};
const std::array<folly::StringPiece, 28> TEnumDataStorage<::some::valid::ns::ComplexUnion::Type>::names = {{
  "intValue",
  "opt_intValue",
  "stringValue",
  "opt_stringValue",
  "intValue2",
  "intValue3",
  "doubelValue",
  "boolValue",
  "union_list",
  "union_set",
  "union_map",
  "opt_union_map",
  "enum_field",
  "enum_container",
  "a_struct",
  "a_set_struct",
  "a_union",
  "opt_a_union",
  "a_union_list",
  "a_union_typedef",
  "a_union_typedef_list",
  "MyBinaryField",
  "MyBinaryField2",
  "MyBinaryListField4",
  "ref_field",
  "ref_field2",
  "excp_field",
  "MyCustomField",
}};

const std::array<::some::valid::ns::FloatUnion::Type, 2> TEnumDataStorage<::some::valid::ns::FloatUnion::Type>::values = {{
  type::floatSide,
  type::doubleSide,
}};
const std::array<folly::StringPiece, 2> TEnumDataStorage<::some::valid::ns::FloatUnion::Type>::names = {{
  "floatSide",
  "doubleSide",
}};

const std::array<folly::StringPiece, 0> TStructDataStorage<::some::valid::ns::Empty>::fields_names = {{
}};
const std::array<int16_t, 0> TStructDataStorage<::some::valid::ns::Empty>::fields_ids = {{
}};
const std::array<protocol::TType, 0> TStructDataStorage<::some::valid::ns::Empty>::fields_types = {{
}};

const std::array<folly::StringPiece, 1> TStructDataStorage<::some::valid::ns::ASimpleStruct>::fields_names = {{
  "boolField",
}};
const std::array<int16_t, 1> TStructDataStorage<::some::valid::ns::ASimpleStruct>::fields_ids = {{
  1,
}};
const std::array<protocol::TType, 1> TStructDataStorage<::some::valid::ns::ASimpleStruct>::fields_types = {{
  TType::T_I64,
}};

const std::array<folly::StringPiece, 1> TStructDataStorage<::some::valid::ns::ASimpleStructNoexcept>::fields_names = {{
  "boolField",
}};
const std::array<int16_t, 1> TStructDataStorage<::some::valid::ns::ASimpleStructNoexcept>::fields_ids = {{
  1,
}};
const std::array<protocol::TType, 1> TStructDataStorage<::some::valid::ns::ASimpleStructNoexcept>::fields_types = {{
  TType::T_I64,
}};

const std::array<folly::StringPiece, 11> TStructDataStorage<::some::valid::ns::MyStruct>::fields_names = {{
  "MyBoolField",
  "MyIntField",
  "MyStringField",
  "MyStringField2",
  "MyBinaryField",
  "MyBinaryField2",
  "MyBinaryField3",
  "MyBinaryListField4",
  "MyMapEnumAndInt",
  "MyCustomField",
  "MyOptCustomField",
}};
const std::array<int16_t, 11> TStructDataStorage<::some::valid::ns::MyStruct>::fields_ids = {{
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
}};
const std::array<protocol::TType, 11> TStructDataStorage<::some::valid::ns::MyStruct>::fields_types = {{
  TType::T_BOOL,
  TType::T_I64,
  TType::T_STRING,
  TType::T_STRING,
  TType::T_STRING,
  TType::T_STRING,
  TType::T_STRING,
  TType::T_LIST,
  TType::T_MAP,
  TType::T_STRING,
  TType::T_STRING,
}};

const std::array<folly::StringPiece, 2> TStructDataStorage<::some::valid::ns::SimpleUnion>::fields_names = {{
  "intValue",
  "stringValue",
}};
const std::array<int16_t, 2> TStructDataStorage<::some::valid::ns::SimpleUnion>::fields_ids = {{
  7,
  2,
}};
const std::array<protocol::TType, 2> TStructDataStorage<::some::valid::ns::SimpleUnion>::fields_types = {{
  TType::T_I64,
  TType::T_STRING,
}};

const std::array<folly::StringPiece, 28> TStructDataStorage<::some::valid::ns::ComplexUnion>::fields_names = {{
  "intValue",
  "opt_intValue",
  "stringValue",
  "opt_stringValue",
  "intValue2",
  "intValue3",
  "doubelValue",
  "boolValue",
  "union_list",
  "union_set",
  "union_map",
  "opt_union_map",
  "enum_field",
  "enum_container",
  "a_struct",
  "a_set_struct",
  "a_union",
  "opt_a_union",
  "a_union_list",
  "a_union_typedef",
  "a_union_typedef_list",
  "MyBinaryField",
  "MyBinaryField2",
  "MyBinaryListField4",
  "ref_field",
  "ref_field2",
  "excp_field",
  "MyCustomField",
}};
const std::array<int16_t, 28> TStructDataStorage<::some::valid::ns::ComplexUnion>::fields_ids = {{
  1,
  201,
  3,
  203,
  4,
  6,
  7,
  8,
  9,
  10,
  11,
  211,
  12,
  13,
  14,
  15,
  16,
  216,
  17,
  18,
  19,
  20,
  21,
  23,
  24,
  25,
  26,
  27,
}};
const std::array<protocol::TType, 28> TStructDataStorage<::some::valid::ns::ComplexUnion>::fields_types = {{
  TType::T_I64,
  TType::T_I64,
  TType::T_STRING,
  TType::T_STRING,
  TType::T_I16,
  TType::T_I32,
  TType::T_DOUBLE,
  TType::T_BOOL,
  TType::T_LIST,
  TType::T_SET,
  TType::T_MAP,
  TType::T_MAP,
  TType::T_I32,
  TType::T_LIST,
  TType::T_STRUCT,
  TType::T_SET,
  TType::T_STRUCT,
  TType::T_STRUCT,
  TType::T_LIST,
  TType::T_SET,
  TType::T_LIST,
  TType::T_STRING,
  TType::T_STRING,
  TType::T_LIST,
  TType::T_STRUCT,
  TType::T_STRUCT,
  TType::T_STRUCT,
  TType::T_STRING,
}};

const std::array<folly::StringPiece, 17> TStructDataStorage<::some::valid::ns::AnException>::fields_names = {{
  "code",
  "req_code",
  "message2",
  "req_message",
  "exception_list",
  "exception_set",
  "exception_map",
  "req_exception_map",
  "enum_field",
  "enum_container",
  "a_struct",
  "a_set_struct",
  "a_union_list",
  "union_typedef",
  "a_union_typedef_list",
  "MyCustomField",
  "MyOptCustomField",
}};
const std::array<int16_t, 17> TStructDataStorage<::some::valid::ns::AnException>::fields_ids = {{
  1,
  101,
  2,
  102,
  3,
  4,
  5,
  105,
  6,
  7,
  8,
  9,
  10,
  11,
  19,
  20,
  21,
}};
const std::array<protocol::TType, 17> TStructDataStorage<::some::valid::ns::AnException>::fields_types = {{
  TType::T_I32,
  TType::T_I32,
  TType::T_STRING,
  TType::T_STRING,
  TType::T_LIST,
  TType::T_SET,
  TType::T_MAP,
  TType::T_MAP,
  TType::T_I32,
  TType::T_LIST,
  TType::T_STRUCT,
  TType::T_SET,
  TType::T_LIST,
  TType::T_SET,
  TType::T_LIST,
  TType::T_STRING,
  TType::T_STRING,
}};

const std::array<folly::StringPiece, 3> TStructDataStorage<::some::valid::ns::AnotherException>::fields_names = {{
  "code",
  "req_code",
  "message",
}};
const std::array<int16_t, 3> TStructDataStorage<::some::valid::ns::AnotherException>::fields_ids = {{
  1,
  101,
  2,
}};
const std::array<protocol::TType, 3> TStructDataStorage<::some::valid::ns::AnotherException>::fields_types = {{
  TType::T_I32,
  TType::T_I32,
  TType::T_STRING,
}};

const std::array<folly::StringPiece, 46> TStructDataStorage<::some::valid::ns::containerStruct>::fields_names = {{
  "fieldA",
  "req_fieldA",
  "opt_fieldA",
  "fieldB",
  "req_fieldB",
  "opt_fieldB",
  "fieldC",
  "req_fieldC",
  "opt_fieldC",
  "fieldD",
  "fieldE",
  "req_fieldE",
  "opt_fieldE",
  "fieldF",
  "fieldG",
  "fieldH",
  "fieldI",
  "fieldJ",
  "fieldK",
  "fieldL",
  "fieldM",
  "fieldN",
  "fieldO",
  "fieldP",
  "fieldQ",
  "fieldR",
  "req_fieldR",
  "opt_fieldR",
  "fieldS",
  "fieldT",
  "fieldU",
  "fieldV",
  "req_fieldV",
  "opt_fieldV",
  "fieldW",
  "fieldX",
  "req_fieldX",
  "opt_fieldX",
  "fieldY",
  "fieldZ",
  "fieldAA",
  "fieldAB",
  "fieldAC",
  "fieldAD",
  "fieldAE",
  "fieldSD",
}};
const std::array<int16_t, 46> TStructDataStorage<::some::valid::ns::containerStruct>::fields_ids = {{
  1,
  101,
  201,
  2,
  102,
  202,
  3,
  103,
  203,
  4,
  5,
  105,
  205,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  118,
  218,
  19,
  21,
  22,
  23,
  123,
  223,
  24,
  25,
  125,
  225,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
}};
const std::array<protocol::TType, 46> TStructDataStorage<::some::valid::ns::containerStruct>::fields_types = {{
  TType::T_BOOL,
  TType::T_BOOL,
  TType::T_BOOL,
  TType::T_MAP,
  TType::T_MAP,
  TType::T_MAP,
  TType::T_SET,
  TType::T_SET,
  TType::T_SET,
  TType::T_STRING,
  TType::T_STRING,
  TType::T_STRING,
  TType::T_STRING,
  TType::T_LIST,
  TType::T_MAP,
  TType::T_LIST,
  TType::T_BOOL,
  TType::T_MAP,
  TType::T_LIST,
  TType::T_SET,
  TType::T_MAP,
  TType::T_I32,
  TType::T_LIST,
  TType::T_LIST,
  TType::T_I32,
  TType::T_I32,
  TType::T_I32,
  TType::T_I32,
  TType::T_I32,
  TType::T_LIST,
  TType::T_LIST,
  TType::T_STRUCT,
  TType::T_STRUCT,
  TType::T_STRUCT,
  TType::T_SET,
  TType::T_STRUCT,
  TType::T_STRUCT,
  TType::T_STRUCT,
  TType::T_LIST,
  TType::T_SET,
  TType::T_LIST,
  TType::T_MAP,
  TType::T_I32,
  TType::T_I32,
  TType::T_MAP,
  TType::T_STRING,
}};

const std::array<folly::StringPiece, 4> TStructDataStorage<::some::valid::ns::MyIncludedStruct>::fields_names = {{
  "MyIncludedInt",
  "MyIncludedStruct",
  "ARefField",
  "ARequiredField",
}};
const std::array<int16_t, 4> TStructDataStorage<::some::valid::ns::MyIncludedStruct>::fields_ids = {{
  1,
  2,
  3,
  4,
}};
const std::array<protocol::TType, 4> TStructDataStorage<::some::valid::ns::MyIncludedStruct>::fields_types = {{
  TType::T_I64,
  TType::T_STRUCT,
  TType::T_STRUCT,
  TType::T_STRUCT,
}};

const std::array<folly::StringPiece, 40> TStructDataStorage<::some::valid::ns::AnnotatedStruct>::fields_names = {{
  "no_annotation",
  "cpp_unique_ref",
  "cpp2_unique_ref",
  "container_with_ref",
  "req_cpp_unique_ref",
  "req_cpp2_unique_ref",
  "req_container_with_ref",
  "opt_cpp_unique_ref",
  "opt_cpp2_unique_ref",
  "opt_container_with_ref",
  "ref_type_unique",
  "ref_type_shared",
  "ref_type_const",
  "req_ref_type_shared",
  "req_ref_type_const",
  "req_ref_type_unique",
  "opt_ref_type_const",
  "opt_ref_type_unique",
  "opt_ref_type_shared",
  "base_type",
  "list_type",
  "set_type",
  "map_type",
  "map_struct_type",
  "iobuf_type",
  "iobuf_ptr",
  "list_i32_template",
  "list_string_template",
  "set_template",
  "map_template",
  "typedef_list_template",
  "typedef_deque_template",
  "typedef_set_template",
  "typedef_map_template",
  "indirection_a",
  "indirection_b",
  "indirection_c",
  "iobuf_type_val",
  "iobuf_ptr_val",
  "struct_struct",
}};
const std::array<int16_t, 40> TStructDataStorage<::some::valid::ns::AnnotatedStruct>::fields_ids = {{
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
}};
const std::array<protocol::TType, 40> TStructDataStorage<::some::valid::ns::AnnotatedStruct>::fields_types = {{
  TType::T_STRUCT,
  TType::T_STRUCT,
  TType::T_STRUCT,
  TType::T_MAP,
  TType::T_STRUCT,
  TType::T_STRUCT,
  TType::T_LIST,
  TType::T_STRUCT,
  TType::T_STRUCT,
  TType::T_SET,
  TType::T_STRUCT,
  TType::T_STRUCT,
  TType::T_MAP,
  TType::T_STRUCT,
  TType::T_STRUCT,
  TType::T_LIST,
  TType::T_STRUCT,
  TType::T_STRUCT,
  TType::T_SET,
  TType::T_I32,
  TType::T_LIST,
  TType::T_SET,
  TType::T_MAP,
  TType::T_MAP,
  TType::T_STRING,
  TType::T_STRING,
  TType::T_LIST,
  TType::T_LIST,
  TType::T_SET,
  TType::T_MAP,
  TType::T_LIST,
  TType::T_LIST,
  TType::T_SET,
  TType::T_MAP,
  TType::T_I64,
  TType::T_LIST,
  TType::T_SET,
  TType::T_STRING,
  TType::T_STRING,
  TType::T_STRUCT,
}};

const std::array<folly::StringPiece, 2> TStructDataStorage<::some::valid::ns::ComplexContainerStruct>::fields_names = {{
  "map_of_iobufs",
  "map_of_iobuf_ptrs",
}};
const std::array<int16_t, 2> TStructDataStorage<::some::valid::ns::ComplexContainerStruct>::fields_ids = {{
  1,
  2,
}};
const std::array<protocol::TType, 2> TStructDataStorage<::some::valid::ns::ComplexContainerStruct>::fields_types = {{
  TType::T_MAP,
  TType::T_MAP,
}};

const std::array<folly::StringPiece, 2> TStructDataStorage<::some::valid::ns::FloatStruct>::fields_names = {{
  "floatField",
  "doubleField",
}};
const std::array<int16_t, 2> TStructDataStorage<::some::valid::ns::FloatStruct>::fields_ids = {{
  1,
  2,
}};
const std::array<protocol::TType, 2> TStructDataStorage<::some::valid::ns::FloatStruct>::fields_types = {{
  TType::T_FLOAT,
  TType::T_DOUBLE,
}};

const std::array<folly::StringPiece, 2> TStructDataStorage<::some::valid::ns::FloatUnion>::fields_names = {{
  "floatSide",
  "doubleSide",
}};
const std::array<int16_t, 2> TStructDataStorage<::some::valid::ns::FloatUnion>::fields_ids = {{
  1,
  2,
}};
const std::array<protocol::TType, 2> TStructDataStorage<::some::valid::ns::FloatUnion>::fields_types = {{
  TType::T_FLOAT,
  TType::T_DOUBLE,
}};

const std::array<folly::StringPiece, 1> TStructDataStorage<::some::valid::ns::AllRequiredNoExceptMoveCtrStruct>::fields_names = {{
  "intField",
}};
const std::array<int16_t, 1> TStructDataStorage<::some::valid::ns::AllRequiredNoExceptMoveCtrStruct>::fields_ids = {{
  1,
}};
const std::array<protocol::TType, 1> TStructDataStorage<::some::valid::ns::AllRequiredNoExceptMoveCtrStruct>::fields_types = {{
  TType::T_I64,
}};

} // namespace thrift
} // namespace apache
