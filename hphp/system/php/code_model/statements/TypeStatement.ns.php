<?php
// Copyright 2004-present Facebook. All Rights Reserved.
// This file is @generated by
// fbcode/hphp/facebook/tools/code_model/Generate.sh

namespace HH\CodeModel {

/**
 * [ << attributes >> ]
 * [modifiers] class|interface|trait name [typeParameters] [extends baseClass]
 * [implements interfaces]
 *   block
 */
class TypeStatement /*implements ITypeStatement*/ {
  use Statement;
  use Node;

  private /*?Vector<IAttribute>*/ $attributes;
  private /*?Vector<IModifier>*/ $modifiers;
  private /*?TypeKind*/ $kind;
  private /*?string*/ $name;
  private /*?Vector<ITypeParameterExpression>*/ $typeParameters;
  private /*?ITypeExpression*/ $baseClass;
  private /*?Vector<ITypeExpression>*/ $interfaces;
  private /*?IBlockStatement*/ $block;

  /**
   * [ << attributes >> ]
   * [modifiers] class|interface|trait name [typeParameters] [extends baseClass]
   * [implements interfaces]
   *   block
   */
  public function getAttributes() /*: Vector<IAttribute>*/ {
    if ($this->attributes === null) {
      $this->attributes = Vector {};
    }
    return $this->attributes;
  }
  /**
   * [ << attributes >> ]
   * [modifiers] class|interface|trait name [typeParameters] [extends baseClass]
   * [implements interfaces]
   *   block
   */
  public function setAttributes(/*Vector<IAttribute>*/ $value)
     /*: this*/ {
    $this->attributes = $value;
    return $this;
  }

  /**
   * [ << attributes >> ]
   * [modifiers] class|interface|trait name [typeParameters] [extends baseClass]
   * [implements interfaces]
   *   block
   */
  public function getModifiers() /*: Vector<IModifier>*/ {
    if ($this->modifiers === null) {
      $this->modifiers = Vector {};
    }
    return $this->modifiers;
  }
  /**
   * [ << attributes >> ]
   * [modifiers] class|interface|trait name [typeParameters] [extends baseClass]
   * [implements interfaces]
   *   block
   */
  public function setModifiers(/*Vector<IModifier>*/ $value)
     /*: this*/ {
    $this->modifiers = $value;
    return $this;
  }

  /**
   * [ << attributes >> ]
   * [modifiers] class|interface|trait name [typeParameters] [extends baseClass]
   * [implements interfaces]
   *   block
   */
  public function getKind() /*: TypeKind*/ {
    if ($this->kind === null) {
      throw new \Exception("Kind is not initialized");
    }
    return $this->kind;
  }
  /**
   * [ << attributes >> ]
   * [modifiers] class|interface|trait name [typeParameters] [extends baseClass]
   * [implements interfaces]
   *   block
   */
  public function setKind(/*TypeKind*/ $value) /*: this*/ {
    $this->kind = $value;
    return $this;
  }

  /**
   * [ << attributes >> ]
   * [modifiers] class|interface|trait name [typeParameters] [extends baseClass]
   * [implements interfaces]
   *   block
   */
  public function getName() /*: string*/ {
    if ($this->name === null) {
      throw new \Exception("Name is not initialized");
    }
    return $this->name;
  }
  /**
   * [ << attributes >> ]
   * [modifiers] class|interface|trait name [typeParameters] [extends baseClass]
   * [implements interfaces]
   *   block
   */
  public function setName(/*string*/ $value) /*: this*/ {
    $this->name = $value;
    return $this;
  }

  /**
   * [ << attributes >> ]
   * [modifiers] class|interface|trait name [typeParameters] [extends baseClass]
   * [implements interfaces]
   *   block
   */
  public function getTypeParameters() /*: Vector<ITypeParameterExpression>*/ {
    if ($this->typeParameters === null) {
      $this->typeParameters = Vector {};
    }
    return $this->typeParameters;
  }
  /**
   * [ << attributes >> ]
   * [modifiers] class|interface|trait name [typeParameters] [extends baseClass]
   * [implements interfaces]
   *   block
   */
  public function setTypeParameters(/*Vector<ITypeParameterExpression>*/ $value)
     /*: this*/ {
    $this->typeParameters = $value;
    return $this;
  }

  /**
   * [ << attributes >> ]
   * [modifiers] class|interface|trait name [typeParameters] [extends baseClass]
   * [implements interfaces]
   *   block
   */
  public function getBaseClass() /*: ?ITypeExpression*/ {
    return $this->baseClass;
  }
  /**
   * [ << attributes >> ]
   * [modifiers] class|interface|trait name [typeParameters] [extends baseClass]
   * [implements interfaces]
   *   block
   */
  public function setBaseClass(/*?ITypeExpression*/ $value) /*: this*/ {
    $this->baseClass = $value;
    return $this;
  }

  /**
   * [ << attributes >> ]
   * [modifiers] class|interface|trait name [typeParameters] [extends baseClass]
   * [implements interfaces]
   *   block
   */
  public function getInterfaces() /*: Vector<ITypeExpression>*/ {
    if ($this->interfaces === null) {
      $this->interfaces = Vector {};
    }
    return $this->interfaces;
  }
  /**
   * [ << attributes >> ]
   * [modifiers] class|interface|trait name [typeParameters] [extends baseClass]
   * [implements interfaces]
   *   block
   */
  public function setInterfaces(/*Vector<ITypeExpression>*/ $value)
     /*: this*/ {
    $this->interfaces = $value;
    return $this;
  }

  /**
   * [ << attributes >> ]
   * [modifiers] class|interface|trait name [typeParameters] [extends baseClass]
   * [implements interfaces]
   *   block
   */
  public function getBlock() /*: IBlockStatement*/ {
    if ($this->block === null) {
      throw new \Exception("Block is not initialized");
    }
    return $this->block;
  }
  /**
   * [ << attributes >> ]
   * [modifiers] class|interface|trait name [typeParameters] [extends baseClass]
   * [implements interfaces]
   *   block
   */
  public function setBlock(/*IBlockStatement*/ $value) /*: this*/ {
    $this->block = $value;
    return $this;
  }

  /**
   * Returns $visitor->visitTypeStatement($this) if
   * such a method exists on $visitor.
   * Otherwise returns $visitor->visitStatement($this) if
   * such a method exists on $visitor.
   * Otherwise returns $visitor->visitNode($this) if
   */
  public function accept(/*mixed*/ $visitor) /*: mixed*/ {
    if (method_exists($visitor, "visitTypeStatement")) {
      // UNSAFE
      return $visitor->visitTypeStatement($this);
    } else if (method_exists($visitor, "visitStatement")) {
      // UNSAFE
      return $visitor->visitStatement($this);
    } else {
      return $visitor->visitNode($this);
    }
  }

  /**
   * Yields a list of nodes that are children of this node.
   * A node has exactly one parent, so doing a depth
   * first traversal of a node graph using getChildren will
   * traverse a spanning tree.
   */
  public function getChildren() /*: Continuation<INode>*/ {
    if ($this->attributes !== null) {
      foreach ($this->attributes as $elem) {
        yield $elem;
      }
    }
    if ($this->modifiers !== null) {
      foreach ($this->modifiers as $elem) {
        yield $elem;
      }
    }
    if ($this->typeParameters !== null) {
      foreach ($this->typeParameters as $elem) {
        yield $elem;
      }
    }
    if ($this->baseClass !== null) {
      yield $this->baseClass;
    }
    if ($this->interfaces !== null) {
      foreach ($this->interfaces as $elem) {
        yield $elem;
      }
    }
    if ($this->block !== null) {
      yield $this->block;
    }
  }
}
}
