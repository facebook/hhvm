// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package module

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	thrift0 "thrift/annotation/thrift"
	patch1 "thrift/lib/thrift/patch"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var _ = thrift0.GoUnusedProtection__
var _ = patch1.GoUnusedProtection__
var GoUnusedProtection__ int;

// Attributes:
//  - Data1
//  - Data2
type MyData struct {
  Data1 string `thrift:"data1,1" db:"data1" json:"data1"`
  Data2 int32 `thrift:"data2,2" db:"data2" json:"data2"`
}

func NewMyData() *MyData {
  return &MyData{}
}


func (p *MyData) GetData1() string {
  return p.Data1
}

func (p *MyData) GetData2() int32 {
  return p.Data2
}
type MyDataBuilder struct {
  obj *MyData
}

func NewMyDataBuilder() *MyDataBuilder{
  return &MyDataBuilder{
    obj: NewMyData(),
  }
}

func (p MyDataBuilder) Emit() *MyData{
  return &MyData{
    Data1: p.obj.Data1,
    Data2: p.obj.Data2,
  }
}

func (m *MyDataBuilder) Data1(data1 string) *MyDataBuilder {
  m.obj.Data1 = data1
  return m
}

func (m *MyDataBuilder) Data2(data2 int32) *MyDataBuilder {
  m.obj.Data2 = data2
  return m
}

func (m *MyData) SetData1(data1 string) *MyData {
  m.Data1 = data1
  return m
}

func (m *MyData) SetData2(data2 int32) *MyData {
  m.Data2 = data2
  return m
}

func (p *MyData) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyData)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Data1 = v
  }
  return nil
}

func (p *MyData)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Data2 = v
  }
  return nil
}

func (p *MyData) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyData) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("data1", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:data1: ", p), err) }
  if err := oprot.WriteString(string(p.Data1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:data1: ", p), err) }
  return err
}

func (p *MyData) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("data2", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data2: ", p), err) }
  if err := oprot.WriteI32(int32(p.Data2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data2 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data2: ", p), err) }
  return err
}

func (p *MyData) String() string {
  if p == nil {
    return "<nil>"
  }

  data1Val := fmt.Sprintf("%v", p.Data1)
  data2Val := fmt.Sprintf("%v", p.Data2)
  return fmt.Sprintf("MyData({Data1:%s Data2:%s})", data1Val, data2Val)
}

// Attributes:
//  - InnerOption
type InnerUnion struct {
  InnerOption []byte `thrift:"innerOption,1,optional" db:"innerOption" json:"innerOption,omitempty"`
}

func NewInnerUnion() *InnerUnion {
  return &InnerUnion{}
}

var InnerUnion_InnerOption_DEFAULT []byte

func (p *InnerUnion) GetInnerOption() []byte {
  return p.InnerOption
}
func (p *InnerUnion) IsSetInnerOption() bool {
  return p != nil && p.InnerOption != nil
}

type InnerUnionBuilder struct {
  obj *InnerUnion
}

func NewInnerUnionBuilder() *InnerUnionBuilder{
  return &InnerUnionBuilder{
    obj: NewInnerUnion(),
  }
}

func (p InnerUnionBuilder) Emit() *InnerUnion{
  return &InnerUnion{
    InnerOption: p.obj.InnerOption,
  }
}

func (i *InnerUnionBuilder) InnerOption(innerOption []byte) *InnerUnionBuilder {
  i.obj.InnerOption = innerOption
  return i
}

func (i *InnerUnion) SetInnerOption(innerOption []byte) *InnerUnion {
  i.InnerOption = innerOption
  return i
}

func (p *InnerUnion) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InnerUnion)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.InnerOption = v
  }
  return nil
}

func (p *InnerUnion) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("InnerUnion"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InnerUnion) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetInnerOption() {
    if err := oprot.WriteFieldBegin("innerOption", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:innerOption: ", p), err) }
    if err := oprot.WriteBinary(p.InnerOption); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.innerOption (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:innerOption: ", p), err) }
  }
  return err
}

func (p *InnerUnion) String() string {
  if p == nil {
    return "<nil>"
  }

  innerOptionVal := fmt.Sprintf("%v", p.InnerOption)
  return fmt.Sprintf("InnerUnion({InnerOption:%s})", innerOptionVal)
}

// Attributes:
//  - Option1
//  - Option2
//  - Option3
type MyUnion struct {
  Option1 *string `thrift:"option1,1,optional" db:"option1" json:"option1,omitempty"`
  Option2 *int32 `thrift:"option2,2,optional" db:"option2" json:"option2,omitempty"`
  Option3 *InnerUnion `thrift:"option3,3,optional" db:"option3" json:"option3,omitempty"`
}

func NewMyUnion() *MyUnion {
  return &MyUnion{}
}

var MyUnion_Option1_DEFAULT string
func (p *MyUnion) GetOption1() string {
  if !p.IsSetOption1() {
    return MyUnion_Option1_DEFAULT
  }
return *p.Option1
}
var MyUnion_Option2_DEFAULT int32
func (p *MyUnion) GetOption2() int32 {
  if !p.IsSetOption2() {
    return MyUnion_Option2_DEFAULT
  }
return *p.Option2
}
var MyUnion_Option3_DEFAULT *InnerUnion
func (p *MyUnion) GetOption3() *InnerUnion {
  if !p.IsSetOption3() {
    return MyUnion_Option3_DEFAULT
  }
return p.Option3
}
func (p *MyUnion) CountSetFieldsMyUnion() int {
  count := 0
  if (p.IsSetOption1()) {
    count++
  }
  if (p.IsSetOption2()) {
    count++
  }
  if (p.IsSetOption3()) {
    count++
  }
  return count

}

func (p *MyUnion) IsSetOption1() bool {
  return p != nil && p.Option1 != nil
}

func (p *MyUnion) IsSetOption2() bool {
  return p != nil && p.Option2 != nil
}

func (p *MyUnion) IsSetOption3() bool {
  return p != nil && p.Option3 != nil
}

type MyUnionBuilder struct {
  obj *MyUnion
}

func NewMyUnionBuilder() *MyUnionBuilder{
  return &MyUnionBuilder{
    obj: NewMyUnion(),
  }
}

func (p MyUnionBuilder) Emit() *MyUnion{
  return &MyUnion{
    Option1: p.obj.Option1,
    Option2: p.obj.Option2,
    Option3: p.obj.Option3,
  }
}

func (m *MyUnionBuilder) Option1(option1 *string) *MyUnionBuilder {
  m.obj.Option1 = option1
  return m
}

func (m *MyUnionBuilder) Option2(option2 *int32) *MyUnionBuilder {
  m.obj.Option2 = option2
  return m
}

func (m *MyUnionBuilder) Option3(option3 *InnerUnion) *MyUnionBuilder {
  m.obj.Option3 = option3
  return m
}

func (m *MyUnion) SetOption1(option1 *string) *MyUnion {
  m.Option1 = option1
  return m
}

func (m *MyUnion) SetOption2(option2 *int32) *MyUnion {
  m.Option2 = option2
  return m
}

func (m *MyUnion) SetOption3(option3 *InnerUnion) *MyUnion {
  m.Option3 = option3
  return m
}

func (p *MyUnion) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyUnion)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Option1 = &v
  }
  return nil
}

func (p *MyUnion)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Option2 = &v
  }
  return nil
}

func (p *MyUnion)  ReadField3(iprot thrift.Protocol) error {
  p.Option3 = NewInnerUnion()
  if err := p.Option3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Option3), err)
  }
  return nil
}

func (p *MyUnion) Write(oprot thrift.Protocol) error {
  if c := p.CountSetFieldsMyUnion(); c > 1 {
    return fmt.Errorf("%T write union: no more than one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin("MyUnion"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyUnion) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetOption1() {
    if err := oprot.WriteFieldBegin("option1", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:option1: ", p), err) }
    if err := oprot.WriteString(string(*p.Option1)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.option1 (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:option1: ", p), err) }
  }
  return err
}

func (p *MyUnion) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetOption2() {
    if err := oprot.WriteFieldBegin("option2", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:option2: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Option2)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.option2 (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:option2: ", p), err) }
  }
  return err
}

func (p *MyUnion) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetOption3() {
    if err := oprot.WriteFieldBegin("option3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:option3: ", p), err) }
    if err := p.Option3.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Option3), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:option3: ", p), err) }
  }
  return err
}

func (p *MyUnion) String() string {
  if p == nil {
    return "<nil>"
  }

  var option1Val string
  if p.Option1 == nil {
    option1Val = "<nil>"
  } else {
    option1Val = fmt.Sprintf("%v", *p.Option1)
  }
  var option2Val string
  if p.Option2 == nil {
    option2Val = "<nil>"
  } else {
    option2Val = fmt.Sprintf("%v", *p.Option2)
  }
  var option3Val string
  if p.Option3 == nil {
    option3Val = "<nil>"
  } else {
    option3Val = fmt.Sprintf("%v", p.Option3)
  }
  return fmt.Sprintf("MyUnion({Option1:%s Option2:%s Option3:%s})", option1Val, option2Val, option3Val)
}

// Attributes:
//  - BoolVal
//  - ByteVal
//  - I16Val
//  - I32Val
//  - I64Val
//  - FloatVal
//  - DoubleVal
//  - StringVal
//  - BinaryVal
//  - StructVal
//  - OptBoolVal
//  - OptByteVal
//  - OptI16Val
//  - OptI32Val
//  - OptI64Val
//  - OptFloatVal
//  - OptDoubleVal
//  - OptStringVal
//  - OptBinaryVal
//  - OptStructVal
//  - OptListVal
//  - OptSetVal
//  - OptMapVal
//  - UnionVal
type MyStruct struct {
  BoolVal bool `thrift:"boolVal,1" db:"boolVal" json:"boolVal"`
  ByteVal int8 `thrift:"byteVal,2" db:"byteVal" json:"byteVal"`
  I16Val int16 `thrift:"i16Val,3" db:"i16Val" json:"i16Val"`
  I32Val int32 `thrift:"i32Val,4" db:"i32Val" json:"i32Val"`
  I64Val int64 `thrift:"i64Val,5" db:"i64Val" json:"i64Val"`
  FloatVal float32 `thrift:"floatVal,6" db:"floatVal" json:"floatVal"`
  DoubleVal float64 `thrift:"doubleVal,7" db:"doubleVal" json:"doubleVal"`
  StringVal string `thrift:"stringVal,8" db:"stringVal" json:"stringVal"`
  BinaryVal []byte `thrift:"binaryVal,9" db:"binaryVal" json:"binaryVal"`
  StructVal *MyData `thrift:"structVal,10" db:"structVal" json:"structVal"`
  OptBoolVal *bool `thrift:"optBoolVal,11,optional" db:"optBoolVal" json:"optBoolVal,omitempty"`
  OptByteVal *int8 `thrift:"optByteVal,12,optional" db:"optByteVal" json:"optByteVal,omitempty"`
  OptI16Val *int16 `thrift:"optI16Val,13,optional" db:"optI16Val" json:"optI16Val,omitempty"`
  OptI32Val *int32 `thrift:"optI32Val,14,optional" db:"optI32Val" json:"optI32Val,omitempty"`
  OptI64Val *int64 `thrift:"optI64Val,15,optional" db:"optI64Val" json:"optI64Val,omitempty"`
  OptFloatVal *float32 `thrift:"optFloatVal,16,optional" db:"optFloatVal" json:"optFloatVal,omitempty"`
  OptDoubleVal *float64 `thrift:"optDoubleVal,17,optional" db:"optDoubleVal" json:"optDoubleVal,omitempty"`
  OptStringVal *string `thrift:"optStringVal,18,optional" db:"optStringVal" json:"optStringVal,omitempty"`
  OptBinaryVal []byte `thrift:"optBinaryVal,19,optional" db:"optBinaryVal" json:"optBinaryVal,omitempty"`
  OptStructVal *MyData `thrift:"optStructVal,20,optional" db:"optStructVal" json:"optStructVal,omitempty"`
  OptListVal []int16 `thrift:"optListVal,21,optional" db:"optListVal" json:"optListVal,omitempty"`
  OptSetVal []string `thrift:"optSetVal,22,optional" db:"optSetVal" json:"optSetVal,omitempty"`
  OptMapVal map[string]string `thrift:"optMapVal,23,optional" db:"optMapVal" json:"optMapVal,omitempty"`
  // unused fields # 24 to 29
  UnionVal *MyUnion `thrift:"unionVal,30" db:"unionVal" json:"unionVal"`
}

func NewMyStruct() *MyStruct {
  return &MyStruct{
    StructVal: NewMyData(),
  }
}


func (p *MyStruct) GetBoolVal() bool {
  return p.BoolVal
}

func (p *MyStruct) GetByteVal() int8 {
  return p.ByteVal
}

func (p *MyStruct) GetI16Val() int16 {
  return p.I16Val
}

func (p *MyStruct) GetI32Val() int32 {
  return p.I32Val
}

func (p *MyStruct) GetI64Val() int64 {
  return p.I64Val
}

func (p *MyStruct) GetFloatVal() float32 {
  return p.FloatVal
}

func (p *MyStruct) GetDoubleVal() float64 {
  return p.DoubleVal
}

func (p *MyStruct) GetStringVal() string {
  return p.StringVal
}

func (p *MyStruct) GetBinaryVal() []byte {
  return p.BinaryVal
}
var MyStruct_StructVal_DEFAULT *MyData
func (p *MyStruct) GetStructVal() *MyData {
  if !p.IsSetStructVal() {
    return MyStruct_StructVal_DEFAULT
  }
return p.StructVal
}
var MyStruct_OptBoolVal_DEFAULT bool
func (p *MyStruct) GetOptBoolVal() bool {
  if !p.IsSetOptBoolVal() {
    return MyStruct_OptBoolVal_DEFAULT
  }
return *p.OptBoolVal
}
var MyStruct_OptByteVal_DEFAULT int8
func (p *MyStruct) GetOptByteVal() int8 {
  if !p.IsSetOptByteVal() {
    return MyStruct_OptByteVal_DEFAULT
  }
return *p.OptByteVal
}
var MyStruct_OptI16Val_DEFAULT int16
func (p *MyStruct) GetOptI16Val() int16 {
  if !p.IsSetOptI16Val() {
    return MyStruct_OptI16Val_DEFAULT
  }
return *p.OptI16Val
}
var MyStruct_OptI32Val_DEFAULT int32
func (p *MyStruct) GetOptI32Val() int32 {
  if !p.IsSetOptI32Val() {
    return MyStruct_OptI32Val_DEFAULT
  }
return *p.OptI32Val
}
var MyStruct_OptI64Val_DEFAULT int64
func (p *MyStruct) GetOptI64Val() int64 {
  if !p.IsSetOptI64Val() {
    return MyStruct_OptI64Val_DEFAULT
  }
return *p.OptI64Val
}
var MyStruct_OptFloatVal_DEFAULT float32
func (p *MyStruct) GetOptFloatVal() float32 {
  if !p.IsSetOptFloatVal() {
    return MyStruct_OptFloatVal_DEFAULT
  }
return *p.OptFloatVal
}
var MyStruct_OptDoubleVal_DEFAULT float64
func (p *MyStruct) GetOptDoubleVal() float64 {
  if !p.IsSetOptDoubleVal() {
    return MyStruct_OptDoubleVal_DEFAULT
  }
return *p.OptDoubleVal
}
var MyStruct_OptStringVal_DEFAULT string
func (p *MyStruct) GetOptStringVal() string {
  if !p.IsSetOptStringVal() {
    return MyStruct_OptStringVal_DEFAULT
  }
return *p.OptStringVal
}
var MyStruct_OptBinaryVal_DEFAULT []byte

func (p *MyStruct) GetOptBinaryVal() []byte {
  return p.OptBinaryVal
}
var MyStruct_OptStructVal_DEFAULT *MyData
func (p *MyStruct) GetOptStructVal() *MyData {
  if !p.IsSetOptStructVal() {
    return MyStruct_OptStructVal_DEFAULT
  }
return p.OptStructVal
}
var MyStruct_OptListVal_DEFAULT []int16

func (p *MyStruct) GetOptListVal() []int16 {
  return p.OptListVal
}
var MyStruct_OptSetVal_DEFAULT []string

func (p *MyStruct) GetOptSetVal() []string {
  return p.OptSetVal
}
var MyStruct_OptMapVal_DEFAULT map[string]string

func (p *MyStruct) GetOptMapVal() map[string]string {
  return p.OptMapVal
}
var MyStruct_UnionVal_DEFAULT *MyUnion
func (p *MyStruct) GetUnionVal() *MyUnion {
  if !p.IsSetUnionVal() {
    return MyStruct_UnionVal_DEFAULT
  }
return p.UnionVal
}
func (p *MyStruct) IsSetStructVal() bool {
  return p != nil && p.StructVal != nil
}

func (p *MyStruct) IsSetOptBoolVal() bool {
  return p != nil && p.OptBoolVal != nil
}

func (p *MyStruct) IsSetOptByteVal() bool {
  return p != nil && p.OptByteVal != nil
}

func (p *MyStruct) IsSetOptI16Val() bool {
  return p != nil && p.OptI16Val != nil
}

func (p *MyStruct) IsSetOptI32Val() bool {
  return p != nil && p.OptI32Val != nil
}

func (p *MyStruct) IsSetOptI64Val() bool {
  return p != nil && p.OptI64Val != nil
}

func (p *MyStruct) IsSetOptFloatVal() bool {
  return p != nil && p.OptFloatVal != nil
}

func (p *MyStruct) IsSetOptDoubleVal() bool {
  return p != nil && p.OptDoubleVal != nil
}

func (p *MyStruct) IsSetOptStringVal() bool {
  return p != nil && p.OptStringVal != nil
}

func (p *MyStruct) IsSetOptBinaryVal() bool {
  return p != nil && p.OptBinaryVal != nil
}

func (p *MyStruct) IsSetOptStructVal() bool {
  return p != nil && p.OptStructVal != nil
}

func (p *MyStruct) IsSetOptListVal() bool {
  return p != nil && p.OptListVal != nil
}

func (p *MyStruct) IsSetOptSetVal() bool {
  return p != nil && p.OptSetVal != nil
}

func (p *MyStruct) IsSetOptMapVal() bool {
  return p != nil && p.OptMapVal != nil
}

func (p *MyStruct) IsSetUnionVal() bool {
  return p != nil && p.UnionVal != nil
}

type MyStructBuilder struct {
  obj *MyStruct
}

func NewMyStructBuilder() *MyStructBuilder{
  return &MyStructBuilder{
    obj: NewMyStruct(),
  }
}

func (p MyStructBuilder) Emit() *MyStruct{
  return &MyStruct{
    BoolVal: p.obj.BoolVal,
    ByteVal: p.obj.ByteVal,
    I16Val: p.obj.I16Val,
    I32Val: p.obj.I32Val,
    I64Val: p.obj.I64Val,
    FloatVal: p.obj.FloatVal,
    DoubleVal: p.obj.DoubleVal,
    StringVal: p.obj.StringVal,
    BinaryVal: p.obj.BinaryVal,
    StructVal: p.obj.StructVal,
    OptBoolVal: p.obj.OptBoolVal,
    OptByteVal: p.obj.OptByteVal,
    OptI16Val: p.obj.OptI16Val,
    OptI32Val: p.obj.OptI32Val,
    OptI64Val: p.obj.OptI64Val,
    OptFloatVal: p.obj.OptFloatVal,
    OptDoubleVal: p.obj.OptDoubleVal,
    OptStringVal: p.obj.OptStringVal,
    OptBinaryVal: p.obj.OptBinaryVal,
    OptStructVal: p.obj.OptStructVal,
    OptListVal: p.obj.OptListVal,
    OptSetVal: p.obj.OptSetVal,
    OptMapVal: p.obj.OptMapVal,
    UnionVal: p.obj.UnionVal,
  }
}

func (m *MyStructBuilder) BoolVal(boolVal bool) *MyStructBuilder {
  m.obj.BoolVal = boolVal
  return m
}

func (m *MyStructBuilder) ByteVal(byteVal int8) *MyStructBuilder {
  m.obj.ByteVal = byteVal
  return m
}

func (m *MyStructBuilder) I16Val(i16Val int16) *MyStructBuilder {
  m.obj.I16Val = i16Val
  return m
}

func (m *MyStructBuilder) I32Val(i32Val int32) *MyStructBuilder {
  m.obj.I32Val = i32Val
  return m
}

func (m *MyStructBuilder) I64Val(i64Val int64) *MyStructBuilder {
  m.obj.I64Val = i64Val
  return m
}

func (m *MyStructBuilder) FloatVal(floatVal float32) *MyStructBuilder {
  m.obj.FloatVal = floatVal
  return m
}

func (m *MyStructBuilder) DoubleVal(doubleVal float64) *MyStructBuilder {
  m.obj.DoubleVal = doubleVal
  return m
}

func (m *MyStructBuilder) StringVal(stringVal string) *MyStructBuilder {
  m.obj.StringVal = stringVal
  return m
}

func (m *MyStructBuilder) BinaryVal(binaryVal []byte) *MyStructBuilder {
  m.obj.BinaryVal = binaryVal
  return m
}

func (m *MyStructBuilder) StructVal(structVal *MyData) *MyStructBuilder {
  m.obj.StructVal = structVal
  return m
}

func (m *MyStructBuilder) OptBoolVal(optBoolVal *bool) *MyStructBuilder {
  m.obj.OptBoolVal = optBoolVal
  return m
}

func (m *MyStructBuilder) OptByteVal(optByteVal *int8) *MyStructBuilder {
  m.obj.OptByteVal = optByteVal
  return m
}

func (m *MyStructBuilder) OptI16Val(optI16Val *int16) *MyStructBuilder {
  m.obj.OptI16Val = optI16Val
  return m
}

func (m *MyStructBuilder) OptI32Val(optI32Val *int32) *MyStructBuilder {
  m.obj.OptI32Val = optI32Val
  return m
}

func (m *MyStructBuilder) OptI64Val(optI64Val *int64) *MyStructBuilder {
  m.obj.OptI64Val = optI64Val
  return m
}

func (m *MyStructBuilder) OptFloatVal(optFloatVal *float32) *MyStructBuilder {
  m.obj.OptFloatVal = optFloatVal
  return m
}

func (m *MyStructBuilder) OptDoubleVal(optDoubleVal *float64) *MyStructBuilder {
  m.obj.OptDoubleVal = optDoubleVal
  return m
}

func (m *MyStructBuilder) OptStringVal(optStringVal *string) *MyStructBuilder {
  m.obj.OptStringVal = optStringVal
  return m
}

func (m *MyStructBuilder) OptBinaryVal(optBinaryVal []byte) *MyStructBuilder {
  m.obj.OptBinaryVal = optBinaryVal
  return m
}

func (m *MyStructBuilder) OptStructVal(optStructVal *MyData) *MyStructBuilder {
  m.obj.OptStructVal = optStructVal
  return m
}

func (m *MyStructBuilder) OptListVal(optListVal []int16) *MyStructBuilder {
  m.obj.OptListVal = optListVal
  return m
}

func (m *MyStructBuilder) OptSetVal(optSetVal []string) *MyStructBuilder {
  m.obj.OptSetVal = optSetVal
  return m
}

func (m *MyStructBuilder) OptMapVal(optMapVal map[string]string) *MyStructBuilder {
  m.obj.OptMapVal = optMapVal
  return m
}

func (m *MyStructBuilder) UnionVal(unionVal *MyUnion) *MyStructBuilder {
  m.obj.UnionVal = unionVal
  return m
}

func (m *MyStruct) SetBoolVal(boolVal bool) *MyStruct {
  m.BoolVal = boolVal
  return m
}

func (m *MyStruct) SetByteVal(byteVal int8) *MyStruct {
  m.ByteVal = byteVal
  return m
}

func (m *MyStruct) SetI16Val(i16Val int16) *MyStruct {
  m.I16Val = i16Val
  return m
}

func (m *MyStruct) SetI32Val(i32Val int32) *MyStruct {
  m.I32Val = i32Val
  return m
}

func (m *MyStruct) SetI64Val(i64Val int64) *MyStruct {
  m.I64Val = i64Val
  return m
}

func (m *MyStruct) SetFloatVal(floatVal float32) *MyStruct {
  m.FloatVal = floatVal
  return m
}

func (m *MyStruct) SetDoubleVal(doubleVal float64) *MyStruct {
  m.DoubleVal = doubleVal
  return m
}

func (m *MyStruct) SetStringVal(stringVal string) *MyStruct {
  m.StringVal = stringVal
  return m
}

func (m *MyStruct) SetBinaryVal(binaryVal []byte) *MyStruct {
  m.BinaryVal = binaryVal
  return m
}

func (m *MyStruct) SetStructVal(structVal *MyData) *MyStruct {
  m.StructVal = structVal
  return m
}

func (m *MyStruct) SetOptBoolVal(optBoolVal *bool) *MyStruct {
  m.OptBoolVal = optBoolVal
  return m
}

func (m *MyStruct) SetOptByteVal(optByteVal *int8) *MyStruct {
  m.OptByteVal = optByteVal
  return m
}

func (m *MyStruct) SetOptI16Val(optI16Val *int16) *MyStruct {
  m.OptI16Val = optI16Val
  return m
}

func (m *MyStruct) SetOptI32Val(optI32Val *int32) *MyStruct {
  m.OptI32Val = optI32Val
  return m
}

func (m *MyStruct) SetOptI64Val(optI64Val *int64) *MyStruct {
  m.OptI64Val = optI64Val
  return m
}

func (m *MyStruct) SetOptFloatVal(optFloatVal *float32) *MyStruct {
  m.OptFloatVal = optFloatVal
  return m
}

func (m *MyStruct) SetOptDoubleVal(optDoubleVal *float64) *MyStruct {
  m.OptDoubleVal = optDoubleVal
  return m
}

func (m *MyStruct) SetOptStringVal(optStringVal *string) *MyStruct {
  m.OptStringVal = optStringVal
  return m
}

func (m *MyStruct) SetOptBinaryVal(optBinaryVal []byte) *MyStruct {
  m.OptBinaryVal = optBinaryVal
  return m
}

func (m *MyStruct) SetOptStructVal(optStructVal *MyData) *MyStruct {
  m.OptStructVal = optStructVal
  return m
}

func (m *MyStruct) SetOptListVal(optListVal []int16) *MyStruct {
  m.OptListVal = optListVal
  return m
}

func (m *MyStruct) SetOptSetVal(optSetVal []string) *MyStruct {
  m.OptSetVal = optSetVal
  return m
}

func (m *MyStruct) SetOptMapVal(optMapVal map[string]string) *MyStruct {
  m.OptMapVal = optMapVal
  return m
}

func (m *MyStruct) SetUnionVal(unionVal *MyUnion) *MyStruct {
  m.UnionVal = unionVal
  return m
}

func (p *MyStruct) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 13:
      if err := p.ReadField13(iprot); err != nil {
        return err
      }
    case 14:
      if err := p.ReadField14(iprot); err != nil {
        return err
      }
    case 15:
      if err := p.ReadField15(iprot); err != nil {
        return err
      }
    case 16:
      if err := p.ReadField16(iprot); err != nil {
        return err
      }
    case 17:
      if err := p.ReadField17(iprot); err != nil {
        return err
      }
    case 18:
      if err := p.ReadField18(iprot); err != nil {
        return err
      }
    case 19:
      if err := p.ReadField19(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 21:
      if err := p.ReadField21(iprot); err != nil {
        return err
      }
    case 22:
      if err := p.ReadField22(iprot); err != nil {
        return err
      }
    case 23:
      if err := p.ReadField23(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStruct)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.BoolVal = v
  }
  return nil
}

func (p *MyStruct)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := int8(v)
    p.ByteVal = temp
  }
  return nil
}

func (p *MyStruct)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.I16Val = v
  }
  return nil
}

func (p *MyStruct)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.I32Val = v
  }
  return nil
}

func (p *MyStruct)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.I64Val = v
  }
  return nil
}

func (p *MyStruct)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadFloat(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.FloatVal = v
  }
  return nil
}

func (p *MyStruct)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 7: ", err)
  } else {
    p.DoubleVal = v
  }
  return nil
}

func (p *MyStruct)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 8: ", err)
  } else {
    p.StringVal = v
  }
  return nil
}

func (p *MyStruct)  ReadField9(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 9: ", err)
  } else {
    p.BinaryVal = v
  }
  return nil
}

func (p *MyStruct)  ReadField10(iprot thrift.Protocol) error {
  p.StructVal = NewMyData()
  if err := p.StructVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StructVal), err)
  }
  return nil
}

func (p *MyStruct)  ReadField11(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 11: ", err)
  } else {
    p.OptBoolVal = &v
  }
  return nil
}

func (p *MyStruct)  ReadField12(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
    return thrift.PrependError("error reading field 12: ", err)
  } else {
    temp := int8(v)
    p.OptByteVal = &temp
  }
  return nil
}

func (p *MyStruct)  ReadField13(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
    return thrift.PrependError("error reading field 13: ", err)
  } else {
    p.OptI16Val = &v
  }
  return nil
}

func (p *MyStruct)  ReadField14(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 14: ", err)
  } else {
    p.OptI32Val = &v
  }
  return nil
}

func (p *MyStruct)  ReadField15(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 15: ", err)
  } else {
    p.OptI64Val = &v
  }
  return nil
}

func (p *MyStruct)  ReadField16(iprot thrift.Protocol) error {
  if v, err := iprot.ReadFloat(); err != nil {
    return thrift.PrependError("error reading field 16: ", err)
  } else {
    p.OptFloatVal = &v
  }
  return nil
}

func (p *MyStruct)  ReadField17(iprot thrift.Protocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 17: ", err)
  } else {
    p.OptDoubleVal = &v
  }
  return nil
}

func (p *MyStruct)  ReadField18(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 18: ", err)
  } else {
    p.OptStringVal = &v
  }
  return nil
}

func (p *MyStruct)  ReadField19(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 19: ", err)
  } else {
    p.OptBinaryVal = v
  }
  return nil
}

func (p *MyStruct)  ReadField20(iprot thrift.Protocol) error {
  p.OptStructVal = NewMyData()
  if err := p.OptStructVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptStructVal), err)
  }
  return nil
}

func (p *MyStruct)  ReadField21(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int16, 0, size)
  p.OptListVal =  tSlice
  for i := 0; i < size; i ++ {
    var _elem2 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem2 = v
    }
    p.OptListVal = append(p.OptListVal, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MyStruct)  ReadField22(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.OptSetVal =  tSet
  for i := 0; i < size; i ++ {
    var _elem3 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem3 = v
    }
    p.OptSetVal = append(p.OptSetVal, _elem3)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *MyStruct)  ReadField23(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.OptMapVal =  tMap
  for i := 0; i < size; i ++ {
    var _key4 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key4 = v
    }
    var _val5 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val5 = v
    }
    p.OptMapVal[_key4] = _val5
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStruct)  ReadField30(iprot thrift.Protocol) error {
  p.UnionVal = NewMyUnion()
  if err := p.UnionVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnionVal), err)
  }
  return nil
}

func (p *MyStruct) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := p.writeField10(oprot); err != nil { return err }
  if err := p.writeField11(oprot); err != nil { return err }
  if err := p.writeField12(oprot); err != nil { return err }
  if err := p.writeField13(oprot); err != nil { return err }
  if err := p.writeField14(oprot); err != nil { return err }
  if err := p.writeField15(oprot); err != nil { return err }
  if err := p.writeField16(oprot); err != nil { return err }
  if err := p.writeField17(oprot); err != nil { return err }
  if err := p.writeField18(oprot); err != nil { return err }
  if err := p.writeField19(oprot); err != nil { return err }
  if err := p.writeField20(oprot); err != nil { return err }
  if err := p.writeField21(oprot); err != nil { return err }
  if err := p.writeField22(oprot); err != nil { return err }
  if err := p.writeField23(oprot); err != nil { return err }
  if err := p.writeField30(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStruct) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("boolVal", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:boolVal: ", p), err) }
  if err := oprot.WriteBool(bool(p.BoolVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.boolVal (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:boolVal: ", p), err) }
  return err
}

func (p *MyStruct) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("byteVal", thrift.BYTE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:byteVal: ", p), err) }
  if err := oprot.WriteByte(byte(p.ByteVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.byteVal (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:byteVal: ", p), err) }
  return err
}

func (p *MyStruct) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("i16Val", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:i16Val: ", p), err) }
  if err := oprot.WriteI16(int16(p.I16Val)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.i16Val (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:i16Val: ", p), err) }
  return err
}

func (p *MyStruct) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("i32Val", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:i32Val: ", p), err) }
  if err := oprot.WriteI32(int32(p.I32Val)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.i32Val (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:i32Val: ", p), err) }
  return err
}

func (p *MyStruct) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("i64Val", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:i64Val: ", p), err) }
  if err := oprot.WriteI64(int64(p.I64Val)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.i64Val (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:i64Val: ", p), err) }
  return err
}

func (p *MyStruct) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("floatVal", thrift.FLOAT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:floatVal: ", p), err) }
  if err := oprot.WriteFloat(float32(p.FloatVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.floatVal (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:floatVal: ", p), err) }
  return err
}

func (p *MyStruct) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("doubleVal", thrift.DOUBLE, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:doubleVal: ", p), err) }
  if err := oprot.WriteDouble(float64(p.DoubleVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.doubleVal (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:doubleVal: ", p), err) }
  return err
}

func (p *MyStruct) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("stringVal", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:stringVal: ", p), err) }
  if err := oprot.WriteString(string(p.StringVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stringVal (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:stringVal: ", p), err) }
  return err
}

func (p *MyStruct) writeField9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("binaryVal", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:binaryVal: ", p), err) }
  if err := oprot.WriteBinary(p.BinaryVal); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.binaryVal (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:binaryVal: ", p), err) }
  return err
}

func (p *MyStruct) writeField10(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("structVal", thrift.STRUCT, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:structVal: ", p), err) }
  if err := p.StructVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StructVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:structVal: ", p), err) }
  return err
}

func (p *MyStruct) writeField11(oprot thrift.Protocol) (err error) {
  if p.IsSetOptBoolVal() {
    if err := oprot.WriteFieldBegin("optBoolVal", thrift.BOOL, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:optBoolVal: ", p), err) }
    if err := oprot.WriteBool(bool(*p.OptBoolVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optBoolVal (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:optBoolVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField12(oprot thrift.Protocol) (err error) {
  if p.IsSetOptByteVal() {
    if err := oprot.WriteFieldBegin("optByteVal", thrift.BYTE, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:optByteVal: ", p), err) }
    if err := oprot.WriteByte(byte(*p.OptByteVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optByteVal (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:optByteVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField13(oprot thrift.Protocol) (err error) {
  if p.IsSetOptI16Val() {
    if err := oprot.WriteFieldBegin("optI16Val", thrift.I16, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:optI16Val: ", p), err) }
    if err := oprot.WriteI16(int16(*p.OptI16Val)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optI16Val (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:optI16Val: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField14(oprot thrift.Protocol) (err error) {
  if p.IsSetOptI32Val() {
    if err := oprot.WriteFieldBegin("optI32Val", thrift.I32, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:optI32Val: ", p), err) }
    if err := oprot.WriteI32(int32(*p.OptI32Val)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optI32Val (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:optI32Val: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField15(oprot thrift.Protocol) (err error) {
  if p.IsSetOptI64Val() {
    if err := oprot.WriteFieldBegin("optI64Val", thrift.I64, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:optI64Val: ", p), err) }
    if err := oprot.WriteI64(int64(*p.OptI64Val)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optI64Val (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:optI64Val: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField16(oprot thrift.Protocol) (err error) {
  if p.IsSetOptFloatVal() {
    if err := oprot.WriteFieldBegin("optFloatVal", thrift.FLOAT, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:optFloatVal: ", p), err) }
    if err := oprot.WriteFloat(float32(*p.OptFloatVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optFloatVal (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:optFloatVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField17(oprot thrift.Protocol) (err error) {
  if p.IsSetOptDoubleVal() {
    if err := oprot.WriteFieldBegin("optDoubleVal", thrift.DOUBLE, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:optDoubleVal: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.OptDoubleVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optDoubleVal (17) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:optDoubleVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField18(oprot thrift.Protocol) (err error) {
  if p.IsSetOptStringVal() {
    if err := oprot.WriteFieldBegin("optStringVal", thrift.STRING, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:optStringVal: ", p), err) }
    if err := oprot.WriteString(string(*p.OptStringVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optStringVal (18) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:optStringVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField19(oprot thrift.Protocol) (err error) {
  if p.IsSetOptBinaryVal() {
    if err := oprot.WriteFieldBegin("optBinaryVal", thrift.STRING, 19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:optBinaryVal: ", p), err) }
    if err := oprot.WriteBinary(p.OptBinaryVal); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optBinaryVal (19) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 19:optBinaryVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField20(oprot thrift.Protocol) (err error) {
  if p.IsSetOptStructVal() {
    if err := oprot.WriteFieldBegin("optStructVal", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:optStructVal: ", p), err) }
    if err := p.OptStructVal.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptStructVal), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:optStructVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField21(oprot thrift.Protocol) (err error) {
  if p.IsSetOptListVal() {
    if err := oprot.WriteFieldBegin("optListVal", thrift.LIST, 21); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:optListVal: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I16, len(p.OptListVal)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.OptListVal {
      if err := oprot.WriteI16(int16(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 21:optListVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField22(oprot thrift.Protocol) (err error) {
  if p.IsSetOptSetVal() {
    if err := oprot.WriteFieldBegin("optSetVal", thrift.SET, 22); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:optSetVal: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.STRING, len(p.OptSetVal)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    set := make(map[string]bool, len(p.OptSetVal))
    for _, v := range p.OptSetVal {
      if ok := set[v]; ok {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
      }
      set[v] = true
    }
    for _, v := range p.OptSetVal {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 22:optSetVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField23(oprot thrift.Protocol) (err error) {
  if p.IsSetOptMapVal() {
    if err := oprot.WriteFieldBegin("optMapVal", thrift.MAP, 23); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:optMapVal: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.OptMapVal)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.OptMapVal {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 23:optMapVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField30(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("unionVal", thrift.STRUCT, 30); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:unionVal: ", p), err) }
  if err := p.UnionVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnionVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 30:unionVal: ", p), err) }
  return err
}

func (p *MyStruct) String() string {
  if p == nil {
    return "<nil>"
  }

  boolValVal := fmt.Sprintf("%v", p.BoolVal)
  byteValVal := fmt.Sprintf("%v", p.ByteVal)
  i16ValVal := fmt.Sprintf("%v", p.I16Val)
  i32ValVal := fmt.Sprintf("%v", p.I32Val)
  i64ValVal := fmt.Sprintf("%v", p.I64Val)
  floatValVal := fmt.Sprintf("%v", p.FloatVal)
  doubleValVal := fmt.Sprintf("%v", p.DoubleVal)
  stringValVal := fmt.Sprintf("%v", p.StringVal)
  binaryValVal := fmt.Sprintf("%v", p.BinaryVal)
  var structValVal string
  if p.StructVal == nil {
    structValVal = "<nil>"
  } else {
    structValVal = fmt.Sprintf("%v", p.StructVal)
  }
  var optBoolValVal string
  if p.OptBoolVal == nil {
    optBoolValVal = "<nil>"
  } else {
    optBoolValVal = fmt.Sprintf("%v", *p.OptBoolVal)
  }
  var optByteValVal string
  if p.OptByteVal == nil {
    optByteValVal = "<nil>"
  } else {
    optByteValVal = fmt.Sprintf("%v", *p.OptByteVal)
  }
  var optI16ValVal string
  if p.OptI16Val == nil {
    optI16ValVal = "<nil>"
  } else {
    optI16ValVal = fmt.Sprintf("%v", *p.OptI16Val)
  }
  var optI32ValVal string
  if p.OptI32Val == nil {
    optI32ValVal = "<nil>"
  } else {
    optI32ValVal = fmt.Sprintf("%v", *p.OptI32Val)
  }
  var optI64ValVal string
  if p.OptI64Val == nil {
    optI64ValVal = "<nil>"
  } else {
    optI64ValVal = fmt.Sprintf("%v", *p.OptI64Val)
  }
  var optFloatValVal string
  if p.OptFloatVal == nil {
    optFloatValVal = "<nil>"
  } else {
    optFloatValVal = fmt.Sprintf("%v", *p.OptFloatVal)
  }
  var optDoubleValVal string
  if p.OptDoubleVal == nil {
    optDoubleValVal = "<nil>"
  } else {
    optDoubleValVal = fmt.Sprintf("%v", *p.OptDoubleVal)
  }
  var optStringValVal string
  if p.OptStringVal == nil {
    optStringValVal = "<nil>"
  } else {
    optStringValVal = fmt.Sprintf("%v", *p.OptStringVal)
  }
  optBinaryValVal := fmt.Sprintf("%v", p.OptBinaryVal)
  var optStructValVal string
  if p.OptStructVal == nil {
    optStructValVal = "<nil>"
  } else {
    optStructValVal = fmt.Sprintf("%v", p.OptStructVal)
  }
  optListValVal := fmt.Sprintf("%v", p.OptListVal)
  optSetValVal := fmt.Sprintf("%v", p.OptSetVal)
  optMapValVal := fmt.Sprintf("%v", p.OptMapVal)
  var unionValVal string
  if p.UnionVal == nil {
    unionValVal = "<nil>"
  } else {
    unionValVal = fmt.Sprintf("%v", p.UnionVal)
  }
  return fmt.Sprintf("MyStruct({BoolVal:%s ByteVal:%s I16Val:%s I32Val:%s I64Val:%s FloatVal:%s DoubleVal:%s StringVal:%s BinaryVal:%s StructVal:%s OptBoolVal:%s OptByteVal:%s OptI16Val:%s OptI32Val:%s OptI64Val:%s OptFloatVal:%s OptDoubleVal:%s OptStringVal:%s OptBinaryVal:%s OptStructVal:%s OptListVal:%s OptSetVal:%s OptMapVal:%s UnionVal:%s})", boolValVal, byteValVal, i16ValVal, i32ValVal, i64ValVal, floatValVal, doubleValVal, stringValVal, binaryValVal, structValVal, optBoolValVal, optByteValVal, optI16ValVal, optI32ValVal, optI64ValVal, optFloatValVal, optDoubleValVal, optStringValVal, optBinaryValVal, optStructValVal, optListValVal, optSetValVal, optMapValVal, unionValVal)
}

// Attributes:
//  - Data1
//  - Data2
type MyDataFieldPatch struct {
  Data1 *patch1.StringPatch `thrift:"data1,1" db:"data1" json:"data1"`
  Data2 *patch1.I32Patch `thrift:"data2,2" db:"data2" json:"data2"`
}

func NewMyDataFieldPatch() *MyDataFieldPatch {
  return &MyDataFieldPatch{
    Data1: patch1.NewStringPatch(),
    Data2: patch1.NewI32Patch(),
  }
}

var MyDataFieldPatch_Data1_DEFAULT *patch1.StringPatch
func (p *MyDataFieldPatch) GetData1() *patch1.StringPatch {
  if !p.IsSetData1() {
    return MyDataFieldPatch_Data1_DEFAULT
  }
return p.Data1
}
var MyDataFieldPatch_Data2_DEFAULT *patch1.I32Patch
func (p *MyDataFieldPatch) GetData2() *patch1.I32Patch {
  if !p.IsSetData2() {
    return MyDataFieldPatch_Data2_DEFAULT
  }
return p.Data2
}
func (p *MyDataFieldPatch) IsSetData1() bool {
  return p != nil && p.Data1 != nil
}

func (p *MyDataFieldPatch) IsSetData2() bool {
  return p != nil && p.Data2 != nil
}

type MyDataFieldPatchBuilder struct {
  obj *MyDataFieldPatch
}

func NewMyDataFieldPatchBuilder() *MyDataFieldPatchBuilder{
  return &MyDataFieldPatchBuilder{
    obj: NewMyDataFieldPatch(),
  }
}

func (p MyDataFieldPatchBuilder) Emit() *MyDataFieldPatch{
  return &MyDataFieldPatch{
    Data1: p.obj.Data1,
    Data2: p.obj.Data2,
  }
}

func (m *MyDataFieldPatchBuilder) Data1(data1 *patch1.StringPatch) *MyDataFieldPatchBuilder {
  m.obj.Data1 = data1
  return m
}

func (m *MyDataFieldPatchBuilder) Data2(data2 *patch1.I32Patch) *MyDataFieldPatchBuilder {
  m.obj.Data2 = data2
  return m
}

func (m *MyDataFieldPatch) SetData1(data1 *patch1.StringPatch) *MyDataFieldPatch {
  m.Data1 = data1
  return m
}

func (m *MyDataFieldPatch) SetData2(data2 *patch1.I32Patch) *MyDataFieldPatch {
  m.Data2 = data2
  return m
}

func (p *MyDataFieldPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyDataFieldPatch)  ReadField1(iprot thrift.Protocol) error {
  p.Data1 = patch1.NewStringPatch()
  if err := p.Data1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data1), err)
  }
  return nil
}

func (p *MyDataFieldPatch)  ReadField2(iprot thrift.Protocol) error {
  p.Data2 = patch1.NewI32Patch()
  if err := p.Data2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data2), err)
  }
  return nil
}

func (p *MyDataFieldPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyDataFieldPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyDataFieldPatch) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("data1", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:data1: ", p), err) }
  if err := p.Data1.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data1), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:data1: ", p), err) }
  return err
}

func (p *MyDataFieldPatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("data2", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data2: ", p), err) }
  if err := p.Data2.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data2), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data2: ", p), err) }
  return err
}

func (p *MyDataFieldPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var data1Val string
  if p.Data1 == nil {
    data1Val = "<nil>"
  } else {
    data1Val = fmt.Sprintf("%v", p.Data1)
  }
  var data2Val string
  if p.Data2 == nil {
    data2Val = "<nil>"
  } else {
    data2Val = fmt.Sprintf("%v", p.Data2)
  }
  return fmt.Sprintf("MyDataFieldPatch({Data1:%s Data2:%s})", data1Val, data2Val)
}

// Attributes:
//  - Assign: Assigns a value. If set, all other operations are ignored.
//  - Clear: Clears a value. Applies first.
//  - PatchPrior: Patches any previously set values. Applies second.
//  - Ensure: Initialize fields, using the given defaults. Applies third.
//  - Patch: Patches any set value, including newly set values. Applies last.
type MyDataPatch struct {
  Assign *MyData `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  PatchPrior *MyDataFieldPatch `thrift:"patchPrior,3" db:"patchPrior" json:"patchPrior"`
  // unused field # 4
  Ensure *MyData `thrift:"ensure,5" db:"ensure" json:"ensure"`
  Patch *MyDataFieldPatch `thrift:"patch,6" db:"patch" json:"patch"`
}

func NewMyDataPatch() *MyDataPatch {
  return &MyDataPatch{
    PatchPrior: NewMyDataFieldPatch(),
    Ensure: NewMyData(),
    Patch: NewMyDataFieldPatch(),
  }
}

var MyDataPatch_Assign_DEFAULT *MyData
func (p *MyDataPatch) GetAssign() *MyData {
  if !p.IsSetAssign() {
    return MyDataPatch_Assign_DEFAULT
  }
return p.Assign
}

func (p *MyDataPatch) GetClear() bool {
  return p.Clear
}
var MyDataPatch_PatchPrior_DEFAULT *MyDataFieldPatch
func (p *MyDataPatch) GetPatchPrior() *MyDataFieldPatch {
  if !p.IsSetPatchPrior() {
    return MyDataPatch_PatchPrior_DEFAULT
  }
return p.PatchPrior
}
var MyDataPatch_Ensure_DEFAULT *MyData
func (p *MyDataPatch) GetEnsure() *MyData {
  if !p.IsSetEnsure() {
    return MyDataPatch_Ensure_DEFAULT
  }
return p.Ensure
}
var MyDataPatch_Patch_DEFAULT *MyDataFieldPatch
func (p *MyDataPatch) GetPatch() *MyDataFieldPatch {
  if !p.IsSetPatch() {
    return MyDataPatch_Patch_DEFAULT
  }
return p.Patch
}
func (p *MyDataPatch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

func (p *MyDataPatch) IsSetPatchPrior() bool {
  return p != nil && p.PatchPrior != nil
}

func (p *MyDataPatch) IsSetEnsure() bool {
  return p != nil && p.Ensure != nil
}

func (p *MyDataPatch) IsSetPatch() bool {
  return p != nil && p.Patch != nil
}

type MyDataPatchBuilder struct {
  obj *MyDataPatch
}

func NewMyDataPatchBuilder() *MyDataPatchBuilder{
  return &MyDataPatchBuilder{
    obj: NewMyDataPatch(),
  }
}

func (p MyDataPatchBuilder) Emit() *MyDataPatch{
  return &MyDataPatch{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
    PatchPrior: p.obj.PatchPrior,
    Ensure: p.obj.Ensure,
    Patch: p.obj.Patch,
  }
}

func (m *MyDataPatchBuilder) Assign(assign *MyData) *MyDataPatchBuilder {
  m.obj.Assign = assign
  return m
}

func (m *MyDataPatchBuilder) Clear(clear bool) *MyDataPatchBuilder {
  m.obj.Clear = clear
  return m
}

func (m *MyDataPatchBuilder) PatchPrior(patchPrior *MyDataFieldPatch) *MyDataPatchBuilder {
  m.obj.PatchPrior = patchPrior
  return m
}

func (m *MyDataPatchBuilder) Ensure(ensure *MyData) *MyDataPatchBuilder {
  m.obj.Ensure = ensure
  return m
}

func (m *MyDataPatchBuilder) Patch(patch *MyDataFieldPatch) *MyDataPatchBuilder {
  m.obj.Patch = patch
  return m
}

func (m *MyDataPatch) SetAssign(assign *MyData) *MyDataPatch {
  m.Assign = assign
  return m
}

func (m *MyDataPatch) SetClear(clear bool) *MyDataPatch {
  m.Clear = clear
  return m
}

func (m *MyDataPatch) SetPatchPrior(patchPrior *MyDataFieldPatch) *MyDataPatch {
  m.PatchPrior = patchPrior
  return m
}

func (m *MyDataPatch) SetEnsure(ensure *MyData) *MyDataPatch {
  m.Ensure = ensure
  return m
}

func (m *MyDataPatch) SetPatch(patch *MyDataFieldPatch) *MyDataPatch {
  m.Patch = patch
  return m
}

func (p *MyDataPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyDataPatch)  ReadField1(iprot thrift.Protocol) error {
  p.Assign = NewMyData()
  if err := p.Assign.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Assign), err)
  }
  return nil
}

func (p *MyDataPatch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *MyDataPatch)  ReadField3(iprot thrift.Protocol) error {
  p.PatchPrior = NewMyDataFieldPatch()
  if err := p.PatchPrior.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PatchPrior), err)
  }
  return nil
}

func (p *MyDataPatch)  ReadField5(iprot thrift.Protocol) error {
  p.Ensure = NewMyData()
  if err := p.Ensure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ensure), err)
  }
  return nil
}

func (p *MyDataPatch)  ReadField6(iprot thrift.Protocol) error {
  p.Patch = NewMyDataFieldPatch()
  if err := p.Patch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Patch), err)
  }
  return nil
}

func (p *MyDataPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyDataPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyDataPatch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := p.Assign.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Assign), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *MyDataPatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *MyDataPatch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patchPrior: ", p), err) }
  if err := p.PatchPrior.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PatchPrior), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patchPrior: ", p), err) }
  return err
}

func (p *MyDataPatch) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("ensure", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ensure: ", p), err) }
  if err := p.Ensure.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ensure), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ensure: ", p), err) }
  return err
}

func (p *MyDataPatch) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:patch: ", p), err) }
  if err := p.Patch.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Patch), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:patch: ", p), err) }
  return err
}

func (p *MyDataPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var assignVal string
  if p.Assign == nil {
    assignVal = "<nil>"
  } else {
    assignVal = fmt.Sprintf("%v", p.Assign)
  }
  clearVal := fmt.Sprintf("%v", p.Clear)
  var patchPriorVal string
  if p.PatchPrior == nil {
    patchPriorVal = "<nil>"
  } else {
    patchPriorVal = fmt.Sprintf("%v", p.PatchPrior)
  }
  var ensureVal string
  if p.Ensure == nil {
    ensureVal = "<nil>"
  } else {
    ensureVal = fmt.Sprintf("%v", p.Ensure)
  }
  var patchVal string
  if p.Patch == nil {
    patchVal = "<nil>"
  } else {
    patchVal = fmt.Sprintf("%v", p.Patch)
  }
  return fmt.Sprintf("MyDataPatch({Assign:%s Clear:%s PatchPrior:%s Ensure:%s Patch:%s})", assignVal, clearVal, patchPriorVal, ensureVal, patchVal)
}

// Attributes:
//  - InnerOption
type InnerUnionFieldPatch struct {
  InnerOption *patch1.BinaryPatch `thrift:"innerOption,1" db:"innerOption" json:"innerOption"`
}

func NewInnerUnionFieldPatch() *InnerUnionFieldPatch {
  return &InnerUnionFieldPatch{
    InnerOption: patch1.NewBinaryPatch(),
  }
}

var InnerUnionFieldPatch_InnerOption_DEFAULT *patch1.BinaryPatch
func (p *InnerUnionFieldPatch) GetInnerOption() *patch1.BinaryPatch {
  if !p.IsSetInnerOption() {
    return InnerUnionFieldPatch_InnerOption_DEFAULT
  }
return p.InnerOption
}
func (p *InnerUnionFieldPatch) IsSetInnerOption() bool {
  return p != nil && p.InnerOption != nil
}

type InnerUnionFieldPatchBuilder struct {
  obj *InnerUnionFieldPatch
}

func NewInnerUnionFieldPatchBuilder() *InnerUnionFieldPatchBuilder{
  return &InnerUnionFieldPatchBuilder{
    obj: NewInnerUnionFieldPatch(),
  }
}

func (p InnerUnionFieldPatchBuilder) Emit() *InnerUnionFieldPatch{
  return &InnerUnionFieldPatch{
    InnerOption: p.obj.InnerOption,
  }
}

func (i *InnerUnionFieldPatchBuilder) InnerOption(innerOption *patch1.BinaryPatch) *InnerUnionFieldPatchBuilder {
  i.obj.InnerOption = innerOption
  return i
}

func (i *InnerUnionFieldPatch) SetInnerOption(innerOption *patch1.BinaryPatch) *InnerUnionFieldPatch {
  i.InnerOption = innerOption
  return i
}

func (p *InnerUnionFieldPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InnerUnionFieldPatch)  ReadField1(iprot thrift.Protocol) error {
  p.InnerOption = patch1.NewBinaryPatch()
  if err := p.InnerOption.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InnerOption), err)
  }
  return nil
}

func (p *InnerUnionFieldPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("InnerUnionFieldPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InnerUnionFieldPatch) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("innerOption", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:innerOption: ", p), err) }
  if err := p.InnerOption.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InnerOption), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:innerOption: ", p), err) }
  return err
}

func (p *InnerUnionFieldPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var innerOptionVal string
  if p.InnerOption == nil {
    innerOptionVal = "<nil>"
  } else {
    innerOptionVal = fmt.Sprintf("%v", p.InnerOption)
  }
  return fmt.Sprintf("InnerUnionFieldPatch({InnerOption:%s})", innerOptionVal)
}

// Attributes:
//  - Assign: Assigns a value. If set, all other operations are ignored.
//  - Clear: Clears any set value. Applies first.
//  - PatchPrior: Patches any previously set values. Applies second.
//  - Ensure: Assigns the value, if not already set to the same field. Applies third.
//  - Patch: Patches any set value, including newly set values. Applies last.
type InnerUnionPatch struct {
  Assign *InnerUnion `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  PatchPrior *InnerUnionFieldPatch `thrift:"patchPrior,3" db:"patchPrior" json:"patchPrior"`
  Ensure *InnerUnion `thrift:"ensure,4" db:"ensure" json:"ensure"`
  // unused field # 5
  Patch *InnerUnionFieldPatch `thrift:"patch,6" db:"patch" json:"patch"`
}

func NewInnerUnionPatch() *InnerUnionPatch {
  return &InnerUnionPatch{
    PatchPrior: NewInnerUnionFieldPatch(),
    Patch: NewInnerUnionFieldPatch(),
  }
}

var InnerUnionPatch_Assign_DEFAULT *InnerUnion
func (p *InnerUnionPatch) GetAssign() *InnerUnion {
  if !p.IsSetAssign() {
    return InnerUnionPatch_Assign_DEFAULT
  }
return p.Assign
}

func (p *InnerUnionPatch) GetClear() bool {
  return p.Clear
}
var InnerUnionPatch_PatchPrior_DEFAULT *InnerUnionFieldPatch
func (p *InnerUnionPatch) GetPatchPrior() *InnerUnionFieldPatch {
  if !p.IsSetPatchPrior() {
    return InnerUnionPatch_PatchPrior_DEFAULT
  }
return p.PatchPrior
}
var InnerUnionPatch_Ensure_DEFAULT *InnerUnion
func (p *InnerUnionPatch) GetEnsure() *InnerUnion {
  if !p.IsSetEnsure() {
    return InnerUnionPatch_Ensure_DEFAULT
  }
return p.Ensure
}
var InnerUnionPatch_Patch_DEFAULT *InnerUnionFieldPatch
func (p *InnerUnionPatch) GetPatch() *InnerUnionFieldPatch {
  if !p.IsSetPatch() {
    return InnerUnionPatch_Patch_DEFAULT
  }
return p.Patch
}
func (p *InnerUnionPatch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

func (p *InnerUnionPatch) IsSetPatchPrior() bool {
  return p != nil && p.PatchPrior != nil
}

func (p *InnerUnionPatch) IsSetEnsure() bool {
  return p != nil && p.Ensure != nil
}

func (p *InnerUnionPatch) IsSetPatch() bool {
  return p != nil && p.Patch != nil
}

type InnerUnionPatchBuilder struct {
  obj *InnerUnionPatch
}

func NewInnerUnionPatchBuilder() *InnerUnionPatchBuilder{
  return &InnerUnionPatchBuilder{
    obj: NewInnerUnionPatch(),
  }
}

func (p InnerUnionPatchBuilder) Emit() *InnerUnionPatch{
  return &InnerUnionPatch{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
    PatchPrior: p.obj.PatchPrior,
    Ensure: p.obj.Ensure,
    Patch: p.obj.Patch,
  }
}

func (i *InnerUnionPatchBuilder) Assign(assign *InnerUnion) *InnerUnionPatchBuilder {
  i.obj.Assign = assign
  return i
}

func (i *InnerUnionPatchBuilder) Clear(clear bool) *InnerUnionPatchBuilder {
  i.obj.Clear = clear
  return i
}

func (i *InnerUnionPatchBuilder) PatchPrior(patchPrior *InnerUnionFieldPatch) *InnerUnionPatchBuilder {
  i.obj.PatchPrior = patchPrior
  return i
}

func (i *InnerUnionPatchBuilder) Ensure(ensure *InnerUnion) *InnerUnionPatchBuilder {
  i.obj.Ensure = ensure
  return i
}

func (i *InnerUnionPatchBuilder) Patch(patch *InnerUnionFieldPatch) *InnerUnionPatchBuilder {
  i.obj.Patch = patch
  return i
}

func (i *InnerUnionPatch) SetAssign(assign *InnerUnion) *InnerUnionPatch {
  i.Assign = assign
  return i
}

func (i *InnerUnionPatch) SetClear(clear bool) *InnerUnionPatch {
  i.Clear = clear
  return i
}

func (i *InnerUnionPatch) SetPatchPrior(patchPrior *InnerUnionFieldPatch) *InnerUnionPatch {
  i.PatchPrior = patchPrior
  return i
}

func (i *InnerUnionPatch) SetEnsure(ensure *InnerUnion) *InnerUnionPatch {
  i.Ensure = ensure
  return i
}

func (i *InnerUnionPatch) SetPatch(patch *InnerUnionFieldPatch) *InnerUnionPatch {
  i.Patch = patch
  return i
}

func (p *InnerUnionPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InnerUnionPatch)  ReadField1(iprot thrift.Protocol) error {
  p.Assign = NewInnerUnion()
  if err := p.Assign.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Assign), err)
  }
  return nil
}

func (p *InnerUnionPatch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *InnerUnionPatch)  ReadField3(iprot thrift.Protocol) error {
  p.PatchPrior = NewInnerUnionFieldPatch()
  if err := p.PatchPrior.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PatchPrior), err)
  }
  return nil
}

func (p *InnerUnionPatch)  ReadField4(iprot thrift.Protocol) error {
  p.Ensure = NewInnerUnion()
  if err := p.Ensure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ensure), err)
  }
  return nil
}

func (p *InnerUnionPatch)  ReadField6(iprot thrift.Protocol) error {
  p.Patch = NewInnerUnionFieldPatch()
  if err := p.Patch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Patch), err)
  }
  return nil
}

func (p *InnerUnionPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("InnerUnionPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InnerUnionPatch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := p.Assign.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Assign), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *InnerUnionPatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *InnerUnionPatch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patchPrior: ", p), err) }
  if err := p.PatchPrior.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PatchPrior), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patchPrior: ", p), err) }
  return err
}

func (p *InnerUnionPatch) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("ensure", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ensure: ", p), err) }
  if err := p.Ensure.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ensure), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ensure: ", p), err) }
  return err
}

func (p *InnerUnionPatch) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:patch: ", p), err) }
  if err := p.Patch.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Patch), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:patch: ", p), err) }
  return err
}

func (p *InnerUnionPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var assignVal string
  if p.Assign == nil {
    assignVal = "<nil>"
  } else {
    assignVal = fmt.Sprintf("%v", p.Assign)
  }
  clearVal := fmt.Sprintf("%v", p.Clear)
  var patchPriorVal string
  if p.PatchPrior == nil {
    patchPriorVal = "<nil>"
  } else {
    patchPriorVal = fmt.Sprintf("%v", p.PatchPrior)
  }
  var ensureVal string
  if p.Ensure == nil {
    ensureVal = "<nil>"
  } else {
    ensureVal = fmt.Sprintf("%v", p.Ensure)
  }
  var patchVal string
  if p.Patch == nil {
    patchVal = "<nil>"
  } else {
    patchVal = fmt.Sprintf("%v", p.Patch)
  }
  return fmt.Sprintf("InnerUnionPatch({Assign:%s Clear:%s PatchPrior:%s Ensure:%s Patch:%s})", assignVal, clearVal, patchPriorVal, ensureVal, patchVal)
}

// Attributes:
//  - Option1
//  - Option2
//  - Option3
type MyUnionFieldPatch struct {
  Option1 *patch1.StringPatch `thrift:"option1,1" db:"option1" json:"option1"`
  Option2 *patch1.I32Patch `thrift:"option2,2" db:"option2" json:"option2"`
  Option3 *InnerUnionPatch `thrift:"option3,3" db:"option3" json:"option3"`
}

func NewMyUnionFieldPatch() *MyUnionFieldPatch {
  return &MyUnionFieldPatch{
    Option1: patch1.NewStringPatch(),
    Option2: patch1.NewI32Patch(),
    Option3: NewInnerUnionPatch(),
  }
}

var MyUnionFieldPatch_Option1_DEFAULT *patch1.StringPatch
func (p *MyUnionFieldPatch) GetOption1() *patch1.StringPatch {
  if !p.IsSetOption1() {
    return MyUnionFieldPatch_Option1_DEFAULT
  }
return p.Option1
}
var MyUnionFieldPatch_Option2_DEFAULT *patch1.I32Patch
func (p *MyUnionFieldPatch) GetOption2() *patch1.I32Patch {
  if !p.IsSetOption2() {
    return MyUnionFieldPatch_Option2_DEFAULT
  }
return p.Option2
}
var MyUnionFieldPatch_Option3_DEFAULT *InnerUnionPatch
func (p *MyUnionFieldPatch) GetOption3() *InnerUnionPatch {
  if !p.IsSetOption3() {
    return MyUnionFieldPatch_Option3_DEFAULT
  }
return p.Option3
}
func (p *MyUnionFieldPatch) IsSetOption1() bool {
  return p != nil && p.Option1 != nil
}

func (p *MyUnionFieldPatch) IsSetOption2() bool {
  return p != nil && p.Option2 != nil
}

func (p *MyUnionFieldPatch) IsSetOption3() bool {
  return p != nil && p.Option3 != nil
}

type MyUnionFieldPatchBuilder struct {
  obj *MyUnionFieldPatch
}

func NewMyUnionFieldPatchBuilder() *MyUnionFieldPatchBuilder{
  return &MyUnionFieldPatchBuilder{
    obj: NewMyUnionFieldPatch(),
  }
}

func (p MyUnionFieldPatchBuilder) Emit() *MyUnionFieldPatch{
  return &MyUnionFieldPatch{
    Option1: p.obj.Option1,
    Option2: p.obj.Option2,
    Option3: p.obj.Option3,
  }
}

func (m *MyUnionFieldPatchBuilder) Option1(option1 *patch1.StringPatch) *MyUnionFieldPatchBuilder {
  m.obj.Option1 = option1
  return m
}

func (m *MyUnionFieldPatchBuilder) Option2(option2 *patch1.I32Patch) *MyUnionFieldPatchBuilder {
  m.obj.Option2 = option2
  return m
}

func (m *MyUnionFieldPatchBuilder) Option3(option3 *InnerUnionPatch) *MyUnionFieldPatchBuilder {
  m.obj.Option3 = option3
  return m
}

func (m *MyUnionFieldPatch) SetOption1(option1 *patch1.StringPatch) *MyUnionFieldPatch {
  m.Option1 = option1
  return m
}

func (m *MyUnionFieldPatch) SetOption2(option2 *patch1.I32Patch) *MyUnionFieldPatch {
  m.Option2 = option2
  return m
}

func (m *MyUnionFieldPatch) SetOption3(option3 *InnerUnionPatch) *MyUnionFieldPatch {
  m.Option3 = option3
  return m
}

func (p *MyUnionFieldPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyUnionFieldPatch)  ReadField1(iprot thrift.Protocol) error {
  p.Option1 = patch1.NewStringPatch()
  if err := p.Option1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Option1), err)
  }
  return nil
}

func (p *MyUnionFieldPatch)  ReadField2(iprot thrift.Protocol) error {
  p.Option2 = patch1.NewI32Patch()
  if err := p.Option2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Option2), err)
  }
  return nil
}

func (p *MyUnionFieldPatch)  ReadField3(iprot thrift.Protocol) error {
  p.Option3 = NewInnerUnionPatch()
  if err := p.Option3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Option3), err)
  }
  return nil
}

func (p *MyUnionFieldPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyUnionFieldPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyUnionFieldPatch) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("option1", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:option1: ", p), err) }
  if err := p.Option1.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Option1), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:option1: ", p), err) }
  return err
}

func (p *MyUnionFieldPatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("option2", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:option2: ", p), err) }
  if err := p.Option2.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Option2), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:option2: ", p), err) }
  return err
}

func (p *MyUnionFieldPatch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("option3", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:option3: ", p), err) }
  if err := p.Option3.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Option3), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:option3: ", p), err) }
  return err
}

func (p *MyUnionFieldPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var option1Val string
  if p.Option1 == nil {
    option1Val = "<nil>"
  } else {
    option1Val = fmt.Sprintf("%v", p.Option1)
  }
  var option2Val string
  if p.Option2 == nil {
    option2Val = "<nil>"
  } else {
    option2Val = fmt.Sprintf("%v", p.Option2)
  }
  var option3Val string
  if p.Option3 == nil {
    option3Val = "<nil>"
  } else {
    option3Val = fmt.Sprintf("%v", p.Option3)
  }
  return fmt.Sprintf("MyUnionFieldPatch({Option1:%s Option2:%s Option3:%s})", option1Val, option2Val, option3Val)
}

// Attributes:
//  - Assign: Assigns a value. If set, all other operations are ignored.
//  - Clear: Clears any set value. Applies first.
//  - PatchPrior: Patches any previously set values. Applies second.
//  - Ensure: Assigns the value, if not already set to the same field. Applies third.
//  - Patch: Patches any set value, including newly set values. Applies last.
type MyUnionPatch struct {
  Assign *MyUnion `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  PatchPrior *MyUnionFieldPatch `thrift:"patchPrior,3" db:"patchPrior" json:"patchPrior"`
  Ensure *MyUnion `thrift:"ensure,4" db:"ensure" json:"ensure"`
  // unused field # 5
  Patch *MyUnionFieldPatch `thrift:"patch,6" db:"patch" json:"patch"`
}

func NewMyUnionPatch() *MyUnionPatch {
  return &MyUnionPatch{
    PatchPrior: NewMyUnionFieldPatch(),
    Patch: NewMyUnionFieldPatch(),
  }
}

var MyUnionPatch_Assign_DEFAULT *MyUnion
func (p *MyUnionPatch) GetAssign() *MyUnion {
  if !p.IsSetAssign() {
    return MyUnionPatch_Assign_DEFAULT
  }
return p.Assign
}

func (p *MyUnionPatch) GetClear() bool {
  return p.Clear
}
var MyUnionPatch_PatchPrior_DEFAULT *MyUnionFieldPatch
func (p *MyUnionPatch) GetPatchPrior() *MyUnionFieldPatch {
  if !p.IsSetPatchPrior() {
    return MyUnionPatch_PatchPrior_DEFAULT
  }
return p.PatchPrior
}
var MyUnionPatch_Ensure_DEFAULT *MyUnion
func (p *MyUnionPatch) GetEnsure() *MyUnion {
  if !p.IsSetEnsure() {
    return MyUnionPatch_Ensure_DEFAULT
  }
return p.Ensure
}
var MyUnionPatch_Patch_DEFAULT *MyUnionFieldPatch
func (p *MyUnionPatch) GetPatch() *MyUnionFieldPatch {
  if !p.IsSetPatch() {
    return MyUnionPatch_Patch_DEFAULT
  }
return p.Patch
}
func (p *MyUnionPatch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

func (p *MyUnionPatch) IsSetPatchPrior() bool {
  return p != nil && p.PatchPrior != nil
}

func (p *MyUnionPatch) IsSetEnsure() bool {
  return p != nil && p.Ensure != nil
}

func (p *MyUnionPatch) IsSetPatch() bool {
  return p != nil && p.Patch != nil
}

type MyUnionPatchBuilder struct {
  obj *MyUnionPatch
}

func NewMyUnionPatchBuilder() *MyUnionPatchBuilder{
  return &MyUnionPatchBuilder{
    obj: NewMyUnionPatch(),
  }
}

func (p MyUnionPatchBuilder) Emit() *MyUnionPatch{
  return &MyUnionPatch{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
    PatchPrior: p.obj.PatchPrior,
    Ensure: p.obj.Ensure,
    Patch: p.obj.Patch,
  }
}

func (m *MyUnionPatchBuilder) Assign(assign *MyUnion) *MyUnionPatchBuilder {
  m.obj.Assign = assign
  return m
}

func (m *MyUnionPatchBuilder) Clear(clear bool) *MyUnionPatchBuilder {
  m.obj.Clear = clear
  return m
}

func (m *MyUnionPatchBuilder) PatchPrior(patchPrior *MyUnionFieldPatch) *MyUnionPatchBuilder {
  m.obj.PatchPrior = patchPrior
  return m
}

func (m *MyUnionPatchBuilder) Ensure(ensure *MyUnion) *MyUnionPatchBuilder {
  m.obj.Ensure = ensure
  return m
}

func (m *MyUnionPatchBuilder) Patch(patch *MyUnionFieldPatch) *MyUnionPatchBuilder {
  m.obj.Patch = patch
  return m
}

func (m *MyUnionPatch) SetAssign(assign *MyUnion) *MyUnionPatch {
  m.Assign = assign
  return m
}

func (m *MyUnionPatch) SetClear(clear bool) *MyUnionPatch {
  m.Clear = clear
  return m
}

func (m *MyUnionPatch) SetPatchPrior(patchPrior *MyUnionFieldPatch) *MyUnionPatch {
  m.PatchPrior = patchPrior
  return m
}

func (m *MyUnionPatch) SetEnsure(ensure *MyUnion) *MyUnionPatch {
  m.Ensure = ensure
  return m
}

func (m *MyUnionPatch) SetPatch(patch *MyUnionFieldPatch) *MyUnionPatch {
  m.Patch = patch
  return m
}

func (p *MyUnionPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyUnionPatch)  ReadField1(iprot thrift.Protocol) error {
  p.Assign = NewMyUnion()
  if err := p.Assign.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Assign), err)
  }
  return nil
}

func (p *MyUnionPatch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *MyUnionPatch)  ReadField3(iprot thrift.Protocol) error {
  p.PatchPrior = NewMyUnionFieldPatch()
  if err := p.PatchPrior.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PatchPrior), err)
  }
  return nil
}

func (p *MyUnionPatch)  ReadField4(iprot thrift.Protocol) error {
  p.Ensure = NewMyUnion()
  if err := p.Ensure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ensure), err)
  }
  return nil
}

func (p *MyUnionPatch)  ReadField6(iprot thrift.Protocol) error {
  p.Patch = NewMyUnionFieldPatch()
  if err := p.Patch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Patch), err)
  }
  return nil
}

func (p *MyUnionPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyUnionPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyUnionPatch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := p.Assign.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Assign), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *MyUnionPatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *MyUnionPatch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patchPrior: ", p), err) }
  if err := p.PatchPrior.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PatchPrior), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patchPrior: ", p), err) }
  return err
}

func (p *MyUnionPatch) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("ensure", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ensure: ", p), err) }
  if err := p.Ensure.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ensure), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ensure: ", p), err) }
  return err
}

func (p *MyUnionPatch) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:patch: ", p), err) }
  if err := p.Patch.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Patch), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:patch: ", p), err) }
  return err
}

func (p *MyUnionPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var assignVal string
  if p.Assign == nil {
    assignVal = "<nil>"
  } else {
    assignVal = fmt.Sprintf("%v", p.Assign)
  }
  clearVal := fmt.Sprintf("%v", p.Clear)
  var patchPriorVal string
  if p.PatchPrior == nil {
    patchPriorVal = "<nil>"
  } else {
    patchPriorVal = fmt.Sprintf("%v", p.PatchPrior)
  }
  var ensureVal string
  if p.Ensure == nil {
    ensureVal = "<nil>"
  } else {
    ensureVal = fmt.Sprintf("%v", p.Ensure)
  }
  var patchVal string
  if p.Patch == nil {
    patchVal = "<nil>"
  } else {
    patchVal = fmt.Sprintf("%v", p.Patch)
  }
  return fmt.Sprintf("MyUnionPatch({Assign:%s Clear:%s PatchPrior:%s Ensure:%s Patch:%s})", assignVal, clearVal, patchPriorVal, ensureVal, patchVal)
}

// Attributes:
//  - BoolVal
//  - ByteVal
//  - I16Val
//  - I32Val
//  - I64Val
//  - FloatVal
//  - DoubleVal
//  - StringVal
//  - BinaryVal
//  - StructVal
//  - OptBoolVal
//  - OptByteVal
//  - OptI16Val
//  - OptI32Val
//  - OptI64Val
//  - OptFloatVal
//  - OptDoubleVal
//  - OptStringVal
//  - OptBinaryVal
//  - OptStructVal
//  - OptListVal
//  - OptSetVal
//  - OptMapVal
//  - UnionVal
type MyStructFieldPatch struct {
  BoolVal *patch1.BoolPatch `thrift:"boolVal,1" db:"boolVal" json:"boolVal"`
  ByteVal *patch1.BytePatch `thrift:"byteVal,2" db:"byteVal" json:"byteVal"`
  I16Val *patch1.I16Patch `thrift:"i16Val,3" db:"i16Val" json:"i16Val"`
  I32Val *patch1.I32Patch `thrift:"i32Val,4" db:"i32Val" json:"i32Val"`
  I64Val *patch1.I64Patch `thrift:"i64Val,5" db:"i64Val" json:"i64Val"`
  FloatVal *patch1.FloatPatch `thrift:"floatVal,6" db:"floatVal" json:"floatVal"`
  DoubleVal *patch1.DoublePatch `thrift:"doubleVal,7" db:"doubleVal" json:"doubleVal"`
  StringVal *patch1.StringPatch `thrift:"stringVal,8" db:"stringVal" json:"stringVal"`
  BinaryVal *patch1.BinaryPatch `thrift:"binaryVal,9" db:"binaryVal" json:"binaryVal"`
  StructVal *MyDataPatch `thrift:"structVal,10" db:"structVal" json:"structVal"`
  OptBoolVal *patch1.BoolPatch `thrift:"optBoolVal,11" db:"optBoolVal" json:"optBoolVal"`
  OptByteVal *patch1.BytePatch `thrift:"optByteVal,12" db:"optByteVal" json:"optByteVal"`
  OptI16Val *patch1.I16Patch `thrift:"optI16Val,13" db:"optI16Val" json:"optI16Val"`
  OptI32Val *patch1.I32Patch `thrift:"optI32Val,14" db:"optI32Val" json:"optI32Val"`
  OptI64Val *patch1.I64Patch `thrift:"optI64Val,15" db:"optI64Val" json:"optI64Val"`
  OptFloatVal *patch1.FloatPatch `thrift:"optFloatVal,16" db:"optFloatVal" json:"optFloatVal"`
  OptDoubleVal *patch1.DoublePatch `thrift:"optDoubleVal,17" db:"optDoubleVal" json:"optDoubleVal"`
  OptStringVal *patch1.StringPatch `thrift:"optStringVal,18" db:"optStringVal" json:"optStringVal"`
  OptBinaryVal *patch1.BinaryPatch `thrift:"optBinaryVal,19" db:"optBinaryVal" json:"optBinaryVal"`
  OptStructVal *MyDataPatch `thrift:"optStructVal,20" db:"optStructVal" json:"optStructVal"`
  OptListVal *MyStructField21Patch `thrift:"optListVal,21" db:"optListVal" json:"optListVal"`
  OptSetVal *MyStructField22Patch `thrift:"optSetVal,22" db:"optSetVal" json:"optSetVal"`
  OptMapVal *MyStructField23Patch `thrift:"optMapVal,23" db:"optMapVal" json:"optMapVal"`
  // unused fields # 24 to 29
  UnionVal *MyUnionPatch `thrift:"unionVal,30" db:"unionVal" json:"unionVal"`
}

func NewMyStructFieldPatch() *MyStructFieldPatch {
  return &MyStructFieldPatch{
    BoolVal: patch1.NewBoolPatch(),
    ByteVal: patch1.NewBytePatch(),
    I16Val: patch1.NewI16Patch(),
    I32Val: patch1.NewI32Patch(),
    I64Val: patch1.NewI64Patch(),
    FloatVal: patch1.NewFloatPatch(),
    DoubleVal: patch1.NewDoublePatch(),
    StringVal: patch1.NewStringPatch(),
    BinaryVal: patch1.NewBinaryPatch(),
    StructVal: NewMyDataPatch(),
    OptBoolVal: patch1.NewBoolPatch(),
    OptByteVal: patch1.NewBytePatch(),
    OptI16Val: patch1.NewI16Patch(),
    OptI32Val: patch1.NewI32Patch(),
    OptI64Val: patch1.NewI64Patch(),
    OptFloatVal: patch1.NewFloatPatch(),
    OptDoubleVal: patch1.NewDoublePatch(),
    OptStringVal: patch1.NewStringPatch(),
    OptBinaryVal: patch1.NewBinaryPatch(),
    OptStructVal: NewMyDataPatch(),
    OptListVal: NewMyStructField21Patch(),
    OptSetVal: NewMyStructField22Patch(),
    OptMapVal: NewMyStructField23Patch(),
    UnionVal: NewMyUnionPatch(),
  }
}

var MyStructFieldPatch_BoolVal_DEFAULT *patch1.BoolPatch
func (p *MyStructFieldPatch) GetBoolVal() *patch1.BoolPatch {
  if !p.IsSetBoolVal() {
    return MyStructFieldPatch_BoolVal_DEFAULT
  }
return p.BoolVal
}
var MyStructFieldPatch_ByteVal_DEFAULT *patch1.BytePatch
func (p *MyStructFieldPatch) GetByteVal() *patch1.BytePatch {
  if !p.IsSetByteVal() {
    return MyStructFieldPatch_ByteVal_DEFAULT
  }
return p.ByteVal
}
var MyStructFieldPatch_I16Val_DEFAULT *patch1.I16Patch
func (p *MyStructFieldPatch) GetI16Val() *patch1.I16Patch {
  if !p.IsSetI16Val() {
    return MyStructFieldPatch_I16Val_DEFAULT
  }
return p.I16Val
}
var MyStructFieldPatch_I32Val_DEFAULT *patch1.I32Patch
func (p *MyStructFieldPatch) GetI32Val() *patch1.I32Patch {
  if !p.IsSetI32Val() {
    return MyStructFieldPatch_I32Val_DEFAULT
  }
return p.I32Val
}
var MyStructFieldPatch_I64Val_DEFAULT *patch1.I64Patch
func (p *MyStructFieldPatch) GetI64Val() *patch1.I64Patch {
  if !p.IsSetI64Val() {
    return MyStructFieldPatch_I64Val_DEFAULT
  }
return p.I64Val
}
var MyStructFieldPatch_FloatVal_DEFAULT *patch1.FloatPatch
func (p *MyStructFieldPatch) GetFloatVal() *patch1.FloatPatch {
  if !p.IsSetFloatVal() {
    return MyStructFieldPatch_FloatVal_DEFAULT
  }
return p.FloatVal
}
var MyStructFieldPatch_DoubleVal_DEFAULT *patch1.DoublePatch
func (p *MyStructFieldPatch) GetDoubleVal() *patch1.DoublePatch {
  if !p.IsSetDoubleVal() {
    return MyStructFieldPatch_DoubleVal_DEFAULT
  }
return p.DoubleVal
}
var MyStructFieldPatch_StringVal_DEFAULT *patch1.StringPatch
func (p *MyStructFieldPatch) GetStringVal() *patch1.StringPatch {
  if !p.IsSetStringVal() {
    return MyStructFieldPatch_StringVal_DEFAULT
  }
return p.StringVal
}
var MyStructFieldPatch_BinaryVal_DEFAULT *patch1.BinaryPatch
func (p *MyStructFieldPatch) GetBinaryVal() *patch1.BinaryPatch {
  if !p.IsSetBinaryVal() {
    return MyStructFieldPatch_BinaryVal_DEFAULT
  }
return p.BinaryVal
}
var MyStructFieldPatch_StructVal_DEFAULT *MyDataPatch
func (p *MyStructFieldPatch) GetStructVal() *MyDataPatch {
  if !p.IsSetStructVal() {
    return MyStructFieldPatch_StructVal_DEFAULT
  }
return p.StructVal
}
var MyStructFieldPatch_OptBoolVal_DEFAULT *patch1.BoolPatch
func (p *MyStructFieldPatch) GetOptBoolVal() *patch1.BoolPatch {
  if !p.IsSetOptBoolVal() {
    return MyStructFieldPatch_OptBoolVal_DEFAULT
  }
return p.OptBoolVal
}
var MyStructFieldPatch_OptByteVal_DEFAULT *patch1.BytePatch
func (p *MyStructFieldPatch) GetOptByteVal() *patch1.BytePatch {
  if !p.IsSetOptByteVal() {
    return MyStructFieldPatch_OptByteVal_DEFAULT
  }
return p.OptByteVal
}
var MyStructFieldPatch_OptI16Val_DEFAULT *patch1.I16Patch
func (p *MyStructFieldPatch) GetOptI16Val() *patch1.I16Patch {
  if !p.IsSetOptI16Val() {
    return MyStructFieldPatch_OptI16Val_DEFAULT
  }
return p.OptI16Val
}
var MyStructFieldPatch_OptI32Val_DEFAULT *patch1.I32Patch
func (p *MyStructFieldPatch) GetOptI32Val() *patch1.I32Patch {
  if !p.IsSetOptI32Val() {
    return MyStructFieldPatch_OptI32Val_DEFAULT
  }
return p.OptI32Val
}
var MyStructFieldPatch_OptI64Val_DEFAULT *patch1.I64Patch
func (p *MyStructFieldPatch) GetOptI64Val() *patch1.I64Patch {
  if !p.IsSetOptI64Val() {
    return MyStructFieldPatch_OptI64Val_DEFAULT
  }
return p.OptI64Val
}
var MyStructFieldPatch_OptFloatVal_DEFAULT *patch1.FloatPatch
func (p *MyStructFieldPatch) GetOptFloatVal() *patch1.FloatPatch {
  if !p.IsSetOptFloatVal() {
    return MyStructFieldPatch_OptFloatVal_DEFAULT
  }
return p.OptFloatVal
}
var MyStructFieldPatch_OptDoubleVal_DEFAULT *patch1.DoublePatch
func (p *MyStructFieldPatch) GetOptDoubleVal() *patch1.DoublePatch {
  if !p.IsSetOptDoubleVal() {
    return MyStructFieldPatch_OptDoubleVal_DEFAULT
  }
return p.OptDoubleVal
}
var MyStructFieldPatch_OptStringVal_DEFAULT *patch1.StringPatch
func (p *MyStructFieldPatch) GetOptStringVal() *patch1.StringPatch {
  if !p.IsSetOptStringVal() {
    return MyStructFieldPatch_OptStringVal_DEFAULT
  }
return p.OptStringVal
}
var MyStructFieldPatch_OptBinaryVal_DEFAULT *patch1.BinaryPatch
func (p *MyStructFieldPatch) GetOptBinaryVal() *patch1.BinaryPatch {
  if !p.IsSetOptBinaryVal() {
    return MyStructFieldPatch_OptBinaryVal_DEFAULT
  }
return p.OptBinaryVal
}
var MyStructFieldPatch_OptStructVal_DEFAULT *MyDataPatch
func (p *MyStructFieldPatch) GetOptStructVal() *MyDataPatch {
  if !p.IsSetOptStructVal() {
    return MyStructFieldPatch_OptStructVal_DEFAULT
  }
return p.OptStructVal
}
var MyStructFieldPatch_OptListVal_DEFAULT *MyStructField21Patch
func (p *MyStructFieldPatch) GetOptListVal() *MyStructField21Patch {
  if !p.IsSetOptListVal() {
    return MyStructFieldPatch_OptListVal_DEFAULT
  }
return p.OptListVal
}
var MyStructFieldPatch_OptSetVal_DEFAULT *MyStructField22Patch
func (p *MyStructFieldPatch) GetOptSetVal() *MyStructField22Patch {
  if !p.IsSetOptSetVal() {
    return MyStructFieldPatch_OptSetVal_DEFAULT
  }
return p.OptSetVal
}
var MyStructFieldPatch_OptMapVal_DEFAULT *MyStructField23Patch
func (p *MyStructFieldPatch) GetOptMapVal() *MyStructField23Patch {
  if !p.IsSetOptMapVal() {
    return MyStructFieldPatch_OptMapVal_DEFAULT
  }
return p.OptMapVal
}
var MyStructFieldPatch_UnionVal_DEFAULT *MyUnionPatch
func (p *MyStructFieldPatch) GetUnionVal() *MyUnionPatch {
  if !p.IsSetUnionVal() {
    return MyStructFieldPatch_UnionVal_DEFAULT
  }
return p.UnionVal
}
func (p *MyStructFieldPatch) IsSetBoolVal() bool {
  return p != nil && p.BoolVal != nil
}

func (p *MyStructFieldPatch) IsSetByteVal() bool {
  return p != nil && p.ByteVal != nil
}

func (p *MyStructFieldPatch) IsSetI16Val() bool {
  return p != nil && p.I16Val != nil
}

func (p *MyStructFieldPatch) IsSetI32Val() bool {
  return p != nil && p.I32Val != nil
}

func (p *MyStructFieldPatch) IsSetI64Val() bool {
  return p != nil && p.I64Val != nil
}

func (p *MyStructFieldPatch) IsSetFloatVal() bool {
  return p != nil && p.FloatVal != nil
}

func (p *MyStructFieldPatch) IsSetDoubleVal() bool {
  return p != nil && p.DoubleVal != nil
}

func (p *MyStructFieldPatch) IsSetStringVal() bool {
  return p != nil && p.StringVal != nil
}

func (p *MyStructFieldPatch) IsSetBinaryVal() bool {
  return p != nil && p.BinaryVal != nil
}

func (p *MyStructFieldPatch) IsSetStructVal() bool {
  return p != nil && p.StructVal != nil
}

func (p *MyStructFieldPatch) IsSetOptBoolVal() bool {
  return p != nil && p.OptBoolVal != nil
}

func (p *MyStructFieldPatch) IsSetOptByteVal() bool {
  return p != nil && p.OptByteVal != nil
}

func (p *MyStructFieldPatch) IsSetOptI16Val() bool {
  return p != nil && p.OptI16Val != nil
}

func (p *MyStructFieldPatch) IsSetOptI32Val() bool {
  return p != nil && p.OptI32Val != nil
}

func (p *MyStructFieldPatch) IsSetOptI64Val() bool {
  return p != nil && p.OptI64Val != nil
}

func (p *MyStructFieldPatch) IsSetOptFloatVal() bool {
  return p != nil && p.OptFloatVal != nil
}

func (p *MyStructFieldPatch) IsSetOptDoubleVal() bool {
  return p != nil && p.OptDoubleVal != nil
}

func (p *MyStructFieldPatch) IsSetOptStringVal() bool {
  return p != nil && p.OptStringVal != nil
}

func (p *MyStructFieldPatch) IsSetOptBinaryVal() bool {
  return p != nil && p.OptBinaryVal != nil
}

func (p *MyStructFieldPatch) IsSetOptStructVal() bool {
  return p != nil && p.OptStructVal != nil
}

func (p *MyStructFieldPatch) IsSetOptListVal() bool {
  return p != nil && p.OptListVal != nil
}

func (p *MyStructFieldPatch) IsSetOptSetVal() bool {
  return p != nil && p.OptSetVal != nil
}

func (p *MyStructFieldPatch) IsSetOptMapVal() bool {
  return p != nil && p.OptMapVal != nil
}

func (p *MyStructFieldPatch) IsSetUnionVal() bool {
  return p != nil && p.UnionVal != nil
}

type MyStructFieldPatchBuilder struct {
  obj *MyStructFieldPatch
}

func NewMyStructFieldPatchBuilder() *MyStructFieldPatchBuilder{
  return &MyStructFieldPatchBuilder{
    obj: NewMyStructFieldPatch(),
  }
}

func (p MyStructFieldPatchBuilder) Emit() *MyStructFieldPatch{
  return &MyStructFieldPatch{
    BoolVal: p.obj.BoolVal,
    ByteVal: p.obj.ByteVal,
    I16Val: p.obj.I16Val,
    I32Val: p.obj.I32Val,
    I64Val: p.obj.I64Val,
    FloatVal: p.obj.FloatVal,
    DoubleVal: p.obj.DoubleVal,
    StringVal: p.obj.StringVal,
    BinaryVal: p.obj.BinaryVal,
    StructVal: p.obj.StructVal,
    OptBoolVal: p.obj.OptBoolVal,
    OptByteVal: p.obj.OptByteVal,
    OptI16Val: p.obj.OptI16Val,
    OptI32Val: p.obj.OptI32Val,
    OptI64Val: p.obj.OptI64Val,
    OptFloatVal: p.obj.OptFloatVal,
    OptDoubleVal: p.obj.OptDoubleVal,
    OptStringVal: p.obj.OptStringVal,
    OptBinaryVal: p.obj.OptBinaryVal,
    OptStructVal: p.obj.OptStructVal,
    OptListVal: p.obj.OptListVal,
    OptSetVal: p.obj.OptSetVal,
    OptMapVal: p.obj.OptMapVal,
    UnionVal: p.obj.UnionVal,
  }
}

func (m *MyStructFieldPatchBuilder) BoolVal(boolVal *patch1.BoolPatch) *MyStructFieldPatchBuilder {
  m.obj.BoolVal = boolVal
  return m
}

func (m *MyStructFieldPatchBuilder) ByteVal(byteVal *patch1.BytePatch) *MyStructFieldPatchBuilder {
  m.obj.ByteVal = byteVal
  return m
}

func (m *MyStructFieldPatchBuilder) I16Val(i16Val *patch1.I16Patch) *MyStructFieldPatchBuilder {
  m.obj.I16Val = i16Val
  return m
}

func (m *MyStructFieldPatchBuilder) I32Val(i32Val *patch1.I32Patch) *MyStructFieldPatchBuilder {
  m.obj.I32Val = i32Val
  return m
}

func (m *MyStructFieldPatchBuilder) I64Val(i64Val *patch1.I64Patch) *MyStructFieldPatchBuilder {
  m.obj.I64Val = i64Val
  return m
}

func (m *MyStructFieldPatchBuilder) FloatVal(floatVal *patch1.FloatPatch) *MyStructFieldPatchBuilder {
  m.obj.FloatVal = floatVal
  return m
}

func (m *MyStructFieldPatchBuilder) DoubleVal(doubleVal *patch1.DoublePatch) *MyStructFieldPatchBuilder {
  m.obj.DoubleVal = doubleVal
  return m
}

func (m *MyStructFieldPatchBuilder) StringVal(stringVal *patch1.StringPatch) *MyStructFieldPatchBuilder {
  m.obj.StringVal = stringVal
  return m
}

func (m *MyStructFieldPatchBuilder) BinaryVal(binaryVal *patch1.BinaryPatch) *MyStructFieldPatchBuilder {
  m.obj.BinaryVal = binaryVal
  return m
}

func (m *MyStructFieldPatchBuilder) StructVal(structVal *MyDataPatch) *MyStructFieldPatchBuilder {
  m.obj.StructVal = structVal
  return m
}

func (m *MyStructFieldPatchBuilder) OptBoolVal(optBoolVal *patch1.BoolPatch) *MyStructFieldPatchBuilder {
  m.obj.OptBoolVal = optBoolVal
  return m
}

func (m *MyStructFieldPatchBuilder) OptByteVal(optByteVal *patch1.BytePatch) *MyStructFieldPatchBuilder {
  m.obj.OptByteVal = optByteVal
  return m
}

func (m *MyStructFieldPatchBuilder) OptI16Val(optI16Val *patch1.I16Patch) *MyStructFieldPatchBuilder {
  m.obj.OptI16Val = optI16Val
  return m
}

func (m *MyStructFieldPatchBuilder) OptI32Val(optI32Val *patch1.I32Patch) *MyStructFieldPatchBuilder {
  m.obj.OptI32Val = optI32Val
  return m
}

func (m *MyStructFieldPatchBuilder) OptI64Val(optI64Val *patch1.I64Patch) *MyStructFieldPatchBuilder {
  m.obj.OptI64Val = optI64Val
  return m
}

func (m *MyStructFieldPatchBuilder) OptFloatVal(optFloatVal *patch1.FloatPatch) *MyStructFieldPatchBuilder {
  m.obj.OptFloatVal = optFloatVal
  return m
}

func (m *MyStructFieldPatchBuilder) OptDoubleVal(optDoubleVal *patch1.DoublePatch) *MyStructFieldPatchBuilder {
  m.obj.OptDoubleVal = optDoubleVal
  return m
}

func (m *MyStructFieldPatchBuilder) OptStringVal(optStringVal *patch1.StringPatch) *MyStructFieldPatchBuilder {
  m.obj.OptStringVal = optStringVal
  return m
}

func (m *MyStructFieldPatchBuilder) OptBinaryVal(optBinaryVal *patch1.BinaryPatch) *MyStructFieldPatchBuilder {
  m.obj.OptBinaryVal = optBinaryVal
  return m
}

func (m *MyStructFieldPatchBuilder) OptStructVal(optStructVal *MyDataPatch) *MyStructFieldPatchBuilder {
  m.obj.OptStructVal = optStructVal
  return m
}

func (m *MyStructFieldPatchBuilder) OptListVal(optListVal *MyStructField21Patch) *MyStructFieldPatchBuilder {
  m.obj.OptListVal = optListVal
  return m
}

func (m *MyStructFieldPatchBuilder) OptSetVal(optSetVal *MyStructField22Patch) *MyStructFieldPatchBuilder {
  m.obj.OptSetVal = optSetVal
  return m
}

func (m *MyStructFieldPatchBuilder) OptMapVal(optMapVal *MyStructField23Patch) *MyStructFieldPatchBuilder {
  m.obj.OptMapVal = optMapVal
  return m
}

func (m *MyStructFieldPatchBuilder) UnionVal(unionVal *MyUnionPatch) *MyStructFieldPatchBuilder {
  m.obj.UnionVal = unionVal
  return m
}

func (m *MyStructFieldPatch) SetBoolVal(boolVal *patch1.BoolPatch) *MyStructFieldPatch {
  m.BoolVal = boolVal
  return m
}

func (m *MyStructFieldPatch) SetByteVal(byteVal *patch1.BytePatch) *MyStructFieldPatch {
  m.ByteVal = byteVal
  return m
}

func (m *MyStructFieldPatch) SetI16Val(i16Val *patch1.I16Patch) *MyStructFieldPatch {
  m.I16Val = i16Val
  return m
}

func (m *MyStructFieldPatch) SetI32Val(i32Val *patch1.I32Patch) *MyStructFieldPatch {
  m.I32Val = i32Val
  return m
}

func (m *MyStructFieldPatch) SetI64Val(i64Val *patch1.I64Patch) *MyStructFieldPatch {
  m.I64Val = i64Val
  return m
}

func (m *MyStructFieldPatch) SetFloatVal(floatVal *patch1.FloatPatch) *MyStructFieldPatch {
  m.FloatVal = floatVal
  return m
}

func (m *MyStructFieldPatch) SetDoubleVal(doubleVal *patch1.DoublePatch) *MyStructFieldPatch {
  m.DoubleVal = doubleVal
  return m
}

func (m *MyStructFieldPatch) SetStringVal(stringVal *patch1.StringPatch) *MyStructFieldPatch {
  m.StringVal = stringVal
  return m
}

func (m *MyStructFieldPatch) SetBinaryVal(binaryVal *patch1.BinaryPatch) *MyStructFieldPatch {
  m.BinaryVal = binaryVal
  return m
}

func (m *MyStructFieldPatch) SetStructVal(structVal *MyDataPatch) *MyStructFieldPatch {
  m.StructVal = structVal
  return m
}

func (m *MyStructFieldPatch) SetOptBoolVal(optBoolVal *patch1.BoolPatch) *MyStructFieldPatch {
  m.OptBoolVal = optBoolVal
  return m
}

func (m *MyStructFieldPatch) SetOptByteVal(optByteVal *patch1.BytePatch) *MyStructFieldPatch {
  m.OptByteVal = optByteVal
  return m
}

func (m *MyStructFieldPatch) SetOptI16Val(optI16Val *patch1.I16Patch) *MyStructFieldPatch {
  m.OptI16Val = optI16Val
  return m
}

func (m *MyStructFieldPatch) SetOptI32Val(optI32Val *patch1.I32Patch) *MyStructFieldPatch {
  m.OptI32Val = optI32Val
  return m
}

func (m *MyStructFieldPatch) SetOptI64Val(optI64Val *patch1.I64Patch) *MyStructFieldPatch {
  m.OptI64Val = optI64Val
  return m
}

func (m *MyStructFieldPatch) SetOptFloatVal(optFloatVal *patch1.FloatPatch) *MyStructFieldPatch {
  m.OptFloatVal = optFloatVal
  return m
}

func (m *MyStructFieldPatch) SetOptDoubleVal(optDoubleVal *patch1.DoublePatch) *MyStructFieldPatch {
  m.OptDoubleVal = optDoubleVal
  return m
}

func (m *MyStructFieldPatch) SetOptStringVal(optStringVal *patch1.StringPatch) *MyStructFieldPatch {
  m.OptStringVal = optStringVal
  return m
}

func (m *MyStructFieldPatch) SetOptBinaryVal(optBinaryVal *patch1.BinaryPatch) *MyStructFieldPatch {
  m.OptBinaryVal = optBinaryVal
  return m
}

func (m *MyStructFieldPatch) SetOptStructVal(optStructVal *MyDataPatch) *MyStructFieldPatch {
  m.OptStructVal = optStructVal
  return m
}

func (m *MyStructFieldPatch) SetOptListVal(optListVal *MyStructField21Patch) *MyStructFieldPatch {
  m.OptListVal = optListVal
  return m
}

func (m *MyStructFieldPatch) SetOptSetVal(optSetVal *MyStructField22Patch) *MyStructFieldPatch {
  m.OptSetVal = optSetVal
  return m
}

func (m *MyStructFieldPatch) SetOptMapVal(optMapVal *MyStructField23Patch) *MyStructFieldPatch {
  m.OptMapVal = optMapVal
  return m
}

func (m *MyStructFieldPatch) SetUnionVal(unionVal *MyUnionPatch) *MyStructFieldPatch {
  m.UnionVal = unionVal
  return m
}

func (p *MyStructFieldPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 13:
      if err := p.ReadField13(iprot); err != nil {
        return err
      }
    case 14:
      if err := p.ReadField14(iprot); err != nil {
        return err
      }
    case 15:
      if err := p.ReadField15(iprot); err != nil {
        return err
      }
    case 16:
      if err := p.ReadField16(iprot); err != nil {
        return err
      }
    case 17:
      if err := p.ReadField17(iprot); err != nil {
        return err
      }
    case 18:
      if err := p.ReadField18(iprot); err != nil {
        return err
      }
    case 19:
      if err := p.ReadField19(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 21:
      if err := p.ReadField21(iprot); err != nil {
        return err
      }
    case 22:
      if err := p.ReadField22(iprot); err != nil {
        return err
      }
    case 23:
      if err := p.ReadField23(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField1(iprot thrift.Protocol) error {
  p.BoolVal = patch1.NewBoolPatch()
  if err := p.BoolVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BoolVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField2(iprot thrift.Protocol) error {
  p.ByteVal = patch1.NewBytePatch()
  if err := p.ByteVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ByteVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField3(iprot thrift.Protocol) error {
  p.I16Val = patch1.NewI16Patch()
  if err := p.I16Val.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.I16Val), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField4(iprot thrift.Protocol) error {
  p.I32Val = patch1.NewI32Patch()
  if err := p.I32Val.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.I32Val), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField5(iprot thrift.Protocol) error {
  p.I64Val = patch1.NewI64Patch()
  if err := p.I64Val.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.I64Val), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField6(iprot thrift.Protocol) error {
  p.FloatVal = patch1.NewFloatPatch()
  if err := p.FloatVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FloatVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField7(iprot thrift.Protocol) error {
  p.DoubleVal = patch1.NewDoublePatch()
  if err := p.DoubleVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DoubleVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField8(iprot thrift.Protocol) error {
  p.StringVal = patch1.NewStringPatch()
  if err := p.StringVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StringVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField9(iprot thrift.Protocol) error {
  p.BinaryVal = patch1.NewBinaryPatch()
  if err := p.BinaryVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BinaryVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField10(iprot thrift.Protocol) error {
  p.StructVal = NewMyDataPatch()
  if err := p.StructVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StructVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField11(iprot thrift.Protocol) error {
  p.OptBoolVal = patch1.NewBoolPatch()
  if err := p.OptBoolVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptBoolVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField12(iprot thrift.Protocol) error {
  p.OptByteVal = patch1.NewBytePatch()
  if err := p.OptByteVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptByteVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField13(iprot thrift.Protocol) error {
  p.OptI16Val = patch1.NewI16Patch()
  if err := p.OptI16Val.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptI16Val), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField14(iprot thrift.Protocol) error {
  p.OptI32Val = patch1.NewI32Patch()
  if err := p.OptI32Val.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptI32Val), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField15(iprot thrift.Protocol) error {
  p.OptI64Val = patch1.NewI64Patch()
  if err := p.OptI64Val.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptI64Val), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField16(iprot thrift.Protocol) error {
  p.OptFloatVal = patch1.NewFloatPatch()
  if err := p.OptFloatVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptFloatVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField17(iprot thrift.Protocol) error {
  p.OptDoubleVal = patch1.NewDoublePatch()
  if err := p.OptDoubleVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptDoubleVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField18(iprot thrift.Protocol) error {
  p.OptStringVal = patch1.NewStringPatch()
  if err := p.OptStringVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptStringVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField19(iprot thrift.Protocol) error {
  p.OptBinaryVal = patch1.NewBinaryPatch()
  if err := p.OptBinaryVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptBinaryVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField20(iprot thrift.Protocol) error {
  p.OptStructVal = NewMyDataPatch()
  if err := p.OptStructVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptStructVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField21(iprot thrift.Protocol) error {
  p.OptListVal = NewMyStructField21Patch()
  if err := p.OptListVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptListVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField22(iprot thrift.Protocol) error {
  p.OptSetVal = NewMyStructField22Patch()
  if err := p.OptSetVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptSetVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField23(iprot thrift.Protocol) error {
  p.OptMapVal = NewMyStructField23Patch()
  if err := p.OptMapVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptMapVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField30(iprot thrift.Protocol) error {
  p.UnionVal = NewMyUnionPatch()
  if err := p.UnionVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnionVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStructFieldPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := p.writeField10(oprot); err != nil { return err }
  if err := p.writeField11(oprot); err != nil { return err }
  if err := p.writeField12(oprot); err != nil { return err }
  if err := p.writeField13(oprot); err != nil { return err }
  if err := p.writeField14(oprot); err != nil { return err }
  if err := p.writeField15(oprot); err != nil { return err }
  if err := p.writeField16(oprot); err != nil { return err }
  if err := p.writeField17(oprot); err != nil { return err }
  if err := p.writeField18(oprot); err != nil { return err }
  if err := p.writeField19(oprot); err != nil { return err }
  if err := p.writeField20(oprot); err != nil { return err }
  if err := p.writeField21(oprot); err != nil { return err }
  if err := p.writeField22(oprot); err != nil { return err }
  if err := p.writeField23(oprot); err != nil { return err }
  if err := p.writeField30(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStructFieldPatch) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("boolVal", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:boolVal: ", p), err) }
  if err := p.BoolVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BoolVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:boolVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("byteVal", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:byteVal: ", p), err) }
  if err := p.ByteVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ByteVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:byteVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("i16Val", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:i16Val: ", p), err) }
  if err := p.I16Val.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.I16Val), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:i16Val: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("i32Val", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:i32Val: ", p), err) }
  if err := p.I32Val.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.I32Val), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:i32Val: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("i64Val", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:i64Val: ", p), err) }
  if err := p.I64Val.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.I64Val), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:i64Val: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("floatVal", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:floatVal: ", p), err) }
  if err := p.FloatVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FloatVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:floatVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("doubleVal", thrift.STRUCT, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:doubleVal: ", p), err) }
  if err := p.DoubleVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DoubleVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:doubleVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("stringVal", thrift.STRUCT, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:stringVal: ", p), err) }
  if err := p.StringVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StringVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:stringVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("binaryVal", thrift.STRUCT, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:binaryVal: ", p), err) }
  if err := p.BinaryVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BinaryVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:binaryVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField10(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("structVal", thrift.STRUCT, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:structVal: ", p), err) }
  if err := p.StructVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StructVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:structVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField11(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optBoolVal", thrift.STRUCT, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:optBoolVal: ", p), err) }
  if err := p.OptBoolVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptBoolVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:optBoolVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField12(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optByteVal", thrift.STRUCT, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:optByteVal: ", p), err) }
  if err := p.OptByteVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptByteVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:optByteVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField13(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optI16Val", thrift.STRUCT, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:optI16Val: ", p), err) }
  if err := p.OptI16Val.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptI16Val), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:optI16Val: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField14(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optI32Val", thrift.STRUCT, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:optI32Val: ", p), err) }
  if err := p.OptI32Val.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptI32Val), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:optI32Val: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField15(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optI64Val", thrift.STRUCT, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:optI64Val: ", p), err) }
  if err := p.OptI64Val.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptI64Val), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:optI64Val: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField16(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optFloatVal", thrift.STRUCT, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:optFloatVal: ", p), err) }
  if err := p.OptFloatVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptFloatVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:optFloatVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField17(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optDoubleVal", thrift.STRUCT, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:optDoubleVal: ", p), err) }
  if err := p.OptDoubleVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptDoubleVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:optDoubleVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField18(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optStringVal", thrift.STRUCT, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:optStringVal: ", p), err) }
  if err := p.OptStringVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptStringVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:optStringVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField19(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optBinaryVal", thrift.STRUCT, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:optBinaryVal: ", p), err) }
  if err := p.OptBinaryVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptBinaryVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:optBinaryVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField20(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optStructVal", thrift.STRUCT, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:optStructVal: ", p), err) }
  if err := p.OptStructVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptStructVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:optStructVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField21(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optListVal", thrift.STRUCT, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:optListVal: ", p), err) }
  if err := p.OptListVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptListVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:optListVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField22(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optSetVal", thrift.STRUCT, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:optSetVal: ", p), err) }
  if err := p.OptSetVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptSetVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:optSetVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField23(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optMapVal", thrift.STRUCT, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:optMapVal: ", p), err) }
  if err := p.OptMapVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptMapVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:optMapVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField30(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("unionVal", thrift.STRUCT, 30); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:unionVal: ", p), err) }
  if err := p.UnionVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnionVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 30:unionVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var boolValVal string
  if p.BoolVal == nil {
    boolValVal = "<nil>"
  } else {
    boolValVal = fmt.Sprintf("%v", p.BoolVal)
  }
  var byteValVal string
  if p.ByteVal == nil {
    byteValVal = "<nil>"
  } else {
    byteValVal = fmt.Sprintf("%v", p.ByteVal)
  }
  var i16ValVal string
  if p.I16Val == nil {
    i16ValVal = "<nil>"
  } else {
    i16ValVal = fmt.Sprintf("%v", p.I16Val)
  }
  var i32ValVal string
  if p.I32Val == nil {
    i32ValVal = "<nil>"
  } else {
    i32ValVal = fmt.Sprintf("%v", p.I32Val)
  }
  var i64ValVal string
  if p.I64Val == nil {
    i64ValVal = "<nil>"
  } else {
    i64ValVal = fmt.Sprintf("%v", p.I64Val)
  }
  var floatValVal string
  if p.FloatVal == nil {
    floatValVal = "<nil>"
  } else {
    floatValVal = fmt.Sprintf("%v", p.FloatVal)
  }
  var doubleValVal string
  if p.DoubleVal == nil {
    doubleValVal = "<nil>"
  } else {
    doubleValVal = fmt.Sprintf("%v", p.DoubleVal)
  }
  var stringValVal string
  if p.StringVal == nil {
    stringValVal = "<nil>"
  } else {
    stringValVal = fmt.Sprintf("%v", p.StringVal)
  }
  var binaryValVal string
  if p.BinaryVal == nil {
    binaryValVal = "<nil>"
  } else {
    binaryValVal = fmt.Sprintf("%v", p.BinaryVal)
  }
  var structValVal string
  if p.StructVal == nil {
    structValVal = "<nil>"
  } else {
    structValVal = fmt.Sprintf("%v", p.StructVal)
  }
  var optBoolValVal string
  if p.OptBoolVal == nil {
    optBoolValVal = "<nil>"
  } else {
    optBoolValVal = fmt.Sprintf("%v", p.OptBoolVal)
  }
  var optByteValVal string
  if p.OptByteVal == nil {
    optByteValVal = "<nil>"
  } else {
    optByteValVal = fmt.Sprintf("%v", p.OptByteVal)
  }
  var optI16ValVal string
  if p.OptI16Val == nil {
    optI16ValVal = "<nil>"
  } else {
    optI16ValVal = fmt.Sprintf("%v", p.OptI16Val)
  }
  var optI32ValVal string
  if p.OptI32Val == nil {
    optI32ValVal = "<nil>"
  } else {
    optI32ValVal = fmt.Sprintf("%v", p.OptI32Val)
  }
  var optI64ValVal string
  if p.OptI64Val == nil {
    optI64ValVal = "<nil>"
  } else {
    optI64ValVal = fmt.Sprintf("%v", p.OptI64Val)
  }
  var optFloatValVal string
  if p.OptFloatVal == nil {
    optFloatValVal = "<nil>"
  } else {
    optFloatValVal = fmt.Sprintf("%v", p.OptFloatVal)
  }
  var optDoubleValVal string
  if p.OptDoubleVal == nil {
    optDoubleValVal = "<nil>"
  } else {
    optDoubleValVal = fmt.Sprintf("%v", p.OptDoubleVal)
  }
  var optStringValVal string
  if p.OptStringVal == nil {
    optStringValVal = "<nil>"
  } else {
    optStringValVal = fmt.Sprintf("%v", p.OptStringVal)
  }
  var optBinaryValVal string
  if p.OptBinaryVal == nil {
    optBinaryValVal = "<nil>"
  } else {
    optBinaryValVal = fmt.Sprintf("%v", p.OptBinaryVal)
  }
  var optStructValVal string
  if p.OptStructVal == nil {
    optStructValVal = "<nil>"
  } else {
    optStructValVal = fmt.Sprintf("%v", p.OptStructVal)
  }
  var optListValVal string
  if p.OptListVal == nil {
    optListValVal = "<nil>"
  } else {
    optListValVal = fmt.Sprintf("%v", p.OptListVal)
  }
  var optSetValVal string
  if p.OptSetVal == nil {
    optSetValVal = "<nil>"
  } else {
    optSetValVal = fmt.Sprintf("%v", p.OptSetVal)
  }
  var optMapValVal string
  if p.OptMapVal == nil {
    optMapValVal = "<nil>"
  } else {
    optMapValVal = fmt.Sprintf("%v", p.OptMapVal)
  }
  var unionValVal string
  if p.UnionVal == nil {
    unionValVal = "<nil>"
  } else {
    unionValVal = fmt.Sprintf("%v", p.UnionVal)
  }
  return fmt.Sprintf("MyStructFieldPatch({BoolVal:%s ByteVal:%s I16Val:%s I32Val:%s I64Val:%s FloatVal:%s DoubleVal:%s StringVal:%s BinaryVal:%s StructVal:%s OptBoolVal:%s OptByteVal:%s OptI16Val:%s OptI32Val:%s OptI64Val:%s OptFloatVal:%s OptDoubleVal:%s OptStringVal:%s OptBinaryVal:%s OptStructVal:%s OptListVal:%s OptSetVal:%s OptMapVal:%s UnionVal:%s})", boolValVal, byteValVal, i16ValVal, i32ValVal, i64ValVal, floatValVal, doubleValVal, stringValVal, binaryValVal, structValVal, optBoolValVal, optByteValVal, optI16ValVal, optI32ValVal, optI64ValVal, optFloatValVal, optDoubleValVal, optStringValVal, optBinaryValVal, optStructValVal, optListValVal, optSetValVal, optMapValVal, unionValVal)
}

// Attributes:
//  - Assign: Assigns a value. If set, all other operations are ignored.
//  - Clear: Clears a value. Applies first.
//  - Remove: Removes entries, if present. Applies third.
//  - Prepend: Prepends to the front of a given list.
//  - Append: Appends to the back of a given list.
type MyStructField21Patch struct {
  Assign []int16 `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  // unused fields # 3 to 6
  Remove []int16 `thrift:"remove,7" db:"remove" json:"remove"`
  Prepend []int16 `thrift:"prepend,8" db:"prepend" json:"prepend"`
  Append []int16 `thrift:"append,9" db:"append" json:"append"`
}

func NewMyStructField21Patch() *MyStructField21Patch {
  return &MyStructField21Patch{}
}

var MyStructField21Patch_Assign_DEFAULT []int16

func (p *MyStructField21Patch) GetAssign() []int16 {
  return p.Assign
}

func (p *MyStructField21Patch) GetClear() bool {
  return p.Clear
}

func (p *MyStructField21Patch) GetRemove() []int16 {
  return p.Remove
}

func (p *MyStructField21Patch) GetPrepend() []int16 {
  return p.Prepend
}

func (p *MyStructField21Patch) GetAppend() []int16 {
  return p.Append
}
func (p *MyStructField21Patch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

type MyStructField21PatchBuilder struct {
  obj *MyStructField21Patch
}

func NewMyStructField21PatchBuilder() *MyStructField21PatchBuilder{
  return &MyStructField21PatchBuilder{
    obj: NewMyStructField21Patch(),
  }
}

func (p MyStructField21PatchBuilder) Emit() *MyStructField21Patch{
  return &MyStructField21Patch{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
    Remove: p.obj.Remove,
    Prepend: p.obj.Prepend,
    Append: p.obj.Append,
  }
}

func (m *MyStructField21PatchBuilder) Assign(assign []int16) *MyStructField21PatchBuilder {
  m.obj.Assign = assign
  return m
}

func (m *MyStructField21PatchBuilder) Clear(clear bool) *MyStructField21PatchBuilder {
  m.obj.Clear = clear
  return m
}

func (m *MyStructField21PatchBuilder) Remove(remove []int16) *MyStructField21PatchBuilder {
  m.obj.Remove = remove
  return m
}

func (m *MyStructField21PatchBuilder) Prepend(prepend []int16) *MyStructField21PatchBuilder {
  m.obj.Prepend = prepend
  return m
}

func (m *MyStructField21PatchBuilder) Append(append []int16) *MyStructField21PatchBuilder {
  m.obj.Append = append
  return m
}

func (m *MyStructField21Patch) SetAssign(assign []int16) *MyStructField21Patch {
  m.Assign = assign
  return m
}

func (m *MyStructField21Patch) SetClear(clear bool) *MyStructField21Patch {
  m.Clear = clear
  return m
}

func (m *MyStructField21Patch) SetRemove(remove []int16) *MyStructField21Patch {
  m.Remove = remove
  return m
}

func (m *MyStructField21Patch) SetPrepend(prepend []int16) *MyStructField21Patch {
  m.Prepend = prepend
  return m
}

func (m *MyStructField21Patch) SetAppend(append []int16) *MyStructField21Patch {
  m.Append = append
  return m
}

func (p *MyStructField21Patch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStructField21Patch)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int16, 0, size)
  p.Assign =  tSlice
  for i := 0; i < size; i ++ {
    var _elem6 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem6 = v
    }
    p.Assign = append(p.Assign, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MyStructField21Patch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *MyStructField21Patch)  ReadField7(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int16, 0, size)
  p.Remove =  tSlice
  for i := 0; i < size; i ++ {
    var _elem7 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem7 = v
    }
    p.Remove = append(p.Remove, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MyStructField21Patch)  ReadField8(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int16, 0, size)
  p.Prepend =  tSlice
  for i := 0; i < size; i ++ {
    var _elem8 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem8 = v
    }
    p.Prepend = append(p.Prepend, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MyStructField21Patch)  ReadField9(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int16, 0, size)
  p.Append =  tSlice
  for i := 0; i < size; i ++ {
    var _elem9 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem9 = v
    }
    p.Append = append(p.Append, _elem9)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MyStructField21Patch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStructField21Patch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStructField21Patch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I16, len(p.Assign)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Assign {
      if err := oprot.WriteI16(int16(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *MyStructField21Patch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *MyStructField21Patch) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("remove", thrift.LIST, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:remove: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I16, len(p.Remove)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Remove {
    if err := oprot.WriteI16(int16(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:remove: ", p), err) }
  return err
}

func (p *MyStructField21Patch) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("prepend", thrift.LIST, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:prepend: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I16, len(p.Prepend)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Prepend {
    if err := oprot.WriteI16(int16(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:prepend: ", p), err) }
  return err
}

func (p *MyStructField21Patch) writeField9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("append", thrift.LIST, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:append: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I16, len(p.Append)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Append {
    if err := oprot.WriteI16(int16(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:append: ", p), err) }
  return err
}

func (p *MyStructField21Patch) String() string {
  if p == nil {
    return "<nil>"
  }

  assignVal := fmt.Sprintf("%v", p.Assign)
  clearVal := fmt.Sprintf("%v", p.Clear)
  removeVal := fmt.Sprintf("%v", p.Remove)
  prependVal := fmt.Sprintf("%v", p.Prepend)
  appendVal := fmt.Sprintf("%v", p.Append)
  return fmt.Sprintf("MyStructField21Patch({Assign:%s Clear:%s Remove:%s Prepend:%s Append:%s})", assignVal, clearVal, removeVal, prependVal, appendVal)
}

// Attributes:
//  - Assign: Assigns a value. If set, all other operations are ignored.
//  - Clear: Clears a value. Applies first.
//  - Remove: Removes entries, if present. Applies third.
//  - Add: Adds entries, if not already present. Applies fourth.
type MyStructField22Patch struct {
  Assign []string `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  // unused fields # 3 to 6
  Remove []string `thrift:"remove,7" db:"remove" json:"remove"`
  Add []string `thrift:"add,8" db:"add" json:"add"`
}

func NewMyStructField22Patch() *MyStructField22Patch {
  return &MyStructField22Patch{}
}

var MyStructField22Patch_Assign_DEFAULT []string

func (p *MyStructField22Patch) GetAssign() []string {
  return p.Assign
}

func (p *MyStructField22Patch) GetClear() bool {
  return p.Clear
}

func (p *MyStructField22Patch) GetRemove() []string {
  return p.Remove
}

func (p *MyStructField22Patch) GetAdd() []string {
  return p.Add
}
func (p *MyStructField22Patch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

type MyStructField22PatchBuilder struct {
  obj *MyStructField22Patch
}

func NewMyStructField22PatchBuilder() *MyStructField22PatchBuilder{
  return &MyStructField22PatchBuilder{
    obj: NewMyStructField22Patch(),
  }
}

func (p MyStructField22PatchBuilder) Emit() *MyStructField22Patch{
  return &MyStructField22Patch{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
    Remove: p.obj.Remove,
    Add: p.obj.Add,
  }
}

func (m *MyStructField22PatchBuilder) Assign(assign []string) *MyStructField22PatchBuilder {
  m.obj.Assign = assign
  return m
}

func (m *MyStructField22PatchBuilder) Clear(clear bool) *MyStructField22PatchBuilder {
  m.obj.Clear = clear
  return m
}

func (m *MyStructField22PatchBuilder) Remove(remove []string) *MyStructField22PatchBuilder {
  m.obj.Remove = remove
  return m
}

func (m *MyStructField22PatchBuilder) Add(add []string) *MyStructField22PatchBuilder {
  m.obj.Add = add
  return m
}

func (m *MyStructField22Patch) SetAssign(assign []string) *MyStructField22Patch {
  m.Assign = assign
  return m
}

func (m *MyStructField22Patch) SetClear(clear bool) *MyStructField22Patch {
  m.Clear = clear
  return m
}

func (m *MyStructField22Patch) SetRemove(remove []string) *MyStructField22Patch {
  m.Remove = remove
  return m
}

func (m *MyStructField22Patch) SetAdd(add []string) *MyStructField22Patch {
  m.Add = add
  return m
}

func (p *MyStructField22Patch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStructField22Patch)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Assign =  tSet
  for i := 0; i < size; i ++ {
    var _elem10 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem10 = v
    }
    p.Assign = append(p.Assign, _elem10)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *MyStructField22Patch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *MyStructField22Patch)  ReadField7(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Remove =  tSet
  for i := 0; i < size; i ++ {
    var _elem11 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem11 = v
    }
    p.Remove = append(p.Remove, _elem11)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *MyStructField22Patch)  ReadField8(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Add =  tSet
  for i := 0; i < size; i ++ {
    var _elem12 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem12 = v
    }
    p.Add = append(p.Add, _elem12)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *MyStructField22Patch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStructField22Patch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStructField22Patch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.SET, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.STRING, len(p.Assign)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    set := make(map[string]bool, len(p.Assign))
    for _, v := range p.Assign {
      if ok := set[v]; ok {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
      }
      set[v] = true
    }
    for _, v := range p.Assign {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *MyStructField22Patch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *MyStructField22Patch) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("remove", thrift.SET, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:remove: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.Remove)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  set := make(map[string]bool, len(p.Remove))
  for _, v := range p.Remove {
    if ok := set[v]; ok {
      return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
    }
    set[v] = true
  }
  for _, v := range p.Remove {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:remove: ", p), err) }
  return err
}

func (p *MyStructField22Patch) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("add", thrift.SET, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:add: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.Add)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  set := make(map[string]bool, len(p.Add))
  for _, v := range p.Add {
    if ok := set[v]; ok {
      return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
    }
    set[v] = true
  }
  for _, v := range p.Add {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:add: ", p), err) }
  return err
}

func (p *MyStructField22Patch) String() string {
  if p == nil {
    return "<nil>"
  }

  assignVal := fmt.Sprintf("%v", p.Assign)
  clearVal := fmt.Sprintf("%v", p.Clear)
  removeVal := fmt.Sprintf("%v", p.Remove)
  addVal := fmt.Sprintf("%v", p.Add)
  return fmt.Sprintf("MyStructField22Patch({Assign:%s Clear:%s Remove:%s Add:%s})", assignVal, clearVal, removeVal, addVal)
}

// Attributes:
//  - Assign: Assigns a value. If set, all other operations are ignored.
//  - Clear: Clears a value. Applies first.
//  - Add: Add the given values, if the keys are not already present. Applies forth.
//  - Remove: Removes entries, if present. Applies third.
//  - Put: Adds or replaces the given key/value pairs. Applies fifth.
type MyStructField23Patch struct {
  Assign map[string]string `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  // unused fields # 3 to 4
  Add map[string]string `thrift:"add,5" db:"add" json:"add"`
  // unused field # 6
  Remove []string `thrift:"remove,7" db:"remove" json:"remove"`
  // unused field # 8
  Put map[string]string `thrift:"put,9" db:"put" json:"put"`
}

func NewMyStructField23Patch() *MyStructField23Patch {
  return &MyStructField23Patch{}
}

var MyStructField23Patch_Assign_DEFAULT map[string]string

func (p *MyStructField23Patch) GetAssign() map[string]string {
  return p.Assign
}

func (p *MyStructField23Patch) GetClear() bool {
  return p.Clear
}

func (p *MyStructField23Patch) GetAdd() map[string]string {
  return p.Add
}

func (p *MyStructField23Patch) GetRemove() []string {
  return p.Remove
}

func (p *MyStructField23Patch) GetPut() map[string]string {
  return p.Put
}
func (p *MyStructField23Patch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

type MyStructField23PatchBuilder struct {
  obj *MyStructField23Patch
}

func NewMyStructField23PatchBuilder() *MyStructField23PatchBuilder{
  return &MyStructField23PatchBuilder{
    obj: NewMyStructField23Patch(),
  }
}

func (p MyStructField23PatchBuilder) Emit() *MyStructField23Patch{
  return &MyStructField23Patch{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
    Add: p.obj.Add,
    Remove: p.obj.Remove,
    Put: p.obj.Put,
  }
}

func (m *MyStructField23PatchBuilder) Assign(assign map[string]string) *MyStructField23PatchBuilder {
  m.obj.Assign = assign
  return m
}

func (m *MyStructField23PatchBuilder) Clear(clear bool) *MyStructField23PatchBuilder {
  m.obj.Clear = clear
  return m
}

func (m *MyStructField23PatchBuilder) Add(add map[string]string) *MyStructField23PatchBuilder {
  m.obj.Add = add
  return m
}

func (m *MyStructField23PatchBuilder) Remove(remove []string) *MyStructField23PatchBuilder {
  m.obj.Remove = remove
  return m
}

func (m *MyStructField23PatchBuilder) Put(put map[string]string) *MyStructField23PatchBuilder {
  m.obj.Put = put
  return m
}

func (m *MyStructField23Patch) SetAssign(assign map[string]string) *MyStructField23Patch {
  m.Assign = assign
  return m
}

func (m *MyStructField23Patch) SetClear(clear bool) *MyStructField23Patch {
  m.Clear = clear
  return m
}

func (m *MyStructField23Patch) SetAdd(add map[string]string) *MyStructField23Patch {
  m.Add = add
  return m
}

func (m *MyStructField23Patch) SetRemove(remove []string) *MyStructField23Patch {
  m.Remove = remove
  return m
}

func (m *MyStructField23Patch) SetPut(put map[string]string) *MyStructField23Patch {
  m.Put = put
  return m
}

func (p *MyStructField23Patch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStructField23Patch)  ReadField1(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Assign =  tMap
  for i := 0; i < size; i ++ {
    var _key13 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key13 = v
    }
    var _val14 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val14 = v
    }
    p.Assign[_key13] = _val14
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStructField23Patch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *MyStructField23Patch)  ReadField5(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Add =  tMap
  for i := 0; i < size; i ++ {
    var _key15 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key15 = v
    }
    var _val16 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val16 = v
    }
    p.Add[_key15] = _val16
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStructField23Patch)  ReadField7(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Remove =  tSet
  for i := 0; i < size; i ++ {
    var _elem17 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem17 = v
    }
    p.Remove = append(p.Remove, _elem17)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *MyStructField23Patch)  ReadField9(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Put =  tMap
  for i := 0; i < size; i ++ {
    var _key18 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key18 = v
    }
    var _val19 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val19 = v
    }
    p.Put[_key18] = _val19
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStructField23Patch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStructField23Patch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStructField23Patch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.MAP, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Assign)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Assign {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *MyStructField23Patch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *MyStructField23Patch) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("add", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:add: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Add)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Add {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:add: ", p), err) }
  return err
}

func (p *MyStructField23Patch) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("remove", thrift.SET, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:remove: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.Remove)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  set := make(map[string]bool, len(p.Remove))
  for _, v := range p.Remove {
    if ok := set[v]; ok {
      return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
    }
    set[v] = true
  }
  for _, v := range p.Remove {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:remove: ", p), err) }
  return err
}

func (p *MyStructField23Patch) writeField9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("put", thrift.MAP, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:put: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Put)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Put {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:put: ", p), err) }
  return err
}

func (p *MyStructField23Patch) String() string {
  if p == nil {
    return "<nil>"
  }

  assignVal := fmt.Sprintf("%v", p.Assign)
  clearVal := fmt.Sprintf("%v", p.Clear)
  addVal := fmt.Sprintf("%v", p.Add)
  removeVal := fmt.Sprintf("%v", p.Remove)
  putVal := fmt.Sprintf("%v", p.Put)
  return fmt.Sprintf("MyStructField23Patch({Assign:%s Clear:%s Add:%s Remove:%s Put:%s})", assignVal, clearVal, addVal, removeVal, putVal)
}

// Attributes:
//  - Assign: Assigns a value. If set, all other operations are ignored.
//  - Clear: Clears a value. Applies first.
//  - PatchPrior: Patches any previously set values. Applies second.
//  - Ensure: Initialize fields, using the given defaults. Applies third.
//  - Patch: Patches any set value, including newly set values. Applies last.
type MyStructPatch struct {
  Assign *MyStruct `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  PatchPrior *MyStructFieldPatch `thrift:"patchPrior,3" db:"patchPrior" json:"patchPrior"`
  // unused field # 4
  Ensure *MyStruct `thrift:"ensure,5" db:"ensure" json:"ensure"`
  Patch *MyStructFieldPatch `thrift:"patch,6" db:"patch" json:"patch"`
}

func NewMyStructPatch() *MyStructPatch {
  return &MyStructPatch{
    PatchPrior: NewMyStructFieldPatch(),
    Ensure: NewMyStruct(),
    Patch: NewMyStructFieldPatch(),
  }
}

var MyStructPatch_Assign_DEFAULT *MyStruct
func (p *MyStructPatch) GetAssign() *MyStruct {
  if !p.IsSetAssign() {
    return MyStructPatch_Assign_DEFAULT
  }
return p.Assign
}

func (p *MyStructPatch) GetClear() bool {
  return p.Clear
}
var MyStructPatch_PatchPrior_DEFAULT *MyStructFieldPatch
func (p *MyStructPatch) GetPatchPrior() *MyStructFieldPatch {
  if !p.IsSetPatchPrior() {
    return MyStructPatch_PatchPrior_DEFAULT
  }
return p.PatchPrior
}
var MyStructPatch_Ensure_DEFAULT *MyStruct
func (p *MyStructPatch) GetEnsure() *MyStruct {
  if !p.IsSetEnsure() {
    return MyStructPatch_Ensure_DEFAULT
  }
return p.Ensure
}
var MyStructPatch_Patch_DEFAULT *MyStructFieldPatch
func (p *MyStructPatch) GetPatch() *MyStructFieldPatch {
  if !p.IsSetPatch() {
    return MyStructPatch_Patch_DEFAULT
  }
return p.Patch
}
func (p *MyStructPatch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

func (p *MyStructPatch) IsSetPatchPrior() bool {
  return p != nil && p.PatchPrior != nil
}

func (p *MyStructPatch) IsSetEnsure() bool {
  return p != nil && p.Ensure != nil
}

func (p *MyStructPatch) IsSetPatch() bool {
  return p != nil && p.Patch != nil
}

type MyStructPatchBuilder struct {
  obj *MyStructPatch
}

func NewMyStructPatchBuilder() *MyStructPatchBuilder{
  return &MyStructPatchBuilder{
    obj: NewMyStructPatch(),
  }
}

func (p MyStructPatchBuilder) Emit() *MyStructPatch{
  return &MyStructPatch{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
    PatchPrior: p.obj.PatchPrior,
    Ensure: p.obj.Ensure,
    Patch: p.obj.Patch,
  }
}

func (m *MyStructPatchBuilder) Assign(assign *MyStruct) *MyStructPatchBuilder {
  m.obj.Assign = assign
  return m
}

func (m *MyStructPatchBuilder) Clear(clear bool) *MyStructPatchBuilder {
  m.obj.Clear = clear
  return m
}

func (m *MyStructPatchBuilder) PatchPrior(patchPrior *MyStructFieldPatch) *MyStructPatchBuilder {
  m.obj.PatchPrior = patchPrior
  return m
}

func (m *MyStructPatchBuilder) Ensure(ensure *MyStruct) *MyStructPatchBuilder {
  m.obj.Ensure = ensure
  return m
}

func (m *MyStructPatchBuilder) Patch(patch *MyStructFieldPatch) *MyStructPatchBuilder {
  m.obj.Patch = patch
  return m
}

func (m *MyStructPatch) SetAssign(assign *MyStruct) *MyStructPatch {
  m.Assign = assign
  return m
}

func (m *MyStructPatch) SetClear(clear bool) *MyStructPatch {
  m.Clear = clear
  return m
}

func (m *MyStructPatch) SetPatchPrior(patchPrior *MyStructFieldPatch) *MyStructPatch {
  m.PatchPrior = patchPrior
  return m
}

func (m *MyStructPatch) SetEnsure(ensure *MyStruct) *MyStructPatch {
  m.Ensure = ensure
  return m
}

func (m *MyStructPatch) SetPatch(patch *MyStructFieldPatch) *MyStructPatch {
  m.Patch = patch
  return m
}

func (p *MyStructPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField1(iprot thrift.Protocol) error {
  p.Assign = NewMyStruct()
  if err := p.Assign.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Assign), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *MyStructPatch)  ReadField3(iprot thrift.Protocol) error {
  p.PatchPrior = NewMyStructFieldPatch()
  if err := p.PatchPrior.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PatchPrior), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField5(iprot thrift.Protocol) error {
  p.Ensure = NewMyStruct()
  if err := p.Ensure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ensure), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField6(iprot thrift.Protocol) error {
  p.Patch = NewMyStructFieldPatch()
  if err := p.Patch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Patch), err)
  }
  return nil
}

func (p *MyStructPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStructPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStructPatch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := p.Assign.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Assign), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *MyStructPatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patchPrior: ", p), err) }
  if err := p.PatchPrior.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PatchPrior), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patchPrior: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("ensure", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ensure: ", p), err) }
  if err := p.Ensure.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ensure), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ensure: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:patch: ", p), err) }
  if err := p.Patch.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Patch), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:patch: ", p), err) }
  return err
}

func (p *MyStructPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var assignVal string
  if p.Assign == nil {
    assignVal = "<nil>"
  } else {
    assignVal = fmt.Sprintf("%v", p.Assign)
  }
  clearVal := fmt.Sprintf("%v", p.Clear)
  var patchPriorVal string
  if p.PatchPrior == nil {
    patchPriorVal = "<nil>"
  } else {
    patchPriorVal = fmt.Sprintf("%v", p.PatchPrior)
  }
  var ensureVal string
  if p.Ensure == nil {
    ensureVal = "<nil>"
  } else {
    ensureVal = fmt.Sprintf("%v", p.Ensure)
  }
  var patchVal string
  if p.Patch == nil {
    patchVal = "<nil>"
  } else {
    patchVal = fmt.Sprintf("%v", p.Patch)
  }
  return fmt.Sprintf("MyStructPatch({Assign:%s Clear:%s PatchPrior:%s Ensure:%s Patch:%s})", assignVal, clearVal, patchPriorVal, ensureVal, patchVal)
}

