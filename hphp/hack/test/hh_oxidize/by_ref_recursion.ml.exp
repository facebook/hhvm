// Copyright (c) Facebook, Inc. and its affiliates.
//
// This source code is licensed under the MIT license found in the
// LICENSE file in the "hack" directory of this source tree.
//
// @generated <<SignedSource::*O*zOeWoEQle#+L!plEphiEmie@IsG>>
use arena_trait::TrivialDrop;
use eq_modulo_pos::EqModuloPos;
use no_pos_hash::NoPosHash;
use ocamlrep::FromOcamlRepIn;
use ocamlrep::ToOcamlRep;
use serde::Deserialize;
use serde::Serialize;

#[allow(unused_imports)]
use crate::*;

#[derive(
    Clone,
    Copy,
    Debug,
    Deserialize,
    Eq,
    EqModuloPos,
    FromOcamlRepIn,
    Hash,
    NoPosHash,
    Ord,
    PartialEq,
    PartialOrd,
    Serialize,
    ToOcamlRep,
)]
#[repr(C, u8)]
pub enum IntList<'a> {
    Nil,
    #[serde(deserialize_with = "arena_deserializer::arena", borrow)]
    #[rust_to_ocaml(inline_tuple)]
    Cons(&'a (isize, &'a IntList<'a>)),
}
impl<'a> TrivialDrop for IntList<'a> {}
arena_deserializer::impl_deserialize_in_arena!(IntList<'arena>);

#[derive(
    Clone,
    Copy,
    Debug,
    Deserialize,
    Eq,
    EqModuloPos,
    FromOcamlRepIn,
    Hash,
    NoPosHash,
    Ord,
    PartialEq,
    PartialOrd,
    Serialize,
    ToOcamlRep,
)]
#[serde(bound(deserialize = "A: 'de + arena_deserializer::DeserializeInArena<'de>"))]
#[repr(C, u8)]
pub enum NAryTree<'a, A> {
    #[serde(deserialize_with = "arena_deserializer::arena", borrow)]
    Leaf(&'a A),
    #[serde(deserialize_with = "arena_deserializer::arena", borrow)]
    Children(&'a [&'a NAryTree<'a, A>]),
}
impl<'a, A: TrivialDrop> TrivialDrop for NAryTree<'a, A> {}
arena_deserializer::impl_deserialize_in_arena!(NAryTree<'arena, A>);
