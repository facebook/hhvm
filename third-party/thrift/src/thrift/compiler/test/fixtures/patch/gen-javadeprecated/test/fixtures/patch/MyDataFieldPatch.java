/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package test.fixtures.patch;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class MyDataFieldPatch implements TBase, java.io.Serializable, Cloneable, Comparable<MyDataFieldPatch> {
  private static final TStruct STRUCT_DESC = new TStruct("MyDataFieldPatch");
  private static final TField DATA1_FIELD_DESC = new TField("data1", TType.STRUCT, (short)1);
  private static final TField DATA2_FIELD_DESC = new TField("data2", TType.STRUCT, (short)2);

  public com.facebook.thrift.op.StringPatch data1;
  public com.facebook.thrift.op.I32Patch data2;
  public static final int DATA1 = 1;
  public static final int DATA2 = 2;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(DATA1, new FieldMetaData("data1", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, com.facebook.thrift.op.StringPatch.class)));
    tmpMetaDataMap.put(DATA2, new FieldMetaData("data2", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, com.facebook.thrift.op.I32Patch.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(MyDataFieldPatch.class, metaDataMap);
  }

  public MyDataFieldPatch() {
  }

  public MyDataFieldPatch(
      com.facebook.thrift.op.StringPatch data1,
      com.facebook.thrift.op.I32Patch data2) {
    this();
    this.data1 = data1;
    this.data2 = data2;
  }

  public static class Builder {
    private com.facebook.thrift.op.StringPatch data1;
    private com.facebook.thrift.op.I32Patch data2;

    public Builder() {
    }

    public Builder setData1(final com.facebook.thrift.op.StringPatch data1) {
      this.data1 = data1;
      return this;
    }

    public Builder setData2(final com.facebook.thrift.op.I32Patch data2) {
      this.data2 = data2;
      return this;
    }

    public MyDataFieldPatch build() {
      MyDataFieldPatch result = new MyDataFieldPatch();
      result.setData1(this.data1);
      result.setData2(this.data2);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MyDataFieldPatch(MyDataFieldPatch other) {
    if (other.isSetData1()) {
      this.data1 = TBaseHelper.deepCopy(other.data1);
    }
    if (other.isSetData2()) {
      this.data2 = TBaseHelper.deepCopy(other.data2);
    }
  }

  public MyDataFieldPatch deepCopy() {
    return new MyDataFieldPatch(this);
  }

  public com.facebook.thrift.op.StringPatch getData1() {
    return this.data1;
  }

  public MyDataFieldPatch setData1(com.facebook.thrift.op.StringPatch data1) {
    this.data1 = data1;
    return this;
  }

  public void unsetData1() {
    this.data1 = null;
  }

  // Returns true if field data1 is set (has been assigned a value) and false otherwise
  public boolean isSetData1() {
    return this.data1 != null;
  }

  public void setData1IsSet(boolean __value) {
    if (!__value) {
      this.data1 = null;
    }
  }

  public com.facebook.thrift.op.I32Patch getData2() {
    return this.data2;
  }

  public MyDataFieldPatch setData2(com.facebook.thrift.op.I32Patch data2) {
    this.data2 = data2;
    return this;
  }

  public void unsetData2() {
    this.data2 = null;
  }

  // Returns true if field data2 is set (has been assigned a value) and false otherwise
  public boolean isSetData2() {
    return this.data2 != null;
  }

  public void setData2IsSet(boolean __value) {
    if (!__value) {
      this.data2 = null;
    }
  }

  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case DATA1:
      if (__value == null) {
        unsetData1();
      } else {
        setData1((com.facebook.thrift.op.StringPatch)__value);
      }
      break;

    case DATA2:
      if (__value == null) {
        unsetData2();
      } else {
        setData2((com.facebook.thrift.op.I32Patch)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case DATA1:
      return getData1();

    case DATA2:
      return getData2();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof MyDataFieldPatch))
      return false;
    MyDataFieldPatch that = (MyDataFieldPatch)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetData1(), that.isSetData1(), this.data1, that.data1)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetData2(), that.isSetData2(), this.data2, that.data2)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {data1, data2});
  }

  @Override
  public int compareTo(MyDataFieldPatch other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetData1()).compareTo(other.isSetData1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(data1, other.data1);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetData2()).compareTo(other.isSetData2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(data2, other.data2);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) {
        break;
      }
      switch (__field.id)
      {
        case DATA1:
          if (__field.type == TType.STRUCT) {
            this.data1 = new com.facebook.thrift.op.StringPatch();
            this.data1.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case DATA2:
          if (__field.type == TType.STRUCT) {
            this.data2 = new com.facebook.thrift.op.I32Patch();
            this.data2.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.data1 != null) {
      oprot.writeFieldBegin(DATA1_FIELD_DESC);
      this.data1.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.data2 != null) {
      oprot.writeFieldBegin(DATA2_FIELD_DESC);
      this.data2.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("MyDataFieldPatch");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("data1");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getData1() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getData1(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("data2");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getData2() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getData2(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

