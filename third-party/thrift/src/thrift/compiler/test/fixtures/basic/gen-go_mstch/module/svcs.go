// @generated by Thrift for [[[ program path ]]]
// This file is probably not the place you want to edit!

package module // [[[ program thrift source path ]]]


import (
    "context"
    "fmt"

    hack "thrift/annotation/hack"

    "thrift/lib/go/thrift"
)

var _ = hack.GoUnusedProtection__

// (needed to ensure safety because of naive import list construction)
var _ = context.Background
var _ = fmt.Printf
var _ = thrift.ZERO



type FooService interface {
    SimpleRPC(ctx context.Context) (error)
}

// Deprecated: Use FooService instead.
type FooServiceClientInterface interface {
    thrift.ClientInterface
    SimpleRPC() (error)
}

type FooServiceChannelClient struct {
    ch thrift.RequestChannel
}
// Compile time interface enforcer
var _ FooService = &FooServiceChannelClient{}

func NewFooServiceChannelClient(channel thrift.RequestChannel) *FooServiceChannelClient {
    return &FooServiceChannelClient{
        ch: channel,
    }
}

func (c *FooServiceChannelClient) Close() error {
    return c.ch.Close()
}

func (c *FooServiceChannelClient) IsOpen() bool {
    return c.ch.IsOpen()
}

func (c *FooServiceChannelClient) Open() error {
    return c.ch.Open()
}

// Deprecated: Use FooServiceChannelClient instead.
type FooServiceClient struct {
    chClient *FooServiceChannelClient
}
// Compile time interface enforcer
var _ FooServiceClientInterface = &FooServiceClient{}

// Deprecated: Use NewFooServiceChannelClient() instead.
func NewFooServiceClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *FooServiceClient {
    return &FooServiceClient{
        chClient: NewFooServiceChannelClient(
            thrift.NewSerialChannel(iprot),
        ),
    }
}

func (c *FooServiceClient) Close() error {
    return c.chClient.Close()
}

func (c *FooServiceClient) IsOpen() bool {
    return c.chClient.IsOpen()
}

func (c *FooServiceClient) Open() error {
    return c.chClient.Open()
}

// Deprecated: Use FooServiceChannelClient instead.
type FooServiceThreadsafeClient = FooServiceClient

// Deprecated: Use NewFooServiceChannelClient() instead.
func NewFooServiceThreadsafeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *FooServiceThreadsafeClient {
    return NewFooServiceClient(t, iprot, oprot)
}

// Deprecated: Use NewFooServiceChannelClient() instead.
func NewFooServiceClientProtocol(prot thrift.Protocol) *FooServiceClient {
  return NewFooServiceClient(prot.Transport(), prot, prot)
}

// Deprecated: Use NewFooServiceChannelClient() instead.
func NewFooServiceThreadsafeClientProtocol(prot thrift.Protocol) *FooServiceClient {
  return NewFooServiceClient(prot.Transport(), prot, prot)
}

// Deprecated: Use NewFooServiceChannelClient() instead.
func NewFooServiceClientFactory(t thrift.Transport, pf thrift.ProtocolFactory) *FooServiceClient {
  iprot := pf.GetProtocol(t)
  oprot := pf.GetProtocol(t)
  return NewFooServiceClient(t, iprot, oprot)
}

// Deprecated: Use NewFooServiceChannelClient() instead.
func NewFooServiceThreadsafeClientFactory(t thrift.Transport, pf thrift.ProtocolFactory) *FooServiceThreadsafeClient {
  return NewFooServiceClientFactory(t, pf)
}


func (c *FooServiceChannelClient) SimpleRPC(ctx context.Context) (error) {
    in := &reqFooServiceSimpleRPC{
    }
    out := newRespFooServiceSimpleRPC()
    err := c.ch.Call(ctx, "simple_rpc", in, out)
    if err != nil {
        return err
    }
    return nil
}

func (c *FooServiceClient) SimpleRPC() (error) {
    return c.chClient.SimpleRPC(nil)
}


type reqFooServiceSimpleRPC struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &reqFooServiceSimpleRPC{}


func newReqFooServiceSimpleRPC() *reqFooServiceSimpleRPC {
    return (&reqFooServiceSimpleRPC{})
}

func (x *reqFooServiceSimpleRPC) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use reqFooServiceSimpleRPC.Set* methods instead or set the fields directly.
type reqFooServiceSimpleRPCBuilder struct {
    obj *reqFooServiceSimpleRPC
}

func newReqFooServiceSimpleRPCBuilder() *reqFooServiceSimpleRPCBuilder {
    return &reqFooServiceSimpleRPCBuilder{
        obj: newReqFooServiceSimpleRPC(),
    }
}

func (x *reqFooServiceSimpleRPCBuilder) Emit() *reqFooServiceSimpleRPC {
    var objCopy reqFooServiceSimpleRPC = *x.obj
    return &objCopy
}

func (x *reqFooServiceSimpleRPC) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqFooServiceSimpleRPC"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqFooServiceSimpleRPC) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type respFooServiceSimpleRPC struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &respFooServiceSimpleRPC{}
var _ thrift.WritableResult = &respFooServiceSimpleRPC{}


func newRespFooServiceSimpleRPC() *respFooServiceSimpleRPC {
    return (&respFooServiceSimpleRPC{})
}

func (x *respFooServiceSimpleRPC) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use respFooServiceSimpleRPC.Set* methods instead or set the fields directly.
type respFooServiceSimpleRPCBuilder struct {
    obj *respFooServiceSimpleRPC
}

func newRespFooServiceSimpleRPCBuilder() *respFooServiceSimpleRPCBuilder {
    return &respFooServiceSimpleRPCBuilder{
        obj: newRespFooServiceSimpleRPC(),
    }
}

func (x *respFooServiceSimpleRPCBuilder) Emit() *respFooServiceSimpleRPC {
    var objCopy respFooServiceSimpleRPC = *x.obj
    return &objCopy
}

func (x *respFooServiceSimpleRPC) Exception() thrift.WritableException {
    return nil
}

func (x *respFooServiceSimpleRPC) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respFooServiceSimpleRPC"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respFooServiceSimpleRPC) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}



type FooServiceProcessor struct {
    processorMap       map[string]thrift.ProcessorFunction
    functionServiceMap map[string]string
    handler            FooService
}
// Compile time interface enforcer
var _ thrift.Processor = &FooServiceProcessor{}

func (p *FooServiceProcessor) AddToProcessorMap(key string, processor thrift.ProcessorFunction) {
    p.processorMap[key] = processor
}

func (p *FooServiceProcessor) AddToFunctionServiceMap(key, service string) {
    p.functionServiceMap[key] = service
}

func (p *FooServiceProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction, err error) {
    if processor, ok := p.processorMap[key]; ok {
        return processor, nil
    }
    return nil, nil
}

func (p *FooServiceProcessor) ProcessorMap() map[string]thrift.ProcessorFunction {
    return p.processorMap
}

func (p *FooServiceProcessor) FunctionServiceMap() map[string]string {
    return p.functionServiceMap
}

func NewFooServiceProcessor(handler FooService) *FooServiceProcessor {
    p := &FooServiceProcessor{
        handler:            handler,
        processorMap:       make(map[string]thrift.ProcessorFunction),
        functionServiceMap: make(map[string]string),
    }
    p.AddToProcessorMap("simple_rpc", &procFuncFooServiceSimpleRPC{handler: handler})
    p.AddToFunctionServiceMap("simple_rpc", "FooService")

    return p
}


type procFuncFooServiceSimpleRPC struct {
    handler FooService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = &procFuncFooServiceSimpleRPC{}

func (p *procFuncFooServiceSimpleRPC) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqFooServiceSimpleRPC()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncFooServiceSimpleRPC) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("SimpleRPC", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncFooServiceSimpleRPC) Run(reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    result := newRespFooServiceSimpleRPC()
    err := p.handler.SimpleRPC()
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing SimpleRPC: " + err.Error(), err)
        return x, x
    }

    return result, nil
}




type FB303Service interface {
    SimpleRPC(ctx context.Context, intParameter int32) (*ReservedKeyword, error)
}

// Deprecated: Use FB303Service instead.
type FB303ServiceClientInterface interface {
    thrift.ClientInterface
    SimpleRPC(intParameter int32) (*ReservedKeyword, error)
}

type FB303ServiceChannelClient struct {
    ch thrift.RequestChannel
}
// Compile time interface enforcer
var _ FB303Service = &FB303ServiceChannelClient{}

func NewFB303ServiceChannelClient(channel thrift.RequestChannel) *FB303ServiceChannelClient {
    return &FB303ServiceChannelClient{
        ch: channel,
    }
}

func (c *FB303ServiceChannelClient) Close() error {
    return c.ch.Close()
}

func (c *FB303ServiceChannelClient) IsOpen() bool {
    return c.ch.IsOpen()
}

func (c *FB303ServiceChannelClient) Open() error {
    return c.ch.Open()
}

// Deprecated: Use FB303ServiceChannelClient instead.
type FB303ServiceClient struct {
    chClient *FB303ServiceChannelClient
}
// Compile time interface enforcer
var _ FB303ServiceClientInterface = &FB303ServiceClient{}

// Deprecated: Use NewFB303ServiceChannelClient() instead.
func NewFB303ServiceClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *FB303ServiceClient {
    return &FB303ServiceClient{
        chClient: NewFB303ServiceChannelClient(
            thrift.NewSerialChannel(iprot),
        ),
    }
}

func (c *FB303ServiceClient) Close() error {
    return c.chClient.Close()
}

func (c *FB303ServiceClient) IsOpen() bool {
    return c.chClient.IsOpen()
}

func (c *FB303ServiceClient) Open() error {
    return c.chClient.Open()
}

// Deprecated: Use FB303ServiceChannelClient instead.
type FB303ServiceThreadsafeClient = FB303ServiceClient

// Deprecated: Use NewFB303ServiceChannelClient() instead.
func NewFB303ServiceThreadsafeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *FB303ServiceThreadsafeClient {
    return NewFB303ServiceClient(t, iprot, oprot)
}

// Deprecated: Use NewFB303ServiceChannelClient() instead.
func NewFB303ServiceClientProtocol(prot thrift.Protocol) *FB303ServiceClient {
  return NewFB303ServiceClient(prot.Transport(), prot, prot)
}

// Deprecated: Use NewFB303ServiceChannelClient() instead.
func NewFB303ServiceThreadsafeClientProtocol(prot thrift.Protocol) *FB303ServiceClient {
  return NewFB303ServiceClient(prot.Transport(), prot, prot)
}

// Deprecated: Use NewFB303ServiceChannelClient() instead.
func NewFB303ServiceClientFactory(t thrift.Transport, pf thrift.ProtocolFactory) *FB303ServiceClient {
  iprot := pf.GetProtocol(t)
  oprot := pf.GetProtocol(t)
  return NewFB303ServiceClient(t, iprot, oprot)
}

// Deprecated: Use NewFB303ServiceChannelClient() instead.
func NewFB303ServiceThreadsafeClientFactory(t thrift.Transport, pf thrift.ProtocolFactory) *FB303ServiceThreadsafeClient {
  return NewFB303ServiceClientFactory(t, pf)
}


func (c *FB303ServiceChannelClient) SimpleRPC(ctx context.Context, intParameter int32) (*ReservedKeyword, error) {
    in := &reqFB303ServiceSimpleRPC{
        IntParameter: intParameter,
    }
    out := newRespFB303ServiceSimpleRPC()
    err := c.ch.Call(ctx, "simple_rpc", in, out)
    if err != nil {
        return out.Value, err
    }
    return out.Value, nil
}

func (c *FB303ServiceClient) SimpleRPC(intParameter int32) (*ReservedKeyword, error) {
    return c.chClient.SimpleRPC(nil, intParameter)
}


type reqFB303ServiceSimpleRPC struct {
    IntParameter int32 `thrift:"int_parameter,1" json:"int_parameter" db:"int_parameter"`
}
// Compile time interface enforcer
var _ thrift.Struct = &reqFB303ServiceSimpleRPC{}


func newReqFB303ServiceSimpleRPC() *reqFB303ServiceSimpleRPC {
    return (&reqFB303ServiceSimpleRPC{})
}

func (x *reqFB303ServiceSimpleRPC) GetIntParameterNonCompat() int32 {
    return x.IntParameter
}

func (x *reqFB303ServiceSimpleRPC) GetIntParameter() int32 {
    return x.IntParameter
}

func (x *reqFB303ServiceSimpleRPC) SetIntParameter(value int32) *reqFB303ServiceSimpleRPC {
    x.IntParameter = value
    return x
}


func (x *reqFB303ServiceSimpleRPC) writeField1(p thrift.Protocol) error {  // IntParameter
    if err := p.WriteFieldBegin("int_parameter", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetIntParameterNonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *reqFB303ServiceSimpleRPC) readField1(p thrift.Protocol) error {  // IntParameter
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetIntParameter(result)
    return nil
}

func (x *reqFB303ServiceSimpleRPC) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use reqFB303ServiceSimpleRPC.Set* methods instead or set the fields directly.
type reqFB303ServiceSimpleRPCBuilder struct {
    obj *reqFB303ServiceSimpleRPC
}

func newReqFB303ServiceSimpleRPCBuilder() *reqFB303ServiceSimpleRPCBuilder {
    return &reqFB303ServiceSimpleRPCBuilder{
        obj: newReqFB303ServiceSimpleRPC(),
    }
}

func (x *reqFB303ServiceSimpleRPCBuilder) IntParameter(value int32) *reqFB303ServiceSimpleRPCBuilder {
    x.obj.IntParameter = value
    return x
}

func (x *reqFB303ServiceSimpleRPCBuilder) Emit() *reqFB303ServiceSimpleRPC {
    var objCopy reqFB303ServiceSimpleRPC = *x.obj
    return &objCopy
}

func (x *reqFB303ServiceSimpleRPC) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqFB303ServiceSimpleRPC"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqFB303ServiceSimpleRPC) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // int_parameter
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type respFB303ServiceSimpleRPC struct {
    Value *ReservedKeyword `thrift:"value,0" json:"value" db:"value"`
}
// Compile time interface enforcer
var _ thrift.Struct = &respFB303ServiceSimpleRPC{}
var _ thrift.WritableResult = &respFB303ServiceSimpleRPC{}


func newRespFB303ServiceSimpleRPC() *respFB303ServiceSimpleRPC {
    return (&respFB303ServiceSimpleRPC{})
}

// Deprecated: Use newRespFB303ServiceSimpleRPC().Value instead.
var respFB303ServiceSimpleRPC_Value_DEFAULT = newRespFB303ServiceSimpleRPC().Value

func (x *respFB303ServiceSimpleRPC) GetValueNonCompat() *ReservedKeyword {
    return x.Value
}

func (x *respFB303ServiceSimpleRPC) GetValue() *ReservedKeyword {
    if !x.IsSetValue() {
      return NewReservedKeyword()
    }

    return x.Value
}

func (x *respFB303ServiceSimpleRPC) SetValue(value ReservedKeyword) *respFB303ServiceSimpleRPC {
    x.Value = &value
    return x
}

func (x *respFB303ServiceSimpleRPC) IsSetValue() bool {
    return x.Value != nil
}

func (x *respFB303ServiceSimpleRPC) writeField0(p thrift.Protocol) error {  // Value
    if !x.IsSetValue() {
        return nil
    }

    if err := p.WriteFieldBegin("value", thrift.STRUCT, 0); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetValueNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respFB303ServiceSimpleRPC) readField0(p thrift.Protocol) error {  // Value
    result := *NewReservedKeyword()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetValue(result)
    return nil
}

func (x *respFB303ServiceSimpleRPC) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use respFB303ServiceSimpleRPC.Set* methods instead or set the fields directly.
type respFB303ServiceSimpleRPCBuilder struct {
    obj *respFB303ServiceSimpleRPC
}

func newRespFB303ServiceSimpleRPCBuilder() *respFB303ServiceSimpleRPCBuilder {
    return &respFB303ServiceSimpleRPCBuilder{
        obj: newRespFB303ServiceSimpleRPC(),
    }
}

func (x *respFB303ServiceSimpleRPCBuilder) Value(value *ReservedKeyword) *respFB303ServiceSimpleRPCBuilder {
    x.obj.Value = value
    return x
}

func (x *respFB303ServiceSimpleRPCBuilder) Emit() *respFB303ServiceSimpleRPC {
    var objCopy respFB303ServiceSimpleRPC = *x.obj
    return &objCopy
}

func (x *respFB303ServiceSimpleRPC) Exception() thrift.WritableException {
    return nil
}

func (x *respFB303ServiceSimpleRPC) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respFB303ServiceSimpleRPC"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respFB303ServiceSimpleRPC) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 0:  // value
            if err := x.readField0(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}



type FB303ServiceProcessor struct {
    processorMap       map[string]thrift.ProcessorFunction
    functionServiceMap map[string]string
    handler            FB303Service
}
// Compile time interface enforcer
var _ thrift.Processor = &FB303ServiceProcessor{}

func (p *FB303ServiceProcessor) AddToProcessorMap(key string, processor thrift.ProcessorFunction) {
    p.processorMap[key] = processor
}

func (p *FB303ServiceProcessor) AddToFunctionServiceMap(key, service string) {
    p.functionServiceMap[key] = service
}

func (p *FB303ServiceProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction, err error) {
    if processor, ok := p.processorMap[key]; ok {
        return processor, nil
    }
    return nil, nil
}

func (p *FB303ServiceProcessor) ProcessorMap() map[string]thrift.ProcessorFunction {
    return p.processorMap
}

func (p *FB303ServiceProcessor) FunctionServiceMap() map[string]string {
    return p.functionServiceMap
}

func NewFB303ServiceProcessor(handler FB303Service) *FB303ServiceProcessor {
    p := &FB303ServiceProcessor{
        handler:            handler,
        processorMap:       make(map[string]thrift.ProcessorFunction),
        functionServiceMap: make(map[string]string),
    }
    p.AddToProcessorMap("simple_rpc", &procFuncFB303ServiceSimpleRPC{handler: handler})
    p.AddToFunctionServiceMap("simple_rpc", "FB303Service")

    return p
}


type procFuncFB303ServiceSimpleRPC struct {
    handler FB303Service
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = &procFuncFB303ServiceSimpleRPC{}

func (p *procFuncFB303ServiceSimpleRPC) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqFB303ServiceSimpleRPC()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncFB303ServiceSimpleRPC) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("SimpleRPC", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncFB303ServiceSimpleRPC) Run(reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    args := reqStruct.(*reqFB303ServiceSimpleRPC)
    result := newRespFB303ServiceSimpleRPC()
    retval, err := p.handler.SimpleRPC(args.IntParameter)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing SimpleRPC: " + err.Error(), err)
        return x, x
    }

    result.Value = retval
    return result, nil
}




type MyService interface {
    Ping(ctx context.Context) (error)
    GetRandomData(ctx context.Context) (string, error)
    Sink(ctx context.Context, sink int64) (error)
    PutDataById(ctx context.Context, id int64, data string) (error)
    HasDataById(ctx context.Context, id int64) (bool, error)
    GetDataById(ctx context.Context, id int64) (string, error)
    DeleteDataById(ctx context.Context, id int64) (error)
    LobDataById(ctx context.Context, id int64, data string) (error)
    InvalidReturnForHack(ctx context.Context) ([]float32, error)
    RpcSkippedCodegen(ctx context.Context) (error)
}

// Deprecated: Use MyService instead.
type MyServiceClientInterface interface {
    thrift.ClientInterface
    Ping() (error)
    GetRandomData() (string, error)
    Sink(sink int64) (error)
    PutDataById(id int64, data string) (error)
    HasDataById(id int64) (bool, error)
    GetDataById(id int64) (string, error)
    DeleteDataById(id int64) (error)
    LobDataById(id int64, data string) (error)
    InvalidReturnForHack() ([]float32, error)
    RpcSkippedCodegen() (error)
}

type MyServiceChannelClient struct {
    ch thrift.RequestChannel
}
// Compile time interface enforcer
var _ MyService = &MyServiceChannelClient{}

func NewMyServiceChannelClient(channel thrift.RequestChannel) *MyServiceChannelClient {
    return &MyServiceChannelClient{
        ch: channel,
    }
}

func (c *MyServiceChannelClient) Close() error {
    return c.ch.Close()
}

func (c *MyServiceChannelClient) IsOpen() bool {
    return c.ch.IsOpen()
}

func (c *MyServiceChannelClient) Open() error {
    return c.ch.Open()
}

// Deprecated: Use MyServiceChannelClient instead.
type MyServiceClient struct {
    chClient *MyServiceChannelClient
}
// Compile time interface enforcer
var _ MyServiceClientInterface = &MyServiceClient{}

// Deprecated: Use NewMyServiceChannelClient() instead.
func NewMyServiceClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *MyServiceClient {
    return &MyServiceClient{
        chClient: NewMyServiceChannelClient(
            thrift.NewSerialChannel(iprot),
        ),
    }
}

func (c *MyServiceClient) Close() error {
    return c.chClient.Close()
}

func (c *MyServiceClient) IsOpen() bool {
    return c.chClient.IsOpen()
}

func (c *MyServiceClient) Open() error {
    return c.chClient.Open()
}

// Deprecated: Use MyServiceChannelClient instead.
type MyServiceThreadsafeClient = MyServiceClient

// Deprecated: Use NewMyServiceChannelClient() instead.
func NewMyServiceThreadsafeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *MyServiceThreadsafeClient {
    return NewMyServiceClient(t, iprot, oprot)
}

// Deprecated: Use NewMyServiceChannelClient() instead.
func NewMyServiceClientProtocol(prot thrift.Protocol) *MyServiceClient {
  return NewMyServiceClient(prot.Transport(), prot, prot)
}

// Deprecated: Use NewMyServiceChannelClient() instead.
func NewMyServiceThreadsafeClientProtocol(prot thrift.Protocol) *MyServiceClient {
  return NewMyServiceClient(prot.Transport(), prot, prot)
}

// Deprecated: Use NewMyServiceChannelClient() instead.
func NewMyServiceClientFactory(t thrift.Transport, pf thrift.ProtocolFactory) *MyServiceClient {
  iprot := pf.GetProtocol(t)
  oprot := pf.GetProtocol(t)
  return NewMyServiceClient(t, iprot, oprot)
}

// Deprecated: Use NewMyServiceChannelClient() instead.
func NewMyServiceThreadsafeClientFactory(t thrift.Transport, pf thrift.ProtocolFactory) *MyServiceThreadsafeClient {
  return NewMyServiceClientFactory(t, pf)
}


func (c *MyServiceChannelClient) Ping(ctx context.Context) (error) {
    in := &reqMyServicePing{
    }
    out := newRespMyServicePing()
    err := c.ch.Call(ctx, "ping", in, out)
    if err != nil {
        return err
    }
    return nil
}

func (c *MyServiceClient) Ping() (error) {
    return c.chClient.Ping(nil)
}


func (c *MyServiceChannelClient) GetRandomData(ctx context.Context) (string, error) {
    in := &reqMyServiceGetRandomData{
    }
    out := newRespMyServiceGetRandomData()
    err := c.ch.Call(ctx, "getRandomData", in, out)
    if err != nil {
        return out.Value, err
    }
    return out.Value, nil
}

func (c *MyServiceClient) GetRandomData() (string, error) {
    return c.chClient.GetRandomData(nil)
}


func (c *MyServiceChannelClient) Sink(ctx context.Context, sink int64) (error) {
    in := &reqMyServiceSink{
        Sink: sink,
    }
    out := newRespMyServiceSink()
    err := c.ch.Call(ctx, "sink", in, out)
    if err != nil {
        return err
    }
    return nil
}

func (c *MyServiceClient) Sink(sink int64) (error) {
    return c.chClient.Sink(nil, sink)
}


func (c *MyServiceChannelClient) PutDataById(ctx context.Context, id int64, data string) (error) {
    in := &reqMyServicePutDataById{
        Id: id,
        Data: data,
    }
    out := newRespMyServicePutDataById()
    err := c.ch.Call(ctx, "putDataById", in, out)
    if err != nil {
        return err
    }
    return nil
}

func (c *MyServiceClient) PutDataById(id int64, data string) (error) {
    return c.chClient.PutDataById(nil, id, data)
}


func (c *MyServiceChannelClient) HasDataById(ctx context.Context, id int64) (bool, error) {
    in := &reqMyServiceHasDataById{
        Id: id,
    }
    out := newRespMyServiceHasDataById()
    err := c.ch.Call(ctx, "hasDataById", in, out)
    if err != nil {
        return out.Value, err
    }
    return out.Value, nil
}

func (c *MyServiceClient) HasDataById(id int64) (bool, error) {
    return c.chClient.HasDataById(nil, id)
}


func (c *MyServiceChannelClient) GetDataById(ctx context.Context, id int64) (string, error) {
    in := &reqMyServiceGetDataById{
        Id: id,
    }
    out := newRespMyServiceGetDataById()
    err := c.ch.Call(ctx, "getDataById", in, out)
    if err != nil {
        return out.Value, err
    }
    return out.Value, nil
}

func (c *MyServiceClient) GetDataById(id int64) (string, error) {
    return c.chClient.GetDataById(nil, id)
}


func (c *MyServiceChannelClient) DeleteDataById(ctx context.Context, id int64) (error) {
    in := &reqMyServiceDeleteDataById{
        Id: id,
    }
    out := newRespMyServiceDeleteDataById()
    err := c.ch.Call(ctx, "deleteDataById", in, out)
    if err != nil {
        return err
    }
    return nil
}

func (c *MyServiceClient) DeleteDataById(id int64) (error) {
    return c.chClient.DeleteDataById(nil, id)
}


func (c *MyServiceChannelClient) LobDataById(ctx context.Context, id int64, data string) (error) {
    in := &reqMyServiceLobDataById{
        Id: id,
        Data: data,
    }
    return c.ch.Oneway(ctx, "lobDataById", in)
}

func (c *MyServiceClient) LobDataById(id int64, data string) (error) {
    return c.chClient.LobDataById(nil, id, data)
}


func (c *MyServiceChannelClient) InvalidReturnForHack(ctx context.Context) ([]float32, error) {
    in := &reqMyServiceInvalidReturnForHack{
    }
    out := newRespMyServiceInvalidReturnForHack()
    err := c.ch.Call(ctx, "invalid_return_for_hack", in, out)
    if err != nil {
        return out.Value, err
    }
    return out.Value, nil
}

func (c *MyServiceClient) InvalidReturnForHack() ([]float32, error) {
    return c.chClient.InvalidReturnForHack(nil)
}


func (c *MyServiceChannelClient) RpcSkippedCodegen(ctx context.Context) (error) {
    in := &reqMyServiceRpcSkippedCodegen{
    }
    out := newRespMyServiceRpcSkippedCodegen()
    err := c.ch.Call(ctx, "rpc_skipped_codegen", in, out)
    if err != nil {
        return err
    }
    return nil
}

func (c *MyServiceClient) RpcSkippedCodegen() (error) {
    return c.chClient.RpcSkippedCodegen(nil)
}


type reqMyServicePing struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &reqMyServicePing{}


func newReqMyServicePing() *reqMyServicePing {
    return (&reqMyServicePing{})
}

func (x *reqMyServicePing) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use reqMyServicePing.Set* methods instead or set the fields directly.
type reqMyServicePingBuilder struct {
    obj *reqMyServicePing
}

func newReqMyServicePingBuilder() *reqMyServicePingBuilder {
    return &reqMyServicePingBuilder{
        obj: newReqMyServicePing(),
    }
}

func (x *reqMyServicePingBuilder) Emit() *reqMyServicePing {
    var objCopy reqMyServicePing = *x.obj
    return &objCopy
}

func (x *reqMyServicePing) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqMyServicePing"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqMyServicePing) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type respMyServicePing struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &respMyServicePing{}
var _ thrift.WritableResult = &respMyServicePing{}


func newRespMyServicePing() *respMyServicePing {
    return (&respMyServicePing{})
}

func (x *respMyServicePing) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use respMyServicePing.Set* methods instead or set the fields directly.
type respMyServicePingBuilder struct {
    obj *respMyServicePing
}

func newRespMyServicePingBuilder() *respMyServicePingBuilder {
    return &respMyServicePingBuilder{
        obj: newRespMyServicePing(),
    }
}

func (x *respMyServicePingBuilder) Emit() *respMyServicePing {
    var objCopy respMyServicePing = *x.obj
    return &objCopy
}

func (x *respMyServicePing) Exception() thrift.WritableException {
    return nil
}

func (x *respMyServicePing) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respMyServicePing"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respMyServicePing) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type reqMyServiceGetRandomData struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &reqMyServiceGetRandomData{}


func newReqMyServiceGetRandomData() *reqMyServiceGetRandomData {
    return (&reqMyServiceGetRandomData{})
}

func (x *reqMyServiceGetRandomData) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use reqMyServiceGetRandomData.Set* methods instead or set the fields directly.
type reqMyServiceGetRandomDataBuilder struct {
    obj *reqMyServiceGetRandomData
}

func newReqMyServiceGetRandomDataBuilder() *reqMyServiceGetRandomDataBuilder {
    return &reqMyServiceGetRandomDataBuilder{
        obj: newReqMyServiceGetRandomData(),
    }
}

func (x *reqMyServiceGetRandomDataBuilder) Emit() *reqMyServiceGetRandomData {
    var objCopy reqMyServiceGetRandomData = *x.obj
    return &objCopy
}

func (x *reqMyServiceGetRandomData) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqMyServiceGetRandomData"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqMyServiceGetRandomData) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type respMyServiceGetRandomData struct {
    Value string `thrift:"value,0" json:"value" db:"value"`
}
// Compile time interface enforcer
var _ thrift.Struct = &respMyServiceGetRandomData{}
var _ thrift.WritableResult = &respMyServiceGetRandomData{}


func newRespMyServiceGetRandomData() *respMyServiceGetRandomData {
    return (&respMyServiceGetRandomData{})
}

func (x *respMyServiceGetRandomData) GetValueNonCompat() string {
    return x.Value
}

func (x *respMyServiceGetRandomData) GetValue() string {
    return x.Value
}

func (x *respMyServiceGetRandomData) SetValue(value string) *respMyServiceGetRandomData {
    x.Value = value
    return x
}


func (x *respMyServiceGetRandomData) writeField0(p thrift.Protocol) error {  // Value
    if err := p.WriteFieldBegin("value", thrift.STRING, 0); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetValueNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respMyServiceGetRandomData) readField0(p thrift.Protocol) error {  // Value
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetValue(result)
    return nil
}

func (x *respMyServiceGetRandomData) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use respMyServiceGetRandomData.Set* methods instead or set the fields directly.
type respMyServiceGetRandomDataBuilder struct {
    obj *respMyServiceGetRandomData
}

func newRespMyServiceGetRandomDataBuilder() *respMyServiceGetRandomDataBuilder {
    return &respMyServiceGetRandomDataBuilder{
        obj: newRespMyServiceGetRandomData(),
    }
}

func (x *respMyServiceGetRandomDataBuilder) Value(value string) *respMyServiceGetRandomDataBuilder {
    x.obj.Value = value
    return x
}

func (x *respMyServiceGetRandomDataBuilder) Emit() *respMyServiceGetRandomData {
    var objCopy respMyServiceGetRandomData = *x.obj
    return &objCopy
}

func (x *respMyServiceGetRandomData) Exception() thrift.WritableException {
    return nil
}

func (x *respMyServiceGetRandomData) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respMyServiceGetRandomData"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respMyServiceGetRandomData) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 0:  // value
            if err := x.readField0(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type reqMyServiceSink struct {
    Sink int64 `thrift:"sink,1" json:"sink" db:"sink"`
}
// Compile time interface enforcer
var _ thrift.Struct = &reqMyServiceSink{}


func newReqMyServiceSink() *reqMyServiceSink {
    return (&reqMyServiceSink{})
}

func (x *reqMyServiceSink) GetSinkNonCompat() int64 {
    return x.Sink
}

func (x *reqMyServiceSink) GetSink() int64 {
    return x.Sink
}

func (x *reqMyServiceSink) SetSink(value int64) *reqMyServiceSink {
    x.Sink = value
    return x
}


func (x *reqMyServiceSink) writeField1(p thrift.Protocol) error {  // Sink
    if err := p.WriteFieldBegin("sink", thrift.I64, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetSinkNonCompat()
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *reqMyServiceSink) readField1(p thrift.Protocol) error {  // Sink
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.SetSink(result)
    return nil
}

func (x *reqMyServiceSink) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use reqMyServiceSink.Set* methods instead or set the fields directly.
type reqMyServiceSinkBuilder struct {
    obj *reqMyServiceSink
}

func newReqMyServiceSinkBuilder() *reqMyServiceSinkBuilder {
    return &reqMyServiceSinkBuilder{
        obj: newReqMyServiceSink(),
    }
}

func (x *reqMyServiceSinkBuilder) Sink(value int64) *reqMyServiceSinkBuilder {
    x.obj.Sink = value
    return x
}

func (x *reqMyServiceSinkBuilder) Emit() *reqMyServiceSink {
    var objCopy reqMyServiceSink = *x.obj
    return &objCopy
}

func (x *reqMyServiceSink) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqMyServiceSink"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqMyServiceSink) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // sink
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type respMyServiceSink struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &respMyServiceSink{}
var _ thrift.WritableResult = &respMyServiceSink{}


func newRespMyServiceSink() *respMyServiceSink {
    return (&respMyServiceSink{})
}

func (x *respMyServiceSink) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use respMyServiceSink.Set* methods instead or set the fields directly.
type respMyServiceSinkBuilder struct {
    obj *respMyServiceSink
}

func newRespMyServiceSinkBuilder() *respMyServiceSinkBuilder {
    return &respMyServiceSinkBuilder{
        obj: newRespMyServiceSink(),
    }
}

func (x *respMyServiceSinkBuilder) Emit() *respMyServiceSink {
    var objCopy respMyServiceSink = *x.obj
    return &objCopy
}

func (x *respMyServiceSink) Exception() thrift.WritableException {
    return nil
}

func (x *respMyServiceSink) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respMyServiceSink"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respMyServiceSink) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type reqMyServicePutDataById struct {
    Id int64 `thrift:"id,1" json:"id" db:"id"`
    Data string `thrift:"data,2" json:"data" db:"data"`
}
// Compile time interface enforcer
var _ thrift.Struct = &reqMyServicePutDataById{}


func newReqMyServicePutDataById() *reqMyServicePutDataById {
    return (&reqMyServicePutDataById{})
}

func (x *reqMyServicePutDataById) GetIdNonCompat() int64 {
    return x.Id
}

func (x *reqMyServicePutDataById) GetId() int64 {
    return x.Id
}

func (x *reqMyServicePutDataById) GetDataNonCompat() string {
    return x.Data
}

func (x *reqMyServicePutDataById) GetData() string {
    return x.Data
}

func (x *reqMyServicePutDataById) SetId(value int64) *reqMyServicePutDataById {
    x.Id = value
    return x
}

func (x *reqMyServicePutDataById) SetData(value string) *reqMyServicePutDataById {
    x.Data = value
    return x
}



func (x *reqMyServicePutDataById) writeField1(p thrift.Protocol) error {  // Id
    if err := p.WriteFieldBegin("id", thrift.I64, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetIdNonCompat()
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *reqMyServicePutDataById) writeField2(p thrift.Protocol) error {  // Data
    if err := p.WriteFieldBegin("data", thrift.STRING, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetDataNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *reqMyServicePutDataById) readField1(p thrift.Protocol) error {  // Id
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.SetId(result)
    return nil
}

func (x *reqMyServicePutDataById) readField2(p thrift.Protocol) error {  // Data
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetData(result)
    return nil
}

func (x *reqMyServicePutDataById) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use reqMyServicePutDataById.Set* methods instead or set the fields directly.
type reqMyServicePutDataByIdBuilder struct {
    obj *reqMyServicePutDataById
}

func newReqMyServicePutDataByIdBuilder() *reqMyServicePutDataByIdBuilder {
    return &reqMyServicePutDataByIdBuilder{
        obj: newReqMyServicePutDataById(),
    }
}

func (x *reqMyServicePutDataByIdBuilder) Id(value int64) *reqMyServicePutDataByIdBuilder {
    x.obj.Id = value
    return x
}

func (x *reqMyServicePutDataByIdBuilder) Data(value string) *reqMyServicePutDataByIdBuilder {
    x.obj.Data = value
    return x
}

func (x *reqMyServicePutDataByIdBuilder) Emit() *reqMyServicePutDataById {
    var objCopy reqMyServicePutDataById = *x.obj
    return &objCopy
}

func (x *reqMyServicePutDataById) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqMyServicePutDataById"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqMyServicePutDataById) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // id
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // data
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type respMyServicePutDataById struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &respMyServicePutDataById{}
var _ thrift.WritableResult = &respMyServicePutDataById{}


func newRespMyServicePutDataById() *respMyServicePutDataById {
    return (&respMyServicePutDataById{})
}

func (x *respMyServicePutDataById) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use respMyServicePutDataById.Set* methods instead or set the fields directly.
type respMyServicePutDataByIdBuilder struct {
    obj *respMyServicePutDataById
}

func newRespMyServicePutDataByIdBuilder() *respMyServicePutDataByIdBuilder {
    return &respMyServicePutDataByIdBuilder{
        obj: newRespMyServicePutDataById(),
    }
}

func (x *respMyServicePutDataByIdBuilder) Emit() *respMyServicePutDataById {
    var objCopy respMyServicePutDataById = *x.obj
    return &objCopy
}

func (x *respMyServicePutDataById) Exception() thrift.WritableException {
    return nil
}

func (x *respMyServicePutDataById) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respMyServicePutDataById"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respMyServicePutDataById) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type reqMyServiceHasDataById struct {
    Id int64 `thrift:"id,1" json:"id" db:"id"`
}
// Compile time interface enforcer
var _ thrift.Struct = &reqMyServiceHasDataById{}


func newReqMyServiceHasDataById() *reqMyServiceHasDataById {
    return (&reqMyServiceHasDataById{})
}

func (x *reqMyServiceHasDataById) GetIdNonCompat() int64 {
    return x.Id
}

func (x *reqMyServiceHasDataById) GetId() int64 {
    return x.Id
}

func (x *reqMyServiceHasDataById) SetId(value int64) *reqMyServiceHasDataById {
    x.Id = value
    return x
}


func (x *reqMyServiceHasDataById) writeField1(p thrift.Protocol) error {  // Id
    if err := p.WriteFieldBegin("id", thrift.I64, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetIdNonCompat()
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *reqMyServiceHasDataById) readField1(p thrift.Protocol) error {  // Id
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.SetId(result)
    return nil
}

func (x *reqMyServiceHasDataById) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use reqMyServiceHasDataById.Set* methods instead or set the fields directly.
type reqMyServiceHasDataByIdBuilder struct {
    obj *reqMyServiceHasDataById
}

func newReqMyServiceHasDataByIdBuilder() *reqMyServiceHasDataByIdBuilder {
    return &reqMyServiceHasDataByIdBuilder{
        obj: newReqMyServiceHasDataById(),
    }
}

func (x *reqMyServiceHasDataByIdBuilder) Id(value int64) *reqMyServiceHasDataByIdBuilder {
    x.obj.Id = value
    return x
}

func (x *reqMyServiceHasDataByIdBuilder) Emit() *reqMyServiceHasDataById {
    var objCopy reqMyServiceHasDataById = *x.obj
    return &objCopy
}

func (x *reqMyServiceHasDataById) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqMyServiceHasDataById"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqMyServiceHasDataById) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // id
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type respMyServiceHasDataById struct {
    Value bool `thrift:"value,0" json:"value" db:"value"`
}
// Compile time interface enforcer
var _ thrift.Struct = &respMyServiceHasDataById{}
var _ thrift.WritableResult = &respMyServiceHasDataById{}


func newRespMyServiceHasDataById() *respMyServiceHasDataById {
    return (&respMyServiceHasDataById{})
}

func (x *respMyServiceHasDataById) GetValueNonCompat() bool {
    return x.Value
}

func (x *respMyServiceHasDataById) GetValue() bool {
    return x.Value
}

func (x *respMyServiceHasDataById) SetValue(value bool) *respMyServiceHasDataById {
    x.Value = value
    return x
}


func (x *respMyServiceHasDataById) writeField0(p thrift.Protocol) error {  // Value
    if err := p.WriteFieldBegin("value", thrift.BOOL, 0); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetValueNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respMyServiceHasDataById) readField0(p thrift.Protocol) error {  // Value
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetValue(result)
    return nil
}

func (x *respMyServiceHasDataById) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use respMyServiceHasDataById.Set* methods instead or set the fields directly.
type respMyServiceHasDataByIdBuilder struct {
    obj *respMyServiceHasDataById
}

func newRespMyServiceHasDataByIdBuilder() *respMyServiceHasDataByIdBuilder {
    return &respMyServiceHasDataByIdBuilder{
        obj: newRespMyServiceHasDataById(),
    }
}

func (x *respMyServiceHasDataByIdBuilder) Value(value bool) *respMyServiceHasDataByIdBuilder {
    x.obj.Value = value
    return x
}

func (x *respMyServiceHasDataByIdBuilder) Emit() *respMyServiceHasDataById {
    var objCopy respMyServiceHasDataById = *x.obj
    return &objCopy
}

func (x *respMyServiceHasDataById) Exception() thrift.WritableException {
    return nil
}

func (x *respMyServiceHasDataById) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respMyServiceHasDataById"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respMyServiceHasDataById) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 0:  // value
            if err := x.readField0(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type reqMyServiceGetDataById struct {
    Id int64 `thrift:"id,1" json:"id" db:"id"`
}
// Compile time interface enforcer
var _ thrift.Struct = &reqMyServiceGetDataById{}


func newReqMyServiceGetDataById() *reqMyServiceGetDataById {
    return (&reqMyServiceGetDataById{})
}

func (x *reqMyServiceGetDataById) GetIdNonCompat() int64 {
    return x.Id
}

func (x *reqMyServiceGetDataById) GetId() int64 {
    return x.Id
}

func (x *reqMyServiceGetDataById) SetId(value int64) *reqMyServiceGetDataById {
    x.Id = value
    return x
}


func (x *reqMyServiceGetDataById) writeField1(p thrift.Protocol) error {  // Id
    if err := p.WriteFieldBegin("id", thrift.I64, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetIdNonCompat()
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *reqMyServiceGetDataById) readField1(p thrift.Protocol) error {  // Id
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.SetId(result)
    return nil
}

func (x *reqMyServiceGetDataById) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use reqMyServiceGetDataById.Set* methods instead or set the fields directly.
type reqMyServiceGetDataByIdBuilder struct {
    obj *reqMyServiceGetDataById
}

func newReqMyServiceGetDataByIdBuilder() *reqMyServiceGetDataByIdBuilder {
    return &reqMyServiceGetDataByIdBuilder{
        obj: newReqMyServiceGetDataById(),
    }
}

func (x *reqMyServiceGetDataByIdBuilder) Id(value int64) *reqMyServiceGetDataByIdBuilder {
    x.obj.Id = value
    return x
}

func (x *reqMyServiceGetDataByIdBuilder) Emit() *reqMyServiceGetDataById {
    var objCopy reqMyServiceGetDataById = *x.obj
    return &objCopy
}

func (x *reqMyServiceGetDataById) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqMyServiceGetDataById"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqMyServiceGetDataById) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // id
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type respMyServiceGetDataById struct {
    Value string `thrift:"value,0" json:"value" db:"value"`
}
// Compile time interface enforcer
var _ thrift.Struct = &respMyServiceGetDataById{}
var _ thrift.WritableResult = &respMyServiceGetDataById{}


func newRespMyServiceGetDataById() *respMyServiceGetDataById {
    return (&respMyServiceGetDataById{})
}

func (x *respMyServiceGetDataById) GetValueNonCompat() string {
    return x.Value
}

func (x *respMyServiceGetDataById) GetValue() string {
    return x.Value
}

func (x *respMyServiceGetDataById) SetValue(value string) *respMyServiceGetDataById {
    x.Value = value
    return x
}


func (x *respMyServiceGetDataById) writeField0(p thrift.Protocol) error {  // Value
    if err := p.WriteFieldBegin("value", thrift.STRING, 0); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetValueNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respMyServiceGetDataById) readField0(p thrift.Protocol) error {  // Value
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetValue(result)
    return nil
}

func (x *respMyServiceGetDataById) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use respMyServiceGetDataById.Set* methods instead or set the fields directly.
type respMyServiceGetDataByIdBuilder struct {
    obj *respMyServiceGetDataById
}

func newRespMyServiceGetDataByIdBuilder() *respMyServiceGetDataByIdBuilder {
    return &respMyServiceGetDataByIdBuilder{
        obj: newRespMyServiceGetDataById(),
    }
}

func (x *respMyServiceGetDataByIdBuilder) Value(value string) *respMyServiceGetDataByIdBuilder {
    x.obj.Value = value
    return x
}

func (x *respMyServiceGetDataByIdBuilder) Emit() *respMyServiceGetDataById {
    var objCopy respMyServiceGetDataById = *x.obj
    return &objCopy
}

func (x *respMyServiceGetDataById) Exception() thrift.WritableException {
    return nil
}

func (x *respMyServiceGetDataById) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respMyServiceGetDataById"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respMyServiceGetDataById) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 0:  // value
            if err := x.readField0(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type reqMyServiceDeleteDataById struct {
    Id int64 `thrift:"id,1" json:"id" db:"id"`
}
// Compile time interface enforcer
var _ thrift.Struct = &reqMyServiceDeleteDataById{}


func newReqMyServiceDeleteDataById() *reqMyServiceDeleteDataById {
    return (&reqMyServiceDeleteDataById{})
}

func (x *reqMyServiceDeleteDataById) GetIdNonCompat() int64 {
    return x.Id
}

func (x *reqMyServiceDeleteDataById) GetId() int64 {
    return x.Id
}

func (x *reqMyServiceDeleteDataById) SetId(value int64) *reqMyServiceDeleteDataById {
    x.Id = value
    return x
}


func (x *reqMyServiceDeleteDataById) writeField1(p thrift.Protocol) error {  // Id
    if err := p.WriteFieldBegin("id", thrift.I64, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetIdNonCompat()
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *reqMyServiceDeleteDataById) readField1(p thrift.Protocol) error {  // Id
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.SetId(result)
    return nil
}

func (x *reqMyServiceDeleteDataById) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use reqMyServiceDeleteDataById.Set* methods instead or set the fields directly.
type reqMyServiceDeleteDataByIdBuilder struct {
    obj *reqMyServiceDeleteDataById
}

func newReqMyServiceDeleteDataByIdBuilder() *reqMyServiceDeleteDataByIdBuilder {
    return &reqMyServiceDeleteDataByIdBuilder{
        obj: newReqMyServiceDeleteDataById(),
    }
}

func (x *reqMyServiceDeleteDataByIdBuilder) Id(value int64) *reqMyServiceDeleteDataByIdBuilder {
    x.obj.Id = value
    return x
}

func (x *reqMyServiceDeleteDataByIdBuilder) Emit() *reqMyServiceDeleteDataById {
    var objCopy reqMyServiceDeleteDataById = *x.obj
    return &objCopy
}

func (x *reqMyServiceDeleteDataById) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqMyServiceDeleteDataById"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqMyServiceDeleteDataById) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // id
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type respMyServiceDeleteDataById struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &respMyServiceDeleteDataById{}
var _ thrift.WritableResult = &respMyServiceDeleteDataById{}


func newRespMyServiceDeleteDataById() *respMyServiceDeleteDataById {
    return (&respMyServiceDeleteDataById{})
}

func (x *respMyServiceDeleteDataById) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use respMyServiceDeleteDataById.Set* methods instead or set the fields directly.
type respMyServiceDeleteDataByIdBuilder struct {
    obj *respMyServiceDeleteDataById
}

func newRespMyServiceDeleteDataByIdBuilder() *respMyServiceDeleteDataByIdBuilder {
    return &respMyServiceDeleteDataByIdBuilder{
        obj: newRespMyServiceDeleteDataById(),
    }
}

func (x *respMyServiceDeleteDataByIdBuilder) Emit() *respMyServiceDeleteDataById {
    var objCopy respMyServiceDeleteDataById = *x.obj
    return &objCopy
}

func (x *respMyServiceDeleteDataById) Exception() thrift.WritableException {
    return nil
}

func (x *respMyServiceDeleteDataById) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respMyServiceDeleteDataById"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respMyServiceDeleteDataById) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type reqMyServiceLobDataById struct {
    Id int64 `thrift:"id,1" json:"id" db:"id"`
    Data string `thrift:"data,2" json:"data" db:"data"`
}
// Compile time interface enforcer
var _ thrift.Struct = &reqMyServiceLobDataById{}


func newReqMyServiceLobDataById() *reqMyServiceLobDataById {
    return (&reqMyServiceLobDataById{})
}

func (x *reqMyServiceLobDataById) GetIdNonCompat() int64 {
    return x.Id
}

func (x *reqMyServiceLobDataById) GetId() int64 {
    return x.Id
}

func (x *reqMyServiceLobDataById) GetDataNonCompat() string {
    return x.Data
}

func (x *reqMyServiceLobDataById) GetData() string {
    return x.Data
}

func (x *reqMyServiceLobDataById) SetId(value int64) *reqMyServiceLobDataById {
    x.Id = value
    return x
}

func (x *reqMyServiceLobDataById) SetData(value string) *reqMyServiceLobDataById {
    x.Data = value
    return x
}



func (x *reqMyServiceLobDataById) writeField1(p thrift.Protocol) error {  // Id
    if err := p.WriteFieldBegin("id", thrift.I64, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetIdNonCompat()
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *reqMyServiceLobDataById) writeField2(p thrift.Protocol) error {  // Data
    if err := p.WriteFieldBegin("data", thrift.STRING, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetDataNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *reqMyServiceLobDataById) readField1(p thrift.Protocol) error {  // Id
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.SetId(result)
    return nil
}

func (x *reqMyServiceLobDataById) readField2(p thrift.Protocol) error {  // Data
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetData(result)
    return nil
}

func (x *reqMyServiceLobDataById) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use reqMyServiceLobDataById.Set* methods instead or set the fields directly.
type reqMyServiceLobDataByIdBuilder struct {
    obj *reqMyServiceLobDataById
}

func newReqMyServiceLobDataByIdBuilder() *reqMyServiceLobDataByIdBuilder {
    return &reqMyServiceLobDataByIdBuilder{
        obj: newReqMyServiceLobDataById(),
    }
}

func (x *reqMyServiceLobDataByIdBuilder) Id(value int64) *reqMyServiceLobDataByIdBuilder {
    x.obj.Id = value
    return x
}

func (x *reqMyServiceLobDataByIdBuilder) Data(value string) *reqMyServiceLobDataByIdBuilder {
    x.obj.Data = value
    return x
}

func (x *reqMyServiceLobDataByIdBuilder) Emit() *reqMyServiceLobDataById {
    var objCopy reqMyServiceLobDataById = *x.obj
    return &objCopy
}

func (x *reqMyServiceLobDataById) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqMyServiceLobDataById"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqMyServiceLobDataById) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // id
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // data
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type respMyServiceLobDataById struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &respMyServiceLobDataById{}
var _ thrift.WritableResult = &respMyServiceLobDataById{}


func newRespMyServiceLobDataById() *respMyServiceLobDataById {
    return (&respMyServiceLobDataById{})
}

func (x *respMyServiceLobDataById) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use respMyServiceLobDataById.Set* methods instead or set the fields directly.
type respMyServiceLobDataByIdBuilder struct {
    obj *respMyServiceLobDataById
}

func newRespMyServiceLobDataByIdBuilder() *respMyServiceLobDataByIdBuilder {
    return &respMyServiceLobDataByIdBuilder{
        obj: newRespMyServiceLobDataById(),
    }
}

func (x *respMyServiceLobDataByIdBuilder) Emit() *respMyServiceLobDataById {
    var objCopy respMyServiceLobDataById = *x.obj
    return &objCopy
}

func (x *respMyServiceLobDataById) Exception() thrift.WritableException {
    return nil
}

func (x *respMyServiceLobDataById) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respMyServiceLobDataById"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respMyServiceLobDataById) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type reqMyServiceInvalidReturnForHack struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &reqMyServiceInvalidReturnForHack{}


func newReqMyServiceInvalidReturnForHack() *reqMyServiceInvalidReturnForHack {
    return (&reqMyServiceInvalidReturnForHack{})
}

func (x *reqMyServiceInvalidReturnForHack) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use reqMyServiceInvalidReturnForHack.Set* methods instead or set the fields directly.
type reqMyServiceInvalidReturnForHackBuilder struct {
    obj *reqMyServiceInvalidReturnForHack
}

func newReqMyServiceInvalidReturnForHackBuilder() *reqMyServiceInvalidReturnForHackBuilder {
    return &reqMyServiceInvalidReturnForHackBuilder{
        obj: newReqMyServiceInvalidReturnForHack(),
    }
}

func (x *reqMyServiceInvalidReturnForHackBuilder) Emit() *reqMyServiceInvalidReturnForHack {
    var objCopy reqMyServiceInvalidReturnForHack = *x.obj
    return &objCopy
}

func (x *reqMyServiceInvalidReturnForHack) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqMyServiceInvalidReturnForHack"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqMyServiceInvalidReturnForHack) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type respMyServiceInvalidReturnForHack struct {
    Value []float32 `thrift:"value,0" json:"value" db:"value"`
}
// Compile time interface enforcer
var _ thrift.Struct = &respMyServiceInvalidReturnForHack{}
var _ thrift.WritableResult = &respMyServiceInvalidReturnForHack{}


func newRespMyServiceInvalidReturnForHack() *respMyServiceInvalidReturnForHack {
    return (&respMyServiceInvalidReturnForHack{})
}

func (x *respMyServiceInvalidReturnForHack) GetValueNonCompat() []float32 {
    return x.Value
}

func (x *respMyServiceInvalidReturnForHack) GetValue() []float32 {
    if !x.IsSetValue() {
      return nil
    }

    return x.Value
}

func (x *respMyServiceInvalidReturnForHack) SetValue(value []float32) *respMyServiceInvalidReturnForHack {
    x.Value = value
    return x
}

func (x *respMyServiceInvalidReturnForHack) IsSetValue() bool {
    return x.Value != nil
}

func (x *respMyServiceInvalidReturnForHack) writeField0(p thrift.Protocol) error {  // Value
    if !x.IsSetValue() {
        return nil
    }

    if err := p.WriteFieldBegin("value", thrift.SET, 0); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetValueNonCompat()
    if err := p.WriteSetBegin(thrift.FLOAT, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteFloat(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respMyServiceInvalidReturnForHack) readField0(p thrift.Protocol) error {  // Value
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]float32, 0, size)
for i := 0; i < size; i++ {
    var elem float32
    {
        result, err := p.ReadFloat()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.SetValue(result)
    return nil
}

func (x *respMyServiceInvalidReturnForHack) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use respMyServiceInvalidReturnForHack.Set* methods instead or set the fields directly.
type respMyServiceInvalidReturnForHackBuilder struct {
    obj *respMyServiceInvalidReturnForHack
}

func newRespMyServiceInvalidReturnForHackBuilder() *respMyServiceInvalidReturnForHackBuilder {
    return &respMyServiceInvalidReturnForHackBuilder{
        obj: newRespMyServiceInvalidReturnForHack(),
    }
}

func (x *respMyServiceInvalidReturnForHackBuilder) Value(value []float32) *respMyServiceInvalidReturnForHackBuilder {
    x.obj.Value = value
    return x
}

func (x *respMyServiceInvalidReturnForHackBuilder) Emit() *respMyServiceInvalidReturnForHack {
    var objCopy respMyServiceInvalidReturnForHack = *x.obj
    return &objCopy
}

func (x *respMyServiceInvalidReturnForHack) Exception() thrift.WritableException {
    return nil
}

func (x *respMyServiceInvalidReturnForHack) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respMyServiceInvalidReturnForHack"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respMyServiceInvalidReturnForHack) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 0:  // value
            if err := x.readField0(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type reqMyServiceRpcSkippedCodegen struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &reqMyServiceRpcSkippedCodegen{}


func newReqMyServiceRpcSkippedCodegen() *reqMyServiceRpcSkippedCodegen {
    return (&reqMyServiceRpcSkippedCodegen{})
}

func (x *reqMyServiceRpcSkippedCodegen) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use reqMyServiceRpcSkippedCodegen.Set* methods instead or set the fields directly.
type reqMyServiceRpcSkippedCodegenBuilder struct {
    obj *reqMyServiceRpcSkippedCodegen
}

func newReqMyServiceRpcSkippedCodegenBuilder() *reqMyServiceRpcSkippedCodegenBuilder {
    return &reqMyServiceRpcSkippedCodegenBuilder{
        obj: newReqMyServiceRpcSkippedCodegen(),
    }
}

func (x *reqMyServiceRpcSkippedCodegenBuilder) Emit() *reqMyServiceRpcSkippedCodegen {
    var objCopy reqMyServiceRpcSkippedCodegen = *x.obj
    return &objCopy
}

func (x *reqMyServiceRpcSkippedCodegen) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqMyServiceRpcSkippedCodegen"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqMyServiceRpcSkippedCodegen) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type respMyServiceRpcSkippedCodegen struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &respMyServiceRpcSkippedCodegen{}
var _ thrift.WritableResult = &respMyServiceRpcSkippedCodegen{}


func newRespMyServiceRpcSkippedCodegen() *respMyServiceRpcSkippedCodegen {
    return (&respMyServiceRpcSkippedCodegen{})
}

func (x *respMyServiceRpcSkippedCodegen) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use respMyServiceRpcSkippedCodegen.Set* methods instead or set the fields directly.
type respMyServiceRpcSkippedCodegenBuilder struct {
    obj *respMyServiceRpcSkippedCodegen
}

func newRespMyServiceRpcSkippedCodegenBuilder() *respMyServiceRpcSkippedCodegenBuilder {
    return &respMyServiceRpcSkippedCodegenBuilder{
        obj: newRespMyServiceRpcSkippedCodegen(),
    }
}

func (x *respMyServiceRpcSkippedCodegenBuilder) Emit() *respMyServiceRpcSkippedCodegen {
    var objCopy respMyServiceRpcSkippedCodegen = *x.obj
    return &objCopy
}

func (x *respMyServiceRpcSkippedCodegen) Exception() thrift.WritableException {
    return nil
}

func (x *respMyServiceRpcSkippedCodegen) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respMyServiceRpcSkippedCodegen"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respMyServiceRpcSkippedCodegen) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}



type MyServiceProcessor struct {
    processorMap       map[string]thrift.ProcessorFunction
    functionServiceMap map[string]string
    handler            MyService
}
// Compile time interface enforcer
var _ thrift.Processor = &MyServiceProcessor{}

func (p *MyServiceProcessor) AddToProcessorMap(key string, processor thrift.ProcessorFunction) {
    p.processorMap[key] = processor
}

func (p *MyServiceProcessor) AddToFunctionServiceMap(key, service string) {
    p.functionServiceMap[key] = service
}

func (p *MyServiceProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction, err error) {
    if processor, ok := p.processorMap[key]; ok {
        return processor, nil
    }
    return nil, nil
}

func (p *MyServiceProcessor) ProcessorMap() map[string]thrift.ProcessorFunction {
    return p.processorMap
}

func (p *MyServiceProcessor) FunctionServiceMap() map[string]string {
    return p.functionServiceMap
}

func NewMyServiceProcessor(handler MyService) *MyServiceProcessor {
    p := &MyServiceProcessor{
        handler:            handler,
        processorMap:       make(map[string]thrift.ProcessorFunction),
        functionServiceMap: make(map[string]string),
    }
    p.AddToProcessorMap("ping", &procFuncMyServicePing{handler: handler})
    p.AddToProcessorMap("getRandomData", &procFuncMyServiceGetRandomData{handler: handler})
    p.AddToProcessorMap("sink", &procFuncMyServiceSink{handler: handler})
    p.AddToProcessorMap("putDataById", &procFuncMyServicePutDataById{handler: handler})
    p.AddToProcessorMap("hasDataById", &procFuncMyServiceHasDataById{handler: handler})
    p.AddToProcessorMap("getDataById", &procFuncMyServiceGetDataById{handler: handler})
    p.AddToProcessorMap("deleteDataById", &procFuncMyServiceDeleteDataById{handler: handler})
    p.AddToProcessorMap("lobDataById", &procFuncMyServiceLobDataById{handler: handler})
    p.AddToProcessorMap("invalid_return_for_hack", &procFuncMyServiceInvalidReturnForHack{handler: handler})
    p.AddToProcessorMap("rpc_skipped_codegen", &procFuncMyServiceRpcSkippedCodegen{handler: handler})
    p.AddToFunctionServiceMap("ping", "MyService")
    p.AddToFunctionServiceMap("getRandomData", "MyService")
    p.AddToFunctionServiceMap("sink", "MyService")
    p.AddToFunctionServiceMap("putDataById", "MyService")
    p.AddToFunctionServiceMap("hasDataById", "MyService")
    p.AddToFunctionServiceMap("getDataById", "MyService")
    p.AddToFunctionServiceMap("deleteDataById", "MyService")
    p.AddToFunctionServiceMap("lobDataById", "MyService")
    p.AddToFunctionServiceMap("invalid_return_for_hack", "MyService")
    p.AddToFunctionServiceMap("rpc_skipped_codegen", "MyService")

    return p
}


type procFuncMyServicePing struct {
    handler MyService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = &procFuncMyServicePing{}

func (p *procFuncMyServicePing) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqMyServicePing()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncMyServicePing) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("Ping", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncMyServicePing) Run(reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    result := newRespMyServicePing()
    err := p.handler.Ping()
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing Ping: " + err.Error(), err)
        return x, x
    }

    return result, nil
}


type procFuncMyServiceGetRandomData struct {
    handler MyService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = &procFuncMyServiceGetRandomData{}

func (p *procFuncMyServiceGetRandomData) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqMyServiceGetRandomData()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncMyServiceGetRandomData) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("GetRandomData", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncMyServiceGetRandomData) Run(reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    result := newRespMyServiceGetRandomData()
    retval, err := p.handler.GetRandomData()
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing GetRandomData: " + err.Error(), err)
        return x, x
    }

    result.Value = retval
    return result, nil
}


type procFuncMyServiceSink struct {
    handler MyService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = &procFuncMyServiceSink{}

func (p *procFuncMyServiceSink) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqMyServiceSink()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncMyServiceSink) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("Sink", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncMyServiceSink) Run(reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    args := reqStruct.(*reqMyServiceSink)
    result := newRespMyServiceSink()
    err := p.handler.Sink(args.Sink)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing Sink: " + err.Error(), err)
        return x, x
    }

    return result, nil
}


type procFuncMyServicePutDataById struct {
    handler MyService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = &procFuncMyServicePutDataById{}

func (p *procFuncMyServicePutDataById) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqMyServicePutDataById()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncMyServicePutDataById) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("PutDataById", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncMyServicePutDataById) Run(reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    args := reqStruct.(*reqMyServicePutDataById)
    result := newRespMyServicePutDataById()
    err := p.handler.PutDataById(args.Id, args.Data)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing PutDataById: " + err.Error(), err)
        return x, x
    }

    return result, nil
}


type procFuncMyServiceHasDataById struct {
    handler MyService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = &procFuncMyServiceHasDataById{}

func (p *procFuncMyServiceHasDataById) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqMyServiceHasDataById()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncMyServiceHasDataById) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("HasDataById", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncMyServiceHasDataById) Run(reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    args := reqStruct.(*reqMyServiceHasDataById)
    result := newRespMyServiceHasDataById()
    retval, err := p.handler.HasDataById(args.Id)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing HasDataById: " + err.Error(), err)
        return x, x
    }

    result.Value = retval
    return result, nil
}


type procFuncMyServiceGetDataById struct {
    handler MyService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = &procFuncMyServiceGetDataById{}

func (p *procFuncMyServiceGetDataById) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqMyServiceGetDataById()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncMyServiceGetDataById) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("GetDataById", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncMyServiceGetDataById) Run(reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    args := reqStruct.(*reqMyServiceGetDataById)
    result := newRespMyServiceGetDataById()
    retval, err := p.handler.GetDataById(args.Id)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing GetDataById: " + err.Error(), err)
        return x, x
    }

    result.Value = retval
    return result, nil
}


type procFuncMyServiceDeleteDataById struct {
    handler MyService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = &procFuncMyServiceDeleteDataById{}

func (p *procFuncMyServiceDeleteDataById) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqMyServiceDeleteDataById()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncMyServiceDeleteDataById) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("DeleteDataById", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncMyServiceDeleteDataById) Run(reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    args := reqStruct.(*reqMyServiceDeleteDataById)
    result := newRespMyServiceDeleteDataById()
    err := p.handler.DeleteDataById(args.Id)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing DeleteDataById: " + err.Error(), err)
        return x, x
    }

    return result, nil
}


type procFuncMyServiceLobDataById struct {
    handler MyService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = &procFuncMyServiceLobDataById{}

func (p *procFuncMyServiceLobDataById) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqMyServiceLobDataById()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncMyServiceLobDataById) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("LobDataById", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncMyServiceLobDataById) Run(reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    args := reqStruct.(*reqMyServiceLobDataById)
    err := p.handler.LobDataById(args.Id, args.Data)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing LobDataById: " + err.Error(), err)
        return x, x
    }

    return nil, nil
}


type procFuncMyServiceInvalidReturnForHack struct {
    handler MyService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = &procFuncMyServiceInvalidReturnForHack{}

func (p *procFuncMyServiceInvalidReturnForHack) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqMyServiceInvalidReturnForHack()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncMyServiceInvalidReturnForHack) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("InvalidReturnForHack", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncMyServiceInvalidReturnForHack) Run(reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    result := newRespMyServiceInvalidReturnForHack()
    retval, err := p.handler.InvalidReturnForHack()
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing InvalidReturnForHack: " + err.Error(), err)
        return x, x
    }

    result.Value = retval
    return result, nil
}


type procFuncMyServiceRpcSkippedCodegen struct {
    handler MyService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = &procFuncMyServiceRpcSkippedCodegen{}

func (p *procFuncMyServiceRpcSkippedCodegen) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqMyServiceRpcSkippedCodegen()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncMyServiceRpcSkippedCodegen) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("RpcSkippedCodegen", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncMyServiceRpcSkippedCodegen) Run(reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    result := newRespMyServiceRpcSkippedCodegen()
    err := p.handler.RpcSkippedCodegen()
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing RpcSkippedCodegen: " + err.Error(), err)
        return x, x
    }

    return result, nil
}




type DbMixedStackArguments interface {
    GetDataByKey0(ctx context.Context, key string) ([]byte, error)
    GetDataByKey1(ctx context.Context, key string) ([]byte, error)
}

// Deprecated: Use DbMixedStackArguments instead.
type DbMixedStackArgumentsClientInterface interface {
    thrift.ClientInterface
    GetDataByKey0(key string) ([]byte, error)
    GetDataByKey1(key string) ([]byte, error)
}

type DbMixedStackArgumentsChannelClient struct {
    ch thrift.RequestChannel
}
// Compile time interface enforcer
var _ DbMixedStackArguments = &DbMixedStackArgumentsChannelClient{}

func NewDbMixedStackArgumentsChannelClient(channel thrift.RequestChannel) *DbMixedStackArgumentsChannelClient {
    return &DbMixedStackArgumentsChannelClient{
        ch: channel,
    }
}

func (c *DbMixedStackArgumentsChannelClient) Close() error {
    return c.ch.Close()
}

func (c *DbMixedStackArgumentsChannelClient) IsOpen() bool {
    return c.ch.IsOpen()
}

func (c *DbMixedStackArgumentsChannelClient) Open() error {
    return c.ch.Open()
}

// Deprecated: Use DbMixedStackArgumentsChannelClient instead.
type DbMixedStackArgumentsClient struct {
    chClient *DbMixedStackArgumentsChannelClient
}
// Compile time interface enforcer
var _ DbMixedStackArgumentsClientInterface = &DbMixedStackArgumentsClient{}

// Deprecated: Use NewDbMixedStackArgumentsChannelClient() instead.
func NewDbMixedStackArgumentsClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *DbMixedStackArgumentsClient {
    return &DbMixedStackArgumentsClient{
        chClient: NewDbMixedStackArgumentsChannelClient(
            thrift.NewSerialChannel(iprot),
        ),
    }
}

func (c *DbMixedStackArgumentsClient) Close() error {
    return c.chClient.Close()
}

func (c *DbMixedStackArgumentsClient) IsOpen() bool {
    return c.chClient.IsOpen()
}

func (c *DbMixedStackArgumentsClient) Open() error {
    return c.chClient.Open()
}

// Deprecated: Use DbMixedStackArgumentsChannelClient instead.
type DbMixedStackArgumentsThreadsafeClient = DbMixedStackArgumentsClient

// Deprecated: Use NewDbMixedStackArgumentsChannelClient() instead.
func NewDbMixedStackArgumentsThreadsafeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *DbMixedStackArgumentsThreadsafeClient {
    return NewDbMixedStackArgumentsClient(t, iprot, oprot)
}

// Deprecated: Use NewDbMixedStackArgumentsChannelClient() instead.
func NewDbMixedStackArgumentsClientProtocol(prot thrift.Protocol) *DbMixedStackArgumentsClient {
  return NewDbMixedStackArgumentsClient(prot.Transport(), prot, prot)
}

// Deprecated: Use NewDbMixedStackArgumentsChannelClient() instead.
func NewDbMixedStackArgumentsThreadsafeClientProtocol(prot thrift.Protocol) *DbMixedStackArgumentsClient {
  return NewDbMixedStackArgumentsClient(prot.Transport(), prot, prot)
}

// Deprecated: Use NewDbMixedStackArgumentsChannelClient() instead.
func NewDbMixedStackArgumentsClientFactory(t thrift.Transport, pf thrift.ProtocolFactory) *DbMixedStackArgumentsClient {
  iprot := pf.GetProtocol(t)
  oprot := pf.GetProtocol(t)
  return NewDbMixedStackArgumentsClient(t, iprot, oprot)
}

// Deprecated: Use NewDbMixedStackArgumentsChannelClient() instead.
func NewDbMixedStackArgumentsThreadsafeClientFactory(t thrift.Transport, pf thrift.ProtocolFactory) *DbMixedStackArgumentsThreadsafeClient {
  return NewDbMixedStackArgumentsClientFactory(t, pf)
}


func (c *DbMixedStackArgumentsChannelClient) GetDataByKey0(ctx context.Context, key string) ([]byte, error) {
    in := &reqDbMixedStackArgumentsGetDataByKey0{
        Key: key,
    }
    out := newRespDbMixedStackArgumentsGetDataByKey0()
    err := c.ch.Call(ctx, "getDataByKey0", in, out)
    if err != nil {
        return out.Value, err
    }
    return out.Value, nil
}

func (c *DbMixedStackArgumentsClient) GetDataByKey0(key string) ([]byte, error) {
    return c.chClient.GetDataByKey0(nil, key)
}


func (c *DbMixedStackArgumentsChannelClient) GetDataByKey1(ctx context.Context, key string) ([]byte, error) {
    in := &reqDbMixedStackArgumentsGetDataByKey1{
        Key: key,
    }
    out := newRespDbMixedStackArgumentsGetDataByKey1()
    err := c.ch.Call(ctx, "getDataByKey1", in, out)
    if err != nil {
        return out.Value, err
    }
    return out.Value, nil
}

func (c *DbMixedStackArgumentsClient) GetDataByKey1(key string) ([]byte, error) {
    return c.chClient.GetDataByKey1(nil, key)
}


type reqDbMixedStackArgumentsGetDataByKey0 struct {
    Key string `thrift:"key,1" json:"key" db:"key"`
}
// Compile time interface enforcer
var _ thrift.Struct = &reqDbMixedStackArgumentsGetDataByKey0{}


func newReqDbMixedStackArgumentsGetDataByKey0() *reqDbMixedStackArgumentsGetDataByKey0 {
    return (&reqDbMixedStackArgumentsGetDataByKey0{})
}

func (x *reqDbMixedStackArgumentsGetDataByKey0) GetKeyNonCompat() string {
    return x.Key
}

func (x *reqDbMixedStackArgumentsGetDataByKey0) GetKey() string {
    return x.Key
}

func (x *reqDbMixedStackArgumentsGetDataByKey0) SetKey(value string) *reqDbMixedStackArgumentsGetDataByKey0 {
    x.Key = value
    return x
}


func (x *reqDbMixedStackArgumentsGetDataByKey0) writeField1(p thrift.Protocol) error {  // Key
    if err := p.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetKeyNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *reqDbMixedStackArgumentsGetDataByKey0) readField1(p thrift.Protocol) error {  // Key
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetKey(result)
    return nil
}

func (x *reqDbMixedStackArgumentsGetDataByKey0) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use reqDbMixedStackArgumentsGetDataByKey0.Set* methods instead or set the fields directly.
type reqDbMixedStackArgumentsGetDataByKey0Builder struct {
    obj *reqDbMixedStackArgumentsGetDataByKey0
}

func newReqDbMixedStackArgumentsGetDataByKey0Builder() *reqDbMixedStackArgumentsGetDataByKey0Builder {
    return &reqDbMixedStackArgumentsGetDataByKey0Builder{
        obj: newReqDbMixedStackArgumentsGetDataByKey0(),
    }
}

func (x *reqDbMixedStackArgumentsGetDataByKey0Builder) Key(value string) *reqDbMixedStackArgumentsGetDataByKey0Builder {
    x.obj.Key = value
    return x
}

func (x *reqDbMixedStackArgumentsGetDataByKey0Builder) Emit() *reqDbMixedStackArgumentsGetDataByKey0 {
    var objCopy reqDbMixedStackArgumentsGetDataByKey0 = *x.obj
    return &objCopy
}

func (x *reqDbMixedStackArgumentsGetDataByKey0) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqDbMixedStackArgumentsGetDataByKey0"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqDbMixedStackArgumentsGetDataByKey0) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // key
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type respDbMixedStackArgumentsGetDataByKey0 struct {
    Value []byte `thrift:"value,0" json:"value" db:"value"`
}
// Compile time interface enforcer
var _ thrift.Struct = &respDbMixedStackArgumentsGetDataByKey0{}
var _ thrift.WritableResult = &respDbMixedStackArgumentsGetDataByKey0{}


func newRespDbMixedStackArgumentsGetDataByKey0() *respDbMixedStackArgumentsGetDataByKey0 {
    return (&respDbMixedStackArgumentsGetDataByKey0{})
}

func (x *respDbMixedStackArgumentsGetDataByKey0) GetValueNonCompat() []byte {
    return x.Value
}

func (x *respDbMixedStackArgumentsGetDataByKey0) GetValue() []byte {
    if !x.IsSetValue() {
      return []byte("")
    }

    return x.Value
}

func (x *respDbMixedStackArgumentsGetDataByKey0) SetValue(value []byte) *respDbMixedStackArgumentsGetDataByKey0 {
    x.Value = value
    return x
}

func (x *respDbMixedStackArgumentsGetDataByKey0) IsSetValue() bool {
    return x.Value != nil
}

func (x *respDbMixedStackArgumentsGetDataByKey0) writeField0(p thrift.Protocol) error {  // Value
    if !x.IsSetValue() {
        return nil
    }

    if err := p.WriteFieldBegin("value", thrift.BINARY, 0); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetValueNonCompat()
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respDbMixedStackArgumentsGetDataByKey0) readField0(p thrift.Protocol) error {  // Value
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.SetValue(result)
    return nil
}

func (x *respDbMixedStackArgumentsGetDataByKey0) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use respDbMixedStackArgumentsGetDataByKey0.Set* methods instead or set the fields directly.
type respDbMixedStackArgumentsGetDataByKey0Builder struct {
    obj *respDbMixedStackArgumentsGetDataByKey0
}

func newRespDbMixedStackArgumentsGetDataByKey0Builder() *respDbMixedStackArgumentsGetDataByKey0Builder {
    return &respDbMixedStackArgumentsGetDataByKey0Builder{
        obj: newRespDbMixedStackArgumentsGetDataByKey0(),
    }
}

func (x *respDbMixedStackArgumentsGetDataByKey0Builder) Value(value []byte) *respDbMixedStackArgumentsGetDataByKey0Builder {
    x.obj.Value = value
    return x
}

func (x *respDbMixedStackArgumentsGetDataByKey0Builder) Emit() *respDbMixedStackArgumentsGetDataByKey0 {
    var objCopy respDbMixedStackArgumentsGetDataByKey0 = *x.obj
    return &objCopy
}

func (x *respDbMixedStackArgumentsGetDataByKey0) Exception() thrift.WritableException {
    return nil
}

func (x *respDbMixedStackArgumentsGetDataByKey0) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respDbMixedStackArgumentsGetDataByKey0"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respDbMixedStackArgumentsGetDataByKey0) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 0:  // value
            if err := x.readField0(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type reqDbMixedStackArgumentsGetDataByKey1 struct {
    Key string `thrift:"key,1" json:"key" db:"key"`
}
// Compile time interface enforcer
var _ thrift.Struct = &reqDbMixedStackArgumentsGetDataByKey1{}


func newReqDbMixedStackArgumentsGetDataByKey1() *reqDbMixedStackArgumentsGetDataByKey1 {
    return (&reqDbMixedStackArgumentsGetDataByKey1{})
}

func (x *reqDbMixedStackArgumentsGetDataByKey1) GetKeyNonCompat() string {
    return x.Key
}

func (x *reqDbMixedStackArgumentsGetDataByKey1) GetKey() string {
    return x.Key
}

func (x *reqDbMixedStackArgumentsGetDataByKey1) SetKey(value string) *reqDbMixedStackArgumentsGetDataByKey1 {
    x.Key = value
    return x
}


func (x *reqDbMixedStackArgumentsGetDataByKey1) writeField1(p thrift.Protocol) error {  // Key
    if err := p.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetKeyNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *reqDbMixedStackArgumentsGetDataByKey1) readField1(p thrift.Protocol) error {  // Key
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetKey(result)
    return nil
}

func (x *reqDbMixedStackArgumentsGetDataByKey1) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use reqDbMixedStackArgumentsGetDataByKey1.Set* methods instead or set the fields directly.
type reqDbMixedStackArgumentsGetDataByKey1Builder struct {
    obj *reqDbMixedStackArgumentsGetDataByKey1
}

func newReqDbMixedStackArgumentsGetDataByKey1Builder() *reqDbMixedStackArgumentsGetDataByKey1Builder {
    return &reqDbMixedStackArgumentsGetDataByKey1Builder{
        obj: newReqDbMixedStackArgumentsGetDataByKey1(),
    }
}

func (x *reqDbMixedStackArgumentsGetDataByKey1Builder) Key(value string) *reqDbMixedStackArgumentsGetDataByKey1Builder {
    x.obj.Key = value
    return x
}

func (x *reqDbMixedStackArgumentsGetDataByKey1Builder) Emit() *reqDbMixedStackArgumentsGetDataByKey1 {
    var objCopy reqDbMixedStackArgumentsGetDataByKey1 = *x.obj
    return &objCopy
}

func (x *reqDbMixedStackArgumentsGetDataByKey1) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqDbMixedStackArgumentsGetDataByKey1"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqDbMixedStackArgumentsGetDataByKey1) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // key
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type respDbMixedStackArgumentsGetDataByKey1 struct {
    Value []byte `thrift:"value,0" json:"value" db:"value"`
}
// Compile time interface enforcer
var _ thrift.Struct = &respDbMixedStackArgumentsGetDataByKey1{}
var _ thrift.WritableResult = &respDbMixedStackArgumentsGetDataByKey1{}


func newRespDbMixedStackArgumentsGetDataByKey1() *respDbMixedStackArgumentsGetDataByKey1 {
    return (&respDbMixedStackArgumentsGetDataByKey1{})
}

func (x *respDbMixedStackArgumentsGetDataByKey1) GetValueNonCompat() []byte {
    return x.Value
}

func (x *respDbMixedStackArgumentsGetDataByKey1) GetValue() []byte {
    if !x.IsSetValue() {
      return []byte("")
    }

    return x.Value
}

func (x *respDbMixedStackArgumentsGetDataByKey1) SetValue(value []byte) *respDbMixedStackArgumentsGetDataByKey1 {
    x.Value = value
    return x
}

func (x *respDbMixedStackArgumentsGetDataByKey1) IsSetValue() bool {
    return x.Value != nil
}

func (x *respDbMixedStackArgumentsGetDataByKey1) writeField0(p thrift.Protocol) error {  // Value
    if !x.IsSetValue() {
        return nil
    }

    if err := p.WriteFieldBegin("value", thrift.BINARY, 0); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetValueNonCompat()
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respDbMixedStackArgumentsGetDataByKey1) readField0(p thrift.Protocol) error {  // Value
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.SetValue(result)
    return nil
}

func (x *respDbMixedStackArgumentsGetDataByKey1) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use respDbMixedStackArgumentsGetDataByKey1.Set* methods instead or set the fields directly.
type respDbMixedStackArgumentsGetDataByKey1Builder struct {
    obj *respDbMixedStackArgumentsGetDataByKey1
}

func newRespDbMixedStackArgumentsGetDataByKey1Builder() *respDbMixedStackArgumentsGetDataByKey1Builder {
    return &respDbMixedStackArgumentsGetDataByKey1Builder{
        obj: newRespDbMixedStackArgumentsGetDataByKey1(),
    }
}

func (x *respDbMixedStackArgumentsGetDataByKey1Builder) Value(value []byte) *respDbMixedStackArgumentsGetDataByKey1Builder {
    x.obj.Value = value
    return x
}

func (x *respDbMixedStackArgumentsGetDataByKey1Builder) Emit() *respDbMixedStackArgumentsGetDataByKey1 {
    var objCopy respDbMixedStackArgumentsGetDataByKey1 = *x.obj
    return &objCopy
}

func (x *respDbMixedStackArgumentsGetDataByKey1) Exception() thrift.WritableException {
    return nil
}

func (x *respDbMixedStackArgumentsGetDataByKey1) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respDbMixedStackArgumentsGetDataByKey1"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respDbMixedStackArgumentsGetDataByKey1) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 0:  // value
            if err := x.readField0(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}



type DbMixedStackArgumentsProcessor struct {
    processorMap       map[string]thrift.ProcessorFunction
    functionServiceMap map[string]string
    handler            DbMixedStackArguments
}
// Compile time interface enforcer
var _ thrift.Processor = &DbMixedStackArgumentsProcessor{}

func (p *DbMixedStackArgumentsProcessor) AddToProcessorMap(key string, processor thrift.ProcessorFunction) {
    p.processorMap[key] = processor
}

func (p *DbMixedStackArgumentsProcessor) AddToFunctionServiceMap(key, service string) {
    p.functionServiceMap[key] = service
}

func (p *DbMixedStackArgumentsProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction, err error) {
    if processor, ok := p.processorMap[key]; ok {
        return processor, nil
    }
    return nil, nil
}

func (p *DbMixedStackArgumentsProcessor) ProcessorMap() map[string]thrift.ProcessorFunction {
    return p.processorMap
}

func (p *DbMixedStackArgumentsProcessor) FunctionServiceMap() map[string]string {
    return p.functionServiceMap
}

func NewDbMixedStackArgumentsProcessor(handler DbMixedStackArguments) *DbMixedStackArgumentsProcessor {
    p := &DbMixedStackArgumentsProcessor{
        handler:            handler,
        processorMap:       make(map[string]thrift.ProcessorFunction),
        functionServiceMap: make(map[string]string),
    }
    p.AddToProcessorMap("getDataByKey0", &procFuncDbMixedStackArgumentsGetDataByKey0{handler: handler})
    p.AddToProcessorMap("getDataByKey1", &procFuncDbMixedStackArgumentsGetDataByKey1{handler: handler})
    p.AddToFunctionServiceMap("getDataByKey0", "DbMixedStackArguments")
    p.AddToFunctionServiceMap("getDataByKey1", "DbMixedStackArguments")

    return p
}


type procFuncDbMixedStackArgumentsGetDataByKey0 struct {
    handler DbMixedStackArguments
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = &procFuncDbMixedStackArgumentsGetDataByKey0{}

func (p *procFuncDbMixedStackArgumentsGetDataByKey0) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqDbMixedStackArgumentsGetDataByKey0()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncDbMixedStackArgumentsGetDataByKey0) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("GetDataByKey0", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncDbMixedStackArgumentsGetDataByKey0) Run(reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    args := reqStruct.(*reqDbMixedStackArgumentsGetDataByKey0)
    result := newRespDbMixedStackArgumentsGetDataByKey0()
    retval, err := p.handler.GetDataByKey0(args.Key)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing GetDataByKey0: " + err.Error(), err)
        return x, x
    }

    result.Value = retval
    return result, nil
}


type procFuncDbMixedStackArgumentsGetDataByKey1 struct {
    handler DbMixedStackArguments
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = &procFuncDbMixedStackArgumentsGetDataByKey1{}

func (p *procFuncDbMixedStackArgumentsGetDataByKey1) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqDbMixedStackArgumentsGetDataByKey1()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncDbMixedStackArgumentsGetDataByKey1) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("GetDataByKey1", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncDbMixedStackArgumentsGetDataByKey1) Run(reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    args := reqStruct.(*reqDbMixedStackArgumentsGetDataByKey1)
    result := newRespDbMixedStackArgumentsGetDataByKey1()
    retval, err := p.handler.GetDataByKey1(args.Key)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing GetDataByKey1: " + err.Error(), err)
        return x, x
    }

    result.Value = retval
    return result, nil
}


