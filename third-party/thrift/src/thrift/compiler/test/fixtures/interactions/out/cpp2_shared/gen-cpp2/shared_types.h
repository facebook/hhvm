/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/interactions/src/shared.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>

namespace apache::thrift {
namespace ident {
struct s_res;
struct i_res;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_s_res
#define APACHE_THRIFT_ACCESSOR_s_res
APACHE_THRIFT_DEFINE_ACCESSOR(s_res);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i_res
#define APACHE_THRIFT_ACCESSOR_i_res
APACHE_THRIFT_DEFINE_ACCESSOR(i_res);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
// END declare_enums
// BEGIN forward_declare
namespace thrift::shared_interactions {
class DoSomethingResult;
} // namespace thrift::shared_interactions
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace thrift::shared_interactions {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;


/** Glean {"file": "thrift/compiler/test/fixtures/interactions/src/shared.thrift", "name": "DoSomethingResult", "kind": "struct" } */
class DoSomethingResult final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "shared";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::s_res,
    ::apache::thrift::ident::i_res
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::i32_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = DoSomethingResult;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  DoSomethingResult();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  DoSomethingResult(apache::thrift::FragileConstructor, ::std::string s_res__arg, ::std::int32_t i_res__arg);

  DoSomethingResult(DoSomethingResult&&) noexcept;

  DoSomethingResult(const DoSomethingResult& src);


  DoSomethingResult& operator=(DoSomethingResult&&) noexcept;
  DoSomethingResult& operator=(const DoSomethingResult& src);

  ~DoSomethingResult();

 private:
  ::std::string __fbthrift_field_s_res;
 private:
  ::std::int32_t __fbthrift_field_i_res;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const DoSomethingResult&) const;
  bool operator<(const DoSomethingResult&) const;

  /** Glean { "field": "s_res" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> s_res_ref() const& {
    return {this->__fbthrift_field_s_res, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "s_res" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> s_res_ref() & {
    return {this->__fbthrift_field_s_res, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "s_res" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> s_res_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_s_res), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "s_res" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> s_res() const& {
    return {this->__fbthrift_field_s_res, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "s_res" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> s_res() & {
    return {this->__fbthrift_field_s_res, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "s_res" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> s_res() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_s_res), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "i_res" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> i_res_ref() const& {
    return {this->__fbthrift_field_i_res, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "i_res" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> i_res_ref() & {
    return {this->__fbthrift_field_i_res, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "i_res" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> i_res_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_i_res), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "i_res" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> i_res() const& {
    return {this->__fbthrift_field_i_res, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "i_res" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> i_res() & {
    return {this->__fbthrift_field_i_res, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "i_res" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> i_res() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_i_res), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "s_res" } */
  [[deprecated("Use `FOO.s_res().value()` instead of `FOO.get_s_res()`")]]
  const ::std::string& get_s_res() const& {
    return __fbthrift_field_s_res;
  }

  /** Glean { "field": "s_res" } */
  [[deprecated("Use `FOO.s_res().value()` instead of `FOO.get_s_res()`")]]
  ::std::string get_s_res() && {
    return static_cast<::std::string&&>(__fbthrift_field_s_res);
  }

  /** Glean { "field": "s_res" } */
  template <typename T_DoSomethingResult_s_res_struct_setter = ::std::string>
  [[deprecated("Use `FOO.s_res() = BAR` instead of `FOO.set_s_res(BAR)`")]]
  ::std::string& set_s_res(T_DoSomethingResult_s_res_struct_setter&& s_res_) {
    s_res_ref() = std::forward<T_DoSomethingResult_s_res_struct_setter>(s_res_);
    return __fbthrift_field_s_res;
  }

  /** Glean { "field": "i_res" } */
  [[deprecated("Use `FOO.i_res().value()` instead of `FOO.get_i_res()`")]]
  ::std::int32_t get_i_res() const;

  /** Glean { "field": "i_res" } */
  [[deprecated("Use `FOO.i_res() = BAR` instead of `FOO.set_i_res(BAR)`")]]
  ::std::int32_t& set_i_res(::std::int32_t i_res_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<DoSomethingResult>;
  friend void swap(DoSomethingResult& a, DoSomethingResult& b);
};

template <class Protocol_>
unsigned long DoSomethingResult::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace thrift::shared_interactions

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::thrift::shared_interactions::DoSomethingResult, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -4220872492017656570;
  static constexpr ::std::string_view definitionKey = {"\x80\x09\xa3\x1b\x4f\xb5\x78\xf9\x6a\x6f\x5c\x2e\x4a\xd4\xeb\x68", 16};
};
} // namespace apache::thrift::detail
