<?php
// Copyright 2004-present Facebook. All Rights Reserved.
// This file is @generated by
// fbcode/hphp/facebook/tools/code_model/Generate.sh

namespace HH\CodeModel {

/**
 * A name that identifies some kind of modification to the
 * semantics of another code node. For example "public".
 */
class Modifier /*implements IModifier*/ {
  use NamedNode;
  use Node;


  /**
   * Returns $visitor->visitModifier($this) if
   * such a method exists on $visitor.
   * Falls back to a base interface visit method if possible.
   * Otherwise it returns $visitor->visitNode() .
   */
  public function accept(/*mixed*/ $visitor) /*: mixed*/ {
    if (method_exists($visitor, "visitModifier")) {
      // UNSAFE
      return $visitor->visitModifier($this);
    }
    if (method_exists($visitor, "visitINamedNode")) {
      // UNSAFE
      return $visitor->visitINamedNode($this);
    }
    // UNSAFE
    return $visitor->visitNode($this);
  }

  /**
   * Calls $visitor->visitModifierReference($this) if
   * such a method exists on $visitor. If not it returns null.
   */
  public function acceptAsReference(/*mixed*/ $visitor)/*: mixed*/{
    if (method_exists($visitor, "visitModifierReference")) {
      // UNSAFE
      return $visitor->visitModifierReference($this);
    }
    if (method_exists($visitor, "visitINamedNodeReference")) {
      // UNSAFE
      return $visitor->visitINamedNodeReference($this);
    }
    // UNSAFE
    return $visitor->visitNodeReference($this);
  }

  /**
   * Yields a list of nodes that are children of this node.
   * A node has exactly one parent, so doing a depth
   * first traversal of a node graph using getChildren will
   * traverse a spanning tree.
   */
  public function getChildren() /*: Continuation<INode>*/ {
    // UNSAFE
    yield break;
  }

  /**
   * Yields a list of nodes that can be reached from this
   * node but are not children of this node. Most traversals
   * will not traverse the children of nodes reached via
   * getReferences.
   */
  public function getReferences() /*: Continuation<INode>*/ {
    // UNSAFE
    yield break;
  }

}
}
