#
# Basic test of classes for hip hop assembler.
#

.main {
  DefCls 0
  DefCls 1
  DefCls 2
  DefCls 3
  DefCls 4
  FPushFuncD 0 "main"
  FCall <> 0 1 "" - "" ""
  PopC
  True
  RetC
}

.class Base {
  .method [public] __construct {
    String "default constructor\n"
    Print
    PopC

    Null
    RetC
  }

  .method [public static] print_it($x) {
    CGetL $x
    String "\n"
    Concat
    Print
    PopC

    True
    RetC
  }

  .method [protected] prot_method() {
    String "In protected method\n"
    Print
    RetC
  }

  .method [public] overriden() {
    String "Base::overriden\n"
    Print
    RetC
  }
}

.class [interface] IDunno {
  .default_ctor;
  .method [public abstract] abs_method {
    String "Pure virtual method called"
    Fatal RuntimeOmitFrame
  }
}

.class [interface] IDunno2 { .default_ctor; }

.class Derived extends Base implements(IDunno IDunno2) {
  .method [public] some_junk {
    This
    FPushObjMethodD 0 "prot_method" NullThrows
    FCall <> 0 1 "" - "" ""
    PopC

    Null
    RetC
  }

  .method [public] overriden() {
    String "Derived::overriden\n"
    Print
    RetC
  }

  .method [public] abs_method() {
    String "in an abstract method\n"
    Print
    RetC
  }
}

.class WithProps {
  .property [public] funk;

  .method [public] print_funk {
    String "funk"
    SetL $name
    PopC

    This
    BaseC 0 Warn
    QueryM 1 CGet PL:$name
    String "\n"
    Concat
    Print
    RetC
  }

  .property [private] defaulted = """s:3:"heh";""";
  .property [private] badstring =
    """s:30:"bad string\"""has triple quotes";""";

  .method [public] print_defaulted {
    This
    BaseC 0 Warn
    QueryM 1 CGet PT:"defaulted"
    String "\n"
    Concat
    Print
    PopC

    This
    BaseC 0 Warn
    QueryM 1 CGet PT:"badstring"
    String "bad string\"\"\"has triple quotes"
    Eq
    JmpZ broken
    True
    RetC

    broken: String "string escaping is broken\n"
            Print
            RetC
  }
}

.function prop_test {
  NewObjD "WithProps"
  Dup
  FPushCtor 0
  FCall <> 0 1 "" - "" ""
  PopC
  SetL $obj
  PopC

  String "funk"
  String "value of funk"
  BaseL $obj Define
  SetM 1 PC:1
  PopC

  CGetL $obj
  FPushObjMethodD 0 "print_funk" NullThrows
  FCall <> 0 1 "" - "" ""
  PopC

  CGetL $obj
  FPushObjMethodD 0 "print_defaulted" NullThrows
  FCall <> 0 1 "" - "" ""
  PopC

  True
  RetC
}

.function main {
  .numclsrefslots 1;

  NewObjD "Base"
  Dup
  FPushCtor 0
  FCall <> 0 1 "" - "" ""
  PopC
  SetL $base
  PopC

  String "print_it"
  String "Base"
  ClsRefGetC 0
  FPushClsMethod 1 0
  String "printing this string"
  FCall <> 1 1 "" - "" ""
  PopC

  NewObjD "Derived"
  Dup
  FPushCtor 0
  FCall <> 0 1 "" - "" ""
  PopC
  SetL $derived
  PopC

  CGetL $derived
  FPushObjMethodD 0 "some_junk" NullThrows
  FCall <> 0 1 "" - "" ""
  PopC

  CGetL $base
  FPushObjMethodD 0 "overriden" NullThrows
  FCall <> 0 1 "" - "" ""
  PopC

  CGetL $derived
  FPushObjMethodD 0 "overriden" NullThrows
  FCall <> 0 1 "" - "" ""
  PopC

  CGetL $derived
  FPushObjMethodD 0 "abs_method" NullThrows
  FCall <> 0 1 "" - "" ""
  PopC

  FPushFuncD 0 "prop_test"
  FCall <> 0 1 "" - "" ""
  PopC

  Int 1
  RetC
}
