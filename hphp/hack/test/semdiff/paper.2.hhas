#starts here
.adata A_0 = """v:0:{}""";
.adata A_1 = """v:3:{a:2:{i:0;i:1;i:1;i:2;}a:2:{i:0;i:3;i:1;i:4;}a:2:{i:0;i:5;i:1;i:6;}}""";

.main {
  FPushFuncD 0 "test"
  FCall 0 0 1 - "" ""
  PopR
  Int 1
  RetC
}

.function <"HH\\vec<(Ta, Tc)>" "HH\\vec" hh_type extended_hint > silly(<"HH\\Traversable<(Ta, Tb)>" "HH\\Traversable" hh_type > $pairs, <"(function (Ta, Tb): Tc)" N  > $f) {
  .numiters 1;
  .declvars $result $a $b $e;
  VerifyParamType $pairs
  Vec @A_0
  SetL $result
  PopC
  .try {
    CGetL $pairs
    IterInit 0 L4 _8
    .try_fault F1 {
    L0:
      BaseL _8 Warn
      QueryM 0 CGet EI:1
      SetL $b
      PopC
      BaseL _8 Warn
      QueryM 0 CGet EI:0
      SetL $a
      PopC
      CGetL $f
      FPushFunc 2
      CGetL $a
      CGetL $b
      FThrowOnRefMismatch "00"
      FCall 2 0 1 - "" ""
      UnboxR
      SetL _8
      PopC
      CGetL $a
      CGetL _8
      NewPackedArray 2
      UnsetL _8
      BaseL $result Define
      SetM 0 W
      PopC
      IterNext 0 L0 _8
    }
    Jmp L4
  } .catch {
    Dup
    InstanceOfD "Exception"
    JmpNZ L1
    Throw
  L1:
    SetL $e
    PopC
  }
L4:
  CGetL $result
  VerifyRetTypeC
  RetC
F1:
  IterFree 0
  Unwind
}

.function <"HH\\void" N  > test() {
  .declvars $p $f;
  Vec @A_1
  SetL $p
  PopC
  CreateCl 0 0
  SetL $f
  PopC
  FPushFuncD 1 "var_dump"
  FPushFuncD 2 "silly"
  CGetL $p
  CGetL $f
  FCall 2 0 1 - "" ""
  UnboxR
  FCall 1 0 1 - "" ""
  PopR
  Null
  RetC
}

.class [no_override unique nontop] Closure$test;0 extends Closure {
  .method [public static] <"" N  > __invoke(<"HH\\int" "HH\\int" hh_type > $x, <"HH\\int" "HH\\int" hh_type > $y) isClosureBody {
    .declvars $0Closure;
    VerifyParamType $x
    VerifyParamType $y
    CGetL $y
    CGetL2 $x
    Add
    RetC
  }
}

#ends here
