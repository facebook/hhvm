/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/refs/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>

namespace apache::thrift {
namespace ident {
struct anInteger;
struct aString;
struct int_field;
struct opt_value;
struct value;
struct req_value;
struct opt_enum_value;
struct enum_value;
struct req_enum_value;
struct opt_str_value;
struct str_value;
struct req_str_value;
struct opt_ref;
struct ref;
struct req_ref;
struct u;
struct aDouble;
struct f;
struct mes;
struct list_ref;
struct set_ref;
struct map_ref;
struct list_ref_unique;
struct set_ref_shared;
struct list_ref_shared_const;
struct opt_shared_const;
struct shared_const;
struct req_shared_const;
struct def_field;
struct opt_field;
struct req_field;
struct a;
struct b;
struct c;
struct field1;
struct field2;
struct field1;
struct field2;
struct field1;
struct field2;
struct field1;
struct field2;
struct def_field;
struct opt_field;
struct req_field;
struct def_field;
struct opt_field;
struct req_field;
struct def_field;
struct opt_field;
struct req_field;
struct def_field;
struct def_unique_string_ref;
struct def_shared_string_ref;
struct def_shared_string_const_ref;
struct unique_string_ref;
struct shared_string_ref;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_anInteger
#define APACHE_THRIFT_ACCESSOR_anInteger
APACHE_THRIFT_DEFINE_ACCESSOR(anInteger);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_aString
#define APACHE_THRIFT_ACCESSOR_aString
APACHE_THRIFT_DEFINE_ACCESSOR(aString);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_int_field
#define APACHE_THRIFT_ACCESSOR_int_field
APACHE_THRIFT_DEFINE_ACCESSOR(int_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_value
#define APACHE_THRIFT_ACCESSOR_opt_value
APACHE_THRIFT_DEFINE_ACCESSOR(opt_value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_value
#define APACHE_THRIFT_ACCESSOR_value
APACHE_THRIFT_DEFINE_ACCESSOR(value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_req_value
#define APACHE_THRIFT_ACCESSOR_req_value
APACHE_THRIFT_DEFINE_ACCESSOR(req_value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_enum_value
#define APACHE_THRIFT_ACCESSOR_opt_enum_value
APACHE_THRIFT_DEFINE_ACCESSOR(opt_enum_value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_enum_value
#define APACHE_THRIFT_ACCESSOR_enum_value
APACHE_THRIFT_DEFINE_ACCESSOR(enum_value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_req_enum_value
#define APACHE_THRIFT_ACCESSOR_req_enum_value
APACHE_THRIFT_DEFINE_ACCESSOR(req_enum_value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_str_value
#define APACHE_THRIFT_ACCESSOR_opt_str_value
APACHE_THRIFT_DEFINE_ACCESSOR(opt_str_value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_str_value
#define APACHE_THRIFT_ACCESSOR_str_value
APACHE_THRIFT_DEFINE_ACCESSOR(str_value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_req_str_value
#define APACHE_THRIFT_ACCESSOR_req_str_value
APACHE_THRIFT_DEFINE_ACCESSOR(req_str_value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_ref
#define APACHE_THRIFT_ACCESSOR_opt_ref
APACHE_THRIFT_DEFINE_ACCESSOR(opt_ref);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ref
#define APACHE_THRIFT_ACCESSOR_ref
APACHE_THRIFT_DEFINE_ACCESSOR(ref);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_req_ref
#define APACHE_THRIFT_ACCESSOR_req_ref
APACHE_THRIFT_DEFINE_ACCESSOR(req_ref);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_u
#define APACHE_THRIFT_ACCESSOR_u
APACHE_THRIFT_DEFINE_ACCESSOR(u);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_aDouble
#define APACHE_THRIFT_ACCESSOR_aDouble
APACHE_THRIFT_DEFINE_ACCESSOR(aDouble);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_f
#define APACHE_THRIFT_ACCESSOR_f
APACHE_THRIFT_DEFINE_ACCESSOR(f);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mes
#define APACHE_THRIFT_ACCESSOR_mes
APACHE_THRIFT_DEFINE_ACCESSOR(mes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_ref
#define APACHE_THRIFT_ACCESSOR_list_ref
APACHE_THRIFT_DEFINE_ACCESSOR(list_ref);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_set_ref
#define APACHE_THRIFT_ACCESSOR_set_ref
APACHE_THRIFT_DEFINE_ACCESSOR(set_ref);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_map_ref
#define APACHE_THRIFT_ACCESSOR_map_ref
APACHE_THRIFT_DEFINE_ACCESSOR(map_ref);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_ref_unique
#define APACHE_THRIFT_ACCESSOR_list_ref_unique
APACHE_THRIFT_DEFINE_ACCESSOR(list_ref_unique);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_set_ref_shared
#define APACHE_THRIFT_ACCESSOR_set_ref_shared
APACHE_THRIFT_DEFINE_ACCESSOR(set_ref_shared);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_ref_shared_const
#define APACHE_THRIFT_ACCESSOR_list_ref_shared_const
APACHE_THRIFT_DEFINE_ACCESSOR(list_ref_shared_const);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_shared_const
#define APACHE_THRIFT_ACCESSOR_opt_shared_const
APACHE_THRIFT_DEFINE_ACCESSOR(opt_shared_const);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_shared_const
#define APACHE_THRIFT_ACCESSOR_shared_const
APACHE_THRIFT_DEFINE_ACCESSOR(shared_const);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_req_shared_const
#define APACHE_THRIFT_ACCESSOR_req_shared_const
APACHE_THRIFT_DEFINE_ACCESSOR(req_shared_const);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_def_field
#define APACHE_THRIFT_ACCESSOR_def_field
APACHE_THRIFT_DEFINE_ACCESSOR(def_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_field
#define APACHE_THRIFT_ACCESSOR_opt_field
APACHE_THRIFT_DEFINE_ACCESSOR(opt_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_req_field
#define APACHE_THRIFT_ACCESSOR_req_field
APACHE_THRIFT_DEFINE_ACCESSOR(req_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_a
#define APACHE_THRIFT_ACCESSOR_a
APACHE_THRIFT_DEFINE_ACCESSOR(a);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_b
#define APACHE_THRIFT_ACCESSOR_b
APACHE_THRIFT_DEFINE_ACCESSOR(b);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_c
#define APACHE_THRIFT_ACCESSOR_c
APACHE_THRIFT_DEFINE_ACCESSOR(c);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field1
#define APACHE_THRIFT_ACCESSOR_field1
APACHE_THRIFT_DEFINE_ACCESSOR(field1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field2
#define APACHE_THRIFT_ACCESSOR_field2
APACHE_THRIFT_DEFINE_ACCESSOR(field2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field1
#define APACHE_THRIFT_ACCESSOR_field1
APACHE_THRIFT_DEFINE_ACCESSOR(field1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field2
#define APACHE_THRIFT_ACCESSOR_field2
APACHE_THRIFT_DEFINE_ACCESSOR(field2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field1
#define APACHE_THRIFT_ACCESSOR_field1
APACHE_THRIFT_DEFINE_ACCESSOR(field1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field2
#define APACHE_THRIFT_ACCESSOR_field2
APACHE_THRIFT_DEFINE_ACCESSOR(field2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field1
#define APACHE_THRIFT_ACCESSOR_field1
APACHE_THRIFT_DEFINE_ACCESSOR(field1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field2
#define APACHE_THRIFT_ACCESSOR_field2
APACHE_THRIFT_DEFINE_ACCESSOR(field2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_def_field
#define APACHE_THRIFT_ACCESSOR_def_field
APACHE_THRIFT_DEFINE_ACCESSOR(def_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_field
#define APACHE_THRIFT_ACCESSOR_opt_field
APACHE_THRIFT_DEFINE_ACCESSOR(opt_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_req_field
#define APACHE_THRIFT_ACCESSOR_req_field
APACHE_THRIFT_DEFINE_ACCESSOR(req_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_def_field
#define APACHE_THRIFT_ACCESSOR_def_field
APACHE_THRIFT_DEFINE_ACCESSOR(def_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_field
#define APACHE_THRIFT_ACCESSOR_opt_field
APACHE_THRIFT_DEFINE_ACCESSOR(opt_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_req_field
#define APACHE_THRIFT_ACCESSOR_req_field
APACHE_THRIFT_DEFINE_ACCESSOR(req_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_def_field
#define APACHE_THRIFT_ACCESSOR_def_field
APACHE_THRIFT_DEFINE_ACCESSOR(def_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_field
#define APACHE_THRIFT_ACCESSOR_opt_field
APACHE_THRIFT_DEFINE_ACCESSOR(opt_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_req_field
#define APACHE_THRIFT_ACCESSOR_req_field
APACHE_THRIFT_DEFINE_ACCESSOR(req_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_def_field
#define APACHE_THRIFT_ACCESSOR_def_field
APACHE_THRIFT_DEFINE_ACCESSOR(def_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_def_unique_string_ref
#define APACHE_THRIFT_ACCESSOR_def_unique_string_ref
APACHE_THRIFT_DEFINE_ACCESSOR(def_unique_string_ref);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_def_shared_string_ref
#define APACHE_THRIFT_ACCESSOR_def_shared_string_ref
APACHE_THRIFT_DEFINE_ACCESSOR(def_shared_string_ref);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_def_shared_string_const_ref
#define APACHE_THRIFT_ACCESSOR_def_shared_string_const_ref
APACHE_THRIFT_DEFINE_ACCESSOR(def_shared_string_const_ref);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_unique_string_ref
#define APACHE_THRIFT_ACCESSOR_unique_string_ref
APACHE_THRIFT_DEFINE_ACCESSOR(unique_string_ref);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_shared_string_ref
#define APACHE_THRIFT_ACCESSOR_shared_string_ref
APACHE_THRIFT_DEFINE_ACCESSOR(shared_string_ref);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
namespace cpp2 {

/** Glean {"file": "thrift/compiler/test/fixtures/refs/src/module.thrift", "name": "MyEnum", "kind": "enum" } */
enum class MyEnum {
  Zero = 0,
  One = 1,
};

/** Glean {"file": "thrift/compiler/test/fixtures/refs/src/module.thrift", "name": "TypedEnum", "kind": "enum" } */
enum class TypedEnum : ::std::int16_t {
  VAL1 = 0,
  VAL2 = 1,
};

} // namespace cpp2

template<> struct std::hash<::cpp2::MyEnum> :
  ::apache::thrift::detail::enum_hash<::cpp2::MyEnum> {};
template<> struct std::hash<::cpp2::TypedEnum> :
  ::apache::thrift::detail::enum_hash<::cpp2::TypedEnum> {};

namespace apache::thrift {

template <> struct TEnumTraits<::cpp2::MyEnum> {
  using type = ::cpp2::MyEnum;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "MyEnum";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "module";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::Zero; }
  static constexpr type max() { return type::One; }
};

template <> struct TEnumTraits<::cpp2::TypedEnum> {
  using type = ::cpp2::TypedEnum;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "TypedEnum";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "module";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::VAL1; }
  static constexpr type max() { return type::VAL2; }
};

} // namespace apache::thrift
// END declare_enums
// BEGIN forward_declare
namespace cpp2 {
class MyUnion;
class NonTriviallyDestructibleUnion;
class MyField;
class MyStruct;
class StructWithUnion;
class RecursiveStruct;
class StructWithContainers;
class StructWithSharedConst;
class Empty;
class StructWithRef;
class StructWithBox;
class StructWithInternBox;
class StructWithTerseInternBox;
class AdaptedStructWithInternBox;
class AdaptedStructWithTerseInternBox;
class StructWithRefTypeUnique;
class StructWithRefTypeShared;
class StructWithRefTypeSharedConst;
class StructWithRefAndAnnotCppNoexceptMoveCtor;
class StructWithString;
} // namespace cpp2
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
template<>
struct is_cpp_ref_field_optional<::cpp2::MyField,::apache::thrift::type::field_id<1>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::cpp2::MyField,::apache::thrift::type::field_id<4>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::cpp2::MyField,::apache::thrift::type::field_id<7>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::cpp2::MyStruct,::apache::thrift::type::field_id<1>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::cpp2::StructWithSharedConst,::apache::thrift::type::field_id<1>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::cpp2::StructWithRef,::apache::thrift::type::field_id<2>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::cpp2::StructWithBox,::apache::thrift::type::field_id<1>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::cpp2::StructWithBox,::apache::thrift::type::field_id<2>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::cpp2::StructWithBox,::apache::thrift::type::field_id<3>> : std::true_type{};
template<>
struct is_cpp_ref_field_terse<::cpp2::StructWithTerseInternBox,::apache::thrift::type::field_id<1>> : std::true_type{};
template<>
struct is_cpp_ref_field_terse<::cpp2::StructWithTerseInternBox,::apache::thrift::type::field_id<2>> : std::true_type{};
template<>
struct is_cpp_ref_field_terse<::cpp2::AdaptedStructWithTerseInternBox,::apache::thrift::type::field_id<1>> : std::true_type{};
template<>
struct is_cpp_ref_field_terse<::cpp2::AdaptedStructWithTerseInternBox,::apache::thrift::type::field_id<2>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::cpp2::StructWithRefTypeUnique,::apache::thrift::type::field_id<2>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::cpp2::StructWithRefTypeShared,::apache::thrift::type::field_id<2>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::cpp2::StructWithRefTypeSharedConst,::apache::thrift::type::field_id<2>> : std::true_type{};
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;


/** Glean {"file": "thrift/compiler/test/fixtures/refs/src/module.thrift", "name": "MyUnion", "kind": "union" } */
class MyUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::anInteger,
    ::apache::thrift::ident::aString
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_destruct();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:
  enum class Type : int {
    __EMPTY__ = 0,
    anInteger = 1,
    aString = 2,
  } ;

  MyUnion()
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {}

  MyUnion(MyUnion&& rhs) noexcept
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::anInteger:
      {
        set_anInteger(std::move(*rhs.value_.anInteger));
        break;
      }
      case Type::aString:
      {
        set_aString(std::move(*rhs.value_.aString));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  MyUnion(const MyUnion& rhs);

  MyUnion& operator=(MyUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        __fbthrift_clear();
        return *this;
      }
      case Type::anInteger:
      {
        set_anInteger(std::move(*rhs.value_.anInteger));
        break;
      }
      case Type::aString:
      {
        set_aString(std::move(*rhs.value_.aString));
        break;
      }
      default:
      {
        assert(false);
        __fbthrift_clear();
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  MyUnion& operator=(const MyUnion& rhs);

  ~MyUnion();

  union storage_type {
    ::std::unique_ptr<::std::int32_t> anInteger;
    ::std::unique_ptr<::std::string> aString;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const MyUnion&) const;
  bool operator<(const MyUnion&) const;

  /** Glean { "field": "anInteger" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::unique_ptr<::std::int32_t>& set_anInteger(::std::int32_t t = ::std::int32_t()) {
    using T0 = ::std::unique_ptr<::std::int32_t>;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::anInteger);
    ::new (std::addressof(value_.anInteger)) T(new typename T::element_type(t));
    return value_.anInteger;
  }

  /** Glean { "field": "anInteger" } */
  ::std::unique_ptr<::std::int32_t>& set_anInteger(::std::unique_ptr<::std::int32_t> t) {
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::anInteger);
    ::new (std::addressof(value_.anInteger)) ::std::unique_ptr<::std::int32_t>(std::move(t));
    return value_.anInteger;
  }

  /** Glean { "field": "aString" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::unique_ptr<::std::string>& set_aString(::std::string const &t) {
    using T0 = ::std::unique_ptr<::std::string>;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::aString);
    ::new (std::addressof(value_.aString)) T(new typename T::element_type(t));
    return value_.aString;
  }

  /** Glean { "field": "aString" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::unique_ptr<::std::string>& set_aString(::std::string&& t) {
    using T0 = ::std::unique_ptr<::std::string>;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::aString);
    ::new (std::addressof(value_.aString)) T(new typename T::element_type(std::move(t)));
    return value_.aString;
  }

  /** Glean { "field": "aString" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::string, T...>> ::std::unique_ptr<::std::string>& set_aString(T&&... t) {
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::aString);
    ::new (std::addressof(value_.aString)) ::std::unique_ptr<::std::string>(new ::std::unique_ptr<::std::string>::element_type(std::forward<T>(t)...));
    return value_.aString;
  }

  /** Glean { "field": "aString" } */
  ::std::unique_ptr<::std::string>& set_aString(::std::unique_ptr<::std::string> t) {
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::aString);
    ::new (std::addressof(value_.aString)) ::std::unique_ptr<::std::string>(std::move(t));
    return value_.aString;
  }

  /** Glean { "field": "anInteger" } */
  ::std::unique_ptr<::std::int32_t> const& get_anInteger() const {
    if (getType() != Type::anInteger) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.anInteger;
  }

  /** Glean { "field": "aString" } */
  ::std::unique_ptr<::std::string> const& get_aString() const {
    if (getType() != Type::aString) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.aString;
  }

  ::std::unique_ptr<::std::int32_t>& mutable_anInteger() {
    assert(getType() == Type::anInteger);
    return value_.anInteger;
  }

  ::std::unique_ptr<::std::string>& mutable_aString() {
    assert(getType() == Type::aString);
    return value_.aString;
  }

  template <typename..., typename T = ::std::unique_ptr<::std::int32_t>>
  T move_anInteger() {
    assert(getType() == Type::anInteger);
    return std::move(value_.anInteger);
  }

  template <typename..., typename T = ::std::unique_ptr<::std::string>>
  T move_aString() {
    assert(getType() == Type::aString);
    return std::move(value_.aString);
  }

  /** Glean { "field": "anInteger" } */
  template <typename..., typename T = ::std::unique_ptr<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> anInteger_ref() const& {
    return {value_.anInteger, fbthrift_type_, folly::to_underlying(Type::anInteger), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "anInteger" } */
  template <typename..., typename T = ::std::unique_ptr<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> anInteger_ref() & {
    return {value_.anInteger, fbthrift_type_, folly::to_underlying(Type::anInteger), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "anInteger" } */
  template <typename..., typename T = ::std::unique_ptr<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> anInteger_ref() && {
    return {std::move(value_.anInteger), fbthrift_type_, folly::to_underlying(Type::anInteger), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "anInteger" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::std::unique_ptr<::std::int32_t>&> anInteger() const& {
    return {value_.anInteger, fbthrift_type_, folly::to_underlying(Type::anInteger), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "anInteger" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::unique_ptr<::std::int32_t>&> anInteger() & {
    return {value_.anInteger, fbthrift_type_, folly::to_underlying(Type::anInteger), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "anInteger" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::unique_ptr<::std::int32_t>&&> anInteger() && {
    return {std::move(value_.anInteger), fbthrift_type_, folly::to_underlying(Type::anInteger), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "aString" } */
  template <typename..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> aString_ref() const& {
    return {value_.aString, fbthrift_type_, folly::to_underlying(Type::aString), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "aString" } */
  template <typename..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> aString_ref() & {
    return {value_.aString, fbthrift_type_, folly::to_underlying(Type::aString), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "aString" } */
  template <typename..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> aString_ref() && {
    return {std::move(value_.aString), fbthrift_type_, folly::to_underlying(Type::aString), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "aString" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::std::unique_ptr<::std::string>&> aString() const& {
    return {value_.aString, fbthrift_type_, folly::to_underlying(Type::aString), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "aString" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::unique_ptr<::std::string>&> aString() & {
    return {value_.aString, fbthrift_type_, folly::to_underlying(Type::aString), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "aString" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::unique_ptr<::std::string>&&> aString() && {
    return {std::move(value_.aString), fbthrift_type_, folly::to_underlying(Type::aString), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(fbthrift_type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  storage_type value_;
  std::underlying_type_t<Type> fbthrift_type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyUnion>;
  friend void swap(MyUnion& a, MyUnion& b);
};

template <class Protocol_>
unsigned long MyUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/refs/src/module.thrift", "name": "NonTriviallyDestructibleUnion", "kind": "union" } */
class NonTriviallyDestructibleUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::int_field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t
  >;
  void __fbthrift_clear();
  void __fbthrift_destruct();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = NonTriviallyDestructibleUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:
  enum class Type : int {
    __EMPTY__ = 0,
    int_field = 1,
  } ;

  NonTriviallyDestructibleUnion()
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {}

  NonTriviallyDestructibleUnion(NonTriviallyDestructibleUnion&& rhs) noexcept
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::int_field:
      {
        set_int_field(std::move(*rhs.value_.int_field));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  NonTriviallyDestructibleUnion(const NonTriviallyDestructibleUnion& rhs);

  NonTriviallyDestructibleUnion& operator=(NonTriviallyDestructibleUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        __fbthrift_clear();
        return *this;
      }
      case Type::int_field:
      {
        set_int_field(std::move(*rhs.value_.int_field));
        break;
      }
      default:
      {
        assert(false);
        __fbthrift_clear();
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  NonTriviallyDestructibleUnion& operator=(const NonTriviallyDestructibleUnion& rhs);

  ~NonTriviallyDestructibleUnion();

  union storage_type {
    ::std::shared_ptr<::std::int32_t> int_field;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const NonTriviallyDestructibleUnion&) const;
  bool operator<(const NonTriviallyDestructibleUnion&) const;

  /** Glean { "field": "int_field" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::shared_ptr<::std::int32_t>& set_int_field(::std::int32_t t = ::std::int32_t()) {
    using T0 = ::std::shared_ptr<::std::int32_t>;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::int_field);
    ::new (std::addressof(value_.int_field)) T(new typename T::element_type(t));
    return value_.int_field;
  }

  /** Glean { "field": "int_field" } */
  ::std::shared_ptr<::std::int32_t>& set_int_field(::std::shared_ptr<::std::int32_t> t) {
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::int_field);
    ::new (std::addressof(value_.int_field)) ::std::shared_ptr<::std::int32_t>(std::move(t));
    return value_.int_field;
  }

  /** Glean { "field": "int_field" } */
  ::std::shared_ptr<::std::int32_t> const& get_int_field() const {
    if (getType() != Type::int_field) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.int_field;
  }

  ::std::shared_ptr<::std::int32_t>& mutable_int_field() {
    assert(getType() == Type::int_field);
    return value_.int_field;
  }

  template <typename..., typename T = ::std::shared_ptr<::std::int32_t>>
  T move_int_field() {
    assert(getType() == Type::int_field);
    return std::move(value_.int_field);
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename T = ::std::shared_ptr<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> int_field_ref() const& {
    return {value_.int_field, fbthrift_type_, folly::to_underlying(Type::int_field), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename T = ::std::shared_ptr<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> int_field_ref() & {
    return {value_.int_field, fbthrift_type_, folly::to_underlying(Type::int_field), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename T = ::std::shared_ptr<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> int_field_ref() && {
    return {std::move(value_.int_field), fbthrift_type_, folly::to_underlying(Type::int_field), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "int_field" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::std::shared_ptr<::std::int32_t>&> int_field() const& {
    return {value_.int_field, fbthrift_type_, folly::to_underlying(Type::int_field), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "int_field" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::shared_ptr<::std::int32_t>&> int_field() & {
    return {value_.int_field, fbthrift_type_, folly::to_underlying(Type::int_field), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "int_field" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::shared_ptr<::std::int32_t>&&> int_field() && {
    return {std::move(value_.int_field), fbthrift_type_, folly::to_underlying(Type::int_field), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(fbthrift_type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  storage_type value_;
  std::underlying_type_t<Type> fbthrift_type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<NonTriviallyDestructibleUnion>;
  friend void swap(NonTriviallyDestructibleUnion& a, NonTriviallyDestructibleUnion& b);
};

template <class Protocol_>
unsigned long NonTriviallyDestructibleUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/refs/src/module.thrift", "name": "MyField", "kind": "struct" } */
class MyField final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 9;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::opt_value,
    ::apache::thrift::ident::value,
    ::apache::thrift::ident::req_value,
    ::apache::thrift::ident::opt_enum_value,
    ::apache::thrift::ident::enum_value,
    ::apache::thrift::ident::req_enum_value,
    ::apache::thrift::ident::opt_str_value,
    ::apache::thrift::ident::str_value,
    ::apache::thrift::ident::req_str_value
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::enum_t<::cpp2::MyEnum>,
    ::apache::thrift::type::enum_t<::cpp2::MyEnum>,
    ::apache::thrift::type::enum_t<::cpp2::MyEnum>,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyField;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  MyField();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyField(apache::thrift::FragileConstructor, ::std::unique_ptr<::std::int64_t> opt_value__arg, ::std::unique_ptr<::std::int64_t> value__arg, ::std::unique_ptr<::std::int64_t> req_value__arg, ::std::unique_ptr<::cpp2::MyEnum> opt_enum_value__arg, ::std::unique_ptr<::cpp2::MyEnum> enum_value__arg, ::std::unique_ptr<::cpp2::MyEnum> req_enum_value__arg, ::std::unique_ptr<::std::string> opt_str_value__arg, ::std::unique_ptr<::std::string> str_value__arg, ::std::unique_ptr<::std::string> req_str_value__arg);

  MyField(MyField&&) noexcept;
  MyField(const MyField& src);


  MyField& operator=(MyField&&) noexcept;
  MyField& operator=(const MyField& src);

  ~MyField();

 private:
  ::std::unique_ptr<::std::int64_t> __fbthrift_field_opt_value;
 private:
  ::std::unique_ptr<::std::int64_t> __fbthrift_field_value;
 private:
  ::std::unique_ptr<::std::int64_t> __fbthrift_field_req_value;
 private:
  ::std::unique_ptr<::cpp2::MyEnum> __fbthrift_field_opt_enum_value;
 private:
  ::std::unique_ptr<::cpp2::MyEnum> __fbthrift_field_enum_value;
 private:
  ::std::unique_ptr<::cpp2::MyEnum> __fbthrift_field_req_enum_value;
 private:
  ::std::unique_ptr<::std::string> __fbthrift_field_opt_str_value;
 private:
  ::std::unique_ptr<::std::string> __fbthrift_field_str_value;
 private:
  ::std::unique_ptr<::std::string> __fbthrift_field_req_str_value;

 public:

  bool operator==(const MyField&) const;
  bool operator<(const MyField&) const;
  /** Glean { "field": "opt_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE fbthrift_T& opt_value_ref() & {
    return __fbthrift_field_opt_value;
  }

  /** Glean { "field": "opt_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE const fbthrift_T& opt_value_ref() const& {
    return __fbthrift_field_opt_value;
  }

  /** Glean { "field": "opt_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE fbthrift_T&& opt_value_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_opt_value);
  }

  /** Glean { "field": "opt_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE const fbthrift_T&& opt_value_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_opt_value);
  }

  /** Glean { "field": "opt_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE fbthrift_T& opt_value() & {
    return __fbthrift_field_opt_value;
  }

  /** Glean { "field": "opt_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE const fbthrift_T& opt_value() const& {
    return __fbthrift_field_opt_value;
  }

  /** Glean { "field": "opt_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE fbthrift_T&& opt_value() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_opt_value);
  }

  /** Glean { "field": "opt_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE const fbthrift_T&& opt_value() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_opt_value);
  }
  /** Glean { "field": "value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE fbthrift_T& value_ref() & {
    return __fbthrift_field_value;
  }

  /** Glean { "field": "value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE const fbthrift_T& value_ref() const& {
    return __fbthrift_field_value;
  }

  /** Glean { "field": "value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE fbthrift_T&& value_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_value);
  }

  /** Glean { "field": "value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE const fbthrift_T&& value_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_value);
  }

  /** Glean { "field": "value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE fbthrift_T& value() & {
    return __fbthrift_field_value;
  }

  /** Glean { "field": "value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE const fbthrift_T& value() const& {
    return __fbthrift_field_value;
  }

  /** Glean { "field": "value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE fbthrift_T&& value() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_value);
  }

  /** Glean { "field": "value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE const fbthrift_T&& value() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_value);
  }
  /** Glean { "field": "req_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE fbthrift_T& req_value_ref() & {
    return __fbthrift_field_req_value;
  }

  /** Glean { "field": "req_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE const fbthrift_T& req_value_ref() const& {
    return __fbthrift_field_req_value;
  }

  /** Glean { "field": "req_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE fbthrift_T&& req_value_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_req_value);
  }

  /** Glean { "field": "req_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE const fbthrift_T&& req_value_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_req_value);
  }

  /** Glean { "field": "req_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE fbthrift_T& req_value() & {
    return __fbthrift_field_req_value;
  }

  /** Glean { "field": "req_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE const fbthrift_T& req_value() const& {
    return __fbthrift_field_req_value;
  }

  /** Glean { "field": "req_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE fbthrift_T&& req_value() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_req_value);
  }

  /** Glean { "field": "req_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE const fbthrift_T&& req_value() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_req_value);
  }
  /** Glean { "field": "opt_enum_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE fbthrift_T& opt_enum_value_ref() & {
    return __fbthrift_field_opt_enum_value;
  }

  /** Glean { "field": "opt_enum_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE const fbthrift_T& opt_enum_value_ref() const& {
    return __fbthrift_field_opt_enum_value;
  }

  /** Glean { "field": "opt_enum_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE fbthrift_T&& opt_enum_value_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_opt_enum_value);
  }

  /** Glean { "field": "opt_enum_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE const fbthrift_T&& opt_enum_value_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_opt_enum_value);
  }

  /** Glean { "field": "opt_enum_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE fbthrift_T& opt_enum_value() & {
    return __fbthrift_field_opt_enum_value;
  }

  /** Glean { "field": "opt_enum_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE const fbthrift_T& opt_enum_value() const& {
    return __fbthrift_field_opt_enum_value;
  }

  /** Glean { "field": "opt_enum_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE fbthrift_T&& opt_enum_value() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_opt_enum_value);
  }

  /** Glean { "field": "opt_enum_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE const fbthrift_T&& opt_enum_value() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_opt_enum_value);
  }
  /** Glean { "field": "enum_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE fbthrift_T& enum_value_ref() & {
    return __fbthrift_field_enum_value;
  }

  /** Glean { "field": "enum_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE const fbthrift_T& enum_value_ref() const& {
    return __fbthrift_field_enum_value;
  }

  /** Glean { "field": "enum_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE fbthrift_T&& enum_value_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_enum_value);
  }

  /** Glean { "field": "enum_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE const fbthrift_T&& enum_value_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_enum_value);
  }

  /** Glean { "field": "enum_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE fbthrift_T& enum_value() & {
    return __fbthrift_field_enum_value;
  }

  /** Glean { "field": "enum_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE const fbthrift_T& enum_value() const& {
    return __fbthrift_field_enum_value;
  }

  /** Glean { "field": "enum_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE fbthrift_T&& enum_value() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_enum_value);
  }

  /** Glean { "field": "enum_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE const fbthrift_T&& enum_value() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_enum_value);
  }
  /** Glean { "field": "req_enum_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE fbthrift_T& req_enum_value_ref() & {
    return __fbthrift_field_req_enum_value;
  }

  /** Glean { "field": "req_enum_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE const fbthrift_T& req_enum_value_ref() const& {
    return __fbthrift_field_req_enum_value;
  }

  /** Glean { "field": "req_enum_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE fbthrift_T&& req_enum_value_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_req_enum_value);
  }

  /** Glean { "field": "req_enum_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE const fbthrift_T&& req_enum_value_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_req_enum_value);
  }

  /** Glean { "field": "req_enum_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE fbthrift_T& req_enum_value() & {
    return __fbthrift_field_req_enum_value;
  }

  /** Glean { "field": "req_enum_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE const fbthrift_T& req_enum_value() const& {
    return __fbthrift_field_req_enum_value;
  }

  /** Glean { "field": "req_enum_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE fbthrift_T&& req_enum_value() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_req_enum_value);
  }

  /** Glean { "field": "req_enum_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE const fbthrift_T&& req_enum_value() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_req_enum_value);
  }
  /** Glean { "field": "opt_str_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T& opt_str_value_ref() & {
    return __fbthrift_field_opt_str_value;
  }

  /** Glean { "field": "opt_str_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T& opt_str_value_ref() const& {
    return __fbthrift_field_opt_str_value;
  }

  /** Glean { "field": "opt_str_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T&& opt_str_value_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_opt_str_value);
  }

  /** Glean { "field": "opt_str_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T&& opt_str_value_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_opt_str_value);
  }

  /** Glean { "field": "opt_str_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T& opt_str_value() & {
    return __fbthrift_field_opt_str_value;
  }

  /** Glean { "field": "opt_str_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T& opt_str_value() const& {
    return __fbthrift_field_opt_str_value;
  }

  /** Glean { "field": "opt_str_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T&& opt_str_value() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_opt_str_value);
  }

  /** Glean { "field": "opt_str_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T&& opt_str_value() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_opt_str_value);
  }
  /** Glean { "field": "str_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T& str_value_ref() & {
    return __fbthrift_field_str_value;
  }

  /** Glean { "field": "str_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T& str_value_ref() const& {
    return __fbthrift_field_str_value;
  }

  /** Glean { "field": "str_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T&& str_value_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_str_value);
  }

  /** Glean { "field": "str_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T&& str_value_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_str_value);
  }

  /** Glean { "field": "str_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T& str_value() & {
    return __fbthrift_field_str_value;
  }

  /** Glean { "field": "str_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T& str_value() const& {
    return __fbthrift_field_str_value;
  }

  /** Glean { "field": "str_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T&& str_value() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_str_value);
  }

  /** Glean { "field": "str_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T&& str_value() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_str_value);
  }
  /** Glean { "field": "req_str_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T& req_str_value_ref() & {
    return __fbthrift_field_req_str_value;
  }

  /** Glean { "field": "req_str_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T& req_str_value_ref() const& {
    return __fbthrift_field_req_str_value;
  }

  /** Glean { "field": "req_str_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T&& req_str_value_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_req_str_value);
  }

  /** Glean { "field": "req_str_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T&& req_str_value_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_req_str_value);
  }

  /** Glean { "field": "req_str_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T& req_str_value() & {
    return __fbthrift_field_req_str_value;
  }

  /** Glean { "field": "req_str_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T& req_str_value() const& {
    return __fbthrift_field_req_str_value;
  }

  /** Glean { "field": "req_str_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T&& req_str_value() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_req_str_value);
  }

  /** Glean { "field": "req_str_value" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T&& req_str_value() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_req_str_value);
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyField>;
  friend void swap(MyField& a, MyField& b);
};

template <class Protocol_>
unsigned long MyField::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/refs/src/module.thrift", "name": "MyStruct", "kind": "struct" } */
class MyStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 3;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::opt_ref,
    ::apache::thrift::ident::ref,
    ::apache::thrift::ident::req_ref
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::cpp2::MyField>,
    ::apache::thrift::type::struct_t<::cpp2::MyField>,
    ::apache::thrift::type::struct_t<::cpp2::MyField>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  MyStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStruct(apache::thrift::FragileConstructor, ::std::unique_ptr<::cpp2::MyField> opt_ref__arg, ::std::unique_ptr<::cpp2::MyField> ref__arg, ::std::unique_ptr<::cpp2::MyField> req_ref__arg);

  MyStruct(MyStruct&&) noexcept;
  MyStruct(const MyStruct& src);


  MyStruct& operator=(MyStruct&&) noexcept;
  MyStruct& operator=(const MyStruct& src);

  ~MyStruct();

 private:
  ::std::unique_ptr<::cpp2::MyField> __fbthrift_field_opt_ref;
 private:
  ::std::unique_ptr<::cpp2::MyField> __fbthrift_field_ref;
 private:
  ::std::unique_ptr<::cpp2::MyField> __fbthrift_field_req_ref;

 public:

  bool operator==(const MyStruct&) const;
  bool operator<(const MyStruct&) const;
  /** Glean { "field": "opt_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE fbthrift_T& opt_ref_ref() & {
    return __fbthrift_field_opt_ref;
  }

  /** Glean { "field": "opt_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE const fbthrift_T& opt_ref_ref() const& {
    return __fbthrift_field_opt_ref;
  }

  /** Glean { "field": "opt_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE fbthrift_T&& opt_ref_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_opt_ref);
  }

  /** Glean { "field": "opt_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE const fbthrift_T&& opt_ref_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_opt_ref);
  }

  /** Glean { "field": "opt_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE fbthrift_T& opt_ref() & {
    return __fbthrift_field_opt_ref;
  }

  /** Glean { "field": "opt_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE const fbthrift_T& opt_ref() const& {
    return __fbthrift_field_opt_ref;
  }

  /** Glean { "field": "opt_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE fbthrift_T&& opt_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_opt_ref);
  }

  /** Glean { "field": "opt_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE const fbthrift_T&& opt_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_opt_ref);
  }
  /** Glean { "field": "ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE fbthrift_T& ref_ref() & {
    return __fbthrift_field_ref;
  }

  /** Glean { "field": "ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE const fbthrift_T& ref_ref() const& {
    return __fbthrift_field_ref;
  }

  /** Glean { "field": "ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE fbthrift_T&& ref_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_ref);
  }

  /** Glean { "field": "ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE const fbthrift_T&& ref_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_ref);
  }

  /** Glean { "field": "ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE fbthrift_T& ref() & {
    return __fbthrift_field_ref;
  }

  /** Glean { "field": "ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE const fbthrift_T& ref() const& {
    return __fbthrift_field_ref;
  }

  /** Glean { "field": "ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE fbthrift_T&& ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_ref);
  }

  /** Glean { "field": "ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE const fbthrift_T&& ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_ref);
  }
  /** Glean { "field": "req_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE fbthrift_T& req_ref_ref() & {
    return __fbthrift_field_req_ref;
  }

  /** Glean { "field": "req_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE const fbthrift_T& req_ref_ref() const& {
    return __fbthrift_field_req_ref;
  }

  /** Glean { "field": "req_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE fbthrift_T&& req_ref_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_req_ref);
  }

  /** Glean { "field": "req_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE const fbthrift_T&& req_ref_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_req_ref);
  }

  /** Glean { "field": "req_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE fbthrift_T& req_ref() & {
    return __fbthrift_field_req_ref;
  }

  /** Glean { "field": "req_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE const fbthrift_T& req_ref() const& {
    return __fbthrift_field_req_ref;
  }

  /** Glean { "field": "req_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE fbthrift_T&& req_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_req_ref);
  }

  /** Glean { "field": "req_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE const fbthrift_T&& req_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_req_ref);
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStruct>;
  friend void swap(MyStruct& a, MyStruct& b);
};

template <class Protocol_>
unsigned long MyStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/refs/src/module.thrift", "name": "StructWithUnion", "kind": "struct" } */
class StructWithUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 3;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::u,
    ::apache::thrift::ident::aDouble,
    ::apache::thrift::ident::f
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::union_t<::cpp2::MyUnion>,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::struct_t<::cpp2::MyField>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StructWithUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  StructWithUnion();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithUnion(apache::thrift::FragileConstructor, ::std::unique_ptr<::cpp2::MyUnion> u__arg, ::std::unique_ptr<double> aDouble__arg, ::cpp2::MyField f__arg);

  StructWithUnion(StructWithUnion&&) noexcept;
  StructWithUnion(const StructWithUnion& src);


  StructWithUnion& operator=(StructWithUnion&&) noexcept;
  StructWithUnion& operator=(const StructWithUnion& src);

  ~StructWithUnion();

 private:
  ::std::unique_ptr<::cpp2::MyUnion> __fbthrift_field_u;
 private:
  ::std::unique_ptr<double> __fbthrift_field_aDouble;
 private:
  ::cpp2::MyField __fbthrift_field_f;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const StructWithUnion&) const;
  bool operator<(const StructWithUnion&) const;
  /** Glean { "field": "u" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyUnion>>
  FOLLY_ERASE fbthrift_T& u_ref() & {
    return __fbthrift_field_u;
  }

  /** Glean { "field": "u" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyUnion>>
  FOLLY_ERASE const fbthrift_T& u_ref() const& {
    return __fbthrift_field_u;
  }

  /** Glean { "field": "u" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyUnion>>
  FOLLY_ERASE fbthrift_T&& u_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_u);
  }

  /** Glean { "field": "u" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyUnion>>
  FOLLY_ERASE const fbthrift_T&& u_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_u);
  }

  /** Glean { "field": "u" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyUnion>>
  FOLLY_ERASE fbthrift_T& u() & {
    return __fbthrift_field_u;
  }

  /** Glean { "field": "u" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyUnion>>
  FOLLY_ERASE const fbthrift_T& u() const& {
    return __fbthrift_field_u;
  }

  /** Glean { "field": "u" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyUnion>>
  FOLLY_ERASE fbthrift_T&& u() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_u);
  }

  /** Glean { "field": "u" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::MyUnion>>
  FOLLY_ERASE const fbthrift_T&& u() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_u);
  }
  /** Glean { "field": "aDouble" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<double>>
  FOLLY_ERASE fbthrift_T& aDouble_ref() & {
    return __fbthrift_field_aDouble;
  }

  /** Glean { "field": "aDouble" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<double>>
  FOLLY_ERASE const fbthrift_T& aDouble_ref() const& {
    return __fbthrift_field_aDouble;
  }

  /** Glean { "field": "aDouble" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<double>>
  FOLLY_ERASE fbthrift_T&& aDouble_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_aDouble);
  }

  /** Glean { "field": "aDouble" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<double>>
  FOLLY_ERASE const fbthrift_T&& aDouble_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_aDouble);
  }

  /** Glean { "field": "aDouble" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<double>>
  FOLLY_ERASE fbthrift_T& aDouble() & {
    return __fbthrift_field_aDouble;
  }

  /** Glean { "field": "aDouble" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<double>>
  FOLLY_ERASE const fbthrift_T& aDouble() const& {
    return __fbthrift_field_aDouble;
  }

  /** Glean { "field": "aDouble" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<double>>
  FOLLY_ERASE fbthrift_T&& aDouble() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_aDouble);
  }

  /** Glean { "field": "aDouble" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<double>>
  FOLLY_ERASE const fbthrift_T&& aDouble() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_aDouble);
  }

  /** Glean { "field": "f" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyField>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> f_ref() const& {
    return {this->__fbthrift_field_f, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "f" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyField>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> f_ref() & {
    return {this->__fbthrift_field_f, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "f" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyField>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> f_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_f), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "f" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyField>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> f() const& {
    return {this->__fbthrift_field_f, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "f" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyField>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> f() & {
    return {this->__fbthrift_field_f, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "f" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyField>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> f() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_f), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "f" } */
  [[deprecated("Use `FOO.f().value()` instead of `FOO.get_f()`")]]
  const ::cpp2::MyField& get_f() const&;

  /** Glean { "field": "f" } */
  [[deprecated("Use `FOO.f().value()` instead of `FOO.get_f()`")]]
  ::cpp2::MyField get_f() &&;

  /** Glean { "field": "f" } */
  template <typename T_StructWithUnion_f_struct_setter = ::cpp2::MyField>
  [[deprecated("Use `FOO.f() = BAR` instead of `FOO.set_f(BAR)`")]]
  ::cpp2::MyField& set_f(T_StructWithUnion_f_struct_setter&& f_) {
    f_ref() = std::forward<T_StructWithUnion_f_struct_setter>(f_);
    return __fbthrift_field_f;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructWithUnion>;
  friend void swap(StructWithUnion& a, StructWithUnion& b);
};

template <class Protocol_>
unsigned long StructWithUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/refs/src/module.thrift", "name": "RecursiveStruct", "kind": "struct" } */
class RecursiveStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::mes
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::struct_t<::cpp2::RecursiveStruct>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = RecursiveStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  RecursiveStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  RecursiveStruct(apache::thrift::FragileConstructor, ::std::vector<::cpp2::RecursiveStruct> mes__arg);

  RecursiveStruct(RecursiveStruct&&) noexcept;

  RecursiveStruct(const RecursiveStruct& src);


  RecursiveStruct& operator=(RecursiveStruct&&) noexcept;
  RecursiveStruct& operator=(const RecursiveStruct& src);

  ~RecursiveStruct();

 private:
  ::std::vector<::cpp2::RecursiveStruct> __fbthrift_field_mes;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const RecursiveStruct&) const;
  bool operator<(const RecursiveStruct&) const;

  /** Glean { "field": "mes" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::RecursiveStruct>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> mes_ref() const& {
    return {this->__fbthrift_field_mes, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "mes" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::RecursiveStruct>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> mes_ref() & {
    return {this->__fbthrift_field_mes, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "mes" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::RecursiveStruct>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> mes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mes), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "mes" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::RecursiveStruct>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> mes() const& {
    return {this->__fbthrift_field_mes, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "mes" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::RecursiveStruct>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> mes() & {
    return {this->__fbthrift_field_mes, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "mes" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::RecursiveStruct>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> mes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mes), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "mes" } */
  [[deprecated("Use `FOO.mes().value()` instead of `FOO.get_mes()`")]]
  const ::std::vector<::cpp2::RecursiveStruct>* get_mes() const&;

  /** Glean { "field": "mes" } */
  [[deprecated("Use `FOO.mes().value()` instead of `FOO.get_mes()`")]]
  ::std::vector<::cpp2::RecursiveStruct>* get_mes() &;

  ::std::vector<::cpp2::RecursiveStruct>* get_mes() && = delete;

  /** Glean { "field": "mes" } */
  template <typename T_RecursiveStruct_mes_struct_setter = ::std::vector<::cpp2::RecursiveStruct>>
  [[deprecated("Use `FOO.mes() = BAR` instead of `FOO.set_mes(BAR)`")]]
  ::std::vector<::cpp2::RecursiveStruct>& set_mes(T_RecursiveStruct_mes_struct_setter&& mes_) {
    mes_ref() = std::forward<T_RecursiveStruct_mes_struct_setter>(mes_);
    return __fbthrift_field_mes;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<RecursiveStruct>;
  friend void swap(RecursiveStruct& a, RecursiveStruct& b);
};

template <class Protocol_>
unsigned long RecursiveStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/refs/src/module.thrift", "name": "StructWithContainers", "kind": "struct" } */
class StructWithContainers final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 6;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::list_ref,
    ::apache::thrift::ident::set_ref,
    ::apache::thrift::ident::map_ref,
    ::apache::thrift::ident::list_ref_unique,
    ::apache::thrift::ident::set_ref_shared,
    ::apache::thrift::ident::list_ref_shared_const
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::set<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::i32_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::set<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StructWithContainers;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  StructWithContainers();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithContainers(apache::thrift::FragileConstructor, ::std::unique_ptr<::std::vector<::std::int32_t>> list_ref__arg, ::std::unique_ptr<::std::set<::std::int32_t>> set_ref__arg, ::std::unique_ptr<::std::map<::std::int32_t, ::std::int32_t>> map_ref__arg, ::std::unique_ptr<::std::vector<::std::int32_t>> list_ref_unique__arg, ::std::shared_ptr<::std::set<::std::int32_t>> set_ref_shared__arg, ::std::shared_ptr<const ::std::vector<::std::int32_t>> list_ref_shared_const__arg);

  StructWithContainers(StructWithContainers&&) noexcept;
  StructWithContainers(const StructWithContainers& src);


  StructWithContainers& operator=(StructWithContainers&&) noexcept;
  StructWithContainers& operator=(const StructWithContainers& src);

  ~StructWithContainers();

 private:
  ::std::unique_ptr<::std::vector<::std::int32_t>> __fbthrift_field_list_ref;
 private:
  ::std::unique_ptr<::std::set<::std::int32_t>> __fbthrift_field_set_ref;
 private:
  ::std::unique_ptr<::std::map<::std::int32_t, ::std::int32_t>> __fbthrift_field_map_ref;
 private:
  ::std::unique_ptr<::std::vector<::std::int32_t>> __fbthrift_field_list_ref_unique;
 private:
  ::std::shared_ptr<::std::set<::std::int32_t>> __fbthrift_field_set_ref_shared;
 private:
  ::std::shared_ptr<const ::std::vector<::std::int32_t>> __fbthrift_field_list_ref_shared_const;

 public:

  bool operator==(const StructWithContainers&) const;
  bool operator<(const StructWithContainers&) const;
  /** Glean { "field": "list_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T& list_ref_ref() & {
    return __fbthrift_field_list_ref;
  }

  /** Glean { "field": "list_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T& list_ref_ref() const& {
    return __fbthrift_field_list_ref;
  }

  /** Glean { "field": "list_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T&& list_ref_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_list_ref);
  }

  /** Glean { "field": "list_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T&& list_ref_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_list_ref);
  }

  /** Glean { "field": "list_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T& list_ref() & {
    return __fbthrift_field_list_ref;
  }

  /** Glean { "field": "list_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T& list_ref() const& {
    return __fbthrift_field_list_ref;
  }

  /** Glean { "field": "list_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T&& list_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_list_ref);
  }

  /** Glean { "field": "list_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T&& list_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_list_ref);
  }
  /** Glean { "field": "set_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::set<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T& set_ref_ref() & {
    return __fbthrift_field_set_ref;
  }

  /** Glean { "field": "set_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::set<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T& set_ref_ref() const& {
    return __fbthrift_field_set_ref;
  }

  /** Glean { "field": "set_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::set<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T&& set_ref_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_set_ref);
  }

  /** Glean { "field": "set_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::set<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T&& set_ref_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_set_ref);
  }

  /** Glean { "field": "set_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::set<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T& set_ref() & {
    return __fbthrift_field_set_ref;
  }

  /** Glean { "field": "set_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::set<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T& set_ref() const& {
    return __fbthrift_field_set_ref;
  }

  /** Glean { "field": "set_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::set<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T&& set_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_set_ref);
  }

  /** Glean { "field": "set_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::set<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T&& set_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_set_ref);
  }
  /** Glean { "field": "map_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE fbthrift_T& map_ref_ref() & {
    return __fbthrift_field_map_ref;
  }

  /** Glean { "field": "map_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T& map_ref_ref() const& {
    return __fbthrift_field_map_ref;
  }

  /** Glean { "field": "map_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE fbthrift_T&& map_ref_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_map_ref);
  }

  /** Glean { "field": "map_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T&& map_ref_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_map_ref);
  }

  /** Glean { "field": "map_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE fbthrift_T& map_ref() & {
    return __fbthrift_field_map_ref;
  }

  /** Glean { "field": "map_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T& map_ref() const& {
    return __fbthrift_field_map_ref;
  }

  /** Glean { "field": "map_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE fbthrift_T&& map_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_map_ref);
  }

  /** Glean { "field": "map_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T&& map_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_map_ref);
  }
  /** Glean { "field": "list_ref_unique" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T& list_ref_unique_ref() & {
    return __fbthrift_field_list_ref_unique;
  }

  /** Glean { "field": "list_ref_unique" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T& list_ref_unique_ref() const& {
    return __fbthrift_field_list_ref_unique;
  }

  /** Glean { "field": "list_ref_unique" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T&& list_ref_unique_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_list_ref_unique);
  }

  /** Glean { "field": "list_ref_unique" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T&& list_ref_unique_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_list_ref_unique);
  }

  /** Glean { "field": "list_ref_unique" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T& list_ref_unique() & {
    return __fbthrift_field_list_ref_unique;
  }

  /** Glean { "field": "list_ref_unique" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T& list_ref_unique() const& {
    return __fbthrift_field_list_ref_unique;
  }

  /** Glean { "field": "list_ref_unique" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T&& list_ref_unique() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_list_ref_unique);
  }

  /** Glean { "field": "list_ref_unique" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T&& list_ref_unique() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_list_ref_unique);
  }
  /** Glean { "field": "set_ref_shared" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::set<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T& set_ref_shared_ref() & {
    return __fbthrift_field_set_ref_shared;
  }

  /** Glean { "field": "set_ref_shared" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::set<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T& set_ref_shared_ref() const& {
    return __fbthrift_field_set_ref_shared;
  }

  /** Glean { "field": "set_ref_shared" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::set<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T&& set_ref_shared_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_set_ref_shared);
  }

  /** Glean { "field": "set_ref_shared" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::set<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T&& set_ref_shared_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_set_ref_shared);
  }

  /** Glean { "field": "set_ref_shared" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::set<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T& set_ref_shared() & {
    return __fbthrift_field_set_ref_shared;
  }

  /** Glean { "field": "set_ref_shared" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::set<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T& set_ref_shared() const& {
    return __fbthrift_field_set_ref_shared;
  }

  /** Glean { "field": "set_ref_shared" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::set<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T&& set_ref_shared() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_set_ref_shared);
  }

  /** Glean { "field": "set_ref_shared" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::set<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T&& set_ref_shared() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_set_ref_shared);
  }
  /** Glean { "field": "list_ref_shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::vector<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T& list_ref_shared_const_ref() & {
    return __fbthrift_field_list_ref_shared_const;
  }

  /** Glean { "field": "list_ref_shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::vector<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T& list_ref_shared_const_ref() const& {
    return __fbthrift_field_list_ref_shared_const;
  }

  /** Glean { "field": "list_ref_shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::vector<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T&& list_ref_shared_const_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_list_ref_shared_const);
  }

  /** Glean { "field": "list_ref_shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::vector<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T&& list_ref_shared_const_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_list_ref_shared_const);
  }

  /** Glean { "field": "list_ref_shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::vector<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T& list_ref_shared_const() & {
    return __fbthrift_field_list_ref_shared_const;
  }

  /** Glean { "field": "list_ref_shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::vector<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T& list_ref_shared_const() const& {
    return __fbthrift_field_list_ref_shared_const;
  }

  /** Glean { "field": "list_ref_shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::vector<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T&& list_ref_shared_const() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_list_ref_shared_const);
  }

  /** Glean { "field": "list_ref_shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::vector<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T&& list_ref_shared_const() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_list_ref_shared_const);
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructWithContainers>;
  friend void swap(StructWithContainers& a, StructWithContainers& b);
};

template <class Protocol_>
unsigned long StructWithContainers::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/refs/src/module.thrift", "name": "StructWithSharedConst", "kind": "struct" } */
class StructWithSharedConst final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 3;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::opt_shared_const,
    ::apache::thrift::ident::shared_const,
    ::apache::thrift::ident::req_shared_const
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::cpp2::MyField>,
    ::apache::thrift::type::struct_t<::cpp2::MyField>,
    ::apache::thrift::type::struct_t<::cpp2::MyField>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StructWithSharedConst;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  StructWithSharedConst();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithSharedConst(apache::thrift::FragileConstructor, ::std::shared_ptr<const ::cpp2::MyField> opt_shared_const__arg, ::std::shared_ptr<const ::cpp2::MyField> shared_const__arg, ::std::shared_ptr<const ::cpp2::MyField> req_shared_const__arg);

  StructWithSharedConst(StructWithSharedConst&&) noexcept;

  StructWithSharedConst(const StructWithSharedConst& src);


  StructWithSharedConst& operator=(StructWithSharedConst&&) noexcept;
  StructWithSharedConst& operator=(const StructWithSharedConst& src);

  ~StructWithSharedConst();

 private:
  ::std::shared_ptr<const ::cpp2::MyField> __fbthrift_field_opt_shared_const;
 private:
  ::std::shared_ptr<const ::cpp2::MyField> __fbthrift_field_shared_const;
 private:
  ::std::shared_ptr<const ::cpp2::MyField> __fbthrift_field_req_shared_const;

 public:

  bool operator==(const StructWithSharedConst&) const;
  bool operator<(const StructWithSharedConst&) const;
  /** Glean { "field": "opt_shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE fbthrift_T& opt_shared_const_ref() & {
    return __fbthrift_field_opt_shared_const;
  }

  /** Glean { "field": "opt_shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE const fbthrift_T& opt_shared_const_ref() const& {
    return __fbthrift_field_opt_shared_const;
  }

  /** Glean { "field": "opt_shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE fbthrift_T&& opt_shared_const_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_opt_shared_const);
  }

  /** Glean { "field": "opt_shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE const fbthrift_T&& opt_shared_const_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_opt_shared_const);
  }

  /** Glean { "field": "opt_shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE fbthrift_T& opt_shared_const() & {
    return __fbthrift_field_opt_shared_const;
  }

  /** Glean { "field": "opt_shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE const fbthrift_T& opt_shared_const() const& {
    return __fbthrift_field_opt_shared_const;
  }

  /** Glean { "field": "opt_shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE fbthrift_T&& opt_shared_const() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_opt_shared_const);
  }

  /** Glean { "field": "opt_shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE const fbthrift_T&& opt_shared_const() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_opt_shared_const);
  }
  /** Glean { "field": "shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE fbthrift_T& shared_const_ref() & {
    return __fbthrift_field_shared_const;
  }

  /** Glean { "field": "shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE const fbthrift_T& shared_const_ref() const& {
    return __fbthrift_field_shared_const;
  }

  /** Glean { "field": "shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE fbthrift_T&& shared_const_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_shared_const);
  }

  /** Glean { "field": "shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE const fbthrift_T&& shared_const_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_shared_const);
  }

  /** Glean { "field": "shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE fbthrift_T& shared_const() & {
    return __fbthrift_field_shared_const;
  }

  /** Glean { "field": "shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE const fbthrift_T& shared_const() const& {
    return __fbthrift_field_shared_const;
  }

  /** Glean { "field": "shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE fbthrift_T&& shared_const() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_shared_const);
  }

  /** Glean { "field": "shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE const fbthrift_T&& shared_const() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_shared_const);
  }
  /** Glean { "field": "req_shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE fbthrift_T& req_shared_const_ref() & {
    return __fbthrift_field_req_shared_const;
  }

  /** Glean { "field": "req_shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE const fbthrift_T& req_shared_const_ref() const& {
    return __fbthrift_field_req_shared_const;
  }

  /** Glean { "field": "req_shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE fbthrift_T&& req_shared_const_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_req_shared_const);
  }

  /** Glean { "field": "req_shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE const fbthrift_T&& req_shared_const_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_req_shared_const);
  }

  /** Glean { "field": "req_shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE fbthrift_T& req_shared_const() & {
    return __fbthrift_field_req_shared_const;
  }

  /** Glean { "field": "req_shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE const fbthrift_T& req_shared_const() const& {
    return __fbthrift_field_req_shared_const;
  }

  /** Glean { "field": "req_shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE fbthrift_T&& req_shared_const() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_req_shared_const);
  }

  /** Glean { "field": "req_shared_const" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE const fbthrift_T&& req_shared_const() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_req_shared_const);
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructWithSharedConst>;
  friend void swap(StructWithSharedConst& a, StructWithSharedConst& b);
};

template <class Protocol_>
unsigned long StructWithSharedConst::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/refs/src/module.thrift", "name": "Empty", "kind": "struct" } */
class Empty final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Empty;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  Empty() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Empty(apache::thrift::FragileConstructor);

  Empty(Empty&&) = default;

  Empty(const Empty&) = default;


  Empty& operator=(Empty&&) = default;

  Empty& operator=(const Empty&) = default;

 public:

  bool operator==(const Empty&) const;
  bool operator<(const Empty&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Empty>;
  friend void swap(Empty& a, Empty& b);
};

template <class Protocol_>
unsigned long Empty::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/refs/src/module.thrift", "name": "StructWithRef", "kind": "struct" } */
class StructWithRef final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 3;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::def_field,
    ::apache::thrift::ident::opt_field,
    ::apache::thrift::ident::req_field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::cpp2::Empty>,
    ::apache::thrift::type::struct_t<::cpp2::Empty>,
    ::apache::thrift::type::struct_t<::cpp2::Empty>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StructWithRef;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  StructWithRef();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithRef(apache::thrift::FragileConstructor, ::std::unique_ptr<::cpp2::Empty> def_field__arg, ::std::unique_ptr<::cpp2::Empty> opt_field__arg, ::std::unique_ptr<::cpp2::Empty> req_field__arg);

  StructWithRef(StructWithRef&&) noexcept;
  StructWithRef(const StructWithRef& src);


  StructWithRef& operator=(StructWithRef&&) noexcept;
  StructWithRef& operator=(const StructWithRef& src);

  ~StructWithRef();

 private:
  ::std::unique_ptr<::cpp2::Empty> __fbthrift_field_def_field;
 private:
  ::std::unique_ptr<::cpp2::Empty> __fbthrift_field_opt_field;
 private:
  ::std::unique_ptr<::cpp2::Empty> __fbthrift_field_req_field;

 public:

  bool operator==(const StructWithRef&) const;
  bool operator<(const StructWithRef&) const;
  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T& def_field_ref() & {
    return __fbthrift_field_def_field;
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T& def_field_ref() const& {
    return __fbthrift_field_def_field;
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T&& def_field_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_def_field);
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T&& def_field_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_def_field);
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T& def_field() & {
    return __fbthrift_field_def_field;
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T& def_field() const& {
    return __fbthrift_field_def_field;
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T&& def_field() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_def_field);
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T&& def_field() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_def_field);
  }
  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T& opt_field_ref() & {
    return __fbthrift_field_opt_field;
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T& opt_field_ref() const& {
    return __fbthrift_field_opt_field;
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T&& opt_field_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_opt_field);
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T&& opt_field_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_opt_field);
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T& opt_field() & {
    return __fbthrift_field_opt_field;
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T& opt_field() const& {
    return __fbthrift_field_opt_field;
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T&& opt_field() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_opt_field);
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T&& opt_field() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_opt_field);
  }
  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T& req_field_ref() & {
    return __fbthrift_field_req_field;
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T& req_field_ref() const& {
    return __fbthrift_field_req_field;
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T&& req_field_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_req_field);
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T&& req_field_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_req_field);
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T& req_field() & {
    return __fbthrift_field_req_field;
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T& req_field() const& {
    return __fbthrift_field_req_field;
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T&& req_field() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_req_field);
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T&& req_field() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_req_field);
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructWithRef>;
  friend void swap(StructWithRef& a, StructWithRef& b);
};

template <class Protocol_>
unsigned long StructWithRef::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/refs/src/module.thrift", "name": "StructWithBox", "kind": "struct" } */
class StructWithBox final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 3;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::a,
    ::apache::thrift::ident::b,
    ::apache::thrift::ident::c
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::list<::apache::thrift::type::i64_t>,
    ::apache::thrift::type::struct_t<::cpp2::StructWithRef>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StructWithBox;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  StructWithBox();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithBox(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::std::string> a__arg, ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int64_t>> b__arg, ::apache::thrift::detail::boxed_value_ptr<::cpp2::StructWithRef> c__arg);

  StructWithBox(StructWithBox&&) noexcept;

  StructWithBox(const StructWithBox& src);


  StructWithBox& operator=(StructWithBox&&) noexcept;
  StructWithBox& operator=(const StructWithBox& src);

  ~StructWithBox();

 private:
  ::apache::thrift::detail::boxed_value_ptr<::std::string> __fbthrift_field_a;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int64_t>> __fbthrift_field_b;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::cpp2::StructWithRef> __fbthrift_field_c;

 public:

  bool operator==(const StructWithBox&) const;
  bool operator<(const StructWithBox&) const;

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> a_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_a};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> a_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_a};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> a_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_a)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> a() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_a};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> a() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_a};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> a() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_a)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> b_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_b};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> b_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_b};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> b_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_b)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> b() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_b};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> b() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_b};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> b() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_b)};
  }

  /** Glean { "field": "c" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::StructWithRef>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> c_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_c};
  }

  /** Glean { "field": "c" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::StructWithRef>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> c_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_c};
  }

  /** Glean { "field": "c" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::StructWithRef>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> c_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_c)};
  }

  /** Glean { "field": "c" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::StructWithRef>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> c() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_c};
  }

  /** Glean { "field": "c" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::StructWithRef>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> c() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_c};
  }

  /** Glean { "field": "c" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::StructWithRef>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> c() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_c)};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructWithBox>;
  friend void swap(StructWithBox& a, StructWithBox& b);
};

template <class Protocol_>
unsigned long StructWithBox::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/refs/src/module.thrift", "name": "StructWithInternBox", "kind": "struct" } */
class StructWithInternBox final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field1,
    ::apache::thrift::ident::field2
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::cpp2::Empty>,
    ::apache::thrift::type::struct_t<::cpp2::MyField>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StructWithInternBox;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  StructWithInternBox();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithInternBox(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value<::cpp2::Empty> field1__arg, ::apache::thrift::detail::boxed_value<::cpp2::MyField> field2__arg);

  StructWithInternBox(StructWithInternBox&&) noexcept;

  StructWithInternBox(const StructWithInternBox& src);


  StructWithInternBox& operator=(StructWithInternBox&&) noexcept;
  StructWithInternBox& operator=(const StructWithInternBox& src);

  ~StructWithInternBox();

 private:
  ::apache::thrift::detail::boxed_value<::cpp2::Empty> __fbthrift_field_field1;
 private:
  ::apache::thrift::detail::boxed_value<::cpp2::MyField> __fbthrift_field_field2;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const StructWithInternBox&) const;
  bool operator<(const StructWithInternBox&) const;

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::cpp2::Empty>>
  FOLLY_ERASE ::apache::thrift::intern_boxed_field_ref<const fbthrift_T&> field1_ref() const& {
    return {this->__fbthrift_field_field1, ::apache::thrift::op::getDefault<::apache::thrift::type::struct_t<::cpp2::Empty>>, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::cpp2::Empty>>
  FOLLY_ERASE ::apache::thrift::intern_boxed_field_ref<fbthrift_T&> field1_ref() & {
    return {this->__fbthrift_field_field1, ::apache::thrift::op::getDefault<::apache::thrift::type::struct_t<::cpp2::Empty>>, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::cpp2::Empty>>
  FOLLY_ERASE ::apache::thrift::intern_boxed_field_ref<fbthrift_T&&> field1_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field1), ::apache::thrift::op::getDefault<::apache::thrift::type::struct_t<::cpp2::Empty>>, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::cpp2::Empty>>
  FOLLY_ERASE ::apache::thrift::intern_boxed_field_ref<const fbthrift_T&> field1() const& {
    return {this->__fbthrift_field_field1, ::apache::thrift::op::getDefault<::apache::thrift::type::struct_t<::cpp2::Empty>>, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::cpp2::Empty>>
  FOLLY_ERASE ::apache::thrift::intern_boxed_field_ref<fbthrift_T&> field1() & {
    return {this->__fbthrift_field_field1, ::apache::thrift::op::getDefault<::apache::thrift::type::struct_t<::cpp2::Empty>>, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::cpp2::Empty>>
  FOLLY_ERASE ::apache::thrift::intern_boxed_field_ref<fbthrift_T&&> field1() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field1), ::apache::thrift::op::getDefault<::apache::thrift::type::struct_t<::cpp2::Empty>>, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::cpp2::MyField>>
  FOLLY_ERASE ::apache::thrift::intern_boxed_field_ref<const fbthrift_T&> field2_ref() const& {
    return {this->__fbthrift_field_field2, ::apache::thrift::op::getDefault<::apache::thrift::type::struct_t<::cpp2::MyField>>, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::cpp2::MyField>>
  FOLLY_ERASE ::apache::thrift::intern_boxed_field_ref<fbthrift_T&> field2_ref() & {
    return {this->__fbthrift_field_field2, ::apache::thrift::op::getDefault<::apache::thrift::type::struct_t<::cpp2::MyField>>, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::cpp2::MyField>>
  FOLLY_ERASE ::apache::thrift::intern_boxed_field_ref<fbthrift_T&&> field2_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field2), ::apache::thrift::op::getDefault<::apache::thrift::type::struct_t<::cpp2::MyField>>, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::cpp2::MyField>>
  FOLLY_ERASE ::apache::thrift::intern_boxed_field_ref<const fbthrift_T&> field2() const& {
    return {this->__fbthrift_field_field2, ::apache::thrift::op::getDefault<::apache::thrift::type::struct_t<::cpp2::MyField>>, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::cpp2::MyField>>
  FOLLY_ERASE ::apache::thrift::intern_boxed_field_ref<fbthrift_T&> field2() & {
    return {this->__fbthrift_field_field2, ::apache::thrift::op::getDefault<::apache::thrift::type::struct_t<::cpp2::MyField>>, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::cpp2::MyField>>
  FOLLY_ERASE ::apache::thrift::intern_boxed_field_ref<fbthrift_T&&> field2() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field2), ::apache::thrift::op::getDefault<::apache::thrift::type::struct_t<::cpp2::MyField>>, __isset.at(1), __isset.bit(1)};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructWithInternBox>;
  friend void swap(StructWithInternBox& a, StructWithInternBox& b);
};

template <class Protocol_>
unsigned long StructWithInternBox::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/refs/src/module.thrift", "name": "StructWithTerseInternBox", "kind": "struct" } */
class StructWithTerseInternBox final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field1,
    ::apache::thrift::ident::field2
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::cpp2::Empty>,
    ::apache::thrift::type::struct_t<::cpp2::MyField>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StructWithTerseInternBox;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  StructWithTerseInternBox();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithTerseInternBox(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value<::cpp2::Empty> field1__arg, ::apache::thrift::detail::boxed_value<::cpp2::MyField> field2__arg);

  StructWithTerseInternBox(StructWithTerseInternBox&&) noexcept;

  StructWithTerseInternBox(const StructWithTerseInternBox& src);


  StructWithTerseInternBox& operator=(StructWithTerseInternBox&&) noexcept;
  StructWithTerseInternBox& operator=(const StructWithTerseInternBox& src);

  ~StructWithTerseInternBox();

 private:
  ::apache::thrift::detail::boxed_value<::cpp2::Empty> __fbthrift_field_field1;
 private:
  ::apache::thrift::detail::boxed_value<::cpp2::MyField> __fbthrift_field_field2;

 public:

  bool operator==(const StructWithTerseInternBox&) const;
  bool operator<(const StructWithTerseInternBox&) const;

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::cpp2::Empty>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const fbthrift_T&> field1_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_field1, ::apache::thrift::op::getDefault<::apache::thrift::type::struct_t<::cpp2::Empty>>};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::cpp2::Empty>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&> field1_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_field1, ::apache::thrift::op::getDefault<::apache::thrift::type::struct_t<::cpp2::Empty>>};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::cpp2::Empty>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&&> field1_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_field1), ::apache::thrift::op::getDefault<::apache::thrift::type::struct_t<::cpp2::Empty>>};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::cpp2::Empty>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const fbthrift_T&> field1() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_field1, ::apache::thrift::op::getDefault<::apache::thrift::type::struct_t<::cpp2::Empty>>};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::cpp2::Empty>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&> field1() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_field1, ::apache::thrift::op::getDefault<::apache::thrift::type::struct_t<::cpp2::Empty>>};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::cpp2::Empty>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&&> field1() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_field1), ::apache::thrift::op::getDefault<::apache::thrift::type::struct_t<::cpp2::Empty>>};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::cpp2::MyField>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const fbthrift_T&> field2_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_field2, ::apache::thrift::op::getDefault<::apache::thrift::type::struct_t<::cpp2::MyField>>};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::cpp2::MyField>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&> field2_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_field2, ::apache::thrift::op::getDefault<::apache::thrift::type::struct_t<::cpp2::MyField>>};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::cpp2::MyField>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&&> field2_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_field2), ::apache::thrift::op::getDefault<::apache::thrift::type::struct_t<::cpp2::MyField>>};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::cpp2::MyField>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const fbthrift_T&> field2() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_field2, ::apache::thrift::op::getDefault<::apache::thrift::type::struct_t<::cpp2::MyField>>};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::cpp2::MyField>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&> field2() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_field2, ::apache::thrift::op::getDefault<::apache::thrift::type::struct_t<::cpp2::MyField>>};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::cpp2::MyField>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&&> field2() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_field2), ::apache::thrift::op::getDefault<::apache::thrift::type::struct_t<::cpp2::MyField>>};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructWithTerseInternBox>;
  friend void swap(StructWithTerseInternBox& a, StructWithTerseInternBox& b);
};

template <class Protocol_>
unsigned long StructWithTerseInternBox::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/refs/src/module.thrift", "name": "AdaptedStructWithInternBox", "kind": "struct" } */
class AdaptedStructWithInternBox final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field1,
    ::apache::thrift::ident::field2
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::struct_t<::cpp2::Empty>>,
    ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::struct_t<::cpp2::MyField>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = AdaptedStructWithInternBox;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    true;


 public:

  AdaptedStructWithInternBox();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  AdaptedStructWithInternBox(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::cpp2::Empty, AdaptedStructWithInternBox>> field1__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::cpp2::MyField, AdaptedStructWithInternBox>> field2__arg);

  AdaptedStructWithInternBox(AdaptedStructWithInternBox&&) noexcept;
  AdaptedStructWithInternBox(const AdaptedStructWithInternBox& src);


  AdaptedStructWithInternBox& operator=(AdaptedStructWithInternBox&&) noexcept;
  AdaptedStructWithInternBox& operator=(const AdaptedStructWithInternBox& src);

  ~AdaptedStructWithInternBox();

 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::cpp2::Empty, AdaptedStructWithInternBox>> __fbthrift_field_field1;
 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::cpp2::MyField, AdaptedStructWithInternBox>> __fbthrift_field_field2;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const AdaptedStructWithInternBox&) const;
  bool operator<(const AdaptedStructWithInternBox&) const;

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::cpp2::Empty, AdaptedStructWithInternBox>>>
  FOLLY_ERASE ::apache::thrift::intern_boxed_field_ref<const fbthrift_T&> field1_ref() const& {
    return {this->__fbthrift_field_field1, ::apache::thrift::op::getDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithInternBox, ::apache::thrift::field_id<1>>>, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::cpp2::Empty, AdaptedStructWithInternBox>>>
  FOLLY_ERASE ::apache::thrift::intern_boxed_field_ref<fbthrift_T&> field1_ref() & {
    return {this->__fbthrift_field_field1, ::apache::thrift::op::getDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithInternBox, ::apache::thrift::field_id<1>>>, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::cpp2::Empty, AdaptedStructWithInternBox>>>
  FOLLY_ERASE ::apache::thrift::intern_boxed_field_ref<fbthrift_T&&> field1_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field1), ::apache::thrift::op::getDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithInternBox, ::apache::thrift::field_id<1>>>, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::cpp2::Empty, AdaptedStructWithInternBox>>>
  FOLLY_ERASE ::apache::thrift::intern_boxed_field_ref<const fbthrift_T&> field1() const& {
    return {this->__fbthrift_field_field1, ::apache::thrift::op::getDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithInternBox, ::apache::thrift::field_id<1>>>, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::cpp2::Empty, AdaptedStructWithInternBox>>>
  FOLLY_ERASE ::apache::thrift::intern_boxed_field_ref<fbthrift_T&> field1() & {
    return {this->__fbthrift_field_field1, ::apache::thrift::op::getDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithInternBox, ::apache::thrift::field_id<1>>>, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::cpp2::Empty, AdaptedStructWithInternBox>>>
  FOLLY_ERASE ::apache::thrift::intern_boxed_field_ref<fbthrift_T&&> field1() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field1), ::apache::thrift::op::getDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithInternBox, ::apache::thrift::field_id<1>>>, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::cpp2::MyField, AdaptedStructWithInternBox>>>
  FOLLY_ERASE ::apache::thrift::intern_boxed_field_ref<const fbthrift_T&> field2_ref() const& {
    return {this->__fbthrift_field_field2, ::apache::thrift::op::getDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithInternBox, ::apache::thrift::field_id<2>>>, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::cpp2::MyField, AdaptedStructWithInternBox>>>
  FOLLY_ERASE ::apache::thrift::intern_boxed_field_ref<fbthrift_T&> field2_ref() & {
    return {this->__fbthrift_field_field2, ::apache::thrift::op::getDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithInternBox, ::apache::thrift::field_id<2>>>, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::cpp2::MyField, AdaptedStructWithInternBox>>>
  FOLLY_ERASE ::apache::thrift::intern_boxed_field_ref<fbthrift_T&&> field2_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field2), ::apache::thrift::op::getDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithInternBox, ::apache::thrift::field_id<2>>>, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::cpp2::MyField, AdaptedStructWithInternBox>>>
  FOLLY_ERASE ::apache::thrift::intern_boxed_field_ref<const fbthrift_T&> field2() const& {
    return {this->__fbthrift_field_field2, ::apache::thrift::op::getDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithInternBox, ::apache::thrift::field_id<2>>>, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::cpp2::MyField, AdaptedStructWithInternBox>>>
  FOLLY_ERASE ::apache::thrift::intern_boxed_field_ref<fbthrift_T&> field2() & {
    return {this->__fbthrift_field_field2, ::apache::thrift::op::getDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithInternBox, ::apache::thrift::field_id<2>>>, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::cpp2::MyField, AdaptedStructWithInternBox>>>
  FOLLY_ERASE ::apache::thrift::intern_boxed_field_ref<fbthrift_T&&> field2() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field2), ::apache::thrift::op::getDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithInternBox, ::apache::thrift::field_id<2>>>, __isset.at(1), __isset.bit(1)};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<AdaptedStructWithInternBox>;
  friend void swap(AdaptedStructWithInternBox& a, AdaptedStructWithInternBox& b);
};

template <class Protocol_>
unsigned long AdaptedStructWithInternBox::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/refs/src/module.thrift", "name": "AdaptedStructWithTerseInternBox", "kind": "struct" } */
class AdaptedStructWithTerseInternBox final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field1,
    ::apache::thrift::ident::field2
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::struct_t<::cpp2::Empty>>,
    ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::struct_t<::cpp2::MyField>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = AdaptedStructWithTerseInternBox;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    true;


 public:

  AdaptedStructWithTerseInternBox();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  AdaptedStructWithTerseInternBox(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::cpp2::Empty, AdaptedStructWithTerseInternBox>> field1__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::cpp2::MyField, AdaptedStructWithTerseInternBox>> field2__arg);

  AdaptedStructWithTerseInternBox(AdaptedStructWithTerseInternBox&&) noexcept;
  AdaptedStructWithTerseInternBox(const AdaptedStructWithTerseInternBox& src);


  AdaptedStructWithTerseInternBox& operator=(AdaptedStructWithTerseInternBox&&) noexcept;
  AdaptedStructWithTerseInternBox& operator=(const AdaptedStructWithTerseInternBox& src);

  ~AdaptedStructWithTerseInternBox();

 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::cpp2::Empty, AdaptedStructWithTerseInternBox>> __fbthrift_field_field1;
 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::cpp2::MyField, AdaptedStructWithTerseInternBox>> __fbthrift_field_field2;

 public:

  bool operator==(const AdaptedStructWithTerseInternBox&) const;
  bool operator<(const AdaptedStructWithTerseInternBox&) const;

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::cpp2::Empty, AdaptedStructWithTerseInternBox>>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const fbthrift_T&> field1_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_field1, ::apache::thrift::op::getDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithTerseInternBox, ::apache::thrift::field_id<1>>>};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::cpp2::Empty, AdaptedStructWithTerseInternBox>>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&> field1_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_field1, ::apache::thrift::op::getDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithTerseInternBox, ::apache::thrift::field_id<1>>>};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::cpp2::Empty, AdaptedStructWithTerseInternBox>>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&&> field1_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_field1), ::apache::thrift::op::getDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithTerseInternBox, ::apache::thrift::field_id<1>>>};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::cpp2::Empty, AdaptedStructWithTerseInternBox>>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const fbthrift_T&> field1() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_field1, ::apache::thrift::op::getDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithTerseInternBox, ::apache::thrift::field_id<1>>>};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::cpp2::Empty, AdaptedStructWithTerseInternBox>>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&> field1() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_field1, ::apache::thrift::op::getDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithTerseInternBox, ::apache::thrift::field_id<1>>>};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::cpp2::Empty, AdaptedStructWithTerseInternBox>>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&&> field1() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_field1), ::apache::thrift::op::getDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithTerseInternBox, ::apache::thrift::field_id<1>>>};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::cpp2::MyField, AdaptedStructWithTerseInternBox>>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const fbthrift_T&> field2_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_field2, ::apache::thrift::op::getDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithTerseInternBox, ::apache::thrift::field_id<2>>>};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::cpp2::MyField, AdaptedStructWithTerseInternBox>>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&> field2_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_field2, ::apache::thrift::op::getDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithTerseInternBox, ::apache::thrift::field_id<2>>>};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::cpp2::MyField, AdaptedStructWithTerseInternBox>>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&&> field2_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_field2), ::apache::thrift::op::getDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithTerseInternBox, ::apache::thrift::field_id<2>>>};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::cpp2::MyField, AdaptedStructWithTerseInternBox>>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const fbthrift_T&> field2() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_field2, ::apache::thrift::op::getDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithTerseInternBox, ::apache::thrift::field_id<2>>>};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::cpp2::MyField, AdaptedStructWithTerseInternBox>>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&> field2() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_field2, ::apache::thrift::op::getDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithTerseInternBox, ::apache::thrift::field_id<2>>>};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::cpp2::MyField, AdaptedStructWithTerseInternBox>>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&&> field2() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_field2), ::apache::thrift::op::getDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithTerseInternBox, ::apache::thrift::field_id<2>>>};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<AdaptedStructWithTerseInternBox>;
  friend void swap(AdaptedStructWithTerseInternBox& a, AdaptedStructWithTerseInternBox& b);
};

template <class Protocol_>
unsigned long AdaptedStructWithTerseInternBox::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/refs/src/module.thrift", "name": "StructWithRefTypeUnique", "kind": "struct" } */
class StructWithRefTypeUnique final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 3;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::def_field,
    ::apache::thrift::ident::opt_field,
    ::apache::thrift::ident::req_field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::cpp2::Empty>,
    ::apache::thrift::type::struct_t<::cpp2::Empty>,
    ::apache::thrift::type::struct_t<::cpp2::Empty>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StructWithRefTypeUnique;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  StructWithRefTypeUnique();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithRefTypeUnique(apache::thrift::FragileConstructor, ::std::unique_ptr<::cpp2::Empty> def_field__arg, ::std::unique_ptr<::cpp2::Empty> opt_field__arg, ::std::unique_ptr<::cpp2::Empty> req_field__arg);

  StructWithRefTypeUnique(StructWithRefTypeUnique&&) noexcept;
  StructWithRefTypeUnique(const StructWithRefTypeUnique& src);


  StructWithRefTypeUnique& operator=(StructWithRefTypeUnique&&) noexcept;
  StructWithRefTypeUnique& operator=(const StructWithRefTypeUnique& src);

  ~StructWithRefTypeUnique();

 private:
  ::std::unique_ptr<::cpp2::Empty> __fbthrift_field_def_field;
 private:
  ::std::unique_ptr<::cpp2::Empty> __fbthrift_field_opt_field;
 private:
  ::std::unique_ptr<::cpp2::Empty> __fbthrift_field_req_field;

 public:

  bool operator==(const StructWithRefTypeUnique&) const;
  bool operator<(const StructWithRefTypeUnique&) const;
  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T& def_field_ref() & {
    return __fbthrift_field_def_field;
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T& def_field_ref() const& {
    return __fbthrift_field_def_field;
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T&& def_field_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_def_field);
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T&& def_field_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_def_field);
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T& def_field() & {
    return __fbthrift_field_def_field;
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T& def_field() const& {
    return __fbthrift_field_def_field;
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T&& def_field() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_def_field);
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T&& def_field() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_def_field);
  }
  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T& opt_field_ref() & {
    return __fbthrift_field_opt_field;
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T& opt_field_ref() const& {
    return __fbthrift_field_opt_field;
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T&& opt_field_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_opt_field);
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T&& opt_field_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_opt_field);
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T& opt_field() & {
    return __fbthrift_field_opt_field;
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T& opt_field() const& {
    return __fbthrift_field_opt_field;
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T&& opt_field() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_opt_field);
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T&& opt_field() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_opt_field);
  }
  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T& req_field_ref() & {
    return __fbthrift_field_req_field;
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T& req_field_ref() const& {
    return __fbthrift_field_req_field;
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T&& req_field_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_req_field);
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T&& req_field_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_req_field);
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T& req_field() & {
    return __fbthrift_field_req_field;
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T& req_field() const& {
    return __fbthrift_field_req_field;
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T&& req_field() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_req_field);
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T&& req_field() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_req_field);
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructWithRefTypeUnique>;
  friend void swap(StructWithRefTypeUnique& a, StructWithRefTypeUnique& b);
};

template <class Protocol_>
unsigned long StructWithRefTypeUnique::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/refs/src/module.thrift", "name": "StructWithRefTypeShared", "kind": "struct" } */
class StructWithRefTypeShared final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 3;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::def_field,
    ::apache::thrift::ident::opt_field,
    ::apache::thrift::ident::req_field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::cpp2::Empty>,
    ::apache::thrift::type::struct_t<::cpp2::Empty>,
    ::apache::thrift::type::struct_t<::cpp2::Empty>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StructWithRefTypeShared;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  StructWithRefTypeShared();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithRefTypeShared(apache::thrift::FragileConstructor, ::std::shared_ptr<::cpp2::Empty> def_field__arg, ::std::shared_ptr<::cpp2::Empty> opt_field__arg, ::std::shared_ptr<::cpp2::Empty> req_field__arg);

  StructWithRefTypeShared(StructWithRefTypeShared&&) noexcept;

  StructWithRefTypeShared(const StructWithRefTypeShared& src);


  StructWithRefTypeShared& operator=(StructWithRefTypeShared&&) noexcept;
  StructWithRefTypeShared& operator=(const StructWithRefTypeShared& src);

  ~StructWithRefTypeShared();

 private:
  ::std::shared_ptr<::cpp2::Empty> __fbthrift_field_def_field;
 private:
  ::std::shared_ptr<::cpp2::Empty> __fbthrift_field_opt_field;
 private:
  ::std::shared_ptr<::cpp2::Empty> __fbthrift_field_req_field;

 public:

  bool operator==(const StructWithRefTypeShared&) const;
  bool operator<(const StructWithRefTypeShared&) const;
  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T& def_field_ref() & {
    return __fbthrift_field_def_field;
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T& def_field_ref() const& {
    return __fbthrift_field_def_field;
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T&& def_field_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_def_field);
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T&& def_field_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_def_field);
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T& def_field() & {
    return __fbthrift_field_def_field;
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T& def_field() const& {
    return __fbthrift_field_def_field;
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T&& def_field() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_def_field);
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T&& def_field() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_def_field);
  }
  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T& opt_field_ref() & {
    return __fbthrift_field_opt_field;
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T& opt_field_ref() const& {
    return __fbthrift_field_opt_field;
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T&& opt_field_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_opt_field);
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T&& opt_field_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_opt_field);
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T& opt_field() & {
    return __fbthrift_field_opt_field;
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T& opt_field() const& {
    return __fbthrift_field_opt_field;
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T&& opt_field() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_opt_field);
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T&& opt_field() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_opt_field);
  }
  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T& req_field_ref() & {
    return __fbthrift_field_req_field;
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T& req_field_ref() const& {
    return __fbthrift_field_req_field;
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T&& req_field_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_req_field);
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T&& req_field_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_req_field);
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T& req_field() & {
    return __fbthrift_field_req_field;
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T& req_field() const& {
    return __fbthrift_field_req_field;
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T&& req_field() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_req_field);
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T&& req_field() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_req_field);
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructWithRefTypeShared>;
  friend void swap(StructWithRefTypeShared& a, StructWithRefTypeShared& b);
};

template <class Protocol_>
unsigned long StructWithRefTypeShared::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/refs/src/module.thrift", "name": "StructWithRefTypeSharedConst", "kind": "struct" } */
class StructWithRefTypeSharedConst final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 3;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::def_field,
    ::apache::thrift::ident::opt_field,
    ::apache::thrift::ident::req_field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::cpp2::Empty>,
    ::apache::thrift::type::struct_t<::cpp2::Empty>,
    ::apache::thrift::type::struct_t<::cpp2::Empty>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StructWithRefTypeSharedConst;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  StructWithRefTypeSharedConst();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithRefTypeSharedConst(apache::thrift::FragileConstructor, ::std::shared_ptr<const ::cpp2::Empty> def_field__arg, ::std::shared_ptr<const ::cpp2::Empty> opt_field__arg, ::std::shared_ptr<const ::cpp2::Empty> req_field__arg);

  StructWithRefTypeSharedConst(StructWithRefTypeSharedConst&&) noexcept;

  StructWithRefTypeSharedConst(const StructWithRefTypeSharedConst& src);


  StructWithRefTypeSharedConst& operator=(StructWithRefTypeSharedConst&&) noexcept;
  StructWithRefTypeSharedConst& operator=(const StructWithRefTypeSharedConst& src);

  ~StructWithRefTypeSharedConst();

 private:
  ::std::shared_ptr<const ::cpp2::Empty> __fbthrift_field_def_field;
 private:
  ::std::shared_ptr<const ::cpp2::Empty> __fbthrift_field_opt_field;
 private:
  ::std::shared_ptr<const ::cpp2::Empty> __fbthrift_field_req_field;

 public:

  bool operator==(const StructWithRefTypeSharedConst&) const;
  bool operator<(const StructWithRefTypeSharedConst&) const;
  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T& def_field_ref() & {
    return __fbthrift_field_def_field;
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T& def_field_ref() const& {
    return __fbthrift_field_def_field;
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T&& def_field_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_def_field);
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T&& def_field_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_def_field);
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T& def_field() & {
    return __fbthrift_field_def_field;
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T& def_field() const& {
    return __fbthrift_field_def_field;
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T&& def_field() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_def_field);
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T&& def_field() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_def_field);
  }
  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T& opt_field_ref() & {
    return __fbthrift_field_opt_field;
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T& opt_field_ref() const& {
    return __fbthrift_field_opt_field;
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T&& opt_field_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_opt_field);
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T&& opt_field_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_opt_field);
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T& opt_field() & {
    return __fbthrift_field_opt_field;
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T& opt_field() const& {
    return __fbthrift_field_opt_field;
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T&& opt_field() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_opt_field);
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T&& opt_field() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_opt_field);
  }
  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T& req_field_ref() & {
    return __fbthrift_field_req_field;
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T& req_field_ref() const& {
    return __fbthrift_field_req_field;
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T&& req_field_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_req_field);
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T&& req_field_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_req_field);
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T& req_field() & {
    return __fbthrift_field_req_field;
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T& req_field() const& {
    return __fbthrift_field_req_field;
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T&& req_field() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_req_field);
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T&& req_field() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_req_field);
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructWithRefTypeSharedConst>;
  friend void swap(StructWithRefTypeSharedConst& a, StructWithRefTypeSharedConst& b);
};

template <class Protocol_>
unsigned long StructWithRefTypeSharedConst::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/refs/src/module.thrift", "name": "StructWithRefAndAnnotCppNoexceptMoveCtor", "kind": "struct" } */
class StructWithRefAndAnnotCppNoexceptMoveCtor final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::def_field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::cpp2::Empty>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StructWithRefAndAnnotCppNoexceptMoveCtor;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  StructWithRefAndAnnotCppNoexceptMoveCtor();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithRefAndAnnotCppNoexceptMoveCtor(apache::thrift::FragileConstructor, ::std::unique_ptr<::cpp2::Empty> def_field__arg);

  StructWithRefAndAnnotCppNoexceptMoveCtor(StructWithRefAndAnnotCppNoexceptMoveCtor&&) noexcept;
  StructWithRefAndAnnotCppNoexceptMoveCtor(const StructWithRefAndAnnotCppNoexceptMoveCtor& src);


  StructWithRefAndAnnotCppNoexceptMoveCtor& operator=(StructWithRefAndAnnotCppNoexceptMoveCtor&&) noexcept;
  StructWithRefAndAnnotCppNoexceptMoveCtor& operator=(const StructWithRefAndAnnotCppNoexceptMoveCtor& src);

  ~StructWithRefAndAnnotCppNoexceptMoveCtor();

 private:
  ::std::unique_ptr<::cpp2::Empty> __fbthrift_field_def_field;

 public:

  bool operator==(const StructWithRefAndAnnotCppNoexceptMoveCtor&) const;
  bool operator<(const StructWithRefAndAnnotCppNoexceptMoveCtor&) const;
  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T& def_field_ref() & {
    return __fbthrift_field_def_field;
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T& def_field_ref() const& {
    return __fbthrift_field_def_field;
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T&& def_field_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_def_field);
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T&& def_field_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_def_field);
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T& def_field() & {
    return __fbthrift_field_def_field;
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T& def_field() const& {
    return __fbthrift_field_def_field;
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE fbthrift_T&& def_field() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_def_field);
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const fbthrift_T&& def_field() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_def_field);
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructWithRefAndAnnotCppNoexceptMoveCtor>;
  friend void swap(StructWithRefAndAnnotCppNoexceptMoveCtor& a, StructWithRefAndAnnotCppNoexceptMoveCtor& b);
};

template <class Protocol_>
unsigned long StructWithRefAndAnnotCppNoexceptMoveCtor::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/refs/src/module.thrift", "name": "StructWithString", "kind": "struct" } */
class StructWithString final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 5;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::def_unique_string_ref,
    ::apache::thrift::ident::def_shared_string_ref,
    ::apache::thrift::ident::def_shared_string_const_ref,
    ::apache::thrift::ident::unique_string_ref,
    ::apache::thrift::ident::shared_string_ref
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StructWithString;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  StructWithString();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithString(apache::thrift::FragileConstructor, ::std::unique_ptr<::std::string> def_unique_string_ref__arg, ::std::shared_ptr<::std::string> def_shared_string_ref__arg, ::std::shared_ptr<const ::std::string> def_shared_string_const_ref__arg, ::std::unique_ptr<::std::string> unique_string_ref__arg, ::std::shared_ptr<::std::string> shared_string_ref__arg);

  StructWithString(StructWithString&&) noexcept;
  StructWithString(const StructWithString& src);


  StructWithString& operator=(StructWithString&&) noexcept;
  StructWithString& operator=(const StructWithString& src);

  ~StructWithString();

 private:
  ::std::unique_ptr<::std::string> __fbthrift_field_def_unique_string_ref;
 private:
  ::std::shared_ptr<::std::string> __fbthrift_field_def_shared_string_ref;
 private:
  ::std::shared_ptr<const ::std::string> __fbthrift_field_def_shared_string_const_ref;
 private:
  ::std::unique_ptr<::std::string> __fbthrift_field_unique_string_ref;
 private:
  ::std::shared_ptr<::std::string> __fbthrift_field_shared_string_ref;

 public:

  bool operator==(const StructWithString&) const;
  bool operator<(const StructWithString&) const;
  /** Glean { "field": "def_unique_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T& def_unique_string_ref_ref() & {
    return __fbthrift_field_def_unique_string_ref;
  }

  /** Glean { "field": "def_unique_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T& def_unique_string_ref_ref() const& {
    return __fbthrift_field_def_unique_string_ref;
  }

  /** Glean { "field": "def_unique_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T&& def_unique_string_ref_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_def_unique_string_ref);
  }

  /** Glean { "field": "def_unique_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T&& def_unique_string_ref_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_def_unique_string_ref);
  }

  /** Glean { "field": "def_unique_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T& def_unique_string_ref() & {
    return __fbthrift_field_def_unique_string_ref;
  }

  /** Glean { "field": "def_unique_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T& def_unique_string_ref() const& {
    return __fbthrift_field_def_unique_string_ref;
  }

  /** Glean { "field": "def_unique_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T&& def_unique_string_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_def_unique_string_ref);
  }

  /** Glean { "field": "def_unique_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T&& def_unique_string_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_def_unique_string_ref);
  }
  /** Glean { "field": "def_shared_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T& def_shared_string_ref_ref() & {
    return __fbthrift_field_def_shared_string_ref;
  }

  /** Glean { "field": "def_shared_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T& def_shared_string_ref_ref() const& {
    return __fbthrift_field_def_shared_string_ref;
  }

  /** Glean { "field": "def_shared_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T&& def_shared_string_ref_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_def_shared_string_ref);
  }

  /** Glean { "field": "def_shared_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T&& def_shared_string_ref_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_def_shared_string_ref);
  }

  /** Glean { "field": "def_shared_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T& def_shared_string_ref() & {
    return __fbthrift_field_def_shared_string_ref;
  }

  /** Glean { "field": "def_shared_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T& def_shared_string_ref() const& {
    return __fbthrift_field_def_shared_string_ref;
  }

  /** Glean { "field": "def_shared_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T&& def_shared_string_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_def_shared_string_ref);
  }

  /** Glean { "field": "def_shared_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T&& def_shared_string_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_def_shared_string_ref);
  }
  /** Glean { "field": "def_shared_string_const_ref" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::string>>
  FOLLY_ERASE fbthrift_T& def_shared_string_const_ref_ref() & {
    return __fbthrift_field_def_shared_string_const_ref;
  }

  /** Glean { "field": "def_shared_string_const_ref" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::string>>
  FOLLY_ERASE const fbthrift_T& def_shared_string_const_ref_ref() const& {
    return __fbthrift_field_def_shared_string_const_ref;
  }

  /** Glean { "field": "def_shared_string_const_ref" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::string>>
  FOLLY_ERASE fbthrift_T&& def_shared_string_const_ref_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_def_shared_string_const_ref);
  }

  /** Glean { "field": "def_shared_string_const_ref" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::string>>
  FOLLY_ERASE const fbthrift_T&& def_shared_string_const_ref_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_def_shared_string_const_ref);
  }

  /** Glean { "field": "def_shared_string_const_ref" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::string>>
  FOLLY_ERASE fbthrift_T& def_shared_string_const_ref() & {
    return __fbthrift_field_def_shared_string_const_ref;
  }

  /** Glean { "field": "def_shared_string_const_ref" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::string>>
  FOLLY_ERASE const fbthrift_T& def_shared_string_const_ref() const& {
    return __fbthrift_field_def_shared_string_const_ref;
  }

  /** Glean { "field": "def_shared_string_const_ref" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::string>>
  FOLLY_ERASE fbthrift_T&& def_shared_string_const_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_def_shared_string_const_ref);
  }

  /** Glean { "field": "def_shared_string_const_ref" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::string>>
  FOLLY_ERASE const fbthrift_T&& def_shared_string_const_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_def_shared_string_const_ref);
  }
  /** Glean { "field": "unique_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T& unique_string_ref_ref() & {
    return __fbthrift_field_unique_string_ref;
  }

  /** Glean { "field": "unique_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T& unique_string_ref_ref() const& {
    return __fbthrift_field_unique_string_ref;
  }

  /** Glean { "field": "unique_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T&& unique_string_ref_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_unique_string_ref);
  }

  /** Glean { "field": "unique_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T&& unique_string_ref_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_unique_string_ref);
  }

  /** Glean { "field": "unique_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T& unique_string_ref() & {
    return __fbthrift_field_unique_string_ref;
  }

  /** Glean { "field": "unique_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T& unique_string_ref() const& {
    return __fbthrift_field_unique_string_ref;
  }

  /** Glean { "field": "unique_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T&& unique_string_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_unique_string_ref);
  }

  /** Glean { "field": "unique_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T&& unique_string_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_unique_string_ref);
  }
  /** Glean { "field": "shared_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T& shared_string_ref_ref() & {
    return __fbthrift_field_shared_string_ref;
  }

  /** Glean { "field": "shared_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T& shared_string_ref_ref() const& {
    return __fbthrift_field_shared_string_ref;
  }

  /** Glean { "field": "shared_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T&& shared_string_ref_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_shared_string_ref);
  }

  /** Glean { "field": "shared_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T&& shared_string_ref_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_shared_string_ref);
  }

  /** Glean { "field": "shared_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T& shared_string_ref() & {
    return __fbthrift_field_shared_string_ref;
  }

  /** Glean { "field": "shared_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T& shared_string_ref() const& {
    return __fbthrift_field_shared_string_ref;
  }

  /** Glean { "field": "shared_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T&& shared_string_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_shared_string_ref);
  }

  /** Glean { "field": "shared_string_ref" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T&& shared_string_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_shared_string_ref);
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructWithString>;
  friend void swap(StructWithString& a, StructWithString& b);
};

template <class Protocol_>
unsigned long StructWithString::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace cpp2

namespace apache::thrift {

template <> struct TEnumDataStorage<::cpp2::MyUnion::Type>;

template <> struct TEnumTraits<::cpp2::MyUnion::Type> {
  using type = ::cpp2::MyUnion::Type;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }

  static constexpr type min() { return type::anInteger; }
  static constexpr type max() { return type::aString; }
};

template <> struct TEnumDataStorage<::cpp2::NonTriviallyDestructibleUnion::Type>;

template <> struct TEnumTraits<::cpp2::NonTriviallyDestructibleUnion::Type> {
  using type = ::cpp2::NonTriviallyDestructibleUnion::Type;

  static constexpr std::size_t const size = 1;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }

  static constexpr type min() { return type::int_field; }
  static constexpr type max() { return type::int_field; }
};
} // namespace apache::thrift

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::cpp2::MyUnion, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 6530880838528394080;
  static constexpr ::std::string_view definitionKey = {"\x01\x28\x82\xce\x9b\xac\xd2\xab\xc1\xe8\xc3\x07\xcc\xa8\xb9\xd3", 16};
};
template <> struct TSchemaAssociation<::cpp2::NonTriviallyDestructibleUnion, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 6530880838528394080;
  static constexpr ::std::string_view definitionKey = {"\x86\xd2\x7d\x01\xb2\x23\x02\x30\x1f\x03\x77\x6b\xf7\x90\x91\xbe", 16};
};
template <> struct TSchemaAssociation<::cpp2::MyField, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 6530880838528394080;
  static constexpr ::std::string_view definitionKey = {"\x02\x6a\xd9\x61\xba\x70\xbc\xac\x1c\xfd\x44\x9a\xbc\x19\x8e\x67", 16};
};
template <> struct TSchemaAssociation<::cpp2::MyStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 6530880838528394080;
  static constexpr ::std::string_view definitionKey = {"\x6b\x92\x10\x77\x56\x5d\xf5\x5e\x4f\x78\x1e\x87\x39\xb7\xb3\xc2", 16};
};
template <> struct TSchemaAssociation<::cpp2::StructWithUnion, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 6530880838528394080;
  static constexpr ::std::string_view definitionKey = {"\x59\x5d\x62\xd8\x34\x5d\x42\x87\x54\xdd\x4a\x84\x41\xd7\x99\x43", 16};
};
template <> struct TSchemaAssociation<::cpp2::RecursiveStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 6530880838528394080;
  static constexpr ::std::string_view definitionKey = {"\xb3\x99\x21\x72\x37\x07\xec\x94\x12\xde\x61\xef\x0a\x96\x1e\x7e", 16};
};
template <> struct TSchemaAssociation<::cpp2::StructWithContainers, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 6530880838528394080;
  static constexpr ::std::string_view definitionKey = {"\xdf\x84\x65\xb0\xf1\xc4\xc3\xe8\x00\xac\x5b\xe1\xe2\x11\x85\xa6", 16};
};
template <> struct TSchemaAssociation<::cpp2::StructWithSharedConst, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 6530880838528394080;
  static constexpr ::std::string_view definitionKey = {"\x64\x25\x11\x25\x34\x45\xbd\x9f\xa6\xc5\x84\xb4\xb2\xc9\x9e\x6a", 16};
};
template <> struct TSchemaAssociation<::cpp2::Empty, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 6530880838528394080;
  static constexpr ::std::string_view definitionKey = {"\x0a\x0f\x95\xa3\x02\xbe\xaa\xdb\xd3\xfe\x28\x34\x8f\xe5\xd4\xfc", 16};
};
template <> struct TSchemaAssociation<::cpp2::StructWithRef, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 6530880838528394080;
  static constexpr ::std::string_view definitionKey = {"\x99\x1f\xc5\xfd\x26\xce\xd9\x20\x9d\x3a\xdd\xfc\xfe\xe0\xb3\xca", 16};
};
template <> struct TSchemaAssociation<::cpp2::StructWithBox, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 6530880838528394080;
  static constexpr ::std::string_view definitionKey = {"\xcd\x3f\x8b\x6d\x7c\xaf\xab\xde\xfb\x52\x85\x7f\x86\x5d\x49\xba", 16};
};
template <> struct TSchemaAssociation<::cpp2::StructWithInternBox, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 6530880838528394080;
  static constexpr ::std::string_view definitionKey = {"\xe3\x4f\x02\x73\x9b\xf6\x5f\xb8\xd7\xa3\x5f\xd1\xa8\x77\x03\xdc", 16};
};
template <> struct TSchemaAssociation<::cpp2::StructWithTerseInternBox, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 6530880838528394080;
  static constexpr ::std::string_view definitionKey = {"\x93\x56\x15\xaf\x35\x56\x67\x78\x43\xf6\x9d\x8f\xcb\x2c\xff\x20", 16};
};
template <> struct TSchemaAssociation<::cpp2::AdaptedStructWithInternBox, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 6530880838528394080;
  static constexpr ::std::string_view definitionKey = {"\x3b\x14\x61\x69\x22\x4a\x2b\xac\x8f\xc1\xa6\xd2\x8c\x84\x82\x90", 16};
};
template <> struct TSchemaAssociation<::cpp2::AdaptedStructWithTerseInternBox, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 6530880838528394080;
  static constexpr ::std::string_view definitionKey = {"\x47\x64\xf1\xee\x85\x90\xd6\x65\x31\xb4\xb6\x64\x89\x3e\xd6\xe9", 16};
};
template <> struct TSchemaAssociation<::cpp2::StructWithRefTypeUnique, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 6530880838528394080;
  static constexpr ::std::string_view definitionKey = {"\x03\xd5\x09\x4b\x80\x5e\x0f\xb3\x1c\x09\x2d\x42\x91\xc7\xf7\x11", 16};
};
template <> struct TSchemaAssociation<::cpp2::StructWithRefTypeShared, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 6530880838528394080;
  static constexpr ::std::string_view definitionKey = {"\x14\xeb\x04\x8a\x04\x85\x2b\x55\x77\xb1\xe1\x8f\xc6\x77\xbf\xaa", 16};
};
template <> struct TSchemaAssociation<::cpp2::StructWithRefTypeSharedConst, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 6530880838528394080;
  static constexpr ::std::string_view definitionKey = {"\xe2\x4d\xf1\x08\x54\x42\x98\x04\x91\x43\xc3\xbe\x5f\xa2\x15\xb0", 16};
};
template <> struct TSchemaAssociation<::cpp2::StructWithRefAndAnnotCppNoexceptMoveCtor, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 6530880838528394080;
  static constexpr ::std::string_view definitionKey = {"\xd5\xfa\x75\xd3\x63\xa6\xc2\xda\x39\xe8\xdd\xe1\x42\x6d\x2b\x79", 16};
};
template <> struct TSchemaAssociation<::cpp2::StructWithString, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 6530880838528394080;
  static constexpr ::std::string_view definitionKey = {"\xc2\xca\x44\x59\xee\x1d\x50\x94\x70\x71\x69\xaa\xc0\xdd\xf6\x54", 16};
};
template <> struct TSchemaAssociation<::cpp2::MyEnum, true> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 6530880838528394080;
  static constexpr ::std::string_view definitionKey = {"\x75\x62\xe6\x96\x9b\x50\x2a\x2a\x8c\x9c\x03\x0d\x9e\xf3\x01\x83", 16};
};
template <> struct TSchemaAssociation<::cpp2::TypedEnum, true> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 6530880838528394080;
  static constexpr ::std::string_view definitionKey = {"\xb0\xda\xa0\xfc\x1c\x5c\x01\x29\x22\x23\xe1\x00\xce\xa8\x73\xbd", 16};
};
} // namespace apache::thrift::detail
