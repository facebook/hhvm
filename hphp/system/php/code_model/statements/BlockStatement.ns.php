<?php
// Copyright 2004-present Facebook. All Rights Reserved.
// This file is @generated by
// fbcode/hphp/facebook/tools/code_model/Generate.sh

namespace HH\CodeModel {

/**
 *  { statements }
 */
class BlockStatement /*implements IBlockStatement*/ {
  use Statement;
  use Node;

  private /*?Vector<IStatement>*/ $statements;
  private /*?bool*/ $isEnclosed;

  /**
   *  { statements }
   */
  public function getStatements() /*: Vector<IStatement>*/ {
    if ($this->statements === null) {
      $this->statements = Vector {};
    }
    return $this->statements;
  }
  /**
   *  { statements }
   */
  public function setStatements(/*Vector<IStatement>*/ $value)
     /*: this*/ {
    $this->statements = $value;
    return $this;
  }

  /**
   *  { statements }
   */
  public function getIsEnclosed() /*: bool*/ {
    if ($this->isEnclosed === null) {
      return false;
    }
    return $this->isEnclosed;
  }
  /**
   *  { statements }
   */
  public function setIsEnclosed(/*bool*/ $value) /*: this*/ {
    $this->isEnclosed = $value;
    return $this;
  }

  /**
   * Returns $visitor->visitBlockStatement($this) if
   * such a method exists on $visitor.
   * Otherwise returns $visitor->visitStatement($this) if
   * such a method exists on $visitor.
   * Otherwise returns $visitor->visitNode($this) if
   */
  public function accept(/*mixed*/ $visitor) /*: mixed*/ {
    if (method_exists($visitor, "visitBlockStatement")) {
      // UNSAFE
      return $visitor->visitBlockStatement($this);
    } else if (method_exists($visitor, "visitStatement")) {
      // UNSAFE
      return $visitor->visitStatement($this);
    } else {
      return $visitor->visitNode($this);
    }
  }

  /**
   * Yields a list of nodes that are children of this node.
   * A node has exactly one parent, so doing a depth
   * first traversal of a node graph using getChildren will
   * traverse a spanning tree.
   */
  public function getChildren() /*: Continuation<INode>*/ {
    if ($this->statements !== null) {
      foreach ($this->statements as $elem) {
        yield $elem;
      }
    }
  }
}
}
