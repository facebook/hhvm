<?php
// Copyright 2004-present Facebook. All Rights Reserved.
// This file is @generated by
// fbcode/hphp/facebook/tools/code_model/Generate.sh

namespace HH\CodeModel {

/**
 * A namespace is a named container of nested namespaces, namespace types and
 * namespace functions
 */
class NamespaceData /*implements INamespaceData*/ {
  use NamespaceMember;
  use NamedNode;
  use Node;

  private /*?Vector<INamespaceData>*/ $nestedNamespaces;
  private /*?Vector<ITypeData>*/ $types;
  private /*?Vector<IFunctionData>*/ $functions;

  /** Zero or more namespaces that are nested in this namespace */
  public function getNestedNamespaces() /*: Vector<INamespaceData>*/ {
    if ($this->nestedNamespaces === null) {
      $this->nestedNamespaces = Vector {};
    }
    return $this->nestedNamespaces;
  }
  /** Zero or more namespaces that are nested in this namespace */
  public function setNestedNamespaces(/*Vector<INamespaceData>*/ $value) /*: this*/ {
    $this->nestedNamespaces = $value;
    return $this;
  }

  /** Zero more types that belong to this namespace */
  public function getTypes() /*: Vector<ITypeData>*/ {
    if ($this->types === null) {
      $this->types = Vector {};
    }
    return $this->types;
  }
  /** Zero more types that belong to this namespace */
  public function setTypes(/*Vector<ITypeData>*/ $value) /*: this*/ {
    $this->types = $value;
    return $this;
  }

  /** Zero more functions that belong to this namespace */
  public function getFunctions() /*: Vector<IFunctionData>*/ {
    if ($this->functions === null) {
      $this->functions = Vector {};
    }
    return $this->functions;
  }
  /** Zero more functions that belong to this namespace */
  public function setFunctions(/*Vector<IFunctionData>*/ $value) /*: this*/ {
    $this->functions = $value;
    return $this;
  }

  /**
   * Returns $visitor->visitNamespaceData($this) if
   * such a method exists on $visitor.
   * Falls back to a base interface visit method if possible.
   * Otherwise it returns $visitor->visitNode() .
   */
  public function accept(/*mixed*/ $visitor) /*: mixed*/ {
    if (method_exists($visitor, "visitNamespaceData")) {
      // UNSAFE
      return $visitor->visitNamespaceData($this);
    }
    if ($this->getContainingNamespace() !== null) {
      if (method_exists($visitor, "visitINamespaceMember")) {
        // UNSAFE
        return $visitor->visitINamespaceMember($this);
      }
      }
    if (method_exists($visitor, "visitINamedNode")) {
      // UNSAFE
      return $visitor->visitINamedNode($this);
    }
    // UNSAFE
    return $visitor->visitNode($this);
  }

  /**
   * Calls $visitor->visitNamespaceDataReference($this) if
   * such a method exists on $visitor. If not it returns null.
   */
  public function acceptAsReference(/*mixed*/ $visitor)/*: mixed*/{
    if (method_exists($visitor, "visitNamespaceDataReference")) {
      // UNSAFE
      return $visitor->visitNamespaceDataReference($this);
    }
    if ($this->getContainingNamespace() !== null) {
      if (method_exists($visitor, "visitINamespaceMemberReference")) {
        // UNSAFE
        return $visitor->visitINamespaceMemberReference($this);
      }
      }
    if (method_exists($visitor, "visitINamedNodeReference")) {
      // UNSAFE
      return $visitor->visitINamedNodeReference($this);
    }
    // UNSAFE
    return $visitor->visitNodeReference($this);
  }

  /**
   * Yields a list of nodes that are children of this node.
   * A node has exactly one parent, so doing a depth
   * first traversal of a node graph using getChildren will
   * traverse a spanning tree.
   */
  public function getChildren() /*: Continuation<INode>*/ {
    // UNSAFE
    yield break;
  }

  /**
   * Yields a list of nodes that can be reached from this
   * node but are not children of this node. Most traversals
   * will not traverse the children of nodes reached via
   * getReferences.
   */
  public function getReferences() /*: Continuation<INode>*/ {
    if ($this->containingNamespace !== null) {
      yield $this->containingNamespace;
    }
  }

}
}
