<?php
// Copyright 2004-present Facebook. All Rights Reserved.
// This file is @generated by
// fbcode/hphp/facebook/tools/code_model/Generate.sh

namespace HH\CodeModel {

/**
 *  <tag attr=expression, ... > {expression} <tag/>
 */
class XmlExpression /*implements IXmlExpression*/ {
  use Expression;
  use TypedNode;
  use Node;

  private /*?string*/ $tagName;
  private /*?Vector<IBinaryOpExpression>*/ $attributes;
  private /*?Vector<IExpression>*/ $elements;

  /**
   *  <tag attr=expression, ... > {expression} <tag/>
   */
  public function getTagName() /*: string*/ {
    if ($this->tagName === null) {
      throw new \Exception("TagName is not initialized");
    }
    return $this->tagName;
  }
  /**
   *  <tag attr=expression, ... > {expression} <tag/>
   */
  public function setTagName(/*string*/ $value) /*: this*/ {
    $this->tagName = $value;
    return $this;
  }

  /**
   *  <tag attr=expression, ... > {expression} <tag/>
   */
  public function getAttributes() /*: Vector<IBinaryOpExpression>*/ {
    if ($this->attributes === null) {
      $this->attributes = Vector {};
    }
    return $this->attributes;
  }
  /**
   *  <tag attr=expression, ... > {expression} <tag/>
   */
  public function setAttributes(/*Vector<IBinaryOpExpression>*/ $value) /*: this*/ {
    $this->attributes = $value;
    return $this;
  }

  /**
   *  <tag attr=expression, ... > {expression} <tag/>
   */
  public function getElements() /*: Vector<IExpression>*/ {
    if ($this->elements === null) {
      $this->elements = Vector {};
    }
    return $this->elements;
  }
  /**
   *  <tag attr=expression, ... > {expression} <tag/>
   */
  public function setElements(/*Vector<IExpression>*/ $value) /*: this*/ {
    $this->elements = $value;
    return $this;
  }

  /**
   * Returns $visitor->visitXmlExpression($this) if
   * such a method exists on $visitor.
   * Otherwise returns $visitor->visitExpression($this) if
   * such a method exists on $visitor.
   * Otherwise returns $visitor->visitNode($this) if
   */
  public function accept(/*mixed*/ $visitor) /*: mixed*/ {
    if (method_exists($visitor, "visitXmlExpression")) {
      // UNSAFE
      return $visitor->visitXmlExpression($this);
    } else if (method_exists($visitor, "visitExpression")) {
      // UNSAFE
      return $visitor->visitExpression($this);
    } else {
      return $visitor->visitNode($this);
    }
  }

  /**
   * Yields a list of nodes that are children of this node.
   * A node has exactly one parent, so doing a depth
   * first traversal of a node graph using getChildren will
   * traverse a spanning tree.
   */
  public function getChildren() /*: Continuation<INode>*/ {
    if ($this->attributes !== null) {
      foreach ($this->attributes as $elem) {
        yield $elem;
      }
    }
    if ($this->elements !== null) {
      foreach ($this->elements as $elem) {
        yield $elem;
      }
    }
  }
}
}
