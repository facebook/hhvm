/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/sync-methods-return-try/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#include "thrift/compiler/test/fixtures/sync-methods-return-try/gen-cpp2/PubSubStreamingService.h"
#include "thrift/compiler/test/fixtures/sync-methods-return-try/gen-cpp2/PubSubStreamingService.tcc"
#include "thrift/compiler/test/fixtures/sync-methods-return-try/gen-cpp2/module_metadata.h"
#include <thrift/lib/cpp2/gen/service_cpp.h>

std::unique_ptr<apache::thrift::AsyncProcessor> apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::getProcessor() {
  return std::make_unique<::cpp2::PubSubStreamingServiceAsyncProcessor>(this);
}

apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::CreateMethodMetadataResult apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::createMethodMetadata() {
  return ::apache::thrift::detail::ap::createMethodMetadataMap<::cpp2::PubSubStreamingServiceAsyncProcessor>(getServiceRequestInfoMap().value().get());
}


std::optional<std::reference_wrapper<apache::thrift::ServiceRequestInfoMap const>> apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::getServiceRequestInfoMap() const {
  return __fbthrift_serviceInfoHolder.requestInfoMap();
}

::cpp2::PubSubStreamingServiceServiceInfoHolder apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::__fbthrift_serviceInfoHolder;

//
// Service Methods
//

//
// Method 'returnstream'
//

::apache::thrift::ServerStream<::cpp2::StreamItem> apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::returnstream(std::unique_ptr<::cpp2::StreamItem> /*from*/, std::unique_ptr<::cpp2::StreamItem> /*to*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("returnstream");
}

::apache::thrift::ServerStream<::cpp2::StreamItem> apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::sync_returnstream(std::unique_ptr<::cpp2::StreamItem> p_from, std::unique_ptr<::cpp2::StreamItem> p_to) {
  return returnstream(std::move(p_from), std::move(p_to));
}

folly::SemiFuture<::apache::thrift::ServerStream<::cpp2::StreamItem>>
apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::semifuture_returnstream(std::unique_ptr<::cpp2::StreamItem> p_from, std::unique_ptr<::cpp2::StreamItem> p_to) {
  auto expected{apache::thrift::detail::si::InvocationType::SemiFuture};
  __fbthrift_invocation_returnstream.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Sync,
      std::memory_order_relaxed);
  return sync_returnstream(std::move(p_from), std::move(p_to));
}

folly::Future<::apache::thrift::ServerStream<::cpp2::StreamItem>>
apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::future_returnstream(std::unique_ptr<::cpp2::StreamItem> p_from, std::unique_ptr<::cpp2::StreamItem> p_to) {
  auto expected{apache::thrift::detail::si::InvocationType::Future};
  __fbthrift_invocation_returnstream.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::SemiFuture,
      std::memory_order_relaxed);
  return apache::thrift::detail::si::future(
      semifuture_returnstream(std::move(p_from), std::move(p_to)),
      getInternalKeepAlive());
}

#if FOLLY_HAS_COROUTINES
folly::coro::Task<::apache::thrift::ServerStream<::cpp2::StreamItem>>
apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::co_returnstream(std::unique_ptr<::cpp2::StreamItem> p_from, std::unique_ptr<::cpp2::StreamItem> p_to) {
  auto expected{apache::thrift::detail::si::InvocationType::Coro};
  __fbthrift_invocation_returnstream.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Future,
      std::memory_order_relaxed);
  folly::throw_exception(apache::thrift::detail::si::UnimplementedCoroMethod::
                             withCapturedArgs<std::unique_ptr<::cpp2::StreamItem> /*from*/, std::unique_ptr<::cpp2::StreamItem> /*to*/>(std::move(p_from), std::move(p_to)));
}

folly::coro::Task<::apache::thrift::ServerStream<::cpp2::StreamItem>> apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::co_returnstream(
    apache::thrift::RequestParams /* params */, std::unique_ptr<::cpp2::StreamItem> p_from, std::unique_ptr<::cpp2::StreamItem> p_to) {
  auto expected{apache::thrift::detail::si::InvocationType::CoroParam};
  __fbthrift_invocation_returnstream.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Coro,
      std::memory_order_relaxed);
  return co_returnstream(std::move(p_from), std::move(p_to));
}
#endif // FOLLY_HAS_COROUTINES

void apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::async_tm_returnstream(
    apache::thrift::HandlerCallbackPtr<::apache::thrift::ServerStream<::cpp2::StreamItem>> callback, std::unique_ptr<::cpp2::StreamItem> p_from, std::unique_ptr<::cpp2::StreamItem> p_to) {
  // It's possible the coroutine versions will delegate to a future-based
  // version. If that happens, we need the RequestParams arguments to be
  // available to the future through the thread-local backchannel, so we create
  // a RAII object that sets up RequestParams and clears them on destruction.
  apache::thrift::detail::si::AsyncTmPrep asyncTmPrep(this, callback.get());
#if FOLLY_HAS_COROUTINES
determineInvocationType:
#endif // FOLLY_HAS_COROUTINES
  auto invocationType =
      __fbthrift_invocation_returnstream.load(std::memory_order_relaxed);
  try {
    switch (invocationType) {
      case apache::thrift::detail::si::InvocationType::AsyncTm: {
#if FOLLY_HAS_COROUTINES
        __fbthrift_invocation_returnstream.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::CoroParam,
            std::memory_order_relaxed);
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_returnstream(params, std::move(p_from), std::move(p_to));
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
#else // FOLLY_HAS_COROUTINES
        __fbthrift_invocation_returnstream.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::Future,
            std::memory_order_relaxed);
        [[fallthrough]];
#endif // FOLLY_HAS_COROUTINES
      }
      case apache::thrift::detail::si::InvocationType::Future: {
        auto fut = future_returnstream(std::move(p_from), std::move(p_to));
        apache::thrift::detail::si::async_tm_future(
            std::move(callback), std::move(fut));
        return;
      }
      case apache::thrift::detail::si::InvocationType::SemiFuture: {
        auto fut = semifuture_returnstream(std::move(p_from), std::move(p_to));
        apache::thrift::detail::si::async_tm_semifuture(
            std::move(callback), std::move(fut));
        return;
      }
#if FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::CoroParam: {
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_returnstream(params, std::move(p_from), std::move(p_to));
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
      case apache::thrift::detail::si::InvocationType::Coro: {
        auto task = co_returnstream(std::move(p_from), std::move(p_to));
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
#endif // FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::Sync: {
        callback->result(sync_returnstream(std::move(p_from), std::move(p_to)));
        return;
      }
      default: {
        folly::assume_unreachable();
      }
    }
#if FOLLY_HAS_COROUTINES
  } catch (apache::thrift::detail::si::UnimplementedCoroMethod& ex) {
    std::tie(p_from, p_to) = std::move(ex).restoreArgs<std::unique_ptr<::cpp2::StreamItem> /*from*/, std::unique_ptr<::cpp2::StreamItem> /*to*/>();
    goto determineInvocationType;
#endif // FOLLY_HAS_COROUTINES
  } catch (...) {
    callback->exception(std::current_exception());
  }
}
//
// End of Method 'returnstream'
//

//
// Method 'streamthrows'
//

::apache::thrift::ServerStream<::cpp2::StreamItem> apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::streamthrows(std::unique_ptr<::cpp2::StreamItem> /*foo*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("streamthrows");
}

::apache::thrift::ServerStream<::cpp2::StreamItem> apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::sync_streamthrows(std::unique_ptr<::cpp2::StreamItem> p_foo) {
  return streamthrows(std::move(p_foo));
}

folly::SemiFuture<::apache::thrift::ServerStream<::cpp2::StreamItem>>
apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::semifuture_streamthrows(std::unique_ptr<::cpp2::StreamItem> p_foo) {
  auto expected{apache::thrift::detail::si::InvocationType::SemiFuture};
  __fbthrift_invocation_streamthrows.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Sync,
      std::memory_order_relaxed);
  return sync_streamthrows(std::move(p_foo));
}

folly::Future<::apache::thrift::ServerStream<::cpp2::StreamItem>>
apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::future_streamthrows(std::unique_ptr<::cpp2::StreamItem> p_foo) {
  auto expected{apache::thrift::detail::si::InvocationType::Future};
  __fbthrift_invocation_streamthrows.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::SemiFuture,
      std::memory_order_relaxed);
  return apache::thrift::detail::si::future(
      semifuture_streamthrows(std::move(p_foo)),
      getInternalKeepAlive());
}

#if FOLLY_HAS_COROUTINES
folly::coro::Task<::apache::thrift::ServerStream<::cpp2::StreamItem>>
apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::co_streamthrows(std::unique_ptr<::cpp2::StreamItem> p_foo) {
  auto expected{apache::thrift::detail::si::InvocationType::Coro};
  __fbthrift_invocation_streamthrows.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Future,
      std::memory_order_relaxed);
  folly::throw_exception(apache::thrift::detail::si::UnimplementedCoroMethod::
                             withCapturedArgs<std::unique_ptr<::cpp2::StreamItem> /*foo*/>(std::move(p_foo)));
}

folly::coro::Task<::apache::thrift::ServerStream<::cpp2::StreamItem>> apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::co_streamthrows(
    apache::thrift::RequestParams /* params */, std::unique_ptr<::cpp2::StreamItem> p_foo) {
  auto expected{apache::thrift::detail::si::InvocationType::CoroParam};
  __fbthrift_invocation_streamthrows.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Coro,
      std::memory_order_relaxed);
  return co_streamthrows(std::move(p_foo));
}
#endif // FOLLY_HAS_COROUTINES

void apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::async_tm_streamthrows(
    apache::thrift::HandlerCallbackPtr<::apache::thrift::ServerStream<::cpp2::StreamItem>> callback, std::unique_ptr<::cpp2::StreamItem> p_foo) {
  // It's possible the coroutine versions will delegate to a future-based
  // version. If that happens, we need the RequestParams arguments to be
  // available to the future through the thread-local backchannel, so we create
  // a RAII object that sets up RequestParams and clears them on destruction.
  apache::thrift::detail::si::AsyncTmPrep asyncTmPrep(this, callback.get());
#if FOLLY_HAS_COROUTINES
determineInvocationType:
#endif // FOLLY_HAS_COROUTINES
  auto invocationType =
      __fbthrift_invocation_streamthrows.load(std::memory_order_relaxed);
  try {
    switch (invocationType) {
      case apache::thrift::detail::si::InvocationType::AsyncTm: {
#if FOLLY_HAS_COROUTINES
        __fbthrift_invocation_streamthrows.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::CoroParam,
            std::memory_order_relaxed);
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_streamthrows(params, std::move(p_foo));
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
#else // FOLLY_HAS_COROUTINES
        __fbthrift_invocation_streamthrows.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::Future,
            std::memory_order_relaxed);
        [[fallthrough]];
#endif // FOLLY_HAS_COROUTINES
      }
      case apache::thrift::detail::si::InvocationType::Future: {
        auto fut = future_streamthrows(std::move(p_foo));
        apache::thrift::detail::si::async_tm_future(
            std::move(callback), std::move(fut));
        return;
      }
      case apache::thrift::detail::si::InvocationType::SemiFuture: {
        auto fut = semifuture_streamthrows(std::move(p_foo));
        apache::thrift::detail::si::async_tm_semifuture(
            std::move(callback), std::move(fut));
        return;
      }
#if FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::CoroParam: {
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_streamthrows(params, std::move(p_foo));
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
      case apache::thrift::detail::si::InvocationType::Coro: {
        auto task = co_streamthrows(std::move(p_foo));
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
#endif // FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::Sync: {
        callback->result(sync_streamthrows(std::move(p_foo)));
        return;
      }
      default: {
        folly::assume_unreachable();
      }
    }
#if FOLLY_HAS_COROUTINES
  } catch (apache::thrift::detail::si::UnimplementedCoroMethod& ex) {
    std::tie(p_foo) = std::move(ex).restoreArgs<std::unique_ptr<::cpp2::StreamItem> /*foo*/>();
    goto determineInvocationType;
#endif // FOLLY_HAS_COROUTINES
  } catch (...) {
    callback->exception(std::current_exception());
  }
}
//
// End of Method 'streamthrows'
//

//
// Method 'servicethrows'
//

::apache::thrift::ServerStream<::cpp2::StreamItem> apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::servicethrows(std::unique_ptr<::cpp2::StreamItem> /*foo*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("servicethrows");
}

::apache::thrift::ServerStream<::cpp2::StreamItem> apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::sync_servicethrows(std::unique_ptr<::cpp2::StreamItem> p_foo) {
  return servicethrows(std::move(p_foo));
}

folly::SemiFuture<::apache::thrift::ServerStream<::cpp2::StreamItem>>
apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::semifuture_servicethrows(std::unique_ptr<::cpp2::StreamItem> p_foo) {
  auto expected{apache::thrift::detail::si::InvocationType::SemiFuture};
  __fbthrift_invocation_servicethrows.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Sync,
      std::memory_order_relaxed);
  return sync_servicethrows(std::move(p_foo));
}

folly::Future<::apache::thrift::ServerStream<::cpp2::StreamItem>>
apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::future_servicethrows(std::unique_ptr<::cpp2::StreamItem> p_foo) {
  auto expected{apache::thrift::detail::si::InvocationType::Future};
  __fbthrift_invocation_servicethrows.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::SemiFuture,
      std::memory_order_relaxed);
  return apache::thrift::detail::si::future(
      semifuture_servicethrows(std::move(p_foo)),
      getInternalKeepAlive());
}

#if FOLLY_HAS_COROUTINES
folly::coro::Task<::apache::thrift::ServerStream<::cpp2::StreamItem>>
apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::co_servicethrows(std::unique_ptr<::cpp2::StreamItem> p_foo) {
  auto expected{apache::thrift::detail::si::InvocationType::Coro};
  __fbthrift_invocation_servicethrows.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Future,
      std::memory_order_relaxed);
  folly::throw_exception(apache::thrift::detail::si::UnimplementedCoroMethod::
                             withCapturedArgs<std::unique_ptr<::cpp2::StreamItem> /*foo*/>(std::move(p_foo)));
}

folly::coro::Task<::apache::thrift::ServerStream<::cpp2::StreamItem>> apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::co_servicethrows(
    apache::thrift::RequestParams /* params */, std::unique_ptr<::cpp2::StreamItem> p_foo) {
  auto expected{apache::thrift::detail::si::InvocationType::CoroParam};
  __fbthrift_invocation_servicethrows.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Coro,
      std::memory_order_relaxed);
  return co_servicethrows(std::move(p_foo));
}
#endif // FOLLY_HAS_COROUTINES

void apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::async_tm_servicethrows(
    apache::thrift::HandlerCallbackPtr<::apache::thrift::ServerStream<::cpp2::StreamItem>> callback, std::unique_ptr<::cpp2::StreamItem> p_foo) {
  // It's possible the coroutine versions will delegate to a future-based
  // version. If that happens, we need the RequestParams arguments to be
  // available to the future through the thread-local backchannel, so we create
  // a RAII object that sets up RequestParams and clears them on destruction.
  apache::thrift::detail::si::AsyncTmPrep asyncTmPrep(this, callback.get());
#if FOLLY_HAS_COROUTINES
determineInvocationType:
#endif // FOLLY_HAS_COROUTINES
  auto invocationType =
      __fbthrift_invocation_servicethrows.load(std::memory_order_relaxed);
  try {
    switch (invocationType) {
      case apache::thrift::detail::si::InvocationType::AsyncTm: {
#if FOLLY_HAS_COROUTINES
        __fbthrift_invocation_servicethrows.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::CoroParam,
            std::memory_order_relaxed);
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_servicethrows(params, std::move(p_foo));
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
#else // FOLLY_HAS_COROUTINES
        __fbthrift_invocation_servicethrows.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::Future,
            std::memory_order_relaxed);
        [[fallthrough]];
#endif // FOLLY_HAS_COROUTINES
      }
      case apache::thrift::detail::si::InvocationType::Future: {
        auto fut = future_servicethrows(std::move(p_foo));
        apache::thrift::detail::si::async_tm_future(
            std::move(callback), std::move(fut));
        return;
      }
      case apache::thrift::detail::si::InvocationType::SemiFuture: {
        auto fut = semifuture_servicethrows(std::move(p_foo));
        apache::thrift::detail::si::async_tm_semifuture(
            std::move(callback), std::move(fut));
        return;
      }
#if FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::CoroParam: {
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_servicethrows(params, std::move(p_foo));
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
      case apache::thrift::detail::si::InvocationType::Coro: {
        auto task = co_servicethrows(std::move(p_foo));
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
#endif // FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::Sync: {
        callback->result(sync_servicethrows(std::move(p_foo)));
        return;
      }
      default: {
        folly::assume_unreachable();
      }
    }
#if FOLLY_HAS_COROUTINES
  } catch (apache::thrift::detail::si::UnimplementedCoroMethod& ex) {
    std::tie(p_foo) = std::move(ex).restoreArgs<std::unique_ptr<::cpp2::StreamItem> /*foo*/>();
    goto determineInvocationType;
#endif // FOLLY_HAS_COROUTINES
  } catch (...) {
    callback->exception(std::current_exception());
  }
}
//
// End of Method 'servicethrows'
//

//
// Method 'servicethrows2'
//

::apache::thrift::ServerStream<::cpp2::StreamItem> apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::servicethrows2(std::unique_ptr<::cpp2::StreamItem> /*foo*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("servicethrows2");
}

::apache::thrift::ServerStream<::cpp2::StreamItem> apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::sync_servicethrows2(std::unique_ptr<::cpp2::StreamItem> p_foo) {
  return servicethrows2(std::move(p_foo));
}

folly::SemiFuture<::apache::thrift::ServerStream<::cpp2::StreamItem>>
apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::semifuture_servicethrows2(std::unique_ptr<::cpp2::StreamItem> p_foo) {
  auto expected{apache::thrift::detail::si::InvocationType::SemiFuture};
  __fbthrift_invocation_servicethrows2.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Sync,
      std::memory_order_relaxed);
  return sync_servicethrows2(std::move(p_foo));
}

folly::Future<::apache::thrift::ServerStream<::cpp2::StreamItem>>
apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::future_servicethrows2(std::unique_ptr<::cpp2::StreamItem> p_foo) {
  auto expected{apache::thrift::detail::si::InvocationType::Future};
  __fbthrift_invocation_servicethrows2.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::SemiFuture,
      std::memory_order_relaxed);
  return apache::thrift::detail::si::future(
      semifuture_servicethrows2(std::move(p_foo)),
      getInternalKeepAlive());
}

#if FOLLY_HAS_COROUTINES
folly::coro::Task<::apache::thrift::ServerStream<::cpp2::StreamItem>>
apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::co_servicethrows2(std::unique_ptr<::cpp2::StreamItem> p_foo) {
  auto expected{apache::thrift::detail::si::InvocationType::Coro};
  __fbthrift_invocation_servicethrows2.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Future,
      std::memory_order_relaxed);
  folly::throw_exception(apache::thrift::detail::si::UnimplementedCoroMethod::
                             withCapturedArgs<std::unique_ptr<::cpp2::StreamItem> /*foo*/>(std::move(p_foo)));
}

folly::coro::Task<::apache::thrift::ServerStream<::cpp2::StreamItem>> apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::co_servicethrows2(
    apache::thrift::RequestParams /* params */, std::unique_ptr<::cpp2::StreamItem> p_foo) {
  auto expected{apache::thrift::detail::si::InvocationType::CoroParam};
  __fbthrift_invocation_servicethrows2.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Coro,
      std::memory_order_relaxed);
  return co_servicethrows2(std::move(p_foo));
}
#endif // FOLLY_HAS_COROUTINES

void apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::async_tm_servicethrows2(
    apache::thrift::HandlerCallbackPtr<::apache::thrift::ServerStream<::cpp2::StreamItem>> callback, std::unique_ptr<::cpp2::StreamItem> p_foo) {
  // It's possible the coroutine versions will delegate to a future-based
  // version. If that happens, we need the RequestParams arguments to be
  // available to the future through the thread-local backchannel, so we create
  // a RAII object that sets up RequestParams and clears them on destruction.
  apache::thrift::detail::si::AsyncTmPrep asyncTmPrep(this, callback.get());
#if FOLLY_HAS_COROUTINES
determineInvocationType:
#endif // FOLLY_HAS_COROUTINES
  auto invocationType =
      __fbthrift_invocation_servicethrows2.load(std::memory_order_relaxed);
  try {
    switch (invocationType) {
      case apache::thrift::detail::si::InvocationType::AsyncTm: {
#if FOLLY_HAS_COROUTINES
        __fbthrift_invocation_servicethrows2.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::CoroParam,
            std::memory_order_relaxed);
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_servicethrows2(params, std::move(p_foo));
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
#else // FOLLY_HAS_COROUTINES
        __fbthrift_invocation_servicethrows2.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::Future,
            std::memory_order_relaxed);
        [[fallthrough]];
#endif // FOLLY_HAS_COROUTINES
      }
      case apache::thrift::detail::si::InvocationType::Future: {
        auto fut = future_servicethrows2(std::move(p_foo));
        apache::thrift::detail::si::async_tm_future(
            std::move(callback), std::move(fut));
        return;
      }
      case apache::thrift::detail::si::InvocationType::SemiFuture: {
        auto fut = semifuture_servicethrows2(std::move(p_foo));
        apache::thrift::detail::si::async_tm_semifuture(
            std::move(callback), std::move(fut));
        return;
      }
#if FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::CoroParam: {
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_servicethrows2(params, std::move(p_foo));
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
      case apache::thrift::detail::si::InvocationType::Coro: {
        auto task = co_servicethrows2(std::move(p_foo));
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
#endif // FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::Sync: {
        callback->result(sync_servicethrows2(std::move(p_foo)));
        return;
      }
      default: {
        folly::assume_unreachable();
      }
    }
#if FOLLY_HAS_COROUTINES
  } catch (apache::thrift::detail::si::UnimplementedCoroMethod& ex) {
    std::tie(p_foo) = std::move(ex).restoreArgs<std::unique_ptr<::cpp2::StreamItem> /*foo*/>();
    goto determineInvocationType;
#endif // FOLLY_HAS_COROUTINES
  } catch (...) {
    callback->exception(std::current_exception());
  }
}
//
// End of Method 'servicethrows2'
//

//
// Method 'boththrows'
//

::apache::thrift::ServerStream<::cpp2::StreamItem> apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::boththrows(std::unique_ptr<::cpp2::StreamItem> /*foo*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("boththrows");
}

::apache::thrift::ServerStream<::cpp2::StreamItem> apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::sync_boththrows(std::unique_ptr<::cpp2::StreamItem> p_foo) {
  return boththrows(std::move(p_foo));
}

folly::SemiFuture<::apache::thrift::ServerStream<::cpp2::StreamItem>>
apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::semifuture_boththrows(std::unique_ptr<::cpp2::StreamItem> p_foo) {
  auto expected{apache::thrift::detail::si::InvocationType::SemiFuture};
  __fbthrift_invocation_boththrows.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Sync,
      std::memory_order_relaxed);
  return sync_boththrows(std::move(p_foo));
}

folly::Future<::apache::thrift::ServerStream<::cpp2::StreamItem>>
apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::future_boththrows(std::unique_ptr<::cpp2::StreamItem> p_foo) {
  auto expected{apache::thrift::detail::si::InvocationType::Future};
  __fbthrift_invocation_boththrows.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::SemiFuture,
      std::memory_order_relaxed);
  return apache::thrift::detail::si::future(
      semifuture_boththrows(std::move(p_foo)),
      getInternalKeepAlive());
}

#if FOLLY_HAS_COROUTINES
folly::coro::Task<::apache::thrift::ServerStream<::cpp2::StreamItem>>
apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::co_boththrows(std::unique_ptr<::cpp2::StreamItem> p_foo) {
  auto expected{apache::thrift::detail::si::InvocationType::Coro};
  __fbthrift_invocation_boththrows.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Future,
      std::memory_order_relaxed);
  folly::throw_exception(apache::thrift::detail::si::UnimplementedCoroMethod::
                             withCapturedArgs<std::unique_ptr<::cpp2::StreamItem> /*foo*/>(std::move(p_foo)));
}

folly::coro::Task<::apache::thrift::ServerStream<::cpp2::StreamItem>> apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::co_boththrows(
    apache::thrift::RequestParams /* params */, std::unique_ptr<::cpp2::StreamItem> p_foo) {
  auto expected{apache::thrift::detail::si::InvocationType::CoroParam};
  __fbthrift_invocation_boththrows.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Coro,
      std::memory_order_relaxed);
  return co_boththrows(std::move(p_foo));
}
#endif // FOLLY_HAS_COROUTINES

void apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::async_tm_boththrows(
    apache::thrift::HandlerCallbackPtr<::apache::thrift::ServerStream<::cpp2::StreamItem>> callback, std::unique_ptr<::cpp2::StreamItem> p_foo) {
  // It's possible the coroutine versions will delegate to a future-based
  // version. If that happens, we need the RequestParams arguments to be
  // available to the future through the thread-local backchannel, so we create
  // a RAII object that sets up RequestParams and clears them on destruction.
  apache::thrift::detail::si::AsyncTmPrep asyncTmPrep(this, callback.get());
#if FOLLY_HAS_COROUTINES
determineInvocationType:
#endif // FOLLY_HAS_COROUTINES
  auto invocationType =
      __fbthrift_invocation_boththrows.load(std::memory_order_relaxed);
  try {
    switch (invocationType) {
      case apache::thrift::detail::si::InvocationType::AsyncTm: {
#if FOLLY_HAS_COROUTINES
        __fbthrift_invocation_boththrows.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::CoroParam,
            std::memory_order_relaxed);
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_boththrows(params, std::move(p_foo));
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
#else // FOLLY_HAS_COROUTINES
        __fbthrift_invocation_boththrows.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::Future,
            std::memory_order_relaxed);
        [[fallthrough]];
#endif // FOLLY_HAS_COROUTINES
      }
      case apache::thrift::detail::si::InvocationType::Future: {
        auto fut = future_boththrows(std::move(p_foo));
        apache::thrift::detail::si::async_tm_future(
            std::move(callback), std::move(fut));
        return;
      }
      case apache::thrift::detail::si::InvocationType::SemiFuture: {
        auto fut = semifuture_boththrows(std::move(p_foo));
        apache::thrift::detail::si::async_tm_semifuture(
            std::move(callback), std::move(fut));
        return;
      }
#if FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::CoroParam: {
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_boththrows(params, std::move(p_foo));
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
      case apache::thrift::detail::si::InvocationType::Coro: {
        auto task = co_boththrows(std::move(p_foo));
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
#endif // FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::Sync: {
        callback->result(sync_boththrows(std::move(p_foo)));
        return;
      }
      default: {
        folly::assume_unreachable();
      }
    }
#if FOLLY_HAS_COROUTINES
  } catch (apache::thrift::detail::si::UnimplementedCoroMethod& ex) {
    std::tie(p_foo) = std::move(ex).restoreArgs<std::unique_ptr<::cpp2::StreamItem> /*foo*/>();
    goto determineInvocationType;
#endif // FOLLY_HAS_COROUTINES
  } catch (...) {
    callback->exception(std::current_exception());
  }
}
//
// End of Method 'boththrows'
//

//
// Method 'responseandstreamstreamthrows'
//

::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t> apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::responseandstreamstreamthrows(::std::int32_t /*foo*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("responseandstreamstreamthrows");
}

::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t> apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::sync_responseandstreamstreamthrows(::std::int32_t p_foo) {
  return responseandstreamstreamthrows(p_foo);
}

folly::SemiFuture<::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>>
apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::semifuture_responseandstreamstreamthrows(::std::int32_t p_foo) {
  auto expected{apache::thrift::detail::si::InvocationType::SemiFuture};
  __fbthrift_invocation_responseandstreamstreamthrows.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Sync,
      std::memory_order_relaxed);
  return sync_responseandstreamstreamthrows(p_foo);
}

folly::Future<::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>>
apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::future_responseandstreamstreamthrows(::std::int32_t p_foo) {
  auto expected{apache::thrift::detail::si::InvocationType::Future};
  __fbthrift_invocation_responseandstreamstreamthrows.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::SemiFuture,
      std::memory_order_relaxed);
  return apache::thrift::detail::si::future(
      semifuture_responseandstreamstreamthrows(p_foo),
      getInternalKeepAlive());
}

#if FOLLY_HAS_COROUTINES
folly::coro::Task<::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>>
apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::co_responseandstreamstreamthrows(::std::int32_t p_foo) {
  auto expected{apache::thrift::detail::si::InvocationType::Coro};
  __fbthrift_invocation_responseandstreamstreamthrows.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Future,
      std::memory_order_relaxed);
  folly::throw_exception(apache::thrift::detail::si::UnimplementedCoroMethod::
                             withCapturedArgs<::std::int32_t /*foo*/>(p_foo));
}

folly::coro::Task<::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>> apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::co_responseandstreamstreamthrows(
    apache::thrift::RequestParams /* params */, ::std::int32_t p_foo) {
  auto expected{apache::thrift::detail::si::InvocationType::CoroParam};
  __fbthrift_invocation_responseandstreamstreamthrows.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Coro,
      std::memory_order_relaxed);
  return co_responseandstreamstreamthrows(p_foo);
}
#endif // FOLLY_HAS_COROUTINES

void apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::async_tm_responseandstreamstreamthrows(
    apache::thrift::HandlerCallbackPtr<::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>> callback, ::std::int32_t p_foo) {
  // It's possible the coroutine versions will delegate to a future-based
  // version. If that happens, we need the RequestParams arguments to be
  // available to the future through the thread-local backchannel, so we create
  // a RAII object that sets up RequestParams and clears them on destruction.
  apache::thrift::detail::si::AsyncTmPrep asyncTmPrep(this, callback.get());
#if FOLLY_HAS_COROUTINES
determineInvocationType:
#endif // FOLLY_HAS_COROUTINES
  auto invocationType =
      __fbthrift_invocation_responseandstreamstreamthrows.load(std::memory_order_relaxed);
  try {
    switch (invocationType) {
      case apache::thrift::detail::si::InvocationType::AsyncTm: {
#if FOLLY_HAS_COROUTINES
        __fbthrift_invocation_responseandstreamstreamthrows.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::CoroParam,
            std::memory_order_relaxed);
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_responseandstreamstreamthrows(params, p_foo);
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
#else // FOLLY_HAS_COROUTINES
        __fbthrift_invocation_responseandstreamstreamthrows.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::Future,
            std::memory_order_relaxed);
        [[fallthrough]];
#endif // FOLLY_HAS_COROUTINES
      }
      case apache::thrift::detail::si::InvocationType::Future: {
        auto fut = future_responseandstreamstreamthrows(p_foo);
        apache::thrift::detail::si::async_tm_future(
            std::move(callback), std::move(fut));
        return;
      }
      case apache::thrift::detail::si::InvocationType::SemiFuture: {
        auto fut = semifuture_responseandstreamstreamthrows(p_foo);
        apache::thrift::detail::si::async_tm_semifuture(
            std::move(callback), std::move(fut));
        return;
      }
#if FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::CoroParam: {
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_responseandstreamstreamthrows(params, p_foo);
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
      case apache::thrift::detail::si::InvocationType::Coro: {
        auto task = co_responseandstreamstreamthrows(p_foo);
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
#endif // FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::Sync: {
        callback->result(sync_responseandstreamstreamthrows(p_foo));
        return;
      }
      default: {
        folly::assume_unreachable();
      }
    }
#if FOLLY_HAS_COROUTINES
  } catch (apache::thrift::detail::si::UnimplementedCoroMethod& ex) {
    std::tie(p_foo) = std::move(ex).restoreArgs<::std::int32_t /*foo*/>();
    goto determineInvocationType;
#endif // FOLLY_HAS_COROUTINES
  } catch (...) {
    callback->exception(std::current_exception());
  }
}
//
// End of Method 'responseandstreamstreamthrows'
//

//
// Method 'responseandstreamservicethrows'
//

::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t> apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::responseandstreamservicethrows(::std::int32_t /*foo*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("responseandstreamservicethrows");
}

::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t> apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::sync_responseandstreamservicethrows(::std::int32_t p_foo) {
  return responseandstreamservicethrows(p_foo);
}

folly::SemiFuture<::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>>
apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::semifuture_responseandstreamservicethrows(::std::int32_t p_foo) {
  auto expected{apache::thrift::detail::si::InvocationType::SemiFuture};
  __fbthrift_invocation_responseandstreamservicethrows.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Sync,
      std::memory_order_relaxed);
  return sync_responseandstreamservicethrows(p_foo);
}

folly::Future<::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>>
apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::future_responseandstreamservicethrows(::std::int32_t p_foo) {
  auto expected{apache::thrift::detail::si::InvocationType::Future};
  __fbthrift_invocation_responseandstreamservicethrows.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::SemiFuture,
      std::memory_order_relaxed);
  return apache::thrift::detail::si::future(
      semifuture_responseandstreamservicethrows(p_foo),
      getInternalKeepAlive());
}

#if FOLLY_HAS_COROUTINES
folly::coro::Task<::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>>
apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::co_responseandstreamservicethrows(::std::int32_t p_foo) {
  auto expected{apache::thrift::detail::si::InvocationType::Coro};
  __fbthrift_invocation_responseandstreamservicethrows.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Future,
      std::memory_order_relaxed);
  folly::throw_exception(apache::thrift::detail::si::UnimplementedCoroMethod::
                             withCapturedArgs<::std::int32_t /*foo*/>(p_foo));
}

folly::coro::Task<::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>> apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::co_responseandstreamservicethrows(
    apache::thrift::RequestParams /* params */, ::std::int32_t p_foo) {
  auto expected{apache::thrift::detail::si::InvocationType::CoroParam};
  __fbthrift_invocation_responseandstreamservicethrows.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Coro,
      std::memory_order_relaxed);
  return co_responseandstreamservicethrows(p_foo);
}
#endif // FOLLY_HAS_COROUTINES

void apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::async_tm_responseandstreamservicethrows(
    apache::thrift::HandlerCallbackPtr<::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>> callback, ::std::int32_t p_foo) {
  // It's possible the coroutine versions will delegate to a future-based
  // version. If that happens, we need the RequestParams arguments to be
  // available to the future through the thread-local backchannel, so we create
  // a RAII object that sets up RequestParams and clears them on destruction.
  apache::thrift::detail::si::AsyncTmPrep asyncTmPrep(this, callback.get());
#if FOLLY_HAS_COROUTINES
determineInvocationType:
#endif // FOLLY_HAS_COROUTINES
  auto invocationType =
      __fbthrift_invocation_responseandstreamservicethrows.load(std::memory_order_relaxed);
  try {
    switch (invocationType) {
      case apache::thrift::detail::si::InvocationType::AsyncTm: {
#if FOLLY_HAS_COROUTINES
        __fbthrift_invocation_responseandstreamservicethrows.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::CoroParam,
            std::memory_order_relaxed);
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_responseandstreamservicethrows(params, p_foo);
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
#else // FOLLY_HAS_COROUTINES
        __fbthrift_invocation_responseandstreamservicethrows.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::Future,
            std::memory_order_relaxed);
        [[fallthrough]];
#endif // FOLLY_HAS_COROUTINES
      }
      case apache::thrift::detail::si::InvocationType::Future: {
        auto fut = future_responseandstreamservicethrows(p_foo);
        apache::thrift::detail::si::async_tm_future(
            std::move(callback), std::move(fut));
        return;
      }
      case apache::thrift::detail::si::InvocationType::SemiFuture: {
        auto fut = semifuture_responseandstreamservicethrows(p_foo);
        apache::thrift::detail::si::async_tm_semifuture(
            std::move(callback), std::move(fut));
        return;
      }
#if FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::CoroParam: {
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_responseandstreamservicethrows(params, p_foo);
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
      case apache::thrift::detail::si::InvocationType::Coro: {
        auto task = co_responseandstreamservicethrows(p_foo);
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
#endif // FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::Sync: {
        callback->result(sync_responseandstreamservicethrows(p_foo));
        return;
      }
      default: {
        folly::assume_unreachable();
      }
    }
#if FOLLY_HAS_COROUTINES
  } catch (apache::thrift::detail::si::UnimplementedCoroMethod& ex) {
    std::tie(p_foo) = std::move(ex).restoreArgs<::std::int32_t /*foo*/>();
    goto determineInvocationType;
#endif // FOLLY_HAS_COROUTINES
  } catch (...) {
    callback->exception(std::current_exception());
  }
}
//
// End of Method 'responseandstreamservicethrows'
//

//
// Method 'responseandstreamboththrows'
//

::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t> apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::responseandstreamboththrows(::std::int32_t /*foo*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("responseandstreamboththrows");
}

::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t> apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::sync_responseandstreamboththrows(::std::int32_t p_foo) {
  return responseandstreamboththrows(p_foo);
}

folly::SemiFuture<::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>>
apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::semifuture_responseandstreamboththrows(::std::int32_t p_foo) {
  auto expected{apache::thrift::detail::si::InvocationType::SemiFuture};
  __fbthrift_invocation_responseandstreamboththrows.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Sync,
      std::memory_order_relaxed);
  return sync_responseandstreamboththrows(p_foo);
}

folly::Future<::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>>
apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::future_responseandstreamboththrows(::std::int32_t p_foo) {
  auto expected{apache::thrift::detail::si::InvocationType::Future};
  __fbthrift_invocation_responseandstreamboththrows.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::SemiFuture,
      std::memory_order_relaxed);
  return apache::thrift::detail::si::future(
      semifuture_responseandstreamboththrows(p_foo),
      getInternalKeepAlive());
}

#if FOLLY_HAS_COROUTINES
folly::coro::Task<::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>>
apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::co_responseandstreamboththrows(::std::int32_t p_foo) {
  auto expected{apache::thrift::detail::si::InvocationType::Coro};
  __fbthrift_invocation_responseandstreamboththrows.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Future,
      std::memory_order_relaxed);
  folly::throw_exception(apache::thrift::detail::si::UnimplementedCoroMethod::
                             withCapturedArgs<::std::int32_t /*foo*/>(p_foo));
}

folly::coro::Task<::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>> apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::co_responseandstreamboththrows(
    apache::thrift::RequestParams /* params */, ::std::int32_t p_foo) {
  auto expected{apache::thrift::detail::si::InvocationType::CoroParam};
  __fbthrift_invocation_responseandstreamboththrows.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Coro,
      std::memory_order_relaxed);
  return co_responseandstreamboththrows(p_foo);
}
#endif // FOLLY_HAS_COROUTINES

void apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>::async_tm_responseandstreamboththrows(
    apache::thrift::HandlerCallbackPtr<::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>> callback, ::std::int32_t p_foo) {
  // It's possible the coroutine versions will delegate to a future-based
  // version. If that happens, we need the RequestParams arguments to be
  // available to the future through the thread-local backchannel, so we create
  // a RAII object that sets up RequestParams and clears them on destruction.
  apache::thrift::detail::si::AsyncTmPrep asyncTmPrep(this, callback.get());
#if FOLLY_HAS_COROUTINES
determineInvocationType:
#endif // FOLLY_HAS_COROUTINES
  auto invocationType =
      __fbthrift_invocation_responseandstreamboththrows.load(std::memory_order_relaxed);
  try {
    switch (invocationType) {
      case apache::thrift::detail::si::InvocationType::AsyncTm: {
#if FOLLY_HAS_COROUTINES
        __fbthrift_invocation_responseandstreamboththrows.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::CoroParam,
            std::memory_order_relaxed);
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_responseandstreamboththrows(params, p_foo);
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
#else // FOLLY_HAS_COROUTINES
        __fbthrift_invocation_responseandstreamboththrows.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::Future,
            std::memory_order_relaxed);
        [[fallthrough]];
#endif // FOLLY_HAS_COROUTINES
      }
      case apache::thrift::detail::si::InvocationType::Future: {
        auto fut = future_responseandstreamboththrows(p_foo);
        apache::thrift::detail::si::async_tm_future(
            std::move(callback), std::move(fut));
        return;
      }
      case apache::thrift::detail::si::InvocationType::SemiFuture: {
        auto fut = semifuture_responseandstreamboththrows(p_foo);
        apache::thrift::detail::si::async_tm_semifuture(
            std::move(callback), std::move(fut));
        return;
      }
#if FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::CoroParam: {
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_responseandstreamboththrows(params, p_foo);
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
      case apache::thrift::detail::si::InvocationType::Coro: {
        auto task = co_responseandstreamboththrows(p_foo);
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
#endif // FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::Sync: {
        callback->result(sync_responseandstreamboththrows(p_foo));
        return;
      }
      default: {
        folly::assume_unreachable();
      }
    }
#if FOLLY_HAS_COROUTINES
  } catch (apache::thrift::detail::si::UnimplementedCoroMethod& ex) {
    std::tie(p_foo) = std::move(ex).restoreArgs<::std::int32_t /*foo*/>();
    goto determineInvocationType;
#endif // FOLLY_HAS_COROUTINES
  } catch (...) {
    callback->exception(std::current_exception());
  }
}
//
// End of Method 'responseandstreamboththrows'
//

//
// End of Service Methods
//


namespace cpp2 {


std::string_view PubSubStreamingServiceAsyncProcessor::getServiceName() {
  return "PubSubStreamingService";
}

void PubSubStreamingServiceAsyncProcessor::getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) {
  ::apache::thrift::detail::md::ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>>::gen(response);
}

void PubSubStreamingServiceAsyncProcessor::processSerializedCompressedRequestWithMetadata(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  apache::thrift::detail::ap::process(this, iface_, std::move(req), std::move(serializedRequest), methodMetadata, protType, context, eb, tm);
}

void PubSubStreamingServiceAsyncProcessor::executeRequest(apache::thrift::ServerRequest&& request, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata) {
  apache::thrift::detail::ap::execute(this, std::move(request), apache::thrift::detail::ServerRequestHelper::protocol(request), methodMetadata);
}

const PubSubStreamingServiceAsyncProcessor::ProcessMap& PubSubStreamingServiceAsyncProcessor::getOwnProcessMap() {
  return kOwnProcessMap_;
}

const PubSubStreamingServiceAsyncProcessor::ProcessMap PubSubStreamingServiceAsyncProcessor::kOwnProcessMap_ {
  {"returnstream",
    {&PubSubStreamingServiceAsyncProcessor::setUpAndProcess_returnstream<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &PubSubStreamingServiceAsyncProcessor::setUpAndProcess_returnstream<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>,
     &PubSubStreamingServiceAsyncProcessor::executeRequest_returnstream<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &PubSubStreamingServiceAsyncProcessor::executeRequest_returnstream<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>}},
  {"streamthrows",
    {&PubSubStreamingServiceAsyncProcessor::setUpAndProcess_streamthrows<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &PubSubStreamingServiceAsyncProcessor::setUpAndProcess_streamthrows<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>,
     &PubSubStreamingServiceAsyncProcessor::executeRequest_streamthrows<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &PubSubStreamingServiceAsyncProcessor::executeRequest_streamthrows<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>}},
  {"servicethrows",
    {&PubSubStreamingServiceAsyncProcessor::setUpAndProcess_servicethrows<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &PubSubStreamingServiceAsyncProcessor::setUpAndProcess_servicethrows<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>,
     &PubSubStreamingServiceAsyncProcessor::executeRequest_servicethrows<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &PubSubStreamingServiceAsyncProcessor::executeRequest_servicethrows<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>}},
  {"servicethrows2",
    {&PubSubStreamingServiceAsyncProcessor::setUpAndProcess_servicethrows2<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &PubSubStreamingServiceAsyncProcessor::setUpAndProcess_servicethrows2<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>,
     &PubSubStreamingServiceAsyncProcessor::executeRequest_servicethrows2<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &PubSubStreamingServiceAsyncProcessor::executeRequest_servicethrows2<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>}},
  {"boththrows",
    {&PubSubStreamingServiceAsyncProcessor::setUpAndProcess_boththrows<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &PubSubStreamingServiceAsyncProcessor::setUpAndProcess_boththrows<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>,
     &PubSubStreamingServiceAsyncProcessor::executeRequest_boththrows<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &PubSubStreamingServiceAsyncProcessor::executeRequest_boththrows<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>}},
  {"responseandstreamstreamthrows",
    {&PubSubStreamingServiceAsyncProcessor::setUpAndProcess_responseandstreamstreamthrows<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &PubSubStreamingServiceAsyncProcessor::setUpAndProcess_responseandstreamstreamthrows<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>,
     &PubSubStreamingServiceAsyncProcessor::executeRequest_responseandstreamstreamthrows<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &PubSubStreamingServiceAsyncProcessor::executeRequest_responseandstreamstreamthrows<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>}},
  {"responseandstreamservicethrows",
    {&PubSubStreamingServiceAsyncProcessor::setUpAndProcess_responseandstreamservicethrows<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &PubSubStreamingServiceAsyncProcessor::setUpAndProcess_responseandstreamservicethrows<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>,
     &PubSubStreamingServiceAsyncProcessor::executeRequest_responseandstreamservicethrows<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &PubSubStreamingServiceAsyncProcessor::executeRequest_responseandstreamservicethrows<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>}},
  {"responseandstreamboththrows",
    {&PubSubStreamingServiceAsyncProcessor::setUpAndProcess_responseandstreamboththrows<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &PubSubStreamingServiceAsyncProcessor::setUpAndProcess_responseandstreamboththrows<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>,
     &PubSubStreamingServiceAsyncProcessor::executeRequest_responseandstreamboththrows<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &PubSubStreamingServiceAsyncProcessor::executeRequest_responseandstreamboththrows<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>}},
};

apache::thrift::ServiceRequestInfoMap const& PubSubStreamingServiceServiceInfoHolder::requestInfoMap() const {
  static folly::Indestructible<apache::thrift::ServiceRequestInfoMap> requestInfoMap{staticRequestInfoMap()};
  return *requestInfoMap;
}

apache::thrift::ServiceRequestInfoMap PubSubStreamingServiceServiceInfoHolder::staticRequestInfoMap() {
  apache::thrift::ServiceRequestInfoMap requestInfoMap = {
  {"returnstream",
    { false,
     apache::thrift::RpcKind::SINGLE_REQUEST_STREAMING_RESPONSE,
     "PubSubStreamingService.returnstream",
     std::nullopt,
     apache::thrift::concurrency::NORMAL,
     std::nullopt}},
  {"streamthrows",
    { false,
     apache::thrift::RpcKind::SINGLE_REQUEST_STREAMING_RESPONSE,
     "PubSubStreamingService.streamthrows",
     std::nullopt,
     apache::thrift::concurrency::NORMAL,
     std::nullopt}},
  {"servicethrows",
    { false,
     apache::thrift::RpcKind::SINGLE_REQUEST_STREAMING_RESPONSE,
     "PubSubStreamingService.servicethrows",
     std::nullopt,
     apache::thrift::concurrency::NORMAL,
     std::nullopt}},
  {"servicethrows2",
    { false,
     apache::thrift::RpcKind::SINGLE_REQUEST_STREAMING_RESPONSE,
     "PubSubStreamingService.servicethrows2",
     std::nullopt,
     apache::thrift::concurrency::NORMAL,
     std::nullopt}},
  {"boththrows",
    { false,
     apache::thrift::RpcKind::SINGLE_REQUEST_STREAMING_RESPONSE,
     "PubSubStreamingService.boththrows",
     std::nullopt,
     apache::thrift::concurrency::NORMAL,
     std::nullopt}},
  {"responseandstreamstreamthrows",
    { false,
     apache::thrift::RpcKind::SINGLE_REQUEST_STREAMING_RESPONSE,
     "PubSubStreamingService.responseandstreamstreamthrows",
     std::nullopt,
     apache::thrift::concurrency::NORMAL,
     std::nullopt}},
  {"responseandstreamservicethrows",
    { false,
     apache::thrift::RpcKind::SINGLE_REQUEST_STREAMING_RESPONSE,
     "PubSubStreamingService.responseandstreamservicethrows",
     std::nullopt,
     apache::thrift::concurrency::NORMAL,
     std::nullopt}},
  {"responseandstreamboththrows",
    { false,
     apache::thrift::RpcKind::SINGLE_REQUEST_STREAMING_RESPONSE,
     "PubSubStreamingService.responseandstreamboththrows",
     std::nullopt,
     apache::thrift::concurrency::NORMAL,
     std::nullopt}},
  };

  return requestInfoMap;
}
} // namespace cpp2

namespace apache::thrift::detail {
}
