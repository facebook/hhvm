{
    "preamble": "",
    "consts": [
    ],
    "funcs": [
        {
            "name": "gd_info",
            "desc": "Gets information about the version and capabilities of the installed GD library.",
            "flags": [
            ],
            "return": {
                "type": "VariantMap"
            },
            "args": [
            ]
        },
        {
            "name": "getimagesize",
            "desc": "The getimagesize() function will determine the size of any given image file and return the dimensions along with the file type and a height\/width text string to be used inside a normal HTML IMG tag and the correspondant HTTP content type.\n\ngetimagesize() can also return some more information in imageinfo parameter. Note that JPC and JP2 are capable of having components with different bit depths. In this case, the value for \"bits\" is the highest bit depth encountered. Also, JP2 files may contain multiple JPEG 2000 codestreams. In this case, getimagesize() returns the values for the first codestream it encounters in the root of the file. The information about icons are retrieved from the icon with the highest bitrate.",
            "flags": [
            ],
            "return": {
                "type": "Variant"
            },
            "args": [
                {
                    "name": "filename",
                    "type": "String",
                    "desc": "This parameter specifies the file you wish to retrieve information about. It can reference a local file or (configuration permitting) a remote file using one of the supported streams."
                },
                {
                    "name": "imageinfo",
                    "type": "Variant",
                    "value": "null",
                    "desc": null,
                    "ref": true
                }
            ]
        },
        {
            "name": "image_type_to_extension",
            "desc": "Returns the extension for the given IMAGETYPE_XXX constant.",
            "flags": [
            ],
            "return": {
                "type": "String",
                "desc": "A string with the extension corresponding to the given image type."
            },
            "args": [
                {
                    "name": "imagetype",
                    "type": "Int32",
                    "desc": "One of the IMAGETYPE_XXX constant."
                },
                {
                    "name": "include_dot",
                    "type": "Boolean",
                    "value": "true",
                    "desc": "Whether to prepend a dot to the extension or not. Default to TRUE."
                }
            ]
        },
        {
            "name": "image_type_to_mime_type",
            "desc": "The image_type_to_mime_type() function will determine the Mime-Type for an IMAGETYPE constant.",
            "flags": [
            ],
            "return": {
                "type": "String",
                "desc": "The returned values are as follows Returned values Constants imagetype Returned value IMAGETYPE_GIF image\/gif IMAGETYPE_JPEG image\/jpeg IMAGETYPE_PNG image\/png IMAGETYPE_SWF application\/x-shockwave-flash IMAGETYPE_PSD image\/psd IMAGETYPE_BMP image\/bmp IMAGETYPE_TIFF_II (intel byte order) image\/tiff IMAGETYPE_TIFF_MM (motorola byte order) image\/tiff IMAGETYPE_JPC application\/octet-stream IMAGETYPE_JP2 image\/jp2 IMAGETYPE_JPX application\/octet-stream IMAGETYPE_JB2 application\/octet-stream IMAGETYPE_SWC application\/x-shockwave-flash IMAGETYPE_IFF image\/iff IMAGETYPE_WBMP image\/vnd.wap.wbmp IMAGETYPE_XBM image\/xbm IMAGETYPE_ICO image\/vnd.microsoft.icon"
            },
            "args": [
                {
                    "name": "imagetype",
                    "type": "Int32",
                    "desc": "One of the IMAGETYPE_XXX constants."
                }
            ]
        },
        {
            "name": "image2wbmp",
            "desc": "image2wbmp() outputs or save a WBMP version of the given image.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "filename",
                    "type": "String",
                    "value": "null_string",
                    "desc": "Path to the saved file. If not given, the raw image stream will be outputted directly."
                },
                {
                    "name": "threshold",
                    "type": "Int32",
                    "value": "-1",
                    "desc": "Threshold value, between 0 and 255 (inclusive)."
                }
            ]
        },
        {
            "name": "imagealphablending",
            "desc": "imagealphablending() allows for two different modes of drawing on truecolor images. In blending mode, the alpha channel component of the color supplied to all drawing function, such as imagesetpixel() determines how much of the underlying color should be allowed to shine through. As a result, gd automatically blends the existing color at that point with the drawing color, and stores the result in the image. The resulting pixel is opaque. In non-blending mode, the drawing color is copied literally with its alpha channel information, replacing the destination pixel. Blending mode is not available when drawing on palette images.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "blendmode",
                    "type": "Boolean",
                    "desc": "Whether to enable the blending mode or not. On true color images the default value is TRUE otherwise the default value is FALSE"
                }
            ]
        },
        {
            "name": "imageantialias",
            "desc": "Activate the fast drawing antialiased methods for lines and wired polygons. It does not support alpha components. It works using a direct blend operation. It works only with truecolor images.\n\nThickness and styled are not supported.\n\nUsing antialiased primitives with transparent background color can end with some unexpected results. The blend method uses the background color as any other colors. The lack of alpha component support does not allow an alpha based antialiasing method.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "on",
                    "type": "Boolean",
                    "desc": "Whether to enable antialiasing or not."
                }
            ]
        },
        {
            "name": "imagearc",
            "desc": "imagearc() draws an arc of circle centered at the given coordinates.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "cx",
                    "type": "Int32",
                    "desc": "x-coordinate of the center."
                },
                {
                    "name": "cy",
                    "type": "Int32",
                    "desc": "y-coordinate of the center."
                },
                {
                    "name": "width",
                    "type": "Int32",
                    "desc": "The arc width."
                },
                {
                    "name": "height",
                    "type": "Int32",
                    "desc": "The arc height."
                },
                {
                    "name": "start",
                    "type": "Int32",
                    "desc": "The arc start angle, in degrees."
                },
                {
                    "name": "end",
                    "type": "Int32",
                    "desc": "The arc end angle, in degrees. 0\u00b0 is located at the three-o'clock position, and the arc is drawn clockwise."
                },
                {
                    "name": "color",
                    "type": "Int32",
                    "desc": "A color identifier created with imagecolorallocate()."
                }
            ]
        },
        {
            "name": "imagechar",
            "desc": "imagechar() draws the first character of c in the image identified by image with its upper-left at x,y (top left is 0, 0) with the color color.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "font",
                    "type": "Int32",
                    "desc": "Can be 1, 2, 3, 4, 5 for built-in fonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your own font identifiers registered with imageloadfont()."
                },
                {
                    "name": "x",
                    "type": "Int32",
                    "desc": "x-coordinate of the start."
                },
                {
                    "name": "y",
                    "type": "Int32",
                    "desc": "y-coordinate of the start."
                },
                {
                    "name": "c",
                    "type": "String",
                    "desc": "The character to draw."
                },
                {
                    "name": "color",
                    "type": "Int32",
                    "desc": "A color identifier created with imagecolorallocate()."
                }
            ]
        },
        {
            "name": "imagecharup",
            "desc": "Draws the character c vertically at the specified coordinate on the given image.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "font",
                    "type": "Int32",
                    "desc": "Can be 1, 2, 3, 4, 5 for built-in fonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your own font identifiers registered with imageloadfont()."
                },
                {
                    "name": "x",
                    "type": "Int32",
                    "desc": "x-coordinate of the start."
                },
                {
                    "name": "y",
                    "type": "Int32",
                    "desc": "y-coordinate of the start."
                },
                {
                    "name": "c",
                    "type": "String",
                    "desc": "The character to draw."
                },
                {
                    "name": "color",
                    "type": "Int32",
                    "desc": "A color identifier created with imagecolorallocate()."
                }
            ]
        },
        {
            "name": "imagecolorallocate",
            "desc": "Returns a color identifier representing the color composed of the given RGB components.\n\nimagecolorallocate() must be called to create each color that is to be used in the image represented by image.\n\nThe first call to imagecolorallocate() fills the background color in palette-based images - images created using imagecreate().\nThese parameters are integers between 0 and 255 or hexadecimals between 0x00 and 0xFF.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "A color identifier or FALSE if the allocation failed."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "red",
                    "type": "Int32",
                    "desc": "Value of red component."
                },
                {
                    "name": "green",
                    "type": "Int32",
                    "desc": "Value of green component."
                },
                {
                    "name": "blue",
                    "type": "Int32",
                    "desc": "Value of blue component."
                }
            ]
        },
        {
            "name": "imagecolorallocatealpha",
            "desc": "imagecolorallocatealpha() behaves identically to imagecolorallocate() with the addition of the transparency parameter alpha.\nThe colors parameters are integers between 0 and 255 or hexadecimals between 0x00 and 0xFF.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "A color identifier or FALSE if the allocation failed."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "red",
                    "type": "Int32",
                    "desc": "Value of red component."
                },
                {
                    "name": "green",
                    "type": "Int32",
                    "desc": "Value of green component."
                },
                {
                    "name": "blue",
                    "type": "Int32",
                    "desc": "Value of blue component."
                },
                {
                    "name": "alpha",
                    "type": "Int32",
                    "desc": "A value between 0 and 127. 0 indicates completely opaque while 127 indicates completely transparent."
                }
            ]
        },
        {
            "name": "imagecolorat",
            "desc": "Returns the index of the color of the pixel at the specified location in the image specified by image.\n\nIf PHP is compiled against GD library 2.0 or higher and the image is a truecolor image, this function returns the RGB value of that pixel as integer. Use bitshifting and masking to access the distinct red, green and blue component values:",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the index of the color."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "x",
                    "type": "Int32",
                    "desc": "x-coordinate of the point."
                },
                {
                    "name": "y",
                    "type": "Int32",
                    "desc": "y-coordinate of the point."
                }
            ]
        },
        {
            "name": "imagecolorclosest",
            "desc": "Returns the index of the color in the palette of the image which is \"closest\" to the specified RGB value.\n\nThe \"distance\" between the desired color and each color in the palette is calculated as if the RGB values represented points in three-dimensional space.\n\nIf you created the image from a file, only colors used in the image are resolved. Colors present only in the palette are not resolved.\nThe colors parameters are integers between 0 and 255 or hexadecimals between 0x00 and 0xFF.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the index of the closest color, in the palette of the image, to the specified one"
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "red",
                    "type": "Int32",
                    "desc": "Value of red component."
                },
                {
                    "name": "green",
                    "type": "Int32",
                    "desc": "Value of green component."
                },
                {
                    "name": "blue",
                    "type": "Int32",
                    "desc": "Value of blue component."
                }
            ]
        },
        {
            "name": "imagecolorclosestalpha",
            "desc": "Returns the index of the color in the palette of the image which is \"closest\" to the specified RGB value and alpha level.\nThe colors parameters are integers between 0 and 255 or hexadecimals between 0x00 and 0xFF.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the index of the closest color in the palette."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "red",
                    "type": "Int32",
                    "desc": "Value of red component."
                },
                {
                    "name": "green",
                    "type": "Int32",
                    "desc": "Value of green component."
                },
                {
                    "name": "blue",
                    "type": "Int32",
                    "desc": "Value of blue component."
                },
                {
                    "name": "alpha",
                    "type": "Int32",
                    "desc": "A value between 0 and 127. 0 indicates completely opaque while 127 indicates completely transparent."
                }
            ]
        },
        {
            "name": "imagecolorclosesthwb",
            "desc": "Get the index of the color which has the hue, white and blackness nearest the given color.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns an integer with the index of the color which has the hue, white and blackness nearest the given color."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "red",
                    "type": "Int32",
                    "desc": "Value of red component."
                },
                {
                    "name": "green",
                    "type": "Int32",
                    "desc": "Value of green component."
                },
                {
                    "name": "blue",
                    "type": "Int32",
                    "desc": "Value of blue component."
                }
            ]
        },
        {
            "name": "imagecolordeallocate",
            "desc": "De-allocates a color previously allocated with imagecolorallocate() or imagecolorallocatealpha().",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "color",
                    "type": "Int32",
                    "desc": "The color identifier."
                }
            ]
        },
        {
            "name": "imagecolorexact",
            "desc": "Returns the index of the specified color in the palette of the image.\n\nIf you created the image from a file, only colors used in the image are resolved. Colors present only in the palette are not resolved.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the index of the specified color in the palette, or -1 if the color does not exist."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "red",
                    "type": "Int32",
                    "desc": "Value of red component."
                },
                {
                    "name": "green",
                    "type": "Int32",
                    "desc": "Value of green component."
                },
                {
                    "name": "blue",
                    "type": "Int32",
                    "desc": "Value of blue component."
                }
            ]
        },
        {
            "name": "imagecolorexactalpha",
            "desc": "Returns the index of the specified color+alpha in the palette of the image.\nThe colors parameters are integers between 0 and 255 or hexadecimals between 0x00 and 0xFF.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the index of the specified color+alpha in the palette of the image, or -1 if the color does not exist in the image's palette."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "red",
                    "type": "Int32",
                    "desc": "Value of red component."
                },
                {
                    "name": "green",
                    "type": "Int32",
                    "desc": "Value of green component."
                },
                {
                    "name": "blue",
                    "type": "Int32",
                    "desc": "Value of blue component."
                },
                {
                    "name": "alpha",
                    "type": "Int32",
                    "desc": "A value between 0 and 127. 0 indicates completely opaque while 127 indicates completely transparent."
                }
            ]
        },
        {
            "name": "imagecolormatch",
            "desc": "Makes the colors of the palette version of an image more closely match the true color version.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image1",
                    "type": "Resource",
                    "desc": "A truecolor image link resource."
                },
                {
                    "name": "image2",
                    "type": "Resource",
                    "desc": "A palette image link resource pointing to an image that has the same size as image1."
                }
            ]
        },
        {
            "name": "imagecolorresolve",
            "desc": "This function is guaranteed to return a color index for a requested color, either the exact color or the closest possible alternative.\n\nIf you created the image from a file, only colors used in the image are resolved. Colors present only in the palette are not resolved.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns a color index."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "red",
                    "type": "Int32",
                    "desc": "Value of red component."
                },
                {
                    "name": "green",
                    "type": "Int32",
                    "desc": "Value of green component."
                },
                {
                    "name": "blue",
                    "type": "Int32",
                    "desc": "Value of blue component."
                }
            ]
        },
        {
            "name": "imagecolorresolvealpha",
            "desc": "This function is guaranteed to return a color index for a requested color, either the exact color or the closest possible alternative.\nThe colors parameters are integers between 0 and 255 or hexadecimals between 0x00 and 0xFF.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns a color index."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "red",
                    "type": "Int32",
                    "desc": "Value of red component."
                },
                {
                    "name": "green",
                    "type": "Int32",
                    "desc": "Value of green component."
                },
                {
                    "name": "blue",
                    "type": "Int32",
                    "desc": "Value of blue component."
                },
                {
                    "name": "alpha",
                    "type": "Int32",
                    "desc": "A value between 0 and 127. 0 indicates completely opaque while 127 indicates completely transparent."
                }
            ]
        },
        {
            "name": "imagecolorset",
            "desc": "This sets the specified index in the palette to the specified color. This is useful for creating flood-fill-like effects in palleted images without the overhead of performing the actual flood-fill.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "No value is returned."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "index",
                    "type": "Int32",
                    "desc": "An index in the palette."
                },
                {
                    "name": "red",
                    "type": "Int32",
                    "desc": "Value of red component."
                },
                {
                    "name": "green",
                    "type": "Int32",
                    "desc": "Value of green component."
                },
                {
                    "name": "blue",
                    "type": "Int32",
                    "desc": "Value of blue component."
                }
            ]
        },
        {
            "name": "imagecolorsforindex",
            "desc": "Gets the color for a specified index.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns an associative array with red, green, blue and alpha keys that contain the appropriate values for the specified color index."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "index",
                    "type": "Int32",
                    "desc": "The color index."
                }
            ]
        },
        {
            "name": "imagecolorstotal",
            "desc": "Returns the number of colors in an image palette.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the number of colors in the specified image's palette or 0 for truecolor images."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatefromgif()."
                }
            ]
        },
        {
            "name": "imagecolortransparent",
            "desc": "Sets the transparent color in the given image.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "The identifier of the new (or current, if none is specified) transparent color is returned."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "color",
                    "type": "Int32",
                    "value": "-1",
                    "desc": "A color identifier created with imagecolorallocate()."
                }
            ]
        },
        {
            "name": "imageconvolution",
            "desc": "Applies a convolution matrix on the image, using the given coefficient and offset.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "matrix",
                    "type": "Int64Map",
                    "desc": "A 3x3 matrix: an array of three arrays of three floats."
                },
                {
                    "name": "div",
                    "type": "Double",
                    "desc": "The divisor of the result of the convolution, used for normalization."
                },
                {
                    "name": "offset",
                    "type": "Double",
                    "desc": "Color offset."
                }
            ]
        },
        {
            "name": "imagecopy",
            "desc": "Copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y with a width of src_w and a height of src_h. The portion defined will be copied onto the x,y coordinates, dst_x and dst_y.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "dst_im",
                    "type": "Resource",
                    "desc": "Destination image link resource."
                },
                {
                    "name": "src_im",
                    "type": "Resource",
                    "desc": "Source image link resource."
                },
                {
                    "name": "dst_x",
                    "type": "Int32",
                    "desc": "x-coordinate of destination point."
                },
                {
                    "name": "dst_y",
                    "type": "Int32",
                    "desc": "y-coordinate of destination point."
                },
                {
                    "name": "src_x",
                    "type": "Int32",
                    "desc": "x-coordinate of source point."
                },
                {
                    "name": "src_y",
                    "type": "Int32",
                    "desc": "y-coordinate of source point."
                },
                {
                    "name": "src_w",
                    "type": "Int32",
                    "desc": "Source width."
                },
                {
                    "name": "src_h",
                    "type": "Int32",
                    "desc": "Source height."
                }
            ]
        },
        {
            "name": "imagecopymerge",
            "desc": "Copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y with a width of src_w and a height of src_h. The portion defined will be copied onto the x,y coordinates, dst_x and dst_y.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "dst_im",
                    "type": "Resource",
                    "desc": "Destination image link resource."
                },
                {
                    "name": "src_im",
                    "type": "Resource",
                    "desc": "Source image link resource."
                },
                {
                    "name": "dst_x",
                    "type": "Int32",
                    "desc": "x-coordinate of destination point."
                },
                {
                    "name": "dst_y",
                    "type": "Int32",
                    "desc": "y-coordinate of destination point."
                },
                {
                    "name": "src_x",
                    "type": "Int32",
                    "desc": "x-coordinate of source point."
                },
                {
                    "name": "src_y",
                    "type": "Int32",
                    "desc": "y-coordinate of source point."
                },
                {
                    "name": "src_w",
                    "type": "Int32",
                    "desc": "Source width."
                },
                {
                    "name": "src_h",
                    "type": "Int32",
                    "desc": "Source height."
                },
                {
                    "name": "pct",
                    "type": "Int32",
                    "desc": "The two images will be merged according to pct which can range from 0 to 100. When pct = 0, no action is taken, when 100 this function behaves identically to imagecopy() for pallete images, while it implements alpha transparency for true colour images."
                }
            ]
        },
        {
            "name": "imagecopymergegray",
            "desc": "imagecopymergegray() copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y with a width of src_w and a height of src_h. The portion defined will be copied onto the x,y coordinates, dst_x and dst_y.\n\nThis function is identical to imagecopymerge() except that when merging it preserves the hue of the source by converting the destination pixels to gray scale before the copy operation.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "dst_im",
                    "type": "Resource",
                    "desc": "Destination image link resource."
                },
                {
                    "name": "src_im",
                    "type": "Resource",
                    "desc": "Source image link resource."
                },
                {
                    "name": "dst_x",
                    "type": "Int32",
                    "desc": "x-coordinate of destination point."
                },
                {
                    "name": "dst_y",
                    "type": "Int32",
                    "desc": "y-coordinate of destination point."
                },
                {
                    "name": "src_x",
                    "type": "Int32",
                    "desc": "x-coordinate of source point."
                },
                {
                    "name": "src_y",
                    "type": "Int32",
                    "desc": "y-coordinate of source point."
                },
                {
                    "name": "src_w",
                    "type": "Int32",
                    "desc": "Source width."
                },
                {
                    "name": "src_h",
                    "type": "Int32",
                    "desc": "Source height."
                },
                {
                    "name": "pct",
                    "type": "Int32",
                    "desc": "The src_im will be changed to grayscale according to pct where 0 is fully grayscale and 100 is unchanged. When pct = 100 this function behaves identically to imagecopy() for pallete images, while it implements alpha transparency for true colour images."
                }
            ]
        },
        {
            "name": "imagecopyresampled",
            "desc": "imagecopyresampled() copies a rectangular portion of one image to another image, smoothly interpolating pixel values so that, in particular, reducing the size of an image still retains a great deal of clarity.\n\nIn other words, imagecopyresampled() will take an rectangular area from src_image of width src_w and height src_h at position (src_x,src_y) and place it in a rectangular area of dst_image of width dst_w and height dst_h at position (dst_x,dst_y).\n\nIf the source and destination coordinates and width and heights differ, appropriate stretching or shrinking of the image fragment will be performed. The coordinates refer to the upper left corner. This function can be used to copy regions within the same image (if dst_image is the same as src_image) but if the regions overlap the results will be unpredictable.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "dst_im",
                    "type": "Resource",
                    "desc": "Destination image link resource."
                },
                {
                    "name": "src_im",
                    "type": "Resource",
                    "desc": "Source image link resource."
                },
                {
                    "name": "dst_x",
                    "type": "Int32",
                    "desc": "x-coordinate of destination point."
                },
                {
                    "name": "dst_y",
                    "type": "Int32",
                    "desc": "y-coordinate of destination point."
                },
                {
                    "name": "src_x",
                    "type": "Int32",
                    "desc": "x-coordinate of source point."
                },
                {
                    "name": "src_y",
                    "type": "Int32",
                    "desc": "y-coordinate of source point."
                },
                {
                    "name": "dst_w",
                    "type": "Int32",
                    "desc": "Destination width."
                },
                {
                    "name": "dst_h",
                    "type": "Int32",
                    "desc": "Destination height."
                },
                {
                    "name": "src_w",
                    "type": "Int32",
                    "desc": "Source width."
                },
                {
                    "name": "src_h",
                    "type": "Int32",
                    "desc": "Source height."
                }
            ]
        },
        {
            "name": "imagecopyresized",
            "desc": "imagecopyresized() copies a rectangular portion of one image to another image. dst_image is the destination image, src_image is the source image identifier.\n\nIn other words, imagecopyresized() will take an rectangular area from src_image of width src_w and height src_h at position (src_x,src_y) and place it in a rectangular area of dst_image of width dst_w and height dst_h at position (dst_x,dst_y).\n\nIf the source and destination coordinates and width and heights differ, appropriate stretching or shrinking of the image fragment will be performed. The coordinates refer to the upper left corner. This function can be used to copy regions within the same image (if dst_image is the same as src_image) but if the regions overlap the results will be unpredictable.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "dst_im",
                    "type": "Resource",
                    "desc": "Destination image link resource."
                },
                {
                    "name": "src_im",
                    "type": "Resource",
                    "desc": "Source image link resource."
                },
                {
                    "name": "dst_x",
                    "type": "Int32",
                    "desc": "x-coordinate of destination point."
                },
                {
                    "name": "dst_y",
                    "type": "Int32",
                    "desc": "y-coordinate of destination point."
                },
                {
                    "name": "src_x",
                    "type": "Int32",
                    "desc": "x-coordinate of source point."
                },
                {
                    "name": "src_y",
                    "type": "Int32",
                    "desc": "y-coordinate of source point."
                },
                {
                    "name": "dst_w",
                    "type": "Int32",
                    "desc": "Destination width."
                },
                {
                    "name": "dst_h",
                    "type": "Int32",
                    "desc": "Destination height."
                },
                {
                    "name": "src_w",
                    "type": "Int32",
                    "desc": "Source width."
                },
                {
                    "name": "src_h",
                    "type": "Int32",
                    "desc": "Source height."
                }
            ]
        },
        {
            "name": "imagecreate",
            "desc": "imagecreate() returns an image identifier representing a blank image of specified size.\n\nWe recommend the use of imagecreatetruecolor().",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns an image resource identifier on success, FALSE on errors."
            },
            "args": [
                {
                    "name": "width",
                    "type": "Int32",
                    "desc": "The image width."
                },
                {
                    "name": "height",
                    "type": "Int32",
                    "desc": "The image height."
                }
            ]
        },
        {
            "name": "imagecreatefromgd2part",
            "desc": "Create a new image from a given part of GD2 file or URL. TipA URL can be used as a filename with this function if the fopen wrappers have been enabled. See fopen() for more details on how to specify the filename. See the List of Supported Protocols\/Wrappers for links to information about what abilities the various wrappers have, notes on their usage, and information on any predefined variables they may provide.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns an image resource identifier on success, FALSE on errors."
            },
            "args": [
                {
                    "name": "filename",
                    "type": "String",
                    "desc": "Path to the GD2 image."
                },
                {
                    "name": "srcx",
                    "type": "Int32",
                    "desc": "x-coordinate of source point."
                },
                {
                    "name": "srcy",
                    "type": "Int32",
                    "desc": "y-coordinate of source point."
                },
                {
                    "name": "width",
                    "type": "Int32",
                    "desc": "Source width."
                },
                {
                    "name": "height",
                    "type": "Int32",
                    "desc": "Source height."
                }
            ]
        },
        {
            "name": "imagecreatefromgd",
            "desc": "Create a new image from GD file or URL. TipA URL can be used as a filename with this function if the fopen wrappers have been enabled. See fopen() for more details on how to specify the filename. See the List of Supported Protocols\/Wrappers for links to information about what abilities the various wrappers have, notes on their usage, and information on any predefined variables they may provide.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns an image resource identifier on success, FALSE on errors."
            },
            "args": [
                {
                    "name": "filename",
                    "type": "String",
                    "desc": "Path to the GD file."
                }
            ]
        },
        {
            "name": "imagecreatefromgd2",
            "desc": "Create a new image from GD2 file or URL. TipA URL can be used as a filename with this function if the fopen wrappers have been enabled. See fopen() for more details on how to specify the filename. See the List of Supported Protocols\/Wrappers for links to information about what abilities the various wrappers have, notes on their usage, and information on any predefined variables they may provide.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns an image resource identifier on success, FALSE on errors."
            },
            "args": [
                {
                    "name": "filename",
                    "type": "String",
                    "desc": "Path to the GD2 image."
                }
            ]
        },
        {
            "name": "imagecreatefromgif",
            "desc": "imagecreatefromgif() returns an image identifier representing the image obtained from the given filename. TipA URL can be used as a filename with this function if the fopen wrappers have been enabled. See fopen() for more details on how to specify the filename. See the List of Supported Protocols\/Wrappers for links to information about what abilities the various wrappers have, notes on their usage, and information on any predefined variables they may provide.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns an image resource identifier on success, FALSE on errors."
            },
            "args": [
                {
                    "name": "filename",
                    "type": "String",
                    "desc": "Path to the GIF image."
                }
            ]
        },
        {
            "name": "imagecreatefromjpeg",
            "desc": "imagecreatefromjpeg() returns an image identifier representing the image obtained from the given filename. TipA URL can be used as a filename with this function if the fopen wrappers have been enabled. See fopen() for more details on how to specify the filename. See the List of Supported Protocols\/Wrappers for links to information about what abilities the various wrappers have, notes on their usage, and information on any predefined variables they may provide.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns an image resource identifier on success, FALSE on errors."
            },
            "args": [
                {
                    "name": "filename",
                    "type": "String",
                    "desc": "Path to the JPEG image."
                }
            ]
        },
        {
            "name": "imagecreatefrompng",
            "desc": "imagecreatefrompng() returns an image identifier representing the image obtained from the given filename. TipA URL can be used as a filename with this function if the fopen wrappers have been enabled. See fopen() for more details on how to specify the filename. See the List of Supported Protocols\/Wrappers for links to information about what abilities the various wrappers have, notes on their usage, and information on any predefined variables they may provide.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns an image resource identifier on success, FALSE on errors."
            },
            "args": [
                {
                    "name": "filename",
                    "type": "String",
                    "desc": "Path to the PNG image."
                }
            ]
        },
        {
            "name": "imagecreatefromstring",
            "desc": "imagecreatefromstring() returns an image identifier representing the image obtained from the given data. These types will be automatically detected if your build of PHP supports them: JPEG, PNG, GIF, WBMP, and GD2.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "An image resource will be returned on success. FALSE is returned if the image type is unsupported, the data is not in a recognised format, or the image is corrupt and cannot be loaded."
            },
            "args": [
                {
                    "name": "data",
                    "type": "String",
                    "desc": "A string containing the image data."
                }
            ]
        },
        {
            "name": "imagecreatefromwbmp",
            "desc": "imagecreatefromwbmp() returns an image identifier representing the image obtained from the given filename. TipA URL can be used as a filename with this function if the fopen wrappers have been enabled. See fopen() for more details on how to specify the filename. See the List of Supported Protocols\/Wrappers for links to information about what abilities the various wrappers have, notes on their usage, and information on any predefined variables they may provide.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns an image resource identifier on success, FALSE on errors."
            },
            "args": [
                {
                    "name": "filename",
                    "type": "String",
                    "desc": "Path to the WBMP image."
                }
            ]
        },
        {
            "name": "imagecreatefromxbm",
            "desc": "imagecreatefromxbm() returns an image identifier representing the image obtained from the given filename. TipA URL can be used as a filename with this function if the fopen wrappers have been enabled. See fopen() for more details on how to specify the filename. See the List of Supported Protocols\/Wrappers for links to information about what abilities the various wrappers have, notes on their usage, and information on any predefined variables they may provide.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns an image resource identifier on success, FALSE on errors."
            },
            "args": [
                {
                    "name": "filename",
                    "type": "String",
                    "desc": "Path to the XBM image."
                }
            ]
        },
        {
            "name": "imagecreatefromxpm",
            "desc": "imagecreatefromxpm() returns an image identifier representing the image obtained from the given filename. TipA URL can be used as a filename with this function if the fopen wrappers have been enabled. See fopen() for more details on how to specify the filename. See the List of Supported Protocols\/Wrappers for links to information about what abilities the various wrappers have, notes on their usage, and information on any predefined variables they may provide.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns an image resource identifier on success, FALSE on errors."
            },
            "args": [
                {
                    "name": "filename",
                    "type": "String",
                    "desc": "Path to the XPM image."
                }
            ]
        },
        {
            "name": "imagecreatetruecolor",
            "desc": "imagecreatetruecolor() returns an image identifier representing a black image of the specified size.\n\nDepending on your PHP and GD versions this function is defined or not. With PHP 4.0.6 through 4.1.x this function always exists if the GD module is loaded, but calling it without GD2 being installed PHP will issue a fatal error and exit. With PHP 4.2.x this behaviour is different in issuing a warning instead of an error. Other versions only define this function, if the correct GD version is installed.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns an image resource identifier on success, FALSE on errors."
            },
            "args": [
                {
                    "name": "width",
                    "type": "Int32",
                    "desc": "Image width."
                },
                {
                    "name": "height",
                    "type": "Int32",
                    "desc": "Image height."
                }
            ]
        },
        {
            "name": "imagedashedline",
            "desc": "This function is deprecated. Use combination of imagesetstyle() and imageline() instead.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Always returns true"
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "x1",
                    "type": "Int32",
                    "desc": "Upper left x coordinate."
                },
                {
                    "name": "y1",
                    "type": "Int32",
                    "desc": "Upper left y coordinate 0, 0 is the top left corner of the image."
                },
                {
                    "name": "x2",
                    "type": "Int32",
                    "desc": "Bottom right x coordinate."
                },
                {
                    "name": "y2",
                    "type": "Int32",
                    "desc": "Bottom right y coordinate."
                },
                {
                    "name": "color",
                    "type": "Int32",
                    "desc": "The fill color. A color identifier created with imagecolorallocate()."
                }
            ]
        },
        {
            "name": "imagedestroy",
            "desc": "imagedestroy() frees any memory associated with image image.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                }
            ]
        },
        {
            "name": "imageellipse",
            "desc": "Draws an ellipse centered at the specified coordinates.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "cx",
                    "type": "Int32",
                    "desc": "x-coordinate of the center."
                },
                {
                    "name": "cy",
                    "type": "Int32",
                    "desc": "y-coordinate of the center."
                },
                {
                    "name": "width",
                    "type": "Int32",
                    "desc": "The ellipse width."
                },
                {
                    "name": "height",
                    "type": "Int32",
                    "desc": "The ellipse height."
                },
                {
                    "name": "color",
                    "type": "Int32",
                    "desc": "The color of the ellipse. A color identifier created with imagecolorallocate()."
                }
            ]
        },
        {
            "name": "imagefill",
            "desc": "Performs a flood fill starting at the given coordinate (top left is 0, 0) with the given color in the image.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "x",
                    "type": "Int32",
                    "desc": "x-coordinate of start point."
                },
                {
                    "name": "y",
                    "type": "Int32",
                    "desc": "y-coordinate of start point."
                },
                {
                    "name": "color",
                    "type": "Int32",
                    "desc": "The fill color. A color identifier created with imagecolorallocate()."
                }
            ]
        },
        {
            "name": "imagefilledarc",
            "desc": "Draws a partial arc centered at the specified coordinate in the given image.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "cx",
                    "type": "Int32",
                    "desc": "x-coordinate of the center."
                },
                {
                    "name": "cy",
                    "type": "Int32",
                    "desc": "y-coordinate of the center."
                },
                {
                    "name": "width",
                    "type": "Int32",
                    "desc": "The arc width."
                },
                {
                    "name": "height",
                    "type": "Int32",
                    "desc": "The arc height."
                },
                {
                    "name": "start",
                    "type": "Int32",
                    "desc": "The arc start angle, in degrees."
                },
                {
                    "name": "end",
                    "type": "Int32",
                    "desc": "The arc end angle, in degrees. 0\u00b0 is located at the three-o'clock position, and the arc is drawn clockwise."
                },
                {
                    "name": "color",
                    "type": "Int32",
                    "desc": "A color identifier created with imagecolorallocate()."
                },
                {
                    "name": "style",
                    "type": "Int32",
                    "desc": "A bitwise OR of the following possibilities: IMG_ARC_PIE IMG_ARC_CHORD IMG_ARC_NOFILL IMG_ARC_EDGED IMG_ARC_PIE and IMG_ARC_CHORD are mutually exclusive; IMG_ARC_CHORD just connects the starting and ending angles with a straight line, while IMG_ARC_PIE produces a rounded edge. IMG_ARC_NOFILL indicates that the arc or chord should be outlined, not filled. IMG_ARC_EDGED, used together with IMG_ARC_NOFILL, indicates that the beginning and ending angles should be connected to the center - this is a good way to outline (rather than fill) a 'pie slice'."
                }
            ]
        },
        {
            "name": "imagefilledellipse",
            "desc": "Draws an ellipse centered at the specified coordinate on the given image.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "cx",
                    "type": "Int32",
                    "desc": "x-coordinate of the center."
                },
                {
                    "name": "cy",
                    "type": "Int32",
                    "desc": "y-coordinate of the center."
                },
                {
                    "name": "width",
                    "type": "Int32",
                    "desc": "The ellipse width."
                },
                {
                    "name": "height",
                    "type": "Int32",
                    "desc": "The ellipse height."
                },
                {
                    "name": "color",
                    "type": "Int32",
                    "desc": "The fill color. A color identifier created with imagecolorallocate()."
                }
            ]
        },
        {
            "name": "imagefilledpolygon",
            "desc": "imagefilledpolygon() creates a filled polygon in the given image.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "points",
                    "type": "VariantVec",
                    "desc": "An array containing the x and y coordinates of the polygons vertices consecutively."
                },
                {
                    "name": "num_points",
                    "type": "Int32",
                    "desc": "Total number of vertices, which must be at least 3."
                },
                {
                    "name": "color",
                    "type": "Int32",
                    "desc": "A color identifier created with imagecolorallocate()."
                }
            ]
        },
        {
            "name": "imagefilledrectangle",
            "desc": "Creates a rectangle filled with color in the given image starting at point 1 and ending at point 2. 0, 0 is the top left corner of the image.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "x1",
                    "type": "Int32",
                    "desc": "x-coordinate for point 1."
                },
                {
                    "name": "y1",
                    "type": "Int32",
                    "desc": "y-coordinate for point 1."
                },
                {
                    "name": "x2",
                    "type": "Int32",
                    "desc": "x-coordinate for point 2."
                },
                {
                    "name": "y2",
                    "type": "Int32",
                    "desc": "y-coordinate for point 2."
                },
                {
                    "name": "color",
                    "type": "Int32",
                    "desc": "The fill color. A color identifier created with imagecolorallocate()."
                }
            ]
        },
        {
            "name": "imagefilltoborder",
            "desc": "imagefilltoborder() performs a flood fill whose border color is defined by border. The starting point for the fill is x, y (top left is 0, 0) and the region is filled with color color.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "x",
                    "type": "Int32",
                    "desc": "x-coordinate of start."
                },
                {
                    "name": "y",
                    "type": "Int32",
                    "desc": "y-coordinate of start."
                },
                {
                    "name": "border",
                    "type": "Int32",
                    "desc": "The border color. A color identifier created with imagecolorallocate()."
                },
                {
                    "name": "color",
                    "type": "Int32",
                    "desc": "The fill color. A color identifier created with imagecolorallocate()."
                }
            ]
        },
        {
            "name": "imagefilter",
            "desc": "imagefilter() applies the given filter filtertype on the image.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "filtertype",
                    "type": "Int32",
                    "desc": "filtertype can be one of the following: IMG_FILTER_NEGATE: Reverses all colors of the image. IMG_FILTER_GRAYSCALE: Converts the image into grayscale. IMG_FILTER_BRIGHTNESS: Changes the brightness of the image. Use arg1 to set the level of brightness. IMG_FILTER_CONTRAST: Changes the contrast of the image. Use arg1 to set the level of contrast. IMG_FILTER_COLORIZE: Like IMG_FILTER_GRAYSCALE, except you can specify the color. Use arg1, arg2 and arg3 in the form of red, blue, green and arg4 for the alpha channel. The range for each color is 0 to 255. IMG_FILTER_EDGEDETECT: Uses edge detection to highlight the edges in the image. IMG_FILTER_EMBOSS: Embosses the image. IMG_FILTER_GAUSSIAN_BLUR: Blurs the image using the Gaussian method. IMG_FILTER_SELECTIVE_BLUR: Blurs the image. IMG_FILTER_MEAN_REMOVAL: Uses mean removal to achieve a \"sketchy\" effect. IMG_FILTER_SMOOTH: Makes the image smoother. Use arg1 to set the level of smoothness. IMG_FILTER_PIXELATE: Applies pixelation effect to the image, use arg1 to set the block size and arg2 to set the pixelation effect mode."
                },
                {
                    "name": "arg1",
                    "type": "Int32",
                    "value": "0",
                    "desc": "IMG_FILTER_BRIGHTNESS: Brightness level. IMG_FILTER_CONTRAST: Contrast level. IMG_FILTER_COLORIZE: Value of red component. IMG_FILTER_SMOOTH: Smoothness level. IMG_FILTER_PIXELATE: Block size in pixels."
                },
                {
                    "name": "arg2",
                    "type": "Int32",
                    "value": "0",
                    "desc": "IMG_FILTER_COLORIZE: Value of green component. IMG_FILTER_PIXELATE: Whether to use advanced pixelation effect or not (defaults to FALSE)."
                },
                {
                    "name": "arg3",
                    "type": "Int32",
                    "value": "0",
                    "desc": "IMG_FILTER_COLORIZE: Value of blue component."
                },
                {
                    "name": "arg4",
                    "type": "Int32",
                    "value": "0",
                    "desc": "IMG_FILTER_COLORIZE: Alpha channel, A value between 0 and 127. 0 indicates completely opaque while 127 indicates completely transparent."
                }
            ]
        },
        {
            "name": "imagefontheight",
            "desc": "Returns the pixel height of a character in the specified font.",
            "flags": [
            ],
            "return": {
                "type": "Int64",
                "desc": "Returns the height of the pixel."
            },
            "args": [
                {
                    "name": "font",
                    "type": "Int32",
                    "desc": "Can be 1, 2, 3, 4, 5 for built-in fonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your own font identifiers registered with imageloadfont()."
                }
            ]
        },
        {
            "name": "imagefontwidth",
            "desc": "Returns the pixel width of a character in font.",
            "flags": [
            ],
            "return": {
                "type": "Int64",
                "desc": "Returns the width of the pixel"
            },
            "args": [
                {
                    "name": "font",
                    "type": "Int32",
                    "desc": "Can be 1, 2, 3, 4, 5 for built-in fonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your own font identifiers registered with imageloadfont()."
                }
            ]
        },
        {
            "name": "imageftbbox",
            "desc": "This function calculates and returns the bounding box in pixels for a FreeType text.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "imageftbbox() returns an array with 8 elements representing four points making the bounding box of the text: 0 lower left corner, X position 1 lower left corner, Y position 2 lower right corner, X position 3 lower right corner, Y position 4 upper right corner, X position 5 upper right corner, Y position 6 upper left corner, X position 7 upper left corner, Y position\n\nThe points are relative to the text regardless of the angle, so \"upper left\" means in the top left-hand corner seeing the text horizontally."
            },
            "args": [
                {
                    "name": "size",
                    "type": "Double",
                    "desc": "The font size. Depending on your version of GD, this should be specified as the pixel size (GD1) or point size (GD2)."
                },
                {
                    "name": "angle",
                    "type": "Double",
                    "desc": "Angle in degrees in which text will be measured."
                },
                {
                    "name": "font_file",
                    "type": "String",
                    "desc": "The name of the TrueType font file (can be a URL). Depending on which version of the GD library that PHP is using, it may attempt to search for files that do not begin with a leading '\/' by appending '.ttf' to the filename and searching along a library-defined font path."
                },
                {
                    "name": "text",
                    "type": "String",
                    "desc": "The string to be measured."
                },
                {
                    "name": "extrainfo",
                    "type": "VariantMap",
                    "value": "null",
                    "desc": "Possible array indexes for extrainfo Key Type Meaning linespacing float Defines drawing linespacing"
                }
            ]
        },
        {
            "name": "imagefttext",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "This function returns an array defining the four points of the box, starting in the lower left and moving counter-clockwise: 0 lower left x-coordinate 1 lower left y-coordinate 2 lower right x-coordinate 3 lower right y-coordinate 4 upper right x-coordinate 5 upper right y-coordinate 6 upper left x-coordinate 7 upper left y-coordinate"
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "size",
                    "type": "Double",
                    "desc": "The font size to use in points."
                },
                {
                    "name": "angle",
                    "type": "Double",
                    "desc": "The angle in degrees, with 0 degrees being left-to-right reading text. Higher values represent a counter-clockwise rotation. For example, a value of 90 would result in bottom-to-top reading text."
                },
                {
                    "name": "x",
                    "type": "Int32",
                    "desc": "The coordinates given by x and y will define the basepoint of the first character (roughly the lower-left corner of the character). This is different from the imagestring(), where x and y define the upper-left corner of the first character. For example, \"top left\" is 0, 0."
                },
                {
                    "name": "y",
                    "type": "Int32",
                    "desc": "The y-ordinate. This sets the position of the fonts baseline, not the very bottom of the character."
                },
                {
                    "name": "col",
                    "type": "Int32",
                    "desc": "The index of the desired color for the text, see imagecolorexact()."
                },
                {
                    "name": "font_file",
                    "type": "String",
                    "desc": "The path to the TrueType font you wish to use.\n\nDepending on which version of the GD library PHP is using, when fontfile does not begin with a leading \/ then .ttf will be appended to the filename and the library will attempt to search for that filename along a library-defined font path.\n\nWhen using versions of the GD library lower than 2.0.18, a space character, rather than a semicolon, was used as the 'path separator' for different font files. Unintentional use of this feature will result in the warning message: Warning: Could not find\/open font. For these affected versions, the only solution is moving the font to a path which does not contain spaces.\n\nIn many cases where a font resides in the same directory as the script using it the following trick will alleviate any include problems."
                },
                {
                    "name": "text",
                    "type": "String",
                    "desc": "Text to be inserted into image."
                },
                {
                    "name": "extrainfo",
                    "type": "VariantMap",
                    "value": "null",
                    "desc": "Possible array indexes for extrainfo Key Type Meaning linespacing float Defines drawing linespacing"
                }
            ]
        },
        {
            "name": "imagegammacorrect",
            "desc": "Applies gamma correction to the given gd image given an input and an output gamma.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "inputgamma",
                    "type": "Double",
                    "desc": "The input gamma."
                },
                {
                    "name": "outputgamma",
                    "type": "Double",
                    "desc": "The output gamma."
                }
            ]
        },
        {
            "name": "imagegd2",
            "desc": "Outputs a GD2 image to the given filename.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "filename",
                    "type": "String",
                    "value": "null_string",
                    "desc": "The path to save the file to. If not set or NULL, the raw image stream will be outputted directly."
                },
                {
                    "name": "chunk_size",
                    "type": "Int32",
                    "value": "0",
                    "desc": "Chunk size."
                },
                {
                    "name": "type",
                    "type": "Int32",
                    "value": "0",
                    "desc": "Either IMG_GD2_RAW or IMG_GD2_COMPRESSED. Default is IMG_GD2_RAW."
                }
            ]
        },
        {
            "name": "imagegd",
            "desc": "Outputs a GD image to the given filename.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "filename",
                    "type": "String",
                    "value": "null_string",
                    "desc": "The path to save the file to. If not set or NULL, the raw image stream will be outputted directly."
                }
            ]
        },
        {
            "name": "imagegif",
            "desc": "imagegif() creates the GIF file in filename from the image image. The image argument is the return from the imagecreate() or imagecreatefrom* function.\n\nThe image format will be GIF87a unless the image has been made transparent with imagecolortransparent(), in which case the image format will be GIF89a.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "filename",
                    "type": "String",
                    "value": "null_string",
                    "desc": "The path to save the file to. If not set or NULL, the raw image stream will be outputted directly."
                }
            ]
        },
        {
            "name": "imagegrabscreen",
            "desc": "Grabs a screenshot of the whole screen.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns an image resource identifier on success, FALSE on failure."
            },
            "args": [
            ]
        },
        {
            "name": "imagegrabwindow",
            "desc": "Grabs a window or its client area using a windows handle (HWND property in COM instance)",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns an image resource identifier on success, FALSE on failure."
            },
            "args": [
                {
                    "name": "window",
                    "type": "Int32",
                    "desc": "The HWND window ID."
                },
                {
                    "name": "client_area",
                    "type": "Int32",
                    "value": "0",
                    "desc": "Include the client area of the application window."
                }
            ]
        },
        {
            "name": "imageinterlace",
            "desc": "imageinterlace() turns the interlace bit on or off.\n\nIf the interlace bit is set and the image is used as a JPEG image, the image is created as a progressive JPEG.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns 1 if the interlace bit is set for the image, 0 otherwise."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "interlace",
                    "type": "Int32",
                    "value": "0",
                    "desc": "If non-zero, the image will be interlaced, else the interlace bit is turned off."
                }
            ]
        },
        {
            "name": "imageistruecolor",
            "desc": "imageistruecolor() finds whether the image image is a truecolor image.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE if the image is truecolor, FALSE otherwise."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                }
            ]
        },
        {
            "name": "imagejpeg",
            "desc": "imagejpeg() creates a JPEG file from the given image.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "filename",
                    "type": "String",
                    "value": "null_string",
                    "desc": "The path to save the file to. If not set or NULL, the raw image stream will be outputted directly.\n\nTo skip this argument in order to provide the quality parameter, use NULL."
                },
                {
                    "name": "quality",
                    "type": "Int32",
                    "value": "-1",
                    "desc": "quality is optional, and ranges from 0 (worst quality, smaller file) to 100 (best quality, biggest file). The default is the default IJG quality value (about 75)."
                }
            ]
        },
        {
            "name": "imagelayereffect",
            "desc": "Set the alpha blending flag to use the bundled libgd layering effects.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "effect",
                    "type": "Int32",
                    "desc": "One of the following constants: IMG_EFFECT_REPLACE Use pixel replacement (equivalent of passing TRUE to imagealphablending())"
                }
            ]
        },
        {
            "name": "imageline",
            "desc": "Draws a line between the two given points.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "x1",
                    "type": "Int32",
                    "desc": "x-coordinate for first point."
                },
                {
                    "name": "y1",
                    "type": "Int32",
                    "desc": "y-coordinate for first point."
                },
                {
                    "name": "x2",
                    "type": "Int32",
                    "desc": "x-coordinate for second point."
                },
                {
                    "name": "y2",
                    "type": "Int32",
                    "desc": "y-coordinate for second point."
                },
                {
                    "name": "color",
                    "type": "Int32",
                    "desc": "The line color. A color identifier created with imagecolorallocate()."
                }
            ]
        },
        {
            "name": "imageloadfont",
            "desc": "imageloadfont() loads a user-defined bitmap and returns its identifier.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "The font identifier which is always bigger than 5 to avoid conflicts with built-in fonts or FALSE on errors."
            },
            "args": [
                {
                    "name": "file",
                    "type": "String",
                    "desc": "The font file format is currently binary and architecture dependent. This means you should generate the font files on the same type of CPU as the machine you are running PHP on.\n\nFont file format byte position C data type description byte 0-3 int number of characters in the font byte 4-7 int value of first character in the font (often 32 for space) byte 8-11 int pixel width of each character byte 12-15 int pixel height of each character byte 16- char array with character data, one byte per pixel in each character, for a total of (nchars*width*height) bytes."
                }
            ]
        },
        {
            "name": "imagepalettecopy",
            "desc": "imagepalettecopy() copies the palette from the source image to the destination image.",
            "flags": [
            ],
            "return": {
                "type": null,
                "desc": "No value is returned."
            },
            "args": [
                {
                    "name": "destination",
                    "type": "Resource",
                    "desc": "The destination image resource."
                },
                {
                    "name": "source",
                    "type": "Resource",
                    "desc": "The source image resource."
                }
            ]
        },
        {
            "name": "imagepng",
            "desc": "Outputs or saves a PNG image from the given image.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "filename",
                    "type": "String",
                    "value": "null_string",
                    "desc": "The path to save the file to. If not set or NULL, the raw image stream will be outputted directly.\n\nNULL is invalid if the quality and filters arguments are not used."
                },
                {
                    "name": "quality",
                    "type": "Int32",
                    "value": "-1",
                    "desc": "Compression level: from 0 (no compression) to 9."
                },
                {
                    "name": "filters",
                    "type": "Int32",
                    "value": "-1",
                    "desc": "Allows reducing the PNG file size. It is a bitmask field which may be set to any combination of the PNG_FILTER_XXX constants. PNG_NO_FILTER or PNG_ALL_FILTERS may also be used to respectively disable or activate all filters."
                }
            ]
        },
        {
            "name": "imagepolygon",
            "desc": "imagepolygon() creates a polygon in the given image.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "points",
                    "type": "VariantVec",
                    "desc": "An array containing the polygon's vertices, e.g.: points[0] = x0 points[1] = y0 points[2] = x1 points[3] = y1"
                },
                {
                    "name": "num_points",
                    "type": "Int32",
                    "desc": "Total number of points (vertices)."
                },
                {
                    "name": "color",
                    "type": "Int32",
                    "desc": "A color identifier created with imagecolorallocate()."
                }
            ]
        },
        {
            "name": "imagepsbbox",
            "desc": "Gives the bounding box of a text rectangle using PostScript Type1 fonts.\n\nThe bounding box is calculated using information available from character metrics, and unfortunately tends to differ slightly from the results achieved by actually rasterizing the text. If the angle is 0 degrees, you can expect the text to need 1 pixel more to every direction.",
            "flags": [
            ],
            "return": {
                "type": "Int64Vec",
                "desc": "Returns an array containing the following elements: 0 left x-coordinate 1 upper y-coordinate 2 right x-coordinate 3 lower y-coordinate"
            },
            "args": [
                {
                    "name": "text",
                    "type": "String",
                    "desc": "The text to be written."
                },
                {
                    "name": "font",
                    "type": "Int32",
                    "desc": "A font resource, returned by imagepsloadfont()."
                },
                {
                    "name": "size",
                    "type": "Int32",
                    "desc": "size is expressed in pixels."
                },
                {
                    "name": "space",
                    "type": "Int32",
                    "value": "0",
                    "desc": "Allows you to change the default value of a space in a font. This amount is added to the normal value and can also be negative. Expressed in character space units, where 1 unit is 1\/1000th of an em-square."
                },
                {
                    "name": "tightness",
                    "type": "Int32",
                    "value": "0",
                    "desc": "tightness allows you to control the amount of white space between characters. This amount is added to the normal character width and can also be negative. Expressed in character space units, where 1 unit is 1\/1000th of an em-square."
                },
                {
                    "name": "angle",
                    "type": "Double",
                    "value": "0.0",
                    "desc": "angle is in degrees."
                }
            ]
        },
        {
            "name": "imagepsencodefont",
            "desc": "Loads a character encoding vector from a file and changes the fonts encoding vector to it. As a PostScript fonts default vector lacks most of the character positions above 127, you'll definitely want to change this if you use an other language than English.\n\nIf you find yourself using this function all the time, a much better way to define the encoding is to set ps.default_encoding in the configuration file to point to the right encoding file and all fonts you load will automatically have the right encoding.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "font_index",
                    "type": "Resource",
                    "desc": "A font resource, returned by imagepsloadfont()."
                },
                {
                    "name": "encodingfile",
                    "type": "String",
                    "desc": "The exact format of this file is described in T1libs documentation. T1lib comes with two ready-to-use files, IsoLatin1.enc and IsoLatin2.enc."
                }
            ]
        },
        {
            "name": "imagepsextendfont",
            "desc": "Extend or condense a font (font_index), if the value of the extend parameter is less than one you will be condensing the font.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "font_index",
                    "type": "Int32",
                    "desc": "A font resource, returned by imagepsloadfont()."
                },
                {
                    "name": "extend",
                    "type": "Double",
                    "desc": "Extension value, must be greater than 0."
                }
            ]
        },
        {
            "name": "imagepsfreefont",
            "desc": "imagepsfreefont() frees memory used by a PostScript Type 1 font.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "fontindex",
                    "type": "Resource",
                    "desc": "A font resource, returned by imagepsloadfont()."
                }
            ]
        },
        {
            "name": "imagepsloadfont",
            "desc": "Load a PostScript Type 1 font from the given filename.",
            "flags": [
            ],
            "return": {
                "type": "Resource",
                "desc": "In the case everything went right, a valid font index will be returned and can be used for further purposes. Otherwise the function returns FALSE."
            },
            "args": [
                {
                    "name": "filename",
                    "type": "String",
                    "desc": "Path to the Postscript font file."
                }
            ]
        },
        {
            "name": "imagepsslantfont",
            "desc": "Slant a given font given.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "font_index",
                    "type": "Resource",
                    "desc": "A font resource, returned by imagepsloadfont()."
                },
                {
                    "name": "slant",
                    "type": "Double",
                    "desc": "Slant level."
                }
            ]
        },
        {
            "name": "imagepstext",
            "desc": "Draws a text on an image using PostScript Type1 fonts.\n\nRefer to PostScript documentation about fonts and their measuring system if you have trouble understanding how this works.",
            "flags": [
            ],
            "return": {
                "type": "StringVec",
                "desc": "This function returns an array containing the following elements: 0 lower left x-coordinate 1 lower left y-coordinate 2 upper right x-coordinate 3 upper right y-coordinate"
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "text",
                    "type": "String",
                    "desc": "The text to be written."
                },
                {
                    "name": "font",
                    "type": "Resource",
                    "desc": "A font resource, returned by imagepsloadfont()."
                },
                {
                    "name": "size",
                    "type": "Int32",
                    "desc": "size is expressed in pixels."
                },
                {
                    "name": "foreground",
                    "type": "Int32",
                    "desc": "The color in which the text will be painted."
                },
                {
                    "name": "background",
                    "type": "Int32",
                    "desc": "The color to which the text will try to fade in with antialiasing. No pixels with the color background are actually painted, so the background image does not need to be of solid color."
                },
                {
                    "name": "x",
                    "type": "Int32",
                    "desc": "x-coordinate for the lower-left corner of the first character."
                },
                {
                    "name": "y",
                    "type": "Int32",
                    "desc": "y-coordinate for the lower-left corner of the first character."
                },
                {
                    "name": "space",
                    "type": "Int32",
                    "value": "0",
                    "desc": "Allows you to change the default value of a space in a font. This amount is added to the normal value and can also be negative. Expressed in character space units, where 1 unit is 1\/1000th of an em-square."
                },
                {
                    "name": "tightness",
                    "type": "Int32",
                    "value": "0",
                    "desc": "tightness allows you to control the amount of white space between characters. This amount is added to the normal character width and can also be negative. Expressed in character space units, where 1 unit is 1\/1000th of an em-square."
                },
                {
                    "name": "angle",
                    "type": "Double",
                    "value": "0.0",
                    "desc": "angle is in degrees."
                },
                {
                    "name": "antialias_steps",
                    "type": "Int32",
                    "value": "0",
                    "desc": "Allows you to control the number of colours used for antialiasing text. Allowed values are 4 and 16. The higher value is recommended for text sizes lower than 20, where the effect in text quality is quite visible. With bigger sizes, use 4. It's less computationally intensive."
                }
            ]
        },
        {
            "name": "imagerectangle",
            "desc": "imagerectangle() creates a rectangle starting at the specified coordinates.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "x1",
                    "type": "Int32",
                    "desc": "Upper left x coordinate."
                },
                {
                    "name": "y1",
                    "type": "Int32",
                    "desc": "Upper left y coordinate 0, 0 is the top left corner of the image."
                },
                {
                    "name": "x2",
                    "type": "Int32",
                    "desc": "Bottom right x coordinate."
                },
                {
                    "name": "y2",
                    "type": "Int32",
                    "desc": "Bottom right y coordinate."
                },
                {
                    "name": "color",
                    "type": "Int32",
                    "desc": "A color identifier created with imagecolorallocate()."
                }
            ]
        },
        {
            "name": "imagerotate",
            "desc": "Rotates the image image using the given angle in degrees.\n\nThe center of rotation is the center of the image, and the rotated image may have different dimensions than the original image.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns an image resource for the rotated image, or FALSE on failure."
            },
            "args": [
                {
                    "name": "source_image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "angle",
                    "type": "Double",
                    "desc": "Rotation angle, in degrees."
                },
                {
                    "name": "bgd_color",
                    "type": "Int32",
                    "desc": "Specifies the color of the uncovered zone after the rotation"
                },
                {
                    "name": "ignore_transparent",
                    "type": "Int32",
                    "value": "0",
                    "desc": "If set and non-zero, transparent colors are ignored (otherwise kept)."
                }
            ]
        },
        {
            "name": "imagesavealpha",
            "desc": "imagesavealpha() sets the flag to attempt to save full alpha channel information (as opposed to single-color transparency) when saving PNG images.\n\nYou have to unset alphablending (imagealphablending($im, false)), to use it.\n\nAlpha channel is not supported by all browsers, if you have problem with your browser, try to load your script with an alpha channel compliant browser, e.g. latest Mozilla.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "saveflag",
                    "type": "Boolean",
                    "desc": "Whether to save the alpha channel or not. Default to FALSE."
                }
            ]
        },
        {
            "name": "imagesetbrush",
            "desc": "imagesetbrush() sets the brush image to be used by all line drawing functions (such as imageline() and imagepolygon()) when drawing with the special colors IMG_COLOR_BRUSHED or IMG_COLOR_STYLEDBRUSHED.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "brush",
                    "type": "Resource",
                    "desc": "An image resource."
                }
            ]
        },
        {
            "name": "imagesetpixel",
            "desc": "imagesetpixel() draws a pixel at the specified coordinate.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "x",
                    "type": "Int32",
                    "desc": "x-coordinate."
                },
                {
                    "name": "y",
                    "type": "Int32",
                    "desc": "y-coordinate."
                },
                {
                    "name": "color",
                    "type": "Int32",
                    "desc": "A color identifier created with imagecolorallocate()."
                }
            ]
        },
        {
            "name": "imagesetstyle",
            "desc": "imagesetstyle() sets the style to be used by all line drawing functions (such as imageline() and imagepolygon()) when drawing with the special color IMG_COLOR_STYLED or lines of images with color IMG_COLOR_STYLEDBRUSHED.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "style",
                    "type": "VariantMap",
                    "desc": "An array of pixel colors. You can use the IMG_COLOR_TRANSPARENT constant to add a transparent pixel."
                }
            ]
        },
        {
            "name": "imagesetthickness",
            "desc": "imagesetthickness() sets the thickness of the lines drawn when drawing rectangles, polygons, ellipses etc. etc. to thickness pixels.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "thickness",
                    "type": "Int32",
                    "desc": "Thickness, in pixels."
                }
            ]
        },
        {
            "name": "imagesettile",
            "desc": "imagesettile() sets the tile image to be used by all region filling functions (such as imagefill() and imagefilledpolygon()) when filling with the special color IMG_COLOR_TILED.\n\nA tile is an image used to fill an area with a repeated pattern. Any GD image can be used as a tile, and by setting the transparent color index of the tile image with imagecolortransparent(), a tile allows certain parts of the underlying area to shine through can be created.\n\nYou need not take special action when you are finished with a tile, but if you destroy the tile image, you must not use the IMG_COLOR_TILED color until you have set a new tile image!",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "tile",
                    "type": "Resource",
                    "desc": "The image resource to be used as a tile."
                }
            ]
        },
        {
            "name": "imagestring",
            "desc": "Draws a string at the given coordinates.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "font",
                    "type": "Int32",
                    "desc": "Can be 1, 2, 3, 4, 5 for built-in fonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your own font identifiers registered with imageloadfont()."
                },
                {
                    "name": "x",
                    "type": "Int32",
                    "desc": "x-coordinate of the upper left corner."
                },
                {
                    "name": "y",
                    "type": "Int32",
                    "desc": "y-coordinate of the upper left corner."
                },
                {
                    "name": "str",
                    "type": "String",
                    "desc": "The string to be written."
                },
                {
                    "name": "color",
                    "type": "Int32",
                    "desc": "A color identifier created with imagecolorallocate()."
                }
            ]
        },
        {
            "name": "imagestringup",
            "desc": "Draws a string vertically at the given coordinates.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "font",
                    "type": "Int32",
                    "desc": "Can be 1, 2, 3, 4, 5 for built-in fonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your own font identifiers registered with imageloadfont()."
                },
                {
                    "name": "x",
                    "type": "Int32",
                    "desc": "x-coordinate of the bottom left corner."
                },
                {
                    "name": "y",
                    "type": "Int32",
                    "desc": "y-coordinate of the bottom left corner."
                },
                {
                    "name": "str",
                    "type": "String",
                    "desc": "The string to be written."
                },
                {
                    "name": "color",
                    "type": "Int32",
                    "desc": "A color identifier created with imagecolorallocate()."
                }
            ]
        },
        {
            "name": "imagesx",
            "desc": "Returns the width of the given image resource.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Return the width of the image or FALSE on errors."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                }
            ]
        },
        {
            "name": "imagesy",
            "desc": "Returns the height of the given image resource.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Return the height of the image or FALSE on errors."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                }
            ]
        },
        {
            "name": "imagetruecolortopalette",
            "desc": "imagetruecolortopalette() converts a truecolor image to a palette image. The code for this function was originally drawn from the Independent JPEG Group library code, which is excellent. The code has been modified to preserve as much alpha channel information as possible in the resulting palette, in addition to preserving colors as well as possible. This does not work as well as might be hoped. It is usually best to simply produce a truecolor output image instead, which guarantees the highest output quality.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "dither",
                    "type": "Boolean",
                    "desc": "Indicates if the image should be dithered - if it is TRUE then dithering will be used which will result in a more speckled image but with better color approximation."
                },
                {
                    "name": "ncolors",
                    "type": "Int32",
                    "desc": "Sets the maximum number of colors that should be retained in the palette."
                }
            ]
        },
        {
            "name": "imagettfbbox",
            "desc": "This function calculates and returns the bounding box in pixels for a TrueType text.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "imagettfbbox() returns an array with 8 elements representing four points making the bounding box of the text on success and FALSE on error. key contents 0 lower left corner, X position 1 lower left corner, Y position 2 lower right corner, X position 3 lower right corner, Y position 4 upper right corner, X position 5 upper right corner, Y position 6 upper left corner, X position 7 upper left corner, Y position\n\nThe points are relative to the text regardless of the angle, so \"upper left\" means in the top left-hand corner seeing the text horizontally."
            },
            "args": [
                {
                    "name": "size",
                    "type": "Double",
                    "desc": "The font size. Depending on your version of GD, this should be specified as the pixel size (GD1) or point size (GD2)."
                },
                {
                    "name": "angle",
                    "type": "Double",
                    "desc": "Angle in degrees in which text will be measured."
                },
                {
                    "name": "fontfile",
                    "type": "String",
                    "desc": "The name of the TrueType font file (can be a URL). Depending on which version of the GD library that PHP is using, it may attempt to search for files that do not begin with a leading '\/' by appending '.ttf' to the filename and searching along a library-defined font path."
                },
                {
                    "name": "text",
                    "type": "String",
                    "desc": "The string to be measured."
                }
            ]
        },
        {
            "name": "imagettftext",
            "desc": "Writes the given text into the image using TrueType fonts.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns an array with 8 elements representing four points making the bounding box of the text. The order of the points is lower left, lower right, upper right, upper left. The points are relative to the text regardless of the angle, so \"upper left\" means in the top left-hand corner when you see the text horizontally. Returns FALSE on error."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "size",
                    "type": "Double",
                    "desc": "The font size. Depending on your version of GD, this should be specified as the pixel size (GD1) or point size (GD2)."
                },
                {
                    "name": "angle",
                    "type": "Double",
                    "desc": "The angle in degrees, with 0 degrees being left-to-right reading text. Higher values represent a counter-clockwise rotation. For example, a value of 90 would result in bottom-to-top reading text."
                },
                {
                    "name": "x",
                    "type": "Int32",
                    "desc": "The coordinates given by x and y will define the basepoint of the first character (roughly the lower-left corner of the character). This is different from the imagestring(), where x and y define the upper-left corner of the first character. For example, \"top left\" is 0, 0."
                },
                {
                    "name": "y",
                    "type": "Int32",
                    "desc": "The y-ordinate. This sets the position of the fonts baseline, not the very bottom of the character."
                },
                {
                    "name": "color",
                    "type": "Int32",
                    "desc": "The color index. Using the negative of a color index has the effect of turning off antialiasing. See imagecolorallocate()."
                },
                {
                    "name": "fontfile",
                    "type": "String",
                    "desc": "The path to the TrueType font you wish to use.\n\nDepending on which version of the GD library PHP is using, when fontfile does not begin with a leading \/ then .ttf will be appended to the filename and the library will attempt to search for that filename along a library-defined font path.\n\nWhen using versions of the GD library lower than 2.0.18, a space character, rather than a semicolon, was used as the 'path separator' for different font files. Unintentional use of this feature will result in the warning message: Warning: Could not find\/open font. For these affected versions, the only solution is moving the font to a path which does not contain spaces.\n\nIn many cases where a font resides in the same directory as the script using it the following trick will alleviate any include problems."
                },
                {
                    "name": "text",
                    "type": "String",
                    "desc": "The text string in UTF-8 encoding.\n\nMay include decimal numeric character references (of the form: &#8364;) to access characters in a font beyond position 127. The hexadecimal format (like &#xA9;) is supported. Strings in UTF-8 encoding can be passed directly.\n\nNamed entities, such as &copy;, are not supported. Consider using html_entity_decode() to decode these named entities into UTF-8 strings (html_entity_decode() supports this as of PHP 5.0.0).\n\nIf a character is used in the string which is not supported by the font, a hollow rectangle will replace the character."
                }
            ]
        },
        {
            "name": "imagetypes",
            "desc": "Returns the image types supported by the current PHP installation.",
            "flags": [
            ],
            "return": {
                "type": "Int64",
                "desc": "Returns a bit-field corresponding to the image formats supported by the version of GD linked into PHP. The following bits are returned, IMG_GIF | IMG_JPG | IMG_PNG | IMG_WBMP | IMG_XPM."
            },
            "args": [
            ]
        },
        {
            "name": "imagewbmp",
            "desc": "imagewbmp() outputs or save a WBMP version of the given image.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "filename",
                    "type": "String",
                    "value": "null_string",
                    "desc": "The path to save the file to. If not set or NULL, the raw image stream will be outputted directly."
                },
                {
                    "name": "foreground",
                    "type": "Int32",
                    "value": "-1",
                    "desc": "You can set the foreground color with this parameter by setting an identifier obtained from imagecolorallocate(). The default foreground color is black."
                }
            ]
        },
        {
            "name": "imagexbm",
            "desc": "Outputs or save an XBM version of the given image.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "image",
                    "type": "Resource",
                    "desc": "An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()."
                },
                {
                    "name": "filename",
                    "type": "String",
                    "value": "null_string",
                    "desc": "The path to save the file to. If not set or NULL, the raw image stream will be outputted directly."
                },
                {
                    "name": "foreground",
                    "type": "Int32",
                    "value": "-1",
                    "desc": "You can set the foreground color with this parameter by setting an identifier obtained from imagecolorallocate(). The default foreground color is black."
                }
            ]
        },
        {
            "name": "iptcembed",
            "desc": "Embeds binary IPTC data into a JPEG image.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "If success and spool flag is lower than 2 then the JPEG will not be returned as a string, FALSE on errors."
            },
            "args": [
                {
                    "name": "iptcdata",
                    "type": "String",
                    "desc": "The data to be written."
                },
                {
                    "name": "jpeg_file_name",
                    "type": "String",
                    "desc": "Path to the JPEG image."
                },
                {
                    "name": "spool",
                    "type": "Int32",
                    "value": "0",
                    "desc": "Spool flag. If the spool flag is over 2 then the JPEG will be returned as a string."
                }
            ]
        },
        {
            "name": "iptcparse",
            "desc": null,
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns an array using the tagmarker as an index and the value as the value. It returns FALSE on error or if no IPTC data was found."
            },
            "args": [
                {
                    "name": "iptcblock",
                    "type": "String",
                    "desc": "A binary IPTC block."
                }
            ]
        },
        {
            "name": "jpeg2wbmp",
            "desc": "Converts a JPEG file into a WBMP file.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "jpegname",
                    "type": "String",
                    "desc": "Path to JPEG file."
                },
                {
                    "name": "wbmpname",
                    "type": "String",
                    "desc": "Path to destination WBMP file."
                },
                {
                    "name": "dest_height",
                    "type": "Int32",
                    "desc": "Destination image height."
                },
                {
                    "name": "dest_width",
                    "type": "Int32",
                    "desc": "Destination image width."
                },
                {
                    "name": "threshold",
                    "type": "Int32",
                    "desc": "Threshold value, between 0 and 8 (inclusive)."
                }
            ]
        },
        {
            "name": "png2wbmp",
            "desc": "Converts a PNG file into a WBMP file.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "pngname",
                    "type": "String",
                    "desc": "Path to PNG file."
                },
                {
                    "name": "wbmpname",
                    "type": "String",
                    "desc": "Path to destination WBMP file."
                },
                {
                    "name": "dest_height",
                    "type": "Int32",
                    "desc": "Destination image height."
                },
                {
                    "name": "dest_width",
                    "type": "Int32",
                    "desc": "Destination image width."
                },
                {
                    "name": "threshold",
                    "type": "Int32",
                    "desc": "Threshold value, between 0 and 8 (inclusive)."
                }
            ]
        },
        {
            "name": "exif_imagetype",
            "desc": "exif_imagetype() reads the first bytes of an image and checks its signature.\n\nexif_imagetype() can be used to avoid calls to other exif functions with unsupported file types or in conjunction with $_SERVER['HTTP_ACCEPT'] to check whether or not the viewer is able to see a specific image in the browser.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "When a correct signature is found, the appropriate constant value will be returned otherwise the return value is FALSE. The return value is the same value that getimagesize() returns in index 2 but exif_imagetype() is much faster."
            },
            "args": [
                {
                    "name": "filename",
                    "type": "String",
                    "desc": "The image being checked."
                }
            ]
        },
        {
            "name": "exif_read_data",
            "desc": null,
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "It returns an associative array where the array indexes are the header names and the array values are the values associated with those headers. If no data can be returned, exif_read_data() will return FALSE."
            },
            "args": [
                {
                    "name": "filename",
                    "type": "String",
                    "desc": "The name of the image file being read. This cannot be an URL."
                },
                {
                    "name": "sections",
                    "type": "String",
                    "value": "null_string",
                    "desc": "Is a comma separated list of sections that need to be present in file to produce a result array. If none of the requested sections could be found the return value is FALSE. FILE FileName, FileSize, FileDateTime, SectionsFound COMPUTED html, Width, Height, IsColor, and more if available. Height and Width are computed the same way getimagesize() does so their values must not be part of any header returned. Also, html is a height\/width text string to be used inside normal HTML. ANY_TAG Any information that has a Tag e.g. IFD0, EXIF, ... IFD0 All tagged data of IFD0. In normal imagefiles this contains image size and so forth. THUMBNAIL A file is supposed to contain a thumbnail if it has a second IFD. All tagged information about the embedded thumbnail is stored in this section. COMMENT Comment headers of JPEG images. EXIF The EXIF section is a sub section of IFD0. It contains more detailed information about an image. Most of these entries are digital camera related."
                },
                {
                    "name": "arrays",
                    "type": "Boolean",
                    "value": "false",
                    "desc": "Specifies whether or not each section becomes an array. The sections COMPUTED, THUMBNAIL, and COMMENT always become arrays as they may contain values whose names conflict with other sections."
                },
                {
                    "name": "thumbnail",
                    "type": "Boolean",
                    "value": "false",
                    "desc": "When set to TRUE the thumbnail itself is read. Otherwise, only the tagged data is read."
                }
            ]
        },
        {
            "name": "read_exif_data",
            "flags": [
            ],
            "return": {
                "type": "Variant"
            },
            "args": [
                {
                    "name": "filename",
                    "type": "String"
                },
                {
                    "name": "sections",
                    "type": "String",
                    "value": "null_string"
                },
                {
                    "name": "arrays",
                    "type": "Boolean",
                    "value": "false"
                },
                {
                    "name": "thumbnail",
                    "type": "Boolean",
                    "value": "false"
                }
            ]
        },
        {
            "name": "exif_tagname",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the header name, or FALSE if index is undefined."
            },
            "args": [
                {
                    "name": "index",
                    "type": "Int32",
                    "desc": "The image index"
                }
            ]
        },
        {
            "name": "exif_thumbnail",
            "desc": "exif_thumbnail() reads the embedded thumbnail of a TIFF or JPEG image.\n\nIf you want to deliver thumbnails through this function, you should send the mimetype information using the header() function.\n\nIt is possible that exif_thumbnail() cannot create an image but can determine its size. In this case, the return value is FALSE but width and height are set.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the embedded thumbnail, or FALSE if the image contains no thumbnail."
            },
            "args": [
                {
                    "name": "filename",
                    "type": "String",
                    "desc": "The name of the image file being read. This image contains an embedded thumbnail."
                },
                {
                    "name": "width",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The return width of the returned thumbnail.",
                    "ref": true
                },
                {
                    "name": "height",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The returned height of the returned thumbnail.",
                    "ref": true
                },
                {
                    "name": "imagetype",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The returned image type of the returned thumbnail. This is either TIFF or JPEG.",
                    "ref": true
                }
            ]
        }
    ],
    "classes": [
    ]
}