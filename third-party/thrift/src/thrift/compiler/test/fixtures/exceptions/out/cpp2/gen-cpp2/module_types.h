/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/exceptions/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>

namespace apache::thrift {
namespace ident {
struct message;
struct sonnet;
struct error_message;
struct internal_error_message;
struct error_message;
struct internal_error_message;
struct message;
struct error_code;
struct message_field;
struct error_code;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_sonnet
#define APACHE_THRIFT_ACCESSOR_sonnet
APACHE_THRIFT_DEFINE_ACCESSOR(sonnet);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_error_message
#define APACHE_THRIFT_ACCESSOR_error_message
APACHE_THRIFT_DEFINE_ACCESSOR(error_message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_internal_error_message
#define APACHE_THRIFT_ACCESSOR_internal_error_message
APACHE_THRIFT_DEFINE_ACCESSOR(internal_error_message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_error_message
#define APACHE_THRIFT_ACCESSOR_error_message
APACHE_THRIFT_DEFINE_ACCESSOR(error_message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_internal_error_message
#define APACHE_THRIFT_ACCESSOR_internal_error_message
APACHE_THRIFT_DEFINE_ACCESSOR(internal_error_message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_error_code
#define APACHE_THRIFT_ACCESSOR_error_code
APACHE_THRIFT_DEFINE_ACCESSOR(error_code);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message_field
#define APACHE_THRIFT_ACCESSOR_message_field
APACHE_THRIFT_DEFINE_ACCESSOR(message_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_error_code
#define APACHE_THRIFT_ACCESSOR_error_code
APACHE_THRIFT_DEFINE_ACCESSOR(error_code);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
// END declare_enums
// BEGIN forward_declare
namespace cpp2 {
class Fiery;
class Serious;
class ComplexFieldNames;
class CustomFieldNames;
class ExceptionWithPrimitiveField;
class ExceptionWithStructuredAnnotation;
class Banal;
} // namespace cpp2
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;


/** Glean {"file": "thrift/compiler/test/fixtures/exceptions/src/module.thrift", "name": "Fiery", "kind": "exception" } */
class FOLLY_EXPORT Fiery : public virtual apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::message
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::TRANSIENT;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::SERVER;

 public:
  using __fbthrift_cpp2_type = Fiery;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  Fiery();
  explicit Fiery(std::string __message);

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Fiery(apache::thrift::FragileConstructor, ::std::string message__arg);

  Fiery(Fiery&&) noexcept;

  Fiery(const Fiery& src);


  Fiery& operator=(Fiery&&) noexcept;
  Fiery& operator=(const Fiery& src);

  ~Fiery() override;

 private:
  ::std::string __fbthrift_field_message;

 public:

  bool operator==(const Fiery&) const;
  bool operator<(const Fiery&) const;

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> message_ref() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_message};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> message_ref() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_message};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> message_ref() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_message)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> message() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_message};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> message() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_message};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> message() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_message)};
  }

  /** Glean { "field": "message" } */
  [[deprecated("Use `FOO.message().value()` instead of `FOO.get_message()`")]]
  const ::std::string& get_message() const& {
    return __fbthrift_field_message;
  }

  /** Glean { "field": "message" } */
  [[deprecated("Use `FOO.message().value()` instead of `FOO.get_message()`")]]
  ::std::string get_message() && {
    return static_cast<::std::string&&>(__fbthrift_field_message);
  }

  /** Glean { "field": "message" } */
  template <typename T_Fiery_message_struct_setter = ::std::string>
  [[deprecated("Use `FOO.message() = BAR` instead of `FOO.set_message(BAR)`")]]
  ::std::string& set_message(T_Fiery_message_struct_setter&& message_) {
    message_ref() = std::forward<T_Fiery_message_struct_setter>(message_);
    return __fbthrift_field_message;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return __fbthrift_field_message.c_str();
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Fiery>;
  friend void swap(Fiery& a, Fiery& b);
};

template <class Protocol_>
unsigned long Fiery::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/exceptions/src/module.thrift", "name": "Serious", "kind": "exception" } */
class FOLLY_EXPORT Serious : public virtual apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::sonnet
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::STATEFUL;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::SAFE;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::UNSPECIFIED;

 public:
  using __fbthrift_cpp2_type = Serious;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  Serious();
  explicit Serious(std::string __message);

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Serious(apache::thrift::FragileConstructor, ::std::string sonnet__arg);

  Serious(Serious&&) noexcept;

  Serious(const Serious& src);


  Serious& operator=(Serious&&) noexcept;
  Serious& operator=(const Serious& src);

  ~Serious() override;

 private:
  ::std::string __fbthrift_field_sonnet;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const Serious&) const;
  bool operator<(const Serious&) const;

  /** Glean { "field": "sonnet" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> sonnet_ref() const& {
    return {this->__fbthrift_field_sonnet, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "sonnet" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> sonnet_ref() & {
    return {this->__fbthrift_field_sonnet, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "sonnet" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> sonnet_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sonnet), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "sonnet" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> sonnet() const& {
    return {this->__fbthrift_field_sonnet, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "sonnet" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> sonnet() & {
    return {this->__fbthrift_field_sonnet, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "sonnet" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> sonnet() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sonnet), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "sonnet" } */
  [[deprecated("Use `FOO.sonnet().value()` instead of `FOO.get_sonnet()`")]]
  const ::std::string* get_sonnet() const&;

  /** Glean { "field": "sonnet" } */
  [[deprecated("Use `FOO.sonnet().value()` instead of `FOO.get_sonnet()`")]]
  ::std::string* get_sonnet() &;

  ::std::string* get_sonnet() && = delete;

  /** Glean { "field": "sonnet" } */
  template <typename T_Serious_sonnet_struct_setter = ::std::string>
  [[deprecated("Use `FOO.sonnet() = BAR` instead of `FOO.set_sonnet(BAR)`")]]
  ::std::string& set_sonnet(T_Serious_sonnet_struct_setter&& sonnet_) {
    sonnet_ref() = std::forward<T_Serious_sonnet_struct_setter>(sonnet_);
    return __fbthrift_field_sonnet;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return __fbthrift_field_sonnet.c_str();
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Serious>;
  friend void swap(Serious& a, Serious& b);
};

template <class Protocol_>
unsigned long Serious::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/exceptions/src/module.thrift", "name": "ComplexFieldNames", "kind": "exception" } */
class FOLLY_EXPORT ComplexFieldNames : public virtual apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::error_message,
    ::apache::thrift::ident::internal_error_message
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::CLIENT;

 public:
  using __fbthrift_cpp2_type = ComplexFieldNames;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  ComplexFieldNames();
  explicit ComplexFieldNames(std::string __message);

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ComplexFieldNames(apache::thrift::FragileConstructor, ::std::string error_message__arg, ::std::string internal_error_message__arg);

  ComplexFieldNames(ComplexFieldNames&&) noexcept;

  ComplexFieldNames(const ComplexFieldNames& src);


  ComplexFieldNames& operator=(ComplexFieldNames&&) noexcept;
  ComplexFieldNames& operator=(const ComplexFieldNames& src);

  ~ComplexFieldNames() override;

 private:
  ::std::string __fbthrift_field_error_message;
 private:
  ::std::string __fbthrift_field_internal_error_message;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const ComplexFieldNames&) const;
  bool operator<(const ComplexFieldNames&) const;

  /** Glean { "field": "error_message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> error_message_ref() const& {
    return {this->__fbthrift_field_error_message, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "error_message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> error_message_ref() & {
    return {this->__fbthrift_field_error_message, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "error_message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> error_message_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_error_message), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "error_message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> error_message() const& {
    return {this->__fbthrift_field_error_message, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "error_message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> error_message() & {
    return {this->__fbthrift_field_error_message, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "error_message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> error_message() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_error_message), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "internal_error_message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> internal_error_message_ref() const& {
    return {this->__fbthrift_field_internal_error_message, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "internal_error_message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> internal_error_message_ref() & {
    return {this->__fbthrift_field_internal_error_message, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "internal_error_message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> internal_error_message_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_internal_error_message), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "internal_error_message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> internal_error_message() const& {
    return {this->__fbthrift_field_internal_error_message, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "internal_error_message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> internal_error_message() & {
    return {this->__fbthrift_field_internal_error_message, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "internal_error_message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> internal_error_message() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_internal_error_message), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "error_message" } */
  [[deprecated("Use `FOO.error_message().value()` instead of `FOO.get_error_message()`")]]
  const ::std::string& get_error_message() const& {
    return __fbthrift_field_error_message;
  }

  /** Glean { "field": "error_message" } */
  [[deprecated("Use `FOO.error_message().value()` instead of `FOO.get_error_message()`")]]
  ::std::string get_error_message() && {
    return static_cast<::std::string&&>(__fbthrift_field_error_message);
  }

  /** Glean { "field": "error_message" } */
  template <typename T_ComplexFieldNames_error_message_struct_setter = ::std::string>
  [[deprecated("Use `FOO.error_message() = BAR` instead of `FOO.set_error_message(BAR)`")]]
  ::std::string& set_error_message(T_ComplexFieldNames_error_message_struct_setter&& error_message_) {
    error_message_ref() = std::forward<T_ComplexFieldNames_error_message_struct_setter>(error_message_);
    return __fbthrift_field_error_message;
  }

  /** Glean { "field": "internal_error_message" } */
  [[deprecated("Use `FOO.internal_error_message().value()` instead of `FOO.get_internal_error_message()`")]]
  const ::std::string& get_internal_error_message() const& {
    return __fbthrift_field_internal_error_message;
  }

  /** Glean { "field": "internal_error_message" } */
  [[deprecated("Use `FOO.internal_error_message().value()` instead of `FOO.get_internal_error_message()`")]]
  ::std::string get_internal_error_message() && {
    return static_cast<::std::string&&>(__fbthrift_field_internal_error_message);
  }

  /** Glean { "field": "internal_error_message" } */
  template <typename T_ComplexFieldNames_internal_error_message_struct_setter = ::std::string>
  [[deprecated("Use `FOO.internal_error_message() = BAR` instead of `FOO.set_internal_error_message(BAR)`")]]
  ::std::string& set_internal_error_message(T_ComplexFieldNames_internal_error_message_struct_setter&& internal_error_message_) {
    internal_error_message_ref() = std::forward<T_ComplexFieldNames_internal_error_message_struct_setter>(internal_error_message_);
    return __fbthrift_field_internal_error_message;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return __fbthrift_field_internal_error_message.c_str();
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ComplexFieldNames>;
  friend void swap(ComplexFieldNames& a, ComplexFieldNames& b);
};

template <class Protocol_>
unsigned long ComplexFieldNames::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/exceptions/src/module.thrift", "name": "CustomFieldNames", "kind": "exception" } */
class FOLLY_EXPORT CustomFieldNames : public virtual apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::error_message,
    ::apache::thrift::ident::internal_error_message
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::UNSPECIFIED;

 public:
  using __fbthrift_cpp2_type = CustomFieldNames;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  CustomFieldNames();
  explicit CustomFieldNames(std::string __message);

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  CustomFieldNames(apache::thrift::FragileConstructor, ::std::string error_message__arg, ::std::string internal_error_message__arg);

  CustomFieldNames(CustomFieldNames&&) noexcept;

  CustomFieldNames(const CustomFieldNames& src);


  CustomFieldNames& operator=(CustomFieldNames&&) noexcept;
  CustomFieldNames& operator=(const CustomFieldNames& src);

  ~CustomFieldNames() override;

 private:
  ::std::string __fbthrift_field_error_message;
 private:
  ::std::string __fbthrift_field_internal_error_message;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const CustomFieldNames&) const;
  bool operator<(const CustomFieldNames&) const;

  /** Glean { "field": "error_message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> error_message_ref() const& {
    return {this->__fbthrift_field_error_message, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "error_message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> error_message_ref() & {
    return {this->__fbthrift_field_error_message, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "error_message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> error_message_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_error_message), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "error_message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> error_message() const& {
    return {this->__fbthrift_field_error_message, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "error_message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> error_message() & {
    return {this->__fbthrift_field_error_message, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "error_message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> error_message() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_error_message), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "internal_error_message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> internal_error_message_ref() const& {
    return {this->__fbthrift_field_internal_error_message, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "internal_error_message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> internal_error_message_ref() & {
    return {this->__fbthrift_field_internal_error_message, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "internal_error_message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> internal_error_message_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_internal_error_message), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "internal_error_message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> internal_error_message() const& {
    return {this->__fbthrift_field_internal_error_message, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "internal_error_message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> internal_error_message() & {
    return {this->__fbthrift_field_internal_error_message, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "internal_error_message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> internal_error_message() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_internal_error_message), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "error_message" } */
  [[deprecated("Use `FOO.error_message().value()` instead of `FOO.get_error_message()`")]]
  const ::std::string& get_error_message() const& {
    return __fbthrift_field_error_message;
  }

  /** Glean { "field": "error_message" } */
  [[deprecated("Use `FOO.error_message().value()` instead of `FOO.get_error_message()`")]]
  ::std::string get_error_message() && {
    return static_cast<::std::string&&>(__fbthrift_field_error_message);
  }

  /** Glean { "field": "error_message" } */
  template <typename T_CustomFieldNames_error_message_struct_setter = ::std::string>
  [[deprecated("Use `FOO.error_message() = BAR` instead of `FOO.set_error_message(BAR)`")]]
  ::std::string& set_error_message(T_CustomFieldNames_error_message_struct_setter&& error_message_) {
    error_message_ref() = std::forward<T_CustomFieldNames_error_message_struct_setter>(error_message_);
    return __fbthrift_field_error_message;
  }

  /** Glean { "field": "internal_error_message" } */
  [[deprecated("Use `FOO.internal_error_message().value()` instead of `FOO.get_internal_error_message()`")]]
  const ::std::string& get_internal_error_message() const& {
    return __fbthrift_field_internal_error_message;
  }

  /** Glean { "field": "internal_error_message" } */
  [[deprecated("Use `FOO.internal_error_message().value()` instead of `FOO.get_internal_error_message()`")]]
  ::std::string get_internal_error_message() && {
    return static_cast<::std::string&&>(__fbthrift_field_internal_error_message);
  }

  /** Glean { "field": "internal_error_message" } */
  template <typename T_CustomFieldNames_internal_error_message_struct_setter = ::std::string>
  [[deprecated("Use `FOO.internal_error_message() = BAR` instead of `FOO.set_internal_error_message(BAR)`")]]
  ::std::string& set_internal_error_message(T_CustomFieldNames_internal_error_message_struct_setter&& internal_error_message_) {
    internal_error_message_ref() = std::forward<T_CustomFieldNames_internal_error_message_struct_setter>(internal_error_message_);
    return __fbthrift_field_internal_error_message;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return __fbthrift_field_internal_error_message.c_str();
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<CustomFieldNames>;
  friend void swap(CustomFieldNames& a, CustomFieldNames& b);
};

template <class Protocol_>
unsigned long CustomFieldNames::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/exceptions/src/module.thrift", "name": "ExceptionWithPrimitiveField", "kind": "exception" } */
class FOLLY_EXPORT ExceptionWithPrimitiveField : public virtual apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::message,
    ::apache::thrift::ident::error_code
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::i32_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::UNSPECIFIED;

 public:
  using __fbthrift_cpp2_type = ExceptionWithPrimitiveField;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  ExceptionWithPrimitiveField();
  explicit ExceptionWithPrimitiveField(std::string __message);

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ExceptionWithPrimitiveField(apache::thrift::FragileConstructor, ::std::string message__arg, ::std::int32_t error_code__arg);

  ExceptionWithPrimitiveField(ExceptionWithPrimitiveField&&) noexcept;

  ExceptionWithPrimitiveField(const ExceptionWithPrimitiveField& src);


  ExceptionWithPrimitiveField& operator=(ExceptionWithPrimitiveField&&) noexcept;
  ExceptionWithPrimitiveField& operator=(const ExceptionWithPrimitiveField& src);

  ~ExceptionWithPrimitiveField() override;

 private:
  ::std::string __fbthrift_field_message;
 private:
  ::std::int32_t __fbthrift_field_error_code;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const ExceptionWithPrimitiveField&) const;
  bool operator<(const ExceptionWithPrimitiveField&) const;

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> message_ref() const& {
    return {this->__fbthrift_field_message, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> message_ref() & {
    return {this->__fbthrift_field_message, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> message_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_message), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> message() const& {
    return {this->__fbthrift_field_message, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> message() & {
    return {this->__fbthrift_field_message, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> message() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_message), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "error_code" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> error_code_ref() const& {
    return {this->__fbthrift_field_error_code, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "error_code" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> error_code_ref() & {
    return {this->__fbthrift_field_error_code, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "error_code" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> error_code_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_error_code), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "error_code" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> error_code() const& {
    return {this->__fbthrift_field_error_code, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "error_code" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> error_code() & {
    return {this->__fbthrift_field_error_code, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "error_code" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> error_code() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_error_code), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "message" } */
  [[deprecated("Use `FOO.message().value()` instead of `FOO.get_message()`")]]
  const ::std::string& get_message() const& {
    return __fbthrift_field_message;
  }

  /** Glean { "field": "message" } */
  [[deprecated("Use `FOO.message().value()` instead of `FOO.get_message()`")]]
  ::std::string get_message() && {
    return static_cast<::std::string&&>(__fbthrift_field_message);
  }

  /** Glean { "field": "message" } */
  template <typename T_ExceptionWithPrimitiveField_message_struct_setter = ::std::string>
  [[deprecated("Use `FOO.message() = BAR` instead of `FOO.set_message(BAR)`")]]
  ::std::string& set_message(T_ExceptionWithPrimitiveField_message_struct_setter&& message_) {
    message_ref() = std::forward<T_ExceptionWithPrimitiveField_message_struct_setter>(message_);
    return __fbthrift_field_message;
  }

  /** Glean { "field": "error_code" } */
  [[deprecated("Use `FOO.error_code().value()` instead of `FOO.get_error_code()`")]]
  ::std::int32_t get_error_code() const;

  /** Glean { "field": "error_code" } */
  [[deprecated("Use `FOO.error_code() = BAR` instead of `FOO.set_error_code(BAR)`")]]
  ::std::int32_t& set_error_code(::std::int32_t error_code_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return __fbthrift_field_message.c_str();
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ExceptionWithPrimitiveField>;
  friend void swap(ExceptionWithPrimitiveField& a, ExceptionWithPrimitiveField& b);
};

template <class Protocol_>
unsigned long ExceptionWithPrimitiveField::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/exceptions/src/module.thrift", "name": "ExceptionWithStructuredAnnotation", "kind": "exception" } */
class FOLLY_EXPORT ExceptionWithStructuredAnnotation : public virtual apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::message_field,
    ::apache::thrift::ident::error_code
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::i32_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::UNSPECIFIED;

 public:
  using __fbthrift_cpp2_type = ExceptionWithStructuredAnnotation;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  ExceptionWithStructuredAnnotation();
  explicit ExceptionWithStructuredAnnotation(std::string __message);

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ExceptionWithStructuredAnnotation(apache::thrift::FragileConstructor, ::std::string message_field__arg, ::std::int32_t error_code__arg);

  ExceptionWithStructuredAnnotation(ExceptionWithStructuredAnnotation&&) noexcept;

  ExceptionWithStructuredAnnotation(const ExceptionWithStructuredAnnotation& src);


  ExceptionWithStructuredAnnotation& operator=(ExceptionWithStructuredAnnotation&&) noexcept;
  ExceptionWithStructuredAnnotation& operator=(const ExceptionWithStructuredAnnotation& src);

  ~ExceptionWithStructuredAnnotation() override;

 private:
  ::std::string __fbthrift_field_message_field;
 private:
  ::std::int32_t __fbthrift_field_error_code;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const ExceptionWithStructuredAnnotation&) const;
  bool operator<(const ExceptionWithStructuredAnnotation&) const;

  /** Glean { "field": "message_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> message_field_ref() const& {
    return {this->__fbthrift_field_message_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> message_field_ref() & {
    return {this->__fbthrift_field_message_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> message_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_message_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> message_field() const& {
    return {this->__fbthrift_field_message_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> message_field() & {
    return {this->__fbthrift_field_message_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> message_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_message_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "error_code" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> error_code_ref() const& {
    return {this->__fbthrift_field_error_code, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "error_code" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> error_code_ref() & {
    return {this->__fbthrift_field_error_code, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "error_code" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> error_code_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_error_code), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "error_code" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> error_code() const& {
    return {this->__fbthrift_field_error_code, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "error_code" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> error_code() & {
    return {this->__fbthrift_field_error_code, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "error_code" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> error_code() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_error_code), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "message_field" } */
  [[deprecated("Use `FOO.message_field().value()` instead of `FOO.get_message_field()`")]]
  const ::std::string& get_message_field() const& {
    return __fbthrift_field_message_field;
  }

  /** Glean { "field": "message_field" } */
  [[deprecated("Use `FOO.message_field().value()` instead of `FOO.get_message_field()`")]]
  ::std::string get_message_field() && {
    return static_cast<::std::string&&>(__fbthrift_field_message_field);
  }

  /** Glean { "field": "message_field" } */
  template <typename T_ExceptionWithStructuredAnnotation_message_field_struct_setter = ::std::string>
  [[deprecated("Use `FOO.message_field() = BAR` instead of `FOO.set_message_field(BAR)`")]]
  ::std::string& set_message_field(T_ExceptionWithStructuredAnnotation_message_field_struct_setter&& message_field_) {
    message_field_ref() = std::forward<T_ExceptionWithStructuredAnnotation_message_field_struct_setter>(message_field_);
    return __fbthrift_field_message_field;
  }

  /** Glean { "field": "error_code" } */
  [[deprecated("Use `FOO.error_code().value()` instead of `FOO.get_error_code()`")]]
  ::std::int32_t get_error_code() const;

  /** Glean { "field": "error_code" } */
  [[deprecated("Use `FOO.error_code() = BAR` instead of `FOO.set_error_code(BAR)`")]]
  ::std::int32_t& set_error_code(::std::int32_t error_code_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return __fbthrift_field_message_field.c_str();
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ExceptionWithStructuredAnnotation>;
  friend void swap(ExceptionWithStructuredAnnotation& a, ExceptionWithStructuredAnnotation& b);
};

template <class Protocol_>
unsigned long ExceptionWithStructuredAnnotation::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/exceptions/src/module.thrift", "name": "Banal", "kind": "exception" } */
class FOLLY_EXPORT Banal : public virtual apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::PERMANENT;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::SAFE;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::CLIENT;

 public:
  using __fbthrift_cpp2_type = Banal;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  Banal();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Banal(apache::thrift::FragileConstructor);

  Banal(Banal&&) noexcept;

  Banal(const Banal& src);


  Banal& operator=(Banal&&) noexcept;
  Banal& operator=(const Banal& src);

  ~Banal() override;


 public:

  bool operator==(const Banal&) const;
  bool operator<(const Banal&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return "::cpp2::Banal";
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Banal>;
  friend void swap(Banal& a, Banal& b);
};

template <class Protocol_>
unsigned long Banal::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace cpp2

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::cpp2::Fiery, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -4294775116102366513;
  static constexpr ::std::string_view definitionKey = {"\x99\x45\x1d\x4e\x07\x4f\x66\x2c\x10\x39\xb7\xfe\x08\xb1\xd2\xb4", 16};
};
template <> struct TSchemaAssociation<::cpp2::Serious, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -4294775116102366513;
  static constexpr ::std::string_view definitionKey = {"\x3a\xcb\xf0\x43\x70\xe4\xca\x8a\xd8\x17\x63\xf0\xfa\x66\x81\x88", 16};
};
template <> struct TSchemaAssociation<::cpp2::ComplexFieldNames, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -4294775116102366513;
  static constexpr ::std::string_view definitionKey = {"\xa8\xd8\x10\x64\x03\x41\x94\x6f\x9b\xf3\x66\x4a\xf8\x5a\x76\xa9", 16};
};
template <> struct TSchemaAssociation<::cpp2::CustomFieldNames, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -4294775116102366513;
  static constexpr ::std::string_view definitionKey = {"\xbe\x52\xb4\xd1\x6c\x46\x20\x88\x87\x4a\xb6\xf4\x84\xc7\x34\x2d", 16};
};
template <> struct TSchemaAssociation<::cpp2::ExceptionWithPrimitiveField, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -4294775116102366513;
  static constexpr ::std::string_view definitionKey = {"\x48\xac\x33\x3a\x35\x8c\x09\xb6\xe2\xcc\x72\xcf\x3c\xd4\xcf\x14", 16};
};
template <> struct TSchemaAssociation<::cpp2::ExceptionWithStructuredAnnotation, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -4294775116102366513;
  static constexpr ::std::string_view definitionKey = {"\x6d\x71\x83\xae\xc8\x4f\x94\x51\x56\x0b\xd8\x89\x63\xab\x30\x64", 16};
};
template <> struct TSchemaAssociation<::cpp2::Banal, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -4294775116102366513;
  static constexpr ::std::string_view definitionKey = {"\x7a\x19\x77\x51\xc3\xeb\xe1\x68\x87\x8f\x1b\x03\xc5\x78\xfb\xc4", 16};
};
} // namespace apache::thrift::detail
