[("\\Coordinate",
  (Shallow_decl_defs.Typedef
     { Typing_defs.td_module = None; td_pos = [3:6-16]; td_vis = Transparent;
       td_tparams = []; td_as_constraint = None; td_super_constraint = None;
       td_type =
       (Rhint ([3:19-57]),
        (Tshape ((Rhint ([3:53-56]), Tmixed),
           { (Typing_defs_core.TSFlit_str ([3:25-28], "x")) ->
             { sft_optional = false;
               sft_ty = (Rhint ([3:32-37]), (Tprim Tfloat)) };
             (Typing_defs_core.TSFlit_str ([3:39-42], "y")) ->
             { sft_optional = false;
               sft_ty = (Rhint ([3:46-51]), (Tprim Tfloat)) } }
           )));
       td_is_ctx = false; td_attributes = []; td_internal = false;
       td_docs_url = None }));
  ("\\takes_shape",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([5:10-21]),
         (Tfun
            { ft_tparams = []; ft_where_constraints = [];
              ft_params =
              [{ fp_pos = [5:56-61]; fp_name = (Some "$arg1");
                 fp_type =
                 { et_enforced = Typing_defs_core.Unenforced;
                   et_type =
                   (Rhint ([5:22-55]),
                    (Tshape ((Rhint ([Pos.none]), (Tunion [])),
                       { (Typing_defs_core.TSFlit_str ([5:28-31], "x")) ->
                         { sft_optional = false;
                           sft_ty = (Rhint ([5:35-40]), (Tprim Tfloat)) };
                         (Typing_defs_core.TSFlit_str ([5:42-45], "y")) ->
                         { sft_optional = false;
                           sft_ty = (Rhint ([5:49-54]), (Tprim Tfloat)) } }
                       )))
                   };
                 fp_flags =
                 (make_fp_flags ~accept_disposable:false ~has_default:false
                   ~mode:Typing_defs_core.FPnormal ~ifc_external:false
                   ~ifc_can_call:false ~readonly:false);
                  }
                ];
              ft_implicit_params = { capability = (CapDefaults [5:10-21]) };
              ft_ret =
              { et_enforced = Typing_defs_core.Unenforced;
                et_type =
                (Rhint ([5:64-74]),
                 (Tapply (([5:64-74], "\\Coordinate"), [])))
                };
              ft_flags =
              (make_ft_flags FSync ~return_disposable:false
                ~returns_readonly:false ~support_dynamic_type:false
                ~readonly_this:false ~is_memoized:false ~variadic:false);
              ft_ifc_decl = FDPolicied {PUBLIC}ft_cross_package = None }));
        fe_pos = [5:10-21]; fe_php_std_lib = false;
        fe_support_dynamic_type = false; fe_no_auto_dynamic = false }));
  ("\\returns_shape",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([9:10-23]),
         (Tfun
            { ft_tparams = []; ft_where_constraints = [];
              ft_params =
              [{ fp_pos = [10:14-19]; fp_name = (Some "$arg1");
                 fp_type =
                 { et_enforced = Typing_defs_core.Unenforced;
                   et_type =
                   (Rhint ([10:3-13]),
                    (Tapply (([10:3-13], "\\Coordinate"), [])))
                   };
                 fp_flags =
                 (make_fp_flags ~accept_disposable:false ~has_default:false
                   ~mode:Typing_defs_core.FPnormal ~ifc_external:false
                   ~ifc_can_call:false ~readonly:false);
                  }
                ];
              ft_implicit_params = { capability = (CapDefaults [9:10-23]) };
              ft_ret =
              { et_enforced = Typing_defs_core.Unenforced;
                et_type =
                (Rhint ([11:4-42]),
                 (Tshape ((Rhint ([11:38-41]), Tmixed),
                    { (Typing_defs_core.TSFlit_str ([11:10-13], "x")) ->
                      { sft_optional = false;
                        sft_ty = (Rhint ([11:17-22]), (Tprim Tfloat)) };
                      (Typing_defs_core.TSFlit_str ([11:24-27], "y")) ->
                      { sft_optional = false;
                        sft_ty = (Rhint ([11:31-36]), (Tprim Tfloat)) } }
                    )))
                };
              ft_flags =
              (make_ft_flags FSync ~return_disposable:false
                ~returns_readonly:false ~support_dynamic_type:false
                ~readonly_this:false ~is_memoized:false ~variadic:false);
              ft_ifc_decl = FDPolicied {PUBLIC}ft_cross_package = None }));
        fe_pos = [9:10-23]; fe_php_std_lib = false;
        fe_support_dynamic_type = false; fe_no_auto_dynamic = false }));
  ("\\generic_shape",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([15:10-23]),
         (Tfun
            { ft_tparams =
              [{ Typing_defs_core.tp_variance = Invariant;
                 tp_name = ([15:24-25], "T"); tp_tparams = [];
                 tp_constraints = []; tp_reified = Erased;
                 tp_user_attributes = [] }
                ];
              ft_where_constraints = [];
              ft_params =
              [{ fp_pos = [15:34-39]; fp_name = (Some "$arg1");
                 fp_type =
                 { et_enforced = Typing_defs_core.Unenforced;
                   et_type =
                   (Rhint ([15:27-33]),
                    (Ttuple
                       [(Rhint ([15:28-29]), (Tgeneric ("T", [])));
                         (Rhint ([15:31-32]), (Tgeneric ("T", [])))]))
                   };
                 fp_flags =
                 (make_fp_flags ~accept_disposable:false ~has_default:false
                   ~mode:Typing_defs_core.FPnormal ~ifc_external:false
                   ~ifc_can_call:false ~readonly:false);
                  }
                ];
              ft_implicit_params = { capability = (CapDefaults [15:10-23]) };
              ft_ret =
              { et_enforced = Typing_defs_core.Unenforced;
                et_type =
                (Rhint ([15:42-48]),
                 (Ttuple
                    [(Rhint ([15:43-44]), (Tgeneric ("T", [])));
                      (Rhint ([15:46-47]), (Tgeneric ("T", [])))]))
                };
              ft_flags =
              (make_ft_flags FSync ~return_disposable:false
                ~returns_readonly:false ~support_dynamic_type:false
                ~readonly_this:false ~is_memoized:false ~variadic:false);
              ft_ifc_decl = FDPolicied {PUBLIC}ft_cross_package = None }));
        fe_pos = [15:10-23]; fe_php_std_lib = false;
        fe_support_dynamic_type = false; fe_no_auto_dynamic = false }));
  ("\\TaggedCoordinate",
   (Shallow_decl_defs.Typedef
      { Typing_defs.td_module = None; td_pos = [19:6-22];
        td_vis = Transparent; td_tparams = []; td_as_constraint = None;
        td_super_constraint = None;
        td_type =
        (Rhint ([20:3-72]),
         (Tshape ((Rhint ([Pos.none]), (Tunion [])),
            { (Typing_defs_core.TSFlit_str ([20:27-34], "coord")) ->
              { sft_optional = false;
                sft_ty =
                (Rhint ([20:38-71]),
                 (Tshape ((Rhint ([Pos.none]), (Tunion [])),
                    { (Typing_defs_core.TSFlit_str ([20:44-47], "x")) ->
                      { sft_optional = false;
                        sft_ty = (Rhint ([20:51-56]), (Tprim Tfloat)) };
                      (Typing_defs_core.TSFlit_str ([20:58-61], "y")) ->
                      { sft_optional = false;
                        sft_ty = (Rhint ([20:65-70]), (Tprim Tfloat)) } }
                    )))
                };
              (Typing_defs_core.TSFlit_str ([20:10-15], "tag")) ->
              { sft_optional = true;
                sft_ty = (Rhint ([20:19-25]), (Tprim Tstring)) } }
            )));
        td_is_ctx = false; td_attributes = []; td_internal = false;
        td_docs_url = None }))
  ]
