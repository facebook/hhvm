/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.thrift.annotation_deprecated;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

/**
 * Applies unstructured annotations to a definition.
 */
@SuppressWarnings({ "unused", "serial" })
public class DeprecatedUnvalidatedAnnotations implements TBase, java.io.Serializable, Cloneable, Comparable<DeprecatedUnvalidatedAnnotations> {
  private static final TStruct STRUCT_DESC = new TStruct("DeprecatedUnvalidatedAnnotations");
  private static final TField ITEMS_FIELD_DESC = new TField("items", TType.MAP, (short)1);

  public Map<String,String> items;
  public static final int ITEMS = 1;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(ITEMS, new FieldMetaData("items", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new FieldValueMetaData(TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(DeprecatedUnvalidatedAnnotations.class, metaDataMap);
  }

  public DeprecatedUnvalidatedAnnotations() {
  }

  public DeprecatedUnvalidatedAnnotations(
      Map<String,String> items) {
    this();
    this.items = items;
  }

  public static class Builder {
    private Map<String,String> items;

    public Builder() {
    }

    public Builder setItems(final Map<String,String> items) {
      this.items = items;
      return this;
    }

    public DeprecatedUnvalidatedAnnotations build() {
      DeprecatedUnvalidatedAnnotations result = new DeprecatedUnvalidatedAnnotations();
      result.setItems(this.items);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DeprecatedUnvalidatedAnnotations(DeprecatedUnvalidatedAnnotations other) {
    if (other.isSetItems()) {
      this.items = TBaseHelper.deepCopy(other.items);
    }
  }

  public DeprecatedUnvalidatedAnnotations deepCopy() {
    return new DeprecatedUnvalidatedAnnotations(this);
  }

  public Map<String,String> getItems() {
    return this.items;
  }

  public DeprecatedUnvalidatedAnnotations setItems(Map<String,String> items) {
    this.items = items;
    return this;
  }

  public void unsetItems() {
    this.items = null;
  }

  // Returns true if field items is set (has been assigned a value) and false otherwise
  public boolean isSetItems() {
    return this.items != null;
  }

  public void setItemsIsSet(boolean __value) {
    if (!__value) {
      this.items = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case ITEMS:
      if (__value == null) {
        unsetItems();
      } else {
        setItems((Map<String,String>)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case ITEMS:
      return getItems();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof DeprecatedUnvalidatedAnnotations))
      return false;
    DeprecatedUnvalidatedAnnotations that = (DeprecatedUnvalidatedAnnotations)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetItems(), that.isSetItems(), this.items, that.items)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {items});
  }

  @Override
  public int compareTo(DeprecatedUnvalidatedAnnotations other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetItems()).compareTo(other.isSetItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(items, other.items);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) {
        break;
      }
      switch (__field.id)
      {
        case ITEMS:
          if (__field.type == TType.MAP) {
            {
              TMap _map9 = iprot.readMapBegin();
              this.items = new HashMap<String,String>(Math.max(0, 2*_map9.size));
              for (int _i10 = 0; 
                   (_map9.size < 0) ? iprot.peekMap() : (_i10 < _map9.size); 
                   ++_i10)
              {
                String _key11;
                String _val12;
                _key11 = iprot.readString();
                _val12 = iprot.readString();
                this.items.put(_key11, _val12);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.items != null) {
      oprot.writeFieldBegin(ITEMS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.items.size()));
        for (Map.Entry<String, String> _iter13 : this.items.entrySet())        {
          oprot.writeString(_iter13.getKey());
          oprot.writeString(_iter13.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("DeprecatedUnvalidatedAnnotations");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("items");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getItems() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getItems(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

