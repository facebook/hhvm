{
  "refid": "Encode_8h",
  "kind": "file",
  "language": "C++",
  "compoundname_html": "Encode.h",
  "includes": [
    {
      "refid": "detail_2Encode_8h",
      "local": "no",
      "text_html": "thrift/lib/cpp2/op/detail/Encode.h"
    }
  ],
  "innernamespace": [
    {
      "refid": "namespaceapache",
      "text_html": "apache"
    },
    {
      "refid": "namespaceapache_1_1thrift",
      "text_html": "apache::thrift"
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1op",
      "text_html": "apache::thrift::op"
    }
  ],
  "file_location": {
    "file": "fbcode/thrift/lib/cpp2/op/Encode.h"
  },
  "filepath": "file/thrift/lib/cpp2/op/Encode.h",
  "href": "/ref/cpp/thrift/lib/cpp2/op/Encode.h",
  "free_vars": [
    {
      "refid": "namespaceapache_1_1thrift_1_1op_1a01fba272953f4ccc2d11fb514a828e75",
      "prot": "public",
      "static": "no",
      "mutable": "no",
      "tparams": [
        {
          "type_html": "bool",
          "declname_html": "ZeroCopy",
          "defname_html": "ZeroCopy"
        },
        {
          "type_html": "typename Tag"
        }
      ],
      "type_html": "FOLLY_INLINE_VARIABLE constexpr <a href=\"https://www.internalfb.com/intern/staticdocs/fbcref/ref/cpp/struct/apache/thrift/op/detail/SerializedSize\">detail::SerializedSize</a>&lt; ZeroCopy, Tag &gt;",
      "definition_html": "FOLLY_INLINE_VARIABLE constexpr detail::SerializedSize&lt;ZeroCopy, Tag&gt; apache::thrift::op::serialized_size",
      "argsstring_html": "",
      "name_html": "serialized_size",
      "initializer_html": "{}",
      "location": {
        "file": "fbcode/thrift/lib/cpp2/op/Encode.h",
        "line": "29",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp2/op/Encode.h",
        "bodystart": "29",
        "bodyend": "-1"
      },
      "description": {
        "detailed_html": "<p>Returns the serialized size of the avlue using the type tag. For example: serialized_size&lt;false, type::int16_t&gt;(prot, 1); </p>"
      }
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1op_1ac1b6da48afc94c116c49f14a1001cde5",
      "prot": "public",
      "static": "no",
      "mutable": "no",
      "tparams": [
        {
          "type_html": "typename Tag"
        }
      ],
      "type_html": "FOLLY_INLINE_VARIABLE constexpr <a href=\"https://www.internalfb.com/intern/staticdocs/fbcref/ref/cpp/struct/apache/thrift/op/detail/Encode\">detail::Encode</a>&lt; Tag &gt;",
      "definition_html": "FOLLY_INLINE_VARIABLE constexpr detail::Encode&lt;Tag&gt; apache::thrift::op::encode",
      "argsstring_html": "",
      "name_html": "encode",
      "initializer_html": "{}",
      "location": {
        "file": "fbcode/thrift/lib/cpp2/op/Encode.h",
        "line": "35",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp2/op/Encode.h",
        "bodystart": "35",
        "bodyend": "-1"
      },
      "description": {
        "detailed_html": "<p>Encodes the given value to the given protocol using the type tag. This handles adapted type. For example: encode&lt;type::int16_t&gt;(prot, 1); </p>"
      }
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1op_1a9ab07eb6040609293bde58bcaeafa1a0",
      "prot": "public",
      "static": "no",
      "mutable": "no",
      "tparams": [
        {
          "type_html": "typename Tag"
        }
      ],
      "type_html": "FOLLY_INLINE_VARIABLE constexpr <a href=\"https://www.internalfb.com/intern/staticdocs/fbcref/ref/cpp/struct/apache/thrift/op/detail/Decode\">detail::Decode</a>&lt; Tag &gt;",
      "definition_html": "FOLLY_INLINE_VARIABLE constexpr detail::Decode&lt;Tag&gt; apache::thrift::op::decode",
      "argsstring_html": "",
      "name_html": "decode",
      "initializer_html": "{}",
      "location": {
        "file": "fbcode/thrift/lib/cpp2/op/Encode.h",
        "line": "41",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp2/op/Encode.h",
        "bodystart": "41",
        "bodyend": "-1"
      },
      "description": {
        "detailed_html": "<p>Decodes the value from the given protocol using the type tag. This handles adapted type. For example: decode&lt;type::int16_t&gt;(prot, i); // decode to variable i </p>"
      }
    }
  ],
  "free_overloadgroups": []
}