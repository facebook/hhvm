.hh_file 1;
# Test declaring type aliases

.main {
  DefCls 0
  DefTypeAlias 0
  DefTypeAlias 1
  DefTypeAlias 2
  DefTypeAlias 3

  NullUninit
  NullUninit
  NullUninit
  Int 0
  FCallFuncD <> 1 1 "" - "foo"
  PopC

  NullUninit
  NullUninit
  NullUninit
  String "hi"
  FCallFuncD <> 1 1 "" - "foo"
  PopC

  NewObjD "C"
  Dup
  NullUninit
  NullUninit
  FCallCtor <LockWhileUnwinding> 0 1 "" - ""
  PopC
  LockObj
  SetL $x
  PopC

  NullUninit
  NullUninit
  NullUninit
  CGetL $x
  FCallFuncD <> 1 1 "" - "bar"
  PopC

  NullUninit
  NullUninit
  NullUninit
  String "hi"
  FCallFuncD <> 1 1 "" - "bar"
  PopC

  NullUninit
  NullUninit
  NullUninit
  Null
  FCallFuncD <> 1 1 "" - "bar"
  PopC

  NullUninit
  NullUninit
  NullUninit
  CGetL $x
  FCallFuncD <> 1 1 "" - "baz"
  PopC

  NullUninit
  NullUninit
  NullUninit
  String "hi"
  FCallFuncD <> 1 1 "" - "baz"
  PopC

  NullUninit
  NullUninit
  NullUninit
  Null
  FCallFuncD <> 1 1 "" - "baz"
  PopC

  NullUninit
  NullUninit
  NullUninit
  CGetL $x
  FCallFuncD <> 1 1 "" - "quux"
  PopC

  NullUninit
  NullUninit
  NullUninit
  String "hi"
  FCallFuncD <> 1 1 "" - "quux"
  PopC

  NullUninit
  NullUninit
  NullUninit
  Null
  FCallFuncD <> 1 1 "" - "quux"
  PopC

  Int 1
  RetC
}

.function foo(<"@Foo" "Foo" hh_type extended_hint soft > $x) {
  VerifyParamType $x
  Null
  RetC
}

.function bar(<"@Bar" "Bar" hh_type extended_hint soft > $x) {
  VerifyParamType $x
  Null
  RetC
}

.function baz(<"@Baz" "Baz" hh_type extended_hint soft > $x) {
  VerifyParamType $x
  Null
  RetC
}

.function quux(<"@Quux" "Quux" hh_type extended_hint soft > $x) {
  VerifyParamType $x
  Null
  RetC
}

.class C {
}

.alias Foo = <"HH\\int">;
.alias Bar = <"C">;
.alias Baz = <"C" nullable>;
.alias Quux = <N>;
