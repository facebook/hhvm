/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/deprecated-clear/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/deprecated-clear/gen-cpp2/module_types.tcc"
#include "thrift/compiler/test/fixtures/deprecated-clear/gen-cpp2/module_constants.h"
#include "thrift/compiler/test/fixtures/deprecated-clear/gen-cpp2/module_data.h"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

[[maybe_unused]] static constexpr std::string_view kModuleName = "module";


namespace apache { namespace thrift {

const std::string_view TEnumTraits<::apache::thrift::test::MyEnum>::__fbthrift_module_name_internal_do_not_use = kModuleName;
folly::Range<::apache::thrift::test::MyEnum const*> const TEnumTraits<::apache::thrift::test::MyEnum>::values = folly::range(TEnumDataStorage<::apache::thrift::test::MyEnum>::values);
folly::Range<std::string_view const*> const TEnumTraits<::apache::thrift::test::MyEnum>::names = folly::range(TEnumDataStorage<::apache::thrift::test::MyEnum>::names);

bool TEnumTraits<::apache::thrift::test::MyEnum>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::apache::thrift::test::MyEnum>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

const std::vector<std::any>& TEnumTraits<::apache::thrift::test::MyEnum>::annotations() noexcept {
  return ::apache::thrift::detail::annotation::empty_annotations();
}

const std::vector<std::any>& TEnumTraits<::apache::thrift::test::MyEnum>::enumValueAnnotations(::apache::thrift::test::MyEnum value) noexcept {
  switch (static_cast<std::int32_t>(value)) {
    default:
      return ::apache::thrift::detail::annotation::empty_annotations();
  }
}


}} // apache::thrift



namespace apache::thrift::test {

std::string_view StructWithDefaultStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<StructWithDefaultStruct>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view StructWithDefaultStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<StructWithDefaultStruct>::name;
}

StructWithDefaultStruct::StructWithDefaultStruct(const StructWithDefaultStruct&) = default;
StructWithDefaultStruct& StructWithDefaultStruct::operator=(const StructWithDefaultStruct&) = default;
StructWithDefaultStruct::StructWithDefaultStruct() :
    __fbthrift_field_bool_field(true),
    __fbthrift_field_byte_field(static_cast<::std::int8_t>(1)),
    __fbthrift_field_short_field(static_cast<::std::int16_t>(1)),
    __fbthrift_field_int_field(static_cast<::std::int32_t>(1)),
    __fbthrift_field_long_field(static_cast<::std::int64_t>(1)),
    __fbthrift_field_float_field(static_cast<float>(1)),
    __fbthrift_field_double_field(static_cast<double>(1)),
    __fbthrift_field_string_field(apache::thrift::StringTraits<::std::string>::fromStringLiteral("1")),
    __fbthrift_field_binary_field(apache::thrift::StringTraits<::std::string>::fromStringLiteral("1")),
    __fbthrift_field_enum_field( ::apache::thrift::test::MyEnum::ME1),
    __fbthrift_field_list_field(std::initializer_list<::std::int16_t>{ static_cast<::std::int16_t>(1) }),
    __fbthrift_field_set_field(std::initializer_list<::std::int16_t>{ static_cast<::std::int16_t>(1) }),
    __fbthrift_field_map_field(std::initializer_list<::std::map<::std::int16_t, ::std::int16_t>::value_type>{ { static_cast<::std::int16_t>(1), static_cast<::std::int16_t>(1) } }) {
}


StructWithDefaultStruct::~StructWithDefaultStruct() {}

StructWithDefaultStruct::StructWithDefaultStruct([[maybe_unused]] StructWithDefaultStruct&& other) noexcept :
    __fbthrift_field_bool_field(std::move(other.__fbthrift_field_bool_field)),
    __fbthrift_field_byte_field(std::move(other.__fbthrift_field_byte_field)),
    __fbthrift_field_short_field(std::move(other.__fbthrift_field_short_field)),
    __fbthrift_field_int_field(std::move(other.__fbthrift_field_int_field)),
    __fbthrift_field_long_field(std::move(other.__fbthrift_field_long_field)),
    __fbthrift_field_float_field(std::move(other.__fbthrift_field_float_field)),
    __fbthrift_field_double_field(std::move(other.__fbthrift_field_double_field)),
    __fbthrift_field_string_field(std::move(other.__fbthrift_field_string_field)),
    __fbthrift_field_binary_field(std::move(other.__fbthrift_field_binary_field)),
    __fbthrift_field_enum_field(std::move(other.__fbthrift_field_enum_field)),
    __fbthrift_field_list_field(std::move(other.__fbthrift_field_list_field)),
    __fbthrift_field_set_field(std::move(other.__fbthrift_field_set_field)),
    __fbthrift_field_map_field(std::move(other.__fbthrift_field_map_field)),
    __isset(other.__isset) {
}

StructWithDefaultStruct& StructWithDefaultStruct::operator=([[maybe_unused]] StructWithDefaultStruct&& other) noexcept {
    this->__fbthrift_field_bool_field = std::move(other.__fbthrift_field_bool_field);
    this->__fbthrift_field_byte_field = std::move(other.__fbthrift_field_byte_field);
    this->__fbthrift_field_short_field = std::move(other.__fbthrift_field_short_field);
    this->__fbthrift_field_int_field = std::move(other.__fbthrift_field_int_field);
    this->__fbthrift_field_long_field = std::move(other.__fbthrift_field_long_field);
    this->__fbthrift_field_float_field = std::move(other.__fbthrift_field_float_field);
    this->__fbthrift_field_double_field = std::move(other.__fbthrift_field_double_field);
    this->__fbthrift_field_string_field = std::move(other.__fbthrift_field_string_field);
    this->__fbthrift_field_binary_field = std::move(other.__fbthrift_field_binary_field);
    this->__fbthrift_field_enum_field = std::move(other.__fbthrift_field_enum_field);
    this->__fbthrift_field_list_field = std::move(other.__fbthrift_field_list_field);
    this->__fbthrift_field_set_field = std::move(other.__fbthrift_field_set_field);
    this->__fbthrift_field_map_field = std::move(other.__fbthrift_field_map_field);
    __isset = other.__isset;
    return *this;
}


StructWithDefaultStruct::StructWithDefaultStruct(apache::thrift::FragileConstructor, bool bool_field__arg, ::std::int8_t byte_field__arg, ::std::int16_t short_field__arg, ::std::int32_t int_field__arg, ::std::int64_t long_field__arg, float float_field__arg, double double_field__arg, ::std::string string_field__arg, ::std::string binary_field__arg, ::apache::thrift::test::MyEnum enum_field__arg, ::std::vector<::std::int16_t> list_field__arg, ::std::set<::std::int16_t> set_field__arg, ::std::map<::std::int16_t, ::std::int16_t> map_field__arg) :
    __fbthrift_field_bool_field(std::move(bool_field__arg)),
    __fbthrift_field_byte_field(std::move(byte_field__arg)),
    __fbthrift_field_short_field(std::move(short_field__arg)),
    __fbthrift_field_int_field(std::move(int_field__arg)),
    __fbthrift_field_long_field(std::move(long_field__arg)),
    __fbthrift_field_float_field(std::move(float_field__arg)),
    __fbthrift_field_double_field(std::move(double_field__arg)),
    __fbthrift_field_string_field(std::move(string_field__arg)),
    __fbthrift_field_binary_field(std::move(binary_field__arg)),
    __fbthrift_field_enum_field(std::move(enum_field__arg)),
    __fbthrift_field_list_field(std::move(list_field__arg)),
    __fbthrift_field_set_field(std::move(set_field__arg)),
    __fbthrift_field_map_field(std::move(map_field__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
  __isset.set(folly::index_constant<11>(), true);
  __isset.set(folly::index_constant<12>(), true);
}

void StructWithDefaultStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_bool_field = true;
  this->__fbthrift_field_byte_field = static_cast<::std::int8_t>(1);
  this->__fbthrift_field_short_field = static_cast<::std::int16_t>(1);
  this->__fbthrift_field_int_field = static_cast<::std::int32_t>(1);
  this->__fbthrift_field_long_field = static_cast<::std::int64_t>(1);
  this->__fbthrift_field_float_field = static_cast<float>(1);
  this->__fbthrift_field_double_field = static_cast<double>(1);
  this->__fbthrift_field_string_field = apache::thrift::StringTraits<::std::string>::fromStringLiteral("1");
  this->__fbthrift_field_binary_field = apache::thrift::StringTraits<::std::string>::fromStringLiteral("1");
  this->__fbthrift_field_enum_field =  ::apache::thrift::test::MyEnum::ME1;
  this->__fbthrift_field_list_field.clear();
  this->__fbthrift_field_set_field.clear();
  this->__fbthrift_field_map_field.clear();
  __isset = {};
}

void StructWithDefaultStruct::__fbthrift_clear_terse_fields() {
}

bool StructWithDefaultStruct::__fbthrift_is_empty() const {
  return false;
}

bool StructWithDefaultStruct::operator==([[maybe_unused]] const StructWithDefaultStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool StructWithDefaultStruct::operator<([[maybe_unused]] const StructWithDefaultStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


bool StructWithDefaultStruct::get_bool_field() const {
  return __fbthrift_field_bool_field;
}

bool& StructWithDefaultStruct::set_bool_field(bool bool_field_) {
  bool_field_ref() = bool_field_;
  return __fbthrift_field_bool_field;
}

::std::int8_t StructWithDefaultStruct::get_byte_field() const {
  return __fbthrift_field_byte_field;
}

::std::int8_t& StructWithDefaultStruct::set_byte_field(::std::int8_t byte_field_) {
  byte_field_ref() = byte_field_;
  return __fbthrift_field_byte_field;
}

::std::int16_t StructWithDefaultStruct::get_short_field() const {
  return __fbthrift_field_short_field;
}

::std::int16_t& StructWithDefaultStruct::set_short_field(::std::int16_t short_field_) {
  short_field_ref() = short_field_;
  return __fbthrift_field_short_field;
}

::std::int32_t StructWithDefaultStruct::get_int_field() const {
  return __fbthrift_field_int_field;
}

::std::int32_t& StructWithDefaultStruct::set_int_field(::std::int32_t int_field_) {
  int_field_ref() = int_field_;
  return __fbthrift_field_int_field;
}

::std::int64_t StructWithDefaultStruct::get_long_field() const {
  return __fbthrift_field_long_field;
}

::std::int64_t& StructWithDefaultStruct::set_long_field(::std::int64_t long_field_) {
  long_field_ref() = long_field_;
  return __fbthrift_field_long_field;
}

float StructWithDefaultStruct::get_float_field() const {
  return __fbthrift_field_float_field;
}

float& StructWithDefaultStruct::set_float_field(float float_field_) {
  float_field_ref() = float_field_;
  return __fbthrift_field_float_field;
}

double StructWithDefaultStruct::get_double_field() const {
  return __fbthrift_field_double_field;
}

double& StructWithDefaultStruct::set_double_field(double double_field_) {
  double_field_ref() = double_field_;
  return __fbthrift_field_double_field;
}

::apache::thrift::test::MyEnum StructWithDefaultStruct::get_enum_field() const {
  return __fbthrift_field_enum_field;
}

::apache::thrift::test::MyEnum& StructWithDefaultStruct::set_enum_field(::apache::thrift::test::MyEnum enum_field_) {
  enum_field_ref() = enum_field_;
  return __fbthrift_field_enum_field;
}

const ::std::vector<::std::int16_t>& StructWithDefaultStruct::get_list_field() const& {
  return __fbthrift_field_list_field;
}

::std::vector<::std::int16_t> StructWithDefaultStruct::get_list_field() && {
  return static_cast<::std::vector<::std::int16_t>&&>(__fbthrift_field_list_field);
}

const ::std::set<::std::int16_t>& StructWithDefaultStruct::get_set_field() const& {
  return __fbthrift_field_set_field;
}

::std::set<::std::int16_t> StructWithDefaultStruct::get_set_field() && {
  return static_cast<::std::set<::std::int16_t>&&>(__fbthrift_field_set_field);
}

const ::std::map<::std::int16_t, ::std::int16_t>& StructWithDefaultStruct::get_map_field() const& {
  return __fbthrift_field_map_field;
}

::std::map<::std::int16_t, ::std::int16_t> StructWithDefaultStruct::get_map_field() && {
  return static_cast<::std::map<::std::int16_t, ::std::int16_t>&&>(__fbthrift_field_map_field);
}

void swap([[maybe_unused]] StructWithDefaultStruct& a, [[maybe_unused]] StructWithDefaultStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_bool_field, b.__fbthrift_field_bool_field);
  swap(a.__fbthrift_field_byte_field, b.__fbthrift_field_byte_field);
  swap(a.__fbthrift_field_short_field, b.__fbthrift_field_short_field);
  swap(a.__fbthrift_field_int_field, b.__fbthrift_field_int_field);
  swap(a.__fbthrift_field_long_field, b.__fbthrift_field_long_field);
  swap(a.__fbthrift_field_float_field, b.__fbthrift_field_float_field);
  swap(a.__fbthrift_field_double_field, b.__fbthrift_field_double_field);
  swap(a.__fbthrift_field_string_field, b.__fbthrift_field_string_field);
  swap(a.__fbthrift_field_binary_field, b.__fbthrift_field_binary_field);
  swap(a.__fbthrift_field_enum_field, b.__fbthrift_field_enum_field);
  swap(a.__fbthrift_field_list_field, b.__fbthrift_field_list_field);
  swap(a.__fbthrift_field_set_field, b.__fbthrift_field_set_field);
  swap(a.__fbthrift_field_map_field, b.__fbthrift_field_map_field);
  swap(a.__isset, b.__isset);
}


} // namespace apache::thrift::test

namespace apache::thrift::test { namespace {
[[maybe_unused]] FOLLY_ERASE void validateAdapters() {
}
}} // namespace apache::thrift::test
namespace apache::thrift::detail::annotation {
}
