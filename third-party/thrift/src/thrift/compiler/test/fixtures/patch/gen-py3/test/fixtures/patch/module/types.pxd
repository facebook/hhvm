#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from libc.stdint cimport (
    int8_t as cint8_t,
    int16_t as cint16_t,
    int32_t as cint32_t,
    int64_t as cint64_t,
    uint32_t as cuint32_t,
)
from libcpp.string cimport string
from libcpp cimport bool as cbool, nullptr, nullptr_t
from cpython cimport bool as pbool
from libcpp.memory cimport shared_ptr, unique_ptr
from libcpp.utility cimport move as cmove
from libcpp.vector cimport vector
from libcpp.set cimport set as cset
from libcpp.map cimport map as cmap, pair as cpair
from thrift.py3.exceptions cimport cTException
cimport folly.iobuf as _fbthrift_iobuf
cimport thrift.py3.exceptions
cimport thrift.py3.types
from thrift.py3.types cimport (
    bstring,
    bytes_to_string,
    field_ref as __field_ref,
    optional_field_ref as __optional_field_ref,
    required_field_ref as __required_field_ref,
    terse_field_ref as __terse_field_ref,
    union_field_ref as __union_field_ref,
    get_union_field_value as __get_union_field_value,
)
from thrift.py3.common cimport (
    RpcOptions as __RpcOptions,
    Protocol as __Protocol,
    cThriftMetadata as __fbthrift_cThriftMetadata,
    MetadataBox as __MetadataBox,
)
from folly.optional cimport cOptional as __cOptional
cimport facebook.thrift.annotation.thrift.types as _facebook_thrift_annotation_thrift_types
cimport apache.thrift.op.patch.types as _apache_thrift_op_patch_types

cimport test.fixtures.patch.module.types_fields as _fbthrift_types_fields

cdef extern from "src/gen-py3/module/types.h":
  pass

cdef extern from * nogil:
    cdef cppclass _std_unordered_set "::std::unordered_set"[T]:
        ctypedef T value_type
        ctypedef size_t size_type

        cppclass iterator:
            T& operator*()
            iterator operator++()
            bint operator==(iterator)
            bint operator!=(iterator)
        cppclass reverse_iterator:
            T& operator*()
            iterator operator++()
            bint operator==(reverse_iterator)
            bint operator!=(reverse_iterator)
        cppclass const_iterator(iterator):
            pass
        cppclass const_reverse_iterator(reverse_iterator):
            pass

        _std_unordered_set() except +
        _std_unordered_set(_std_unordered_set&) except +

        cpair[iterator, bint] insert(const T&) except +
        size_type size()
        size_type count(const T&)
        iterator begin()
        const_iterator const_begin "begin"()
        iterator end()
        const_iterator const_end "end"()
        reverse_iterator rbegin()
        const_reverse_iterator const_rbegin "rbegin"()
        reverse_iterator rend()
        const_reverse_iterator const_rend "rend"()
        void clear()
        bint empty()

cdef extern from *:
    ctypedef bstring _folly_IOBuf "::folly::IOBuf"




cdef extern from "src/gen-cpp2/module_metadata.h" namespace "apache::thrift::detail::md":
    cdef cppclass ExceptionMetadata[T]:
        @staticmethod
        void gen(__fbthrift_cThriftMetadata &metadata)
cdef extern from "src/gen-cpp2/module_metadata.h" namespace "apache::thrift::detail::md":
    cdef cppclass StructMetadata[T]:
        @staticmethod
        void gen(__fbthrift_cThriftMetadata &metadata)
cdef extern from "src/gen-cpp2/module_types_custom_protocol.h" namespace "::test::fixtures::patch":

    cdef cppclass cMyData "::test::fixtures::patch::MyData":
        cMyData() except +
        cMyData(const cMyData&) except +
        bint operator==(cMyData&)
        bint operator!=(cMyData&)
        bint operator<(cMyData&)
        bint operator>(cMyData&)
        bint operator<=(cMyData&)
        bint operator>=(cMyData&)
        __terse_field_ref[string] data1_ref "data1_ref" ()
        __terse_field_ref[cint32_t] data2_ref "data2_ref" ()

    cdef enum cInnerUnion__type "::test::fixtures::patch::InnerUnion::Type":
        cInnerUnion__type___EMPTY__ "::test::fixtures::patch::InnerUnion::Type::__EMPTY__",
        cInnerUnion__type_innerOption "::test::fixtures::patch::InnerUnion::Type::innerOption",

    cdef cppclass cInnerUnion "::test::fixtures::patch::InnerUnion":
        cInnerUnion() except +
        cInnerUnion(const cInnerUnion&) except +
        bint operator==(cInnerUnion&)
        bint operator!=(cInnerUnion&)
        bint operator<(cInnerUnion&)
        bint operator>(cInnerUnion&)
        bint operator<=(cInnerUnion&)
        bint operator>=(cInnerUnion&)
        cInnerUnion__type getType() const
        const string& get_innerOption "get_innerOption" () const
        string& set_innerOption "set_innerOption" (const string&)

    cdef enum cMyUnion__type "::test::fixtures::patch::MyUnion::Type":
        cMyUnion__type___EMPTY__ "::test::fixtures::patch::MyUnion::Type::__EMPTY__",
        cMyUnion__type_option1 "::test::fixtures::patch::MyUnion::Type::option1",
        cMyUnion__type_option2 "::test::fixtures::patch::MyUnion::Type::option2",
        cMyUnion__type_option3 "::test::fixtures::patch::MyUnion::Type::option3",

    cdef cppclass cMyUnion "::test::fixtures::patch::MyUnion":
        cMyUnion() except +
        cMyUnion(const cMyUnion&) except +
        bint operator==(cMyUnion&)
        bint operator!=(cMyUnion&)
        bint operator<(cMyUnion&)
        bint operator>(cMyUnion&)
        bint operator<=(cMyUnion&)
        bint operator>=(cMyUnion&)
        cMyUnion__type getType() const
        const string& get_option1 "get_option1" () const
        string& set_option1 "set_option1" (const string&)
        const cint32_t& get_option2 "get_option2" () const
        cint32_t& set_option2 "set_option2" (const cint32_t&)
        const cInnerUnion& get_option3 "get_option3" () const
        cInnerUnion& set_option3 "set_option3" (const cInnerUnion&)


    cdef cppclass cMyStruct "::test::fixtures::patch::MyStruct":
        cMyStruct() except +
        cMyStruct(const cMyStruct&) except +
        bint operator==(cMyStruct&)
        bint operator!=(cMyStruct&)
        bint operator<(cMyStruct&)
        bint operator>(cMyStruct&)
        bint operator<=(cMyStruct&)
        bint operator>=(cMyStruct&)
        __terse_field_ref[cbool] boolVal_ref "boolVal_ref" ()
        __terse_field_ref[cint8_t] byteVal_ref "byteVal_ref" ()
        __terse_field_ref[cint16_t] i16Val_ref "i16Val_ref" ()
        __terse_field_ref[cint32_t] i32Val_ref "i32Val_ref" ()
        __terse_field_ref[cint64_t] i64Val_ref "i64Val_ref" ()
        __terse_field_ref[float] floatVal_ref "floatVal_ref" ()
        __terse_field_ref[double] doubleVal_ref "doubleVal_ref" ()
        __terse_field_ref[string] stringVal_ref "stringVal_ref" ()
        __terse_field_ref[_folly_IOBuf] binaryVal_ref "binaryVal_ref" ()
        __terse_field_ref[cMyData] structVal_ref "structVal_ref" ()
        __optional_field_ref[cbool] optBoolVal_ref "optBoolVal_ref" ()
        __optional_field_ref[cint8_t] optByteVal_ref "optByteVal_ref" ()
        __optional_field_ref[cint16_t] optI16Val_ref "optI16Val_ref" ()
        __optional_field_ref[cint32_t] optI32Val_ref "optI32Val_ref" ()
        __optional_field_ref[cint64_t] optI64Val_ref "optI64Val_ref" ()
        __optional_field_ref[float] optFloatVal_ref "optFloatVal_ref" ()
        __optional_field_ref[double] optDoubleVal_ref "optDoubleVal_ref" ()
        __optional_field_ref[string] optStringVal_ref "optStringVal_ref" ()
        __optional_field_ref[_folly_IOBuf] optBinaryVal_ref "optBinaryVal_ref" ()
        __optional_field_ref[cMyData] optStructVal_ref "optStructVal_ref" ()
        __optional_field_ref[vector[cint16_t]] optListVal_ref "optListVal_ref" ()
        __optional_field_ref[cset[string]] optSetVal_ref "optSetVal_ref" ()
        __optional_field_ref[cmap[string,string]] optMapVal_ref "optMapVal_ref" ()
        __terse_field_ref[cMyUnion] unionVal_ref "unionVal_ref" ()




cdef class MyData(thrift.py3.types.Struct):
    cdef shared_ptr[cMyData] _cpp_obj
    cdef _fbthrift_types_fields.__MyData_FieldsSetter _fields_setter
    cdef inline object data1_impl(self)
    cdef inline object data2_impl(self)

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cMyData])

cdef class __InnerUnionType(thrift.py3.types.CompiledEnum):
    pass




cdef class InnerUnion(thrift.py3.types.Union):
    cdef shared_ptr[cInnerUnion] _cpp_obj
    cdef readonly __InnerUnionType type
    cdef readonly object value
    cdef _load_cache(InnerUnion self)

    @staticmethod
    cdef unique_ptr[cInnerUnion] _make_instance(
        cInnerUnion* base_instance,
        bytes innerOption
    ) except *

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cInnerUnion])

cdef class __MyUnionType(thrift.py3.types.CompiledEnum):
    pass




cdef class MyUnion(thrift.py3.types.Union):
    cdef shared_ptr[cMyUnion] _cpp_obj
    cdef readonly __MyUnionType type
    cdef readonly object value
    cdef _load_cache(MyUnion self)

    @staticmethod
    cdef unique_ptr[cMyUnion] _make_instance(
        cMyUnion* base_instance,
        str option1,
        object option2,
        InnerUnion option3
    ) except *

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cMyUnion])



cdef class MyStruct(thrift.py3.types.Struct):
    cdef shared_ptr[cMyStruct] _cpp_obj
    cdef _fbthrift_types_fields.__MyStruct_FieldsSetter _fields_setter
    cdef inline object boolVal_impl(self)
    cdef inline object byteVal_impl(self)
    cdef inline object i16Val_impl(self)
    cdef inline object i32Val_impl(self)
    cdef inline object i64Val_impl(self)
    cdef inline object floatVal_impl(self)
    cdef inline object doubleVal_impl(self)
    cdef inline object stringVal_impl(self)
    cdef inline object binaryVal_impl(self)
    cdef inline object structVal_impl(self)
    cdef inline object optBoolVal_impl(self)
    cdef inline object optByteVal_impl(self)
    cdef inline object optI16Val_impl(self)
    cdef inline object optI32Val_impl(self)
    cdef inline object optI64Val_impl(self)
    cdef inline object optFloatVal_impl(self)
    cdef inline object optDoubleVal_impl(self)
    cdef inline object optStringVal_impl(self)
    cdef inline object optBinaryVal_impl(self)
    cdef inline object optStructVal_impl(self)
    cdef inline object optListVal_impl(self)
    cdef inline object optSetVal_impl(self)
    cdef inline object optMapVal_impl(self)
    cdef inline object unionVal_impl(self)
    cdef MyData __fbthrift_cached_structVal
    cdef MyData __fbthrift_cached_optStructVal
    cdef List__i16 __fbthrift_cached_optListVal
    cdef Set__string __fbthrift_cached_optSetVal
    cdef Map__string_string __fbthrift_cached_optMapVal
    cdef MyUnion __fbthrift_cached_unionVal

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cMyStruct])


cdef class List__i16(thrift.py3.types.List):
    cdef shared_ptr[vector[cint16_t]] _cpp_obj
    @staticmethod
    cdef _fbthrift_create(shared_ptr[vector[cint16_t]])
    @staticmethod
    cdef shared_ptr[vector[cint16_t]] _make_instance(object items) except *

cdef class Set__string(thrift.py3.types.Set):
    cdef shared_ptr[cset[string]] _cpp_obj
    @staticmethod
    cdef _fbthrift_create(shared_ptr[cset[string]])
    @staticmethod
    cdef shared_ptr[cset[string]] _make_instance(object items) except *

cdef class Map__string_string(thrift.py3.types.Map):
    cdef shared_ptr[cmap[string,string]] _cpp_obj
    @staticmethod
    cdef _fbthrift_create(shared_ptr[cmap[string,string]])
    @staticmethod
    cdef shared_ptr[cmap[string,string]] _make_instance(object items) except *

cdef class _std_unordered_set__Set__string(thrift.py3.types.Set):
    cdef shared_ptr[_std_unordered_set[string]] _cpp_obj
    @staticmethod
    cdef _fbthrift_create(shared_ptr[_std_unordered_set[string]])
    @staticmethod
    cdef shared_ptr[_std_unordered_set[string]] _make_instance(object items) except *


