/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/field_interceptor/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>

namespace apache::thrift {
namespace ident {
struct access_field;
struct access_shared_field;
struct access_optional_shared_field;
struct access_shared_const_field;
struct access_optional_shared_const_field;
struct access_optional_boxed_field;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_access_field
#define APACHE_THRIFT_ACCESSOR_access_field
APACHE_THRIFT_DEFINE_ACCESSOR(access_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_access_shared_field
#define APACHE_THRIFT_ACCESSOR_access_shared_field
APACHE_THRIFT_DEFINE_ACCESSOR(access_shared_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_access_optional_shared_field
#define APACHE_THRIFT_ACCESSOR_access_optional_shared_field
APACHE_THRIFT_DEFINE_ACCESSOR(access_optional_shared_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_access_shared_const_field
#define APACHE_THRIFT_ACCESSOR_access_shared_const_field
APACHE_THRIFT_DEFINE_ACCESSOR(access_shared_const_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_access_optional_shared_const_field
#define APACHE_THRIFT_ACCESSOR_access_optional_shared_const_field
APACHE_THRIFT_DEFINE_ACCESSOR(access_optional_shared_const_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_access_optional_boxed_field
#define APACHE_THRIFT_ACCESSOR_access_optional_boxed_field
APACHE_THRIFT_DEFINE_ACCESSOR(access_optional_boxed_field);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
// END declare_enums
// BEGIN forward_declare
namespace facebook::thrift::test {
class InterceptedFields;
} // namespace facebook::thrift::test
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
template<>
struct is_cpp_ref_field_optional<::facebook::thrift::test::InterceptedFields,::apache::thrift::type::field_id<3>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::facebook::thrift::test::InterceptedFields,::apache::thrift::type::field_id<5>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::facebook::thrift::test::InterceptedFields,::apache::thrift::type::field_id<6>> : std::true_type{};
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace facebook::thrift::test {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;


/** Glean {"file": "thrift/compiler/test/fixtures/field_interceptor/src/module.thrift", "name": "InterceptedFields", "kind": "struct" } */
class InterceptedFields final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 6;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::access_field,
    ::apache::thrift::ident::access_shared_field,
    ::apache::thrift::ident::access_optional_shared_field,
    ::apache::thrift::ident::access_shared_const_field,
    ::apache::thrift::ident::access_optional_shared_const_field,
    ::apache::thrift::ident::access_optional_boxed_field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = InterceptedFields;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  InterceptedFields();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  InterceptedFields(apache::thrift::FragileConstructor, ::std::int32_t access_field__arg, ::std::shared_ptr<::std::int32_t> access_shared_field__arg, ::std::shared_ptr<::std::int32_t> access_optional_shared_field__arg, ::std::shared_ptr<const ::std::int32_t> access_shared_const_field__arg, ::std::shared_ptr<const ::std::int32_t> access_optional_shared_const_field__arg, ::apache::thrift::detail::boxed_value_ptr<::std::int32_t> access_optional_boxed_field__arg);

  InterceptedFields(InterceptedFields&&) noexcept;

  InterceptedFields(const InterceptedFields& src);


  InterceptedFields& operator=(InterceptedFields&&) noexcept;
  InterceptedFields& operator=(const InterceptedFields& src);

  ~InterceptedFields();

 private:
  ::std::int32_t __fbthrift_field_access_field;
 private:
  ::std::shared_ptr<::std::int32_t> __fbthrift_field_access_shared_field;
 private:
  ::std::shared_ptr<::std::int32_t> __fbthrift_field_access_optional_shared_field;
 private:
  ::std::shared_ptr<const ::std::int32_t> __fbthrift_field_access_shared_const_field;
 private:
  ::std::shared_ptr<const ::std::int32_t> __fbthrift_field_access_optional_shared_const_field;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::std::int32_t> __fbthrift_field_access_optional_boxed_field;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const InterceptedFields&) const;
  bool operator<(const InterceptedFields&) const;

  /** Glean { "field": "access_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_NOINLINE ::apache::thrift::field_ref<const fbthrift_T&> access_field_ref() const& {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 1>{*this});
    return {this->__fbthrift_field_access_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "access_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_NOINLINE ::apache::thrift::field_ref<fbthrift_T&> access_field_ref() & {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 1>{*this});
    return {this->__fbthrift_field_access_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "access_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_NOINLINE ::apache::thrift::field_ref<fbthrift_T&&> access_field_ref() && {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 1>{*this});
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_access_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "access_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_NOINLINE ::apache::thrift::field_ref<const fbthrift_T&> access_field() const& {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 1>{*this});
    return {this->__fbthrift_field_access_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "access_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_NOINLINE ::apache::thrift::field_ref<fbthrift_T&> access_field() & {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 1>{*this});
    return {this->__fbthrift_field_access_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "access_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_NOINLINE ::apache::thrift::field_ref<fbthrift_T&&> access_field() && {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 1>{*this});
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_access_field), __isset.at(0), __isset.bit(0)};
  }
  /** Glean { "field": "access_shared_field" } */
  FOLLY_ERASE ::std::shared_ptr<::std::int32_t>& access_shared_field_ref() & {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_shared_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 2>{*this});
    return __fbthrift_field_access_shared_field;
  }

  /** Glean { "field": "access_shared_field" } */
  FOLLY_ERASE const ::std::shared_ptr<::std::int32_t>& access_shared_field_ref() const& {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_shared_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 2>{*this});
    return __fbthrift_field_access_shared_field;
  }

  /** Glean { "field": "access_shared_field" } */
  FOLLY_ERASE ::std::shared_ptr<::std::int32_t>&& access_shared_field_ref() && {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_shared_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 2>{*this});
    return static_cast<::std::shared_ptr<::std::int32_t>&&>(__fbthrift_field_access_shared_field);
  }

  /** Glean { "field": "access_shared_field" } */
  FOLLY_ERASE const ::std::shared_ptr<::std::int32_t>&& access_shared_field_ref() const&& {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_shared_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 2>{*this});
    return static_cast<const ::std::shared_ptr<::std::int32_t>&&>(__fbthrift_field_access_shared_field);
  }

  /** Glean { "field": "access_shared_field" } */
  FOLLY_ERASE ::std::shared_ptr<::std::int32_t>& access_shared_field() & {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_shared_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 2>{*this});
    return __fbthrift_field_access_shared_field;
  }

  /** Glean { "field": "access_shared_field" } */
  FOLLY_ERASE const ::std::shared_ptr<::std::int32_t>& access_shared_field() const& {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_shared_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 2>{*this});
    return __fbthrift_field_access_shared_field;
  }

  /** Glean { "field": "access_shared_field" } */
  FOLLY_ERASE ::std::shared_ptr<::std::int32_t>&& access_shared_field() && {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_shared_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 2>{*this});
    return static_cast<::std::shared_ptr<::std::int32_t>&&>(__fbthrift_field_access_shared_field);
  }

  /** Glean { "field": "access_shared_field" } */
  FOLLY_ERASE const ::std::shared_ptr<::std::int32_t>&& access_shared_field() const&& {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_shared_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 2>{*this});
    return static_cast<const ::std::shared_ptr<::std::int32_t>&&>(__fbthrift_field_access_shared_field);
  }
  /** Glean { "field": "access_optional_shared_field" } */
  FOLLY_ERASE ::std::shared_ptr<::std::int32_t>& access_optional_shared_field_ref() & {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_optional_shared_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 3>{*this});
    return __fbthrift_field_access_optional_shared_field;
  }

  /** Glean { "field": "access_optional_shared_field" } */
  FOLLY_ERASE const ::std::shared_ptr<::std::int32_t>& access_optional_shared_field_ref() const& {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_optional_shared_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 3>{*this});
    return __fbthrift_field_access_optional_shared_field;
  }

  /** Glean { "field": "access_optional_shared_field" } */
  FOLLY_ERASE ::std::shared_ptr<::std::int32_t>&& access_optional_shared_field_ref() && {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_optional_shared_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 3>{*this});
    return static_cast<::std::shared_ptr<::std::int32_t>&&>(__fbthrift_field_access_optional_shared_field);
  }

  /** Glean { "field": "access_optional_shared_field" } */
  FOLLY_ERASE const ::std::shared_ptr<::std::int32_t>&& access_optional_shared_field_ref() const&& {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_optional_shared_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 3>{*this});
    return static_cast<const ::std::shared_ptr<::std::int32_t>&&>(__fbthrift_field_access_optional_shared_field);
  }

  /** Glean { "field": "access_optional_shared_field" } */
  FOLLY_ERASE ::std::shared_ptr<::std::int32_t>& access_optional_shared_field() & {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_optional_shared_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 3>{*this});
    return __fbthrift_field_access_optional_shared_field;
  }

  /** Glean { "field": "access_optional_shared_field" } */
  FOLLY_ERASE const ::std::shared_ptr<::std::int32_t>& access_optional_shared_field() const& {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_optional_shared_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 3>{*this});
    return __fbthrift_field_access_optional_shared_field;
  }

  /** Glean { "field": "access_optional_shared_field" } */
  FOLLY_ERASE ::std::shared_ptr<::std::int32_t>&& access_optional_shared_field() && {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_optional_shared_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 3>{*this});
    return static_cast<::std::shared_ptr<::std::int32_t>&&>(__fbthrift_field_access_optional_shared_field);
  }

  /** Glean { "field": "access_optional_shared_field" } */
  FOLLY_ERASE const ::std::shared_ptr<::std::int32_t>&& access_optional_shared_field() const&& {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_optional_shared_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 3>{*this});
    return static_cast<const ::std::shared_ptr<::std::int32_t>&&>(__fbthrift_field_access_optional_shared_field);
  }
  /** Glean { "field": "access_shared_const_field" } */
  FOLLY_ERASE ::std::shared_ptr<const ::std::int32_t>& access_shared_const_field_ref() & {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_shared_const_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 4>{*this});
    return __fbthrift_field_access_shared_const_field;
  }

  /** Glean { "field": "access_shared_const_field" } */
  FOLLY_ERASE const ::std::shared_ptr<const ::std::int32_t>& access_shared_const_field_ref() const& {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_shared_const_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 4>{*this});
    return __fbthrift_field_access_shared_const_field;
  }

  /** Glean { "field": "access_shared_const_field" } */
  FOLLY_ERASE ::std::shared_ptr<const ::std::int32_t>&& access_shared_const_field_ref() && {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_shared_const_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 4>{*this});
    return static_cast<::std::shared_ptr<const ::std::int32_t>&&>(__fbthrift_field_access_shared_const_field);
  }

  /** Glean { "field": "access_shared_const_field" } */
  FOLLY_ERASE const ::std::shared_ptr<const ::std::int32_t>&& access_shared_const_field_ref() const&& {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_shared_const_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 4>{*this});
    return static_cast<const ::std::shared_ptr<const ::std::int32_t>&&>(__fbthrift_field_access_shared_const_field);
  }

  /** Glean { "field": "access_shared_const_field" } */
  FOLLY_ERASE ::std::shared_ptr<const ::std::int32_t>& access_shared_const_field() & {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_shared_const_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 4>{*this});
    return __fbthrift_field_access_shared_const_field;
  }

  /** Glean { "field": "access_shared_const_field" } */
  FOLLY_ERASE const ::std::shared_ptr<const ::std::int32_t>& access_shared_const_field() const& {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_shared_const_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 4>{*this});
    return __fbthrift_field_access_shared_const_field;
  }

  /** Glean { "field": "access_shared_const_field" } */
  FOLLY_ERASE ::std::shared_ptr<const ::std::int32_t>&& access_shared_const_field() && {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_shared_const_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 4>{*this});
    return static_cast<::std::shared_ptr<const ::std::int32_t>&&>(__fbthrift_field_access_shared_const_field);
  }

  /** Glean { "field": "access_shared_const_field" } */
  FOLLY_ERASE const ::std::shared_ptr<const ::std::int32_t>&& access_shared_const_field() const&& {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_shared_const_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 4>{*this});
    return static_cast<const ::std::shared_ptr<const ::std::int32_t>&&>(__fbthrift_field_access_shared_const_field);
  }
  /** Glean { "field": "access_optional_shared_const_field" } */
  FOLLY_ERASE ::std::shared_ptr<const ::std::int32_t>& access_optional_shared_const_field_ref() & {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_optional_shared_const_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 5>{*this});
    return __fbthrift_field_access_optional_shared_const_field;
  }

  /** Glean { "field": "access_optional_shared_const_field" } */
  FOLLY_ERASE const ::std::shared_ptr<const ::std::int32_t>& access_optional_shared_const_field_ref() const& {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_optional_shared_const_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 5>{*this});
    return __fbthrift_field_access_optional_shared_const_field;
  }

  /** Glean { "field": "access_optional_shared_const_field" } */
  FOLLY_ERASE ::std::shared_ptr<const ::std::int32_t>&& access_optional_shared_const_field_ref() && {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_optional_shared_const_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 5>{*this});
    return static_cast<::std::shared_ptr<const ::std::int32_t>&&>(__fbthrift_field_access_optional_shared_const_field);
  }

  /** Glean { "field": "access_optional_shared_const_field" } */
  FOLLY_ERASE const ::std::shared_ptr<const ::std::int32_t>&& access_optional_shared_const_field_ref() const&& {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_optional_shared_const_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 5>{*this});
    return static_cast<const ::std::shared_ptr<const ::std::int32_t>&&>(__fbthrift_field_access_optional_shared_const_field);
  }

  /** Glean { "field": "access_optional_shared_const_field" } */
  FOLLY_ERASE ::std::shared_ptr<const ::std::int32_t>& access_optional_shared_const_field() & {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_optional_shared_const_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 5>{*this});
    return __fbthrift_field_access_optional_shared_const_field;
  }

  /** Glean { "field": "access_optional_shared_const_field" } */
  FOLLY_ERASE const ::std::shared_ptr<const ::std::int32_t>& access_optional_shared_const_field() const& {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_optional_shared_const_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 5>{*this});
    return __fbthrift_field_access_optional_shared_const_field;
  }

  /** Glean { "field": "access_optional_shared_const_field" } */
  FOLLY_ERASE ::std::shared_ptr<const ::std::int32_t>&& access_optional_shared_const_field() && {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_optional_shared_const_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 5>{*this});
    return static_cast<::std::shared_ptr<const ::std::int32_t>&&>(__fbthrift_field_access_optional_shared_const_field);
  }

  /** Glean { "field": "access_optional_shared_const_field" } */
  FOLLY_ERASE const ::std::shared_ptr<const ::std::int32_t>&& access_optional_shared_const_field() const&& {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_optional_shared_const_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 5>{*this});
    return static_cast<const ::std::shared_ptr<const ::std::int32_t>&&>(__fbthrift_field_access_optional_shared_const_field);
  }

  /** Glean { "field": "access_optional_boxed_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> access_optional_boxed_field_ref() const& {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_optional_boxed_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 6>{*this});
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_access_optional_boxed_field};
  }

  /** Glean { "field": "access_optional_boxed_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> access_optional_boxed_field_ref() & {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_optional_boxed_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 6>{*this});
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_access_optional_boxed_field};
  }

  /** Glean { "field": "access_optional_boxed_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> access_optional_boxed_field_ref() && {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_optional_boxed_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 6>{*this});
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_access_optional_boxed_field)};
  }

  /** Glean { "field": "access_optional_boxed_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> access_optional_boxed_field() const& {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_optional_boxed_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 6>{*this});
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_access_optional_boxed_field};
  }

  /** Glean { "field": "access_optional_boxed_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> access_optional_boxed_field() & {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_optional_boxed_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 6>{*this});
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_access_optional_boxed_field};
  }

  /** Glean { "field": "access_optional_boxed_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> access_optional_boxed_field() && {
    my::FieldInterceptor::interceptThriftFieldAccess(this->__fbthrift_field_access_optional_boxed_field, ::apache::thrift::FieldContext<std::remove_reference<decltype(*this)>::type, 6>{*this});
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_access_optional_boxed_field)};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<InterceptedFields>;
  friend void swap(InterceptedFields& a, InterceptedFields& b);
};

template <class Protocol_>
unsigned long InterceptedFields::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace facebook::thrift::test

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::facebook::thrift::test::InterceptedFields, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -6573218540702524643;
  static constexpr ::std::string_view definitionKey = {"\xc9\xa5\x23\x6e\xa3\x81\x1d\xb7\x78\xdb\x56\x1d\x43\xd3\x63\x8f", 16};
};
} // namespace apache::thrift::detail
