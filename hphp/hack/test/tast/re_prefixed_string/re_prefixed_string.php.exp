Errors:
  [26:13-36] Bad regex pattern; two named subpatterns have the same name [14].
  [27:13-30] Bad regex pattern; group name must start with a non-digit [5].
  [28:13-19] Bad regex pattern; \c at end of pattern [2].
  [47:13-20] Bad regex pattern; Missing delimiter(s).
  [49:13-21] Bad regex pattern; Missing delimiter(s).
  [51:13-22] Bad regex pattern; Missing delimiter(s).
  [52:13-21] Bad regex pattern; Missing delimiter(s).
  [55:13-22] Bad regex pattern; Missing delimiter(s).
  [57:14-25] Bad regex pattern; Missing delimiter(s).
  [58:14-22] Bad regex pattern; Missing delimiter(s).
[(Fun
    { f_span = [3:1-16:2]; f_annotation = (); f_mode = Mstrict;
      f_ret = ((void), (Some ([3:15-19], (Hprim Tvoid))));
      f_name = ([3:10-11], "\\f"); f_tparams = []; f_where_constraints = [];
      f_variadic = FVnonVariadic; f_params = []; f_cap = ((nothing), None);
      f_unsafe_cap = ((mixed), None);
      f_body =
      { fb_ast =
        [([4:3-20],
          (Expr
             (([4:3-19], HH\Lib\Regex\Pattern<shape(0 => string)>),
              (Binop ((Eq None),
                 (([4:3-5], HH\Lib\Regex\Pattern<shape(0 => string)>),
                  (Lvar ([4:3-5], $x))),
                 (([4:8-19], HH\Lib\Regex\Pattern<shape(0 => string)>),
                  (PrefixedString ("re",
                     (([4:10-19], string), (String "/Hello/")))))
                 )))));
          ([7:3-20],
           (Expr
              (([7:3-19], shape(0 => string)),
               (Binop ((Eq None),
                  (([7:3-5], shape(0 => string)), (Lvar ([7:3-5], $y))),
                  (([7:8-19], shape(0 => string)),
                   (Call (
                      (([7:8-15], (function<T as shape(...)>(HH\Lib\Regex\Pattern<shape(0 => string)> $pattern): shape(0 => string))),
                       (Id ([7:8-15], "\\goodbye"))),
                      [((shape(0 => string)),
                        ([7:8-15], (Happly (([Pos.none], "_"), []))))],
                      [(([7:16-18], HH\Lib\Regex\Pattern<shape(0 => string)>),
                        (Lvar ([7:16-18], $x)))],
                      None)))
                  )))));
          ([12:3-16],
           (Expr
              (([12:3-15], string),
               (Binop ((Eq None),
                  (([12:3-7], string), (Lvar ([12:3-7], $y_0))),
                  (([12:10-15], string),
                   (Array_get (
                      (([12:10-12], shape(0 => string)),
                       (Lvar ([12:10-12], $y))),
                      (Some (([12:13-14], int), (Int "0"))))))
                  )))));
          ([15:3-22],
           (Expr
              (([15:3-21], string),
               (Binop ((Eq None),
                  (([15:3-5], string), (Lvar ([15:3-5], $z))),
                  (([15:8-21], string),
                   (Binop (Dot,
                      (([15:8-10], HH\Lib\Regex\Pattern<shape(0 => string)>),
                       (Lvar ([15:8-10], $x))),
                      (([15:11-21], string), (String ", world!")))))
                  )))))
          ];
        fb_annotation = () };
      f_fun_kind = FSync; f_user_attributes = []; f_file_attributes = [];
      f_external = false;
      f_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>;
        ns_record_def_uses = <opaque>; ns_fun_uses = <opaque>;
        ns_const_uses = <opaque>; ns_name = None; ns_auto_ns_map = [];
        ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
      f_doc_comment = None; f_static = false });
  (Fun
     { f_span = [18:1-20:2]; f_annotation = (); f_mode = Mstrict;
       f_ret = ((T), (Some ([18:78-79], (Habstr ("T", [])))));
       f_name = ([18:10-17], "\\goodbye");
       f_tparams =
       [{ tp_variance = Invariant; tp_name = ([18:18-19], "T");
          tp_parameters = [];
          tp_constraints =
          [(Constraint_as,
            ([18:23-41],
             (Happly (([18:23-41], "\\HH\\Lib\\Regex\\Match"), []))))
            ];
          tp_reified = Erased; tp_user_attributes = [] }
         ];
       f_where_constraints = []; f_variadic = FVnonVariadic;
       f_params =
       [{ param_annotation = ([18:67-75], HH\Lib\Regex\Pattern<T>);
          param_type_hint =
          ((HH\Lib\Regex\Pattern<T>),
           (Some ([18:43-66],
                  (Happly (([18:43-63], "\\HH\\Lib\\Regex\\Pattern"),
                     [([18:64-65], (Habstr ("T", [])))])))));
          param_is_variadic = false; param_pos = [18:67-75];
          param_name = "$pattern"; param_expr = None; param_callconv = None;
          param_user_attributes = []; param_visibility = None }
         ];
       f_cap = ((nothing), None); f_unsafe_cap = ((mixed), None);
       f_body =
       { fb_ast =
         [([19:3-25],
           (Throw
              (([19:9-24], Exception),
               (New (
                  (([19:13-22], Exception), (CI ([19:13-22], "\\Exception"))),
                  [], [], None,
                  ([19:13-22], (function(string $message=_, int $code=_, ?Exception $previous=_): void))
                  )))))
           ];
         fb_annotation = () };
       f_fun_kind = FSync; f_user_attributes = []; f_file_attributes = [];
       f_external = false;
       f_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>;
         ns_record_def_uses = <opaque>; ns_fun_uses = <opaque>;
         ns_const_uses = <opaque>; ns_name = None; ns_auto_ns_map = [];
         ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
       f_doc_comment = None; f_static = false });
  (Fun
     { f_span = [24:1-42:2]; f_annotation = (); f_mode = Mstrict;
       f_ret = ((void), (Some ([24:25-29], (Hprim Tvoid))));
       f_name = ([24:10-21], "\\bad_pattern"); f_tparams = [];
       f_where_constraints = []; f_variadic = FVnonVariadic; f_params = [];
       f_cap = ((nothing), None); f_unsafe_cap = ((mixed), None);
       f_body =
       { fb_ast =
         [([25:3-34],
           (Expr
              (([25:3-33], HH\Lib\Regex\Pattern<shape(0 => string, 1 => string, 'o' => string)>),
               (Binop ((Eq None),
                  (([25:3-9], HH\Lib\Regex\Pattern<shape(0 => string, 1 => string, 'o' => string)>),
                   (Lvar ([25:3-9], $good0))),
                  (([25:12-33], HH\Lib\Regex\Pattern<shape(0 => string, 1 => string, 'o' => string)>),
                   (PrefixedString ("re",
                      (([25:14-33], string), (String "/Hel(\\D)(?'o'\\D)/"))
                      )))
                  )))));
           ([26:3-37],
            (Expr
               (([26:3-36], _),
                (Binop ((Eq None), (([26:3-8], _), (Lvar ([26:3-8], $bad1))),
                   (([26:13-36], _), (String "/He(?'l'\\D)(?'l'\\D)o/")))))));
           ([27:3-31],
            (Expr
               (([27:3-30], _),
                (Binop ((Eq None), (([27:3-8], _), (Lvar ([27:3-8], $bad2))),
                   (([27:13-30], _), (String "/He(?'42'\\D)lo/")))))));
           ([28:3-20],
            (Expr
               (([28:3-19], _),
                (Binop ((Eq None), (([28:3-8], _), (Lvar ([28:3-8], $bad3))),
                   (([28:13-19], _), (String "/\\c/")))))));
           ([29:3-65],
            (Expr
               (([29:3-64], HH\Lib\Regex\Pattern<shape(0 => string, 2 => string, 4 => string, 5 => string, 'one' => string, 'six' => string, 'three' => string)>),
                (Binop ((Eq None),
                   (([29:3-9], HH\Lib\Regex\Pattern<shape(0 => string, 2 => string, 4 => string, 5 => string, 'one' => string, 'six' => string, 'three' => string)>),
                    (Lvar ([29:3-9], $good4))),
                   (([29:12-64], HH\Lib\Regex\Pattern<shape(0 => string, 2 => string, 4 => string, 5 => string, 'one' => string, 'six' => string, 'three' => string)>),
                    (PrefixedString ("re",
                       (([29:14-64], string),
                        (String
                           "/He(?'one'\\D)(\\D)(?'three'\\D)(\\D)(\\D)(?'six'\\D)/"))
                       )))
                   )))));
           ([30:3-40],
            (Expr
               (([30:3-39], HH\Lib\Regex\Pattern<shape(0 => string, 1 => string, 3 => string, 'c' => string, 'e' => string)>),
                (Binop ((Eq None),
                   (([30:3-9], HH\Lib\Regex\Pattern<shape(0 => string, 1 => string, 3 => string, 'c' => string, 'e' => string)>),
                    (Lvar ([30:3-9], $good5))),
                   (([30:12-39], HH\Lib\Regex\Pattern<shape(0 => string, 1 => string, 3 => string, 'c' => string, 'e' => string)>),
                    (PrefixedString ("re",
                       (([30:14-39], string),
                        (String "/a(b)(?<c>c)(d)(?<e>e)/"))
                       )))
                   )))));
           ([31:3-24],
            (Expr
               (([31:3-23], HH\Lib\Regex\Pattern<shape(0 => string)>),
                (Binop ((Eq None),
                   (([31:3-9], HH\Lib\Regex\Pattern<shape(0 => string)>),
                    (Lvar ([31:3-9], $good6))),
                   (([31:12-23], HH\Lib\Regex\Pattern<shape(0 => string)>),
                    (PrefixedString ("re",
                       (([31:14-23], string), (String "/Hello/")))))
                   )))));
           ([32:3-48],
            (Expr
               (([32:3-47], HH\Lib\Regex\Pattern<shape(0 => string, 'b' => string, 'c' => string, 'd' => string, 'e' => string)>),
                (Binop ((Eq None),
                   (([32:3-9], HH\Lib\Regex\Pattern<shape(0 => string, 'b' => string, 'c' => string, 'd' => string, 'e' => string)>),
                    (Lvar ([32:3-9], $good7))),
                   (([32:12-47], HH\Lib\Regex\Pattern<shape(0 => string, 'b' => string, 'c' => string, 'd' => string, 'e' => string)>),
                    (PrefixedString ("re",
                       (([32:14-47], string),
                        (String "/a(?<b>b)(?<c>c)(?<d>d)(?<e>e)/"))
                       )))
                   )))));
           ([33:3-31],
            (Expr
               (([33:3-30], HH\Lib\Regex\Pattern<shape(0 => string, 1 => string, 2 => string, 3 => string)>),
                (Binop ((Eq None),
                   (([33:3-9], HH\Lib\Regex\Pattern<shape(0 => string, 1 => string, 2 => string, 3 => string)>),
                    (Lvar ([33:3-9], $good8))),
                   (([33:12-30], HH\Lib\Regex\Pattern<shape(0 => string, 1 => string, 2 => string, 3 => string)>),
                    (PrefixedString ("re",
                       (([33:14-30], string), (String "/a(b)(c)(d)?e/")))))
                   )))));
           ([34:3-50],
            (Expr
               (([34:3-49], HH\Lib\Regex\Pattern<shape(0 => string, 1 => string)>),
                (Binop ((Eq None),
                   (([34:3-9], HH\Lib\Regex\Pattern<shape(0 => string, 1 => string)>),
                    (Lvar ([34:3-9], $good9))),
                   (([34:12-49], HH\Lib\Regex\Pattern<shape(0 => string, 1 => string)>),
                    (PrefixedString ("re",
                       (([34:14-49], string),
                        (String "/WoS Action: .*Disable.+\\[(\\w+)/s"))
                       )))
                   )))));
           ([35:3-70],
            (Expr
               (([35:3-69], HH\Lib\Regex\Pattern<shape(0 => string)>),
                (Binop ((Eq None),
                   (([35:3-10], HH\Lib\Regex\Pattern<shape(0 => string)>),
                    (Lvar ([35:3-10], $good10))),
                   (([35:13-69], HH\Lib\Regex\Pattern<shape(0 => string)>),
                    (PrefixedString ("re",
                       (([35:15-69], string),
                        (String
                           "/User disabled for having at least \\d+ spam reports/"))
                       )))
                   )))));
           ([36:3-39],
            (Expr
               (([36:3-38], HH\Lib\Regex\Pattern<shape(0 => string)>),
                (Binop ((Eq None),
                   (([36:3-10], HH\Lib\Regex\Pattern<shape(0 => string)>),
                    (Lvar ([36:3-10], $good11))),
                   (([36:13-38], HH\Lib\Regex\Pattern<shape(0 => string)>),
                    (PrefixedString ("re",
                       (([36:15-38], string),
                        (String "/(?<!\\w)youtube.com$/"))
                       )))
                   )))));
           ([37:3-54],
            (Expr
               (([37:3-53], HH\Lib\Regex\Pattern<shape(0 => string, 2 => string, 3 => string, 4 => string, 'version' => string)>),
                (Binop ((Eq None),
                   (([37:3-10], HH\Lib\Regex\Pattern<shape(0 => string, 2 => string, 3 => string, 4 => string, 'version' => string)>),
                    (Lvar ([37:3-10], $good12))),
                   (([37:13-53], HH\Lib\Regex\Pattern<shape(0 => string, 2 => string, 3 => string, 4 => string, 'version' => string)>),
                    (PrefixedString ("re",
                       (([37:15-53], string),
                        (String "/.+(?P<version>(:s(\\d)+)*:c(\\d)+)$/U"))
                       )))
                   )))));
           ([38:3-49],
            (Expr
               (([38:3-48], HH\Lib\Regex\Pattern<shape(0 => string, 1 => string, 'm' => string, 's' => string)>),
                (Binop ((Eq None),
                   (([38:3-10], HH\Lib\Regex\Pattern<shape(0 => string, 1 => string, 'm' => string, 's' => string)>),
                    (Lvar ([38:3-10], $good13))),
                   (([38:13-48], HH\Lib\Regex\Pattern<shape(0 => string, 1 => string, 'm' => string, 's' => string)>),
                    (PrefixedString ("re",
                       (([38:15-48], string),
                        (String "/^t=((?<m>\\d+)m)?(?<s>\\d+)s?$/i"))
                       )))
                   )))));
           ([39:3-47],
            (Expr
               (([39:3-46], HH\Lib\Regex\Pattern<shape(0 => string)>),
                (Binop ((Eq None),
                   (([39:3-10], HH\Lib\Regex\Pattern<shape(0 => string)>),
                    (Lvar ([39:3-10], $good14))),
                   (([39:13-46], HH\Lib\Regex\Pattern<shape(0 => string)>),
                    (PrefixedString ("re",
                       (([39:15-46], string),
                        (String "/(?<=\\(currently )[^)](?=\\))/"))
                       )))
                   )))));
           ([40:3-48],
            (Expr
               (([40:3-47], HH\Lib\Regex\Pattern<shape(0 => string)>),
                (Binop ((Eq None),
                   (([40:3-10], HH\Lib\Regex\Pattern<shape(0 => string)>),
                    (Lvar ([40:3-10], $good15))),
                   (([40:13-47], HH\Lib\Regex\Pattern<shape(0 => string)>),
                    (PrefixedString ("re",
                       (([40:15-47], string),
                        (String "/(?<=\\(currently )[^)]+(?=\\))/"))
                       )))
                   )))));
           ([41:3-74],
            (Expr
               (([41:3-73], HH\Lib\Regex\Pattern<shape(0 => string, 1 => string, 10 => string, 11 => string, 12 => string, 13 => string, 2 => string, 3 => string, 5 => string, 6 => string, 7 => string, 9 => string, 'd' => string, 'h' => string, 'n' => string)>),
                (Binop ((Eq None),
                   (([41:3-10], HH\Lib\Regex\Pattern<shape(0 => string, 1 => string, 10 => string, 11 => string, 12 => string, 13 => string, 2 => string, 3 => string, 5 => string, 6 => string, 7 => string, 9 => string, 'd' => string, 'h' => string, 'n' => string)>),
                    (Lvar ([41:3-10], $good16))),
                   (([41:13-73], HH\Lib\Regex\Pattern<shape(0 => string, 1 => string, 10 => string, 11 => string, 12 => string, 13 => string, 2 => string, 3 => string, 5 => string, 6 => string, 7 => string, 9 => string, 'd' => string, 'h' => string, 'n' => string)>),
                    (PrefixedString ("re",
                       (([41:15-73], string),
                        (String
                           "/(a)(b)(c)(?<d>d)(e)(f)(g)(?<h>h)(i)(j)(k)(l)(m)(?<n>n)/"))
                       )))
                   )))))
           ];
         fb_annotation = () };
       f_fun_kind = FSync; f_user_attributes = []; f_file_attributes = [];
       f_external = false;
       f_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>;
         ns_record_def_uses = <opaque>; ns_fun_uses = <opaque>;
         ns_const_uses = <opaque>; ns_name = None; ns_auto_ns_map = [];
         ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
       f_doc_comment = None; f_static = false });
  (Fun
     { f_span = [46:1-59:2]; f_annotation = (); f_mode = Mstrict;
       f_ret = ((void), (Some ([46:31-35], (Hprim Tvoid))));
       f_name = ([46:10-27], "\\missing_delimiter"); f_tparams = [];
       f_where_constraints = []; f_variadic = FVnonVariadic; f_params = [];
       f_cap = ((nothing), None); f_unsafe_cap = ((mixed), None);
       f_body =
       { fb_ast =
         [([47:3-21],
           (Expr
              (([47:3-20], _),
               (Binop ((Eq None), (([47:3-8], _), (Lvar ([47:3-8], $bad0))),
                  (([47:13-20], _), (String "Hello")))))));
           ([48:3-24],
            (Expr
               (([48:3-23], HH\Lib\Regex\Pattern<shape(0 => string)>),
                (Binop ((Eq None),
                   (([48:3-9], HH\Lib\Regex\Pattern<shape(0 => string)>),
                    (Lvar ([48:3-9], $good1))),
                   (([48:12-23], HH\Lib\Regex\Pattern<shape(0 => string)>),
                    (PrefixedString ("re",
                       (([48:14-23], string), (String "/Hello/")))))
                   )))));
           ([49:3-22],
            (Expr
               (([49:3-21], _),
                (Binop ((Eq None), (([49:3-8], _), (Lvar ([49:3-8], $bad2))),
                   (([49:13-21], _), (String "/Hello")))))));
           ([50:3-24],
            (Expr
               (([50:3-23], HH\Lib\Regex\Pattern<shape(0 => string)>),
                (Binop ((Eq None),
                   (([50:3-9], HH\Lib\Regex\Pattern<shape(0 => string)>),
                    (Lvar ([50:3-9], $good3))),
                   (([50:12-23], HH\Lib\Regex\Pattern<shape(0 => string)>),
                    (PrefixedString ("re",
                       (([50:14-23], string), (String "#Hello#")))))
                   )))));
           ([51:3-23],
            (Expr
               (([51:3-22], _),
                (Binop ((Eq None), (([51:3-8], _), (Lvar ([51:3-8], $bad4))),
                   (([51:13-22], _), (String "#Hello/")))))));
           ([52:3-22],
            (Expr
               (([52:3-21], _),
                (Binop ((Eq None), (([52:3-8], _), (Lvar ([52:3-8], $bad5))),
                   (([52:13-21], _), (String "#Hello")))))));
           ([53:3-24],
            (Expr
               (([53:3-23], HH\Lib\Regex\Pattern<shape(0 => string)>),
                (Binop ((Eq None),
                   (([53:3-9], HH\Lib\Regex\Pattern<shape(0 => string)>),
                    (Lvar ([53:3-9], $good6))),
                   (([53:12-23], HH\Lib\Regex\Pattern<shape(0 => string)>),
                    (PrefixedString ("re",
                       (([53:14-23], string), (String "(Hello)")))))
                   )))));
           ([54:3-24],
            (Expr
               (([54:3-23], HH\Lib\Regex\Pattern<shape(0 => string)>),
                (Binop ((Eq None),
                   (([54:3-9], HH\Lib\Regex\Pattern<shape(0 => string)>),
                    (Lvar ([54:3-9], $good7))),
                   (([54:12-23], HH\Lib\Regex\Pattern<shape(0 => string)>),
                    (PrefixedString ("re",
                       (([54:14-23], string), (String ")Hello)")))))
                   )))));
           ([55:3-23],
            (Expr
               (([55:3-22], _),
                (Binop ((Eq None), (([55:3-8], _), (Lvar ([55:3-8], $bad8))),
                   (([55:13-22], _), (String "(Hello(")))))));
           ([56:3-24],
            (Expr
               (([56:3-23], HH\Lib\Regex\Pattern<shape(0 => string)>),
                (Binop ((Eq None),
                   (([56:3-9], HH\Lib\Regex\Pattern<shape(0 => string)>),
                    (Lvar ([56:3-9], $good9))),
                   (([56:12-23], HH\Lib\Regex\Pattern<shape(0 => string)>),
                    (PrefixedString ("re",
                       (([56:14-23], string), (String "[Hello]")))))
                   )))));
           ([57:3-26],
            (Expr
               (([57:3-25], _),
                (Binop ((Eq None),
                   (([57:3-9], _), (Lvar ([57:3-9], $bad10))),
                   (([57:14-25], _), (String "\\Hello\\")))))));
           ([58:3-23],
            (Expr
               (([58:3-22], _),
                (Binop ((Eq None),
                   (([58:3-9], _), (Lvar ([58:3-9], $bad11))),
                   (([58:14-22], _), (String "HelloH")))))))
           ];
         fb_annotation = () };
       f_fun_kind = FSync; f_user_attributes = []; f_file_attributes = [];
       f_external = false;
       f_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>;
         ns_record_def_uses = <opaque>; ns_fun_uses = <opaque>;
         ns_const_uses = <opaque>; ns_name = None; ns_auto_ns_map = [];
         ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
       f_doc_comment = None; f_static = false });
  (Fun
     { f_span = [61:1-65:2]; f_annotation = (); f_mode = Mstrict;
       f_ret = ((void), (Some ([61:35-39], (Hprim Tvoid))));
       f_name = ([61:10-31], "\\parentheses_are_weird"); f_tparams = [];
       f_where_constraints = []; f_variadic = FVnonVariadic; f_params = [];
       f_cap = ((nothing), None); f_unsafe_cap = ((mixed), None);
       f_body =
       { fb_ast =
         [([64:3-77],
           (Expr
              (([64:3-76], HH\Lib\Regex\Pattern<shape(0 => string)>),
               (Binop ((Eq None),
                  (([64:3-9], HH\Lib\Regex\Pattern<shape(0 => string)>),
                   (Lvar ([64:3-9], $good0))),
                  (([64:12-76], HH\Lib\Regex\Pattern<shape(0 => string)>),
                   (PrefixedString ("re",
                      (([64:14-76], string),
                       (String
                          "(He\\(?'one'\\D\\)\\(\\D\\)\\(?'three'\\D\\)\\(\\D\\)\\(\\D\\)\\(?'six'\\D\\))"))
                      )))
                  )))))
           ];
         fb_annotation = () };
       f_fun_kind = FSync; f_user_attributes = []; f_file_attributes = [];
       f_external = false;
       f_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>;
         ns_record_def_uses = <opaque>; ns_fun_uses = <opaque>;
         ns_const_uses = <opaque>; ns_name = None; ns_auto_ns_map = [];
         ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
       f_doc_comment = None; f_static = false })
  ]
