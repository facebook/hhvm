/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/cpp2-struct-footprint/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <vector>

#include <thrift/lib/cpp2/gen/module_metadata_h.h>
#include "thrift/compiler/test/fixtures/cpp2-struct-footprint/gen-cpp2/module_types.h"

namespace cpp2_struct_footprint {
class FootprintTestService;
} // namespace cpp2_struct_footprint
namespace cpp2_struct_footprint {
class ExtendedFootprintService;
} // namespace cpp2_struct_footprint

namespace apache {
namespace thrift {
namespace detail {
namespace md {

template <>
class StructMetadata<::cpp2_struct_footprint::SimpleStruct> {
 public:
  static const ::apache::thrift::metadata::ThriftStruct& gen(ThriftMetadata& metadata);
};
template <>
class StructMetadata<::cpp2_struct_footprint::ComplexStruct> {
 public:
  static const ::apache::thrift::metadata::ThriftStruct& gen(ThriftMetadata& metadata);
};
template <>
class StructMetadata<::cpp2_struct_footprint::Struct1> {
 public:
  static const ::apache::thrift::metadata::ThriftStruct& gen(ThriftMetadata& metadata);
};
template <>
class StructMetadata<::cpp2_struct_footprint::Struct2> {
 public:
  static const ::apache::thrift::metadata::ThriftStruct& gen(ThriftMetadata& metadata);
};
template <>
class StructMetadata<::cpp2_struct_footprint::Struct3> {
 public:
  static const ::apache::thrift::metadata::ThriftStruct& gen(ThriftMetadata& metadata);
};
template <>
class StructMetadata<::cpp2_struct_footprint::Struct4> {
 public:
  static const ::apache::thrift::metadata::ThriftStruct& gen(ThriftMetadata& metadata);
};
template <>
class StructMetadata<::cpp2_struct_footprint::Struct5> {
 public:
  static const ::apache::thrift::metadata::ThriftStruct& gen(ThriftMetadata& metadata);
};
template <>
class StructMetadata<::cpp2_struct_footprint::ExStruct> {
 public:
  static const ::apache::thrift::metadata::ThriftStruct& gen(ThriftMetadata& metadata);
};
template <>
class StructMetadata<::cpp2_struct_footprint::TestUnion> {
 public:
  static const ::apache::thrift::metadata::ThriftStruct& gen(ThriftMetadata& metadata);
};
template <>
class ExceptionMetadata<::cpp2_struct_footprint::ExStruct> {
 public:
  static void gen(ThriftMetadata& metadata);
};
template <>
class ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2_struct_footprint::FootprintTestService>> {
 public:
  static void gen(ThriftServiceMetadataResponse& response);
 private:
  static const ThriftServiceContextRef* genRecurse(ThriftMetadata& metadata, std::vector<ThriftServiceContextRef>& services);

  template <typename T>
  friend class ServiceMetadata;

  static void gen_processIOBuf(ThriftMetadata& metadata, ThriftService& context);
  static void gen_getStruct(ThriftMetadata& metadata, ThriftService& context);
  static void gen_setStruct(ThriftMetadata& metadata, ThriftService& context);
  static void gen_setStructList(ThriftMetadata& metadata, ThriftService& context);
  static void gen_getStructList(ThriftMetadata& metadata, ThriftService& context);
  static void gen_getNestedContainer(ThriftMetadata& metadata, ThriftService& context);
  static void gen_getTypedefStruct(ThriftMetadata& metadata, ThriftService& context);
  static void gen_getTypedefList(ThriftMetadata& metadata, ThriftService& context);
  static void gen_getUnion(ThriftMetadata& metadata, ThriftService& context);
  static void gen_getCalculator(ThriftMetadata& metadata, ThriftService& context);
  static void gen_streamStructs(ThriftMetadata& metadata, ThriftService& context);
  static void gen_streamWithSinkInitial(ThriftMetadata& metadata, ThriftService& context);
  static void gen_streamWithSinkException(ThriftMetadata& metadata, ThriftService& context);
};
template <>
class ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2_struct_footprint::ExtendedFootprintService>> {
 public:
  static void gen(ThriftServiceMetadataResponse& response);
 private:
  static const ThriftServiceContextRef* genRecurse(ThriftMetadata& metadata, std::vector<ThriftServiceContextRef>& services);

  template <typename T>
  friend class ServiceMetadata;

  static void gen_getComplexMap(ThriftMetadata& metadata, ThriftService& context);
};
} // namespace md
} // namespace detail
} // namespace thrift
} // namespace apache
