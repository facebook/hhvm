// Autogenerated by Thrift for thrift/compiler/test/fixtures/adapter/src/module.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package module

import (
    "fmt"
    "reflect"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
    metadata "github.com/facebook/fbthrift/thrift/lib/thrift/metadata"
)

// (needed to ensure safety because of naive import list construction)
var _ = fmt.Printf
var _ = reflect.Ptr
var _ = thrift.VOID
var _ = metadata.GoUnusedProtection__

type SetWithAdapter = []string

func NewSetWithAdapter() SetWithAdapter {
    return make([]string, 0)
}

func WriteSetWithAdapter(item SetWithAdapter, p thrift.Encoder) error {
    if err := p.WriteSetBegin(thrift.STRING, len(item)); err != nil {
        return thrift.PrependError("error writing set begin: ", err)
    }
    for _, v := range item {
        {
            item := v
            if err := p.WriteString(item); err != nil {
                return err
            }
        }
    }
    if err := p.WriteSetEnd(); err != nil {
        return thrift.PrependError("error writing set end: ", err)
    }
    return nil
}

func ReadSetWithAdapter(p thrift.Decoder) (SetWithAdapter, error) {
    var decodeResult SetWithAdapter
    decodeErr := func() error {
        _ /* elemType */, size, err := p.ReadSetBegin()
        if err != nil {
            return thrift.PrependError("error reading set begin: ", err)
        }
        
        setResult := make([]string, 0, size)
        for i := 0; i < size; i++ {
            var elem string
            {
                result, err := p.ReadString()
                if err != nil {
                    return err
                }
                elem = result
            }
            setResult = append(setResult, elem)
        }
        
        if err := p.ReadSetEnd(); err != nil {
            return thrift.PrependError("error reading set end: ", err)
        }
        result := setResult
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type StringWithAdapter = string

func NewStringWithAdapter() StringWithAdapter {
    return ""
}

func WriteStringWithAdapter(item StringWithAdapter, p thrift.Encoder) error {
    if err := p.WriteString(item); err != nil {
        return err
    }
    return nil
}

func ReadStringWithAdapter(p thrift.Decoder) (StringWithAdapter, error) {
    var decodeResult StringWithAdapter
    decodeErr := func() error {
        result, err := p.ReadString()
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type ListWithElemAdapter = []StringWithAdapter

func NewListWithElemAdapter() ListWithElemAdapter {
    return make([]StringWithAdapter, 0)
}

func WriteListWithElemAdapter(item ListWithElemAdapter, p thrift.Encoder) error {
    if err := p.WriteListBegin(thrift.STRING, len(item)); err != nil {
        return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range item {
        {
            item := v
            err := WriteStringWithAdapter(item, p)
            if err != nil {
                return err
            }
        }
    }
    if err := p.WriteListEnd(); err != nil {
        return thrift.PrependError("error writing list end: ", err)
    }
    return nil
}

func ReadListWithElemAdapter(p thrift.Decoder) (ListWithElemAdapter, error) {
    var decodeResult ListWithElemAdapter
    decodeErr := func() error {
        _ /* elemType */, size, err := p.ReadListBegin()
        if err != nil {
            return thrift.PrependError("error reading list begin: ", err)
        }
        
        listResult := make([]StringWithAdapter, 0, size)
        for i := 0; i < size; i++ {
            var elem StringWithAdapter
            {
                result, err := ReadStringWithAdapter(p)
                if err != nil {
                    return err
                }
                elem = result
            }
            listResult = append(listResult, elem)
        }
        
        if err := p.ReadListEnd(); err != nil {
            return thrift.PrependError("error reading list end: ", err)
        }
        result := listResult
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type ListWithElemAdapterWithAdapter = ListWithElemAdapter

func NewListWithElemAdapterWithAdapter() ListWithElemAdapterWithAdapter {
    return NewListWithElemAdapter()
}

func WriteListWithElemAdapterWithAdapter(item ListWithElemAdapterWithAdapter, p thrift.Encoder) error {
    err := WriteListWithElemAdapter(item, p)
    if err != nil {
        return err
    }
    return nil
}

func ReadListWithElemAdapterWithAdapter(p thrift.Decoder) (ListWithElemAdapterWithAdapter, error) {
    var decodeResult ListWithElemAdapterWithAdapter
    decodeErr := func() error {
        result, err := ReadListWithElemAdapter(p)
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type MyI64 = int64

func NewMyI64() MyI64 {
    return 0
}

func WriteMyI64(item MyI64, p thrift.Encoder) error {
    if err := p.WriteI64(item); err != nil {
        return err
    }
    return nil
}

func ReadMyI64(p thrift.Decoder) (MyI64, error) {
    var decodeResult MyI64
    decodeErr := func() error {
        result, err := p.ReadI64()
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type DoubleTypedefI64 = MyI64

func NewDoubleTypedefI64() DoubleTypedefI64 {
    return NewMyI64()
}

func WriteDoubleTypedefI64(item DoubleTypedefI64, p thrift.Encoder) error {
    err := WriteMyI64(item, p)
    if err != nil {
        return err
    }
    return nil
}

func ReadDoubleTypedefI64(p thrift.Decoder) (DoubleTypedefI64, error) {
    var decodeResult DoubleTypedefI64
    decodeErr := func() error {
        result, err := ReadMyI64(p)
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type MyI32 = int32

func NewMyI32() MyI32 {
    return 0
}

func WriteMyI32(item MyI32, p thrift.Encoder) error {
    if err := p.WriteI32(item); err != nil {
        return err
    }
    return nil
}

func ReadMyI32(p thrift.Decoder) (MyI32, error) {
    var decodeResult MyI32
    decodeErr := func() error {
        result, err := p.ReadI32()
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type FooWithAdapter = Foo

func NewFooWithAdapter() *FooWithAdapter {
    return NewFoo()
}

func WriteFooWithAdapter(item *FooWithAdapter, p thrift.Encoder) error {
    if err := item.Write(p); err != nil {
        return err
    }
    return nil
}

func ReadFooWithAdapter(p thrift.Decoder) (*FooWithAdapter, error) {
    var decodeResult *FooWithAdapter
    decodeErr := func() error {
        result := NewFoo()
        err := result.Read(p)
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type StructWithAdapter = Bar

func NewStructWithAdapter() *StructWithAdapter {
    return NewBar()
}

func WriteStructWithAdapter(item *StructWithAdapter, p thrift.Encoder) error {
    if err := item.Write(p); err != nil {
        return err
    }
    return nil
}

func ReadStructWithAdapter(p thrift.Decoder) (*StructWithAdapter, error) {
    var decodeResult *StructWithAdapter
    decodeErr := func() error {
        result := NewBar()
        err := result.Read(p)
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type UnionWithAdapter = Baz

func NewUnionWithAdapter() *UnionWithAdapter {
    return NewBaz()
}

func WriteUnionWithAdapter(item *UnionWithAdapter, p thrift.Encoder) error {
    if err := item.Write(p); err != nil {
        return err
    }
    return nil
}

func ReadUnionWithAdapter(p thrift.Decoder) (*UnionWithAdapter, error) {
    var decodeResult *UnionWithAdapter
    decodeErr := func() error {
        result := NewBaz()
        err := result.Read(p)
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type AdaptedA = A

func NewAdaptedA() *AdaptedA {
    return NewA()
}

func WriteAdaptedA(item *AdaptedA, p thrift.Encoder) error {
    if err := item.Write(p); err != nil {
        return err
    }
    return nil
}

func ReadAdaptedA(p thrift.Decoder) (*AdaptedA, error) {
    var decodeResult *AdaptedA
    decodeErr := func() error {
        result := NewA()
        err := result.Read(p)
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type StringWithCppAdapter = string

func NewStringWithCppAdapter() StringWithCppAdapter {
    return ""
}

func WriteStringWithCppAdapter(item StringWithCppAdapter, p thrift.Encoder) error {
    if err := p.WriteString(item); err != nil {
        return err
    }
    return nil
}

func ReadStringWithCppAdapter(p thrift.Decoder) (StringWithCppAdapter, error) {
    var decodeResult StringWithCppAdapter
    decodeErr := func() error {
        result, err := p.ReadString()
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type DurationMs = int64

func NewDurationMs() DurationMs {
    return 0
}

func WriteDurationMs(item DurationMs, p thrift.Encoder) error {
    if err := p.WriteI64(item); err != nil {
        return err
    }
    return nil
}

func ReadDurationMs(p thrift.Decoder) (DurationMs, error) {
    var decodeResult DurationMs
    decodeErr := func() error {
        result, err := p.ReadI64()
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type AdaptedBool = bool

func NewAdaptedBool() AdaptedBool {
    return false
}

func WriteAdaptedBool(item AdaptedBool, p thrift.Encoder) error {
    if err := p.WriteBool(item); err != nil {
        return err
    }
    return nil
}

func ReadAdaptedBool(p thrift.Decoder) (AdaptedBool, error) {
    var decodeResult AdaptedBool
    decodeErr := func() error {
        result, err := p.ReadBool()
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type AdaptedByte = int8

func NewAdaptedByte() AdaptedByte {
    return 0
}

func WriteAdaptedByte(item AdaptedByte, p thrift.Encoder) error {
    if err := p.WriteByte(byte(item)); err != nil {
        return err
    }
    return nil
}

func ReadAdaptedByte(p thrift.Decoder) (AdaptedByte, error) {
    var decodeResult AdaptedByte
    decodeErr := func() error {
        resultByte, err := p.ReadByte()
        result := int8(resultByte)
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type AdaptedShort = int16

func NewAdaptedShort() AdaptedShort {
    return 0
}

func WriteAdaptedShort(item AdaptedShort, p thrift.Encoder) error {
    if err := p.WriteI16(item); err != nil {
        return err
    }
    return nil
}

func ReadAdaptedShort(p thrift.Decoder) (AdaptedShort, error) {
    var decodeResult AdaptedShort
    decodeErr := func() error {
        result, err := p.ReadI16()
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type AdaptedInteger = int32

func NewAdaptedInteger() AdaptedInteger {
    return 0
}

func WriteAdaptedInteger(item AdaptedInteger, p thrift.Encoder) error {
    if err := p.WriteI32(item); err != nil {
        return err
    }
    return nil
}

func ReadAdaptedInteger(p thrift.Decoder) (AdaptedInteger, error) {
    var decodeResult AdaptedInteger
    decodeErr := func() error {
        result, err := p.ReadI32()
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type AdaptedLong = int64

func NewAdaptedLong() AdaptedLong {
    return 0
}

func WriteAdaptedLong(item AdaptedLong, p thrift.Encoder) error {
    if err := p.WriteI64(item); err != nil {
        return err
    }
    return nil
}

func ReadAdaptedLong(p thrift.Decoder) (AdaptedLong, error) {
    var decodeResult AdaptedLong
    decodeErr := func() error {
        result, err := p.ReadI64()
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type AdaptedDouble = float64

func NewAdaptedDouble() AdaptedDouble {
    return 0.0
}

func WriteAdaptedDouble(item AdaptedDouble, p thrift.Encoder) error {
    if err := p.WriteDouble(item); err != nil {
        return err
    }
    return nil
}

func ReadAdaptedDouble(p thrift.Decoder) (AdaptedDouble, error) {
    var decodeResult AdaptedDouble
    decodeErr := func() error {
        result, err := p.ReadDouble()
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type AdaptedString = string

func NewAdaptedString() AdaptedString {
    return ""
}

func WriteAdaptedString(item AdaptedString, p thrift.Encoder) error {
    if err := p.WriteString(item); err != nil {
        return err
    }
    return nil
}

func ReadAdaptedString(p thrift.Decoder) (AdaptedString, error) {
    var decodeResult AdaptedString
    decodeErr := func() error {
        result, err := p.ReadString()
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type DoubleTypedefBool = AdaptedBool

func NewDoubleTypedefBool() DoubleTypedefBool {
    return NewAdaptedBool()
}

func WriteDoubleTypedefBool(item DoubleTypedefBool, p thrift.Encoder) error {
    err := WriteAdaptedBool(item, p)
    if err != nil {
        return err
    }
    return nil
}

func ReadDoubleTypedefBool(p thrift.Decoder) (DoubleTypedefBool, error) {
    var decodeResult DoubleTypedefBool
    decodeErr := func() error {
        result, err := ReadAdaptedBool(p)
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type IOBuf = []byte

func NewIOBuf() IOBuf {
    return []byte("")
}

func WriteIOBuf(item IOBuf, p thrift.Encoder) error {
    if err := p.WriteBinary(item); err != nil {
        return err
    }
    return nil
}

func ReadIOBuf(p thrift.Decoder) (IOBuf, error) {
    var decodeResult IOBuf
    decodeErr := func() error {
        result, err := p.ReadBinary()
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type CustomProtocolType = IOBuf

func NewCustomProtocolType() CustomProtocolType {
    return NewIOBuf()
}

func WriteCustomProtocolType(item CustomProtocolType, p thrift.Encoder) error {
    err := WriteIOBuf(item, p)
    if err != nil {
        return err
    }
    return nil
}

func ReadCustomProtocolType(p thrift.Decoder) (CustomProtocolType, error) {
    var decodeResult CustomProtocolType
    decodeErr := func() error {
        result, err := ReadIOBuf(p)
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type IndirectionString = string

func NewIndirectionString() IndirectionString {
    return ""
}

func WriteIndirectionString(item IndirectionString, p thrift.Encoder) error {
    if err := p.WriteString(item); err != nil {
        return err
    }
    return nil
}

func ReadIndirectionString(p thrift.Decoder) (IndirectionString, error) {
    var decodeResult IndirectionString
    decodeErr := func() error {
        result, err := p.ReadString()
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type AdaptedEnum = ThriftAdaptedEnum

const (
    AdaptedEnum_Zero AdaptedEnum = ThriftAdaptedEnum_Zero
    AdaptedEnum_One AdaptedEnum = ThriftAdaptedEnum_One
)

// Enum value maps for ThriftAdaptedEnum
var (
    AdaptedEnumToName  = ThriftAdaptedEnumToName
    AdaptedEnumToValue = ThriftAdaptedEnumToValue
)

// Deprecated: Use AdaptedEnumToValue instead (e.g. `x, ok := AdaptedEnumToValue["name"]`).
func AdaptedEnumFromString(s string) (AdaptedEnum, error) {
    return ThriftAdaptedEnumFromString(s)
}

func NewAdaptedEnum() AdaptedEnum {
    return 0
}

func WriteAdaptedEnum(item AdaptedEnum, p thrift.Encoder) error {
    if err := p.WriteI32(int32(item)); err != nil {
        return err
    }
    return nil
}

func ReadAdaptedEnum(p thrift.Decoder) (AdaptedEnum, error) {
    var decodeResult AdaptedEnum
    decodeErr := func() error {
        enumResult, err := p.ReadI32()
        if err != nil {
            return err
        }
        result := ThriftAdaptedEnum(enumResult)
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type AdaptedTypedef = AdaptedStruct

func NewAdaptedTypedef() *AdaptedTypedef {
    return NewAdaptedStruct()
}

func WriteAdaptedTypedef(item *AdaptedTypedef, p thrift.Encoder) error {
    if err := item.Write(p); err != nil {
        return err
    }
    return nil
}

func ReadAdaptedTypedef(p thrift.Decoder) (*AdaptedTypedef, error) {
    var decodeResult *AdaptedTypedef
    decodeErr := func() error {
        result := NewAdaptedStruct()
        err := result.Read(p)
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type TypedefOfDirect = DirectlyAdaptedStruct

func NewTypedefOfDirect() *TypedefOfDirect {
    return NewDirectlyAdaptedStruct()
}

func WriteTypedefOfDirect(item *TypedefOfDirect, p thrift.Encoder) error {
    if err := item.Write(p); err != nil {
        return err
    }
    return nil
}

func ReadTypedefOfDirect(p thrift.Decoder) (*TypedefOfDirect, error) {
    var decodeResult *TypedefOfDirect
    decodeErr := func() error {
        result := NewDirectlyAdaptedStruct()
        err := result.Read(p)
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type AdaptedCircularAdaptee = CircularAdaptee

func NewAdaptedCircularAdaptee() *AdaptedCircularAdaptee {
    return NewCircularAdaptee()
}

func WriteAdaptedCircularAdaptee(item *AdaptedCircularAdaptee, p thrift.Encoder) error {
    if err := item.Write(p); err != nil {
        return err
    }
    return nil
}

func ReadAdaptedCircularAdaptee(p thrift.Decoder) (*AdaptedCircularAdaptee, error) {
    var decodeResult *AdaptedCircularAdaptee
    decodeErr := func() error {
        result := NewCircularAdaptee()
        err := result.Read(p)
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type CountingInt = int64

func NewCountingInt() CountingInt {
    return 0
}

func WriteCountingInt(item CountingInt, p thrift.Encoder) error {
    if err := p.WriteI64(item); err != nil {
        return err
    }
    return nil
}

func ReadCountingInt(p thrift.Decoder) (CountingInt, error) {
    var decodeResult CountingInt
    decodeErr := func() error {
        result, err := p.ReadI64()
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type FooWithAdapter_9317 = FooWithAdapter

func NewFooWithAdapter_9317() *FooWithAdapter_9317 {
    return NewFooWithAdapter()
}

func WriteFooWithAdapter_9317(item *FooWithAdapter_9317, p thrift.Encoder) error {
    err := WriteFooWithAdapter(item, p)
    if err != nil {
        return err
    }
    return nil
}

func ReadFooWithAdapter_9317(p thrift.Decoder) (*FooWithAdapter_9317, error) {
    var decodeResult *FooWithAdapter_9317
    decodeErr := func() error {
        result, err := ReadFooWithAdapter(p)
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type ListWithElemAdapterWithAdapter_2312 = ListWithElemAdapterWithAdapter

func NewListWithElemAdapterWithAdapter_2312() ListWithElemAdapterWithAdapter_2312 {
    return NewListWithElemAdapterWithAdapter()
}

func WriteListWithElemAdapterWithAdapter_2312(item ListWithElemAdapterWithAdapter_2312, p thrift.Encoder) error {
    err := WriteListWithElemAdapterWithAdapter(item, p)
    if err != nil {
        return err
    }
    return nil
}

func ReadListWithElemAdapterWithAdapter_2312(p thrift.Decoder) (ListWithElemAdapterWithAdapter_2312, error) {
    var decodeResult ListWithElemAdapterWithAdapter_2312
    decodeErr := func() error {
        result, err := ReadListWithElemAdapterWithAdapter(p)
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type MyI32_4873 = MyI32

func NewMyI32_4873() MyI32_4873 {
    return NewMyI32()
}

func WriteMyI32_4873(item MyI32_4873, p thrift.Encoder) error {
    err := WriteMyI32(item, p)
    if err != nil {
        return err
    }
    return nil
}

func ReadMyI32_4873(p thrift.Decoder) (MyI32_4873, error) {
    var decodeResult MyI32_4873
    decodeErr := func() error {
        result, err := ReadMyI32(p)
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type StringWithAdapter_7208 = StringWithAdapter

func NewStringWithAdapter_7208() StringWithAdapter_7208 {
    return NewStringWithAdapter()
}

func WriteStringWithAdapter_7208(item StringWithAdapter_7208, p thrift.Encoder) error {
    err := WriteStringWithAdapter(item, p)
    if err != nil {
        return err
    }
    return nil
}

func ReadStringWithAdapter_7208(p thrift.Decoder) (StringWithAdapter_7208, error) {
    var decodeResult StringWithAdapter_7208
    decodeErr := func() error {
        result, err := ReadStringWithAdapter(p)
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type Baz_7352 = Baz

func NewBaz_7352() *Baz_7352 {
    return NewBaz()
}

func WriteBaz_7352(item *Baz_7352, p thrift.Encoder) error {
    if err := item.Write(p); err != nil {
        return err
    }
    return nil
}

func ReadBaz_7352(p thrift.Decoder) (*Baz_7352, error) {
    var decodeResult *Baz_7352
    decodeErr := func() error {
        result := NewBaz()
        err := result.Read(p)
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type Foo_3943 = Foo

func NewFoo_3943() *Foo_3943 {
    return NewFoo()
}

func WriteFoo_3943(item *Foo_3943, p thrift.Encoder) error {
    if err := item.Write(p); err != nil {
        return err
    }
    return nil
}

func ReadFoo_3943(p thrift.Decoder) (*Foo_3943, error) {
    var decodeResult *Foo_3943
    decodeErr := func() error {
        result := NewFoo()
        err := result.Read(p)
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type Foo_6868 = Foo

func NewFoo_6868() *Foo_6868 {
    return NewFoo()
}

func WriteFoo_6868(item *Foo_6868, p thrift.Encoder) error {
    if err := item.Write(p); err != nil {
        return err
    }
    return nil
}

func ReadFoo_6868(p thrift.Decoder) (*Foo_6868, error) {
    var decodeResult *Foo_6868
    decodeErr := func() error {
        result := NewFoo()
        err := result.Read(p)
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type Binary_5673 = []byte

func NewBinary_5673() Binary_5673 {
    return []byte("")
}

func WriteBinary_5673(item Binary_5673, p thrift.Encoder) error {
    if err := p.WriteBinary(item); err != nil {
        return err
    }
    return nil
}

func ReadBinary_5673(p thrift.Decoder) (Binary_5673, error) {
    var decodeResult Binary_5673
    decodeErr := func() error {
        result, err := p.ReadBinary()
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type I32_5137 = int32

func NewI32_5137() I32_5137 {
    return 0
}

func WriteI32_5137(item I32_5137, p thrift.Encoder) error {
    if err := p.WriteI32(item); err != nil {
        return err
    }
    return nil
}

func ReadI32_5137(p thrift.Decoder) (I32_5137, error) {
    var decodeResult I32_5137
    decodeErr := func() error {
        result, err := p.ReadI32()
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type MapString_ListWithElemAdapterWithAdapter_8454 = map[string]ListWithElemAdapterWithAdapter_2312

func NewMapString_ListWithElemAdapterWithAdapter_8454() MapString_ListWithElemAdapterWithAdapter_8454 {
    return make(map[string]ListWithElemAdapterWithAdapter_2312)
}

func WriteMapString_ListWithElemAdapterWithAdapter_8454(item MapString_ListWithElemAdapterWithAdapter_8454, p thrift.Encoder) error {
    if err := p.WriteMapBegin(thrift.STRING, thrift.LIST, len(item)); err != nil {
        return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range item {
        {
            item := k
            if err := p.WriteString(item); err != nil {
                return err
            }
        }
    
        {
            item := v
            err := WriteListWithElemAdapterWithAdapter_2312(item, p)
            if err != nil {
                return err
            }
        }
    }
    if err := p.WriteMapEnd(); err != nil {
        return thrift.PrependError("error writing map end: ", err)
    }
    return nil
}

func ReadMapString_ListWithElemAdapterWithAdapter_8454(p thrift.Decoder) (MapString_ListWithElemAdapterWithAdapter_8454, error) {
    var decodeResult MapString_ListWithElemAdapterWithAdapter_8454
    decodeErr := func() error {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
        if err != nil {
            return thrift.PrependError("error reading map begin: ", err)
        }
        
        mapResult := make(map[string]ListWithElemAdapterWithAdapter_2312, size)
        for i := 0; i < size; i++ {
            var key string
            {
                result, err := p.ReadString()
                if err != nil {
                    return err
                }
                key = result
            }
        
            var value ListWithElemAdapterWithAdapter_2312
            {
                result, err := ReadListWithElemAdapterWithAdapter_2312(p)
                if err != nil {
                    return err
                }
                value = result
            }
        
            mapResult[key] = value
        }
        
        if err := p.ReadMapEnd(); err != nil {
            return thrift.PrependError("error reading map end: ", err)
        }
        result := mapResult
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type Color int32

const (
    Color_UNKNOWN Color = 0
    Color_RED Color = 1
    Color_GREEN Color = 2
    Color_BLUE Color = 3
)

// Enum value maps for Color
var (
    ColorToName = map[Color]string {
        Color_UNKNOWN: "UNKNOWN",
        Color_RED: "RED",
        Color_GREEN: "GREEN",
        Color_BLUE: "BLUE",
    }

    ColorToValue = map[string]Color {
        "UNKNOWN": Color_UNKNOWN,
        "RED": Color_RED,
        "GREEN": Color_GREEN,
        "BLUE": Color_BLUE,
    }
)

func (x Color) String() string {
    if v, ok := ColorToName[x]; ok {
        return v
    }
    return "<UNSET>"
}

// Deprecated: Use ColorToValue instead (e.g. `x, ok := ColorToValue["name"]`).
func ColorFromString(s string) (Color, error) {
    if v, ok := ColorToValue[s]; ok {
        return v, nil
    }
    return Color(0), fmt.Errorf("not a valid Color string")
}

type ThriftAdaptedEnum int32

const (
    ThriftAdaptedEnum_Zero ThriftAdaptedEnum = 0
    ThriftAdaptedEnum_One ThriftAdaptedEnum = 1
)

// Enum value maps for ThriftAdaptedEnum
var (
    ThriftAdaptedEnumToName = map[ThriftAdaptedEnum]string {
        ThriftAdaptedEnum_Zero: "Zero",
        ThriftAdaptedEnum_One: "One",
    }

    ThriftAdaptedEnumToValue = map[string]ThriftAdaptedEnum {
        "Zero": ThriftAdaptedEnum_Zero,
        "One": ThriftAdaptedEnum_One,
    }
)

func (x ThriftAdaptedEnum) String() string {
    if v, ok := ThriftAdaptedEnumToName[x]; ok {
        return v
    }
    return "<UNSET>"
}

// Deprecated: Use ThriftAdaptedEnumToValue instead (e.g. `x, ok := ThriftAdaptedEnumToValue["name"]`).
func ThriftAdaptedEnumFromString(s string) (ThriftAdaptedEnum, error) {
    if v, ok := ThriftAdaptedEnumToValue[s]; ok {
        return v, nil
    }
    return ThriftAdaptedEnum(0), fmt.Errorf("not a valid ThriftAdaptedEnum string")
}

type MyAnnotation struct {
    Signature string `thrift:"signature,1" json:"signature" db:"signature"`
    Color Color `thrift:"color,2" json:"color" db:"color"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyAnnotation)(nil)

func NewMyAnnotation() *MyAnnotation {
    return (&MyAnnotation{}).setDefaults()
}

func (x *MyAnnotation) GetSignature() string {
    return x.Signature
}

func (x *MyAnnotation) GetColor() Color {
    return x.Color
}

func (x *MyAnnotation) SetSignatureNonCompat(value string) *MyAnnotation {
    x.Signature = value
    return x
}

func (x *MyAnnotation) SetSignature(value string) *MyAnnotation {
    x.Signature = value
    return x
}

func (x *MyAnnotation) SetColorNonCompat(value Color) *MyAnnotation {
    x.Color = value
    return x
}

func (x *MyAnnotation) SetColor(value Color) *MyAnnotation {
    x.Color = value
    return x
}

func (x *MyAnnotation) writeField1(p thrift.Encoder) error {  // Signature
    if err := p.WriteFieldBegin("signature", thrift.STRING, 1); err != nil {
        return thrift.PrependError("MyAnnotation write field begin error: ", err)
    }

    item := x.Signature
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyAnnotation write field end error: ", err)
    }
    return nil
}

func (x *MyAnnotation) writeField2(p thrift.Encoder) error {  // Color
    if err := p.WriteFieldBegin("color", thrift.I32, 2); err != nil {
        return thrift.PrependError("MyAnnotation write field begin error: ", err)
    }

    item := x.Color
    if err := p.WriteI32(int32(item)); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyAnnotation write field end error: ", err)
    }
    return nil
}

func (x *MyAnnotation) readField1(p thrift.Decoder) error {  // Signature
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.Signature = result
    return nil
}

func (x *MyAnnotation) readField2(p thrift.Decoder) error {  // Color
    enumResult, err := p.ReadI32()
    if err != nil {
        return err
    }
    result := Color(enumResult)

    x.Color = result
    return nil
}



func (x *MyAnnotation) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("MyAnnotation"); err != nil {
        return thrift.PrependError("MyAnnotation write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("MyAnnotation write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("MyAnnotation write struct end error: ", err)
    }
    return nil
}

func (x *MyAnnotation) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("MyAnnotation read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("MyAnnotation field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "signature")):  // signature
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "color")):  // color
            fieldReadErr = x.readField2(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("MyAnnotation read struct end error: ", err)
    }

    return nil
}

func (x *MyAnnotation) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *MyAnnotation) setDefaults() *MyAnnotation {
    return x.
        SetSignatureNonCompat("").
        SetColorNonCompat(
              Color_RED,
          )
}

func (x *MyAnnotation) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_MyAnnotation
}

type Foo struct {
    IntField I32_5137 `thrift:"intField,1" json:"intField" db:"intField"`
    OptionalIntField *I32_5137 `thrift:"optionalIntField,2,optional" json:"optionalIntField,omitempty" db:"optionalIntField"`
    IntFieldWithDefault I32_5137 `thrift:"intFieldWithDefault,3" json:"intFieldWithDefault" db:"intFieldWithDefault"`
    SetField SetWithAdapter `thrift:"setField,4" json:"setField" db:"setField"`
    OptionalSetField SetWithAdapter `thrift:"optionalSetField,5,optional" json:"optionalSetField,omitempty" db:"optionalSetField"`
    MapField MapString_ListWithElemAdapterWithAdapter_8454 `thrift:"mapField,6" json:"mapField" db:"mapField"`
    OptionalMapField MapString_ListWithElemAdapterWithAdapter_8454 `thrift:"optionalMapField,7,optional" json:"optionalMapField,omitempty" db:"optionalMapField"`
    BinaryField Binary_5673 `thrift:"binaryField,8" json:"binaryField" db:"binaryField"`
    LongField MyI64 `thrift:"longField,9" json:"longField" db:"longField"`
    AdaptedLongField MyI64 `thrift:"adaptedLongField,10" json:"adaptedLongField" db:"adaptedLongField"`
    DoubleAdaptedField DoubleTypedefI64 `thrift:"doubleAdaptedField,11" json:"doubleAdaptedField" db:"doubleAdaptedField"`
    AdaptedList []int32 `thrift:"adapted_list,12" json:"adapted_list" db:"adapted_list"`
    AdaptedSet []int32 `thrift:"adapted_set,13" json:"adapted_set" db:"adapted_set"`
    AdaptedMap map[string]int32 `thrift:"adapted_map,14" json:"adapted_map" db:"adapted_map"`
    AdaptedListNested [][]map[int32]int32 `thrift:"adapted_list_nested,15" json:"adapted_list_nested" db:"adapted_list_nested"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*Foo)(nil)

func NewFoo() *Foo {
    return (&Foo{}).setDefaults()
}

func (x *Foo) GetIntField() I32_5137 {
    return x.IntField
}

func (x *Foo) GetOptionalIntField() I32_5137 {
    if !x.IsSetOptionalIntField() {
        return NewI32_5137()
    }
    return *x.OptionalIntField
}

func (x *Foo) GetIntFieldWithDefault() I32_5137 {
    return x.IntFieldWithDefault
}

func (x *Foo) GetSetField() SetWithAdapter {
    if !x.IsSetSetField() {
        return NewSetWithAdapter()
    }
    return x.SetField
}

func (x *Foo) GetOptionalSetField() SetWithAdapter {
    if !x.IsSetOptionalSetField() {
        return NewSetWithAdapter()
    }
    return x.OptionalSetField
}

func (x *Foo) GetMapField() MapString_ListWithElemAdapterWithAdapter_8454 {
    if !x.IsSetMapField() {
        return NewMapString_ListWithElemAdapterWithAdapter_8454()
    }
    return x.MapField
}

func (x *Foo) GetOptionalMapField() MapString_ListWithElemAdapterWithAdapter_8454 {
    if !x.IsSetOptionalMapField() {
        return NewMapString_ListWithElemAdapterWithAdapter_8454()
    }
    return x.OptionalMapField
}

func (x *Foo) GetBinaryField() Binary_5673 {
    if !x.IsSetBinaryField() {
        return NewBinary_5673()
    }
    return x.BinaryField
}

func (x *Foo) GetLongField() MyI64 {
    return x.LongField
}

func (x *Foo) GetAdaptedLongField() MyI64 {
    return x.AdaptedLongField
}

func (x *Foo) GetDoubleAdaptedField() DoubleTypedefI64 {
    return x.DoubleAdaptedField
}

func (x *Foo) GetAdaptedList() []int32 {
    if !x.IsSetAdaptedList() {
        return make([]int32, 0)
    }
    return x.AdaptedList
}

func (x *Foo) GetAdaptedSet() []int32 {
    if !x.IsSetAdaptedSet() {
        return make([]int32, 0)
    }
    return x.AdaptedSet
}

func (x *Foo) GetAdaptedMap() map[string]int32 {
    if !x.IsSetAdaptedMap() {
        return make(map[string]int32)
    }
    return x.AdaptedMap
}

func (x *Foo) GetAdaptedListNested() [][]map[int32]int32 {
    if !x.IsSetAdaptedListNested() {
        return make([][]map[int32]int32, 0)
    }
    return x.AdaptedListNested
}

func (x *Foo) SetIntFieldNonCompat(value I32_5137) *Foo {
    x.IntField = value
    return x
}

func (x *Foo) SetIntField(value I32_5137) *Foo {
    x.IntField = value
    return x
}

func (x *Foo) SetOptionalIntFieldNonCompat(value I32_5137) *Foo {
    x.OptionalIntField = &value
    return x
}

func (x *Foo) SetOptionalIntField(value *I32_5137) *Foo {
    x.OptionalIntField = value
    return x
}

func (x *Foo) SetIntFieldWithDefaultNonCompat(value I32_5137) *Foo {
    x.IntFieldWithDefault = value
    return x
}

func (x *Foo) SetIntFieldWithDefault(value I32_5137) *Foo {
    x.IntFieldWithDefault = value
    return x
}

func (x *Foo) SetSetFieldNonCompat(value SetWithAdapter) *Foo {
    x.SetField = value
    return x
}

func (x *Foo) SetSetField(value SetWithAdapter) *Foo {
    x.SetField = value
    return x
}

func (x *Foo) SetOptionalSetFieldNonCompat(value SetWithAdapter) *Foo {
    x.OptionalSetField = value
    return x
}

func (x *Foo) SetOptionalSetField(value SetWithAdapter) *Foo {
    x.OptionalSetField = value
    return x
}

func (x *Foo) SetMapFieldNonCompat(value MapString_ListWithElemAdapterWithAdapter_8454) *Foo {
    x.MapField = value
    return x
}

func (x *Foo) SetMapField(value MapString_ListWithElemAdapterWithAdapter_8454) *Foo {
    x.MapField = value
    return x
}

func (x *Foo) SetOptionalMapFieldNonCompat(value MapString_ListWithElemAdapterWithAdapter_8454) *Foo {
    x.OptionalMapField = value
    return x
}

func (x *Foo) SetOptionalMapField(value MapString_ListWithElemAdapterWithAdapter_8454) *Foo {
    x.OptionalMapField = value
    return x
}

func (x *Foo) SetBinaryFieldNonCompat(value Binary_5673) *Foo {
    x.BinaryField = value
    return x
}

func (x *Foo) SetBinaryField(value Binary_5673) *Foo {
    x.BinaryField = value
    return x
}

func (x *Foo) SetLongFieldNonCompat(value MyI64) *Foo {
    x.LongField = value
    return x
}

func (x *Foo) SetLongField(value MyI64) *Foo {
    x.LongField = value
    return x
}

func (x *Foo) SetAdaptedLongFieldNonCompat(value MyI64) *Foo {
    x.AdaptedLongField = value
    return x
}

func (x *Foo) SetAdaptedLongField(value MyI64) *Foo {
    x.AdaptedLongField = value
    return x
}

func (x *Foo) SetDoubleAdaptedFieldNonCompat(value DoubleTypedefI64) *Foo {
    x.DoubleAdaptedField = value
    return x
}

func (x *Foo) SetDoubleAdaptedField(value DoubleTypedefI64) *Foo {
    x.DoubleAdaptedField = value
    return x
}

func (x *Foo) SetAdaptedListNonCompat(value []int32) *Foo {
    x.AdaptedList = value
    return x
}

func (x *Foo) SetAdaptedList(value []int32) *Foo {
    x.AdaptedList = value
    return x
}

func (x *Foo) SetAdaptedSetNonCompat(value []int32) *Foo {
    x.AdaptedSet = value
    return x
}

func (x *Foo) SetAdaptedSet(value []int32) *Foo {
    x.AdaptedSet = value
    return x
}

func (x *Foo) SetAdaptedMapNonCompat(value map[string]int32) *Foo {
    x.AdaptedMap = value
    return x
}

func (x *Foo) SetAdaptedMap(value map[string]int32) *Foo {
    x.AdaptedMap = value
    return x
}

func (x *Foo) SetAdaptedListNestedNonCompat(value [][]map[int32]int32) *Foo {
    x.AdaptedListNested = value
    return x
}

func (x *Foo) SetAdaptedListNested(value [][]map[int32]int32) *Foo {
    x.AdaptedListNested = value
    return x
}

func (x *Foo) IsSetOptionalIntField() bool {
    return x != nil && x.OptionalIntField != nil
}

func (x *Foo) IsSetSetField() bool {
    return x != nil && x.SetField != nil
}

func (x *Foo) IsSetOptionalSetField() bool {
    return x != nil && x.OptionalSetField != nil
}

func (x *Foo) IsSetMapField() bool {
    return x != nil && x.MapField != nil
}

func (x *Foo) IsSetOptionalMapField() bool {
    return x != nil && x.OptionalMapField != nil
}

func (x *Foo) IsSetBinaryField() bool {
    return x != nil && x.BinaryField != nil
}

func (x *Foo) IsSetAdaptedList() bool {
    return x != nil && x.AdaptedList != nil
}

func (x *Foo) IsSetAdaptedSet() bool {
    return x != nil && x.AdaptedSet != nil
}

func (x *Foo) IsSetAdaptedMap() bool {
    return x != nil && x.AdaptedMap != nil
}

func (x *Foo) IsSetAdaptedListNested() bool {
    return x != nil && x.AdaptedListNested != nil
}

func (x *Foo) writeField1(p thrift.Encoder) error {  // IntField
    if err := p.WriteFieldBegin("intField", thrift.I32, 1); err != nil {
        return thrift.PrependError("Foo write field begin error: ", err)
    }

    item := x.IntField
    err := WriteI32_5137(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Foo write field end error: ", err)
    }
    return nil
}

func (x *Foo) writeField2(p thrift.Encoder) error {  // OptionalIntField
    if !x.IsSetOptionalIntField() {
        return nil
    }

    if err := p.WriteFieldBegin("optionalIntField", thrift.I32, 2); err != nil {
        return thrift.PrependError("Foo write field begin error: ", err)
    }

    item := *x.OptionalIntField
    err := WriteI32_5137(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Foo write field end error: ", err)
    }
    return nil
}

func (x *Foo) writeField3(p thrift.Encoder) error {  // IntFieldWithDefault
    if err := p.WriteFieldBegin("intFieldWithDefault", thrift.I32, 3); err != nil {
        return thrift.PrependError("Foo write field begin error: ", err)
    }

    item := x.IntFieldWithDefault
    err := WriteI32_5137(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Foo write field end error: ", err)
    }
    return nil
}

func (x *Foo) writeField4(p thrift.Encoder) error {  // SetField
    if err := p.WriteFieldBegin("setField", thrift.SET, 4); err != nil {
        return thrift.PrependError("Foo write field begin error: ", err)
    }

    item := x.SetField
    err := WriteSetWithAdapter(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Foo write field end error: ", err)
    }
    return nil
}

func (x *Foo) writeField5(p thrift.Encoder) error {  // OptionalSetField
    if !x.IsSetOptionalSetField() {
        return nil
    }

    if err := p.WriteFieldBegin("optionalSetField", thrift.SET, 5); err != nil {
        return thrift.PrependError("Foo write field begin error: ", err)
    }

    item := x.OptionalSetField
    err := WriteSetWithAdapter(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Foo write field end error: ", err)
    }
    return nil
}

func (x *Foo) writeField6(p thrift.Encoder) error {  // MapField
    if err := p.WriteFieldBegin("mapField", thrift.MAP, 6); err != nil {
        return thrift.PrependError("Foo write field begin error: ", err)
    }

    item := x.MapField
    err := WriteMapString_ListWithElemAdapterWithAdapter_8454(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Foo write field end error: ", err)
    }
    return nil
}

func (x *Foo) writeField7(p thrift.Encoder) error {  // OptionalMapField
    if !x.IsSetOptionalMapField() {
        return nil
    }

    if err := p.WriteFieldBegin("optionalMapField", thrift.MAP, 7); err != nil {
        return thrift.PrependError("Foo write field begin error: ", err)
    }

    item := x.OptionalMapField
    err := WriteMapString_ListWithElemAdapterWithAdapter_8454(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Foo write field end error: ", err)
    }
    return nil
}

func (x *Foo) writeField8(p thrift.Encoder) error {  // BinaryField
    if err := p.WriteFieldBegin("binaryField", thrift.STRING, 8); err != nil {
        return thrift.PrependError("Foo write field begin error: ", err)
    }

    item := x.BinaryField
    err := WriteBinary_5673(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Foo write field end error: ", err)
    }
    return nil
}

func (x *Foo) writeField9(p thrift.Encoder) error {  // LongField
    if err := p.WriteFieldBegin("longField", thrift.I64, 9); err != nil {
        return thrift.PrependError("Foo write field begin error: ", err)
    }

    item := x.LongField
    err := WriteMyI64(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Foo write field end error: ", err)
    }
    return nil
}

func (x *Foo) writeField10(p thrift.Encoder) error {  // AdaptedLongField
    if err := p.WriteFieldBegin("adaptedLongField", thrift.I64, 10); err != nil {
        return thrift.PrependError("Foo write field begin error: ", err)
    }

    item := x.AdaptedLongField
    err := WriteMyI64(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Foo write field end error: ", err)
    }
    return nil
}

func (x *Foo) writeField11(p thrift.Encoder) error {  // DoubleAdaptedField
    if err := p.WriteFieldBegin("doubleAdaptedField", thrift.I64, 11); err != nil {
        return thrift.PrependError("Foo write field begin error: ", err)
    }

    item := x.DoubleAdaptedField
    err := WriteDoubleTypedefI64(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Foo write field end error: ", err)
    }
    return nil
}

func (x *Foo) writeField12(p thrift.Encoder) error {  // AdaptedList
    if err := p.WriteFieldBegin("adapted_list", thrift.LIST, 12); err != nil {
        return thrift.PrependError("Foo write field begin error: ", err)
    }

    item := x.AdaptedList
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
        return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range item {
        {
            item := v
            if err := p.WriteI32(item); err != nil {
                return err
            }
        }
    }
    if err := p.WriteListEnd(); err != nil {
        return thrift.PrependError("error writing list end: ", err)
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Foo write field end error: ", err)
    }
    return nil
}

func (x *Foo) writeField13(p thrift.Encoder) error {  // AdaptedSet
    if err := p.WriteFieldBegin("adapted_set", thrift.SET, 13); err != nil {
        return thrift.PrependError("Foo write field begin error: ", err)
    }

    item := x.AdaptedSet
    if err := p.WriteSetBegin(thrift.I32, len(item)); err != nil {
        return thrift.PrependError("error writing set begin: ", err)
    }
    for _, v := range item {
        {
            item := v
            if err := p.WriteI32(item); err != nil {
                return err
            }
        }
    }
    if err := p.WriteSetEnd(); err != nil {
        return thrift.PrependError("error writing set end: ", err)
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Foo write field end error: ", err)
    }
    return nil
}

func (x *Foo) writeField14(p thrift.Encoder) error {  // AdaptedMap
    if err := p.WriteFieldBegin("adapted_map", thrift.MAP, 14); err != nil {
        return thrift.PrependError("Foo write field begin error: ", err)
    }

    item := x.AdaptedMap
    if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
        return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range item {
        {
            item := k
            if err := p.WriteString(item); err != nil {
                return err
            }
        }
    
        {
            item := v
            if err := p.WriteI32(item); err != nil {
                return err
            }
        }
    }
    if err := p.WriteMapEnd(); err != nil {
        return thrift.PrependError("error writing map end: ", err)
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Foo write field end error: ", err)
    }
    return nil
}

func (x *Foo) writeField15(p thrift.Encoder) error {  // AdaptedListNested
    if err := p.WriteFieldBegin("adapted_list_nested", thrift.LIST, 15); err != nil {
        return thrift.PrependError("Foo write field begin error: ", err)
    }

    item := x.AdaptedListNested
    if err := p.WriteListBegin(thrift.LIST, len(item)); err != nil {
        return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range item {
        {
            item := v
            if err := p.WriteListBegin(thrift.MAP, len(item)); err != nil {
                return thrift.PrependError("error writing list begin: ", err)
            }
            for _, v := range item {
                {
                    item := v
                    if err := p.WriteMapBegin(thrift.I32, thrift.I32, len(item)); err != nil {
                        return thrift.PrependError("error writing map begin: ", err)
                    }
                    for k, v := range item {
                        {
                            item := k
                            if err := p.WriteI32(item); err != nil {
                                return err
                            }
                        }
                    
                        {
                            item := v
                            if err := p.WriteI32(item); err != nil {
                                return err
                            }
                        }
                    }
                    if err := p.WriteMapEnd(); err != nil {
                        return thrift.PrependError("error writing map end: ", err)
                    }
                }
            }
            if err := p.WriteListEnd(); err != nil {
                return thrift.PrependError("error writing list end: ", err)
            }
        }
    }
    if err := p.WriteListEnd(); err != nil {
        return thrift.PrependError("error writing list end: ", err)
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Foo write field end error: ", err)
    }
    return nil
}

func (x *Foo) readField1(p thrift.Decoder) error {  // IntField
    result, err := ReadI32_5137(p)
    if err != nil {
        return err
    }

    x.IntField = result
    return nil
}

func (x *Foo) readField2(p thrift.Decoder) error {  // OptionalIntField
    result, err := ReadI32_5137(p)
    if err != nil {
        return err
    }

    x.OptionalIntField = &result
    return nil
}

func (x *Foo) readField3(p thrift.Decoder) error {  // IntFieldWithDefault
    result, err := ReadI32_5137(p)
    if err != nil {
        return err
    }

    x.IntFieldWithDefault = result
    return nil
}

func (x *Foo) readField4(p thrift.Decoder) error {  // SetField
    result, err := ReadSetWithAdapter(p)
    if err != nil {
        return err
    }

    x.SetField = result
    return nil
}

func (x *Foo) readField5(p thrift.Decoder) error {  // OptionalSetField
    result, err := ReadSetWithAdapter(p)
    if err != nil {
        return err
    }

    x.OptionalSetField = result
    return nil
}

func (x *Foo) readField6(p thrift.Decoder) error {  // MapField
    result, err := ReadMapString_ListWithElemAdapterWithAdapter_8454(p)
    if err != nil {
        return err
    }

    x.MapField = result
    return nil
}

func (x *Foo) readField7(p thrift.Decoder) error {  // OptionalMapField
    result, err := ReadMapString_ListWithElemAdapterWithAdapter_8454(p)
    if err != nil {
        return err
    }

    x.OptionalMapField = result
    return nil
}

func (x *Foo) readField8(p thrift.Decoder) error {  // BinaryField
    result, err := ReadBinary_5673(p)
    if err != nil {
        return err
    }

    x.BinaryField = result
    return nil
}

func (x *Foo) readField9(p thrift.Decoder) error {  // LongField
    result, err := ReadMyI64(p)
    if err != nil {
        return err
    }

    x.LongField = result
    return nil
}

func (x *Foo) readField10(p thrift.Decoder) error {  // AdaptedLongField
    result, err := ReadMyI64(p)
    if err != nil {
        return err
    }

    x.AdaptedLongField = result
    return nil
}

func (x *Foo) readField11(p thrift.Decoder) error {  // DoubleAdaptedField
    result, err := ReadDoubleTypedefI64(p)
    if err != nil {
        return err
    }

    x.DoubleAdaptedField = result
    return nil
}

func (x *Foo) readField12(p thrift.Decoder) error {  // AdaptedList
    _ /* elemType */, size, err := p.ReadListBegin()
    if err != nil {
        return thrift.PrependError("error reading list begin: ", err)
    }
    
    listResult := make([]int32, 0, size)
    for i := 0; i < size; i++ {
        var elem int32
        {
            result, err := p.ReadI32()
            if err != nil {
                return err
            }
            elem = result
        }
        listResult = append(listResult, elem)
    }
    
    if err := p.ReadListEnd(); err != nil {
        return thrift.PrependError("error reading list end: ", err)
    }
    result := listResult

    x.AdaptedList = result
    return nil
}

func (x *Foo) readField13(p thrift.Decoder) error {  // AdaptedSet
    _ /* elemType */, size, err := p.ReadSetBegin()
    if err != nil {
        return thrift.PrependError("error reading set begin: ", err)
    }
    
    setResult := make([]int32, 0, size)
    for i := 0; i < size; i++ {
        var elem int32
        {
            result, err := p.ReadI32()
            if err != nil {
                return err
            }
            elem = result
        }
        setResult = append(setResult, elem)
    }
    
    if err := p.ReadSetEnd(); err != nil {
        return thrift.PrependError("error reading set end: ", err)
    }
    result := setResult

    x.AdaptedSet = result
    return nil
}

func (x *Foo) readField14(p thrift.Decoder) error {  // AdaptedMap
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
    if err != nil {
        return thrift.PrependError("error reading map begin: ", err)
    }
    
    mapResult := make(map[string]int32, size)
    for i := 0; i < size; i++ {
        var key string
        {
            result, err := p.ReadString()
            if err != nil {
                return err
            }
            key = result
        }
    
        var value int32
        {
            result, err := p.ReadI32()
            if err != nil {
                return err
            }
            value = result
        }
    
        mapResult[key] = value
    }
    
    if err := p.ReadMapEnd(); err != nil {
        return thrift.PrependError("error reading map end: ", err)
    }
    result := mapResult

    x.AdaptedMap = result
    return nil
}

func (x *Foo) readField15(p thrift.Decoder) error {  // AdaptedListNested
    _ /* elemType */, size, err := p.ReadListBegin()
    if err != nil {
        return thrift.PrependError("error reading list begin: ", err)
    }
    
    listResult := make([][]map[int32]int32, 0, size)
    for i := 0; i < size; i++ {
        var elem []map[int32]int32
        {
            _ /* elemType */, size, err := p.ReadListBegin()
            if err != nil {
                return thrift.PrependError("error reading list begin: ", err)
            }
            
            listResult := make([]map[int32]int32, 0, size)
            for i := 0; i < size; i++ {
                var elem map[int32]int32
                {
                    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
                    if err != nil {
                        return thrift.PrependError("error reading map begin: ", err)
                    }
                    
                    mapResult := make(map[int32]int32, size)
                    for i := 0; i < size; i++ {
                        var key int32
                        {
                            result, err := p.ReadI32()
                            if err != nil {
                                return err
                            }
                            key = result
                        }
                    
                        var value int32
                        {
                            result, err := p.ReadI32()
                            if err != nil {
                                return err
                            }
                            value = result
                        }
                    
                        mapResult[key] = value
                    }
                    
                    if err := p.ReadMapEnd(); err != nil {
                        return thrift.PrependError("error reading map end: ", err)
                    }
                    result := mapResult
                    elem = result
                }
                listResult = append(listResult, elem)
            }
            
            if err := p.ReadListEnd(); err != nil {
                return thrift.PrependError("error reading list end: ", err)
            }
            result := listResult
            elem = result
        }
        listResult = append(listResult, elem)
    }
    
    if err := p.ReadListEnd(); err != nil {
        return thrift.PrependError("error reading list end: ", err)
    }
    result := listResult

    x.AdaptedListNested = result
    return nil
}




func (x *Foo) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("Foo"); err != nil {
        return thrift.PrependError("Foo write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }
    if err := x.writeField3(p); err != nil {
        return err
    }
    if err := x.writeField4(p); err != nil {
        return err
    }
    if err := x.writeField5(p); err != nil {
        return err
    }
    if err := x.writeField6(p); err != nil {
        return err
    }
    if err := x.writeField7(p); err != nil {
        return err
    }
    if err := x.writeField8(p); err != nil {
        return err
    }
    if err := x.writeField9(p); err != nil {
        return err
    }
    if err := x.writeField10(p); err != nil {
        return err
    }
    if err := x.writeField11(p); err != nil {
        return err
    }
    if err := x.writeField12(p); err != nil {
        return err
    }
    if err := x.writeField13(p); err != nil {
        return err
    }
    if err := x.writeField14(p); err != nil {
        return err
    }
    if err := x.writeField15(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("Foo write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("Foo write struct end error: ", err)
    }
    return nil
}

func (x *Foo) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("Foo read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("Foo field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "intField")):  // intField
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "optionalIntField")):  // optionalIntField
            fieldReadErr = x.readField2(p)
        case ((id == 3 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "intFieldWithDefault")):  // intFieldWithDefault
            fieldReadErr = x.readField3(p)
        case ((id == 4 && wireType == thrift.SET) || (id == thrift.NO_FIELD_ID && fieldName == "setField")):  // setField
            fieldReadErr = x.readField4(p)
        case ((id == 5 && wireType == thrift.SET) || (id == thrift.NO_FIELD_ID && fieldName == "optionalSetField")):  // optionalSetField
            fieldReadErr = x.readField5(p)
        case ((id == 6 && wireType == thrift.MAP) || (id == thrift.NO_FIELD_ID && fieldName == "mapField")):  // mapField
            fieldReadErr = x.readField6(p)
        case ((id == 7 && wireType == thrift.MAP) || (id == thrift.NO_FIELD_ID && fieldName == "optionalMapField")):  // optionalMapField
            fieldReadErr = x.readField7(p)
        case ((id == 8 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "binaryField")):  // binaryField
            fieldReadErr = x.readField8(p)
        case ((id == 9 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "longField")):  // longField
            fieldReadErr = x.readField9(p)
        case ((id == 10 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "adaptedLongField")):  // adaptedLongField
            fieldReadErr = x.readField10(p)
        case ((id == 11 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "doubleAdaptedField")):  // doubleAdaptedField
            fieldReadErr = x.readField11(p)
        case ((id == 12 && wireType == thrift.LIST) || (id == thrift.NO_FIELD_ID && fieldName == "adapted_list")):  // adapted_list
            fieldReadErr = x.readField12(p)
        case ((id == 13 && wireType == thrift.SET) || (id == thrift.NO_FIELD_ID && fieldName == "adapted_set")):  // adapted_set
            fieldReadErr = x.readField13(p)
        case ((id == 14 && wireType == thrift.MAP) || (id == thrift.NO_FIELD_ID && fieldName == "adapted_map")):  // adapted_map
            fieldReadErr = x.readField14(p)
        case ((id == 15 && wireType == thrift.LIST) || (id == thrift.NO_FIELD_ID && fieldName == "adapted_list_nested")):  // adapted_list_nested
            fieldReadErr = x.readField15(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("Foo read struct end error: ", err)
    }

    return nil
}

func (x *Foo) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *Foo) setDefaults() *Foo {
    return x.
        SetIntFieldNonCompat(NewI32_5137()).
        SetIntFieldWithDefaultNonCompat(int32(13)).
        SetSetFieldNonCompat(NewSetWithAdapter()).
        SetMapFieldNonCompat(NewMapString_ListWithElemAdapterWithAdapter_8454()).
        SetBinaryFieldNonCompat(NewBinary_5673()).
        SetLongFieldNonCompat(NewMyI64()).
        SetAdaptedLongFieldNonCompat(NewMyI64()).
        SetDoubleAdaptedFieldNonCompat(NewDoubleTypedefI64()).
        SetAdaptedListNonCompat(make([]int32, 0)).
        SetAdaptedSetNonCompat(make([]int32, 0)).
        SetAdaptedMapNonCompat(make(map[string]int32)).
        SetAdaptedListNestedNonCompat(make([][]map[int32]int32, 0))
}

func (x *Foo) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_Foo
}

type Baz struct {
    IntField *I32_5137 `thrift:"intField,1" json:"intField,omitempty" db:"intField"`
    SetField SetWithAdapter `thrift:"setField,4" json:"setField,omitempty" db:"setField"`
    MapField MapString_ListWithElemAdapterWithAdapter_8454 `thrift:"mapField,6" json:"mapField,omitempty" db:"mapField"`
    BinaryField Binary_5673 `thrift:"binaryField,8" json:"binaryField,omitempty" db:"binaryField"`
    LongField *MyI64 `thrift:"longField,9" json:"longField,omitempty" db:"longField"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*Baz)(nil)

func NewBaz() *Baz {
    return (&Baz{}).setDefaults()
}

func (x *Baz) GetIntField() I32_5137 {
    if !x.IsSetIntField() {
        return NewI32_5137()
    }
    return *x.IntField
}

func (x *Baz) GetSetField() SetWithAdapter {
    if !x.IsSetSetField() {
        return NewSetWithAdapter()
    }
    return x.SetField
}

func (x *Baz) GetMapField() MapString_ListWithElemAdapterWithAdapter_8454 {
    if !x.IsSetMapField() {
        return NewMapString_ListWithElemAdapterWithAdapter_8454()
    }
    return x.MapField
}

func (x *Baz) GetBinaryField() Binary_5673 {
    if !x.IsSetBinaryField() {
        return NewBinary_5673()
    }
    return x.BinaryField
}

func (x *Baz) GetLongField() MyI64 {
    if !x.IsSetLongField() {
        return NewMyI64()
    }
    return *x.LongField
}

func (x *Baz) SetIntFieldNonCompat(value I32_5137) *Baz {
    x.IntField = &value
    return x
}

func (x *Baz) SetIntField(value *I32_5137) *Baz {
    x.IntField = value
    return x
}

func (x *Baz) SetSetFieldNonCompat(value SetWithAdapter) *Baz {
    x.SetField = value
    return x
}

func (x *Baz) SetSetField(value SetWithAdapter) *Baz {
    x.SetField = value
    return x
}

func (x *Baz) SetMapFieldNonCompat(value MapString_ListWithElemAdapterWithAdapter_8454) *Baz {
    x.MapField = value
    return x
}

func (x *Baz) SetMapField(value MapString_ListWithElemAdapterWithAdapter_8454) *Baz {
    x.MapField = value
    return x
}

func (x *Baz) SetBinaryFieldNonCompat(value Binary_5673) *Baz {
    x.BinaryField = value
    return x
}

func (x *Baz) SetBinaryField(value Binary_5673) *Baz {
    x.BinaryField = value
    return x
}

func (x *Baz) SetLongFieldNonCompat(value MyI64) *Baz {
    x.LongField = &value
    return x
}

func (x *Baz) SetLongField(value *MyI64) *Baz {
    x.LongField = value
    return x
}

func (x *Baz) IsSetIntField() bool {
    return x != nil && x.IntField != nil
}

func (x *Baz) IsSetSetField() bool {
    return x != nil && x.SetField != nil
}

func (x *Baz) IsSetMapField() bool {
    return x != nil && x.MapField != nil
}

func (x *Baz) IsSetBinaryField() bool {
    return x != nil && x.BinaryField != nil
}

func (x *Baz) IsSetLongField() bool {
    return x != nil && x.LongField != nil
}

func (x *Baz) writeField1(p thrift.Encoder) error {  // IntField
    if !x.IsSetIntField() {
        return nil
    }

    if err := p.WriteFieldBegin("intField", thrift.I32, 1); err != nil {
        return thrift.PrependError("Baz write field begin error: ", err)
    }

    item := *x.IntField
    err := WriteI32_5137(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Baz write field end error: ", err)
    }
    return nil
}

func (x *Baz) writeField4(p thrift.Encoder) error {  // SetField
    if !x.IsSetSetField() {
        return nil
    }

    if err := p.WriteFieldBegin("setField", thrift.SET, 4); err != nil {
        return thrift.PrependError("Baz write field begin error: ", err)
    }

    item := x.SetField
    err := WriteSetWithAdapter(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Baz write field end error: ", err)
    }
    return nil
}

func (x *Baz) writeField6(p thrift.Encoder) error {  // MapField
    if !x.IsSetMapField() {
        return nil
    }

    if err := p.WriteFieldBegin("mapField", thrift.MAP, 6); err != nil {
        return thrift.PrependError("Baz write field begin error: ", err)
    }

    item := x.MapField
    err := WriteMapString_ListWithElemAdapterWithAdapter_8454(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Baz write field end error: ", err)
    }
    return nil
}

func (x *Baz) writeField8(p thrift.Encoder) error {  // BinaryField
    if !x.IsSetBinaryField() {
        return nil
    }

    if err := p.WriteFieldBegin("binaryField", thrift.STRING, 8); err != nil {
        return thrift.PrependError("Baz write field begin error: ", err)
    }

    item := x.BinaryField
    err := WriteBinary_5673(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Baz write field end error: ", err)
    }
    return nil
}

func (x *Baz) writeField9(p thrift.Encoder) error {  // LongField
    if !x.IsSetLongField() {
        return nil
    }

    if err := p.WriteFieldBegin("longField", thrift.I64, 9); err != nil {
        return thrift.PrependError("Baz write field begin error: ", err)
    }

    item := *x.LongField
    err := WriteMyI64(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Baz write field end error: ", err)
    }
    return nil
}

func (x *Baz) readField1(p thrift.Decoder) error {  // IntField
    result, err := ReadI32_5137(p)
    if err != nil {
        return err
    }

    x.IntField = &result
    return nil
}

func (x *Baz) readField4(p thrift.Decoder) error {  // SetField
    result, err := ReadSetWithAdapter(p)
    if err != nil {
        return err
    }

    x.SetField = result
    return nil
}

func (x *Baz) readField6(p thrift.Decoder) error {  // MapField
    result, err := ReadMapString_ListWithElemAdapterWithAdapter_8454(p)
    if err != nil {
        return err
    }

    x.MapField = result
    return nil
}

func (x *Baz) readField8(p thrift.Decoder) error {  // BinaryField
    result, err := ReadBinary_5673(p)
    if err != nil {
        return err
    }

    x.BinaryField = result
    return nil
}

func (x *Baz) readField9(p thrift.Decoder) error {  // LongField
    result, err := ReadMyI64(p)
    if err != nil {
        return err
    }

    x.LongField = &result
    return nil
}



func (x *Baz) countSetFields() int {
    count := int(0)
    if (x.IsSetIntField()) {
        count++
    }
    if (x.IsSetSetField()) {
        count++
    }
    if (x.IsSetMapField()) {
        count++
    }
    if (x.IsSetBinaryField()) {
        count++
    }
    if (x.IsSetLongField()) {
        count++
    }
    return count
}

func (x *Baz) CountSetFieldsBaz() int {
    return x.countSetFields()
}



func (x *Baz) Write(p thrift.Encoder) error {
    if countSet := x.countSetFields(); countSet > 1 {
        return fmt.Errorf("Baz write union: no more than one field must be set (%d set).", countSet)
    }
    if err := p.WriteStructBegin("Baz"); err != nil {
        return thrift.PrependError("Baz write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField4(p); err != nil {
        return err
    }
    if err := x.writeField6(p); err != nil {
        return err
    }
    if err := x.writeField8(p); err != nil {
        return err
    }
    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("Baz write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("Baz write struct end error: ", err)
    }
    return nil
}

func (x *Baz) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("Baz read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("Baz field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "intField")):  // intField
            fieldReadErr = x.readField1(p)
        case ((id == 4 && wireType == thrift.SET) || (id == thrift.NO_FIELD_ID && fieldName == "setField")):  // setField
            fieldReadErr = x.readField4(p)
        case ((id == 6 && wireType == thrift.MAP) || (id == thrift.NO_FIELD_ID && fieldName == "mapField")):  // mapField
            fieldReadErr = x.readField6(p)
        case ((id == 8 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "binaryField")):  // binaryField
            fieldReadErr = x.readField8(p)
        case ((id == 9 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "longField")):  // longField
            fieldReadErr = x.readField9(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("Baz read struct end error: ", err)
    }

    return nil
}

func (x *Baz) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *Baz) setDefaults() *Baz {
    return x
}

func (x *Baz) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_Baz
}

type Bar struct {
    StructField *Foo_6868 `thrift:"structField,1" json:"structField" db:"structField"`
    OptionalStructField *Foo_3943 `thrift:"optionalStructField,2,optional" json:"optionalStructField,omitempty" db:"optionalStructField"`
    StructListField []*FooWithAdapter_9317 `thrift:"structListField,3" json:"structListField" db:"structListField"`
    OptionalStructListField []*FooWithAdapter_9317 `thrift:"optionalStructListField,4,optional" json:"optionalStructListField,omitempty" db:"optionalStructListField"`
    UnionField *Baz_7352 `thrift:"unionField,5" json:"unionField" db:"unionField"`
    OptionalUnionField *Baz_7352 `thrift:"optionalUnionField,6,optional" json:"optionalUnionField,omitempty" db:"optionalUnionField"`
    AdaptedStructField *DirectlyAdapted `thrift:"adaptedStructField,7" json:"adaptedStructField" db:"adaptedStructField"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*Bar)(nil)

func NewBar() *Bar {
    return (&Bar{}).setDefaults()
}

func (x *Bar) GetStructField() *Foo_6868 {
    if !x.IsSetStructField() {
        return nil
    }
    return x.StructField
}

func (x *Bar) GetOptionalStructField() *Foo_3943 {
    if !x.IsSetOptionalStructField() {
        return nil
    }
    return x.OptionalStructField
}

func (x *Bar) GetStructListField() []*FooWithAdapter_9317 {
    if !x.IsSetStructListField() {
        return make([]*FooWithAdapter_9317, 0)
    }
    return x.StructListField
}

func (x *Bar) GetOptionalStructListField() []*FooWithAdapter_9317 {
    if !x.IsSetOptionalStructListField() {
        return make([]*FooWithAdapter_9317, 0)
    }
    return x.OptionalStructListField
}

func (x *Bar) GetUnionField() *Baz_7352 {
    if !x.IsSetUnionField() {
        return nil
    }
    return x.UnionField
}

func (x *Bar) GetOptionalUnionField() *Baz_7352 {
    if !x.IsSetOptionalUnionField() {
        return nil
    }
    return x.OptionalUnionField
}

func (x *Bar) GetAdaptedStructField() *DirectlyAdapted {
    if !x.IsSetAdaptedStructField() {
        return nil
    }
    return x.AdaptedStructField
}

func (x *Bar) SetStructFieldNonCompat(value *Foo_6868) *Bar {
    x.StructField = value
    return x
}

func (x *Bar) SetStructField(value *Foo_6868) *Bar {
    x.StructField = value
    return x
}

func (x *Bar) SetOptionalStructFieldNonCompat(value *Foo_3943) *Bar {
    x.OptionalStructField = value
    return x
}

func (x *Bar) SetOptionalStructField(value *Foo_3943) *Bar {
    x.OptionalStructField = value
    return x
}

func (x *Bar) SetStructListFieldNonCompat(value []*FooWithAdapter_9317) *Bar {
    x.StructListField = value
    return x
}

func (x *Bar) SetStructListField(value []*FooWithAdapter_9317) *Bar {
    x.StructListField = value
    return x
}

func (x *Bar) SetOptionalStructListFieldNonCompat(value []*FooWithAdapter_9317) *Bar {
    x.OptionalStructListField = value
    return x
}

func (x *Bar) SetOptionalStructListField(value []*FooWithAdapter_9317) *Bar {
    x.OptionalStructListField = value
    return x
}

func (x *Bar) SetUnionFieldNonCompat(value *Baz_7352) *Bar {
    x.UnionField = value
    return x
}

func (x *Bar) SetUnionField(value *Baz_7352) *Bar {
    x.UnionField = value
    return x
}

func (x *Bar) SetOptionalUnionFieldNonCompat(value *Baz_7352) *Bar {
    x.OptionalUnionField = value
    return x
}

func (x *Bar) SetOptionalUnionField(value *Baz_7352) *Bar {
    x.OptionalUnionField = value
    return x
}

func (x *Bar) SetAdaptedStructFieldNonCompat(value *DirectlyAdapted) *Bar {
    x.AdaptedStructField = value
    return x
}

func (x *Bar) SetAdaptedStructField(value *DirectlyAdapted) *Bar {
    x.AdaptedStructField = value
    return x
}

func (x *Bar) IsSetStructField() bool {
    return x != nil && x.StructField != nil
}

func (x *Bar) IsSetOptionalStructField() bool {
    return x != nil && x.OptionalStructField != nil
}

func (x *Bar) IsSetStructListField() bool {
    return x != nil && x.StructListField != nil
}

func (x *Bar) IsSetOptionalStructListField() bool {
    return x != nil && x.OptionalStructListField != nil
}

func (x *Bar) IsSetUnionField() bool {
    return x != nil && x.UnionField != nil
}

func (x *Bar) IsSetOptionalUnionField() bool {
    return x != nil && x.OptionalUnionField != nil
}

func (x *Bar) IsSetAdaptedStructField() bool {
    return x != nil && x.AdaptedStructField != nil
}

func (x *Bar) writeField1(p thrift.Encoder) error {  // StructField
    if !x.IsSetStructField() {
        return nil
    }

    if err := p.WriteFieldBegin("structField", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError("Bar write field begin error: ", err)
    }

    item := x.StructField
    err := WriteFoo_6868(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Bar write field end error: ", err)
    }
    return nil
}

func (x *Bar) writeField2(p thrift.Encoder) error {  // OptionalStructField
    if !x.IsSetOptionalStructField() {
        return nil
    }

    if err := p.WriteFieldBegin("optionalStructField", thrift.STRUCT, 2); err != nil {
        return thrift.PrependError("Bar write field begin error: ", err)
    }

    item := x.OptionalStructField
    err := WriteFoo_3943(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Bar write field end error: ", err)
    }
    return nil
}

func (x *Bar) writeField3(p thrift.Encoder) error {  // StructListField
    if err := p.WriteFieldBegin("structListField", thrift.LIST, 3); err != nil {
        return thrift.PrependError("Bar write field begin error: ", err)
    }

    item := x.StructListField
    if err := p.WriteListBegin(thrift.STRUCT, len(item)); err != nil {
        return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range item {
        {
            item := v
            err := WriteFooWithAdapter_9317(item, p)
            if err != nil {
                return err
            }
        }
    }
    if err := p.WriteListEnd(); err != nil {
        return thrift.PrependError("error writing list end: ", err)
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Bar write field end error: ", err)
    }
    return nil
}

func (x *Bar) writeField4(p thrift.Encoder) error {  // OptionalStructListField
    if !x.IsSetOptionalStructListField() {
        return nil
    }

    if err := p.WriteFieldBegin("optionalStructListField", thrift.LIST, 4); err != nil {
        return thrift.PrependError("Bar write field begin error: ", err)
    }

    item := x.OptionalStructListField
    if err := p.WriteListBegin(thrift.STRUCT, len(item)); err != nil {
        return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range item {
        {
            item := v
            err := WriteFooWithAdapter_9317(item, p)
            if err != nil {
                return err
            }
        }
    }
    if err := p.WriteListEnd(); err != nil {
        return thrift.PrependError("error writing list end: ", err)
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Bar write field end error: ", err)
    }
    return nil
}

func (x *Bar) writeField5(p thrift.Encoder) error {  // UnionField
    if !x.IsSetUnionField() {
        return nil
    }

    if err := p.WriteFieldBegin("unionField", thrift.STRUCT, 5); err != nil {
        return thrift.PrependError("Bar write field begin error: ", err)
    }

    item := x.UnionField
    err := WriteBaz_7352(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Bar write field end error: ", err)
    }
    return nil
}

func (x *Bar) writeField6(p thrift.Encoder) error {  // OptionalUnionField
    if !x.IsSetOptionalUnionField() {
        return nil
    }

    if err := p.WriteFieldBegin("optionalUnionField", thrift.STRUCT, 6); err != nil {
        return thrift.PrependError("Bar write field begin error: ", err)
    }

    item := x.OptionalUnionField
    err := WriteBaz_7352(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Bar write field end error: ", err)
    }
    return nil
}

func (x *Bar) writeField7(p thrift.Encoder) error {  // AdaptedStructField
    if !x.IsSetAdaptedStructField() {
        return nil
    }

    if err := p.WriteFieldBegin("adaptedStructField", thrift.STRUCT, 7); err != nil {
        return thrift.PrependError("Bar write field begin error: ", err)
    }

    item := x.AdaptedStructField
    if err := item.Write(p); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Bar write field end error: ", err)
    }
    return nil
}

func (x *Bar) readField1(p thrift.Decoder) error {  // StructField
    result, err := ReadFoo_6868(p)
    if err != nil {
        return err
    }

    x.StructField = result
    return nil
}

func (x *Bar) readField2(p thrift.Decoder) error {  // OptionalStructField
    result, err := ReadFoo_3943(p)
    if err != nil {
        return err
    }

    x.OptionalStructField = result
    return nil
}

func (x *Bar) readField3(p thrift.Decoder) error {  // StructListField
    _ /* elemType */, size, err := p.ReadListBegin()
    if err != nil {
        return thrift.PrependError("error reading list begin: ", err)
    }
    
    listResult := make([]*FooWithAdapter_9317, 0, size)
    for i := 0; i < size; i++ {
        var elem *FooWithAdapter_9317
        {
            result, err := ReadFooWithAdapter_9317(p)
            if err != nil {
                return err
            }
            elem = result
        }
        listResult = append(listResult, elem)
    }
    
    if err := p.ReadListEnd(); err != nil {
        return thrift.PrependError("error reading list end: ", err)
    }
    result := listResult

    x.StructListField = result
    return nil
}

func (x *Bar) readField4(p thrift.Decoder) error {  // OptionalStructListField
    _ /* elemType */, size, err := p.ReadListBegin()
    if err != nil {
        return thrift.PrependError("error reading list begin: ", err)
    }
    
    listResult := make([]*FooWithAdapter_9317, 0, size)
    for i := 0; i < size; i++ {
        var elem *FooWithAdapter_9317
        {
            result, err := ReadFooWithAdapter_9317(p)
            if err != nil {
                return err
            }
            elem = result
        }
        listResult = append(listResult, elem)
    }
    
    if err := p.ReadListEnd(); err != nil {
        return thrift.PrependError("error reading list end: ", err)
    }
    result := listResult

    x.OptionalStructListField = result
    return nil
}

func (x *Bar) readField5(p thrift.Decoder) error {  // UnionField
    result, err := ReadBaz_7352(p)
    if err != nil {
        return err
    }

    x.UnionField = result
    return nil
}

func (x *Bar) readField6(p thrift.Decoder) error {  // OptionalUnionField
    result, err := ReadBaz_7352(p)
    if err != nil {
        return err
    }

    x.OptionalUnionField = result
    return nil
}

func (x *Bar) readField7(p thrift.Decoder) error {  // AdaptedStructField
    result := NewDirectlyAdapted()
    err := result.Read(p)
    if err != nil {
        return err
    }

    x.AdaptedStructField = result
    return nil
}








func (x *Bar) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("Bar"); err != nil {
        return thrift.PrependError("Bar write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }
    if err := x.writeField3(p); err != nil {
        return err
    }
    if err := x.writeField4(p); err != nil {
        return err
    }
    if err := x.writeField5(p); err != nil {
        return err
    }
    if err := x.writeField6(p); err != nil {
        return err
    }
    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("Bar write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("Bar write struct end error: ", err)
    }
    return nil
}

func (x *Bar) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("Bar read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("Bar field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "structField")):  // structField
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "optionalStructField")):  // optionalStructField
            fieldReadErr = x.readField2(p)
        case ((id == 3 && wireType == thrift.LIST) || (id == thrift.NO_FIELD_ID && fieldName == "structListField")):  // structListField
            fieldReadErr = x.readField3(p)
        case ((id == 4 && wireType == thrift.LIST) || (id == thrift.NO_FIELD_ID && fieldName == "optionalStructListField")):  // optionalStructListField
            fieldReadErr = x.readField4(p)
        case ((id == 5 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "unionField")):  // unionField
            fieldReadErr = x.readField5(p)
        case ((id == 6 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "optionalUnionField")):  // optionalUnionField
            fieldReadErr = x.readField6(p)
        case ((id == 7 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "adaptedStructField")):  // adaptedStructField
            fieldReadErr = x.readField7(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("Bar read struct end error: ", err)
    }

    return nil
}

func (x *Bar) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *Bar) setDefaults() *Bar {
    return x.
        SetStructFieldNonCompat(NewFoo_6868()).
        SetStructListFieldNonCompat(make([]*FooWithAdapter_9317, 0)).
        SetUnionFieldNonCompat(NewBaz_7352()).
        SetAdaptedStructFieldNonCompat(NewDirectlyAdapted())
}

func (x *Bar) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_Bar
}

type DirectlyAdapted struct {
    Field int32 `thrift:"field,1" json:"field" db:"field"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*DirectlyAdapted)(nil)

func NewDirectlyAdapted() *DirectlyAdapted {
    return (&DirectlyAdapted{}).setDefaults()
}

func (x *DirectlyAdapted) GetField() int32 {
    return x.Field
}

func (x *DirectlyAdapted) SetFieldNonCompat(value int32) *DirectlyAdapted {
    x.Field = value
    return x
}

func (x *DirectlyAdapted) SetField(value int32) *DirectlyAdapted {
    x.Field = value
    return x
}

func (x *DirectlyAdapted) writeField1(p thrift.Encoder) error {  // Field
    if err := p.WriteFieldBegin("field", thrift.I32, 1); err != nil {
        return thrift.PrependError("DirectlyAdapted write field begin error: ", err)
    }

    item := x.Field
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("DirectlyAdapted write field end error: ", err)
    }
    return nil
}

func (x *DirectlyAdapted) readField1(p thrift.Decoder) error {  // Field
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.Field = result
    return nil
}



func (x *DirectlyAdapted) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("DirectlyAdapted"); err != nil {
        return thrift.PrependError("DirectlyAdapted write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("DirectlyAdapted write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("DirectlyAdapted write struct end error: ", err)
    }
    return nil
}

func (x *DirectlyAdapted) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("DirectlyAdapted read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("DirectlyAdapted field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "field")):  // field
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("DirectlyAdapted read struct end error: ", err)
    }

    return nil
}

func (x *DirectlyAdapted) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *DirectlyAdapted) setDefaults() *DirectlyAdapted {
    return x.
        SetFieldNonCompat(0)
}

func (x *DirectlyAdapted) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_DirectlyAdapted
}

type IndependentDirectlyAdapted struct {
    Field int32 `thrift:"field,1" json:"field" db:"field"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*IndependentDirectlyAdapted)(nil)

func NewIndependentDirectlyAdapted() *IndependentDirectlyAdapted {
    return (&IndependentDirectlyAdapted{}).setDefaults()
}

func (x *IndependentDirectlyAdapted) GetField() int32 {
    return x.Field
}

func (x *IndependentDirectlyAdapted) SetFieldNonCompat(value int32) *IndependentDirectlyAdapted {
    x.Field = value
    return x
}

func (x *IndependentDirectlyAdapted) SetField(value int32) *IndependentDirectlyAdapted {
    x.Field = value
    return x
}

func (x *IndependentDirectlyAdapted) writeField1(p thrift.Encoder) error {  // Field
    if err := p.WriteFieldBegin("field", thrift.I32, 1); err != nil {
        return thrift.PrependError("IndependentDirectlyAdapted write field begin error: ", err)
    }

    item := x.Field
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("IndependentDirectlyAdapted write field end error: ", err)
    }
    return nil
}

func (x *IndependentDirectlyAdapted) readField1(p thrift.Decoder) error {  // Field
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.Field = result
    return nil
}



func (x *IndependentDirectlyAdapted) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("IndependentDirectlyAdapted"); err != nil {
        return thrift.PrependError("IndependentDirectlyAdapted write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("IndependentDirectlyAdapted write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("IndependentDirectlyAdapted write struct end error: ", err)
    }
    return nil
}

func (x *IndependentDirectlyAdapted) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("IndependentDirectlyAdapted read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("IndependentDirectlyAdapted field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "field")):  // field
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("IndependentDirectlyAdapted read struct end error: ", err)
    }

    return nil
}

func (x *IndependentDirectlyAdapted) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *IndependentDirectlyAdapted) setDefaults() *IndependentDirectlyAdapted {
    return x.
        SetFieldNonCompat(0)
}

func (x *IndependentDirectlyAdapted) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_IndependentDirectlyAdapted
}

type StructWithFieldAdapter struct {
    Field int32 `thrift:"field,1" json:"field" db:"field"`
    SharedField int32 `thrift:"shared_field,2" json:"shared_field" db:"shared_field"`
    OptSharedField *int32 `thrift:"opt_shared_field,3,optional" json:"opt_shared_field,omitempty" db:"opt_shared_field"`
    OptBoxedField *int32 `thrift:"opt_boxed_field,4,optional" json:"opt_boxed_field,omitempty" db:"opt_boxed_field"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*StructWithFieldAdapter)(nil)

func NewStructWithFieldAdapter() *StructWithFieldAdapter {
    return (&StructWithFieldAdapter{}).setDefaults()
}

func (x *StructWithFieldAdapter) GetField() int32 {
    return x.Field
}

func (x *StructWithFieldAdapter) GetSharedField() int32 {
    return x.SharedField
}

func (x *StructWithFieldAdapter) GetOptSharedField() int32 {
    if !x.IsSetOptSharedField() {
        return 0
    }
    return *x.OptSharedField
}

func (x *StructWithFieldAdapter) GetOptBoxedField() int32 {
    if !x.IsSetOptBoxedField() {
        return 0
    }
    return *x.OptBoxedField
}

func (x *StructWithFieldAdapter) SetFieldNonCompat(value int32) *StructWithFieldAdapter {
    x.Field = value
    return x
}

func (x *StructWithFieldAdapter) SetField(value int32) *StructWithFieldAdapter {
    x.Field = value
    return x
}

func (x *StructWithFieldAdapter) SetSharedFieldNonCompat(value int32) *StructWithFieldAdapter {
    x.SharedField = value
    return x
}

func (x *StructWithFieldAdapter) SetSharedField(value int32) *StructWithFieldAdapter {
    x.SharedField = value
    return x
}

func (x *StructWithFieldAdapter) SetOptSharedFieldNonCompat(value int32) *StructWithFieldAdapter {
    x.OptSharedField = &value
    return x
}

func (x *StructWithFieldAdapter) SetOptSharedField(value *int32) *StructWithFieldAdapter {
    x.OptSharedField = value
    return x
}

func (x *StructWithFieldAdapter) SetOptBoxedFieldNonCompat(value int32) *StructWithFieldAdapter {
    x.OptBoxedField = &value
    return x
}

func (x *StructWithFieldAdapter) SetOptBoxedField(value *int32) *StructWithFieldAdapter {
    x.OptBoxedField = value
    return x
}

func (x *StructWithFieldAdapter) IsSetOptSharedField() bool {
    return x != nil && x.OptSharedField != nil
}

func (x *StructWithFieldAdapter) IsSetOptBoxedField() bool {
    return x != nil && x.OptBoxedField != nil
}

func (x *StructWithFieldAdapter) writeField1(p thrift.Encoder) error {  // Field
    if err := p.WriteFieldBegin("field", thrift.I32, 1); err != nil {
        return thrift.PrependError("StructWithFieldAdapter write field begin error: ", err)
    }

    item := x.Field
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("StructWithFieldAdapter write field end error: ", err)
    }
    return nil
}

func (x *StructWithFieldAdapter) writeField2(p thrift.Encoder) error {  // SharedField
    if err := p.WriteFieldBegin("shared_field", thrift.I32, 2); err != nil {
        return thrift.PrependError("StructWithFieldAdapter write field begin error: ", err)
    }

    item := x.SharedField
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("StructWithFieldAdapter write field end error: ", err)
    }
    return nil
}

func (x *StructWithFieldAdapter) writeField3(p thrift.Encoder) error {  // OptSharedField
    if !x.IsSetOptSharedField() {
        return nil
    }

    if err := p.WriteFieldBegin("opt_shared_field", thrift.I32, 3); err != nil {
        return thrift.PrependError("StructWithFieldAdapter write field begin error: ", err)
    }

    item := *x.OptSharedField
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("StructWithFieldAdapter write field end error: ", err)
    }
    return nil
}

func (x *StructWithFieldAdapter) writeField4(p thrift.Encoder) error {  // OptBoxedField
    if !x.IsSetOptBoxedField() {
        return nil
    }

    if err := p.WriteFieldBegin("opt_boxed_field", thrift.I32, 4); err != nil {
        return thrift.PrependError("StructWithFieldAdapter write field begin error: ", err)
    }

    item := *x.OptBoxedField
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("StructWithFieldAdapter write field end error: ", err)
    }
    return nil
}

func (x *StructWithFieldAdapter) readField1(p thrift.Decoder) error {  // Field
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.Field = result
    return nil
}

func (x *StructWithFieldAdapter) readField2(p thrift.Decoder) error {  // SharedField
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.SharedField = result
    return nil
}

func (x *StructWithFieldAdapter) readField3(p thrift.Decoder) error {  // OptSharedField
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.OptSharedField = &result
    return nil
}

func (x *StructWithFieldAdapter) readField4(p thrift.Decoder) error {  // OptBoxedField
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.OptBoxedField = &result
    return nil
}





func (x *StructWithFieldAdapter) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("StructWithFieldAdapter"); err != nil {
        return thrift.PrependError("StructWithFieldAdapter write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }
    if err := x.writeField3(p); err != nil {
        return err
    }
    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("StructWithFieldAdapter write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("StructWithFieldAdapter write struct end error: ", err)
    }
    return nil
}

func (x *StructWithFieldAdapter) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("StructWithFieldAdapter read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("StructWithFieldAdapter field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "field")):  // field
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "shared_field")):  // shared_field
            fieldReadErr = x.readField2(p)
        case ((id == 3 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "opt_shared_field")):  // opt_shared_field
            fieldReadErr = x.readField3(p)
        case ((id == 4 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "opt_boxed_field")):  // opt_boxed_field
            fieldReadErr = x.readField4(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("StructWithFieldAdapter read struct end error: ", err)
    }

    return nil
}

func (x *StructWithFieldAdapter) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *StructWithFieldAdapter) setDefaults() *StructWithFieldAdapter {
    return x.
        SetFieldNonCompat(0).
        SetSharedFieldNonCompat(0)
}

func (x *StructWithFieldAdapter) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_StructWithFieldAdapter
}

type TerseAdaptedFields struct {
    IntField int32 `thrift:"int_field,1" json:"int_field" db:"int_field"`
    StringField string `thrift:"string_field,2" json:"string_field" db:"string_field"`
    SetField []int32 `thrift:"set_field,3" json:"set_field" db:"set_field"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*TerseAdaptedFields)(nil)

func NewTerseAdaptedFields() *TerseAdaptedFields {
    return (&TerseAdaptedFields{}).setDefaults()
}

func (x *TerseAdaptedFields) GetIntField() int32 {
    return x.IntField
}

func (x *TerseAdaptedFields) GetStringField() string {
    return x.StringField
}

func (x *TerseAdaptedFields) GetSetField() []int32 {
    if !x.IsSetSetField() {
        return make([]int32, 0)
    }
    return x.SetField
}

func (x *TerseAdaptedFields) SetIntFieldNonCompat(value int32) *TerseAdaptedFields {
    x.IntField = value
    return x
}

func (x *TerseAdaptedFields) SetIntField(value int32) *TerseAdaptedFields {
    x.IntField = value
    return x
}

func (x *TerseAdaptedFields) SetStringFieldNonCompat(value string) *TerseAdaptedFields {
    x.StringField = value
    return x
}

func (x *TerseAdaptedFields) SetStringField(value string) *TerseAdaptedFields {
    x.StringField = value
    return x
}

func (x *TerseAdaptedFields) SetSetFieldNonCompat(value []int32) *TerseAdaptedFields {
    x.SetField = value
    return x
}

func (x *TerseAdaptedFields) SetSetField(value []int32) *TerseAdaptedFields {
    x.SetField = value
    return x
}

func (x *TerseAdaptedFields) IsSetSetField() bool {
    return x != nil && x.SetField != nil
}

func (x *TerseAdaptedFields) writeField1(p thrift.Encoder) error {  // IntField
    if err := p.WriteFieldBegin("int_field", thrift.I32, 1); err != nil {
        return thrift.PrependError("TerseAdaptedFields write field begin error: ", err)
    }

    item := x.IntField
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("TerseAdaptedFields write field end error: ", err)
    }
    return nil
}

func (x *TerseAdaptedFields) writeField2(p thrift.Encoder) error {  // StringField
    if err := p.WriteFieldBegin("string_field", thrift.STRING, 2); err != nil {
        return thrift.PrependError("TerseAdaptedFields write field begin error: ", err)
    }

    item := x.StringField
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("TerseAdaptedFields write field end error: ", err)
    }
    return nil
}

func (x *TerseAdaptedFields) writeField3(p thrift.Encoder) error {  // SetField
    if err := p.WriteFieldBegin("set_field", thrift.SET, 3); err != nil {
        return thrift.PrependError("TerseAdaptedFields write field begin error: ", err)
    }

    item := x.SetField
    if err := p.WriteSetBegin(thrift.I32, len(item)); err != nil {
        return thrift.PrependError("error writing set begin: ", err)
    }
    for _, v := range item {
        {
            item := v
            if err := p.WriteI32(item); err != nil {
                return err
            }
        }
    }
    if err := p.WriteSetEnd(); err != nil {
        return thrift.PrependError("error writing set end: ", err)
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("TerseAdaptedFields write field end error: ", err)
    }
    return nil
}

func (x *TerseAdaptedFields) readField1(p thrift.Decoder) error {  // IntField
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.IntField = result
    return nil
}

func (x *TerseAdaptedFields) readField2(p thrift.Decoder) error {  // StringField
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.StringField = result
    return nil
}

func (x *TerseAdaptedFields) readField3(p thrift.Decoder) error {  // SetField
    _ /* elemType */, size, err := p.ReadSetBegin()
    if err != nil {
        return thrift.PrependError("error reading set begin: ", err)
    }
    
    setResult := make([]int32, 0, size)
    for i := 0; i < size; i++ {
        var elem int32
        {
            result, err := p.ReadI32()
            if err != nil {
                return err
            }
            elem = result
        }
        setResult = append(setResult, elem)
    }
    
    if err := p.ReadSetEnd(); err != nil {
        return thrift.PrependError("error reading set end: ", err)
    }
    result := setResult

    x.SetField = result
    return nil
}



func (x *TerseAdaptedFields) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("TerseAdaptedFields"); err != nil {
        return thrift.PrependError("TerseAdaptedFields write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }
    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("TerseAdaptedFields write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("TerseAdaptedFields write struct end error: ", err)
    }
    return nil
}

func (x *TerseAdaptedFields) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("TerseAdaptedFields read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("TerseAdaptedFields field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "int_field")):  // int_field
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "string_field")):  // string_field
            fieldReadErr = x.readField2(p)
        case ((id == 3 && wireType == thrift.SET) || (id == thrift.NO_FIELD_ID && fieldName == "set_field")):  // set_field
            fieldReadErr = x.readField3(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("TerseAdaptedFields read struct end error: ", err)
    }

    return nil
}

func (x *TerseAdaptedFields) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *TerseAdaptedFields) setDefaults() *TerseAdaptedFields {
    return x.
        SetIntFieldNonCompat(0).
        SetStringFieldNonCompat("").
        SetSetFieldNonCompat(make([]int32, 0))
}

func (x *TerseAdaptedFields) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_TerseAdaptedFields
}

type B struct {
    A *AdaptedA `thrift:"a,1" json:"a" db:"a"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*B)(nil)

func NewB() *B {
    return (&B{}).setDefaults()
}

func (x *B) GetA() *AdaptedA {
    if !x.IsSetA() {
        return nil
    }
    return x.A
}

func (x *B) SetANonCompat(value *AdaptedA) *B {
    x.A = value
    return x
}

func (x *B) SetA(value *AdaptedA) *B {
    x.A = value
    return x
}

func (x *B) IsSetA() bool {
    return x != nil && x.A != nil
}

func (x *B) writeField1(p thrift.Encoder) error {  // A
    if !x.IsSetA() {
        return nil
    }

    if err := p.WriteFieldBegin("a", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError("B write field begin error: ", err)
    }

    item := x.A
    err := WriteAdaptedA(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("B write field end error: ", err)
    }
    return nil
}

func (x *B) readField1(p thrift.Decoder) error {  // A
    result, err := ReadAdaptedA(p)
    if err != nil {
        return err
    }

    x.A = result
    return nil
}




func (x *B) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("B"); err != nil {
        return thrift.PrependError("B write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("B write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("B write struct end error: ", err)
    }
    return nil
}

func (x *B) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("B read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("B field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "a")):  // a
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("B read struct end error: ", err)
    }

    return nil
}

func (x *B) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *B) setDefaults() *B {
    return x.
        SetANonCompat(NewAdaptedA())
}

func (x *B) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_B
}

type A struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*A)(nil)

func NewA() *A {
    return (&A{}).setDefaults()
}



func (x *A) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("A"); err != nil {
        return thrift.PrependError("A write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("A write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("A write struct end error: ", err)
    }
    return nil
}

func (x *A) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("A read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("A field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("A read struct end error: ", err)
    }

    return nil
}

func (x *A) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *A) setDefaults() *A {
    return x
}

func (x *A) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_A
}

type Config struct {
    Path string `thrift:"path,1" json:"path" db:"path"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*Config)(nil)

func NewConfig() *Config {
    return (&Config{}).setDefaults()
}

func (x *Config) GetPath() string {
    return x.Path
}

func (x *Config) SetPathNonCompat(value string) *Config {
    x.Path = value
    return x
}

func (x *Config) SetPath(value string) *Config {
    x.Path = value
    return x
}

func (x *Config) writeField1(p thrift.Encoder) error {  // Path
    if err := p.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
        return thrift.PrependError("Config write field begin error: ", err)
    }

    item := x.Path
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Config write field end error: ", err)
    }
    return nil
}

func (x *Config) readField1(p thrift.Decoder) error {  // Path
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.Path = result
    return nil
}



func (x *Config) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("Config"); err != nil {
        return thrift.PrependError("Config write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("Config write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("Config write struct end error: ", err)
    }
    return nil
}

func (x *Config) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("Config read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("Config field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "path")):  // path
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("Config read struct end error: ", err)
    }

    return nil
}

func (x *Config) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *Config) setDefaults() *Config {
    return x.
        SetPathNonCompat("")
}

func (x *Config) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_Config
}

type MyStruct struct {
    Field int32 `thrift:"field,1" json:"field" db:"field"`
    SetString SetWithAdapter `thrift:"set_string,2" json:"set_string" db:"set_string"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyStruct)(nil)

func NewMyStruct() *MyStruct {
    return (&MyStruct{}).setDefaults()
}

func (x *MyStruct) GetField() int32 {
    return x.Field
}

func (x *MyStruct) GetSetString() SetWithAdapter {
    if !x.IsSetSetString() {
        return NewSetWithAdapter()
    }
    return x.SetString
}

func (x *MyStruct) SetFieldNonCompat(value int32) *MyStruct {
    x.Field = value
    return x
}

func (x *MyStruct) SetField(value int32) *MyStruct {
    x.Field = value
    return x
}

func (x *MyStruct) SetSetStringNonCompat(value SetWithAdapter) *MyStruct {
    x.SetString = value
    return x
}

func (x *MyStruct) SetSetString(value SetWithAdapter) *MyStruct {
    x.SetString = value
    return x
}

func (x *MyStruct) IsSetSetString() bool {
    return x != nil && x.SetString != nil
}

func (x *MyStruct) writeField1(p thrift.Encoder) error {  // Field
    if err := p.WriteFieldBegin("field", thrift.I32, 1); err != nil {
        return thrift.PrependError("MyStruct write field begin error: ", err)
    }

    item := x.Field
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyStruct write field end error: ", err)
    }
    return nil
}

func (x *MyStruct) writeField2(p thrift.Encoder) error {  // SetString
    if err := p.WriteFieldBegin("set_string", thrift.SET, 2); err != nil {
        return thrift.PrependError("MyStruct write field begin error: ", err)
    }

    item := x.SetString
    err := WriteSetWithAdapter(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyStruct write field end error: ", err)
    }
    return nil
}

func (x *MyStruct) readField1(p thrift.Decoder) error {  // Field
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.Field = result
    return nil
}

func (x *MyStruct) readField2(p thrift.Decoder) error {  // SetString
    result, err := ReadSetWithAdapter(p)
    if err != nil {
        return err
    }

    x.SetString = result
    return nil
}



func (x *MyStruct) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("MyStruct"); err != nil {
        return thrift.PrependError("MyStruct write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("MyStruct write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("MyStruct write struct end error: ", err)
    }
    return nil
}

func (x *MyStruct) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("MyStruct read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("MyStruct field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "field")):  // field
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.SET) || (id == thrift.NO_FIELD_ID && fieldName == "set_string")):  // set_string
            fieldReadErr = x.readField2(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("MyStruct read struct end error: ", err)
    }

    return nil
}

func (x *MyStruct) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *MyStruct) setDefaults() *MyStruct {
    return x.
        SetFieldNonCompat(0).
        SetSetStringNonCompat(NewSetWithAdapter())
}

func (x *MyStruct) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_MyStruct
}

type AdaptTestStruct struct {
    Delay DurationMs `thrift:"delay,1" json:"delay" db:"delay"`
    Custom CustomProtocolType `thrift:"custom,2" json:"custom" db:"custom"`
    Timeout int64 `thrift:"timeout,3" json:"timeout" db:"timeout"`
    Data int64 `thrift:"data,4" json:"data" db:"data"`
    Meta string `thrift:"meta,5" json:"meta" db:"meta"`
    IndirectionString IndirectionString `thrift:"indirectionString,6" json:"indirectionString" db:"indirectionString"`
    StringData string `thrift:"string_data,7" json:"string_data" db:"string_data"`
    DoubleWrappedBool AdaptedBool `thrift:"double_wrapped_bool,8" json:"double_wrapped_bool" db:"double_wrapped_bool"`
    DoubleWrappedInteger AdaptedInteger `thrift:"double_wrapped_integer,9" json:"double_wrapped_integer" db:"double_wrapped_integer"`
    BinaryData []byte `thrift:"binary_data,10" json:"binary_data" db:"binary_data"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*AdaptTestStruct)(nil)

func NewAdaptTestStruct() *AdaptTestStruct {
    return (&AdaptTestStruct{}).setDefaults()
}

func (x *AdaptTestStruct) GetDelay() DurationMs {
    return x.Delay
}

func (x *AdaptTestStruct) GetCustom() CustomProtocolType {
    if !x.IsSetCustom() {
        return NewCustomProtocolType()
    }
    return x.Custom
}

func (x *AdaptTestStruct) GetTimeout() int64 {
    return x.Timeout
}

func (x *AdaptTestStruct) GetData() int64 {
    return x.Data
}

func (x *AdaptTestStruct) GetMeta() string {
    return x.Meta
}

func (x *AdaptTestStruct) GetIndirectionString() IndirectionString {
    return x.IndirectionString
}

func (x *AdaptTestStruct) GetStringData() string {
    return x.StringData
}

func (x *AdaptTestStruct) GetDoubleWrappedBool() AdaptedBool {
    return x.DoubleWrappedBool
}

func (x *AdaptTestStruct) GetDoubleWrappedInteger() AdaptedInteger {
    return x.DoubleWrappedInteger
}

func (x *AdaptTestStruct) GetBinaryData() []byte {
    if !x.IsSetBinaryData() {
        return []byte("")
    }
    return x.BinaryData
}

func (x *AdaptTestStruct) SetDelayNonCompat(value DurationMs) *AdaptTestStruct {
    x.Delay = value
    return x
}

func (x *AdaptTestStruct) SetDelay(value DurationMs) *AdaptTestStruct {
    x.Delay = value
    return x
}

func (x *AdaptTestStruct) SetCustomNonCompat(value CustomProtocolType) *AdaptTestStruct {
    x.Custom = value
    return x
}

func (x *AdaptTestStruct) SetCustom(value CustomProtocolType) *AdaptTestStruct {
    x.Custom = value
    return x
}

func (x *AdaptTestStruct) SetTimeoutNonCompat(value int64) *AdaptTestStruct {
    x.Timeout = value
    return x
}

func (x *AdaptTestStruct) SetTimeout(value int64) *AdaptTestStruct {
    x.Timeout = value
    return x
}

func (x *AdaptTestStruct) SetDataNonCompat(value int64) *AdaptTestStruct {
    x.Data = value
    return x
}

func (x *AdaptTestStruct) SetData(value int64) *AdaptTestStruct {
    x.Data = value
    return x
}

func (x *AdaptTestStruct) SetMetaNonCompat(value string) *AdaptTestStruct {
    x.Meta = value
    return x
}

func (x *AdaptTestStruct) SetMeta(value string) *AdaptTestStruct {
    x.Meta = value
    return x
}

func (x *AdaptTestStruct) SetIndirectionStringNonCompat(value IndirectionString) *AdaptTestStruct {
    x.IndirectionString = value
    return x
}

func (x *AdaptTestStruct) SetIndirectionString(value IndirectionString) *AdaptTestStruct {
    x.IndirectionString = value
    return x
}

func (x *AdaptTestStruct) SetStringDataNonCompat(value string) *AdaptTestStruct {
    x.StringData = value
    return x
}

func (x *AdaptTestStruct) SetStringData(value string) *AdaptTestStruct {
    x.StringData = value
    return x
}

func (x *AdaptTestStruct) SetDoubleWrappedBoolNonCompat(value AdaptedBool) *AdaptTestStruct {
    x.DoubleWrappedBool = value
    return x
}

func (x *AdaptTestStruct) SetDoubleWrappedBool(value AdaptedBool) *AdaptTestStruct {
    x.DoubleWrappedBool = value
    return x
}

func (x *AdaptTestStruct) SetDoubleWrappedIntegerNonCompat(value AdaptedInteger) *AdaptTestStruct {
    x.DoubleWrappedInteger = value
    return x
}

func (x *AdaptTestStruct) SetDoubleWrappedInteger(value AdaptedInteger) *AdaptTestStruct {
    x.DoubleWrappedInteger = value
    return x
}

func (x *AdaptTestStruct) SetBinaryDataNonCompat(value []byte) *AdaptTestStruct {
    x.BinaryData = value
    return x
}

func (x *AdaptTestStruct) SetBinaryData(value []byte) *AdaptTestStruct {
    x.BinaryData = value
    return x
}

func (x *AdaptTestStruct) IsSetCustom() bool {
    return x != nil && x.Custom != nil
}

func (x *AdaptTestStruct) IsSetBinaryData() bool {
    return x != nil && x.BinaryData != nil
}

func (x *AdaptTestStruct) writeField1(p thrift.Encoder) error {  // Delay
    if err := p.WriteFieldBegin("delay", thrift.I64, 1); err != nil {
        return thrift.PrependError("AdaptTestStruct write field begin error: ", err)
    }

    item := x.Delay
    err := WriteDurationMs(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTestStruct) writeField2(p thrift.Encoder) error {  // Custom
    if err := p.WriteFieldBegin("custom", thrift.STRING, 2); err != nil {
        return thrift.PrependError("AdaptTestStruct write field begin error: ", err)
    }

    item := x.Custom
    err := WriteCustomProtocolType(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTestStruct) writeField3(p thrift.Encoder) error {  // Timeout
    if err := p.WriteFieldBegin("timeout", thrift.I64, 3); err != nil {
        return thrift.PrependError("AdaptTestStruct write field begin error: ", err)
    }

    item := x.Timeout
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTestStruct) writeField4(p thrift.Encoder) error {  // Data
    if err := p.WriteFieldBegin("data", thrift.I64, 4); err != nil {
        return thrift.PrependError("AdaptTestStruct write field begin error: ", err)
    }

    item := x.Data
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTestStruct) writeField5(p thrift.Encoder) error {  // Meta
    if err := p.WriteFieldBegin("meta", thrift.STRING, 5); err != nil {
        return thrift.PrependError("AdaptTestStruct write field begin error: ", err)
    }

    item := x.Meta
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTestStruct) writeField6(p thrift.Encoder) error {  // IndirectionString
    if err := p.WriteFieldBegin("indirectionString", thrift.STRING, 6); err != nil {
        return thrift.PrependError("AdaptTestStruct write field begin error: ", err)
    }

    item := x.IndirectionString
    err := WriteIndirectionString(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTestStruct) writeField7(p thrift.Encoder) error {  // StringData
    if err := p.WriteFieldBegin("string_data", thrift.STRING, 7); err != nil {
        return thrift.PrependError("AdaptTestStruct write field begin error: ", err)
    }

    item := x.StringData
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTestStruct) writeField8(p thrift.Encoder) error {  // DoubleWrappedBool
    if err := p.WriteFieldBegin("double_wrapped_bool", thrift.BOOL, 8); err != nil {
        return thrift.PrependError("AdaptTestStruct write field begin error: ", err)
    }

    item := x.DoubleWrappedBool
    err := WriteAdaptedBool(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTestStruct) writeField9(p thrift.Encoder) error {  // DoubleWrappedInteger
    if err := p.WriteFieldBegin("double_wrapped_integer", thrift.I32, 9); err != nil {
        return thrift.PrependError("AdaptTestStruct write field begin error: ", err)
    }

    item := x.DoubleWrappedInteger
    err := WriteAdaptedInteger(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTestStruct) writeField10(p thrift.Encoder) error {  // BinaryData
    if err := p.WriteFieldBegin("binary_data", thrift.STRING, 10); err != nil {
        return thrift.PrependError("AdaptTestStruct write field begin error: ", err)
    }

    item := x.BinaryData
    if err := p.WriteBinary(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTestStruct) readField1(p thrift.Decoder) error {  // Delay
    result, err := ReadDurationMs(p)
    if err != nil {
        return err
    }

    x.Delay = result
    return nil
}

func (x *AdaptTestStruct) readField2(p thrift.Decoder) error {  // Custom
    result, err := ReadCustomProtocolType(p)
    if err != nil {
        return err
    }

    x.Custom = result
    return nil
}

func (x *AdaptTestStruct) readField3(p thrift.Decoder) error {  // Timeout
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Timeout = result
    return nil
}

func (x *AdaptTestStruct) readField4(p thrift.Decoder) error {  // Data
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Data = result
    return nil
}

func (x *AdaptTestStruct) readField5(p thrift.Decoder) error {  // Meta
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.Meta = result
    return nil
}

func (x *AdaptTestStruct) readField6(p thrift.Decoder) error {  // IndirectionString
    result, err := ReadIndirectionString(p)
    if err != nil {
        return err
    }

    x.IndirectionString = result
    return nil
}

func (x *AdaptTestStruct) readField7(p thrift.Decoder) error {  // StringData
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.StringData = result
    return nil
}

func (x *AdaptTestStruct) readField8(p thrift.Decoder) error {  // DoubleWrappedBool
    result, err := ReadAdaptedBool(p)
    if err != nil {
        return err
    }

    x.DoubleWrappedBool = result
    return nil
}

func (x *AdaptTestStruct) readField9(p thrift.Decoder) error {  // DoubleWrappedInteger
    result, err := ReadAdaptedInteger(p)
    if err != nil {
        return err
    }

    x.DoubleWrappedInteger = result
    return nil
}

func (x *AdaptTestStruct) readField10(p thrift.Decoder) error {  // BinaryData
    result, err := p.ReadBinary()
    if err != nil {
        return err
    }

    x.BinaryData = result
    return nil
}



func (x *AdaptTestStruct) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("AdaptTestStruct"); err != nil {
        return thrift.PrependError("AdaptTestStruct write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }
    if err := x.writeField3(p); err != nil {
        return err
    }
    if err := x.writeField4(p); err != nil {
        return err
    }
    if err := x.writeField5(p); err != nil {
        return err
    }
    if err := x.writeField6(p); err != nil {
        return err
    }
    if err := x.writeField7(p); err != nil {
        return err
    }
    if err := x.writeField8(p); err != nil {
        return err
    }
    if err := x.writeField9(p); err != nil {
        return err
    }
    if err := x.writeField10(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("AdaptTestStruct write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("AdaptTestStruct write struct end error: ", err)
    }
    return nil
}

func (x *AdaptTestStruct) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("AdaptTestStruct read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("AdaptTestStruct field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "delay")):  // delay
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "custom")):  // custom
            fieldReadErr = x.readField2(p)
        case ((id == 3 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "timeout")):  // timeout
            fieldReadErr = x.readField3(p)
        case ((id == 4 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "data")):  // data
            fieldReadErr = x.readField4(p)
        case ((id == 5 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "meta")):  // meta
            fieldReadErr = x.readField5(p)
        case ((id == 6 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "indirectionString")):  // indirectionString
            fieldReadErr = x.readField6(p)
        case ((id == 7 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "string_data")):  // string_data
            fieldReadErr = x.readField7(p)
        case ((id == 8 && wireType == thrift.BOOL) || (id == thrift.NO_FIELD_ID && fieldName == "double_wrapped_bool")):  // double_wrapped_bool
            fieldReadErr = x.readField8(p)
        case ((id == 9 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "double_wrapped_integer")):  // double_wrapped_integer
            fieldReadErr = x.readField9(p)
        case ((id == 10 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "binary_data")):  // binary_data
            fieldReadErr = x.readField10(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("AdaptTestStruct read struct end error: ", err)
    }

    return nil
}

func (x *AdaptTestStruct) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *AdaptTestStruct) setDefaults() *AdaptTestStruct {
    return x.
        SetDelayNonCompat(NewDurationMs()).
        SetCustomNonCompat(NewCustomProtocolType()).
        SetTimeoutNonCompat(0).
        SetDataNonCompat(0).
        SetMetaNonCompat("").
        SetIndirectionStringNonCompat(NewIndirectionString()).
        SetStringDataNonCompat("").
        SetDoubleWrappedBoolNonCompat(NewAdaptedBool()).
        SetDoubleWrappedIntegerNonCompat(NewAdaptedInteger()).
        SetBinaryDataNonCompat([]byte(""))
}

func (x *AdaptTestStruct) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_AdaptTestStruct
}

type AdaptTemplatedTestStruct struct {
    AdaptedBool AdaptedBool `thrift:"adaptedBool,1" json:"adaptedBool" db:"adaptedBool"`
    AdaptedByte AdaptedByte `thrift:"adaptedByte,2" json:"adaptedByte" db:"adaptedByte"`
    AdaptedShort AdaptedShort `thrift:"adaptedShort,3" json:"adaptedShort" db:"adaptedShort"`
    AdaptedInteger AdaptedInteger `thrift:"adaptedInteger,4" json:"adaptedInteger" db:"adaptedInteger"`
    AdaptedLong AdaptedLong `thrift:"adaptedLong,5" json:"adaptedLong" db:"adaptedLong"`
    AdaptedDouble AdaptedDouble `thrift:"adaptedDouble,6" json:"adaptedDouble" db:"adaptedDouble"`
    AdaptedString AdaptedString `thrift:"adaptedString,7" json:"adaptedString" db:"adaptedString"`
    AdaptedList []int64 `thrift:"adaptedList,8" json:"adaptedList" db:"adaptedList"`
    AdaptedSet []int64 `thrift:"adaptedSet,9" json:"adaptedSet" db:"adaptedSet"`
    AdaptedMap map[int64]int64 `thrift:"adaptedMap,10" json:"adaptedMap" db:"adaptedMap"`
    AdaptedBoolDefault AdaptedBool `thrift:"adaptedBoolDefault,11" json:"adaptedBoolDefault" db:"adaptedBoolDefault"`
    AdaptedByteDefault AdaptedByte `thrift:"adaptedByteDefault,12" json:"adaptedByteDefault" db:"adaptedByteDefault"`
    AdaptedShortDefault AdaptedShort `thrift:"adaptedShortDefault,13" json:"adaptedShortDefault" db:"adaptedShortDefault"`
    AdaptedIntegerDefault AdaptedInteger `thrift:"adaptedIntegerDefault,14" json:"adaptedIntegerDefault" db:"adaptedIntegerDefault"`
    AdaptedLongDefault AdaptedLong `thrift:"adaptedLongDefault,15" json:"adaptedLongDefault" db:"adaptedLongDefault"`
    AdaptedDoubleDefault AdaptedDouble `thrift:"adaptedDoubleDefault,16" json:"adaptedDoubleDefault" db:"adaptedDoubleDefault"`
    AdaptedStringDefault AdaptedString `thrift:"adaptedStringDefault,17" json:"adaptedStringDefault" db:"adaptedStringDefault"`
    AdaptedEnum AdaptedEnum `thrift:"adaptedEnum,18" json:"adaptedEnum" db:"adaptedEnum"`
    AdaptedListDefault []int64 `thrift:"adaptedListDefault,19" json:"adaptedListDefault" db:"adaptedListDefault"`
    AdaptedSetDefault []int64 `thrift:"adaptedSetDefault,20" json:"adaptedSetDefault" db:"adaptedSetDefault"`
    AdaptedMapDefault map[int64]int64 `thrift:"adaptedMapDefault,21" json:"adaptedMapDefault" db:"adaptedMapDefault"`
    DoubleTypedefBool DoubleTypedefBool `thrift:"doubleTypedefBool,22" json:"doubleTypedefBool" db:"doubleTypedefBool"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*AdaptTemplatedTestStruct)(nil)

func NewAdaptTemplatedTestStruct() *AdaptTemplatedTestStruct {
    return (&AdaptTemplatedTestStruct{}).setDefaults()
}

func (x *AdaptTemplatedTestStruct) GetAdaptedBool() AdaptedBool {
    return x.AdaptedBool
}

func (x *AdaptTemplatedTestStruct) GetAdaptedByte() AdaptedByte {
    return x.AdaptedByte
}

func (x *AdaptTemplatedTestStruct) GetAdaptedShort() AdaptedShort {
    return x.AdaptedShort
}

func (x *AdaptTemplatedTestStruct) GetAdaptedInteger() AdaptedInteger {
    return x.AdaptedInteger
}

func (x *AdaptTemplatedTestStruct) GetAdaptedLong() AdaptedLong {
    return x.AdaptedLong
}

func (x *AdaptTemplatedTestStruct) GetAdaptedDouble() AdaptedDouble {
    return x.AdaptedDouble
}

func (x *AdaptTemplatedTestStruct) GetAdaptedString() AdaptedString {
    return x.AdaptedString
}

func (x *AdaptTemplatedTestStruct) GetAdaptedList() []int64 {
    if !x.IsSetAdaptedList() {
        return make([]int64, 0)
    }
    return x.AdaptedList
}

func (x *AdaptTemplatedTestStruct) GetAdaptedSet() []int64 {
    if !x.IsSetAdaptedSet() {
        return make([]int64, 0)
    }
    return x.AdaptedSet
}

func (x *AdaptTemplatedTestStruct) GetAdaptedMap() map[int64]int64 {
    if !x.IsSetAdaptedMap() {
        return make(map[int64]int64)
    }
    return x.AdaptedMap
}

func (x *AdaptTemplatedTestStruct) GetAdaptedBoolDefault() AdaptedBool {
    return x.AdaptedBoolDefault
}

func (x *AdaptTemplatedTestStruct) GetAdaptedByteDefault() AdaptedByte {
    return x.AdaptedByteDefault
}

func (x *AdaptTemplatedTestStruct) GetAdaptedShortDefault() AdaptedShort {
    return x.AdaptedShortDefault
}

func (x *AdaptTemplatedTestStruct) GetAdaptedIntegerDefault() AdaptedInteger {
    return x.AdaptedIntegerDefault
}

func (x *AdaptTemplatedTestStruct) GetAdaptedLongDefault() AdaptedLong {
    return x.AdaptedLongDefault
}

func (x *AdaptTemplatedTestStruct) GetAdaptedDoubleDefault() AdaptedDouble {
    return x.AdaptedDoubleDefault
}

func (x *AdaptTemplatedTestStruct) GetAdaptedStringDefault() AdaptedString {
    return x.AdaptedStringDefault
}

func (x *AdaptTemplatedTestStruct) GetAdaptedEnum() AdaptedEnum {
    return x.AdaptedEnum
}

func (x *AdaptTemplatedTestStruct) GetAdaptedListDefault() []int64 {
    if !x.IsSetAdaptedListDefault() {
        return []int64{
    int64(1),
}
    }
    return x.AdaptedListDefault
}

func (x *AdaptTemplatedTestStruct) GetAdaptedSetDefault() []int64 {
    if !x.IsSetAdaptedSetDefault() {
        return []int64{
    int64(1),
}
    }
    return x.AdaptedSetDefault
}

func (x *AdaptTemplatedTestStruct) GetAdaptedMapDefault() map[int64]int64 {
    if !x.IsSetAdaptedMapDefault() {
        return map[int64]int64{
    int64(1): int64(1),
}
    }
    return x.AdaptedMapDefault
}

func (x *AdaptTemplatedTestStruct) GetDoubleTypedefBool() DoubleTypedefBool {
    return x.DoubleTypedefBool
}

func (x *AdaptTemplatedTestStruct) SetAdaptedBoolNonCompat(value AdaptedBool) *AdaptTemplatedTestStruct {
    x.AdaptedBool = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedBool(value AdaptedBool) *AdaptTemplatedTestStruct {
    x.AdaptedBool = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedByteNonCompat(value AdaptedByte) *AdaptTemplatedTestStruct {
    x.AdaptedByte = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedByte(value AdaptedByte) *AdaptTemplatedTestStruct {
    x.AdaptedByte = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedShortNonCompat(value AdaptedShort) *AdaptTemplatedTestStruct {
    x.AdaptedShort = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedShort(value AdaptedShort) *AdaptTemplatedTestStruct {
    x.AdaptedShort = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedIntegerNonCompat(value AdaptedInteger) *AdaptTemplatedTestStruct {
    x.AdaptedInteger = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedInteger(value AdaptedInteger) *AdaptTemplatedTestStruct {
    x.AdaptedInteger = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedLongNonCompat(value AdaptedLong) *AdaptTemplatedTestStruct {
    x.AdaptedLong = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedLong(value AdaptedLong) *AdaptTemplatedTestStruct {
    x.AdaptedLong = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedDoubleNonCompat(value AdaptedDouble) *AdaptTemplatedTestStruct {
    x.AdaptedDouble = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedDouble(value AdaptedDouble) *AdaptTemplatedTestStruct {
    x.AdaptedDouble = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedStringNonCompat(value AdaptedString) *AdaptTemplatedTestStruct {
    x.AdaptedString = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedString(value AdaptedString) *AdaptTemplatedTestStruct {
    x.AdaptedString = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedListNonCompat(value []int64) *AdaptTemplatedTestStruct {
    x.AdaptedList = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedList(value []int64) *AdaptTemplatedTestStruct {
    x.AdaptedList = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedSetNonCompat(value []int64) *AdaptTemplatedTestStruct {
    x.AdaptedSet = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedSet(value []int64) *AdaptTemplatedTestStruct {
    x.AdaptedSet = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedMapNonCompat(value map[int64]int64) *AdaptTemplatedTestStruct {
    x.AdaptedMap = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedMap(value map[int64]int64) *AdaptTemplatedTestStruct {
    x.AdaptedMap = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedBoolDefaultNonCompat(value AdaptedBool) *AdaptTemplatedTestStruct {
    x.AdaptedBoolDefault = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedBoolDefault(value AdaptedBool) *AdaptTemplatedTestStruct {
    x.AdaptedBoolDefault = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedByteDefaultNonCompat(value AdaptedByte) *AdaptTemplatedTestStruct {
    x.AdaptedByteDefault = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedByteDefault(value AdaptedByte) *AdaptTemplatedTestStruct {
    x.AdaptedByteDefault = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedShortDefaultNonCompat(value AdaptedShort) *AdaptTemplatedTestStruct {
    x.AdaptedShortDefault = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedShortDefault(value AdaptedShort) *AdaptTemplatedTestStruct {
    x.AdaptedShortDefault = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedIntegerDefaultNonCompat(value AdaptedInteger) *AdaptTemplatedTestStruct {
    x.AdaptedIntegerDefault = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedIntegerDefault(value AdaptedInteger) *AdaptTemplatedTestStruct {
    x.AdaptedIntegerDefault = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedLongDefaultNonCompat(value AdaptedLong) *AdaptTemplatedTestStruct {
    x.AdaptedLongDefault = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedLongDefault(value AdaptedLong) *AdaptTemplatedTestStruct {
    x.AdaptedLongDefault = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedDoubleDefaultNonCompat(value AdaptedDouble) *AdaptTemplatedTestStruct {
    x.AdaptedDoubleDefault = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedDoubleDefault(value AdaptedDouble) *AdaptTemplatedTestStruct {
    x.AdaptedDoubleDefault = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedStringDefaultNonCompat(value AdaptedString) *AdaptTemplatedTestStruct {
    x.AdaptedStringDefault = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedStringDefault(value AdaptedString) *AdaptTemplatedTestStruct {
    x.AdaptedStringDefault = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedEnumNonCompat(value AdaptedEnum) *AdaptTemplatedTestStruct {
    x.AdaptedEnum = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedEnum(value AdaptedEnum) *AdaptTemplatedTestStruct {
    x.AdaptedEnum = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedListDefaultNonCompat(value []int64) *AdaptTemplatedTestStruct {
    x.AdaptedListDefault = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedListDefault(value []int64) *AdaptTemplatedTestStruct {
    x.AdaptedListDefault = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedSetDefaultNonCompat(value []int64) *AdaptTemplatedTestStruct {
    x.AdaptedSetDefault = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedSetDefault(value []int64) *AdaptTemplatedTestStruct {
    x.AdaptedSetDefault = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedMapDefaultNonCompat(value map[int64]int64) *AdaptTemplatedTestStruct {
    x.AdaptedMapDefault = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetAdaptedMapDefault(value map[int64]int64) *AdaptTemplatedTestStruct {
    x.AdaptedMapDefault = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetDoubleTypedefBoolNonCompat(value DoubleTypedefBool) *AdaptTemplatedTestStruct {
    x.DoubleTypedefBool = value
    return x
}

func (x *AdaptTemplatedTestStruct) SetDoubleTypedefBool(value DoubleTypedefBool) *AdaptTemplatedTestStruct {
    x.DoubleTypedefBool = value
    return x
}

func (x *AdaptTemplatedTestStruct) IsSetAdaptedList() bool {
    return x != nil && x.AdaptedList != nil
}

func (x *AdaptTemplatedTestStruct) IsSetAdaptedSet() bool {
    return x != nil && x.AdaptedSet != nil
}

func (x *AdaptTemplatedTestStruct) IsSetAdaptedMap() bool {
    return x != nil && x.AdaptedMap != nil
}

func (x *AdaptTemplatedTestStruct) IsSetAdaptedListDefault() bool {
    return x != nil && x.AdaptedListDefault != nil
}

func (x *AdaptTemplatedTestStruct) IsSetAdaptedSetDefault() bool {
    return x != nil && x.AdaptedSetDefault != nil
}

func (x *AdaptTemplatedTestStruct) IsSetAdaptedMapDefault() bool {
    return x != nil && x.AdaptedMapDefault != nil
}

func (x *AdaptTemplatedTestStruct) writeField1(p thrift.Encoder) error {  // AdaptedBool
    if err := p.WriteFieldBegin("adaptedBool", thrift.BOOL, 1); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field begin error: ", err)
    }

    item := x.AdaptedBool
    err := WriteAdaptedBool(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTemplatedTestStruct) writeField2(p thrift.Encoder) error {  // AdaptedByte
    if err := p.WriteFieldBegin("adaptedByte", thrift.BYTE, 2); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field begin error: ", err)
    }

    item := x.AdaptedByte
    err := WriteAdaptedByte(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTemplatedTestStruct) writeField3(p thrift.Encoder) error {  // AdaptedShort
    if err := p.WriteFieldBegin("adaptedShort", thrift.I16, 3); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field begin error: ", err)
    }

    item := x.AdaptedShort
    err := WriteAdaptedShort(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTemplatedTestStruct) writeField4(p thrift.Encoder) error {  // AdaptedInteger
    if err := p.WriteFieldBegin("adaptedInteger", thrift.I32, 4); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field begin error: ", err)
    }

    item := x.AdaptedInteger
    err := WriteAdaptedInteger(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTemplatedTestStruct) writeField5(p thrift.Encoder) error {  // AdaptedLong
    if err := p.WriteFieldBegin("adaptedLong", thrift.I64, 5); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field begin error: ", err)
    }

    item := x.AdaptedLong
    err := WriteAdaptedLong(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTemplatedTestStruct) writeField6(p thrift.Encoder) error {  // AdaptedDouble
    if err := p.WriteFieldBegin("adaptedDouble", thrift.DOUBLE, 6); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field begin error: ", err)
    }

    item := x.AdaptedDouble
    err := WriteAdaptedDouble(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTemplatedTestStruct) writeField7(p thrift.Encoder) error {  // AdaptedString
    if err := p.WriteFieldBegin("adaptedString", thrift.STRING, 7); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field begin error: ", err)
    }

    item := x.AdaptedString
    err := WriteAdaptedString(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTemplatedTestStruct) writeField8(p thrift.Encoder) error {  // AdaptedList
    if err := p.WriteFieldBegin("adaptedList", thrift.LIST, 8); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field begin error: ", err)
    }

    item := x.AdaptedList
    if err := p.WriteListBegin(thrift.I64, len(item)); err != nil {
        return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range item {
        {
            item := v
            if err := p.WriteI64(item); err != nil {
                return err
            }
        }
    }
    if err := p.WriteListEnd(); err != nil {
        return thrift.PrependError("error writing list end: ", err)
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTemplatedTestStruct) writeField9(p thrift.Encoder) error {  // AdaptedSet
    if err := p.WriteFieldBegin("adaptedSet", thrift.SET, 9); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field begin error: ", err)
    }

    item := x.AdaptedSet
    if err := p.WriteSetBegin(thrift.I64, len(item)); err != nil {
        return thrift.PrependError("error writing set begin: ", err)
    }
    for _, v := range item {
        {
            item := v
            if err := p.WriteI64(item); err != nil {
                return err
            }
        }
    }
    if err := p.WriteSetEnd(); err != nil {
        return thrift.PrependError("error writing set end: ", err)
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTemplatedTestStruct) writeField10(p thrift.Encoder) error {  // AdaptedMap
    if err := p.WriteFieldBegin("adaptedMap", thrift.MAP, 10); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field begin error: ", err)
    }

    item := x.AdaptedMap
    if err := p.WriteMapBegin(thrift.I64, thrift.I64, len(item)); err != nil {
        return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range item {
        {
            item := k
            if err := p.WriteI64(item); err != nil {
                return err
            }
        }
    
        {
            item := v
            if err := p.WriteI64(item); err != nil {
                return err
            }
        }
    }
    if err := p.WriteMapEnd(); err != nil {
        return thrift.PrependError("error writing map end: ", err)
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTemplatedTestStruct) writeField11(p thrift.Encoder) error {  // AdaptedBoolDefault
    if err := p.WriteFieldBegin("adaptedBoolDefault", thrift.BOOL, 11); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field begin error: ", err)
    }

    item := x.AdaptedBoolDefault
    err := WriteAdaptedBool(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTemplatedTestStruct) writeField12(p thrift.Encoder) error {  // AdaptedByteDefault
    if err := p.WriteFieldBegin("adaptedByteDefault", thrift.BYTE, 12); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field begin error: ", err)
    }

    item := x.AdaptedByteDefault
    err := WriteAdaptedByte(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTemplatedTestStruct) writeField13(p thrift.Encoder) error {  // AdaptedShortDefault
    if err := p.WriteFieldBegin("adaptedShortDefault", thrift.I16, 13); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field begin error: ", err)
    }

    item := x.AdaptedShortDefault
    err := WriteAdaptedShort(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTemplatedTestStruct) writeField14(p thrift.Encoder) error {  // AdaptedIntegerDefault
    if err := p.WriteFieldBegin("adaptedIntegerDefault", thrift.I32, 14); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field begin error: ", err)
    }

    item := x.AdaptedIntegerDefault
    err := WriteAdaptedInteger(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTemplatedTestStruct) writeField15(p thrift.Encoder) error {  // AdaptedLongDefault
    if err := p.WriteFieldBegin("adaptedLongDefault", thrift.I64, 15); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field begin error: ", err)
    }

    item := x.AdaptedLongDefault
    err := WriteAdaptedLong(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTemplatedTestStruct) writeField16(p thrift.Encoder) error {  // AdaptedDoubleDefault
    if err := p.WriteFieldBegin("adaptedDoubleDefault", thrift.DOUBLE, 16); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field begin error: ", err)
    }

    item := x.AdaptedDoubleDefault
    err := WriteAdaptedDouble(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTemplatedTestStruct) writeField17(p thrift.Encoder) error {  // AdaptedStringDefault
    if err := p.WriteFieldBegin("adaptedStringDefault", thrift.STRING, 17); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field begin error: ", err)
    }

    item := x.AdaptedStringDefault
    err := WriteAdaptedString(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTemplatedTestStruct) writeField18(p thrift.Encoder) error {  // AdaptedEnum
    if err := p.WriteFieldBegin("adaptedEnum", thrift.I32, 18); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field begin error: ", err)
    }

    item := x.AdaptedEnum
    err := WriteAdaptedEnum(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTemplatedTestStruct) writeField19(p thrift.Encoder) error {  // AdaptedListDefault
    if err := p.WriteFieldBegin("adaptedListDefault", thrift.LIST, 19); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field begin error: ", err)
    }

    item := x.AdaptedListDefault
    if err := p.WriteListBegin(thrift.I64, len(item)); err != nil {
        return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range item {
        {
            item := v
            if err := p.WriteI64(item); err != nil {
                return err
            }
        }
    }
    if err := p.WriteListEnd(); err != nil {
        return thrift.PrependError("error writing list end: ", err)
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTemplatedTestStruct) writeField20(p thrift.Encoder) error {  // AdaptedSetDefault
    if err := p.WriteFieldBegin("adaptedSetDefault", thrift.SET, 20); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field begin error: ", err)
    }

    item := x.AdaptedSetDefault
    if err := p.WriteSetBegin(thrift.I64, len(item)); err != nil {
        return thrift.PrependError("error writing set begin: ", err)
    }
    for _, v := range item {
        {
            item := v
            if err := p.WriteI64(item); err != nil {
                return err
            }
        }
    }
    if err := p.WriteSetEnd(); err != nil {
        return thrift.PrependError("error writing set end: ", err)
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTemplatedTestStruct) writeField21(p thrift.Encoder) error {  // AdaptedMapDefault
    if err := p.WriteFieldBegin("adaptedMapDefault", thrift.MAP, 21); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field begin error: ", err)
    }

    item := x.AdaptedMapDefault
    if err := p.WriteMapBegin(thrift.I64, thrift.I64, len(item)); err != nil {
        return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range item {
        {
            item := k
            if err := p.WriteI64(item); err != nil {
                return err
            }
        }
    
        {
            item := v
            if err := p.WriteI64(item); err != nil {
                return err
            }
        }
    }
    if err := p.WriteMapEnd(); err != nil {
        return thrift.PrependError("error writing map end: ", err)
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTemplatedTestStruct) writeField22(p thrift.Encoder) error {  // DoubleTypedefBool
    if err := p.WriteFieldBegin("doubleTypedefBool", thrift.BOOL, 22); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field begin error: ", err)
    }

    item := x.DoubleTypedefBool
    err := WriteDoubleTypedefBool(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTemplatedTestStruct) readField1(p thrift.Decoder) error {  // AdaptedBool
    result, err := ReadAdaptedBool(p)
    if err != nil {
        return err
    }

    x.AdaptedBool = result
    return nil
}

func (x *AdaptTemplatedTestStruct) readField2(p thrift.Decoder) error {  // AdaptedByte
    result, err := ReadAdaptedByte(p)
    if err != nil {
        return err
    }

    x.AdaptedByte = result
    return nil
}

func (x *AdaptTemplatedTestStruct) readField3(p thrift.Decoder) error {  // AdaptedShort
    result, err := ReadAdaptedShort(p)
    if err != nil {
        return err
    }

    x.AdaptedShort = result
    return nil
}

func (x *AdaptTemplatedTestStruct) readField4(p thrift.Decoder) error {  // AdaptedInteger
    result, err := ReadAdaptedInteger(p)
    if err != nil {
        return err
    }

    x.AdaptedInteger = result
    return nil
}

func (x *AdaptTemplatedTestStruct) readField5(p thrift.Decoder) error {  // AdaptedLong
    result, err := ReadAdaptedLong(p)
    if err != nil {
        return err
    }

    x.AdaptedLong = result
    return nil
}

func (x *AdaptTemplatedTestStruct) readField6(p thrift.Decoder) error {  // AdaptedDouble
    result, err := ReadAdaptedDouble(p)
    if err != nil {
        return err
    }

    x.AdaptedDouble = result
    return nil
}

func (x *AdaptTemplatedTestStruct) readField7(p thrift.Decoder) error {  // AdaptedString
    result, err := ReadAdaptedString(p)
    if err != nil {
        return err
    }

    x.AdaptedString = result
    return nil
}

func (x *AdaptTemplatedTestStruct) readField8(p thrift.Decoder) error {  // AdaptedList
    _ /* elemType */, size, err := p.ReadListBegin()
    if err != nil {
        return thrift.PrependError("error reading list begin: ", err)
    }
    
    listResult := make([]int64, 0, size)
    for i := 0; i < size; i++ {
        var elem int64
        {
            result, err := p.ReadI64()
            if err != nil {
                return err
            }
            elem = result
        }
        listResult = append(listResult, elem)
    }
    
    if err := p.ReadListEnd(); err != nil {
        return thrift.PrependError("error reading list end: ", err)
    }
    result := listResult

    x.AdaptedList = result
    return nil
}

func (x *AdaptTemplatedTestStruct) readField9(p thrift.Decoder) error {  // AdaptedSet
    _ /* elemType */, size, err := p.ReadSetBegin()
    if err != nil {
        return thrift.PrependError("error reading set begin: ", err)
    }
    
    setResult := make([]int64, 0, size)
    for i := 0; i < size; i++ {
        var elem int64
        {
            result, err := p.ReadI64()
            if err != nil {
                return err
            }
            elem = result
        }
        setResult = append(setResult, elem)
    }
    
    if err := p.ReadSetEnd(); err != nil {
        return thrift.PrependError("error reading set end: ", err)
    }
    result := setResult

    x.AdaptedSet = result
    return nil
}

func (x *AdaptTemplatedTestStruct) readField10(p thrift.Decoder) error {  // AdaptedMap
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
    if err != nil {
        return thrift.PrependError("error reading map begin: ", err)
    }
    
    mapResult := make(map[int64]int64, size)
    for i := 0; i < size; i++ {
        var key int64
        {
            result, err := p.ReadI64()
            if err != nil {
                return err
            }
            key = result
        }
    
        var value int64
        {
            result, err := p.ReadI64()
            if err != nil {
                return err
            }
            value = result
        }
    
        mapResult[key] = value
    }
    
    if err := p.ReadMapEnd(); err != nil {
        return thrift.PrependError("error reading map end: ", err)
    }
    result := mapResult

    x.AdaptedMap = result
    return nil
}

func (x *AdaptTemplatedTestStruct) readField11(p thrift.Decoder) error {  // AdaptedBoolDefault
    result, err := ReadAdaptedBool(p)
    if err != nil {
        return err
    }

    x.AdaptedBoolDefault = result
    return nil
}

func (x *AdaptTemplatedTestStruct) readField12(p thrift.Decoder) error {  // AdaptedByteDefault
    result, err := ReadAdaptedByte(p)
    if err != nil {
        return err
    }

    x.AdaptedByteDefault = result
    return nil
}

func (x *AdaptTemplatedTestStruct) readField13(p thrift.Decoder) error {  // AdaptedShortDefault
    result, err := ReadAdaptedShort(p)
    if err != nil {
        return err
    }

    x.AdaptedShortDefault = result
    return nil
}

func (x *AdaptTemplatedTestStruct) readField14(p thrift.Decoder) error {  // AdaptedIntegerDefault
    result, err := ReadAdaptedInteger(p)
    if err != nil {
        return err
    }

    x.AdaptedIntegerDefault = result
    return nil
}

func (x *AdaptTemplatedTestStruct) readField15(p thrift.Decoder) error {  // AdaptedLongDefault
    result, err := ReadAdaptedLong(p)
    if err != nil {
        return err
    }

    x.AdaptedLongDefault = result
    return nil
}

func (x *AdaptTemplatedTestStruct) readField16(p thrift.Decoder) error {  // AdaptedDoubleDefault
    result, err := ReadAdaptedDouble(p)
    if err != nil {
        return err
    }

    x.AdaptedDoubleDefault = result
    return nil
}

func (x *AdaptTemplatedTestStruct) readField17(p thrift.Decoder) error {  // AdaptedStringDefault
    result, err := ReadAdaptedString(p)
    if err != nil {
        return err
    }

    x.AdaptedStringDefault = result
    return nil
}

func (x *AdaptTemplatedTestStruct) readField18(p thrift.Decoder) error {  // AdaptedEnum
    result, err := ReadAdaptedEnum(p)
    if err != nil {
        return err
    }

    x.AdaptedEnum = result
    return nil
}

func (x *AdaptTemplatedTestStruct) readField19(p thrift.Decoder) error {  // AdaptedListDefault
    _ /* elemType */, size, err := p.ReadListBegin()
    if err != nil {
        return thrift.PrependError("error reading list begin: ", err)
    }
    
    listResult := make([]int64, 0, size)
    for i := 0; i < size; i++ {
        var elem int64
        {
            result, err := p.ReadI64()
            if err != nil {
                return err
            }
            elem = result
        }
        listResult = append(listResult, elem)
    }
    
    if err := p.ReadListEnd(); err != nil {
        return thrift.PrependError("error reading list end: ", err)
    }
    result := listResult

    x.AdaptedListDefault = result
    return nil
}

func (x *AdaptTemplatedTestStruct) readField20(p thrift.Decoder) error {  // AdaptedSetDefault
    _ /* elemType */, size, err := p.ReadSetBegin()
    if err != nil {
        return thrift.PrependError("error reading set begin: ", err)
    }
    
    setResult := make([]int64, 0, size)
    for i := 0; i < size; i++ {
        var elem int64
        {
            result, err := p.ReadI64()
            if err != nil {
                return err
            }
            elem = result
        }
        setResult = append(setResult, elem)
    }
    
    if err := p.ReadSetEnd(); err != nil {
        return thrift.PrependError("error reading set end: ", err)
    }
    result := setResult

    x.AdaptedSetDefault = result
    return nil
}

func (x *AdaptTemplatedTestStruct) readField21(p thrift.Decoder) error {  // AdaptedMapDefault
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
    if err != nil {
        return thrift.PrependError("error reading map begin: ", err)
    }
    
    mapResult := make(map[int64]int64, size)
    for i := 0; i < size; i++ {
        var key int64
        {
            result, err := p.ReadI64()
            if err != nil {
                return err
            }
            key = result
        }
    
        var value int64
        {
            result, err := p.ReadI64()
            if err != nil {
                return err
            }
            value = result
        }
    
        mapResult[key] = value
    }
    
    if err := p.ReadMapEnd(); err != nil {
        return thrift.PrependError("error reading map end: ", err)
    }
    result := mapResult

    x.AdaptedMapDefault = result
    return nil
}

func (x *AdaptTemplatedTestStruct) readField22(p thrift.Decoder) error {  // DoubleTypedefBool
    result, err := ReadDoubleTypedefBool(p)
    if err != nil {
        return err
    }

    x.DoubleTypedefBool = result
    return nil
}



func (x *AdaptTemplatedTestStruct) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("AdaptTemplatedTestStruct"); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }
    if err := x.writeField3(p); err != nil {
        return err
    }
    if err := x.writeField4(p); err != nil {
        return err
    }
    if err := x.writeField5(p); err != nil {
        return err
    }
    if err := x.writeField6(p); err != nil {
        return err
    }
    if err := x.writeField7(p); err != nil {
        return err
    }
    if err := x.writeField8(p); err != nil {
        return err
    }
    if err := x.writeField9(p); err != nil {
        return err
    }
    if err := x.writeField10(p); err != nil {
        return err
    }
    if err := x.writeField11(p); err != nil {
        return err
    }
    if err := x.writeField12(p); err != nil {
        return err
    }
    if err := x.writeField13(p); err != nil {
        return err
    }
    if err := x.writeField14(p); err != nil {
        return err
    }
    if err := x.writeField15(p); err != nil {
        return err
    }
    if err := x.writeField16(p); err != nil {
        return err
    }
    if err := x.writeField17(p); err != nil {
        return err
    }
    if err := x.writeField18(p); err != nil {
        return err
    }
    if err := x.writeField19(p); err != nil {
        return err
    }
    if err := x.writeField20(p); err != nil {
        return err
    }
    if err := x.writeField21(p); err != nil {
        return err
    }
    if err := x.writeField22(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct write struct end error: ", err)
    }
    return nil
}

func (x *AdaptTemplatedTestStruct) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("AdaptTemplatedTestStruct field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.BOOL) || (id == thrift.NO_FIELD_ID && fieldName == "adaptedBool")):  // adaptedBool
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.BYTE) || (id == thrift.NO_FIELD_ID && fieldName == "adaptedByte")):  // adaptedByte
            fieldReadErr = x.readField2(p)
        case ((id == 3 && wireType == thrift.I16) || (id == thrift.NO_FIELD_ID && fieldName == "adaptedShort")):  // adaptedShort
            fieldReadErr = x.readField3(p)
        case ((id == 4 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "adaptedInteger")):  // adaptedInteger
            fieldReadErr = x.readField4(p)
        case ((id == 5 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "adaptedLong")):  // adaptedLong
            fieldReadErr = x.readField5(p)
        case ((id == 6 && wireType == thrift.DOUBLE) || (id == thrift.NO_FIELD_ID && fieldName == "adaptedDouble")):  // adaptedDouble
            fieldReadErr = x.readField6(p)
        case ((id == 7 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "adaptedString")):  // adaptedString
            fieldReadErr = x.readField7(p)
        case ((id == 8 && wireType == thrift.LIST) || (id == thrift.NO_FIELD_ID && fieldName == "adaptedList")):  // adaptedList
            fieldReadErr = x.readField8(p)
        case ((id == 9 && wireType == thrift.SET) || (id == thrift.NO_FIELD_ID && fieldName == "adaptedSet")):  // adaptedSet
            fieldReadErr = x.readField9(p)
        case ((id == 10 && wireType == thrift.MAP) || (id == thrift.NO_FIELD_ID && fieldName == "adaptedMap")):  // adaptedMap
            fieldReadErr = x.readField10(p)
        case ((id == 11 && wireType == thrift.BOOL) || (id == thrift.NO_FIELD_ID && fieldName == "adaptedBoolDefault")):  // adaptedBoolDefault
            fieldReadErr = x.readField11(p)
        case ((id == 12 && wireType == thrift.BYTE) || (id == thrift.NO_FIELD_ID && fieldName == "adaptedByteDefault")):  // adaptedByteDefault
            fieldReadErr = x.readField12(p)
        case ((id == 13 && wireType == thrift.I16) || (id == thrift.NO_FIELD_ID && fieldName == "adaptedShortDefault")):  // adaptedShortDefault
            fieldReadErr = x.readField13(p)
        case ((id == 14 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "adaptedIntegerDefault")):  // adaptedIntegerDefault
            fieldReadErr = x.readField14(p)
        case ((id == 15 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "adaptedLongDefault")):  // adaptedLongDefault
            fieldReadErr = x.readField15(p)
        case ((id == 16 && wireType == thrift.DOUBLE) || (id == thrift.NO_FIELD_ID && fieldName == "adaptedDoubleDefault")):  // adaptedDoubleDefault
            fieldReadErr = x.readField16(p)
        case ((id == 17 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "adaptedStringDefault")):  // adaptedStringDefault
            fieldReadErr = x.readField17(p)
        case ((id == 18 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "adaptedEnum")):  // adaptedEnum
            fieldReadErr = x.readField18(p)
        case ((id == 19 && wireType == thrift.LIST) || (id == thrift.NO_FIELD_ID && fieldName == "adaptedListDefault")):  // adaptedListDefault
            fieldReadErr = x.readField19(p)
        case ((id == 20 && wireType == thrift.SET) || (id == thrift.NO_FIELD_ID && fieldName == "adaptedSetDefault")):  // adaptedSetDefault
            fieldReadErr = x.readField20(p)
        case ((id == 21 && wireType == thrift.MAP) || (id == thrift.NO_FIELD_ID && fieldName == "adaptedMapDefault")):  // adaptedMapDefault
            fieldReadErr = x.readField21(p)
        case ((id == 22 && wireType == thrift.BOOL) || (id == thrift.NO_FIELD_ID && fieldName == "doubleTypedefBool")):  // doubleTypedefBool
            fieldReadErr = x.readField22(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("AdaptTemplatedTestStruct read struct end error: ", err)
    }

    return nil
}

func (x *AdaptTemplatedTestStruct) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *AdaptTemplatedTestStruct) setDefaults() *AdaptTemplatedTestStruct {
    return x.
        SetAdaptedBoolNonCompat(NewAdaptedBool()).
        SetAdaptedByteNonCompat(NewAdaptedByte()).
        SetAdaptedShortNonCompat(NewAdaptedShort()).
        SetAdaptedIntegerNonCompat(NewAdaptedInteger()).
        SetAdaptedLongNonCompat(NewAdaptedLong()).
        SetAdaptedDoubleNonCompat(NewAdaptedDouble()).
        SetAdaptedStringNonCompat(NewAdaptedString()).
        SetAdaptedListNonCompat(make([]int64, 0)).
        SetAdaptedSetNonCompat(make([]int64, 0)).
        SetAdaptedMapNonCompat(make(map[int64]int64)).
        SetAdaptedBoolDefaultNonCompat(true).
        SetAdaptedByteDefaultNonCompat(int8(1)).
        SetAdaptedShortDefaultNonCompat(int16(2)).
        SetAdaptedIntegerDefaultNonCompat(int32(3)).
        SetAdaptedLongDefaultNonCompat(int64(4)).
        SetAdaptedDoubleDefaultNonCompat(float64(5.0)).
        SetAdaptedStringDefaultNonCompat("6").
        SetAdaptedEnumNonCompat(
              ThriftAdaptedEnum_One,
          ).
        SetAdaptedListDefaultNonCompat(
              []int64{
    int64(1),
},
          ).
        SetAdaptedSetDefaultNonCompat(
              []int64{
    int64(1),
},
          ).
        SetAdaptedMapDefaultNonCompat(
              map[int64]int64{
    int64(1): int64(1),
},
          ).
        SetDoubleTypedefBoolNonCompat(NewDoubleTypedefBool())
}

func (x *AdaptTemplatedTestStruct) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_AdaptTemplatedTestStruct
}

type AdaptTemplatedNestedTestStruct struct {
    AdaptedStruct *AdaptTemplatedTestStruct `thrift:"adaptedStruct,1" json:"adaptedStruct" db:"adaptedStruct"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*AdaptTemplatedNestedTestStruct)(nil)

func NewAdaptTemplatedNestedTestStruct() *AdaptTemplatedNestedTestStruct {
    return (&AdaptTemplatedNestedTestStruct{}).setDefaults()
}

func (x *AdaptTemplatedNestedTestStruct) GetAdaptedStruct() *AdaptTemplatedTestStruct {
    if !x.IsSetAdaptedStruct() {
        return nil
    }
    return x.AdaptedStruct
}

func (x *AdaptTemplatedNestedTestStruct) SetAdaptedStructNonCompat(value *AdaptTemplatedTestStruct) *AdaptTemplatedNestedTestStruct {
    x.AdaptedStruct = value
    return x
}

func (x *AdaptTemplatedNestedTestStruct) SetAdaptedStruct(value *AdaptTemplatedTestStruct) *AdaptTemplatedNestedTestStruct {
    x.AdaptedStruct = value
    return x
}

func (x *AdaptTemplatedNestedTestStruct) IsSetAdaptedStruct() bool {
    return x != nil && x.AdaptedStruct != nil
}

func (x *AdaptTemplatedNestedTestStruct) writeField1(p thrift.Encoder) error {  // AdaptedStruct
    if !x.IsSetAdaptedStruct() {
        return nil
    }

    if err := p.WriteFieldBegin("adaptedStruct", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError("AdaptTemplatedNestedTestStruct write field begin error: ", err)
    }

    item := x.AdaptedStruct
    if err := item.Write(p); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTemplatedNestedTestStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptTemplatedNestedTestStruct) readField1(p thrift.Decoder) error {  // AdaptedStruct
    result := NewAdaptTemplatedTestStruct()
    err := result.Read(p)
    if err != nil {
        return err
    }

    x.AdaptedStruct = result
    return nil
}




func (x *AdaptTemplatedNestedTestStruct) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("AdaptTemplatedNestedTestStruct"); err != nil {
        return thrift.PrependError("AdaptTemplatedNestedTestStruct write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("AdaptTemplatedNestedTestStruct write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("AdaptTemplatedNestedTestStruct write struct end error: ", err)
    }
    return nil
}

func (x *AdaptTemplatedNestedTestStruct) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("AdaptTemplatedNestedTestStruct read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("AdaptTemplatedNestedTestStruct field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "adaptedStruct")):  // adaptedStruct
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("AdaptTemplatedNestedTestStruct read struct end error: ", err)
    }

    return nil
}

func (x *AdaptTemplatedNestedTestStruct) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *AdaptTemplatedNestedTestStruct) setDefaults() *AdaptTemplatedNestedTestStruct {
    return x.
        SetAdaptedStructNonCompat(NewAdaptTemplatedTestStruct())
}

func (x *AdaptTemplatedNestedTestStruct) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_AdaptTemplatedNestedTestStruct
}

type AdaptTestUnion struct {
    Delay *DurationMs `thrift:"delay,1" json:"delay,omitempty" db:"delay"`
    Custom CustomProtocolType `thrift:"custom,2" json:"custom,omitempty" db:"custom"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*AdaptTestUnion)(nil)

func NewAdaptTestUnion() *AdaptTestUnion {
    return (&AdaptTestUnion{}).setDefaults()
}

func (x *AdaptTestUnion) GetDelay() DurationMs {
    if !x.IsSetDelay() {
        return NewDurationMs()
    }
    return *x.Delay
}

func (x *AdaptTestUnion) GetCustom() CustomProtocolType {
    if !x.IsSetCustom() {
        return NewCustomProtocolType()
    }
    return x.Custom
}

func (x *AdaptTestUnion) SetDelayNonCompat(value DurationMs) *AdaptTestUnion {
    x.Delay = &value
    return x
}

func (x *AdaptTestUnion) SetDelay(value *DurationMs) *AdaptTestUnion {
    x.Delay = value
    return x
}

func (x *AdaptTestUnion) SetCustomNonCompat(value CustomProtocolType) *AdaptTestUnion {
    x.Custom = value
    return x
}

func (x *AdaptTestUnion) SetCustom(value CustomProtocolType) *AdaptTestUnion {
    x.Custom = value
    return x
}

func (x *AdaptTestUnion) IsSetDelay() bool {
    return x != nil && x.Delay != nil
}

func (x *AdaptTestUnion) IsSetCustom() bool {
    return x != nil && x.Custom != nil
}

func (x *AdaptTestUnion) writeField1(p thrift.Encoder) error {  // Delay
    if !x.IsSetDelay() {
        return nil
    }

    if err := p.WriteFieldBegin("delay", thrift.I64, 1); err != nil {
        return thrift.PrependError("AdaptTestUnion write field begin error: ", err)
    }

    item := *x.Delay
    err := WriteDurationMs(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTestUnion write field end error: ", err)
    }
    return nil
}

func (x *AdaptTestUnion) writeField2(p thrift.Encoder) error {  // Custom
    if !x.IsSetCustom() {
        return nil
    }

    if err := p.WriteFieldBegin("custom", thrift.STRING, 2); err != nil {
        return thrift.PrependError("AdaptTestUnion write field begin error: ", err)
    }

    item := x.Custom
    err := WriteCustomProtocolType(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptTestUnion write field end error: ", err)
    }
    return nil
}

func (x *AdaptTestUnion) readField1(p thrift.Decoder) error {  // Delay
    result, err := ReadDurationMs(p)
    if err != nil {
        return err
    }

    x.Delay = &result
    return nil
}

func (x *AdaptTestUnion) readField2(p thrift.Decoder) error {  // Custom
    result, err := ReadCustomProtocolType(p)
    if err != nil {
        return err
    }

    x.Custom = result
    return nil
}


func (x *AdaptTestUnion) countSetFields() int {
    count := int(0)
    if (x.IsSetDelay()) {
        count++
    }
    if (x.IsSetCustom()) {
        count++
    }
    return count
}

func (x *AdaptTestUnion) CountSetFieldsAdaptTestUnion() int {
    return x.countSetFields()
}



func (x *AdaptTestUnion) Write(p thrift.Encoder) error {
    if countSet := x.countSetFields(); countSet > 1 {
        return fmt.Errorf("AdaptTestUnion write union: no more than one field must be set (%d set).", countSet)
    }
    if err := p.WriteStructBegin("AdaptTestUnion"); err != nil {
        return thrift.PrependError("AdaptTestUnion write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("AdaptTestUnion write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("AdaptTestUnion write struct end error: ", err)
    }
    return nil
}

func (x *AdaptTestUnion) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("AdaptTestUnion read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("AdaptTestUnion field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "delay")):  // delay
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "custom")):  // custom
            fieldReadErr = x.readField2(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("AdaptTestUnion read struct end error: ", err)
    }

    return nil
}

func (x *AdaptTestUnion) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *AdaptTestUnion) setDefaults() *AdaptTestUnion {
    return x
}

func (x *AdaptTestUnion) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_AdaptTestUnion
}

type AdaptedStruct struct {
    Data int64 `thrift:"data,1" json:"data" db:"data"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*AdaptedStruct)(nil)

func NewAdaptedStruct() *AdaptedStruct {
    return (&AdaptedStruct{}).setDefaults()
}

func (x *AdaptedStruct) GetData() int64 {
    return x.Data
}

func (x *AdaptedStruct) SetDataNonCompat(value int64) *AdaptedStruct {
    x.Data = value
    return x
}

func (x *AdaptedStruct) SetData(value int64) *AdaptedStruct {
    x.Data = value
    return x
}

func (x *AdaptedStruct) writeField1(p thrift.Encoder) error {  // Data
    if err := p.WriteFieldBegin("data", thrift.I64, 1); err != nil {
        return thrift.PrependError("AdaptedStruct write field begin error: ", err)
    }

    item := x.Data
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AdaptedStruct write field end error: ", err)
    }
    return nil
}

func (x *AdaptedStruct) readField1(p thrift.Decoder) error {  // Data
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Data = result
    return nil
}



func (x *AdaptedStruct) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("AdaptedStruct"); err != nil {
        return thrift.PrependError("AdaptedStruct write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("AdaptedStruct write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("AdaptedStruct write struct end error: ", err)
    }
    return nil
}

func (x *AdaptedStruct) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("AdaptedStruct read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("AdaptedStruct field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "data")):  // data
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("AdaptedStruct read struct end error: ", err)
    }

    return nil
}

func (x *AdaptedStruct) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *AdaptedStruct) setDefaults() *AdaptedStruct {
    return x.
        SetDataNonCompat(0)
}

func (x *AdaptedStruct) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_AdaptedStruct
}

type DirectlyAdaptedStruct struct {
    Data int64 `thrift:"data,1" json:"data" db:"data"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*DirectlyAdaptedStruct)(nil)

func NewDirectlyAdaptedStruct() *DirectlyAdaptedStruct {
    return (&DirectlyAdaptedStruct{}).setDefaults()
}

func (x *DirectlyAdaptedStruct) GetData() int64 {
    return x.Data
}

func (x *DirectlyAdaptedStruct) SetDataNonCompat(value int64) *DirectlyAdaptedStruct {
    x.Data = value
    return x
}

func (x *DirectlyAdaptedStruct) SetData(value int64) *DirectlyAdaptedStruct {
    x.Data = value
    return x
}

func (x *DirectlyAdaptedStruct) writeField1(p thrift.Encoder) error {  // Data
    if err := p.WriteFieldBegin("data", thrift.I64, 1); err != nil {
        return thrift.PrependError("DirectlyAdaptedStruct write field begin error: ", err)
    }

    item := x.Data
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("DirectlyAdaptedStruct write field end error: ", err)
    }
    return nil
}

func (x *DirectlyAdaptedStruct) readField1(p thrift.Decoder) error {  // Data
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Data = result
    return nil
}



func (x *DirectlyAdaptedStruct) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("DirectlyAdaptedStruct"); err != nil {
        return thrift.PrependError("DirectlyAdaptedStruct write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("DirectlyAdaptedStruct write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("DirectlyAdaptedStruct write struct end error: ", err)
    }
    return nil
}

func (x *DirectlyAdaptedStruct) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("DirectlyAdaptedStruct read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("DirectlyAdaptedStruct field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "data")):  // data
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("DirectlyAdaptedStruct read struct end error: ", err)
    }

    return nil
}

func (x *DirectlyAdaptedStruct) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *DirectlyAdaptedStruct) setDefaults() *DirectlyAdaptedStruct {
    return x.
        SetDataNonCompat(0)
}

func (x *DirectlyAdaptedStruct) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_DirectlyAdaptedStruct
}

type StructFieldAdaptedStruct struct {
    AdaptedStruct *AdaptedStruct `thrift:"adaptedStruct,1" json:"adaptedStruct" db:"adaptedStruct"`
    AdaptedTypedef *AdaptedTypedef `thrift:"adaptedTypedef,2" json:"adaptedTypedef" db:"adaptedTypedef"`
    DirectlyAdapted *DirectlyAdaptedStruct `thrift:"directlyAdapted,3" json:"directlyAdapted" db:"directlyAdapted"`
    TypedefOfAdapted *TypedefOfDirect `thrift:"typedefOfAdapted,4" json:"typedefOfAdapted" db:"typedefOfAdapted"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*StructFieldAdaptedStruct)(nil)

func NewStructFieldAdaptedStruct() *StructFieldAdaptedStruct {
    return (&StructFieldAdaptedStruct{}).setDefaults()
}

func (x *StructFieldAdaptedStruct) GetAdaptedStruct() *AdaptedStruct {
    if !x.IsSetAdaptedStruct() {
        return nil
    }
    return x.AdaptedStruct
}

func (x *StructFieldAdaptedStruct) GetAdaptedTypedef() *AdaptedTypedef {
    if !x.IsSetAdaptedTypedef() {
        return nil
    }
    return x.AdaptedTypedef
}

func (x *StructFieldAdaptedStruct) GetDirectlyAdapted() *DirectlyAdaptedStruct {
    if !x.IsSetDirectlyAdapted() {
        return nil
    }
    return x.DirectlyAdapted
}

func (x *StructFieldAdaptedStruct) GetTypedefOfAdapted() *TypedefOfDirect {
    if !x.IsSetTypedefOfAdapted() {
        return nil
    }
    return x.TypedefOfAdapted
}

func (x *StructFieldAdaptedStruct) SetAdaptedStructNonCompat(value *AdaptedStruct) *StructFieldAdaptedStruct {
    x.AdaptedStruct = value
    return x
}

func (x *StructFieldAdaptedStruct) SetAdaptedStruct(value *AdaptedStruct) *StructFieldAdaptedStruct {
    x.AdaptedStruct = value
    return x
}

func (x *StructFieldAdaptedStruct) SetAdaptedTypedefNonCompat(value *AdaptedTypedef) *StructFieldAdaptedStruct {
    x.AdaptedTypedef = value
    return x
}

func (x *StructFieldAdaptedStruct) SetAdaptedTypedef(value *AdaptedTypedef) *StructFieldAdaptedStruct {
    x.AdaptedTypedef = value
    return x
}

func (x *StructFieldAdaptedStruct) SetDirectlyAdaptedNonCompat(value *DirectlyAdaptedStruct) *StructFieldAdaptedStruct {
    x.DirectlyAdapted = value
    return x
}

func (x *StructFieldAdaptedStruct) SetDirectlyAdapted(value *DirectlyAdaptedStruct) *StructFieldAdaptedStruct {
    x.DirectlyAdapted = value
    return x
}

func (x *StructFieldAdaptedStruct) SetTypedefOfAdaptedNonCompat(value *TypedefOfDirect) *StructFieldAdaptedStruct {
    x.TypedefOfAdapted = value
    return x
}

func (x *StructFieldAdaptedStruct) SetTypedefOfAdapted(value *TypedefOfDirect) *StructFieldAdaptedStruct {
    x.TypedefOfAdapted = value
    return x
}

func (x *StructFieldAdaptedStruct) IsSetAdaptedStruct() bool {
    return x != nil && x.AdaptedStruct != nil
}

func (x *StructFieldAdaptedStruct) IsSetAdaptedTypedef() bool {
    return x != nil && x.AdaptedTypedef != nil
}

func (x *StructFieldAdaptedStruct) IsSetDirectlyAdapted() bool {
    return x != nil && x.DirectlyAdapted != nil
}

func (x *StructFieldAdaptedStruct) IsSetTypedefOfAdapted() bool {
    return x != nil && x.TypedefOfAdapted != nil
}

func (x *StructFieldAdaptedStruct) writeField1(p thrift.Encoder) error {  // AdaptedStruct
    if !x.IsSetAdaptedStruct() {
        return nil
    }

    if err := p.WriteFieldBegin("adaptedStruct", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError("StructFieldAdaptedStruct write field begin error: ", err)
    }

    item := x.AdaptedStruct
    if err := item.Write(p); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("StructFieldAdaptedStruct write field end error: ", err)
    }
    return nil
}

func (x *StructFieldAdaptedStruct) writeField2(p thrift.Encoder) error {  // AdaptedTypedef
    if !x.IsSetAdaptedTypedef() {
        return nil
    }

    if err := p.WriteFieldBegin("adaptedTypedef", thrift.STRUCT, 2); err != nil {
        return thrift.PrependError("StructFieldAdaptedStruct write field begin error: ", err)
    }

    item := x.AdaptedTypedef
    err := WriteAdaptedTypedef(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("StructFieldAdaptedStruct write field end error: ", err)
    }
    return nil
}

func (x *StructFieldAdaptedStruct) writeField3(p thrift.Encoder) error {  // DirectlyAdapted
    if !x.IsSetDirectlyAdapted() {
        return nil
    }

    if err := p.WriteFieldBegin("directlyAdapted", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError("StructFieldAdaptedStruct write field begin error: ", err)
    }

    item := x.DirectlyAdapted
    if err := item.Write(p); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("StructFieldAdaptedStruct write field end error: ", err)
    }
    return nil
}

func (x *StructFieldAdaptedStruct) writeField4(p thrift.Encoder) error {  // TypedefOfAdapted
    if !x.IsSetTypedefOfAdapted() {
        return nil
    }

    if err := p.WriteFieldBegin("typedefOfAdapted", thrift.STRUCT, 4); err != nil {
        return thrift.PrependError("StructFieldAdaptedStruct write field begin error: ", err)
    }

    item := x.TypedefOfAdapted
    err := WriteTypedefOfDirect(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("StructFieldAdaptedStruct write field end error: ", err)
    }
    return nil
}

func (x *StructFieldAdaptedStruct) readField1(p thrift.Decoder) error {  // AdaptedStruct
    result := NewAdaptedStruct()
    err := result.Read(p)
    if err != nil {
        return err
    }

    x.AdaptedStruct = result
    return nil
}

func (x *StructFieldAdaptedStruct) readField2(p thrift.Decoder) error {  // AdaptedTypedef
    result, err := ReadAdaptedTypedef(p)
    if err != nil {
        return err
    }

    x.AdaptedTypedef = result
    return nil
}

func (x *StructFieldAdaptedStruct) readField3(p thrift.Decoder) error {  // DirectlyAdapted
    result := NewDirectlyAdaptedStruct()
    err := result.Read(p)
    if err != nil {
        return err
    }

    x.DirectlyAdapted = result
    return nil
}

func (x *StructFieldAdaptedStruct) readField4(p thrift.Decoder) error {  // TypedefOfAdapted
    result, err := ReadTypedefOfDirect(p)
    if err != nil {
        return err
    }

    x.TypedefOfAdapted = result
    return nil
}







func (x *StructFieldAdaptedStruct) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("StructFieldAdaptedStruct"); err != nil {
        return thrift.PrependError("StructFieldAdaptedStruct write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }
    if err := x.writeField3(p); err != nil {
        return err
    }
    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("StructFieldAdaptedStruct write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("StructFieldAdaptedStruct write struct end error: ", err)
    }
    return nil
}

func (x *StructFieldAdaptedStruct) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("StructFieldAdaptedStruct read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("StructFieldAdaptedStruct field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "adaptedStruct")):  // adaptedStruct
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "adaptedTypedef")):  // adaptedTypedef
            fieldReadErr = x.readField2(p)
        case ((id == 3 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "directlyAdapted")):  // directlyAdapted
            fieldReadErr = x.readField3(p)
        case ((id == 4 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "typedefOfAdapted")):  // typedefOfAdapted
            fieldReadErr = x.readField4(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("StructFieldAdaptedStruct read struct end error: ", err)
    }

    return nil
}

func (x *StructFieldAdaptedStruct) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *StructFieldAdaptedStruct) setDefaults() *StructFieldAdaptedStruct {
    return x.
        SetAdaptedStructNonCompat(NewAdaptedStruct()).
        SetAdaptedTypedefNonCompat(NewAdaptedTypedef()).
        SetDirectlyAdaptedNonCompat(NewDirectlyAdaptedStruct()).
        SetTypedefOfAdaptedNonCompat(NewTypedefOfDirect())
}

func (x *StructFieldAdaptedStruct) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_StructFieldAdaptedStruct
}

type CircularAdaptee struct {
    Field *CircularStruct `thrift:"field,1" json:"field" db:"field"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*CircularAdaptee)(nil)

func NewCircularAdaptee() *CircularAdaptee {
    return (&CircularAdaptee{}).setDefaults()
}

func (x *CircularAdaptee) GetField() *CircularStruct {
    if !x.IsSetField() {
        return nil
    }
    return x.Field
}

func (x *CircularAdaptee) SetFieldNonCompat(value *CircularStruct) *CircularAdaptee {
    x.Field = value
    return x
}

func (x *CircularAdaptee) SetField(value *CircularStruct) *CircularAdaptee {
    x.Field = value
    return x
}

func (x *CircularAdaptee) IsSetField() bool {
    return x != nil && x.Field != nil
}

func (x *CircularAdaptee) writeField1(p thrift.Encoder) error {  // Field
    if !x.IsSetField() {
        return nil
    }

    if err := p.WriteFieldBegin("field", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError("CircularAdaptee write field begin error: ", err)
    }

    item := x.Field
    if err := item.Write(p); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("CircularAdaptee write field end error: ", err)
    }
    return nil
}

func (x *CircularAdaptee) readField1(p thrift.Decoder) error {  // Field
    result := NewCircularStruct()
    err := result.Read(p)
    if err != nil {
        return err
    }

    x.Field = result
    return nil
}




func (x *CircularAdaptee) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("CircularAdaptee"); err != nil {
        return thrift.PrependError("CircularAdaptee write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("CircularAdaptee write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("CircularAdaptee write struct end error: ", err)
    }
    return nil
}

func (x *CircularAdaptee) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("CircularAdaptee read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("CircularAdaptee field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "field")):  // field
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("CircularAdaptee read struct end error: ", err)
    }

    return nil
}

func (x *CircularAdaptee) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *CircularAdaptee) setDefaults() *CircularAdaptee {
    return x.
        SetFieldNonCompat(NewCircularStruct())
}

func (x *CircularAdaptee) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_CircularAdaptee
}

type CircularStruct struct {
    Field *AdaptedCircularAdaptee `thrift:"field,1,optional" json:"field,omitempty" db:"field"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*CircularStruct)(nil)

func NewCircularStruct() *CircularStruct {
    return (&CircularStruct{}).setDefaults()
}

func (x *CircularStruct) GetField() *AdaptedCircularAdaptee {
    if !x.IsSetField() {
        return nil
    }
    return x.Field
}

func (x *CircularStruct) SetFieldNonCompat(value *AdaptedCircularAdaptee) *CircularStruct {
    x.Field = value
    return x
}

func (x *CircularStruct) SetField(value *AdaptedCircularAdaptee) *CircularStruct {
    x.Field = value
    return x
}

func (x *CircularStruct) IsSetField() bool {
    return x != nil && x.Field != nil
}

func (x *CircularStruct) writeField1(p thrift.Encoder) error {  // Field
    if !x.IsSetField() {
        return nil
    }

    if err := p.WriteFieldBegin("field", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError("CircularStruct write field begin error: ", err)
    }

    item := x.Field
    err := WriteAdaptedCircularAdaptee(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("CircularStruct write field end error: ", err)
    }
    return nil
}

func (x *CircularStruct) readField1(p thrift.Decoder) error {  // Field
    result, err := ReadAdaptedCircularAdaptee(p)
    if err != nil {
        return err
    }

    x.Field = result
    return nil
}




func (x *CircularStruct) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("CircularStruct"); err != nil {
        return thrift.PrependError("CircularStruct write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("CircularStruct write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("CircularStruct write struct end error: ", err)
    }
    return nil
}

func (x *CircularStruct) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("CircularStruct read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("CircularStruct field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "field")):  // field
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("CircularStruct read struct end error: ", err)
    }

    return nil
}

func (x *CircularStruct) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *CircularStruct) setDefaults() *CircularStruct {
    return x
}

func (x *CircularStruct) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_CircularStruct
}

type ReorderedStruct struct {
    ReorderedDependentAdapted *DeclaredAfterStruct `thrift:"reordered_dependent_adapted,1" json:"reordered_dependent_adapted" db:"reordered_dependent_adapted"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*ReorderedStruct)(nil)

func NewReorderedStruct() *ReorderedStruct {
    return (&ReorderedStruct{}).setDefaults()
}

func (x *ReorderedStruct) GetReorderedDependentAdapted() *DeclaredAfterStruct {
    if !x.IsSetReorderedDependentAdapted() {
        return nil
    }
    return x.ReorderedDependentAdapted
}

func (x *ReorderedStruct) SetReorderedDependentAdaptedNonCompat(value *DeclaredAfterStruct) *ReorderedStruct {
    x.ReorderedDependentAdapted = value
    return x
}

func (x *ReorderedStruct) SetReorderedDependentAdapted(value *DeclaredAfterStruct) *ReorderedStruct {
    x.ReorderedDependentAdapted = value
    return x
}

func (x *ReorderedStruct) IsSetReorderedDependentAdapted() bool {
    return x != nil && x.ReorderedDependentAdapted != nil
}

func (x *ReorderedStruct) writeField1(p thrift.Encoder) error {  // ReorderedDependentAdapted
    if !x.IsSetReorderedDependentAdapted() {
        return nil
    }

    if err := p.WriteFieldBegin("reordered_dependent_adapted", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError("ReorderedStruct write field begin error: ", err)
    }

    item := x.ReorderedDependentAdapted
    if err := item.Write(p); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("ReorderedStruct write field end error: ", err)
    }
    return nil
}

func (x *ReorderedStruct) readField1(p thrift.Decoder) error {  // ReorderedDependentAdapted
    result := NewDeclaredAfterStruct()
    err := result.Read(p)
    if err != nil {
        return err
    }

    x.ReorderedDependentAdapted = result
    return nil
}




func (x *ReorderedStruct) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("ReorderedStruct"); err != nil {
        return thrift.PrependError("ReorderedStruct write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("ReorderedStruct write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("ReorderedStruct write struct end error: ", err)
    }
    return nil
}

func (x *ReorderedStruct) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("ReorderedStruct read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("ReorderedStruct field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "reordered_dependent_adapted")):  // reordered_dependent_adapted
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("ReorderedStruct read struct end error: ", err)
    }

    return nil
}

func (x *ReorderedStruct) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *ReorderedStruct) setDefaults() *ReorderedStruct {
    return x.
        SetReorderedDependentAdaptedNonCompat(NewDeclaredAfterStruct())
}

func (x *ReorderedStruct) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_ReorderedStruct
}

type DeclaredAfterStruct struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*DeclaredAfterStruct)(nil)

func NewDeclaredAfterStruct() *DeclaredAfterStruct {
    return (&DeclaredAfterStruct{}).setDefaults()
}



func (x *DeclaredAfterStruct) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("DeclaredAfterStruct"); err != nil {
        return thrift.PrependError("DeclaredAfterStruct write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("DeclaredAfterStruct write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("DeclaredAfterStruct write struct end error: ", err)
    }
    return nil
}

func (x *DeclaredAfterStruct) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("DeclaredAfterStruct read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("DeclaredAfterStruct field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("DeclaredAfterStruct read struct end error: ", err)
    }

    return nil
}

func (x *DeclaredAfterStruct) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *DeclaredAfterStruct) setDefaults() *DeclaredAfterStruct {
    return x
}

func (x *DeclaredAfterStruct) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_DeclaredAfterStruct
}

type RenamedStruct struct {
    Data int64 `thrift:"data,1" json:"data" db:"data"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*RenamedStruct)(nil)

func NewRenamedStruct() *RenamedStruct {
    return (&RenamedStruct{}).setDefaults()
}

func (x *RenamedStruct) GetData() int64 {
    return x.Data
}

func (x *RenamedStruct) SetDataNonCompat(value int64) *RenamedStruct {
    x.Data = value
    return x
}

func (x *RenamedStruct) SetData(value int64) *RenamedStruct {
    x.Data = value
    return x
}

func (x *RenamedStruct) writeField1(p thrift.Encoder) error {  // Data
    if err := p.WriteFieldBegin("data", thrift.I64, 1); err != nil {
        return thrift.PrependError("RenamedStruct write field begin error: ", err)
    }

    item := x.Data
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("RenamedStruct write field end error: ", err)
    }
    return nil
}

func (x *RenamedStruct) readField1(p thrift.Decoder) error {  // Data
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Data = result
    return nil
}



func (x *RenamedStruct) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("RenamedStruct"); err != nil {
        return thrift.PrependError("RenamedStruct write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("RenamedStruct write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("RenamedStruct write struct end error: ", err)
    }
    return nil
}

func (x *RenamedStruct) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("RenamedStruct read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("RenamedStruct field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "data")):  // data
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("RenamedStruct read struct end error: ", err)
    }

    return nil
}

func (x *RenamedStruct) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *RenamedStruct) setDefaults() *RenamedStruct {
    return x.
        SetDataNonCompat(0)
}

func (x *RenamedStruct) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_RenamedStruct
}

type SameNamespaceStruct struct {
    Data int64 `thrift:"data,1" json:"data" db:"data"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*SameNamespaceStruct)(nil)

func NewSameNamespaceStruct() *SameNamespaceStruct {
    return (&SameNamespaceStruct{}).setDefaults()
}

func (x *SameNamespaceStruct) GetData() int64 {
    return x.Data
}

func (x *SameNamespaceStruct) SetDataNonCompat(value int64) *SameNamespaceStruct {
    x.Data = value
    return x
}

func (x *SameNamespaceStruct) SetData(value int64) *SameNamespaceStruct {
    x.Data = value
    return x
}

func (x *SameNamespaceStruct) writeField1(p thrift.Encoder) error {  // Data
    if err := p.WriteFieldBegin("data", thrift.I64, 1); err != nil {
        return thrift.PrependError("SameNamespaceStruct write field begin error: ", err)
    }

    item := x.Data
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("SameNamespaceStruct write field end error: ", err)
    }
    return nil
}

func (x *SameNamespaceStruct) readField1(p thrift.Decoder) error {  // Data
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Data = result
    return nil
}



func (x *SameNamespaceStruct) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("SameNamespaceStruct"); err != nil {
        return thrift.PrependError("SameNamespaceStruct write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("SameNamespaceStruct write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("SameNamespaceStruct write struct end error: ", err)
    }
    return nil
}

func (x *SameNamespaceStruct) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("SameNamespaceStruct read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("SameNamespaceStruct field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "data")):  // data
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("SameNamespaceStruct read struct end error: ", err)
    }

    return nil
}

func (x *SameNamespaceStruct) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *SameNamespaceStruct) setDefaults() *SameNamespaceStruct {
    return x.
        SetDataNonCompat(0)
}

func (x *SameNamespaceStruct) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_SameNamespaceStruct
}

type HeapAllocated struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*HeapAllocated)(nil)

func NewHeapAllocated() *HeapAllocated {
    return (&HeapAllocated{}).setDefaults()
}



func (x *HeapAllocated) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("HeapAllocated"); err != nil {
        return thrift.PrependError("HeapAllocated write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("HeapAllocated write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("HeapAllocated write struct end error: ", err)
    }
    return nil
}

func (x *HeapAllocated) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("HeapAllocated read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("HeapAllocated field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("HeapAllocated read struct end error: ", err)
    }

    return nil
}

func (x *HeapAllocated) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *HeapAllocated) setDefaults() *HeapAllocated {
    return x
}

func (x *HeapAllocated) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_HeapAllocated
}

type MoveOnly struct {
    Ptr *HeapAllocated `thrift:"ptr,1" json:"ptr" db:"ptr"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MoveOnly)(nil)

func NewMoveOnly() *MoveOnly {
    return (&MoveOnly{}).setDefaults()
}

func (x *MoveOnly) GetPtr() *HeapAllocated {
    if !x.IsSetPtr() {
        return nil
    }
    return x.Ptr
}

func (x *MoveOnly) SetPtrNonCompat(value *HeapAllocated) *MoveOnly {
    x.Ptr = value
    return x
}

func (x *MoveOnly) SetPtr(value *HeapAllocated) *MoveOnly {
    x.Ptr = value
    return x
}

func (x *MoveOnly) IsSetPtr() bool {
    return x != nil && x.Ptr != nil
}

func (x *MoveOnly) writeField1(p thrift.Encoder) error {  // Ptr
    if !x.IsSetPtr() {
        return nil
    }

    if err := p.WriteFieldBegin("ptr", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError("MoveOnly write field begin error: ", err)
    }

    item := x.Ptr
    if err := item.Write(p); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MoveOnly write field end error: ", err)
    }
    return nil
}

func (x *MoveOnly) readField1(p thrift.Decoder) error {  // Ptr
    result := NewHeapAllocated()
    err := result.Read(p)
    if err != nil {
        return err
    }

    x.Ptr = result
    return nil
}




func (x *MoveOnly) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("MoveOnly"); err != nil {
        return thrift.PrependError("MoveOnly write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("MoveOnly write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("MoveOnly write struct end error: ", err)
    }
    return nil
}

func (x *MoveOnly) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("MoveOnly read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("MoveOnly field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "ptr")):  // ptr
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("MoveOnly read struct end error: ", err)
    }

    return nil
}

func (x *MoveOnly) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *MoveOnly) setDefaults() *MoveOnly {
    return x.
        SetPtrNonCompat(NewHeapAllocated())
}

func (x *MoveOnly) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_MoveOnly
}

type AlsoMoveOnly struct {
    Ptr int64 `thrift:"ptr,1" json:"ptr" db:"ptr"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*AlsoMoveOnly)(nil)

func NewAlsoMoveOnly() *AlsoMoveOnly {
    return (&AlsoMoveOnly{}).setDefaults()
}

func (x *AlsoMoveOnly) GetPtr() int64 {
    return x.Ptr
}

func (x *AlsoMoveOnly) SetPtrNonCompat(value int64) *AlsoMoveOnly {
    x.Ptr = value
    return x
}

func (x *AlsoMoveOnly) SetPtr(value int64) *AlsoMoveOnly {
    x.Ptr = value
    return x
}

func (x *AlsoMoveOnly) writeField1(p thrift.Encoder) error {  // Ptr
    if err := p.WriteFieldBegin("ptr", thrift.I64, 1); err != nil {
        return thrift.PrependError("AlsoMoveOnly write field begin error: ", err)
    }

    item := x.Ptr
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("AlsoMoveOnly write field end error: ", err)
    }
    return nil
}

func (x *AlsoMoveOnly) readField1(p thrift.Decoder) error {  // Ptr
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Ptr = result
    return nil
}



func (x *AlsoMoveOnly) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("AlsoMoveOnly"); err != nil {
        return thrift.PrependError("AlsoMoveOnly write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("AlsoMoveOnly write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("AlsoMoveOnly write struct end error: ", err)
    }
    return nil
}

func (x *AlsoMoveOnly) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("AlsoMoveOnly read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("AlsoMoveOnly field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "ptr")):  // ptr
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("AlsoMoveOnly read struct end error: ", err)
    }

    return nil
}

func (x *AlsoMoveOnly) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *AlsoMoveOnly) setDefaults() *AlsoMoveOnly {
    return x.
        SetPtrNonCompat(0)
}

func (x *AlsoMoveOnly) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_AlsoMoveOnly
}

type ApplyAdapter struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*ApplyAdapter)(nil)

func NewApplyAdapter() *ApplyAdapter {
    return (&ApplyAdapter{}).setDefaults()
}



func (x *ApplyAdapter) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("ApplyAdapter"); err != nil {
        return thrift.PrependError("ApplyAdapter write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("ApplyAdapter write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("ApplyAdapter write struct end error: ", err)
    }
    return nil
}

func (x *ApplyAdapter) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("ApplyAdapter read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("ApplyAdapter field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("ApplyAdapter read struct end error: ", err)
    }

    return nil
}

func (x *ApplyAdapter) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *ApplyAdapter) setDefaults() *ApplyAdapter {
    return x
}

func (x *ApplyAdapter) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_ApplyAdapter
}

type TransitiveAdapted struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*TransitiveAdapted)(nil)

func NewTransitiveAdapted() *TransitiveAdapted {
    return (&TransitiveAdapted{}).setDefaults()
}



func (x *TransitiveAdapted) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("TransitiveAdapted"); err != nil {
        return thrift.PrependError("TransitiveAdapted write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("TransitiveAdapted write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("TransitiveAdapted write struct end error: ", err)
    }
    return nil
}

func (x *TransitiveAdapted) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("TransitiveAdapted read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("TransitiveAdapted field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("TransitiveAdapted read struct end error: ", err)
    }

    return nil
}

func (x *TransitiveAdapted) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *TransitiveAdapted) setDefaults() *TransitiveAdapted {
    return x
}

func (x *TransitiveAdapted) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_TransitiveAdapted
}

type CountingStruct struct {
    RegularInt *int64 `thrift:"regularInt,1,optional" json:"regularInt,omitempty" db:"regularInt"`
    CountingInt *CountingInt `thrift:"countingInt,2,optional" json:"countingInt,omitempty" db:"countingInt"`
    RegularString *string `thrift:"regularString,3,optional" json:"regularString,omitempty" db:"regularString"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*CountingStruct)(nil)

func NewCountingStruct() *CountingStruct {
    return (&CountingStruct{}).setDefaults()
}

func (x *CountingStruct) GetRegularInt() int64 {
    if !x.IsSetRegularInt() {
        return 0
    }
    return *x.RegularInt
}

func (x *CountingStruct) GetCountingInt() CountingInt {
    if !x.IsSetCountingInt() {
        return NewCountingInt()
    }
    return *x.CountingInt
}

func (x *CountingStruct) GetRegularString() string {
    if !x.IsSetRegularString() {
        return ""
    }
    return *x.RegularString
}

func (x *CountingStruct) SetRegularIntNonCompat(value int64) *CountingStruct {
    x.RegularInt = &value
    return x
}

func (x *CountingStruct) SetRegularInt(value *int64) *CountingStruct {
    x.RegularInt = value
    return x
}

func (x *CountingStruct) SetCountingIntNonCompat(value CountingInt) *CountingStruct {
    x.CountingInt = &value
    return x
}

func (x *CountingStruct) SetCountingInt(value *CountingInt) *CountingStruct {
    x.CountingInt = value
    return x
}

func (x *CountingStruct) SetRegularStringNonCompat(value string) *CountingStruct {
    x.RegularString = &value
    return x
}

func (x *CountingStruct) SetRegularString(value *string) *CountingStruct {
    x.RegularString = value
    return x
}

func (x *CountingStruct) IsSetRegularInt() bool {
    return x != nil && x.RegularInt != nil
}

func (x *CountingStruct) IsSetCountingInt() bool {
    return x != nil && x.CountingInt != nil
}

func (x *CountingStruct) IsSetRegularString() bool {
    return x != nil && x.RegularString != nil
}

func (x *CountingStruct) writeField1(p thrift.Encoder) error {  // RegularInt
    if !x.IsSetRegularInt() {
        return nil
    }

    if err := p.WriteFieldBegin("regularInt", thrift.I64, 1); err != nil {
        return thrift.PrependError("CountingStruct write field begin error: ", err)
    }

    item := *x.RegularInt
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("CountingStruct write field end error: ", err)
    }
    return nil
}

func (x *CountingStruct) writeField2(p thrift.Encoder) error {  // CountingInt
    if !x.IsSetCountingInt() {
        return nil
    }

    if err := p.WriteFieldBegin("countingInt", thrift.I64, 2); err != nil {
        return thrift.PrependError("CountingStruct write field begin error: ", err)
    }

    item := *x.CountingInt
    err := WriteCountingInt(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("CountingStruct write field end error: ", err)
    }
    return nil
}

func (x *CountingStruct) writeField3(p thrift.Encoder) error {  // RegularString
    if !x.IsSetRegularString() {
        return nil
    }

    if err := p.WriteFieldBegin("regularString", thrift.STRING, 3); err != nil {
        return thrift.PrependError("CountingStruct write field begin error: ", err)
    }

    item := *x.RegularString
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("CountingStruct write field end error: ", err)
    }
    return nil
}

func (x *CountingStruct) readField1(p thrift.Decoder) error {  // RegularInt
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.RegularInt = &result
    return nil
}

func (x *CountingStruct) readField2(p thrift.Decoder) error {  // CountingInt
    result, err := ReadCountingInt(p)
    if err != nil {
        return err
    }

    x.CountingInt = &result
    return nil
}

func (x *CountingStruct) readField3(p thrift.Decoder) error {  // RegularString
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.RegularString = &result
    return nil
}






func (x *CountingStruct) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("CountingStruct"); err != nil {
        return thrift.PrependError("CountingStruct write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }
    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("CountingStruct write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("CountingStruct write struct end error: ", err)
    }
    return nil
}

func (x *CountingStruct) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("CountingStruct read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("CountingStruct field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "regularInt")):  // regularInt
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "countingInt")):  // countingInt
            fieldReadErr = x.readField2(p)
        case ((id == 3 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "regularString")):  // regularString
            fieldReadErr = x.readField3(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("CountingStruct read struct end error: ", err)
    }

    return nil
}

func (x *CountingStruct) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *CountingStruct) setDefaults() *CountingStruct {
    return x
}

func (x *CountingStruct) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_CountingStruct
}

type Person struct {
    Name string `thrift:"name,1" json:"name" db:"name"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*Person)(nil)

func NewPerson() *Person {
    return (&Person{}).setDefaults()
}

func (x *Person) GetName() string {
    return x.Name
}

func (x *Person) SetNameNonCompat(value string) *Person {
    x.Name = value
    return x
}

func (x *Person) SetName(value string) *Person {
    x.Name = value
    return x
}

func (x *Person) writeField1(p thrift.Encoder) error {  // Name
    if err := p.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
        return thrift.PrependError("Person write field begin error: ", err)
    }

    item := x.Name
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Person write field end error: ", err)
    }
    return nil
}

func (x *Person) readField1(p thrift.Decoder) error {  // Name
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.Name = result
    return nil
}



func (x *Person) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("Person"); err != nil {
        return thrift.PrependError("Person write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("Person write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("Person write struct end error: ", err)
    }
    return nil
}

func (x *Person) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("Person read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("Person field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "name")):  // name
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("Person read struct end error: ", err)
    }

    return nil
}

func (x *Person) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *Person) setDefaults() *Person {
    return x.
        SetNameNonCompat("")
}

func (x *Person) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_Person
}

type Person2 struct {
    Name string `thrift:"name,1" json:"name" db:"name"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*Person2)(nil)

func NewPerson2() *Person2 {
    return (&Person2{}).setDefaults()
}

func (x *Person2) GetName() string {
    return x.Name
}

func (x *Person2) SetNameNonCompat(value string) *Person2 {
    x.Name = value
    return x
}

func (x *Person2) SetName(value string) *Person2 {
    x.Name = value
    return x
}

func (x *Person2) writeField1(p thrift.Encoder) error {  // Name
    if err := p.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
        return thrift.PrependError("Person2 write field begin error: ", err)
    }

    item := x.Name
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Person2 write field end error: ", err)
    }
    return nil
}

func (x *Person2) readField1(p thrift.Decoder) error {  // Name
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.Name = result
    return nil
}



func (x *Person2) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("Person2"); err != nil {
        return thrift.PrependError("Person2 write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("Person2 write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("Person2 write struct end error: ", err)
    }
    return nil
}

func (x *Person2) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("Person2 read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("Person2 field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "name")):  // name
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("Person2 read struct end error: ", err)
    }

    return nil
}

func (x *Person2) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *Person2) setDefaults() *Person2 {
    return x.
        SetNameNonCompat("")
}

func (x *Person2) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_Person2
}

type RenamedStructWithStructAdapterAndFieldAdapter struct {
    Field int32 `thrift:"field,1" json:"field" db:"field"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*RenamedStructWithStructAdapterAndFieldAdapter)(nil)

func NewRenamedStructWithStructAdapterAndFieldAdapter() *RenamedStructWithStructAdapterAndFieldAdapter {
    return (&RenamedStructWithStructAdapterAndFieldAdapter{}).setDefaults()
}

func (x *RenamedStructWithStructAdapterAndFieldAdapter) GetField() int32 {
    return x.Field
}

func (x *RenamedStructWithStructAdapterAndFieldAdapter) SetFieldNonCompat(value int32) *RenamedStructWithStructAdapterAndFieldAdapter {
    x.Field = value
    return x
}

func (x *RenamedStructWithStructAdapterAndFieldAdapter) SetField(value int32) *RenamedStructWithStructAdapterAndFieldAdapter {
    x.Field = value
    return x
}

func (x *RenamedStructWithStructAdapterAndFieldAdapter) writeField1(p thrift.Encoder) error {  // Field
    if err := p.WriteFieldBegin("field", thrift.I32, 1); err != nil {
        return thrift.PrependError("RenamedStructWithStructAdapterAndFieldAdapter write field begin error: ", err)
    }

    item := x.Field
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("RenamedStructWithStructAdapterAndFieldAdapter write field end error: ", err)
    }
    return nil
}

func (x *RenamedStructWithStructAdapterAndFieldAdapter) readField1(p thrift.Decoder) error {  // Field
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.Field = result
    return nil
}



func (x *RenamedStructWithStructAdapterAndFieldAdapter) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("RenamedStructWithStructAdapterAndFieldAdapter"); err != nil {
        return thrift.PrependError("RenamedStructWithStructAdapterAndFieldAdapter write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("RenamedStructWithStructAdapterAndFieldAdapter write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("RenamedStructWithStructAdapterAndFieldAdapter write struct end error: ", err)
    }
    return nil
}

func (x *RenamedStructWithStructAdapterAndFieldAdapter) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("RenamedStructWithStructAdapterAndFieldAdapter read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("RenamedStructWithStructAdapterAndFieldAdapter field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "field")):  // field
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("RenamedStructWithStructAdapterAndFieldAdapter read struct end error: ", err)
    }

    return nil
}

func (x *RenamedStructWithStructAdapterAndFieldAdapter) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *RenamedStructWithStructAdapterAndFieldAdapter) setDefaults() *RenamedStructWithStructAdapterAndFieldAdapter {
    return x.
        SetFieldNonCompat(0)
}

func (x *RenamedStructWithStructAdapterAndFieldAdapter) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_RenamedStructWithStructAdapterAndFieldAdapter
}

type reqServiceFunc struct {
    Arg1 StringWithAdapter_7208 `thrift:"arg1,1" json:"arg1" db:"arg1"`
    Arg2 StringWithCppAdapter `thrift:"arg2,2" json:"arg2" db:"arg2"`
    Arg3 *Foo `thrift:"arg3,3" json:"arg3" db:"arg3"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqServiceFunc)(nil)

// Deprecated: ServiceFuncArgsDeprecated is deprecated, since it is supposed to be internal.
type ServiceFuncArgsDeprecated = reqServiceFunc

func newReqServiceFunc() *reqServiceFunc {
    return (&reqServiceFunc{}).setDefaults()
}

func (x *reqServiceFunc) GetArg1() StringWithAdapter_7208 {
    return x.Arg1
}

func (x *reqServiceFunc) GetArg2() StringWithCppAdapter {
    return x.Arg2
}

func (x *reqServiceFunc) GetArg3() *Foo {
    if !x.IsSetArg3() {
        return nil
    }
    return x.Arg3
}

func (x *reqServiceFunc) SetArg1NonCompat(value StringWithAdapter_7208) *reqServiceFunc {
    x.Arg1 = value
    return x
}

func (x *reqServiceFunc) SetArg1(value StringWithAdapter_7208) *reqServiceFunc {
    x.Arg1 = value
    return x
}

func (x *reqServiceFunc) SetArg2NonCompat(value StringWithCppAdapter) *reqServiceFunc {
    x.Arg2 = value
    return x
}

func (x *reqServiceFunc) SetArg2(value StringWithCppAdapter) *reqServiceFunc {
    x.Arg2 = value
    return x
}

func (x *reqServiceFunc) SetArg3NonCompat(value *Foo) *reqServiceFunc {
    x.Arg3 = value
    return x
}

func (x *reqServiceFunc) SetArg3(value *Foo) *reqServiceFunc {
    x.Arg3 = value
    return x
}

func (x *reqServiceFunc) IsSetArg3() bool {
    return x != nil && x.Arg3 != nil
}

func (x *reqServiceFunc) writeField1(p thrift.Encoder) error {  // Arg1
    if err := p.WriteFieldBegin("arg1", thrift.STRING, 1); err != nil {
        return thrift.PrependError("reqServiceFunc write field begin error: ", err)
    }

    item := x.Arg1
    err := WriteStringWithAdapter_7208(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqServiceFunc write field end error: ", err)
    }
    return nil
}

func (x *reqServiceFunc) writeField2(p thrift.Encoder) error {  // Arg2
    if err := p.WriteFieldBegin("arg2", thrift.STRING, 2); err != nil {
        return thrift.PrependError("reqServiceFunc write field begin error: ", err)
    }

    item := x.Arg2
    err := WriteStringWithCppAdapter(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqServiceFunc write field end error: ", err)
    }
    return nil
}

func (x *reqServiceFunc) writeField3(p thrift.Encoder) error {  // Arg3
    if !x.IsSetArg3() {
        return nil
    }

    if err := p.WriteFieldBegin("arg3", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError("reqServiceFunc write field begin error: ", err)
    }

    item := x.Arg3
    if err := item.Write(p); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqServiceFunc write field end error: ", err)
    }
    return nil
}

func (x *reqServiceFunc) readField1(p thrift.Decoder) error {  // Arg1
    result, err := ReadStringWithAdapter_7208(p)
    if err != nil {
        return err
    }

    x.Arg1 = result
    return nil
}

func (x *reqServiceFunc) readField2(p thrift.Decoder) error {  // Arg2
    result, err := ReadStringWithCppAdapter(p)
    if err != nil {
        return err
    }

    x.Arg2 = result
    return nil
}

func (x *reqServiceFunc) readField3(p thrift.Decoder) error {  // Arg3
    result := NewFoo()
    err := result.Read(p)
    if err != nil {
        return err
    }

    x.Arg3 = result
    return nil
}




func (x *reqServiceFunc) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqServiceFunc"); err != nil {
        return thrift.PrependError("reqServiceFunc write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }
    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqServiceFunc write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqServiceFunc write struct end error: ", err)
    }
    return nil
}

func (x *reqServiceFunc) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqServiceFunc read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqServiceFunc field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "arg1")):  // arg1
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "arg2")):  // arg2
            fieldReadErr = x.readField2(p)
        case ((id == 3 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "arg3")):  // arg3
            fieldReadErr = x.readField3(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqServiceFunc read struct end error: ", err)
    }

    return nil
}

func (x *reqServiceFunc) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqServiceFunc) setDefaults() *reqServiceFunc {
    return x.
        SetArg1NonCompat(NewStringWithAdapter_7208()).
        SetArg2NonCompat(NewStringWithCppAdapter()).
        SetArg3NonCompat(NewFoo())
}

type respServiceFunc struct {
    Success *MyI32_4873 `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respServiceFunc)(nil)
var _ thrift.WritableResult = (*respServiceFunc)(nil)

// Deprecated: ServiceFuncResultDeprecated is deprecated, since it is supposed to be internal.
type ServiceFuncResultDeprecated = respServiceFunc

func newRespServiceFunc() *respServiceFunc {
    return (&respServiceFunc{}).setDefaults()
}

func (x *respServiceFunc) GetSuccess() MyI32_4873 {
    if !x.IsSetSuccess() {
        return NewMyI32_4873()
    }
    return *x.Success
}

func (x *respServiceFunc) SetSuccessNonCompat(value MyI32_4873) *respServiceFunc {
    x.Success = &value
    return x
}

func (x *respServiceFunc) SetSuccess(value *MyI32_4873) *respServiceFunc {
    x.Success = value
    return x
}

func (x *respServiceFunc) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respServiceFunc) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.I32, 0); err != nil {
        return thrift.PrependError("respServiceFunc write field begin error: ", err)
    }

    item := *x.Success
    err := WriteMyI32_4873(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respServiceFunc write field end error: ", err)
    }
    return nil
}

func (x *respServiceFunc) readField0(p thrift.Decoder) error {  // Success
    result, err := ReadMyI32_4873(p)
    if err != nil {
        return err
    }

    x.Success = &result
    return nil
}




func (x *respServiceFunc) Exception() thrift.WritableException {
    return nil
}

func (x *respServiceFunc) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respServiceFunc"); err != nil {
        return thrift.PrependError("respServiceFunc write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respServiceFunc write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respServiceFunc write struct end error: ", err)
    }
    return nil
}

func (x *respServiceFunc) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respServiceFunc read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respServiceFunc field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respServiceFunc read struct end error: ", err)
    }

    return nil
}

func (x *respServiceFunc) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respServiceFunc) setDefaults() *respServiceFunc {
    return x
}

type reqAdapterServiceCount struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqAdapterServiceCount)(nil)

// Deprecated: AdapterServiceCountArgsDeprecated is deprecated, since it is supposed to be internal.
type AdapterServiceCountArgsDeprecated = reqAdapterServiceCount

func newReqAdapterServiceCount() *reqAdapterServiceCount {
    return (&reqAdapterServiceCount{}).setDefaults()
}



func (x *reqAdapterServiceCount) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqAdapterServiceCount"); err != nil {
        return thrift.PrependError("reqAdapterServiceCount write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqAdapterServiceCount write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqAdapterServiceCount write struct end error: ", err)
    }
    return nil
}

func (x *reqAdapterServiceCount) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqAdapterServiceCount read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqAdapterServiceCount field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqAdapterServiceCount read struct end error: ", err)
    }

    return nil
}

func (x *reqAdapterServiceCount) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqAdapterServiceCount) setDefaults() *reqAdapterServiceCount {
    return x
}

type respAdapterServiceCount struct {
    Success *CountingStruct `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respAdapterServiceCount)(nil)
var _ thrift.WritableResult = (*respAdapterServiceCount)(nil)

// Deprecated: AdapterServiceCountResultDeprecated is deprecated, since it is supposed to be internal.
type AdapterServiceCountResultDeprecated = respAdapterServiceCount

func newRespAdapterServiceCount() *respAdapterServiceCount {
    return (&respAdapterServiceCount{}).setDefaults()
}

func (x *respAdapterServiceCount) GetSuccess() *CountingStruct {
    if !x.IsSetSuccess() {
        return nil
    }
    return x.Success
}

func (x *respAdapterServiceCount) SetSuccessNonCompat(value *CountingStruct) *respAdapterServiceCount {
    x.Success = value
    return x
}

func (x *respAdapterServiceCount) SetSuccess(value *CountingStruct) *respAdapterServiceCount {
    x.Success = value
    return x
}

func (x *respAdapterServiceCount) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respAdapterServiceCount) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
        return thrift.PrependError("respAdapterServiceCount write field begin error: ", err)
    }

    item := x.Success
    if err := item.Write(p); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respAdapterServiceCount write field end error: ", err)
    }
    return nil
}

func (x *respAdapterServiceCount) readField0(p thrift.Decoder) error {  // Success
    result := NewCountingStruct()
    err := result.Read(p)
    if err != nil {
        return err
    }

    x.Success = result
    return nil
}




func (x *respAdapterServiceCount) Exception() thrift.WritableException {
    return nil
}

func (x *respAdapterServiceCount) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respAdapterServiceCount"); err != nil {
        return thrift.PrependError("respAdapterServiceCount write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respAdapterServiceCount write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respAdapterServiceCount write struct end error: ", err)
    }
    return nil
}

func (x *respAdapterServiceCount) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respAdapterServiceCount read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respAdapterServiceCount field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respAdapterServiceCount read struct end error: ", err)
    }

    return nil
}

func (x *respAdapterServiceCount) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respAdapterServiceCount) setDefaults() *respAdapterServiceCount {
    return x
}

type reqAdapterServiceAdaptedTypes struct {
    Arg *HeapAllocated `thrift:"arg,1" json:"arg" db:"arg"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqAdapterServiceAdaptedTypes)(nil)

// Deprecated: AdapterServiceAdaptedTypesArgsDeprecated is deprecated, since it is supposed to be internal.
type AdapterServiceAdaptedTypesArgsDeprecated = reqAdapterServiceAdaptedTypes

func newReqAdapterServiceAdaptedTypes() *reqAdapterServiceAdaptedTypes {
    return (&reqAdapterServiceAdaptedTypes{}).setDefaults()
}

func (x *reqAdapterServiceAdaptedTypes) GetArg() *HeapAllocated {
    if !x.IsSetArg() {
        return nil
    }
    return x.Arg
}

func (x *reqAdapterServiceAdaptedTypes) SetArgNonCompat(value *HeapAllocated) *reqAdapterServiceAdaptedTypes {
    x.Arg = value
    return x
}

func (x *reqAdapterServiceAdaptedTypes) SetArg(value *HeapAllocated) *reqAdapterServiceAdaptedTypes {
    x.Arg = value
    return x
}

func (x *reqAdapterServiceAdaptedTypes) IsSetArg() bool {
    return x != nil && x.Arg != nil
}

func (x *reqAdapterServiceAdaptedTypes) writeField1(p thrift.Encoder) error {  // Arg
    if !x.IsSetArg() {
        return nil
    }

    if err := p.WriteFieldBegin("arg", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError("reqAdapterServiceAdaptedTypes write field begin error: ", err)
    }

    item := x.Arg
    if err := item.Write(p); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqAdapterServiceAdaptedTypes write field end error: ", err)
    }
    return nil
}

func (x *reqAdapterServiceAdaptedTypes) readField1(p thrift.Decoder) error {  // Arg
    result := NewHeapAllocated()
    err := result.Read(p)
    if err != nil {
        return err
    }

    x.Arg = result
    return nil
}




func (x *reqAdapterServiceAdaptedTypes) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqAdapterServiceAdaptedTypes"); err != nil {
        return thrift.PrependError("reqAdapterServiceAdaptedTypes write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqAdapterServiceAdaptedTypes write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqAdapterServiceAdaptedTypes write struct end error: ", err)
    }
    return nil
}

func (x *reqAdapterServiceAdaptedTypes) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqAdapterServiceAdaptedTypes read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqAdapterServiceAdaptedTypes field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "arg")):  // arg
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqAdapterServiceAdaptedTypes read struct end error: ", err)
    }

    return nil
}

func (x *reqAdapterServiceAdaptedTypes) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqAdapterServiceAdaptedTypes) setDefaults() *reqAdapterServiceAdaptedTypes {
    return x.
        SetArgNonCompat(NewHeapAllocated())
}

type respAdapterServiceAdaptedTypes struct {
    Success *HeapAllocated `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respAdapterServiceAdaptedTypes)(nil)
var _ thrift.WritableResult = (*respAdapterServiceAdaptedTypes)(nil)

// Deprecated: AdapterServiceAdaptedTypesResultDeprecated is deprecated, since it is supposed to be internal.
type AdapterServiceAdaptedTypesResultDeprecated = respAdapterServiceAdaptedTypes

func newRespAdapterServiceAdaptedTypes() *respAdapterServiceAdaptedTypes {
    return (&respAdapterServiceAdaptedTypes{}).setDefaults()
}

func (x *respAdapterServiceAdaptedTypes) GetSuccess() *HeapAllocated {
    if !x.IsSetSuccess() {
        return nil
    }
    return x.Success
}

func (x *respAdapterServiceAdaptedTypes) SetSuccessNonCompat(value *HeapAllocated) *respAdapterServiceAdaptedTypes {
    x.Success = value
    return x
}

func (x *respAdapterServiceAdaptedTypes) SetSuccess(value *HeapAllocated) *respAdapterServiceAdaptedTypes {
    x.Success = value
    return x
}

func (x *respAdapterServiceAdaptedTypes) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respAdapterServiceAdaptedTypes) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
        return thrift.PrependError("respAdapterServiceAdaptedTypes write field begin error: ", err)
    }

    item := x.Success
    if err := item.Write(p); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respAdapterServiceAdaptedTypes write field end error: ", err)
    }
    return nil
}

func (x *respAdapterServiceAdaptedTypes) readField0(p thrift.Decoder) error {  // Success
    result := NewHeapAllocated()
    err := result.Read(p)
    if err != nil {
        return err
    }

    x.Success = result
    return nil
}




func (x *respAdapterServiceAdaptedTypes) Exception() thrift.WritableException {
    return nil
}

func (x *respAdapterServiceAdaptedTypes) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respAdapterServiceAdaptedTypes"); err != nil {
        return thrift.PrependError("respAdapterServiceAdaptedTypes write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respAdapterServiceAdaptedTypes write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respAdapterServiceAdaptedTypes write struct end error: ", err)
    }
    return nil
}

func (x *respAdapterServiceAdaptedTypes) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respAdapterServiceAdaptedTypes read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respAdapterServiceAdaptedTypes field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respAdapterServiceAdaptedTypes read struct end error: ", err)
    }

    return nil
}

func (x *respAdapterServiceAdaptedTypes) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respAdapterServiceAdaptedTypes) setDefaults() *respAdapterServiceAdaptedTypes {
    return x
}


// RegisterTypes registers types found in this file that have a thrift_uri with the passed in registry.
func RegisterTypes(registry interface {
  RegisterType(name string, initializer func() any)
}) {
    registry.RegisterType("facebook.com/thrift/test/MyAnnotation", func() any { return NewMyAnnotation() })
    registry.RegisterType("facebook.com/thrift/compiler/test/fixtures/adapter/src/module/Foo", func() any { return NewFoo() })
    registry.RegisterType("facebook.com/thrift/test/Baz", func() any { return NewBaz() })
    registry.RegisterType("facebook.com/thrift/test/Bar", func() any { return NewBar() })
    registry.RegisterType("facebook.com/thrift/test/DirectlyAdapted", func() any { return NewDirectlyAdapted() })
    registry.RegisterType("facebook.com/thrift/test/IndependentDirectlyAdapted", func() any { return NewIndependentDirectlyAdapted() })
    registry.RegisterType("facebook.com/thrift/test/StructWithFieldAdapter", func() any { return NewStructWithFieldAdapter() })
    registry.RegisterType("facebook.com/thrift/test/TerseAdaptedFields", func() any { return NewTerseAdaptedFields() })
    registry.RegisterType("facebook.com/thrift/test/B", func() any { return NewB() })
    registry.RegisterType("facebook.com/thrift/test/A", func() any { return NewA() })
    registry.RegisterType("facebook.com/thrift/test/Config", func() any { return NewConfig() })
    registry.RegisterType("facebook.com/thrift/test/MyStruct", func() any { return NewMyStruct() })
    registry.RegisterType("facebook.com/thrift/test/AdaptTestStruct", func() any { return NewAdaptTestStruct() })
    registry.RegisterType("facebook.com/thrift/test/AdaptTemplatedTestStruct", func() any { return NewAdaptTemplatedTestStruct() })
    registry.RegisterType("facebook.com/thrift/test/AdaptTemplatedNestedTestStruct", func() any { return NewAdaptTemplatedNestedTestStruct() })
    registry.RegisterType("facebook.com/thrift/test/AdaptTestUnion", func() any { return NewAdaptTestUnion() })
    registry.RegisterType("facebook.com/thrift/test/AdaptedStruct", func() any { return NewAdaptedStruct() })
    registry.RegisterType("facebook.com/thrift/test/DirectlyAdaptedStruct", func() any { return NewDirectlyAdaptedStruct() })
    registry.RegisterType("facebook.com/thrift/test/StructFieldAdaptedStruct", func() any { return NewStructFieldAdaptedStruct() })
    registry.RegisterType("facebook.com/thrift/test/CircularAdaptee", func() any { return NewCircularAdaptee() })
    registry.RegisterType("facebook.com/thrift/test/CircularStruct", func() any { return NewCircularStruct() })
    registry.RegisterType("facebook.com/thrift/test/ReorderedStruct", func() any { return NewReorderedStruct() })
    registry.RegisterType("facebook.com/thrift/test/DeclaredAfterStruct", func() any { return NewDeclaredAfterStruct() })
    registry.RegisterType("facebook.com/thrift/test/RenamedStruct", func() any { return NewRenamedStruct() })
    registry.RegisterType("facebook.com/thrift/test/SameNamespaceStruct", func() any { return NewSameNamespaceStruct() })
    registry.RegisterType("facebook.com/thrift/test/HeapAllocated", func() any { return NewHeapAllocated() })
    registry.RegisterType("facebook.com/thrift/test/MoveOnly", func() any { return NewMoveOnly() })
    registry.RegisterType("facebook.com/thrift/test/AlsoMoveOnly", func() any { return NewAlsoMoveOnly() })
    registry.RegisterType("facebook.com/thrift/test/ApplyAdapter", func() any { return NewApplyAdapter() })
    registry.RegisterType("facebook.com/thrift/test/TransitiveAdapted", func() any { return NewTransitiveAdapted() })
    registry.RegisterType("facebook.com/thrift/test/CountingStruct", func() any { return NewCountingStruct() })
    registry.RegisterType("facebook.com/thrift/test/Person", func() any { return NewPerson() })
    registry.RegisterType("facebook.com/thrift/test/Person2", func() any { return NewPerson2() })
    registry.RegisterType("facebook.com/thrift/test/RenamedStructWithStructAdapterAndFieldAdapter", func() any { return NewRenamedStructWithStructAdapterAndFieldAdapter() })

    registry.RegisterType("facebook.com/thrift/test/Color", func() any { return Color(0) })
    registry.RegisterType("facebook.com/thrift/test/ThriftAdaptedEnum", func() any { return ThriftAdaptedEnum(0) })
}
