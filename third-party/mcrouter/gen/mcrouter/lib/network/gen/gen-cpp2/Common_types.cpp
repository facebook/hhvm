/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "mcrouter/lib/network/gen/gen-cpp2/Common_types.h"
#include "mcrouter/lib/network/gen/gen-cpp2/Common_types.tcc"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "mcrouter/lib/network/gen/gen-cpp2/Common_data.h"


namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::memcache::thrift::McVersionRequest>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 1;
  static constexpr folly::StringPiece _names[] = {
    "key",
  };
  static constexpr int16_t _ids[] = {
    1,
  };
  static constexpr TType _types[] = {
    TType::T_STRING,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace memcache { namespace thrift {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
McVersionRequest::McVersionRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg) :
    key(std::move(key__arg)) {
  __isset.key = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void McVersionRequest::__clear() {
  // clear all fields
  key.rawUnsafe() = apache::thrift::StringTraits< folly::remove_cvref_t<decltype(std::declval<carbon::Keys<folly::IOBuf>>().rawUnsafe())>>::fromStringLiteral("");
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool McVersionRequest::operator==(const McVersionRequest& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!apache::thrift::StringTraits<folly::remove_cvref_t<decltype(std::declval<carbon::Keys<folly::IOBuf>>().rawUnsafe())>>::isEqual(lhs.key.rawUnsafe(), rhs.key.rawUnsafe())) {
    return false;
  }
  return true;
}

bool McVersionRequest::operator<(const McVersionRequest& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!apache::thrift::StringTraits<folly::remove_cvref_t<decltype(std::declval<carbon::Keys<folly::IOBuf>>().rawUnsafe())>>::isEqual(lhs.key.rawUnsafe(), rhs.key.rawUnsafe())) {
    return apache::thrift::StringTraits<folly::remove_cvref_t<decltype(std::declval<carbon::Keys<folly::IOBuf>>().rawUnsafe())>>::isLess(lhs.key.rawUnsafe(), rhs.key.rawUnsafe());
  }
  return false;
}


void swap(McVersionRequest& a, McVersionRequest& b) {
  using ::std::swap;
  swap(a.key_ref().value(), b.key_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void McVersionRequest::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t McVersionRequest::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McVersionRequest::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t McVersionRequest::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void McVersionRequest::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t McVersionRequest::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McVersionRequest::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t McVersionRequest::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // facebook::memcache::thrift
namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::memcache::thrift::McVersionReply>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 4;
  static constexpr folly::StringPiece _names[] = {
    "result",
    "value",
    "message",
    "appSpecificErrorCode",
  };
  static constexpr int16_t _ids[] = {
    1,
    2,
    3,
    4,
  };
  static constexpr TType _types[] = {
    TType::T_I32,
    TType::T_STRING,
    TType::T_STRING,
    TType::T_I16,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace memcache { namespace thrift {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
McVersionReply::McVersionReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, folly::IOBuf value__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg) :
    result(std::move(result__arg)),
    value(std::move(value__arg)),
    message(std::move(message__arg)),
    appSpecificErrorCode(std::move(appSpecificErrorCode__arg)) {
  __isset.result = true;
  __isset.value = true;
  __isset.message = true;
  __isset.appSpecificErrorCode = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void McVersionReply::__clear() {
  // clear all fields
  result =  ::carbon::Result::UNKNOWN;
  value = apache::thrift::StringTraits< folly::IOBuf>::fromStringLiteral("");
  message = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  appSpecificErrorCode = 0;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool McVersionReply::operator==(const McVersionReply& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.result == rhs.result)) {
    return false;
  }
  if (!apache::thrift::StringTraits<folly::IOBuf>::isEqual(lhs.value, rhs.value)) {
    return false;
  }
  if (!(lhs.message == rhs.message)) {
    return false;
  }
  if (!(lhs.appSpecificErrorCode == rhs.appSpecificErrorCode)) {
    return false;
  }
  return true;
}

bool McVersionReply::operator<(const McVersionReply& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.result == rhs.result)) {
    return lhs.result < rhs.result;
  }
  if (!apache::thrift::StringTraits<folly::IOBuf>::isEqual(lhs.value, rhs.value)) {
    return apache::thrift::StringTraits<folly::IOBuf>::isLess(lhs.value, rhs.value);
  }
  if (!(lhs.message == rhs.message)) {
    return lhs.message < rhs.message;
  }
  if (!(lhs.appSpecificErrorCode == rhs.appSpecificErrorCode)) {
    return lhs.appSpecificErrorCode < rhs.appSpecificErrorCode;
  }
  return false;
}


void swap(McVersionReply& a, McVersionReply& b) {
  using ::std::swap;
  swap(a.result_ref().value(), b.result_ref().value());
  swap(a.value_ref().value(), b.value_ref().value());
  swap(a.message_ref().value(), b.message_ref().value());
  swap(a.appSpecificErrorCode_ref().value(), b.appSpecificErrorCode_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void McVersionReply::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t McVersionReply::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McVersionReply::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t McVersionReply::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void McVersionReply::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t McVersionReply::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McVersionReply::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t McVersionReply::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // facebook::memcache::thrift
namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::memcache::thrift::McStatsRequest>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 1;
  static constexpr folly::StringPiece _names[] = {
    "key",
  };
  static constexpr int16_t _ids[] = {
    1,
  };
  static constexpr TType _types[] = {
    TType::T_STRING,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace memcache { namespace thrift {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
McStatsRequest::McStatsRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg) :
    key(std::move(key__arg)) {
  __isset.key = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void McStatsRequest::__clear() {
  // clear all fields
  key.rawUnsafe() = apache::thrift::StringTraits< folly::remove_cvref_t<decltype(std::declval<carbon::Keys<folly::IOBuf>>().rawUnsafe())>>::fromStringLiteral("");
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool McStatsRequest::operator==(const McStatsRequest& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!apache::thrift::StringTraits<folly::remove_cvref_t<decltype(std::declval<carbon::Keys<folly::IOBuf>>().rawUnsafe())>>::isEqual(lhs.key.rawUnsafe(), rhs.key.rawUnsafe())) {
    return false;
  }
  return true;
}

bool McStatsRequest::operator<(const McStatsRequest& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!apache::thrift::StringTraits<folly::remove_cvref_t<decltype(std::declval<carbon::Keys<folly::IOBuf>>().rawUnsafe())>>::isEqual(lhs.key.rawUnsafe(), rhs.key.rawUnsafe())) {
    return apache::thrift::StringTraits<folly::remove_cvref_t<decltype(std::declval<carbon::Keys<folly::IOBuf>>().rawUnsafe())>>::isLess(lhs.key.rawUnsafe(), rhs.key.rawUnsafe());
  }
  return false;
}


void swap(McStatsRequest& a, McStatsRequest& b) {
  using ::std::swap;
  swap(a.key_ref().value(), b.key_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void McStatsRequest::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t McStatsRequest::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McStatsRequest::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t McStatsRequest::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void McStatsRequest::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t McStatsRequest::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McStatsRequest::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t McStatsRequest::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // facebook::memcache::thrift
namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::memcache::thrift::McStatsReply>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 4;
  static constexpr folly::StringPiece _names[] = {
    "result",
    "message",
    "stats",
    "appSpecificErrorCode",
  };
  static constexpr int16_t _ids[] = {
    1,
    2,
    3,
    4,
  };
  static constexpr TType _types[] = {
    TType::T_I32,
    TType::T_STRING,
    TType::T_LIST,
    TType::T_I16,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace memcache { namespace thrift {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
McStatsReply::McStatsReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, ::std::string message__arg, ::std::vector<::std::string> stats__arg, int16_t appSpecificErrorCode__arg) :
    result(std::move(result__arg)),
    message(std::move(message__arg)),
    stats(std::move(stats__arg)),
    appSpecificErrorCode(std::move(appSpecificErrorCode__arg)) {
  __isset.result = true;
  __isset.message = true;
  __isset.stats = true;
  __isset.appSpecificErrorCode = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void McStatsReply::__clear() {
  // clear all fields
  result =  ::carbon::Result::UNKNOWN;
  message = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  stats.clear();
  appSpecificErrorCode = 0;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool McStatsReply::operator==(const McStatsReply& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.result == rhs.result)) {
    return false;
  }
  if (!(lhs.message == rhs.message)) {
    return false;
  }
  if (!(lhs.stats == rhs.stats)) {
    return false;
  }
  if (!(lhs.appSpecificErrorCode == rhs.appSpecificErrorCode)) {
    return false;
  }
  return true;
}

bool McStatsReply::operator<(const McStatsReply& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.result == rhs.result)) {
    return lhs.result < rhs.result;
  }
  if (!(lhs.message == rhs.message)) {
    return lhs.message < rhs.message;
  }
  if (!(lhs.stats == rhs.stats)) {
    return lhs.stats < rhs.stats;
  }
  if (!(lhs.appSpecificErrorCode == rhs.appSpecificErrorCode)) {
    return lhs.appSpecificErrorCode < rhs.appSpecificErrorCode;
  }
  return false;
}

const ::std::vector<::std::string>& McStatsReply::get_stats() const& {
  return stats;
}

::std::vector<::std::string> McStatsReply::get_stats() && {
  return std::move(stats);
}


void swap(McStatsReply& a, McStatsReply& b) {
  using ::std::swap;
  swap(a.result_ref().value(), b.result_ref().value());
  swap(a.message_ref().value(), b.message_ref().value());
  swap(a.stats_ref().value(), b.stats_ref().value());
  swap(a.appSpecificErrorCode_ref().value(), b.appSpecificErrorCode_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void McStatsReply::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t McStatsReply::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McStatsReply::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t McStatsReply::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void McStatsReply::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t McStatsReply::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McStatsReply::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t McStatsReply::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // facebook::memcache::thrift
namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::memcache::thrift::McShutdownRequest>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 1;
  static constexpr folly::StringPiece _names[] = {
    "key",
  };
  static constexpr int16_t _ids[] = {
    1,
  };
  static constexpr TType _types[] = {
    TType::T_STRING,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace memcache { namespace thrift {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
McShutdownRequest::McShutdownRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg) :
    key(std::move(key__arg)) {
  __isset.key = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void McShutdownRequest::__clear() {
  // clear all fields
  key.rawUnsafe() = apache::thrift::StringTraits< folly::remove_cvref_t<decltype(std::declval<carbon::Keys<folly::IOBuf>>().rawUnsafe())>>::fromStringLiteral("");
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool McShutdownRequest::operator==(const McShutdownRequest& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!apache::thrift::StringTraits<folly::remove_cvref_t<decltype(std::declval<carbon::Keys<folly::IOBuf>>().rawUnsafe())>>::isEqual(lhs.key.rawUnsafe(), rhs.key.rawUnsafe())) {
    return false;
  }
  return true;
}

bool McShutdownRequest::operator<(const McShutdownRequest& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!apache::thrift::StringTraits<folly::remove_cvref_t<decltype(std::declval<carbon::Keys<folly::IOBuf>>().rawUnsafe())>>::isEqual(lhs.key.rawUnsafe(), rhs.key.rawUnsafe())) {
    return apache::thrift::StringTraits<folly::remove_cvref_t<decltype(std::declval<carbon::Keys<folly::IOBuf>>().rawUnsafe())>>::isLess(lhs.key.rawUnsafe(), rhs.key.rawUnsafe());
  }
  return false;
}


void swap(McShutdownRequest& a, McShutdownRequest& b) {
  using ::std::swap;
  swap(a.key_ref().value(), b.key_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void McShutdownRequest::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t McShutdownRequest::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McShutdownRequest::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t McShutdownRequest::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void McShutdownRequest::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t McShutdownRequest::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McShutdownRequest::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t McShutdownRequest::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // facebook::memcache::thrift
namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::memcache::thrift::McShutdownReply>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 3;
  static constexpr folly::StringPiece _names[] = {
    "result",
    "message",
    "appSpecificErrorCode",
  };
  static constexpr int16_t _ids[] = {
    1,
    2,
    3,
  };
  static constexpr TType _types[] = {
    TType::T_I32,
    TType::T_STRING,
    TType::T_I16,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace memcache { namespace thrift {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
McShutdownReply::McShutdownReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg) :
    result(std::move(result__arg)),
    message(std::move(message__arg)),
    appSpecificErrorCode(std::move(appSpecificErrorCode__arg)) {
  __isset.result = true;
  __isset.message = true;
  __isset.appSpecificErrorCode = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void McShutdownReply::__clear() {
  // clear all fields
  result =  ::carbon::Result::UNKNOWN;
  message = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  appSpecificErrorCode = 0;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool McShutdownReply::operator==(const McShutdownReply& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.result == rhs.result)) {
    return false;
  }
  if (!(lhs.message == rhs.message)) {
    return false;
  }
  if (!(lhs.appSpecificErrorCode == rhs.appSpecificErrorCode)) {
    return false;
  }
  return true;
}

bool McShutdownReply::operator<(const McShutdownReply& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.result == rhs.result)) {
    return lhs.result < rhs.result;
  }
  if (!(lhs.message == rhs.message)) {
    return lhs.message < rhs.message;
  }
  if (!(lhs.appSpecificErrorCode == rhs.appSpecificErrorCode)) {
    return lhs.appSpecificErrorCode < rhs.appSpecificErrorCode;
  }
  return false;
}


void swap(McShutdownReply& a, McShutdownReply& b) {
  using ::std::swap;
  swap(a.result_ref().value(), b.result_ref().value());
  swap(a.message_ref().value(), b.message_ref().value());
  swap(a.appSpecificErrorCode_ref().value(), b.appSpecificErrorCode_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void McShutdownReply::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t McShutdownReply::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McShutdownReply::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t McShutdownReply::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void McShutdownReply::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t McShutdownReply::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McShutdownReply::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t McShutdownReply::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // facebook::memcache::thrift
namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::memcache::thrift::McQuitRequest>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 1;
  static constexpr folly::StringPiece _names[] = {
    "key",
  };
  static constexpr int16_t _ids[] = {
    1,
  };
  static constexpr TType _types[] = {
    TType::T_STRING,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace memcache { namespace thrift {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
McQuitRequest::McQuitRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg) :
    key(std::move(key__arg)) {
  __isset.key = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void McQuitRequest::__clear() {
  // clear all fields
  key.rawUnsafe() = apache::thrift::StringTraits< folly::remove_cvref_t<decltype(std::declval<carbon::Keys<folly::IOBuf>>().rawUnsafe())>>::fromStringLiteral("");
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool McQuitRequest::operator==(const McQuitRequest& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!apache::thrift::StringTraits<folly::remove_cvref_t<decltype(std::declval<carbon::Keys<folly::IOBuf>>().rawUnsafe())>>::isEqual(lhs.key.rawUnsafe(), rhs.key.rawUnsafe())) {
    return false;
  }
  return true;
}

bool McQuitRequest::operator<(const McQuitRequest& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!apache::thrift::StringTraits<folly::remove_cvref_t<decltype(std::declval<carbon::Keys<folly::IOBuf>>().rawUnsafe())>>::isEqual(lhs.key.rawUnsafe(), rhs.key.rawUnsafe())) {
    return apache::thrift::StringTraits<folly::remove_cvref_t<decltype(std::declval<carbon::Keys<folly::IOBuf>>().rawUnsafe())>>::isLess(lhs.key.rawUnsafe(), rhs.key.rawUnsafe());
  }
  return false;
}


void swap(McQuitRequest& a, McQuitRequest& b) {
  using ::std::swap;
  swap(a.key_ref().value(), b.key_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void McQuitRequest::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t McQuitRequest::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McQuitRequest::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t McQuitRequest::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void McQuitRequest::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t McQuitRequest::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McQuitRequest::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t McQuitRequest::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // facebook::memcache::thrift
namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::memcache::thrift::McQuitReply>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 3;
  static constexpr folly::StringPiece _names[] = {
    "result",
    "message",
    "appSpecificErrorCode",
  };
  static constexpr int16_t _ids[] = {
    1,
    2,
    3,
  };
  static constexpr TType _types[] = {
    TType::T_I32,
    TType::T_STRING,
    TType::T_I16,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace memcache { namespace thrift {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
McQuitReply::McQuitReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg) :
    result(std::move(result__arg)),
    message(std::move(message__arg)),
    appSpecificErrorCode(std::move(appSpecificErrorCode__arg)) {
  __isset.result = true;
  __isset.message = true;
  __isset.appSpecificErrorCode = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void McQuitReply::__clear() {
  // clear all fields
  result =  ::carbon::Result::UNKNOWN;
  message = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  appSpecificErrorCode = 0;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool McQuitReply::operator==(const McQuitReply& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.result == rhs.result)) {
    return false;
  }
  if (!(lhs.message == rhs.message)) {
    return false;
  }
  if (!(lhs.appSpecificErrorCode == rhs.appSpecificErrorCode)) {
    return false;
  }
  return true;
}

bool McQuitReply::operator<(const McQuitReply& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.result == rhs.result)) {
    return lhs.result < rhs.result;
  }
  if (!(lhs.message == rhs.message)) {
    return lhs.message < rhs.message;
  }
  if (!(lhs.appSpecificErrorCode == rhs.appSpecificErrorCode)) {
    return lhs.appSpecificErrorCode < rhs.appSpecificErrorCode;
  }
  return false;
}


void swap(McQuitReply& a, McQuitReply& b) {
  using ::std::swap;
  swap(a.result_ref().value(), b.result_ref().value());
  swap(a.message_ref().value(), b.message_ref().value());
  swap(a.appSpecificErrorCode_ref().value(), b.appSpecificErrorCode_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void McQuitReply::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t McQuitReply::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McQuitReply::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t McQuitReply::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void McQuitReply::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t McQuitReply::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McQuitReply::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t McQuitReply::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // facebook::memcache::thrift
namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::memcache::thrift::McExecRequest>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 1;
  static constexpr folly::StringPiece _names[] = {
    "key",
  };
  static constexpr int16_t _ids[] = {
    1,
  };
  static constexpr TType _types[] = {
    TType::T_STRING,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace memcache { namespace thrift {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
McExecRequest::McExecRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg) :
    key(std::move(key__arg)) {
  __isset.key = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void McExecRequest::__clear() {
  // clear all fields
  key.rawUnsafe() = apache::thrift::StringTraits< folly::remove_cvref_t<decltype(std::declval<carbon::Keys<folly::IOBuf>>().rawUnsafe())>>::fromStringLiteral("");
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool McExecRequest::operator==(const McExecRequest& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!apache::thrift::StringTraits<folly::remove_cvref_t<decltype(std::declval<carbon::Keys<folly::IOBuf>>().rawUnsafe())>>::isEqual(lhs.key.rawUnsafe(), rhs.key.rawUnsafe())) {
    return false;
  }
  return true;
}

bool McExecRequest::operator<(const McExecRequest& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!apache::thrift::StringTraits<folly::remove_cvref_t<decltype(std::declval<carbon::Keys<folly::IOBuf>>().rawUnsafe())>>::isEqual(lhs.key.rawUnsafe(), rhs.key.rawUnsafe())) {
    return apache::thrift::StringTraits<folly::remove_cvref_t<decltype(std::declval<carbon::Keys<folly::IOBuf>>().rawUnsafe())>>::isLess(lhs.key.rawUnsafe(), rhs.key.rawUnsafe());
  }
  return false;
}


void swap(McExecRequest& a, McExecRequest& b) {
  using ::std::swap;
  swap(a.key_ref().value(), b.key_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void McExecRequest::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t McExecRequest::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McExecRequest::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t McExecRequest::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void McExecRequest::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t McExecRequest::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McExecRequest::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t McExecRequest::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // facebook::memcache::thrift
namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::memcache::thrift::McExecReply>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 4;
  static constexpr folly::StringPiece _names[] = {
    "result",
    "response",
    "message",
    "appSpecificErrorCode",
  };
  static constexpr int16_t _ids[] = {
    1,
    2,
    3,
    4,
  };
  static constexpr TType _types[] = {
    TType::T_I32,
    TType::T_STRING,
    TType::T_STRING,
    TType::T_I16,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace memcache { namespace thrift {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
McExecReply::McExecReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, ::std::string response__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg) :
    result(std::move(result__arg)),
    response(std::move(response__arg)),
    message(std::move(message__arg)),
    appSpecificErrorCode(std::move(appSpecificErrorCode__arg)) {
  __isset.result = true;
  __isset.response = true;
  __isset.message = true;
  __isset.appSpecificErrorCode = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void McExecReply::__clear() {
  // clear all fields
  result =  ::carbon::Result::UNKNOWN;
  response = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  message = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  appSpecificErrorCode = 0;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool McExecReply::operator==(const McExecReply& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.result == rhs.result)) {
    return false;
  }
  if (!(lhs.response == rhs.response)) {
    return false;
  }
  if (!(lhs.message == rhs.message)) {
    return false;
  }
  if (!(lhs.appSpecificErrorCode == rhs.appSpecificErrorCode)) {
    return false;
  }
  return true;
}

bool McExecReply::operator<(const McExecReply& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.result == rhs.result)) {
    return lhs.result < rhs.result;
  }
  if (!(lhs.response == rhs.response)) {
    return lhs.response < rhs.response;
  }
  if (!(lhs.message == rhs.message)) {
    return lhs.message < rhs.message;
  }
  if (!(lhs.appSpecificErrorCode == rhs.appSpecificErrorCode)) {
    return lhs.appSpecificErrorCode < rhs.appSpecificErrorCode;
  }
  return false;
}


void swap(McExecReply& a, McExecReply& b) {
  using ::std::swap;
  swap(a.result_ref().value(), b.result_ref().value());
  swap(a.response_ref().value(), b.response_ref().value());
  swap(a.message_ref().value(), b.message_ref().value());
  swap(a.appSpecificErrorCode_ref().value(), b.appSpecificErrorCode_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void McExecReply::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t McExecReply::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McExecReply::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t McExecReply::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void McExecReply::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t McExecReply::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McExecReply::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t McExecReply::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // facebook::memcache::thrift
namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::memcache::thrift::GoAwayAcknowledgement>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace memcache { namespace thrift {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
GoAwayAcknowledgement::GoAwayAcknowledgement(apache::thrift::FragileConstructor) {}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void GoAwayAcknowledgement::__clear() {
  // clear all fields
}

bool GoAwayAcknowledgement::operator==(const GoAwayAcknowledgement& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  return true;
}

bool GoAwayAcknowledgement::operator<(const GoAwayAcknowledgement& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  return false;
}


void swap(GoAwayAcknowledgement& a, GoAwayAcknowledgement& b) {
  using ::std::swap;
  (void)a;
  (void)b;
}

template void GoAwayAcknowledgement::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t GoAwayAcknowledgement::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GoAwayAcknowledgement::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t GoAwayAcknowledgement::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void GoAwayAcknowledgement::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t GoAwayAcknowledgement::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GoAwayAcknowledgement::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t GoAwayAcknowledgement::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // facebook::memcache::thrift
namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::memcache::thrift::GoAwayRequest>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 2;
  static constexpr folly::StringPiece _names[] = {
    "result",
    "reason",
  };
  static constexpr int16_t _ids[] = {
    1,
    2,
  };
  static constexpr TType _types[] = {
    TType::T_I32,
    TType::T_STRING,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace memcache { namespace thrift {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
GoAwayRequest::GoAwayRequest(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, ::std::string reason__arg) :
    result(std::move(result__arg)),
    reason(std::move(reason__arg)) {
  __isset.result = true;
  __isset.reason = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void GoAwayRequest::__clear() {
  // clear all fields
  result =  ::carbon::Result::UNKNOWN;
  reason = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool GoAwayRequest::operator==(const GoAwayRequest& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.result == rhs.result)) {
    return false;
  }
  if (!(lhs.reason == rhs.reason)) {
    return false;
  }
  return true;
}

bool GoAwayRequest::operator<(const GoAwayRequest& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.result == rhs.result)) {
    return lhs.result < rhs.result;
  }
  if (!(lhs.reason == rhs.reason)) {
    return lhs.reason < rhs.reason;
  }
  return false;
}


void swap(GoAwayRequest& a, GoAwayRequest& b) {
  using ::std::swap;
  swap(a.result_ref().value(), b.result_ref().value());
  swap(a.reason_ref().value(), b.reason_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void GoAwayRequest::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t GoAwayRequest::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GoAwayRequest::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t GoAwayRequest::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void GoAwayRequest::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t GoAwayRequest::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GoAwayRequest::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t GoAwayRequest::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // facebook::memcache::thrift
