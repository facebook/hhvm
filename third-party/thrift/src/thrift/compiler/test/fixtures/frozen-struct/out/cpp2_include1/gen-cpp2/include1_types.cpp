/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/frozen-struct/src/include1.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/frozen-struct/gen-cpp2/include1_types.h"
#include "thrift/compiler/test/fixtures/frozen-struct/gen-cpp2/include1_types_custom_protocol.h"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "thrift/compiler/test/fixtures/frozen-struct/gen-cpp2/include1_data.h"
[[maybe_unused]] static constexpr std::string_view kModuleName = "include1";


#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::some::ns::IncludedA>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::some::ns::IncludedA>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace some::ns {

std::string_view IncludedA::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<IncludedA>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view IncludedA::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<IncludedA>::name;
}

IncludedA::IncludedA(const IncludedA&) = default;
IncludedA& IncludedA::operator=(const IncludedA&) = default;
IncludedA::IncludedA() :
    __fbthrift_field_i32Field() {
}


IncludedA::~IncludedA() {}

IncludedA::IncludedA([[maybe_unused]] IncludedA&& other) noexcept :
    __fbthrift_field_i32Field(std::move(other.__fbthrift_field_i32Field)),
    __fbthrift_field_strField(std::move(other.__fbthrift_field_strField)),
    __isset(other.__isset) {
}

IncludedA& IncludedA::operator=([[maybe_unused]] IncludedA&& other) noexcept {
    this->__fbthrift_field_i32Field = std::move(other.__fbthrift_field_i32Field);
    this->__fbthrift_field_strField = std::move(other.__fbthrift_field_strField);
    __isset = other.__isset;
    return *this;
}


IncludedA::IncludedA(apache::thrift::FragileConstructor, ::std::int32_t i32Field__arg, ::std::string strField__arg) :
    __fbthrift_field_i32Field(std::move(i32Field__arg)),
    __fbthrift_field_strField(std::move(strField__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION
#endif

void IncludedA::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_i32Field = ::std::int32_t();
  this->__fbthrift_field_strField = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  __isset = {};
}

void IncludedA::__fbthrift_clear_terse_fields() {
}

bool IncludedA::__fbthrift_is_empty() const {
  return false;
}

bool IncludedA::operator==([[maybe_unused]] const IncludedA& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool IncludedA::operator<([[maybe_unused]] const IncludedA& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int32_t IncludedA::get_i32Field() const {
  return __fbthrift_field_i32Field;
}

::std::int32_t& IncludedA::set_i32Field(::std::int32_t i32Field_) {
  i32Field_ref() = i32Field_;
  return __fbthrift_field_i32Field;
}

void swap([[maybe_unused]] IncludedA& a, [[maybe_unused]] IncludedA& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_i32Field, b.__fbthrift_field_i32Field);
  swap(a.__fbthrift_field_strField, b.__fbthrift_field_strField);
  swap(a.__isset, b.__isset);
}



} // namespace some::ns

namespace some::ns { namespace {
[[maybe_unused]] FOLLY_ERASE void validateAdapters() {
}
}} // namespace some::ns
namespace apache::thrift::detail::annotation {
}
