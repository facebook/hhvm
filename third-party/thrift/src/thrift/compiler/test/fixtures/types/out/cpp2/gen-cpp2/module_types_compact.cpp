/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/types/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/types/gen-cpp2/module_types_custom_protocol.h"

namespace apache::thrift::fixtures::types {

template void empty_struct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t empty_struct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t empty_struct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t empty_struct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void decorated_struct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t decorated_struct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t decorated_struct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t decorated_struct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void ContainerStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ContainerStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ContainerStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ContainerStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void CppTypeStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t CppTypeStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t CppTypeStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t CppTypeStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void VirtualStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t VirtualStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t VirtualStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t VirtualStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void MyStructWithForwardRefEnum::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructWithForwardRefEnum::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructWithForwardRefEnum::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructWithForwardRefEnum::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void TrivialNumeric::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t TrivialNumeric::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t TrivialNumeric::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t TrivialNumeric::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void TrivialNestedWithDefault::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t TrivialNestedWithDefault::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t TrivialNestedWithDefault::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t TrivialNestedWithDefault::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void ComplexString::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ComplexString::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ComplexString::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ComplexString::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void ComplexNestedWithDefault::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ComplexNestedWithDefault::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ComplexNestedWithDefault::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ComplexNestedWithDefault::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void MinPadding::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MinPadding::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MinPadding::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MinPadding::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void MinPaddingWithCustomType::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MinPaddingWithCustomType::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MinPaddingWithCustomType::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MinPaddingWithCustomType::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void MyStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void MyDataItem::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyDataItem::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyDataItem::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyDataItem::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void Renamed::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Renamed::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Renamed::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Renamed::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void AnnotatedTypes::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t AnnotatedTypes::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AnnotatedTypes::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t AnnotatedTypes::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void ForwardUsageRoot::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ForwardUsageRoot::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ForwardUsageRoot::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ForwardUsageRoot::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void ForwardUsageStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ForwardUsageStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ForwardUsageStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ForwardUsageStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void ForwardUsageByRef::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ForwardUsageByRef::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ForwardUsageByRef::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ForwardUsageByRef::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void IncompleteMap::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t IncompleteMap::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t IncompleteMap::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t IncompleteMap::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void IncompleteMapDep::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t IncompleteMapDep::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t IncompleteMapDep::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t IncompleteMapDep::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void CompleteMap::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t CompleteMap::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t CompleteMap::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t CompleteMap::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void CompleteMapDep::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t CompleteMapDep::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t CompleteMapDep::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t CompleteMapDep::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void IncompleteList::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t IncompleteList::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t IncompleteList::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t IncompleteList::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void IncompleteListDep::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t IncompleteListDep::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t IncompleteListDep::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t IncompleteListDep::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void CompleteList::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t CompleteList::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t CompleteList::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t CompleteList::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void CompleteListDep::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t CompleteListDep::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t CompleteListDep::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t CompleteListDep::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void AdaptedList::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t AdaptedList::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AdaptedList::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t AdaptedList::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

namespace detail {
template void AdaptedListDep::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t AdaptedListDep::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AdaptedListDep::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t AdaptedListDep::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
} // namespace detail

template void DependentAdaptedList::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t DependentAdaptedList::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t DependentAdaptedList::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t DependentAdaptedList::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

namespace detail {
template void DependentAdaptedListDep::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t DependentAdaptedListDep::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t DependentAdaptedListDep::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t DependentAdaptedListDep::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
} // namespace detail

template void AllocatorAware::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t AllocatorAware::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AllocatorAware::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t AllocatorAware::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void AllocatorAware2::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t AllocatorAware2::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AllocatorAware2::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t AllocatorAware2::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void TypedefStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t TypedefStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t TypedefStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t TypedefStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void StructWithDoubleUnderscores::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t StructWithDoubleUnderscores::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t StructWithDoubleUnderscores::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t StructWithDoubleUnderscores::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // namespace apache::thrift::fixtures::types
