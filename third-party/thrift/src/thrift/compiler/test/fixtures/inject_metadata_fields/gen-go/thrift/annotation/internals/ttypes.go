// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package internals

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	scope0 "thrift/annotation/scope"
	thrift1 "thrift/annotation/thrift"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var _ = scope0.GoUnusedProtection__
var _ = thrift1.GoUnusedProtection__
var GoUnusedProtection__ int;

// Attributes:
//  - Type
type InjectMetadataFields struct {
  Type string `thrift:"type,1" db:"type" json:"type"`
}

func NewInjectMetadataFields() *InjectMetadataFields {
  return &InjectMetadataFields{}
}


func (p *InjectMetadataFields) GetType() string {
  return p.Type
}
type InjectMetadataFieldsBuilder struct {
  obj *InjectMetadataFields
}

func NewInjectMetadataFieldsBuilder() *InjectMetadataFieldsBuilder{
  return &InjectMetadataFieldsBuilder{
    obj: NewInjectMetadataFields(),
  }
}

func (p InjectMetadataFieldsBuilder) Emit() *InjectMetadataFields{
  return &InjectMetadataFields{
    Type: p.obj.Type,
  }
}

func (i *InjectMetadataFieldsBuilder) Type(type_a1 string) *InjectMetadataFieldsBuilder {
  i.obj.Type = type_a1
  return i
}

func (i *InjectMetadataFields) SetType(type_a1 string) *InjectMetadataFields {
  i.Type = type_a1
  return i
}

func (p *InjectMetadataFields) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InjectMetadataFields)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Type = v
  }
  return nil
}

func (p *InjectMetadataFields) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("InjectMetadataFields"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InjectMetadataFields) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteString(string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *InjectMetadataFields) String() string {
  if p == nil {
    return "<nil>"
  }

  typeVal := fmt.Sprintf("%v", p.Type)
  return fmt.Sprintf("InjectMetadataFields({Type:%s})", typeVal)
}

