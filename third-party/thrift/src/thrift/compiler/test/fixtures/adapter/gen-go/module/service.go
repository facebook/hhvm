// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package module

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	cpp0 "thrift/annotation/cpp"
	python1 "thrift/annotation/python"
	thrift2 "thrift/annotation/thrift"
	scope3 "thrift/annotation/scope"
	hack4 "thrift/annotation/hack"
	rust5 "thrift/annotation/rust"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var _ = cpp0.GoUnusedProtection__
var _ = python1.GoUnusedProtection__
var _ = thrift2.GoUnusedProtection__
var _ = scope3.GoUnusedProtection__
var _ = hack4.GoUnusedProtection__
var _ = rust5.GoUnusedProtection__
type Service interface {
  // Parameters:
  //  - Arg1
  //  - Arg2
  //  - Arg3
  Func(arg1 StringWithAdapter, arg2 string, arg3 *Foo) (_r MyI32, err error)
}

type ServiceClientInterface interface {
  thrift.ClientInterface
  // Parameters:
  //  - Arg1
  //  - Arg2
  //  - Arg3
  Func(arg1 StringWithAdapter, arg2 string, arg3 *Foo) (_r MyI32, err error)
}

type ServiceClient struct {
  ServiceClientInterface
  CC thrift.ClientConn
}

func(client *ServiceClient) Open() error {
  return client.CC.Open()
}

func(client *ServiceClient) Close() error {
  return client.CC.Close()
}

func(client *ServiceClient) IsOpen() bool {
  return client.CC.IsOpen()
}

func NewServiceClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *ServiceClient {
  return &ServiceClient{ CC: thrift.NewClientConn(t, f) }
}

func NewServiceClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *ServiceClient {
  return &ServiceClient{ CC: thrift.NewClientConnWithProtocols(t, iprot, oprot) }
}

func NewServiceClientProtocol(prot thrift.Protocol) *ServiceClient {
  return NewServiceClient(prot.Transport(), prot, prot)
}

// Parameters:
//  - Arg1
//  - Arg2
//  - Arg3
func (p *ServiceClient) Func(arg1 StringWithAdapter, arg2 string, arg3 *Foo) (_r MyI32, err error) {
  args := ServiceFuncArgs{
    Arg1 : arg1,
    Arg2 : arg2,
    Arg3 : arg3,
  }
  err = p.CC.SendMsg("func", &args, thrift.CALL)
  if err != nil { return }
  return p.recvFunc()
}


func (p *ServiceClient) recvFunc() (value MyI32, err error) {
  var __result ServiceFuncResult
  err = p.CC.RecvMsg("func", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}


type ServiceThreadsafeClient struct {
  ServiceClientInterface
  CC thrift.ClientConn
  Mu sync.Mutex
}

func(client *ServiceThreadsafeClient) Open() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Open()
}

func(client *ServiceThreadsafeClient) Close() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Close()
}

func(client *ServiceThreadsafeClient) IsOpen() bool {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.IsOpen()
}

func NewServiceThreadsafeClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *ServiceThreadsafeClient {
  return &ServiceThreadsafeClient{ CC: thrift.NewClientConn(t, f) }
}

func NewServiceThreadsafeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *ServiceThreadsafeClient {
  return &ServiceThreadsafeClient{ CC: thrift.NewClientConnWithProtocols(t, iprot, oprot) }
}

func NewServiceThreadsafeClientProtocol(prot thrift.Protocol) *ServiceThreadsafeClient {
  return NewServiceThreadsafeClient(prot.Transport(), prot, prot)
}

// Parameters:
//  - Arg1
//  - Arg2
//  - Arg3
func (p *ServiceThreadsafeClient) Func(arg1 StringWithAdapter, arg2 string, arg3 *Foo) (_r MyI32, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := ServiceFuncArgs{
    Arg1 : arg1,
    Arg2 : arg2,
    Arg3 : arg3,
  }
  err = p.CC.SendMsg("func", &args, thrift.CALL)
  if err != nil { return }
  return p.recvFunc()
}


func (p *ServiceThreadsafeClient) recvFunc() (value MyI32, err error) {
  var __result ServiceFuncResult
  err = p.CC.RecvMsg("func", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}


type ServiceChannelClient struct {
  RequestChannel thrift.RequestChannel
}

func (c *ServiceChannelClient) Close() error {
  return c.RequestChannel.Close()
}

func (c *ServiceChannelClient) IsOpen() bool {
  return c.RequestChannel.IsOpen()
}

func (c *ServiceChannelClient) Open() error {
  return c.RequestChannel.Open()
}

func NewServiceChannelClient(channel thrift.RequestChannel) *ServiceChannelClient {
  return &ServiceChannelClient{RequestChannel: channel}
}

// Parameters:
//  - Arg1
//  - Arg2
//  - Arg3
func (p *ServiceChannelClient) Func(ctx context.Context, arg1 StringWithAdapter, arg2 string, arg3 *Foo) (_r MyI32, err error) {
  args := ServiceFuncArgs{
    Arg1 : arg1,
    Arg2 : arg2,
    Arg3 : arg3,
  }
  var __result ServiceFuncResult
  err = p.RequestChannel.Call(ctx, "func", &args, &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}


type ServiceProcessor struct {
  processorMap map[string]thrift.ProcessorFunction
  functionServiceMap map[string]string
  handler Service
}

func (p *ServiceProcessor) AddToProcessorMap(key string, processor thrift.ProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ServiceProcessor) AddToFunctionServiceMap(key, service string) {
  p.functionServiceMap[key] = service
}

func (p *ServiceProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction, err error) {
  if processor, ok := p.processorMap[key]; ok {
    return processor, nil
  }
  return nil, nil // generic error message will be sent
}

func (p *ServiceProcessor) ProcessorMap() map[string]thrift.ProcessorFunction {
  return p.processorMap
}

func (p *ServiceProcessor) FunctionServiceMap() map[string]string {
  return p.functionServiceMap
}

func NewServiceProcessor(handler Service) *ServiceProcessor {
  self30 := &ServiceProcessor{handler:handler, processorMap:make(map[string]thrift.ProcessorFunction), functionServiceMap:make(map[string]string)}
  self30.processorMap["func"] = &serviceProcessorFunc{handler:handler}
  self30.functionServiceMap["func"] = "Service"
  return self30
}

type serviceProcessorFunc struct {
  handler Service
}

func (p *ServiceFuncResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *serviceProcessorFunc) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := ServiceFuncArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *serviceProcessorFunc) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("func", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *serviceProcessorFunc) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*ServiceFuncArgs)
  var __result ServiceFuncResult
  if retval, err := p.handler.Func(args.Arg1, args.Arg2, args.Arg3); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing func: " + err.Error(), err)
      return x, x
    }
  } else {
    __result.Success = &retval
  }
  return &__result, nil
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Arg1
//  - Arg2
//  - Arg3
type ServiceFuncArgs struct {
  thrift.IRequest
  Arg1 StringWithAdapter `thrift:"arg1,1" db:"arg1" json:"arg1"`
  Arg2 string `thrift:"arg2,2" db:"arg2" json:"arg2"`
  Arg3 *Foo `thrift:"arg3,3" db:"arg3" json:"arg3"`
}

func NewServiceFuncArgs() *ServiceFuncArgs {
  return &ServiceFuncArgs{
    Arg3: NewFoo(),
  }
}


func (p *ServiceFuncArgs) GetArg1() StringWithAdapter {
  return p.Arg1
}

func (p *ServiceFuncArgs) GetArg2() string {
  return p.Arg2
}
var ServiceFuncArgs_Arg3_DEFAULT *Foo
func (p *ServiceFuncArgs) GetArg3() *Foo {
  if !p.IsSetArg3() {
    return ServiceFuncArgs_Arg3_DEFAULT
  }
  return p.Arg3
}
func (p *ServiceFuncArgs) DefaultGetArg3() *Foo {
  if !p.IsSetArg3() {
    return NewFoo()
  }
  return p.Arg3
}
func (p *ServiceFuncArgs) IsSetArg3() bool {
  return p != nil && p.Arg3 != nil
}

type ServiceFuncArgsBuilder struct {
  obj *ServiceFuncArgs
}

func NewServiceFuncArgsBuilder() *ServiceFuncArgsBuilder{
  return &ServiceFuncArgsBuilder{
    obj: NewServiceFuncArgs(),
  }
}

func (p ServiceFuncArgsBuilder) Emit() *ServiceFuncArgs{
  return &ServiceFuncArgs{
    Arg1: p.obj.Arg1,
    Arg2: p.obj.Arg2,
    Arg3: p.obj.Arg3,
  }
}

func (s *ServiceFuncArgsBuilder) Arg1(arg1 StringWithAdapter) *ServiceFuncArgsBuilder {
  s.obj.Arg1 = arg1
  return s
}

func (s *ServiceFuncArgsBuilder) Arg2(arg2 string) *ServiceFuncArgsBuilder {
  s.obj.Arg2 = arg2
  return s
}

func (s *ServiceFuncArgsBuilder) Arg3(arg3 *Foo) *ServiceFuncArgsBuilder {
  s.obj.Arg3 = arg3
  return s
}

func (s *ServiceFuncArgs) SetArg1(arg1 StringWithAdapter) *ServiceFuncArgs {
  s.Arg1 = arg1
  return s
}

func (s *ServiceFuncArgs) SetArg2(arg2 string) *ServiceFuncArgs {
  s.Arg2 = arg2
  return s
}

func (s *ServiceFuncArgs) SetArg3(arg3 *Foo) *ServiceFuncArgs {
  s.Arg3 = arg3
  return s
}

func (p *ServiceFuncArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServiceFuncArgs)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := StringWithAdapter(v)
    p.Arg1 = temp
  }
  return nil
}

func (p *ServiceFuncArgs)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Arg2 = v
  }
  return nil
}

func (p *ServiceFuncArgs)  ReadField3(iprot thrift.Protocol) error {
  p.Arg3 = NewFoo()
  if err := p.Arg3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Arg3), err)
  }
  return nil
}

func (p *ServiceFuncArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("func_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServiceFuncArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("arg1", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:arg1: ", p), err) }
  if err := oprot.WriteString(string(p.Arg1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.arg1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:arg1: ", p), err) }
  return err
}

func (p *ServiceFuncArgs) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("arg2", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:arg2: ", p), err) }
  if err := oprot.WriteString(string(p.Arg2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.arg2 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:arg2: ", p), err) }
  return err
}

func (p *ServiceFuncArgs) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("arg3", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:arg3: ", p), err) }
  if err := p.Arg3.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Arg3), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:arg3: ", p), err) }
  return err
}

func (p *ServiceFuncArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  arg1Val := fmt.Sprintf("%v", p.Arg1)
  arg2Val := fmt.Sprintf("%v", p.Arg2)
  var arg3Val string
  if p.Arg3 == nil {
    arg3Val = "<nil>"
  } else {
    arg3Val = fmt.Sprintf("%v", p.Arg3)
  }
  return fmt.Sprintf("ServiceFuncArgs({Arg1:%s Arg2:%s Arg3:%s})", arg1Val, arg2Val, arg3Val)
}

// Attributes:
//  - Success
type ServiceFuncResult struct {
  thrift.IResponse
  Success *MyI32 `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewServiceFuncResult() *ServiceFuncResult {
  return &ServiceFuncResult{}
}

var ServiceFuncResult_Success_DEFAULT MyI32
func (p *ServiceFuncResult) GetSuccess() MyI32 {
  if !p.IsSetSuccess() {
    return ServiceFuncResult_Success_DEFAULT
  }
  return *p.Success
}
func (p *ServiceFuncResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type ServiceFuncResultBuilder struct {
  obj *ServiceFuncResult
}

func NewServiceFuncResultBuilder() *ServiceFuncResultBuilder{
  return &ServiceFuncResultBuilder{
    obj: NewServiceFuncResult(),
  }
}

func (p ServiceFuncResultBuilder) Emit() *ServiceFuncResult{
  return &ServiceFuncResult{
    Success: p.obj.Success,
  }
}

func (s *ServiceFuncResultBuilder) Success(success *MyI32) *ServiceFuncResultBuilder {
  s.obj.Success = success
  return s
}

func (s *ServiceFuncResult) SetSuccess(success *MyI32) *ServiceFuncResult {
  s.Success = success
  return s
}

func (p *ServiceFuncResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServiceFuncResult)  ReadField0(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
  } else {
    temp := MyI32(v)
    p.Success = &temp
  }
  return nil
}

func (p *ServiceFuncResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("func_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServiceFuncResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ServiceFuncResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", *p.Success)
  }
  return fmt.Sprintf("ServiceFuncResult({Success:%s})", successVal)
}


