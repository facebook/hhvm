[(Fun
    { fd_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
        ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
        ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
      fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([3:10-26], "\\array_append_set");
      fd_fun =
      { f_span = [3:1-7:2]; f_readonly_this = None; f_annotation = (); 
        f_readonly_ret = None; f_ret = ((void), (Some ([3:37-41], (Hprim Tvoid))));
        f_params =
        [{ param_annotation = (bool); param_type_hint = ((bool), (Some ([3:27-31], (Hprim Tbool)))); 
           param_is_variadic = false; param_pos = [3:32-34]; param_name = "$x"; 
           param_expr = None; param_readonly = None; param_callconv = Pnormal; 
           param_user_attributes = []; param_visibility = None }
          ];
        f_ctxs = None; f_unsafe_ctxs = None;
        f_body =
        { fb_ast =
          [([4:3-16],
            (Expr
               ((Set<nothing>), [4:3-15],
                (Binop { bop = (Eq None); lhs = ((Set<nothing>), [4:3-6], (Lvar ([4:3-6], $xs))); rhs = ((Set<nothing>), [4:9-15], (ValCollection (([4:9-12], Set), None, []))) }))));
            ([6:3-14],
             (Expr
                ((bool), [6:3-13],
                 (Binop
                    { bop = (Eq None); lhs = ((bool), [6:3-8], (Array_get (((Set<nothing>), [6:3-6], (Lvar ([6:3-6], $xs))), None)));
                      rhs = ((bool), [6:11-13], (Hole (((bool), [6:11-13], (Lvar ([6:11-13], $x))), (bool), (arraykey), Typing))) }))))
            ]
          };
        f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
        f_doc_comment = None };
      fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = [] })