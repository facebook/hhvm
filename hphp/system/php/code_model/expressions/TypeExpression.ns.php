<?php
// Copyright 2004-present Facebook. All Rights Reserved.
// This file is @generated by
// fbcode/hphp/facebook/tools/code_model/Generate.sh

namespace HH\CodeModel {

/**
 * A type expression results in a value of type Type.
 * But it's compile time type (getType()) is the runtime
 * type value (or null) rather than type Type.
 */
class TypeExpression /*implements ITypeExpression*/ {
  use Expression;
  use TypedNode;
  use Node;

  private /*?bool*/ $isNullable;
  private /*?bool*/ $isSoft;
  private /*?string*/ $name;
  private /*?Vector<ITypeExpression>*/ $typeArguments;
  private /*?ITypeExpression*/ $returnType;

  /**
   * A type expression results in a value of type Type.
   * But it's compile time type (getType()) is the runtime
   * type value (or null) rather than type Type.
   */
  public function getIsNullable() /*: bool*/ {
    if ($this->isNullable === null) {
      return false;
    }
    return $this->isNullable;
  }
  /**
   * A type expression results in a value of type Type.
   * But it's compile time type (getType()) is the runtime
   * type value (or null) rather than type Type.
   */
  public function setIsNullable(/*bool*/ $value) /*: this*/ {
    $this->isNullable = $value;
    return $this;
  }

  /**
   * A type expression results in a value of type Type.
   * But it's compile time type (getType()) is the runtime
   * type value (or null) rather than type Type.
   */
  public function getIsSoft() /*: bool*/ {
    if ($this->isSoft === null) {
      return false;
    }
    return $this->isSoft;
  }
  /**
   * A type expression results in a value of type Type.
   * But it's compile time type (getType()) is the runtime
   * type value (or null) rather than type Type.
   */
  public function setIsSoft(/*bool*/ $value) /*: this*/ {
    $this->isSoft = $value;
    return $this;
  }

  /**
   * A type expression results in a value of type Type.
   * But it's compile time type (getType()) is the runtime
   * type value (or null) rather than type Type.
   */
  public function getName() /*: string*/ {
    if ($this->name === null) {
      throw new \Exception("Name is not initialized");
    }
    return $this->name;
  }
  /**
   * A type expression results in a value of type Type.
   * But it's compile time type (getType()) is the runtime
   * type value (or null) rather than type Type.
   */
  public function setName(/*string*/ $value) /*: this*/ {
    $this->name = $value;
    return $this;
  }

  /**
   * A type expression results in a value of type Type.
   * But it's compile time type (getType()) is the runtime
   * type value (or null) rather than type Type.
   */
  public function getTypeArguments() /*: Vector<ITypeExpression>*/ {
    if ($this->typeArguments === null) {
      $this->typeArguments = Vector {};
    }
    return $this->typeArguments;
  }
  /**
   * A type expression results in a value of type Type.
   * But it's compile time type (getType()) is the runtime
   * type value (or null) rather than type Type.
   */
  public function setTypeArguments(/*Vector<ITypeExpression>*/ $value) /*: this*/ {
    $this->typeArguments = $value;
    return $this;
  }

  /**
   * A type expression results in a value of type Type.
   * But it's compile time type (getType()) is the runtime
   * type value (or null) rather than type Type.
   */
  public function getReturnType() /*: ?ITypeExpression*/ {
    return $this->returnType;
  }
  /**
   * A type expression results in a value of type Type.
   * But it's compile time type (getType()) is the runtime
   * type value (or null) rather than type Type.
   */
  public function setReturnType(/*?ITypeExpression*/ $value) /*: this*/ {
    $this->returnType = $value;
    return $this;
  }

  /**
   * Returns $visitor->visitTypeExpression($this) if
   * such a method exists on $visitor.
   * Otherwise returns $visitor->visitExpression($this) if
   * such a method exists on $visitor.
   * Otherwise returns $visitor->visitNode($this) if
   */
  public function accept(/*mixed*/ $visitor) /*: mixed*/ {
    if (method_exists($visitor, "visitTypeExpression")) {
      // UNSAFE
      return $visitor->visitTypeExpression($this);
    } else if (method_exists($visitor, "visitExpression")) {
      // UNSAFE
      return $visitor->visitExpression($this);
    } else {
      return $visitor->visitNode($this);
    }
  }

  /**
   * Yields a list of nodes that are children of this node.
   * A node has exactly one parent, so doing a depth
   * first traversal of a node graph using getChildren will
   * traverse a spanning tree.
   */
  public function getChildren() /*: Continuation<INode>*/ {
    if ($this->typeArguments !== null) {
      foreach ($this->typeArguments as $elem) {
        yield $elem;
      }
    }
    if ($this->returnType !== null) {
      yield $this->returnType;
    }
  }
}
}
