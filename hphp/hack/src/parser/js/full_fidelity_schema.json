{ "description" :
  "Auto-generated JSON schema of the Hack Full Fidelity Parser AST",
  "version" : "2017-04-26-0001",
  "trivia" : [
    { "trivia_kind_name" : "WhiteSpace",
      "trivia_type_name" : "whitespace" },
    { "trivia_kind_name" : "EndOfLine",
      "trivia_type_name" : "end_of_line" },
    { "trivia_kind_name" : "DelimitedComment",
      "trivia_type_name" : "delimited_comment" },
    { "trivia_kind_name" : "SingleLineComment",
      "trivia_type_name" : "single_line_comment" },
    { "trivia_kind_name" : "Unsafe",
      "trivia_type_name" : "unsafe" },
    { "trivia_kind_name" : "UnsafeExpression",
      "trivia_type_name" : "unsafe_expression" },
    { "trivia_kind_name" : "FixMe",
      "trivia_type_name" : "fix_me" },
    { "trivia_kind_name" : "IgnoreError",
      "trivia_type_name" : "ignore_error" },
    { "trivia_kind_name" : "FallThrough",
      "trivia_type_name" : "fall_through" },
    { "trivia_kind_name" : "Markup",
      "trivia_type_name" : "markup" } ],
  "tokens" : [
    { "token_kind" : "Abstract",
      "token_text" : "abstract" },
    { "token_kind" : "And",
      "token_text" : "and" },
    { "token_kind" : "Array",
      "token_text" : "array" },
    { "token_kind" : "Arraykey",
      "token_text" : "arraykey" },
    { "token_kind" : "As",
      "token_text" : "as" },
    { "token_kind" : "Async",
      "token_text" : "async" },
    { "token_kind" : "Attribute",
      "token_text" : "attribute" },
    { "token_kind" : "Await",
      "token_text" : "await" },
    { "token_kind" : "Bool",
      "token_text" : "bool" },
    { "token_kind" : "Break",
      "token_text" : "break" },
    { "token_kind" : "Case",
      "token_text" : "case" },
    { "token_kind" : "Catch",
      "token_text" : "catch" },
    { "token_kind" : "Category",
      "token_text" : "category" },
    { "token_kind" : "Children",
      "token_text" : "children" },
    { "token_kind" : "Class",
      "token_text" : "class" },
    { "token_kind" : "Classname",
      "token_text" : "classname" },
    { "token_kind" : "Clone",
      "token_text" : "clone" },
    { "token_kind" : "Const",
      "token_text" : "const" },
    { "token_kind" : "Construct",
      "token_text" : "__construct" },
    { "token_kind" : "Continue",
      "token_text" : "continue" },
    { "token_kind" : "Coroutine",
      "token_text" : "coroutine" },
    { "token_kind" : "Darray",
      "token_text" : "darray" },
    { "token_kind" : "Default",
      "token_text" : "default" },
    { "token_kind" : "Define",
      "token_text" : "define" },
    { "token_kind" : "Destruct",
      "token_text" : "__destruct" },
    { "token_kind" : "Dict",
      "token_text" : "dict" },
    { "token_kind" : "Do",
      "token_text" : "do" },
    { "token_kind" : "Double",
      "token_text" : "double" },
    { "token_kind" : "Echo",
      "token_text" : "echo" },
    { "token_kind" : "Else",
      "token_text" : "else" },
    { "token_kind" : "Elseif",
      "token_text" : "elseif" },
    { "token_kind" : "Empty",
      "token_text" : "empty" },
    { "token_kind" : "Enum",
      "token_text" : "enum" },
    { "token_kind" : "Eval",
      "token_text" : "eval" },
    { "token_kind" : "Extends",
      "token_text" : "extends" },
    { "token_kind" : "Fallthrough",
      "token_text" : "fallthrough" },
    { "token_kind" : "Float",
      "token_text" : "float" },
    { "token_kind" : "Final",
      "token_text" : "final" },
    { "token_kind" : "Finally",
      "token_text" : "finally" },
    { "token_kind" : "For",
      "token_text" : "for" },
    { "token_kind" : "Foreach",
      "token_text" : "foreach" },
    { "token_kind" : "Function",
      "token_text" : "function" },
    { "token_kind" : "Global",
      "token_text" : "global" },
    { "token_kind" : "Goto",
      "token_text" : "goto" },
    { "token_kind" : "If",
      "token_text" : "if" },
    { "token_kind" : "Implements",
      "token_text" : "implements" },
    { "token_kind" : "Include",
      "token_text" : "include" },
    { "token_kind" : "Include_once",
      "token_text" : "include_once" },
    { "token_kind" : "Instanceof",
      "token_text" : "instanceof" },
    { "token_kind" : "Insteadof",
      "token_text" : "insteadof" },
    { "token_kind" : "Int",
      "token_text" : "int" },
    { "token_kind" : "Interface",
      "token_text" : "interface" },
    { "token_kind" : "Isset",
      "token_text" : "isset" },
    { "token_kind" : "Keyset",
      "token_text" : "keyset" },
    { "token_kind" : "List",
      "token_text" : "list" },
    { "token_kind" : "Mixed",
      "token_text" : "mixed" },
    { "token_kind" : "Namespace",
      "token_text" : "namespace" },
    { "token_kind" : "New",
      "token_text" : "new" },
    { "token_kind" : "Newtype",
      "token_text" : "newtype" },
    { "token_kind" : "Noreturn",
      "token_text" : "noreturn" },
    { "token_kind" : "Num",
      "token_text" : "num" },
    { "token_kind" : "Object",
      "token_text" : "object" },
    { "token_kind" : "Or",
      "token_text" : "or" },
    { "token_kind" : "Parent",
      "token_text" : "parent" },
    { "token_kind" : "Print",
      "token_text" : "print" },
    { "token_kind" : "Private",
      "token_text" : "private" },
    { "token_kind" : "Protected",
      "token_text" : "protected" },
    { "token_kind" : "Public",
      "token_text" : "public" },
    { "token_kind" : "Require",
      "token_text" : "require" },
    { "token_kind" : "Require_once",
      "token_text" : "require_once" },
    { "token_kind" : "Required",
      "token_text" : "required" },
    { "token_kind" : "Resource",
      "token_text" : "resource" },
    { "token_kind" : "Return",
      "token_text" : "return" },
    { "token_kind" : "Self",
      "token_text" : "self" },
    { "token_kind" : "Shape",
      "token_text" : "shape" },
    { "token_kind" : "Static",
      "token_text" : "static" },
    { "token_kind" : "String",
      "token_text" : "string" },
    { "token_kind" : "Super",
      "token_text" : "super" },
    { "token_kind" : "Suspend",
      "token_text" : "suspend" },
    { "token_kind" : "Switch",
      "token_text" : "switch" },
    { "token_kind" : "This",
      "token_text" : "this" },
    { "token_kind" : "Throw",
      "token_text" : "throw" },
    { "token_kind" : "Trait",
      "token_text" : "trait" },
    { "token_kind" : "Try",
      "token_text" : "try" },
    { "token_kind" : "Tuple",
      "token_text" : "tuple" },
    { "token_kind" : "Type",
      "token_text" : "type" },
    { "token_kind" : "Unset",
      "token_text" : "unset" },
    { "token_kind" : "Use",
      "token_text" : "use" },
    { "token_kind" : "Var",
      "token_text" : "var" },
    { "token_kind" : "Varray",
      "token_text" : "varray" },
    { "token_kind" : "Vec",
      "token_text" : "vec" },
    { "token_kind" : "Void",
      "token_text" : "void" },
    { "token_kind" : "Where",
      "token_text" : "where" },
    { "token_kind" : "While",
      "token_text" : "while" },
    { "token_kind" : "Xor",
      "token_text" : "xor" },
    { "token_kind" : "Yield",
      "token_text" : "yield" },
    { "token_kind" : "LeftBracket",
      "token_text" : "[" },
    { "token_kind" : "RightBracket",
      "token_text" : "]" },
    { "token_kind" : "LeftParen",
      "token_text" : "(" },
    { "token_kind" : "RightParen",
      "token_text" : ")" },
    { "token_kind" : "LeftBrace",
      "token_text" : "{" },
    { "token_kind" : "RightBrace",
      "token_text" : "}" },
    { "token_kind" : "Dot",
      "token_text" : "." },
    { "token_kind" : "MinusGreaterThan",
      "token_text" : "->" },
    { "token_kind" : "PlusPlus",
      "token_text" : "++" },
    { "token_kind" : "MinusMinus",
      "token_text" : "--" },
    { "token_kind" : "StarStar",
      "token_text" : "**" },
    { "token_kind" : "Star",
      "token_text" : "*" },
    { "token_kind" : "Plus",
      "token_text" : "+" },
    { "token_kind" : "Minus",
      "token_text" : "-" },
    { "token_kind" : "Tilde",
      "token_text" : "~" },
    { "token_kind" : "Exclamation",
      "token_text" : "!" },
    { "token_kind" : "Dollar",
      "token_text" : "$" },
    { "token_kind" : "Slash",
      "token_text" : "/" },
    { "token_kind" : "Percent",
      "token_text" : "%" },
    { "token_kind" : "LessThanGreaterThan",
      "token_text" : "<>" },
    { "token_kind" : "LessThanEqualGreaterThan",
      "token_text" : "<=>" },
    { "token_kind" : "LessThanLessThan",
      "token_text" : "<<" },
    { "token_kind" : "GreaterThanGreaterThan",
      "token_text" : ">>" },
    { "token_kind" : "LessThan",
      "token_text" : "<" },
    { "token_kind" : "GreaterThan",
      "token_text" : ">" },
    { "token_kind" : "LessThanEqual",
      "token_text" : "<=" },
    { "token_kind" : "GreaterThanEqual",
      "token_text" : ">=" },
    { "token_kind" : "EqualEqual",
      "token_text" : "==" },
    { "token_kind" : "EqualEqualEqual",
      "token_text" : "===" },
    { "token_kind" : "ExclamationEqual",
      "token_text" : "!=" },
    { "token_kind" : "ExclamationEqualEqual",
      "token_text" : "!==" },
    { "token_kind" : "Carat",
      "token_text" : "^" },
    { "token_kind" : "Bar",
      "token_text" : "|" },
    { "token_kind" : "Ampersand",
      "token_text" : "&" },
    { "token_kind" : "AmpersandAmpersand",
      "token_text" : "&&" },
    { "token_kind" : "BarBar",
      "token_text" : "||" },
    { "token_kind" : "Question",
      "token_text" : "?" },
    { "token_kind" : "QuestionQuestion",
      "token_text" : "??" },
    { "token_kind" : "Colon",
      "token_text" : ":" },
    { "token_kind" : "Semicolon",
      "token_text" : ";" },
    { "token_kind" : "Equal",
      "token_text" : "=" },
    { "token_kind" : "StarStarEqual",
      "token_text" : "**=" },
    { "token_kind" : "StarEqual",
      "token_text" : "*=" },
    { "token_kind" : "SlashEqual",
      "token_text" : "/=" },
    { "token_kind" : "PercentEqual",
      "token_text" : "%=" },
    { "token_kind" : "PlusEqual",
      "token_text" : "+=" },
    { "token_kind" : "MinusEqual",
      "token_text" : "-=" },
    { "token_kind" : "DotEqual",
      "token_text" : ".=" },
    { "token_kind" : "LessThanLessThanEqual",
      "token_text" : "<<=" },
    { "token_kind" : "GreaterThanGreaterThanEqual",
      "token_text" : ">>=" },
    { "token_kind" : "AmpersandEqual",
      "token_text" : "&=" },
    { "token_kind" : "CaratEqual",
      "token_text" : "^=" },
    { "token_kind" : "BarEqual",
      "token_text" : "|=" },
    { "token_kind" : "Comma",
      "token_text" : "," },
    { "token_kind" : "At",
      "token_text" : "@" },
    { "token_kind" : "ColonColon",
      "token_text" : "::" },
    { "token_kind" : "EqualGreaterThan",
      "token_text" : "=>" },
    { "token_kind" : "EqualEqualGreaterThan",
      "token_text" : "==>" },
    { "token_kind" : "QuestionMinusGreaterThan",
      "token_text" : "?->" },
    { "token_kind" : "DotDotDot",
      "token_text" : "..." },
    { "token_kind" : "DollarDollar",
      "token_text" : "$$" },
    { "token_kind" : "BarGreaterThan",
      "token_text" : "|>" },
    { "token_kind" : "NullLiteral",
      "token_text" : "null" },
    { "token_kind" : "SlashGreaterThan",
      "token_text" : "/>" },
    { "token_kind" : "LessThanSlash",
      "token_text" : "</" },

    { "token_kind" : "ErrorToken",
      "token_text" : null },
    { "token_kind" : "Name",
      "token_text" : null },
    { "token_kind" : "QualifiedName",
      "token_text" : null },
    { "token_kind" : "Variable",
      "token_text" : null },
    { "token_kind" : "NamespacePrefix",
      "token_text" : null },
    { "token_kind" : "DecimalLiteral",
      "token_text" : null },
    { "token_kind" : "OctalLiteral",
      "token_text" : null },
    { "token_kind" : "HexadecimalLiteral",
      "token_text" : null },
    { "token_kind" : "BinaryLiteral",
      "token_text" : null },
    { "token_kind" : "FloatingLiteral",
      "token_text" : null },
    { "token_kind" : "ExecutionString",
      "token_text" : null },
    { "token_kind" : "SingleQuotedStringLiteral",
      "token_text" : null },
    { "token_kind" : "DoubleQuotedStringLiteral",
      "token_text" : null },
    { "token_kind" : "DoubleQuotedStringLiteralHead",
      "token_text" : null },
    { "token_kind" : "StringLiteralBody",
      "token_text" : null },
    { "token_kind" : "DoubleQuotedStringLiteralTail",
      "token_text" : null },
    { "token_kind" : "HeredocStringLiteral",
      "token_text" : null },
    { "token_kind" : "HeredocStringLiteralHead",
      "token_text" : null },
    { "token_kind" : "HeredocStringLiteralTail",
      "token_text" : null },
    { "token_kind" : "NowdocStringLiteral",
      "token_text" : null },
    { "token_kind" : "BooleanLiteral",
      "token_text" : null },
    { "token_kind" : "XHPCategoryName",
      "token_text" : null },
    { "token_kind" : "XHPElementName",
      "token_text" : null },
    { "token_kind" : "XHPClassName",
      "token_text" : null },
    { "token_kind" : "XHPStringLiteral",
      "token_text" : null },
    { "token_kind" : "XHPBody",
      "token_text" : null },
    { "token_kind" : "XHPComment",
      "token_text" : null },

    { "token_kind" : "EndOfFile",
      "token_text" : null } ],
  "AST" : [
    { "kind_name" : "EndOfFile",
      "type_name" : "end_of_file",
      "description" : "end_of_file",
      "prefix" : "end_of_file",
      "fields" : [
        { "field_name" : "token" }
      ] },
    { "kind_name" : "ScriptHeader",
      "type_name" : "script_header",
      "description" : "header",
      "prefix" : "header",
      "fields" : [
        { "field_name" : "less_than" },
        { "field_name" : "question" },
        { "field_name" : "language" }
      ] },
    { "kind_name" : "Script",
      "type_name" : "script",
      "description" : "script",
      "prefix" : "script",
      "fields" : [
        { "field_name" : "header" },
        { "field_name" : "declarations" }
      ] },
    { "kind_name" : "SimpleTypeSpecifier",
      "type_name" : "simple_type_specifier",
      "description" : "simple_type_specifier",
      "prefix" : "simple_type",
      "fields" : [
        { "field_name" : "specifier" }
      ] },
    { "kind_name" : "LiteralExpression",
      "type_name" : "literal_expression",
      "description" : "literal",
      "prefix" : "literal",
      "fields" : [
        { "field_name" : "expression" }
      ] },
    { "kind_name" : "VariableExpression",
      "type_name" : "variable_expression",
      "description" : "variable",
      "prefix" : "variable",
      "fields" : [
        { "field_name" : "expression" }
      ] },
    { "kind_name" : "QualifiedNameExpression",
      "type_name" : "qualified_name_expression",
      "description" : "qualified_name",
      "prefix" : "qualified_name",
      "fields" : [
        { "field_name" : "expression" }
      ] },
    { "kind_name" : "PipeVariableExpression",
      "type_name" : "pipe_variable_expression",
      "description" : "pipe_variable",
      "prefix" : "pipe_variable",
      "fields" : [
        { "field_name" : "expression" }
      ] },
    { "kind_name" : "EnumDeclaration",
      "type_name" : "enum_declaration",
      "description" : "enum_declaration",
      "prefix" : "enum",
      "fields" : [
        { "field_name" : "attribute_spec" },
        { "field_name" : "keyword" },
        { "field_name" : "name" },
        { "field_name" : "colon" },
        { "field_name" : "base" },
        { "field_name" : "type" },
        { "field_name" : "left_brace" },
        { "field_name" : "enumerators" },
        { "field_name" : "right_brace" }
      ] },
    { "kind_name" : "Enumerator",
      "type_name" : "enumerator",
      "description" : "enumerator",
      "prefix" : "enumerator",
      "fields" : [
        { "field_name" : "name" },
        { "field_name" : "equal" },
        { "field_name" : "value" },
        { "field_name" : "semicolon" }
      ] },
    { "kind_name" : "AliasDeclaration",
      "type_name" : "alias_declaration",
      "description" : "alias_declaration",
      "prefix" : "alias",
      "fields" : [
        { "field_name" : "attribute_spec" },
        { "field_name" : "keyword" },
        { "field_name" : "name" },
        { "field_name" : "generic_parameter" },
        { "field_name" : "constraint" },
        { "field_name" : "equal" },
        { "field_name" : "type" },
        { "field_name" : "semicolon" }
      ] },
    { "kind_name" : "PropertyDeclaration",
      "type_name" : "property_declaration",
      "description" : "property_declaration",
      "prefix" : "property",
      "fields" : [
        { "field_name" : "modifiers" },
        { "field_name" : "type" },
        { "field_name" : "declarators" },
        { "field_name" : "semicolon" }
      ] },
    { "kind_name" : "PropertyDeclarator",
      "type_name" : "property_declarator",
      "description" : "property_declarator",
      "prefix" : "property",
      "fields" : [
        { "field_name" : "name" },
        { "field_name" : "initializer" }
      ] },
    { "kind_name" : "NamespaceDeclaration",
      "type_name" : "namespace_declaration",
      "description" : "namespace_declaration",
      "prefix" : "namespace",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "name" },
        { "field_name" : "body" }
      ] },
    { "kind_name" : "NamespaceBody",
      "type_name" : "namespace_body",
      "description" : "namespace_body",
      "prefix" : "namespace",
      "fields" : [
        { "field_name" : "left_brace" },
        { "field_name" : "declarations" },
        { "field_name" : "right_brace" }
      ] },
    { "kind_name" : "NamespaceEmptyBody",
      "type_name" : "namespace_empty_body",
      "description" : "namespace_empty_body",
      "prefix" : "namespace",
      "fields" : [
        { "field_name" : "semicolon" }
      ] },
    { "kind_name" : "NamespaceUseDeclaration",
      "type_name" : "namespace_use_declaration",
      "description" : "namespace_use_declaration",
      "prefix" : "namespace_use",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "kind" },
        { "field_name" : "clauses" },
        { "field_name" : "semicolon" }
      ] },
    { "kind_name" : "NamespaceGroupUseDeclaration",
      "type_name" : "namespace_group_use_declaration",
      "description" : "namespace_group_use_declaration",
      "prefix" : "namespace_group_use",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "kind" },
        { "field_name" : "prefix" },
        { "field_name" : "left_brace" },
        { "field_name" : "clauses" },
        { "field_name" : "right_brace" },
        { "field_name" : "semicolon" }
      ] },
    { "kind_name" : "NamespaceUseClause",
      "type_name" : "namespace_use_clause",
      "description" : "namespace_use_clause",
      "prefix" : "namespace_use",
      "fields" : [
        { "field_name" : "clause_kind" },
        { "field_name" : "name" },
        { "field_name" : "as" },
        { "field_name" : "alias" }
      ] },
    { "kind_name" : "FunctionDeclaration",
      "type_name" : "function_declaration",
      "description" : "function_declaration",
      "prefix" : "function",
      "fields" : [
        { "field_name" : "attribute_spec" },
        { "field_name" : "declaration_header" },
        { "field_name" : "body" }
      ] },
    { "kind_name" : "FunctionDeclarationHeader",
      "type_name" : "function_declaration_header",
      "description" : "function_declaration_header",
      "prefix" : "function",
      "fields" : [
        { "field_name" : "async" },
        { "field_name" : "coroutine" },
        { "field_name" : "keyword" },
        { "field_name" : "ampersand" },
        { "field_name" : "name" },
        { "field_name" : "type_parameter_list" },
        { "field_name" : "left_paren" },
        { "field_name" : "parameter_list" },
        { "field_name" : "right_paren" },
        { "field_name" : "colon" },
        { "field_name" : "type" },
        { "field_name" : "where_clause" }
      ] },
    { "kind_name" : "WhereClause",
      "type_name" : "where_clause",
      "description" : "where_clause",
      "prefix" : "where_clause",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "constraints" }
      ] },
    { "kind_name" : "WhereConstraint",
      "type_name" : "where_constraint",
      "description" : "where_constraint",
      "prefix" : "where_constraint",
      "fields" : [
        { "field_name" : "left_type" },
        { "field_name" : "operator" },
        { "field_name" : "right_type" }
      ] },
    { "kind_name" : "MethodishDeclaration",
      "type_name" : "methodish_declaration",
      "description" : "methodish_declaration",
      "prefix" : "methodish",
      "fields" : [
        { "field_name" : "attribute" },
        { "field_name" : "modifiers" },
        { "field_name" : "function_decl_header" },
        { "field_name" : "function_body" },
        { "field_name" : "semicolon" }
      ] },
    { "kind_name" : "ClassishDeclaration",
      "type_name" : "classish_declaration",
      "description" : "classish_declaration",
      "prefix" : "classish",
      "fields" : [
        { "field_name" : "attribute" },
        { "field_name" : "modifiers" },
        { "field_name" : "keyword" },
        { "field_name" : "name" },
        { "field_name" : "type_parameters" },
        { "field_name" : "extends_keyword" },
        { "field_name" : "extends_list" },
        { "field_name" : "implements_keyword" },
        { "field_name" : "implements_list" },
        { "field_name" : "body" }
      ] },
    { "kind_name" : "ClassishBody",
      "type_name" : "classish_body",
      "description" : "classish_body",
      "prefix" : "classish_body",
      "fields" : [
        { "field_name" : "left_brace" },
        { "field_name" : "elements" },
        { "field_name" : "right_brace" }
      ] },
    { "kind_name" : "TraitUse",
      "type_name" : "trait_use",
      "description" : "trait_use",
      "prefix" : "trait_use",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "names" },
        { "field_name" : "semicolon" }
      ] },
    { "kind_name" : "RequireClause",
      "type_name" : "require_clause",
      "description" : "require_clause",
      "prefix" : "require",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "kind" },
        { "field_name" : "name" },
        { "field_name" : "semicolon" }
      ] },
    { "kind_name" : "ConstDeclaration",
      "type_name" : "const_declaration",
      "description" : "const_declaration",
      "prefix" : "const",
      "fields" : [
        { "field_name" : "abstract" },
        { "field_name" : "keyword" },
        { "field_name" : "type_specifier" },
        { "field_name" : "declarators" },
        { "field_name" : "semicolon" }
      ] },
    { "kind_name" : "ConstantDeclarator",
      "type_name" : "constant_declarator",
      "description" : "constant_declarator",
      "prefix" : "constant_declarator",
      "fields" : [
        { "field_name" : "name" },
        { "field_name" : "initializer" }
      ] },
    { "kind_name" : "TypeConstDeclaration",
      "type_name" : "type_const_declaration",
      "description" : "type_const_declaration",
      "prefix" : "type_const",
      "fields" : [
        { "field_name" : "abstract" },
        { "field_name" : "keyword" },
        { "field_name" : "type_keyword" },
        { "field_name" : "name" },
        { "field_name" : "type_constraint" },
        { "field_name" : "equal" },
        { "field_name" : "type_specifier" },
        { "field_name" : "semicolon" }
      ] },
    { "kind_name" : "DecoratedExpression",
      "type_name" : "decorated_expression",
      "description" : "decorated_expression",
      "prefix" : "decorated_expression",
      "fields" : [
        { "field_name" : "decorator" },
        { "field_name" : "expression" }
      ] },
    { "kind_name" : "ParameterDeclaration",
      "type_name" : "parameter_declaration",
      "description" : "parameter_declaration",
      "prefix" : "parameter",
      "fields" : [
        { "field_name" : "attribute" },
        { "field_name" : "visibility" },
        { "field_name" : "type" },
        { "field_name" : "name" },
        { "field_name" : "default_value" }
      ] },
    { "kind_name" : "VariadicParameter",
      "type_name" : "variadic_parameter",
      "description" : "variadic_parameter",
      "prefix" : "variadic_parameter",
      "fields" : [
        { "field_name" : "ellipsis" }
      ] },
    { "kind_name" : "AttributeSpecification",
      "type_name" : "attribute_specification",
      "description" : "attribute_specification",
      "prefix" : "attribute_specification",
      "fields" : [
        { "field_name" : "left_double_angle" },
        { "field_name" : "attributes" },
        { "field_name" : "right_double_angle" }
      ] },
    { "kind_name" : "Attribute",
      "type_name" : "attribute",
      "description" : "attribute",
      "prefix" : "attribute",
      "fields" : [
        { "field_name" : "name" },
        { "field_name" : "left_paren" },
        { "field_name" : "values" },
        { "field_name" : "right_paren" }
      ] },
    { "kind_name" : "InclusionExpression",
      "type_name" : "inclusion_expression",
      "description" : "inclusion_expression",
      "prefix" : "inclusion",
      "fields" : [
        { "field_name" : "require" },
        { "field_name" : "filename" }
      ] },
    { "kind_name" : "InclusionDirective",
      "type_name" : "inclusion_directive",
      "description" : "inclusion_directive",
      "prefix" : "inclusion",
      "fields" : [
        { "field_name" : "expression" },
        { "field_name" : "semicolon" }
      ] },
    { "kind_name" : "CompoundStatement",
      "type_name" : "compound_statement",
      "description" : "compound_statement",
      "prefix" : "compound",
      "fields" : [
        { "field_name" : "left_brace" },
        { "field_name" : "statements" },
        { "field_name" : "right_brace" }
      ] },
    { "kind_name" : "ExpressionStatement",
      "type_name" : "expression_statement",
      "description" : "expression_statement",
      "prefix" : "expression_statement",
      "fields" : [
        { "field_name" : "expression" },
        { "field_name" : "semicolon" }
      ] },
    { "kind_name" : "UnsetStatement",
      "type_name" : "unset_statement",
      "description" : "unset_statement",
      "prefix" : "unset",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_paren" },
        { "field_name" : "variables" },
        { "field_name" : "right_paren" },
        { "field_name" : "semicolon" }
      ] },
    { "kind_name" : "WhileStatement",
      "type_name" : "while_statement",
      "description" : "while_statement",
      "prefix" : "while",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_paren" },
        { "field_name" : "condition" },
        { "field_name" : "right_paren" },
        { "field_name" : "body" }
      ] },
    { "kind_name" : "IfStatement",
      "type_name" : "if_statement",
      "description" : "if_statement",
      "prefix" : "if",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_paren" },
        { "field_name" : "condition" },
        { "field_name" : "right_paren" },
        { "field_name" : "statement" },
        { "field_name" : "elseif_clauses" },
        { "field_name" : "else_clause" }
      ] },
    { "kind_name" : "ElseifClause",
      "type_name" : "elseif_clause",
      "description" : "elseif_clause",
      "prefix" : "elseif",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_paren" },
        { "field_name" : "condition" },
        { "field_name" : "right_paren" },
        { "field_name" : "statement" }
      ] },
    { "kind_name" : "ElseClause",
      "type_name" : "else_clause",
      "description" : "else_clause",
      "prefix" : "else",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "statement" }
      ] },
    { "kind_name" : "TryStatement",
      "type_name" : "try_statement",
      "description" : "try_statement",
      "prefix" : "try",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "compound_statement" },
        { "field_name" : "catch_clauses" },
        { "field_name" : "finally_clause" }
      ] },
    { "kind_name" : "CatchClause",
      "type_name" : "catch_clause",
      "description" : "catch_clause",
      "prefix" : "catch",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_paren" },
        { "field_name" : "type" },
        { "field_name" : "variable" },
        { "field_name" : "right_paren" },
        { "field_name" : "body" }
      ] },
    { "kind_name" : "FinallyClause",
      "type_name" : "finally_clause",
      "description" : "finally_clause",
      "prefix" : "finally",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "body" }
      ] },
    { "kind_name" : "DoStatement",
      "type_name" : "do_statement",
      "description" : "do_statement",
      "prefix" : "do",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "body" },
        { "field_name" : "while_keyword" },
        { "field_name" : "left_paren" },
        { "field_name" : "condition" },
        { "field_name" : "right_paren" },
        { "field_name" : "semicolon" }
      ] },
    { "kind_name" : "ForStatement",
      "type_name" : "for_statement",
      "description" : "for_statement",
      "prefix" : "for",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_paren" },
        { "field_name" : "initializer" },
        { "field_name" : "first_semicolon" },
        { "field_name" : "control" },
        { "field_name" : "second_semicolon" },
        { "field_name" : "end_of_loop" },
        { "field_name" : "right_paren" },
        { "field_name" : "body" }
      ] },
    { "kind_name" : "ForeachStatement",
      "type_name" : "foreach_statement",
      "description" : "foreach_statement",
      "prefix" : "foreach",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_paren" },
        { "field_name" : "collection" },
        { "field_name" : "await_keyword" },
        { "field_name" : "as" },
        { "field_name" : "key" },
        { "field_name" : "arrow" },
        { "field_name" : "value" },
        { "field_name" : "right_paren" },
        { "field_name" : "body" }
      ] },
    { "kind_name" : "SwitchStatement",
      "type_name" : "switch_statement",
      "description" : "switch_statement",
      "prefix" : "switch",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_paren" },
        { "field_name" : "expression" },
        { "field_name" : "right_paren" },
        { "field_name" : "left_brace" },
        { "field_name" : "sections" },
        { "field_name" : "right_brace" }
      ] },
    { "kind_name" : "SwitchSection",
      "type_name" : "switch_section",
      "description" : "switch_section",
      "prefix" : "switch_section",
      "fields" : [
        { "field_name" : "labels" },
        { "field_name" : "statements" },
        { "field_name" : "fallthrough" }
      ] },
    { "kind_name" : "SwitchFallthrough",
      "type_name" : "switch_fallthrough",
      "description" : "switch_fallthrough",
      "prefix" : "fallthrough",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "semicolon" }
      ] },
    { "kind_name" : "CaseLabel",
      "type_name" : "case_label",
      "description" : "case_label",
      "prefix" : "case",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "expression" },
        { "field_name" : "colon" }
      ] },
    { "kind_name" : "DefaultLabel",
      "type_name" : "default_label",
      "description" : "default_label",
      "prefix" : "default",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "colon" }
      ] },
    { "kind_name" : "ReturnStatement",
      "type_name" : "return_statement",
      "description" : "return_statement",
      "prefix" : "return",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "expression" },
        { "field_name" : "semicolon" }
      ] },
    { "kind_name" : "GotoLabel",
      "type_name" : "goto_label",
      "description" : "goto_label",
      "prefix" : "goto_label",
      "fields" : [
        { "field_name" : "name" },
        { "field_name" : "colon" }
      ] },
    { "kind_name" : "GotoStatement",
      "type_name" : "goto_statement",
      "description" : "goto_statement",
      "prefix" : "goto_statement",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "label_name" },
        { "field_name" : "semicolon" }
      ] },
    { "kind_name" : "ThrowStatement",
      "type_name" : "throw_statement",
      "description" : "throw_statement",
      "prefix" : "throw",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "expression" },
        { "field_name" : "semicolon" }
      ] },
    { "kind_name" : "BreakStatement",
      "type_name" : "break_statement",
      "description" : "break_statement",
      "prefix" : "break",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "level" },
        { "field_name" : "semicolon" }
      ] },
    { "kind_name" : "ContinueStatement",
      "type_name" : "continue_statement",
      "description" : "continue_statement",
      "prefix" : "continue",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "level" },
        { "field_name" : "semicolon" }
      ] },
    { "kind_name" : "FunctionStaticStatement",
      "type_name" : "function_static_statement",
      "description" : "function_static_statement",
      "prefix" : "static",
      "fields" : [
        { "field_name" : "static_keyword" },
        { "field_name" : "declarations" },
        { "field_name" : "semicolon" }
      ] },
    { "kind_name" : "StaticDeclarator",
      "type_name" : "static_declarator",
      "description" : "static_declarator",
      "prefix" : "static",
      "fields" : [
        { "field_name" : "name" },
        { "field_name" : "initializer" }
      ] },
    { "kind_name" : "EchoStatement",
      "type_name" : "echo_statement",
      "description" : "echo_statement",
      "prefix" : "echo",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "expressions" },
        { "field_name" : "semicolon" }
      ] },
    { "kind_name" : "GlobalStatement",
      "type_name" : "global_statement",
      "description" : "global_statement",
      "prefix" : "global",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "variables" },
        { "field_name" : "semicolon" }
      ] },
    { "kind_name" : "SimpleInitializer",
      "type_name" : "simple_initializer",
      "description" : "simple_initializer",
      "prefix" : "simple_initializer",
      "fields" : [
        { "field_name" : "equal" },
        { "field_name" : "value" }
      ] },
    { "kind_name" : "AnonymousFunction",
      "type_name" : "anonymous_function",
      "description" : "anonymous_function",
      "prefix" : "anonymous",
      "fields" : [
        { "field_name" : "async_keyword" },
        { "field_name" : "coroutine_keyword" },
        { "field_name" : "function_keyword" },
        { "field_name" : "left_paren" },
        { "field_name" : "parameters" },
        { "field_name" : "right_paren" },
        { "field_name" : "colon" },
        { "field_name" : "type" },
        { "field_name" : "use" },
        { "field_name" : "body" }
      ] },
    { "kind_name" : "AnonymousFunctionUseClause",
      "type_name" : "anonymous_function_use_clause",
      "description" : "anonymous_function_use_clause",
      "prefix" : "anonymous_use",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_paren" },
        { "field_name" : "variables" },
        { "field_name" : "right_paren" }
      ] },
    { "kind_name" : "LambdaExpression",
      "type_name" : "lambda_expression",
      "description" : "lambda_expression",
      "prefix" : "lambda",
      "fields" : [
        { "field_name" : "async" },
        { "field_name" : "coroutine" },
        { "field_name" : "signature" },
        { "field_name" : "arrow" },
        { "field_name" : "body" }
      ] },
    { "kind_name" : "LambdaSignature",
      "type_name" : "lambda_signature",
      "description" : "lambda_signature",
      "prefix" : "lambda",
      "fields" : [
        { "field_name" : "left_paren" },
        { "field_name" : "parameters" },
        { "field_name" : "right_paren" },
        { "field_name" : "colon" },
        { "field_name" : "type" }
      ] },
    { "kind_name" : "CastExpression",
      "type_name" : "cast_expression",
      "description" : "cast_expression",
      "prefix" : "cast",
      "fields" : [
        { "field_name" : "left_paren" },
        { "field_name" : "type" },
        { "field_name" : "right_paren" },
        { "field_name" : "operand" }
      ] },
    { "kind_name" : "ScopeResolutionExpression",
      "type_name" : "scope_resolution_expression",
      "description" : "scope_resolution_expression",
      "prefix" : "scope_resolution",
      "fields" : [
        { "field_name" : "qualifier" },
        { "field_name" : "operator" },
        { "field_name" : "name" }
      ] },
    { "kind_name" : "MemberSelectionExpression",
      "type_name" : "member_selection_expression",
      "description" : "member_selection_expression",
      "prefix" : "member",
      "fields" : [
        { "field_name" : "object" },
        { "field_name" : "operator" },
        { "field_name" : "name" }
      ] },
    { "kind_name" : "SafeMemberSelectionExpression",
      "type_name" : "safe_member_selection_expression",
      "description" : "safe_member_selection_expression",
      "prefix" : "safe_member",
      "fields" : [
        { "field_name" : "object" },
        { "field_name" : "operator" },
        { "field_name" : "name" }
      ] },
    { "kind_name" : "EmbeddedMemberSelectionExpression",
      "type_name" : "embedded_member_selection_expression",
      "description" : "embedded_member_selection_expression",
      "prefix" : "embedded_member",
      "fields" : [
        { "field_name" : "object" },
        { "field_name" : "operator" },
        { "field_name" : "name" }
      ] },
    { "kind_name" : "YieldExpression",
      "type_name" : "yield_expression",
      "description" : "yield_expression",
      "prefix" : "yield",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "operand" }
      ] },
    { "kind_name" : "PrintExpression",
      "type_name" : "print_expression",
      "description" : "print_expression",
      "prefix" : "print",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "expression" }
      ] },
    { "kind_name" : "PrefixUnaryExpression",
      "type_name" : "prefix_unary_expression",
      "description" : "prefix_unary_expression",
      "prefix" : "prefix_unary",
      "fields" : [
        { "field_name" : "operator" },
        { "field_name" : "operand" }
      ] },
    { "kind_name" : "PostfixUnaryExpression",
      "type_name" : "postfix_unary_expression",
      "description" : "postfix_unary_expression",
      "prefix" : "postfix_unary",
      "fields" : [
        { "field_name" : "operand" },
        { "field_name" : "operator" }
      ] },
    { "kind_name" : "BinaryExpression",
      "type_name" : "binary_expression",
      "description" : "binary_expression",
      "prefix" : "binary",
      "fields" : [
        { "field_name" : "left_operand" },
        { "field_name" : "operator" },
        { "field_name" : "right_operand" }
      ] },
    { "kind_name" : "InstanceofExpression",
      "type_name" : "instanceof_expression",
      "description" : "instanceof_expression",
      "prefix" : "instanceof",
      "fields" : [
        { "field_name" : "left_operand" },
        { "field_name" : "operator" },
        { "field_name" : "right_operand" }
      ] },
    { "kind_name" : "ConditionalExpression",
      "type_name" : "conditional_expression",
      "description" : "conditional_expression",
      "prefix" : "conditional",
      "fields" : [
        { "field_name" : "test" },
        { "field_name" : "question" },
        { "field_name" : "consequence" },
        { "field_name" : "colon" },
        { "field_name" : "alternative" }
      ] },
    { "kind_name" : "EvalExpression",
      "type_name" : "eval_expression",
      "description" : "eval_expression",
      "prefix" : "eval",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_paren" },
        { "field_name" : "argument" },
        { "field_name" : "right_paren" }
      ] },
    { "kind_name" : "EmptyExpression",
      "type_name" : "empty_expression",
      "description" : "empty_expression",
      "prefix" : "empty",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_paren" },
        { "field_name" : "argument" },
        { "field_name" : "right_paren" }
      ] },
    { "kind_name" : "DefineExpression",
      "type_name" : "define_expression",
      "description" : "define_expression",
      "prefix" : "define",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_paren" },
        { "field_name" : "argument_list" },
        { "field_name" : "right_paren" }
      ] },
    { "kind_name" : "IssetExpression",
      "type_name" : "isset_expression",
      "description" : "isset_expression",
      "prefix" : "isset",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_paren" },
        { "field_name" : "argument_list" },
        { "field_name" : "right_paren" }
      ] },
    { "kind_name" : "FunctionCallExpression",
      "type_name" : "function_call_expression",
      "description" : "function_call_expression",
      "prefix" : "function_call",
      "fields" : [
        { "field_name" : "receiver" },
        { "field_name" : "left_paren" },
        { "field_name" : "argument_list" },
        { "field_name" : "right_paren" }
      ] },
    { "kind_name" : "ParenthesizedExpression",
      "type_name" : "parenthesized_expression",
      "description" : "parenthesized_expression",
      "prefix" : "parenthesized_expression",
      "fields" : [
        { "field_name" : "left_paren" },
        { "field_name" : "expression" },
        { "field_name" : "right_paren" }
      ] },
    { "kind_name" : "BracedExpression",
      "type_name" : "braced_expression",
      "description" : "braced_expression",
      "prefix" : "braced_expression",
      "fields" : [
        { "field_name" : "left_brace" },
        { "field_name" : "expression" },
        { "field_name" : "right_brace" }
      ] },
    { "kind_name" : "EmbeddedBracedExpression",
      "type_name" : "embedded_braced_expression",
      "description" : "embedded_braced_expression",
      "prefix" : "embedded_braced_expression",
      "fields" : [
        { "field_name" : "left_brace" },
        { "field_name" : "expression" },
        { "field_name" : "right_brace" }
      ] },
    { "kind_name" : "ListExpression",
      "type_name" : "list_expression",
      "description" : "list_expression",
      "prefix" : "list",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_paren" },
        { "field_name" : "members" },
        { "field_name" : "right_paren" }
      ] },
    { "kind_name" : "CollectionLiteralExpression",
      "type_name" : "collection_literal_expression",
      "description" : "collection_literal_expression",
      "prefix" : "collection_literal",
      "fields" : [
        { "field_name" : "name" },
        { "field_name" : "left_brace" },
        { "field_name" : "initializers" },
        { "field_name" : "right_brace" }
      ] },
    { "kind_name" : "ObjectCreationExpression",
      "type_name" : "object_creation_expression",
      "description" : "object_creation_expression",
      "prefix" : "object_creation",
      "fields" : [
        { "field_name" : "new_keyword" },
        { "field_name" : "type" },
        { "field_name" : "left_paren" },
        { "field_name" : "argument_list" },
        { "field_name" : "right_paren" }
      ] },
    { "kind_name" : "ArrayCreationExpression",
      "type_name" : "array_creation_expression",
      "description" : "array_creation_expression",
      "prefix" : "array_creation",
      "fields" : [
        { "field_name" : "left_bracket" },
        { "field_name" : "members" },
        { "field_name" : "right_bracket" }
      ] },
    { "kind_name" : "ArrayIntrinsicExpression",
      "type_name" : "array_intrinsic_expression",
      "description" : "array_intrinsic_expression",
      "prefix" : "array_intrinsic",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_paren" },
        { "field_name" : "members" },
        { "field_name" : "right_paren" }
      ] },
    { "kind_name" : "DarrayIntrinsicExpression",
      "type_name" : "darray_intrinsic_expression",
      "description" : "darray_intrinsic_expression",
      "prefix" : "darray_intrinsic",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_bracket" },
        { "field_name" : "members" },
        { "field_name" : "right_bracket" }
      ] },
    { "kind_name" : "DictionaryIntrinsicExpression",
      "type_name" : "dictionary_intrinsic_expression",
      "description" : "dictionary_intrinsic_expression",
      "prefix" : "dictionary_intrinsic",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_bracket" },
        { "field_name" : "members" },
        { "field_name" : "right_bracket" }
      ] },
    { "kind_name" : "KeysetIntrinsicExpression",
      "type_name" : "keyset_intrinsic_expression",
      "description" : "keyset_intrinsic_expression",
      "prefix" : "keyset_intrinsic",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_bracket" },
        { "field_name" : "members" },
        { "field_name" : "right_bracket" }
      ] },
    { "kind_name" : "VarrayIntrinsicExpression",
      "type_name" : "varray_intrinsic_expression",
      "description" : "varray_intrinsic_expression",
      "prefix" : "varray_intrinsic",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_bracket" },
        { "field_name" : "members" },
        { "field_name" : "right_bracket" }
      ] },
    { "kind_name" : "VectorIntrinsicExpression",
      "type_name" : "vector_intrinsic_expression",
      "description" : "vector_intrinsic_expression",
      "prefix" : "vector_intrinsic",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_bracket" },
        { "field_name" : "members" },
        { "field_name" : "right_bracket" }
      ] },
    { "kind_name" : "ElementInitializer",
      "type_name" : "element_initializer",
      "description" : "element_initializer",
      "prefix" : "element",
      "fields" : [
        { "field_name" : "key" },
        { "field_name" : "arrow" },
        { "field_name" : "value" }
      ] },
    { "kind_name" : "SubscriptExpression",
      "type_name" : "subscript_expression",
      "description" : "subscript_expression",
      "prefix" : "subscript",
      "fields" : [
        { "field_name" : "receiver" },
        { "field_name" : "left_bracket" },
        { "field_name" : "index" },
        { "field_name" : "right_bracket" }
      ] },
    { "kind_name" : "EmbeddedSubscriptExpression",
      "type_name" : "embedded_subscript_expression",
      "description" : "embedded_subscript_expression",
      "prefix" : "embedded_subscript",
      "fields" : [
        { "field_name" : "receiver" },
        { "field_name" : "left_bracket" },
        { "field_name" : "index" },
        { "field_name" : "right_bracket" }
      ] },
    { "kind_name" : "AwaitableCreationExpression",
      "type_name" : "awaitable_creation_expression",
      "description" : "awaitable_creation_expression",
      "prefix" : "awaitable",
      "fields" : [
        { "field_name" : "async" },
        { "field_name" : "coroutine" },
        { "field_name" : "compound_statement" }
      ] },
    { "kind_name" : "XHPChildrenDeclaration",
      "type_name" : "xhp_children_declaration",
      "description" : "xhp_children_declaration",
      "prefix" : "xhp_children",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "expression" },
        { "field_name" : "semicolon" }
      ] },
    { "kind_name" : "XHPChildrenParenthesizedList",
      "type_name" : "xhp_children_parenthesized_list",
      "description" : "xhp_children_parenthesized_list",
      "prefix" : "xhp_children_list",
      "fields" : [
        { "field_name" : "left_paren" },
        { "field_name" : "xhp_children" },
        { "field_name" : "right_paren" }
      ] },
    { "kind_name" : "XHPCategoryDeclaration",
      "type_name" : "xhp_category_declaration",
      "description" : "xhp_category_declaration",
      "prefix" : "xhp_category",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "categories" },
        { "field_name" : "semicolon" }
      ] },
    { "kind_name" : "XHPEnumType",
      "type_name" : "xhp_enum_type",
      "description" : "xhp_enum_type",
      "prefix" : "xhp_enum",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_brace" },
        { "field_name" : "values" },
        { "field_name" : "right_brace" }
      ] },
    { "kind_name" : "XHPRequired",
      "type_name" : "xhp_required",
      "description" : "xhp_required",
      "prefix" : "xhp_required",
      "fields" : [
        { "field_name" : "at" },
        { "field_name" : "keyword" }
      ] },
    { "kind_name" : "XHPClassAttributeDeclaration",
      "type_name" : "xhp_class_attribute_declaration",
      "description" : "xhp_class_attribute_declaration",
      "prefix" : "xhp_attribute",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "attributes" },
        { "field_name" : "semicolon" }
      ] },
    { "kind_name" : "XHPClassAttribute",
      "type_name" : "xhp_class_attribute",
      "description" : "xhp_class_attribute",
      "prefix" : "xhp_attribute_decl",
      "fields" : [
        { "field_name" : "type" },
        { "field_name" : "name" },
        { "field_name" : "initializer" },
        { "field_name" : "required" }
      ] },
    { "kind_name" : "XHPSimpleClassAttribute",
      "type_name" : "xhp_simple_class_attribute",
      "description" : "xhp_simple_class_attribute",
      "prefix" : "xhp_simple_class_attribute",
      "fields" : [
        { "field_name" : "type" }
      ] },
    { "kind_name" : "XHPAttribute",
      "type_name" : "xhp_attribute",
      "description" : "xhp_attribute",
      "prefix" : "xhp_attribute",
      "fields" : [
        { "field_name" : "name" },
        { "field_name" : "equal" },
        { "field_name" : "expression" }
      ] },
    { "kind_name" : "XHPOpen",
      "type_name" : "xhp_open",
      "description" : "xhp_open",
      "prefix" : "xhp_open",
      "fields" : [
        { "field_name" : "left_angle" },
        { "field_name" : "name" },
        { "field_name" : "attributes" },
        { "field_name" : "right_angle" }
      ] },
    { "kind_name" : "XHPExpression",
      "type_name" : "xhp_expression",
      "description" : "xhp_expression",
      "prefix" : "xhp",
      "fields" : [
        { "field_name" : "open" },
        { "field_name" : "body" },
        { "field_name" : "close" }
      ] },
    { "kind_name" : "XHPClose",
      "type_name" : "xhp_close",
      "description" : "xhp_close",
      "prefix" : "xhp_close",
      "fields" : [
        { "field_name" : "left_angle" },
        { "field_name" : "name" },
        { "field_name" : "right_angle" }
      ] },
    { "kind_name" : "TypeConstant",
      "type_name" : "type_constant",
      "description" : "type_constant",
      "prefix" : "type_constant",
      "fields" : [
        { "field_name" : "left_type" },
        { "field_name" : "separator" },
        { "field_name" : "right_type" }
      ] },
    { "kind_name" : "VectorTypeSpecifier",
      "type_name" : "vector_type_specifier",
      "description" : "vector_type_specifier",
      "prefix" : "vector_type",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_angle" },
        { "field_name" : "type" },
        { "field_name" : "right_angle" }
      ] },
    { "kind_name" : "KeysetTypeSpecifier",
      "type_name" : "keyset_type_specifier",
      "description" : "keyset_type_specifier",
      "prefix" : "keyset_type",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_angle" },
        { "field_name" : "type" },
        { "field_name" : "right_angle" }
      ] },
    { "kind_name" : "TupleTypeExplicitSpecifier",
      "type_name" : "tuple_type_explicit_specifier",
      "description" : "tuple_type_explicit_specifier",
      "prefix" : "tuple_type",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_angle" },
        { "field_name" : "types" },
        { "field_name" : "right_angle" }
      ] },
    { "kind_name" : "VarrayTypeSpecifier",
      "type_name" : "varray_type_specifier",
      "description" : "varray_type_specifier",
      "prefix" : "varray",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_angle" },
        { "field_name" : "type" },
        { "field_name" : "optional_comma" },
        { "field_name" : "right_angle" }
      ] },
    { "kind_name" : "VectorArrayTypeSpecifier",
      "type_name" : "vector_array_type_specifier",
      "description" : "vector_array_type_specifier",
      "prefix" : "vector_array",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_angle" },
        { "field_name" : "type" },
        { "field_name" : "right_angle" }
      ] },
    { "kind_name" : "TypeParameter",
      "type_name" : "type_parameter",
      "description" : "type_parameter",
      "prefix" : "type",
      "fields" : [
        { "field_name" : "variance" },
        { "field_name" : "name" },
        { "field_name" : "constraints" }
      ] },
    { "kind_name" : "TypeConstraint",
      "type_name" : "type_constraint",
      "description" : "type_constraint",
      "prefix" : "constraint",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "type" }
      ] },
    { "kind_name" : "DarrayTypeSpecifier",
      "type_name" : "darray_type_specifier",
      "description" : "darray_type_specifier",
      "prefix" : "darray",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_angle" },
        { "field_name" : "key" },
        { "field_name" : "comma" },
        { "field_name" : "value" },
        { "field_name" : "optional_comma" },
        { "field_name" : "right_angle" }
      ] },
    { "kind_name" : "MapArrayTypeSpecifier",
      "type_name" : "map_array_type_specifier",
      "description" : "map_array_type_specifier",
      "prefix" : "map_array",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_angle" },
        { "field_name" : "key" },
        { "field_name" : "comma" },
        { "field_name" : "value" },
        { "field_name" : "right_angle" }
      ] },
    { "kind_name" : "DictionaryTypeSpecifier",
      "type_name" : "dictionary_type_specifier",
      "description" : "dictionary_type_specifier",
      "prefix" : "dictionary_type",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_angle" },
        { "field_name" : "members" },
        { "field_name" : "right_angle" }
      ] },
    { "kind_name" : "ClosureTypeSpecifier",
      "type_name" : "closure_type_specifier",
      "description" : "closure_type_specifier",
      "prefix" : "closure",
      "fields" : [
        { "field_name" : "outer_left_paren" },
        { "field_name" : "function_keyword" },
        { "field_name" : "inner_left_paren" },
        { "field_name" : "parameter_types" },
        { "field_name" : "inner_right_paren" },
        { "field_name" : "colon" },
        { "field_name" : "return_type" },
        { "field_name" : "outer_right_paren" }
      ] },
    { "kind_name" : "ClassnameTypeSpecifier",
      "type_name" : "classname_type_specifier",
      "description" : "classname_type_specifier",
      "prefix" : "classname",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_angle" },
        { "field_name" : "type" },
        { "field_name" : "right_angle" }
      ] },
    { "kind_name" : "FieldSpecifier",
      "type_name" : "field_specifier",
      "description" : "field_specifier",
      "prefix" : "field",
      "fields" : [
        { "field_name" : "question" },
        { "field_name" : "name" },
        { "field_name" : "arrow" },
        { "field_name" : "type" }
      ] },
    { "kind_name" : "FieldInitializer",
      "type_name" : "field_initializer",
      "description" : "field_initializer",
      "prefix" : "field_initializer",
      "fields" : [
        { "field_name" : "name" },
        { "field_name" : "arrow" },
        { "field_name" : "value" }
      ] },
    { "kind_name" : "ShapeTypeSpecifier",
      "type_name" : "shape_type_specifier",
      "description" : "shape_type_specifier",
      "prefix" : "shape_type",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_paren" },
        { "field_name" : "fields" },
        { "field_name" : "ellipsis" },
        { "field_name" : "right_paren" }
      ] },
    { "kind_name" : "ShapeExpression",
      "type_name" : "shape_expression",
      "description" : "shape_expression",
      "prefix" : "shape_expression",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_paren" },
        { "field_name" : "fields" },
        { "field_name" : "right_paren" }
      ] },
    { "kind_name" : "TupleExpression",
      "type_name" : "tuple_expression",
      "description" : "tuple_expression",
      "prefix" : "tuple_expression",
      "fields" : [
        { "field_name" : "keyword" },
        { "field_name" : "left_paren" },
        { "field_name" : "items" },
        { "field_name" : "right_paren" }
      ] },
    { "kind_name" : "GenericTypeSpecifier",
      "type_name" : "generic_type_specifier",
      "description" : "generic_type_specifier",
      "prefix" : "generic",
      "fields" : [
        { "field_name" : "class_type" },
        { "field_name" : "argument_list" }
      ] },
    { "kind_name" : "NullableTypeSpecifier",
      "type_name" : "nullable_type_specifier",
      "description" : "nullable_type_specifier",
      "prefix" : "nullable",
      "fields" : [
        { "field_name" : "question" },
        { "field_name" : "type" }
      ] },
    { "kind_name" : "SoftTypeSpecifier",
      "type_name" : "soft_type_specifier",
      "description" : "soft_type_specifier",
      "prefix" : "soft",
      "fields" : [
        { "field_name" : "at" },
        { "field_name" : "type" }
      ] },
    { "kind_name" : "TypeArguments",
      "type_name" : "type_arguments",
      "description" : "type_arguments",
      "prefix" : "type_arguments",
      "fields" : [
        { "field_name" : "left_angle" },
        { "field_name" : "types" },
        { "field_name" : "right_angle" }
      ] },
    { "kind_name" : "TypeParameters",
      "type_name" : "type_parameters",
      "description" : "type_parameters",
      "prefix" : "type_parameters",
      "fields" : [
        { "field_name" : "left_angle" },
        { "field_name" : "parameters" },
        { "field_name" : "right_angle" }
      ] },
    { "kind_name" : "TupleTypeSpecifier",
      "type_name" : "tuple_type_specifier",
      "description" : "tuple_type_specifier",
      "prefix" : "tuple",
      "fields" : [
        { "field_name" : "left_paren" },
        { "field_name" : "types" },
        { "field_name" : "right_paren" }
      ] },
    { "kind_name" : "ErrorSyntax",
      "type_name" : "error",
      "description" : "error",
      "prefix" : "error",
      "fields" : [
        { "field_name" : "error" }
      ] },
    { "kind_name" : "ListItem",
      "type_name" : "list_item",
      "description" : "list_item",
      "prefix" : "list",
      "fields" : [
        { "field_name" : "item" },
        { "field_name" : "separator" }
      ] },

    { "kind_name" : "Token",
      "type_name" : "token",
      "description" : "token",
      "prefix" : "",
      "fields" : [
        { "field_name" : "leading" },
        { "field_name" : "trailing" } ] },
    { "kind_name" : "Missing",
      "type_name" : "missing",
      "description" : "missing",
      "prefix" : "",
      "fields" : [ ] },
    { "kind_name" : "SyntaxList",
      "type_name" : "syntax_list",
      "description" : "syntax_list",
      "prefix" : "",
      "fields" : [ ] } ] }