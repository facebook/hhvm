/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/sync-methods-return-try/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/service_h.h>

#include "thrift/compiler/test/fixtures/sync-methods-return-try/gen-cpp2/PubSubStreamingServiceAsyncClient.h"
#include "thrift/compiler/test/fixtures/sync-methods-return-try/gen-cpp2/module_types.h"
#include <thrift/lib/cpp2/async/ServerStream.h>

namespace folly {
  class IOBuf;
  class IOBufQueue;
}
namespace apache { namespace thrift {
  class Cpp2RequestContext;
  class BinaryProtocolReader;
  class CompactProtocolReader;
  namespace transport { class THeader; }
}}

namespace cpp2 {
class PubSubStreamingService;
class PubSubStreamingServiceAsyncProcessor;

class PubSubStreamingServiceServiceInfoHolder : public apache::thrift::ServiceInfoHolder {
  public:
   apache::thrift::ServiceRequestInfoMap const& requestInfoMap() const override;
   static apache::thrift::ServiceRequestInfoMap staticRequestInfoMap();
};
} // namespace cpp2

namespace apache::thrift {
template <>
class ServiceHandler<::cpp2::PubSubStreamingService> : public apache::thrift::ServerInterface {
  static_assert(!folly::is_detected_v<::apache::thrift::detail::st::detect_complete, ::cpp2::PubSubStreamingService>, "Definition collision with service tag. Either rename the Thrift service using @cpp.Name annotation or rename the conflicting C++ type.");

 public:
  std::string_view getGeneratedName() const override { return "PubSubStreamingService"; }

  typedef ::cpp2::PubSubStreamingServiceAsyncProcessor ProcessorType;
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override;
  CreateMethodMetadataResult createMethodMetadata() override;
  bool isThriftGenerated() const override final { return true; }
 private:
  std::optional<std::reference_wrapper<apache::thrift::ServiceRequestInfoMap const>> getServiceRequestInfoMap() const;
 public:

  virtual ::apache::thrift::ServerStream<::cpp2::StreamItem> sync_returnstream(std::unique_ptr<::cpp2::StreamItem> /*from*/, std::unique_ptr<::cpp2::StreamItem> /*to*/);
  [[deprecated("Use sync_returnstream instead")]] virtual ::apache::thrift::ServerStream<::cpp2::StreamItem> returnstream(std::unique_ptr<::cpp2::StreamItem> /*from*/, std::unique_ptr<::cpp2::StreamItem> /*to*/);
  virtual folly::Future<::apache::thrift::ServerStream<::cpp2::StreamItem>> future_returnstream(std::unique_ptr<::cpp2::StreamItem> p_from, std::unique_ptr<::cpp2::StreamItem> p_to);
  virtual folly::SemiFuture<::apache::thrift::ServerStream<::cpp2::StreamItem>> semifuture_returnstream(std::unique_ptr<::cpp2::StreamItem> p_from, std::unique_ptr<::cpp2::StreamItem> p_to);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::apache::thrift::ServerStream<::cpp2::StreamItem>> co_returnstream(std::unique_ptr<::cpp2::StreamItem> p_from, std::unique_ptr<::cpp2::StreamItem> p_to);
  virtual folly::coro::Task<::apache::thrift::ServerStream<::cpp2::StreamItem>> co_returnstream(apache::thrift::RequestParams params, std::unique_ptr<::cpp2::StreamItem> p_from, std::unique_ptr<::cpp2::StreamItem> p_to);
#endif
  virtual void async_tm_returnstream(apache::thrift::HandlerCallbackPtr<::apache::thrift::ServerStream<::cpp2::StreamItem>> callback, std::unique_ptr<::cpp2::StreamItem> p_from, std::unique_ptr<::cpp2::StreamItem> p_to);
  virtual ::apache::thrift::ServerStream<::cpp2::StreamItem> sync_streamthrows(std::unique_ptr<::cpp2::StreamItem> /*foo*/);
  [[deprecated("Use sync_streamthrows instead")]] virtual ::apache::thrift::ServerStream<::cpp2::StreamItem> streamthrows(std::unique_ptr<::cpp2::StreamItem> /*foo*/);
  virtual folly::Future<::apache::thrift::ServerStream<::cpp2::StreamItem>> future_streamthrows(std::unique_ptr<::cpp2::StreamItem> p_foo);
  virtual folly::SemiFuture<::apache::thrift::ServerStream<::cpp2::StreamItem>> semifuture_streamthrows(std::unique_ptr<::cpp2::StreamItem> p_foo);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::apache::thrift::ServerStream<::cpp2::StreamItem>> co_streamthrows(std::unique_ptr<::cpp2::StreamItem> p_foo);
  virtual folly::coro::Task<::apache::thrift::ServerStream<::cpp2::StreamItem>> co_streamthrows(apache::thrift::RequestParams params, std::unique_ptr<::cpp2::StreamItem> p_foo);
#endif
  virtual void async_tm_streamthrows(apache::thrift::HandlerCallbackPtr<::apache::thrift::ServerStream<::cpp2::StreamItem>> callback, std::unique_ptr<::cpp2::StreamItem> p_foo);
  virtual ::apache::thrift::ServerStream<::cpp2::StreamItem> sync_servicethrows(std::unique_ptr<::cpp2::StreamItem> /*foo*/);
  [[deprecated("Use sync_servicethrows instead")]] virtual ::apache::thrift::ServerStream<::cpp2::StreamItem> servicethrows(std::unique_ptr<::cpp2::StreamItem> /*foo*/);
  virtual folly::Future<::apache::thrift::ServerStream<::cpp2::StreamItem>> future_servicethrows(std::unique_ptr<::cpp2::StreamItem> p_foo);
  virtual folly::SemiFuture<::apache::thrift::ServerStream<::cpp2::StreamItem>> semifuture_servicethrows(std::unique_ptr<::cpp2::StreamItem> p_foo);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::apache::thrift::ServerStream<::cpp2::StreamItem>> co_servicethrows(std::unique_ptr<::cpp2::StreamItem> p_foo);
  virtual folly::coro::Task<::apache::thrift::ServerStream<::cpp2::StreamItem>> co_servicethrows(apache::thrift::RequestParams params, std::unique_ptr<::cpp2::StreamItem> p_foo);
#endif
  virtual void async_tm_servicethrows(apache::thrift::HandlerCallbackPtr<::apache::thrift::ServerStream<::cpp2::StreamItem>> callback, std::unique_ptr<::cpp2::StreamItem> p_foo);
  virtual ::apache::thrift::ServerStream<::cpp2::StreamItem> sync_servicethrows2(std::unique_ptr<::cpp2::StreamItem> /*foo*/);
  [[deprecated("Use sync_servicethrows2 instead")]] virtual ::apache::thrift::ServerStream<::cpp2::StreamItem> servicethrows2(std::unique_ptr<::cpp2::StreamItem> /*foo*/);
  virtual folly::Future<::apache::thrift::ServerStream<::cpp2::StreamItem>> future_servicethrows2(std::unique_ptr<::cpp2::StreamItem> p_foo);
  virtual folly::SemiFuture<::apache::thrift::ServerStream<::cpp2::StreamItem>> semifuture_servicethrows2(std::unique_ptr<::cpp2::StreamItem> p_foo);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::apache::thrift::ServerStream<::cpp2::StreamItem>> co_servicethrows2(std::unique_ptr<::cpp2::StreamItem> p_foo);
  virtual folly::coro::Task<::apache::thrift::ServerStream<::cpp2::StreamItem>> co_servicethrows2(apache::thrift::RequestParams params, std::unique_ptr<::cpp2::StreamItem> p_foo);
#endif
  virtual void async_tm_servicethrows2(apache::thrift::HandlerCallbackPtr<::apache::thrift::ServerStream<::cpp2::StreamItem>> callback, std::unique_ptr<::cpp2::StreamItem> p_foo);
  virtual ::apache::thrift::ServerStream<::cpp2::StreamItem> sync_boththrows(std::unique_ptr<::cpp2::StreamItem> /*foo*/);
  [[deprecated("Use sync_boththrows instead")]] virtual ::apache::thrift::ServerStream<::cpp2::StreamItem> boththrows(std::unique_ptr<::cpp2::StreamItem> /*foo*/);
  virtual folly::Future<::apache::thrift::ServerStream<::cpp2::StreamItem>> future_boththrows(std::unique_ptr<::cpp2::StreamItem> p_foo);
  virtual folly::SemiFuture<::apache::thrift::ServerStream<::cpp2::StreamItem>> semifuture_boththrows(std::unique_ptr<::cpp2::StreamItem> p_foo);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::apache::thrift::ServerStream<::cpp2::StreamItem>> co_boththrows(std::unique_ptr<::cpp2::StreamItem> p_foo);
  virtual folly::coro::Task<::apache::thrift::ServerStream<::cpp2::StreamItem>> co_boththrows(apache::thrift::RequestParams params, std::unique_ptr<::cpp2::StreamItem> p_foo);
#endif
  virtual void async_tm_boththrows(apache::thrift::HandlerCallbackPtr<::apache::thrift::ServerStream<::cpp2::StreamItem>> callback, std::unique_ptr<::cpp2::StreamItem> p_foo);
  virtual ::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t> sync_responseandstreamstreamthrows(::std::int32_t /*foo*/);
  [[deprecated("Use sync_responseandstreamstreamthrows instead")]] virtual ::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t> responseandstreamstreamthrows(::std::int32_t /*foo*/);
  virtual folly::Future<::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>> future_responseandstreamstreamthrows(::std::int32_t p_foo);
  virtual folly::SemiFuture<::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>> semifuture_responseandstreamstreamthrows(::std::int32_t p_foo);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>> co_responseandstreamstreamthrows(::std::int32_t p_foo);
  virtual folly::coro::Task<::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>> co_responseandstreamstreamthrows(apache::thrift::RequestParams params, ::std::int32_t p_foo);
#endif
  virtual void async_tm_responseandstreamstreamthrows(apache::thrift::HandlerCallbackPtr<::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>> callback, ::std::int32_t p_foo);
  virtual ::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t> sync_responseandstreamservicethrows(::std::int32_t /*foo*/);
  [[deprecated("Use sync_responseandstreamservicethrows instead")]] virtual ::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t> responseandstreamservicethrows(::std::int32_t /*foo*/);
  virtual folly::Future<::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>> future_responseandstreamservicethrows(::std::int32_t p_foo);
  virtual folly::SemiFuture<::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>> semifuture_responseandstreamservicethrows(::std::int32_t p_foo);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>> co_responseandstreamservicethrows(::std::int32_t p_foo);
  virtual folly::coro::Task<::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>> co_responseandstreamservicethrows(apache::thrift::RequestParams params, ::std::int32_t p_foo);
#endif
  virtual void async_tm_responseandstreamservicethrows(apache::thrift::HandlerCallbackPtr<::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>> callback, ::std::int32_t p_foo);
  virtual ::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t> sync_responseandstreamboththrows(::std::int32_t /*foo*/);
  [[deprecated("Use sync_responseandstreamboththrows instead")]] virtual ::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t> responseandstreamboththrows(::std::int32_t /*foo*/);
  virtual folly::Future<::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>> future_responseandstreamboththrows(::std::int32_t p_foo);
  virtual folly::SemiFuture<::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>> semifuture_responseandstreamboththrows(::std::int32_t p_foo);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>> co_responseandstreamboththrows(::std::int32_t p_foo);
  virtual folly::coro::Task<::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>> co_responseandstreamboththrows(apache::thrift::RequestParams params, ::std::int32_t p_foo);
#endif
  virtual void async_tm_responseandstreamboththrows(apache::thrift::HandlerCallbackPtr<::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>> callback, ::std::int32_t p_foo);
 private:
  static ::cpp2::PubSubStreamingServiceServiceInfoHolder __fbthrift_serviceInfoHolder;
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_returnstream{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_streamthrows{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_servicethrows{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_servicethrows2{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_boththrows{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_responseandstreamstreamthrows{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_responseandstreamservicethrows{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_responseandstreamboththrows{apache::thrift::detail::si::InvocationType::AsyncTm};
 public:

  virtual void fbthrift_execute_decorators_before_returnstream(apache::thrift::Cpp2RequestContext& /*requestCtx*/, const ::cpp2::StreamItem& /*p_from*/, const ::cpp2::StreamItem& /*p_to*/) {}
  virtual void fbthrift_execute_decorators_after_returnstream(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  virtual void fbthrift_execute_decorators_before_streamthrows(apache::thrift::Cpp2RequestContext& /*requestCtx*/, const ::cpp2::StreamItem& /*p_foo*/) {}
  virtual void fbthrift_execute_decorators_after_streamthrows(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  virtual void fbthrift_execute_decorators_before_servicethrows(apache::thrift::Cpp2RequestContext& /*requestCtx*/, const ::cpp2::StreamItem& /*p_foo*/) {}
  virtual void fbthrift_execute_decorators_after_servicethrows(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  virtual void fbthrift_execute_decorators_before_servicethrows2(apache::thrift::Cpp2RequestContext& /*requestCtx*/, const ::cpp2::StreamItem& /*p_foo*/) {}
  virtual void fbthrift_execute_decorators_after_servicethrows2(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  virtual void fbthrift_execute_decorators_before_boththrows(apache::thrift::Cpp2RequestContext& /*requestCtx*/, const ::cpp2::StreamItem& /*p_foo*/) {}
  virtual void fbthrift_execute_decorators_after_boththrows(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  virtual void fbthrift_execute_decorators_before_responseandstreamstreamthrows(apache::thrift::Cpp2RequestContext& /*requestCtx*/, ::std::int32_t /*p_foo*/) {}
  virtual void fbthrift_execute_decorators_after_responseandstreamstreamthrows(apache::thrift::Cpp2RequestContext& /*requestCtx*/, const ::cpp2::StreamItem& /*result*/) {}
  virtual void fbthrift_execute_decorators_before_responseandstreamservicethrows(apache::thrift::Cpp2RequestContext& /*requestCtx*/, ::std::int32_t /*p_foo*/) {}
  virtual void fbthrift_execute_decorators_after_responseandstreamservicethrows(apache::thrift::Cpp2RequestContext& /*requestCtx*/, const ::cpp2::StreamItem& /*result*/) {}
  virtual void fbthrift_execute_decorators_before_responseandstreamboththrows(apache::thrift::Cpp2RequestContext& /*requestCtx*/, ::std::int32_t /*p_foo*/) {}
  virtual void fbthrift_execute_decorators_after_responseandstreamboththrows(apache::thrift::Cpp2RequestContext& /*requestCtx*/, const ::cpp2::StreamItem& /*result*/) {}
};

namespace detail {
template <> struct TSchemaAssociation<::cpp2::PubSubStreamingService, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 781496598431143912;
  static constexpr ::std::string_view definitionKey = {"\x85\x5a\x6c\xd0\x63\x3a\xe4\x88\xda\x99\x4b\xc4\x8a\x26\x98\x36", 16};
};
}
} // namespace apache::thrift

namespace cpp2 {
using PubSubStreamingServiceSvIf [[deprecated("Use apache::thrift::ServiceHandler<PubSubStreamingService> instead")]] = ::apache::thrift::ServiceHandler<PubSubStreamingService>;
} // namespace cpp2

namespace cpp2 {
class PubSubStreamingServiceSvNull : public ::apache::thrift::ServiceHandler<PubSubStreamingService> {
 public:
};

class PubSubStreamingServiceAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessorBase {
 public:
  std::string_view getServiceName() override;
  void getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) override;
  using BaseAsyncProcessor = void;
 protected:
  ::apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>* iface_;
 public:
  void processSerializedCompressedRequestWithMetadata(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) override;
  void executeRequest(apache::thrift::ServerRequest&& serverRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata) override;
 public:
  using ProcessFuncs = GeneratedAsyncProcessorBase::ProcessFuncs<PubSubStreamingServiceAsyncProcessor>;
  using ProcessMap = GeneratedAsyncProcessorBase::ProcessMap<ProcessFuncs>;
  static const PubSubStreamingServiceAsyncProcessor::ProcessMap& getOwnProcessMap();
 private:
  static const PubSubStreamingServiceAsyncProcessor::ProcessMap kOwnProcessMap_;
 private:
  //
  // Service Methods
  //

  //
  // Method 'returnstream'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_returnstream(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_returnstream(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::ResponseAndServerStreamFactory return_returnstream(
      apache::thrift::ContextStack* ctx,
      folly::Executor::KeepAlive<> executor,
      ::apache::thrift::ServerStream<::cpp2::StreamItem>&& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_returnstream(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'returnstream'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'streamthrows'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_streamthrows(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_streamthrows(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::ResponseAndServerStreamFactory return_streamthrows(
      apache::thrift::ContextStack* ctx,
      folly::Executor::KeepAlive<> executor,
      ::apache::thrift::ServerStream<::cpp2::StreamItem>&& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_streamthrows(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'streamthrows'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'servicethrows'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_servicethrows(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_servicethrows(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::ResponseAndServerStreamFactory return_servicethrows(
      apache::thrift::ContextStack* ctx,
      folly::Executor::KeepAlive<> executor,
      ::apache::thrift::ServerStream<::cpp2::StreamItem>&& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_servicethrows(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'servicethrows'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'servicethrows2'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_servicethrows2(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_servicethrows2(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::ResponseAndServerStreamFactory return_servicethrows2(
      apache::thrift::ContextStack* ctx,
      folly::Executor::KeepAlive<> executor,
      ::apache::thrift::ServerStream<::cpp2::StreamItem>&& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_servicethrows2(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'servicethrows2'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'boththrows'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_boththrows(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_boththrows(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::ResponseAndServerStreamFactory return_boththrows(
      apache::thrift::ContextStack* ctx,
      folly::Executor::KeepAlive<> executor,
      ::apache::thrift::ServerStream<::cpp2::StreamItem>&& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_boththrows(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'boththrows'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'responseandstreamstreamthrows'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_responseandstreamstreamthrows(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_responseandstreamstreamthrows(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::ResponseAndServerStreamFactory return_responseandstreamstreamthrows(
      apache::thrift::ContextStack* ctx,
      folly::Executor::KeepAlive<> executor,
      ::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>&& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_responseandstreamstreamthrows(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'responseandstreamstreamthrows'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'responseandstreamservicethrows'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_responseandstreamservicethrows(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_responseandstreamservicethrows(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::ResponseAndServerStreamFactory return_responseandstreamservicethrows(
      apache::thrift::ContextStack* ctx,
      folly::Executor::KeepAlive<> executor,
      ::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>&& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_responseandstreamservicethrows(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'responseandstreamservicethrows'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'responseandstreamboththrows'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_responseandstreamboththrows(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_responseandstreamboththrows(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::ResponseAndServerStreamFactory return_responseandstreamboththrows(
      apache::thrift::ContextStack* ctx,
      folly::Executor::KeepAlive<> executor,
      ::apache::thrift::ResponseAndServerStream<::cpp2::StreamItem, ::std::int32_t>&& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_responseandstreamboththrows(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'responseandstreamboththrows'
  //

  //
  // End of Service Methods
  //
 public:
  PubSubStreamingServiceAsyncProcessor(::apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>* iface) :
      iface_(iface) {}
  ~PubSubStreamingServiceAsyncProcessor() override {}
};

} // namespace cpp2
