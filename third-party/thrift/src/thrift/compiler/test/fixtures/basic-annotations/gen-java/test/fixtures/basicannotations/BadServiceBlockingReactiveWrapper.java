/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.basicannotations;

import com.facebook.thrift.client.*;
import java.util.*;

public class BadServiceBlockingReactiveWrapper 
    implements BadService.Reactive {
    private final BadService _delegate;

    public BadServiceBlockingReactiveWrapper(BadService _delegate) {
        
        this._delegate = _delegate;
    }

    @java.lang.Override
    public void dispose() {
        _delegate.close();
    }

    @java.lang.Override
    public reactor.core.publisher.Mono<Integer> bar() {
        reactor.core.publisher.Mono<Integer> _m = reactor.core.publisher.Mono.create(_sink -> {
            try {
                reactor.util.context.ContextView _contextView = _sink.contextView();
                com.facebook.nifty.core.RequestContext
                    .tryContextView(_contextView)
                    .ifPresent(com.facebook.nifty.core.RequestContexts::setCurrentContext);
                _sink.success(_delegate.bar());
            } catch (Throwable _e) {
                _sink.error(_e);
            }
        });

        if (!com.facebook.thrift.util.resources.RpcResources.isForceExecutionOffEventLoop()) {
            _m = _m.subscribeOn(com.facebook.thrift.util.resources.RpcResources.getOffLoopScheduler());
        }

        return _m;
    }

    public class BadInteractionImpl implements BadInteraction {
        private BadService.BadInteraction _delegateInteraction;

        BadInteractionImpl(BadService.BadInteraction delegateInteraction) {
            this._delegateInteraction = delegateInteraction;
        }

        @java.lang.Override
        public reactor.core.publisher.Mono<Void> foo() {

                reactor.core.publisher.Mono<Void> _m = reactor.core.publisher.Mono.<Void>create(_sink -> {
                    try {
                        reactor.util.context.ContextView _contextView = _sink.contextView();
                        com.facebook.nifty.core.RequestContext
                            .tryContextView(_contextView)
                            .ifPresent(com.facebook.nifty.core.RequestContexts::setCurrentContext);
                        _delegateInteraction.foo();
                        _sink.success();
                    } catch (Throwable _e) {
                        throw reactor.core.Exceptions.propagate(_e);
                    }
                });

                if (!com.facebook.thrift.util.resources.RpcResources.isForceExecutionOffEventLoop()) {
                    _m = _m.subscribeOn(com.facebook.thrift.util.resources.RpcResources.getOffLoopScheduler());
                }

                return _m;
        }

        @java.lang.Override
        public reactor.core.publisher.Mono<Void> foo(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        @java.lang.Override
        public reactor.core.publisher.Mono<ResponseWrapper<Void>> fooWrapper(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        @java.lang.Override
        public void dispose() {}
    }

    public BadInteraction createBadInteraction() {
        return new BadInteractionImpl(_delegate.createBadInteraction());
    }
}
