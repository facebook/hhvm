/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This test compares the sequence of bits generated by the AVX2 implementation
 * to the uint64_t implementation. They should be identical.
 *
 * Wrapping includes in namespaces like this is nothing short of a hack, but it
 * makes it easy to write this test.
 */
#include <folly/portability/GTest.h>

#include <folly/random/xoshiro256pp.h>

namespace folly {

namespace {

#if defined(__AVX2__) && defined(__GNUC__)
template <typename result_type>
bool run_parity_test() {
  xoshiro256pp<result_type, __v4du> avx_rng;
  xoshiro256pp<result_type, uint64_t> scalar_rng;

  bool result = true;

  // Generate 16 MB
  for (size_t i = 0; i < (1024 * 1024 * 16 / sizeof(result_type)); i++) {
    result_type avx_value = avx_rng();
    result_type scalar_value = scalar_rng();
    result &= avx_value == scalar_value;
  }

  return result;
}
#else
template <typename result_type>
bool run_parity_test() {
  // AVX2 not supported, nohing to test.
  return true;
}
#endif

TEST(Xoshiro256ppAvxParityTest, TestIntegerParity64) {
  EXPECT_TRUE(run_parity_test<uint64_t>());
}
TEST(Xoshiro256ppAvxParityTest, TestIntegerParity32) {
  EXPECT_TRUE(run_parity_test<uint32_t>());
}
TEST(Xoshiro256ppAvxParityTest, TestIntegerParity16) {
  EXPECT_TRUE(run_parity_test<uint16_t>());
}
TEST(Xoshiro256ppAvxParityTest, TestIntegerParity8) {
  EXPECT_TRUE(run_parity_test<uint8_t>());
}

} // namespace

} // namespace folly

// #endif
