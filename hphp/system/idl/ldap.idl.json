{
    "preamble": "",
    "consts": [
    ],
    "funcs": [
        {
            "name": "ldap_connect",
            "desc": "Establishes a connection to a LDAP server on a specified hostname and port.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns a positive LDAP link identifier on success, or FALSE on error. When OpenLDAP 2.x.x is used, ldap_connect() will always return a resource as it does not actually connect but just initializes the connecting parameters. The actual connect happens with the next calls to ldap_* funcs, usually with ldap_bind().\n\nIf no arguments are specified then the link identifier of the already opened link will be returned."
            },
            "args": [
                {
                    "name": "hostname",
                    "type": "String",
                    "value": "null_string",
                    "desc": "If you are using OpenLDAP 2.x.x you can specify a URL instead of the hostname. To use LDAP with SSL, compile OpenLDAP 2.x.x with SSL support, configure PHP with SSL, and set this parameter as ldaps:\/\/hostname\/."
                },
                {
                    "name": "port",
                    "type": "Int32",
                    "value": "389",
                    "desc": "The port to connect to. Not used when using URLs."
                }
            ]
        },
        {
            "name": "ldap_explode_dn",
            "desc": "Splits the DN returned by ldap_get_dn() and breaks it up into its component parts. Each part is known as Relative Distinguished Name, or RDN.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns an array of all DN components. The first element in this array has count key and represents the number of returned values, next elements are numerically indexed DN components."
            },
            "args": [
                {
                    "name": "dn",
                    "type": "String",
                    "desc": "The distinguished name of an LDAP entity."
                },
                {
                    "name": "with_attrib",
                    "type": "Int32",
                    "desc": "Used to request if the RDNs are returned with only values or their attributes as well. To get RDNs with the attributes (i.e. in attribute=value format) set with_attrib to 0 and to get only values set it to 1."
                }
            ]
        },
        {
            "name": "ldap_dn2ufn",
            "desc": "Turns the specified dn, into a more user-friendly form, stripping off type names.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the user friendly name."
            },
            "args": [
                {
                    "name": "db",
                    "type": "String",
                    "desc": "The distinguished name of an LDAP entity."
                }
            ]
        },
        {
            "name": "ldap_err2str",
            "desc": "Returns the string error message explaining the error number errno. While LDAP errno numbers are standardized, different libraries return different or even localized textual error messages. Never check for a specific error message text, but always use an error number to check.",
            "flags": [
            ],
            "return": {
                "type": "String",
                "desc": "Returns the error message, as a string."
            },
            "args": [
                {
                    "name": "errnum",
                    "type": "Int32",
                    "desc": "The error number."
                }
            ]
        },
        {
            "name": "ldap_add",
            "desc": "Add entries in the LDAP directory.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource",
                    "desc": "An LDAP link identifier, returned by ldap_connect()."
                },
                {
                    "name": "dn",
                    "type": "String",
                    "desc": "The distinguished name of an LDAP entity."
                },
                {
                    "name": "entry",
                    "type": "VariantVec",
                    "desc": "An array that specifies the information about the entry. The values in the entries are indexed by individual attributes. In case of multiple values for an attribute, they are indexed using integers starting with 0."
                }
            ]
        },
        {
            "name": "ldap_mod_add",
            "desc": "Adds one or more attributes to the specified dn. It performs the modification at the attribute level as opposed to the object level. Object-level additions are done by the ldap_add() function.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource",
                    "desc": "An LDAP link identifier, returned by ldap_connect()."
                },
                {
                    "name": "dn",
                    "type": "String",
                    "desc": "The distinguished name of an LDAP entity."
                },
                {
                    "name": "entry",
                    "type": "VariantVec"
                }
            ]
        },
        {
            "name": "ldap_mod_del",
            "desc": "Removes one or more attributes from the specified dn. It performs the modification at the attribute level as opposed to the object level. Object-level deletions are done by the ldap_delete() function.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource",
                    "desc": "An LDAP link identifier, returned by ldap_connect()."
                },
                {
                    "name": "dn",
                    "type": "String",
                    "desc": "The distinguished name of an LDAP entity."
                },
                {
                    "name": "entry",
                    "type": "VariantVec"
                }
            ]
        },
        {
            "name": "ldap_mod_replace",
            "desc": "Replaces one or more attributes from the specified dn. It performs the modification at the attribute level as opposed to the object level. Object-level modifications are done by the ldap_modify() function.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource",
                    "desc": "An LDAP link identifier, returned by ldap_connect()."
                },
                {
                    "name": "dn",
                    "type": "String",
                    "desc": "The distinguished name of an LDAP entity."
                },
                {
                    "name": "entry",
                    "type": "VariantVec"
                }
            ]
        },
        {
            "name": "ldap_modify",
            "desc": "Modify the existing entries in the LDAP directory. The structure of the entry is same as in ldap_add().",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource",
                    "desc": "An LDAP link identifier, returned by ldap_connect()."
                },
                {
                    "name": "dn",
                    "type": "String",
                    "desc": "The distinguished name of an LDAP entity."
                },
                {
                    "name": "entry",
                    "type": "VariantVec"
                }
            ]
        },
        {
            "name": "ldap_bind",
            "desc": "Binds to the LDAP directory with specified RDN and password.\nIf bind_rdn and bind_password are not specified, an anonymous bind is attempted.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource",
                    "desc": "An LDAP link identifier, returned by ldap_connect()."
                },
                {
                    "name": "bind_rdn",
                    "type": "String",
                    "value": "null_string"
                },
                {
                    "name": "bind_password",
                    "type": "String",
                    "value": "null_string"
                }
            ]
        },
        {
            "name": "ldap_set_rebind_proc",
            "flags": [
            ],
            "return": {
                "type": "Boolean"
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource"
                },
                {
                    "name": "callback",
                    "type": "Variant"
                }
            ]
        },
        {
            "name": "ldap_sort",
            "flags": [
            ],
            "return": {
                "type": "Boolean"
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource"
                },
                {
                    "name": "result",
                    "type": "Resource"
                },
                {
                    "name": "sortfilter",
                    "type": "String"
                }
            ]
        },
        {
            "name": "ldap_start_tls",
            "flags": [
            ],
            "return": {
                "type": "Boolean"
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource"
                }
            ]
        },
        {
            "name": "ldap_unbind",
            "desc": "Unbinds from the LDAP directory.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource",
                    "desc": "An LDAP link identifier, returned by ldap_connect()."
                }
            ]
        },
        {
            "name": "ldap_get_option",
            "desc": "Sets retval to the value of the specified option.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource",
                    "desc": "An LDAP link identifier, returned by ldap_connect()."
                },
                {
                    "name": "option",
                    "type": "Int32",
                    "desc": "The parameter option can be one of: Option Type LDAP_OPT_DEREF integer LDAP_OPT_SIZELIMIT integer LDAP_OPT_TIMELIMIT integer LDAP_OPT_NETWORK_TIMEOUT integer LDAP_OPT_PROTOCOL_VERSION integer LDAP_OPT_ERROR_NUMBER integer LDAP_OPT_REFERRALS bool LDAP_OPT_RESTART bool LDAP_OPT_HOST_NAME string LDAP_OPT_ERROR_STRING string LDAP_OPT_MATCHED_DN string LDAP_OPT_SERVER_CONTROLS array LDAP_OPT_CLIENT_CONTROLS array"
                },
                {
                    "name": "retval",
                    "type": "Variant",
                    "desc": "This will be set to the option value.",
                    "ref": true
                }
            ]
        },
        {
            "name": "ldap_set_option",
            "desc": "Sets the value of the specified option to be newval.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "link",
                    "type": "Variant",
                    "desc": "An LDAP link identifier, returned by ldap_connect()."
                },
                {
                    "name": "option",
                    "type": "Int32",
                    "desc": null
                },
                {
                    "name": "newval",
                    "type": "Variant",
                    "desc": "The new value for the specified option."
                }
            ]
        },
        {
            "name": "ldap_close",
            "flags": [
            ],
            "return": {
                "type": "Boolean"
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource"
                }
            ]
        },
        {
            "name": "ldap_list",
            "desc": "Performs the search for a specified filter on the directory with the scope LDAP_SCOPE_ONELEVEL.\n\nLDAP_SCOPE_ONELEVEL means that the search should only return information that is at the level immediately below the base_dn given in the call. (Equivalent to typing \"ls\" and getting a list of files and folders in the current working directory.)",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns a search result identifier or FALSE on error."
            },
            "args": [
                {
                    "name": "link",
                    "type": "Variant",
                    "desc": "An LDAP link identifier, returned by ldap_connect()."
                },
                {
                    "name": "base_dn",
                    "type": "Variant",
                    "desc": "The base DN for the directory."
                },
                {
                    "name": "filter",
                    "type": "Variant"
                },
                {
                    "name": "attributes",
                    "type": "StringVec",
                    "value": "null_array",
                    "desc": "An array of the required attributes, e.g. array(\"mail\", \"sn\", \"cn\"). Note that the \"dn\" is always returned irrespective of which attributes types are requested.\n\nUsing this parameter is much more efficient than the default action (which is to return all attributes and their associated values). The use of this parameter should therefore be considered good practice."
                },
                {
                    "name": "attrsonly",
                    "type": "Int32",
                    "value": "0",
                    "desc": "Should be set to 1 if only attribute types are wanted. If set to 0 both attributes types and attribute values are fetched which is the default behaviour."
                },
                {
                    "name": "sizelimit",
                    "type": "Int32",
                    "value": "-1",
                    "desc": "Enables you to limit the count of entries fetched. Setting this to 0 means no limit.\n\nThis parameter can NOT override server-side preset sizelimit. You can set it lower though.\n\nSome directory server hosts will be configured to return no more than a preset number of entries. If this occurs, the server will indicate that it has only returned a partial results set. This also occurs if you use this parameter to limit the count of fetched entries."
                },
                {
                    "name": "timelimit",
                    "type": "Int32",
                    "value": "-1",
                    "desc": "Sets the number of seconds how long is spend on the search. Setting this to 0 means no limit.\n\nThis parameter can NOT override server-side preset timelimit. You can set it lower though."
                },
                {
                    "name": "deref",
                    "type": "Int32",
                    "value": "-1",
                    "desc": "Specifies how aliases should be handled during the search. It can be one of the following: LDAP_DEREF_NEVER - (default) aliases are never dereferenced. LDAP_DEREF_SEARCHING - aliases should be dereferenced during the search but not when locating the base object of the search. LDAP_DEREF_FINDING - aliases should be dereferenced when locating the base object but not during the search. LDAP_DEREF_ALWAYS - aliases should be dereferenced always."
                }
            ]
        },
        {
            "name": "ldap_read",
            "desc": "Performs the search for a specified filter on the directory with the scope LDAP_SCOPE_BASE. So it is equivalent to reading an entry from the directory.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns a search result identifier or FALSE on error."
            },
            "args": [
                {
                    "name": "link",
                    "type": "Variant",
                    "desc": "An LDAP link identifier, returned by ldap_connect()."
                },
                {
                    "name": "base_dn",
                    "type": "Variant",
                    "desc": "The base DN for the directory."
                },
                {
                    "name": "filter",
                    "type": "Variant",
                    "desc": "An empty filter is not allowed. If you want to retrieve absolutely all information for this entry, use a filter of objectClass=*. If you know which entry types are used on the directory server, you might use an appropriate filter such as objectClass=inetOrgPerson."
                },
                {
                    "name": "attributes",
                    "type": "StringVec",
                    "value": "null_array",
                    "desc": "An array of the required attributes, e.g. array(\"mail\", \"sn\", \"cn\"). Note that the \"dn\" is always returned irrespective of which attributes types are requested.\n\nUsing this parameter is much more efficient than the default action (which is to return all attributes and their associated values). The use of this parameter should therefore be considered good practice."
                },
                {
                    "name": "attrsonly",
                    "type": "Int32",
                    "value": "0",
                    "desc": "Should be set to 1 if only attribute types are wanted. If set to 0 both attributes types and attribute values are fetched which is the default behaviour."
                },
                {
                    "name": "sizelimit",
                    "type": "Int32",
                    "value": "-1",
                    "desc": "Enables you to limit the count of entries fetched. Setting this to 0 means no limit.\n\nThis parameter can NOT override server-side preset sizelimit. You can set it lower though.\n\nSome directory server hosts will be configured to return no more than a preset number of entries. If this occurs, the server will indicate that it has only returned a partial results set. This also occurs if you use this parameter to limit the count of fetched entries."
                },
                {
                    "name": "timelimit",
                    "type": "Int32",
                    "value": "-1",
                    "desc": "Sets the number of seconds how long is spend on the search. Setting this to 0 means no limit.\n\nThis parameter can NOT override server-side preset timelimit. You can set it lower though."
                },
                {
                    "name": "deref",
                    "type": "Int32",
                    "value": "-1",
                    "desc": "Specifies how aliases should be handled during the search. It can be one of the following: LDAP_DEREF_NEVER - (default) aliases are never dereferenced. LDAP_DEREF_SEARCHING - aliases should be dereferenced during the search but not when locating the base object of the search. LDAP_DEREF_FINDING - aliases should be dereferenced when locating the base object but not during the search. LDAP_DEREF_ALWAYS - aliases should be dereferenced always."
                }
            ]
        },
        {
            "name": "ldap_search",
            "desc": "Performs the search for a specified filter on the directory with the scope of LDAP_SCOPE_SUBTREE. This is equivalent to searching the entire directory.\n\nFrom 4.0.5 on it's also possible to do parallel searches. To do this you use an array of link identifiers, rather than a single identifier, as the first argument. If you don't want the same base DN and the same filter for all the searches, you can also use an array of base DNs and\/or an array of filters. Those arrays must be of the same size as the link identifier array since the first entries of the arrays are used for one search, the second entries are used for another, and so on. When doing parallel searches an array of search result identifiers is returned, except in case of error, then the entry corresponding to the search will be FALSE. This is very much like the value normally returned, except that a result identifier is always returned when a search was made. There are some rare cases where the normal search returns FALSE while the parallel search returns an identifier.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns a search result identifier or FALSE on error."
            },
            "args": [
                {
                    "name": "link",
                    "type": "Variant",
                    "desc": "An LDAP link identifier, returned by ldap_connect()."
                },
                {
                    "name": "base_dn",
                    "type": "Variant",
                    "desc": "The base DN for the directory."
                },
                {
                    "name": "filter",
                    "type": "Variant",
                    "desc": null
                },
                {
                    "name": "attributes",
                    "type": "StringVec",
                    "value": "null_array",
                    "desc": "An array of the required attributes, e.g. array(\"mail\", \"sn\", \"cn\"). Note that the \"dn\" is always returned irrespective of which attributes types are requested.\n\nUsing this parameter is much more efficient than the default action (which is to return all attributes and their associated values). The use of this parameter should therefore be considered good practice."
                },
                {
                    "name": "attrsonly",
                    "type": "Int32",
                    "value": "0",
                    "desc": "Should be set to 1 if only attribute types are wanted. If set to 0 both attributes types and attribute values are fetched which is the default behaviour."
                },
                {
                    "name": "sizelimit",
                    "type": "Int32",
                    "value": "-1",
                    "desc": "Enables you to limit the count of entries fetched. Setting this to 0 means no limit.\n\nThis parameter can NOT override server-side preset sizelimit. You can set it lower though.\n\nSome directory server hosts will be configured to return no more than a preset number of entries. If this occurs, the server will indicate that it has only returned a partial results set. This also occurs if you use this parameter to limit the count of fetched entries."
                },
                {
                    "name": "timelimit",
                    "type": "Int32",
                    "value": "-1",
                    "desc": "Sets the number of seconds how long is spend on the search. Setting this to 0 means no limit.\n\nThis parameter can NOT override server-side preset timelimit. You can set it lower though."
                },
                {
                    "name": "deref",
                    "type": "Int32",
                    "value": "-1",
                    "desc": "Specifies how aliases should be handled during the search. It can be one of the following: LDAP_DEREF_NEVER - (default) aliases are never dereferenced. LDAP_DEREF_SEARCHING - aliases should be dereferenced during the search but not when locating the base object of the search. LDAP_DEREF_FINDING - aliases should be dereferenced when locating the base object but not during the search. LDAP_DEREF_ALWAYS - aliases should be dereferenced always."
                }
            ]
        },
        {
            "name": "ldap_rename",
            "desc": "The entry specified by dn is renamed\/moved.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource",
                    "desc": "An LDAP link identifier, returned by ldap_connect()."
                },
                {
                    "name": "dn",
                    "type": "String",
                    "desc": "The distinguished name of an LDAP entity."
                },
                {
                    "name": "newrdn",
                    "type": "String",
                    "desc": "The new RDN."
                },
                {
                    "name": "newparent",
                    "type": "String",
                    "desc": "The new parent\/superior entry."
                },
                {
                    "name": "deleteoldrdn",
                    "type": "Boolean",
                    "desc": "If TRUE the old RDN value(s) is removed, else the old RDN value(s) is retained as non-distinguished values of the entry."
                }
            ]
        },
        {
            "name": "ldap_delete",
            "desc": "Deletes a particular entry in LDAP directory.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource",
                    "desc": "An LDAP link identifier, returned by ldap_connect()."
                },
                {
                    "name": "dn",
                    "type": "String",
                    "desc": "The distinguished name of an LDAP entity."
                }
            ]
        },
        {
            "name": "ldap_compare",
            "desc": "Compare value of attribute with value of same attribute in an LDAP directory entry.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns TRUE if value matches otherwise returns FALSE. Returns -1 on error."
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource",
                    "desc": "An LDAP link identifier, returned by ldap_connect()."
                },
                {
                    "name": "dn",
                    "type": "String",
                    "desc": "The distinguished name of an LDAP entity."
                },
                {
                    "name": "attribute",
                    "type": "String",
                    "desc": "The attribute name."
                },
                {
                    "name": "value",
                    "type": "String",
                    "desc": "The compared value."
                }
            ]
        },
        {
            "name": "ldap_errno",
            "desc": "Returns the standardized error number returned by the last LDAP command. This number can be converted into a textual error message using ldap_err2str().",
            "flags": [
            ],
            "return": {
                "type": "Int64",
                "desc": "Return the LDAP error number of the last LDAP command for this link."
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource",
                    "desc": "An LDAP link identifier, returned by ldap_connect()."
                }
            ]
        },
        {
            "name": "ldap_error",
            "desc": "Returns the string error message explaining the error generated by the last LDAP command for the given link_identifier. While LDAP errno numbers are standardized, different libraries return different or even localized textual error messages. Never check for a specific error message text, but always use an error number to check.\n\nUnless you lower your warning level in your php.ini sufficiently or prefix your LDAP commands with @ (at) characters to suppress warning output, the errors generated will also show up in your HTML output.",
            "flags": [
            ],
            "return": {
                "type": "String",
                "desc": "Returns string error message."
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource",
                    "desc": "An LDAP link identifier, returned by ldap_connect()."
                }
            ]
        },
        {
            "name": "ldap_get_dn",
            "desc": "Finds out the DN of an entry in the result.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the DN of the result entry and FALSE on error."
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource",
                    "desc": "An LDAP link identifier, returned by ldap_connect()."
                },
                {
                    "name": "result_entry",
                    "type": "Resource"
                }
            ]
        },
        {
            "name": "ldap_count_entries",
            "desc": "Returns the number of entries stored in the result of previous search operations.",
            "flags": [
            ],
            "return": {
                "type": "Int64",
                "desc": "Returns number of entries in the result or FALSE on error."
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource",
                    "desc": "An LDAP link identifier, returned by ldap_connect()."
                },
                {
                    "name": "result",
                    "type": "Resource",
                    "desc": "The internal LDAP result."
                }
            ]
        },
        {
            "name": "ldap_get_entries",
            "desc": "Reads multiple entries from the given result, and then reading the attributes and multiple values.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns a complete result information in a multi-dimensional array on success and FALSE on error.\n\nThe structure of the array is as follows. The attribute index is converted to lowercase. (Attributes are case-insensitive for directory servers, but not when used as array indices.)"
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource",
                    "desc": "An LDAP link identifier, returned by ldap_connect()."
                },
                {
                    "name": "result",
                    "type": "Resource"
                }
            ]
        },
        {
            "name": "ldap_first_entry",
            "desc": "Returns the entry identifier for first entry in the result. This entry identifier is then supplied to ldap_next_entry() routine to get successive entries from the result.\n\nEntries in the LDAP result are read sequentially using the ldap_first_entry() and ldap_next_entry() functions.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the result entry identifier for the first entry on success and FALSE on error."
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource",
                    "desc": "An LDAP link identifier, returned by ldap_connect()."
                },
                {
                    "name": "result",
                    "type": "Resource"
                }
            ]
        },
        {
            "name": "ldap_next_entry",
            "desc": "Retrieve the entries stored in the result. Successive calls to the ldap_next_entry() return entries one by one till there are no more entries. The first call to ldap_next_entry() is made after the call to ldap_first_entry() with the result_entry_identifier as returned from the ldap_first_entry().",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns entry identifier for the next entry in the result whose entries are being read starting with ldap_first_entry(). If there are no more entries in the result then it returns FALSE."
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource",
                    "desc": "An LDAP link identifier, returned by ldap_connect()."
                },
                {
                    "name": "result_entry",
                    "type": "Resource"
                }
            ]
        },
        {
            "name": "ldap_get_attributes",
            "desc": "Reads attributes and values from an entry in the search result.\n\nHaving located a specific entry in the directory, you can find out what information is held for that entry by using this call. You would use this call for an application which \"browses\" directory entries and\/or where you do not know the structure of the directory entries. In many applications you will be searching for a specific attribute such as an email address or a surname, and won't care what other data is held.",
            "flags": [
            ],
            "return": {
                "type": "StringVec",
                "desc": "Returns a complete entry information in a multi-dimensional array on success and FALSE on error."
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource",
                    "desc": "An LDAP link identifier, returned by ldap_connect()."
                },
                {
                    "name": "result_entry",
                    "type": "Resource"
                }
            ]
        },
        {
            "name": "ldap_first_attribute",
            "desc": "Gets the first attribute in the given entry. Remaining attributes are retrieved by calling ldap_next_attribute() successively.\n\nSimilar to reading entries, attributes are also read one by one from a particular entry.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the first attribute in the entry on success and FALSE on error."
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource",
                    "desc": "An LDAP link identifier, returned by ldap_connect()."
                },
                {
                    "name": "result_entry",
                    "type": "Resource"
                }
            ]
        },
        {
            "name": "ldap_next_attribute",
            "desc": "Retrieves the attributes in an entry. The first call to ldap_next_attribute() is made with the result_entry_identifier returned from ldap_first_attribute().",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the next attribute in an entry on success and FALSE on error."
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource",
                    "desc": "An LDAP link identifier, returned by ldap_connect()."
                },
                {
                    "name": "result_entry",
                    "type": "Resource"
                }
            ]
        },
        {
            "name": "ldap_first_reference",
            "flags": [
            ],
            "return": {
                "type": "Variant"
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource"
                },
                {
                    "name": "result",
                    "type": "Resource"
                }
            ]
        },
        {
            "name": "ldap_next_reference",
            "flags": [
            ],
            "return": {
                "type": "Variant"
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource"
                },
                {
                    "name": "result_entry",
                    "type": "Resource"
                }
            ]
        },
        {
            "name": "ldap_parse_reference",
            "flags": [
            ],
            "return": {
                "type": "Boolean"
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource"
                },
                {
                    "name": "result_entry",
                    "type": "Resource"
                },
                {
                    "name": "referrals",
                    "type": "Variant",
                    "ref": true
                }
            ]
        },
        {
            "name": "ldap_parse_result",
            "flags": [
            ],
            "return": {
                "type": "Boolean"
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource"
                },
                {
                    "name": "result",
                    "type": "Resource"
                },
                {
                    "name": "errcode",
                    "type": "Variant",
                    "ref": true
                },
                {
                    "name": "matcheddn",
                    "type": "Variant",
                    "value": "null",
                    "ref": true
                },
                {
                    "name": "errmsg",
                    "type": "Variant",
                    "value": "null",
                    "ref": true
                },
                {
                    "name": "referrals",
                    "type": "Variant",
                    "value": "null",
                    "ref": true
                }
            ]
        },
        {
            "name": "ldap_free_result",
            "desc": "Frees up the memory allocated internally to store the result. All result memory will be automatically freed when the script terminates.\n\nTypically all the memory allocated for the LDAP result gets freed at the end of the script. In case the script is making successive searches which return large result sets, ldap_free_result() could be called to keep the runtime memory usage by the script low.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "result",
                    "type": "Resource"
                }
            ]
        },
        {
            "name": "ldap_get_values_len",
            "desc": "Reads all the values of the attribute in the entry in the result.\n\nThis function is used exactly like ldap_get_values() except that it handles binary data and not string data.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns an array of values for the attribute on success and FALSE on error. Individual values are accessed by integer index in the array. The first index is 0. The number of values can be found by indexing \"count\" in the resultant array."
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource",
                    "desc": "An LDAP link identifier, returned by ldap_connect()."
                },
                {
                    "name": "result_entry",
                    "type": "Resource"
                },
                {
                    "name": "attribute",
                    "type": "String"
                }
            ]
        },
        {
            "name": "ldap_get_values",
            "desc": "Reads all the values of the attribute in the entry in the result.\n\nThis call needs a result_entry_identifier, so needs to be preceded by one of the ldap search calls and one of the calls to get an individual entry.\n\nYou application will either be hard coded to look for certain attributes (such as \"surname\" or \"mail\") or you will have to use the ldap_get_attributes() call to work out what attributes exist for a given entry.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns an array of values for the attribute on success and FALSE on error. The number of values can be found by indexing \"count\" in the resultant array. Individual values are accessed by integer index in the array. The first index is 0.\n\nLDAP allows more than one entry for an attribute, so it can, for example, store a number of email addresses for one person's directory entry all labeled with the attribute \"mail\" return_value[\"count\"] = number of values for attribute return_value[0] = first value of attribute return_value[i] = ith value of attribute"
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource",
                    "desc": "An LDAP link identifier, returned by ldap_connect()."
                },
                {
                    "name": "result_entry",
                    "type": "Resource"
                },
                {
                    "name": "attribute",
                    "type": "String"
                }
            ]
        },
        {
            "name": "ldap_control_paged_result",
            "desc": "Enable LDAP pagination by sending the pagination control (page size, cookie...).",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource",
                    "desc": "An LDAP link identifier, returned by ldap_connect()."
                },
                {
                    "name": "pagesize",
                    "type": "Int32",
                    "desc": "The number of entries by page."
                },
                {
                    "name": "iscritical",
                    "type": "Boolean",
                    "desc": "Indicates whether the pagination is critical of not. If true and if the server doesn't support pagination, the search will return no result.",
                    "value": "false"
                },
                {
                    "name": "cookie",
                    "type": "String",
                    "desc": "An opaque structure sent by the server.",
                    "value": "\"\""
                }
            ]
        },
        {
            "name": "ldap_control_paged_result_response",
            "desc": "Retrieve the pagination information send by the server.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "link",
                    "type": "Resource",
                    "desc": "An LDAP link identifier, returned by ldap_connect()."
                },
                {
                    "name": "result",
                    "type": "Resource"
                },
                {
                    "name": "cookie",
                    "type": "Variant",
                    "desc": "An opaque structure sent by the server.",
                    "value": "null",
                    "ref": true
                },
                {
                    "name": "estimated",
                    "type": "Variant",
                    "desc": "The estimated number of entries to retrieve.",
                    "value": "null",
                    "ref": true
                }
            ]
        }

    ],
    "classes": [
    ]
}
