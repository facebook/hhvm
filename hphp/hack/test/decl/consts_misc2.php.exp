[("\\TestC",
  (Shallow_decl_defs.Class
     { Shallow_decl_defs.sc_mode = Mstrict; sc_final = true;
       sc_abstract = true; sc_is_xhp = false; sc_internal = false;
       sc_has_xhp_keyword = false; sc_kind = (Cclass Abstract);
       sc_module = None; sc_name = ([3:22-27], "\\TestC"); sc_tparams = [];
       sc_extends = []; sc_uses = []; sc_xhp_attr_uses = [];
       sc_xhp_enum_values = {}; sc_xhp_marked_empty = false;
       sc_req_extends = []; sc_req_implements = []; sc_req_constraints = [];
       sc_implements = []; sc_support_dynamic_type = false;
       sc_consts =
       [{ Shallow_decl_defs.scc_abstract = Typing_defs.CCConcrete;
          scc_name = ([5:13-14], "i");
          scc_type = (Rhint ([5:9-12]), (Tprim Tint)); scc_refs = [];
          scc_value = None }
         ];
       sc_typeconsts = []; sc_props = []; sc_sprops = [];
       sc_constructor = None;
       sc_static_methods =
       [{ Shallow_decl_defs.sm_name = ([4:26-27], "i");
          sm_type =
          (Rwitness_from_decl ([4:26-27]),
           (Tfun
              { ft_tparams = []; ft_where_constraints = [];
                ft_params =
                [{ fp_pos = [4:32-34]; fp_name = (Some "$x");
                   fp_type = (Rhint ([4:28-31]), (Tprim Tint));
                   fp_flags =
                   { Typing_defs_flags.FunParam.accept_disposable = false;
                     inout = false; is_optional = false; readonly = false;
                     ignore_readonly_error = false; splat = false;
                     named = false };
                   fp_def_value = None }
                  ];
                ft_implicit_params =
                { capability =
                  (CapTy
                     (Rhint ([4:35-48]),
                      (Tintersection
                         [(Rhint ([4:36-47]),
                           (Tapply (
                              ([4:36-47], "\\HH\\Contexts\\write_props"), 
                              [])))
                           ])))
                  };
                ft_ret = (Rhint ([4:50-53]), (Tprim Tint));
                ft_flags =
                { Typing_defs_flags.Fun.return_disposable = false;
                  async = false; generator = false; fun_kind = FSync;
                  is_function_pointer = false; returns_readonly = false;
                  readonly_this = false; support_dynamic_type = false;
                  is_memoized = false; variadic = false };
                ft_require_package = None; ft_instantiated = true }));
          sm_visibility = Public; sm_deprecated = None;
          sm_flags =
          { Shallow_decl_defs.MethodFlags.abstract = false; final = false;
            override = false; dynamicallycallable = false;
            php_std_lib = false; support_dynamic_type = false;
            no_auto_likes = false; needs_concrete = false };
          sm_attributes = []; sm_sort_text = None }
         ];
       sc_methods = []; sc_user_attributes = []; sc_enum_type = None;
       sc_docs_url = None; sc_package = None }));
  ("\\TestE",
   (Shallow_decl_defs.Class
      { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
        sc_abstract = false; sc_is_xhp = false; sc_internal = false;
        sc_has_xhp_keyword = false; sc_kind = Cenum; sc_module = None;
        sc_name = ([7:6-11], "\\TestE"); sc_tparams = [];
        sc_extends =
        [(Rhint ([7:6-11]),
          (Tapply (([7:6-11], "\\HH\\BuiltinEnum"),
             [(Rhint ([7:6-11]), (Tapply (([7:6-11], "\\TestE"), [])))])))
          ];
        sc_uses = []; sc_xhp_attr_uses = []; sc_xhp_enum_values = {};
        sc_xhp_marked_empty = false; sc_req_extends = [];
        sc_req_implements = []; sc_req_constraints = []; sc_implements = [];
        sc_support_dynamic_type = false;
        sc_consts =
        [{ Shallow_decl_defs.scc_abstract = Typing_defs.CCConcrete;
           scc_name = ([7:25-26], "X");
           scc_type = (Rwitness_from_decl ([7:29-30]), (Tprim Tint));
           scc_refs = []; scc_value = None };
          { Shallow_decl_defs.scc_abstract = Typing_defs.CCConcrete;
            scc_name = ([7:32-33], "Y");
            scc_type = (Rwitness_from_decl ([7:36-37]), (Tprim Tint));
            scc_refs = []; scc_value = None }
          ];
        sc_typeconsts = []; sc_props = []; sc_sprops = [];
        sc_constructor = None; sc_static_methods = []; sc_methods = [];
        sc_user_attributes = [];
        sc_enum_type =
        (Some { Typing_defs.te_base = (Rhint ([7:13-16]), (Tprim Tint));
                te_constraint = (Some (Rhint ([7:20-23]), (Tprim Tint)));
                te_includes = [] });
        sc_docs_url = None; sc_package = None }));
  ("\\TestRefs1",
   (Shallow_decl_defs.Class
      { Shallow_decl_defs.sc_mode = Mstrict; sc_final = true;
        sc_abstract = true; sc_is_xhp = false; sc_internal = false;
        sc_has_xhp_keyword = false; sc_kind = (Cclass Abstract);
        sc_module = None; sc_name = ([9:22-31], "\\TestRefs1");
        sc_tparams = []; sc_extends = []; sc_uses = [];
        sc_xhp_attr_uses = []; sc_xhp_enum_values = {};
        sc_xhp_marked_empty = false; sc_req_extends = [];
        sc_req_implements = []; sc_req_constraints = []; sc_implements = [];
        sc_support_dynamic_type = false;
        sc_consts =
        [{ Shallow_decl_defs.scc_abstract = Typing_defs.CCConcrete;
           scc_name = ([10:15-16], "A");
           scc_type = (Rhint ([10:9-14]), Tmixed);
           scc_refs = [((Typing_defs.From "\\TestE"), "X")]; scc_value = None
           };
          { Shallow_decl_defs.scc_abstract = Typing_defs.CCConcrete;
            scc_name = ([11:15-16], "B");
            scc_type = (Rhint ([11:9-14]), Tmixed);
            scc_refs =
            [((Typing_defs.From "\\TestE"), "X");
              ((Typing_defs.From "\\TestE"), "Y")];
            scc_value = None };
          { Shallow_decl_defs.scc_abstract = Typing_defs.CCConcrete;
            scc_name = ([12:15-16], "C");
            scc_type = (Rhint ([12:9-14]), Tmixed);
            scc_refs = [((Typing_defs.From "\\TestE"), "X")];
            scc_value = None };
          { Shallow_decl_defs.scc_abstract = Typing_defs.CCConcrete;
            scc_name = ([13:15-16], "D");
            scc_type = (Rhint ([13:9-14]), Tmixed);
            scc_refs = [((Typing_defs.From "\\TestE"), "X")];
            scc_value = None };
          { Shallow_decl_defs.scc_abstract = Typing_defs.CCConcrete;
            scc_name = ([14:15-16], "E");
            scc_type = (Rhint ([14:9-14]), Tmixed);
            scc_refs = [((Typing_defs.From "\\TestC"), "class")];
            scc_value = None }
          ];
        sc_typeconsts = []; sc_props = []; sc_sprops = [];
        sc_constructor = None; sc_static_methods = []; sc_methods = [];
        sc_user_attributes = []; sc_enum_type = None; sc_docs_url = None;
        sc_package = None }));
  ("\\TestRefs2",
   (Shallow_decl_defs.Class
      { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
        sc_abstract = false; sc_is_xhp = false; sc_internal = false;
        sc_has_xhp_keyword = false; sc_kind = (Cenum_class Concrete);
        sc_module = None; sc_name = ([17:12-21], "\\TestRefs2");
        sc_tparams = [];
        sc_extends =
        [(Rhint ([17:12-21]),
          (Tapply (([17:12-21], "\\HH\\BuiltinEnumClass"),
             [(Rhint ([17:12-21]),
               (Tapply (([17:12-21], "\\HH\\MemberOf"),
                  [(Rhint ([17:12-21]),
                    (Tapply (([17:12-21], "\\TestRefs2"), [])));
                    (Rhint ([17:22-27]), Tmixed)]
                  )))
               ]
             )))
          ];
        sc_uses = []; sc_xhp_attr_uses = []; sc_xhp_enum_values = {};
        sc_xhp_marked_empty = false; sc_req_extends = [];
        sc_req_implements = []; sc_req_constraints = []; sc_implements = [];
        sc_support_dynamic_type = false;
        sc_consts =
        [{ Shallow_decl_defs.scc_abstract = Typing_defs.CCConcrete;
           scc_name = ([18:10-12], "K1");
           scc_type =
           (Rhint ([18:10-12]),
            (Tapply (([18:10-12], "\\HH\\MemberOf"),
               [(Rhint ([18:10-12]),
                 (Tapply (([18:10-12], "\\TestRefs2"), [])));
                 (Rhint ([18:3-9]), (Tprim Tstring))]
               )));
           scc_refs = []; scc_value = None };
          { Shallow_decl_defs.scc_abstract = Typing_defs.CCConcrete;
            scc_name = ([19:10-12], "K2");
            scc_type =
            (Rhint ([19:10-12]),
             (Tapply (([19:10-12], "\\HH\\MemberOf"),
                [(Rhint ([19:10-12]),
                  (Tapply (([19:10-12], "\\TestRefs2"), [])));
                  (Rhint ([19:3-9]), (Tprim Tstring))]
                )));
            scc_refs = []; scc_value = None };
          { Shallow_decl_defs.scc_abstract = Typing_defs.CCConcrete;
            scc_name = ([20:9-10], "B");
            scc_type =
            (Rhint ([20:9-10]),
             (Tapply (([20:9-10], "\\HH\\MemberOf"),
                [(Rhint ([20:9-10]),
                  (Tapply (([20:9-10], "\\TestRefs2"), [])));
                  (Rhint ([20:3-8]), Tmixed)]
                )));
            scc_refs =
            [(Typing_defs.Self, "K2");
              ((Typing_defs.From "\\TestRefs2"), "K1")];
            scc_value = None };
          { Shallow_decl_defs.scc_abstract = Typing_defs.CCConcrete;
            scc_name = ([21:9-10], "F");
            scc_type =
            (Rhint ([21:9-10]),
             (Tapply (([21:9-10], "\\HH\\MemberOf"),
                [(Rhint ([21:9-10]),
                  (Tapply (([21:9-10], "\\TestRefs2"), [])));
                  (Rhint ([21:3-8]), Tmixed)]
                )));
            scc_refs = [((Typing_defs.From "\\TestC"), "i")];
            scc_value = None };
          { Shallow_decl_defs.scc_abstract = Typing_defs.CCConcrete;
            scc_name = ([22:9-10], "G");
            scc_type =
            (Rhint ([22:9-10]),
             (Tapply (([22:9-10], "\\HH\\MemberOf"),
                [(Rhint ([22:9-10]),
                  (Tapply (([22:9-10], "\\TestRefs2"), [])));
                  (Rhint ([22:3-8]), Tmixed)]
                )));
            scc_refs = [((Typing_defs.From "\\TestC"), "i")];
            scc_value = None };
          { Shallow_decl_defs.scc_abstract = Typing_defs.CCConcrete;
            scc_name = ([23:9-10], "H");
            scc_type =
            (Rhint ([23:9-10]),
             (Tapply (([23:9-10], "\\HH\\MemberOf"),
                [(Rhint ([23:9-10]),
                  (Tapply (([23:9-10], "\\TestRefs2"), [])));
                  (Rhint ([23:3-8]), Tmixed)]
                )));
            scc_refs = [((Typing_defs.From "\\TestC"), "i")];
            scc_value = None }
          ];
        sc_typeconsts = []; sc_props = []; sc_sprops = [];
        sc_constructor = None; sc_static_methods = []; sc_methods = [];
        sc_user_attributes =
        [{ Typing_defs_core.ua_name = ([17:12-21], "__EnumClass");
           ua_params = []; ua_raw_val = None }
          ];
        sc_enum_type =
        (Some { Typing_defs.te_base = (Rhint ([17:22-27]), Tmixed);
                te_constraint = None; te_includes = [] });
        sc_docs_url = None; sc_package = None }))
  ]
