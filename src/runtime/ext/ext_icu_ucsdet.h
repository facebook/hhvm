/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010 Facebook, Inc. (http://www.facebook.com)          |
   | Copyright (c) 1997-2010 The PHP Group                                |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/

#ifndef __EXT_ICU_UCSDET_H__
#define __EXT_ICU_UCSDET_H__

// >>>>>> Generated by idl.php. Do NOT modify. <<<<<<

#include <runtime/base/base_includes.h>

// Avoid dragging in the icu namespace.
#ifndef U_USING_ICU_NAMESPACE
#define U_USING_ICU_NAMESPACE 0
#endif

#include <unicode/ucsdet.h>
#include <unicode/utypes.h>
namespace HPHP {
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// class EncodingDetector

FORWARD_DECLARE_CLASS(EncodingDetector);
class c_EncodingDetector : public ExtObjectData {
 public:
  BEGIN_CLASS_MAP(EncodingDetector)
  END_CLASS_MAP(EncodingDetector)
  DECLARE_CLASS(EncodingDetector, EncodingDetector, ObjectData)
  DECLARE_INVOKES_FROM_EVAL

  // need to implement
  public: c_EncodingDetector();
  public: ~c_EncodingDetector();
  public: void t___construct();
  DECLARE_METHOD_INVOKE_HELPERS(__construct);
  public: void t_settext(CStrRef text);
  DECLARE_METHOD_INVOKE_HELPERS(settext);
  public: void t_setdeclaredencoding(CStrRef text);
  DECLARE_METHOD_INVOKE_HELPERS(setdeclaredencoding);
  public: Object t_detect();
  DECLARE_METHOD_INVOKE_HELPERS(detect);
  public: Array t_detectall();
  DECLARE_METHOD_INVOKE_HELPERS(detectall);
  public: Variant t___destruct();
  DECLARE_METHOD_INVOKE_HELPERS(__destruct);

  // implemented by HPHP
  public: c_EncodingDetector *create();
  public: void dynConstruct(CArrRef Params);
  public: void dynConstructFromEval(Eval::VariableEnvironment &env,
                                    const Eval::FunctionCallExpression *call);
  public: void getConstructor(MethodCallPackage &mcp);
  public: virtual void destruct();

  private: UCharsetDetector *m_encoding_detector;
};

///////////////////////////////////////////////////////////////////////////////
// class EncodingMatch

FORWARD_DECLARE_CLASS(EncodingMatch);
class c_EncodingMatch : public ExtObjectData {
 public:
  BEGIN_CLASS_MAP(EncodingMatch)
  END_CLASS_MAP(EncodingMatch)
  DECLARE_CLASS(EncodingMatch, EncodingMatch, ObjectData)
  DECLARE_INVOKES_FROM_EVAL

  // need to implement
  public: c_EncodingMatch();
  public: ~c_EncodingMatch();
  public: void t___construct();
  DECLARE_METHOD_INVOKE_HELPERS(__construct);
  public: bool t_isvalid();
  DECLARE_METHOD_INVOKE_HELPERS(isvalid);
  public: String t_getencoding();
  DECLARE_METHOD_INVOKE_HELPERS(getencoding);
  public: int t_getconfidence();
  DECLARE_METHOD_INVOKE_HELPERS(getconfidence);
  public: String t_getlanguage();
  DECLARE_METHOD_INVOKE_HELPERS(getlanguage);
  public: String t_getutf8();
  DECLARE_METHOD_INVOKE_HELPERS(getutf8);
  public: Variant t___destruct();
  DECLARE_METHOD_INVOKE_HELPERS(__destruct);

  // implemented by HPHP
  public: c_EncodingMatch *create();
  public: void dynConstruct(CArrRef Params);
  public: void dynConstructFromEval(Eval::VariableEnvironment &env,
                                    const Eval::FunctionCallExpression *call);
  public: void getConstructor(MethodCallPackage &mcp);
  public: virtual void destruct();

  public: const UCharsetMatch *m_encoding_match;
  private: void validate();
};

///////////////////////////////////////////////////////////////////////////////
}

#endif // __EXT_ICU_UCSDET_H__
