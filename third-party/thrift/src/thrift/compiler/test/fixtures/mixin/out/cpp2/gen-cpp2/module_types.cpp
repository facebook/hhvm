/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/mixin/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/mixin/gen-cpp2/module_types.tcc"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "thrift/compiler/test/fixtures/mixin/gen-cpp2/module_data.h"
[[maybe_unused]] static constexpr std::string_view kModuleName = "module";



namespace cpp2 {

std::string_view Mixin1::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Mixin1>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view Mixin1::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<Mixin1>::name;
}

Mixin1::Mixin1(const Mixin1&) = default;
Mixin1& Mixin1::operator=(const Mixin1&) = default;
Mixin1::Mixin1() {
}


Mixin1::~Mixin1() {}

Mixin1::Mixin1([[maybe_unused]] Mixin1&& other) noexcept :
    __fbthrift_field_field1(std::move(other.__fbthrift_field_field1)),
    __isset(other.__isset) {
}

Mixin1& Mixin1::operator=([[maybe_unused]] Mixin1&& other) noexcept {
    this->__fbthrift_field_field1 = std::move(other.__fbthrift_field_field1);
    __isset = other.__isset;
    return *this;
}


Mixin1::Mixin1(apache::thrift::FragileConstructor, ::std::string field1__arg) :
    __fbthrift_field_field1(std::move(field1__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
}

void Mixin1::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_field1 = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  __isset = {};
}

void Mixin1::__fbthrift_clear_terse_fields() {
}

bool Mixin1::__fbthrift_is_empty() const {
  return false;
}

bool Mixin1::operator==([[maybe_unused]] const Mixin1& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool Mixin1::operator<([[maybe_unused]] const Mixin1& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] Mixin1& a, [[maybe_unused]] Mixin1& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_field1, b.__fbthrift_field_field1);
  swap(a.__isset, b.__isset);
}


} // namespace cpp2


namespace cpp2 {

std::string_view Mixin2::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Mixin2>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view Mixin2::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<Mixin2>::name;
}

Mixin2::Mixin2(const Mixin2&) = default;
Mixin2& Mixin2::operator=(const Mixin2&) = default;
Mixin2::Mixin2() {
}


Mixin2::~Mixin2() {}

Mixin2::Mixin2([[maybe_unused]] Mixin2&& other) noexcept :
    __fbthrift_field_m1(std::move(other.__fbthrift_field_m1)),
    __fbthrift_field_field2(std::move(other.__fbthrift_field_field2)),
    __isset(other.__isset) {
}

Mixin2& Mixin2::operator=([[maybe_unused]] Mixin2&& other) noexcept {
    this->__fbthrift_field_m1 = std::move(other.__fbthrift_field_m1);
    this->__fbthrift_field_field2 = std::move(other.__fbthrift_field_field2);
    __isset = other.__isset;
    return *this;
}


Mixin2::Mixin2(apache::thrift::FragileConstructor, ::cpp2::Mixin1 m1__arg, ::std::string field2__arg) :
    __fbthrift_field_m1(std::move(m1__arg)),
    __fbthrift_field_field2(std::move(field2__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}

void Mixin2::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::clear(this->__fbthrift_field_m1);
  this->__fbthrift_field_field2 = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  __isset = {};
}

void Mixin2::__fbthrift_clear_terse_fields() {
}

bool Mixin2::__fbthrift_is_empty() const {
  return false;
}

bool Mixin2::operator==([[maybe_unused]] const Mixin2& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool Mixin2::operator<([[maybe_unused]] const Mixin2& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::cpp2::Mixin1& Mixin2::get_m1() const& {
  return __fbthrift_field_m1;
}

::cpp2::Mixin1 Mixin2::get_m1() && {
  return static_cast<::cpp2::Mixin1&&>(__fbthrift_field_m1);
}

const ::std::string* Mixin2::get_field2() const& {
  return field2_ref().has_value() ? std::addressof(__fbthrift_field_field2) : nullptr;
}

::std::string* Mixin2::get_field2() & {
  return field2_ref().has_value() ? std::addressof(__fbthrift_field_field2) : nullptr;
}

void swap([[maybe_unused]] Mixin2& a, [[maybe_unused]] Mixin2& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_m1, b.__fbthrift_field_m1);
  swap(a.__fbthrift_field_field2, b.__fbthrift_field_field2);
  swap(a.__isset, b.__isset);
}

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Mixin2,
        ::apache::thrift::type_class::structure,
        ::cpp2::Mixin1>,
    "inconsistent use of json option");

} // namespace cpp2


namespace cpp2 {

std::string_view Mixin3Base::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Mixin3Base>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view Mixin3Base::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<Mixin3Base>::name;
}

Mixin3Base::Mixin3Base(const Mixin3Base&) = default;
Mixin3Base& Mixin3Base::operator=(const Mixin3Base&) = default;
Mixin3Base::Mixin3Base() {
}


Mixin3Base::~Mixin3Base() {}

Mixin3Base::Mixin3Base([[maybe_unused]] Mixin3Base&& other) noexcept :
    __fbthrift_field_field3(std::move(other.__fbthrift_field_field3)),
    __isset(other.__isset) {
}

Mixin3Base& Mixin3Base::operator=([[maybe_unused]] Mixin3Base&& other) noexcept {
    this->__fbthrift_field_field3 = std::move(other.__fbthrift_field_field3);
    __isset = other.__isset;
    return *this;
}


Mixin3Base::Mixin3Base(apache::thrift::FragileConstructor, ::std::string field3__arg) :
    __fbthrift_field_field3(std::move(field3__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
}

void Mixin3Base::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_field3 = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  __isset = {};
}

void Mixin3Base::__fbthrift_clear_terse_fields() {
}

bool Mixin3Base::__fbthrift_is_empty() const {
  return false;
}

bool Mixin3Base::operator==([[maybe_unused]] const Mixin3Base& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool Mixin3Base::operator<([[maybe_unused]] const Mixin3Base& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] Mixin3Base& a, [[maybe_unused]] Mixin3Base& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_field3, b.__fbthrift_field_field3);
  swap(a.__isset, b.__isset);
}


} // namespace cpp2


namespace cpp2 {

std::string_view Foo::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Foo>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view Foo::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<Foo>::name;
}

Foo::Foo(const Foo&) = default;
Foo& Foo::operator=(const Foo&) = default;
Foo::Foo() {
}


Foo::~Foo() {}

Foo::Foo([[maybe_unused]] Foo&& other) noexcept :
    __fbthrift_field_field4(std::move(other.__fbthrift_field_field4)),
    __fbthrift_field_m2(std::move(other.__fbthrift_field_m2)),
    __fbthrift_field_m3(std::move(other.__fbthrift_field_m3)),
    __isset(other.__isset) {
}

Foo& Foo::operator=([[maybe_unused]] Foo&& other) noexcept {
    this->__fbthrift_field_field4 = std::move(other.__fbthrift_field_field4);
    this->__fbthrift_field_m2 = std::move(other.__fbthrift_field_m2);
    this->__fbthrift_field_m3 = std::move(other.__fbthrift_field_m3);
    __isset = other.__isset;
    return *this;
}


Foo::Foo(apache::thrift::FragileConstructor, ::std::string field4__arg, ::cpp2::Mixin2 m2__arg, ::cpp2::Mixin3 m3__arg) :
    __fbthrift_field_field4(std::move(field4__arg)),
    __fbthrift_field_m2(std::move(m2__arg)),
    __fbthrift_field_m3(std::move(m3__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
}

void Foo::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_field4 = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  ::apache::thrift::clear(this->__fbthrift_field_m2);
  ::apache::thrift::clear(this->__fbthrift_field_m3);
  __isset = {};
}

void Foo::__fbthrift_clear_terse_fields() {
}

bool Foo::__fbthrift_is_empty() const {
  return false;
}

bool Foo::operator==([[maybe_unused]] const Foo& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool Foo::operator<([[maybe_unused]] const Foo& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::cpp2::Mixin2& Foo::get_m2() const& {
  return __fbthrift_field_m2;
}

::cpp2::Mixin2 Foo::get_m2() && {
  return static_cast<::cpp2::Mixin2&&>(__fbthrift_field_m2);
}

const ::cpp2::Mixin3& Foo::get_m3() const& {
  return __fbthrift_field_m3;
}

::cpp2::Mixin3 Foo::get_m3() && {
  return static_cast<::cpp2::Mixin3&&>(__fbthrift_field_m3);
}

void swap([[maybe_unused]] Foo& a, [[maybe_unused]] Foo& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_field4, b.__fbthrift_field_field4);
  swap(a.__fbthrift_field_m2, b.__fbthrift_field_m2);
  swap(a.__fbthrift_field_m3, b.__fbthrift_field_m3);
  swap(a.__isset, b.__isset);
}

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Foo,
        ::apache::thrift::type_class::structure,
        ::cpp2::Mixin2>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Foo,
        ::apache::thrift::type_class::structure,
        ::cpp2::Mixin3>,
    "inconsistent use of json option");

} // namespace cpp2

namespace cpp2 { namespace {
[[maybe_unused]] FOLLY_ERASE void validateAdapters() {
}
}} // namespace cpp2
namespace apache::thrift::detail::annotation {
}
