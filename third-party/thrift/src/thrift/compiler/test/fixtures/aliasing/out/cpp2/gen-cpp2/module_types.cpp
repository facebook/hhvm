/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/aliasing/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/aliasing/gen-cpp2/module_types.tcc"
#include "thrift/compiler/test/fixtures/aliasing/gen-cpp2/module_data.h"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

[[maybe_unused]] static constexpr std::string_view kModuleName = "module";



namespace facebook::thrift::compiler::test::fixtures::aliasing {

std::string_view Foo::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/compiler/test/fixtures/aliasing/Foo";
}

std::string_view Foo::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Foo>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view Foo::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<Foo>::name;
}

Foo::Foo(const Foo&) = default;
Foo& Foo::operator=(const Foo&) = default;
Foo::Foo([[maybe_unused]] Foo&& other) noexcept :
    __fbthrift_field_other_foo(std::move(other.__fbthrift_field_other_foo)),
    __fbthrift_field_yet_another_foo(std::move(other.__fbthrift_field_yet_another_foo)),
    __isset(other.__isset) {
}

Foo& Foo::operator=([[maybe_unused]] Foo&& other) noexcept {
    this->__fbthrift_field_other_foo = std::move(other.__fbthrift_field_other_foo);
    this->__fbthrift_field_yet_another_foo = std::move(other.__fbthrift_field_yet_another_foo);
    __isset = other.__isset;
    return *this;
}


Foo::Foo(apache::thrift::FragileConstructor, ::cpp2::Foo other_foo__arg, ::cpp2::Foo yet_another_foo__arg) :
    __fbthrift_field_other_foo(std::move(other_foo__arg)),
    __fbthrift_field_yet_another_foo(std::move(yet_another_foo__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}

void Foo::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::clear(this->__fbthrift_field_other_foo);
  ::apache::thrift::clear(this->__fbthrift_field_yet_another_foo);
  __isset = {};
}

void Foo::__fbthrift_clear_terse_fields() {
}

bool Foo::__fbthrift_is_empty() const {
  return false;
}

bool Foo::operator==([[maybe_unused]] const Foo& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool Foo::operator<([[maybe_unused]] const Foo& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::cpp2::Foo& Foo::get_other_foo() const& {
  return __fbthrift_field_other_foo;
}

::cpp2::Foo Foo::get_other_foo() && {
  return static_cast<::cpp2::Foo&&>(__fbthrift_field_other_foo);
}

const ::cpp2::Foo& Foo::get_yet_another_foo() const& {
  return __fbthrift_field_yet_another_foo;
}

::cpp2::Foo Foo::get_yet_another_foo() && {
  return static_cast<::cpp2::Foo&&>(__fbthrift_field_yet_another_foo);
}

void swap([[maybe_unused]] Foo& a, [[maybe_unused]] Foo& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_other_foo, b.__fbthrift_field_other_foo);
  swap(a.__fbthrift_field_yet_another_foo, b.__fbthrift_field_yet_another_foo);
  swap(a.__isset, b.__isset);
}

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Foo,
        ::apache::thrift::type_class::structure,
        ::cpp2::Foo>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Foo,
        ::apache::thrift::type_class::structure,
        ::cpp2::Foo>,
    "inconsistent use of json option");

} // namespace facebook::thrift::compiler::test::fixtures::aliasing

namespace facebook::thrift::compiler::test::fixtures::aliasing { namespace {
[[maybe_unused]] FOLLY_ERASE void validateAdapters() {
}
}} // namespace facebook::thrift::compiler::test::fixtures::aliasing
namespace apache::thrift::detail::annotation {
}
