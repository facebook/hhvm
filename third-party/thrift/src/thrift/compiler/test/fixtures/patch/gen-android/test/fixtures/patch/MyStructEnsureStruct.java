/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package test.fixtures.patch;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class MyStructEnsureStruct implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("MyStructEnsureStruct");
  private static final TField STRUCT_WITH_CUSTOM_DEFAULT_FIELD_DESC = new TField("structWithCustomDefault", TType.STRUCT, (short)-32);
  private static final TField I32_WITH_CUSTOM_DEFAULT_FIELD_DESC = new TField("i32WithCustomDefault", TType.I32, (short)-31);
  private static final TField MAP_MAP_FIELD_DESC = new TField("mapMap", TType.MAP, (short)-30);
  private static final TField LIST_MAP_FIELD_DESC = new TField("listMap", TType.LIST, (short)-29);
  private static final TField OPT_MAP_VAL_FIELD_DESC = new TField("optMapVal", TType.MAP, (short)-28);
  private static final TField OPT_SET_VAL_FIELD_DESC = new TField("optSetVal", TType.SET, (short)-27);
  private static final TField OPT_LIST_VAL_FIELD_DESC = new TField("optListVal", TType.LIST, (short)-26);
  private static final TField OPT_LATE_STRUCT_VAL_FIELD_DESC = new TField("optLateStructVal", TType.STRUCT, (short)-25);
  private static final TField OPT_STRUCT_VAL_FIELD_DESC = new TField("optStructVal", TType.STRUCT, (short)-24);
  private static final TField OPT_ENUM_VAL_FIELD_DESC = new TField("optEnumVal", TType.I32, (short)-23);
  private static final TField OPT_BINARY_VAL_FIELD_DESC = new TField("optBinaryVal", TType.STRING, (short)-22);
  private static final TField OPT_STRING_VAL_FIELD_DESC = new TField("optStringVal", TType.STRING, (short)-21);
  private static final TField OPT_DOUBLE_VAL_FIELD_DESC = new TField("optDoubleVal", TType.DOUBLE, (short)-20);
  private static final TField OPT_FLOAT_VAL_FIELD_DESC = new TField("optFloatVal", TType.FLOAT, (short)-19);
  private static final TField OPT_I64_VAL_FIELD_DESC = new TField("optI64Val", TType.I64, (short)-18);
  private static final TField OPT_I32_VAL_FIELD_DESC = new TField("optI32Val", TType.I32, (short)-17);
  private static final TField OPT_I16_VAL_FIELD_DESC = new TField("optI16Val", TType.I16, (short)-16);
  private static final TField OPT_BYTE_VAL_FIELD_DESC = new TField("optByteVal", TType.BYTE, (short)-15);
  private static final TField OPT_BOOL_VAL_FIELD_DESC = new TField("optBoolVal", TType.BOOL, (short)-14);
  private static final TField LATE_STRUCT_VAL_FIELD_DESC = new TField("lateStructVal", TType.STRUCT, (short)-13);
  private static final TField UNION_VAL_FIELD_DESC = new TField("unionVal", TType.STRUCT, (short)-12);
  private static final TField STRUCT_VAL_FIELD_DESC = new TField("structVal", TType.STRUCT, (short)-11);
  private static final TField ENUM_VAL_FIELD_DESC = new TField("enumVal", TType.I32, (short)-10);
  private static final TField BINARY_VAL_FIELD_DESC = new TField("binaryVal", TType.STRING, (short)-9);
  private static final TField STRING_VAL_FIELD_DESC = new TField("stringVal", TType.STRING, (short)-8);
  private static final TField DOUBLE_VAL_FIELD_DESC = new TField("doubleVal", TType.DOUBLE, (short)-7);
  private static final TField FLOAT_VAL_FIELD_DESC = new TField("floatVal", TType.FLOAT, (short)-6);
  private static final TField I64_VAL_FIELD_DESC = new TField("i64Val", TType.I64, (short)-5);
  private static final TField I32_VAL_FIELD_DESC = new TField("i32Val", TType.I32, (short)-4);
  private static final TField I16_VAL_FIELD_DESC = new TField("i16Val", TType.I16, (short)-3);
  private static final TField BYTE_VAL_FIELD_DESC = new TField("byteVal", TType.BYTE, (short)-2);
  private static final TField BOOL_VAL_FIELD_DESC = new TField("boolVal", TType.BOOL, (short)-1);
  private static final TField STRUCT_WITH_FIELD_CUSTOM_DEFAULT_FIELD_DESC = new TField("structWithFieldCustomDefault", TType.STRUCT, (short)1);

  public final MyDataWithCustomDefault structWithCustomDefault;
  public final Integer i32WithCustomDefault;
  public final Map<String,Map<String,Integer>> mapMap;
  public final List<Map<String,Integer>> listMap;
  public final Map<String,String> optMapVal;
  public final Set<String> optSetVal;
  public final List<Short> optListVal;
  public final LateDefStruct optLateStructVal;
  public final MyData optStructVal;
  /**
   * 
   * @see MyEnum
   */
  public final MyEnum optEnumVal;
  public final byte[] optBinaryVal;
  public final String optStringVal;
  public final Double optDoubleVal;
  public final Float optFloatVal;
  public final Long optI64Val;
  public final Integer optI32Val;
  public final Short optI16Val;
  public final Byte optByteVal;
  public final Boolean optBoolVal;
  public final LateDefStruct lateStructVal;
  public final MyUnion unionVal;
  public final MyData structVal;
  /**
   * 
   * @see MyEnum
   */
  public final MyEnum enumVal;
  public final byte[] binaryVal;
  public final String stringVal;
  public final Double doubleVal;
  public final Float floatVal;
  public final Long i64Val;
  public final Integer i32Val;
  public final Short i16Val;
  public final Byte byteVal;
  public final Boolean boolVal;
  public final MyData structWithFieldCustomDefault;
  public static final int STRUCTWITHCUSTOMDEFAULT = -32;
  public static final int I32WITHCUSTOMDEFAULT = -31;
  public static final int MAPMAP = -30;
  public static final int LISTMAP = -29;
  public static final int OPTMAPVAL = -28;
  public static final int OPTSETVAL = -27;
  public static final int OPTLISTVAL = -26;
  public static final int OPTLATESTRUCTVAL = -25;
  public static final int OPTSTRUCTVAL = -24;
  public static final int OPTENUMVAL = -23;
  public static final int OPTBINARYVAL = -22;
  public static final int OPTSTRINGVAL = -21;
  public static final int OPTDOUBLEVAL = -20;
  public static final int OPTFLOATVAL = -19;
  public static final int OPTI64VAL = -18;
  public static final int OPTI32VAL = -17;
  public static final int OPTI16VAL = -16;
  public static final int OPTBYTEVAL = -15;
  public static final int OPTBOOLVAL = -14;
  public static final int LATESTRUCTVAL = -13;
  public static final int UNIONVAL = -12;
  public static final int STRUCTVAL = -11;
  public static final int ENUMVAL = -10;
  public static final int BINARYVAL = -9;
  public static final int STRINGVAL = -8;
  public static final int DOUBLEVAL = -7;
  public static final int FLOATVAL = -6;
  public static final int I64VAL = -5;
  public static final int I32VAL = -4;
  public static final int I16VAL = -3;
  public static final int BYTEVAL = -2;
  public static final int BOOLVAL = -1;
  public static final int STRUCTWITHFIELDCUSTOMDEFAULT = 1;

  public MyStructEnsureStruct(
      MyDataWithCustomDefault structWithCustomDefault,
      Integer i32WithCustomDefault,
      Map<String,Map<String,Integer>> mapMap,
      List<Map<String,Integer>> listMap,
      Map<String,String> optMapVal,
      Set<String> optSetVal,
      List<Short> optListVal,
      LateDefStruct optLateStructVal,
      MyData optStructVal,
      MyEnum optEnumVal,
      byte[] optBinaryVal,
      String optStringVal,
      Double optDoubleVal,
      Float optFloatVal,
      Long optI64Val,
      Integer optI32Val,
      Short optI16Val,
      Byte optByteVal,
      Boolean optBoolVal,
      LateDefStruct lateStructVal,
      MyUnion unionVal,
      MyData structVal,
      MyEnum enumVal,
      byte[] binaryVal,
      String stringVal,
      Double doubleVal,
      Float floatVal,
      Long i64Val,
      Integer i32Val,
      Short i16Val,
      Byte byteVal,
      Boolean boolVal,
      MyData structWithFieldCustomDefault) {
    this.structWithCustomDefault = structWithCustomDefault;
    this.i32WithCustomDefault = i32WithCustomDefault;
    this.mapMap = mapMap;
    this.listMap = listMap;
    this.optMapVal = optMapVal;
    this.optSetVal = optSetVal;
    this.optListVal = optListVal;
    this.optLateStructVal = optLateStructVal;
    this.optStructVal = optStructVal;
    this.optEnumVal = optEnumVal;
    this.optBinaryVal = optBinaryVal;
    this.optStringVal = optStringVal;
    this.optDoubleVal = optDoubleVal;
    this.optFloatVal = optFloatVal;
    this.optI64Val = optI64Val;
    this.optI32Val = optI32Val;
    this.optI16Val = optI16Val;
    this.optByteVal = optByteVal;
    this.optBoolVal = optBoolVal;
    this.lateStructVal = lateStructVal;
    this.unionVal = unionVal;
    this.structVal = structVal;
    this.enumVal = enumVal;
    this.binaryVal = binaryVal;
    this.stringVal = stringVal;
    this.doubleVal = doubleVal;
    this.floatVal = floatVal;
    this.i64Val = i64Val;
    this.i32Val = i32Val;
    this.i16Val = i16Val;
    this.byteVal = byteVal;
    this.boolVal = boolVal;
    this.structWithFieldCustomDefault = structWithFieldCustomDefault;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MyStructEnsureStruct(MyStructEnsureStruct other) {
    if (other.isSetStructWithCustomDefault()) {
      this.structWithCustomDefault = TBaseHelper.deepCopy(other.structWithCustomDefault);
    } else {
      this.structWithCustomDefault = null;
    }
    if (other.isSetI32WithCustomDefault()) {
      this.i32WithCustomDefault = TBaseHelper.deepCopy(other.i32WithCustomDefault);
    } else {
      this.i32WithCustomDefault = null;
    }
    if (other.isSetMapMap()) {
      this.mapMap = TBaseHelper.deepCopy(other.mapMap);
    } else {
      this.mapMap = null;
    }
    if (other.isSetListMap()) {
      this.listMap = TBaseHelper.deepCopy(other.listMap);
    } else {
      this.listMap = null;
    }
    if (other.isSetOptMapVal()) {
      this.optMapVal = TBaseHelper.deepCopy(other.optMapVal);
    } else {
      this.optMapVal = null;
    }
    if (other.isSetOptSetVal()) {
      this.optSetVal = TBaseHelper.deepCopy(other.optSetVal);
    } else {
      this.optSetVal = null;
    }
    if (other.isSetOptListVal()) {
      this.optListVal = TBaseHelper.deepCopy(other.optListVal);
    } else {
      this.optListVal = null;
    }
    if (other.isSetOptLateStructVal()) {
      this.optLateStructVal = TBaseHelper.deepCopy(other.optLateStructVal);
    } else {
      this.optLateStructVal = null;
    }
    if (other.isSetOptStructVal()) {
      this.optStructVal = TBaseHelper.deepCopy(other.optStructVal);
    } else {
      this.optStructVal = null;
    }
    if (other.isSetOptEnumVal()) {
      this.optEnumVal = TBaseHelper.deepCopy(other.optEnumVal);
    } else {
      this.optEnumVal = null;
    }
    if (other.isSetOptBinaryVal()) {
      this.optBinaryVal = TBaseHelper.deepCopy(other.optBinaryVal);
    } else {
      this.optBinaryVal = null;
    }
    if (other.isSetOptStringVal()) {
      this.optStringVal = TBaseHelper.deepCopy(other.optStringVal);
    } else {
      this.optStringVal = null;
    }
    if (other.isSetOptDoubleVal()) {
      this.optDoubleVal = TBaseHelper.deepCopy(other.optDoubleVal);
    } else {
      this.optDoubleVal = null;
    }
    if (other.isSetOptFloatVal()) {
      this.optFloatVal = TBaseHelper.deepCopy(other.optFloatVal);
    } else {
      this.optFloatVal = null;
    }
    if (other.isSetOptI64Val()) {
      this.optI64Val = TBaseHelper.deepCopy(other.optI64Val);
    } else {
      this.optI64Val = null;
    }
    if (other.isSetOptI32Val()) {
      this.optI32Val = TBaseHelper.deepCopy(other.optI32Val);
    } else {
      this.optI32Val = null;
    }
    if (other.isSetOptI16Val()) {
      this.optI16Val = TBaseHelper.deepCopy(other.optI16Val);
    } else {
      this.optI16Val = null;
    }
    if (other.isSetOptByteVal()) {
      this.optByteVal = TBaseHelper.deepCopy(other.optByteVal);
    } else {
      this.optByteVal = null;
    }
    if (other.isSetOptBoolVal()) {
      this.optBoolVal = TBaseHelper.deepCopy(other.optBoolVal);
    } else {
      this.optBoolVal = null;
    }
    if (other.isSetLateStructVal()) {
      this.lateStructVal = TBaseHelper.deepCopy(other.lateStructVal);
    } else {
      this.lateStructVal = null;
    }
    if (other.isSetUnionVal()) {
      this.unionVal = TBaseHelper.deepCopy(other.unionVal);
    } else {
      this.unionVal = null;
    }
    if (other.isSetStructVal()) {
      this.structVal = TBaseHelper.deepCopy(other.structVal);
    } else {
      this.structVal = null;
    }
    if (other.isSetEnumVal()) {
      this.enumVal = TBaseHelper.deepCopy(other.enumVal);
    } else {
      this.enumVal = null;
    }
    if (other.isSetBinaryVal()) {
      this.binaryVal = TBaseHelper.deepCopy(other.binaryVal);
    } else {
      this.binaryVal = null;
    }
    if (other.isSetStringVal()) {
      this.stringVal = TBaseHelper.deepCopy(other.stringVal);
    } else {
      this.stringVal = null;
    }
    if (other.isSetDoubleVal()) {
      this.doubleVal = TBaseHelper.deepCopy(other.doubleVal);
    } else {
      this.doubleVal = null;
    }
    if (other.isSetFloatVal()) {
      this.floatVal = TBaseHelper.deepCopy(other.floatVal);
    } else {
      this.floatVal = null;
    }
    if (other.isSetI64Val()) {
      this.i64Val = TBaseHelper.deepCopy(other.i64Val);
    } else {
      this.i64Val = null;
    }
    if (other.isSetI32Val()) {
      this.i32Val = TBaseHelper.deepCopy(other.i32Val);
    } else {
      this.i32Val = null;
    }
    if (other.isSetI16Val()) {
      this.i16Val = TBaseHelper.deepCopy(other.i16Val);
    } else {
      this.i16Val = null;
    }
    if (other.isSetByteVal()) {
      this.byteVal = TBaseHelper.deepCopy(other.byteVal);
    } else {
      this.byteVal = null;
    }
    if (other.isSetBoolVal()) {
      this.boolVal = TBaseHelper.deepCopy(other.boolVal);
    } else {
      this.boolVal = null;
    }
    if (other.isSetStructWithFieldCustomDefault()) {
      this.structWithFieldCustomDefault = TBaseHelper.deepCopy(other.structWithFieldCustomDefault);
    } else {
      this.structWithFieldCustomDefault = null;
    }
  }

  public MyStructEnsureStruct deepCopy() {
    return new MyStructEnsureStruct(this);
  }

  public MyDataWithCustomDefault getStructWithCustomDefault() {
    return this.structWithCustomDefault;
  }

  // Returns true if field structWithCustomDefault is set (has been assigned a value) and false otherwise
  public boolean isSetStructWithCustomDefault() {
    return this.structWithCustomDefault != null;
  }

  public Integer getI32WithCustomDefault() {
    return this.i32WithCustomDefault;
  }

  // Returns true if field i32WithCustomDefault is set (has been assigned a value) and false otherwise
  public boolean isSetI32WithCustomDefault() {
    return this.i32WithCustomDefault != null;
  }

  public Map<String,Map<String,Integer>> getMapMap() {
    return this.mapMap;
  }

  // Returns true if field mapMap is set (has been assigned a value) and false otherwise
  public boolean isSetMapMap() {
    return this.mapMap != null;
  }

  public List<Map<String,Integer>> getListMap() {
    return this.listMap;
  }

  // Returns true if field listMap is set (has been assigned a value) and false otherwise
  public boolean isSetListMap() {
    return this.listMap != null;
  }

  public Map<String,String> getOptMapVal() {
    return this.optMapVal;
  }

  // Returns true if field optMapVal is set (has been assigned a value) and false otherwise
  public boolean isSetOptMapVal() {
    return this.optMapVal != null;
  }

  public Set<String> getOptSetVal() {
    return this.optSetVal;
  }

  // Returns true if field optSetVal is set (has been assigned a value) and false otherwise
  public boolean isSetOptSetVal() {
    return this.optSetVal != null;
  }

  public List<Short> getOptListVal() {
    return this.optListVal;
  }

  // Returns true if field optListVal is set (has been assigned a value) and false otherwise
  public boolean isSetOptListVal() {
    return this.optListVal != null;
  }

  public LateDefStruct getOptLateStructVal() {
    return this.optLateStructVal;
  }

  // Returns true if field optLateStructVal is set (has been assigned a value) and false otherwise
  public boolean isSetOptLateStructVal() {
    return this.optLateStructVal != null;
  }

  public MyData getOptStructVal() {
    return this.optStructVal;
  }

  // Returns true if field optStructVal is set (has been assigned a value) and false otherwise
  public boolean isSetOptStructVal() {
    return this.optStructVal != null;
  }

  /**
   * 
   * @see MyEnum
   */
  public MyEnum getOptEnumVal() {
    return this.optEnumVal;
  }

  // Returns true if field optEnumVal is set (has been assigned a value) and false otherwise
  public boolean isSetOptEnumVal() {
    return this.optEnumVal != null;
  }

  public byte[] getOptBinaryVal() {
    return this.optBinaryVal;
  }

  // Returns true if field optBinaryVal is set (has been assigned a value) and false otherwise
  public boolean isSetOptBinaryVal() {
    return this.optBinaryVal != null;
  }

  public String getOptStringVal() {
    return this.optStringVal;
  }

  // Returns true if field optStringVal is set (has been assigned a value) and false otherwise
  public boolean isSetOptStringVal() {
    return this.optStringVal != null;
  }

  public Double getOptDoubleVal() {
    return this.optDoubleVal;
  }

  // Returns true if field optDoubleVal is set (has been assigned a value) and false otherwise
  public boolean isSetOptDoubleVal() {
    return this.optDoubleVal != null;
  }

  public Float getOptFloatVal() {
    return this.optFloatVal;
  }

  // Returns true if field optFloatVal is set (has been assigned a value) and false otherwise
  public boolean isSetOptFloatVal() {
    return this.optFloatVal != null;
  }

  public Long getOptI64Val() {
    return this.optI64Val;
  }

  // Returns true if field optI64Val is set (has been assigned a value) and false otherwise
  public boolean isSetOptI64Val() {
    return this.optI64Val != null;
  }

  public Integer getOptI32Val() {
    return this.optI32Val;
  }

  // Returns true if field optI32Val is set (has been assigned a value) and false otherwise
  public boolean isSetOptI32Val() {
    return this.optI32Val != null;
  }

  public Short getOptI16Val() {
    return this.optI16Val;
  }

  // Returns true if field optI16Val is set (has been assigned a value) and false otherwise
  public boolean isSetOptI16Val() {
    return this.optI16Val != null;
  }

  public Byte getOptByteVal() {
    return this.optByteVal;
  }

  // Returns true if field optByteVal is set (has been assigned a value) and false otherwise
  public boolean isSetOptByteVal() {
    return this.optByteVal != null;
  }

  public Boolean isOptBoolVal() {
    return this.optBoolVal;
  }

  // Returns true if field optBoolVal is set (has been assigned a value) and false otherwise
  public boolean isSetOptBoolVal() {
    return this.optBoolVal != null;
  }

  public LateDefStruct getLateStructVal() {
    return this.lateStructVal;
  }

  // Returns true if field lateStructVal is set (has been assigned a value) and false otherwise
  public boolean isSetLateStructVal() {
    return this.lateStructVal != null;
  }

  public MyUnion getUnionVal() {
    return this.unionVal;
  }

  // Returns true if field unionVal is set (has been assigned a value) and false otherwise
  public boolean isSetUnionVal() {
    return this.unionVal != null;
  }

  public MyData getStructVal() {
    return this.structVal;
  }

  // Returns true if field structVal is set (has been assigned a value) and false otherwise
  public boolean isSetStructVal() {
    return this.structVal != null;
  }

  /**
   * 
   * @see MyEnum
   */
  public MyEnum getEnumVal() {
    return this.enumVal;
  }

  // Returns true if field enumVal is set (has been assigned a value) and false otherwise
  public boolean isSetEnumVal() {
    return this.enumVal != null;
  }

  public byte[] getBinaryVal() {
    return this.binaryVal;
  }

  // Returns true if field binaryVal is set (has been assigned a value) and false otherwise
  public boolean isSetBinaryVal() {
    return this.binaryVal != null;
  }

  public String getStringVal() {
    return this.stringVal;
  }

  // Returns true if field stringVal is set (has been assigned a value) and false otherwise
  public boolean isSetStringVal() {
    return this.stringVal != null;
  }

  public Double getDoubleVal() {
    return this.doubleVal;
  }

  // Returns true if field doubleVal is set (has been assigned a value) and false otherwise
  public boolean isSetDoubleVal() {
    return this.doubleVal != null;
  }

  public Float getFloatVal() {
    return this.floatVal;
  }

  // Returns true if field floatVal is set (has been assigned a value) and false otherwise
  public boolean isSetFloatVal() {
    return this.floatVal != null;
  }

  public Long getI64Val() {
    return this.i64Val;
  }

  // Returns true if field i64Val is set (has been assigned a value) and false otherwise
  public boolean isSetI64Val() {
    return this.i64Val != null;
  }

  public Integer getI32Val() {
    return this.i32Val;
  }

  // Returns true if field i32Val is set (has been assigned a value) and false otherwise
  public boolean isSetI32Val() {
    return this.i32Val != null;
  }

  public Short getI16Val() {
    return this.i16Val;
  }

  // Returns true if field i16Val is set (has been assigned a value) and false otherwise
  public boolean isSetI16Val() {
    return this.i16Val != null;
  }

  public Byte getByteVal() {
    return this.byteVal;
  }

  // Returns true if field byteVal is set (has been assigned a value) and false otherwise
  public boolean isSetByteVal() {
    return this.byteVal != null;
  }

  public Boolean isBoolVal() {
    return this.boolVal;
  }

  // Returns true if field boolVal is set (has been assigned a value) and false otherwise
  public boolean isSetBoolVal() {
    return this.boolVal != null;
  }

  public MyData getStructWithFieldCustomDefault() {
    return this.structWithFieldCustomDefault;
  }

  // Returns true if field structWithFieldCustomDefault is set (has been assigned a value) and false otherwise
  public boolean isSetStructWithFieldCustomDefault() {
    return this.structWithFieldCustomDefault != null;
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof MyStructEnsureStruct))
      return false;
    MyStructEnsureStruct that = (MyStructEnsureStruct)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetStructWithCustomDefault(), that.isSetStructWithCustomDefault(), this.structWithCustomDefault, that.structWithCustomDefault)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetI32WithCustomDefault(), that.isSetI32WithCustomDefault(), this.i32WithCustomDefault, that.i32WithCustomDefault)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMapMap(), that.isSetMapMap(), this.mapMap, that.mapMap)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetListMap(), that.isSetListMap(), this.listMap, that.listMap)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOptMapVal(), that.isSetOptMapVal(), this.optMapVal, that.optMapVal)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOptSetVal(), that.isSetOptSetVal(), this.optSetVal, that.optSetVal)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOptListVal(), that.isSetOptListVal(), this.optListVal, that.optListVal)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOptLateStructVal(), that.isSetOptLateStructVal(), this.optLateStructVal, that.optLateStructVal)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOptStructVal(), that.isSetOptStructVal(), this.optStructVal, that.optStructVal)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOptEnumVal(), that.isSetOptEnumVal(), this.optEnumVal, that.optEnumVal)) { return false; }

    if (!TBaseHelper.equalsSlow(this.isSetOptBinaryVal(), that.isSetOptBinaryVal(), this.optBinaryVal, that.optBinaryVal)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOptStringVal(), that.isSetOptStringVal(), this.optStringVal, that.optStringVal)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOptDoubleVal(), that.isSetOptDoubleVal(), this.optDoubleVal, that.optDoubleVal)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOptFloatVal(), that.isSetOptFloatVal(), this.optFloatVal, that.optFloatVal)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOptI64Val(), that.isSetOptI64Val(), this.optI64Val, that.optI64Val)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOptI32Val(), that.isSetOptI32Val(), this.optI32Val, that.optI32Val)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOptI16Val(), that.isSetOptI16Val(), this.optI16Val, that.optI16Val)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOptByteVal(), that.isSetOptByteVal(), this.optByteVal, that.optByteVal)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOptBoolVal(), that.isSetOptBoolVal(), this.optBoolVal, that.optBoolVal)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetLateStructVal(), that.isSetLateStructVal(), this.lateStructVal, that.lateStructVal)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetUnionVal(), that.isSetUnionVal(), this.unionVal, that.unionVal)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetStructVal(), that.isSetStructVal(), this.structVal, that.structVal)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetEnumVal(), that.isSetEnumVal(), this.enumVal, that.enumVal)) { return false; }

    if (!TBaseHelper.equalsSlow(this.isSetBinaryVal(), that.isSetBinaryVal(), this.binaryVal, that.binaryVal)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetStringVal(), that.isSetStringVal(), this.stringVal, that.stringVal)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetDoubleVal(), that.isSetDoubleVal(), this.doubleVal, that.doubleVal)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetFloatVal(), that.isSetFloatVal(), this.floatVal, that.floatVal)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetI64Val(), that.isSetI64Val(), this.i64Val, that.i64Val)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetI32Val(), that.isSetI32Val(), this.i32Val, that.i32Val)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetI16Val(), that.isSetI16Val(), this.i16Val, that.i16Val)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetByteVal(), that.isSetByteVal(), this.byteVal, that.byteVal)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetBoolVal(), that.isSetBoolVal(), this.boolVal, that.boolVal)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetStructWithFieldCustomDefault(), that.isSetStructWithFieldCustomDefault(), this.structWithFieldCustomDefault, that.structWithFieldCustomDefault)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {structWithCustomDefault, i32WithCustomDefault, mapMap, listMap, optMapVal, optSetVal, optListVal, optLateStructVal, optStructVal, optEnumVal, optBinaryVal, optStringVal, optDoubleVal, optFloatVal, optI64Val, optI32Val, optI16Val, optByteVal, optBoolVal, lateStructVal, unionVal, structVal, enumVal, binaryVal, stringVal, doubleVal, floatVal, i64Val, i32Val, i16Val, byteVal, boolVal, structWithFieldCustomDefault});
  }

  // This is required to satisfy the TBase interface, but can't be implemented on immutable struture.
  public void read(TProtocol iprot) throws TException {
    throw new TException("unimplemented in android immutable structure");
  }

  public static MyStructEnsureStruct deserialize(TProtocol iprot) throws TException {
    MyDataWithCustomDefault tmp_structWithCustomDefault = null;
    Integer tmp_i32WithCustomDefault = null;
    Map<String,Map<String,Integer>> tmp_mapMap = null;
    List<Map<String,Integer>> tmp_listMap = null;
    Map<String,String> tmp_optMapVal = null;
    Set<String> tmp_optSetVal = null;
    List<Short> tmp_optListVal = null;
    LateDefStruct tmp_optLateStructVal = null;
    MyData tmp_optStructVal = null;
    MyEnum tmp_optEnumVal = null;
    byte[] tmp_optBinaryVal = null;
    String tmp_optStringVal = null;
    Double tmp_optDoubleVal = null;
    Float tmp_optFloatVal = null;
    Long tmp_optI64Val = null;
    Integer tmp_optI32Val = null;
    Short tmp_optI16Val = null;
    Byte tmp_optByteVal = null;
    Boolean tmp_optBoolVal = null;
    LateDefStruct tmp_lateStructVal = null;
    MyUnion tmp_unionVal = null;
    MyData tmp_structVal = null;
    MyEnum tmp_enumVal = null;
    byte[] tmp_binaryVal = null;
    String tmp_stringVal = null;
    Double tmp_doubleVal = null;
    Float tmp_floatVal = null;
    Long tmp_i64Val = null;
    Integer tmp_i32Val = null;
    Short tmp_i16Val = null;
    Byte tmp_byteVal = null;
    Boolean tmp_boolVal = null;
    MyData tmp_structWithFieldCustomDefault = null;
    TField __field;
    iprot.readStructBegin();
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) {
        break;
      }
      switch (__field.id)
      {
        case STRUCTWITHCUSTOMDEFAULT:
          if (__field.type == TType.STRUCT) {
            tmp_structWithCustomDefault = MyDataWithCustomDefault.deserialize(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case I32WITHCUSTOMDEFAULT:
          if (__field.type == TType.I32) {
            tmp_i32WithCustomDefault = iprot.readI32();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAPMAP:
          if (__field.type == TType.MAP) {
            {
              TMap _map242 = iprot.readMapBegin();
              tmp_mapMap = new HashMap<String,Map<String,Integer>>(Math.max(0, 2*_map242.size));
              for (int _i243 = 0; 
                   (_map242.size < 0) ? iprot.peekMap() : (_i243 < _map242.size); 
                   ++_i243)
              {
                String _key244;
                Map<String,Integer> _val245;
                _key244 = iprot.readString();
                {
                  TMap _map246 = iprot.readMapBegin();
                  _val245 = new HashMap<String,Integer>(Math.max(0, 2*_map246.size));
                  for (int _i247 = 0; 
                       (_map246.size < 0) ? iprot.peekMap() : (_i247 < _map246.size); 
                       ++_i247)
                  {
                    String _key248;
                    Integer _val249;
                    _key248 = iprot.readString();
                    _val249 = iprot.readI32();
                    _val245.put(_key248, _val249);
                  }
                  iprot.readMapEnd();
                }
                tmp_mapMap.put(_key244, _val245);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LISTMAP:
          if (__field.type == TType.LIST) {
            {
              TList _list250 = iprot.readListBegin();
              tmp_listMap = new ArrayList<Map<String,Integer>>(Math.max(0, _list250.size));
              for (int _i251 = 0; 
                   (_list250.size < 0) ? iprot.peekList() : (_i251 < _list250.size); 
                   ++_i251)
              {
                Map<String,Integer> _elem252;
                {
                  TMap _map253 = iprot.readMapBegin();
                  _elem252 = new HashMap<String,Integer>(Math.max(0, 2*_map253.size));
                  for (int _i254 = 0; 
                       (_map253.size < 0) ? iprot.peekMap() : (_i254 < _map253.size); 
                       ++_i254)
                  {
                    String _key255;
                    Integer _val256;
                    _key255 = iprot.readString();
                    _val256 = iprot.readI32();
                    _elem252.put(_key255, _val256);
                  }
                  iprot.readMapEnd();
                }
                tmp_listMap.add(_elem252);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPTMAPVAL:
          if (__field.type == TType.MAP) {
            {
              TMap _map257 = iprot.readMapBegin();
              tmp_optMapVal = new HashMap<String,String>(Math.max(0, 2*_map257.size));
              for (int _i258 = 0; 
                   (_map257.size < 0) ? iprot.peekMap() : (_i258 < _map257.size); 
                   ++_i258)
              {
                String _key259;
                String _val260;
                _key259 = iprot.readString();
                _val260 = iprot.readString();
                tmp_optMapVal.put(_key259, _val260);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPTSETVAL:
          if (__field.type == TType.SET) {
            {
              TSet _set261 = iprot.readSetBegin();
              tmp_optSetVal = new HashSet<String>(Math.max(0, 2*_set261.size));
              for (int _i262 = 0; 
                   (_set261.size < 0) ? iprot.peekSet() : (_i262 < _set261.size); 
                   ++_i262)
              {
                String _elem263;
                _elem263 = iprot.readString();
                tmp_optSetVal.add(_elem263);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPTLISTVAL:
          if (__field.type == TType.LIST) {
            {
              TList _list264 = iprot.readListBegin();
              tmp_optListVal = new ArrayList<Short>(Math.max(0, _list264.size));
              for (int _i265 = 0; 
                   (_list264.size < 0) ? iprot.peekList() : (_i265 < _list264.size); 
                   ++_i265)
              {
                Short _elem266;
                _elem266 = iprot.readI16();
                tmp_optListVal.add(_elem266);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPTLATESTRUCTVAL:
          if (__field.type == TType.STRUCT) {
            tmp_optLateStructVal = LateDefStruct.deserialize(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPTSTRUCTVAL:
          if (__field.type == TType.STRUCT) {
            tmp_optStructVal = MyData.deserialize(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPTENUMVAL:
          if (__field.type == TType.I32) {
            tmp_optEnumVal = MyEnum.findByValue(iprot.readI32());
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPTBINARYVAL:
          if (__field.type == TType.STRING) {
            tmp_optBinaryVal = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPTSTRINGVAL:
          if (__field.type == TType.STRING) {
            tmp_optStringVal = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPTDOUBLEVAL:
          if (__field.type == TType.DOUBLE) {
            tmp_optDoubleVal = iprot.readDouble();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPTFLOATVAL:
          if (__field.type == TType.FLOAT) {
            tmp_optFloatVal = iprot.readFloat();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPTI64VAL:
          if (__field.type == TType.I64) {
            tmp_optI64Val = iprot.readI64();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPTI32VAL:
          if (__field.type == TType.I32) {
            tmp_optI32Val = iprot.readI32();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPTI16VAL:
          if (__field.type == TType.I16) {
            tmp_optI16Val = iprot.readI16();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPTBYTEVAL:
          if (__field.type == TType.BYTE) {
            tmp_optByteVal = iprot.readByte();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPTBOOLVAL:
          if (__field.type == TType.BOOL) {
            tmp_optBoolVal = iprot.readBool();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LATESTRUCTVAL:
          if (__field.type == TType.STRUCT) {
            tmp_lateStructVal = LateDefStruct.deserialize(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case UNIONVAL:
          if (__field.type == TType.STRUCT) {
            tmp_unionVal = new MyUnion();
            tmp_unionVal.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case STRUCTVAL:
          if (__field.type == TType.STRUCT) {
            tmp_structVal = MyData.deserialize(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ENUMVAL:
          if (__field.type == TType.I32) {
            tmp_enumVal = MyEnum.findByValue(iprot.readI32());
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case BINARYVAL:
          if (__field.type == TType.STRING) {
            tmp_binaryVal = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case STRINGVAL:
          if (__field.type == TType.STRING) {
            tmp_stringVal = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case DOUBLEVAL:
          if (__field.type == TType.DOUBLE) {
            tmp_doubleVal = iprot.readDouble();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case FLOATVAL:
          if (__field.type == TType.FLOAT) {
            tmp_floatVal = iprot.readFloat();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case I64VAL:
          if (__field.type == TType.I64) {
            tmp_i64Val = iprot.readI64();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case I32VAL:
          if (__field.type == TType.I32) {
            tmp_i32Val = iprot.readI32();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case I16VAL:
          if (__field.type == TType.I16) {
            tmp_i16Val = iprot.readI16();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case BYTEVAL:
          if (__field.type == TType.BYTE) {
            tmp_byteVal = iprot.readByte();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case BOOLVAL:
          if (__field.type == TType.BOOL) {
            tmp_boolVal = iprot.readBool();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case STRUCTWITHFIELDCUSTOMDEFAULT:
          if (__field.type == TType.STRUCT) {
            tmp_structWithFieldCustomDefault = MyData.deserialize(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    MyStructEnsureStruct _that;
    _that = new MyStructEnsureStruct(
      tmp_structWithCustomDefault
      ,tmp_i32WithCustomDefault
      ,tmp_mapMap
      ,tmp_listMap
      ,tmp_optMapVal
      ,tmp_optSetVal
      ,tmp_optListVal
      ,tmp_optLateStructVal
      ,tmp_optStructVal
      ,tmp_optEnumVal
      ,tmp_optBinaryVal
      ,tmp_optStringVal
      ,tmp_optDoubleVal
      ,tmp_optFloatVal
      ,tmp_optI64Val
      ,tmp_optI32Val
      ,tmp_optI16Val
      ,tmp_optByteVal
      ,tmp_optBoolVal
      ,tmp_lateStructVal
      ,tmp_unionVal
      ,tmp_structVal
      ,tmp_enumVal
      ,tmp_binaryVal
      ,tmp_stringVal
      ,tmp_doubleVal
      ,tmp_floatVal
      ,tmp_i64Val
      ,tmp_i32Val
      ,tmp_i16Val
      ,tmp_byteVal
      ,tmp_boolVal
      ,tmp_structWithFieldCustomDefault
    );
    _that.validate();
    return _that;
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.structWithCustomDefault != null) {
      if (isSetStructWithCustomDefault()) {
        oprot.writeFieldBegin(STRUCT_WITH_CUSTOM_DEFAULT_FIELD_DESC);
        this.structWithCustomDefault.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.i32WithCustomDefault != null) {
      if (isSetI32WithCustomDefault()) {
        oprot.writeFieldBegin(I32_WITH_CUSTOM_DEFAULT_FIELD_DESC);
        oprot.writeI32(this.i32WithCustomDefault);
        oprot.writeFieldEnd();
      }
    }
    if (this.mapMap != null) {
      if (isSetMapMap()) {
        oprot.writeFieldBegin(MAP_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.MAP, this.mapMap.size()));
          for (Map.Entry<String, Map<String,Integer>> _iter267 : this.mapMap.entrySet())          {
            oprot.writeString(_iter267.getKey());
            {
              oprot.writeMapBegin(new TMap(TType.STRING, TType.I32, _iter267.getValue().size()));
              for (Map.Entry<String, Integer> _iter268 : _iter267.getValue().entrySet())              {
                oprot.writeString(_iter268.getKey());
                oprot.writeI32(_iter268.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.listMap != null) {
      if (isSetListMap()) {
        oprot.writeFieldBegin(LIST_MAP_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.MAP, this.listMap.size()));
          for (Map<String,Integer> _iter269 : this.listMap)          {
            {
              oprot.writeMapBegin(new TMap(TType.STRING, TType.I32, _iter269.size()));
              for (Map.Entry<String, Integer> _iter270 : _iter269.entrySet())              {
                oprot.writeString(_iter270.getKey());
                oprot.writeI32(_iter270.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.optMapVal != null) {
      if (isSetOptMapVal()) {
        oprot.writeFieldBegin(OPT_MAP_VAL_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.optMapVal.size()));
          for (Map.Entry<String, String> _iter271 : this.optMapVal.entrySet())          {
            oprot.writeString(_iter271.getKey());
            oprot.writeString(_iter271.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.optSetVal != null) {
      if (isSetOptSetVal()) {
        oprot.writeFieldBegin(OPT_SET_VAL_FIELD_DESC);
        {
          oprot.writeSetBegin(new TSet(TType.STRING, this.optSetVal.size()));
          for (String _iter272 : this.optSetVal)          {
            oprot.writeString(_iter272);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.optListVal != null) {
      if (isSetOptListVal()) {
        oprot.writeFieldBegin(OPT_LIST_VAL_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I16, this.optListVal.size()));
          for (Short _iter273 : this.optListVal)          {
            oprot.writeI16(_iter273);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.optLateStructVal != null) {
      if (isSetOptLateStructVal()) {
        oprot.writeFieldBegin(OPT_LATE_STRUCT_VAL_FIELD_DESC);
        this.optLateStructVal.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.optStructVal != null) {
      if (isSetOptStructVal()) {
        oprot.writeFieldBegin(OPT_STRUCT_VAL_FIELD_DESC);
        this.optStructVal.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.optEnumVal != null) {
      if (isSetOptEnumVal()) {
        oprot.writeFieldBegin(OPT_ENUM_VAL_FIELD_DESC);
        oprot.writeI32(this.optEnumVal == null ? 0 : this.optEnumVal.getValue());
        oprot.writeFieldEnd();
      }
    }
    if (this.optBinaryVal != null) {
      if (isSetOptBinaryVal()) {
        oprot.writeFieldBegin(OPT_BINARY_VAL_FIELD_DESC);
        oprot.writeBinary(this.optBinaryVal);
        oprot.writeFieldEnd();
      }
    }
    if (this.optStringVal != null) {
      if (isSetOptStringVal()) {
        oprot.writeFieldBegin(OPT_STRING_VAL_FIELD_DESC);
        oprot.writeString(this.optStringVal);
        oprot.writeFieldEnd();
      }
    }
    if (this.optDoubleVal != null) {
      if (isSetOptDoubleVal()) {
        oprot.writeFieldBegin(OPT_DOUBLE_VAL_FIELD_DESC);
        oprot.writeDouble(this.optDoubleVal);
        oprot.writeFieldEnd();
      }
    }
    if (this.optFloatVal != null) {
      if (isSetOptFloatVal()) {
        oprot.writeFieldBegin(OPT_FLOAT_VAL_FIELD_DESC);
        oprot.writeFloat(this.optFloatVal);
        oprot.writeFieldEnd();
      }
    }
    if (this.optI64Val != null) {
      if (isSetOptI64Val()) {
        oprot.writeFieldBegin(OPT_I64_VAL_FIELD_DESC);
        oprot.writeI64(this.optI64Val);
        oprot.writeFieldEnd();
      }
    }
    if (this.optI32Val != null) {
      if (isSetOptI32Val()) {
        oprot.writeFieldBegin(OPT_I32_VAL_FIELD_DESC);
        oprot.writeI32(this.optI32Val);
        oprot.writeFieldEnd();
      }
    }
    if (this.optI16Val != null) {
      if (isSetOptI16Val()) {
        oprot.writeFieldBegin(OPT_I16_VAL_FIELD_DESC);
        oprot.writeI16(this.optI16Val);
        oprot.writeFieldEnd();
      }
    }
    if (this.optByteVal != null) {
      if (isSetOptByteVal()) {
        oprot.writeFieldBegin(OPT_BYTE_VAL_FIELD_DESC);
        oprot.writeByte(this.optByteVal);
        oprot.writeFieldEnd();
      }
    }
    if (this.optBoolVal != null) {
      if (isSetOptBoolVal()) {
        oprot.writeFieldBegin(OPT_BOOL_VAL_FIELD_DESC);
        oprot.writeBool(this.optBoolVal);
        oprot.writeFieldEnd();
      }
    }
    if (this.lateStructVal != null) {
      if (isSetLateStructVal()) {
        oprot.writeFieldBegin(LATE_STRUCT_VAL_FIELD_DESC);
        this.lateStructVal.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.unionVal != null) {
      if (isSetUnionVal()) {
        oprot.writeFieldBegin(UNION_VAL_FIELD_DESC);
        this.unionVal.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.structVal != null) {
      if (isSetStructVal()) {
        oprot.writeFieldBegin(STRUCT_VAL_FIELD_DESC);
        this.structVal.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.enumVal != null) {
      if (isSetEnumVal()) {
        oprot.writeFieldBegin(ENUM_VAL_FIELD_DESC);
        oprot.writeI32(this.enumVal == null ? 0 : this.enumVal.getValue());
        oprot.writeFieldEnd();
      }
    }
    if (this.binaryVal != null) {
      if (isSetBinaryVal()) {
        oprot.writeFieldBegin(BINARY_VAL_FIELD_DESC);
        oprot.writeBinary(this.binaryVal);
        oprot.writeFieldEnd();
      }
    }
    if (this.stringVal != null) {
      if (isSetStringVal()) {
        oprot.writeFieldBegin(STRING_VAL_FIELD_DESC);
        oprot.writeString(this.stringVal);
        oprot.writeFieldEnd();
      }
    }
    if (this.doubleVal != null) {
      if (isSetDoubleVal()) {
        oprot.writeFieldBegin(DOUBLE_VAL_FIELD_DESC);
        oprot.writeDouble(this.doubleVal);
        oprot.writeFieldEnd();
      }
    }
    if (this.floatVal != null) {
      if (isSetFloatVal()) {
        oprot.writeFieldBegin(FLOAT_VAL_FIELD_DESC);
        oprot.writeFloat(this.floatVal);
        oprot.writeFieldEnd();
      }
    }
    if (this.i64Val != null) {
      if (isSetI64Val()) {
        oprot.writeFieldBegin(I64_VAL_FIELD_DESC);
        oprot.writeI64(this.i64Val);
        oprot.writeFieldEnd();
      }
    }
    if (this.i32Val != null) {
      if (isSetI32Val()) {
        oprot.writeFieldBegin(I32_VAL_FIELD_DESC);
        oprot.writeI32(this.i32Val);
        oprot.writeFieldEnd();
      }
    }
    if (this.i16Val != null) {
      if (isSetI16Val()) {
        oprot.writeFieldBegin(I16_VAL_FIELD_DESC);
        oprot.writeI16(this.i16Val);
        oprot.writeFieldEnd();
      }
    }
    if (this.byteVal != null) {
      if (isSetByteVal()) {
        oprot.writeFieldBegin(BYTE_VAL_FIELD_DESC);
        oprot.writeByte(this.byteVal);
        oprot.writeFieldEnd();
      }
    }
    if (this.boolVal != null) {
      if (isSetBoolVal()) {
        oprot.writeFieldBegin(BOOL_VAL_FIELD_DESC);
        oprot.writeBool(this.boolVal);
        oprot.writeFieldEnd();
      }
    }
    if (this.structWithFieldCustomDefault != null) {
      if (isSetStructWithFieldCustomDefault()) {
        oprot.writeFieldBegin(STRUCT_WITH_FIELD_CUSTOM_DEFAULT_FIELD_DESC);
        this.structWithFieldCustomDefault.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    return TBaseHelper.toStringHelper(this, indent, prettyPrint);
  }

  public void validate() throws TException {
    // check for required fields
  }

}

