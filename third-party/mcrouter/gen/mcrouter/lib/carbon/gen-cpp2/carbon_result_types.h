/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>



// BEGIN declare_enums
namespace carbon {

enum class Result {
  UNKNOWN = 0,
  DELETED = 1,
  TOUCHED = 2,
  FOUND = 3,
  FOUNDSTALE = 4,
  NOTFOUND = 5,
  NOTFOUNDHOT = 6,
  NOTSTORED = 7,
  STALESTORED = 8,
  OK = 9,
  STORED = 10,
  EXISTS = 11,
  OOO = 12,
  TIMEOUT = 13,
  CONNECT_TIMEOUT = 14,
  CONNECT_ERROR = 15,
  BUSY = 16,
  RES_TRY_AGAIN = 17,
  SHUTDOWN = 18,
  TKO = 19,
  BAD_COMMAND = 20,
  BAD_KEY = 21,
  BAD_FLAGS = 22,
  BAD_EXPTIME = 23,
  BAD_LEASE_ID = 24,
  BAD_CAS_ID = 25,
  BAD_VALUE = 26,
  ABORTED = 27,
  CLIENT_ERROR = 28,
  LOCAL_ERROR = 29,
  REMOTE_ERROR = 30,
  WAITING = 31,
  NUM_RESULTS = 32
};




} // carbon
namespace std {


template<> struct hash<typename ::carbon::Result> : public apache::thrift::detail::enum_hash<typename ::carbon::Result> {};
template<> struct equal_to<typename ::carbon::Result> : public apache::thrift::detail::enum_equal_to<typename ::carbon::Result> {};


} // std

namespace apache { namespace thrift {


template <> struct TEnumDataStorage<::carbon::Result>;

template <> struct TEnumTraits<::carbon::Result> {
  using type = ::carbon::Result;

  static constexpr std::size_t const size = 33;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static char const* findName(type value);
  static bool findValue(char const* name, type* out);

  static constexpr type min() { return type::UNKNOWN; }
  static constexpr type max() { return type::NUM_RESULTS; }
};


}} // apache::thrift

namespace carbon {

using _Result_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<Result>;
extern const _Result_EnumMapFactory::ValuesToNamesMapType _Result_VALUES_TO_NAMES;
extern const _Result_EnumMapFactory::NamesToValuesMapType _Result_NAMES_TO_VALUES;

} // carbon

// END declare_enums
// BEGIN struct_indirection

// END struct_indirection
// BEGIN forward_declare

// END forward_declare
// BEGIN typedefs

// END typedefs
// BEGIN hash_and_equal_to
// END hash_and_equal_to
