// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package module

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	included0 "included"
	cpp1 "thrift/annotation/cpp"
	thrift2 "thrift/annotation/thrift"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var _ = included0.GoUnusedProtection__
var _ = cpp1.GoUnusedProtection__
var _ = thrift2.GoUnusedProtection__
type SomeService interface {
  // Parameters:
  //  - M
  BounceMap(m included0.SomeMap) (_r included0.SomeMap, err error)
  // Parameters:
  //  - R
  BinaryKeyedMap(r []int64) (_r map[string]int64, err error)
}

type SomeServiceClientInterface interface {
  thrift.ClientInterface
  // Parameters:
  //  - M
  BounceMap(m included0.SomeMap) (_r included0.SomeMap, err error)
  // Parameters:
  //  - R
  BinaryKeyedMap(r []int64) (_r map[string]int64, err error)
}

type SomeServiceClient struct {
  SomeServiceClientInterface
  CC thrift.ClientConn
}

func(client *SomeServiceClient) Open() error {
  return client.CC.Open()
}

func(client *SomeServiceClient) Close() error {
  return client.CC.Close()
}

func(client *SomeServiceClient) IsOpen() bool {
  return client.CC.IsOpen()
}

func NewSomeServiceClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *SomeServiceClient {
  return &SomeServiceClient{ CC: thrift.NewClientConn(t, f) }
}

func NewSomeServiceClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *SomeServiceClient {
  return &SomeServiceClient{ CC: thrift.NewClientConnWithProtocols(t, iprot, oprot) }
}

func NewSomeServiceClientProtocol(prot thrift.Protocol) *SomeServiceClient {
  return NewSomeServiceClient(prot.Transport(), prot, prot)
}

// Parameters:
//  - M
func (p *SomeServiceClient) BounceMap(m included0.SomeMap) (_r included0.SomeMap, err error) {
  args := SomeServiceBounceMapArgs{
    M : m,
  }
  err = p.CC.SendMsg("bounce_map", &args, thrift.CALL)
  if err != nil { return }
  return p.recvBounceMap()
}


func (p *SomeServiceClient) recvBounceMap() (value included0.SomeMap, err error) {
  var __result SomeServiceBounceMapResult
  err = p.CC.RecvMsg("bounce_map", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

// Parameters:
//  - R
func (p *SomeServiceClient) BinaryKeyedMap(r []int64) (_r map[string]int64, err error) {
  args := SomeServiceBinaryKeyedMapArgs{
    R : r,
  }
  err = p.CC.SendMsg("binary_keyed_map", &args, thrift.CALL)
  if err != nil { return }
  return p.recvBinaryKeyedMap()
}


func (p *SomeServiceClient) recvBinaryKeyedMap() (value map[string]int64, err error) {
  var __result SomeServiceBinaryKeyedMapResult
  err = p.CC.RecvMsg("binary_keyed_map", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}


type SomeServiceThreadsafeClient struct {
  SomeServiceClientInterface
  CC thrift.ClientConn
  Mu sync.Mutex
}

func(client *SomeServiceThreadsafeClient) Open() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Open()
}

func(client *SomeServiceThreadsafeClient) Close() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Close()
}

func(client *SomeServiceThreadsafeClient) IsOpen() bool {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.IsOpen()
}

func NewSomeServiceThreadsafeClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *SomeServiceThreadsafeClient {
  return &SomeServiceThreadsafeClient{ CC: thrift.NewClientConn(t, f) }
}

func NewSomeServiceThreadsafeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *SomeServiceThreadsafeClient {
  return &SomeServiceThreadsafeClient{ CC: thrift.NewClientConnWithProtocols(t, iprot, oprot) }
}

func NewSomeServiceThreadsafeClientProtocol(prot thrift.Protocol) *SomeServiceThreadsafeClient {
  return NewSomeServiceThreadsafeClient(prot.Transport(), prot, prot)
}

// Parameters:
//  - M
func (p *SomeServiceThreadsafeClient) BounceMap(m included0.SomeMap) (_r included0.SomeMap, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := SomeServiceBounceMapArgs{
    M : m,
  }
  err = p.CC.SendMsg("bounce_map", &args, thrift.CALL)
  if err != nil { return }
  return p.recvBounceMap()
}


func (p *SomeServiceThreadsafeClient) recvBounceMap() (value included0.SomeMap, err error) {
  var __result SomeServiceBounceMapResult
  err = p.CC.RecvMsg("bounce_map", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

// Parameters:
//  - R
func (p *SomeServiceThreadsafeClient) BinaryKeyedMap(r []int64) (_r map[string]int64, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := SomeServiceBinaryKeyedMapArgs{
    R : r,
  }
  err = p.CC.SendMsg("binary_keyed_map", &args, thrift.CALL)
  if err != nil { return }
  return p.recvBinaryKeyedMap()
}


func (p *SomeServiceThreadsafeClient) recvBinaryKeyedMap() (value map[string]int64, err error) {
  var __result SomeServiceBinaryKeyedMapResult
  err = p.CC.RecvMsg("binary_keyed_map", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}


type SomeServiceChannelClient struct {
  RequestChannel thrift.RequestChannel
}

func (c *SomeServiceChannelClient) Close() error {
  return c.RequestChannel.Close()
}

func (c *SomeServiceChannelClient) IsOpen() bool {
  return c.RequestChannel.IsOpen()
}

func (c *SomeServiceChannelClient) Open() error {
  return c.RequestChannel.Open()
}

func NewSomeServiceChannelClient(channel thrift.RequestChannel) *SomeServiceChannelClient {
  return &SomeServiceChannelClient{RequestChannel: channel}
}

// Parameters:
//  - M
func (p *SomeServiceChannelClient) BounceMap(ctx context.Context, m included0.SomeMap) (_r included0.SomeMap, err error) {
  args := SomeServiceBounceMapArgs{
    M : m,
  }
  var __result SomeServiceBounceMapResult
  err = p.RequestChannel.Call(ctx, "bounce_map", &args, &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

// Parameters:
//  - R
func (p *SomeServiceChannelClient) BinaryKeyedMap(ctx context.Context, r []int64) (_r map[string]int64, err error) {
  args := SomeServiceBinaryKeyedMapArgs{
    R : r,
  }
  var __result SomeServiceBinaryKeyedMapResult
  err = p.RequestChannel.Call(ctx, "binary_keyed_map", &args, &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}


type SomeServiceProcessor struct {
  processorMap map[string]thrift.ProcessorFunction
  functionServiceMap map[string]string
  handler SomeService
}

func (p *SomeServiceProcessor) AddToProcessorMap(key string, processor thrift.ProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *SomeServiceProcessor) AddToFunctionServiceMap(key, service string) {
  p.functionServiceMap[key] = service
}

func (p *SomeServiceProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction, err error) {
  if processor, ok := p.processorMap[key]; ok {
    return processor, nil
  }
  return nil, nil // generic error message will be sent
}

func (p *SomeServiceProcessor) ProcessorMap() map[string]thrift.ProcessorFunction {
  return p.processorMap
}

func (p *SomeServiceProcessor) FunctionServiceMap() map[string]string {
  return p.functionServiceMap
}

func NewSomeServiceProcessor(handler SomeService) *SomeServiceProcessor {
  self31 := &SomeServiceProcessor{handler:handler, processorMap:make(map[string]thrift.ProcessorFunction), functionServiceMap:make(map[string]string)}
  self31.processorMap["bounce_map"] = &someServiceProcessorBounceMap{handler:handler}
  self31.processorMap["binary_keyed_map"] = &someServiceProcessorBinaryKeyedMap{handler:handler}
  self31.functionServiceMap["bounce_map"] = "SomeService"
  self31.functionServiceMap["binary_keyed_map"] = "SomeService"
  return self31
}

type someServiceProcessorBounceMap struct {
  handler SomeService
}

func (p *SomeServiceBounceMapResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *someServiceProcessorBounceMap) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := SomeServiceBounceMapArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *someServiceProcessorBounceMap) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("bounce_map", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *someServiceProcessorBounceMap) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*SomeServiceBounceMapArgs)
  var __result SomeServiceBounceMapResult
  if retval, err := p.handler.BounceMap(args.M); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing bounce_map: " + err.Error(), err)
      return x, x
    }
  } else {
    __result.Success = retval
  }
  return &__result, nil
}

type someServiceProcessorBinaryKeyedMap struct {
  handler SomeService
}

func (p *SomeServiceBinaryKeyedMapResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *someServiceProcessorBinaryKeyedMap) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := SomeServiceBinaryKeyedMapArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *someServiceProcessorBinaryKeyedMap) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("binary_keyed_map", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *someServiceProcessorBinaryKeyedMap) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*SomeServiceBinaryKeyedMapArgs)
  var __result SomeServiceBinaryKeyedMapResult
  if retval, err := p.handler.BinaryKeyedMap(args.R); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing binary_keyed_map: " + err.Error(), err)
      return x, x
    }
  } else {
    __result.Success = retval
  }
  return &__result, nil
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - M
type SomeServiceBounceMapArgs struct {
  thrift.IRequest
  M included0.SomeMap `thrift:"m,1" db:"m" json:"m"`
}

func NewSomeServiceBounceMapArgs() *SomeServiceBounceMapArgs {
  return &SomeServiceBounceMapArgs{}
}


func (p *SomeServiceBounceMapArgs) GetM() included0.SomeMap {
  return p.M
}
type SomeServiceBounceMapArgsBuilder struct {
  obj *SomeServiceBounceMapArgs
}

func NewSomeServiceBounceMapArgsBuilder() *SomeServiceBounceMapArgsBuilder{
  return &SomeServiceBounceMapArgsBuilder{
    obj: NewSomeServiceBounceMapArgs(),
  }
}

func (p SomeServiceBounceMapArgsBuilder) Emit() *SomeServiceBounceMapArgs{
  return &SomeServiceBounceMapArgs{
    M: p.obj.M,
  }
}

func (s *SomeServiceBounceMapArgsBuilder) M(m included0.SomeMap) *SomeServiceBounceMapArgsBuilder {
  s.obj.M = m
  return s
}

func (s *SomeServiceBounceMapArgs) SetM(m included0.SomeMap) *SomeServiceBounceMapArgs {
  s.M = m
  return s
}

func (p *SomeServiceBounceMapArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SomeServiceBounceMapArgs)  ReadField1(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(included0.SomeMap, size)
  p.M =  tMap
  for i := 0; i < size; i ++ {
    var _key33 int32
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key33 = v
    }
    var _val34 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val34 = v
    }
    p.M[_key33] = _val34
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SomeServiceBounceMapArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("bounce_map_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SomeServiceBounceMapArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("m", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:m: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.M)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.M {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:m: ", p), err) }
  return err
}

func (p *SomeServiceBounceMapArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  mVal := fmt.Sprintf("%v", p.M)
  return fmt.Sprintf("SomeServiceBounceMapArgs({M:%s})", mVal)
}

// Attributes:
//  - Success
type SomeServiceBounceMapResult struct {
  thrift.IResponse
  Success included0.SomeMap `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewSomeServiceBounceMapResult() *SomeServiceBounceMapResult {
  return &SomeServiceBounceMapResult{}
}

var SomeServiceBounceMapResult_Success_DEFAULT included0.SomeMap

func (p *SomeServiceBounceMapResult) GetSuccess() included0.SomeMap {
  return p.Success
}
func (p *SomeServiceBounceMapResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type SomeServiceBounceMapResultBuilder struct {
  obj *SomeServiceBounceMapResult
}

func NewSomeServiceBounceMapResultBuilder() *SomeServiceBounceMapResultBuilder{
  return &SomeServiceBounceMapResultBuilder{
    obj: NewSomeServiceBounceMapResult(),
  }
}

func (p SomeServiceBounceMapResultBuilder) Emit() *SomeServiceBounceMapResult{
  return &SomeServiceBounceMapResult{
    Success: p.obj.Success,
  }
}

func (s *SomeServiceBounceMapResultBuilder) Success(success included0.SomeMap) *SomeServiceBounceMapResultBuilder {
  s.obj.Success = success
  return s
}

func (s *SomeServiceBounceMapResult) SetSuccess(success included0.SomeMap) *SomeServiceBounceMapResult {
  s.Success = success
  return s
}

func (p *SomeServiceBounceMapResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SomeServiceBounceMapResult)  ReadField0(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(included0.SomeMap, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
    var _key35 int32
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key35 = v
    }
    var _val36 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val36 = v
    }
    p.Success[_key35] = _val36
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SomeServiceBounceMapResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("bounce_map_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SomeServiceBounceMapResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteI32(int32(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SomeServiceBounceMapResult) String() string {
  if p == nil {
    return "<nil>"
  }

  successVal := fmt.Sprintf("%v", p.Success)
  return fmt.Sprintf("SomeServiceBounceMapResult({Success:%s})", successVal)
}

// Attributes:
//  - R
type SomeServiceBinaryKeyedMapArgs struct {
  thrift.IRequest
  R []int64 `thrift:"r,1" db:"r" json:"r"`
}

func NewSomeServiceBinaryKeyedMapArgs() *SomeServiceBinaryKeyedMapArgs {
  return &SomeServiceBinaryKeyedMapArgs{}
}


func (p *SomeServiceBinaryKeyedMapArgs) GetR() []int64 {
  return p.R
}
type SomeServiceBinaryKeyedMapArgsBuilder struct {
  obj *SomeServiceBinaryKeyedMapArgs
}

func NewSomeServiceBinaryKeyedMapArgsBuilder() *SomeServiceBinaryKeyedMapArgsBuilder{
  return &SomeServiceBinaryKeyedMapArgsBuilder{
    obj: NewSomeServiceBinaryKeyedMapArgs(),
  }
}

func (p SomeServiceBinaryKeyedMapArgsBuilder) Emit() *SomeServiceBinaryKeyedMapArgs{
  return &SomeServiceBinaryKeyedMapArgs{
    R: p.obj.R,
  }
}

func (s *SomeServiceBinaryKeyedMapArgsBuilder) R(r []int64) *SomeServiceBinaryKeyedMapArgsBuilder {
  s.obj.R = r
  return s
}

func (s *SomeServiceBinaryKeyedMapArgs) SetR(r []int64) *SomeServiceBinaryKeyedMapArgs {
  s.R = r
  return s
}

func (p *SomeServiceBinaryKeyedMapArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SomeServiceBinaryKeyedMapArgs)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.R =  tSlice
  for i := 0; i < size; i ++ {
    var _elem37 int64
    if v, err := iprot.ReadI64(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem37 = v
    }
    p.R = append(p.R, _elem37)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SomeServiceBinaryKeyedMapArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("binary_keyed_map_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SomeServiceBinaryKeyedMapArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("r", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:r: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I64, len(p.R)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.R {
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:r: ", p), err) }
  return err
}

func (p *SomeServiceBinaryKeyedMapArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  rVal := fmt.Sprintf("%v", p.R)
  return fmt.Sprintf("SomeServiceBinaryKeyedMapArgs({R:%s})", rVal)
}

// Attributes:
//  - Success
type SomeServiceBinaryKeyedMapResult struct {
  thrift.IResponse
  Success map[string]int64 `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewSomeServiceBinaryKeyedMapResult() *SomeServiceBinaryKeyedMapResult {
  return &SomeServiceBinaryKeyedMapResult{}
}

var SomeServiceBinaryKeyedMapResult_Success_DEFAULT map[string]int64

func (p *SomeServiceBinaryKeyedMapResult) GetSuccess() map[string]int64 {
  return p.Success
}
func (p *SomeServiceBinaryKeyedMapResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type SomeServiceBinaryKeyedMapResultBuilder struct {
  obj *SomeServiceBinaryKeyedMapResult
}

func NewSomeServiceBinaryKeyedMapResultBuilder() *SomeServiceBinaryKeyedMapResultBuilder{
  return &SomeServiceBinaryKeyedMapResultBuilder{
    obj: NewSomeServiceBinaryKeyedMapResult(),
  }
}

func (p SomeServiceBinaryKeyedMapResultBuilder) Emit() *SomeServiceBinaryKeyedMapResult{
  return &SomeServiceBinaryKeyedMapResult{
    Success: p.obj.Success,
  }
}

func (s *SomeServiceBinaryKeyedMapResultBuilder) Success(success map[string]int64) *SomeServiceBinaryKeyedMapResultBuilder {
  s.obj.Success = success
  return s
}

func (s *SomeServiceBinaryKeyedMapResult) SetSuccess(success map[string]int64) *SomeServiceBinaryKeyedMapResult {
  s.Success = success
  return s
}

func (p *SomeServiceBinaryKeyedMapResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SomeServiceBinaryKeyedMapResult)  ReadField0(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int64, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
    var _key38 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key38 = v
    }
    var _val39 int64
    if v, err := iprot.ReadI64(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val39 = v
    }
    p.Success[_key38] = _val39
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SomeServiceBinaryKeyedMapResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("binary_keyed_map_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SomeServiceBinaryKeyedMapResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteI64(int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SomeServiceBinaryKeyedMapResult) String() string {
  if p == nil {
    return "<nil>"
  }

  successVal := fmt.Sprintf("%v", p.Success)
  return fmt.Sprintf("SomeServiceBinaryKeyedMapResult({Success:%s})", successVal)
}


