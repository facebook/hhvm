/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package test.fixtures.basic;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class FB303Service {

  public interface Iface {

    public ReservedKeyword simple_rpc(Integer int_parameter) throws TException;

  }

  public interface AsyncIface {

    public void simple_rpc(Integer int_parameter, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends EventHandlerBase implements Iface, TClientIf {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    @Override
    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    @Override
    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public ReservedKeyword simple_rpc(Integer int_parameter) throws TException
    {
      ContextStack ctx = getContextStack("FB303Service.simple_rpc", null);
      this.setContextStack(ctx);
      send_simple_rpc(int_parameter);
      return recv_simple_rpc();
    }

    public void send_simple_rpc(Integer int_parameter) throws TException
    {
      ContextStack ctx = this.getContextStack();
      super.preWrite(ctx, "FB303Service.simple_rpc", null);
      oprot_.writeMessageBegin(new TMessage("simple_rpc", TMessageType.CALL, seqid_));
      simple_rpc_args args = new simple_rpc_args();
      args.int_parameter = int_parameter;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
      super.postWrite(ctx, "FB303Service.simple_rpc", args);
      return;
    }

    public ReservedKeyword recv_simple_rpc() throws TException
    {
      ContextStack ctx = super.getContextStack();
      long bytes;
      TMessageType mtype;
      super.preRead(ctx, "FB303Service.simple_rpc");
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      simple_rpc_result result = simple_rpc_result.deserialize(iprot_);
      iprot_.readMessageEnd();
      super.postRead(ctx, "FB303Service.simple_rpc", result);

      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "simple_rpc failed: unknown result");
    }

  }
  public static class AsyncClient extends TAsyncClient implements AsyncIface {
    public static class Factory implements TAsyncClientFactory<AsyncClient> {
      private TAsyncClientManager clientManager;
      private TProtocolFactory protocolFactory;
      public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void simple_rpc(Integer int_parameter, AsyncMethodCallback resultHandler18) throws TException {
      checkReady();
      simple_rpc_call method_call = new simple_rpc_call(int_parameter, resultHandler18, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class simple_rpc_call extends TAsyncMethodCall {
      private Integer int_parameter;
      public simple_rpc_call(Integer int_parameter, AsyncMethodCallback resultHandler19, TAsyncClient client15, TProtocolFactory protocolFactory16, TNonblockingTransport transport17) throws TException {
        super(client15, protocolFactory16, transport17, resultHandler19, false);
        this.int_parameter = int_parameter;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("simple_rpc", TMessageType.CALL, 0));
        simple_rpc_args args = new simple_rpc_args();
        args.setInt_parameter(int_parameter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReservedKeyword getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = super.client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_simple_rpc();
      }
    }

  }

  public static class Processor implements TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      iface_ = iface;
      event_handler_ = new TProcessorEventHandler(); // Empty handler
      processMap_.put("simple_rpc", new simple_rpc());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot, TConnectionContext server_ctx) throws TException;
    }

    public void setEventHandler(TProcessorEventHandler handler) {
      this.event_handler_ = handler;
    }

    private Iface iface_;
    protected TProcessorEventHandler event_handler_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot, TConnectionContext server_ctx) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot, server_ctx);
      return true;
    }

    private class simple_rpc implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot, TConnectionContext server_ctx) throws TException
      {
        Object handler_ctx = event_handler_.getContext("FB303Service.simple_rpc", server_ctx);
        simple_rpc_args args = new simple_rpc_args();
        event_handler_.preRead(handler_ctx, "FB303Service.simple_rpc");
        args.read(iprot);
        iprot.readMessageEnd();
        event_handler_.postRead(handler_ctx, "FB303Service.simple_rpc", args);
        simple_rpc_result result = new simple_rpc_result();
        result.success = iface_.simple_rpc(args.int_parameter);
        event_handler_.preWrite(handler_ctx, "FB303Service.simple_rpc", result);
        oprot.writeMessageBegin(new TMessage("simple_rpc", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        event_handler_.postWrite(handler_ctx, "FB303Service.simple_rpc", result);
      }

    }

  }

  public static class simple_rpc_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("simple_rpc_args");
    private static final TField INT_PARAMETER_FIELD_DESC = new TField("int_parameter", TType.I32, (short)1);

    public Integer int_parameter;
    public static final int INT_PARAMETER = 1;

    // isset id assignments


    public simple_rpc_args() {
    }

    public simple_rpc_args(
        Integer int_parameter) {
      this.int_parameter = int_parameter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public simple_rpc_args(simple_rpc_args other) {
      if (other.isSetInt_parameter()) {
        this.int_parameter = TBaseHelper.deepCopy(other.int_parameter);
      }
    }

    public simple_rpc_args deepCopy() {
      return new simple_rpc_args(this);
    }

    public Integer getInt_parameter() {
      return this.int_parameter;
    }

    public simple_rpc_args setInt_parameter(Integer int_parameter) {
      this.int_parameter = int_parameter;
      return this;
    }

    public void unsetInt_parameter() {
      this.int_parameter = null;
    }

    // Returns true if field int_parameter is set (has been assigned a value) and false otherwise
    public boolean isSetInt_parameter() {
      return this.int_parameter != null;
    }

    public void setInt_parameterIsSet(boolean __value) {
      if (!__value) {
        this.int_parameter = null;
      }
    }

    @Override
    public boolean equals(Object _that) {
      if (_that == null)
        return false;
      if (this == _that)
        return true;
      if (!(_that instanceof simple_rpc_args))
        return false;
      simple_rpc_args that = (simple_rpc_args)_that;

      if (!TBaseHelper.equalsNobinary(this.isSetInt_parameter(), that.isSetInt_parameter(), this.int_parameter, that.int_parameter)) { return false; }

      return true;
    }

    @Override
    public int hashCode() {
      return Arrays.deepHashCode(new Object[] {int_parameter});
    }

    // This is required to satisfy the TBase interface, but can't be implemented on immutable struture.
    public void read(TProtocol iprot) throws TException {
      throw new TException("unimplemented in android immutable structure");
    }

    public static simple_rpc_args deserialize(TProtocol iprot) throws TException {
      Integer tmp_int_parameter = null;
      TField __field;
      iprot.readStructBegin();
      while (true)
      {
        __field = iprot.readFieldBegin();
        if (__field.type == TType.STOP) {
          break;
        }
        switch (__field.id)
        {
          case INT_PARAMETER:
            if (__field.type == TType.I32) {
              tmp_int_parameter = iprot.readI32();
            } else {
              TProtocolUtil.skip(iprot, __field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, __field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      simple_rpc_args _that;
      _that = new simple_rpc_args(
        tmp_int_parameter
      );
      _that.validate();
      return _that;
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.int_parameter != null) {
        oprot.writeFieldBegin(INT_PARAMETER_FIELD_DESC);
        oprot.writeI32(this.int_parameter);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(1, true);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      return TBaseHelper.toStringHelper(this, indent, prettyPrint);
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class simple_rpc_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("simple_rpc_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    public ReservedKeyword success;
    public static final int SUCCESS = 0;

    // isset id assignments


    public simple_rpc_result() {
    }

    public simple_rpc_result(
        ReservedKeyword success) {
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public simple_rpc_result(simple_rpc_result other) {
      if (other.isSetSuccess()) {
        this.success = TBaseHelper.deepCopy(other.success);
      }
    }

    public simple_rpc_result deepCopy() {
      return new simple_rpc_result(this);
    }

    public ReservedKeyword getSuccess() {
      return this.success;
    }

    public simple_rpc_result setSuccess(ReservedKeyword success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been assigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean __value) {
      if (!__value) {
        this.success = null;
      }
    }

    @Override
    public boolean equals(Object _that) {
      if (_that == null)
        return false;
      if (this == _that)
        return true;
      if (!(_that instanceof simple_rpc_result))
        return false;
      simple_rpc_result that = (simple_rpc_result)_that;

      if (!TBaseHelper.equalsNobinary(this.isSetSuccess(), that.isSetSuccess(), this.success, that.success)) { return false; }

      return true;
    }

    @Override
    public int hashCode() {
      return Arrays.deepHashCode(new Object[] {success});
    }

    // This is required to satisfy the TBase interface, but can't be implemented on immutable struture.
    public void read(TProtocol iprot) throws TException {
      throw new TException("unimplemented in android immutable structure");
    }

    public static simple_rpc_result deserialize(TProtocol iprot) throws TException {
      ReservedKeyword tmp_success = null;
      TField __field;
      iprot.readStructBegin();
      while (true)
      {
        __field = iprot.readFieldBegin();
        if (__field.type == TType.STOP) {
          break;
        }
        switch (__field.id)
        {
          case SUCCESS:
            if (__field.type == TType.STRUCT) {
              tmp_success = ReservedKeyword.deserialize(iprot);
            } else {
              TProtocolUtil.skip(iprot, __field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, __field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      simple_rpc_result _that;
      _that = new simple_rpc_result(
        tmp_success
      );
      _that.validate();
      return _that;
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(1, true);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      return TBaseHelper.toStringHelper(this, indent, prettyPrint);
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
