/**
 * Autogenerated by Thrift for 
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include "thrift/compiler/test/fixtures/method_decorators/gen-cpp2/module_handlers.h"

#include <thrift/lib/cpp2/gen/service_tcc.h>

namespace cpp2 {
typedef apache::thrift::ThriftPresult<false> DecoratedService_noop_pargs;
typedef apache::thrift::ThriftPresult<true> DecoratedService_noop_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, ::apache::thrift::type_class::string, ::std::string*>> DecoratedService_echo_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, ::apache::thrift::type_class::string, ::std::string*>> DecoratedService_echo_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, ::apache::thrift::type_class::integral, ::std::int64_t*>> DecoratedService_increment_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, ::apache::thrift::type_class::integral, ::std::int64_t*>> DecoratedService_increment_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::std::vector<::std::int64_t>*>> DecoratedService_sum_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, ::apache::thrift::type_class::integral, ::std::int64_t*>> DecoratedService_sum_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, ::apache::thrift::type_class::structure, ::cpp2::Request*>> DecoratedService_withStruct_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, ::apache::thrift::type_class::structure, ::cpp2::Response*>> DecoratedService_withStruct_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, ::apache::thrift::type_class::string, ::std::string*>, apache::thrift::FieldData<2, ::apache::thrift::type_class::integral, ::std::int64_t*>, apache::thrift::FieldData<3, ::apache::thrift::type_class::structure, ::cpp2::Request*>> DecoratedService_multiParam_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, ::apache::thrift::type_class::structure, ::cpp2::Response*>> DecoratedService_multiParam_presult;
typedef apache::thrift::ThriftPresult<false> DecoratedService_echoInteraction_pargs;
typedef apache::thrift::ThriftPresult<true> DecoratedService_echoInteraction_presult;
//
// Service Methods
//

//
// Method 'noop'
//
template <typename ProtocolIn_, typename ProtocolOut_>
void DecoratedServiceAsyncProcessor::setUpAndProcess_noop(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    apache::thrift::SerializedCompressedRequest&& serializedRequest,
    apache::thrift::Cpp2RequestContext* ctx,
    folly::EventBase* eb,
    [[maybe_unused]] apache::thrift::concurrency::ThreadManager* tm) {
  if (!setUpRequestProcessing(
          req, ctx, eb, tm, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, iface_)) {
    return;
  }
  auto scope = iface_->getRequestExecutionScope(
      ctx, apache::thrift::concurrency::NORMAL);
  ctx->setRequestExecutionScope(std::move(scope));
  processInThread(
      std::move(req),
      std::move(serializedRequest),
      ctx,
      eb,
      tm,
      apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE,
      &DecoratedServiceAsyncProcessor::
          executeRequest_noop<ProtocolIn_, ProtocolOut_>,
      this);
}

template <typename ProtocolIn_, typename ProtocolOut_>
void DecoratedServiceAsyncProcessor::executeRequest_noop(
    apache::thrift::ServerRequest&& serverRequest) {
  // make sure getRequestContext is null
  // so async calls don't accidentally use it
  iface_->setRequestContext(nullptr);
  struct ArgsState {
    DecoratedService_noop_pargs pargs() {
      DecoratedService_noop_pargs args;
      return args;
    }

    auto asTupleOfRefs() & {
      return std::tie(
      );
    }
  } args;

  auto ctxStack = apache::thrift::ContextStack::create(
      this->getEventHandlersSharedPtr(),
      this->getServiceName(),
      "DecoratedService.noop",
      serverRequest.requestContext());
  try {
    auto pargs = args.pargs();
    deserializeRequest<ProtocolIn_>(
        pargs,
        "noop",
        apache::thrift::detail::ServerRequestHelper::compressedRequest(
            std::move(serverRequest))
            .uncompress(),
        ctxStack.get());
  } catch (...) {
    folly::exception_wrapper ew(std::current_exception());
    apache::thrift::detail::ap::process_handle_exn_deserialization<
        ProtocolOut_>(
        ew,
        apache::thrift::detail::ServerRequestHelper::request(std::move(serverRequest)),
            serverRequest.requestContext(),
        apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
        "noop");
    return;
  }
  auto requestPileNotification =
      apache::thrift::detail::ServerRequestHelper::moveRequestPileNotification(
          serverRequest);
  auto concurrencyControllerNotification =
      apache::thrift::detail::ServerRequestHelper::moveConcurrencyControllerNotification(
          serverRequest);
  apache::thrift::HandlerCallbackBase::MethodNameInfo methodNameInfo{
      /* .serviceName =*/ this->getServiceName(),
      /* .definingServiceName =*/ "DecoratedService",
      /* .methodName =*/ "noop",
      /* .qualifiedMethodName =*/ "DecoratedService.noop"};
  apache::thrift::HandlerCallback<void>::DecoratorAfterCallback decoratorCallback{
    static_cast<void*>(iface_),
    apache::thrift::ServiceHandler<::cpp2::DecoratedService>::fbthrift_invoke_decorator_after_noop};
 auto callback =
      apache::thrift::HandlerCallbackPtr<void>::make(
          apache::thrift::detail::ServerRequestHelper::request(
              std::move(serverRequest)),
          std::move(ctxStack),
          std::move(methodNameInfo),
          return_noop<ProtocolIn_, ProtocolOut_>,
          throw_wrapped_noop<ProtocolIn_, ProtocolOut_>,
          serverRequest.requestContext()->getProtoSeqId(),
          apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
          apache::thrift::detail::ServerRequestHelper::executor(serverRequest),
          serverRequest.requestContext(),
          requestPileNotification,
          concurrencyControllerNotification,
          std::move(serverRequest.requestData()),
          apache::thrift::TilePtr(),
          std::move(decoratorCallback));
  // Execute method decorator before_noop.
  iface_->fbthrift_execute_decorators_before_noop(*serverRequest.requestContext());

  const auto makeExecuteHandler = [&] {
    return [ifacePtr = iface_](auto&& cb, ArgsState args) mutable {
      (void)args;
      ifacePtr->async_tm_noop(std::move(cb));
    };
  };
#if FOLLY_HAS_COROUTINES
  if (apache::thrift::detail::shouldProcessServiceInterceptorsOnRequest(
          *callback)) {
    [](auto callback, auto executeHandler, ArgsState args)
        -> folly::coro::Task<void> {
      auto argRefs = args.asTupleOfRefs();
      co_await apache::thrift::detail::processServiceInterceptorsOnRequest(
          *callback,
          apache::thrift::detail::ServiceInterceptorOnRequestArguments(
              argRefs));
      executeHandler(std::move(callback), std::move(args));
    }(std::move(callback), makeExecuteHandler(), std::move(args))
               .scheduleOn(
                   apache::thrift::detail::ServerRequestHelper::executor(
                       serverRequest))
               .startInlineUnsafe();
  } else {
    makeExecuteHandler()(std::move(callback), std::move(args));
  }
#else
  makeExecuteHandler()(std::move(callback), std::move(args));
#endif // FOLLY_HAS_COROUTINES
}

template <class ProtocolIn_, class ProtocolOut_>
apache::thrift::SerializedResponse DecoratedServiceAsyncProcessor::return_noop(
    apache::thrift::ContextStack* ctx) {
  ProtocolOut_ prot;
  ::cpp2::DecoratedService_noop_presult result;
  return serializeResponse("noop", &prot, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void DecoratedServiceAsyncProcessor::throw_wrapped_noop(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    [[maybe_unused]] int32_t protoSeqId,
    apache::thrift::ContextStack* ctx,
    folly::exception_wrapper ew,
    apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  {
    apache::thrift::detail::ap::process_throw_wrapped_handler_error<
        ProtocolOut_>(ew, std::move(req), reqCtx, ctx, "noop");
    return;
  }
}
//
// End of Method 'noop'
//

//
// Method 'echo'
//
template <typename ProtocolIn_, typename ProtocolOut_>
void DecoratedServiceAsyncProcessor::setUpAndProcess_echo(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    apache::thrift::SerializedCompressedRequest&& serializedRequest,
    apache::thrift::Cpp2RequestContext* ctx,
    folly::EventBase* eb,
    [[maybe_unused]] apache::thrift::concurrency::ThreadManager* tm) {
  if (!setUpRequestProcessing(
          req, ctx, eb, tm, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, iface_)) {
    return;
  }
  auto scope = iface_->getRequestExecutionScope(
      ctx, apache::thrift::concurrency::NORMAL);
  ctx->setRequestExecutionScope(std::move(scope));
  processInThread(
      std::move(req),
      std::move(serializedRequest),
      ctx,
      eb,
      tm,
      apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE,
      &DecoratedServiceAsyncProcessor::
          executeRequest_echo<ProtocolIn_, ProtocolOut_>,
      this);
}

template <typename ProtocolIn_, typename ProtocolOut_>
void DecoratedServiceAsyncProcessor::executeRequest_echo(
    apache::thrift::ServerRequest&& serverRequest) {
  // make sure getRequestContext is null
  // so async calls don't accidentally use it
  iface_->setRequestContext(nullptr);
  struct ArgsState {
    std::unique_ptr<::std::string> uarg_text = std::make_unique<::std::string>();
    DecoratedService_echo_pargs pargs() {
      DecoratedService_echo_pargs args;
      args.get<0>().value = uarg_text.get();
      return args;
    }

    auto asTupleOfRefs() & {
      return std::tie(
        std::as_const(*uarg_text)
      );
    }
  } args;

  auto ctxStack = apache::thrift::ContextStack::create(
      this->getEventHandlersSharedPtr(),
      this->getServiceName(),
      "DecoratedService.echo",
      serverRequest.requestContext());
  try {
    auto pargs = args.pargs();
    deserializeRequest<ProtocolIn_>(
        pargs,
        "echo",
        apache::thrift::detail::ServerRequestHelper::compressedRequest(
            std::move(serverRequest))
            .uncompress(),
        ctxStack.get());
  } catch (...) {
    folly::exception_wrapper ew(std::current_exception());
    apache::thrift::detail::ap::process_handle_exn_deserialization<
        ProtocolOut_>(
        ew,
        apache::thrift::detail::ServerRequestHelper::request(std::move(serverRequest)),
            serverRequest.requestContext(),
        apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
        "echo");
    return;
  }
  auto requestPileNotification =
      apache::thrift::detail::ServerRequestHelper::moveRequestPileNotification(
          serverRequest);
  auto concurrencyControllerNotification =
      apache::thrift::detail::ServerRequestHelper::moveConcurrencyControllerNotification(
          serverRequest);
  apache::thrift::HandlerCallbackBase::MethodNameInfo methodNameInfo{
      /* .serviceName =*/ this->getServiceName(),
      /* .definingServiceName =*/ "DecoratedService",
      /* .methodName =*/ "echo",
      /* .qualifiedMethodName =*/ "DecoratedService.echo"};
  apache::thrift::HandlerCallback<std::unique_ptr<::std::string>>::DecoratorAfterCallback decoratorCallback{
    static_cast<void*>(iface_),
    apache::thrift::ServiceHandler<::cpp2::DecoratedService>::fbthrift_invoke_decorator_after_echo};
 auto callback =
      apache::thrift::HandlerCallbackPtr<std::unique_ptr<::std::string>>::make(
          apache::thrift::detail::ServerRequestHelper::request(
              std::move(serverRequest)),
          std::move(ctxStack),
          std::move(methodNameInfo),
          return_echo<ProtocolIn_, ProtocolOut_>,
          throw_wrapped_echo<ProtocolIn_, ProtocolOut_>,
          serverRequest.requestContext()->getProtoSeqId(),
          apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
          apache::thrift::detail::ServerRequestHelper::executor(serverRequest),
          serverRequest.requestContext(),
          requestPileNotification,
          concurrencyControllerNotification,
          std::move(serverRequest.requestData()),
          apache::thrift::TilePtr(),
          std::move(decoratorCallback));
  // Execute method decorator before_echo.
  iface_->fbthrift_execute_decorators_before_echo(*serverRequest.requestContext(), *args.uarg_text);

  const auto makeExecuteHandler = [&] {
    return [ifacePtr = iface_](auto&& cb, ArgsState args) mutable {
      (void)args;
      ifacePtr->async_tm_echo(std::move(cb), std::move(args.uarg_text));
    };
  };
#if FOLLY_HAS_COROUTINES
  if (apache::thrift::detail::shouldProcessServiceInterceptorsOnRequest(
          *callback)) {
    [](auto callback, auto executeHandler, ArgsState args)
        -> folly::coro::Task<void> {
      auto argRefs = args.asTupleOfRefs();
      co_await apache::thrift::detail::processServiceInterceptorsOnRequest(
          *callback,
          apache::thrift::detail::ServiceInterceptorOnRequestArguments(
              argRefs));
      executeHandler(std::move(callback), std::move(args));
    }(std::move(callback), makeExecuteHandler(), std::move(args))
               .scheduleOn(
                   apache::thrift::detail::ServerRequestHelper::executor(
                       serverRequest))
               .startInlineUnsafe();
  } else {
    makeExecuteHandler()(std::move(callback), std::move(args));
  }
#else
  makeExecuteHandler()(std::move(callback), std::move(args));
#endif // FOLLY_HAS_COROUTINES
}

template <class ProtocolIn_, class ProtocolOut_>
apache::thrift::SerializedResponse DecoratedServiceAsyncProcessor::return_echo(
    apache::thrift::ContextStack* ctx,
    ::std::string const& _return) {
  ProtocolOut_ prot;
  ::cpp2::DecoratedService_echo_presult result;
  result.get<0>().value = const_cast<::std::string*>(&_return);
  result.setIsSet(0, true);
  return serializeResponse("echo", &prot, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void DecoratedServiceAsyncProcessor::throw_wrapped_echo(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    [[maybe_unused]] int32_t protoSeqId,
    apache::thrift::ContextStack* ctx,
    folly::exception_wrapper ew,
    apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  {
    apache::thrift::detail::ap::process_throw_wrapped_handler_error<
        ProtocolOut_>(ew, std::move(req), reqCtx, ctx, "echo");
    return;
  }
}
//
// End of Method 'echo'
//

//
// Method 'increment'
//
template <typename ProtocolIn_, typename ProtocolOut_>
void DecoratedServiceAsyncProcessor::setUpAndProcess_increment(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    apache::thrift::SerializedCompressedRequest&& serializedRequest,
    apache::thrift::Cpp2RequestContext* ctx,
    folly::EventBase* eb,
    [[maybe_unused]] apache::thrift::concurrency::ThreadManager* tm) {
  if (!setUpRequestProcessing(
          req, ctx, eb, tm, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, iface_)) {
    return;
  }
  auto scope = iface_->getRequestExecutionScope(
      ctx, apache::thrift::concurrency::NORMAL);
  ctx->setRequestExecutionScope(std::move(scope));
  processInThread(
      std::move(req),
      std::move(serializedRequest),
      ctx,
      eb,
      tm,
      apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE,
      &DecoratedServiceAsyncProcessor::
          executeRequest_increment<ProtocolIn_, ProtocolOut_>,
      this);
}

template <typename ProtocolIn_, typename ProtocolOut_>
void DecoratedServiceAsyncProcessor::executeRequest_increment(
    apache::thrift::ServerRequest&& serverRequest) {
  // make sure getRequestContext is null
  // so async calls don't accidentally use it
  iface_->setRequestContext(nullptr);
  struct ArgsState {
    ::std::int64_t uarg_num{0};
    DecoratedService_increment_pargs pargs() {
      DecoratedService_increment_pargs args;
      args.get<0>().value = &uarg_num;
      return args;
    }

    auto asTupleOfRefs() & {
      return std::tie(
        std::as_const(uarg_num)
      );
    }
  } args;

  auto ctxStack = apache::thrift::ContextStack::create(
      this->getEventHandlersSharedPtr(),
      this->getServiceName(),
      "DecoratedService.increment",
      serverRequest.requestContext());
  try {
    auto pargs = args.pargs();
    deserializeRequest<ProtocolIn_>(
        pargs,
        "increment",
        apache::thrift::detail::ServerRequestHelper::compressedRequest(
            std::move(serverRequest))
            .uncompress(),
        ctxStack.get());
  } catch (...) {
    folly::exception_wrapper ew(std::current_exception());
    apache::thrift::detail::ap::process_handle_exn_deserialization<
        ProtocolOut_>(
        ew,
        apache::thrift::detail::ServerRequestHelper::request(std::move(serverRequest)),
            serverRequest.requestContext(),
        apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
        "increment");
    return;
  }
  auto requestPileNotification =
      apache::thrift::detail::ServerRequestHelper::moveRequestPileNotification(
          serverRequest);
  auto concurrencyControllerNotification =
      apache::thrift::detail::ServerRequestHelper::moveConcurrencyControllerNotification(
          serverRequest);
  apache::thrift::HandlerCallbackBase::MethodNameInfo methodNameInfo{
      /* .serviceName =*/ this->getServiceName(),
      /* .definingServiceName =*/ "DecoratedService",
      /* .methodName =*/ "increment",
      /* .qualifiedMethodName =*/ "DecoratedService.increment"};
  apache::thrift::HandlerCallback<::std::int64_t>::DecoratorAfterCallback decoratorCallback{
    static_cast<void*>(iface_),
    apache::thrift::ServiceHandler<::cpp2::DecoratedService>::fbthrift_invoke_decorator_after_increment};
 auto callback =
      apache::thrift::HandlerCallbackPtr<::std::int64_t>::make(
          apache::thrift::detail::ServerRequestHelper::request(
              std::move(serverRequest)),
          std::move(ctxStack),
          std::move(methodNameInfo),
          return_increment<ProtocolIn_, ProtocolOut_>,
          throw_wrapped_increment<ProtocolIn_, ProtocolOut_>,
          serverRequest.requestContext()->getProtoSeqId(),
          apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
          apache::thrift::detail::ServerRequestHelper::executor(serverRequest),
          serverRequest.requestContext(),
          requestPileNotification,
          concurrencyControllerNotification,
          std::move(serverRequest.requestData()),
          apache::thrift::TilePtr(),
          std::move(decoratorCallback));
  // Execute method decorator before_increment.
  iface_->fbthrift_execute_decorators_before_increment(*serverRequest.requestContext(), args.uarg_num);

  const auto makeExecuteHandler = [&] {
    return [ifacePtr = iface_](auto&& cb, ArgsState args) mutable {
      (void)args;
      ifacePtr->async_tm_increment(std::move(cb), args.uarg_num);
    };
  };
#if FOLLY_HAS_COROUTINES
  if (apache::thrift::detail::shouldProcessServiceInterceptorsOnRequest(
          *callback)) {
    [](auto callback, auto executeHandler, ArgsState args)
        -> folly::coro::Task<void> {
      auto argRefs = args.asTupleOfRefs();
      co_await apache::thrift::detail::processServiceInterceptorsOnRequest(
          *callback,
          apache::thrift::detail::ServiceInterceptorOnRequestArguments(
              argRefs));
      executeHandler(std::move(callback), std::move(args));
    }(std::move(callback), makeExecuteHandler(), std::move(args))
               .scheduleOn(
                   apache::thrift::detail::ServerRequestHelper::executor(
                       serverRequest))
               .startInlineUnsafe();
  } else {
    makeExecuteHandler()(std::move(callback), std::move(args));
  }
#else
  makeExecuteHandler()(std::move(callback), std::move(args));
#endif // FOLLY_HAS_COROUTINES
}

template <class ProtocolIn_, class ProtocolOut_>
apache::thrift::SerializedResponse DecoratedServiceAsyncProcessor::return_increment(
    apache::thrift::ContextStack* ctx,
    ::std::int64_t const& _return) {
  ProtocolOut_ prot;
  ::cpp2::DecoratedService_increment_presult result;
  result.get<0>().value = const_cast<::std::int64_t*>(&_return);
  result.setIsSet(0, true);
  return serializeResponse("increment", &prot, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void DecoratedServiceAsyncProcessor::throw_wrapped_increment(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    [[maybe_unused]] int32_t protoSeqId,
    apache::thrift::ContextStack* ctx,
    folly::exception_wrapper ew,
    apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  {
    apache::thrift::detail::ap::process_throw_wrapped_handler_error<
        ProtocolOut_>(ew, std::move(req), reqCtx, ctx, "increment");
    return;
  }
}
//
// End of Method 'increment'
//

//
// Method 'sum'
//
template <typename ProtocolIn_, typename ProtocolOut_>
void DecoratedServiceAsyncProcessor::setUpAndProcess_sum(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    apache::thrift::SerializedCompressedRequest&& serializedRequest,
    apache::thrift::Cpp2RequestContext* ctx,
    folly::EventBase* eb,
    [[maybe_unused]] apache::thrift::concurrency::ThreadManager* tm) {
  if (!setUpRequestProcessing(
          req, ctx, eb, tm, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, iface_)) {
    return;
  }
  auto scope = iface_->getRequestExecutionScope(
      ctx, apache::thrift::concurrency::NORMAL);
  ctx->setRequestExecutionScope(std::move(scope));
  processInThread(
      std::move(req),
      std::move(serializedRequest),
      ctx,
      eb,
      tm,
      apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE,
      &DecoratedServiceAsyncProcessor::
          executeRequest_sum<ProtocolIn_, ProtocolOut_>,
      this);
}

template <typename ProtocolIn_, typename ProtocolOut_>
void DecoratedServiceAsyncProcessor::executeRequest_sum(
    apache::thrift::ServerRequest&& serverRequest) {
  // make sure getRequestContext is null
  // so async calls don't accidentally use it
  iface_->setRequestContext(nullptr);
  struct ArgsState {
    std::unique_ptr<::std::vector<::std::int64_t>> uarg_nums = std::make_unique<::std::vector<::std::int64_t>>();
    DecoratedService_sum_pargs pargs() {
      DecoratedService_sum_pargs args;
      args.get<0>().value = uarg_nums.get();
      return args;
    }

    auto asTupleOfRefs() & {
      return std::tie(
        std::as_const(*uarg_nums)
      );
    }
  } args;

  auto ctxStack = apache::thrift::ContextStack::create(
      this->getEventHandlersSharedPtr(),
      this->getServiceName(),
      "DecoratedService.sum",
      serverRequest.requestContext());
  try {
    auto pargs = args.pargs();
    deserializeRequest<ProtocolIn_>(
        pargs,
        "sum",
        apache::thrift::detail::ServerRequestHelper::compressedRequest(
            std::move(serverRequest))
            .uncompress(),
        ctxStack.get());
  } catch (...) {
    folly::exception_wrapper ew(std::current_exception());
    apache::thrift::detail::ap::process_handle_exn_deserialization<
        ProtocolOut_>(
        ew,
        apache::thrift::detail::ServerRequestHelper::request(std::move(serverRequest)),
            serverRequest.requestContext(),
        apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
        "sum");
    return;
  }
  auto requestPileNotification =
      apache::thrift::detail::ServerRequestHelper::moveRequestPileNotification(
          serverRequest);
  auto concurrencyControllerNotification =
      apache::thrift::detail::ServerRequestHelper::moveConcurrencyControllerNotification(
          serverRequest);
  apache::thrift::HandlerCallbackBase::MethodNameInfo methodNameInfo{
      /* .serviceName =*/ this->getServiceName(),
      /* .definingServiceName =*/ "DecoratedService",
      /* .methodName =*/ "sum",
      /* .qualifiedMethodName =*/ "DecoratedService.sum"};
  apache::thrift::HandlerCallback<::std::int64_t>::DecoratorAfterCallback decoratorCallback{
    static_cast<void*>(iface_),
    apache::thrift::ServiceHandler<::cpp2::DecoratedService>::fbthrift_invoke_decorator_after_sum};
 auto callback =
      apache::thrift::HandlerCallbackPtr<::std::int64_t>::make(
          apache::thrift::detail::ServerRequestHelper::request(
              std::move(serverRequest)),
          std::move(ctxStack),
          std::move(methodNameInfo),
          return_sum<ProtocolIn_, ProtocolOut_>,
          throw_wrapped_sum<ProtocolIn_, ProtocolOut_>,
          serverRequest.requestContext()->getProtoSeqId(),
          apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
          apache::thrift::detail::ServerRequestHelper::executor(serverRequest),
          serverRequest.requestContext(),
          requestPileNotification,
          concurrencyControllerNotification,
          std::move(serverRequest.requestData()),
          apache::thrift::TilePtr(),
          std::move(decoratorCallback));
  // Execute method decorator before_sum.
  iface_->fbthrift_execute_decorators_before_sum(*serverRequest.requestContext(), *args.uarg_nums);

  const auto makeExecuteHandler = [&] {
    return [ifacePtr = iface_](auto&& cb, ArgsState args) mutable {
      (void)args;
      ifacePtr->async_tm_sum(std::move(cb), std::move(args.uarg_nums));
    };
  };
#if FOLLY_HAS_COROUTINES
  if (apache::thrift::detail::shouldProcessServiceInterceptorsOnRequest(
          *callback)) {
    [](auto callback, auto executeHandler, ArgsState args)
        -> folly::coro::Task<void> {
      auto argRefs = args.asTupleOfRefs();
      co_await apache::thrift::detail::processServiceInterceptorsOnRequest(
          *callback,
          apache::thrift::detail::ServiceInterceptorOnRequestArguments(
              argRefs));
      executeHandler(std::move(callback), std::move(args));
    }(std::move(callback), makeExecuteHandler(), std::move(args))
               .scheduleOn(
                   apache::thrift::detail::ServerRequestHelper::executor(
                       serverRequest))
               .startInlineUnsafe();
  } else {
    makeExecuteHandler()(std::move(callback), std::move(args));
  }
#else
  makeExecuteHandler()(std::move(callback), std::move(args));
#endif // FOLLY_HAS_COROUTINES
}

template <class ProtocolIn_, class ProtocolOut_>
apache::thrift::SerializedResponse DecoratedServiceAsyncProcessor::return_sum(
    apache::thrift::ContextStack* ctx,
    ::std::int64_t const& _return) {
  ProtocolOut_ prot;
  ::cpp2::DecoratedService_sum_presult result;
  result.get<0>().value = const_cast<::std::int64_t*>(&_return);
  result.setIsSet(0, true);
  return serializeResponse("sum", &prot, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void DecoratedServiceAsyncProcessor::throw_wrapped_sum(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    [[maybe_unused]] int32_t protoSeqId,
    apache::thrift::ContextStack* ctx,
    folly::exception_wrapper ew,
    apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  {
    apache::thrift::detail::ap::process_throw_wrapped_handler_error<
        ProtocolOut_>(ew, std::move(req), reqCtx, ctx, "sum");
    return;
  }
}
//
// End of Method 'sum'
//

//
// Method 'withStruct'
//
template <typename ProtocolIn_, typename ProtocolOut_>
void DecoratedServiceAsyncProcessor::setUpAndProcess_withStruct(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    apache::thrift::SerializedCompressedRequest&& serializedRequest,
    apache::thrift::Cpp2RequestContext* ctx,
    folly::EventBase* eb,
    [[maybe_unused]] apache::thrift::concurrency::ThreadManager* tm) {
  if (!setUpRequestProcessing(
          req, ctx, eb, tm, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, iface_)) {
    return;
  }
  auto scope = iface_->getRequestExecutionScope(
      ctx, apache::thrift::concurrency::NORMAL);
  ctx->setRequestExecutionScope(std::move(scope));
  processInThread(
      std::move(req),
      std::move(serializedRequest),
      ctx,
      eb,
      tm,
      apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE,
      &DecoratedServiceAsyncProcessor::
          executeRequest_withStruct<ProtocolIn_, ProtocolOut_>,
      this);
}

template <typename ProtocolIn_, typename ProtocolOut_>
void DecoratedServiceAsyncProcessor::executeRequest_withStruct(
    apache::thrift::ServerRequest&& serverRequest) {
  // make sure getRequestContext is null
  // so async calls don't accidentally use it
  iface_->setRequestContext(nullptr);
  struct ArgsState {
    std::unique_ptr<::cpp2::Request> uarg_request = std::make_unique<::cpp2::Request>();
    DecoratedService_withStruct_pargs pargs() {
      DecoratedService_withStruct_pargs args;
      args.get<0>().value = uarg_request.get();
      return args;
    }

    auto asTupleOfRefs() & {
      return std::tie(
        std::as_const(*uarg_request)
      );
    }
  } args;

  auto ctxStack = apache::thrift::ContextStack::create(
      this->getEventHandlersSharedPtr(),
      this->getServiceName(),
      "DecoratedService.withStruct",
      serverRequest.requestContext());
  try {
    auto pargs = args.pargs();
    deserializeRequest<ProtocolIn_>(
        pargs,
        "withStruct",
        apache::thrift::detail::ServerRequestHelper::compressedRequest(
            std::move(serverRequest))
            .uncompress(),
        ctxStack.get());
  } catch (...) {
    folly::exception_wrapper ew(std::current_exception());
    apache::thrift::detail::ap::process_handle_exn_deserialization<
        ProtocolOut_>(
        ew,
        apache::thrift::detail::ServerRequestHelper::request(std::move(serverRequest)),
            serverRequest.requestContext(),
        apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
        "withStruct");
    return;
  }
  auto requestPileNotification =
      apache::thrift::detail::ServerRequestHelper::moveRequestPileNotification(
          serverRequest);
  auto concurrencyControllerNotification =
      apache::thrift::detail::ServerRequestHelper::moveConcurrencyControllerNotification(
          serverRequest);
  apache::thrift::HandlerCallbackBase::MethodNameInfo methodNameInfo{
      /* .serviceName =*/ this->getServiceName(),
      /* .definingServiceName =*/ "DecoratedService",
      /* .methodName =*/ "withStruct",
      /* .qualifiedMethodName =*/ "DecoratedService.withStruct"};
  apache::thrift::HandlerCallback<std::unique_ptr<::cpp2::Response>>::DecoratorAfterCallback decoratorCallback{
    static_cast<void*>(iface_),
    apache::thrift::ServiceHandler<::cpp2::DecoratedService>::fbthrift_invoke_decorator_after_withStruct};
 auto callback =
      apache::thrift::HandlerCallbackPtr<std::unique_ptr<::cpp2::Response>>::make(
          apache::thrift::detail::ServerRequestHelper::request(
              std::move(serverRequest)),
          std::move(ctxStack),
          std::move(methodNameInfo),
          return_withStruct<ProtocolIn_, ProtocolOut_>,
          throw_wrapped_withStruct<ProtocolIn_, ProtocolOut_>,
          serverRequest.requestContext()->getProtoSeqId(),
          apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
          apache::thrift::detail::ServerRequestHelper::executor(serverRequest),
          serverRequest.requestContext(),
          requestPileNotification,
          concurrencyControllerNotification,
          std::move(serverRequest.requestData()),
          apache::thrift::TilePtr(),
          std::move(decoratorCallback));
  // Execute method decorator before_withStruct.
  iface_->fbthrift_execute_decorators_before_withStruct(*serverRequest.requestContext(), *args.uarg_request);

  const auto makeExecuteHandler = [&] {
    return [ifacePtr = iface_](auto&& cb, ArgsState args) mutable {
      (void)args;
      ifacePtr->async_tm_withStruct(std::move(cb), std::move(args.uarg_request));
    };
  };
#if FOLLY_HAS_COROUTINES
  if (apache::thrift::detail::shouldProcessServiceInterceptorsOnRequest(
          *callback)) {
    [](auto callback, auto executeHandler, ArgsState args)
        -> folly::coro::Task<void> {
      auto argRefs = args.asTupleOfRefs();
      co_await apache::thrift::detail::processServiceInterceptorsOnRequest(
          *callback,
          apache::thrift::detail::ServiceInterceptorOnRequestArguments(
              argRefs));
      executeHandler(std::move(callback), std::move(args));
    }(std::move(callback), makeExecuteHandler(), std::move(args))
               .scheduleOn(
                   apache::thrift::detail::ServerRequestHelper::executor(
                       serverRequest))
               .startInlineUnsafe();
  } else {
    makeExecuteHandler()(std::move(callback), std::move(args));
  }
#else
  makeExecuteHandler()(std::move(callback), std::move(args));
#endif // FOLLY_HAS_COROUTINES
}

template <class ProtocolIn_, class ProtocolOut_>
apache::thrift::SerializedResponse DecoratedServiceAsyncProcessor::return_withStruct(
    apache::thrift::ContextStack* ctx,
    ::cpp2::Response const& _return) {
  ProtocolOut_ prot;
  ::cpp2::DecoratedService_withStruct_presult result;
  result.get<0>().value = const_cast<::cpp2::Response*>(&_return);
  result.setIsSet(0, true);
  return serializeResponse("withStruct", &prot, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void DecoratedServiceAsyncProcessor::throw_wrapped_withStruct(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    [[maybe_unused]] int32_t protoSeqId,
    apache::thrift::ContextStack* ctx,
    folly::exception_wrapper ew,
    apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  {
    apache::thrift::detail::ap::process_throw_wrapped_handler_error<
        ProtocolOut_>(ew, std::move(req), reqCtx, ctx, "withStruct");
    return;
  }
}
//
// End of Method 'withStruct'
//

//
// Method 'multiParam'
//
template <typename ProtocolIn_, typename ProtocolOut_>
void DecoratedServiceAsyncProcessor::setUpAndProcess_multiParam(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    apache::thrift::SerializedCompressedRequest&& serializedRequest,
    apache::thrift::Cpp2RequestContext* ctx,
    folly::EventBase* eb,
    [[maybe_unused]] apache::thrift::concurrency::ThreadManager* tm) {
  if (!setUpRequestProcessing(
          req, ctx, eb, tm, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, iface_)) {
    return;
  }
  auto scope = iface_->getRequestExecutionScope(
      ctx, apache::thrift::concurrency::NORMAL);
  ctx->setRequestExecutionScope(std::move(scope));
  processInThread(
      std::move(req),
      std::move(serializedRequest),
      ctx,
      eb,
      tm,
      apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE,
      &DecoratedServiceAsyncProcessor::
          executeRequest_multiParam<ProtocolIn_, ProtocolOut_>,
      this);
}

template <typename ProtocolIn_, typename ProtocolOut_>
void DecoratedServiceAsyncProcessor::executeRequest_multiParam(
    apache::thrift::ServerRequest&& serverRequest) {
  // make sure getRequestContext is null
  // so async calls don't accidentally use it
  iface_->setRequestContext(nullptr);
  struct ArgsState {
    std::unique_ptr<::std::string> uarg_text = std::make_unique<::std::string>();
    ::std::int64_t uarg_num{0};
    std::unique_ptr<::cpp2::Request> uarg_request = std::make_unique<::cpp2::Request>();
    DecoratedService_multiParam_pargs pargs() {
      DecoratedService_multiParam_pargs args;
      args.get<0>().value = uarg_text.get();
      args.get<1>().value = &uarg_num;
      args.get<2>().value = uarg_request.get();
      return args;
    }

    auto asTupleOfRefs() & {
      return std::tie(
        std::as_const(*uarg_text),
        std::as_const(uarg_num),
        std::as_const(*uarg_request)
      );
    }
  } args;

  auto ctxStack = apache::thrift::ContextStack::create(
      this->getEventHandlersSharedPtr(),
      this->getServiceName(),
      "DecoratedService.multiParam",
      serverRequest.requestContext());
  try {
    auto pargs = args.pargs();
    deserializeRequest<ProtocolIn_>(
        pargs,
        "multiParam",
        apache::thrift::detail::ServerRequestHelper::compressedRequest(
            std::move(serverRequest))
            .uncompress(),
        ctxStack.get());
  } catch (...) {
    folly::exception_wrapper ew(std::current_exception());
    apache::thrift::detail::ap::process_handle_exn_deserialization<
        ProtocolOut_>(
        ew,
        apache::thrift::detail::ServerRequestHelper::request(std::move(serverRequest)),
            serverRequest.requestContext(),
        apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
        "multiParam");
    return;
  }
  auto requestPileNotification =
      apache::thrift::detail::ServerRequestHelper::moveRequestPileNotification(
          serverRequest);
  auto concurrencyControllerNotification =
      apache::thrift::detail::ServerRequestHelper::moveConcurrencyControllerNotification(
          serverRequest);
  apache::thrift::HandlerCallbackBase::MethodNameInfo methodNameInfo{
      /* .serviceName =*/ this->getServiceName(),
      /* .definingServiceName =*/ "DecoratedService",
      /* .methodName =*/ "multiParam",
      /* .qualifiedMethodName =*/ "DecoratedService.multiParam"};
  apache::thrift::HandlerCallback<std::unique_ptr<::cpp2::Response>>::DecoratorAfterCallback decoratorCallback{
    static_cast<void*>(iface_),
    apache::thrift::ServiceHandler<::cpp2::DecoratedService>::fbthrift_invoke_decorator_after_multiParam};
 auto callback =
      apache::thrift::HandlerCallbackPtr<std::unique_ptr<::cpp2::Response>>::make(
          apache::thrift::detail::ServerRequestHelper::request(
              std::move(serverRequest)),
          std::move(ctxStack),
          std::move(methodNameInfo),
          return_multiParam<ProtocolIn_, ProtocolOut_>,
          throw_wrapped_multiParam<ProtocolIn_, ProtocolOut_>,
          serverRequest.requestContext()->getProtoSeqId(),
          apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
          apache::thrift::detail::ServerRequestHelper::executor(serverRequest),
          serverRequest.requestContext(),
          requestPileNotification,
          concurrencyControllerNotification,
          std::move(serverRequest.requestData()),
          apache::thrift::TilePtr(),
          std::move(decoratorCallback));
  // Execute method decorator before_multiParam.
  iface_->fbthrift_execute_decorators_before_multiParam(*serverRequest.requestContext(), *args.uarg_text, args.uarg_num, *args.uarg_request);

  const auto makeExecuteHandler = [&] {
    return [ifacePtr = iface_](auto&& cb, ArgsState args) mutable {
      (void)args;
      ifacePtr->async_tm_multiParam(std::move(cb), std::move(args.uarg_text), args.uarg_num, std::move(args.uarg_request));
    };
  };
#if FOLLY_HAS_COROUTINES
  if (apache::thrift::detail::shouldProcessServiceInterceptorsOnRequest(
          *callback)) {
    [](auto callback, auto executeHandler, ArgsState args)
        -> folly::coro::Task<void> {
      auto argRefs = args.asTupleOfRefs();
      co_await apache::thrift::detail::processServiceInterceptorsOnRequest(
          *callback,
          apache::thrift::detail::ServiceInterceptorOnRequestArguments(
              argRefs));
      executeHandler(std::move(callback), std::move(args));
    }(std::move(callback), makeExecuteHandler(), std::move(args))
               .scheduleOn(
                   apache::thrift::detail::ServerRequestHelper::executor(
                       serverRequest))
               .startInlineUnsafe();
  } else {
    makeExecuteHandler()(std::move(callback), std::move(args));
  }
#else
  makeExecuteHandler()(std::move(callback), std::move(args));
#endif // FOLLY_HAS_COROUTINES
}

template <class ProtocolIn_, class ProtocolOut_>
apache::thrift::SerializedResponse DecoratedServiceAsyncProcessor::return_multiParam(
    apache::thrift::ContextStack* ctx,
    ::cpp2::Response const& _return) {
  ProtocolOut_ prot;
  ::cpp2::DecoratedService_multiParam_presult result;
  result.get<0>().value = const_cast<::cpp2::Response*>(&_return);
  result.setIsSet(0, true);
  return serializeResponse("multiParam", &prot, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void DecoratedServiceAsyncProcessor::throw_wrapped_multiParam(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    [[maybe_unused]] int32_t protoSeqId,
    apache::thrift::ContextStack* ctx,
    folly::exception_wrapper ew,
    apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  {
    apache::thrift::detail::ap::process_throw_wrapped_handler_error<
        ProtocolOut_>(ew, std::move(req), reqCtx, ctx, "multiParam");
    return;
  }
}
//
// End of Method 'multiParam'
//

//
// Method 'echoInteraction'
//
template <typename ProtocolIn_, typename ProtocolOut_>
void DecoratedServiceAsyncProcessor::setUpAndProcess_echoInteraction(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    apache::thrift::SerializedCompressedRequest&& serializedRequest,
    apache::thrift::Cpp2RequestContext* ctx,
    folly::EventBase* eb,
    [[maybe_unused]] apache::thrift::concurrency::ThreadManager* tm) {
  if (!setUpRequestProcessing(
          req, ctx, eb, tm, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, iface_, "EchoInteraction", true)) {
    return;
  }
  auto scope = iface_->getRequestExecutionScope(
      ctx, apache::thrift::concurrency::NORMAL);
  ctx->setRequestExecutionScope(std::move(scope));
  processInThread(
      std::move(req),
      std::move(serializedRequest),
      ctx,
      eb,
      tm,
      apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE,
      &DecoratedServiceAsyncProcessor::
          executeRequest_echoInteraction<ProtocolIn_, ProtocolOut_>,
      this);
}

template <typename ProtocolIn_, typename ProtocolOut_>
void DecoratedServiceAsyncProcessor::executeRequest_echoInteraction(
    apache::thrift::ServerRequest&& serverRequest) {
  auto tile = serverRequest.requestContext()->releaseTile();
  // make sure getRequestContext is null
  // so async calls don't accidentally use it
  iface_->setRequestContext(nullptr);
  struct ArgsState {
    DecoratedService_echoInteraction_pargs pargs() {
      DecoratedService_echoInteraction_pargs args;
      return args;
    }

    auto asTupleOfRefs() & {
      return std::tie(
      );
    }
  } args;

  auto ctxStack = apache::thrift::ContextStack::create(
      this->getEventHandlersSharedPtr(),
      this->getServiceName(),
      "DecoratedService.echoInteraction",
      serverRequest.requestContext());
  try {
    auto pargs = args.pargs();
    deserializeRequest<ProtocolIn_>(
        pargs,
        "echoInteraction",
        apache::thrift::detail::ServerRequestHelper::compressedRequest(
            std::move(serverRequest))
            .uncompress(),
        ctxStack.get());
  } catch (...) {
    folly::exception_wrapper ew(std::current_exception());
    apache::thrift::detail::ap::process_handle_exn_deserialization<
        ProtocolOut_>(
        ew,
        apache::thrift::detail::ServerRequestHelper::request(std::move(serverRequest)),
            serverRequest.requestContext(),
        apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
        "echoInteraction");
    return;
  }
  auto requestPileNotification =
      apache::thrift::detail::ServerRequestHelper::moveRequestPileNotification(
          serverRequest);
  auto concurrencyControllerNotification =
      apache::thrift::detail::ServerRequestHelper::moveConcurrencyControllerNotification(
          serverRequest);
  apache::thrift::HandlerCallbackBase::MethodNameInfo methodNameInfo{
      /* .serviceName =*/ this->getServiceName(),
      /* .definingServiceName =*/ "DecoratedService",
      /* .methodName =*/ "echoInteraction",
      /* .qualifiedMethodName =*/ "DecoratedService.echoInteraction"};
  apache::thrift::HandlerCallback<apache::thrift::TileAndResponse<apache::thrift::ServiceHandler<::cpp2::DecoratedService>::EchoInteractionIf, void>>::DecoratorAfterCallback decoratorCallback{
    static_cast<void*>(iface_),
    apache::thrift::ServiceHandler<::cpp2::DecoratedService>::fbthrift_invoke_decorator_after_echoInteraction};
 auto callback =
      apache::thrift::HandlerCallbackPtr<apache::thrift::TileAndResponse<apache::thrift::ServiceHandler<::cpp2::DecoratedService>::EchoInteractionIf, void>>::make(
          apache::thrift::detail::ServerRequestHelper::request(
              std::move(serverRequest)),
          std::move(ctxStack),
          std::move(methodNameInfo),
          return_echoInteraction<ProtocolIn_, ProtocolOut_>,
          throw_wrapped_echoInteraction<ProtocolIn_, ProtocolOut_>,
          serverRequest.requestContext()->getProtoSeqId(),
          apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
          apache::thrift::detail::ServerRequestHelper::executor(serverRequest),
          serverRequest.requestContext(),
          requestPileNotification,
          concurrencyControllerNotification,
          std::move(serverRequest.requestData()),
          std::move(tile),
          std::move(decoratorCallback));
  // Execute method decorator before_echoInteraction.
  iface_->fbthrift_execute_decorators_before_echoInteraction(*serverRequest.requestContext());

  const auto makeExecuteHandler = [&] {
    return [ifacePtr = iface_](auto&& cb, ArgsState args) mutable {
      (void)args;
      ifacePtr->async_tm_echoInteraction(std::move(cb));
    };
  };
#if FOLLY_HAS_COROUTINES
  if (apache::thrift::detail::shouldProcessServiceInterceptorsOnRequest(
          *callback)) {
    [](auto callback, auto executeHandler, ArgsState args)
        -> folly::coro::Task<void> {
      auto argRefs = args.asTupleOfRefs();
      co_await apache::thrift::detail::processServiceInterceptorsOnRequest(
          *callback,
          apache::thrift::detail::ServiceInterceptorOnRequestArguments(
              argRefs));
      executeHandler(std::move(callback), std::move(args));
    }(std::move(callback), makeExecuteHandler(), std::move(args))
               .scheduleOn(
                   apache::thrift::detail::ServerRequestHelper::executor(
                       serverRequest))
               .startInlineUnsafe();
  } else {
    makeExecuteHandler()(std::move(callback), std::move(args));
  }
#else
  makeExecuteHandler()(std::move(callback), std::move(args));
#endif // FOLLY_HAS_COROUTINES
}

template <class ProtocolIn_, class ProtocolOut_>
apache::thrift::SerializedResponse DecoratedServiceAsyncProcessor::return_echoInteraction(
    apache::thrift::ContextStack* ctx) {
  ProtocolOut_ prot;
  ::cpp2::DecoratedService_echoInteraction_presult result;
  return serializeResponse("echoInteraction", &prot, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void DecoratedServiceAsyncProcessor::throw_wrapped_echoInteraction(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    [[maybe_unused]] int32_t protoSeqId,
    apache::thrift::ContextStack* ctx,
    folly::exception_wrapper ew,
    apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  {
    apache::thrift::detail::ap::process_throw_wrapped_handler_error<
        ProtocolOut_>(ew, std::move(req), reqCtx, ctx, "echoInteraction");
    return;
  }
}
//
// End of Method 'echoInteraction'
//

//
// End of Service Methods
//

typedef apache::thrift::ThriftPresult<false> DecoratedService_LegacyPerforms_perform_pargs;
typedef apache::thrift::ThriftPresult<true> DecoratedService_LegacyPerforms_perform_presult;
//
// Service Methods
//

//
// Method 'perform'
//
template <typename ProtocolIn_, typename ProtocolOut_>
void DecoratedServiceAsyncProcessor::setUpAndProcess_LegacyPerforms_perform(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    apache::thrift::SerializedCompressedRequest&& serializedRequest,
    apache::thrift::Cpp2RequestContext* ctx,
    folly::EventBase* eb,
    [[maybe_unused]] apache::thrift::concurrency::ThreadManager* tm) {
  if (!setUpRequestProcessing(
          req, ctx, eb, tm, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, iface_, "LegacyPerforms")) {
    return;
  }
  auto scope = iface_->getRequestExecutionScope(
      ctx, apache::thrift::concurrency::NORMAL);
  ctx->setRequestExecutionScope(std::move(scope));
  processInThread(
      std::move(req),
      std::move(serializedRequest),
      ctx,
      eb,
      tm,
      apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE,
      &DecoratedServiceAsyncProcessor::
          executeRequest_LegacyPerforms_perform<ProtocolIn_, ProtocolOut_>,
      this);
}

template <typename ProtocolIn_, typename ProtocolOut_>
void DecoratedServiceAsyncProcessor::executeRequest_LegacyPerforms_perform(
    apache::thrift::ServerRequest&& serverRequest) {
  auto tile = serverRequest.requestContext()->releaseTile();
  // make sure getRequestContext is null
  // so async calls don't accidentally use it
  iface_->setRequestContext(nullptr);
  struct ArgsState {
    DecoratedService_LegacyPerforms_perform_pargs pargs() {
      DecoratedService_LegacyPerforms_perform_pargs args;
      return args;
    }

    auto asTupleOfRefs() & {
      return std::tie(
      );
    }
  } args;

  auto ctxStack = apache::thrift::ContextStack::create(
      this->getEventHandlersSharedPtr(),
      this->getServiceName(),
      "DecoratedService.LegacyPerforms.perform",
      serverRequest.requestContext());
  auto& iface = static_cast<apache::thrift::ServiceHandler<DecoratedService>::LegacyPerformsIf&>(*tile);
  try {
    auto pargs = args.pargs();
    deserializeRequest<ProtocolIn_>(
        pargs,
        "LegacyPerforms.perform",
        apache::thrift::detail::ServerRequestHelper::compressedRequest(
            std::move(serverRequest))
            .uncompress(),
        ctxStack.get());
  } catch (...) {
    folly::exception_wrapper ew(std::current_exception());
    apache::thrift::detail::ap::process_handle_exn_deserialization<
        ProtocolOut_>(
        ew,
        apache::thrift::detail::ServerRequestHelper::request(std::move(serverRequest)),
            serverRequest.requestContext(),
        apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
        "LegacyPerforms.perform");
    return;
  }
  auto requestPileNotification =
      apache::thrift::detail::ServerRequestHelper::moveRequestPileNotification(
          serverRequest);
  auto concurrencyControllerNotification =
      apache::thrift::detail::ServerRequestHelper::moveConcurrencyControllerNotification(
          serverRequest);
  apache::thrift::HandlerCallbackBase::MethodNameInfo methodNameInfo{
      /* .serviceName =*/ this->getServiceName(),
      /* .definingServiceName =*/ "DecoratedService",
      /* .methodName =*/ "LegacyPerforms.perform",
      /* .qualifiedMethodName =*/ "DecoratedService.LegacyPerforms.perform"};
  apache::thrift::HandlerCallback<void>::DecoratorAfterCallback decoratorCallback{
    static_cast<void*>(iface_),
    apache::thrift::ServiceHandler<DecoratedService>::fbthrift_invoke_decorator_after_LegacyPerforms_perform};
 auto callback =
      apache::thrift::HandlerCallbackPtr<void>::make(
          apache::thrift::detail::ServerRequestHelper::request(
              std::move(serverRequest)),
          std::move(ctxStack),
          std::move(methodNameInfo),
          return_LegacyPerforms_perform<ProtocolIn_, ProtocolOut_>,
          throw_wrapped_LegacyPerforms_perform<ProtocolIn_, ProtocolOut_>,
          serverRequest.requestContext()->getProtoSeqId(),
          apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
          apache::thrift::detail::ServerRequestHelper::executor(serverRequest),
          serverRequest.requestContext(),
          requestPileNotification,
          concurrencyControllerNotification,
          std::move(serverRequest.requestData()),
          std::move(tile),
          std::move(decoratorCallback));
  // Execute method decorator before_LegacyPerforms_perform.
  iface_->fbthrift_execute_decorators_before_LegacyPerforms_perform(*serverRequest.requestContext());
  const auto makeExecuteHandler = [&] {
    return [ifacePtr = &iface](auto&& cb, ArgsState args) mutable {
      (void)args;
      ifacePtr->async_tm_perform(std::move(cb));
    };
  };
#if FOLLY_HAS_COROUTINES
  if (apache::thrift::detail::shouldProcessServiceInterceptorsOnRequest(
          *callback)) {
    [](auto callback, auto executeHandler, ArgsState args)
        -> folly::coro::Task<void> {
      auto argRefs = args.asTupleOfRefs();
      co_await apache::thrift::detail::processServiceInterceptorsOnRequest(
          *callback,
          apache::thrift::detail::ServiceInterceptorOnRequestArguments(
              argRefs));
      executeHandler(std::move(callback), std::move(args));
    }(std::move(callback), makeExecuteHandler(), std::move(args))
               .scheduleOn(
                   apache::thrift::detail::ServerRequestHelper::executor(
                       serverRequest))
               .startInlineUnsafe();
  } else {
    makeExecuteHandler()(std::move(callback), std::move(args));
  }
#else
  makeExecuteHandler()(std::move(callback), std::move(args));
#endif // FOLLY_HAS_COROUTINES
}

template <class ProtocolIn_, class ProtocolOut_>
apache::thrift::SerializedResponse DecoratedServiceAsyncProcessor::return_LegacyPerforms_perform(
    apache::thrift::ContextStack* ctx) {
  ProtocolOut_ prot;
  ::cpp2::DecoratedService_LegacyPerforms_perform_presult result;
  return serializeResponse("LegacyPerforms.perform", &prot, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void DecoratedServiceAsyncProcessor::throw_wrapped_LegacyPerforms_perform(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    [[maybe_unused]] int32_t protoSeqId,
    apache::thrift::ContextStack* ctx,
    folly::exception_wrapper ew,
    apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  {
    apache::thrift::detail::ap::process_throw_wrapped_handler_error<
        ProtocolOut_>(ew, std::move(req), reqCtx, ctx, "LegacyPerforms.perform");
    return;
  }
}
//
// End of Method 'perform'
//

//
// End of Service Methods
//
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, ::apache::thrift::type_class::string, ::std::string*>> DecoratedService_EchoInteraction_interactionEcho_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, ::apache::thrift::type_class::string, ::std::string*>> DecoratedService_EchoInteraction_interactionEcho_presult;
//
// Service Methods
//

//
// Method 'interactionEcho'
//
template <typename ProtocolIn_, typename ProtocolOut_>
void DecoratedServiceAsyncProcessor::setUpAndProcess_EchoInteraction_interactionEcho(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    apache::thrift::SerializedCompressedRequest&& serializedRequest,
    apache::thrift::Cpp2RequestContext* ctx,
    folly::EventBase* eb,
    [[maybe_unused]] apache::thrift::concurrency::ThreadManager* tm) {
  if (!setUpRequestProcessing(
          req, ctx, eb, tm, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, iface_, "EchoInteraction")) {
    return;
  }
  auto scope = iface_->getRequestExecutionScope(
      ctx, apache::thrift::concurrency::NORMAL);
  ctx->setRequestExecutionScope(std::move(scope));
  processInThread(
      std::move(req),
      std::move(serializedRequest),
      ctx,
      eb,
      tm,
      apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE,
      &DecoratedServiceAsyncProcessor::
          executeRequest_EchoInteraction_interactionEcho<ProtocolIn_, ProtocolOut_>,
      this);
}

template <typename ProtocolIn_, typename ProtocolOut_>
void DecoratedServiceAsyncProcessor::executeRequest_EchoInteraction_interactionEcho(
    apache::thrift::ServerRequest&& serverRequest) {
  auto tile = serverRequest.requestContext()->releaseTile();
  // make sure getRequestContext is null
  // so async calls don't accidentally use it
  iface_->setRequestContext(nullptr);
  struct ArgsState {
    std::unique_ptr<::std::string> uarg_text = std::make_unique<::std::string>();
    DecoratedService_EchoInteraction_interactionEcho_pargs pargs() {
      DecoratedService_EchoInteraction_interactionEcho_pargs args;
      args.get<0>().value = uarg_text.get();
      return args;
    }

    auto asTupleOfRefs() & {
      return std::tie(
        std::as_const(*uarg_text)
      );
    }
  } args;

  auto ctxStack = apache::thrift::ContextStack::create(
      this->getEventHandlersSharedPtr(),
      this->getServiceName(),
      "DecoratedService.EchoInteraction.interactionEcho",
      serverRequest.requestContext());
  auto& iface = static_cast<apache::thrift::ServiceHandler<DecoratedService>::EchoInteractionIf&>(*tile);
  try {
    auto pargs = args.pargs();
    deserializeRequest<ProtocolIn_>(
        pargs,
        "EchoInteraction.interactionEcho",
        apache::thrift::detail::ServerRequestHelper::compressedRequest(
            std::move(serverRequest))
            .uncompress(),
        ctxStack.get());
  } catch (...) {
    folly::exception_wrapper ew(std::current_exception());
    apache::thrift::detail::ap::process_handle_exn_deserialization<
        ProtocolOut_>(
        ew,
        apache::thrift::detail::ServerRequestHelper::request(std::move(serverRequest)),
            serverRequest.requestContext(),
        apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
        "EchoInteraction.interactionEcho");
    return;
  }
  auto requestPileNotification =
      apache::thrift::detail::ServerRequestHelper::moveRequestPileNotification(
          serverRequest);
  auto concurrencyControllerNotification =
      apache::thrift::detail::ServerRequestHelper::moveConcurrencyControllerNotification(
          serverRequest);
  apache::thrift::HandlerCallbackBase::MethodNameInfo methodNameInfo{
      /* .serviceName =*/ this->getServiceName(),
      /* .definingServiceName =*/ "DecoratedService",
      /* .methodName =*/ "EchoInteraction.interactionEcho",
      /* .qualifiedMethodName =*/ "DecoratedService.EchoInteraction.interactionEcho"};
  apache::thrift::HandlerCallback<std::unique_ptr<::std::string>>::DecoratorAfterCallback decoratorCallback{
    static_cast<void*>(iface_),
    apache::thrift::ServiceHandler<DecoratedService>::fbthrift_invoke_decorator_after_EchoInteraction_interactionEcho};
 auto callback =
      apache::thrift::HandlerCallbackPtr<std::unique_ptr<::std::string>>::make(
          apache::thrift::detail::ServerRequestHelper::request(
              std::move(serverRequest)),
          std::move(ctxStack),
          std::move(methodNameInfo),
          return_EchoInteraction_interactionEcho<ProtocolIn_, ProtocolOut_>,
          throw_wrapped_EchoInteraction_interactionEcho<ProtocolIn_, ProtocolOut_>,
          serverRequest.requestContext()->getProtoSeqId(),
          apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
          apache::thrift::detail::ServerRequestHelper::executor(serverRequest),
          serverRequest.requestContext(),
          requestPileNotification,
          concurrencyControllerNotification,
          std::move(serverRequest.requestData()),
          std::move(tile),
          std::move(decoratorCallback));
  // Execute method decorator before_EchoInteraction_interactionEcho.
  iface_->fbthrift_execute_decorators_before_EchoInteraction_interactionEcho(*serverRequest.requestContext(), *args.uarg_text);
  const auto makeExecuteHandler = [&] {
    return [ifacePtr = &iface](auto&& cb, ArgsState args) mutable {
      (void)args;
      ifacePtr->async_tm_interactionEcho(std::move(cb), std::move(args.uarg_text));
    };
  };
#if FOLLY_HAS_COROUTINES
  if (apache::thrift::detail::shouldProcessServiceInterceptorsOnRequest(
          *callback)) {
    [](auto callback, auto executeHandler, ArgsState args)
        -> folly::coro::Task<void> {
      auto argRefs = args.asTupleOfRefs();
      co_await apache::thrift::detail::processServiceInterceptorsOnRequest(
          *callback,
          apache::thrift::detail::ServiceInterceptorOnRequestArguments(
              argRefs));
      executeHandler(std::move(callback), std::move(args));
    }(std::move(callback), makeExecuteHandler(), std::move(args))
               .scheduleOn(
                   apache::thrift::detail::ServerRequestHelper::executor(
                       serverRequest))
               .startInlineUnsafe();
  } else {
    makeExecuteHandler()(std::move(callback), std::move(args));
  }
#else
  makeExecuteHandler()(std::move(callback), std::move(args));
#endif // FOLLY_HAS_COROUTINES
}

template <class ProtocolIn_, class ProtocolOut_>
apache::thrift::SerializedResponse DecoratedServiceAsyncProcessor::return_EchoInteraction_interactionEcho(
    apache::thrift::ContextStack* ctx,
    ::std::string const& _return) {
  ProtocolOut_ prot;
  ::cpp2::DecoratedService_EchoInteraction_interactionEcho_presult result;
  result.get<0>().value = const_cast<::std::string*>(&_return);
  result.setIsSet(0, true);
  return serializeResponse("EchoInteraction.interactionEcho", &prot, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void DecoratedServiceAsyncProcessor::throw_wrapped_EchoInteraction_interactionEcho(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    [[maybe_unused]] int32_t protoSeqId,
    apache::thrift::ContextStack* ctx,
    folly::exception_wrapper ew,
    apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  {
    apache::thrift::detail::ap::process_throw_wrapped_handler_error<
        ProtocolOut_>(ew, std::move(req), reqCtx, ctx, "EchoInteraction.interactionEcho");
    return;
  }
}
//
// End of Method 'interactionEcho'
//

//
// End of Service Methods
//
} // namespace cpp2

namespace cpp2 {
typedef apache::thrift::ThriftPresult<false> UndecoratedService_noop_pargs;
typedef apache::thrift::ThriftPresult<true> UndecoratedService_noop_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, ::apache::thrift::type_class::string, ::std::string*>> UndecoratedService_echo_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, ::apache::thrift::type_class::string, ::std::string*>> UndecoratedService_echo_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, ::apache::thrift::type_class::integral, ::std::int64_t*>> UndecoratedService_increment_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, ::apache::thrift::type_class::integral, ::std::int64_t*>> UndecoratedService_increment_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::std::vector<::std::int64_t>*>> UndecoratedService_sum_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, ::apache::thrift::type_class::integral, ::std::int64_t*>> UndecoratedService_sum_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, ::apache::thrift::type_class::structure, ::cpp2::Request*>> UndecoratedService_withStruct_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, ::apache::thrift::type_class::structure, ::cpp2::Response*>> UndecoratedService_withStruct_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, ::apache::thrift::type_class::string, ::std::string*>, apache::thrift::FieldData<2, ::apache::thrift::type_class::integral, ::std::int64_t*>, apache::thrift::FieldData<3, ::apache::thrift::type_class::structure, ::cpp2::Request*>> UndecoratedService_multiParam_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, ::apache::thrift::type_class::structure, ::cpp2::Response*>> UndecoratedService_multiParam_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, ::apache::thrift::type_class::structure, ::cpp2::AdaptedRequest*, ::apache::thrift::type::adapted<::apache::thrift::test::AdaptedStruct<MyAdapter>, ::apache::thrift::type::struct_t<::cpp2::detail::AdaptedRequest>>>> UndecoratedService_adaptedRequest_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, ::apache::thrift::type_class::structure, ::cpp2::Response*>> UndecoratedService_adaptedRequest_presult;
//
// Service Methods
//

//
// Method 'noop'
//
template <typename ProtocolIn_, typename ProtocolOut_>
void UndecoratedServiceAsyncProcessor::setUpAndProcess_noop(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    apache::thrift::SerializedCompressedRequest&& serializedRequest,
    apache::thrift::Cpp2RequestContext* ctx,
    folly::EventBase* eb,
    [[maybe_unused]] apache::thrift::concurrency::ThreadManager* tm) {
  if (!setUpRequestProcessing(
          req, ctx, eb, tm, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, iface_)) {
    return;
  }
  auto scope = iface_->getRequestExecutionScope(
      ctx, apache::thrift::concurrency::NORMAL);
  ctx->setRequestExecutionScope(std::move(scope));
  processInThread(
      std::move(req),
      std::move(serializedRequest),
      ctx,
      eb,
      tm,
      apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE,
      &UndecoratedServiceAsyncProcessor::
          executeRequest_noop<ProtocolIn_, ProtocolOut_>,
      this);
}

template <typename ProtocolIn_, typename ProtocolOut_>
void UndecoratedServiceAsyncProcessor::executeRequest_noop(
    apache::thrift::ServerRequest&& serverRequest) {
  // make sure getRequestContext is null
  // so async calls don't accidentally use it
  iface_->setRequestContext(nullptr);
  struct ArgsState {
    UndecoratedService_noop_pargs pargs() {
      UndecoratedService_noop_pargs args;
      return args;
    }

    auto asTupleOfRefs() & {
      return std::tie(
      );
    }
  } args;

  auto ctxStack = apache::thrift::ContextStack::create(
      this->getEventHandlersSharedPtr(),
      this->getServiceName(),
      "UndecoratedService.noop",
      serverRequest.requestContext());
  try {
    auto pargs = args.pargs();
    deserializeRequest<ProtocolIn_>(
        pargs,
        "noop",
        apache::thrift::detail::ServerRequestHelper::compressedRequest(
            std::move(serverRequest))
            .uncompress(),
        ctxStack.get());
  } catch (...) {
    folly::exception_wrapper ew(std::current_exception());
    apache::thrift::detail::ap::process_handle_exn_deserialization<
        ProtocolOut_>(
        ew,
        apache::thrift::detail::ServerRequestHelper::request(std::move(serverRequest)),
            serverRequest.requestContext(),
        apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
        "noop");
    return;
  }
  auto requestPileNotification =
      apache::thrift::detail::ServerRequestHelper::moveRequestPileNotification(
          serverRequest);
  auto concurrencyControllerNotification =
      apache::thrift::detail::ServerRequestHelper::moveConcurrencyControllerNotification(
          serverRequest);
  apache::thrift::HandlerCallbackBase::MethodNameInfo methodNameInfo{
      /* .serviceName =*/ this->getServiceName(),
      /* .definingServiceName =*/ "UndecoratedService",
      /* .methodName =*/ "noop",
      /* .qualifiedMethodName =*/ "UndecoratedService.noop"};
  apache::thrift::HandlerCallback<void>::DecoratorAfterCallback decoratorCallback{
    static_cast<void*>(iface_),
    apache::thrift::ServiceHandler<::cpp2::UndecoratedService>::fbthrift_invoke_decorator_after_noop};
 auto callback =
      apache::thrift::HandlerCallbackPtr<void>::make(
          apache::thrift::detail::ServerRequestHelper::request(
              std::move(serverRequest)),
          std::move(ctxStack),
          std::move(methodNameInfo),
          return_noop<ProtocolIn_, ProtocolOut_>,
          throw_wrapped_noop<ProtocolIn_, ProtocolOut_>,
          serverRequest.requestContext()->getProtoSeqId(),
          apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
          apache::thrift::detail::ServerRequestHelper::executor(serverRequest),
          serverRequest.requestContext(),
          requestPileNotification,
          concurrencyControllerNotification,
          std::move(serverRequest.requestData()),
          apache::thrift::TilePtr(),
          std::move(decoratorCallback));
  // Execute method decorator before_noop.
  iface_->fbthrift_execute_decorators_before_noop(*serverRequest.requestContext());

  const auto makeExecuteHandler = [&] {
    return [ifacePtr = iface_](auto&& cb, ArgsState args) mutable {
      (void)args;
      ifacePtr->async_tm_noop(std::move(cb));
    };
  };
#if FOLLY_HAS_COROUTINES
  if (apache::thrift::detail::shouldProcessServiceInterceptorsOnRequest(
          *callback)) {
    [](auto callback, auto executeHandler, ArgsState args)
        -> folly::coro::Task<void> {
      auto argRefs = args.asTupleOfRefs();
      co_await apache::thrift::detail::processServiceInterceptorsOnRequest(
          *callback,
          apache::thrift::detail::ServiceInterceptorOnRequestArguments(
              argRefs));
      executeHandler(std::move(callback), std::move(args));
    }(std::move(callback), makeExecuteHandler(), std::move(args))
               .scheduleOn(
                   apache::thrift::detail::ServerRequestHelper::executor(
                       serverRequest))
               .startInlineUnsafe();
  } else {
    makeExecuteHandler()(std::move(callback), std::move(args));
  }
#else
  makeExecuteHandler()(std::move(callback), std::move(args));
#endif // FOLLY_HAS_COROUTINES
}

template <class ProtocolIn_, class ProtocolOut_>
apache::thrift::SerializedResponse UndecoratedServiceAsyncProcessor::return_noop(
    apache::thrift::ContextStack* ctx) {
  ProtocolOut_ prot;
  ::cpp2::UndecoratedService_noop_presult result;
  return serializeResponse("noop", &prot, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void UndecoratedServiceAsyncProcessor::throw_wrapped_noop(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    [[maybe_unused]] int32_t protoSeqId,
    apache::thrift::ContextStack* ctx,
    folly::exception_wrapper ew,
    apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  {
    apache::thrift::detail::ap::process_throw_wrapped_handler_error<
        ProtocolOut_>(ew, std::move(req), reqCtx, ctx, "noop");
    return;
  }
}
//
// End of Method 'noop'
//

//
// Method 'echo'
//
template <typename ProtocolIn_, typename ProtocolOut_>
void UndecoratedServiceAsyncProcessor::setUpAndProcess_echo(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    apache::thrift::SerializedCompressedRequest&& serializedRequest,
    apache::thrift::Cpp2RequestContext* ctx,
    folly::EventBase* eb,
    [[maybe_unused]] apache::thrift::concurrency::ThreadManager* tm) {
  if (!setUpRequestProcessing(
          req, ctx, eb, tm, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, iface_)) {
    return;
  }
  auto scope = iface_->getRequestExecutionScope(
      ctx, apache::thrift::concurrency::NORMAL);
  ctx->setRequestExecutionScope(std::move(scope));
  processInThread(
      std::move(req),
      std::move(serializedRequest),
      ctx,
      eb,
      tm,
      apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE,
      &UndecoratedServiceAsyncProcessor::
          executeRequest_echo<ProtocolIn_, ProtocolOut_>,
      this);
}

template <typename ProtocolIn_, typename ProtocolOut_>
void UndecoratedServiceAsyncProcessor::executeRequest_echo(
    apache::thrift::ServerRequest&& serverRequest) {
  // make sure getRequestContext is null
  // so async calls don't accidentally use it
  iface_->setRequestContext(nullptr);
  struct ArgsState {
    std::unique_ptr<::std::string> uarg_text = std::make_unique<::std::string>();
    UndecoratedService_echo_pargs pargs() {
      UndecoratedService_echo_pargs args;
      args.get<0>().value = uarg_text.get();
      return args;
    }

    auto asTupleOfRefs() & {
      return std::tie(
        std::as_const(*uarg_text)
      );
    }
  } args;

  auto ctxStack = apache::thrift::ContextStack::create(
      this->getEventHandlersSharedPtr(),
      this->getServiceName(),
      "UndecoratedService.echo",
      serverRequest.requestContext());
  try {
    auto pargs = args.pargs();
    deserializeRequest<ProtocolIn_>(
        pargs,
        "echo",
        apache::thrift::detail::ServerRequestHelper::compressedRequest(
            std::move(serverRequest))
            .uncompress(),
        ctxStack.get());
  } catch (...) {
    folly::exception_wrapper ew(std::current_exception());
    apache::thrift::detail::ap::process_handle_exn_deserialization<
        ProtocolOut_>(
        ew,
        apache::thrift::detail::ServerRequestHelper::request(std::move(serverRequest)),
            serverRequest.requestContext(),
        apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
        "echo");
    return;
  }
  auto requestPileNotification =
      apache::thrift::detail::ServerRequestHelper::moveRequestPileNotification(
          serverRequest);
  auto concurrencyControllerNotification =
      apache::thrift::detail::ServerRequestHelper::moveConcurrencyControllerNotification(
          serverRequest);
  apache::thrift::HandlerCallbackBase::MethodNameInfo methodNameInfo{
      /* .serviceName =*/ this->getServiceName(),
      /* .definingServiceName =*/ "UndecoratedService",
      /* .methodName =*/ "echo",
      /* .qualifiedMethodName =*/ "UndecoratedService.echo"};
  apache::thrift::HandlerCallback<std::unique_ptr<::std::string>>::DecoratorAfterCallback decoratorCallback{
    static_cast<void*>(iface_),
    apache::thrift::ServiceHandler<::cpp2::UndecoratedService>::fbthrift_invoke_decorator_after_echo};
 auto callback =
      apache::thrift::HandlerCallbackPtr<std::unique_ptr<::std::string>>::make(
          apache::thrift::detail::ServerRequestHelper::request(
              std::move(serverRequest)),
          std::move(ctxStack),
          std::move(methodNameInfo),
          return_echo<ProtocolIn_, ProtocolOut_>,
          throw_wrapped_echo<ProtocolIn_, ProtocolOut_>,
          serverRequest.requestContext()->getProtoSeqId(),
          apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
          apache::thrift::detail::ServerRequestHelper::executor(serverRequest),
          serverRequest.requestContext(),
          requestPileNotification,
          concurrencyControllerNotification,
          std::move(serverRequest.requestData()),
          apache::thrift::TilePtr(),
          std::move(decoratorCallback));
  // Execute method decorator before_echo.
  iface_->fbthrift_execute_decorators_before_echo(*serverRequest.requestContext(), *args.uarg_text);

  const auto makeExecuteHandler = [&] {
    return [ifacePtr = iface_](auto&& cb, ArgsState args) mutable {
      (void)args;
      ifacePtr->async_tm_echo(std::move(cb), std::move(args.uarg_text));
    };
  };
#if FOLLY_HAS_COROUTINES
  if (apache::thrift::detail::shouldProcessServiceInterceptorsOnRequest(
          *callback)) {
    [](auto callback, auto executeHandler, ArgsState args)
        -> folly::coro::Task<void> {
      auto argRefs = args.asTupleOfRefs();
      co_await apache::thrift::detail::processServiceInterceptorsOnRequest(
          *callback,
          apache::thrift::detail::ServiceInterceptorOnRequestArguments(
              argRefs));
      executeHandler(std::move(callback), std::move(args));
    }(std::move(callback), makeExecuteHandler(), std::move(args))
               .scheduleOn(
                   apache::thrift::detail::ServerRequestHelper::executor(
                       serverRequest))
               .startInlineUnsafe();
  } else {
    makeExecuteHandler()(std::move(callback), std::move(args));
  }
#else
  makeExecuteHandler()(std::move(callback), std::move(args));
#endif // FOLLY_HAS_COROUTINES
}

template <class ProtocolIn_, class ProtocolOut_>
apache::thrift::SerializedResponse UndecoratedServiceAsyncProcessor::return_echo(
    apache::thrift::ContextStack* ctx,
    ::std::string const& _return) {
  ProtocolOut_ prot;
  ::cpp2::UndecoratedService_echo_presult result;
  result.get<0>().value = const_cast<::std::string*>(&_return);
  result.setIsSet(0, true);
  return serializeResponse("echo", &prot, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void UndecoratedServiceAsyncProcessor::throw_wrapped_echo(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    [[maybe_unused]] int32_t protoSeqId,
    apache::thrift::ContextStack* ctx,
    folly::exception_wrapper ew,
    apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  {
    apache::thrift::detail::ap::process_throw_wrapped_handler_error<
        ProtocolOut_>(ew, std::move(req), reqCtx, ctx, "echo");
    return;
  }
}
//
// End of Method 'echo'
//

//
// Method 'increment'
//
template <typename ProtocolIn_, typename ProtocolOut_>
void UndecoratedServiceAsyncProcessor::setUpAndProcess_increment(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    apache::thrift::SerializedCompressedRequest&& serializedRequest,
    apache::thrift::Cpp2RequestContext* ctx,
    folly::EventBase* eb,
    [[maybe_unused]] apache::thrift::concurrency::ThreadManager* tm) {
  if (!setUpRequestProcessing(
          req, ctx, eb, tm, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, iface_)) {
    return;
  }
  auto scope = iface_->getRequestExecutionScope(
      ctx, apache::thrift::concurrency::NORMAL);
  ctx->setRequestExecutionScope(std::move(scope));
  processInThread(
      std::move(req),
      std::move(serializedRequest),
      ctx,
      eb,
      tm,
      apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE,
      &UndecoratedServiceAsyncProcessor::
          executeRequest_increment<ProtocolIn_, ProtocolOut_>,
      this);
}

template <typename ProtocolIn_, typename ProtocolOut_>
void UndecoratedServiceAsyncProcessor::executeRequest_increment(
    apache::thrift::ServerRequest&& serverRequest) {
  // make sure getRequestContext is null
  // so async calls don't accidentally use it
  iface_->setRequestContext(nullptr);
  struct ArgsState {
    ::std::int64_t uarg_num{0};
    UndecoratedService_increment_pargs pargs() {
      UndecoratedService_increment_pargs args;
      args.get<0>().value = &uarg_num;
      return args;
    }

    auto asTupleOfRefs() & {
      return std::tie(
        std::as_const(uarg_num)
      );
    }
  } args;

  auto ctxStack = apache::thrift::ContextStack::create(
      this->getEventHandlersSharedPtr(),
      this->getServiceName(),
      "UndecoratedService.increment",
      serverRequest.requestContext());
  try {
    auto pargs = args.pargs();
    deserializeRequest<ProtocolIn_>(
        pargs,
        "increment",
        apache::thrift::detail::ServerRequestHelper::compressedRequest(
            std::move(serverRequest))
            .uncompress(),
        ctxStack.get());
  } catch (...) {
    folly::exception_wrapper ew(std::current_exception());
    apache::thrift::detail::ap::process_handle_exn_deserialization<
        ProtocolOut_>(
        ew,
        apache::thrift::detail::ServerRequestHelper::request(std::move(serverRequest)),
            serverRequest.requestContext(),
        apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
        "increment");
    return;
  }
  auto requestPileNotification =
      apache::thrift::detail::ServerRequestHelper::moveRequestPileNotification(
          serverRequest);
  auto concurrencyControllerNotification =
      apache::thrift::detail::ServerRequestHelper::moveConcurrencyControllerNotification(
          serverRequest);
  apache::thrift::HandlerCallbackBase::MethodNameInfo methodNameInfo{
      /* .serviceName =*/ this->getServiceName(),
      /* .definingServiceName =*/ "UndecoratedService",
      /* .methodName =*/ "increment",
      /* .qualifiedMethodName =*/ "UndecoratedService.increment"};
  apache::thrift::HandlerCallback<::std::int64_t>::DecoratorAfterCallback decoratorCallback{
    static_cast<void*>(iface_),
    apache::thrift::ServiceHandler<::cpp2::UndecoratedService>::fbthrift_invoke_decorator_after_increment};
 auto callback =
      apache::thrift::HandlerCallbackPtr<::std::int64_t>::make(
          apache::thrift::detail::ServerRequestHelper::request(
              std::move(serverRequest)),
          std::move(ctxStack),
          std::move(methodNameInfo),
          return_increment<ProtocolIn_, ProtocolOut_>,
          throw_wrapped_increment<ProtocolIn_, ProtocolOut_>,
          serverRequest.requestContext()->getProtoSeqId(),
          apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
          apache::thrift::detail::ServerRequestHelper::executor(serverRequest),
          serverRequest.requestContext(),
          requestPileNotification,
          concurrencyControllerNotification,
          std::move(serverRequest.requestData()),
          apache::thrift::TilePtr(),
          std::move(decoratorCallback));
  // Execute method decorator before_increment.
  iface_->fbthrift_execute_decorators_before_increment(*serverRequest.requestContext(), args.uarg_num);

  const auto makeExecuteHandler = [&] {
    return [ifacePtr = iface_](auto&& cb, ArgsState args) mutable {
      (void)args;
      ifacePtr->async_tm_increment(std::move(cb), args.uarg_num);
    };
  };
#if FOLLY_HAS_COROUTINES
  if (apache::thrift::detail::shouldProcessServiceInterceptorsOnRequest(
          *callback)) {
    [](auto callback, auto executeHandler, ArgsState args)
        -> folly::coro::Task<void> {
      auto argRefs = args.asTupleOfRefs();
      co_await apache::thrift::detail::processServiceInterceptorsOnRequest(
          *callback,
          apache::thrift::detail::ServiceInterceptorOnRequestArguments(
              argRefs));
      executeHandler(std::move(callback), std::move(args));
    }(std::move(callback), makeExecuteHandler(), std::move(args))
               .scheduleOn(
                   apache::thrift::detail::ServerRequestHelper::executor(
                       serverRequest))
               .startInlineUnsafe();
  } else {
    makeExecuteHandler()(std::move(callback), std::move(args));
  }
#else
  makeExecuteHandler()(std::move(callback), std::move(args));
#endif // FOLLY_HAS_COROUTINES
}

template <class ProtocolIn_, class ProtocolOut_>
apache::thrift::SerializedResponse UndecoratedServiceAsyncProcessor::return_increment(
    apache::thrift::ContextStack* ctx,
    ::std::int64_t const& _return) {
  ProtocolOut_ prot;
  ::cpp2::UndecoratedService_increment_presult result;
  result.get<0>().value = const_cast<::std::int64_t*>(&_return);
  result.setIsSet(0, true);
  return serializeResponse("increment", &prot, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void UndecoratedServiceAsyncProcessor::throw_wrapped_increment(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    [[maybe_unused]] int32_t protoSeqId,
    apache::thrift::ContextStack* ctx,
    folly::exception_wrapper ew,
    apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  {
    apache::thrift::detail::ap::process_throw_wrapped_handler_error<
        ProtocolOut_>(ew, std::move(req), reqCtx, ctx, "increment");
    return;
  }
}
//
// End of Method 'increment'
//

//
// Method 'sum'
//
template <typename ProtocolIn_, typename ProtocolOut_>
void UndecoratedServiceAsyncProcessor::setUpAndProcess_sum(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    apache::thrift::SerializedCompressedRequest&& serializedRequest,
    apache::thrift::Cpp2RequestContext* ctx,
    folly::EventBase* eb,
    [[maybe_unused]] apache::thrift::concurrency::ThreadManager* tm) {
  if (!setUpRequestProcessing(
          req, ctx, eb, tm, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, iface_)) {
    return;
  }
  auto scope = iface_->getRequestExecutionScope(
      ctx, apache::thrift::concurrency::NORMAL);
  ctx->setRequestExecutionScope(std::move(scope));
  processInThread(
      std::move(req),
      std::move(serializedRequest),
      ctx,
      eb,
      tm,
      apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE,
      &UndecoratedServiceAsyncProcessor::
          executeRequest_sum<ProtocolIn_, ProtocolOut_>,
      this);
}

template <typename ProtocolIn_, typename ProtocolOut_>
void UndecoratedServiceAsyncProcessor::executeRequest_sum(
    apache::thrift::ServerRequest&& serverRequest) {
  // make sure getRequestContext is null
  // so async calls don't accidentally use it
  iface_->setRequestContext(nullptr);
  struct ArgsState {
    std::unique_ptr<::std::vector<::std::int64_t>> uarg_nums = std::make_unique<::std::vector<::std::int64_t>>();
    UndecoratedService_sum_pargs pargs() {
      UndecoratedService_sum_pargs args;
      args.get<0>().value = uarg_nums.get();
      return args;
    }

    auto asTupleOfRefs() & {
      return std::tie(
        std::as_const(*uarg_nums)
      );
    }
  } args;

  auto ctxStack = apache::thrift::ContextStack::create(
      this->getEventHandlersSharedPtr(),
      this->getServiceName(),
      "UndecoratedService.sum",
      serverRequest.requestContext());
  try {
    auto pargs = args.pargs();
    deserializeRequest<ProtocolIn_>(
        pargs,
        "sum",
        apache::thrift::detail::ServerRequestHelper::compressedRequest(
            std::move(serverRequest))
            .uncompress(),
        ctxStack.get());
  } catch (...) {
    folly::exception_wrapper ew(std::current_exception());
    apache::thrift::detail::ap::process_handle_exn_deserialization<
        ProtocolOut_>(
        ew,
        apache::thrift::detail::ServerRequestHelper::request(std::move(serverRequest)),
            serverRequest.requestContext(),
        apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
        "sum");
    return;
  }
  auto requestPileNotification =
      apache::thrift::detail::ServerRequestHelper::moveRequestPileNotification(
          serverRequest);
  auto concurrencyControllerNotification =
      apache::thrift::detail::ServerRequestHelper::moveConcurrencyControllerNotification(
          serverRequest);
  apache::thrift::HandlerCallbackBase::MethodNameInfo methodNameInfo{
      /* .serviceName =*/ this->getServiceName(),
      /* .definingServiceName =*/ "UndecoratedService",
      /* .methodName =*/ "sum",
      /* .qualifiedMethodName =*/ "UndecoratedService.sum"};
  apache::thrift::HandlerCallback<::std::int64_t>::DecoratorAfterCallback decoratorCallback{
    static_cast<void*>(iface_),
    apache::thrift::ServiceHandler<::cpp2::UndecoratedService>::fbthrift_invoke_decorator_after_sum};
 auto callback =
      apache::thrift::HandlerCallbackPtr<::std::int64_t>::make(
          apache::thrift::detail::ServerRequestHelper::request(
              std::move(serverRequest)),
          std::move(ctxStack),
          std::move(methodNameInfo),
          return_sum<ProtocolIn_, ProtocolOut_>,
          throw_wrapped_sum<ProtocolIn_, ProtocolOut_>,
          serverRequest.requestContext()->getProtoSeqId(),
          apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
          apache::thrift::detail::ServerRequestHelper::executor(serverRequest),
          serverRequest.requestContext(),
          requestPileNotification,
          concurrencyControllerNotification,
          std::move(serverRequest.requestData()),
          apache::thrift::TilePtr(),
          std::move(decoratorCallback));
  // Execute method decorator before_sum.
  iface_->fbthrift_execute_decorators_before_sum(*serverRequest.requestContext(), *args.uarg_nums);

  const auto makeExecuteHandler = [&] {
    return [ifacePtr = iface_](auto&& cb, ArgsState args) mutable {
      (void)args;
      ifacePtr->async_tm_sum(std::move(cb), std::move(args.uarg_nums));
    };
  };
#if FOLLY_HAS_COROUTINES
  if (apache::thrift::detail::shouldProcessServiceInterceptorsOnRequest(
          *callback)) {
    [](auto callback, auto executeHandler, ArgsState args)
        -> folly::coro::Task<void> {
      auto argRefs = args.asTupleOfRefs();
      co_await apache::thrift::detail::processServiceInterceptorsOnRequest(
          *callback,
          apache::thrift::detail::ServiceInterceptorOnRequestArguments(
              argRefs));
      executeHandler(std::move(callback), std::move(args));
    }(std::move(callback), makeExecuteHandler(), std::move(args))
               .scheduleOn(
                   apache::thrift::detail::ServerRequestHelper::executor(
                       serverRequest))
               .startInlineUnsafe();
  } else {
    makeExecuteHandler()(std::move(callback), std::move(args));
  }
#else
  makeExecuteHandler()(std::move(callback), std::move(args));
#endif // FOLLY_HAS_COROUTINES
}

template <class ProtocolIn_, class ProtocolOut_>
apache::thrift::SerializedResponse UndecoratedServiceAsyncProcessor::return_sum(
    apache::thrift::ContextStack* ctx,
    ::std::int64_t const& _return) {
  ProtocolOut_ prot;
  ::cpp2::UndecoratedService_sum_presult result;
  result.get<0>().value = const_cast<::std::int64_t*>(&_return);
  result.setIsSet(0, true);
  return serializeResponse("sum", &prot, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void UndecoratedServiceAsyncProcessor::throw_wrapped_sum(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    [[maybe_unused]] int32_t protoSeqId,
    apache::thrift::ContextStack* ctx,
    folly::exception_wrapper ew,
    apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  {
    apache::thrift::detail::ap::process_throw_wrapped_handler_error<
        ProtocolOut_>(ew, std::move(req), reqCtx, ctx, "sum");
    return;
  }
}
//
// End of Method 'sum'
//

//
// Method 'withStruct'
//
template <typename ProtocolIn_, typename ProtocolOut_>
void UndecoratedServiceAsyncProcessor::setUpAndProcess_withStruct(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    apache::thrift::SerializedCompressedRequest&& serializedRequest,
    apache::thrift::Cpp2RequestContext* ctx,
    folly::EventBase* eb,
    [[maybe_unused]] apache::thrift::concurrency::ThreadManager* tm) {
  if (!setUpRequestProcessing(
          req, ctx, eb, tm, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, iface_)) {
    return;
  }
  auto scope = iface_->getRequestExecutionScope(
      ctx, apache::thrift::concurrency::NORMAL);
  ctx->setRequestExecutionScope(std::move(scope));
  processInThread(
      std::move(req),
      std::move(serializedRequest),
      ctx,
      eb,
      tm,
      apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE,
      &UndecoratedServiceAsyncProcessor::
          executeRequest_withStruct<ProtocolIn_, ProtocolOut_>,
      this);
}

template <typename ProtocolIn_, typename ProtocolOut_>
void UndecoratedServiceAsyncProcessor::executeRequest_withStruct(
    apache::thrift::ServerRequest&& serverRequest) {
  // make sure getRequestContext is null
  // so async calls don't accidentally use it
  iface_->setRequestContext(nullptr);
  struct ArgsState {
    std::unique_ptr<::cpp2::Request> uarg_request = std::make_unique<::cpp2::Request>();
    UndecoratedService_withStruct_pargs pargs() {
      UndecoratedService_withStruct_pargs args;
      args.get<0>().value = uarg_request.get();
      return args;
    }

    auto asTupleOfRefs() & {
      return std::tie(
        std::as_const(*uarg_request)
      );
    }
  } args;

  auto ctxStack = apache::thrift::ContextStack::create(
      this->getEventHandlersSharedPtr(),
      this->getServiceName(),
      "UndecoratedService.withStruct",
      serverRequest.requestContext());
  try {
    auto pargs = args.pargs();
    deserializeRequest<ProtocolIn_>(
        pargs,
        "withStruct",
        apache::thrift::detail::ServerRequestHelper::compressedRequest(
            std::move(serverRequest))
            .uncompress(),
        ctxStack.get());
  } catch (...) {
    folly::exception_wrapper ew(std::current_exception());
    apache::thrift::detail::ap::process_handle_exn_deserialization<
        ProtocolOut_>(
        ew,
        apache::thrift::detail::ServerRequestHelper::request(std::move(serverRequest)),
            serverRequest.requestContext(),
        apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
        "withStruct");
    return;
  }
  auto requestPileNotification =
      apache::thrift::detail::ServerRequestHelper::moveRequestPileNotification(
          serverRequest);
  auto concurrencyControllerNotification =
      apache::thrift::detail::ServerRequestHelper::moveConcurrencyControllerNotification(
          serverRequest);
  apache::thrift::HandlerCallbackBase::MethodNameInfo methodNameInfo{
      /* .serviceName =*/ this->getServiceName(),
      /* .definingServiceName =*/ "UndecoratedService",
      /* .methodName =*/ "withStruct",
      /* .qualifiedMethodName =*/ "UndecoratedService.withStruct"};
  apache::thrift::HandlerCallback<std::unique_ptr<::cpp2::Response>>::DecoratorAfterCallback decoratorCallback{
    static_cast<void*>(iface_),
    apache::thrift::ServiceHandler<::cpp2::UndecoratedService>::fbthrift_invoke_decorator_after_withStruct};
 auto callback =
      apache::thrift::HandlerCallbackPtr<std::unique_ptr<::cpp2::Response>>::make(
          apache::thrift::detail::ServerRequestHelper::request(
              std::move(serverRequest)),
          std::move(ctxStack),
          std::move(methodNameInfo),
          return_withStruct<ProtocolIn_, ProtocolOut_>,
          throw_wrapped_withStruct<ProtocolIn_, ProtocolOut_>,
          serverRequest.requestContext()->getProtoSeqId(),
          apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
          apache::thrift::detail::ServerRequestHelper::executor(serverRequest),
          serverRequest.requestContext(),
          requestPileNotification,
          concurrencyControllerNotification,
          std::move(serverRequest.requestData()),
          apache::thrift::TilePtr(),
          std::move(decoratorCallback));
  // Execute method decorator before_withStruct.
  iface_->fbthrift_execute_decorators_before_withStruct(*serverRequest.requestContext(), *args.uarg_request);

  const auto makeExecuteHandler = [&] {
    return [ifacePtr = iface_](auto&& cb, ArgsState args) mutable {
      (void)args;
      ifacePtr->async_tm_withStruct(std::move(cb), std::move(args.uarg_request));
    };
  };
#if FOLLY_HAS_COROUTINES
  if (apache::thrift::detail::shouldProcessServiceInterceptorsOnRequest(
          *callback)) {
    [](auto callback, auto executeHandler, ArgsState args)
        -> folly::coro::Task<void> {
      auto argRefs = args.asTupleOfRefs();
      co_await apache::thrift::detail::processServiceInterceptorsOnRequest(
          *callback,
          apache::thrift::detail::ServiceInterceptorOnRequestArguments(
              argRefs));
      executeHandler(std::move(callback), std::move(args));
    }(std::move(callback), makeExecuteHandler(), std::move(args))
               .scheduleOn(
                   apache::thrift::detail::ServerRequestHelper::executor(
                       serverRequest))
               .startInlineUnsafe();
  } else {
    makeExecuteHandler()(std::move(callback), std::move(args));
  }
#else
  makeExecuteHandler()(std::move(callback), std::move(args));
#endif // FOLLY_HAS_COROUTINES
}

template <class ProtocolIn_, class ProtocolOut_>
apache::thrift::SerializedResponse UndecoratedServiceAsyncProcessor::return_withStruct(
    apache::thrift::ContextStack* ctx,
    ::cpp2::Response const& _return) {
  ProtocolOut_ prot;
  ::cpp2::UndecoratedService_withStruct_presult result;
  result.get<0>().value = const_cast<::cpp2::Response*>(&_return);
  result.setIsSet(0, true);
  return serializeResponse("withStruct", &prot, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void UndecoratedServiceAsyncProcessor::throw_wrapped_withStruct(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    [[maybe_unused]] int32_t protoSeqId,
    apache::thrift::ContextStack* ctx,
    folly::exception_wrapper ew,
    apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  {
    apache::thrift::detail::ap::process_throw_wrapped_handler_error<
        ProtocolOut_>(ew, std::move(req), reqCtx, ctx, "withStruct");
    return;
  }
}
//
// End of Method 'withStruct'
//

//
// Method 'multiParam'
//
template <typename ProtocolIn_, typename ProtocolOut_>
void UndecoratedServiceAsyncProcessor::setUpAndProcess_multiParam(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    apache::thrift::SerializedCompressedRequest&& serializedRequest,
    apache::thrift::Cpp2RequestContext* ctx,
    folly::EventBase* eb,
    [[maybe_unused]] apache::thrift::concurrency::ThreadManager* tm) {
  if (!setUpRequestProcessing(
          req, ctx, eb, tm, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, iface_)) {
    return;
  }
  auto scope = iface_->getRequestExecutionScope(
      ctx, apache::thrift::concurrency::NORMAL);
  ctx->setRequestExecutionScope(std::move(scope));
  processInThread(
      std::move(req),
      std::move(serializedRequest),
      ctx,
      eb,
      tm,
      apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE,
      &UndecoratedServiceAsyncProcessor::
          executeRequest_multiParam<ProtocolIn_, ProtocolOut_>,
      this);
}

template <typename ProtocolIn_, typename ProtocolOut_>
void UndecoratedServiceAsyncProcessor::executeRequest_multiParam(
    apache::thrift::ServerRequest&& serverRequest) {
  // make sure getRequestContext is null
  // so async calls don't accidentally use it
  iface_->setRequestContext(nullptr);
  struct ArgsState {
    std::unique_ptr<::std::string> uarg_text = std::make_unique<::std::string>();
    ::std::int64_t uarg_num{0};
    std::unique_ptr<::cpp2::Request> uarg_request = std::make_unique<::cpp2::Request>();
    UndecoratedService_multiParam_pargs pargs() {
      UndecoratedService_multiParam_pargs args;
      args.get<0>().value = uarg_text.get();
      args.get<1>().value = &uarg_num;
      args.get<2>().value = uarg_request.get();
      return args;
    }

    auto asTupleOfRefs() & {
      return std::tie(
        std::as_const(*uarg_text),
        std::as_const(uarg_num),
        std::as_const(*uarg_request)
      );
    }
  } args;

  auto ctxStack = apache::thrift::ContextStack::create(
      this->getEventHandlersSharedPtr(),
      this->getServiceName(),
      "UndecoratedService.multiParam",
      serverRequest.requestContext());
  try {
    auto pargs = args.pargs();
    deserializeRequest<ProtocolIn_>(
        pargs,
        "multiParam",
        apache::thrift::detail::ServerRequestHelper::compressedRequest(
            std::move(serverRequest))
            .uncompress(),
        ctxStack.get());
  } catch (...) {
    folly::exception_wrapper ew(std::current_exception());
    apache::thrift::detail::ap::process_handle_exn_deserialization<
        ProtocolOut_>(
        ew,
        apache::thrift::detail::ServerRequestHelper::request(std::move(serverRequest)),
            serverRequest.requestContext(),
        apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
        "multiParam");
    return;
  }
  auto requestPileNotification =
      apache::thrift::detail::ServerRequestHelper::moveRequestPileNotification(
          serverRequest);
  auto concurrencyControllerNotification =
      apache::thrift::detail::ServerRequestHelper::moveConcurrencyControllerNotification(
          serverRequest);
  apache::thrift::HandlerCallbackBase::MethodNameInfo methodNameInfo{
      /* .serviceName =*/ this->getServiceName(),
      /* .definingServiceName =*/ "UndecoratedService",
      /* .methodName =*/ "multiParam",
      /* .qualifiedMethodName =*/ "UndecoratedService.multiParam"};
  apache::thrift::HandlerCallback<std::unique_ptr<::cpp2::Response>>::DecoratorAfterCallback decoratorCallback{
    static_cast<void*>(iface_),
    apache::thrift::ServiceHandler<::cpp2::UndecoratedService>::fbthrift_invoke_decorator_after_multiParam};
 auto callback =
      apache::thrift::HandlerCallbackPtr<std::unique_ptr<::cpp2::Response>>::make(
          apache::thrift::detail::ServerRequestHelper::request(
              std::move(serverRequest)),
          std::move(ctxStack),
          std::move(methodNameInfo),
          return_multiParam<ProtocolIn_, ProtocolOut_>,
          throw_wrapped_multiParam<ProtocolIn_, ProtocolOut_>,
          serverRequest.requestContext()->getProtoSeqId(),
          apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
          apache::thrift::detail::ServerRequestHelper::executor(serverRequest),
          serverRequest.requestContext(),
          requestPileNotification,
          concurrencyControllerNotification,
          std::move(serverRequest.requestData()),
          apache::thrift::TilePtr(),
          std::move(decoratorCallback));
  // Execute method decorator before_multiParam.
  iface_->fbthrift_execute_decorators_before_multiParam(*serverRequest.requestContext(), *args.uarg_text, args.uarg_num, *args.uarg_request);

  const auto makeExecuteHandler = [&] {
    return [ifacePtr = iface_](auto&& cb, ArgsState args) mutable {
      (void)args;
      ifacePtr->async_tm_multiParam(std::move(cb), std::move(args.uarg_text), args.uarg_num, std::move(args.uarg_request));
    };
  };
#if FOLLY_HAS_COROUTINES
  if (apache::thrift::detail::shouldProcessServiceInterceptorsOnRequest(
          *callback)) {
    [](auto callback, auto executeHandler, ArgsState args)
        -> folly::coro::Task<void> {
      auto argRefs = args.asTupleOfRefs();
      co_await apache::thrift::detail::processServiceInterceptorsOnRequest(
          *callback,
          apache::thrift::detail::ServiceInterceptorOnRequestArguments(
              argRefs));
      executeHandler(std::move(callback), std::move(args));
    }(std::move(callback), makeExecuteHandler(), std::move(args))
               .scheduleOn(
                   apache::thrift::detail::ServerRequestHelper::executor(
                       serverRequest))
               .startInlineUnsafe();
  } else {
    makeExecuteHandler()(std::move(callback), std::move(args));
  }
#else
  makeExecuteHandler()(std::move(callback), std::move(args));
#endif // FOLLY_HAS_COROUTINES
}

template <class ProtocolIn_, class ProtocolOut_>
apache::thrift::SerializedResponse UndecoratedServiceAsyncProcessor::return_multiParam(
    apache::thrift::ContextStack* ctx,
    ::cpp2::Response const& _return) {
  ProtocolOut_ prot;
  ::cpp2::UndecoratedService_multiParam_presult result;
  result.get<0>().value = const_cast<::cpp2::Response*>(&_return);
  result.setIsSet(0, true);
  return serializeResponse("multiParam", &prot, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void UndecoratedServiceAsyncProcessor::throw_wrapped_multiParam(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    [[maybe_unused]] int32_t protoSeqId,
    apache::thrift::ContextStack* ctx,
    folly::exception_wrapper ew,
    apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  {
    apache::thrift::detail::ap::process_throw_wrapped_handler_error<
        ProtocolOut_>(ew, std::move(req), reqCtx, ctx, "multiParam");
    return;
  }
}
//
// End of Method 'multiParam'
//

//
// Method 'adaptedRequest'
//
template <typename ProtocolIn_, typename ProtocolOut_>
void UndecoratedServiceAsyncProcessor::setUpAndProcess_adaptedRequest(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    apache::thrift::SerializedCompressedRequest&& serializedRequest,
    apache::thrift::Cpp2RequestContext* ctx,
    folly::EventBase* eb,
    [[maybe_unused]] apache::thrift::concurrency::ThreadManager* tm) {
  if (!setUpRequestProcessing(
          req, ctx, eb, tm, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, iface_)) {
    return;
  }
  auto scope = iface_->getRequestExecutionScope(
      ctx, apache::thrift::concurrency::NORMAL);
  ctx->setRequestExecutionScope(std::move(scope));
  processInThread(
      std::move(req),
      std::move(serializedRequest),
      ctx,
      eb,
      tm,
      apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE,
      &UndecoratedServiceAsyncProcessor::
          executeRequest_adaptedRequest<ProtocolIn_, ProtocolOut_>,
      this);
}

template <typename ProtocolIn_, typename ProtocolOut_>
void UndecoratedServiceAsyncProcessor::executeRequest_adaptedRequest(
    apache::thrift::ServerRequest&& serverRequest) {
  // make sure getRequestContext is null
  // so async calls don't accidentally use it
  iface_->setRequestContext(nullptr);
  struct ArgsState {
    std::unique_ptr<::cpp2::AdaptedRequest> uarg_request = std::make_unique<::cpp2::AdaptedRequest>();
    UndecoratedService_adaptedRequest_pargs pargs() {
      UndecoratedService_adaptedRequest_pargs args;
      args.get<0>().value = uarg_request.get();
      return args;
    }

    auto asTupleOfRefs() & {
      return std::tie(
        std::as_const(*uarg_request)
      );
    }
  } args;

  auto ctxStack = apache::thrift::ContextStack::create(
      this->getEventHandlersSharedPtr(),
      this->getServiceName(),
      "UndecoratedService.adaptedRequest",
      serverRequest.requestContext());
  try {
    auto pargs = args.pargs();
    deserializeRequest<ProtocolIn_>(
        pargs,
        "adaptedRequest",
        apache::thrift::detail::ServerRequestHelper::compressedRequest(
            std::move(serverRequest))
            .uncompress(),
        ctxStack.get());
  } catch (...) {
    folly::exception_wrapper ew(std::current_exception());
    apache::thrift::detail::ap::process_handle_exn_deserialization<
        ProtocolOut_>(
        ew,
        apache::thrift::detail::ServerRequestHelper::request(std::move(serverRequest)),
            serverRequest.requestContext(),
        apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
        "adaptedRequest");
    return;
  }
  auto requestPileNotification =
      apache::thrift::detail::ServerRequestHelper::moveRequestPileNotification(
          serverRequest);
  auto concurrencyControllerNotification =
      apache::thrift::detail::ServerRequestHelper::moveConcurrencyControllerNotification(
          serverRequest);
  apache::thrift::HandlerCallbackBase::MethodNameInfo methodNameInfo{
      /* .serviceName =*/ this->getServiceName(),
      /* .definingServiceName =*/ "UndecoratedService",
      /* .methodName =*/ "adaptedRequest",
      /* .qualifiedMethodName =*/ "UndecoratedService.adaptedRequest"};
  apache::thrift::HandlerCallback<std::unique_ptr<::cpp2::Response>>::DecoratorAfterCallback decoratorCallback{
    static_cast<void*>(iface_),
    apache::thrift::ServiceHandler<::cpp2::UndecoratedService>::fbthrift_invoke_decorator_after_adaptedRequest};
 auto callback =
      apache::thrift::HandlerCallbackPtr<std::unique_ptr<::cpp2::Response>>::make(
          apache::thrift::detail::ServerRequestHelper::request(
              std::move(serverRequest)),
          std::move(ctxStack),
          std::move(methodNameInfo),
          return_adaptedRequest<ProtocolIn_, ProtocolOut_>,
          throw_wrapped_adaptedRequest<ProtocolIn_, ProtocolOut_>,
          serverRequest.requestContext()->getProtoSeqId(),
          apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
          apache::thrift::detail::ServerRequestHelper::executor(serverRequest),
          serverRequest.requestContext(),
          requestPileNotification,
          concurrencyControllerNotification,
          std::move(serverRequest.requestData()),
          apache::thrift::TilePtr(),
          std::move(decoratorCallback));
  // Execute method decorator before_adaptedRequest.
  iface_->fbthrift_execute_decorators_before_adaptedRequest(*serverRequest.requestContext(), *args.uarg_request);

  const auto makeExecuteHandler = [&] {
    return [ifacePtr = iface_](auto&& cb, ArgsState args) mutable {
      (void)args;
      ifacePtr->async_tm_adaptedRequest(std::move(cb), std::move(args.uarg_request));
    };
  };
#if FOLLY_HAS_COROUTINES
  if (apache::thrift::detail::shouldProcessServiceInterceptorsOnRequest(
          *callback)) {
    [](auto callback, auto executeHandler, ArgsState args)
        -> folly::coro::Task<void> {
      auto argRefs = args.asTupleOfRefs();
      co_await apache::thrift::detail::processServiceInterceptorsOnRequest(
          *callback,
          apache::thrift::detail::ServiceInterceptorOnRequestArguments(
              argRefs));
      executeHandler(std::move(callback), std::move(args));
    }(std::move(callback), makeExecuteHandler(), std::move(args))
               .scheduleOn(
                   apache::thrift::detail::ServerRequestHelper::executor(
                       serverRequest))
               .startInlineUnsafe();
  } else {
    makeExecuteHandler()(std::move(callback), std::move(args));
  }
#else
  makeExecuteHandler()(std::move(callback), std::move(args));
#endif // FOLLY_HAS_COROUTINES
}

template <class ProtocolIn_, class ProtocolOut_>
apache::thrift::SerializedResponse UndecoratedServiceAsyncProcessor::return_adaptedRequest(
    apache::thrift::ContextStack* ctx,
    ::cpp2::Response const& _return) {
  ProtocolOut_ prot;
  ::cpp2::UndecoratedService_adaptedRequest_presult result;
  result.get<0>().value = const_cast<::cpp2::Response*>(&_return);
  result.setIsSet(0, true);
  return serializeResponse("adaptedRequest", &prot, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void UndecoratedServiceAsyncProcessor::throw_wrapped_adaptedRequest(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    [[maybe_unused]] int32_t protoSeqId,
    apache::thrift::ContextStack* ctx,
    folly::exception_wrapper ew,
    apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  {
    apache::thrift::detail::ap::process_throw_wrapped_handler_error<
        ProtocolOut_>(ew, std::move(req), reqCtx, ctx, "adaptedRequest");
    return;
  }
}
//
// End of Method 'adaptedRequest'
//

//
// End of Service Methods
//

} // namespace cpp2

namespace cpp2 {
typedef apache::thrift::ThriftPresult<false> DecoratedService_ExtendsUndecoratedService_extension_pargs;
typedef apache::thrift::ThriftPresult<true> DecoratedService_ExtendsUndecoratedService_extension_presult;
//
// Service Methods
//

//
// Method 'extension'
//
template <typename ProtocolIn_, typename ProtocolOut_>
void DecoratedService_ExtendsUndecoratedServiceAsyncProcessor::setUpAndProcess_extension(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    apache::thrift::SerializedCompressedRequest&& serializedRequest,
    apache::thrift::Cpp2RequestContext* ctx,
    folly::EventBase* eb,
    [[maybe_unused]] apache::thrift::concurrency::ThreadManager* tm) {
  if (!setUpRequestProcessing(
          req, ctx, eb, tm, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, iface_)) {
    return;
  }
  auto scope = iface_->getRequestExecutionScope(
      ctx, apache::thrift::concurrency::NORMAL);
  ctx->setRequestExecutionScope(std::move(scope));
  processInThread(
      std::move(req),
      std::move(serializedRequest),
      ctx,
      eb,
      tm,
      apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE,
      &DecoratedService_ExtendsUndecoratedServiceAsyncProcessor::
          executeRequest_extension<ProtocolIn_, ProtocolOut_>,
      this);
}

template <typename ProtocolIn_, typename ProtocolOut_>
void DecoratedService_ExtendsUndecoratedServiceAsyncProcessor::executeRequest_extension(
    apache::thrift::ServerRequest&& serverRequest) {
  // make sure getRequestContext is null
  // so async calls don't accidentally use it
  iface_->setRequestContext(nullptr);
  struct ArgsState {
    DecoratedService_ExtendsUndecoratedService_extension_pargs pargs() {
      DecoratedService_ExtendsUndecoratedService_extension_pargs args;
      return args;
    }

    auto asTupleOfRefs() & {
      return std::tie(
      );
    }
  } args;

  auto ctxStack = apache::thrift::ContextStack::create(
      this->getEventHandlersSharedPtr(),
      this->getServiceName(),
      "DecoratedService_ExtendsUndecoratedService.extension",
      serverRequest.requestContext());
  try {
    auto pargs = args.pargs();
    deserializeRequest<ProtocolIn_>(
        pargs,
        "extension",
        apache::thrift::detail::ServerRequestHelper::compressedRequest(
            std::move(serverRequest))
            .uncompress(),
        ctxStack.get());
  } catch (...) {
    folly::exception_wrapper ew(std::current_exception());
    apache::thrift::detail::ap::process_handle_exn_deserialization<
        ProtocolOut_>(
        ew,
        apache::thrift::detail::ServerRequestHelper::request(std::move(serverRequest)),
            serverRequest.requestContext(),
        apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
        "extension");
    return;
  }
  auto requestPileNotification =
      apache::thrift::detail::ServerRequestHelper::moveRequestPileNotification(
          serverRequest);
  auto concurrencyControllerNotification =
      apache::thrift::detail::ServerRequestHelper::moveConcurrencyControllerNotification(
          serverRequest);
  apache::thrift::HandlerCallbackBase::MethodNameInfo methodNameInfo{
      /* .serviceName =*/ this->getServiceName(),
      /* .definingServiceName =*/ "DecoratedService_ExtendsUndecoratedService",
      /* .methodName =*/ "extension",
      /* .qualifiedMethodName =*/ "DecoratedService_ExtendsUndecoratedService.extension"};
  apache::thrift::HandlerCallback<void>::DecoratorAfterCallback decoratorCallback{
    static_cast<void*>(iface_),
    apache::thrift::ServiceHandler<::cpp2::DecoratedService_ExtendsUndecoratedService>::fbthrift_invoke_decorator_after_extension};
 auto callback =
      apache::thrift::HandlerCallbackPtr<void>::make(
          apache::thrift::detail::ServerRequestHelper::request(
              std::move(serverRequest)),
          std::move(ctxStack),
          std::move(methodNameInfo),
          return_extension<ProtocolIn_, ProtocolOut_>,
          throw_wrapped_extension<ProtocolIn_, ProtocolOut_>,
          serverRequest.requestContext()->getProtoSeqId(),
          apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
          apache::thrift::detail::ServerRequestHelper::executor(serverRequest),
          serverRequest.requestContext(),
          requestPileNotification,
          concurrencyControllerNotification,
          std::move(serverRequest.requestData()),
          apache::thrift::TilePtr(),
          std::move(decoratorCallback));
  // Execute method decorator before_extension.
  iface_->fbthrift_execute_decorators_before_extension(*serverRequest.requestContext());

  const auto makeExecuteHandler = [&] {
    return [ifacePtr = iface_](auto&& cb, ArgsState args) mutable {
      (void)args;
      ifacePtr->async_tm_extension(std::move(cb));
    };
  };
#if FOLLY_HAS_COROUTINES
  if (apache::thrift::detail::shouldProcessServiceInterceptorsOnRequest(
          *callback)) {
    [](auto callback, auto executeHandler, ArgsState args)
        -> folly::coro::Task<void> {
      auto argRefs = args.asTupleOfRefs();
      co_await apache::thrift::detail::processServiceInterceptorsOnRequest(
          *callback,
          apache::thrift::detail::ServiceInterceptorOnRequestArguments(
              argRefs));
      executeHandler(std::move(callback), std::move(args));
    }(std::move(callback), makeExecuteHandler(), std::move(args))
               .scheduleOn(
                   apache::thrift::detail::ServerRequestHelper::executor(
                       serverRequest))
               .startInlineUnsafe();
  } else {
    makeExecuteHandler()(std::move(callback), std::move(args));
  }
#else
  makeExecuteHandler()(std::move(callback), std::move(args));
#endif // FOLLY_HAS_COROUTINES
}

template <class ProtocolIn_, class ProtocolOut_>
apache::thrift::SerializedResponse DecoratedService_ExtendsUndecoratedServiceAsyncProcessor::return_extension(
    apache::thrift::ContextStack* ctx) {
  ProtocolOut_ prot;
  ::cpp2::DecoratedService_ExtendsUndecoratedService_extension_presult result;
  return serializeResponse("extension", &prot, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void DecoratedService_ExtendsUndecoratedServiceAsyncProcessor::throw_wrapped_extension(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    [[maybe_unused]] int32_t protoSeqId,
    apache::thrift::ContextStack* ctx,
    folly::exception_wrapper ew,
    apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  {
    apache::thrift::detail::ap::process_throw_wrapped_handler_error<
        ProtocolOut_>(ew, std::move(req), reqCtx, ctx, "extension");
    return;
  }
}
//
// End of Method 'extension'
//

//
// End of Service Methods
//

} // namespace cpp2

namespace cpp2 {
typedef apache::thrift::ThriftPresult<false> DecoratedService_ExtendsDecoratedService_extension_pargs;
typedef apache::thrift::ThriftPresult<true> DecoratedService_ExtendsDecoratedService_extension_presult;
//
// Service Methods
//

//
// Method 'extension'
//
template <typename ProtocolIn_, typename ProtocolOut_>
void DecoratedService_ExtendsDecoratedServiceAsyncProcessor::setUpAndProcess_extension(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    apache::thrift::SerializedCompressedRequest&& serializedRequest,
    apache::thrift::Cpp2RequestContext* ctx,
    folly::EventBase* eb,
    [[maybe_unused]] apache::thrift::concurrency::ThreadManager* tm) {
  if (!setUpRequestProcessing(
          req, ctx, eb, tm, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, iface_)) {
    return;
  }
  auto scope = iface_->getRequestExecutionScope(
      ctx, apache::thrift::concurrency::NORMAL);
  ctx->setRequestExecutionScope(std::move(scope));
  processInThread(
      std::move(req),
      std::move(serializedRequest),
      ctx,
      eb,
      tm,
      apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE,
      &DecoratedService_ExtendsDecoratedServiceAsyncProcessor::
          executeRequest_extension<ProtocolIn_, ProtocolOut_>,
      this);
}

template <typename ProtocolIn_, typename ProtocolOut_>
void DecoratedService_ExtendsDecoratedServiceAsyncProcessor::executeRequest_extension(
    apache::thrift::ServerRequest&& serverRequest) {
  // make sure getRequestContext is null
  // so async calls don't accidentally use it
  iface_->setRequestContext(nullptr);
  struct ArgsState {
    DecoratedService_ExtendsDecoratedService_extension_pargs pargs() {
      DecoratedService_ExtendsDecoratedService_extension_pargs args;
      return args;
    }

    auto asTupleOfRefs() & {
      return std::tie(
      );
    }
  } args;

  auto ctxStack = apache::thrift::ContextStack::create(
      this->getEventHandlersSharedPtr(),
      this->getServiceName(),
      "DecoratedService_ExtendsDecoratedService.extension",
      serverRequest.requestContext());
  try {
    auto pargs = args.pargs();
    deserializeRequest<ProtocolIn_>(
        pargs,
        "extension",
        apache::thrift::detail::ServerRequestHelper::compressedRequest(
            std::move(serverRequest))
            .uncompress(),
        ctxStack.get());
  } catch (...) {
    folly::exception_wrapper ew(std::current_exception());
    apache::thrift::detail::ap::process_handle_exn_deserialization<
        ProtocolOut_>(
        ew,
        apache::thrift::detail::ServerRequestHelper::request(std::move(serverRequest)),
            serverRequest.requestContext(),
        apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
        "extension");
    return;
  }
  auto requestPileNotification =
      apache::thrift::detail::ServerRequestHelper::moveRequestPileNotification(
          serverRequest);
  auto concurrencyControllerNotification =
      apache::thrift::detail::ServerRequestHelper::moveConcurrencyControllerNotification(
          serverRequest);
  apache::thrift::HandlerCallbackBase::MethodNameInfo methodNameInfo{
      /* .serviceName =*/ this->getServiceName(),
      /* .definingServiceName =*/ "DecoratedService_ExtendsDecoratedService",
      /* .methodName =*/ "extension",
      /* .qualifiedMethodName =*/ "DecoratedService_ExtendsDecoratedService.extension"};
  apache::thrift::HandlerCallback<void>::DecoratorAfterCallback decoratorCallback{
    static_cast<void*>(iface_),
    apache::thrift::ServiceHandler<::cpp2::DecoratedService_ExtendsDecoratedService>::fbthrift_invoke_decorator_after_extension};
 auto callback =
      apache::thrift::HandlerCallbackPtr<void>::make(
          apache::thrift::detail::ServerRequestHelper::request(
              std::move(serverRequest)),
          std::move(ctxStack),
          std::move(methodNameInfo),
          return_extension<ProtocolIn_, ProtocolOut_>,
          throw_wrapped_extension<ProtocolIn_, ProtocolOut_>,
          serverRequest.requestContext()->getProtoSeqId(),
          apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
          apache::thrift::detail::ServerRequestHelper::executor(serverRequest),
          serverRequest.requestContext(),
          requestPileNotification,
          concurrencyControllerNotification,
          std::move(serverRequest.requestData()),
          apache::thrift::TilePtr(),
          std::move(decoratorCallback));
  // Execute method decorator before_extension.
  iface_->fbthrift_execute_decorators_before_extension(*serverRequest.requestContext());

  const auto makeExecuteHandler = [&] {
    return [ifacePtr = iface_](auto&& cb, ArgsState args) mutable {
      (void)args;
      ifacePtr->async_tm_extension(std::move(cb));
    };
  };
#if FOLLY_HAS_COROUTINES
  if (apache::thrift::detail::shouldProcessServiceInterceptorsOnRequest(
          *callback)) {
    [](auto callback, auto executeHandler, ArgsState args)
        -> folly::coro::Task<void> {
      auto argRefs = args.asTupleOfRefs();
      co_await apache::thrift::detail::processServiceInterceptorsOnRequest(
          *callback,
          apache::thrift::detail::ServiceInterceptorOnRequestArguments(
              argRefs));
      executeHandler(std::move(callback), std::move(args));
    }(std::move(callback), makeExecuteHandler(), std::move(args))
               .scheduleOn(
                   apache::thrift::detail::ServerRequestHelper::executor(
                       serverRequest))
               .startInlineUnsafe();
  } else {
    makeExecuteHandler()(std::move(callback), std::move(args));
  }
#else
  makeExecuteHandler()(std::move(callback), std::move(args));
#endif // FOLLY_HAS_COROUTINES
}

template <class ProtocolIn_, class ProtocolOut_>
apache::thrift::SerializedResponse DecoratedService_ExtendsDecoratedServiceAsyncProcessor::return_extension(
    apache::thrift::ContextStack* ctx) {
  ProtocolOut_ prot;
  ::cpp2::DecoratedService_ExtendsDecoratedService_extension_presult result;
  return serializeResponse("extension", &prot, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void DecoratedService_ExtendsDecoratedServiceAsyncProcessor::throw_wrapped_extension(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    [[maybe_unused]] int32_t protoSeqId,
    apache::thrift::ContextStack* ctx,
    folly::exception_wrapper ew,
    apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  {
    apache::thrift::detail::ap::process_throw_wrapped_handler_error<
        ProtocolOut_>(ew, std::move(req), reqCtx, ctx, "extension");
    return;
  }
}
//
// End of Method 'extension'
//

//
// End of Service Methods
//

} // namespace cpp2

namespace cpp2 {
typedef apache::thrift::ThriftPresult<false> UndecoratedService_ExtendsDecoratedService_extension_pargs;
typedef apache::thrift::ThriftPresult<true> UndecoratedService_ExtendsDecoratedService_extension_presult;
//
// Service Methods
//

//
// Method 'extension'
//
template <typename ProtocolIn_, typename ProtocolOut_>
void UndecoratedService_ExtendsDecoratedServiceAsyncProcessor::setUpAndProcess_extension(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    apache::thrift::SerializedCompressedRequest&& serializedRequest,
    apache::thrift::Cpp2RequestContext* ctx,
    folly::EventBase* eb,
    [[maybe_unused]] apache::thrift::concurrency::ThreadManager* tm) {
  if (!setUpRequestProcessing(
          req, ctx, eb, tm, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, iface_)) {
    return;
  }
  auto scope = iface_->getRequestExecutionScope(
      ctx, apache::thrift::concurrency::NORMAL);
  ctx->setRequestExecutionScope(std::move(scope));
  processInThread(
      std::move(req),
      std::move(serializedRequest),
      ctx,
      eb,
      tm,
      apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE,
      &UndecoratedService_ExtendsDecoratedServiceAsyncProcessor::
          executeRequest_extension<ProtocolIn_, ProtocolOut_>,
      this);
}

template <typename ProtocolIn_, typename ProtocolOut_>
void UndecoratedService_ExtendsDecoratedServiceAsyncProcessor::executeRequest_extension(
    apache::thrift::ServerRequest&& serverRequest) {
  // make sure getRequestContext is null
  // so async calls don't accidentally use it
  iface_->setRequestContext(nullptr);
  struct ArgsState {
    UndecoratedService_ExtendsDecoratedService_extension_pargs pargs() {
      UndecoratedService_ExtendsDecoratedService_extension_pargs args;
      return args;
    }

    auto asTupleOfRefs() & {
      return std::tie(
      );
    }
  } args;

  auto ctxStack = apache::thrift::ContextStack::create(
      this->getEventHandlersSharedPtr(),
      this->getServiceName(),
      "UndecoratedService_ExtendsDecoratedService.extension",
      serverRequest.requestContext());
  try {
    auto pargs = args.pargs();
    deserializeRequest<ProtocolIn_>(
        pargs,
        "extension",
        apache::thrift::detail::ServerRequestHelper::compressedRequest(
            std::move(serverRequest))
            .uncompress(),
        ctxStack.get());
  } catch (...) {
    folly::exception_wrapper ew(std::current_exception());
    apache::thrift::detail::ap::process_handle_exn_deserialization<
        ProtocolOut_>(
        ew,
        apache::thrift::detail::ServerRequestHelper::request(std::move(serverRequest)),
            serverRequest.requestContext(),
        apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
        "extension");
    return;
  }
  auto requestPileNotification =
      apache::thrift::detail::ServerRequestHelper::moveRequestPileNotification(
          serverRequest);
  auto concurrencyControllerNotification =
      apache::thrift::detail::ServerRequestHelper::moveConcurrencyControllerNotification(
          serverRequest);
  apache::thrift::HandlerCallbackBase::MethodNameInfo methodNameInfo{
      /* .serviceName =*/ this->getServiceName(),
      /* .definingServiceName =*/ "UndecoratedService_ExtendsDecoratedService",
      /* .methodName =*/ "extension",
      /* .qualifiedMethodName =*/ "UndecoratedService_ExtendsDecoratedService.extension"};
  apache::thrift::HandlerCallback<void>::DecoratorAfterCallback decoratorCallback{
    static_cast<void*>(iface_),
    apache::thrift::ServiceHandler<::cpp2::UndecoratedService_ExtendsDecoratedService>::fbthrift_invoke_decorator_after_extension};
 auto callback =
      apache::thrift::HandlerCallbackPtr<void>::make(
          apache::thrift::detail::ServerRequestHelper::request(
              std::move(serverRequest)),
          std::move(ctxStack),
          std::move(methodNameInfo),
          return_extension<ProtocolIn_, ProtocolOut_>,
          throw_wrapped_extension<ProtocolIn_, ProtocolOut_>,
          serverRequest.requestContext()->getProtoSeqId(),
          apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
          apache::thrift::detail::ServerRequestHelper::executor(serverRequest),
          serverRequest.requestContext(),
          requestPileNotification,
          concurrencyControllerNotification,
          std::move(serverRequest.requestData()),
          apache::thrift::TilePtr(),
          std::move(decoratorCallback));
  // Execute method decorator before_extension.
  iface_->fbthrift_execute_decorators_before_extension(*serverRequest.requestContext());

  const auto makeExecuteHandler = [&] {
    return [ifacePtr = iface_](auto&& cb, ArgsState args) mutable {
      (void)args;
      ifacePtr->async_tm_extension(std::move(cb));
    };
  };
#if FOLLY_HAS_COROUTINES
  if (apache::thrift::detail::shouldProcessServiceInterceptorsOnRequest(
          *callback)) {
    [](auto callback, auto executeHandler, ArgsState args)
        -> folly::coro::Task<void> {
      auto argRefs = args.asTupleOfRefs();
      co_await apache::thrift::detail::processServiceInterceptorsOnRequest(
          *callback,
          apache::thrift::detail::ServiceInterceptorOnRequestArguments(
              argRefs));
      executeHandler(std::move(callback), std::move(args));
    }(std::move(callback), makeExecuteHandler(), std::move(args))
               .scheduleOn(
                   apache::thrift::detail::ServerRequestHelper::executor(
                       serverRequest))
               .startInlineUnsafe();
  } else {
    makeExecuteHandler()(std::move(callback), std::move(args));
  }
#else
  makeExecuteHandler()(std::move(callback), std::move(args));
#endif // FOLLY_HAS_COROUTINES
}

template <class ProtocolIn_, class ProtocolOut_>
apache::thrift::SerializedResponse UndecoratedService_ExtendsDecoratedServiceAsyncProcessor::return_extension(
    apache::thrift::ContextStack* ctx) {
  ProtocolOut_ prot;
  ::cpp2::UndecoratedService_ExtendsDecoratedService_extension_presult result;
  return serializeResponse("extension", &prot, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void UndecoratedService_ExtendsDecoratedServiceAsyncProcessor::throw_wrapped_extension(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    [[maybe_unused]] int32_t protoSeqId,
    apache::thrift::ContextStack* ctx,
    folly::exception_wrapper ew,
    apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  {
    apache::thrift::detail::ap::process_throw_wrapped_handler_error<
        ProtocolOut_>(ew, std::move(req), reqCtx, ctx, "extension");
    return;
  }
}
//
// End of Method 'extension'
//

//
// End of Service Methods
//

} // namespace cpp2

namespace cpp2 {
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, ::apache::thrift::type_class::string, ::std::string*>> DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService_secondExtension_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, ::apache::thrift::type_class::string, ::std::string*>> DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService_secondExtension_presult;
//
// Service Methods
//

//
// Method 'secondExtension'
//
template <typename ProtocolIn_, typename ProtocolOut_>
void DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedServiceAsyncProcessor::setUpAndProcess_secondExtension(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    apache::thrift::SerializedCompressedRequest&& serializedRequest,
    apache::thrift::Cpp2RequestContext* ctx,
    folly::EventBase* eb,
    [[maybe_unused]] apache::thrift::concurrency::ThreadManager* tm) {
  if (!setUpRequestProcessing(
          req, ctx, eb, tm, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, iface_)) {
    return;
  }
  auto scope = iface_->getRequestExecutionScope(
      ctx, apache::thrift::concurrency::NORMAL);
  ctx->setRequestExecutionScope(std::move(scope));
  processInThread(
      std::move(req),
      std::move(serializedRequest),
      ctx,
      eb,
      tm,
      apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE,
      &DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedServiceAsyncProcessor::
          executeRequest_secondExtension<ProtocolIn_, ProtocolOut_>,
      this);
}

template <typename ProtocolIn_, typename ProtocolOut_>
void DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedServiceAsyncProcessor::executeRequest_secondExtension(
    apache::thrift::ServerRequest&& serverRequest) {
  // make sure getRequestContext is null
  // so async calls don't accidentally use it
  iface_->setRequestContext(nullptr);
  struct ArgsState {
    std::unique_ptr<::std::string> uarg_input = std::make_unique<::std::string>();
    DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService_secondExtension_pargs pargs() {
      DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService_secondExtension_pargs args;
      args.get<0>().value = uarg_input.get();
      return args;
    }

    auto asTupleOfRefs() & {
      return std::tie(
        std::as_const(*uarg_input)
      );
    }
  } args;

  auto ctxStack = apache::thrift::ContextStack::create(
      this->getEventHandlersSharedPtr(),
      this->getServiceName(),
      "DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService.secondExtension",
      serverRequest.requestContext());
  try {
    auto pargs = args.pargs();
    deserializeRequest<ProtocolIn_>(
        pargs,
        "secondExtension",
        apache::thrift::detail::ServerRequestHelper::compressedRequest(
            std::move(serverRequest))
            .uncompress(),
        ctxStack.get());
  } catch (...) {
    folly::exception_wrapper ew(std::current_exception());
    apache::thrift::detail::ap::process_handle_exn_deserialization<
        ProtocolOut_>(
        ew,
        apache::thrift::detail::ServerRequestHelper::request(std::move(serverRequest)),
            serverRequest.requestContext(),
        apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
        "secondExtension");
    return;
  }
  auto requestPileNotification =
      apache::thrift::detail::ServerRequestHelper::moveRequestPileNotification(
          serverRequest);
  auto concurrencyControllerNotification =
      apache::thrift::detail::ServerRequestHelper::moveConcurrencyControllerNotification(
          serverRequest);
  apache::thrift::HandlerCallbackBase::MethodNameInfo methodNameInfo{
      /* .serviceName =*/ this->getServiceName(),
      /* .definingServiceName =*/ "DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService",
      /* .methodName =*/ "secondExtension",
      /* .qualifiedMethodName =*/ "DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService.secondExtension"};
  apache::thrift::HandlerCallback<std::unique_ptr<::std::string>>::DecoratorAfterCallback decoratorCallback{
    static_cast<void*>(iface_),
    apache::thrift::ServiceHandler<::cpp2::DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService>::fbthrift_invoke_decorator_after_secondExtension};
 auto callback =
      apache::thrift::HandlerCallbackPtr<std::unique_ptr<::std::string>>::make(
          apache::thrift::detail::ServerRequestHelper::request(
              std::move(serverRequest)),
          std::move(ctxStack),
          std::move(methodNameInfo),
          return_secondExtension<ProtocolIn_, ProtocolOut_>,
          throw_wrapped_secondExtension<ProtocolIn_, ProtocolOut_>,
          serverRequest.requestContext()->getProtoSeqId(),
          apache::thrift::detail::ServerRequestHelper::eventBase(serverRequest),
          apache::thrift::detail::ServerRequestHelper::executor(serverRequest),
          serverRequest.requestContext(),
          requestPileNotification,
          concurrencyControllerNotification,
          std::move(serverRequest.requestData()),
          apache::thrift::TilePtr(),
          std::move(decoratorCallback));
  // Execute method decorator before_secondExtension.
  iface_->fbthrift_execute_decorators_before_secondExtension(*serverRequest.requestContext(), *args.uarg_input);

  const auto makeExecuteHandler = [&] {
    return [ifacePtr = iface_](auto&& cb, ArgsState args) mutable {
      (void)args;
      ifacePtr->async_tm_secondExtension(std::move(cb), std::move(args.uarg_input));
    };
  };
#if FOLLY_HAS_COROUTINES
  if (apache::thrift::detail::shouldProcessServiceInterceptorsOnRequest(
          *callback)) {
    [](auto callback, auto executeHandler, ArgsState args)
        -> folly::coro::Task<void> {
      auto argRefs = args.asTupleOfRefs();
      co_await apache::thrift::detail::processServiceInterceptorsOnRequest(
          *callback,
          apache::thrift::detail::ServiceInterceptorOnRequestArguments(
              argRefs));
      executeHandler(std::move(callback), std::move(args));
    }(std::move(callback), makeExecuteHandler(), std::move(args))
               .scheduleOn(
                   apache::thrift::detail::ServerRequestHelper::executor(
                       serverRequest))
               .startInlineUnsafe();
  } else {
    makeExecuteHandler()(std::move(callback), std::move(args));
  }
#else
  makeExecuteHandler()(std::move(callback), std::move(args));
#endif // FOLLY_HAS_COROUTINES
}

template <class ProtocolIn_, class ProtocolOut_>
apache::thrift::SerializedResponse DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedServiceAsyncProcessor::return_secondExtension(
    apache::thrift::ContextStack* ctx,
    ::std::string const& _return) {
  ProtocolOut_ prot;
  ::cpp2::DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService_secondExtension_presult result;
  result.get<0>().value = const_cast<::std::string*>(&_return);
  result.setIsSet(0, true);
  return serializeResponse("secondExtension", &prot, ctx, result);
}

template <class ProtocolIn_, class ProtocolOut_>
void DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedServiceAsyncProcessor::throw_wrapped_secondExtension(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    [[maybe_unused]] int32_t protoSeqId,
    apache::thrift::ContextStack* ctx,
    folly::exception_wrapper ew,
    apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  {
    apache::thrift::detail::ap::process_throw_wrapped_handler_error<
        ProtocolOut_>(ew, std::move(req), reqCtx, ctx, "secondExtension");
    return;
  }
}
//
// End of Method 'secondExtension'
//

//
// End of Service Methods
//

} // namespace cpp2

