Errors:
  [36:15-17] Invalid argument
  [36:15-17] An array cannot be unpacked into the required arguments of a function
  [4:10-18] Definition is here
[(Fun
    { fd_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
        ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
        ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
      fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([3:10-18], "\\unpack_a");
      fd_fun =
      { f_span = [3:1-47]; f_readonly_this = None; f_annotation = (); 
        f_readonly_ret = None; f_tparams = []; f_ret = ((void), (Some ([3:40-44], (Hprim Tvoid))));
        f_params =
        [{ param_annotation = (int); param_type_hint = ((int), (Some ([3:19-22], (Hprim Tint)))); 
           param_pos = [3:23-25]; param_name = "$x"; param_info = Param_required; 
           param_readonly = None; param_splat = None; param_callconv = Pnormal; 
           param_named = None; param_user_attributes = []; param_visibility = None };
          { param_annotation = (vec<int>); param_type_hint = ((vec<int>), (Some ([3:27-30], (Hprim Tint)))); 
            param_pos = [3:34-37]; param_name = "$xs"; param_info = Param_variadic; 
            param_readonly = None; param_splat = None; param_callconv = Pnormal; 
            param_named = None; param_user_attributes = []; param_visibility = None }
          ];
        f_ctxs = None; f_unsafe_ctxs = None; f_body = { fb_ast = [([Pos.none], Noop)] }; 
        f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([3:10-18], "__SupportDynamicType"); ua_params = [] }]; 
        f_external = false; f_doc_comment = None };
      fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
      fd_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([4:10-18], "\\unpack_b");
       fd_fun =
       { f_span = [4:1-65]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((void), (Some ([4:58-62], (Hprim Tvoid))));
         f_params =
         [{ param_annotation = (float); param_type_hint = ((float), (Some ([4:19-24], (Hprim Tfloat)))); 
            param_pos = [4:25-27]; param_name = "$x"; param_info = Param_required; 
            param_readonly = None; param_splat = None; param_callconv = Pnormal; 
            param_named = None; param_user_attributes = []; param_visibility = None };
           { param_annotation = (vec<int>); param_type_hint = ((vec<int>), (Some ([4:29-40], (Happly (([4:29-35], "\\HH\\vec"), [([4:36-39], (Hprim Tint))]))))); 
             param_pos = [4:41-43]; param_name = "$y"; param_info = Param_required; 
             param_readonly = None; param_splat = None; param_callconv = Pnormal; 
             param_named = None; param_user_attributes = []; param_visibility = None };
           { param_annotation = (vec<int>); param_type_hint = ((vec<int>), (Some ([4:45-48], (Hprim Tint)))); 
             param_pos = [4:52-55]; param_name = "$ys"; param_info = Param_variadic; 
             param_readonly = None; param_splat = None; param_callconv = Pnormal; 
             param_named = None; param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None; f_body = { fb_ast = [([Pos.none], Noop)] }; 
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([4:10-18], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
       fd_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([5:10-18], "\\unpack_c");
       fd_fun =
       { f_span = [5:1-66]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((void), (Some ([5:59-63], (Hprim Tvoid))));
         f_params =
         [{ param_annotation = (float); param_type_hint = ((float), (Some ([5:19-24], (Hprim Tfloat)))); 
            param_pos = [5:25-27]; param_name = "$x"; param_info = Param_required; 
            param_readonly = None; param_splat = None; param_callconv = Pnormal; 
            param_named = None; param_user_attributes = []; param_visibility = None };
           { param_annotation = ((float, int));
             param_type_hint =
             (((float, int)), (Some ([5:29-41], (Htuple { tup_required = [([5:30-35], (Hprim Tfloat)); ([5:37-40], (Hprim Tint))]; tup_extra = (Hextra { tup_optional = []; tup_variadic = None }) }))));
             param_pos = [5:42-44]; param_name = "$y"; param_info = Param_required; 
             param_readonly = None; param_splat = None; param_callconv = Pnormal; 
             param_named = None; param_user_attributes = []; param_visibility = None };
           { param_annotation = (vec<int>); param_type_hint = ((vec<int>), (Some ([5:46-49], (Hprim Tint)))); 
             param_pos = [5:53-56]; param_name = "$ys"; param_info = Param_variadic; 
             param_readonly = None; param_splat = None; param_callconv = Pnormal; 
             param_named = None; param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None; f_body = { fb_ast = [([Pos.none], Noop)] }; 
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([5:10-18], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
       fd_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([6:10-18], "\\unpack_d");
       fd_fun =
       { f_span = [6:1-71]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((void), (Some ([6:64-68], (Hprim Tvoid))));
         f_params =
         [{ param_annotation = (int); param_type_hint = ((int), (Some ([6:19-22], (Hprim Tint)))); 
            param_pos = [6:23-25]; param_name = "$x"; param_info = Param_required; 
            param_readonly = None; param_splat = None; param_callconv = Pnormal; 
            param_named = None; param_user_attributes = []; param_visibility = None };
           { param_annotation = (shape('u' => bool, 'v' => bool));
             param_type_hint =
             ((shape('u' => bool, 'v' => bool)),
              (Some ([6:27-58],
                     (Hshape
                        { nsi_allows_unknown_fields = false;
                          nsi_field_map =
                          [{ sfi_optional = false; sfi_hint = ([6:40-44], (Hprim Tbool)); sfi_name = (SFlit_str ([6:33-36], "u")) };
                            { sfi_optional = false; sfi_hint = ([6:53-57], (Hprim Tbool)); sfi_name = (SFlit_str ([6:46-49], "v")) }]
                          }))));
             param_pos = [6:59-61]; param_name = "$y"; param_info = Param_required; 
             param_readonly = None; param_splat = None; param_callconv = Pnormal; 
             param_named = None; param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None; f_body = { fb_ast = [([Pos.none], Noop)] }; 
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([6:10-18], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
       fd_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([7:10-18], "\\unpack_e");
       fd_fun =
       { f_span = [7:1-11:11]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((void), (Some ([11:4-8], (Hprim Tvoid))));
         f_params =
         [{ param_annotation = (float); param_type_hint = ((float), (Some ([8:1-6], (Hprim Tfloat)))); 
            param_pos = [8:7-9]; param_name = "$x"; param_info = Param_required; 
            param_readonly = None; param_splat = None; param_callconv = Pnormal; 
            param_named = None; param_user_attributes = []; param_visibility = None };
           { param_annotation = ((function(int, float): ~bool));
             param_type_hint =
             (((function(int, float): ~bool)),
              (Some ([9:1-29],
                     (Happly (([9:1-29], "\\HH\\supportdyn"),
                        [([9:1-29],
                          (Hfun
                             { hf_is_readonly = None; hf_tparams = []; 
                               hf_param_tys = [([9:11-14], (Hprim Tint)); ([9:16-21], (Hprim Tfloat))];
                               hf_param_info =
                               [(Some { hfparam_kind = Pnormal; hfparam_readonlyness = None; hfparam_optional = None; hfparam_splat = None; hfparam_named = None });
                                 (Some { hfparam_kind = Pnormal; hfparam_readonlyness = None; hfparam_optional = None; hfparam_splat = None; hfparam_named = None })];
                               hf_variadic_ty = None; hf_ctxs = None; 
                               hf_return_ty = ([9:24-28], (Hlike ([9:24-28], (Hprim Tbool)))); 
                               hf_is_readonly_return = None }))
                          ]
                        )))));
             param_pos = [9:30-32]; param_name = "$f"; param_info = Param_required; 
             param_readonly = None; param_splat = None; param_callconv = Pnormal; 
             param_named = None; param_user_attributes = []; param_visibility = None };
           { param_annotation = (int); param_type_hint = ((int), (Some ([10:1-4], (Hprim Tint)))); 
             param_pos = [10:5-7]; param_name = "$y"; param_info = Param_required; 
             param_readonly = None; param_splat = None; param_callconv = Pnormal; 
             param_named = None; param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None; f_body = { fb_ast = [([Pos.none], Noop)] }; 
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([7:10-18], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
       fd_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([13:10-21], "\\call_unpack");
       fd_fun =
       { f_span = [13:1-43:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((void), (Some ([24:4-8], (Hprim Tvoid))));
         f_params =
         [{ param_annotation = (Pair<int, float>);
            param_type_hint = ((Pair<int, float>), (Some ([14:1-17], (Happly (([14:1-5], "\\HH\\Pair"), [([14:6-9], (Hprim Tint)); ([14:11-16], (Hprim Tfloat))]))))); 
            param_pos = [14:18-20]; param_name = "$a"; param_info = Param_required; 
            param_readonly = None; param_splat = None; param_callconv = Pnormal; 
            param_named = None; param_user_attributes = []; param_visibility = None };
           { param_annotation = ((int, float, int, float, int, float));
             param_type_hint =
             (((int, float, int, float, int, float)),
              (Some ([15:1-37],
                     (Htuple
                        { tup_required =
                          [([15:2-5], (Hprim Tint)); ([15:7-12], (Hprim Tfloat)); ([15:14-17], (Hprim Tint)); ([15:19-24], (Hprim Tfloat)); ([15:26-29], (Hprim Tint)); ([15:31-36], (Hprim Tfloat))];
                          tup_extra = (Hextra { tup_optional = []; tup_variadic = None }) }))));
             param_pos = [15:38-40]; param_name = "$b"; param_info = Param_required; 
             param_readonly = None; param_splat = None; param_callconv = Pnormal; 
             param_named = None; param_user_attributes = []; param_visibility = None };
           { param_annotation = ((float, vec<float>, float));
             param_type_hint =
             (((float, vec<float>, float)),
              (Some ([16:1-30],
                     (Htuple
                        { tup_required = [([16:2-7], (Hprim Tfloat)); ([16:9-22], (Happly (([16:9-15], "\\HH\\vec"), [([16:16-21], (Hprim Tfloat))]))); ([16:24-29], (Hprim Tfloat))];
                          tup_extra = (Hextra { tup_optional = []; tup_variadic = None }) }))));
             param_pos = [16:31-33]; param_name = "$c"; param_info = Param_required; 
             param_readonly = None; param_splat = None; param_callconv = Pnormal; 
             param_named = None; param_user_attributes = []; param_visibility = None };
           { param_annotation = ((float, vec<int>, float, int));
             param_type_hint =
             (((float, vec<int>, float, int)),
              (Some ([17:1-33],
                     (Htuple
                        { tup_required =
                          [([17:2-7], (Hprim Tfloat)); ([17:9-20], (Happly (([17:9-15], "\\HH\\vec"), [([17:16-19], (Hprim Tint))]))); ([17:22-27], (Hprim Tfloat)); ([17:29-32], (Hprim Tint))];
                          tup_extra = (Hextra { tup_optional = []; tup_variadic = None }) }))));
             param_pos = [17:34-36]; param_name = "$d"; param_info = Param_required; 
             param_readonly = None; param_splat = None; param_callconv = Pnormal; 
             param_named = None; param_user_attributes = []; param_visibility = None };
           { param_annotation = ((float, int, float, float));
             param_type_hint =
             (((float, int, float, float)),
              (Some ([18:1-27],
                     (Htuple
                        { tup_required = [([18:2-7], (Hprim Tfloat)); ([18:9-12], (Hprim Tint)); ([18:14-19], (Hprim Tfloat)); ([18:21-26], (Hprim Tfloat))];
                          tup_extra = (Hextra { tup_optional = []; tup_variadic = None }) }))));
             param_pos = [18:28-30]; param_name = "$e"; param_info = Param_required; 
             param_readonly = None; param_splat = None; param_callconv = Pnormal; 
             param_named = None; param_user_attributes = []; param_visibility = None };
           { param_annotation = (shape('a' => float, 'b' => int, 'c' => int));
             param_type_hint =
             ((shape('a' => float, 'b' => int, 'c' => int)),
              (Some ([19:1-44],
                     (Hshape
                        { nsi_allows_unknown_fields = false;
                          nsi_field_map =
                          [{ sfi_optional = false; sfi_hint = ([19:14-19], (Hprim Tfloat)); sfi_name = (SFlit_str ([19:7-10], "a")) };
                            { sfi_optional = false; sfi_hint = ([19:28-31], (Hprim Tint)); sfi_name = (SFlit_str ([19:21-24], "b")) };
                            { sfi_optional = false; sfi_hint = ([19:40-43], (Hprim Tint)); sfi_name = (SFlit_str ([19:33-36], "c")) }]
                          }))));
             param_pos = [19:45-47]; param_name = "$f"; param_info = Param_required; 
             param_readonly = None; param_splat = None; param_callconv = Pnormal; 
             param_named = None; param_user_attributes = []; param_visibility = None };
           { param_annotation = ((float, (float, float), int));
             param_type_hint =
             (((float, (float, float), int)),
              (Some ([20:1-29],
                     (Htuple
                        { tup_required =
                          [([20:2-7], (Hprim Tfloat));
                            ([20:9-23], (Htuple { tup_required = [([20:10-15], (Hprim Tfloat)); ([20:17-22], (Hprim Tfloat))]; tup_extra = (Hextra { tup_optional = []; tup_variadic = None }) }));
                            ([20:25-28], (Hprim Tint))];
                          tup_extra = (Hextra { tup_optional = []; tup_variadic = None }) }))));
             param_pos = [20:30-32]; param_name = "$g"; param_info = Param_required; 
             param_readonly = None; param_splat = None; param_callconv = Pnormal; 
             param_named = None; param_user_attributes = []; param_visibility = None };
           { param_annotation = ((int, shape('u' => float, 'v' => int)));
             param_type_hint =
             (((int, shape('u' => float, 'v' => int))),
              (Some ([21:1-39],
                     (Htuple
                        { tup_required =
                          [([21:2-5], (Hprim Tint));
                            ([21:7-38],
                             (Hshape
                                { nsi_allows_unknown_fields = false;
                                  nsi_field_map =
                                  [{ sfi_optional = false; sfi_hint = ([21:20-25], (Hprim Tfloat)); sfi_name = (SFlit_str ([21:13-16], "u")) };
                                    { sfi_optional = false; sfi_hint = ([21:34-37], (Hprim Tint)); sfi_name = (SFlit_str ([21:27-30], "v")) }]
                                  }))
                            ];
                          tup_extra = (Hextra { tup_optional = []; tup_variadic = None }) }))));
             param_pos = [21:40-42]; param_name = "$h"; param_info = Param_required; 
             param_readonly = None; param_splat = None; param_callconv = Pnormal; 
             param_named = None; param_user_attributes = []; param_visibility = None };
           { param_annotation = ((float, (function(float, int): ~int), int));
             param_type_hint =
             (((float, (function(float, int): ~int), int)),
              (Some ([22:1-42],
                     (Htuple
                        { tup_required =
                          [([22:2-7], (Hprim Tfloat));
                            ([22:9-36],
                             (Happly (([22:9-36], "\\HH\\supportdyn"),
                                [([22:9-36],
                                  (Hfun
                                     { hf_is_readonly = None; hf_tparams = []; 
                                       hf_param_tys = [([22:19-24], (Hprim Tfloat)); ([22:26-29], (Hprim Tint))];
                                       hf_param_info =
                                       [(Some { hfparam_kind = Pnormal; hfparam_readonlyness = None; hfparam_optional = None; hfparam_splat = None; hfparam_named = None });
                                         (Some { hfparam_kind = Pnormal; hfparam_readonlyness = None; hfparam_optional = None; hfparam_splat = None; hfparam_named = None })];
                                       hf_variadic_ty = None; hf_ctxs = None; 
                                       hf_return_ty = ([22:32-35], (Hlike ([22:32-35], (Hprim Tint)))); 
                                       hf_is_readonly_return = None }))
                                  ]
                                )));
                            ([22:38-41], (Hprim Tint))];
                          tup_extra = (Hextra { tup_optional = []; tup_variadic = None }) }))));
             param_pos = [22:43-45]; param_name = "$i"; param_info = Param_required; 
             param_readonly = None; param_splat = None; param_callconv = Pnormal; 
             param_named = None; param_user_attributes = []; param_visibility = None };
           { param_annotation = ((float, (function(int, float): ~bool), int));
             param_type_hint =
             (((float, (function(int, float): ~bool), int)),
              (Some ([23:1-43],
                     (Htuple
                        { tup_required =
                          [([23:2-7], (Hprim Tfloat));
                            ([23:9-37],
                             (Happly (([23:9-37], "\\HH\\supportdyn"),
                                [([23:9-37],
                                  (Hfun
                                     { hf_is_readonly = None; hf_tparams = []; 
                                       hf_param_tys = [([23:19-22], (Hprim Tint)); ([23:24-29], (Hprim Tfloat))];
                                       hf_param_info =
                                       [(Some { hfparam_kind = Pnormal; hfparam_readonlyness = None; hfparam_optional = None; hfparam_splat = None; hfparam_named = None });
                                         (Some { hfparam_kind = Pnormal; hfparam_readonlyness = None; hfparam_optional = None; hfparam_splat = None; hfparam_named = None })];
                                       hf_variadic_ty = None; hf_ctxs = None; 
                                       hf_return_ty = ([23:32-36], (Hlike ([23:32-36], (Hprim Tbool)))); 
                                       hf_is_readonly_return = None }))
                                  ]
                                )));
                            ([23:39-42], (Hprim Tint))];
                          tup_extra = (Hextra { tup_optional = []; tup_variadic = None }) }))));
             param_pos = [23:44-46]; param_name = "$j"; param_info = Param_required; 
             param_readonly = None; param_splat = None; param_callconv = Pnormal; 
             param_named = None; param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([26:3-19],
             (Expr
                ((void), [26:3-18],
                 (Call
                    { func = (((function(int $x, int $xs...): void)), [26:3-11], (Id ([26:3-11], "\\unpack_a"))); 
                      targs = []; args = [];
                      unpacked_arg = (Some ((Pair<int, float>), [26:15-17], (Hole (((Pair<int, float>), [26:15-17], (Lvar ([26:15-17], $a))), (Pair<int, float>), (Pair<int, int>), Typing)))) }))));
             ([28:3-19],
              (Expr
                 ((void), [28:3-18],
                  (Call
                     { func = (((function(int $x, int $xs...): void)), [28:3-11], (Id ([28:3-11], "\\unpack_a"))); 
                       targs = []; args = [];
                       unpacked_arg =
                       (Some (((int, float, int, float, int, float)), [28:15-17],
                              (Hole ((((int, float, int, float, int, float)), [28:15-17], (Lvar ([28:15-17], $b))), ((int, float, int, float, int, float)), ((int, int, int, int, int, int)), Typing))))
                       }))));
             ([30:3-19],
              (Expr
                 ((void), [30:3-18],
                  (Call
                     { func = (((function(float $x, vec<int> $y, int $ys...): void)), [30:3-11], (Id ([30:3-11], "\\unpack_b"))); 
                       targs = []; args = [];
                       unpacked_arg =
                       (Some (((float, vec<float>, float)), [30:15-17],
                              (Hole ((((float, vec<float>, float)), [30:15-17], (Lvar ([30:15-17], $c))), ((float, vec<float>, float)), ((float, vec<int>, int)), Typing))))
                       }))));
             ([32:3-19],
              (Expr
                 ((void), [32:3-18],
                  (Call
                     { func = (((function(float $x, vec<int> $y, int $ys...): void)), [32:3-11], (Id ([32:3-11], "\\unpack_b"))); 
                       targs = []; args = [];
                       unpacked_arg =
                       (Some (((float, vec<int>, float, int)), [32:15-17],
                              (Hole ((((float, vec<int>, float, int)), [32:15-17], (Lvar ([32:15-17], $d))), ((float, vec<int>, float, int)), ((float, vec<int>, int, int)), Typing))))
                       }))));
             ([34:3-19],
              (Expr
                 ((void), [34:3-18],
                  (Call
                     { func = (((function(float $x, vec<int> $y, int $ys...): void)), [34:3-11], (Id ([34:3-11], "\\unpack_b"))); 
                       targs = []; args = [];
                       unpacked_arg =
                       (Some (((float, int, float, float)), [34:15-17],
                              (Hole ((((float, int, float, float)), [34:15-17], (Lvar ([34:15-17], $e))), ((float, int, float, float)), ((float, vec<int>, int, int)), Typing))))
                       }))));
             ([36:3-19],
              (Expr
                 ((void), [36:3-18],
                  (Call
                     { func = (((function(float $x, vec<int> $y, int $ys...): void)), [36:3-11], (Id ([36:3-11], "\\unpack_b"))); 
                       targs = []; args = [];
                       unpacked_arg =
                       (Some ((shape('a' => float, 'b' => int, 'c' => int)), [36:15-17],
                              (Hole (((shape('a' => float, 'b' => int, 'c' => int)), [36:15-17], (Lvar ([36:15-17], $f))), (shape('a' => float, 'b' => int, 'c' => int)), (nothing), Typing))))
                       }))));
             ([38:3-19],
              (Expr
                 ((void), [38:3-18],
                  (Call
                     { func = (((function(float $x, (float, int) $y, int $ys...): void)), [38:3-11], (Id ([38:3-11], "\\unpack_c"))); 
                       targs = []; args = [];
                       unpacked_arg =
                       (Some (((float, (float, float), int)), [38:15-17],
                              (Hole ((((float, (float, float), int)), [38:15-17], (Lvar ([38:15-17], $g))), ((float, (float, float), int)), ((float, (float, int), int)), Typing))))
                       }))));
             ([40:3-19],
              (Expr
                 ((void), [40:3-18],
                  (Call
                     { func = (((function(int $x, shape('u' => bool, 'v' => bool) $y): void)), [40:3-11], (Id ([40:3-11], "\\unpack_d"))); 
                       targs = []; args = [];
                       unpacked_arg =
                       (Some (((int, shape('u' => float, 'v' => int))), [40:15-17],
                              (Hole ((((int, shape('u' => float, 'v' => int))), [40:15-17], (Lvar ([40:15-17], $h))), ((int, shape('u' => float, 'v' => int))),
                                 ((int, shape('u' => bool, 'v' => bool))), Typing))))
                       }))));
             ([42:3-19],
              (Expr
                 ((void), [42:3-18],
                  (Call
                     { func = (((function(float $x, (function(int, float): ~bool) $f, int $y): void)), [42:3-11], (Id ([42:3-11], "\\unpack_e"))); 
                       targs = []; args = [];
                       unpacked_arg =
                       (Some (((float, (function(float, int): ~int), int)), [42:15-17],
                              (Hole ((((float, (function(float, int): ~int), int)), [42:15-17], (Lvar ([42:15-17], $i))), ((float, (function(float, int): ~int), int)),
                                 ((float, (function(int, float): ~bool), int)), Typing))))
                       }))))
             ]
           };
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([13:10-21], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
       fd_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([4:10-18], "\\unpack_b");
       fd_fun =
       { f_span = [4:1-65]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((dynamic), (Some ([4:58-62], (Hprim Tvoid))));
         f_params =
         [{ param_annotation = (float); param_type_hint = ((float), (Some ([4:19-24], (Hprim Tfloat)))); 
            param_pos = [4:25-27]; param_name = "$x"; param_info = Param_required; 
            param_readonly = None; param_splat = None; param_callconv = Pnormal; 
            param_named = None; param_user_attributes = []; param_visibility = None };
           { param_annotation = (dynamic); param_type_hint = ((dynamic), (Some ([4:29-40], (Happly (([4:29-35], "\\HH\\vec"), [([4:36-39], (Hprim Tint))]))))); 
             param_pos = [4:41-43]; param_name = "$y"; param_info = Param_required; 
             param_readonly = None; param_splat = None; param_callconv = Pnormal; 
             param_named = None; param_user_attributes = []; param_visibility = None };
           { param_annotation = (vec<int>); param_type_hint = ((vec<int>), (Some ([4:45-48], (Hprim Tint)))); 
             param_pos = [4:52-55]; param_name = "$ys"; param_info = Param_variadic; 
             param_readonly = None; param_splat = None; param_callconv = Pnormal; 
             param_named = None; param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None; f_body = { fb_ast = [([Pos.none], Noop)] }; 
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([4:10-18], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
       fd_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([5:10-18], "\\unpack_c");
       fd_fun =
       { f_span = [5:1-66]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((dynamic), (Some ([5:59-63], (Hprim Tvoid))));
         f_params =
         [{ param_annotation = (float); param_type_hint = ((float), (Some ([5:19-24], (Hprim Tfloat)))); 
            param_pos = [5:25-27]; param_name = "$x"; param_info = Param_required; 
            param_readonly = None; param_splat = None; param_callconv = Pnormal; 
            param_named = None; param_user_attributes = []; param_visibility = None };
           { param_annotation = (dynamic);
             param_type_hint =
             ((dynamic), (Some ([5:29-41], (Htuple { tup_required = [([5:30-35], (Hprim Tfloat)); ([5:37-40], (Hprim Tint))]; tup_extra = (Hextra { tup_optional = []; tup_variadic = None }) }))));
             param_pos = [5:42-44]; param_name = "$y"; param_info = Param_required; 
             param_readonly = None; param_splat = None; param_callconv = Pnormal; 
             param_named = None; param_user_attributes = []; param_visibility = None };
           { param_annotation = (vec<int>); param_type_hint = ((vec<int>), (Some ([5:46-49], (Hprim Tint)))); 
             param_pos = [5:53-56]; param_name = "$ys"; param_info = Param_variadic; 
             param_readonly = None; param_splat = None; param_callconv = Pnormal; 
             param_named = None; param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None; f_body = { fb_ast = [([Pos.none], Noop)] }; 
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([5:10-18], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
       fd_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([6:10-18], "\\unpack_d");
       fd_fun =
       { f_span = [6:1-71]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((dynamic), (Some ([6:64-68], (Hprim Tvoid))));
         f_params =
         [{ param_annotation = (int); param_type_hint = ((int), (Some ([6:19-22], (Hprim Tint)))); 
            param_pos = [6:23-25]; param_name = "$x"; param_info = Param_required; 
            param_readonly = None; param_splat = None; param_callconv = Pnormal; 
            param_named = None; param_user_attributes = []; param_visibility = None };
           { param_annotation = (dynamic);
             param_type_hint =
             ((dynamic),
              (Some ([6:27-58],
                     (Hshape
                        { nsi_allows_unknown_fields = false;
                          nsi_field_map =
                          [{ sfi_optional = false; sfi_hint = ([6:40-44], (Hprim Tbool)); sfi_name = (SFlit_str ([6:33-36], "u")) };
                            { sfi_optional = false; sfi_hint = ([6:53-57], (Hprim Tbool)); sfi_name = (SFlit_str ([6:46-49], "v")) }]
                          }))));
             param_pos = [6:59-61]; param_name = "$y"; param_info = Param_required; 
             param_readonly = None; param_splat = None; param_callconv = Pnormal; 
             param_named = None; param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None; f_body = { fb_ast = [([Pos.none], Noop)] }; 
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([6:10-18], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
       fd_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([7:10-18], "\\unpack_e");
       fd_fun =
       { f_span = [7:1-11:11]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((dynamic), (Some ([11:4-8], (Hprim Tvoid))));
         f_params =
         [{ param_annotation = (float); param_type_hint = ((float), (Some ([8:1-6], (Hprim Tfloat)))); 
            param_pos = [8:7-9]; param_name = "$x"; param_info = Param_required; 
            param_readonly = None; param_splat = None; param_callconv = Pnormal; 
            param_named = None; param_user_attributes = []; param_visibility = None };
           { param_annotation = (dynamic);
             param_type_hint =
             ((dynamic),
              (Some ([9:1-29],
                     (Happly (([9:1-29], "\\HH\\supportdyn"),
                        [([9:1-29],
                          (Hfun
                             { hf_is_readonly = None; hf_tparams = []; 
                               hf_param_tys = [([9:11-14], (Hprim Tint)); ([9:16-21], (Hprim Tfloat))];
                               hf_param_info =
                               [(Some { hfparam_kind = Pnormal; hfparam_readonlyness = None; hfparam_optional = None; hfparam_splat = None; hfparam_named = None });
                                 (Some { hfparam_kind = Pnormal; hfparam_readonlyness = None; hfparam_optional = None; hfparam_splat = None; hfparam_named = None })];
                               hf_variadic_ty = None; hf_ctxs = None; 
                               hf_return_ty = ([9:24-28], (Hlike ([9:24-28], (Hprim Tbool)))); 
                               hf_is_readonly_return = None }))
                          ]
                        )))));
             param_pos = [9:30-32]; param_name = "$f"; param_info = Param_required; 
             param_readonly = None; param_splat = None; param_callconv = Pnormal; 
             param_named = None; param_user_attributes = []; param_visibility = None };
           { param_annotation = (int); param_type_hint = ((int), (Some ([10:1-4], (Hprim Tint)))); 
             param_pos = [10:5-7]; param_name = "$y"; param_info = Param_required; 
             param_readonly = None; param_splat = None; param_callconv = Pnormal; 
             param_named = None; param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None; f_body = { fb_ast = [([Pos.none], Noop)] }; 
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([7:10-18], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
       fd_package = None })