[(Fun
    { f_span = [4:1-7:2]; f_annotation = (); f_mode = Mpartial;
      f_ret = ((?int), None); f_name = ([4:10-13], "\\foo"); f_tparams = [];
      f_where_constraints = []; f_variadic = FVnonVariadic;
      f_params =
      [{ param_annotation = ([4:20-22], MyMap<string, int>);
         param_type_hint =
         ((MyMap<string, int>),
          (Some ([4:14-19], (Happly (([4:14-19], "\\MyMap"), [])))));
         param_is_variadic = false; param_pos = [4:20-22]; param_name = "$m";
         param_expr = None; param_callconv = None;
         param_user_attributes = []; param_visibility = None }
        ];
      f_cap = ((nothing), None); f_unsafe_cap = ((mixed), None);
      f_body =
      { fb_ast =
        [([5:3-22],
          (Expr
             (([5:3-21], void),
              (Call (
                 (([5:3-10], (function(string $x, int $y): void)),
                  (Obj_get (
                     (([5:3-5], MyMap<string, int>), (Lvar ([5:3-5], $m))),
                     (([5:7-10], (function(string $x, int $y): void)),
                      (Id ([5:7-10], "add"))),
                     OG_nullthrows))),
                 [],
                 [(([5:11-16], string), (String "hey"));
                   (([5:18-20], int), (Int "40"))],
                 None)))));
          ([6:3-24],
           (Return
              (Some (([6:10-23], ?int),
                     (Call (
                        (([6:10-17], (function(string $x): ?int)),
                         (Obj_get (
                            (([6:10-12], MyMap<string, int>),
                             (Lvar ([6:10-12], $m))),
                            (([6:14-17], (function(string $x): ?int)),
                             (Id ([6:14-17], "get"))),
                            OG_nullthrows))),
                        [], [(([6:18-22], string), (String "ho"))], None))))))
          ];
        fb_annotation = () };
      f_fun_kind = FSync; f_user_attributes = []; f_file_attributes = [];
      f_external = false;
      f_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>;
        ns_record_def_uses = <opaque>; ns_fun_uses = <opaque>;
        ns_const_uses = <opaque>; ns_name = None; ns_auto_ns_map = [];
        ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
      f_doc_comment = None; f_static = false })
  ]
[(Class
    { c_span = [3:1-8:2]; c_annotation = (); c_mode = Mstrict;
      c_final = false; c_is_xhp = false; c_has_xhp_keyword = false;
      c_kind = Cnormal; c_name = ([3:7-12], "\\MyMap");
      c_tparams =
      [{ tp_variance = Invariant; tp_name = ([3:13-15], "Tk");
         tp_parameters = []; tp_constraints = []; tp_reified = Erased;
         tp_user_attributes = [] };
        { tp_variance = Invariant; tp_name = ([3:17-19], "Tv");
          tp_parameters = []; tp_constraints = []; tp_reified = Erased;
          tp_user_attributes = [] }
        ];
      c_extends = []; c_uses = []; c_use_as_alias = [];
      c_insteadof_alias = []; c_xhp_attr_uses = []; c_xhp_category = None;
      c_reqs = []; c_implements = []; c_where_constraints = [];
      c_consts = []; c_typeconsts = []; c_vars = [];
      c_methods =
      [{ m_span = [4:3-45]; m_annotation = (); m_final = false;
         m_abstract = false; m_static = false; m_visibility = Public;
         m_name = ([4:19-22], "add"); m_tparams = [];
         m_where_constraints = []; m_variadic = FVnonVariadic;
         m_params =
         [{ param_annotation = ([4:26-28], Tk);
            param_type_hint = ((Tk), (Some ([4:23-25], (Habstr ("Tk", [])))));
            param_is_variadic = false; param_pos = [4:26-28];
            param_name = "$x"; param_expr = None; param_callconv = None;
            param_user_attributes = []; param_visibility = None };
           { param_annotation = ([4:33-35], Tv);
             param_type_hint =
             ((Tv), (Some ([4:30-32], (Habstr ("Tv", [])))));
             param_is_variadic = false; param_pos = [4:33-35];
             param_name = "$y"; param_expr = None; param_callconv = None;
             param_user_attributes = []; param_visibility = None }
           ];
         m_cap = ((mixed), None); m_unsafe_cap = ((mixed), None);
         m_body = { fb_ast = [([Pos.none], Noop)]; fb_annotation = () };
         m_fun_kind = FSync; m_user_attributes = [];
         m_ret = ((void), (Some ([4:38-42], (Hprim Tvoid))));
         m_external = false; m_doc_comment = None };
        { m_span = [5:3-7:4]; m_annotation = (); m_final = false;
          m_abstract = false; m_static = false; m_visibility = Public;
          m_name = ([5:19-22], "get"); m_tparams = [];
          m_where_constraints = []; m_variadic = FVnonVariadic;
          m_params =
          [{ param_annotation = ([5:26-28], Tk);
             param_type_hint =
             ((Tk), (Some ([5:23-25], (Habstr ("Tk", [])))));
             param_is_variadic = false; param_pos = [5:26-28];
             param_name = "$x"; param_expr = None; param_callconv = None;
             param_user_attributes = []; param_visibility = None }
            ];
          m_cap = ((mixed), None); m_unsafe_cap = ((mixed), None);
          m_body =
          { fb_ast = [([6:5-17], (Return (Some (([6:12-16], null), Null))))];
            fb_annotation = () };
          m_fun_kind = FSync; m_user_attributes = [];
          m_ret =
          ((?Tv),
           (Some ([5:31-34], (Hoption ([5:32-34], (Habstr ("Tv", [])))))));
          m_external = false; m_doc_comment = None }
        ];
      c_attributes = []; c_xhp_children = []; c_xhp_attrs = [];
      c_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>;
        ns_record_def_uses = <opaque>; ns_fun_uses = <opaque>;
        ns_const_uses = <opaque>; ns_name = None; ns_auto_ns_map = [];
        ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
      c_user_attributes = []; c_file_attributes = []; c_enum = None;
      c_pu_enums = []; c_doc_comment = None; c_emit_id = None })
  ]
