{{!

  Copyright (c) Meta Platforms, Inc. and affiliates.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

}}{{!

  This template defines the client stream function.

}}
func (c *{{service:go_client_name}}) {{> svc/client_func_signature}} {
    {{#function:stream_has_first_response?}}
    {{#function:stream_first_response_type}}
    var fbthriftRespZero {{#type:structured?}}*{{/type:structured?}}{{> common/type}}
    {{/function:stream_first_response_type}}
    {{/function:stream_has_first_response?}}
    // Must be a cancellable context to prevent goroutine leaks
    if {{function:ctx_arg_name}}.Done() == nil {
		return {{#function:creates_interaction?}}nil, {{/function:creates_interaction?}}{{#function:stream_has_first_response?}}fbthriftRespZero, {{/function:stream_has_first_response?}}nil, nil, errors.New("context does not support cancellation")
	}
    fbthriftStreamCtx, fbthriftStreamCancel := context.WithCancel({{function:ctx_arg_name}})

    fbthriftReq := &req{{service:go_name}}{{function:go_name}}{
        {{#function:args}}
        {{#field:type}}
        {{field:go_name}}: {{field:go_arg_name}},
        {{/field:type}}
        {{/function:args}}
    }
    fbthriftResp := newResp{{service:go_name}}{{function:go_name}}()

    {{#if function:creates_interaction?}}
    fbthriftChannel := thrift.NewInteractionChannel(c.ch, "{{function:created_interaction.name}}")
    fbthriftInteractionClient := New{{function:created_interaction.go_name}}ChannelClient(fbthriftChannel)
    {{#else}}
    fbthriftChannel := c.ch
    {{/if function:creates_interaction?}}

    fbthriftErrChan := make(chan error, 1)
    {{#function:stream_elem_type}}
    fbthriftElemChan := make(chan {{#type:structured?}}*{{/type:structured?}}{{> common/type}}, thrift.DefaultStreamBufferSize)

    fbthriftOnStreamNextFn := func(d thrift.Decoder) error {
        fbthriftStreamValue := newStream{{service:go_name}}{{function:go_name}}()
        fbthriftSpecErr := fbthriftStreamValue.Read(d)
        if fbthriftSpecErr != nil {
            return fbthriftSpecErr
        } else if fbthriftStreamEx := fbthriftStreamValue.Exception(); fbthriftStreamEx != nil {
            return fbthriftStreamEx
        }
        fbthriftElemChan <- fbthriftStreamValue.Get{{function:retval_field_name}}()
        return nil
    }
    {{/function:stream_elem_type}}
    {{! Both of these callback represent "terminal" state. }}
    {{! They should be invoked only once. }}
    fbthriftOnStreamErrorFn := func(err error) {
        fbthriftErrChan <- err
        close(fbthriftElemChan)
        close(fbthriftErrChan)
    }
    fbthriftOnStreamCompleteFn := func() {
        close(fbthriftElemChan)
        close(fbthriftErrChan)
    }

    fbthriftErr := fbthriftChannel.SendRequestStream(
        fbthriftStreamCtx,
        "{{> svc/func_rpc_name}}",
        fbthriftReq,
        fbthriftResp,
        fbthriftOnStreamNextFn,
        fbthriftOnStreamErrorFn,
        fbthriftOnStreamCompleteFn,
    )
    if fbthriftErr != nil {
        fbthriftStreamCancel()
        return {{#function:creates_interaction?}}nil, {{/function:creates_interaction?}}{{#function:stream_has_first_response?}}fbthriftRespZero, {{/function:stream_has_first_response?}}nil, nil, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        fbthriftStreamCancel()
        return {{#function:creates_interaction?}}nil, {{/function:creates_interaction?}}{{#function:stream_has_first_response?}}fbthriftRespZero, {{/function:stream_has_first_response?}}nil, nil, fbthriftEx
    }
    return {{#function:creates_interaction?}}fbthriftInteractionClient, {{/function:creates_interaction?}}{{#function:stream_has_first_response?}}fbthriftResp.Get{{function:retval_field_name}}(), {{/function:stream_has_first_response?}}fbthriftElemChan, fbthriftErrChan, nil
}
