/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/refs/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/refs/gen-cpp2/module_types.h"
#include "thrift/compiler/test/fixtures/refs/gen-cpp2/module_types_custom_protocol.h"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "thrift/compiler/test/fixtures/refs/gen-cpp2/module_data.h"
[[maybe_unused]] static constexpr std::string_view kModuleName = "module";


namespace apache { namespace thrift {

const std::string_view TEnumTraits<::cpp2::MyEnum>::__fbthrift_module_name_internal_do_not_use = kModuleName;
folly::Range<::cpp2::MyEnum const*> const TEnumTraits<::cpp2::MyEnum>::values = folly::range(TEnumDataStorage<::cpp2::MyEnum>::values);
folly::Range<std::string_view const*> const TEnumTraits<::cpp2::MyEnum>::names = folly::range(TEnumDataStorage<::cpp2::MyEnum>::names);

bool TEnumTraits<::cpp2::MyEnum>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::cpp2::MyEnum>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

}} // apache::thrift


namespace apache { namespace thrift {

const std::string_view TEnumTraits<::cpp2::TypedEnum>::__fbthrift_module_name_internal_do_not_use = kModuleName;
folly::Range<::cpp2::TypedEnum const*> const TEnumTraits<::cpp2::TypedEnum>::values = folly::range(TEnumDataStorage<::cpp2::TypedEnum>::values);
folly::Range<std::string_view const*> const TEnumTraits<::cpp2::TypedEnum>::names = folly::range(TEnumDataStorage<::cpp2::TypedEnum>::names);

bool TEnumTraits<::cpp2::TypedEnum>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::cpp2::TypedEnum>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

}} // apache::thrift


#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::MyUnion>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::MyUnion>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace apache { namespace thrift {

folly::Range<::cpp2::MyUnion::Type const*> const TEnumTraits<::cpp2::MyUnion::Type>::values = folly::range(TEnumDataStorage<::cpp2::MyUnion::Type>::values);
folly::Range<std::string_view const*> const TEnumTraits<::cpp2::MyUnion::Type>::names = folly::range(TEnumDataStorage<::cpp2::MyUnion::Type>::names);

bool TEnumTraits<::cpp2::MyUnion::Type>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::cpp2::MyUnion::Type>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace cpp2 {

std::string_view MyUnion::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyUnion>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view MyUnion::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyUnion>::name;
}

void MyUnion::__fbthrift_destruct() {
  switch(getType()) {
    case Type::__EMPTY__:
      break;
    case Type::anInteger:
      ::std::destroy_at(::std::addressof(value_.anInteger));
      break;
    case Type::aString:
      ::std::destroy_at(::std::addressof(value_.aString));
      break;
    default:
      assert(false);
      break;
  }
}

void MyUnion::__fbthrift_clear() {
  __fbthrift_destruct();
  fbthrift_type_ = folly::to_underlying(Type::__EMPTY__);
}

  MyUnion::~MyUnion() {
    __fbthrift_destruct();
  }

bool MyUnion::__fbthrift_is_empty() const {
  return getType() == Type::__EMPTY__;
}
  MyUnion::MyUnion(const MyUnion& rhs)
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        return;
      case Type::anInteger:
        set_anInteger(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::integral>(rhs.value_.anInteger));
        break;
      case Type::aString:
        set_aString(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::string>(rhs.value_.aString));
        break;
      default:
        assert(false);
    }
  }

    MyUnion&MyUnion::operator=(const MyUnion& rhs) {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        __fbthrift_clear();
        return *this;
      case Type::anInteger:
        set_anInteger(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::integral>(rhs.value_.anInteger));
        break;
      case Type::aString:
        set_aString(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::string>(rhs.value_.aString));
        break;
      default:
        __fbthrift_clear();
        assert(false);
    }
    return *this;
  }


bool MyUnion::operator==(const MyUnion& rhs) const {
  return ::apache::thrift::op::detail::UnionEquality{}(*this, rhs);
}

bool MyUnion::operator<([[maybe_unused]] const MyUnion& rhs) const {
  return ::apache::thrift::op::detail::UnionLessThan{}(*this, rhs);
}

void swap(MyUnion& a, MyUnion& b) {
  MyUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}



} // namespace cpp2

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::NonTriviallyDestructibleUnion>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::NonTriviallyDestructibleUnion>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace apache { namespace thrift {

folly::Range<::cpp2::NonTriviallyDestructibleUnion::Type const*> const TEnumTraits<::cpp2::NonTriviallyDestructibleUnion::Type>::values = folly::range(TEnumDataStorage<::cpp2::NonTriviallyDestructibleUnion::Type>::values);
folly::Range<std::string_view const*> const TEnumTraits<::cpp2::NonTriviallyDestructibleUnion::Type>::names = folly::range(TEnumDataStorage<::cpp2::NonTriviallyDestructibleUnion::Type>::names);

bool TEnumTraits<::cpp2::NonTriviallyDestructibleUnion::Type>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::cpp2::NonTriviallyDestructibleUnion::Type>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace cpp2 {

std::string_view NonTriviallyDestructibleUnion::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<NonTriviallyDestructibleUnion>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view NonTriviallyDestructibleUnion::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<NonTriviallyDestructibleUnion>::name;
}

void NonTriviallyDestructibleUnion::__fbthrift_destruct() {
  switch(getType()) {
    case Type::__EMPTY__:
      break;
    case Type::int_field:
      ::std::destroy_at(::std::addressof(value_.int_field));
      break;
    default:
      assert(false);
      break;
  }
}

void NonTriviallyDestructibleUnion::__fbthrift_clear() {
  __fbthrift_destruct();
  fbthrift_type_ = folly::to_underlying(Type::__EMPTY__);
}

  NonTriviallyDestructibleUnion::~NonTriviallyDestructibleUnion() {
    __fbthrift_destruct();
  }

bool NonTriviallyDestructibleUnion::__fbthrift_is_empty() const {
  return getType() == Type::__EMPTY__;
}
  NonTriviallyDestructibleUnion::NonTriviallyDestructibleUnion(const NonTriviallyDestructibleUnion& rhs)
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        return;
      case Type::int_field:
        set_int_field(*rhs.value_.int_field);
        break;
      default:
        assert(false);
    }
  }

    NonTriviallyDestructibleUnion&NonTriviallyDestructibleUnion::operator=(const NonTriviallyDestructibleUnion& rhs) {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        __fbthrift_clear();
        return *this;
      case Type::int_field:
        set_int_field(*rhs.value_.int_field);
        break;
      default:
        __fbthrift_clear();
        assert(false);
    }
    return *this;
  }


bool NonTriviallyDestructibleUnion::operator==(const NonTriviallyDestructibleUnion& rhs) const {
  return ::apache::thrift::op::detail::UnionEquality{}(*this, rhs);
}

bool NonTriviallyDestructibleUnion::operator<([[maybe_unused]] const NonTriviallyDestructibleUnion& rhs) const {
  return ::apache::thrift::op::detail::UnionLessThan{}(*this, rhs);
}

void swap(NonTriviallyDestructibleUnion& a, NonTriviallyDestructibleUnion& b) {
  NonTriviallyDestructibleUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}



} // namespace cpp2

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::MyField>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::MyField>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace cpp2 {

std::string_view MyField::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyField>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view MyField::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyField>::name;
}

MyField::MyField(const MyField& srcObj) :
    __fbthrift_field_opt_value(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::integral>(srcObj.__fbthrift_field_opt_value)),
    __fbthrift_field_value(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::integral>(srcObj.__fbthrift_field_value)),
    __fbthrift_field_req_value(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::integral>(srcObj.__fbthrift_field_req_value)),
    __fbthrift_field_opt_enum_value(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::enumeration>(srcObj.__fbthrift_field_opt_enum_value)),
    __fbthrift_field_enum_value(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::enumeration>(srcObj.__fbthrift_field_enum_value)),
    __fbthrift_field_req_enum_value(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::enumeration>(srcObj.__fbthrift_field_req_enum_value)),
    __fbthrift_field_opt_str_value(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::string>(srcObj.__fbthrift_field_opt_str_value)),
    __fbthrift_field_str_value(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::string>(srcObj.__fbthrift_field_str_value)),
    __fbthrift_field_req_str_value(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::string>(srcObj.__fbthrift_field_req_str_value)) {
}

static void __fbthrift_swap(MyField& lhs, MyField& rhs) { swap(lhs, rhs); }
MyField& MyField::operator=(const MyField& other) {
  MyField tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

MyField::MyField() :
    __fbthrift_field_value(std::make_unique<::std::int64_t>()),
    __fbthrift_field_req_value(std::make_unique<::std::int64_t>()),
    __fbthrift_field_enum_value(std::make_unique<::cpp2::MyEnum>()),
    __fbthrift_field_req_enum_value(std::make_unique<::cpp2::MyEnum>()),
    __fbthrift_field_str_value(std::make_unique<::std::string>()),
    __fbthrift_field_req_str_value(std::make_unique<::std::string>()) {
}


MyField::~MyField() {}

MyField::MyField([[maybe_unused]] MyField&& other) noexcept :
    __fbthrift_field_opt_value(std::move(other.__fbthrift_field_opt_value)),
    __fbthrift_field_value(std::move(other.__fbthrift_field_value)),
    __fbthrift_field_req_value(std::move(other.__fbthrift_field_req_value)),
    __fbthrift_field_opt_enum_value(std::move(other.__fbthrift_field_opt_enum_value)),
    __fbthrift_field_enum_value(std::move(other.__fbthrift_field_enum_value)),
    __fbthrift_field_req_enum_value(std::move(other.__fbthrift_field_req_enum_value)),
    __fbthrift_field_opt_str_value(std::move(other.__fbthrift_field_opt_str_value)),
    __fbthrift_field_str_value(std::move(other.__fbthrift_field_str_value)),
    __fbthrift_field_req_str_value(std::move(other.__fbthrift_field_req_str_value)) {
}

MyField& MyField::operator=([[maybe_unused]] MyField&& other) noexcept {
    this->__fbthrift_field_opt_value = std::move(other.__fbthrift_field_opt_value);
    this->__fbthrift_field_value = std::move(other.__fbthrift_field_value);
    this->__fbthrift_field_req_value = std::move(other.__fbthrift_field_req_value);
    this->__fbthrift_field_opt_enum_value = std::move(other.__fbthrift_field_opt_enum_value);
    this->__fbthrift_field_enum_value = std::move(other.__fbthrift_field_enum_value);
    this->__fbthrift_field_req_enum_value = std::move(other.__fbthrift_field_req_enum_value);
    this->__fbthrift_field_opt_str_value = std::move(other.__fbthrift_field_opt_str_value);
    this->__fbthrift_field_str_value = std::move(other.__fbthrift_field_str_value);
    this->__fbthrift_field_req_str_value = std::move(other.__fbthrift_field_req_str_value);
    return *this;
}


MyField::MyField(apache::thrift::FragileConstructor, ::std::unique_ptr<::std::int64_t> opt_value__arg, ::std::unique_ptr<::std::int64_t> value__arg, ::std::unique_ptr<::std::int64_t> req_value__arg, ::std::unique_ptr<::cpp2::MyEnum> opt_enum_value__arg, ::std::unique_ptr<::cpp2::MyEnum> enum_value__arg, ::std::unique_ptr<::cpp2::MyEnum> req_enum_value__arg, ::std::unique_ptr<::std::string> opt_str_value__arg, ::std::unique_ptr<::std::string> str_value__arg, ::std::unique_ptr<::std::string> req_str_value__arg) :
    __fbthrift_field_opt_value(std::move(opt_value__arg)),
    __fbthrift_field_value(std::move(value__arg)),
    __fbthrift_field_req_value(std::move(req_value__arg)),
    __fbthrift_field_opt_enum_value(std::move(opt_enum_value__arg)),
    __fbthrift_field_enum_value(std::move(enum_value__arg)),
    __fbthrift_field_req_enum_value(std::move(req_enum_value__arg)),
    __fbthrift_field_opt_str_value(std::move(opt_str_value__arg)),
    __fbthrift_field_str_value(std::move(str_value__arg)),
    __fbthrift_field_req_str_value(std::move(req_str_value__arg)) { 
}

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION
#endif

void MyField::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_opt_value.reset();
  this->__fbthrift_field_value = ::apache::thrift::detail::make_mutable_smart_ptr<::std::unique_ptr<::std::int64_t>>();
  this->__fbthrift_field_req_value = ::apache::thrift::detail::make_mutable_smart_ptr<::std::unique_ptr<::std::int64_t>>();
  this->__fbthrift_field_opt_enum_value.reset();
  this->__fbthrift_field_enum_value = ::apache::thrift::detail::make_mutable_smart_ptr<::std::unique_ptr<::cpp2::MyEnum>>();
  this->__fbthrift_field_req_enum_value = ::apache::thrift::detail::make_mutable_smart_ptr<::std::unique_ptr<::cpp2::MyEnum>>();
  this->__fbthrift_field_opt_str_value.reset();
  this->__fbthrift_field_str_value = ::apache::thrift::detail::make_mutable_smart_ptr<::std::unique_ptr<::std::string>>();
  this->__fbthrift_field_req_str_value = ::apache::thrift::detail::make_mutable_smart_ptr<::std::unique_ptr<::std::string>>();
}

void MyField::__fbthrift_clear_terse_fields() {
}

bool MyField::__fbthrift_is_empty() const {
  return false;
}

bool MyField::operator==([[maybe_unused]] const MyField& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyField::operator<([[maybe_unused]] const MyField& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] MyField& a, [[maybe_unused]] MyField& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_opt_value, b.__fbthrift_field_opt_value);
  swap(a.__fbthrift_field_value, b.__fbthrift_field_value);
  swap(a.__fbthrift_field_req_value, b.__fbthrift_field_req_value);
  swap(a.__fbthrift_field_opt_enum_value, b.__fbthrift_field_opt_enum_value);
  swap(a.__fbthrift_field_enum_value, b.__fbthrift_field_enum_value);
  swap(a.__fbthrift_field_req_enum_value, b.__fbthrift_field_req_enum_value);
  swap(a.__fbthrift_field_opt_str_value, b.__fbthrift_field_opt_str_value);
  swap(a.__fbthrift_field_str_value, b.__fbthrift_field_str_value);
  swap(a.__fbthrift_field_req_str_value, b.__fbthrift_field_req_str_value);
}



} // namespace cpp2

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::MyStruct>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::MyStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace cpp2 {

std::string_view MyStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStruct>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view MyStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStruct>::name;
}

MyStruct::MyStruct(const MyStruct& srcObj) :
    __fbthrift_field_opt_ref(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::structure>(srcObj.__fbthrift_field_opt_ref)),
    __fbthrift_field_ref(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::structure>(srcObj.__fbthrift_field_ref)),
    __fbthrift_field_req_ref(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::structure>(srcObj.__fbthrift_field_req_ref)) {
}

static void __fbthrift_swap(MyStruct& lhs, MyStruct& rhs) { swap(lhs, rhs); }
MyStruct& MyStruct::operator=(const MyStruct& other) {
  MyStruct tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

MyStruct::MyStruct() :
    __fbthrift_field_ref(std::make_unique<::cpp2::MyField>()),
    __fbthrift_field_req_ref(std::make_unique<::cpp2::MyField>()) {
}


MyStruct::~MyStruct() {}

MyStruct::MyStruct([[maybe_unused]] MyStruct&& other) noexcept :
    __fbthrift_field_opt_ref(std::move(other.__fbthrift_field_opt_ref)),
    __fbthrift_field_ref(std::move(other.__fbthrift_field_ref)),
    __fbthrift_field_req_ref(std::move(other.__fbthrift_field_req_ref)) {
}

MyStruct& MyStruct::operator=([[maybe_unused]] MyStruct&& other) noexcept {
    this->__fbthrift_field_opt_ref = std::move(other.__fbthrift_field_opt_ref);
    this->__fbthrift_field_ref = std::move(other.__fbthrift_field_ref);
    this->__fbthrift_field_req_ref = std::move(other.__fbthrift_field_req_ref);
    return *this;
}


MyStruct::MyStruct(apache::thrift::FragileConstructor, ::std::unique_ptr<::cpp2::MyField> opt_ref__arg, ::std::unique_ptr<::cpp2::MyField> ref__arg, ::std::unique_ptr<::cpp2::MyField> req_ref__arg) :
    __fbthrift_field_opt_ref(std::move(opt_ref__arg)),
    __fbthrift_field_ref(std::move(ref__arg)),
    __fbthrift_field_req_ref(std::move(req_ref__arg)) { 
}

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION
#endif

void MyStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_opt_ref.reset();
  if (this->__fbthrift_field_ref) ::apache::thrift::clear(*this->__fbthrift_field_ref);
  if (this->__fbthrift_field_req_ref) ::apache::thrift::clear(*this->__fbthrift_field_req_ref);
}

void MyStruct::__fbthrift_clear_terse_fields() {
}

bool MyStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyStruct::operator==([[maybe_unused]] const MyStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyStruct::operator<([[maybe_unused]] const MyStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] MyStruct& a, [[maybe_unused]] MyStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_opt_ref, b.__fbthrift_field_opt_ref);
  swap(a.__fbthrift_field_ref, b.__fbthrift_field_ref);
  swap(a.__fbthrift_field_req_ref, b.__fbthrift_field_req_ref);
}


static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::structure,
        ::cpp2::MyField>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::structure,
        ::cpp2::MyField>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::structure,
        ::cpp2::MyField>,
    "inconsistent use of json option");

} // namespace cpp2

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::StructWithUnion>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::StructWithUnion>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace cpp2 {

std::string_view StructWithUnion::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<StructWithUnion>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view StructWithUnion::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<StructWithUnion>::name;
}

StructWithUnion::StructWithUnion(const StructWithUnion& srcObj) :
    __fbthrift_field_u(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::variant>(srcObj.__fbthrift_field_u)),
    __fbthrift_field_aDouble(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::floating_point>(srcObj.__fbthrift_field_aDouble)),
    __fbthrift_field_f(srcObj.__fbthrift_field_f),
    __isset(srcObj.__isset) {
}

static void __fbthrift_swap(StructWithUnion& lhs, StructWithUnion& rhs) { swap(lhs, rhs); }
StructWithUnion& StructWithUnion::operator=(const StructWithUnion& other) {
  StructWithUnion tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

StructWithUnion::StructWithUnion() :
    __fbthrift_field_u(std::make_unique<::cpp2::MyUnion>()),
    __fbthrift_field_aDouble(std::make_unique<double>()) {
}


StructWithUnion::~StructWithUnion() {}

StructWithUnion::StructWithUnion([[maybe_unused]] StructWithUnion&& other) noexcept :
    __fbthrift_field_u(std::move(other.__fbthrift_field_u)),
    __fbthrift_field_aDouble(std::move(other.__fbthrift_field_aDouble)),
    __fbthrift_field_f(std::move(other.__fbthrift_field_f)),
    __isset(other.__isset) {
}

StructWithUnion& StructWithUnion::operator=([[maybe_unused]] StructWithUnion&& other) noexcept {
    this->__fbthrift_field_u = std::move(other.__fbthrift_field_u);
    this->__fbthrift_field_aDouble = std::move(other.__fbthrift_field_aDouble);
    this->__fbthrift_field_f = std::move(other.__fbthrift_field_f);
    __isset = other.__isset;
    return *this;
}


StructWithUnion::StructWithUnion(apache::thrift::FragileConstructor, ::std::unique_ptr<::cpp2::MyUnion> u__arg, ::std::unique_ptr<double> aDouble__arg, ::cpp2::MyField f__arg) :
    __fbthrift_field_u(std::move(u__arg)),
    __fbthrift_field_aDouble(std::move(aDouble__arg)),
    __fbthrift_field_f(std::move(f__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
}

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION
#endif

void StructWithUnion::__fbthrift_clear() {
  // clear all fields
  if (this->__fbthrift_field_u) ::apache::thrift::clear(*this->__fbthrift_field_u);
  this->__fbthrift_field_aDouble = ::apache::thrift::detail::make_mutable_smart_ptr<::std::unique_ptr<double>>();
  ::apache::thrift::clear(this->__fbthrift_field_f);
  __isset = {};
}

void StructWithUnion::__fbthrift_clear_terse_fields() {
}

bool StructWithUnion::__fbthrift_is_empty() const {
  return false;
}

bool StructWithUnion::operator==([[maybe_unused]] const StructWithUnion& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool StructWithUnion::operator<([[maybe_unused]] const StructWithUnion& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::cpp2::MyField& StructWithUnion::get_f() const& {
  return __fbthrift_field_f;
}

::cpp2::MyField StructWithUnion::get_f() && {
  return static_cast<::cpp2::MyField&&>(__fbthrift_field_f);
}

void swap([[maybe_unused]] StructWithUnion& a, [[maybe_unused]] StructWithUnion& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_u, b.__fbthrift_field_u);
  swap(a.__fbthrift_field_aDouble, b.__fbthrift_field_aDouble);
  swap(a.__fbthrift_field_f, b.__fbthrift_field_f);
  swap(a.__isset, b.__isset);
}


static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        StructWithUnion,
        ::apache::thrift::type_class::variant,
        ::cpp2::MyUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        StructWithUnion,
        ::apache::thrift::type_class::structure,
        ::cpp2::MyField>,
    "inconsistent use of json option");

} // namespace cpp2

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::RecursiveStruct>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::RecursiveStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace cpp2 {

std::string_view RecursiveStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<RecursiveStruct>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view RecursiveStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<RecursiveStruct>::name;
}

RecursiveStruct::RecursiveStruct(const RecursiveStruct&) = default;
RecursiveStruct& RecursiveStruct::operator=(const RecursiveStruct&) = default;
RecursiveStruct::RecursiveStruct() {
}


RecursiveStruct::~RecursiveStruct() {}

RecursiveStruct::RecursiveStruct([[maybe_unused]] RecursiveStruct&& other) noexcept :
    __fbthrift_field_mes(std::move(other.__fbthrift_field_mes)),
    __isset(other.__isset) {
}

RecursiveStruct& RecursiveStruct::operator=([[maybe_unused]] RecursiveStruct&& other) noexcept {
    this->__fbthrift_field_mes = std::move(other.__fbthrift_field_mes);
    __isset = other.__isset;
    return *this;
}


RecursiveStruct::RecursiveStruct(apache::thrift::FragileConstructor, ::std::vector<::cpp2::RecursiveStruct> mes__arg) :
    __fbthrift_field_mes(std::move(mes__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
}

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION
#endif

void RecursiveStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_mes.clear();
  __isset = {};
}

void RecursiveStruct::__fbthrift_clear_terse_fields() {
}

bool RecursiveStruct::__fbthrift_is_empty() const {
  return !(this->__isset.get(0));
}

bool RecursiveStruct::operator==([[maybe_unused]] const RecursiveStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool RecursiveStruct::operator<([[maybe_unused]] const RecursiveStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::std::vector<::cpp2::RecursiveStruct>* RecursiveStruct::get_mes() const& {
  return mes_ref().has_value() ? std::addressof(__fbthrift_field_mes) : nullptr;
}

::std::vector<::cpp2::RecursiveStruct>* RecursiveStruct::get_mes() & {
  return mes_ref().has_value() ? std::addressof(__fbthrift_field_mes) : nullptr;
}

void swap([[maybe_unused]] RecursiveStruct& a, [[maybe_unused]] RecursiveStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_mes, b.__fbthrift_field_mes);
  swap(a.__isset, b.__isset);
}


static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        RecursiveStruct,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector<::cpp2::RecursiveStruct>>,
    "inconsistent use of json option");

} // namespace cpp2

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::StructWithContainers>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::StructWithContainers>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace cpp2 {

std::string_view StructWithContainers::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<StructWithContainers>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view StructWithContainers::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<StructWithContainers>::name;
}

StructWithContainers::StructWithContainers(const StructWithContainers& srcObj) :
    __fbthrift_field_list_ref(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>(srcObj.__fbthrift_field_list_ref)),
    __fbthrift_field_set_ref(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>(srcObj.__fbthrift_field_set_ref)),
    __fbthrift_field_map_ref(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>(srcObj.__fbthrift_field_map_ref)),
    __fbthrift_field_list_ref_unique(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>(srcObj.__fbthrift_field_list_ref_unique)),
    __fbthrift_field_set_ref_shared(srcObj.__fbthrift_field_set_ref_shared),
    __fbthrift_field_list_ref_shared_const(srcObj.__fbthrift_field_list_ref_shared_const) {
}

static void __fbthrift_swap(StructWithContainers& lhs, StructWithContainers& rhs) { swap(lhs, rhs); }
StructWithContainers& StructWithContainers::operator=(const StructWithContainers& other) {
  StructWithContainers tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

StructWithContainers::StructWithContainers() :
    __fbthrift_field_list_ref(std::make_unique<::std::vector<::std::int32_t>>()),
    __fbthrift_field_set_ref(std::make_unique<::std::set<::std::int32_t>>()),
    __fbthrift_field_map_ref(std::make_unique<::std::map<::std::int32_t, ::std::int32_t>>()),
    __fbthrift_field_list_ref_unique(std::make_unique<::std::vector<::std::int32_t>>()),
    __fbthrift_field_set_ref_shared(std::make_shared<::std::set<::std::int32_t>>()),
    __fbthrift_field_list_ref_shared_const(std::make_shared<::std::vector<::std::int32_t>>()) {
}


StructWithContainers::~StructWithContainers() {}

StructWithContainers::StructWithContainers([[maybe_unused]] StructWithContainers&& other) noexcept :
    __fbthrift_field_list_ref(std::move(other.__fbthrift_field_list_ref)),
    __fbthrift_field_set_ref(std::move(other.__fbthrift_field_set_ref)),
    __fbthrift_field_map_ref(std::move(other.__fbthrift_field_map_ref)),
    __fbthrift_field_list_ref_unique(std::move(other.__fbthrift_field_list_ref_unique)),
    __fbthrift_field_set_ref_shared(std::move(other.__fbthrift_field_set_ref_shared)),
    __fbthrift_field_list_ref_shared_const(std::move(other.__fbthrift_field_list_ref_shared_const)) {
}

StructWithContainers& StructWithContainers::operator=([[maybe_unused]] StructWithContainers&& other) noexcept {
    this->__fbthrift_field_list_ref = std::move(other.__fbthrift_field_list_ref);
    this->__fbthrift_field_set_ref = std::move(other.__fbthrift_field_set_ref);
    this->__fbthrift_field_map_ref = std::move(other.__fbthrift_field_map_ref);
    this->__fbthrift_field_list_ref_unique = std::move(other.__fbthrift_field_list_ref_unique);
    this->__fbthrift_field_set_ref_shared = std::move(other.__fbthrift_field_set_ref_shared);
    this->__fbthrift_field_list_ref_shared_const = std::move(other.__fbthrift_field_list_ref_shared_const);
    return *this;
}


StructWithContainers::StructWithContainers(apache::thrift::FragileConstructor, ::std::unique_ptr<::std::vector<::std::int32_t>> list_ref__arg, ::std::unique_ptr<::std::set<::std::int32_t>> set_ref__arg, ::std::unique_ptr<::std::map<::std::int32_t, ::std::int32_t>> map_ref__arg, ::std::unique_ptr<::std::vector<::std::int32_t>> list_ref_unique__arg, ::std::shared_ptr<::std::set<::std::int32_t>> set_ref_shared__arg, ::std::shared_ptr<const ::std::vector<::std::int32_t>> list_ref_shared_const__arg) :
    __fbthrift_field_list_ref(std::move(list_ref__arg)),
    __fbthrift_field_set_ref(std::move(set_ref__arg)),
    __fbthrift_field_map_ref(std::move(map_ref__arg)),
    __fbthrift_field_list_ref_unique(std::move(list_ref_unique__arg)),
    __fbthrift_field_set_ref_shared(std::move(set_ref_shared__arg)),
    __fbthrift_field_list_ref_shared_const(std::move(list_ref_shared_const__arg)) { 
}

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION
#endif

void StructWithContainers::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_list_ref = ::apache::thrift::detail::make_mutable_smart_ptr<::std::unique_ptr<::std::vector<::std::int32_t>>>();
  this->__fbthrift_field_set_ref = ::apache::thrift::detail::make_mutable_smart_ptr<::std::unique_ptr<::std::set<::std::int32_t>>>();
  this->__fbthrift_field_map_ref = ::apache::thrift::detail::make_mutable_smart_ptr<::std::unique_ptr<::std::map<::std::int32_t, ::std::int32_t>>>();
  this->__fbthrift_field_list_ref_unique = ::apache::thrift::detail::make_mutable_smart_ptr<::std::unique_ptr<::std::vector<::std::int32_t>>>();
  this->__fbthrift_field_set_ref_shared = ::apache::thrift::detail::make_mutable_smart_ptr<::std::shared_ptr<::std::set<::std::int32_t>>>();
  this->__fbthrift_field_list_ref_shared_const = ::apache::thrift::detail::make_mutable_smart_ptr<::std::shared_ptr<const ::std::vector<::std::int32_t>>>();
}

void StructWithContainers::__fbthrift_clear_terse_fields() {
}

bool StructWithContainers::__fbthrift_is_empty() const {
  return false;
}

bool StructWithContainers::operator==([[maybe_unused]] const StructWithContainers& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool StructWithContainers::operator<([[maybe_unused]] const StructWithContainers& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] StructWithContainers& a, [[maybe_unused]] StructWithContainers& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_list_ref, b.__fbthrift_field_list_ref);
  swap(a.__fbthrift_field_set_ref, b.__fbthrift_field_set_ref);
  swap(a.__fbthrift_field_map_ref, b.__fbthrift_field_map_ref);
  swap(a.__fbthrift_field_list_ref_unique, b.__fbthrift_field_list_ref_unique);
  swap(a.__fbthrift_field_set_ref_shared, b.__fbthrift_field_set_ref_shared);
  swap(a.__fbthrift_field_list_ref_shared_const, b.__fbthrift_field_list_ref_shared_const);
}



} // namespace cpp2

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::StructWithSharedConst>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::StructWithSharedConst>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace cpp2 {

std::string_view StructWithSharedConst::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<StructWithSharedConst>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view StructWithSharedConst::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<StructWithSharedConst>::name;
}

StructWithSharedConst::StructWithSharedConst(const StructWithSharedConst&) = default;
StructWithSharedConst& StructWithSharedConst::operator=(const StructWithSharedConst&) = default;
StructWithSharedConst::StructWithSharedConst() :
    __fbthrift_field_shared_const(std::make_shared<::cpp2::MyField>()),
    __fbthrift_field_req_shared_const(std::make_shared<::cpp2::MyField>()) {
}


StructWithSharedConst::~StructWithSharedConst() {}

StructWithSharedConst::StructWithSharedConst([[maybe_unused]] StructWithSharedConst&& other) noexcept :
    __fbthrift_field_opt_shared_const(std::move(other.__fbthrift_field_opt_shared_const)),
    __fbthrift_field_shared_const(std::move(other.__fbthrift_field_shared_const)),
    __fbthrift_field_req_shared_const(std::move(other.__fbthrift_field_req_shared_const)) {
}

StructWithSharedConst& StructWithSharedConst::operator=([[maybe_unused]] StructWithSharedConst&& other) noexcept {
    this->__fbthrift_field_opt_shared_const = std::move(other.__fbthrift_field_opt_shared_const);
    this->__fbthrift_field_shared_const = std::move(other.__fbthrift_field_shared_const);
    this->__fbthrift_field_req_shared_const = std::move(other.__fbthrift_field_req_shared_const);
    return *this;
}


StructWithSharedConst::StructWithSharedConst(apache::thrift::FragileConstructor, ::std::shared_ptr<const ::cpp2::MyField> opt_shared_const__arg, ::std::shared_ptr<const ::cpp2::MyField> shared_const__arg, ::std::shared_ptr<const ::cpp2::MyField> req_shared_const__arg) :
    __fbthrift_field_opt_shared_const(std::move(opt_shared_const__arg)),
    __fbthrift_field_shared_const(std::move(shared_const__arg)),
    __fbthrift_field_req_shared_const(std::move(req_shared_const__arg)) { 
}

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION
#endif

void StructWithSharedConst::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_opt_shared_const.reset();
  if (this->__fbthrift_field_shared_const) this->__fbthrift_field_shared_const = ::apache::thrift::detail::make_mutable_smart_ptr<::std::shared_ptr<const ::cpp2::MyField>>();
  if (this->__fbthrift_field_req_shared_const) this->__fbthrift_field_req_shared_const = ::apache::thrift::detail::make_mutable_smart_ptr<::std::shared_ptr<const ::cpp2::MyField>>();
}

void StructWithSharedConst::__fbthrift_clear_terse_fields() {
}

bool StructWithSharedConst::__fbthrift_is_empty() const {
  return false;
}

bool StructWithSharedConst::operator==([[maybe_unused]] const StructWithSharedConst& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool StructWithSharedConst::operator<([[maybe_unused]] const StructWithSharedConst& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] StructWithSharedConst& a, [[maybe_unused]] StructWithSharedConst& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_opt_shared_const, b.__fbthrift_field_opt_shared_const);
  swap(a.__fbthrift_field_shared_const, b.__fbthrift_field_shared_const);
  swap(a.__fbthrift_field_req_shared_const, b.__fbthrift_field_req_shared_const);
}


static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        StructWithSharedConst,
        ::apache::thrift::type_class::structure,
        ::cpp2::MyField>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        StructWithSharedConst,
        ::apache::thrift::type_class::structure,
        ::cpp2::MyField>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        StructWithSharedConst,
        ::apache::thrift::type_class::structure,
        ::cpp2::MyField>,
    "inconsistent use of json option");

} // namespace cpp2

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::Empty>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::Empty>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace cpp2 {

std::string_view Empty::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Empty>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view Empty::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<Empty>::name;
}


Empty::Empty(apache::thrift::FragileConstructor) {}

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION
#endif

void Empty::__fbthrift_clear() {
  // clear all fields
}

void Empty::__fbthrift_clear_terse_fields() {
}

bool Empty::__fbthrift_is_empty() const {
  return true;
}

bool Empty::operator==([[maybe_unused]] const Empty& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool Empty::operator<([[maybe_unused]] const Empty& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] Empty& a, [[maybe_unused]] Empty& b) {
  using ::std::swap;
}



} // namespace cpp2

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::StructWithRef>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::StructWithRef>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace cpp2 {

std::string_view StructWithRef::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<StructWithRef>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view StructWithRef::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<StructWithRef>::name;
}

StructWithRef::StructWithRef(const StructWithRef& srcObj) :
    __fbthrift_field_def_field(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::structure>(srcObj.__fbthrift_field_def_field)),
    __fbthrift_field_opt_field(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::structure>(srcObj.__fbthrift_field_opt_field)),
    __fbthrift_field_req_field(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::structure>(srcObj.__fbthrift_field_req_field)) {
}

static void __fbthrift_swap(StructWithRef& lhs, StructWithRef& rhs) { swap(lhs, rhs); }
StructWithRef& StructWithRef::operator=(const StructWithRef& other) {
  StructWithRef tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

StructWithRef::StructWithRef() :
    __fbthrift_field_def_field(std::make_unique<::cpp2::Empty>()),
    __fbthrift_field_req_field(std::make_unique<::cpp2::Empty>()) {
}


StructWithRef::~StructWithRef() {}

StructWithRef::StructWithRef([[maybe_unused]] StructWithRef&& other) noexcept :
    __fbthrift_field_def_field(std::move(other.__fbthrift_field_def_field)),
    __fbthrift_field_opt_field(std::move(other.__fbthrift_field_opt_field)),
    __fbthrift_field_req_field(std::move(other.__fbthrift_field_req_field)) {
}

StructWithRef& StructWithRef::operator=([[maybe_unused]] StructWithRef&& other) noexcept {
    this->__fbthrift_field_def_field = std::move(other.__fbthrift_field_def_field);
    this->__fbthrift_field_opt_field = std::move(other.__fbthrift_field_opt_field);
    this->__fbthrift_field_req_field = std::move(other.__fbthrift_field_req_field);
    return *this;
}


StructWithRef::StructWithRef(apache::thrift::FragileConstructor, ::std::unique_ptr<::cpp2::Empty> def_field__arg, ::std::unique_ptr<::cpp2::Empty> opt_field__arg, ::std::unique_ptr<::cpp2::Empty> req_field__arg) :
    __fbthrift_field_def_field(std::move(def_field__arg)),
    __fbthrift_field_opt_field(std::move(opt_field__arg)),
    __fbthrift_field_req_field(std::move(req_field__arg)) { 
}

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION
#endif

void StructWithRef::__fbthrift_clear() {
  // clear all fields
}

void StructWithRef::__fbthrift_clear_terse_fields() {
}

bool StructWithRef::__fbthrift_is_empty() const {
  return false;
}

bool StructWithRef::operator==([[maybe_unused]] const StructWithRef& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool StructWithRef::operator<([[maybe_unused]] const StructWithRef& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] StructWithRef& a, [[maybe_unused]] StructWithRef& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_def_field, b.__fbthrift_field_def_field);
  swap(a.__fbthrift_field_opt_field, b.__fbthrift_field_opt_field);
  swap(a.__fbthrift_field_req_field, b.__fbthrift_field_req_field);
}


static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        StructWithRef,
        ::apache::thrift::type_class::structure,
        ::cpp2::Empty>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        StructWithRef,
        ::apache::thrift::type_class::structure,
        ::cpp2::Empty>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        StructWithRef,
        ::apache::thrift::type_class::structure,
        ::cpp2::Empty>,
    "inconsistent use of json option");

} // namespace cpp2

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::StructWithBox>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::StructWithBox>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace cpp2 {

std::string_view StructWithBox::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<StructWithBox>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view StructWithBox::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<StructWithBox>::name;
}

StructWithBox::StructWithBox(const StructWithBox&) = default;
StructWithBox& StructWithBox::operator=(const StructWithBox&) = default;
StructWithBox::StructWithBox() {
}


StructWithBox::~StructWithBox() {}

StructWithBox::StructWithBox([[maybe_unused]] StructWithBox&& other) noexcept :
    __fbthrift_field_a(std::move(other.__fbthrift_field_a)),
    __fbthrift_field_b(std::move(other.__fbthrift_field_b)),
    __fbthrift_field_c(std::move(other.__fbthrift_field_c)) {
}

StructWithBox& StructWithBox::operator=([[maybe_unused]] StructWithBox&& other) noexcept {
    this->__fbthrift_field_a = std::move(other.__fbthrift_field_a);
    this->__fbthrift_field_b = std::move(other.__fbthrift_field_b);
    this->__fbthrift_field_c = std::move(other.__fbthrift_field_c);
    return *this;
}


StructWithBox::StructWithBox(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::std::string> a__arg, ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int64_t>> b__arg, ::apache::thrift::detail::boxed_value_ptr<::cpp2::StructWithRef> c__arg) :
    __fbthrift_field_a(std::move(a__arg)),
    __fbthrift_field_b(std::move(b__arg)),
    __fbthrift_field_c(std::move(c__arg)) { 
}

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION
#endif

void StructWithBox::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_a.reset();
  this->__fbthrift_field_b.reset();
  this->__fbthrift_field_c.reset();
}

void StructWithBox::__fbthrift_clear_terse_fields() {
}

bool StructWithBox::__fbthrift_is_empty() const {
  return !(this->__fbthrift_field_a) &&
 !(this->__fbthrift_field_b) &&
 !(this->__fbthrift_field_c);
}

bool StructWithBox::operator==([[maybe_unused]] const StructWithBox& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool StructWithBox::operator<([[maybe_unused]] const StructWithBox& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] StructWithBox& a, [[maybe_unused]] StructWithBox& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_a, b.__fbthrift_field_a);
  swap(a.__fbthrift_field_b, b.__fbthrift_field_b);
  swap(a.__fbthrift_field_c, b.__fbthrift_field_c);
}


static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        StructWithBox,
        ::apache::thrift::type_class::structure,
        ::cpp2::StructWithRef>,
    "inconsistent use of json option");

} // namespace cpp2

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::StructWithInternBox>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::StructWithInternBox>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace cpp2 {

std::string_view StructWithInternBox::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<StructWithInternBox>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view StructWithInternBox::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<StructWithInternBox>::name;
}

StructWithInternBox::StructWithInternBox(const StructWithInternBox&) = default;
StructWithInternBox& StructWithInternBox::operator=(const StructWithInternBox&) = default;
StructWithInternBox::StructWithInternBox() :
    __fbthrift_field_field1(::apache::thrift::detail::boxed_value<::cpp2::Empty>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::struct_t<::cpp2::Empty>>())),
    __fbthrift_field_field2(::apache::thrift::detail::boxed_value<::cpp2::MyField>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::struct_t<::cpp2::MyField>>())) {
}


StructWithInternBox::~StructWithInternBox() {}

StructWithInternBox::StructWithInternBox([[maybe_unused]] StructWithInternBox&& other) noexcept :
    __fbthrift_field_field1(std::move(other.__fbthrift_field_field1)),
    __fbthrift_field_field2(std::move(other.__fbthrift_field_field2)),
    __isset(other.__isset) {
}

StructWithInternBox& StructWithInternBox::operator=([[maybe_unused]] StructWithInternBox&& other) noexcept {
    this->__fbthrift_field_field1 = std::move(other.__fbthrift_field_field1);
    this->__fbthrift_field_field2 = std::move(other.__fbthrift_field_field2);
    __isset = other.__isset;
    return *this;
}


StructWithInternBox::StructWithInternBox(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value<::cpp2::Empty> field1__arg, ::apache::thrift::detail::boxed_value<::cpp2::MyField> field2__arg) :
    __fbthrift_field_field1(std::move(field1__arg)),
    __fbthrift_field_field2(std::move(field2__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION
#endif

void StructWithInternBox::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_field2 = ::apache::thrift::detail::boxed_value<::cpp2::MyField>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::struct_t<::cpp2::MyField>>());
  __isset = {};
}

void StructWithInternBox::__fbthrift_clear_terse_fields() {
}

bool StructWithInternBox::__fbthrift_is_empty() const {
  return false;
}

bool StructWithInternBox::operator==([[maybe_unused]] const StructWithInternBox& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool StructWithInternBox::operator<([[maybe_unused]] const StructWithInternBox& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] StructWithInternBox& a, [[maybe_unused]] StructWithInternBox& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_field1, b.__fbthrift_field_field1);
  swap(a.__fbthrift_field_field2, b.__fbthrift_field_field2);
  swap(a.__isset, b.__isset);
}


static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        StructWithInternBox,
        ::apache::thrift::type_class::structure,
        ::cpp2::Empty>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        StructWithInternBox,
        ::apache::thrift::type_class::structure,
        ::cpp2::MyField>,
    "inconsistent use of json option");

} // namespace cpp2

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::StructWithTerseInternBox>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::StructWithTerseInternBox>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace cpp2 {

std::string_view StructWithTerseInternBox::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<StructWithTerseInternBox>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view StructWithTerseInternBox::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<StructWithTerseInternBox>::name;
}

StructWithTerseInternBox::StructWithTerseInternBox(const StructWithTerseInternBox&) = default;
StructWithTerseInternBox& StructWithTerseInternBox::operator=(const StructWithTerseInternBox&) = default;
StructWithTerseInternBox::StructWithTerseInternBox() :
    __fbthrift_field_field1(::apache::thrift::detail::boxed_value<::cpp2::Empty>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::struct_t<::cpp2::Empty>>())),
    __fbthrift_field_field2(::apache::thrift::detail::boxed_value<::cpp2::MyField>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::struct_t<::cpp2::MyField>>())) {
}


StructWithTerseInternBox::~StructWithTerseInternBox() {}

StructWithTerseInternBox::StructWithTerseInternBox([[maybe_unused]] StructWithTerseInternBox&& other) noexcept :
    __fbthrift_field_field1(std::move(other.__fbthrift_field_field1)),
    __fbthrift_field_field2(std::move(other.__fbthrift_field_field2)) {
}

StructWithTerseInternBox& StructWithTerseInternBox::operator=([[maybe_unused]] StructWithTerseInternBox&& other) noexcept {
    this->__fbthrift_field_field1 = std::move(other.__fbthrift_field_field1);
    this->__fbthrift_field_field2 = std::move(other.__fbthrift_field_field2);
    return *this;
}


StructWithTerseInternBox::StructWithTerseInternBox(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value<::cpp2::Empty> field1__arg, ::apache::thrift::detail::boxed_value<::cpp2::MyField> field2__arg) :
    __fbthrift_field_field1(std::move(field1__arg)),
    __fbthrift_field_field2(std::move(field2__arg)) { 
}

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION
#endif

void StructWithTerseInternBox::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_field2 = ::apache::thrift::detail::boxed_value<::cpp2::MyField>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::struct_t<::cpp2::MyField>>());
}

void StructWithTerseInternBox::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_field2 = ::apache::thrift::detail::boxed_value<::cpp2::MyField>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::struct_t<::cpp2::MyField>>());
}

bool StructWithTerseInternBox::__fbthrift_is_empty() const {
  return (this->__fbthrift_field_field1.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::struct_t<::cpp2::Empty>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::struct_t<::cpp2::Empty>>(*this->__fbthrift_field_field1)) &&
 (this->__fbthrift_field_field2.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::struct_t<::cpp2::MyField>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::struct_t<::cpp2::MyField>>(*this->__fbthrift_field_field2));
}

bool StructWithTerseInternBox::operator==([[maybe_unused]] const StructWithTerseInternBox& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool StructWithTerseInternBox::operator<([[maybe_unused]] const StructWithTerseInternBox& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] StructWithTerseInternBox& a, [[maybe_unused]] StructWithTerseInternBox& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_field1, b.__fbthrift_field_field1);
  swap(a.__fbthrift_field_field2, b.__fbthrift_field_field2);
}


static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        StructWithTerseInternBox,
        ::apache::thrift::type_class::structure,
        ::cpp2::Empty>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        StructWithTerseInternBox,
        ::apache::thrift::type_class::structure,
        ::cpp2::MyField>,
    "inconsistent use of json option");

} // namespace cpp2

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::AdaptedStructWithInternBox>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::AdaptedStructWithInternBox>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace cpp2 {

std::string_view AdaptedStructWithInternBox::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<AdaptedStructWithInternBox>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view AdaptedStructWithInternBox::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<AdaptedStructWithInternBox>::name;
}

AdaptedStructWithInternBox::AdaptedStructWithInternBox(const AdaptedStructWithInternBox& srcObj) :
    __fbthrift_field_field1(srcObj.__fbthrift_field_field1),
    __fbthrift_field_field2(srcObj.__fbthrift_field_field2),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 1>(*__fbthrift_field_field1, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 2>(*__fbthrift_field_field2, *this);
}

static void __fbthrift_swap(AdaptedStructWithInternBox& lhs, AdaptedStructWithInternBox& rhs) { swap(lhs, rhs); }
AdaptedStructWithInternBox& AdaptedStructWithInternBox::operator=(const AdaptedStructWithInternBox& other) {
  AdaptedStructWithInternBox tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

AdaptedStructWithInternBox::AdaptedStructWithInternBox() :
    __fbthrift_field_field1(::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::cpp2::Empty, AdaptedStructWithInternBox>>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithInternBox, ::apache::thrift::field_id<1>>>())),
    __fbthrift_field_field2(::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::cpp2::MyField, AdaptedStructWithInternBox>>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithInternBox, ::apache::thrift::field_id<2>>>())) {
}


AdaptedStructWithInternBox::~AdaptedStructWithInternBox() {}

AdaptedStructWithInternBox::AdaptedStructWithInternBox([[maybe_unused]] AdaptedStructWithInternBox&& other) noexcept :
    __fbthrift_field_field1(std::move(other.__fbthrift_field_field1)),
    __fbthrift_field_field2(std::move(other.__fbthrift_field_field2)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 1>(*__fbthrift_field_field1, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 2>(*__fbthrift_field_field2, *this);
}

AdaptedStructWithInternBox& AdaptedStructWithInternBox::operator=([[maybe_unused]] AdaptedStructWithInternBox&& other) noexcept {
    this->__fbthrift_field_field1 = std::move(other.__fbthrift_field_field1);
    this->__fbthrift_field_field2 = std::move(other.__fbthrift_field_field2);
    __isset = other.__isset;
    return *this;
}


AdaptedStructWithInternBox::AdaptedStructWithInternBox(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::cpp2::Empty, AdaptedStructWithInternBox>> field1__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::cpp2::MyField, AdaptedStructWithInternBox>> field2__arg) :
    __fbthrift_field_field1(std::move(field1__arg)),
    __fbthrift_field_field2(std::move(field2__arg)) { 
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 1>(*__fbthrift_field_field1, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 2>(*__fbthrift_field_field2, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION
#endif

void AdaptedStructWithInternBox::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_field2 = ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::cpp2::MyField, AdaptedStructWithInternBox>>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithInternBox, ::apache::thrift::field_id<2>>>());
  __isset = {};
}

void AdaptedStructWithInternBox::__fbthrift_clear_terse_fields() {
}

bool AdaptedStructWithInternBox::__fbthrift_is_empty() const {
  return false;
}

bool AdaptedStructWithInternBox::operator==([[maybe_unused]] const AdaptedStructWithInternBox& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool AdaptedStructWithInternBox::operator<([[maybe_unused]] const AdaptedStructWithInternBox& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] AdaptedStructWithInternBox& a, [[maybe_unused]] AdaptedStructWithInternBox& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_field1, b.__fbthrift_field_field1);
  swap(a.__fbthrift_field_field2, b.__fbthrift_field_field2);
  swap(a.__isset, b.__isset);
}


static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        AdaptedStructWithInternBox,
        ::apache::thrift::type_class::structure,
        ::cpp2::Empty>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        AdaptedStructWithInternBox,
        ::apache::thrift::type_class::structure,
        ::cpp2::MyField>,
    "inconsistent use of json option");

} // namespace cpp2

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::AdaptedStructWithTerseInternBox>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::AdaptedStructWithTerseInternBox>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace cpp2 {

std::string_view AdaptedStructWithTerseInternBox::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<AdaptedStructWithTerseInternBox>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view AdaptedStructWithTerseInternBox::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<AdaptedStructWithTerseInternBox>::name;
}

AdaptedStructWithTerseInternBox::AdaptedStructWithTerseInternBox(const AdaptedStructWithTerseInternBox& srcObj) :
    __fbthrift_field_field1(srcObj.__fbthrift_field_field1),
    __fbthrift_field_field2(srcObj.__fbthrift_field_field2) {
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 1>(*__fbthrift_field_field1, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 2>(*__fbthrift_field_field2, *this);
}

static void __fbthrift_swap(AdaptedStructWithTerseInternBox& lhs, AdaptedStructWithTerseInternBox& rhs) { swap(lhs, rhs); }
AdaptedStructWithTerseInternBox& AdaptedStructWithTerseInternBox::operator=(const AdaptedStructWithTerseInternBox& other) {
  AdaptedStructWithTerseInternBox tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

AdaptedStructWithTerseInternBox::AdaptedStructWithTerseInternBox() :
    __fbthrift_field_field1(::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::cpp2::Empty, AdaptedStructWithTerseInternBox>>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithTerseInternBox, ::apache::thrift::field_id<1>>>())),
    __fbthrift_field_field2(::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::cpp2::MyField, AdaptedStructWithTerseInternBox>>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithTerseInternBox, ::apache::thrift::field_id<2>>>())) {
}


AdaptedStructWithTerseInternBox::~AdaptedStructWithTerseInternBox() {}

AdaptedStructWithTerseInternBox::AdaptedStructWithTerseInternBox([[maybe_unused]] AdaptedStructWithTerseInternBox&& other) noexcept :
    __fbthrift_field_field1(std::move(other.__fbthrift_field_field1)),
    __fbthrift_field_field2(std::move(other.__fbthrift_field_field2)) {
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 1>(*__fbthrift_field_field1, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 2>(*__fbthrift_field_field2, *this);
}

AdaptedStructWithTerseInternBox& AdaptedStructWithTerseInternBox::operator=([[maybe_unused]] AdaptedStructWithTerseInternBox&& other) noexcept {
    this->__fbthrift_field_field1 = std::move(other.__fbthrift_field_field1);
    this->__fbthrift_field_field2 = std::move(other.__fbthrift_field_field2);
    return *this;
}


AdaptedStructWithTerseInternBox::AdaptedStructWithTerseInternBox(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::cpp2::Empty, AdaptedStructWithTerseInternBox>> field1__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::cpp2::MyField, AdaptedStructWithTerseInternBox>> field2__arg) :
    __fbthrift_field_field1(std::move(field1__arg)),
    __fbthrift_field_field2(std::move(field2__arg)) { 
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 1>(*__fbthrift_field_field1, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 2>(*__fbthrift_field_field2, *this);
}

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION
#endif

void AdaptedStructWithTerseInternBox::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_field2 = ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::cpp2::MyField, AdaptedStructWithTerseInternBox>>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithTerseInternBox, ::apache::thrift::field_id<2>>>());
}

void AdaptedStructWithTerseInternBox::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_field2 = ::apache::thrift::detail::boxed_value<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::cpp2::MyField, AdaptedStructWithTerseInternBox>>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithTerseInternBox, ::apache::thrift::field_id<2>>>());
}

bool AdaptedStructWithTerseInternBox::__fbthrift_is_empty() const {
  return (this->__fbthrift_field_field1.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithTerseInternBox, ::apache::thrift::field_id<1>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::op::get_field_tag<AdaptedStructWithTerseInternBox, ::apache::thrift::field_id<1>>>(*this->__fbthrift_field_field1)) &&
 (this->__fbthrift_field_field2.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::op::get_field_tag<AdaptedStructWithTerseInternBox, ::apache::thrift::field_id<2>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::op::get_field_tag<AdaptedStructWithTerseInternBox, ::apache::thrift::field_id<2>>>(*this->__fbthrift_field_field2));
}

bool AdaptedStructWithTerseInternBox::operator==([[maybe_unused]] const AdaptedStructWithTerseInternBox& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool AdaptedStructWithTerseInternBox::operator<([[maybe_unused]] const AdaptedStructWithTerseInternBox& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] AdaptedStructWithTerseInternBox& a, [[maybe_unused]] AdaptedStructWithTerseInternBox& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_field1, b.__fbthrift_field_field1);
  swap(a.__fbthrift_field_field2, b.__fbthrift_field_field2);
}


static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        AdaptedStructWithTerseInternBox,
        ::apache::thrift::type_class::structure,
        ::cpp2::Empty>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        AdaptedStructWithTerseInternBox,
        ::apache::thrift::type_class::structure,
        ::cpp2::MyField>,
    "inconsistent use of json option");

} // namespace cpp2

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::StructWithRefTypeUnique>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::StructWithRefTypeUnique>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace cpp2 {

std::string_view StructWithRefTypeUnique::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<StructWithRefTypeUnique>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view StructWithRefTypeUnique::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<StructWithRefTypeUnique>::name;
}

StructWithRefTypeUnique::StructWithRefTypeUnique(const StructWithRefTypeUnique& srcObj) :
    __fbthrift_field_def_field(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::structure>(srcObj.__fbthrift_field_def_field)),
    __fbthrift_field_opt_field(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::structure>(srcObj.__fbthrift_field_opt_field)),
    __fbthrift_field_req_field(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::structure>(srcObj.__fbthrift_field_req_field)) {
}

static void __fbthrift_swap(StructWithRefTypeUnique& lhs, StructWithRefTypeUnique& rhs) { swap(lhs, rhs); }
StructWithRefTypeUnique& StructWithRefTypeUnique::operator=(const StructWithRefTypeUnique& other) {
  StructWithRefTypeUnique tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

StructWithRefTypeUnique::StructWithRefTypeUnique() :
    __fbthrift_field_def_field(std::make_unique<::cpp2::Empty>()),
    __fbthrift_field_req_field(std::make_unique<::cpp2::Empty>()) {
}


StructWithRefTypeUnique::~StructWithRefTypeUnique() {}

StructWithRefTypeUnique::StructWithRefTypeUnique([[maybe_unused]] StructWithRefTypeUnique&& other) noexcept :
    __fbthrift_field_def_field(std::move(other.__fbthrift_field_def_field)),
    __fbthrift_field_opt_field(std::move(other.__fbthrift_field_opt_field)),
    __fbthrift_field_req_field(std::move(other.__fbthrift_field_req_field)) {
}

StructWithRefTypeUnique& StructWithRefTypeUnique::operator=([[maybe_unused]] StructWithRefTypeUnique&& other) noexcept {
    this->__fbthrift_field_def_field = std::move(other.__fbthrift_field_def_field);
    this->__fbthrift_field_opt_field = std::move(other.__fbthrift_field_opt_field);
    this->__fbthrift_field_req_field = std::move(other.__fbthrift_field_req_field);
    return *this;
}


StructWithRefTypeUnique::StructWithRefTypeUnique(apache::thrift::FragileConstructor, ::std::unique_ptr<::cpp2::Empty> def_field__arg, ::std::unique_ptr<::cpp2::Empty> opt_field__arg, ::std::unique_ptr<::cpp2::Empty> req_field__arg) :
    __fbthrift_field_def_field(std::move(def_field__arg)),
    __fbthrift_field_opt_field(std::move(opt_field__arg)),
    __fbthrift_field_req_field(std::move(req_field__arg)) { 
}

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION
#endif

void StructWithRefTypeUnique::__fbthrift_clear() {
  // clear all fields
}

void StructWithRefTypeUnique::__fbthrift_clear_terse_fields() {
}

bool StructWithRefTypeUnique::__fbthrift_is_empty() const {
  return false;
}

bool StructWithRefTypeUnique::operator==([[maybe_unused]] const StructWithRefTypeUnique& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool StructWithRefTypeUnique::operator<([[maybe_unused]] const StructWithRefTypeUnique& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] StructWithRefTypeUnique& a, [[maybe_unused]] StructWithRefTypeUnique& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_def_field, b.__fbthrift_field_def_field);
  swap(a.__fbthrift_field_opt_field, b.__fbthrift_field_opt_field);
  swap(a.__fbthrift_field_req_field, b.__fbthrift_field_req_field);
}


static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        StructWithRefTypeUnique,
        ::apache::thrift::type_class::structure,
        ::cpp2::Empty>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        StructWithRefTypeUnique,
        ::apache::thrift::type_class::structure,
        ::cpp2::Empty>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        StructWithRefTypeUnique,
        ::apache::thrift::type_class::structure,
        ::cpp2::Empty>,
    "inconsistent use of json option");

} // namespace cpp2

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::StructWithRefTypeShared>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::StructWithRefTypeShared>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace cpp2 {

std::string_view StructWithRefTypeShared::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<StructWithRefTypeShared>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view StructWithRefTypeShared::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<StructWithRefTypeShared>::name;
}

StructWithRefTypeShared::StructWithRefTypeShared(const StructWithRefTypeShared&) = default;
StructWithRefTypeShared& StructWithRefTypeShared::operator=(const StructWithRefTypeShared&) = default;
StructWithRefTypeShared::StructWithRefTypeShared() :
    __fbthrift_field_def_field(std::make_shared<::cpp2::Empty>()),
    __fbthrift_field_req_field(std::make_shared<::cpp2::Empty>()) {
}


StructWithRefTypeShared::~StructWithRefTypeShared() {}

StructWithRefTypeShared::StructWithRefTypeShared([[maybe_unused]] StructWithRefTypeShared&& other) noexcept :
    __fbthrift_field_def_field(std::move(other.__fbthrift_field_def_field)),
    __fbthrift_field_opt_field(std::move(other.__fbthrift_field_opt_field)),
    __fbthrift_field_req_field(std::move(other.__fbthrift_field_req_field)) {
}

StructWithRefTypeShared& StructWithRefTypeShared::operator=([[maybe_unused]] StructWithRefTypeShared&& other) noexcept {
    this->__fbthrift_field_def_field = std::move(other.__fbthrift_field_def_field);
    this->__fbthrift_field_opt_field = std::move(other.__fbthrift_field_opt_field);
    this->__fbthrift_field_req_field = std::move(other.__fbthrift_field_req_field);
    return *this;
}


StructWithRefTypeShared::StructWithRefTypeShared(apache::thrift::FragileConstructor, ::std::shared_ptr<::cpp2::Empty> def_field__arg, ::std::shared_ptr<::cpp2::Empty> opt_field__arg, ::std::shared_ptr<::cpp2::Empty> req_field__arg) :
    __fbthrift_field_def_field(std::move(def_field__arg)),
    __fbthrift_field_opt_field(std::move(opt_field__arg)),
    __fbthrift_field_req_field(std::move(req_field__arg)) { 
}

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION
#endif

void StructWithRefTypeShared::__fbthrift_clear() {
  // clear all fields
}

void StructWithRefTypeShared::__fbthrift_clear_terse_fields() {
}

bool StructWithRefTypeShared::__fbthrift_is_empty() const {
  return false;
}

bool StructWithRefTypeShared::operator==([[maybe_unused]] const StructWithRefTypeShared& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool StructWithRefTypeShared::operator<([[maybe_unused]] const StructWithRefTypeShared& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] StructWithRefTypeShared& a, [[maybe_unused]] StructWithRefTypeShared& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_def_field, b.__fbthrift_field_def_field);
  swap(a.__fbthrift_field_opt_field, b.__fbthrift_field_opt_field);
  swap(a.__fbthrift_field_req_field, b.__fbthrift_field_req_field);
}


static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        StructWithRefTypeShared,
        ::apache::thrift::type_class::structure,
        ::cpp2::Empty>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        StructWithRefTypeShared,
        ::apache::thrift::type_class::structure,
        ::cpp2::Empty>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        StructWithRefTypeShared,
        ::apache::thrift::type_class::structure,
        ::cpp2::Empty>,
    "inconsistent use of json option");

} // namespace cpp2

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::StructWithRefTypeSharedConst>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::StructWithRefTypeSharedConst>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace cpp2 {

std::string_view StructWithRefTypeSharedConst::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<StructWithRefTypeSharedConst>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view StructWithRefTypeSharedConst::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<StructWithRefTypeSharedConst>::name;
}

StructWithRefTypeSharedConst::StructWithRefTypeSharedConst(const StructWithRefTypeSharedConst&) = default;
StructWithRefTypeSharedConst& StructWithRefTypeSharedConst::operator=(const StructWithRefTypeSharedConst&) = default;
StructWithRefTypeSharedConst::StructWithRefTypeSharedConst() :
    __fbthrift_field_def_field(std::make_shared<::cpp2::Empty>()),
    __fbthrift_field_req_field(std::make_shared<::cpp2::Empty>()) {
}


StructWithRefTypeSharedConst::~StructWithRefTypeSharedConst() {}

StructWithRefTypeSharedConst::StructWithRefTypeSharedConst([[maybe_unused]] StructWithRefTypeSharedConst&& other) noexcept :
    __fbthrift_field_def_field(std::move(other.__fbthrift_field_def_field)),
    __fbthrift_field_opt_field(std::move(other.__fbthrift_field_opt_field)),
    __fbthrift_field_req_field(std::move(other.__fbthrift_field_req_field)) {
}

StructWithRefTypeSharedConst& StructWithRefTypeSharedConst::operator=([[maybe_unused]] StructWithRefTypeSharedConst&& other) noexcept {
    this->__fbthrift_field_def_field = std::move(other.__fbthrift_field_def_field);
    this->__fbthrift_field_opt_field = std::move(other.__fbthrift_field_opt_field);
    this->__fbthrift_field_req_field = std::move(other.__fbthrift_field_req_field);
    return *this;
}


StructWithRefTypeSharedConst::StructWithRefTypeSharedConst(apache::thrift::FragileConstructor, ::std::shared_ptr<const ::cpp2::Empty> def_field__arg, ::std::shared_ptr<const ::cpp2::Empty> opt_field__arg, ::std::shared_ptr<const ::cpp2::Empty> req_field__arg) :
    __fbthrift_field_def_field(std::move(def_field__arg)),
    __fbthrift_field_opt_field(std::move(opt_field__arg)),
    __fbthrift_field_req_field(std::move(req_field__arg)) { 
}

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION
#endif

void StructWithRefTypeSharedConst::__fbthrift_clear() {
  // clear all fields
}

void StructWithRefTypeSharedConst::__fbthrift_clear_terse_fields() {
}

bool StructWithRefTypeSharedConst::__fbthrift_is_empty() const {
  return false;
}

bool StructWithRefTypeSharedConst::operator==([[maybe_unused]] const StructWithRefTypeSharedConst& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool StructWithRefTypeSharedConst::operator<([[maybe_unused]] const StructWithRefTypeSharedConst& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] StructWithRefTypeSharedConst& a, [[maybe_unused]] StructWithRefTypeSharedConst& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_def_field, b.__fbthrift_field_def_field);
  swap(a.__fbthrift_field_opt_field, b.__fbthrift_field_opt_field);
  swap(a.__fbthrift_field_req_field, b.__fbthrift_field_req_field);
}


static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        StructWithRefTypeSharedConst,
        ::apache::thrift::type_class::structure,
        ::cpp2::Empty>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        StructWithRefTypeSharedConst,
        ::apache::thrift::type_class::structure,
        ::cpp2::Empty>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        StructWithRefTypeSharedConst,
        ::apache::thrift::type_class::structure,
        ::cpp2::Empty>,
    "inconsistent use of json option");

} // namespace cpp2

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::StructWithRefAndAnnotCppNoexceptMoveCtor>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::StructWithRefAndAnnotCppNoexceptMoveCtor>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace cpp2 {

std::string_view StructWithRefAndAnnotCppNoexceptMoveCtor::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<StructWithRefAndAnnotCppNoexceptMoveCtor>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view StructWithRefAndAnnotCppNoexceptMoveCtor::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<StructWithRefAndAnnotCppNoexceptMoveCtor>::name;
}

StructWithRefAndAnnotCppNoexceptMoveCtor::StructWithRefAndAnnotCppNoexceptMoveCtor(const StructWithRefAndAnnotCppNoexceptMoveCtor& srcObj) :
    __fbthrift_field_def_field(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::structure>(srcObj.__fbthrift_field_def_field)) {
}

static void __fbthrift_swap(StructWithRefAndAnnotCppNoexceptMoveCtor& lhs, StructWithRefAndAnnotCppNoexceptMoveCtor& rhs) { swap(lhs, rhs); }
StructWithRefAndAnnotCppNoexceptMoveCtor& StructWithRefAndAnnotCppNoexceptMoveCtor::operator=(const StructWithRefAndAnnotCppNoexceptMoveCtor& other) {
  StructWithRefAndAnnotCppNoexceptMoveCtor tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

StructWithRefAndAnnotCppNoexceptMoveCtor::StructWithRefAndAnnotCppNoexceptMoveCtor() :
    __fbthrift_field_def_field(std::make_unique<::cpp2::Empty>()) {
}


StructWithRefAndAnnotCppNoexceptMoveCtor::~StructWithRefAndAnnotCppNoexceptMoveCtor() {}

StructWithRefAndAnnotCppNoexceptMoveCtor::StructWithRefAndAnnotCppNoexceptMoveCtor([[maybe_unused]] StructWithRefAndAnnotCppNoexceptMoveCtor&& other) noexcept :
    __fbthrift_field_def_field(std::move(other.__fbthrift_field_def_field)) {
}

StructWithRefAndAnnotCppNoexceptMoveCtor& StructWithRefAndAnnotCppNoexceptMoveCtor::operator=([[maybe_unused]] StructWithRefAndAnnotCppNoexceptMoveCtor&& other) noexcept {
    this->__fbthrift_field_def_field = std::move(other.__fbthrift_field_def_field);
    return *this;
}


StructWithRefAndAnnotCppNoexceptMoveCtor::StructWithRefAndAnnotCppNoexceptMoveCtor(apache::thrift::FragileConstructor, ::std::unique_ptr<::cpp2::Empty> def_field__arg) :
    __fbthrift_field_def_field(std::move(def_field__arg)) { 
}

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION
#endif

void StructWithRefAndAnnotCppNoexceptMoveCtor::__fbthrift_clear() {
  // clear all fields
}

void StructWithRefAndAnnotCppNoexceptMoveCtor::__fbthrift_clear_terse_fields() {
}

bool StructWithRefAndAnnotCppNoexceptMoveCtor::__fbthrift_is_empty() const {
  return false;
}

bool StructWithRefAndAnnotCppNoexceptMoveCtor::operator==([[maybe_unused]] const StructWithRefAndAnnotCppNoexceptMoveCtor& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool StructWithRefAndAnnotCppNoexceptMoveCtor::operator<([[maybe_unused]] const StructWithRefAndAnnotCppNoexceptMoveCtor& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] StructWithRefAndAnnotCppNoexceptMoveCtor& a, [[maybe_unused]] StructWithRefAndAnnotCppNoexceptMoveCtor& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_def_field, b.__fbthrift_field_def_field);
}


static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        StructWithRefAndAnnotCppNoexceptMoveCtor,
        ::apache::thrift::type_class::structure,
        ::cpp2::Empty>,
    "inconsistent use of json option");

} // namespace cpp2

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::StructWithString>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::StructWithString>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace cpp2 {

std::string_view StructWithString::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<StructWithString>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view StructWithString::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<StructWithString>::name;
}

StructWithString::StructWithString(const StructWithString& srcObj) :
    __fbthrift_field_def_unique_string_ref(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::string>(srcObj.__fbthrift_field_def_unique_string_ref)),
    __fbthrift_field_def_shared_string_ref(srcObj.__fbthrift_field_def_shared_string_ref),
    __fbthrift_field_def_shared_string_const_ref(srcObj.__fbthrift_field_def_shared_string_const_ref),
    __fbthrift_field_unique_string_ref(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::string>(srcObj.__fbthrift_field_unique_string_ref)),
    __fbthrift_field_shared_string_ref(srcObj.__fbthrift_field_shared_string_ref) {
}

static void __fbthrift_swap(StructWithString& lhs, StructWithString& rhs) { swap(lhs, rhs); }
StructWithString& StructWithString::operator=(const StructWithString& other) {
  StructWithString tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

StructWithString::StructWithString() :
    __fbthrift_field_def_unique_string_ref(std::make_unique<::std::string>(apache::thrift::StringTraits<::std::string>::fromStringLiteral("..."))),
    __fbthrift_field_def_shared_string_ref(std::make_shared<::std::string>(apache::thrift::StringTraits<::std::string>::fromStringLiteral("..."))),
    __fbthrift_field_def_shared_string_const_ref(std::make_shared<::std::string>(apache::thrift::StringTraits<::std::string>::fromStringLiteral("..."))),
    __fbthrift_field_unique_string_ref(std::make_unique<::std::string>()),
    __fbthrift_field_shared_string_ref(std::make_shared<::std::string>()) {
}


StructWithString::~StructWithString() {}

StructWithString::StructWithString([[maybe_unused]] StructWithString&& other) noexcept :
    __fbthrift_field_def_unique_string_ref(std::move(other.__fbthrift_field_def_unique_string_ref)),
    __fbthrift_field_def_shared_string_ref(std::move(other.__fbthrift_field_def_shared_string_ref)),
    __fbthrift_field_def_shared_string_const_ref(std::move(other.__fbthrift_field_def_shared_string_const_ref)),
    __fbthrift_field_unique_string_ref(std::move(other.__fbthrift_field_unique_string_ref)),
    __fbthrift_field_shared_string_ref(std::move(other.__fbthrift_field_shared_string_ref)) {
}

StructWithString& StructWithString::operator=([[maybe_unused]] StructWithString&& other) noexcept {
    this->__fbthrift_field_def_unique_string_ref = std::move(other.__fbthrift_field_def_unique_string_ref);
    this->__fbthrift_field_def_shared_string_ref = std::move(other.__fbthrift_field_def_shared_string_ref);
    this->__fbthrift_field_def_shared_string_const_ref = std::move(other.__fbthrift_field_def_shared_string_const_ref);
    this->__fbthrift_field_unique_string_ref = std::move(other.__fbthrift_field_unique_string_ref);
    this->__fbthrift_field_shared_string_ref = std::move(other.__fbthrift_field_shared_string_ref);
    return *this;
}


StructWithString::StructWithString(apache::thrift::FragileConstructor, ::std::unique_ptr<::std::string> def_unique_string_ref__arg, ::std::shared_ptr<::std::string> def_shared_string_ref__arg, ::std::shared_ptr<const ::std::string> def_shared_string_const_ref__arg, ::std::unique_ptr<::std::string> unique_string_ref__arg, ::std::shared_ptr<::std::string> shared_string_ref__arg) :
    __fbthrift_field_def_unique_string_ref(std::move(def_unique_string_ref__arg)),
    __fbthrift_field_def_shared_string_ref(std::move(def_shared_string_ref__arg)),
    __fbthrift_field_def_shared_string_const_ref(std::move(def_shared_string_const_ref__arg)),
    __fbthrift_field_unique_string_ref(std::move(unique_string_ref__arg)),
    __fbthrift_field_shared_string_ref(std::move(shared_string_ref__arg)) { 
}

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION
#endif

void StructWithString::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_def_unique_string_ref = ::apache::thrift::detail::make_mutable_smart_ptr<::std::unique_ptr<::std::string>>();
  this->__fbthrift_field_def_shared_string_ref = ::apache::thrift::detail::make_mutable_smart_ptr<::std::shared_ptr<::std::string>>();
  this->__fbthrift_field_def_shared_string_const_ref = ::apache::thrift::detail::make_mutable_smart_ptr<::std::shared_ptr<const ::std::string>>();
  this->__fbthrift_field_unique_string_ref = ::apache::thrift::detail::make_mutable_smart_ptr<::std::unique_ptr<::std::string>>();
  this->__fbthrift_field_shared_string_ref = ::apache::thrift::detail::make_mutable_smart_ptr<::std::shared_ptr<::std::string>>();
}

void StructWithString::__fbthrift_clear_terse_fields() {
}

bool StructWithString::__fbthrift_is_empty() const {
  return false;
}

bool StructWithString::operator==([[maybe_unused]] const StructWithString& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool StructWithString::operator<([[maybe_unused]] const StructWithString& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] StructWithString& a, [[maybe_unused]] StructWithString& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_def_unique_string_ref, b.__fbthrift_field_def_unique_string_ref);
  swap(a.__fbthrift_field_def_shared_string_ref, b.__fbthrift_field_def_shared_string_ref);
  swap(a.__fbthrift_field_def_shared_string_const_ref, b.__fbthrift_field_def_shared_string_const_ref);
  swap(a.__fbthrift_field_unique_string_ref, b.__fbthrift_field_unique_string_ref);
  swap(a.__fbthrift_field_shared_string_ref, b.__fbthrift_field_shared_string_ref);
}



} // namespace cpp2

namespace cpp2 { namespace {
[[maybe_unused]] FOLLY_ERASE void validateAdapters() {
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter1, 1, ::cpp2::Empty, ::cpp2::AdaptedStructWithInternBox>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter1, 2, ::cpp2::MyField, ::cpp2::AdaptedStructWithInternBox>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter1, 1, ::cpp2::Empty, ::cpp2::AdaptedStructWithTerseInternBox>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter1, 2, ::cpp2::MyField, ::cpp2::AdaptedStructWithTerseInternBox>();
}
}} // namespace cpp2
namespace apache::thrift::detail::annotation {
}
