/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.patch;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import com.google.common.collect.*;
import java.util.*;
import javax.annotation.Nullable;
import org.apache.thrift.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;
import static com.google.common.base.MoreObjects.toStringHelper;
import static com.google.common.base.MoreObjects.ToStringHelper;

@SwiftGenerated
@com.facebook.swift.codec.ThriftStruct(value="MyStructEnsureStruct", builder=MyStructEnsureStruct.Builder.class)
public final class MyStructEnsureStruct implements com.facebook.thrift.payload.ThriftSerializable {

    @ThriftConstructor
    public MyStructEnsureStruct(
        @com.facebook.swift.codec.ThriftField(value=-32, name="structWithCustomDefault", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final test.fixtures.patch.MyDataWithCustomDefault structWithCustomDefault,
        @com.facebook.swift.codec.ThriftField(value=-31, name="i32WithCustomDefault", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final Integer i32WithCustomDefault,
        @com.facebook.swift.codec.ThriftField(value=-30, name="mapMap", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final Map<String, Map<String, Integer>> mapMap,
        @com.facebook.swift.codec.ThriftField(value=-29, name="listMap", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final List<Map<String, Integer>> listMap,
        @com.facebook.swift.codec.ThriftField(value=-28, name="optMapVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final Map<String, String> optMapVal,
        @com.facebook.swift.codec.ThriftField(value=-27, name="optSetVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final Set<String> optSetVal,
        @com.facebook.swift.codec.ThriftField(value=-26, name="optListVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final List<Short> optListVal,
        @com.facebook.swift.codec.ThriftField(value=-25, name="optLateStructVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final test.fixtures.patch.LateDefStruct optLateStructVal,
        @com.facebook.swift.codec.ThriftField(value=-24, name="optStructVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final test.fixtures.patch.MyData optStructVal,
        @com.facebook.swift.codec.ThriftField(value=-23, name="optEnumVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final test.fixtures.patch.MyEnum optEnumVal,
        @com.facebook.swift.codec.ThriftField(value=-22, name="optBinaryVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final byte[] optBinaryVal,
        @com.facebook.swift.codec.ThriftField(value=-21, name="optStringVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final String optStringVal,
        @com.facebook.swift.codec.ThriftField(value=-20, name="optDoubleVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final Double optDoubleVal,
        @com.facebook.swift.codec.ThriftField(value=-19, name="optFloatVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final Float optFloatVal,
        @com.facebook.swift.codec.ThriftField(value=-18, name="optI64Val", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final Long optI64Val,
        @com.facebook.swift.codec.ThriftField(value=-17, name="optI32Val", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final Integer optI32Val,
        @com.facebook.swift.codec.ThriftField(value=-16, name="optI16Val", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final Short optI16Val,
        @com.facebook.swift.codec.ThriftField(value=-15, name="optByteVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final Byte optByteVal,
        @com.facebook.swift.codec.ThriftField(value=-14, name="optBoolVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final Boolean optBoolVal,
        @com.facebook.swift.codec.ThriftField(value=-13, name="lateStructVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final test.fixtures.patch.LateDefStruct lateStructVal,
        @com.facebook.swift.codec.ThriftField(value=-12, name="unionVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final test.fixtures.patch.MyUnion unionVal,
        @com.facebook.swift.codec.ThriftField(value=-11, name="structVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final test.fixtures.patch.MyData structVal,
        @com.facebook.swift.codec.ThriftField(value=-10, name="enumVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final test.fixtures.patch.MyEnum enumVal,
        @com.facebook.swift.codec.ThriftField(value=-9, name="binaryVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final byte[] binaryVal,
        @com.facebook.swift.codec.ThriftField(value=-8, name="stringVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final String stringVal,
        @com.facebook.swift.codec.ThriftField(value=-7, name="doubleVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final Double doubleVal,
        @com.facebook.swift.codec.ThriftField(value=-6, name="floatVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final Float floatVal,
        @com.facebook.swift.codec.ThriftField(value=-5, name="i64Val", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final Long i64Val,
        @com.facebook.swift.codec.ThriftField(value=-4, name="i32Val", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final Integer i32Val,
        @com.facebook.swift.codec.ThriftField(value=-3, name="i16Val", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final Short i16Val,
        @com.facebook.swift.codec.ThriftField(value=-2, name="byteVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final Byte byteVal,
        @com.facebook.swift.codec.ThriftField(value=-1, name="boolVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL) final Boolean boolVal,
        @com.facebook.swift.codec.ThriftField(value=1, name="structWithFieldCustomDefault", requiredness=Requiredness.OPTIONAL) final test.fixtures.patch.MyData structWithFieldCustomDefault
    ) {
        this.structWithCustomDefault = structWithCustomDefault;
        this.i32WithCustomDefault = i32WithCustomDefault;
        this.mapMap = mapMap;
        this.listMap = listMap;
        this.optMapVal = optMapVal;
        this.optSetVal = optSetVal;
        this.optListVal = optListVal;
        this.optLateStructVal = optLateStructVal;
        this.optStructVal = optStructVal;
        this.optEnumVal = optEnumVal;
        this.optBinaryVal = optBinaryVal;
        this.optStringVal = optStringVal;
        this.optDoubleVal = optDoubleVal;
        this.optFloatVal = optFloatVal;
        this.optI64Val = optI64Val;
        this.optI32Val = optI32Val;
        this.optI16Val = optI16Val;
        this.optByteVal = optByteVal;
        this.optBoolVal = optBoolVal;
        this.lateStructVal = lateStructVal;
        this.unionVal = unionVal;
        this.structVal = structVal;
        this.enumVal = enumVal;
        this.binaryVal = binaryVal;
        this.stringVal = stringVal;
        this.doubleVal = doubleVal;
        this.floatVal = floatVal;
        this.i64Val = i64Val;
        this.i32Val = i32Val;
        this.i16Val = i16Val;
        this.byteVal = byteVal;
        this.boolVal = boolVal;
        this.structWithFieldCustomDefault = structWithFieldCustomDefault;
    }
    
    @ThriftConstructor
    protected MyStructEnsureStruct() {
      this.structWithCustomDefault = null;
      this.i32WithCustomDefault = null;
      this.mapMap = null;
      this.listMap = null;
      this.optMapVal = null;
      this.optSetVal = null;
      this.optListVal = null;
      this.optLateStructVal = null;
      this.optStructVal = null;
      this.optEnumVal = null;
      this.optBinaryVal = null;
      this.optStringVal = null;
      this.optDoubleVal = null;
      this.optFloatVal = null;
      this.optI64Val = null;
      this.optI32Val = null;
      this.optI16Val = null;
      this.optByteVal = null;
      this.optBoolVal = null;
      this.lateStructVal = null;
      this.unionVal = null;
      this.structVal = null;
      this.enumVal = null;
      this.binaryVal = null;
      this.stringVal = null;
      this.doubleVal = null;
      this.floatVal = null;
      this.i64Val = null;
      this.i32Val = null;
      this.i16Val = null;
      this.byteVal = null;
      this.boolVal = null;
      this.structWithFieldCustomDefault = null;
    }
    
    public static class Builder {
    
        private test.fixtures.patch.MyDataWithCustomDefault structWithCustomDefault = null;
        private Integer i32WithCustomDefault = null;
        private Map<String, Map<String, Integer>> mapMap = null;
        private List<Map<String, Integer>> listMap = null;
        private Map<String, String> optMapVal = null;
        private Set<String> optSetVal = null;
        private List<Short> optListVal = null;
        private test.fixtures.patch.LateDefStruct optLateStructVal = null;
        private test.fixtures.patch.MyData optStructVal = null;
        private test.fixtures.patch.MyEnum optEnumVal = null;
        private byte[] optBinaryVal = null;
        private String optStringVal = null;
        private Double optDoubleVal = null;
        private Float optFloatVal = null;
        private Long optI64Val = null;
        private Integer optI32Val = null;
        private Short optI16Val = null;
        private Byte optByteVal = null;
        private Boolean optBoolVal = null;
        private test.fixtures.patch.LateDefStruct lateStructVal = null;
        private test.fixtures.patch.MyUnion unionVal = null;
        private test.fixtures.patch.MyData structVal = null;
        private test.fixtures.patch.MyEnum enumVal = null;
        private byte[] binaryVal = null;
        private String stringVal = null;
        private Double doubleVal = null;
        private Float floatVal = null;
        private Long i64Val = null;
        private Integer i32Val = null;
        private Short i16Val = null;
        private Byte byteVal = null;
        private Boolean boolVal = null;
        private test.fixtures.patch.MyData structWithFieldCustomDefault = null;
    
        @com.facebook.swift.codec.ThriftField(value=-32, name="structWithCustomDefault", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setStructWithCustomDefault(test.fixtures.patch.MyDataWithCustomDefault structWithCustomDefault) {
            this.structWithCustomDefault = structWithCustomDefault;
            return this;
        }
    
        public test.fixtures.patch.MyDataWithCustomDefault getStructWithCustomDefault() { return structWithCustomDefault; }
    
            @com.facebook.swift.codec.ThriftField(value=-31, name="i32WithCustomDefault", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setI32WithCustomDefault(Integer i32WithCustomDefault) {
            this.i32WithCustomDefault = i32WithCustomDefault;
            return this;
        }
    
        public Integer getI32WithCustomDefault() { return i32WithCustomDefault; }
    
            @com.facebook.swift.codec.ThriftField(value=-30, name="mapMap", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setMapMap(Map<String, Map<String, Integer>> mapMap) {
            this.mapMap = mapMap;
            return this;
        }
    
        public Map<String, Map<String, Integer>> getMapMap() { return mapMap; }
    
            @com.facebook.swift.codec.ThriftField(value=-29, name="listMap", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setListMap(List<Map<String, Integer>> listMap) {
            this.listMap = listMap;
            return this;
        }
    
        public List<Map<String, Integer>> getListMap() { return listMap; }
    
            @com.facebook.swift.codec.ThriftField(value=-28, name="optMapVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setOptMapVal(Map<String, String> optMapVal) {
            this.optMapVal = optMapVal;
            return this;
        }
    
        public Map<String, String> getOptMapVal() { return optMapVal; }
    
            @com.facebook.swift.codec.ThriftField(value=-27, name="optSetVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setOptSetVal(Set<String> optSetVal) {
            this.optSetVal = optSetVal;
            return this;
        }
    
        public Set<String> getOptSetVal() { return optSetVal; }
    
            @com.facebook.swift.codec.ThriftField(value=-26, name="optListVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setOptListVal(List<Short> optListVal) {
            this.optListVal = optListVal;
            return this;
        }
    
        public List<Short> getOptListVal() { return optListVal; }
    
            @com.facebook.swift.codec.ThriftField(value=-25, name="optLateStructVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setOptLateStructVal(test.fixtures.patch.LateDefStruct optLateStructVal) {
            this.optLateStructVal = optLateStructVal;
            return this;
        }
    
        public test.fixtures.patch.LateDefStruct getOptLateStructVal() { return optLateStructVal; }
    
            @com.facebook.swift.codec.ThriftField(value=-24, name="optStructVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setOptStructVal(test.fixtures.patch.MyData optStructVal) {
            this.optStructVal = optStructVal;
            return this;
        }
    
        public test.fixtures.patch.MyData getOptStructVal() { return optStructVal; }
    
            @com.facebook.swift.codec.ThriftField(value=-23, name="optEnumVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setOptEnumVal(test.fixtures.patch.MyEnum optEnumVal) {
            this.optEnumVal = optEnumVal;
            return this;
        }
    
        public test.fixtures.patch.MyEnum getOptEnumVal() { return optEnumVal; }
    
            @com.facebook.swift.codec.ThriftField(value=-22, name="optBinaryVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setOptBinaryVal(byte[] optBinaryVal) {
            this.optBinaryVal = optBinaryVal;
            return this;
        }
    
        public byte[] getOptBinaryVal() { return optBinaryVal; }
    
            @com.facebook.swift.codec.ThriftField(value=-21, name="optStringVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setOptStringVal(String optStringVal) {
            this.optStringVal = optStringVal;
            return this;
        }
    
        public String getOptStringVal() { return optStringVal; }
    
            @com.facebook.swift.codec.ThriftField(value=-20, name="optDoubleVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setOptDoubleVal(Double optDoubleVal) {
            this.optDoubleVal = optDoubleVal;
            return this;
        }
    
        public Double getOptDoubleVal() { return optDoubleVal; }
    
            @com.facebook.swift.codec.ThriftField(value=-19, name="optFloatVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setOptFloatVal(Float optFloatVal) {
            this.optFloatVal = optFloatVal;
            return this;
        }
    
        public Float getOptFloatVal() { return optFloatVal; }
    
            @com.facebook.swift.codec.ThriftField(value=-18, name="optI64Val", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setOptI64Val(Long optI64Val) {
            this.optI64Val = optI64Val;
            return this;
        }
    
        public Long getOptI64Val() { return optI64Val; }
    
            @com.facebook.swift.codec.ThriftField(value=-17, name="optI32Val", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setOptI32Val(Integer optI32Val) {
            this.optI32Val = optI32Val;
            return this;
        }
    
        public Integer getOptI32Val() { return optI32Val; }
    
            @com.facebook.swift.codec.ThriftField(value=-16, name="optI16Val", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setOptI16Val(Short optI16Val) {
            this.optI16Val = optI16Val;
            return this;
        }
    
        public Short getOptI16Val() { return optI16Val; }
    
            @com.facebook.swift.codec.ThriftField(value=-15, name="optByteVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setOptByteVal(Byte optByteVal) {
            this.optByteVal = optByteVal;
            return this;
        }
    
        public Byte getOptByteVal() { return optByteVal; }
    
            @com.facebook.swift.codec.ThriftField(value=-14, name="optBoolVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setOptBoolVal(Boolean optBoolVal) {
            this.optBoolVal = optBoolVal;
            return this;
        }
    
        public Boolean isOptBoolVal() { return optBoolVal; }
    
            @com.facebook.swift.codec.ThriftField(value=-13, name="lateStructVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setLateStructVal(test.fixtures.patch.LateDefStruct lateStructVal) {
            this.lateStructVal = lateStructVal;
            return this;
        }
    
        public test.fixtures.patch.LateDefStruct getLateStructVal() { return lateStructVal; }
    
            @com.facebook.swift.codec.ThriftField(value=-12, name="unionVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setUnionVal(test.fixtures.patch.MyUnion unionVal) {
            this.unionVal = unionVal;
            return this;
        }
    
        public test.fixtures.patch.MyUnion getUnionVal() { return unionVal; }
    
            @com.facebook.swift.codec.ThriftField(value=-11, name="structVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setStructVal(test.fixtures.patch.MyData structVal) {
            this.structVal = structVal;
            return this;
        }
    
        public test.fixtures.patch.MyData getStructVal() { return structVal; }
    
            @com.facebook.swift.codec.ThriftField(value=-10, name="enumVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setEnumVal(test.fixtures.patch.MyEnum enumVal) {
            this.enumVal = enumVal;
            return this;
        }
    
        public test.fixtures.patch.MyEnum getEnumVal() { return enumVal; }
    
            @com.facebook.swift.codec.ThriftField(value=-9, name="binaryVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setBinaryVal(byte[] binaryVal) {
            this.binaryVal = binaryVal;
            return this;
        }
    
        public byte[] getBinaryVal() { return binaryVal; }
    
            @com.facebook.swift.codec.ThriftField(value=-8, name="stringVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setStringVal(String stringVal) {
            this.stringVal = stringVal;
            return this;
        }
    
        public String getStringVal() { return stringVal; }
    
            @com.facebook.swift.codec.ThriftField(value=-7, name="doubleVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setDoubleVal(Double doubleVal) {
            this.doubleVal = doubleVal;
            return this;
        }
    
        public Double getDoubleVal() { return doubleVal; }
    
            @com.facebook.swift.codec.ThriftField(value=-6, name="floatVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setFloatVal(Float floatVal) {
            this.floatVal = floatVal;
            return this;
        }
    
        public Float getFloatVal() { return floatVal; }
    
            @com.facebook.swift.codec.ThriftField(value=-5, name="i64Val", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setI64Val(Long i64Val) {
            this.i64Val = i64Val;
            return this;
        }
    
        public Long getI64Val() { return i64Val; }
    
            @com.facebook.swift.codec.ThriftField(value=-4, name="i32Val", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setI32Val(Integer i32Val) {
            this.i32Val = i32Val;
            return this;
        }
    
        public Integer getI32Val() { return i32Val; }
    
            @com.facebook.swift.codec.ThriftField(value=-3, name="i16Val", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setI16Val(Short i16Val) {
            this.i16Val = i16Val;
            return this;
        }
    
        public Short getI16Val() { return i16Val; }
    
            @com.facebook.swift.codec.ThriftField(value=-2, name="byteVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setByteVal(Byte byteVal) {
            this.byteVal = byteVal;
            return this;
        }
    
        public Byte getByteVal() { return byteVal; }
    
            @com.facebook.swift.codec.ThriftField(value=-1, name="boolVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
        public Builder setBoolVal(Boolean boolVal) {
            this.boolVal = boolVal;
            return this;
        }
    
        public Boolean isBoolVal() { return boolVal; }
    
            @com.facebook.swift.codec.ThriftField(value=1, name="structWithFieldCustomDefault", requiredness=Requiredness.OPTIONAL)
        public Builder setStructWithFieldCustomDefault(test.fixtures.patch.MyData structWithFieldCustomDefault) {
            this.structWithFieldCustomDefault = structWithFieldCustomDefault;
            return this;
        }
    
        public test.fixtures.patch.MyData getStructWithFieldCustomDefault() { return structWithFieldCustomDefault; }
    
        public Builder() { }
        public Builder(MyStructEnsureStruct other) {
            this.structWithCustomDefault = other.structWithCustomDefault;
            this.i32WithCustomDefault = other.i32WithCustomDefault;
            this.mapMap = other.mapMap;
            this.listMap = other.listMap;
            this.optMapVal = other.optMapVal;
            this.optSetVal = other.optSetVal;
            this.optListVal = other.optListVal;
            this.optLateStructVal = other.optLateStructVal;
            this.optStructVal = other.optStructVal;
            this.optEnumVal = other.optEnumVal;
            this.optBinaryVal = other.optBinaryVal;
            this.optStringVal = other.optStringVal;
            this.optDoubleVal = other.optDoubleVal;
            this.optFloatVal = other.optFloatVal;
            this.optI64Val = other.optI64Val;
            this.optI32Val = other.optI32Val;
            this.optI16Val = other.optI16Val;
            this.optByteVal = other.optByteVal;
            this.optBoolVal = other.optBoolVal;
            this.lateStructVal = other.lateStructVal;
            this.unionVal = other.unionVal;
            this.structVal = other.structVal;
            this.enumVal = other.enumVal;
            this.binaryVal = other.binaryVal;
            this.stringVal = other.stringVal;
            this.doubleVal = other.doubleVal;
            this.floatVal = other.floatVal;
            this.i64Val = other.i64Val;
            this.i32Val = other.i32Val;
            this.i16Val = other.i16Val;
            this.byteVal = other.byteVal;
            this.boolVal = other.boolVal;
            this.structWithFieldCustomDefault = other.structWithFieldCustomDefault;
        }
    
        @ThriftConstructor
        public MyStructEnsureStruct build() {
            MyStructEnsureStruct result = new MyStructEnsureStruct (
                this.structWithCustomDefault,
                this.i32WithCustomDefault,
                this.mapMap,
                this.listMap,
                this.optMapVal,
                this.optSetVal,
                this.optListVal,
                this.optLateStructVal,
                this.optStructVal,
                this.optEnumVal,
                this.optBinaryVal,
                this.optStringVal,
                this.optDoubleVal,
                this.optFloatVal,
                this.optI64Val,
                this.optI32Val,
                this.optI16Val,
                this.optByteVal,
                this.optBoolVal,
                this.lateStructVal,
                this.unionVal,
                this.structVal,
                this.enumVal,
                this.binaryVal,
                this.stringVal,
                this.doubleVal,
                this.floatVal,
                this.i64Val,
                this.i32Val,
                this.i16Val,
                this.byteVal,
                this.boolVal,
                this.structWithFieldCustomDefault
            );
            return result;
        }
    }
        
    public static final Map<String, Integer> NAMES_TO_IDS = new HashMap();
    public static final Map<String, Integer> THRIFT_NAMES_TO_IDS = new HashMap();
    public static final Map<Integer, TField> FIELD_METADATA = new HashMap<>();
    private static final TStruct STRUCT_DESC = new TStruct("MyStructEnsureStruct");
    private final test.fixtures.patch.MyDataWithCustomDefault structWithCustomDefault;
    public static final int _STRUCTWITHCUSTOMDEFAULT = -32;
    private static final TField STRUCT_WITH_CUSTOM_DEFAULT_FIELD_DESC = new TField("structWithCustomDefault", TType.STRUCT, (short)-32);
        private final Integer i32WithCustomDefault;
    public static final int _I32WITHCUSTOMDEFAULT = -31;
    private static final TField I32_WITH_CUSTOM_DEFAULT_FIELD_DESC = new TField("i32WithCustomDefault", TType.I32, (short)-31);
        private final Map<String, Map<String, Integer>> mapMap;
    public static final int _MAPMAP = -30;
    private static final TField MAP_MAP_FIELD_DESC = new TField("mapMap", TType.MAP, (short)-30);
        private final List<Map<String, Integer>> listMap;
    public static final int _LISTMAP = -29;
    private static final TField LIST_MAP_FIELD_DESC = new TField("listMap", TType.LIST, (short)-29);
        private final Map<String, String> optMapVal;
    public static final int _OPTMAPVAL = -28;
    private static final TField OPT_MAP_VAL_FIELD_DESC = new TField("optMapVal", TType.MAP, (short)-28);
        private final Set<String> optSetVal;
    public static final int _OPTSETVAL = -27;
    private static final TField OPT_SET_VAL_FIELD_DESC = new TField("optSetVal", TType.SET, (short)-27);
        private final List<Short> optListVal;
    public static final int _OPTLISTVAL = -26;
    private static final TField OPT_LIST_VAL_FIELD_DESC = new TField("optListVal", TType.LIST, (short)-26);
        private final test.fixtures.patch.LateDefStruct optLateStructVal;
    public static final int _OPTLATESTRUCTVAL = -25;
    private static final TField OPT_LATE_STRUCT_VAL_FIELD_DESC = new TField("optLateStructVal", TType.STRUCT, (short)-25);
        private final test.fixtures.patch.MyData optStructVal;
    public static final int _OPTSTRUCTVAL = -24;
    private static final TField OPT_STRUCT_VAL_FIELD_DESC = new TField("optStructVal", TType.STRUCT, (short)-24);
        private final test.fixtures.patch.MyEnum optEnumVal;
    public static final int _OPTENUMVAL = -23;
    private static final TField OPT_ENUM_VAL_FIELD_DESC = new TField("optEnumVal", TType.I32, (short)-23);
        private final byte[] optBinaryVal;
    public static final int _OPTBINARYVAL = -22;
    private static final TField OPT_BINARY_VAL_FIELD_DESC = new TField("optBinaryVal", TType.STRING, (short)-22);
        private final String optStringVal;
    public static final int _OPTSTRINGVAL = -21;
    private static final TField OPT_STRING_VAL_FIELD_DESC = new TField("optStringVal", TType.STRING, (short)-21);
        private final Double optDoubleVal;
    public static final int _OPTDOUBLEVAL = -20;
    private static final TField OPT_DOUBLE_VAL_FIELD_DESC = new TField("optDoubleVal", TType.DOUBLE, (short)-20);
        private final Float optFloatVal;
    public static final int _OPTFLOATVAL = -19;
    private static final TField OPT_FLOAT_VAL_FIELD_DESC = new TField("optFloatVal", TType.FLOAT, (short)-19);
        private final Long optI64Val;
    public static final int _OPTI64VAL = -18;
    private static final TField OPT_I64_VAL_FIELD_DESC = new TField("optI64Val", TType.I64, (short)-18);
        private final Integer optI32Val;
    public static final int _OPTI32VAL = -17;
    private static final TField OPT_I32_VAL_FIELD_DESC = new TField("optI32Val", TType.I32, (short)-17);
        private final Short optI16Val;
    public static final int _OPTI16VAL = -16;
    private static final TField OPT_I16_VAL_FIELD_DESC = new TField("optI16Val", TType.I16, (short)-16);
        private final Byte optByteVal;
    public static final int _OPTBYTEVAL = -15;
    private static final TField OPT_BYTE_VAL_FIELD_DESC = new TField("optByteVal", TType.BYTE, (short)-15);
        private final Boolean optBoolVal;
    public static final int _OPTBOOLVAL = -14;
    private static final TField OPT_BOOL_VAL_FIELD_DESC = new TField("optBoolVal", TType.BOOL, (short)-14);
        private final test.fixtures.patch.LateDefStruct lateStructVal;
    public static final int _LATESTRUCTVAL = -13;
    private static final TField LATE_STRUCT_VAL_FIELD_DESC = new TField("lateStructVal", TType.STRUCT, (short)-13);
        private final test.fixtures.patch.MyUnion unionVal;
    public static final int _UNIONVAL = -12;
    private static final TField UNION_VAL_FIELD_DESC = new TField("unionVal", TType.STRUCT, (short)-12);
        private final test.fixtures.patch.MyData structVal;
    public static final int _STRUCTVAL = -11;
    private static final TField STRUCT_VAL_FIELD_DESC = new TField("structVal", TType.STRUCT, (short)-11);
        private final test.fixtures.patch.MyEnum enumVal;
    public static final int _ENUMVAL = -10;
    private static final TField ENUM_VAL_FIELD_DESC = new TField("enumVal", TType.I32, (short)-10);
        private final byte[] binaryVal;
    public static final int _BINARYVAL = -9;
    private static final TField BINARY_VAL_FIELD_DESC = new TField("binaryVal", TType.STRING, (short)-9);
        private final String stringVal;
    public static final int _STRINGVAL = -8;
    private static final TField STRING_VAL_FIELD_DESC = new TField("stringVal", TType.STRING, (short)-8);
        private final Double doubleVal;
    public static final int _DOUBLEVAL = -7;
    private static final TField DOUBLE_VAL_FIELD_DESC = new TField("doubleVal", TType.DOUBLE, (short)-7);
        private final Float floatVal;
    public static final int _FLOATVAL = -6;
    private static final TField FLOAT_VAL_FIELD_DESC = new TField("floatVal", TType.FLOAT, (short)-6);
        private final Long i64Val;
    public static final int _I64VAL = -5;
    private static final TField I64_VAL_FIELD_DESC = new TField("i64Val", TType.I64, (short)-5);
        private final Integer i32Val;
    public static final int _I32VAL = -4;
    private static final TField I32_VAL_FIELD_DESC = new TField("i32Val", TType.I32, (short)-4);
        private final Short i16Val;
    public static final int _I16VAL = -3;
    private static final TField I16_VAL_FIELD_DESC = new TField("i16Val", TType.I16, (short)-3);
        private final Byte byteVal;
    public static final int _BYTEVAL = -2;
    private static final TField BYTE_VAL_FIELD_DESC = new TField("byteVal", TType.BYTE, (short)-2);
        private final Boolean boolVal;
    public static final int _BOOLVAL = -1;
    private static final TField BOOL_VAL_FIELD_DESC = new TField("boolVal", TType.BOOL, (short)-1);
        private final test.fixtures.patch.MyData structWithFieldCustomDefault;
    public static final int _STRUCTWITHFIELDCUSTOMDEFAULT = 1;
    private static final TField STRUCT_WITH_FIELD_CUSTOM_DEFAULT_FIELD_DESC = new TField("structWithFieldCustomDefault", TType.STRUCT, (short)1);
    static {
      NAMES_TO_IDS.put("structWithCustomDefault", -32);
      THRIFT_NAMES_TO_IDS.put("structWithCustomDefault", -32);
      FIELD_METADATA.put(-32, STRUCT_WITH_CUSTOM_DEFAULT_FIELD_DESC);
      NAMES_TO_IDS.put("i32WithCustomDefault", -31);
      THRIFT_NAMES_TO_IDS.put("i32WithCustomDefault", -31);
      FIELD_METADATA.put(-31, I32_WITH_CUSTOM_DEFAULT_FIELD_DESC);
      NAMES_TO_IDS.put("mapMap", -30);
      THRIFT_NAMES_TO_IDS.put("mapMap", -30);
      FIELD_METADATA.put(-30, MAP_MAP_FIELD_DESC);
      NAMES_TO_IDS.put("listMap", -29);
      THRIFT_NAMES_TO_IDS.put("listMap", -29);
      FIELD_METADATA.put(-29, LIST_MAP_FIELD_DESC);
      NAMES_TO_IDS.put("optMapVal", -28);
      THRIFT_NAMES_TO_IDS.put("optMapVal", -28);
      FIELD_METADATA.put(-28, OPT_MAP_VAL_FIELD_DESC);
      NAMES_TO_IDS.put("optSetVal", -27);
      THRIFT_NAMES_TO_IDS.put("optSetVal", -27);
      FIELD_METADATA.put(-27, OPT_SET_VAL_FIELD_DESC);
      NAMES_TO_IDS.put("optListVal", -26);
      THRIFT_NAMES_TO_IDS.put("optListVal", -26);
      FIELD_METADATA.put(-26, OPT_LIST_VAL_FIELD_DESC);
      NAMES_TO_IDS.put("optLateStructVal", -25);
      THRIFT_NAMES_TO_IDS.put("optLateStructVal", -25);
      FIELD_METADATA.put(-25, OPT_LATE_STRUCT_VAL_FIELD_DESC);
      NAMES_TO_IDS.put("optStructVal", -24);
      THRIFT_NAMES_TO_IDS.put("optStructVal", -24);
      FIELD_METADATA.put(-24, OPT_STRUCT_VAL_FIELD_DESC);
      NAMES_TO_IDS.put("optEnumVal", -23);
      THRIFT_NAMES_TO_IDS.put("optEnumVal", -23);
      FIELD_METADATA.put(-23, OPT_ENUM_VAL_FIELD_DESC);
      NAMES_TO_IDS.put("optBinaryVal", -22);
      THRIFT_NAMES_TO_IDS.put("optBinaryVal", -22);
      FIELD_METADATA.put(-22, OPT_BINARY_VAL_FIELD_DESC);
      NAMES_TO_IDS.put("optStringVal", -21);
      THRIFT_NAMES_TO_IDS.put("optStringVal", -21);
      FIELD_METADATA.put(-21, OPT_STRING_VAL_FIELD_DESC);
      NAMES_TO_IDS.put("optDoubleVal", -20);
      THRIFT_NAMES_TO_IDS.put("optDoubleVal", -20);
      FIELD_METADATA.put(-20, OPT_DOUBLE_VAL_FIELD_DESC);
      NAMES_TO_IDS.put("optFloatVal", -19);
      THRIFT_NAMES_TO_IDS.put("optFloatVal", -19);
      FIELD_METADATA.put(-19, OPT_FLOAT_VAL_FIELD_DESC);
      NAMES_TO_IDS.put("optI64Val", -18);
      THRIFT_NAMES_TO_IDS.put("optI64Val", -18);
      FIELD_METADATA.put(-18, OPT_I64_VAL_FIELD_DESC);
      NAMES_TO_IDS.put("optI32Val", -17);
      THRIFT_NAMES_TO_IDS.put("optI32Val", -17);
      FIELD_METADATA.put(-17, OPT_I32_VAL_FIELD_DESC);
      NAMES_TO_IDS.put("optI16Val", -16);
      THRIFT_NAMES_TO_IDS.put("optI16Val", -16);
      FIELD_METADATA.put(-16, OPT_I16_VAL_FIELD_DESC);
      NAMES_TO_IDS.put("optByteVal", -15);
      THRIFT_NAMES_TO_IDS.put("optByteVal", -15);
      FIELD_METADATA.put(-15, OPT_BYTE_VAL_FIELD_DESC);
      NAMES_TO_IDS.put("optBoolVal", -14);
      THRIFT_NAMES_TO_IDS.put("optBoolVal", -14);
      FIELD_METADATA.put(-14, OPT_BOOL_VAL_FIELD_DESC);
      NAMES_TO_IDS.put("lateStructVal", -13);
      THRIFT_NAMES_TO_IDS.put("lateStructVal", -13);
      FIELD_METADATA.put(-13, LATE_STRUCT_VAL_FIELD_DESC);
      NAMES_TO_IDS.put("unionVal", -12);
      THRIFT_NAMES_TO_IDS.put("unionVal", -12);
      FIELD_METADATA.put(-12, UNION_VAL_FIELD_DESC);
      NAMES_TO_IDS.put("structVal", -11);
      THRIFT_NAMES_TO_IDS.put("structVal", -11);
      FIELD_METADATA.put(-11, STRUCT_VAL_FIELD_DESC);
      NAMES_TO_IDS.put("enumVal", -10);
      THRIFT_NAMES_TO_IDS.put("enumVal", -10);
      FIELD_METADATA.put(-10, ENUM_VAL_FIELD_DESC);
      NAMES_TO_IDS.put("binaryVal", -9);
      THRIFT_NAMES_TO_IDS.put("binaryVal", -9);
      FIELD_METADATA.put(-9, BINARY_VAL_FIELD_DESC);
      NAMES_TO_IDS.put("stringVal", -8);
      THRIFT_NAMES_TO_IDS.put("stringVal", -8);
      FIELD_METADATA.put(-8, STRING_VAL_FIELD_DESC);
      NAMES_TO_IDS.put("doubleVal", -7);
      THRIFT_NAMES_TO_IDS.put("doubleVal", -7);
      FIELD_METADATA.put(-7, DOUBLE_VAL_FIELD_DESC);
      NAMES_TO_IDS.put("floatVal", -6);
      THRIFT_NAMES_TO_IDS.put("floatVal", -6);
      FIELD_METADATA.put(-6, FLOAT_VAL_FIELD_DESC);
      NAMES_TO_IDS.put("i64Val", -5);
      THRIFT_NAMES_TO_IDS.put("i64Val", -5);
      FIELD_METADATA.put(-5, I64_VAL_FIELD_DESC);
      NAMES_TO_IDS.put("i32Val", -4);
      THRIFT_NAMES_TO_IDS.put("i32Val", -4);
      FIELD_METADATA.put(-4, I32_VAL_FIELD_DESC);
      NAMES_TO_IDS.put("i16Val", -3);
      THRIFT_NAMES_TO_IDS.put("i16Val", -3);
      FIELD_METADATA.put(-3, I16_VAL_FIELD_DESC);
      NAMES_TO_IDS.put("byteVal", -2);
      THRIFT_NAMES_TO_IDS.put("byteVal", -2);
      FIELD_METADATA.put(-2, BYTE_VAL_FIELD_DESC);
      NAMES_TO_IDS.put("boolVal", -1);
      THRIFT_NAMES_TO_IDS.put("boolVal", -1);
      FIELD_METADATA.put(-1, BOOL_VAL_FIELD_DESC);
      NAMES_TO_IDS.put("structWithFieldCustomDefault", 1);
      THRIFT_NAMES_TO_IDS.put("structWithFieldCustomDefault", 1);
      FIELD_METADATA.put(1, STRUCT_WITH_FIELD_CUSTOM_DEFAULT_FIELD_DESC);
      com.facebook.thrift.type.TypeRegistry.add(new com.facebook.thrift.type.Type(
        new com.facebook.thrift.type.UniversalName("test.dev/fixtures/patch/MyStructEnsureStruct"), 
        MyStructEnsureStruct.class, MyStructEnsureStruct::read0));
    }
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-32, name="structWithCustomDefault", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public test.fixtures.patch.MyDataWithCustomDefault getStructWithCustomDefault() { return structWithCustomDefault; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-31, name="i32WithCustomDefault", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public Integer getI32WithCustomDefault() { return i32WithCustomDefault; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-30, name="mapMap", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public Map<String, Map<String, Integer>> getMapMap() { return mapMap; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-29, name="listMap", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public List<Map<String, Integer>> getListMap() { return listMap; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-28, name="optMapVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public Map<String, String> getOptMapVal() { return optMapVal; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-27, name="optSetVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public Set<String> getOptSetVal() { return optSetVal; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-26, name="optListVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public List<Short> getOptListVal() { return optListVal; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-25, name="optLateStructVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public test.fixtures.patch.LateDefStruct getOptLateStructVal() { return optLateStructVal; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-24, name="optStructVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public test.fixtures.patch.MyData getOptStructVal() { return optStructVal; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-23, name="optEnumVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public test.fixtures.patch.MyEnum getOptEnumVal() { return optEnumVal; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-22, name="optBinaryVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public byte[] getOptBinaryVal() { return optBinaryVal; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-21, name="optStringVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public String getOptStringVal() { return optStringVal; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-20, name="optDoubleVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public Double getOptDoubleVal() { return optDoubleVal; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-19, name="optFloatVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public Float getOptFloatVal() { return optFloatVal; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-18, name="optI64Val", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public Long getOptI64Val() { return optI64Val; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-17, name="optI32Val", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public Integer getOptI32Val() { return optI32Val; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-16, name="optI16Val", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public Short getOptI16Val() { return optI16Val; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-15, name="optByteVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public Byte getOptByteVal() { return optByteVal; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-14, name="optBoolVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public Boolean isOptBoolVal() { return optBoolVal; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-13, name="lateStructVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public test.fixtures.patch.LateDefStruct getLateStructVal() { return lateStructVal; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-12, name="unionVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public test.fixtures.patch.MyUnion getUnionVal() { return unionVal; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-11, name="structVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public test.fixtures.patch.MyData getStructVal() { return structVal; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-10, name="enumVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public test.fixtures.patch.MyEnum getEnumVal() { return enumVal; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-9, name="binaryVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public byte[] getBinaryVal() { return binaryVal; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-8, name="stringVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public String getStringVal() { return stringVal; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-7, name="doubleVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public Double getDoubleVal() { return doubleVal; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-6, name="floatVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public Float getFloatVal() { return floatVal; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-5, name="i64Val", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public Long getI64Val() { return i64Val; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-4, name="i32Val", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public Integer getI32Val() { return i32Val; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-3, name="i16Val", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public Short getI16Val() { return i16Val; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-2, name="byteVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public Byte getByteVal() { return byteVal; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-1, name="boolVal", isLegacyId=true, requiredness=Requiredness.OPTIONAL)
    public Boolean isBoolVal() { return boolVal; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=1, name="structWithFieldCustomDefault", requiredness=Requiredness.OPTIONAL)
    public test.fixtures.patch.MyData getStructWithFieldCustomDefault() { return structWithFieldCustomDefault; }
    
    @java.lang.Override
    public String toString() {
        ToStringHelper helper = toStringHelper(this);
        helper.add("structWithCustomDefault", structWithCustomDefault);
        helper.add("i32WithCustomDefault", i32WithCustomDefault);
        helper.add("mapMap", mapMap);
        helper.add("listMap", listMap);
        helper.add("optMapVal", optMapVal);
        helper.add("optSetVal", optSetVal);
        helper.add("optListVal", optListVal);
        helper.add("optLateStructVal", optLateStructVal);
        helper.add("optStructVal", optStructVal);
        helper.add("optEnumVal", optEnumVal);
        helper.add("optBinaryVal", optBinaryVal);
        helper.add("optStringVal", optStringVal);
        helper.add("optDoubleVal", optDoubleVal);
        helper.add("optFloatVal", optFloatVal);
        helper.add("optI64Val", optI64Val);
        helper.add("optI32Val", optI32Val);
        helper.add("optI16Val", optI16Val);
        helper.add("optByteVal", optByteVal);
        helper.add("optBoolVal", optBoolVal);
        helper.add("lateStructVal", lateStructVal);
        helper.add("unionVal", unionVal);
        helper.add("structVal", structVal);
        helper.add("enumVal", enumVal);
        helper.add("binaryVal", binaryVal);
        helper.add("stringVal", stringVal);
        helper.add("doubleVal", doubleVal);
        helper.add("floatVal", floatVal);
        helper.add("i64Val", i64Val);
        helper.add("i32Val", i32Val);
        helper.add("i16Val", i16Val);
        helper.add("byteVal", byteVal);
        helper.add("boolVal", boolVal);
        helper.add("structWithFieldCustomDefault", structWithFieldCustomDefault);
        return helper.toString();
    }
    
    @java.lang.Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        MyStructEnsureStruct other = (MyStructEnsureStruct)o;
    
        return
            Objects.equals(structWithCustomDefault, other.structWithCustomDefault) &&
            Objects.equals(i32WithCustomDefault, other.i32WithCustomDefault) &&
            Objects.equals(mapMap, other.mapMap) &&
            Objects.equals(listMap, other.listMap) &&
            Objects.equals(optMapVal, other.optMapVal) &&
            Objects.equals(optSetVal, other.optSetVal) &&
            Objects.equals(optListVal, other.optListVal) &&
            Objects.equals(optLateStructVal, other.optLateStructVal) &&
            Objects.equals(optStructVal, other.optStructVal) &&
            Objects.equals(optEnumVal, other.optEnumVal) &&
            Arrays.equals(optBinaryVal, other.optBinaryVal) &&
            Objects.equals(optStringVal, other.optStringVal) &&
            Objects.equals(optDoubleVal, other.optDoubleVal) &&
            Objects.equals(optFloatVal, other.optFloatVal) &&
            Objects.equals(optI64Val, other.optI64Val) &&
            Objects.equals(optI32Val, other.optI32Val) &&
            Objects.equals(optI16Val, other.optI16Val) &&
            Objects.equals(optByteVal, other.optByteVal) &&
            Objects.equals(optBoolVal, other.optBoolVal) &&
            Objects.equals(lateStructVal, other.lateStructVal) &&
            Objects.equals(unionVal, other.unionVal) &&
            Objects.equals(structVal, other.structVal) &&
            Objects.equals(enumVal, other.enumVal) &&
            Arrays.equals(binaryVal, other.binaryVal) &&
            Objects.equals(stringVal, other.stringVal) &&
            Objects.equals(doubleVal, other.doubleVal) &&
            Objects.equals(floatVal, other.floatVal) &&
            Objects.equals(i64Val, other.i64Val) &&
            Objects.equals(i32Val, other.i32Val) &&
            Objects.equals(i16Val, other.i16Val) &&
            Objects.equals(byteVal, other.byteVal) &&
            Objects.equals(boolVal, other.boolVal) &&
            Objects.equals(structWithFieldCustomDefault, other.structWithFieldCustomDefault) &&
            true;
    }
    
    @java.lang.Override
    public int hashCode() {
        return Arrays.deepHashCode(new java.lang.Object[] {
            structWithCustomDefault,
            i32WithCustomDefault,
            mapMap,
            listMap,
            optMapVal,
            optSetVal,
            optListVal,
            optLateStructVal,
            optStructVal,
            optEnumVal,
            optBinaryVal,
            optStringVal,
            optDoubleVal,
            optFloatVal,
            optI64Val,
            optI32Val,
            optI16Val,
            optByteVal,
            optBoolVal,
            lateStructVal,
            unionVal,
            structVal,
            enumVal,
            binaryVal,
            stringVal,
            doubleVal,
            floatVal,
            i64Val,
            i32Val,
            i16Val,
            byteVal,
            boolVal,
            structWithFieldCustomDefault
        });
    }
    
    
    public static com.facebook.thrift.payload.Reader<MyStructEnsureStruct> asReader() {
      return MyStructEnsureStruct::read0;
    }
    
    public static MyStructEnsureStruct read0(TProtocol oprot) throws TException {
      TField __field;
      oprot.readStructBegin(MyStructEnsureStruct.NAMES_TO_IDS, MyStructEnsureStruct.THRIFT_NAMES_TO_IDS, MyStructEnsureStruct.FIELD_METADATA);
      MyStructEnsureStruct.Builder builder = new MyStructEnsureStruct.Builder();
      while (true) {
        __field = oprot.readFieldBegin();
        if (__field.type == TType.STOP) { break; }
        switch (__field.id) {
        case _STRUCTWITHCUSTOMDEFAULT:
          if (__field.type == TType.STRUCT) {
            test.fixtures.patch.MyDataWithCustomDefault structWithCustomDefault = test.fixtures.patch.MyDataWithCustomDefault.read0(oprot);
            builder.setStructWithCustomDefault(structWithCustomDefault);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _I32WITHCUSTOMDEFAULT:
          if (__field.type == TType.I32) {
            Integer i32WithCustomDefault = oprot.readI32();
            builder.setI32WithCustomDefault(i32WithCustomDefault);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _MAPMAP:
          if (__field.type == TType.MAP) {
            Map<String, Map<String, Integer>> mapMap;
            {
            TMap _map = oprot.readMapBegin();
            mapMap = new HashMap<String, Map<String, Integer>>(Math.max(0, _map.size));
            for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {
                
                String _key1 = oprot.readString();
                Map<String, Integer> _value1;
                            {
                            TMap _map1 = oprot.readMapBegin();
                            _value1 = new HashMap<String, Integer>(Math.max(0, _map1.size));
                            for (int _i1 = 0; (_map1.size < 0) ? oprot.peekMap() : (_i1 < _map1.size); _i1++) {
                                
                                
                                String _key2 = oprot.readString();
                                
                
                                
                                int _value2 = oprot.readI32();
                                
                                
                                _value1.put(_key2, _value2);
                                
                            }
                            }
                            oprot.readMapEnd();
                                mapMap.put(_key1, _value1);
            }
            }
            oprot.readMapEnd();
            builder.setMapMap(mapMap);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _LISTMAP:
          if (__field.type == TType.LIST) {
            List<Map<String, Integer>> listMap;
            {
            TList _list = oprot.readListBegin();
            listMap = new ArrayList<Map<String, Integer>>(Math.max(0, _list.size));
            for (int _i = 0; (_list.size < 0) ? oprot.peekList() : (_i < _list.size); _i++) {
                
                Map<String, Integer> _value1;
                            {
                            TMap _map1 = oprot.readMapBegin();
                            _value1 = new HashMap<String, Integer>(Math.max(0, _map1.size));
                            for (int _i1 = 0; (_map1.size < 0) ? oprot.peekMap() : (_i1 < _map1.size); _i1++) {
                                
                                
                                String _key2 = oprot.readString();
                                
                
                                
                                int _value2 = oprot.readI32();
                                
                                
                                _value1.put(_key2, _value2);
                                
                            }
                            }
                            oprot.readMapEnd();
                listMap.add(_value1);
            }
            oprot.readListEnd();
            }
            builder.setListMap(listMap);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _OPTMAPVAL:
          if (__field.type == TType.MAP) {
            Map<String, String> optMapVal;
            {
            TMap _map = oprot.readMapBegin();
            optMapVal = new HashMap<String, String>(Math.max(0, _map.size));
            for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {
                
                String _key1 = oprot.readString();
                String _value1 = oprot.readString();
                optMapVal.put(_key1, _value1);
            }
            }
            oprot.readMapEnd();
            builder.setOptMapVal(optMapVal);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _OPTSETVAL:
          if (__field.type == TType.SET) {
            Set<String> optSetVal;
            {
            TSet _set = oprot.readSetBegin();
            optSetVal = new HashSet<String>(Math.max(0, _set.size));
            for (int _i = 0; (_set.size < 0) ? oprot.peekSet() : (_i < _set.size); _i++) {
                
                String _value1 = oprot.readString();
                optSetVal.add(_value1);
            }
            oprot.readSetEnd();
            }
            builder.setOptSetVal(optSetVal);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _OPTLISTVAL:
          if (__field.type == TType.LIST) {
            List<Short> optListVal;
            {
            TList _list = oprot.readListBegin();
            optListVal = new ArrayList<Short>(Math.max(0, _list.size));
            for (int _i = 0; (_list.size < 0) ? oprot.peekList() : (_i < _list.size); _i++) {
                
                short _value1 = oprot.readI16();
                optListVal.add(_value1);
            }
            oprot.readListEnd();
            }
            builder.setOptListVal(optListVal);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _OPTLATESTRUCTVAL:
          if (__field.type == TType.STRUCT) {
            test.fixtures.patch.LateDefStruct optLateStructVal = test.fixtures.patch.LateDefStruct.read0(oprot);
            builder.setOptLateStructVal(optLateStructVal);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _OPTSTRUCTVAL:
          if (__field.type == TType.STRUCT) {
            test.fixtures.patch.MyData optStructVal = test.fixtures.patch.MyData.read0(oprot);
            builder.setOptStructVal(optStructVal);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _OPTENUMVAL:
          if (__field.type == TType.I32) {
            test.fixtures.patch.MyEnum optEnumVal = test.fixtures.patch.MyEnum.fromInteger(oprot.readI32());
            builder.setOptEnumVal(optEnumVal);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _OPTBINARYVAL:
          if (__field.type == TType.STRING) {
            byte[] optBinaryVal = oprot.readBinary().array();
            builder.setOptBinaryVal(optBinaryVal);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _OPTSTRINGVAL:
          if (__field.type == TType.STRING) {
            String optStringVal = oprot.readString();
            builder.setOptStringVal(optStringVal);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _OPTDOUBLEVAL:
          if (__field.type == TType.DOUBLE) {
            Double optDoubleVal = oprot.readDouble();
            builder.setOptDoubleVal(optDoubleVal);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _OPTFLOATVAL:
          if (__field.type == TType.FLOAT) {
            Float optFloatVal = oprot.readFloat();
            builder.setOptFloatVal(optFloatVal);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _OPTI64VAL:
          if (__field.type == TType.I64) {
            Long optI64Val = oprot.readI64();
            builder.setOptI64Val(optI64Val);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _OPTI32VAL:
          if (__field.type == TType.I32) {
            Integer optI32Val = oprot.readI32();
            builder.setOptI32Val(optI32Val);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _OPTI16VAL:
          if (__field.type == TType.I16) {
            Short optI16Val = oprot.readI16();
            builder.setOptI16Val(optI16Val);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _OPTBYTEVAL:
          if (__field.type == TType.BYTE) {
            Byte optByteVal = oprot.readByte();
            builder.setOptByteVal(optByteVal);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _OPTBOOLVAL:
          if (__field.type == TType.BOOL) {
            Boolean optBoolVal = oprot.readBool();
            builder.setOptBoolVal(optBoolVal);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _LATESTRUCTVAL:
          if (__field.type == TType.STRUCT) {
            test.fixtures.patch.LateDefStruct lateStructVal = test.fixtures.patch.LateDefStruct.read0(oprot);
            builder.setLateStructVal(lateStructVal);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _UNIONVAL:
          if (__field.type == TType.STRUCT) {
            test.fixtures.patch.MyUnion unionVal = test.fixtures.patch.MyUnion.read0(oprot);
            builder.setUnionVal(unionVal);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _STRUCTVAL:
          if (__field.type == TType.STRUCT) {
            test.fixtures.patch.MyData structVal = test.fixtures.patch.MyData.read0(oprot);
            builder.setStructVal(structVal);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _ENUMVAL:
          if (__field.type == TType.I32) {
            test.fixtures.patch.MyEnum enumVal = test.fixtures.patch.MyEnum.fromInteger(oprot.readI32());
            builder.setEnumVal(enumVal);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _BINARYVAL:
          if (__field.type == TType.STRING) {
            byte[] binaryVal = oprot.readBinary().array();
            builder.setBinaryVal(binaryVal);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _STRINGVAL:
          if (__field.type == TType.STRING) {
            String stringVal = oprot.readString();
            builder.setStringVal(stringVal);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _DOUBLEVAL:
          if (__field.type == TType.DOUBLE) {
            Double doubleVal = oprot.readDouble();
            builder.setDoubleVal(doubleVal);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _FLOATVAL:
          if (__field.type == TType.FLOAT) {
            Float floatVal = oprot.readFloat();
            builder.setFloatVal(floatVal);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _I64VAL:
          if (__field.type == TType.I64) {
            Long i64Val = oprot.readI64();
            builder.setI64Val(i64Val);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _I32VAL:
          if (__field.type == TType.I32) {
            Integer i32Val = oprot.readI32();
            builder.setI32Val(i32Val);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _I16VAL:
          if (__field.type == TType.I16) {
            Short i16Val = oprot.readI16();
            builder.setI16Val(i16Val);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _BYTEVAL:
          if (__field.type == TType.BYTE) {
            Byte byteVal = oprot.readByte();
            builder.setByteVal(byteVal);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _BOOLVAL:
          if (__field.type == TType.BOOL) {
            Boolean boolVal = oprot.readBool();
            builder.setBoolVal(boolVal);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _STRUCTWITHFIELDCUSTOMDEFAULT:
          if (__field.type == TType.STRUCT) {
            test.fixtures.patch.MyData structWithFieldCustomDefault = test.fixtures.patch.MyData.read0(oprot);
            builder.setStructWithFieldCustomDefault(structWithFieldCustomDefault);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(oprot, __field.type);
          break;
        }
        oprot.readFieldEnd();
      }
      oprot.readStructEnd();
      return builder.build();
    }
    
    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      if (structWithCustomDefault != null) {
        oprot.writeFieldBegin(STRUCT_WITH_CUSTOM_DEFAULT_FIELD_DESC);
        this.structWithCustomDefault.write0(oprot);
        oprot.writeFieldEnd();
      }
      if (i32WithCustomDefault != null) {
        oprot.writeFieldBegin(I32_WITH_CUSTOM_DEFAULT_FIELD_DESC);
        oprot.writeI32(this.i32WithCustomDefault);
        oprot.writeFieldEnd();
      }
      if (mapMap != null) {
        oprot.writeFieldBegin(MAP_MAP_FIELD_DESC);
        Map<String, Map<String, Integer>> _iter0 = mapMap;
        oprot.writeMapBegin(new TMap(TType.STRING, TType.MAP, _iter0.size()));
        for (Map.Entry<String, Map<String, Integer>> _iter1 : _iter0.entrySet()) {
          oprot.writeString(_iter1.getKey());
          oprot.writeMapBegin(new TMap(TType.STRING, TType.I32, _iter1.getValue().size()));
        for (Map.Entry<String, Integer> _iter2 : _iter1.getValue().entrySet()) {
          oprot.writeString(_iter2.getKey());
          oprot.writeI32(_iter2.getValue());
        }
        oprot.writeMapEnd();
        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (listMap != null) {
        oprot.writeFieldBegin(LIST_MAP_FIELD_DESC);
        List<Map<String, Integer>> _iter0 = listMap;
        oprot.writeListBegin(new TList(TType.MAP, _iter0.size()));
        for (Map<String, Integer> _iter1 : _iter0) {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.I32, _iter1.size()));
        for (Map.Entry<String, Integer> _iter2 : _iter1.entrySet()) {
          oprot.writeString(_iter2.getKey());
          oprot.writeI32(_iter2.getValue());
        }
        oprot.writeMapEnd();
        }
        oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      if (optMapVal != null) {
        oprot.writeFieldBegin(OPT_MAP_VAL_FIELD_DESC);
        Map<String, String> _iter0 = optMapVal;
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, _iter0.size()));
        for (Map.Entry<String, String> _iter1 : _iter0.entrySet()) {
          oprot.writeString(_iter1.getKey());
          oprot.writeString(_iter1.getValue());
        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (optSetVal != null) {
        oprot.writeFieldBegin(OPT_SET_VAL_FIELD_DESC);
        Set<String> _iter0 = optSetVal;
        oprot.writeSetBegin(new TSet(TType.STRING, _iter0.size()));
        for (String _iter1 : _iter0) {
          oprot.writeString(_iter1);
        }
        oprot.writeSetEnd();
        oprot.writeFieldEnd();
      }
      if (optListVal != null) {
        oprot.writeFieldBegin(OPT_LIST_VAL_FIELD_DESC);
        List<Short> _iter0 = optListVal;
        oprot.writeListBegin(new TList(TType.I16, _iter0.size()));
        for (short _iter1 : _iter0) {
          oprot.writeI16(_iter1);
        }
        oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      if (optLateStructVal != null) {
        oprot.writeFieldBegin(OPT_LATE_STRUCT_VAL_FIELD_DESC);
        this.optLateStructVal.write0(oprot);
        oprot.writeFieldEnd();
      }
      if (optStructVal != null) {
        oprot.writeFieldBegin(OPT_STRUCT_VAL_FIELD_DESC);
        this.optStructVal.write0(oprot);
        oprot.writeFieldEnd();
      }
      if (optEnumVal != null) {
        oprot.writeFieldBegin(OPT_ENUM_VAL_FIELD_DESC);
        oprot.writeI32(this.optEnumVal == null ? 0 : com.facebook.thrift.util.EnumUtil.getValue(this.optEnumVal));
        oprot.writeFieldEnd();
      }
      if (optBinaryVal != null) {
        oprot.writeFieldBegin(OPT_BINARY_VAL_FIELD_DESC);
        oprot.writeBinary(java.nio.ByteBuffer.wrap(this.optBinaryVal));
        oprot.writeFieldEnd();
      }
      if (optStringVal != null) {
        oprot.writeFieldBegin(OPT_STRING_VAL_FIELD_DESC);
        oprot.writeString(this.optStringVal);
        oprot.writeFieldEnd();
      }
      if (optDoubleVal != null) {
        oprot.writeFieldBegin(OPT_DOUBLE_VAL_FIELD_DESC);
        oprot.writeDouble(this.optDoubleVal);
        oprot.writeFieldEnd();
      }
      if (optFloatVal != null) {
        oprot.writeFieldBegin(OPT_FLOAT_VAL_FIELD_DESC);
        oprot.writeFloat(this.optFloatVal);
        oprot.writeFieldEnd();
      }
      if (optI64Val != null) {
        oprot.writeFieldBegin(OPT_I64_VAL_FIELD_DESC);
        oprot.writeI64(this.optI64Val);
        oprot.writeFieldEnd();
      }
      if (optI32Val != null) {
        oprot.writeFieldBegin(OPT_I32_VAL_FIELD_DESC);
        oprot.writeI32(this.optI32Val);
        oprot.writeFieldEnd();
      }
      if (optI16Val != null) {
        oprot.writeFieldBegin(OPT_I16_VAL_FIELD_DESC);
        oprot.writeI16(this.optI16Val);
        oprot.writeFieldEnd();
      }
      if (optByteVal != null) {
        oprot.writeFieldBegin(OPT_BYTE_VAL_FIELD_DESC);
        oprot.writeByte(this.optByteVal);
        oprot.writeFieldEnd();
      }
      if (optBoolVal != null) {
        oprot.writeFieldBegin(OPT_BOOL_VAL_FIELD_DESC);
        oprot.writeBool(this.optBoolVal);
        oprot.writeFieldEnd();
      }
      if (lateStructVal != null) {
        oprot.writeFieldBegin(LATE_STRUCT_VAL_FIELD_DESC);
        this.lateStructVal.write0(oprot);
        oprot.writeFieldEnd();
      }
      if (unionVal != null) {
        oprot.writeFieldBegin(UNION_VAL_FIELD_DESC);
        this.unionVal.write0(oprot);
        oprot.writeFieldEnd();
      }
      if (structVal != null) {
        oprot.writeFieldBegin(STRUCT_VAL_FIELD_DESC);
        this.structVal.write0(oprot);
        oprot.writeFieldEnd();
      }
      if (enumVal != null) {
        oprot.writeFieldBegin(ENUM_VAL_FIELD_DESC);
        oprot.writeI32(this.enumVal == null ? 0 : com.facebook.thrift.util.EnumUtil.getValue(this.enumVal));
        oprot.writeFieldEnd();
      }
      if (binaryVal != null) {
        oprot.writeFieldBegin(BINARY_VAL_FIELD_DESC);
        oprot.writeBinary(java.nio.ByteBuffer.wrap(this.binaryVal));
        oprot.writeFieldEnd();
      }
      if (stringVal != null) {
        oprot.writeFieldBegin(STRING_VAL_FIELD_DESC);
        oprot.writeString(this.stringVal);
        oprot.writeFieldEnd();
      }
      if (doubleVal != null) {
        oprot.writeFieldBegin(DOUBLE_VAL_FIELD_DESC);
        oprot.writeDouble(this.doubleVal);
        oprot.writeFieldEnd();
      }
      if (floatVal != null) {
        oprot.writeFieldBegin(FLOAT_VAL_FIELD_DESC);
        oprot.writeFloat(this.floatVal);
        oprot.writeFieldEnd();
      }
      if (i64Val != null) {
        oprot.writeFieldBegin(I64_VAL_FIELD_DESC);
        oprot.writeI64(this.i64Val);
        oprot.writeFieldEnd();
      }
      if (i32Val != null) {
        oprot.writeFieldBegin(I32_VAL_FIELD_DESC);
        oprot.writeI32(this.i32Val);
        oprot.writeFieldEnd();
      }
      if (i16Val != null) {
        oprot.writeFieldBegin(I16_VAL_FIELD_DESC);
        oprot.writeI16(this.i16Val);
        oprot.writeFieldEnd();
      }
      if (byteVal != null) {
        oprot.writeFieldBegin(BYTE_VAL_FIELD_DESC);
        oprot.writeByte(this.byteVal);
        oprot.writeFieldEnd();
      }
      if (boolVal != null) {
        oprot.writeFieldBegin(BOOL_VAL_FIELD_DESC);
        oprot.writeBool(this.boolVal);
        oprot.writeFieldEnd();
      }
      if (structWithFieldCustomDefault != null) {
        oprot.writeFieldBegin(STRUCT_WITH_FIELD_CUSTOM_DEFAULT_FIELD_DESC);
        this.structWithFieldCustomDefault.write0(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    private static class _MyStructEnsureStructLazy {
        private static final MyStructEnsureStruct _DEFAULT = new MyStructEnsureStruct.Builder().build();
    }
    
    public static MyStructEnsureStruct defaultInstance() {
        return  _MyStructEnsureStructLazy._DEFAULT;
    }
}
