// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package scope

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var GoUnusedProtection__ int;

//The `enum` definition scope.
type Enum = FbthriftInternalEnum

func EnumPtr(v Enum) *Enum { return &v }

func NewEnum() *Enum { return NewFbthriftInternalEnum() }

// Indicates that the scope of sibling annotations is transitive.
// 
// For example:
// 
//     @scope.Struct
//     @scope.Union
//     @scope.Exception
//     @scope.Transitive
//     struct Structured {}
// 
// Annotating a Thrift struct with @Structured automatically applies
// @scope.Struct, @scope.Union and @scope.Exception annotations, i.e.
// 
//     @Structured
//     struct MyAnnotation {}
// 
// is equivalent to
// 
//     @scope.Struct
//     @scope.Union
//     @scope.Exception
//     struct MyAnnotation {}
// 
type Transitive struct {
}

func NewTransitive() *Transitive {
  return &Transitive{}
}

type TransitiveBuilder struct {
  obj *Transitive
}

func NewTransitiveBuilder() *TransitiveBuilder{
  return &TransitiveBuilder{
    obj: NewTransitive(),
  }
}

func (p TransitiveBuilder) Emit() *Transitive{
  return &Transitive{
  }
}

func (p *Transitive) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Transitive) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Transitive"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Transitive) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("Transitive({})")
}

// Indicates that an annotation should be included in the runtime schema.
// 
// See thrift/lib/thrift/schema.thrift
type Schema struct {
}

func NewSchema() *Schema {
  return &Schema{}
}

type SchemaBuilder struct {
  obj *Schema
}

func NewSchemaBuilder() *SchemaBuilder{
  return &SchemaBuilder{
    obj: NewSchema(),
  }
}

func (p SchemaBuilder) Emit() *Schema{
  return &Schema{
  }
}

func (p *Schema) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Schema) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Schema"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Schema) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("Schema({})")
}

// The Program scope.
// 
// This allows annotations on the `package` definition, which implies the
// annotaiton applies to the entire program.
type Program struct {
}

func NewProgram() *Program {
  return &Program{}
}

type ProgramBuilder struct {
  obj *Program
}

func NewProgramBuilder() *ProgramBuilder{
  return &ProgramBuilder{
    obj: NewProgram(),
  }
}

func (p ProgramBuilder) Emit() *Program{
  return &Program{
  }
}

func (p *Program) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Program) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Program"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Program) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("Program({})")
}

// The `struct` definition scope.
type Struct struct {
}

func NewStruct() *Struct {
  return &Struct{}
}

type StructBuilder struct {
  obj *Struct
}

func NewStructBuilder() *StructBuilder{
  return &StructBuilder{
    obj: NewStruct(),
  }
}

func (p StructBuilder) Emit() *Struct{
  return &Struct{
  }
}

func (p *Struct) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Struct) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Struct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Struct) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("Struct({})")
}

// The `union` definition scope.
type Union struct {
}

func NewUnion() *Union {
  return &Union{}
}

type UnionBuilder struct {
  obj *Union
}

func NewUnionBuilder() *UnionBuilder{
  return &UnionBuilder{
    obj: NewUnion(),
  }
}

func (p UnionBuilder) Emit() *Union{
  return &Union{
  }
}

func (p *Union) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Union) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Union"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Union) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("Union({})")
}

// The `exception` definition scope.
type Exception struct {
}

func NewException() *Exception {
  return &Exception{}
}

type ExceptionBuilder struct {
  obj *Exception
}

func NewExceptionBuilder() *ExceptionBuilder{
  return &ExceptionBuilder{
    obj: NewException(),
  }
}

func (p ExceptionBuilder) Emit() *Exception{
  return &Exception{
  }
}

func (p *Exception) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Exception) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Exception"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Exception) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("Exception({})")
}

// Field declartaions, for example in `struct` or `function` declartions.
type Field struct {
}

func NewField() *Field {
  return &Field{}
}

type FieldBuilder struct {
  obj *Field
}

func NewFieldBuilder() *FieldBuilder{
  return &FieldBuilder{
    obj: NewField(),
  }
}

func (p FieldBuilder) Emit() *Field{
  return &Field{
  }
}

func (p *Field) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Field) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Field"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Field) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("Field({})")
}

// The `typedef` definition scope.
type Typedef struct {
}

func NewTypedef() *Typedef {
  return &Typedef{}
}

type TypedefBuilder struct {
  obj *Typedef
}

func NewTypedefBuilder() *TypedefBuilder{
  return &TypedefBuilder{
    obj: NewTypedef(),
  }
}

func (p TypedefBuilder) Emit() *Typedef{
  return &Typedef{
  }
}

func (p *Typedef) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Typedef) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Typedef"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Typedef) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("Typedef({})")
}

// The `service` definition scope.
type Service struct {
}

func NewService() *Service {
  return &Service{}
}

type ServiceBuilder struct {
  obj *Service
}

func NewServiceBuilder() *ServiceBuilder{
  return &ServiceBuilder{
    obj: NewService(),
  }
}

func (p ServiceBuilder) Emit() *Service{
  return &Service{
  }
}

func (p *Service) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Service) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Service"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Service) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("Service({})")
}

// The `interaction` definition scope.
type Interaction struct {
}

func NewInteraction() *Interaction {
  return &Interaction{}
}

type InteractionBuilder struct {
  obj *Interaction
}

func NewInteractionBuilder() *InteractionBuilder{
  return &InteractionBuilder{
    obj: NewInteraction(),
  }
}

func (p InteractionBuilder) Emit() *Interaction{
  return &Interaction{
  }
}

func (p *Interaction) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Interaction) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Interaction"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Interaction) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("Interaction({})")
}

// The `function` definition scope.
type Function struct {
}

func NewFunction() *Function {
  return &Function{}
}

type FunctionBuilder struct {
  obj *Function
}

func NewFunctionBuilder() *FunctionBuilder{
  return &FunctionBuilder{
    obj: NewFunction(),
  }
}

func (p FunctionBuilder) Emit() *Function{
  return &Function{
  }
}

func (p *Function) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Function) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Function"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Function) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("Function({})")
}

// The Enum value definition scope.
type EnumValue struct {
}

func NewEnumValue() *EnumValue {
  return &EnumValue{}
}

type EnumValueBuilder struct {
  obj *EnumValue
}

func NewEnumValueBuilder() *EnumValueBuilder{
  return &EnumValueBuilder{
    obj: NewEnumValue(),
  }
}

func (p EnumValueBuilder) Emit() *EnumValue{
  return &EnumValue{
  }
}

func (p *EnumValue) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EnumValue) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("EnumValue"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EnumValue) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("EnumValue({})")
}

// The `const` definition scope.
type Const struct {
}

func NewConst() *Const {
  return &Const{}
}

type ConstBuilder struct {
  obj *Const
}

func NewConstBuilder() *ConstBuilder{
  return &ConstBuilder{
    obj: NewConst(),
  }
}

func (p ConstBuilder) Emit() *Const{
  return &Const{
  }
}

func (p *Const) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Const) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Const"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Const) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("Const({})")
}

type FbthriftInternalEnum struct {
}

func NewFbthriftInternalEnum() *FbthriftInternalEnum {
  return &FbthriftInternalEnum{}
}

type FbthriftInternalEnumBuilder struct {
  obj *FbthriftInternalEnum
}

func NewFbthriftInternalEnumBuilder() *FbthriftInternalEnumBuilder{
  return &FbthriftInternalEnumBuilder{
    obj: NewFbthriftInternalEnum(),
  }
}

func (p FbthriftInternalEnumBuilder) Emit() *FbthriftInternalEnum{
  return &FbthriftInternalEnum{
  }
}

func (p *FbthriftInternalEnum) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FbthriftInternalEnum) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("FbthriftInternalEnum"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FbthriftInternalEnum) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("FbthriftInternalEnum({})")
}

// A scope that includes all 'structured' definitions.
type Structured struct {
}

func NewStructured() *Structured {
  return &Structured{}
}

type StructuredBuilder struct {
  obj *Structured
}

func NewStructuredBuilder() *StructuredBuilder{
  return &StructuredBuilder{
    obj: NewStructured(),
  }
}

func (p StructuredBuilder) Emit() *Structured{
  return &Structured{
  }
}

func (p *Structured) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Structured) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Structured"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Structured) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("Structured({})")
}

// A scope that includes all 'interface' definitions.
type Interface struct {
}

func NewInterface() *Interface {
  return &Interface{}
}

type InterfaceBuilder struct {
  obj *Interface
}

func NewInterfaceBuilder() *InterfaceBuilder{
  return &InterfaceBuilder{
    obj: NewInterface(),
  }
}

func (p InterfaceBuilder) Emit() *Interface{
  return &Interface{
  }
}

func (p *Interface) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Interface) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Interface"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Interface) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("Interface({})")
}

// A scope that includes all program-scoped definition.
type RootDefinition struct {
}

func NewRootDefinition() *RootDefinition {
  return &RootDefinition{}
}

type RootDefinitionBuilder struct {
  obj *RootDefinition
}

func NewRootDefinitionBuilder() *RootDefinitionBuilder{
  return &RootDefinitionBuilder{
    obj: NewRootDefinition(),
  }
}

func (p RootDefinitionBuilder) Emit() *RootDefinition{
  return &RootDefinition{
  }
}

func (p *RootDefinition) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RootDefinition) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RootDefinition"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RootDefinition) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("RootDefinition({})")
}

// A scope that includes all definitions.
type Definition struct {
}

func NewDefinition() *Definition {
  return &Definition{}
}

type DefinitionBuilder struct {
  obj *Definition
}

func NewDefinitionBuilder() *DefinitionBuilder{
  return &DefinitionBuilder{
    obj: NewDefinition(),
  }
}

func (p DefinitionBuilder) Emit() *Definition{
  return &Definition{
  }
}

func (p *Definition) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Definition) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Definition"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Definition) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("Definition({})")
}

