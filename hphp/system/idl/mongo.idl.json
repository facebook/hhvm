{
    "preamble": "",
    "consts": [
    ],
    "funcs": [
        {
            "name": "bson_decode",
            "desc": "This function is very beta and entirely useless for 99% of users. It is only useful if you're doing something weird, such as writing your own driver on top of the PHP driver.",
            "flags": [
                "ZendCompat",
                "NoFCallBuiltin"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the deserialized BSON object."
            },
            "args": [
                {
                    "name": "bson",
                    "type": "Variant",
                    "desc": "The BSON to be deserialized."
                }
            ]
        },
        {
            "name": "bson_encode",
            "desc": "This function is very beta and entirely useless for 99% of users. It is only useful if you're doing something weird, such as writing your own driver on top of the PHP driver.",
            "flags": [
                "ZendCompat",
                "NoFCallBuiltin"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the serialized string."
            },
            "args": [
                {
                    "name": "anything",
                    "type": "Variant",
                    "desc": "The variable to be serialized."
                }
            ]
        }
    ],
    "classes": [
        {
            "name": "MongoClient",
            "desc": "A connection manager for PHP and MongoDB.\n\nThis class is used to create and manage connections. A typical use is: Example #1 MongoClient basic usage\n\n\n\nSee MongoClient::__construct() and the section on connecting for more information about creating connections.",
            "flags": [
                "ZendCompat"
            ],
            "properties": [
                {
                    "name": "connected",
                    "value": "false",
                    "type": "Boolean"
                },
                {
                    "name": "status",
                    "value": "null_string",
                    "type": "String"
                },
                {
                    "name": "server",
                    "value": "null_string",
                    "type": "String",
                    "flags": [
                        "IsProtected"
                    ]
                },
                {
                    "name": "persistent",
                    "value": "false",
                    "type": "Boolean",
                    "flags": [
                        "IsProtected"
                    ]
                }
            ],
            "funcs": [
                {
                    "name": "close",
                    "desc": "The MongoClient::close() method forcefully closes a connection to the database, even if persistent connections are being used. You should never have to do this under normal circumstances.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns if the connection was successfully closed."
                    },
                    "args": [
                        {
                            "name": "connection",
                            "type": "Variant",
                            "desc": "If connection is not given, or FALSE then connection that would be selected for writes would be closed. In a single-node configuration, that is then the whole connection, but if you are connected to a replica set, close() will only close the connection to the primary server.\n\nIf connection is TRUE then all connections as known by the connection manager will be closed. This can include connections that are not referenced in the connection string used to create the object that you are calling close on.\n\nIf connection is a string argument, then it will only close the connection identified by this hash. Hashes are identifiers for a connection and can be obtained by calling MongoClient::getConnections()."
                        }
                    ]
                },
                {
                    "name": "connect",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "If the connection was successful."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "__construct",
                    "desc": "If no parameters are passed, this connects to \"localhost:27017\" (or whatever was specified in php.ini for mongo.default_host and mongo.default_port).\n\nserver should have the form:\n\n\n\nThe connection string always starts with mongodb:\/\/, to indicate it is a connection string in this form. username and password are specified, the constructor will attempt to authenticate the connection with the database before returning. Username and password are optional and must be followed by an @, if specified.\n\nAt least one host must be given (port optional, always defaulting to 27017) and as many hosts as desired may be connected to. Host names are comma-separated and the constructor will return successfully if it connected to at least one host. If it could not connect to any of the hosts, it will throw a MongoConnectionException. Please see the Replica Sets section for information on how to connect to Replica Sets.\n\nIf you specified a username and password, you may specify a database to authenticate with. If db is not specified, \"admin\" will be used.\n\nAn optional query string may be used to specify extra options. The same options are supported through the options array as well, and are therefore redescribed there. See the examples below on how to set those options.\n\nOne part of the options governs how the driver reads from secondary nodes in a replica set environment. Extra information on how these read preferences work is available as well through the read preferences documentation page.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns a new database connection object."
                    },
                    "args": [
                        {
                            "name": "server",
                            "type": "Variant",
                            "desc": "The server name."
                        },
                        {
                            "name": "options",
                            "type": "Variant",
                            "desc": "An array of options for the connection. Currently available options include:\n\n\"connect\"\n\nIf the constructor should connect before returning. Default is TRUE. When set to FALSE the driver will automatically connect to the server whenever it is necessary to do a query. Alternatively, you can run MongoClient::connect() manually. Warning\n\nThis option is not supported through the connection string.\n\n\"connectTimeoutMS\"\n\nHow long a connection can take to be opened before timing out in milliseconds.\n\n\"db\"\n\nThe database to authenticate against can be specified here, instead of including it in the host list. This overrides a database given in the host list.\n\n\"fsync\"\n\nWhen fsync is set, all write operations on the database will block until the database server has flushed its database files to disk. This makes write operations a lot slower, but it guarantees that the write operation has succeeded and committed to disk. Please avoid using this option and use the journal option instead, perhaps in combination with the w option.\n\n\"journal\"\n\nWhen journal is set, all write operations on the database will block until the database server has flushed the journal to disk. This makes the write operations marginally slower, but it guarantees that the write operation has succeeded and the operation can be recovered in case of total system failure.\n\n\"password\"\n\nThe password can be specified here, instead of including it in the host list. This is especially useful if a password has a \"@\" in it. This overrides a password set in the host list.\n\n\"readPreference\"\n\nSpecifies the read preference type. Read preferences provide you with control from which secondaries data can be read from.\n\nAllowed values are: MongoClient::RP_PRIMARY, MongoClient::RP_PRIMARY_PREFERRED, MongoClient::RP_SECONDARY, MongoClient::RP_SECONDARY_PREFERRED and MongoClient::RP_NEAREST.\n\nSee the documentation on read preferences for more information.\n\n\"readPreferenceTags\"\n\nSpecifies the read preference tags as an array of strings. Tags can be used in combination with the readPreference option to further control which secondaries data might be read from.\n\nSee the documentation on read preferences for more information.\n\n\"replicaSet\"\n\nThe name of the replica set to connect to. If this is given, the primary will be automatically be determined. This means that the driver may end up connecting to a server that was not even listed. See the replica set example below for details.\n\n\"socketTimeoutMS\"\n\nHow long a send or receive on a socket can take before timing out. This is a client side timeout. If an insert hits the \"socketTimeoutMS\" value there is no way to know if the server actually received the write or not.\n\n\"ssl\"\n\nA boolean to specify whether you want to enable SSL for the connections to MongoDB. Extra options such as certificates can be set with SSL context options.\n\n\"username\"\n\nThe username can be specified here, instead of including it in the host list. This is especially useful if a username has a \":\" in it. This overrides a username set in the host list.\n\n\"w\"\n\nThe w option specifies the Write Concern for the driver, which determines how long the driver blocks when writing. The default value is 1.\n\nThis option is applicable when connecting to both single servers and replica sets. A positive value controls how many nodes must acknowledge the write instruction before the driver continues. A value of 1 would require the single server or primary (in a replica set) to acknowledge the write operation. A value of 3 would cause the driver to block until the write has been applied to the primary as well as two secondary servers (in a replica set).\n\nA string value is used to control which tag sets are taken into account for write concerns. \"majority\" is special and ensures that the write operation has been applied to the majority (more than 50%) of the participating nodes.\n\n\"wTimeoutMS\"\n\nThis option is used in combination with the \"w\" option. It controls how many milliseconds the server waits for the write concern to be satisfied. If it takes longer then the server signals to the driver that it took too long and the driver will throw a MongoCursorException exception.\n\nThe following options are deprecated and should no longer be used:\n\n\"timeout\"\n\nDeprecated alias for \"connectTimeoutMS\".\n\n\"wTimeout\"\n\nDeprecated alias for \"wTimeoutMS\"."
                        }
                    ]
                },
                {
                    "name": "dropDB",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the database response."
                    },
                    "args": [
                        {
                            "name": "db",
                            "type": "Variant",
                            "desc": "The database to drop. Can be a MongoDB object or the name of the database."
                        }
                    ]
                },
                {
                    "name": "__get",
                    "desc": "This is the cleanest way of getting a database. If the database name has any special characters, MongoClient::selectDB() will need to be used; however, this should be sufficient for most cases.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns a new db object."
                    },
                    "args": [
                        {
                            "name": "dbname",
                            "type": "Variant",
                            "desc": "The database name."
                        }
                    ]
                },
                {
                    "name": "getConnections",
                    "desc": "Returns an array of all open connections, and information about each of the servers",
                    "flags": [
                        "IsStatic",
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "An array of open connections."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "getHosts",
                    "desc": "This method is only useful with a connection to a replica set. It returns the status of all of the hosts in the set. Without a replica set, it will just return an array with one element containing the host that you are connected to.\n\nSee the query section of this manual for information on distributing reads to secondaries.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns an array of information about the hosts in the set. Includes each host's hostname, its health (1 is healthy), its state (1 is primary, 2 is secondary, 0 is anything else), the amount of time it took to ping the server, and when the last ping occurred. For example, on a three-member replica set, it might look something like: array(3) { [\"A:27017\"]=> array(4) { [\"host\"]=> \"A\" [\"port\"]=> 27017 [\"health\"]=> int(1) [\"state\"]=> int(2) [\"ping\"]=> int(369) [\"lastPing\"]=> int(1309470644) } [\"B:27017\"]=> array(4) { [\"host\"]=> \"B\" [\"port\"]=> 27017 [\"health\"]=> int(1) [\"state\"]=> int(1) [\"ping\"]=> int(139) [\"lastPing\"]=> int(1309470644) } [\"C:27017\"]=> array(4) { [\"host\"]=> \"C\" [\"port\"]=> 27017 [\"health\"]=> int(1) [\"state\"]=> int(2) [\"ping\"]=> int(1012) [\"lastPing\"]=> int(1309470644) } }"
                    },
                    "args": [
                    ]
                },
                {
                    "name": "getReadPreference",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "type for the string read preference mode (corresponding to the MongoClient constants), and tagsets containing a list of all tag set criteria. If no tag sets were specified, tagsets will not be present in the array."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "listDBs",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns an associative array containing three fields. The first field is databases, which in turn contains an array. Each element of the array is an associative array corresponding to a database, giving th database's name, size, and if it's empty. The other two fields are totalSize (in bytes) and ok, which is 1 if this method ran successfully."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "selectCollection",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns a new collection object."
                    },
                    "args": [
                        {
                            "name": "db",
                            "type": "Variant",
                            "desc": "The database name."
                        },
                        {
                            "name": "collection",
                            "type": "Variant",
                            "desc": "The collection name."
                        }
                    ]
                },
                {
                    "name": "selectDB",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns a new database object."
                    },
                    "args": [
                        {
                            "name": "name",
                            "type": "Variant",
                            "desc": "The database name."
                        }
                    ]
                },
                {
                    "name": "setReadPreference",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "TRUE on success, or FALSE otherwise."
                    },
                    "args": [
                        {
                            "name": "read_preference",
                            "type": "Variant",
                            "desc": "MongoClient::RP_PRIMARY, MongoClient::RP_PRIMARY_PREFERRED, MongoClient::RP_SECONDARY, MongoClient::RP_SECONDARY_PREFERRED, or MongoClient::RP_NEAREST."
                        },
                        {
                            "name": "tags",
                            "type": "Variant",
                            "desc": ""
                        }
                    ]
                },
                {
                    "name": "__toString",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns hostname and port for this connection."
                    },
                    "args": [
                    ]
                }
            ]
        },
        {
            "name": "MongoDB",
            "desc": "Instances of this class are used to interact with a database. To get a database: Example #1 Selecting a database\n\nDatabase names can use almost any character in the ASCII range. However, they cannot contain \" \", \".\" or be the empty string. The name \"system\" is also reserved.\n\nA few unusual, but valid, database names: \"null\", \"[x,y]\", \"3\", \"\\\"\", \"\/\".\n\nUnlike collection names, database names may contain \"$\".",
            "flags": [
                "ZendCompat"
            ],
            "properties": [
                {
                    "name": "w",
                    "value": 1,
                    "type": "Int64"
                },
                {
                    "name": "wtimeout",
                    "value": 10000,
                    "type": "Int64"
                }
            ],
            "funcs": [
                {
                    "name": "authenticate",
                    "desc": "This method causes its connection to be authenticated. If authentication is enabled for the database server (it's not, by default), you need to log in before the database will allow you to do anything.\n\nIn general, you should use the authenticate built into MongoClient::__construct() in preference to this method. If you authenticate on connection and the connection drops and reconnects during your session, you'll be reauthenticated. If you manually authenticated using this method and the connection drops, you'll have to call this method again once you're reconnected.\n\nThis method is identical to running:\n\n\n\nOnce a connection has been authenticated, it can only be un-authenticated by using the \"logout\" database command:",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns database response. If the login was successful, it will return\n\nIf something went wrong, it will return\n\n(\"auth fails\" could be another message, depending on database version and what when wrong)."
                    },
                    "args": [
                        {
                            "name": "username",
                            "type": "Variant",
                            "desc": "The username."
                        },
                        {
                            "name": "password",
                            "type": "Variant",
                            "desc": "The password (in plaintext)."
                        }
                    ]
                },
                {
                    "name": "command",
                    "desc": "Almost everything that is not a CRUD operation can be done with a database command. Need to know the database version? There's a command for that. Need to do aggregation? There's a command for that. Need to turn up logging? You get the idea.\n\nThis method is identical to:",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns database response. Every database response is always maximum one document, which means that the result of a database command can never exceed 16MB. The resulting document's structure depends on the command, but most results will have the ok field to indicate success or failure and results containing an array of each of the resulting documents."
                    },
                    "args": [
                        {
                            "name": "command",
                            "type": "Variant",
                            "desc": "The query to send."
                        },
                        {
                            "name": "options",
                            "type": "Variant",
                            "desc": "This parameter is an associative array of the form array(\"optionname\" => <boolean>, ...). Currently supported options are: \"timeout\"MongoCursor::$timeout. If acknowledged writes are used, this sets how long (in milliseconds) for the client to wait for a database response. If the database does not respond within the timeout period, a MongoCursorTimeoutException will be thrown."
                        }
                    ]
                },
                {
                    "name": "__construct",
                    "desc": "This method is not meant to be called directly. The preferred way to create an instance of MongoDB is through MongoClient::__get() or MongoClient::selectDB().\n\nIf you're ignoring the previous paragraph and want to call it directly you can do so:\n\n\n\nBut don't. Isn't this much nicer:",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the database."
                    },
                    "args": [
                        {
                            "name": "conn",
                            "type": "Variant",
                            "desc": "Database connection."
                        },
                        {
                            "name": "name",
                            "type": "Variant",
                            "desc": "Database name."
                        }
                    ]
                },
                {
                    "name": "createCollection",
                    "desc": "This method is used to create capped collections and other collections requiring special options. It is identical to running:\n\nSee MongoDB::command() for more information about database commands.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns a collection object representing the new collection."
                    },
                    "args": [
                        {
                            "name": "name",
                            "type": "Variant",
                            "desc": "The name of the collection."
                        },
                        {
                            "name": "options",
                            "type": "Variant",
                            "desc": "An array containing options for the collections. Each option is its own element in the options array, with the option name listed below being the key of the element. The supported options depend on the MongoDB server version. At the moment, the following options are supported:\n\ncapped\n\nIf the collection should be a fixed size."
                        },
                        {
                            "name": "capped",
                            "type": "Variant",
                            "desc": "If the collection is fixed size, its size in bytes."
                        },
                        {
                            "name": "size",
                            "type": "Variant",
                            "desc": "If the collection is fixed size, the maximum number of elements to store in the collection."
                        },
                        {
                            "name": "max",
                            "type": "Variant",
                            "desc": "If capped is TRUE you can specify FALSE to disable the automatic index created on the _id field. Before MongoDB 2.2, the default value for autoIndexId was FALSE."
                        }
                    ]
                },
                {
                    "name": "createDBRef",
                    "desc": "This method is a flexible interface for creating database refrences (see MongoDBRef).",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns a database reference array.\n\nIf an array without an _id field was provided as the document_or_id parameter, NULL will be returned."
                    },
                    "args": [
                        {
                            "name": "collection",
                            "type": "Variant",
                            "desc": "The collection to which the database reference will point."
                        },
                        {
                            "name": "document_or_id",
                            "type": "Variant",
                            "desc": "If an array or object is given, its _id field will be used as the reference ID. If a MongoId or scalar is given, it will be used as the reference ID."
                        }
                    ]
                },
                {
                    "name": "drop",
                    "desc": "This drops the database currently being used.\n\nThis is identical to running:",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the database response."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "dropCollection",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the database response."
                    },
                    "args": [
                        {
                            "name": "coll",
                            "type": "Variant",
                            "desc": "MongoCollection or name of collection to drop."
                        }
                    ]
                },
                {
                    "name": "execute",
                    "desc": "The Mongo database server runs a JavaScript engine. This method allows you to run arbitary JavaScript on the database. This can be useful if you want touch a number of collections lightly, or process some results on the database side to reduce the amount that has to be sent to the client.\n\nRunning JavaScript in the database takes a write lock, meaning it blocks other operations. Make sure you consider this before running a long script.\n\nThis is a wrapper for a database command. This method is basically:\n\n\n\nMongoDB implies a return statement if you have a single statement on a single line. This can cause some unintuitive behavior. For example, this returns \"foo\":\n\n\n\nHowever, these return NULL:\n\n\n\nTo avoid surprising behavior, it is best not to depend on MongoDB to decide what to return, but to explicitly state a return value. In the examples above, we can change them to:\n\n\n\nNow the first statement will return \"foo\" and the second statement will return a count of the \"foo\" collection.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the result of the evaluation."
                    },
                    "args": [
                        {
                            "name": "code",
                            "type": "Variant",
                            "desc": "MongoCode or string to execute."
                        },
                        {
                            "name": "args",
                            "type": "Variant",
                            "desc": "Arguments to be passed to code."
                        }
                    ]
                },
                {
                    "name": "forceError",
                    "desc": "This method is not very useful for normal MongoDB use. It forces a database error to occur. This means that MongoDB::lastError() will return a generic database error after running this command.\n\nThis command is identical to running:",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the database response."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "__get",
                    "desc": "This is the easiest way of getting a collection from a database object. If a collection name contains strange characters, you may have to use MongoDB::selectCollection() instead.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the collection."
                    },
                    "args": [
                        {
                            "name": "name",
                            "type": "Variant",
                            "desc": "The name of the collection."
                        }
                    ]
                },
                {
                    "name": "getCollectionNames",
                    "desc": "Returns an array of all the collection names for the given database.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the names of the all the collections in the database as an array."
                    },
                    "args": [
                        {
                            "name": "includeSystemCollections",
                            "type": "Variant",
                            "desc": "Include system collections."
                        }
                    ]
                },
                {
                    "name": "getDBRef",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the document pointed to by the reference."
                    },
                    "args": [
                        {
                            "name": "ref",
                            "type": "Variant",
                            "desc": "A database reference."
                        }
                    ]
                },
                {
                    "name": "getGridFS",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns a new gridfs object for this database."
                    },
                    "args": [
                        {
                            "name": "prefix",
                            "type": "Variant",
                            "desc": "The prefix for the files and chunks collections."
                        }
                    ]
                },
                {
                    "name": "getProfilingLevel",
                    "desc": "This returns the current database profiling level.\n\nThe database profiler tracks query execution times. If you turn it on (say, using MongoDB::setProfilingLevel() or the shell), you can see how many queries took longer than a given number of milliseconds or the timing for all queries.\n\nNote that profiling slows down queries, so it is better to use in development or testing than in a time-sensitive application.\n\nThis function is equivalent to running:",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the profiling level."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "getReadPreference",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "type for the string read preference mode (corresponding to the MongoClient constants), and tagsets containing a list of all tag set criteria. If no tag sets were specified, tagsets will not be present in the array."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "getSlaveOkay",
                    "desc": "See the query section of this manual for information on distributing reads to secondaries.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the value of slaveOkay for this instance."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "lastError",
                    "desc": "This method is equivalent to:",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the error, if there was one."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "listCollections",
                    "desc": "Gets a list of all the collections in the database and returns them as an array of MongoCollection objects.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns an array of MongoCollection objects."
                    },
                    "args": [
                        {
                            "name": "includeSystemCollections",
                            "type": "Variant",
                            "desc": "Include system collections."
                        }
                    ]
                },
                {
                    "name": "prevError",
                    "desc": "MongoDB::lastError() is usually preferred to this. This method returns the last database error that occurred and how many operations ago it occurred. It is mostly deprecated.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the error and the number of operations ago it occurred."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "repair",
                    "desc": "This creates a fresh copy of all database data. It will remove any corrupt data and compact and large stretches of free space it finds. This is a very slow operation on a large database.\n\nThis is usually run from the shell or the command line, not the driver.\n\nIt is equivalent to the function:",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns db response."
                    },
                    "args": [
                        {
                            "name": "preserve_cloned_files",
                            "type": "Variant",
                            "desc": "If cloned files should be kept if the repair fails."
                        },
                        {
                            "name": "backup_original_files",
                            "type": "Variant",
                            "desc": "If original files should be backed up."
                        }
                    ]
                },
                {
                    "name": "resetError",
                    "desc": "This method is not used in normal operations. It resets the database error tracker (which can be incremented with MongoDB::forceError(), also not normally used).\n\nIt is equivalent to running:",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the database response."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "selectCollection",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns a new collection object."
                    },
                    "args": [
                        {
                            "name": "name",
                            "type": "Variant",
                            "desc": "The collection name."
                        }
                    ]
                },
                {
                    "name": "setProfilingLevel",
                    "desc": "This changes the current database profiling level.\n\nThis function is equivalent to running:\n\n\n\nThe options for level are 0 (off), 1 (queries > 100ms), and 2 (all queries). If you would like to profile queries that take longer than another time period, use the database command and pass it a second option, the number of milliseconds. For example, to profile all queries that take longer than one second, run:\n\n\n\nProfiled queries will appear in the system.profile collection of this database.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the previous profiling level."
                    },
                    "args": [
                        {
                            "name": "level",
                            "type": "Variant",
                            "desc": "Profiling level."
                        }
                    ]
                },
                {
                    "name": "setReadPreference",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "TRUE on success, or FALSE otherwise."
                    },
                    "args": [
                        {
                            "name": "read_preference",
                            "type": "Variant",
                            "desc": "MongoClient::RP_PRIMARY, MongoClient::RP_PRIMARY_PREFERRED, MongoClient::RP_SECONDARY, MongoClient::RP_SECONDARY_PREFERRED, or MongoClient::RP_NEAREST."
                        },
                        {
                            "name": "tags",
                            "type": "Variant",
                            "desc": ""
                        }
                    ]
                },
                {
                    "name": "setSlaveOkay",
                    "desc": "See the query section of this manual for information on distributing reads to secondaries.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the former value of slaveOkay for this instance."
                    },
                    "args": [
                        {
                            "name": "ok",
                            "type": "Variant",
                            "desc": "If reads should be sent to secondary members of a replica set for all possible queries using this MongoDB instance."
                        }
                    ]
                },
                {
                    "name": "__toString",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": null
                    },
                    "args": [
                    ]
                }
            ],
            "consts": [
                {
                    "name": "PROFILING_OFF",
                    "value": 0
                },
                {
                    "name": "PROFILING_SLOW",
                    "value": 1
                },
                {
                    "name": "PROFILING_ON",
                    "value": 2
                }
            ]
        },
        {
            "name": "MongoCollection",
            "desc": "Representations a database collection.\n\nCollection names can use any character in the ASCII set. Some valid collection names are \"\", \"...\", \"my collection\", and \"*&#@\".\n\nUser-defined collection names cannot contain the $ symbol. There are certain system collections which use a $ in their names (e.g., local.oplog.$main), but it is a reserved character. If you attempt to create and use a collection with a $ in the name, MongoDB will assert.",
            "flags": [
                "ZendCompat"
            ],
            "properties": [
                {
                    "name": "w",
                    "value": 1,
                    "type": "Int64"
                },
                {
                    "name": "wtimeout",
                    "value": 10000,
                    "type": "Int64"
                }
            ],
            "funcs": [
                {
                    "name": "aggregate",
                    "desc": "The MongoDB aggregation framework provides a means to calculate aggregated values without having to use MapReduce. While MapReduce is powerful, it is often more difficult than necessary for many simple aggregation tasks, such as totaling or averaging field values.\n\nThis method accepts either a variable amount of pipeline operators, or a single array of operators constituting the pipeline.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin",
                        "VariableArguments"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "The result of the aggregation as an array. The ok will be set to 1 on success, 0 on failure."
                    },
                    "args": [
                        {
                            "name": "pipeline",
                            "type": "Variant",
                            "desc": "An array of pipeline operators, or just the first operator."
                        },
                        {
                            "name": "op",
                            "type": "Variant",
                            "desc": "The second pipeline operator."
                        }
                    ]
                },
                {
                    "name": "batchInsert",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "If the w parameter is set to acknowledge the write, returns an associative array with the status of the inserts (\"ok\") and any error that may have occurred (\"err\"). Otherwise, returns TRUE if the batch insert was successfully sent, FALSE otherwise."
                    },
                    "args": [
                        {
                            "name": "a",
                            "type": "Variant",
                            "desc": "An array of arrays or objects. If any objects are used, they may not have protected or private properties.\n\nIf the documents to insert do not have an _id key or property, a new MongoId instance will be created and assigned to it. See MongoCollection::insert() for additional information on this behavior."
                        },
                        {
                            "name": "options",
                            "type": "Variant",
                            "desc": "Options for the inserts.\n\n\"continueOnError\"\n\nBoolean, defaults to FALSE. If set, the database will not stop processing a bulk insert if one fails (eg due to duplicate IDs). This makes bulk insert behave similarly to a series of single inserts, except that calling MongoDB::lastError() will have an error set if any insert fails, not just the last one. If multiple errors occur, only the most recent will be reported by MongoDB::lastError().\n\nPlease note that continueOnError affects errors on the database side only. If you try to insert a document that has errors (for example it contains a key with an empty name), then the document is not even transferred to the database as the driver detects this error and bails out. continueOnError has no effect on errors detected in the documents by the driver. \"fsync\"FALSE. Forces the insert to be synced to disk before returning success. If TRUE, an acknowledged insert is implied and will override setting w to 0. \"j\"FALSE. Forces the insert to be synced to the journal before returning success. If TRUE, an acknowledged insert is implied and will override setting w to 0. \"w\"WriteConcerns. The default value for MongoClient is 1. \"wtimeout\"WriteConcern acknowledgement. The default value for MongoClient is 10000 milliseconds. \"safe\"Deprecated. Please use the WriteConcern w option. \"timeout\"MongoCursor::$timeout. If acknowledged writes are used, this sets how long (in milliseconds) for the client to wait for a database response. If the database does not respond within the timeout period, a MongoCursorTimeoutException will be thrown.",
                            "value": "empty_array"
                        }
                    ]
                },
                {
                    "name": "__construct",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns a new collection object."
                    },
                    "args": [
                        {
                            "name": "db",
                            "type": "Variant",
                            "desc": "Parent database."
                        },
                        {
                            "name": "name",
                            "type": "Variant",
                            "desc": "Name for this collection."
                        }
                    ]
                },
                {
                    "name": "count",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the number of documents matching the query."
                    },
                    "args": [
                        {
                            "name": "query",
                            "type": "Variant",
                            "desc": "Associative array or object with fields to match."
                        },
                        {
                            "name": "limit",
                            "type": "Variant",
                            "desc": "Specifies an upper limit to the number returned."
                        },
                        {
                            "name": "skip",
                            "type": "Variant",
                            "desc": "Specifies a number of results to skip before starting the count."
                        }
                    ]
                },
                {
                    "name": "createDBRef",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns a database reference array.\n\nIf an array without an _id field was provided as the document_or_id parameter, NULL will be returned."
                    },
                    "args": [
                        {
                            "name": "document_or_id",
                            "type": "Variant",
                            "desc": "If an array or object is given, its _id field will be used as the reference ID. If a MongoId or scalar is given, it will be used as the reference ID."
                        }
                    ]
                },
                {
                    "name": "deleteIndex",
                    "desc": "This method is identical to:\n\n\n\nEach index, when created, is given a unique name. This is generally user-set (with MongoCollection::ensureIndex()'s \"name\" option) or generated by the driver from a combination of key names and directions. This name is then used by MongoCollection::deleteIndex() to remove the function.\n\nUnfortunately, the MongoCollection::ensureIndex() generates slightly different names than the shell and, due to backwards compatibility issues, MongoCollection::deleteIndex() cannot delete custom-named indexes as well. Thus, the best way to delete indexes created in the shell or with custom names is to directly call the deleteIndexes database command.\n\nThus, if you named an index \"superfast query\", you could only delete it with the PHP driver by running:\n\n\n\nTo find what an index is named, you can query the system.indexes collection of a database and look for the name field.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the database response."
                    },
                    "args": [
                        {
                            "name": "keys",
                            "type": "Variant",
                            "desc": "Field or fields from which to delete the index."
                        }
                    ]
                },
                {
                    "name": "deleteIndexes",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the database response."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "distinct",
                    "desc": "The distinct command returns a list of distinct values for the given key across a collection.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns an array of distinct values, or FALSE on failure"
                    },
                    "args": [
                        {
                            "name": "key",
                            "type": "Variant",
                            "desc": "The key to use."
                        },
                        {
                            "name": "query",
                            "type": "Variant",
                            "desc": "An optional query parameters"
                        }
                    ]
                },
                {
                    "name": "drop",
                    "desc": "Drops this collection and deletes its indices.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the database response."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "ensureIndex",
                    "desc": "This method creates an index on the collection and the specified fields. The key specification can either be just a single field name as string, or an array containing one or more field names with their sort direction.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns an array containing the status of the index creation if the \"w\" option is set. Otherwise, returns TRUE.\n\nFields in the status array are described in the documentation for MongoCollection::insert()."
                    },
                    "args": [
                        {
                            "name": "keys",
                            "type": "Variant",
                            "desc": "An array of fields by which to sort the index on. Each element in the array has as key the field name, and as value either 1 for ascending sort, or -1 for descending sort."
                        },
                        {
                            "name": "options",
                            "type": "Variant",
                            "desc": "This parameter is an associative array of the form array(\"optionname\" => <boolean>, ...). Currently supported options are: \"w\"WriteConcerns. The default value for MongoClient is 1.\n\n\"unique\"\n\nCreate a unique index. Warning\n\nA unique index cannot be created on a field if multiple existing documents do not contain the field. The field is effectively NULL for these documents and thus already non-unique. Sparse indexing may be used to overcome this, since it will prevent documents without the field from being indexed.\n\n\"dropDups\"\n\nIf a unique index is being created and duplicate values exist, drop all but one duplicate value.\n\n\"sparse\"\n\nCreate a sparse index, which only includes documents containing the field. This option is only compatible with single-field indexes.\n\n\"expireAfterSeconds\"\n\nThe value of this option should specify the number of seconds after which a document should be considered expired and automatically removed from the collection. This option is only compatible with single-field indexes where the field will contain MongoDate values.\n\nThis feature is available in MongoDB 2.2+. See Expire Data from Collections by Setting TTL for more information.\n\n\"background\"\n\nBy default, index creation is a blocking operation and will stop other operations on the database from proceeding until completed. If you specify TRUE for this option, the index will be created in the background while other operations are taking place. Warning\n\nPrior to MongoDB 2.1.0, the index build operation is not a background build when it replicates to secondaries, irrespective of this option. See Building Indexes with Replica Sets for more information.\n\n\"name\"\n\nThis option allows you to override the algorithm that the driver uses to create an index name and specify your own. This can be useful if you are indexing many keys and Mongo complains about the index name being too long. \"timeout\"MongoCursor::$timeout. If acknowledged writes are used, this sets how long (in milliseconds) for the client to wait for a database response. If the database does not respond within the timeout period, a MongoCursorTimeoutException will be thrown. \"safe\"Deprecated. Please use the WriteConcern w option."
                        }
                    ]
                },
                {
                    "name": "find",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns a cursor for the search results."
                    },
                    "args": [
                        {
                            "name": "query",
                            "type": "Variant",
                            "desc": "The fields for which to search. MongoDB's query language is quite extensive. The PHP driver will in almost all cases pass the query straight through to the server, so reading the MongoDB core docs on find is a good idea. Warning\n\nPlease make sure that for all special query operators (starting with $) you use single quotes so that PHP doesn't try to replace \"$exists\" with the value of the variable $exists."
                        },
                        {
                            "name": "fields",
                            "type": "Variant",
                            "desc": "Fields of the results to return. The array is in the format array('fieldname' => true, 'fieldname2' => true). The _id field is always returned."
                        }
                    ]
                },
                {
                    "name": "findAndModify",
                    "desc": "The findAndModify command atomically modifies and returns a single document. By default, the returned document does not include the modifications made on the update. To return the document with the modifications made on the update, use the new option.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the original document, or the modified document when new is set."
                    },
                    "args": [
                        {
                            "name": "query",
                            "type": "Variant",
                            "desc": "The query criteria to search for."
                        },
                        {
                            "name": "update",
                            "type": "Variant",
                            "desc": "The update criteria."
                        },
                        {
                            "name": "fields",
                            "type": "Variant",
                            "desc": "Optionally only return these fields."
                        },
                        {
                            "name": "options",
                            "type": "Variant",
                            "desc": "An array of options to apply, such as remove the match document from the DB and return it. Option Description sort array Determines which document the operation will modify if the query selects multiple documents. findAndModify will modify the first document in the sort order specified by this argument. remove boolean Optional if update field exists. When TRUE, removes the selected document. The default is FALSE. update array Optional if remove field exists. Performs an update of the selected document. new boolean Optional. When TRUE, returns the modified document rather than the original. The findAndModify method ignores the new option for remove operations. The default is FALSE. upsert boolean Optional. Used in conjunction with the update field. When TRUE, the findAndModify command creates a new document if the query returns no documents. The default is false. In MongoDB 2.2, the findAndModify command returns NULL when upsert is TRUE."
                        }
                    ]
                },
                {
                    "name": "findOne",
                    "desc": "As opposed to MongoCollection::find(), this method will return only the first result from the result set, and not a MongoCursor that can be iterated over.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns record matching the search or NULL."
                    },
                    "args": [
                        {
                            "name": "query",
                            "type": "Variant",
                            "desc": "The fields for which to search. MongoDB's query language is quite extensive. The PHP driver will in almost all cases pass the query straight through to the server, so reading the MongoDB core docs on find is a good idea. Warning\n\nPlease make sure that for all special query operaters (starting with $) you use single quotes so that PHP doesn't try to replace \"$exists\" with the value of the variable $exists."
                        },
                        {
                            "name": "fields",
                            "type": "Variant",
                            "desc": "Fields of the results to return. The array is in the format array('fieldname' => true, 'fieldname2' => true). The _id field is always returned."
                        }
                    ]
                },
                {
                    "name": "__get",
                    "desc": "A concise syntax for getting a collection with a dot-separated name. If a collection name contains strange characters, you may have to use MongoDB::selectCollection() instead.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the collection."
                    },
                    "args": [
                        {
                            "name": "name",
                            "type": "Variant",
                            "desc": "The next string in the collection name."
                        }
                    ]
                },
                {
                    "name": "getDBRef",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the database document pointed to by the reference."
                    },
                    "args": [
                        {
                            "name": "ref",
                            "type": "Variant",
                            "desc": "A database reference."
                        }
                    ]
                },
                {
                    "name": "getIndexInfo",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "This function returns an array in which each element describes an index. Elements will contain the values name for the name of the index, ns for the namespace (a combination of the database and collection name), and key for a list of all fields in the index and their ordering. Additional values may be present for special indexes, such as unique or sparse."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "getName",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the name of this collection."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "getReadPreference",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "type for the string read preference mode (corresponding to the MongoClient constants), and tagsets containing a list of all tag set criteria. If no tag sets were specified, tagsets will not be present in the array."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "getSlaveOkay",
                    "desc": "See the query section of this manual for information on distributing reads to secondaries.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the value of slaveOkay for this instance."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "group",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns an array containing the result."
                    },
                    "args": [
                        {
                            "name": "keys",
                            "type": "Variant",
                            "desc": "Fields to group by. If an array or non-code object is passed, it will be the key used to group results. keys is an instance of MongoCode, keys will be treated as a function that returns the key to group by (see the \"Passing a keys function\" example below)."
                        },
                        {
                            "name": "initial",
                            "type": "Variant",
                            "desc": "Initial value of the aggregation counter object."
                        },
                        {
                            "name": "reduce",
                            "type": "Variant",
                            "desc": "A function that takes two arguments (the current document and the aggregation to this point) and does the aggregation."
                        },
                        {
                            "name": "options",
                            "type": "Variant",
                            "desc": "Optional parameters to the group command. Valid options include:\n\n\"condition\"\n\nCriteria for including a document in the aggregation.\n\n\"finalize\"\n\nFunction called once per unique key that takes the final output of the reduce function."
                        }
                    ]
                },
                {
                    "name": "insert",
                    "desc": "All strings sent to the database must be UTF-8. If a string is not UTF-8, a MongoException will be thrown. To insert (or query for) a non-UTF-8 string, use MongoBinData.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns an array containing the status of the insertion if the \"w\" option is set. Otherwise, returns TRUE if the inserted array is not empty (a MongoException will be thrown if the inserted array is empty).\n\nIf an array is returned, the following keys may be present: ok\n\nThis should almost always be 1 (unless last_error itself failed). err\n\nIf this field is non-null, an error occurred on the previous operation. If this field is set, it will be a string describing the error that occurred. code\n\nIf a database error occurred, the relevant error code will be passed back to the client. errmsg\n\nThis field is set if something goes wrong with a database command. It is coupled with ok being 0. For example, if w is set and times out, errmsg will be set to \"timed out waiting for slaves\" and ok will be 0. If this field is set, it will be a string describing the error that occurred. n\n\nIf the last operation was an update, upsert, or a remove, the number of documents affected will be returned. For insert operations, this value is always 0. wtimeout\n\nIf the previous option timed out waiting for replication. waited\n\nHow long the operation waited before timing out. wtime\n\nIf w was set and the operation succeeded, how long it took to replicate to w servers. upserted\n\nIf an upsert occurred, this field will contain the new record's _id field. For upserts, either this field or updatedExisting will be present (unless an error occurred). updatedExisting\n\nIf an upsert updated an existing element, this field will be true. For upserts, either this field or upserted will be present (unless an error occurred)."
                    },
                    "args": [
                        {
                            "name": "a",
                            "type": "Variant",
                            "desc": "An array or object. If an object is used, it may not have protected or private properties.\n\nIf the parameter does not have an _id key or property, a new MongoId instance will be created and assigned to it. This special behavior does not mean that the parameter is passed by reference."
                        },
                        {
                            "name": "options",
                            "type": "Variant",
                            "desc": "Options for the insert. \"fsync\"FALSE. Forces the insert to be synced to disk before returning success. If TRUE, an acknowledged insert is implied and will override setting w to 0. \"j\"FALSE. Forces the insert to be synced to the journal before returning success. If TRUE, an acknowledged insert is implied and will override setting w to 0. \"w\"WriteConcerns. The default value for MongoClient is 1. \"wtimeout\"WriteConcern acknowledgement. The default value for MongoClient is 10000 milliseconds. \"safe\"Deprecated. Please use the WriteConcern w option. \"timeout\"MongoCursor::$timeout. If acknowledged writes are used, this sets how long (in milliseconds) for the client to wait for a database response. If the database does not respond within the timeout period, a MongoCursorTimeoutException will be thrown."
                        }
                    ]
                },
                {
                    "name": "remove",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns an array containing the status of the removal if the \"w\" option is set. Otherwise, returns TRUE.\n\nFields in the status array are described in the documentation for MongoCollection::insert()."
                    },
                    "args": [
                        {
                            "name": "criteria",
                            "type": "Variant",
                            "desc": "Description of records to remove."
                        },
                        {
                            "name": "options",
                            "type": "Variant",
                            "desc": "Options for remove. \"w\"WriteConcerns. The default value for MongoClient is 1.\n\n\"justOne\"\n\nRemove at most one record matching this criteria. \"fsync\"FALSE. Forces the insert to be synced to disk before returning success. If TRUE, an acknowledged insert is implied and will override setting w to 0. \"j\"FALSE. Forces the insert to be synced to the journal before returning success. If TRUE, an acknowledged insert is implied and will override setting w to 0. \"w\"WriteConcerns. The default value for MongoClient is 1. \"wtimeout\"WriteConcern acknowledgement. The default value for MongoClient is 10000 milliseconds. \"safe\"Deprecated. Please use the WriteConcern w option. \"timeout\"MongoCursor::$timeout. If acknowledged writes are used, this sets how long (in milliseconds) for the client to wait for a database response. If the database does not respond within the timeout period, a MongoCursorTimeoutException will be thrown."
                        }
                    ]
                },
                {
                    "name": "save",
                    "desc": "If the object is from the database, update the existing database object, otherwise insert this object.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "If w was set, returns an array containing the status of the save. Otherwise, returns a boolean representing if the array was not empty (an empty array will not be inserted)."
                    },
                    "args": [
                        {
                            "name": "a",
                            "type": "Variant",
                            "desc": "Array or object to save. If an object is used, it may not have protected or private properties.\n\nIf the parameter does not have an _id key or property, a new MongoId instance will be created and assigned to it. See MongoCollection::insert() for additional information on this behavior."
                        },
                        {
                            "name": "options",
                            "type": "Variant",
                            "desc": "Options for the save. \"fsync\"FALSE. Forces the insert to be synced to disk before returning success. If TRUE, an acknowledged insert is implied and will override setting w to 0. \"j\"FALSE. Forces the insert to be synced to the journal before returning success. If TRUE, an acknowledged insert is implied and will override setting w to 0. \"w\"WriteConcerns. The default value for MongoClient is 1. \"wtimeout\"WriteConcern acknowledgement. The default value for MongoClient is 10000 milliseconds. \"safe\"Deprecated. Please use the WriteConcern w option. \"timeout\"MongoCursor::$timeout. If acknowledged writes are used, this sets how long (in milliseconds) for the client to wait for a database response. If the database does not respond within the timeout period, a MongoCursorTimeoutException will be thrown."
                        }
                    ]
                },
                {
                    "name": "setReadPreference",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "TRUE on success, or FALSE otherwise."
                    },
                    "args": [
                        {
                            "name": "read_preference",
                            "type": "Variant",
                            "desc": "MongoClient::RP_PRIMARY, MongoClient::RP_PRIMARY_PREFERRED, MongoClient::RP_SECONDARY, MongoClient::RP_SECONDARY_PREFERRED, or MongoClient::RP_NEAREST."
                        },
                        {
                            "name": "tags",
                            "type": "Variant",
                            "desc": ""
                        }
                    ]
                },
                {
                    "name": "setSlaveOkay",
                    "desc": "See the query section of this manual for information on distributing reads to secondaries.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the former value of slaveOkay for this instance."
                    },
                    "args": [
                        {
                            "name": "ok",
                            "type": "Variant",
                            "desc": "If reads should be sent to secondary members of a replica set for all possible queries using this MongoCollection instance."
                        }
                    ]
                },
                {
                    "name": "toIndexString",
                    "desc": null,
                    "flags": [
                        "IsStatic",
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns a string that describes the index."
                    },
                    "args": [
                        {
                            "name": "keys",
                            "type": "Variant",
                            "desc": "Field or fields to convert to the identifying string"
                        }
                    ]
                },
                {
                    "name": "__toString",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": null
                    },
                    "args": [
                    ]
                },
                {
                    "name": "update",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns an array containing the status of the update if the \"w\" option is set. Otherwise, returns TRUE.\n\nFields in the status array are described in the documentation for MongoCollection::insert()."
                    },
                    "args": [
                        {
                            "name": "criteria",
                            "type": "Variant",
                            "desc": "Description of the objects to update."
                        },
                        {
                            "name": "new_object",
                            "type": "Variant",
                            "desc": "The object with which to update the matching records."
                        },
                        {
                            "name": "options",
                            "type": "Variant",
                            "desc": "This parameter is an associative array of the form array(\"optionname\" => <boolean>, ...). Currently supported options are: \"w\"WriteConcerns. The default value for MongoClient is 1.\n\n\"upsert\"\n\nIf no document matches $criteria, a new document will be inserted.\n\nIf a new document would be inserted and $new_object contains atomic modifiers (i.e. $ operators), those operations will be applied to the $criteria parameter to create the new document. If $new_object does not contain atomic modifiers, it will be used as-is for the inserted document. See the upsert examples below for more information.\n\n\"multiple\"\n\nAll documents matching $criteria will be updated. MongoCollection::update() has exactly the opposite behavior of MongoCollection::remove(): it updates one document by default, not all matching documents. It is recommended that you always specify whether you want to update multiple documents or a single document, as the database may change its default behavior at some point in the future. \"fsync\"FALSE. Forces the insert to be synced to disk before returning success. If TRUE, an acknowledged insert is implied and will override setting w to 0. \"j\"FALSE. Forces the insert to be synced to the journal before returning success. If TRUE, an acknowledged insert is implied and will override setting w to 0. \"w\"WriteConcerns. The default value for MongoClient is 1. \"wtimeout\"WriteConcern acknowledgement. The default value for MongoClient is 10000 milliseconds. \"safe\"Deprecated. Please use the WriteConcern w option. \"timeout\"MongoCursor::$timeout. If acknowledged writes are used, this sets how long (in milliseconds) for the client to wait for a database response. If the database does not respond within the timeout period, a MongoCursorTimeoutException will be thrown."
                        }
                    ]
                },
                {
                    "name": "validate",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the database's evaluation of this object."
                    },
                    "args": [
                        {
                            "name": "scan_data",
                            "type": "Variant",
                            "desc": "Only validate indices, not the base collection."
                        }
                    ]
                }
            ],
            "consts": [
                {
                    "name": "ASCENDING",
                    "value": 1
                },
                {
                    "name": "DESCENDING",
                    "value": -1
                }
            ]
        },
        {
            "name": "MongoCursor",
            "desc": "A cursor is used to iterate through the results of a database query. For example, to query the database and see all results, you could do: Example #1 MongoCursor basic usage\n\n\n\nYou don't generally create cursors using the MongoCursor constructor, you get a new cursor by calling MongoCollection::find() (as shown above).\n\nSuppose that, in the example above, $collection was a 50GB collection. We certainly wouldn't want to load that into memory all at once, which is what a cursor is for: allowing the client to access the collection in dribs and drabs.\n\nIf we have a large result set, we can iterate through it, loading a few megabytes of results into memory at a time. For example, we could do: Example #2 Iterating over MongoCursor\n\nThis will go through each document in the collection, loading and garbage collecting documents as needed.\n\nNote that this means that a cursor does not \"contain\" the database results, it just manages them. Thus, if you print a cursor (with, say, var_dump() or print_r()), you'll just get the cursor object, not your documents. To get the documents themselves, you can use one of the methods shown above.",
            "flags": [
                "ZendCompat"
            ],
            "properties": [
                {
                    "name": "slaveOkay",
                    "value": "false",
                    "type": "boolean",
                    "flags": [
                        "IsStatic"
                    ]
                },
                {
                    "name": "timeout",
                    "value": 30000,
                    "type": "integer",
                    "flags": [
                        "IsStatic"
                    ]
                }
            ],
            "funcs": [
                {
                    "name": "addOption",
                    "desc": "This is an advanced function and should not be used unless you know what you're doing.\n\nA query can optionally be nested in a \"query\" field if other options, such as a sort or hint, are given. For instance, adding a sort causes the query to become a subfield of a bigger query object, like:\n\n\n\nThis method is for adding a top-level field to a query. It makes the query a subobject (if it isn't already) and adds the key\/value pair of your chosing to the top level. Warning\n\nIt cannot be used to add extra criteria to a query on the fly. For instance, this will not work:\n\nThis does not query for a user named \"joe\" with an age of 20.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns this cursor."
                    },
                    "args": [
                        {
                            "name": "key",
                            "type": "Variant",
                            "desc": "Fieldname to add."
                        },
                        {
                            "name": "value",
                            "type": "Variant",
                            "desc": "Value to add."
                        }
                    ]
                },
                {
                    "name": "awaitData",
                    "desc": "This method is to be used with tailable cursors. If we are at the end of the data, block for a while rather than returning no data. After a timeout period, we do return as normal.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns this cursor."
                    },
                    "args": [
                        {
                            "name": "wait",
                            "type": "Variant",
                            "desc": "If the cursor should wait for more data to become available."
                        }
                    ]
                },
                {
                    "name": "batchSize",
                    "desc": "A cursor typically fetches a batch of result objects and store them locally. This method sets the batchSize value to configure the amount of documents retrieved from the server in one data packet. However, it will never return more documents than fit in the max batch size limit (usually 4MB).",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns this cursor."
                    },
                    "args": [
                        {
                            "name": "batchSize",
                            "type": "Variant",
                            "desc": "The number of results to return per batch. Each batch requires a round-trip to the server.\n\nIf batchSize is 2 or more, it represents the size of each batch of objects retrieved. It can be adjusted to optimize performance and limit data transfer.\n\nIf batchSize is 1 or negative, it will limit of number returned documents to the absolute value of batchSize, and the cursor will be closed. For example if batchSize is -10, then the server will return a maximum of 10 documents and as many as can fit in 4MB, then close the cursor. Warning\n\nA batchSize of 1 is special, and means the same as -1, i.e. a value of 1 makes the cursor only capable of returning one document.\n\nNote that this feature is different from MongoCursor::limit() in that documents must fit within a maximum size, and it removes the need to send a request to close the cursor server-side. The batch size can be changed even after a cursor is iterated, in which case the setting will apply on the next batch retrieval.\n\nThis cannot override MongoDB's limit on the amount of data it will return to the client (i.e., if you set batch size to 1,000,000,000, MongoDB will still only return 4-16MB of results per batch).\n\nTo ensure consistent behavior, the rules of MongoCursor::batchSize() and MongoCursor::limit() behave a little complex but work \"as expected\". The rules are: hard limits override soft limits with preference given to MongoCursor::limit() over MongoCursor::batchSize(). After that, whichever is set and lower than the other will take precedence. See below. section for some examples."
                        }
                    ]
                },
                {
                    "name": "__construct",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the new cursor."
                    },
                    "args": [
                        {
                            "name": "connection",
                            "type": "Variant",
                            "desc": "Database connection."
                        },
                        {
                            "name": "ns",
                            "type": "Variant",
                            "desc": "Full name of database and collection."
                        },
                        {
                            "name": "query",
                            "type": "Variant",
                            "desc": "Database query."
                        },
                        {
                            "name": "fields",
                            "type": "Variant",
                            "desc": "Fields to return."
                        }
                    ]
                },
                {
                    "name": "count",
                    "desc": "This method does not affect the state of the cursor: if you haven't queried yet, you can still apply limits, skips, etc. If you have started iterating through results, it will not move the current position of the cursor. If you have exhasted the cursor, it will not reset it.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "The number of documents returned by this cursor's query."
                    },
                    "args": [
                        {
                            "name": "foundOnly",
                            "type": "Variant",
                            "desc": "Send cursor limit and skip information to the count function, if applicable."
                        }
                    ]
                },
                {
                    "name": "current",
                    "desc": "This returns NULL until MongoCursor::next() is called.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "The current result as an associative array."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "dead",
                    "desc": "The database sends responses in batches of documents, up to 4MB of documents per response. This method checks if the database has more batches or if the result set has been exhausted.\n\nA cursor being \"dead\" does not mean that MongoCursor::hasNext() will return FALSE, it only means that the database is done sending results to the client. The client should continue iterating through results until MongoCursor::hasNext() is FALSE.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns if there are more results that have not been sent to the client, yet."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "doQuery",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "NULL."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "explain",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns an explanation of the query."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "fields",
                    "desc": "Fields are specified by \"fieldname\" : bool. TRUE indicates that a field should be returned, FALSE indicates that it should not be returned. You can also use 1 and 0 instead of TRUE and FALSE.\n\nThus, to return only the \"summary\" field, one could say:\n\n\n\nTo return all fields except the \"hidden\" field:",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns this cursor."
                    },
                    "args": [
                        {
                            "name": "f",
                            "type": "Variant",
                            "desc": "Fields to return (or not return)."
                        }
                    ]
                },
                {
                    "name": "getNext",
                    "desc": "This is identical to the function:",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the next object."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "getReadPreference",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "type for the string read preference mode (corresponding to the MongoClient constants), and tagsets containing a list of all tag set criteria. If no tag sets were specified, tagsets will not be present in the array."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "hasNext",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns if there is another element."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "hint",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns this cursor."
                    },
                    "args": [
                        {
                            "name": "index",
                            "type": "Variant",
                            "desc": "Index to use for the query. If a string is passed, it should correspond to an index name. If an array or object is passed, it should correspond to the specification used to create the index (i.e. the first argument to MongoCollection::ensureIndex())."
                        }
                    ]
                },
                {
                    "name": "immortal",
                    "desc": "After remaining idle on the server for some amount of time, cursors, by default, \"die.\" This is generally the behavior one wants. The database cleans up a cursor once all of its results have been sent to the client, but if the client doesn't request all of the results, the cursor will languish there, taking up resources. Thus, after a few minutes, the cursor \"times out\" and the database assumes the client has gotten everything it needs and cleans up its the cursor's resources.\n\nIf, for some reason, you need a cursor to hang around for a long time, you can prevent the database from cleaning it up by using this method. However, if you make a cursor immortal, you need to iterate through all of its results (or at least until MongoCursor::dead() returns TRUE) or the cursor will hang around the database forever, taking up resources.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns this cursor."
                    },
                    "args": [
                        {
                            "name": "liveForever",
                            "type": "Variant",
                            "desc": "If the cursor should be immortal."
                        }
                    ]
                },
                {
                    "name": "info",
                    "desc": "This can be called before or after the query.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the namespace, limit, skip, query, and fields for this cursor."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "key",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "The current result's _id as a string."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "limit",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns this cursor."
                    },
                    "args": [
                        {
                            "name": "num",
                            "type": "Variant",
                            "desc": "The number of results to return."
                        }
                    ]
                },
                {
                    "name": "next",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "NULL."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "partial",
                    "desc": "This option allows mongos to send partial query results if a shard is unreachable. This is only applicable when running a sharded MongoDB cluster and connecting to a mongos.\n\nIf a shard goes down and a query needs to be sent to that shard, mongos will return the results (if any) from shards it already contacted, then an error message that it could not reach the shard (a MongoCursorException in PHP). If you would like to get whatever results mongos can provide and no exception, you can use this method. Note that this means that you won't have an indication that a shard is down in your query response.\n\nThis has no effect on the query if all shards are reachable. This flag was implemented in MongoDB version 1.7.5, so will only work with that version and higher.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns this cursor."
                    },
                    "args": [
                        {
                            "name": "okay",
                            "type": "Variant",
                            "desc": "If receiving partial results is okay."
                        }
                    ]
                },
                {
                    "name": "reset",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "NULL."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "rewind",
                    "desc": "This is identical to the function:",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "NULL."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "setFlag",
                    "desc": "The MongoCursor class has several methods for setting flags on the query object. This method is available in case the MongoDB wire protocol has acquired a new flag, and the driver has not been updated with a method for this new flag. In all other cases, the method should be used. See the \"See also\" section for available methods.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns this cursor."
                    },
                    "args": [
                        {
                            "name": "flag",
                            "type": "Variant",
                            "desc": "Which flag to set. You can not set flag 6 (EXHAUST) as the driver does not know how to handle them. You will get a warning if you try to use this flag. For available flags, please refer to the wire protocol documentation."
                        },
                        {
                            "name": "set",
                            "type": "Variant",
                            "desc": "Whether the flag should be set (TRUE) or unset (FALSE)."
                        }
                    ]
                },
                {
                    "name": "setReadPreference",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "TRUE on success, or FALSE otherwise."
                    },
                    "args": [
                        {
                            "name": "read_preference",
                            "type": "Variant",
                            "desc": "MongoClient::RP_PRIMARY, MongoClient::RP_PRIMARY_PREFERRED, MongoClient::RP_SECONDARY, MongoClient::RP_SECONDARY_PREFERRED, or MongoClient::RP_NEAREST."
                        },
                        {
                            "name": "tags",
                            "type": "Variant",
                            "desc": ""
                        }
                    ]
                },
                {
                    "name": "skip",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns this cursor."
                    },
                    "args": [
                        {
                            "name": "num",
                            "type": "Variant",
                            "desc": "The number of results to skip."
                        }
                    ]
                },
                {
                    "name": "slaveOkay",
                    "desc": "Calling this will make the driver route reads to secondaries if: You are using a replica set and You created a MongoClient instance using the option \"replicaSet\" => \"setName\" and There is a healthy secondary that can be reached by the driver. You can check which server was used for this query by calling MongoCursor::info() after running the query. It's server field will show which server the query was sent to.\n\nNote that you should use this function even if you do not use the automatic routing to secondaries. If you connect directly to a secondary in a replica set, you still need to call this function, which basically tells the database that you are aware that you might be getting older data and you're okay with that. If you do not call this, you'll get \"not master\" errors when you try to query.\n\nThis method will override the static class variable MongoCursor::$slaveOkay. It will also override Mongo::setSlaveOkay(), MongoDB::setSlaveOkay() and MongoCollection::setSlaveOkay().",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns this cursor."
                    },
                    "args": [
                        {
                            "name": "okay",
                            "type": "Variant",
                            "desc": "If it is okay to query the secondary."
                        }
                    ]
                },
                {
                    "name": "snapshot",
                    "desc": "Use snapshot mode for the query. Snapshot mode assures no duplicates are returned, or objects missed, which were present at both the start and end of the query's execution (if an object is new during the query, or deleted during the query, it may or may not be returned, even with snapshot mode).\n\nNote that short query responses (less than 1MB) are always effectively snapshotted.\n\nCurrently, snapshot mode may not be used with sorting or explicit hints.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns this cursor."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "sort",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the same cursor that this method was called on."
                    },
                    "args": [
                        {
                            "name": "fields",
                            "type": "Variant",
                            "desc": "An array of fields by which to sort. Each element in the array has as key the field name, and as value either 1 for ascending sort, or -1 for descending sort.\n\nEach result is first sorted on the first field in the array, then (if it exists) on the second field in the array, etc. This means that the order of the fields in the fields array is important. See also the examples section."
                        }
                    ]
                },
                {
                    "name": "tailable",
                    "desc": "Mongo has a feature known as tailable cursors which are similar to the Unix \"tail -f\" command.\n\nTailable means cursor is not closed when the last data is retrieved. Rather, the cursor marks the final object's position. you can resume using the cursor later, from where it was located, if more data were received.\n\nLike any \"latent cursor\", the cursor may become invalid at some point -- for example if that final object it references were deleted. Thus, you should be prepared to requery if the cursor is MongoCursor::dead().",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns this cursor."
                    },
                    "args": [
                        {
                            "name": "tail",
                            "type": "Variant",
                            "desc": "If the cursor should be tailable."
                        }
                    ]
                },
                {
                    "name": "timeout",
                    "desc": "A timeout can be set at any time and will affect subsequent queries on the cursor, including fetching more results from the database.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "This cursor."
                    },
                    "args": [
                        {
                            "name": "ms",
                            "type": "Variant",
                            "desc": "The number of milliseconds for the cursor to wait for a response. Use -1 to wait forever. By default, the cursor will wait MongoCursor::$timeout milliseconds."
                        }
                    ]
                },
                {
                    "name": "valid",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "If the current result is not null."
                    },
                    "args": [
                    ]
                }
            ]
        },
        {
            "name": "MongoId",
            "desc": "A unique identifier created for database objects. If an object is inserted into the database without an _id field, an _id field will be added to it with a MongoId instance as its value. If the data has a naturally occuring unique field (say, a username or timestamp) it is fine to use this as the _id field instead, and it will not be replaced with a MongoId.\n\nInstances of the MongoId class fulfill the role that autoincrementing does in a relational database: to provide a unique key if the data does not natually have one. Autoincrementing does not work well with a sharded database, as it is impossible to find what the next number should be quickly. This class fulfills the constraints of quickly generating a value that is unique across shards.\n\nEach MongoId is 12 bytes (making its string form 24 hexidecimal characters). The first four bytes are a timestamp, the next three are a hash of the client machine's hostname, the next two are the two least significant bytes of the process id running the script, and the last three bytes are an incrementing value.\n\nMongoIds are serializable\/unserializable. Their serialized form is similar to their string form: C:7:\"MongoId\":24:{4af9f23d8ead0e1d32000000}",
            "flags": [
                "ZendCompat"
            ],
            "funcs": [
                {
                    "name": "__construct",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns a new id."
                    },
                    "args": [
                        {
                            "name": "id",
                            "type": "Variant",
                            "desc": "A string to use as the id. Must be 24 hexidecimal characters. If an invalid string is passed to this constructor, the constructor will ignore it and create a new id value."
                        }
                    ]
                },
                {
                    "name": "getHostname",
                    "desc": "This returns the hostname MongoId is using to generate unique ids. This should be the same value gethostname() returns.\n\nIt is identical to the function:",
                    "flags": [
                        "IsStatic",
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the hostname."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "getInc",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the incremented value used to create this MongoId."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "getPID",
                    "desc": "Extracts the pid from the Mongo ID",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the PID of the MongoId."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "getTimestamp",
                    "desc": "This returns the same thing as running time() when the id is created.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the number of seconds since the epoch that this id was created. There are only four bytes of timestamp stored, so MongoDate is a better choice for storing exact or wide-ranging times."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "__set_state",
                    "desc": "This function is only used by PHP internally, it shouldn't need to ever be called by the user.\n\nIt is identical to the function:",
                    "flags": [
                        "IsStatic",
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "A new id with the value \"000000000000000000000000\"."
                    },
                    "args": [
                        {
                            "name": "props",
                            "type": "Variant",
                            "desc": "Theoretically, an array of properties used to create the new id. However, as MongoId instances have no properties, this is not used."
                        }
                    ]
                },
                {
                    "name": "__toString",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "This id."
                    },
                    "args": [
                    ]
                }
            ]
        },
        {
            "name": "MongoCode",
            "desc": "Represents JavaScript code for the database.\n\nMongoCode objects are composed of two parts: a string of code and an optional scope. The string of code must be valid JavaScript. The scope is a associative array of variable name\/value pairs.",
            "flags": [
                "ZendCompat"
            ],
            "funcs": [
                {
                    "name": "__construct",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns a new code object."
                    },
                    "args": [
                        {
                            "name": "code",
                            "type": "Variant",
                            "desc": "A string of code."
                        },
                        {
                            "name": "scope",
                            "type": "Variant",
                            "desc": "The scope to use for the code."
                        }
                    ]
                },
                {
                    "name": "__toString",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "This code, the scope is not returned."
                    },
                    "args": [
                    ]
                }
            ]
        },
        {
            "name": "MongoDate",
            "desc": "Represent date objects for the database. This class should be used to save dates to the database and to query for dates. For example: Example #1 Storing dates with MongoDate\n\n\n\nMongoDB stores dates as milliseconds past the epoch. This means that dates do not contain timezone information. Timezones must be stored in a separate field if needed. Second, this means that any precision beyond milliseconds will be lost when the document is sent to\/from the database.",
            "flags": [
                "ZendCompat"
            ],
            "properties": [
                {
                    "name": "sec",
                    "type": "int",
                    "value": 0
                },
                {
                    "name": "usec",
                    "type": "int",
                    "value": 0
                }
            ],
            "funcs": [
                {
                    "name": "__construct",
                    "desc": "Creates a new date. If no parameters are given, the current time is used.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns this new date."
                    },
                    "args": [
                        {
                            "name": "sec",
                            "type": "Variant",
                            "desc": "Number of seconds since January 1st, 1970."
                        },
                        {
                            "name": "usec",
                            "type": "Variant",
                            "desc": "Microseconds. Please be aware though that MongoDB's resolution is milliseconds and not microseconds, which means this value will be truncated to millisecond resolution."
                        }
                    ]
                },
                {
                    "name": "__toString",
                    "desc": "Returns a string representation of this date, similar to the representation returned by microtime().",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "This date."
                    },
                    "args": [
                    ]
                }
            ]
        },
        {
            "name": "MongoRegex",
            "desc": "This class can be used to create regular expressions. Typically, these expressions will be used to query the database and find matching strings. More unusually, they can be saved to the database and retrieved.\n\nRegular expressions consist of four parts. First a \/ as starting delimiter, then then pattern, another \/ and finally a string containing flags.\n\nExample #1 Regular expression pattern \/pattern\/flags\n\nMongoDB recognizes six regular expression flags:\n\ni: Case insensitive\n\nm: Multiline\n\nx: Can contain comments\n\nl: locale\n\ns: dotall, \".\" matches everything, including newlines\n\nu: match unicode",
            "flags": [
                "ZendCompat"
            ],
            "funcs": [
                {
                    "name": "__construct",
                    "desc": "Creates a new regular expression.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns a new regular expression."
                    },
                    "args": [
                        {
                            "name": "regex",
                            "type": "Variant",
                            "desc": "Regular expression string of the form \/expr\/flags."
                        }
                    ]
                },
                {
                    "name": "__toString",
                    "desc": "Returns a string representation of this regular expression.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "This regular expression in the form \"\/expr\/flags\"."
                    },
                    "args": [
                    ]
                }
            ]
        },
        {
            "name": "MongoBinData",
            "desc": "An object that can be used to store or retrieve binary data from the database.\n\nThe maximum size of a single object that can be inserted into the database is 16MB. For data that is larger than this (movies, music, Henry Kissinger's autobiography), use MongoGridFS. For data that is smaller than 16MB, you may find it easier to embed it within the document using MongoBinData.\n\nFor example, to embed an image in a document, one could write:\n\n\n\nThis class contains a type field, which currently gives no additional functionality in the driver or the database. There are five predefined types (which are the class constants listed below), and the user can create their own (at the risk of the BSON spec catching up with them). By default, the PHP driver always uses type 2: a byte array.",
            "flags": [
                "ZendCompat"
            ],
            "funcs": [
                {
                    "name": "__construct",
                    "desc": "Creates a new binary data object.\n\nThere are five types of binary data currently recognized by the BSON spec: function (0x01), byte array (0x02), UUID (0x03), MD5 (0x05), and user defined (0x80). The default type is byte array (0x02). There is no particular difference in how the driver or server interpret different types, so by and large they are irrelevant for now. Any number (between 0 and 255) could be used for type, if the user is willing to assume the risk that the database might eventually do something with binary data based on type.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns a new binary data object."
                    },
                    "args": [
                        {
                            "name": "data",
                            "type": "Variant",
                            "desc": "Binary data."
                        },
                        {
                            "name": "type",
                            "type": "Variant",
                            "desc": "Data type."
                        }
                    ]
                },
                {
                    "name": "__toString",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the string \"<Mongo Binary Data>\". To access the contents of a MongoBinData, use the bin field."
                    },
                    "args": [
                    ]
                }
            ],
            "consts": [
                {
                    "name": "FUNC",
                    "value": 1
                },
                {
                    "name": "BYTE_ARRAY",
                    "value": 2
                },
                {
                    "name": "UUID",
                    "value": 3
                },
                {
                    "name": "MD5",
                    "value": 5
                },
                {
                    "name": "CUSTOM",
                    "value": 128
                }
            ],
            "properties": [
                {
                    "name": "bin",
                    "type": "string"
                },
                {
                    "name": "type",
                    "value": 2,
                    "type": "integer"
                }
            ]
        },
        {
            "name": "MongoInt32",
            "desc": "The class can be used to save 32-bit integers to the database on a 64-bit system.",
            "flags": [
                "ZendCompat"
            ],
            "funcs": [
                {
                    "name": "__construct",
                    "desc": "Creates a new 32-bit number with the given value.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns a new integer."
                    },
                    "args": [
                        {
                            "name": "value",
                            "type": "Variant",
                            "desc": "A number."
                        }
                    ]
                },
                {
                    "name": "__toString",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the string representation of this integer."
                    },
                    "args": [
                    ]
                }
            ]
        },
        {
            "name": "MongoInt64",
            "desc": "The class can be used to save 64-bit integers to the database on a 32-bit system.",
            "flags": [
                "ZendCompat"
            ],
            "funcs": [
                {
                    "name": "__construct",
                    "desc": "Creates a new 64-bit number with the given value.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns a new integer."
                    },
                    "args": [
                        {
                            "name": "value",
                            "type": "Variant",
                            "desc": "A number."
                        }
                    ]
                },
                {
                    "name": "__toString",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the string representation of this integer."
                    },
                    "args": [
                    ]
                }
            ]
        },
        {
            "name": "MongoDBRef",
            "desc": "This class can be used to create lightweight links between objects in different collections.\n\nMotivation: Suppose we need to refer to a document in another collection. The easiest way is to create a field in the current document. For example, if we had a \"people\" collection and an \"addresses\" collection, we might want to create a link between each person document and an address document: Example #1 Linking documents\n\n\n\nThen, later on, we can find the person's address by querying the \"addresses\" collection with the MongoId we saved in the \"people\" collection.\n\nSuppose now that we have a more general case, where we don't know which collection (or even which database) contains the referenced document. MongoDBRef is a good choice for this case, as it is a common format that all of the drivers and the database understand.\n\nIf each person had a list of things they liked which could come from multiple collections, such as \"hobbies\", \"sports\", \"books\", etc., we could use MongoDBRefs to keep track of what \"like\" went with what collection: Example #2 Creating MongoDBRef links\n\n\n\nDatabase references can be thought of as hyperlinks: they give the unique address of another document, but they do not load it or automatically follow the link\/reference.\n\nA database reference is just a normal associative array, not an instance of MongoDBRef, so this class is a little different than the other data type classes. This class contains exclusively static methods for manipulating database references.",
            "flags": [
                "ZendCompat"
            ],
            "funcs": [
                {
                    "name": "create",
                    "desc": "If no database is given, the current database is used.",
                    "flags": [
                        "IsStatic",
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the reference."
                    },
                    "args": [
                        {
                            "name": "collection",
                            "type": "Variant",
                            "desc": "Collection name (without the database name)."
                        },
                        {
                            "name": "id",
                            "type": "Variant",
                            "desc": "The _id field of the object to which to link."
                        },
                        {
                            "name": "database",
                            "type": "Variant",
                            "desc": "Database name."
                        }
                    ]
                },
                {
                    "name": "get",
                    "desc": null,
                    "flags": [
                        "IsStatic",
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the document to which the reference refers or NULL if the document does not exist (the reference is broken)."
                    },
                    "args": [
                        {
                            "name": "db",
                            "type": "Variant",
                            "desc": "Database to use."
                        },
                        {
                            "name": "ref",
                            "type": "Variant",
                            "desc": "Reference to fetch."
                        }
                    ]
                },
                {
                    "name": "isRef",
                    "desc": "This method does not actually follow the reference, so it does not determine if it is broken or not. It merely checks that ref is in valid database reference format (in that it is an object or array with $ref and $id fields).",
                    "flags": [
                        "IsStatic",
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns TRUE on success or FALSE on failure."
                    },
                    "args": [
                        {
                            "name": "ref",
                            "type": "Variant",
                            "desc": "Array or object to check."
                        }
                    ]
                }
            ]
        },
        {
            "name": "MongoMinKey",
            "desc": "MongoMinKey is a special type used by the database that evaluates to less than any other type. Thus, if a query is sorted by a given field in ascending order, any document with a MongoMinKey as its value will be returned first.\n\nMongoMinKey has no associated fields, methods, or constants. It is merely the \"smallest\" thing that can be inserted into the database.",
            "flags": [
                "ZendCompat"
            ],
            "funcs": [
            ]
        },
        {
            "name": "MongoMaxKey",
            "desc": "MongoMaxKey is a special type used by the database that evaluates to greater than any other type. Thus, if a query is sorted by a given field in ascending order, any document with a MongoMaxKey as its value will be returned last.\n\nMongoMaxKey has no associated fields, methods, or constants. It is merely the \"largest\" thing that can be inserted into the database.",
            "flags": [
                "ZendCompat"
            ],
            "funcs": [
            ]
        },
        {
            "name": "MongoTimestamp",
            "desc": "MongoTimestamp is used by sharding. If you're not looking to write sharding tools, what you probably want is MongoDate.\n\nMongoTimestamp is 4 bytes of timestamp (seconds since the epoch) and 4 bytes of increment.\n\nThis class is not for measuring time, creating a timestamp on a document or automatically adding or updating a timestamp on a document. Unless you are writing something that interacts with the sharding internals, stop, go directly to MongoDate, do not pass go, do not collect 200 dollars. This is not the class you are looking for.\n\nIf you are writing sharding tools, read on.",
            "flags": [
                "ZendCompat"
            ],
            "properties": [
                {
                    "name": "sec",
                    "type": "int",
                    "value": 0
                },
                {
                    "name": "inc",
                    "type": "int",
                    "value": 0
                }
            ],
            "funcs": [
                {
                    "name": "__construct",
                    "desc": "Creates a new timestamp. If no parameters are given, the current time is used and the increment is automatically provided. The increment is set to 0 when the module is loaded and is incremented every time this constructor is called (without the $inc parameter passed in).",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns this new timestamp."
                    },
                    "args": [
                        {
                            "name": "sec",
                            "type": "Variant",
                            "desc": "Number of seconds since January 1st, 1970."
                        },
                        {
                            "name": "inc",
                            "type": "Variant",
                            "desc": "Increment."
                        }
                    ]
                },
                {
                    "name": "__toString",
                    "desc": "Returns the \"sec\" field of this timestamp.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "The seconds since epoch represented by this timestamp."
                    },
                    "args": [
                    ]
                }
            ]
        },
        {
            "name": "MongoGridFS",
            "desc": "Utilities for storing and retrieving files from the database.\n\nGridFS is a storage specification all supported drivers implement. Basically, it defines two collections: files, for file metadata, and chunks, for file content. If the file is large, it will automatically be split into smaller chunks and each chunk will be saved as a document in the chunks collection.\n\nEach document in the files collection contains the filename, upload date, and md5 hash. It also contains a unique _id field, which can be used to query the chunks collection for the file's content. Each document in the chunks collection contains a chunk of binary data, a files_id field that matches its file's _id, and the position of this chunk in the overall file.\n\nFor example, the files document is something like:\n\nand the chunks documents look like:\n\nOf course, the default chunk size is thousands of bytes, but that makes an unwieldy example.",
            "flags": [
                "ZendCompat"
            ],
            "parent": "MongoCollection",
            "funcs": [
                {
                    "name": "__construct",
                    "desc": "Files as stored across two collections, the first containing file meta information, the second containing chunks of the actual file. By default, fs.files and fs.chunks are the collection names used.\n\nUse one argument to specify a prefix other than \"fs\": $fs = new MongoGridFS($db, \"myfiles\"); uses myfiles.files and myfiles.chunks collections.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": null
                    },
                    "args": [
                    ]
                },
                {
                    "name": "delete",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns if the remove was successfully sent to the database."
                    },
                    "args": [
                        {
                            "name": "id",
                            "type": "Variant",
                            "desc": "_id of the file to remove."
                        }
                    ]
                },
                {
                    "name": "drop",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "The database response."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "find",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "A MongoGridFSCursor."
                    },
                    "args": [
                        {
                            "name": "query",
                            "type": "Variant",
                            "desc": "The query."
                        },
                        {
                            "name": "fields",
                            "type": "Variant",
                            "desc": "Fields to return."
                        }
                    ]
                },
                {
                    "name": "findOne",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns a MongoGridFSFile or NULL."
                    },
                    "args": [
                        {
                            "name": "query",
                            "type": "Variant",
                            "desc": "The filename or criteria for which to search."
                        }
                    ]
                },
                {
                    "name": "get",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the file, if found, or NULL."
                    },
                    "args": [
                        {
                            "name": "id",
                            "type": "Variant",
                            "desc": "_id of the file to find."
                        }
                    ]
                },
                {
                    "name": "put",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "_id of the saved file document. This will be a generated MongoId unless an _id was explicitly specified in the extra parameter."
                    },
                    "args": [
                        {
                            "name": "filename",
                            "type": "Variant",
                            "desc": "Name of the file to store."
                        },
                        {
                            "name": "metadata",
                            "type": "Variant",
                            "desc": "Other metadata fields to include in the file document. files collection. Some practical use cases for this behavior would be to specify a custom chunkSize or _id for the file."
                        }
                    ]
                },
                {
                    "name": "remove",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns if the removal was successfully sent to the database."
                    },
                    "args": [
                        {
                            "name": "query",
                            "type": "Variant",
                            "desc": "The filename or criteria for which to search."
                        },
                        {
                            "name": "options",
                            "type": "Variant",
                            "desc": "Options for the remove. Valid options are: \"w\"WriteConcerns. The default value for MongoClient is 1."
                        }
                    ]
                },
                {
                    "name": "storeBytes",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "_id of the saved file document. This will be a generated MongoId unless an _id was explicitly specified in the extra parameter."
                    },
                    "args": [
                        {
                            "name": "bytes",
                            "type": "Variant",
                            "desc": "String of bytes to store."
                        },
                        {
                            "name": "metadata",
                            "type": "Variant",
                            "desc": "Other metadata fields to include in the file document. files collection. Some practical use cases for this behavior would be to specify a custom chunkSize or _id for the file."
                        },
                        {
                            "name": "options",
                            "type": "Variant",
                            "desc": "Options for the store. \"w\"WriteConcerns. The default value for MongoClient is 1."
                        }
                    ]
                },
                {
                    "name": "storeFile",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "_id of the saved file document. This will be a generated MongoId unless an _id was explicitly specified in the extra parameter."
                    },
                    "args": [
                        {
                            "name": "filename",
                            "type": "Variant",
                            "desc": "Name of the file to store."
                        },
                        {
                            "name": "metadata",
                            "type": "Variant",
                            "desc": "Other metadata fields to include in the file document. files collection. Some practical use cases for this behavior would be to specify a custom chunkSize or _id for the file."
                        },
                        {
                            "name": "options",
                            "type": "Variant",
                            "desc": "Options for the store. \"w\"WriteConcerns. The default value for MongoClient is 1."
                        }
                    ]
                },
                {
                    "name": "storeUpload",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "_id of the saved file document. This will be a generated MongoId unless an _id was explicitly specified in the extra parameter."
                    },
                    "args": [
                        {
                            "name": "name",
                            "type": "Variant",
                            "desc": "The name of the uploaded file to store. This should correspond to the file field's name attribute in the HTML form."
                        },
                        {
                            "name": "metadata",
                            "type": "Variant",
                            "desc": "Other metadata fields to include in the file document. files collection. Some practical use cases for this behavior would be to specify a custom chunkSize or _id for the file.\n\nThe filename index will be populated with the filename used."
                        }
                    ]
                }
            ]
        },
        {
            "name": "MongoGridFSFile",
            "desc": "A database file object.",
            "flags": [
                "ZendCompat"
            ],
            "funcs": [
                {
                    "name": "__construct",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns a new MongoGridFSFile."
                    },
                    "args": [
                        {
                            "name": "gridfs",
                            "type": "Variant",
                            "desc": "The parent MongoGridFS instance."
                        },
                        {
                            "name": "file",
                            "type": "Variant",
                            "desc": "A file from the database."
                        }
                    ]
                },
                {
                    "name": "getBytes",
                    "desc": "Warning: this will load the file into memory. If the file is bigger than your memory, this will cause problems!",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns a string of the bytes in the file."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "getFilename",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the filename."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "getResource",
                    "desc": "This method returns a stream resource that can be used with all file functions in PHP that deal with reading files. The contents of the file are pulled out of MongoDB on the fly, so that the whole file does not have to be loaded into memory first.\n\nAt most two GridFSFile chunks will be loaded in memory.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns a resource that can be used to read the file with"
                    },
                    "args": [
                    ]
                },
                {
                    "name": "getSize",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns this file's size"
                    },
                    "args": [
                    ]
                },
                {
                    "name": "write",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the number of bytes written."
                    },
                    "args": [
                        {
                            "name": "filename",
                            "type": "Variant",
                            "desc": "The location to which to write the file. If none is given, the stored filename will be used."
                        }
                    ]
                }
            ]
        },
        {
            "name": "MongoGridFSCursor",
            "desc": "Cursor for database file results.",
            "flags": [
                "ZendCompat"
            ],
            "parent": "MongoCursor",
            "funcs": [
                {
                    "name": "__construct",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the new cursor."
                    },
                    "args": [
                        {
                            "name": "gridfs",
                            "type": "Variant",
                            "desc": "Related GridFS collection."
                        },
                        {
                            "name": "connection",
                            "type": "Variant",
                            "desc": "Database connection."
                        },
                        {
                            "name": "ns",
                            "type": "Variant",
                            "desc": "Full name of database and collection."
                        },
                        {
                            "name": "query",
                            "type": "Variant",
                            "desc": "Database query."
                        },
                        {
                            "name": "fields",
                            "type": "Variant",
                            "desc": "Fields to return."
                        }
                    ]
                },
                {
                    "name": "current",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "The current file."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "getNext",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the next file."
                    },
                    "args": [
                    ]
                }
            ]
        },
        {
            "name": "MongoLog",
            "desc": "Logging can be used to get detailed information about what the driver is doing. The logging mechanism as used by MongoLog emits all log messages as a PHP notice. Depending on the server interface that you use, that means that they will either be sent to strerr (with PHP-CLI), or otherwise to the web server's error log. In order for log messages to be output by PHP their level (E_NOTICE) does need to be configured to be shown. That means the E_NOTICE bit needs to be part of PHP's error_reporting level and that display_errors is set to 1.\n\nLogging is turned off, by default. This class allows you to turn on specific levels of logging for specific parts of the driver. Some examples:",
            "flags": [
                "ZendCompat"
            ],
            "properties": [
                {
                    "name": "level",
                    "type": "int"
                },
                {
                    "name": "module",
                    "type": "int"
                },
                {
                    "name": "callback",
                    "flags": [
                        "IsStatic",
                        "IsPrivate"
                    ],
                    "type": "Variant"
                }
            ],
            "funcs": [
                {
                    "name": "getCallback",
                    "desc": "Retrieves the callback function name.",
                    "flags": [
                        "IsStatic",
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the callback function name, or FALSE if not set yet."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "getLevel",
                    "desc": "This can be used to see the log level. Use the constants described in the MongoLog section with bitwise operators to check the level.",
                    "flags": [
                        "IsStatic",
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the current level."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "getModule",
                    "desc": "This function can be used to see which parts of the driver's functionality are being logged. Use the constants described in the MongoLog section with bitwise operators to check if specific modules are being logged.",
                    "flags": [
                        "IsStatic",
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the modules currently being logged."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "setCallback",
                    "desc": "This function will set a callback function to be called for MongoLog events instead of triggering warnings.",
                    "flags": [
                        "IsStatic",
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns TRUE on success or FALSE on failure."
                    },
                    "args": [
                        {
                            "name": "log_function",
                            "type": "Variant",
                            "desc": "The function to be called on events.\n\nThe function should have the following prototype\n\nlog_function ( int $module , int $level , string $message ) module One of the MongoLog module constants."
                        },
                        {
                            "name": "module",
                            "type": "Variant",
                            "desc": "One of the MongoLog level constants."
                        },
                        {
                            "name": "level",
                            "type": "Variant",
                            "desc": "The log message itself."
                        }
                    ]
                },
                {
                    "name": "setLevel",
                    "desc": "This function can be used to set how verbose logging should be and the types of activities that should be logged. Use the constants described in the MongoLog section with bitwise operators to specify levels.\n\n\n\nNote that you must also call MongoLog::setModule() to choose what part of the driver to log.",
                    "flags": [
                        "IsStatic",
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": null
                    },
                    "args": [
                        {
                            "name": "level",
                            "type": "Variant"
                        }
                    ]
                },
                {
                    "name": "setModule",
                    "desc": "This function can be used to set which parts of the driver's functionality should be logged. Use the constants described in the MongoLog section with bitwise operators to specify modules.\n\n\n\nNote that you must also call MongoLog::setLevel() to turn on logging.",
                    "flags": [
                        "IsStatic",
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": null
                    },
                    "args": [
                        {
                            "name": "module",
                            "type": "Variant"
                        }
                    ]
                }
            ],
            "consts": [
                {
                    "name": "NONE",
                    "value": 0
                },
                {
                    "name": "ALL",
                    "value": 31
                },
                {
                    "name": "WARNING",
                    "value": 1
                },
                {
                    "name": "INFO",
                    "value": 2
                },
                {
                    "name": "FINE",
                    "value": 4
                },
                {
                    "name": "POOL",
                    "value": 1
                },
                {
                    "name": "RS",
                    "value": 1
                },
                {
                    "name": "CON",
                    "value": 2
                },
                {
                    "name": "IO",
                    "value": 4
                },
                {
                    "name": "SERVER",
                    "value": 8
                },
                {
                    "name": "PARSE",
                    "value": 16
                }
            ]
        },
        {
            "name": "MongoPool",
            "desc": "Warning\n\nThe current (1.3.0+) releases of the driver no longer implements pooling. This class and its methods are therefore deprecated and should not be used.",
            "flags": [
                "ZendCompat"
            ],
            "funcs": [
                {
                    "name": "getSize",
                    "desc": null,
                    "flags": [
                        "IsStatic",
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the current pool size."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "info",
                    "desc": "Returns an array of information about all connection pools.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Each connection pool has an identifier, which starts with the host. For each pool, this function shows the following fields: in use\n\nThe number of connections currently being used by Mongo instances. in pool\n\nThe number of connections currently in the pool (not being used). remaining\n\nThe number of connections that could be created by this pool. For example, suppose a pool had 5 connections remaining and 3 connections in the pool. We could create 8 new instances of MongoClient before we exhausted this pool (assuming no instances of MongoClient went out of scope, returning their connections to the pool).\n\nA negative number means that this pool will spawn unlimited connections.\n\nBefore a pool is created, you can change the max number of connections by calling Mongo::setPoolSize(). Once a pool is showing up in the output of this function, its size cannot be changed. total\n\nThe total number of connections allowed for this pool. This should be greater than or equal to \"in use\" + \"in pool\" (or -1). timeout\n\nThe socket timeout for connections in this pool. This is how long connections in this pool will attempt to connect to a server before giving up. waiting\n\nIf you have capped the pool size, workers requesting connections from the pool may block until other workers return their connections. This field shows how many milliseconds workers have blocked for connections to be released. If this number keeps increasing, you may want to use MongoPool::setSize() to add more connections to your pool."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "setSize",
                    "desc": "Sets the max number of connections new pools will be able to create.",
                    "flags": [
                        "IsStatic",
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the former value of pool size."
                    },
                    "args": [
                        {
                            "name": "size",
                            "type": "Variant",
                            "desc": "The max number of connections future pools will be able to create. Negative numbers mean that the pool will spawn an infinite number of connections."
                        }
                    ]
                }
            ]
        },
        {
            "name": "Mongo",
            "desc": "A connection between PHP and MongoDB.\n\nThis class extends MongoClient and provides access to several deprecated methods.\n\nFor backwards compatibility, it also defaults the \"w\" option of its constructor argument to 0, which does not require write operations to be acknowledged by the server. See MongoClient::__construct() for more information. Warning This class has been DEPRECATED as of version 1.3.0. Relying on this feature is highly discouraged. Please use MongoClient instead.",
            "flags": [
                "ZendCompat"
            ],
            "parent": "MongoClient",
            "funcs": [
                {
                    "name": "connectUtil",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "If the connection was successful."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "__construct",
                    "desc": "This method overwrites the MongoClient constructor and turns off acknowledged writes.\n\nPlease see MongoClient::__construct() for description of the parameters.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": null
                    },
                    "args": [
                        {
                            "name": "server",
                            "type": "Variant",
                            "value": "null_variant"
                        },
                        {
                            "name": "options",
                            "type": "Variant",
                            "value": "null_variant"
                        }
                    ]
                },
                {
                    "name": "getPoolSize",
                    "desc": null,
                    "flags": [
                        "IsStatic",
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the current pool size."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "getSlave",
                    "desc": "This finds the address of the secondary currently being used for reads. It is a read-only method: it does not change anything about the internal state of the object.\n\nWhen you create a connection to the database, the driver will not immediately decide on a secondary to use. Thus, after you connect, this function will return NULL even if there are secondaries available. When you first do a query with slaveOkay set, at that point the driver will choose a secondary for this connection. At that point, this function will return the chosen secondary.\n\nSee the query section of this manual for information on distributing reads to secondaries.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "The address of the secondary this connection is using for reads.\n\nThis returns NULL if this is not connected to a replica set or not yet initialized."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "getSlaveOkay",
                    "desc": "See the query section of this manual for information on distributing reads to secondaries.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the value of slaveOkay for this instance."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "poolDebug",
                    "desc": null,
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Each connection pool has an identifier, which starts with the host. For each pool, this function shows the following fields: in use\n\nThe number of connections currently being used by MongoClient instances. in pool\n\nThe number of connections currently in the pool (not being used). remaining\n\nThe number of connections that could be created by this pool. For example, suppose a pool had 5 connections remaining and 3 connections in the pool. We could create 8 new instances of MongoClient before we exhausted this pool (assuming no instances of MongoClient went out of scope, returning their connections to the pool).\n\nA negative number means that this pool will spawn unlimited connections.\n\nBefore a pool is created, you can change the max number of connections by calling Mongo::setPoolSize(). Once a pool is showing up in the output of this function, its size cannot be changed. timeout\n\nThe socket timeout for connections in this pool. This is how long connections in this pool will attempt to connect to a server before giving up."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "setPoolSize",
                    "desc": null,
                    "flags": [
                        "IsStatic",
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the former value of pool size."
                    },
                    "args": [
                        {
                            "name": "size",
                            "type": "Variant",
                            "desc": "The max number of connections future pools will be able to create. Negative numbers mean that the pool will spawn an infinite number of connections."
                        }
                    ]
                },
                {
                    "name": "setSlaveOkay",
                    "desc": "See the query section of this manual for information on distributing reads to secondaries.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the former value of slaveOkay for this instance."
                    },
                    "args": [
                        {
                            "name": "ok",
                            "type": "Variant",
                            "desc": "If reads should be sent to secondary members of a replica set for all possible queries using this MongoClient instance."
                        }
                    ]
                },
                {
                    "name": "switchSlave",
                    "desc": "This choses a random secondary for a connection to read from. It is called automatically by the driver and should not need to be used. It calls MongoClient::getHosts() (to refresh the status of hosts) and Mongo::getSlave() (to get the return value).\n\nSee the query section of this manual for information on distributing reads to secondaries.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "The address of the secondary this connection is using for reads. This may be the same as the previous address as addresses are randomly chosen. It may return only one address if only one secondary (or only the primary) is available.\n\nFor example, if we had a three member replica set with a primary, secondary, and arbiter this method would always return the address of the secondary. If the secondary became unavailable, this method would always return the address of the primary. If the primary also became unavailable, this method would throw an exception, as an arbiter cannot handle reads."
                    },
                    "args": [
                    ]
                }
            ],
            "consts": [
                {
                    "name": "VERSION",
                    "value": "1.4.3"
                },
                {
                    "name": "DEFAULT_HOST",
                    "value": "localhost"
                },
                {
                    "name": "DEFAULT_PORT",
                    "value": 27017
                },
                {
                    "name": "RP_PRIMARY",
                    "value": "primary"
                },
                {
                    "name": "RP_PRIMARY_PREFERRED",
                    "value": "primaryPreferred"
                },
                {
                    "name": "RP_SECONDARY",
                    "value": "secondary"
                },
                {
                    "name": "RP_SECONDARY_PREFERRED",
                    "value": "secondaryPreferred"
                },
                {
                    "name": "NEAREST",
                    "value": "nearest"
                }
            ]
        },
        {
            "name": "MongoException",
            "desc": "Default Mongo exception.\n\nThis covers a bunch of different error conditions that may eventually be moved to more specific exceptions, but will always extend MongoException.\n\nThe MongoSomething object has not been correctly initialized by its constructor\n\nCode: 0\n\nProbably your Mongo object is not connected to a database server.\n\nzero-length keys are not allowed, did you use $ with double quotes?\n\nCode: 1\n\nYou tried to save \"\" as a key. You generally should not do this. \"\" can mess up subobject access and is used by MongoDB internally. However, if you really want, you can set mongo.allow_empty_keys to true in your php.ini file to override this sanity check. If you override this, it is highly recommended that you set error checking to strict to avoid string interpolation errors.\n\n'.' not allowed in key: <key>\n\nCode: 2\n\nYou attempted to write a key with '.' in it, which is prohibited.\n\ninsert too large: <size>, max: <max>\n\nCode: 3\n\nYou're attempting to send too much data to the database at once: the database will only accept inserts up to a certain size (currently 16 MB).\n\nno elements in doc\n\nCode: 4\n\nYou're attempting to save a document with no fields.\n\nsize of BSON doc is <size> bytes, max <max>MB\n\nCode: 5\n\nYou're attempting to save a document that is larger than MongoDB can save.\n\nno documents given\n\nCode: 6\n\nYou're attempting to batch insert an empty array of documents.\n\nMongoCollection::group takes an array, object, or MongoCode key\n\nCode: 7\n\nWrong type parameter send to MongoCollection::group().\n\nfield names must be strings\n\nCode: 8\n\nYou should format field selectors as array(\"field1\" => 1, \"field2\" => 1, ..., \"fieldN\" => 1).\n\ninvalid regex\n\nCode: 9\n\nThe regex passed to MongoRegex is not of the correct form.\n\nMongoDBRef::get: $ref field must be a string\n\nCode: 10\n\nMongoDBRef::get: $db field must be a string\n\nCode: 11\n\nnon-utf8 string: <str>\n\nCode: 12\n\nThis error occurs if you attempt to send a non-utf8 string to the database. All strings going into the database should be UTF8. See php.ini options for the transition option of quieting this exception.\n\nmutex error: <err>\n\nCode: 13\n\nThe driver uses mutexes for synchronizing requests and responses in multithreaded environments. This is a fairly serious error and may not have a stack trace. It's unusual and should be reported to maintainers with any system information and steps to reproduce that you can provide.\n\nindex name too long: <len>, max <max> characters\n\nCode: 14\n\nIndexes with names longer than 128 characters cannot be created. If you get this error, you should use MongoCollection::ensureIndex()'s \"name\" option to create a shorter name for your index.",
            "flags": [
                "ZendCompat"
            ],
            "parent": "Exception",
            "funcs": [
            ]
        },
        {
            "name": "MongoResultException",
            "desc": "The MongoResultException is thrown by several command helpers (such as MongoCollection::findAndModify()) in the event of failure. The original result document is available through MongoResultException::getDocument().",
            "flags": [
                "ZendCompat"
            ],
            "parent": "MongoException",
            "funcs": [
                {
                    "name": "getDocument",
                    "desc": "Retrieves the full error result document.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "The full result document as an array, including partial data if available and additional keys."
                    },
                    "args": [
                    ]
                }
            ]
        },
        {
            "name": "MongoCursorException",
            "desc": "Caused by accessing a cursor incorrectly or a error receiving a reply. Note that this can be thrown by any database request that receives a reply, not just queries. Writes, commands, and any other operation that sends information to the database and waits for a response can throw a MongoCursorException. The only exception is new MongoClient() (creating a new connection), which will only throw MongoConnectionExceptions.\n\nThis returns a specific error message to help diagnose the problem and a numeric error code associated with the cause of the exception.\n\nFor example, suppose you tried to insert two documents with the same _id:\n\nThis would produce output like:\n\nNote that the MongoDB error code (11000) is used for the PHP error code. The PHP driver uses the \"native\" error code wherever possible.\n\nThe following is a list of common errors, codes, and causes. Exact errors are in italics, errors where the message can vary are described in obliques.\n\ncannot modify cursor after beginning iteration\n\nCode: 0\n\nYou are calling a method that sets up the query after executing the query. Reset the cursor and try again.\n\nAn example:\n\n\n\nGet next batch send errors\n\nCode: 1\n\nCould not send the query to the database. Make sure the database is still up and the network is okay.\n\ncursor not found\n\nCode: 2\n\nThe driver was trying to fetch more results from the database, but the database did not have a record of the query. This usually means that the cursor timed out on the server side: after a few minutes of inactivity, the database will kill a cursor (see MongoCursor::immortal() for information on preventing this).\n\nAn example:\n\n\n\ncursor->buf.pos is null\n\nCode: 3\n\nThis may indicate you are out of RAM or some other extraordinary circumstance.\n\ncouldn't get response header\n\nCode: 4\n\nA common error if the database or network goes down. This means that the driver couldn't get a response from the connection.\n\nno db response\n\nCode: 5\n\nThis may not even be an error, for example, the database command \"shutdown\" returns no response. However, if you were expecting a response, this means the database didn't give one.\n\nbad response length: %d, did the db assert?\n\nCode: 6\n\nThis means that the database said that its response was less than 0. This error probably indicates a network error or database corruption.\n\nincomplete header\n\nCode: 7\n\nHighly unusual. Occurs if the database response started out correctly, but broke off in the middle. Probably indicates a network problem.\n\nincomplete response\n\nCode: 8\n\nHighly unusual. Occurs if the database response started out correctly, but broke off in the middle. Probably indicates a network problem.\n\ncouldn't find a response\n\nCode: 9\n\nIf the response was cached and now cannot be located.\n\nerror getting socket\n\nCode: 10\n\nThe socket was closed or encountered an error. The driver should automatically reconnect (if possible) on the next operation.\n\ncouldn't find reply, please try again\n\nCode: 11\n\nThe driver saves any database responses it cannot immediately match with a request. This exception occurs if the driver has already passed your request's response and cannot find your response in its cache.\n\nerror getting database response: errstr\n\nWSA error getting database response: errstr\n\n\"errstr\" is an io error reported directly from the C socket subsystem. On Windows, the error message is prefixed with \"WSA\".\n\nTimeout error\n\nCode: 13\n\nIf there was an error while waiting for a query to complete.\n\ncouldn't send query: <various>\n\nCode: 14\n\nC socket error on send.\n\nmax number of retries exhausted, couldn't send query\n\nCode: 19\n\nThe driver will automatically retry \"plain\" queries (not commands) a couple of times if the first attempt failed for certain reasons. This is to cause fewer exceptions during replica set failover (although you will probably still have to deal with some) and gloss over transient network issues.\n\nThis can also be caused by the driver not being able to reconnect at all to the database (if, for example, the database is unreachable).\n\nVersion 1.2.2+.",
            "flags": [
                "ZendCompat"
            ],
            "parent": "MongoException",
            "funcs": [
                {
                    "name": "getHost",
                    "desc": "Returns the hostname of the server the query was sent too.",
                    "flags": [
                        "ZendCompat",
                        "NoFCallBuiltin"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns the hostname, or NULL if the hostname is unknown."
                    },
                    "args": [
                    ]
                }
            ]
        },
        {
            "name": "MongoCursorTimeoutException",
            "desc": "Caused by a query timing out. You can set the length of time to wait before this exception is thrown by calling MongoCursor::timeout() on the cursor or setting MongoCursor::$timeout. The static variable is useful for queries such as database commands and MongoCollection::findOne(), both of which implicitly use cursors.",
            "flags": [
                "ZendCompat"
            ],
            "parent": "MongoCursorException",
            "funcs": [
            ]
        },
        {
            "name": "MongoConnectionException",
            "desc": "Thrown when the driver fails to connect to the database.\n\nThere are a number of possible error messages to help you diagnose the connection problem. These are:\n\nNo candidate servers found\n\nThrown when the driver cannot establish a connection to MongoDB (fulfilling the ReadPreferences, if specified).\n\nNo server name given.\n\nThis error occurs if you pass in \"\" as the server name, probably because of an typo with string interpolation, e.g., \"$servr\" instead of \"$server\".\n\nfailed to get host [hostname] or port [portnum] from [server].\n\nThis indicated that the server string was malformed. \"[hostname]\" and \"[portnum]\" will be as much as the driver could dicipher of it.\n\nOperation in progress\n\nConnecting to the database timed out.\n\nTransport endpoint is not connected\n\nGenerally means that the connection string isn't correct, the driver couldn't even find the database server.\n\ncouldn't determine master\n\nNo server in a replica set connection was identified as the primary.\n\ncouldn't get host info for [server]\n\nThis indicated that DNS could not resolve the server address you gave. This could easily be caused by a typo, for example, \"server\" instead of \"$server\".\n\nInvalid Argument\n\nThis can be caused by attempting to connect to a machine that is up but that the database isn't actually running on. Make sure that you've started the database server before connecting.\n\nPermission denied\n\nThis means that the socket could not be opened due to permissions issues. On Red Hat variants, this can be caused by a default setting that does not allow Apache to create network connections. You can override this setting by running:\n\nthen restarting Apache.\n\nIf the error message is not listed above, it is probably an error from the C socket, and you can search the web for its usual cause.",
            "flags": [
                "ZendCompat"
            ],
            "parent": "MongoException",
            "funcs": [
            ]
        },
        {
            "name": "MongoGridFSException",
            "desc": "Thrown when there are errors reading or writing files to or from the database.",
            "flags": [
                "ZendCompat"
            ],
            "parent": "MongoException",
            "funcs": [
            ]
        }
    ]
}
