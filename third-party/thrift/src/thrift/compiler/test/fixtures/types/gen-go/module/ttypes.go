// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package module

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	included0 "included"
	cpp1 "thrift/annotation/cpp"
	thrift2 "thrift/annotation/thrift"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var _ = included0.GoUnusedProtection__
var _ = cpp1.GoUnusedProtection__
var _ = thrift2.GoUnusedProtection__
var GoUnusedProtection__ int;

type HasBitwiseOps int64
const (
  HasBitwiseOps_none HasBitwiseOps = 0
  HasBitwiseOps_zero HasBitwiseOps = 1
  HasBitwiseOps_one HasBitwiseOps = 2
  HasBitwiseOps_two HasBitwiseOps = 4
  HasBitwiseOps_three HasBitwiseOps = 8
)

var HasBitwiseOpsToName = map[HasBitwiseOps]string {
  HasBitwiseOps_none: "none",
  HasBitwiseOps_zero: "zero",
  HasBitwiseOps_one: "one",
  HasBitwiseOps_two: "two",
  HasBitwiseOps_three: "three",
}

var HasBitwiseOpsToValue = map[string]HasBitwiseOps {
  "none": HasBitwiseOps_none,
  "zero": HasBitwiseOps_zero,
  "one": HasBitwiseOps_one,
  "two": HasBitwiseOps_two,
  "three": HasBitwiseOps_three,
}

var HasBitwiseOpsNames = []string {
  "none",
  "zero",
  "one",
  "two",
  "three",
}

var HasBitwiseOpsValues = []HasBitwiseOps {
  HasBitwiseOps_none,
  HasBitwiseOps_zero,
  HasBitwiseOps_one,
  HasBitwiseOps_two,
  HasBitwiseOps_three,
}

func (p HasBitwiseOps) String() string {
  if v, ok := HasBitwiseOpsToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func HasBitwiseOpsFromString(s string) (HasBitwiseOps, error) {
  if v, ok := HasBitwiseOpsToValue[s]; ok {
    return v, nil
  }
  return HasBitwiseOps(0), fmt.Errorf("not a valid HasBitwiseOps string")
}

func HasBitwiseOpsPtr(v HasBitwiseOps) *HasBitwiseOps { return &v }

type IsUnscoped int64
const (
  IsUnscoped_hello IsUnscoped = 0
  IsUnscoped_world IsUnscoped = 1
)

var IsUnscopedToName = map[IsUnscoped]string {
  IsUnscoped_hello: "hello",
  IsUnscoped_world: "world",
}

var IsUnscopedToValue = map[string]IsUnscoped {
  "hello": IsUnscoped_hello,
  "world": IsUnscoped_world,
}

var IsUnscopedNames = []string {
  "hello",
  "world",
}

var IsUnscopedValues = []IsUnscoped {
  IsUnscoped_hello,
  IsUnscoped_world,
}

func (p IsUnscoped) String() string {
  if v, ok := IsUnscopedToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func IsUnscopedFromString(s string) (IsUnscoped, error) {
  if v, ok := IsUnscopedToValue[s]; ok {
    return v, nil
  }
  return IsUnscoped(0), fmt.Errorf("not a valid IsUnscoped string")
}

func IsUnscopedPtr(v IsUnscoped) *IsUnscoped { return &v }

type MyForwardRefEnum int64
const (
  MyForwardRefEnum_ZERO MyForwardRefEnum = 0
  MyForwardRefEnum_NONZERO MyForwardRefEnum = 12
)

var MyForwardRefEnumToName = map[MyForwardRefEnum]string {
  MyForwardRefEnum_ZERO: "ZERO",
  MyForwardRefEnum_NONZERO: "NONZERO",
}

var MyForwardRefEnumToValue = map[string]MyForwardRefEnum {
  "ZERO": MyForwardRefEnum_ZERO,
  "NONZERO": MyForwardRefEnum_NONZERO,
}

var MyForwardRefEnumNames = []string {
  "ZERO",
  "NONZERO",
}

var MyForwardRefEnumValues = []MyForwardRefEnum {
  MyForwardRefEnum_ZERO,
  MyForwardRefEnum_NONZERO,
}

func (p MyForwardRefEnum) String() string {
  if v, ok := MyForwardRefEnumToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func MyForwardRefEnumFromString(s string) (MyForwardRefEnum, error) {
  if v, ok := MyForwardRefEnumToValue[s]; ok {
    return v, nil
  }
  return MyForwardRefEnum(0), fmt.Errorf("not a valid MyForwardRefEnum string")
}

func MyForwardRefEnumPtr(v MyForwardRefEnum) *MyForwardRefEnum { return &v }

type TBinary = []byte

func TBinaryPtr(v TBinary) *TBinary { return &v }

type IntTypedef = int32

func IntTypedefPtr(v IntTypedef) *IntTypedef { return &v }

type UintTypedef = IntTypedef

func UintTypedefPtr(v UintTypedef) *UintTypedef { return &v }

type EmptyStruct struct {
}

func NewEmptyStruct() *EmptyStruct {
  return &EmptyStruct{}
}

type EmptyStructBuilder struct {
  obj *EmptyStruct
}

func NewEmptyStructBuilder() *EmptyStructBuilder{
  return &EmptyStructBuilder{
    obj: NewEmptyStruct(),
  }
}

func (p EmptyStructBuilder) Emit() *EmptyStruct{
  return &EmptyStruct{
  }
}

func (p *EmptyStruct) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EmptyStruct) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("empty_struct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EmptyStruct) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("EmptyStruct({})")
}

// Attributes:
//  - Field
type DecoratedStruct struct {
  Field string `thrift:"field,1" db:"field" json:"field"`
}

func NewDecoratedStruct() *DecoratedStruct {
  return &DecoratedStruct{}
}


func (p *DecoratedStruct) GetField() string {
  return p.Field
}
type DecoratedStructBuilder struct {
  obj *DecoratedStruct
}

func NewDecoratedStructBuilder() *DecoratedStructBuilder{
  return &DecoratedStructBuilder{
    obj: NewDecoratedStruct(),
  }
}

func (p DecoratedStructBuilder) Emit() *DecoratedStruct{
  return &DecoratedStruct{
    Field: p.obj.Field,
  }
}

func (d *DecoratedStructBuilder) Field(field string) *DecoratedStructBuilder {
  d.obj.Field = field
  return d
}

func (d *DecoratedStruct) SetField(field string) *DecoratedStruct {
  d.Field = field
  return d
}

func (p *DecoratedStruct) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DecoratedStruct)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Field = v
  }
  return nil
}

func (p *DecoratedStruct) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("decorated_struct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DecoratedStruct) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("field", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:field: ", p), err) }
  if err := oprot.WriteString(string(p.Field)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.field (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:field: ", p), err) }
  return err
}

func (p *DecoratedStruct) String() string {
  if p == nil {
    return "<nil>"
  }

  fieldVal := fmt.Sprintf("%v", p.Field)
  return fmt.Sprintf("DecoratedStruct({Field:%s})", fieldVal)
}

// Attributes:
//  - FieldA
//  - FieldB
//  - FieldC
//  - FieldD
//  - FieldE
//  - FieldF
//  - FieldG
//  - FieldH
type ContainerStruct struct {
  // unused field # 1
  FieldB []int32 `thrift:"fieldB,2" db:"fieldB" json:"fieldB"`
  FieldC []int32 `thrift:"fieldC,3" db:"fieldC" json:"fieldC"`
  FieldD []int32 `thrift:"fieldD,4" db:"fieldD" json:"fieldD"`
  FieldE []int32 `thrift:"fieldE,5" db:"fieldE" json:"fieldE"`
  FieldF []int32 `thrift:"fieldF,6" db:"fieldF" json:"fieldF"`
  FieldG map[int32]string `thrift:"fieldG,7" db:"fieldG" json:"fieldG"`
  FieldH included0.SomeMap `thrift:"fieldH,8" db:"fieldH" json:"fieldH"`
  // unused fields # 9 to 11
  FieldA []int32 `thrift:"fieldA,12" db:"fieldA" json:"fieldA"`
}

func NewContainerStruct() *ContainerStruct {
  return &ContainerStruct{}
}


func (p *ContainerStruct) GetFieldA() []int32 {
  return p.FieldA
}

func (p *ContainerStruct) GetFieldB() []int32 {
  return p.FieldB
}

func (p *ContainerStruct) GetFieldC() []int32 {
  return p.FieldC
}

func (p *ContainerStruct) GetFieldD() []int32 {
  return p.FieldD
}

func (p *ContainerStruct) GetFieldE() []int32 {
  return p.FieldE
}

func (p *ContainerStruct) GetFieldF() []int32 {
  return p.FieldF
}

func (p *ContainerStruct) GetFieldG() map[int32]string {
  return p.FieldG
}

func (p *ContainerStruct) GetFieldH() included0.SomeMap {
  return p.FieldH
}
type ContainerStructBuilder struct {
  obj *ContainerStruct
}

func NewContainerStructBuilder() *ContainerStructBuilder{
  return &ContainerStructBuilder{
    obj: NewContainerStruct(),
  }
}

func (p ContainerStructBuilder) Emit() *ContainerStruct{
  return &ContainerStruct{
    FieldA: p.obj.FieldA,
    FieldB: p.obj.FieldB,
    FieldC: p.obj.FieldC,
    FieldD: p.obj.FieldD,
    FieldE: p.obj.FieldE,
    FieldF: p.obj.FieldF,
    FieldG: p.obj.FieldG,
    FieldH: p.obj.FieldH,
  }
}

func (c *ContainerStructBuilder) FieldA(fieldA []int32) *ContainerStructBuilder {
  c.obj.FieldA = fieldA
  return c
}

func (c *ContainerStructBuilder) FieldB(fieldB []int32) *ContainerStructBuilder {
  c.obj.FieldB = fieldB
  return c
}

func (c *ContainerStructBuilder) FieldC(fieldC []int32) *ContainerStructBuilder {
  c.obj.FieldC = fieldC
  return c
}

func (c *ContainerStructBuilder) FieldD(fieldD []int32) *ContainerStructBuilder {
  c.obj.FieldD = fieldD
  return c
}

func (c *ContainerStructBuilder) FieldE(fieldE []int32) *ContainerStructBuilder {
  c.obj.FieldE = fieldE
  return c
}

func (c *ContainerStructBuilder) FieldF(fieldF []int32) *ContainerStructBuilder {
  c.obj.FieldF = fieldF
  return c
}

func (c *ContainerStructBuilder) FieldG(fieldG map[int32]string) *ContainerStructBuilder {
  c.obj.FieldG = fieldG
  return c
}

func (c *ContainerStructBuilder) FieldH(fieldH included0.SomeMap) *ContainerStructBuilder {
  c.obj.FieldH = fieldH
  return c
}

func (c *ContainerStruct) SetFieldA(fieldA []int32) *ContainerStruct {
  c.FieldA = fieldA
  return c
}

func (c *ContainerStruct) SetFieldB(fieldB []int32) *ContainerStruct {
  c.FieldB = fieldB
  return c
}

func (c *ContainerStruct) SetFieldC(fieldC []int32) *ContainerStruct {
  c.FieldC = fieldC
  return c
}

func (c *ContainerStruct) SetFieldD(fieldD []int32) *ContainerStruct {
  c.FieldD = fieldD
  return c
}

func (c *ContainerStruct) SetFieldE(fieldE []int32) *ContainerStruct {
  c.FieldE = fieldE
  return c
}

func (c *ContainerStruct) SetFieldF(fieldF []int32) *ContainerStruct {
  c.FieldF = fieldF
  return c
}

func (c *ContainerStruct) SetFieldG(fieldG map[int32]string) *ContainerStruct {
  c.FieldG = fieldG
  return c
}

func (c *ContainerStruct) SetFieldH(fieldH included0.SomeMap) *ContainerStruct {
  c.FieldH = fieldH
  return c
}

func (p *ContainerStruct) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ContainerStruct)  ReadField12(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.FieldA =  tSlice
  for i := 0; i < size; i ++ {
    var _elem3 int32
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem3 = v
    }
    p.FieldA = append(p.FieldA, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ContainerStruct)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.FieldB =  tSlice
  for i := 0; i < size; i ++ {
    var _elem4 int32
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem4 = v
    }
    p.FieldB = append(p.FieldB, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ContainerStruct)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.FieldC =  tSlice
  for i := 0; i < size; i ++ {
    var _elem5 int32
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem5 = v
    }
    p.FieldC = append(p.FieldC, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ContainerStruct)  ReadField4(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.FieldD =  tSlice
  for i := 0; i < size; i ++ {
    var _elem6 int32
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem6 = v
    }
    p.FieldD = append(p.FieldD, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ContainerStruct)  ReadField5(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.FieldE =  tSlice
  for i := 0; i < size; i ++ {
    var _elem7 int32
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem7 = v
    }
    p.FieldE = append(p.FieldE, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ContainerStruct)  ReadField6(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]int32, 0, size)
  p.FieldF =  tSet
  for i := 0; i < size; i ++ {
    var _elem8 int32
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem8 = v
    }
    p.FieldF = append(p.FieldF, _elem8)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *ContainerStruct)  ReadField7(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int32]string, size)
  p.FieldG =  tMap
  for i := 0; i < size; i ++ {
    var _key9 int32
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key9 = v
    }
    var _val10 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val10 = v
    }
    p.FieldG[_key9] = _val10
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ContainerStruct)  ReadField8(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(included0.SomeMap, size)
  p.FieldH =  tMap
  for i := 0; i < size; i ++ {
    var _key11 int32
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key11 = v
    }
    var _val12 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val12 = v
    }
    p.FieldH[_key11] = _val12
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ContainerStruct) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ContainerStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField12(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ContainerStruct) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("fieldB", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fieldB: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.FieldB)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FieldB {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fieldB: ", p), err) }
  return err
}

func (p *ContainerStruct) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("fieldC", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fieldC: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.FieldC)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FieldC {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fieldC: ", p), err) }
  return err
}

func (p *ContainerStruct) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("fieldD", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fieldD: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.FieldD)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FieldD {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fieldD: ", p), err) }
  return err
}

func (p *ContainerStruct) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("fieldE", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:fieldE: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.FieldE)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FieldE {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:fieldE: ", p), err) }
  return err
}

func (p *ContainerStruct) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("fieldF", thrift.SET, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:fieldF: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.I32, len(p.FieldF)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  set := make(map[int32]bool, len(p.FieldF))
  for _, v := range p.FieldF {
    if ok := set[v]; ok {
      return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
    }
    set[v] = true
  }
  for _, v := range p.FieldF {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:fieldF: ", p), err) }
  return err
}

func (p *ContainerStruct) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("fieldG", thrift.MAP, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:fieldG: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.FieldG)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.FieldG {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:fieldG: ", p), err) }
  return err
}

func (p *ContainerStruct) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("fieldH", thrift.MAP, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:fieldH: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.FieldH)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.FieldH {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:fieldH: ", p), err) }
  return err
}

func (p *ContainerStruct) writeField12(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("fieldA", thrift.LIST, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:fieldA: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.FieldA)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FieldA {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:fieldA: ", p), err) }
  return err
}

func (p *ContainerStruct) String() string {
  if p == nil {
    return "<nil>"
  }

  fieldBVal := fmt.Sprintf("%v", p.FieldB)
  fieldCVal := fmt.Sprintf("%v", p.FieldC)
  fieldDVal := fmt.Sprintf("%v", p.FieldD)
  fieldEVal := fmt.Sprintf("%v", p.FieldE)
  fieldFVal := fmt.Sprintf("%v", p.FieldF)
  fieldGVal := fmt.Sprintf("%v", p.FieldG)
  fieldHVal := fmt.Sprintf("%v", p.FieldH)
  fieldAVal := fmt.Sprintf("%v", p.FieldA)
  return fmt.Sprintf("ContainerStruct({FieldB:%s FieldC:%s FieldD:%s FieldE:%s FieldF:%s FieldG:%s FieldH:%s FieldA:%s})", fieldBVal, fieldCVal, fieldDVal, fieldEVal, fieldFVal, fieldGVal, fieldHVal, fieldAVal)
}

// Attributes:
//  - FieldA
type CppTypeStruct struct {
  FieldA []int32 `thrift:"fieldA,1" db:"fieldA" json:"fieldA"`
}

func NewCppTypeStruct() *CppTypeStruct {
  return &CppTypeStruct{}
}


func (p *CppTypeStruct) GetFieldA() []int32 {
  return p.FieldA
}
type CppTypeStructBuilder struct {
  obj *CppTypeStruct
}

func NewCppTypeStructBuilder() *CppTypeStructBuilder{
  return &CppTypeStructBuilder{
    obj: NewCppTypeStruct(),
  }
}

func (p CppTypeStructBuilder) Emit() *CppTypeStruct{
  return &CppTypeStruct{
    FieldA: p.obj.FieldA,
  }
}

func (c *CppTypeStructBuilder) FieldA(fieldA []int32) *CppTypeStructBuilder {
  c.obj.FieldA = fieldA
  return c
}

func (c *CppTypeStruct) SetFieldA(fieldA []int32) *CppTypeStruct {
  c.FieldA = fieldA
  return c
}

func (p *CppTypeStruct) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CppTypeStruct)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.FieldA =  tSlice
  for i := 0; i < size; i ++ {
    var _elem13 int32
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem13 = v
    }
    p.FieldA = append(p.FieldA, _elem13)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CppTypeStruct) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CppTypeStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CppTypeStruct) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("fieldA", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fieldA: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.FieldA)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FieldA {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fieldA: ", p), err) }
  return err
}

func (p *CppTypeStruct) String() string {
  if p == nil {
    return "<nil>"
  }

  fieldAVal := fmt.Sprintf("%v", p.FieldA)
  return fmt.Sprintf("CppTypeStruct({FieldA:%s})", fieldAVal)
}

// Attributes:
//  - MyIntField
type VirtualStruct struct {
  MyIntField int64 `thrift:"MyIntField,1" db:"MyIntField" json:"MyIntField"`
}

func NewVirtualStruct() *VirtualStruct {
  return &VirtualStruct{}
}


func (p *VirtualStruct) GetMyIntField() int64 {
  return p.MyIntField
}
type VirtualStructBuilder struct {
  obj *VirtualStruct
}

func NewVirtualStructBuilder() *VirtualStructBuilder{
  return &VirtualStructBuilder{
    obj: NewVirtualStruct(),
  }
}

func (p VirtualStructBuilder) Emit() *VirtualStruct{
  return &VirtualStruct{
    MyIntField: p.obj.MyIntField,
  }
}

func (v *VirtualStructBuilder) MyIntField(myIntField int64) *VirtualStructBuilder {
  v.obj.MyIntField = myIntField
  return v
}

func (v *VirtualStruct) SetMyIntField(myIntField int64) *VirtualStruct {
  v.MyIntField = myIntField
  return v
}

func (p *VirtualStruct) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VirtualStruct)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.MyIntField = v
  }
  return nil
}

func (p *VirtualStruct) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("VirtualStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VirtualStruct) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("MyIntField", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:MyIntField: ", p), err) }
  if err := oprot.WriteI64(int64(p.MyIntField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MyIntField (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:MyIntField: ", p), err) }
  return err
}

func (p *VirtualStruct) String() string {
  if p == nil {
    return "<nil>"
  }

  myIntFieldVal := fmt.Sprintf("%v", p.MyIntField)
  return fmt.Sprintf("VirtualStruct({MyIntField:%s})", myIntFieldVal)
}

// Attributes:
//  - A
//  - B
type MyStructWithForwardRefEnum struct {
  A MyForwardRefEnum `thrift:"a,1" db:"a" json:"a"`
  B MyForwardRefEnum `thrift:"b,2" db:"b" json:"b"`
}

func NewMyStructWithForwardRefEnum() *MyStructWithForwardRefEnum {
  return &MyStructWithForwardRefEnum{
    A: 12,
    B: 12,
  }
}


func (p *MyStructWithForwardRefEnum) GetA() MyForwardRefEnum {
  return p.A
}

func (p *MyStructWithForwardRefEnum) GetB() MyForwardRefEnum {
  return p.B
}
type MyStructWithForwardRefEnumBuilder struct {
  obj *MyStructWithForwardRefEnum
}

func NewMyStructWithForwardRefEnumBuilder() *MyStructWithForwardRefEnumBuilder{
  return &MyStructWithForwardRefEnumBuilder{
    obj: NewMyStructWithForwardRefEnum(),
  }
}

func (p MyStructWithForwardRefEnumBuilder) Emit() *MyStructWithForwardRefEnum{
  return &MyStructWithForwardRefEnum{
    A: p.obj.A,
    B: p.obj.B,
  }
}

func (m *MyStructWithForwardRefEnumBuilder) A(a MyForwardRefEnum) *MyStructWithForwardRefEnumBuilder {
  m.obj.A = a
  return m
}

func (m *MyStructWithForwardRefEnumBuilder) B(b MyForwardRefEnum) *MyStructWithForwardRefEnumBuilder {
  m.obj.B = b
  return m
}

func (m *MyStructWithForwardRefEnum) SetA(a MyForwardRefEnum) *MyStructWithForwardRefEnum {
  m.A = a
  return m
}

func (m *MyStructWithForwardRefEnum) SetB(b MyForwardRefEnum) *MyStructWithForwardRefEnum {
  m.B = b
  return m
}

func (p *MyStructWithForwardRefEnum) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStructWithForwardRefEnum)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := MyForwardRefEnum(v)
    p.A = temp
  }
  return nil
}

func (p *MyStructWithForwardRefEnum)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := MyForwardRefEnum(v)
    p.B = temp
  }
  return nil
}

func (p *MyStructWithForwardRefEnum) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStructWithForwardRefEnum"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStructWithForwardRefEnum) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("a", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:a: ", p), err) }
  if err := oprot.WriteI32(int32(p.A)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.a (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:a: ", p), err) }
  return err
}

func (p *MyStructWithForwardRefEnum) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("b", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:b: ", p), err) }
  if err := oprot.WriteI32(int32(p.B)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.b (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:b: ", p), err) }
  return err
}

func (p *MyStructWithForwardRefEnum) String() string {
  if p == nil {
    return "<nil>"
  }

  aVal := fmt.Sprintf("%v", p.A)
  bVal := fmt.Sprintf("%v", p.B)
  return fmt.Sprintf("MyStructWithForwardRefEnum({A:%s B:%s})", aVal, bVal)
}

// Attributes:
//  - A
//  - B
type TrivialNumeric struct {
  A int32 `thrift:"a,1" db:"a" json:"a"`
  B bool `thrift:"b,2" db:"b" json:"b"`
}

func NewTrivialNumeric() *TrivialNumeric {
  return &TrivialNumeric{}
}


func (p *TrivialNumeric) GetA() int32 {
  return p.A
}

func (p *TrivialNumeric) GetB() bool {
  return p.B
}
type TrivialNumericBuilder struct {
  obj *TrivialNumeric
}

func NewTrivialNumericBuilder() *TrivialNumericBuilder{
  return &TrivialNumericBuilder{
    obj: NewTrivialNumeric(),
  }
}

func (p TrivialNumericBuilder) Emit() *TrivialNumeric{
  return &TrivialNumeric{
    A: p.obj.A,
    B: p.obj.B,
  }
}

func (t *TrivialNumericBuilder) A(a int32) *TrivialNumericBuilder {
  t.obj.A = a
  return t
}

func (t *TrivialNumericBuilder) B(b bool) *TrivialNumericBuilder {
  t.obj.B = b
  return t
}

func (t *TrivialNumeric) SetA(a int32) *TrivialNumeric {
  t.A = a
  return t
}

func (t *TrivialNumeric) SetB(b bool) *TrivialNumeric {
  t.B = b
  return t
}

func (p *TrivialNumeric) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TrivialNumeric)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.A = v
  }
  return nil
}

func (p *TrivialNumeric)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.B = v
  }
  return nil
}

func (p *TrivialNumeric) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("TrivialNumeric"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TrivialNumeric) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("a", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:a: ", p), err) }
  if err := oprot.WriteI32(int32(p.A)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.a (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:a: ", p), err) }
  return err
}

func (p *TrivialNumeric) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("b", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:b: ", p), err) }
  if err := oprot.WriteBool(bool(p.B)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.b (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:b: ", p), err) }
  return err
}

func (p *TrivialNumeric) String() string {
  if p == nil {
    return "<nil>"
  }

  aVal := fmt.Sprintf("%v", p.A)
  bVal := fmt.Sprintf("%v", p.B)
  return fmt.Sprintf("TrivialNumeric({A:%s B:%s})", aVal, bVal)
}

// Attributes:
//  - Z
//  - N
type TrivialNestedWithDefault struct {
  Z int32 `thrift:"z,1" db:"z" json:"z"`
  N *TrivialNumeric `thrift:"n,2" db:"n" json:"n"`
}

func NewTrivialNestedWithDefault() *TrivialNestedWithDefault {
  return &TrivialNestedWithDefault{
    Z: 4,
    N: NewTrivialNumeric(),
  }
}


func (p *TrivialNestedWithDefault) GetZ() int32 {
  return p.Z
}
var TrivialNestedWithDefault_N_DEFAULT *TrivialNumeric = &TrivialNumeric{
  A: 3,
  B: true,
}
func (p *TrivialNestedWithDefault) GetN() *TrivialNumeric {
  if !p.IsSetN() {
    return TrivialNestedWithDefault_N_DEFAULT
  }
  return p.N
}
func (p *TrivialNestedWithDefault) DefaultGetN() *TrivialNumeric {
  if !p.IsSetN() {
    return NewTrivialNumeric()
  }
  return p.N
}
func (p *TrivialNestedWithDefault) IsSetN() bool {
  return p != nil && p.N != nil
}

type TrivialNestedWithDefaultBuilder struct {
  obj *TrivialNestedWithDefault
}

func NewTrivialNestedWithDefaultBuilder() *TrivialNestedWithDefaultBuilder{
  return &TrivialNestedWithDefaultBuilder{
    obj: NewTrivialNestedWithDefault(),
  }
}

func (p TrivialNestedWithDefaultBuilder) Emit() *TrivialNestedWithDefault{
  return &TrivialNestedWithDefault{
    Z: p.obj.Z,
    N: p.obj.N,
  }
}

func (t *TrivialNestedWithDefaultBuilder) Z(z int32) *TrivialNestedWithDefaultBuilder {
  t.obj.Z = z
  return t
}

func (t *TrivialNestedWithDefaultBuilder) N(n *TrivialNumeric) *TrivialNestedWithDefaultBuilder {
  t.obj.N = n
  return t
}

func (t *TrivialNestedWithDefault) SetZ(z int32) *TrivialNestedWithDefault {
  t.Z = z
  return t
}

func (t *TrivialNestedWithDefault) SetN(n *TrivialNumeric) *TrivialNestedWithDefault {
  t.N = n
  return t
}

func (p *TrivialNestedWithDefault) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TrivialNestedWithDefault)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Z = v
  }
  return nil
}

func (p *TrivialNestedWithDefault)  ReadField2(iprot thrift.Protocol) error {
  p.N = NewTrivialNumeric()
  if err := p.N.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.N), err)
  }
  return nil
}

func (p *TrivialNestedWithDefault) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("TrivialNestedWithDefault"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TrivialNestedWithDefault) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("z", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:z: ", p), err) }
  if err := oprot.WriteI32(int32(p.Z)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.z (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:z: ", p), err) }
  return err
}

func (p *TrivialNestedWithDefault) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("n", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:n: ", p), err) }
  if err := p.N.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.N), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:n: ", p), err) }
  return err
}

func (p *TrivialNestedWithDefault) String() string {
  if p == nil {
    return "<nil>"
  }

  zVal := fmt.Sprintf("%v", p.Z)
  var nVal string
  if p.N == nil {
    nVal = "<nil>"
  } else {
    nVal = fmt.Sprintf("%v", p.N)
  }
  return fmt.Sprintf("TrivialNestedWithDefault({Z:%s N:%s})", zVal, nVal)
}

// Attributes:
//  - A
//  - B
type ComplexString struct {
  A string `thrift:"a,1" db:"a" json:"a"`
  B map[string]int32 `thrift:"b,2" db:"b" json:"b"`
}

func NewComplexString() *ComplexString {
  return &ComplexString{}
}


func (p *ComplexString) GetA() string {
  return p.A
}

func (p *ComplexString) GetB() map[string]int32 {
  return p.B
}
type ComplexStringBuilder struct {
  obj *ComplexString
}

func NewComplexStringBuilder() *ComplexStringBuilder{
  return &ComplexStringBuilder{
    obj: NewComplexString(),
  }
}

func (p ComplexStringBuilder) Emit() *ComplexString{
  return &ComplexString{
    A: p.obj.A,
    B: p.obj.B,
  }
}

func (c *ComplexStringBuilder) A(a string) *ComplexStringBuilder {
  c.obj.A = a
  return c
}

func (c *ComplexStringBuilder) B(b map[string]int32) *ComplexStringBuilder {
  c.obj.B = b
  return c
}

func (c *ComplexString) SetA(a string) *ComplexString {
  c.A = a
  return c
}

func (c *ComplexString) SetB(b map[string]int32) *ComplexString {
  c.B = b
  return c
}

func (p *ComplexString) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ComplexString)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.A = v
  }
  return nil
}

func (p *ComplexString)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int32, size)
  p.B =  tMap
  for i := 0; i < size; i ++ {
    var _key14 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key14 = v
    }
    var _val15 int32
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val15 = v
    }
    p.B[_key14] = _val15
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ComplexString) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ComplexString"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ComplexString) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("a", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:a: ", p), err) }
  if err := oprot.WriteString(string(p.A)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.a (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:a: ", p), err) }
  return err
}

func (p *ComplexString) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("b", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:b: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.B)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.B {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:b: ", p), err) }
  return err
}

func (p *ComplexString) String() string {
  if p == nil {
    return "<nil>"
  }

  aVal := fmt.Sprintf("%v", p.A)
  bVal := fmt.Sprintf("%v", p.B)
  return fmt.Sprintf("ComplexString({A:%s B:%s})", aVal, bVal)
}

// Attributes:
//  - Z
//  - N
type ComplexNestedWithDefault struct {
  Z string `thrift:"z,1" db:"z" json:"z"`
  N *ComplexString `thrift:"n,2" db:"n" json:"n"`
}

func NewComplexNestedWithDefault() *ComplexNestedWithDefault {
  return &ComplexNestedWithDefault{
    Z: "4",
    N: NewComplexString(),
  }
}


func (p *ComplexNestedWithDefault) GetZ() string {
  return p.Z
}
var ComplexNestedWithDefault_N_DEFAULT *ComplexString = &ComplexString{
  A: "3",
  B: map[string]int32{
    "a": 3,
  },
}
func (p *ComplexNestedWithDefault) GetN() *ComplexString {
  if !p.IsSetN() {
    return ComplexNestedWithDefault_N_DEFAULT
  }
  return p.N
}
func (p *ComplexNestedWithDefault) DefaultGetN() *ComplexString {
  if !p.IsSetN() {
    return NewComplexString()
  }
  return p.N
}
func (p *ComplexNestedWithDefault) IsSetN() bool {
  return p != nil && p.N != nil
}

type ComplexNestedWithDefaultBuilder struct {
  obj *ComplexNestedWithDefault
}

func NewComplexNestedWithDefaultBuilder() *ComplexNestedWithDefaultBuilder{
  return &ComplexNestedWithDefaultBuilder{
    obj: NewComplexNestedWithDefault(),
  }
}

func (p ComplexNestedWithDefaultBuilder) Emit() *ComplexNestedWithDefault{
  return &ComplexNestedWithDefault{
    Z: p.obj.Z,
    N: p.obj.N,
  }
}

func (c *ComplexNestedWithDefaultBuilder) Z(z string) *ComplexNestedWithDefaultBuilder {
  c.obj.Z = z
  return c
}

func (c *ComplexNestedWithDefaultBuilder) N(n *ComplexString) *ComplexNestedWithDefaultBuilder {
  c.obj.N = n
  return c
}

func (c *ComplexNestedWithDefault) SetZ(z string) *ComplexNestedWithDefault {
  c.Z = z
  return c
}

func (c *ComplexNestedWithDefault) SetN(n *ComplexString) *ComplexNestedWithDefault {
  c.N = n
  return c
}

func (p *ComplexNestedWithDefault) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ComplexNestedWithDefault)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Z = v
  }
  return nil
}

func (p *ComplexNestedWithDefault)  ReadField2(iprot thrift.Protocol) error {
  p.N = NewComplexString()
  if err := p.N.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.N), err)
  }
  return nil
}

func (p *ComplexNestedWithDefault) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ComplexNestedWithDefault"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ComplexNestedWithDefault) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("z", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:z: ", p), err) }
  if err := oprot.WriteString(string(p.Z)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.z (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:z: ", p), err) }
  return err
}

func (p *ComplexNestedWithDefault) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("n", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:n: ", p), err) }
  if err := p.N.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.N), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:n: ", p), err) }
  return err
}

func (p *ComplexNestedWithDefault) String() string {
  if p == nil {
    return "<nil>"
  }

  zVal := fmt.Sprintf("%v", p.Z)
  var nVal string
  if p.N == nil {
    nVal = "<nil>"
  } else {
    nVal = fmt.Sprintf("%v", p.N)
  }
  return fmt.Sprintf("ComplexNestedWithDefault({Z:%s N:%s})", zVal, nVal)
}

// Attributes:
//  - Small
//  - Big
//  - Medium
//  - Biggish
//  - Tiny
type MinPadding struct {
  Small int8 `thrift:"small,1,required" db:"small" json:"small"`
  Big int64 `thrift:"big,2,required" db:"big" json:"big"`
  Medium int16 `thrift:"medium,3,required" db:"medium" json:"medium"`
  Biggish int32 `thrift:"biggish,4,required" db:"biggish" json:"biggish"`
  Tiny int8 `thrift:"tiny,5,required" db:"tiny" json:"tiny"`
}

func NewMinPadding() *MinPadding {
  return &MinPadding{}
}


func (p *MinPadding) GetSmall() int8 {
  return p.Small
}

func (p *MinPadding) GetBig() int64 {
  return p.Big
}

func (p *MinPadding) GetMedium() int16 {
  return p.Medium
}

func (p *MinPadding) GetBiggish() int32 {
  return p.Biggish
}

func (p *MinPadding) GetTiny() int8 {
  return p.Tiny
}
type MinPaddingBuilder struct {
  obj *MinPadding
}

func NewMinPaddingBuilder() *MinPaddingBuilder{
  return &MinPaddingBuilder{
    obj: NewMinPadding(),
  }
}

func (p MinPaddingBuilder) Emit() *MinPadding{
  return &MinPadding{
    Small: p.obj.Small,
    Big: p.obj.Big,
    Medium: p.obj.Medium,
    Biggish: p.obj.Biggish,
    Tiny: p.obj.Tiny,
  }
}

func (m *MinPaddingBuilder) Small(small int8) *MinPaddingBuilder {
  m.obj.Small = small
  return m
}

func (m *MinPaddingBuilder) Big(big int64) *MinPaddingBuilder {
  m.obj.Big = big
  return m
}

func (m *MinPaddingBuilder) Medium(medium int16) *MinPaddingBuilder {
  m.obj.Medium = medium
  return m
}

func (m *MinPaddingBuilder) Biggish(biggish int32) *MinPaddingBuilder {
  m.obj.Biggish = biggish
  return m
}

func (m *MinPaddingBuilder) Tiny(tiny int8) *MinPaddingBuilder {
  m.obj.Tiny = tiny
  return m
}

func (m *MinPadding) SetSmall(small int8) *MinPadding {
  m.Small = small
  return m
}

func (m *MinPadding) SetBig(big int64) *MinPadding {
  m.Big = big
  return m
}

func (m *MinPadding) SetMedium(medium int16) *MinPadding {
  m.Medium = medium
  return m
}

func (m *MinPadding) SetBiggish(biggish int32) *MinPadding {
  m.Biggish = biggish
  return m
}

func (m *MinPadding) SetTiny(tiny int8) *MinPadding {
  m.Tiny = tiny
  return m
}

func (p *MinPadding) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetSmall bool = false;
  var issetBig bool = false;
  var issetMedium bool = false;
  var issetBiggish bool = false;
  var issetTiny bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetSmall = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetBig = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetMedium = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetBiggish = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetTiny = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetSmall{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Small is not set"));
  }
  if !issetBig{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Big is not set"));
  }
  if !issetMedium{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Medium is not set"));
  }
  if !issetBiggish{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Biggish is not set"));
  }
  if !issetTiny{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tiny is not set"));
  }
  return nil
}

func (p *MinPadding)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := int8(v)
    p.Small = temp
  }
  return nil
}

func (p *MinPadding)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Big = v
  }
  return nil
}

func (p *MinPadding)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.Medium = v
  }
  return nil
}

func (p *MinPadding)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.Biggish = v
  }
  return nil
}

func (p *MinPadding)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    temp := int8(v)
    p.Tiny = temp
  }
  return nil
}

func (p *MinPadding) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MinPadding"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MinPadding) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("small", thrift.BYTE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:small: ", p), err) }
  if err := oprot.WriteByte(byte(p.Small)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.small (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:small: ", p), err) }
  return err
}

func (p *MinPadding) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("big", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:big: ", p), err) }
  if err := oprot.WriteI64(int64(p.Big)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.big (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:big: ", p), err) }
  return err
}

func (p *MinPadding) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("medium", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:medium: ", p), err) }
  if err := oprot.WriteI16(int16(p.Medium)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.medium (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:medium: ", p), err) }
  return err
}

func (p *MinPadding) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("biggish", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:biggish: ", p), err) }
  if err := oprot.WriteI32(int32(p.Biggish)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.biggish (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:biggish: ", p), err) }
  return err
}

func (p *MinPadding) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tiny", thrift.BYTE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tiny: ", p), err) }
  if err := oprot.WriteByte(byte(p.Tiny)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tiny (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tiny: ", p), err) }
  return err
}

func (p *MinPadding) String() string {
  if p == nil {
    return "<nil>"
  }

  smallVal := fmt.Sprintf("%v", p.Small)
  bigVal := fmt.Sprintf("%v", p.Big)
  mediumVal := fmt.Sprintf("%v", p.Medium)
  biggishVal := fmt.Sprintf("%v", p.Biggish)
  tinyVal := fmt.Sprintf("%v", p.Tiny)
  return fmt.Sprintf("MinPadding({Small:%s Big:%s Medium:%s Biggish:%s Tiny:%s})", smallVal, bigVal, mediumVal, biggishVal, tinyVal)
}

// Attributes:
//  - Small
//  - Big
//  - Medium
//  - Biggish
//  - Tiny
type MinPaddingWithCustomType struct {
  Small int8 `thrift:"small,1" db:"small" json:"small"`
  Big int64 `thrift:"big,2" db:"big" json:"big"`
  Medium int16 `thrift:"medium,3" db:"medium" json:"medium"`
  Biggish int32 `thrift:"biggish,4" db:"biggish" json:"biggish"`
  Tiny int8 `thrift:"tiny,5" db:"tiny" json:"tiny"`
}

func NewMinPaddingWithCustomType() *MinPaddingWithCustomType {
  return &MinPaddingWithCustomType{}
}


func (p *MinPaddingWithCustomType) GetSmall() int8 {
  return p.Small
}

func (p *MinPaddingWithCustomType) GetBig() int64 {
  return p.Big
}

func (p *MinPaddingWithCustomType) GetMedium() int16 {
  return p.Medium
}

func (p *MinPaddingWithCustomType) GetBiggish() int32 {
  return p.Biggish
}

func (p *MinPaddingWithCustomType) GetTiny() int8 {
  return p.Tiny
}
type MinPaddingWithCustomTypeBuilder struct {
  obj *MinPaddingWithCustomType
}

func NewMinPaddingWithCustomTypeBuilder() *MinPaddingWithCustomTypeBuilder{
  return &MinPaddingWithCustomTypeBuilder{
    obj: NewMinPaddingWithCustomType(),
  }
}

func (p MinPaddingWithCustomTypeBuilder) Emit() *MinPaddingWithCustomType{
  return &MinPaddingWithCustomType{
    Small: p.obj.Small,
    Big: p.obj.Big,
    Medium: p.obj.Medium,
    Biggish: p.obj.Biggish,
    Tiny: p.obj.Tiny,
  }
}

func (m *MinPaddingWithCustomTypeBuilder) Small(small int8) *MinPaddingWithCustomTypeBuilder {
  m.obj.Small = small
  return m
}

func (m *MinPaddingWithCustomTypeBuilder) Big(big int64) *MinPaddingWithCustomTypeBuilder {
  m.obj.Big = big
  return m
}

func (m *MinPaddingWithCustomTypeBuilder) Medium(medium int16) *MinPaddingWithCustomTypeBuilder {
  m.obj.Medium = medium
  return m
}

func (m *MinPaddingWithCustomTypeBuilder) Biggish(biggish int32) *MinPaddingWithCustomTypeBuilder {
  m.obj.Biggish = biggish
  return m
}

func (m *MinPaddingWithCustomTypeBuilder) Tiny(tiny int8) *MinPaddingWithCustomTypeBuilder {
  m.obj.Tiny = tiny
  return m
}

func (m *MinPaddingWithCustomType) SetSmall(small int8) *MinPaddingWithCustomType {
  m.Small = small
  return m
}

func (m *MinPaddingWithCustomType) SetBig(big int64) *MinPaddingWithCustomType {
  m.Big = big
  return m
}

func (m *MinPaddingWithCustomType) SetMedium(medium int16) *MinPaddingWithCustomType {
  m.Medium = medium
  return m
}

func (m *MinPaddingWithCustomType) SetBiggish(biggish int32) *MinPaddingWithCustomType {
  m.Biggish = biggish
  return m
}

func (m *MinPaddingWithCustomType) SetTiny(tiny int8) *MinPaddingWithCustomType {
  m.Tiny = tiny
  return m
}

func (p *MinPaddingWithCustomType) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MinPaddingWithCustomType)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := int8(v)
    p.Small = temp
  }
  return nil
}

func (p *MinPaddingWithCustomType)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Big = v
  }
  return nil
}

func (p *MinPaddingWithCustomType)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.Medium = v
  }
  return nil
}

func (p *MinPaddingWithCustomType)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.Biggish = v
  }
  return nil
}

func (p *MinPaddingWithCustomType)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    temp := int8(v)
    p.Tiny = temp
  }
  return nil
}

func (p *MinPaddingWithCustomType) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MinPaddingWithCustomType"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MinPaddingWithCustomType) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("small", thrift.BYTE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:small: ", p), err) }
  if err := oprot.WriteByte(byte(p.Small)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.small (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:small: ", p), err) }
  return err
}

func (p *MinPaddingWithCustomType) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("big", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:big: ", p), err) }
  if err := oprot.WriteI64(int64(p.Big)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.big (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:big: ", p), err) }
  return err
}

func (p *MinPaddingWithCustomType) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("medium", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:medium: ", p), err) }
  if err := oprot.WriteI16(int16(p.Medium)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.medium (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:medium: ", p), err) }
  return err
}

func (p *MinPaddingWithCustomType) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("biggish", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:biggish: ", p), err) }
  if err := oprot.WriteI32(int32(p.Biggish)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.biggish (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:biggish: ", p), err) }
  return err
}

func (p *MinPaddingWithCustomType) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tiny", thrift.BYTE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tiny: ", p), err) }
  if err := oprot.WriteByte(byte(p.Tiny)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tiny (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tiny: ", p), err) }
  return err
}

func (p *MinPaddingWithCustomType) String() string {
  if p == nil {
    return "<nil>"
  }

  smallVal := fmt.Sprintf("%v", p.Small)
  bigVal := fmt.Sprintf("%v", p.Big)
  mediumVal := fmt.Sprintf("%v", p.Medium)
  biggishVal := fmt.Sprintf("%v", p.Biggish)
  tinyVal := fmt.Sprintf("%v", p.Tiny)
  return fmt.Sprintf("MinPaddingWithCustomType({Small:%s Big:%s Medium:%s Biggish:%s Tiny:%s})", smallVal, bigVal, mediumVal, biggishVal, tinyVal)
}

// Attributes:
//  - MyIntField
//  - MyStringField
//  - MajorVer
//  - Data
type MyStruct struct {
  MyIntField int64 `thrift:"MyIntField,1" db:"MyIntField" json:"MyIntField"`
  MyStringField string `thrift:"MyStringField,2" db:"MyStringField" json:"MyStringField"`
  MajorVer int64 `thrift:"majorVer,3" db:"majorVer" json:"majorVer"`
  Data *MyDataItem `thrift:"data,4" db:"data" json:"data"`
}

func NewMyStruct() *MyStruct {
  return &MyStruct{
    Data: NewMyDataItem(),
  }
}


func (p *MyStruct) GetMyIntField() int64 {
  return p.MyIntField
}

func (p *MyStruct) GetMyStringField() string {
  return p.MyStringField
}

func (p *MyStruct) GetMajorVer() int64 {
  return p.MajorVer
}
var MyStruct_Data_DEFAULT *MyDataItem
func (p *MyStruct) GetData() *MyDataItem {
  if !p.IsSetData() {
    return MyStruct_Data_DEFAULT
  }
  return p.Data
}
func (p *MyStruct) IsSetData() bool {
  return p != nil && p.Data != nil
}

type MyStructBuilder struct {
  obj *MyStruct
}

func NewMyStructBuilder() *MyStructBuilder{
  return &MyStructBuilder{
    obj: NewMyStruct(),
  }
}

func (p MyStructBuilder) Emit() *MyStruct{
  return &MyStruct{
    MyIntField: p.obj.MyIntField,
    MyStringField: p.obj.MyStringField,
    MajorVer: p.obj.MajorVer,
    Data: p.obj.Data,
  }
}

func (m *MyStructBuilder) MyIntField(myIntField int64) *MyStructBuilder {
  m.obj.MyIntField = myIntField
  return m
}

func (m *MyStructBuilder) MyStringField(myStringField string) *MyStructBuilder {
  m.obj.MyStringField = myStringField
  return m
}

func (m *MyStructBuilder) MajorVer(majorVer int64) *MyStructBuilder {
  m.obj.MajorVer = majorVer
  return m
}

func (m *MyStructBuilder) Data(data *MyDataItem) *MyStructBuilder {
  m.obj.Data = data
  return m
}

func (m *MyStruct) SetMyIntField(myIntField int64) *MyStruct {
  m.MyIntField = myIntField
  return m
}

func (m *MyStruct) SetMyStringField(myStringField string) *MyStruct {
  m.MyStringField = myStringField
  return m
}

func (m *MyStruct) SetMajorVer(majorVer int64) *MyStruct {
  m.MajorVer = majorVer
  return m
}

func (m *MyStruct) SetData(data *MyDataItem) *MyStruct {
  m.Data = data
  return m
}

func (p *MyStruct) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStruct)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.MyIntField = v
  }
  return nil
}

func (p *MyStruct)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.MyStringField = v
  }
  return nil
}

func (p *MyStruct)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.MajorVer = v
  }
  return nil
}

func (p *MyStruct)  ReadField4(iprot thrift.Protocol) error {
  p.Data = NewMyDataItem()
  if err := p.Data.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *MyStruct) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStruct) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("MyIntField", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:MyIntField: ", p), err) }
  if err := oprot.WriteI64(int64(p.MyIntField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MyIntField (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:MyIntField: ", p), err) }
  return err
}

func (p *MyStruct) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("MyStringField", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:MyStringField: ", p), err) }
  if err := oprot.WriteString(string(p.MyStringField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MyStringField (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:MyStringField: ", p), err) }
  return err
}

func (p *MyStruct) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("majorVer", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:majorVer: ", p), err) }
  if err := oprot.WriteI64(int64(p.MajorVer)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.majorVer (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:majorVer: ", p), err) }
  return err
}

func (p *MyStruct) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:data: ", p), err) }
  if err := p.Data.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:data: ", p), err) }
  return err
}

func (p *MyStruct) String() string {
  if p == nil {
    return "<nil>"
  }

  myIntFieldVal := fmt.Sprintf("%v", p.MyIntField)
  myStringFieldVal := fmt.Sprintf("%v", p.MyStringField)
  majorVerVal := fmt.Sprintf("%v", p.MajorVer)
  var dataVal string
  if p.Data == nil {
    dataVal = "<nil>"
  } else {
    dataVal = fmt.Sprintf("%v", p.Data)
  }
  return fmt.Sprintf("MyStruct({MyIntField:%s MyStringField:%s MajorVer:%s Data:%s})", myIntFieldVal, myStringFieldVal, majorVerVal, dataVal)
}

type MyDataItem struct {
}

func NewMyDataItem() *MyDataItem {
  return &MyDataItem{}
}

type MyDataItemBuilder struct {
  obj *MyDataItem
}

func NewMyDataItemBuilder() *MyDataItemBuilder{
  return &MyDataItemBuilder{
    obj: NewMyDataItem(),
  }
}

func (p MyDataItemBuilder) Emit() *MyDataItem{
  return &MyDataItem{
  }
}

func (p *MyDataItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyDataItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyDataItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyDataItem) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("MyDataItem({})")
}

// Attributes:
//  - Foo
type Renaming struct {
  Foo int64 `thrift:"foo,1" db:"foo" json:"foo"`
}

func NewRenaming() *Renaming {
  return &Renaming{}
}


func (p *Renaming) GetFoo() int64 {
  return p.Foo
}
type RenamingBuilder struct {
  obj *Renaming
}

func NewRenamingBuilder() *RenamingBuilder{
  return &RenamingBuilder{
    obj: NewRenaming(),
  }
}

func (p RenamingBuilder) Emit() *Renaming{
  return &Renaming{
    Foo: p.obj.Foo,
  }
}

func (r *RenamingBuilder) Foo(foo int64) *RenamingBuilder {
  r.obj.Foo = foo
  return r
}

func (r *Renaming) SetFoo(foo int64) *Renaming {
  r.Foo = foo
  return r
}

func (p *Renaming) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Renaming)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Foo = v
  }
  return nil
}

func (p *Renaming) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Renaming"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Renaming) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("foo", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:foo: ", p), err) }
  if err := oprot.WriteI64(int64(p.Foo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.foo (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:foo: ", p), err) }
  return err
}

func (p *Renaming) String() string {
  if p == nil {
    return "<nil>"
  }

  fooVal := fmt.Sprintf("%v", p.Foo)
  return fmt.Sprintf("Renaming({Foo:%s})", fooVal)
}

// Attributes:
//  - BinaryField
//  - ListField
type AnnotatedTypes struct {
  BinaryField TBinary `thrift:"binary_field,1" db:"binary_field" json:"binary_field"`
  ListField included0.SomeListOfTypeMap `thrift:"list_field,2" db:"list_field" json:"list_field"`
}

func NewAnnotatedTypes() *AnnotatedTypes {
  return &AnnotatedTypes{}
}


func (p *AnnotatedTypes) GetBinaryField() TBinary {
  return p.BinaryField
}

func (p *AnnotatedTypes) GetListField() included0.SomeListOfTypeMap {
  return p.ListField
}
type AnnotatedTypesBuilder struct {
  obj *AnnotatedTypes
}

func NewAnnotatedTypesBuilder() *AnnotatedTypesBuilder{
  return &AnnotatedTypesBuilder{
    obj: NewAnnotatedTypes(),
  }
}

func (p AnnotatedTypesBuilder) Emit() *AnnotatedTypes{
  return &AnnotatedTypes{
    BinaryField: p.obj.BinaryField,
    ListField: p.obj.ListField,
  }
}

func (a *AnnotatedTypesBuilder) BinaryField(binaryField TBinary) *AnnotatedTypesBuilder {
  a.obj.BinaryField = binaryField
  return a
}

func (a *AnnotatedTypesBuilder) ListField(listField included0.SomeListOfTypeMap) *AnnotatedTypesBuilder {
  a.obj.ListField = listField
  return a
}

func (a *AnnotatedTypes) SetBinaryField(binaryField TBinary) *AnnotatedTypes {
  a.BinaryField = binaryField
  return a
}

func (a *AnnotatedTypes) SetListField(listField included0.SomeListOfTypeMap) *AnnotatedTypes {
  a.ListField = listField
  return a
}

func (p *AnnotatedTypes) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AnnotatedTypes)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := TBinary(v)
    p.BinaryField = temp
  }
  return nil
}

func (p *AnnotatedTypes)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make(included0.SomeListOfTypeMap, 0, size)
  p.ListField =  tSlice
  for i := 0; i < size; i ++ {
    _, _, size, err := iprot.ReadMapBegin()
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(included0.SomeMap, size)
    _elem16 :=  tMap
    for i := 0; i < size; i ++ {
      var _key17 int32
      if v, err := iprot.ReadI32(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        _key17 = v
      }
      var _val18 string
      if v, err := iprot.ReadString(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        _val18 = v
      }
      _elem16[_key17] = _val18
    }
    if err := iprot.ReadMapEnd(); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.ListField = append(p.ListField, _elem16)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AnnotatedTypes) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AnnotatedTypes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AnnotatedTypes) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("binary_field", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:binary_field: ", p), err) }
  if err := oprot.WriteBinary(p.BinaryField); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.binary_field (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:binary_field: ", p), err) }
  return err
}

func (p *AnnotatedTypes) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("list_field", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:list_field: ", p), err) }
  if err := oprot.WriteListBegin(thrift.MAP, len(p.ListField)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ListField {
    if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(v)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range v {
      if err := oprot.WriteI32(int32(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:list_field: ", p), err) }
  return err
}

func (p *AnnotatedTypes) String() string {
  if p == nil {
    return "<nil>"
  }

  binaryFieldVal := fmt.Sprintf("%v", p.BinaryField)
  listFieldVal := fmt.Sprintf("%v", p.ListField)
  return fmt.Sprintf("AnnotatedTypes({BinaryField:%s ListField:%s})", binaryFieldVal, listFieldVal)
}

// Attributes:
//  - ForwardUsageStruct
//  - ForwardUsageByRef
type ForwardUsageRoot struct {
  ForwardUsageStruct *ForwardUsageStruct `thrift:"ForwardUsageStruct,1,optional" db:"ForwardUsageStruct" json:"ForwardUsageStruct,omitempty"`
  ForwardUsageByRef *ForwardUsageByRef `thrift:"ForwardUsageByRef,2,optional" db:"ForwardUsageByRef" json:"ForwardUsageByRef,omitempty"`
}

func NewForwardUsageRoot() *ForwardUsageRoot {
  return &ForwardUsageRoot{}
}

var ForwardUsageRoot_ForwardUsageStruct_DEFAULT *ForwardUsageStruct
func (p *ForwardUsageRoot) GetForwardUsageStruct() *ForwardUsageStruct {
  if !p.IsSetForwardUsageStruct() {
    return ForwardUsageRoot_ForwardUsageStruct_DEFAULT
  }
  return p.ForwardUsageStruct
}
var ForwardUsageRoot_ForwardUsageByRef_DEFAULT *ForwardUsageByRef
func (p *ForwardUsageRoot) GetForwardUsageByRef() *ForwardUsageByRef {
  if !p.IsSetForwardUsageByRef() {
    return ForwardUsageRoot_ForwardUsageByRef_DEFAULT
  }
  return p.ForwardUsageByRef
}
func (p *ForwardUsageRoot) IsSetForwardUsageStruct() bool {
  return p != nil && p.ForwardUsageStruct != nil
}

func (p *ForwardUsageRoot) IsSetForwardUsageByRef() bool {
  return p != nil && p.ForwardUsageByRef != nil
}

type ForwardUsageRootBuilder struct {
  obj *ForwardUsageRoot
}

func NewForwardUsageRootBuilder() *ForwardUsageRootBuilder{
  return &ForwardUsageRootBuilder{
    obj: NewForwardUsageRoot(),
  }
}

func (p ForwardUsageRootBuilder) Emit() *ForwardUsageRoot{
  return &ForwardUsageRoot{
    ForwardUsageStruct: p.obj.ForwardUsageStruct,
    ForwardUsageByRef: p.obj.ForwardUsageByRef,
  }
}

func (f *ForwardUsageRootBuilder) ForwardUsageStruct(forwardUsageStruct *ForwardUsageStruct) *ForwardUsageRootBuilder {
  f.obj.ForwardUsageStruct = forwardUsageStruct
  return f
}

func (f *ForwardUsageRootBuilder) ForwardUsageByRef(forwardUsageByRef *ForwardUsageByRef) *ForwardUsageRootBuilder {
  f.obj.ForwardUsageByRef = forwardUsageByRef
  return f
}

func (f *ForwardUsageRoot) SetForwardUsageStruct(forwardUsageStruct *ForwardUsageStruct) *ForwardUsageRoot {
  f.ForwardUsageStruct = forwardUsageStruct
  return f
}

func (f *ForwardUsageRoot) SetForwardUsageByRef(forwardUsageByRef *ForwardUsageByRef) *ForwardUsageRoot {
  f.ForwardUsageByRef = forwardUsageByRef
  return f
}

func (p *ForwardUsageRoot) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ForwardUsageRoot)  ReadField1(iprot thrift.Protocol) error {
  p.ForwardUsageStruct = NewForwardUsageStruct()
  if err := p.ForwardUsageStruct.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ForwardUsageStruct), err)
  }
  return nil
}

func (p *ForwardUsageRoot)  ReadField2(iprot thrift.Protocol) error {
  p.ForwardUsageByRef = NewForwardUsageByRef()
  if err := p.ForwardUsageByRef.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ForwardUsageByRef), err)
  }
  return nil
}

func (p *ForwardUsageRoot) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ForwardUsageRoot"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ForwardUsageRoot) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetForwardUsageStruct() {
    if err := oprot.WriteFieldBegin("ForwardUsageStruct", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ForwardUsageStruct: ", p), err) }
    if err := p.ForwardUsageStruct.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ForwardUsageStruct), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ForwardUsageStruct: ", p), err) }
  }
  return err
}

func (p *ForwardUsageRoot) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetForwardUsageByRef() {
    if err := oprot.WriteFieldBegin("ForwardUsageByRef", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ForwardUsageByRef: ", p), err) }
    if err := p.ForwardUsageByRef.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ForwardUsageByRef), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ForwardUsageByRef: ", p), err) }
  }
  return err
}

func (p *ForwardUsageRoot) String() string {
  if p == nil {
    return "<nil>"
  }

  var forwardUsageStructVal string
  if p.ForwardUsageStruct == nil {
    forwardUsageStructVal = "<nil>"
  } else {
    forwardUsageStructVal = fmt.Sprintf("%v", p.ForwardUsageStruct)
  }
  var forwardUsageByRefVal string
  if p.ForwardUsageByRef == nil {
    forwardUsageByRefVal = "<nil>"
  } else {
    forwardUsageByRefVal = fmt.Sprintf("%v", p.ForwardUsageByRef)
  }
  return fmt.Sprintf("ForwardUsageRoot({ForwardUsageStruct:%s ForwardUsageByRef:%s})", forwardUsageStructVal, forwardUsageByRefVal)
}

// Attributes:
//  - Foo
type ForwardUsageStruct struct {
  Foo *ForwardUsageRoot `thrift:"foo,1,optional" db:"foo" json:"foo,omitempty"`
}

func NewForwardUsageStruct() *ForwardUsageStruct {
  return &ForwardUsageStruct{}
}

var ForwardUsageStruct_Foo_DEFAULT *ForwardUsageRoot
func (p *ForwardUsageStruct) GetFoo() *ForwardUsageRoot {
  if !p.IsSetFoo() {
    return ForwardUsageStruct_Foo_DEFAULT
  }
  return p.Foo
}
func (p *ForwardUsageStruct) DefaultGetFoo() *ForwardUsageRoot {
  if !p.IsSetFoo() {
    return NewForwardUsageRoot()
  }
  return p.Foo
}
func (p *ForwardUsageStruct) IsSetFoo() bool {
  return p != nil && p.Foo != nil
}

type ForwardUsageStructBuilder struct {
  obj *ForwardUsageStruct
}

func NewForwardUsageStructBuilder() *ForwardUsageStructBuilder{
  return &ForwardUsageStructBuilder{
    obj: NewForwardUsageStruct(),
  }
}

func (p ForwardUsageStructBuilder) Emit() *ForwardUsageStruct{
  return &ForwardUsageStruct{
    Foo: p.obj.Foo,
  }
}

func (f *ForwardUsageStructBuilder) Foo(foo *ForwardUsageRoot) *ForwardUsageStructBuilder {
  f.obj.Foo = foo
  return f
}

func (f *ForwardUsageStruct) SetFoo(foo *ForwardUsageRoot) *ForwardUsageStruct {
  f.Foo = foo
  return f
}

func (p *ForwardUsageStruct) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ForwardUsageStruct)  ReadField1(iprot thrift.Protocol) error {
  p.Foo = NewForwardUsageRoot()
  if err := p.Foo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Foo), err)
  }
  return nil
}

func (p *ForwardUsageStruct) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ForwardUsageStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ForwardUsageStruct) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetFoo() {
    if err := oprot.WriteFieldBegin("foo", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:foo: ", p), err) }
    if err := p.Foo.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Foo), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:foo: ", p), err) }
  }
  return err
}

func (p *ForwardUsageStruct) String() string {
  if p == nil {
    return "<nil>"
  }

  var fooVal string
  if p.Foo == nil {
    fooVal = "<nil>"
  } else {
    fooVal = fmt.Sprintf("%v", p.Foo)
  }
  return fmt.Sprintf("ForwardUsageStruct({Foo:%s})", fooVal)
}

// Attributes:
//  - Foo
type ForwardUsageByRef struct {
  Foo *ForwardUsageRoot `thrift:"foo,1,optional" db:"foo" json:"foo,omitempty"`
}

func NewForwardUsageByRef() *ForwardUsageByRef {
  return &ForwardUsageByRef{}
}

var ForwardUsageByRef_Foo_DEFAULT *ForwardUsageRoot
func (p *ForwardUsageByRef) GetFoo() *ForwardUsageRoot {
  if !p.IsSetFoo() {
    return ForwardUsageByRef_Foo_DEFAULT
  }
  return p.Foo
}
func (p *ForwardUsageByRef) DefaultGetFoo() *ForwardUsageRoot {
  if !p.IsSetFoo() {
    return NewForwardUsageRoot()
  }
  return p.Foo
}
func (p *ForwardUsageByRef) IsSetFoo() bool {
  return p != nil && p.Foo != nil
}

type ForwardUsageByRefBuilder struct {
  obj *ForwardUsageByRef
}

func NewForwardUsageByRefBuilder() *ForwardUsageByRefBuilder{
  return &ForwardUsageByRefBuilder{
    obj: NewForwardUsageByRef(),
  }
}

func (p ForwardUsageByRefBuilder) Emit() *ForwardUsageByRef{
  return &ForwardUsageByRef{
    Foo: p.obj.Foo,
  }
}

func (f *ForwardUsageByRefBuilder) Foo(foo *ForwardUsageRoot) *ForwardUsageByRefBuilder {
  f.obj.Foo = foo
  return f
}

func (f *ForwardUsageByRef) SetFoo(foo *ForwardUsageRoot) *ForwardUsageByRef {
  f.Foo = foo
  return f
}

func (p *ForwardUsageByRef) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ForwardUsageByRef)  ReadField1(iprot thrift.Protocol) error {
  p.Foo = NewForwardUsageRoot()
  if err := p.Foo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Foo), err)
  }
  return nil
}

func (p *ForwardUsageByRef) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ForwardUsageByRef"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ForwardUsageByRef) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetFoo() {
    if err := oprot.WriteFieldBegin("foo", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:foo: ", p), err) }
    if err := p.Foo.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Foo), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:foo: ", p), err) }
  }
  return err
}

func (p *ForwardUsageByRef) String() string {
  if p == nil {
    return "<nil>"
  }

  var fooVal string
  if p.Foo == nil {
    fooVal = "<nil>"
  } else {
    fooVal = fmt.Sprintf("%v", p.Foo)
  }
  return fmt.Sprintf("ForwardUsageByRef({Foo:%s})", fooVal)
}

// Attributes:
//  - Field
type IncompleteMap struct {
  Field map[int32]*IncompleteMapDep `thrift:"field,1,optional" db:"field" json:"field,omitempty"`
}

func NewIncompleteMap() *IncompleteMap {
  return &IncompleteMap{}
}

var IncompleteMap_Field_DEFAULT map[int32]*IncompleteMapDep

func (p *IncompleteMap) GetField() map[int32]*IncompleteMapDep {
  return p.Field
}
func (p *IncompleteMap) IsSetField() bool {
  return p != nil && p.Field != nil
}

type IncompleteMapBuilder struct {
  obj *IncompleteMap
}

func NewIncompleteMapBuilder() *IncompleteMapBuilder{
  return &IncompleteMapBuilder{
    obj: NewIncompleteMap(),
  }
}

func (p IncompleteMapBuilder) Emit() *IncompleteMap{
  return &IncompleteMap{
    Field: p.obj.Field,
  }
}

func (i *IncompleteMapBuilder) Field(field map[int32]*IncompleteMapDep) *IncompleteMapBuilder {
  i.obj.Field = field
  return i
}

func (i *IncompleteMap) SetField(field map[int32]*IncompleteMapDep) *IncompleteMap {
  i.Field = field
  return i
}

func (p *IncompleteMap) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IncompleteMap)  ReadField1(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int32]*IncompleteMapDep, size)
  p.Field =  tMap
  for i := 0; i < size; i ++ {
    var _key19 int32
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key19 = v
    }
    _val20 := NewIncompleteMapDep()
    if err := _val20.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val20), err)
    }
    p.Field[_key19] = _val20
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *IncompleteMap) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("IncompleteMap"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IncompleteMap) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetField() {
    if err := oprot.WriteFieldBegin("field", thrift.MAP, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:field: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.Field)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Field {
      if err := oprot.WriteI32(int32(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:field: ", p), err) }
  }
  return err
}

func (p *IncompleteMap) String() string {
  if p == nil {
    return "<nil>"
  }

  fieldVal := fmt.Sprintf("%v", p.Field)
  return fmt.Sprintf("IncompleteMap({Field:%s})", fieldVal)
}

type IncompleteMapDep struct {
}

func NewIncompleteMapDep() *IncompleteMapDep {
  return &IncompleteMapDep{}
}

type IncompleteMapDepBuilder struct {
  obj *IncompleteMapDep
}

func NewIncompleteMapDepBuilder() *IncompleteMapDepBuilder{
  return &IncompleteMapDepBuilder{
    obj: NewIncompleteMapDep(),
  }
}

func (p IncompleteMapDepBuilder) Emit() *IncompleteMapDep{
  return &IncompleteMapDep{
  }
}

func (p *IncompleteMapDep) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IncompleteMapDep) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("IncompleteMapDep"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IncompleteMapDep) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("IncompleteMapDep({})")
}

// Attributes:
//  - Field
type CompleteMap struct {
  Field map[int32]*CompleteMapDep `thrift:"field,1,optional" db:"field" json:"field,omitempty"`
}

func NewCompleteMap() *CompleteMap {
  return &CompleteMap{}
}

var CompleteMap_Field_DEFAULT map[int32]*CompleteMapDep

func (p *CompleteMap) GetField() map[int32]*CompleteMapDep {
  return p.Field
}
func (p *CompleteMap) IsSetField() bool {
  return p != nil && p.Field != nil
}

type CompleteMapBuilder struct {
  obj *CompleteMap
}

func NewCompleteMapBuilder() *CompleteMapBuilder{
  return &CompleteMapBuilder{
    obj: NewCompleteMap(),
  }
}

func (p CompleteMapBuilder) Emit() *CompleteMap{
  return &CompleteMap{
    Field: p.obj.Field,
  }
}

func (c *CompleteMapBuilder) Field(field map[int32]*CompleteMapDep) *CompleteMapBuilder {
  c.obj.Field = field
  return c
}

func (c *CompleteMap) SetField(field map[int32]*CompleteMapDep) *CompleteMap {
  c.Field = field
  return c
}

func (p *CompleteMap) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompleteMap)  ReadField1(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int32]*CompleteMapDep, size)
  p.Field =  tMap
  for i := 0; i < size; i ++ {
    var _key21 int32
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key21 = v
    }
    _val22 := NewCompleteMapDep()
    if err := _val22.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val22), err)
    }
    p.Field[_key21] = _val22
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *CompleteMap) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CompleteMap"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompleteMap) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetField() {
    if err := oprot.WriteFieldBegin("field", thrift.MAP, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:field: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.Field)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Field {
      if err := oprot.WriteI32(int32(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:field: ", p), err) }
  }
  return err
}

func (p *CompleteMap) String() string {
  if p == nil {
    return "<nil>"
  }

  fieldVal := fmt.Sprintf("%v", p.Field)
  return fmt.Sprintf("CompleteMap({Field:%s})", fieldVal)
}

type CompleteMapDep struct {
}

func NewCompleteMapDep() *CompleteMapDep {
  return &CompleteMapDep{}
}

type CompleteMapDepBuilder struct {
  obj *CompleteMapDep
}

func NewCompleteMapDepBuilder() *CompleteMapDepBuilder{
  return &CompleteMapDepBuilder{
    obj: NewCompleteMapDep(),
  }
}

func (p CompleteMapDepBuilder) Emit() *CompleteMapDep{
  return &CompleteMapDep{
  }
}

func (p *CompleteMapDep) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompleteMapDep) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CompleteMapDep"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompleteMapDep) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("CompleteMapDep({})")
}

// Attributes:
//  - Field
type IncompleteList struct {
  Field []*IncompleteListDep `thrift:"field,1,optional" db:"field" json:"field,omitempty"`
}

func NewIncompleteList() *IncompleteList {
  return &IncompleteList{}
}

var IncompleteList_Field_DEFAULT []*IncompleteListDep

func (p *IncompleteList) GetField() []*IncompleteListDep {
  return p.Field
}
func (p *IncompleteList) IsSetField() bool {
  return p != nil && p.Field != nil
}

type IncompleteListBuilder struct {
  obj *IncompleteList
}

func NewIncompleteListBuilder() *IncompleteListBuilder{
  return &IncompleteListBuilder{
    obj: NewIncompleteList(),
  }
}

func (p IncompleteListBuilder) Emit() *IncompleteList{
  return &IncompleteList{
    Field: p.obj.Field,
  }
}

func (i *IncompleteListBuilder) Field(field []*IncompleteListDep) *IncompleteListBuilder {
  i.obj.Field = field
  return i
}

func (i *IncompleteList) SetField(field []*IncompleteListDep) *IncompleteList {
  i.Field = field
  return i
}

func (p *IncompleteList) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IncompleteList)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IncompleteListDep, 0, size)
  p.Field =  tSlice
  for i := 0; i < size; i ++ {
    _elem23 := NewIncompleteListDep()
    if err := _elem23.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem23), err)
    }
    p.Field = append(p.Field, _elem23)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *IncompleteList) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("IncompleteList"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IncompleteList) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetField() {
    if err := oprot.WriteFieldBegin("field", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:field: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Field)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Field {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:field: ", p), err) }
  }
  return err
}

func (p *IncompleteList) String() string {
  if p == nil {
    return "<nil>"
  }

  fieldVal := fmt.Sprintf("%v", p.Field)
  return fmt.Sprintf("IncompleteList({Field:%s})", fieldVal)
}

type IncompleteListDep struct {
}

func NewIncompleteListDep() *IncompleteListDep {
  return &IncompleteListDep{}
}

type IncompleteListDepBuilder struct {
  obj *IncompleteListDep
}

func NewIncompleteListDepBuilder() *IncompleteListDepBuilder{
  return &IncompleteListDepBuilder{
    obj: NewIncompleteListDep(),
  }
}

func (p IncompleteListDepBuilder) Emit() *IncompleteListDep{
  return &IncompleteListDep{
  }
}

func (p *IncompleteListDep) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IncompleteListDep) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("IncompleteListDep"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IncompleteListDep) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("IncompleteListDep({})")
}

// Attributes:
//  - Field
type CompleteList struct {
  Field []*CompleteListDep `thrift:"field,1,optional" db:"field" json:"field,omitempty"`
}

func NewCompleteList() *CompleteList {
  return &CompleteList{}
}

var CompleteList_Field_DEFAULT []*CompleteListDep

func (p *CompleteList) GetField() []*CompleteListDep {
  return p.Field
}
func (p *CompleteList) IsSetField() bool {
  return p != nil && p.Field != nil
}

type CompleteListBuilder struct {
  obj *CompleteList
}

func NewCompleteListBuilder() *CompleteListBuilder{
  return &CompleteListBuilder{
    obj: NewCompleteList(),
  }
}

func (p CompleteListBuilder) Emit() *CompleteList{
  return &CompleteList{
    Field: p.obj.Field,
  }
}

func (c *CompleteListBuilder) Field(field []*CompleteListDep) *CompleteListBuilder {
  c.obj.Field = field
  return c
}

func (c *CompleteList) SetField(field []*CompleteListDep) *CompleteList {
  c.Field = field
  return c
}

func (p *CompleteList) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompleteList)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*CompleteListDep, 0, size)
  p.Field =  tSlice
  for i := 0; i < size; i ++ {
    _elem24 := NewCompleteListDep()
    if err := _elem24.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem24), err)
    }
    p.Field = append(p.Field, _elem24)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CompleteList) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CompleteList"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompleteList) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetField() {
    if err := oprot.WriteFieldBegin("field", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:field: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Field)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Field {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:field: ", p), err) }
  }
  return err
}

func (p *CompleteList) String() string {
  if p == nil {
    return "<nil>"
  }

  fieldVal := fmt.Sprintf("%v", p.Field)
  return fmt.Sprintf("CompleteList({Field:%s})", fieldVal)
}

type CompleteListDep struct {
}

func NewCompleteListDep() *CompleteListDep {
  return &CompleteListDep{}
}

type CompleteListDepBuilder struct {
  obj *CompleteListDep
}

func NewCompleteListDepBuilder() *CompleteListDepBuilder{
  return &CompleteListDepBuilder{
    obj: NewCompleteListDep(),
  }
}

func (p CompleteListDepBuilder) Emit() *CompleteListDep{
  return &CompleteListDep{
  }
}

func (p *CompleteListDep) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompleteListDep) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CompleteListDep"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompleteListDep) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("CompleteListDep({})")
}

// Attributes:
//  - Field
type AdaptedList struct {
  Field []*AdaptedListDep `thrift:"field,1,optional" db:"field" json:"field,omitempty"`
}

func NewAdaptedList() *AdaptedList {
  return &AdaptedList{}
}

var AdaptedList_Field_DEFAULT []*AdaptedListDep

func (p *AdaptedList) GetField() []*AdaptedListDep {
  return p.Field
}
func (p *AdaptedList) IsSetField() bool {
  return p != nil && p.Field != nil
}

type AdaptedListBuilder struct {
  obj *AdaptedList
}

func NewAdaptedListBuilder() *AdaptedListBuilder{
  return &AdaptedListBuilder{
    obj: NewAdaptedList(),
  }
}

func (p AdaptedListBuilder) Emit() *AdaptedList{
  return &AdaptedList{
    Field: p.obj.Field,
  }
}

func (a *AdaptedListBuilder) Field(field []*AdaptedListDep) *AdaptedListBuilder {
  a.obj.Field = field
  return a
}

func (a *AdaptedList) SetField(field []*AdaptedListDep) *AdaptedList {
  a.Field = field
  return a
}

func (p *AdaptedList) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdaptedList)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*AdaptedListDep, 0, size)
  p.Field =  tSlice
  for i := 0; i < size; i ++ {
    _elem25 := NewAdaptedListDep()
    if err := _elem25.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem25), err)
    }
    p.Field = append(p.Field, _elem25)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AdaptedList) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AdaptedList"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdaptedList) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetField() {
    if err := oprot.WriteFieldBegin("field", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:field: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Field)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Field {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:field: ", p), err) }
  }
  return err
}

func (p *AdaptedList) String() string {
  if p == nil {
    return "<nil>"
  }

  fieldVal := fmt.Sprintf("%v", p.Field)
  return fmt.Sprintf("AdaptedList({Field:%s})", fieldVal)
}

// Attributes:
//  - Field
type AdaptedListDep struct {
  Field *AdaptedList `thrift:"field,1" db:"field" json:"field"`
}

func NewAdaptedListDep() *AdaptedListDep {
  return &AdaptedListDep{
    Field: NewAdaptedList(),
  }
}

var AdaptedListDep_Field_DEFAULT *AdaptedList
func (p *AdaptedListDep) GetField() *AdaptedList {
  if !p.IsSetField() {
    return AdaptedListDep_Field_DEFAULT
  }
  return p.Field
}
func (p *AdaptedListDep) DefaultGetField() *AdaptedList {
  if !p.IsSetField() {
    return NewAdaptedList()
  }
  return p.Field
}
func (p *AdaptedListDep) IsSetField() bool {
  return p != nil && p.Field != nil
}

type AdaptedListDepBuilder struct {
  obj *AdaptedListDep
}

func NewAdaptedListDepBuilder() *AdaptedListDepBuilder{
  return &AdaptedListDepBuilder{
    obj: NewAdaptedListDep(),
  }
}

func (p AdaptedListDepBuilder) Emit() *AdaptedListDep{
  return &AdaptedListDep{
    Field: p.obj.Field,
  }
}

func (a *AdaptedListDepBuilder) Field(field *AdaptedList) *AdaptedListDepBuilder {
  a.obj.Field = field
  return a
}

func (a *AdaptedListDep) SetField(field *AdaptedList) *AdaptedListDep {
  a.Field = field
  return a
}

func (p *AdaptedListDep) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdaptedListDep)  ReadField1(iprot thrift.Protocol) error {
  p.Field = NewAdaptedList()
  if err := p.Field.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Field), err)
  }
  return nil
}

func (p *AdaptedListDep) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AdaptedListDep"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdaptedListDep) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("field", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:field: ", p), err) }
  if err := p.Field.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Field), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:field: ", p), err) }
  return err
}

func (p *AdaptedListDep) String() string {
  if p == nil {
    return "<nil>"
  }

  var fieldVal string
  if p.Field == nil {
    fieldVal = "<nil>"
  } else {
    fieldVal = fmt.Sprintf("%v", p.Field)
  }
  return fmt.Sprintf("AdaptedListDep({Field:%s})", fieldVal)
}

// Attributes:
//  - Field
type DependentAdaptedList struct {
  Field []*DependentAdaptedListDep `thrift:"field,1,optional" db:"field" json:"field,omitempty"`
}

func NewDependentAdaptedList() *DependentAdaptedList {
  return &DependentAdaptedList{}
}

var DependentAdaptedList_Field_DEFAULT []*DependentAdaptedListDep

func (p *DependentAdaptedList) GetField() []*DependentAdaptedListDep {
  return p.Field
}
func (p *DependentAdaptedList) IsSetField() bool {
  return p != nil && p.Field != nil
}

type DependentAdaptedListBuilder struct {
  obj *DependentAdaptedList
}

func NewDependentAdaptedListBuilder() *DependentAdaptedListBuilder{
  return &DependentAdaptedListBuilder{
    obj: NewDependentAdaptedList(),
  }
}

func (p DependentAdaptedListBuilder) Emit() *DependentAdaptedList{
  return &DependentAdaptedList{
    Field: p.obj.Field,
  }
}

func (d *DependentAdaptedListBuilder) Field(field []*DependentAdaptedListDep) *DependentAdaptedListBuilder {
  d.obj.Field = field
  return d
}

func (d *DependentAdaptedList) SetField(field []*DependentAdaptedListDep) *DependentAdaptedList {
  d.Field = field
  return d
}

func (p *DependentAdaptedList) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DependentAdaptedList)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*DependentAdaptedListDep, 0, size)
  p.Field =  tSlice
  for i := 0; i < size; i ++ {
    _elem26 := NewDependentAdaptedListDep()
    if err := _elem26.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem26), err)
    }
    p.Field = append(p.Field, _elem26)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DependentAdaptedList) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DependentAdaptedList"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DependentAdaptedList) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetField() {
    if err := oprot.WriteFieldBegin("field", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:field: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Field)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Field {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:field: ", p), err) }
  }
  return err
}

func (p *DependentAdaptedList) String() string {
  if p == nil {
    return "<nil>"
  }

  fieldVal := fmt.Sprintf("%v", p.Field)
  return fmt.Sprintf("DependentAdaptedList({Field:%s})", fieldVal)
}

// Attributes:
//  - Field
type DependentAdaptedListDep struct {
  Field *int16 `thrift:"field,1,optional" db:"field" json:"field,omitempty"`
}

func NewDependentAdaptedListDep() *DependentAdaptedListDep {
  return &DependentAdaptedListDep{}
}

var DependentAdaptedListDep_Field_DEFAULT int16
func (p *DependentAdaptedListDep) GetField() int16 {
  if !p.IsSetField() {
    return DependentAdaptedListDep_Field_DEFAULT
  }
  return *p.Field
}
func (p *DependentAdaptedListDep) IsSetField() bool {
  return p != nil && p.Field != nil
}

type DependentAdaptedListDepBuilder struct {
  obj *DependentAdaptedListDep
}

func NewDependentAdaptedListDepBuilder() *DependentAdaptedListDepBuilder{
  return &DependentAdaptedListDepBuilder{
    obj: NewDependentAdaptedListDep(),
  }
}

func (p DependentAdaptedListDepBuilder) Emit() *DependentAdaptedListDep{
  return &DependentAdaptedListDep{
    Field: p.obj.Field,
  }
}

func (d *DependentAdaptedListDepBuilder) Field(field *int16) *DependentAdaptedListDepBuilder {
  d.obj.Field = field
  return d
}

func (d *DependentAdaptedListDep) SetField(field *int16) *DependentAdaptedListDep {
  d.Field = field
  return d
}

func (p *DependentAdaptedListDep) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DependentAdaptedListDep)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Field = &v
  }
  return nil
}

func (p *DependentAdaptedListDep) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DependentAdaptedListDep"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DependentAdaptedListDep) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetField() {
    if err := oprot.WriteFieldBegin("field", thrift.I16, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:field: ", p), err) }
    if err := oprot.WriteI16(int16(*p.Field)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.field (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:field: ", p), err) }
  }
  return err
}

func (p *DependentAdaptedListDep) String() string {
  if p == nil {
    return "<nil>"
  }

  var fieldVal string
  if p.Field == nil {
    fieldVal = "<nil>"
  } else {
    fieldVal = fmt.Sprintf("%v", *p.Field)
  }
  return fmt.Sprintf("DependentAdaptedListDep({Field:%s})", fieldVal)
}

// Attributes:
//  - AaList
//  - AaSet
//  - AaMap
//  - AaString
//  - NotAContainer
//  - AaUnique
//  - AaShared
type AllocatorAware struct {
  AaList []int32 `thrift:"aa_list,1" db:"aa_list" json:"aa_list"`
  AaSet []int32 `thrift:"aa_set,2" db:"aa_set" json:"aa_set"`
  AaMap map[int32]int32 `thrift:"aa_map,3" db:"aa_map" json:"aa_map"`
  AaString string `thrift:"aa_string,4" db:"aa_string" json:"aa_string"`
  NotAContainer int32 `thrift:"not_a_container,5" db:"not_a_container" json:"not_a_container"`
  AaUnique int32 `thrift:"aa_unique,6" db:"aa_unique" json:"aa_unique"`
  AaShared int32 `thrift:"aa_shared,7" db:"aa_shared" json:"aa_shared"`
}

func NewAllocatorAware() *AllocatorAware {
  return &AllocatorAware{}
}


func (p *AllocatorAware) GetAaList() []int32 {
  return p.AaList
}

func (p *AllocatorAware) GetAaSet() []int32 {
  return p.AaSet
}

func (p *AllocatorAware) GetAaMap() map[int32]int32 {
  return p.AaMap
}

func (p *AllocatorAware) GetAaString() string {
  return p.AaString
}

func (p *AllocatorAware) GetNotAContainer() int32 {
  return p.NotAContainer
}

func (p *AllocatorAware) GetAaUnique() int32 {
  return p.AaUnique
}

func (p *AllocatorAware) GetAaShared() int32 {
  return p.AaShared
}
type AllocatorAwareBuilder struct {
  obj *AllocatorAware
}

func NewAllocatorAwareBuilder() *AllocatorAwareBuilder{
  return &AllocatorAwareBuilder{
    obj: NewAllocatorAware(),
  }
}

func (p AllocatorAwareBuilder) Emit() *AllocatorAware{
  return &AllocatorAware{
    AaList: p.obj.AaList,
    AaSet: p.obj.AaSet,
    AaMap: p.obj.AaMap,
    AaString: p.obj.AaString,
    NotAContainer: p.obj.NotAContainer,
    AaUnique: p.obj.AaUnique,
    AaShared: p.obj.AaShared,
  }
}

func (a *AllocatorAwareBuilder) AaList(aaList []int32) *AllocatorAwareBuilder {
  a.obj.AaList = aaList
  return a
}

func (a *AllocatorAwareBuilder) AaSet(aaSet []int32) *AllocatorAwareBuilder {
  a.obj.AaSet = aaSet
  return a
}

func (a *AllocatorAwareBuilder) AaMap(aaMap map[int32]int32) *AllocatorAwareBuilder {
  a.obj.AaMap = aaMap
  return a
}

func (a *AllocatorAwareBuilder) AaString(aaString string) *AllocatorAwareBuilder {
  a.obj.AaString = aaString
  return a
}

func (a *AllocatorAwareBuilder) NotAContainer(notAContainer int32) *AllocatorAwareBuilder {
  a.obj.NotAContainer = notAContainer
  return a
}

func (a *AllocatorAwareBuilder) AaUnique(aaUnique int32) *AllocatorAwareBuilder {
  a.obj.AaUnique = aaUnique
  return a
}

func (a *AllocatorAwareBuilder) AaShared(aaShared int32) *AllocatorAwareBuilder {
  a.obj.AaShared = aaShared
  return a
}

func (a *AllocatorAware) SetAaList(aaList []int32) *AllocatorAware {
  a.AaList = aaList
  return a
}

func (a *AllocatorAware) SetAaSet(aaSet []int32) *AllocatorAware {
  a.AaSet = aaSet
  return a
}

func (a *AllocatorAware) SetAaMap(aaMap map[int32]int32) *AllocatorAware {
  a.AaMap = aaMap
  return a
}

func (a *AllocatorAware) SetAaString(aaString string) *AllocatorAware {
  a.AaString = aaString
  return a
}

func (a *AllocatorAware) SetNotAContainer(notAContainer int32) *AllocatorAware {
  a.NotAContainer = notAContainer
  return a
}

func (a *AllocatorAware) SetAaUnique(aaUnique int32) *AllocatorAware {
  a.AaUnique = aaUnique
  return a
}

func (a *AllocatorAware) SetAaShared(aaShared int32) *AllocatorAware {
  a.AaShared = aaShared
  return a
}

func (p *AllocatorAware) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AllocatorAware)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.AaList =  tSlice
  for i := 0; i < size; i ++ {
    var _elem27 int32
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem27 = v
    }
    p.AaList = append(p.AaList, _elem27)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AllocatorAware)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]int32, 0, size)
  p.AaSet =  tSet
  for i := 0; i < size; i ++ {
    var _elem28 int32
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem28 = v
    }
    p.AaSet = append(p.AaSet, _elem28)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *AllocatorAware)  ReadField3(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int32]int32, size)
  p.AaMap =  tMap
  for i := 0; i < size; i ++ {
    var _key29 int32
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key29 = v
    }
    var _val30 int32
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val30 = v
    }
    p.AaMap[_key29] = _val30
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AllocatorAware)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.AaString = v
  }
  return nil
}

func (p *AllocatorAware)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.NotAContainer = v
  }
  return nil
}

func (p *AllocatorAware)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.AaUnique = v
  }
  return nil
}

func (p *AllocatorAware)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 7: ", err)
  } else {
    p.AaShared = v
  }
  return nil
}

func (p *AllocatorAware) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AllocatorAware"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AllocatorAware) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("aa_list", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aa_list: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.AaList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.AaList {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aa_list: ", p), err) }
  return err
}

func (p *AllocatorAware) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("aa_set", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:aa_set: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.I32, len(p.AaSet)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  set := make(map[int32]bool, len(p.AaSet))
  for _, v := range p.AaSet {
    if ok := set[v]; ok {
      return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
    }
    set[v] = true
  }
  for _, v := range p.AaSet {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:aa_set: ", p), err) }
  return err
}

func (p *AllocatorAware) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("aa_map", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:aa_map: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.I32, len(p.AaMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.AaMap {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:aa_map: ", p), err) }
  return err
}

func (p *AllocatorAware) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("aa_string", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:aa_string: ", p), err) }
  if err := oprot.WriteString(string(p.AaString)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.aa_string (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:aa_string: ", p), err) }
  return err
}

func (p *AllocatorAware) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("not_a_container", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:not_a_container: ", p), err) }
  if err := oprot.WriteI32(int32(p.NotAContainer)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.not_a_container (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:not_a_container: ", p), err) }
  return err
}

func (p *AllocatorAware) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("aa_unique", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:aa_unique: ", p), err) }
  if err := oprot.WriteI32(int32(p.AaUnique)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.aa_unique (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:aa_unique: ", p), err) }
  return err
}

func (p *AllocatorAware) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("aa_shared", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:aa_shared: ", p), err) }
  if err := oprot.WriteI32(int32(p.AaShared)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.aa_shared (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:aa_shared: ", p), err) }
  return err
}

func (p *AllocatorAware) String() string {
  if p == nil {
    return "<nil>"
  }

  aaListVal := fmt.Sprintf("%v", p.AaList)
  aaSetVal := fmt.Sprintf("%v", p.AaSet)
  aaMapVal := fmt.Sprintf("%v", p.AaMap)
  aaStringVal := fmt.Sprintf("%v", p.AaString)
  notAContainerVal := fmt.Sprintf("%v", p.NotAContainer)
  aaUniqueVal := fmt.Sprintf("%v", p.AaUnique)
  aaSharedVal := fmt.Sprintf("%v", p.AaShared)
  return fmt.Sprintf("AllocatorAware({AaList:%s AaSet:%s AaMap:%s AaString:%s NotAContainer:%s AaUnique:%s AaShared:%s})", aaListVal, aaSetVal, aaMapVal, aaStringVal, notAContainerVal, aaUniqueVal, aaSharedVal)
}

// Attributes:
//  - NotAContainer
//  - BoxField
type AllocatorAware2 struct {
  NotAContainer int32 `thrift:"not_a_container,1" db:"not_a_container" json:"not_a_container"`
  BoxField *int32 `thrift:"box_field,2,optional" db:"box_field" json:"box_field,omitempty"`
}

func NewAllocatorAware2() *AllocatorAware2 {
  return &AllocatorAware2{}
}


func (p *AllocatorAware2) GetNotAContainer() int32 {
  return p.NotAContainer
}
var AllocatorAware2_BoxField_DEFAULT int32
func (p *AllocatorAware2) GetBoxField() int32 {
  if !p.IsSetBoxField() {
    return AllocatorAware2_BoxField_DEFAULT
  }
  return *p.BoxField
}
func (p *AllocatorAware2) IsSetBoxField() bool {
  return p != nil && p.BoxField != nil
}

type AllocatorAware2Builder struct {
  obj *AllocatorAware2
}

func NewAllocatorAware2Builder() *AllocatorAware2Builder{
  return &AllocatorAware2Builder{
    obj: NewAllocatorAware2(),
  }
}

func (p AllocatorAware2Builder) Emit() *AllocatorAware2{
  return &AllocatorAware2{
    NotAContainer: p.obj.NotAContainer,
    BoxField: p.obj.BoxField,
  }
}

func (a *AllocatorAware2Builder) NotAContainer(notAContainer int32) *AllocatorAware2Builder {
  a.obj.NotAContainer = notAContainer
  return a
}

func (a *AllocatorAware2Builder) BoxField(boxField *int32) *AllocatorAware2Builder {
  a.obj.BoxField = boxField
  return a
}

func (a *AllocatorAware2) SetNotAContainer(notAContainer int32) *AllocatorAware2 {
  a.NotAContainer = notAContainer
  return a
}

func (a *AllocatorAware2) SetBoxField(boxField *int32) *AllocatorAware2 {
  a.BoxField = boxField
  return a
}

func (p *AllocatorAware2) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AllocatorAware2)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.NotAContainer = v
  }
  return nil
}

func (p *AllocatorAware2)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.BoxField = &v
  }
  return nil
}

func (p *AllocatorAware2) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AllocatorAware2"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AllocatorAware2) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("not_a_container", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:not_a_container: ", p), err) }
  if err := oprot.WriteI32(int32(p.NotAContainer)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.not_a_container (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:not_a_container: ", p), err) }
  return err
}

func (p *AllocatorAware2) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetBoxField() {
    if err := oprot.WriteFieldBegin("box_field", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:box_field: ", p), err) }
    if err := oprot.WriteI32(int32(*p.BoxField)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.box_field (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:box_field: ", p), err) }
  }
  return err
}

func (p *AllocatorAware2) String() string {
  if p == nil {
    return "<nil>"
  }

  notAContainerVal := fmt.Sprintf("%v", p.NotAContainer)
  var boxFieldVal string
  if p.BoxField == nil {
    boxFieldVal = "<nil>"
  } else {
    boxFieldVal = fmt.Sprintf("%v", *p.BoxField)
  }
  return fmt.Sprintf("AllocatorAware2({NotAContainer:%s BoxField:%s})", notAContainerVal, boxFieldVal)
}

// Attributes:
//  - I32Field
//  - IntTypedefField
//  - UintTypedefField
type TypedefStruct struct {
  I32Field int32 `thrift:"i32_field,1" db:"i32_field" json:"i32_field"`
  IntTypedefField IntTypedef `thrift:"IntTypedef_field,2" db:"IntTypedef_field" json:"IntTypedef_field"`
  UintTypedefField UintTypedef `thrift:"UintTypedef_field,3" db:"UintTypedef_field" json:"UintTypedef_field"`
}

func NewTypedefStruct() *TypedefStruct {
  return &TypedefStruct{}
}


func (p *TypedefStruct) GetI32Field() int32 {
  return p.I32Field
}

func (p *TypedefStruct) GetIntTypedefField() IntTypedef {
  return p.IntTypedefField
}

func (p *TypedefStruct) GetUintTypedefField() UintTypedef {
  return p.UintTypedefField
}
type TypedefStructBuilder struct {
  obj *TypedefStruct
}

func NewTypedefStructBuilder() *TypedefStructBuilder{
  return &TypedefStructBuilder{
    obj: NewTypedefStruct(),
  }
}

func (p TypedefStructBuilder) Emit() *TypedefStruct{
  return &TypedefStruct{
    I32Field: p.obj.I32Field,
    IntTypedefField: p.obj.IntTypedefField,
    UintTypedefField: p.obj.UintTypedefField,
  }
}

func (t *TypedefStructBuilder) I32Field(i32Field int32) *TypedefStructBuilder {
  t.obj.I32Field = i32Field
  return t
}

func (t *TypedefStructBuilder) IntTypedefField(intTypedefField IntTypedef) *TypedefStructBuilder {
  t.obj.IntTypedefField = intTypedefField
  return t
}

func (t *TypedefStructBuilder) UintTypedefField(uintTypedefField UintTypedef) *TypedefStructBuilder {
  t.obj.UintTypedefField = uintTypedefField
  return t
}

func (t *TypedefStruct) SetI32Field(i32Field int32) *TypedefStruct {
  t.I32Field = i32Field
  return t
}

func (t *TypedefStruct) SetIntTypedefField(intTypedefField IntTypedef) *TypedefStruct {
  t.IntTypedefField = intTypedefField
  return t
}

func (t *TypedefStruct) SetUintTypedefField(uintTypedefField UintTypedef) *TypedefStruct {
  t.UintTypedefField = uintTypedefField
  return t
}

func (p *TypedefStruct) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TypedefStruct)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.I32Field = v
  }
  return nil
}

func (p *TypedefStruct)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := IntTypedef(v)
    p.IntTypedefField = temp
  }
  return nil
}

func (p *TypedefStruct)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := UintTypedef(v)
    p.UintTypedefField = temp
  }
  return nil
}

func (p *TypedefStruct) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("TypedefStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TypedefStruct) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("i32_field", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:i32_field: ", p), err) }
  if err := oprot.WriteI32(int32(p.I32Field)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.i32_field (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:i32_field: ", p), err) }
  return err
}

func (p *TypedefStruct) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("IntTypedef_field", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:IntTypedef_field: ", p), err) }
  if err := oprot.WriteI32(int32(p.IntTypedefField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.IntTypedef_field (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:IntTypedef_field: ", p), err) }
  return err
}

func (p *TypedefStruct) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("UintTypedef_field", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:UintTypedef_field: ", p), err) }
  if err := oprot.WriteI32(int32(p.UintTypedefField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.UintTypedef_field (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:UintTypedef_field: ", p), err) }
  return err
}

func (p *TypedefStruct) String() string {
  if p == nil {
    return "<nil>"
  }

  i32FieldVal := fmt.Sprintf("%v", p.I32Field)
  intTypedefFieldVal := fmt.Sprintf("%v", p.IntTypedefField)
  uintTypedefFieldVal := fmt.Sprintf("%v", p.UintTypedefField)
  return fmt.Sprintf("TypedefStruct({I32Field:%s IntTypedefField:%s UintTypedefField:%s})", i32FieldVal, intTypedefFieldVal, uintTypedefFieldVal)
}

// Attributes:
//  - XField
type StructWithDoubleUnderscores struct {
  XField int32 `thrift:"__field,1" db:"__field" json:"__field"`
}

func NewStructWithDoubleUnderscores() *StructWithDoubleUnderscores {
  return &StructWithDoubleUnderscores{}
}


func (p *StructWithDoubleUnderscores) GetXField() int32 {
  return p.XField
}
type StructWithDoubleUnderscoresBuilder struct {
  obj *StructWithDoubleUnderscores
}

func NewStructWithDoubleUnderscoresBuilder() *StructWithDoubleUnderscoresBuilder{
  return &StructWithDoubleUnderscoresBuilder{
    obj: NewStructWithDoubleUnderscores(),
  }
}

func (p StructWithDoubleUnderscoresBuilder) Emit() *StructWithDoubleUnderscores{
  return &StructWithDoubleUnderscores{
    XField: p.obj.XField,
  }
}

func (s *StructWithDoubleUnderscoresBuilder) XField(xField int32) *StructWithDoubleUnderscoresBuilder {
  s.obj.XField = xField
  return s
}

func (s *StructWithDoubleUnderscores) SetXField(xField int32) *StructWithDoubleUnderscores {
  s.XField = xField
  return s
}

func (p *StructWithDoubleUnderscores) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StructWithDoubleUnderscores)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.XField = v
  }
  return nil
}

func (p *StructWithDoubleUnderscores) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("StructWithDoubleUnderscores"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StructWithDoubleUnderscores) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("__field", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:__field: ", p), err) }
  if err := oprot.WriteI32(int32(p.XField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.__field (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:__field: ", p), err) }
  return err
}

func (p *StructWithDoubleUnderscores) String() string {
  if p == nil {
    return "<nil>"
  }

  xFieldVal := fmt.Sprintf("%v", p.XField)
  return fmt.Sprintf("StructWithDoubleUnderscores({XField:%s})", xFieldVal)
}

