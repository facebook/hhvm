Parsed decls:

{ Direct_decl_parser.classes =
  { "\\A" ->
    { Shallow_decl_defs.sc_mode = Mpartial; sc_final = false;
      sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cnormal;
      sc_name = ([11:7-8], "\\A"); sc_tparams = [];
      sc_where_constraints = []; sc_extends = []; sc_uses = [];
      sc_xhp_attr_uses = []; sc_req_extends = []; sc_req_implements = [];
      sc_implements = []; sc_consts = []; sc_typeconsts = [];
      sc_pu_enums = []; sc_props = []; sc_sprops = []; sc_constructor = None;
      sc_static_methods = []; sc_methods = []; sc_user_attributes = [];
      sc_enum_type = None; sc_decl_errors = <opaque> };
    "\\C1" ->
    { Shallow_decl_defs.sc_mode = Mpartial; sc_final = false;
      sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cnormal;
      sc_name = ([4:7-9], "\\C1"); sc_tparams = [];
      sc_where_constraints = []; sc_extends = []; sc_uses = [];
      sc_xhp_attr_uses = []; sc_req_extends = []; sc_req_implements = [];
      sc_implements = []; sc_consts = []; sc_typeconsts = [];
      sc_pu_enums = []; sc_props = []; sc_sprops = []; sc_constructor = None;
      sc_static_methods = []; sc_methods = [];
      sc_user_attributes =
      [{ Typing_defs_core.ua_name = ([3:3-24], "__ConsistentConstruct");
         ua_classname_params = [] }
        ];
      sc_enum_type = None; sc_decl_errors = <opaque> };
    "\\C2" ->
    { Shallow_decl_defs.sc_mode = Mpartial; sc_final = false;
      sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cnormal;
      sc_name = ([6:7-9], "\\C2"); sc_tparams = [];
      sc_where_constraints = [];
      sc_extends =
      [(Rhint (root|classes_consistent_construct.php line 6, characters 18-19),
        (Tapply (([6:18-20], "\\C1"), [])))];
      sc_uses = []; sc_xhp_attr_uses = []; sc_req_extends = [];
      sc_req_implements = []; sc_implements = []; sc_consts = [];
      sc_typeconsts = []; sc_pu_enums = []; sc_props = []; sc_sprops = [];
      sc_constructor =
      (Some { Shallow_decl_defs.sm_abstract = false; sm_final = false;
              sm_memoizelsb = false; sm_name = ([8:19-30], "__construct");
              sm_override = false; sm_dynamicallycallable = false;
              sm_reactivity = None;
              sm_type =
              (Rwitness (root|classes_consistent_construct.php line 8, characters 19-29),
               (Tfun
                  { ft_arity = (Fstandard ()); ft_tparams = [];
                    ft_where_constraints = [];
                    ft_params =
                    [{ fp_pos = [8:33-35]; fp_name = (Some "$a");
                       fp_type =
                       { et_enforced = false;
                         et_type =
                         (Rhint (root|classes_consistent_construct.php line 8, characters 31-31),
                          (Tapply (([8:31-32], "\\A"), [])))
                         };
                       fp_flags =
                       (make_fp_flags ~mutability:none
                         ~accept_disposable:false ~has_default:false
                         ~mode:FPnormal);
                        }
                      ];
                    ft_implicit_params =
                    { capability =
                      (Rhint (root|classes_consistent_construct.php line 8, characters 19-29),
                       (Tunion []))
                      };
                    ft_ret =
                    { et_enforced = false;
                      et_type =
                      (Rwitness (root|classes_consistent_construct.php line 8, characters 19-29),
                       (Tprim Tvoid))
                      };
                    ft_flags =
                    (make_ft_flags sync none ~return_disposable:false
                      ~returns_mutable:false ~returns_void_to_rx:false);
                    ft_reactive = Nonreactive }));
              sm_visibility = Public; sm_deprecated = None });
      sc_static_methods = []; sc_methods = []; sc_user_attributes = [];
      sc_enum_type = None; sc_decl_errors = <opaque> } };
  funs = {}; typedefs = {}; consts = {} }

They matched!
