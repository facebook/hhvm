#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#

from __future__ import annotations
import builtins


from abc import ABCMeta
import typing as _typing

import folly.iobuf as _fbthrift_iobuf

import apache.thrift.metadata.thrift_types as _fbthrift_metadata
import thrift.python.mutable_containers as _fbthrift_python_mutable_containers
from thrift.python.mutable_serializer import serialize_iobuf, deserialize, Protocol
from thrift.python.server import ServiceInterface, RpcKind, PythonUserException

import module.thrift_mutable_types as _fbthrift__module__thrift_mutable_types
import module.thrift_metadata as _fbthrift__module__thrift_metadata

class BiDiServiceInterface(
    ServiceInterface,
    metaclass=ABCMeta
):

    @staticmethod
    def service_name() -> bytes:
        return b"BiDiService"

    def getFunctionTable(self) -> _typing.Mapping[bytes, _typing.Callable[..., object]]:
        functionTable = {
            b"simple": (RpcKind.BIDIRECTIONAL_STREAM, self._fbthrift__handler_simple),
            b"response": (RpcKind.BIDIRECTIONAL_STREAM, self._fbthrift__handler_response),
            b"canThrow": (RpcKind.BIDIRECTIONAL_STREAM, self._fbthrift__handler_canThrow),
        }
        return {**super().getFunctionTable(), **functionTable}

    @staticmethod
    def __get_thrift_name__() -> str:
        return "module.BiDiService"

    @staticmethod
    def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
        return _fbthrift__module__thrift_metadata.gen_metadata_service_BiDiService()

    @staticmethod
    def __get_metadata_service_response__() -> _fbthrift_metadata.ThriftServiceMetadataResponse:
        return _fbthrift__module__thrift_metadata._fbthrift_metadata_service_response_BiDiService()



    
    async def simple(
            self
        ) -> _typing.Callable[[_typing.AsyncGenerator[builtins.int, None]], _typing.AsyncGenerator[builtins.int, None]]:
            raise NotImplementedError("async def simple is not implemented")

    def _fbthrift__bidi_wrapper_simple(
        self,
        handler_bidi_callback: _typing.Callable[[_typing.AsyncGenerator[builtins.int, None]], _typing.AsyncGenerator[builtins.int, None]],
        protocol: Protocol
    ) -> _typing.Callable[[_typing.AsyncGenerator[_fbthrift_iobuf.IOBuf, None]], _typing.AsyncGenerator[_fbthrift_iobuf.IOBuf, None]]:
        async def _fbthrift_iobuf_bidi_callback(
            _iobuf_agen: _typing.AsyncGenerator[_fbthrift_iobuf.IOBuf, None],
        ) -> _typing.AsyncGenerator[_fbthrift_iobuf.IOBuf, None]:
            async def _handle_sink() -> _typing.AsyncGenerator[builtins.int, None]:
                async for iobuf_item in _iobuf_agen:
                    sink_elem = deserialize(
                        _fbthrift__module__thrift_mutable_types._fbthrift_BiDiService_simple_result_sink_elem,
                        iobuf_item,
                        protocol
                    )
                    assert sink_elem.success is not None, "unexpected empty sink element"
                    yield sink_elem.success

            async def _handle_stream(stream_generator: _typing.AsyncIterator[builtins.int]) -> _typing.AsyncGenerator[_fbthrift_iobuf.IOBuf, None]:
                async for item in stream_generator:
                    yield serialize_iobuf(_fbthrift__module__thrift_mutable_types._fbthrift_BiDiService_simple_result_stream_elem(success=item), protocol)
            return _handle_stream(handler_bidi_callback(_handle_sink()))

        return _fbthrift_iobuf_bidi_callback
    async def _fbthrift__handler_simple(self, args: _fbthrift_iobuf.IOBuf, protocol: Protocol) -> _typing.Tuple[_fbthrift_iobuf.IOBuf, _typing.Callable[[_typing.AsyncGenerator[_fbthrift_iobuf.IOBuf, None]], _typing.AsyncGenerator[_fbthrift_iobuf.IOBuf, None]]]:
        args_struct = deserialize(_fbthrift__module__thrift_mutable_types._fbthrift_BiDiService_simple_args, args, protocol)
        value = await self.simple()
        bidi_callback = value
        return_struct = _fbthrift__module__thrift_mutable_types._fbthrift_BiDiService_simple_result()
        return_bidi_callback = self._fbthrift__bidi_wrapper_simple(bidi_callback, protocol)
        return (serialize_iobuf(return_struct, protocol), return_bidi_callback)


    
    async def response(
            self
        ) -> _typing.Tuple[builtins.str, _typing.Callable[[_typing.AsyncGenerator[builtins.int, None]], _typing.AsyncGenerator[builtins.int, None]]]:
            raise NotImplementedError("async def response is not implemented")

    def _fbthrift__bidi_wrapper_response(
        self,
        handler_bidi_callback: _typing.Callable[[_typing.AsyncGenerator[builtins.int, None]], _typing.AsyncGenerator[builtins.int, None]],
        protocol: Protocol
    ) -> _typing.Callable[[_typing.AsyncGenerator[_fbthrift_iobuf.IOBuf, None]], _typing.AsyncGenerator[_fbthrift_iobuf.IOBuf, None]]:
        async def _fbthrift_iobuf_bidi_callback(
            _iobuf_agen: _typing.AsyncGenerator[_fbthrift_iobuf.IOBuf, None],
        ) -> _typing.AsyncGenerator[_fbthrift_iobuf.IOBuf, None]:
            async def _handle_sink() -> _typing.AsyncGenerator[builtins.int, None]:
                async for iobuf_item in _iobuf_agen:
                    sink_elem = deserialize(
                        _fbthrift__module__thrift_mutable_types._fbthrift_BiDiService_response_result_sink_elem,
                        iobuf_item,
                        protocol
                    )
                    assert sink_elem.success is not None, "unexpected empty sink element"
                    yield sink_elem.success

            async def _handle_stream(stream_generator: _typing.AsyncIterator[builtins.int]) -> _typing.AsyncGenerator[_fbthrift_iobuf.IOBuf, None]:
                async for item in stream_generator:
                    yield serialize_iobuf(_fbthrift__module__thrift_mutable_types._fbthrift_BiDiService_response_result_stream_elem(success=item), protocol)
            return _handle_stream(handler_bidi_callback(_handle_sink()))

        return _fbthrift_iobuf_bidi_callback
    async def _fbthrift__handler_response(self, args: _fbthrift_iobuf.IOBuf, protocol: Protocol) -> _typing.Tuple[_fbthrift_iobuf.IOBuf, _typing.Callable[[_typing.AsyncGenerator[_fbthrift_iobuf.IOBuf, None]], _typing.AsyncGenerator[_fbthrift_iobuf.IOBuf, None]]]:
        args_struct = deserialize(_fbthrift__module__thrift_mutable_types._fbthrift_BiDiService_response_args, args, protocol)
        value = await self.response()
        value, bidi_callback = value
        return_struct = _fbthrift__module__thrift_mutable_types._fbthrift_BiDiService_response_result(success=value)
        return_bidi_callback = self._fbthrift__bidi_wrapper_response(bidi_callback, protocol)
        return (serialize_iobuf(return_struct, protocol), return_bidi_callback)


    
    async def canThrow(
            self
        ) -> _typing.Callable[[_typing.AsyncGenerator[builtins.int, None]], _typing.AsyncGenerator[builtins.int, None]]:
            raise NotImplementedError("async def canThrow is not implemented")

    def _fbthrift__bidi_wrapper_canThrow(
        self,
        handler_bidi_callback: _typing.Callable[[_typing.AsyncGenerator[builtins.int, None]], _typing.AsyncGenerator[builtins.int, None]],
        protocol: Protocol
    ) -> _typing.Callable[[_typing.AsyncGenerator[_fbthrift_iobuf.IOBuf, None]], _typing.AsyncGenerator[_fbthrift_iobuf.IOBuf, None]]:
        async def _fbthrift_iobuf_bidi_callback(
            _iobuf_agen: _typing.AsyncGenerator[_fbthrift_iobuf.IOBuf, None],
        ) -> _typing.AsyncGenerator[_fbthrift_iobuf.IOBuf, None]:
            async def _handle_sink() -> _typing.AsyncGenerator[builtins.int, None]:
                async for iobuf_item in _iobuf_agen:
                    sink_elem = deserialize(
                        _fbthrift__module__thrift_mutable_types._fbthrift_BiDiService_canThrow_result_sink_elem,
                        iobuf_item,
                        protocol
                    )
                    if sink_elem.success is not None:
                        yield sink_elem.success
                        continue
                    for _ex_fld_name, ex in sink_elem:
                        if ex is not None:
                            raise ex
                    assert sink_elem.success is not None, "unexpected empty sink element"

            async def _handle_stream(stream_generator: _typing.AsyncIterator[builtins.int]) -> _typing.AsyncGenerator[_fbthrift_iobuf.IOBuf, None]:
                try:
                    async for item in stream_generator:
                        yield serialize_iobuf(_fbthrift__module__thrift_mutable_types._fbthrift_BiDiService_canThrow_result_stream_elem(success=item), protocol)
                except _fbthrift__module__thrift_mutable_types.BiDiStreamException as e:
                    return_struct = _fbthrift__module__thrift_mutable_types._fbthrift_BiDiService_canThrow_result_stream_elem(_ex0__ex=e)
                    buf = serialize_iobuf(return_struct, protocol)
                    exp = PythonUserException('BiDiStreamException', str(e), buf)
                    raise exp
            return _handle_stream(handler_bidi_callback(_handle_sink()))

        return _fbthrift_iobuf_bidi_callback
    async def _fbthrift__handler_canThrow(self, args: _fbthrift_iobuf.IOBuf, protocol: Protocol) -> _typing.Tuple[_fbthrift_iobuf.IOBuf, _typing.Callable[[_typing.AsyncGenerator[_fbthrift_iobuf.IOBuf, None]], _typing.AsyncGenerator[_fbthrift_iobuf.IOBuf, None]]]:
        args_struct = deserialize(_fbthrift__module__thrift_mutable_types._fbthrift_BiDiService_canThrow_args, args, protocol)
        try:
            value = await self.canThrow()
            bidi_callback = value
            return_struct = _fbthrift__module__thrift_mutable_types._fbthrift_BiDiService_canThrow_result()
            return_bidi_callback = self._fbthrift__bidi_wrapper_canThrow(bidi_callback, protocol)
        except _fbthrift__module__thrift_mutable_types.BiDiMethodException as e:
            return_struct = _fbthrift__module__thrift_mutable_types._fbthrift_BiDiService_canThrow_result(_ex0__ex=e)
            buf = serialize_iobuf(return_struct, protocol)
            exp = PythonUserException('BiDiMethodException', str(e), buf)
            raise exp
        return (serialize_iobuf(return_struct, protocol), return_bidi_callback)

