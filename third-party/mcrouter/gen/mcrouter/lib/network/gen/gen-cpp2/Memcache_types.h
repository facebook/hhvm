/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>


#include "mcrouter/lib/carbon/gen-cpp2/carbon_types.h"
#include "mcrouter/lib/carbon/gen-cpp2/carbon_result_types.h"
#include "mcrouter/lib/network/gen/gen-cpp2/Common_types.h"

namespace apache {
namespace thrift {
namespace tag {
struct key;
struct flags;
struct result;
struct value;
struct flags;
struct message;
struct appSpecificErrorCode;
struct key;
struct exptime;
struct flags;
struct value;
struct result;
struct flags;
struct value;
struct message;
struct appSpecificErrorCode;
struct key;
struct flags;
struct exptime;
struct value;
struct attributes;
struct result;
struct flags;
struct value;
struct message;
struct appSpecificErrorCode;
struct key;
struct flags;
struct result;
struct leaseToken;
struct value;
struct flags;
struct message;
struct appSpecificErrorCode;
struct key;
struct exptime;
struct flags;
struct value;
struct leaseToken;
struct result;
struct message;
struct appSpecificErrorCode;
struct key;
struct exptime;
struct flags;
struct value;
struct result;
struct message;
struct appSpecificErrorCode;
struct key;
struct exptime;
struct flags;
struct value;
struct result;
struct message;
struct appSpecificErrorCode;
struct key;
struct flags;
struct result;
struct casToken;
struct value;
struct flags;
struct message;
struct appSpecificErrorCode;
struct key;
struct exptime;
struct flags;
struct value;
struct casToken;
struct result;
struct message;
struct appSpecificErrorCode;
struct key;
struct delta;
struct result;
struct delta;
struct message;
struct appSpecificErrorCode;
struct key;
struct delta;
struct result;
struct delta;
struct message;
struct appSpecificErrorCode;
struct key;
struct result;
struct age;
struct exptime;
struct ipv;
struct ipAddress;
struct message;
struct appSpecificErrorCode;
struct key;
struct exptime;
struct flags;
struct value;
struct result;
struct message;
struct appSpecificErrorCode;
struct key;
struct exptime;
struct flags;
struct value;
struct result;
struct message;
struct appSpecificErrorCode;
struct key;
struct exptime;
struct result;
struct message;
struct appSpecificErrorCode;
struct key;
struct result;
struct message;
struct appSpecificErrorCode;
struct key;
struct delay;
struct result;
struct message;
struct appSpecificErrorCode;
struct exptime;
struct key;
struct result;
struct value;
struct flags;
struct message;
struct appSpecificErrorCode;
struct exptime;
struct key;
struct result;
struct casToken;
struct value;
struct flags;
struct message;
struct appSpecificErrorCode;
} // namespace tag
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_key
#define APACHE_THRIFT_ACCESSOR_key
APACHE_THRIFT_DEFINE_ACCESSOR(key);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_flags
#define APACHE_THRIFT_ACCESSOR_flags
APACHE_THRIFT_DEFINE_ACCESSOR(flags);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_result
#define APACHE_THRIFT_ACCESSOR_result
APACHE_THRIFT_DEFINE_ACCESSOR(result);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_value
#define APACHE_THRIFT_ACCESSOR_value
APACHE_THRIFT_DEFINE_ACCESSOR(value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_flags
#define APACHE_THRIFT_ACCESSOR_flags
APACHE_THRIFT_DEFINE_ACCESSOR(flags);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
#define APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
APACHE_THRIFT_DEFINE_ACCESSOR(appSpecificErrorCode);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_key
#define APACHE_THRIFT_ACCESSOR_key
APACHE_THRIFT_DEFINE_ACCESSOR(key);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_exptime
#define APACHE_THRIFT_ACCESSOR_exptime
APACHE_THRIFT_DEFINE_ACCESSOR(exptime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_flags
#define APACHE_THRIFT_ACCESSOR_flags
APACHE_THRIFT_DEFINE_ACCESSOR(flags);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_value
#define APACHE_THRIFT_ACCESSOR_value
APACHE_THRIFT_DEFINE_ACCESSOR(value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_result
#define APACHE_THRIFT_ACCESSOR_result
APACHE_THRIFT_DEFINE_ACCESSOR(result);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_flags
#define APACHE_THRIFT_ACCESSOR_flags
APACHE_THRIFT_DEFINE_ACCESSOR(flags);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_value
#define APACHE_THRIFT_ACCESSOR_value
APACHE_THRIFT_DEFINE_ACCESSOR(value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
#define APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
APACHE_THRIFT_DEFINE_ACCESSOR(appSpecificErrorCode);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_key
#define APACHE_THRIFT_ACCESSOR_key
APACHE_THRIFT_DEFINE_ACCESSOR(key);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_flags
#define APACHE_THRIFT_ACCESSOR_flags
APACHE_THRIFT_DEFINE_ACCESSOR(flags);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_exptime
#define APACHE_THRIFT_ACCESSOR_exptime
APACHE_THRIFT_DEFINE_ACCESSOR(exptime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_value
#define APACHE_THRIFT_ACCESSOR_value
APACHE_THRIFT_DEFINE_ACCESSOR(value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_attributes
#define APACHE_THRIFT_ACCESSOR_attributes
APACHE_THRIFT_DEFINE_ACCESSOR(attributes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_result
#define APACHE_THRIFT_ACCESSOR_result
APACHE_THRIFT_DEFINE_ACCESSOR(result);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_flags
#define APACHE_THRIFT_ACCESSOR_flags
APACHE_THRIFT_DEFINE_ACCESSOR(flags);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_value
#define APACHE_THRIFT_ACCESSOR_value
APACHE_THRIFT_DEFINE_ACCESSOR(value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
#define APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
APACHE_THRIFT_DEFINE_ACCESSOR(appSpecificErrorCode);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_key
#define APACHE_THRIFT_ACCESSOR_key
APACHE_THRIFT_DEFINE_ACCESSOR(key);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_flags
#define APACHE_THRIFT_ACCESSOR_flags
APACHE_THRIFT_DEFINE_ACCESSOR(flags);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_result
#define APACHE_THRIFT_ACCESSOR_result
APACHE_THRIFT_DEFINE_ACCESSOR(result);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_leaseToken
#define APACHE_THRIFT_ACCESSOR_leaseToken
APACHE_THRIFT_DEFINE_ACCESSOR(leaseToken);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_value
#define APACHE_THRIFT_ACCESSOR_value
APACHE_THRIFT_DEFINE_ACCESSOR(value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_flags
#define APACHE_THRIFT_ACCESSOR_flags
APACHE_THRIFT_DEFINE_ACCESSOR(flags);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
#define APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
APACHE_THRIFT_DEFINE_ACCESSOR(appSpecificErrorCode);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_key
#define APACHE_THRIFT_ACCESSOR_key
APACHE_THRIFT_DEFINE_ACCESSOR(key);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_exptime
#define APACHE_THRIFT_ACCESSOR_exptime
APACHE_THRIFT_DEFINE_ACCESSOR(exptime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_flags
#define APACHE_THRIFT_ACCESSOR_flags
APACHE_THRIFT_DEFINE_ACCESSOR(flags);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_value
#define APACHE_THRIFT_ACCESSOR_value
APACHE_THRIFT_DEFINE_ACCESSOR(value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_leaseToken
#define APACHE_THRIFT_ACCESSOR_leaseToken
APACHE_THRIFT_DEFINE_ACCESSOR(leaseToken);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_result
#define APACHE_THRIFT_ACCESSOR_result
APACHE_THRIFT_DEFINE_ACCESSOR(result);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
#define APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
APACHE_THRIFT_DEFINE_ACCESSOR(appSpecificErrorCode);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_key
#define APACHE_THRIFT_ACCESSOR_key
APACHE_THRIFT_DEFINE_ACCESSOR(key);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_exptime
#define APACHE_THRIFT_ACCESSOR_exptime
APACHE_THRIFT_DEFINE_ACCESSOR(exptime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_flags
#define APACHE_THRIFT_ACCESSOR_flags
APACHE_THRIFT_DEFINE_ACCESSOR(flags);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_value
#define APACHE_THRIFT_ACCESSOR_value
APACHE_THRIFT_DEFINE_ACCESSOR(value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_result
#define APACHE_THRIFT_ACCESSOR_result
APACHE_THRIFT_DEFINE_ACCESSOR(result);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
#define APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
APACHE_THRIFT_DEFINE_ACCESSOR(appSpecificErrorCode);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_key
#define APACHE_THRIFT_ACCESSOR_key
APACHE_THRIFT_DEFINE_ACCESSOR(key);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_exptime
#define APACHE_THRIFT_ACCESSOR_exptime
APACHE_THRIFT_DEFINE_ACCESSOR(exptime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_flags
#define APACHE_THRIFT_ACCESSOR_flags
APACHE_THRIFT_DEFINE_ACCESSOR(flags);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_value
#define APACHE_THRIFT_ACCESSOR_value
APACHE_THRIFT_DEFINE_ACCESSOR(value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_result
#define APACHE_THRIFT_ACCESSOR_result
APACHE_THRIFT_DEFINE_ACCESSOR(result);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
#define APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
APACHE_THRIFT_DEFINE_ACCESSOR(appSpecificErrorCode);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_key
#define APACHE_THRIFT_ACCESSOR_key
APACHE_THRIFT_DEFINE_ACCESSOR(key);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_flags
#define APACHE_THRIFT_ACCESSOR_flags
APACHE_THRIFT_DEFINE_ACCESSOR(flags);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_result
#define APACHE_THRIFT_ACCESSOR_result
APACHE_THRIFT_DEFINE_ACCESSOR(result);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_casToken
#define APACHE_THRIFT_ACCESSOR_casToken
APACHE_THRIFT_DEFINE_ACCESSOR(casToken);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_value
#define APACHE_THRIFT_ACCESSOR_value
APACHE_THRIFT_DEFINE_ACCESSOR(value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_flags
#define APACHE_THRIFT_ACCESSOR_flags
APACHE_THRIFT_DEFINE_ACCESSOR(flags);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
#define APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
APACHE_THRIFT_DEFINE_ACCESSOR(appSpecificErrorCode);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_key
#define APACHE_THRIFT_ACCESSOR_key
APACHE_THRIFT_DEFINE_ACCESSOR(key);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_exptime
#define APACHE_THRIFT_ACCESSOR_exptime
APACHE_THRIFT_DEFINE_ACCESSOR(exptime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_flags
#define APACHE_THRIFT_ACCESSOR_flags
APACHE_THRIFT_DEFINE_ACCESSOR(flags);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_value
#define APACHE_THRIFT_ACCESSOR_value
APACHE_THRIFT_DEFINE_ACCESSOR(value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_casToken
#define APACHE_THRIFT_ACCESSOR_casToken
APACHE_THRIFT_DEFINE_ACCESSOR(casToken);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_result
#define APACHE_THRIFT_ACCESSOR_result
APACHE_THRIFT_DEFINE_ACCESSOR(result);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
#define APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
APACHE_THRIFT_DEFINE_ACCESSOR(appSpecificErrorCode);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_key
#define APACHE_THRIFT_ACCESSOR_key
APACHE_THRIFT_DEFINE_ACCESSOR(key);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_delta
#define APACHE_THRIFT_ACCESSOR_delta
APACHE_THRIFT_DEFINE_ACCESSOR(delta);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_result
#define APACHE_THRIFT_ACCESSOR_result
APACHE_THRIFT_DEFINE_ACCESSOR(result);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_delta
#define APACHE_THRIFT_ACCESSOR_delta
APACHE_THRIFT_DEFINE_ACCESSOR(delta);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
#define APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
APACHE_THRIFT_DEFINE_ACCESSOR(appSpecificErrorCode);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_key
#define APACHE_THRIFT_ACCESSOR_key
APACHE_THRIFT_DEFINE_ACCESSOR(key);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_delta
#define APACHE_THRIFT_ACCESSOR_delta
APACHE_THRIFT_DEFINE_ACCESSOR(delta);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_result
#define APACHE_THRIFT_ACCESSOR_result
APACHE_THRIFT_DEFINE_ACCESSOR(result);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_delta
#define APACHE_THRIFT_ACCESSOR_delta
APACHE_THRIFT_DEFINE_ACCESSOR(delta);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
#define APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
APACHE_THRIFT_DEFINE_ACCESSOR(appSpecificErrorCode);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_key
#define APACHE_THRIFT_ACCESSOR_key
APACHE_THRIFT_DEFINE_ACCESSOR(key);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_result
#define APACHE_THRIFT_ACCESSOR_result
APACHE_THRIFT_DEFINE_ACCESSOR(result);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_age
#define APACHE_THRIFT_ACCESSOR_age
APACHE_THRIFT_DEFINE_ACCESSOR(age);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_exptime
#define APACHE_THRIFT_ACCESSOR_exptime
APACHE_THRIFT_DEFINE_ACCESSOR(exptime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ipv
#define APACHE_THRIFT_ACCESSOR_ipv
APACHE_THRIFT_DEFINE_ACCESSOR(ipv);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ipAddress
#define APACHE_THRIFT_ACCESSOR_ipAddress
APACHE_THRIFT_DEFINE_ACCESSOR(ipAddress);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
#define APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
APACHE_THRIFT_DEFINE_ACCESSOR(appSpecificErrorCode);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_key
#define APACHE_THRIFT_ACCESSOR_key
APACHE_THRIFT_DEFINE_ACCESSOR(key);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_exptime
#define APACHE_THRIFT_ACCESSOR_exptime
APACHE_THRIFT_DEFINE_ACCESSOR(exptime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_flags
#define APACHE_THRIFT_ACCESSOR_flags
APACHE_THRIFT_DEFINE_ACCESSOR(flags);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_value
#define APACHE_THRIFT_ACCESSOR_value
APACHE_THRIFT_DEFINE_ACCESSOR(value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_result
#define APACHE_THRIFT_ACCESSOR_result
APACHE_THRIFT_DEFINE_ACCESSOR(result);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
#define APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
APACHE_THRIFT_DEFINE_ACCESSOR(appSpecificErrorCode);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_key
#define APACHE_THRIFT_ACCESSOR_key
APACHE_THRIFT_DEFINE_ACCESSOR(key);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_exptime
#define APACHE_THRIFT_ACCESSOR_exptime
APACHE_THRIFT_DEFINE_ACCESSOR(exptime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_flags
#define APACHE_THRIFT_ACCESSOR_flags
APACHE_THRIFT_DEFINE_ACCESSOR(flags);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_value
#define APACHE_THRIFT_ACCESSOR_value
APACHE_THRIFT_DEFINE_ACCESSOR(value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_result
#define APACHE_THRIFT_ACCESSOR_result
APACHE_THRIFT_DEFINE_ACCESSOR(result);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
#define APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
APACHE_THRIFT_DEFINE_ACCESSOR(appSpecificErrorCode);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_key
#define APACHE_THRIFT_ACCESSOR_key
APACHE_THRIFT_DEFINE_ACCESSOR(key);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_exptime
#define APACHE_THRIFT_ACCESSOR_exptime
APACHE_THRIFT_DEFINE_ACCESSOR(exptime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_result
#define APACHE_THRIFT_ACCESSOR_result
APACHE_THRIFT_DEFINE_ACCESSOR(result);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
#define APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
APACHE_THRIFT_DEFINE_ACCESSOR(appSpecificErrorCode);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_key
#define APACHE_THRIFT_ACCESSOR_key
APACHE_THRIFT_DEFINE_ACCESSOR(key);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_result
#define APACHE_THRIFT_ACCESSOR_result
APACHE_THRIFT_DEFINE_ACCESSOR(result);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
#define APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
APACHE_THRIFT_DEFINE_ACCESSOR(appSpecificErrorCode);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_key
#define APACHE_THRIFT_ACCESSOR_key
APACHE_THRIFT_DEFINE_ACCESSOR(key);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_delay
#define APACHE_THRIFT_ACCESSOR_delay
APACHE_THRIFT_DEFINE_ACCESSOR(delay);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_result
#define APACHE_THRIFT_ACCESSOR_result
APACHE_THRIFT_DEFINE_ACCESSOR(result);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
#define APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
APACHE_THRIFT_DEFINE_ACCESSOR(appSpecificErrorCode);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_exptime
#define APACHE_THRIFT_ACCESSOR_exptime
APACHE_THRIFT_DEFINE_ACCESSOR(exptime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_key
#define APACHE_THRIFT_ACCESSOR_key
APACHE_THRIFT_DEFINE_ACCESSOR(key);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_result
#define APACHE_THRIFT_ACCESSOR_result
APACHE_THRIFT_DEFINE_ACCESSOR(result);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_value
#define APACHE_THRIFT_ACCESSOR_value
APACHE_THRIFT_DEFINE_ACCESSOR(value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_flags
#define APACHE_THRIFT_ACCESSOR_flags
APACHE_THRIFT_DEFINE_ACCESSOR(flags);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
#define APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
APACHE_THRIFT_DEFINE_ACCESSOR(appSpecificErrorCode);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_exptime
#define APACHE_THRIFT_ACCESSOR_exptime
APACHE_THRIFT_DEFINE_ACCESSOR(exptime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_key
#define APACHE_THRIFT_ACCESSOR_key
APACHE_THRIFT_DEFINE_ACCESSOR(key);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_result
#define APACHE_THRIFT_ACCESSOR_result
APACHE_THRIFT_DEFINE_ACCESSOR(result);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_casToken
#define APACHE_THRIFT_ACCESSOR_casToken
APACHE_THRIFT_DEFINE_ACCESSOR(casToken);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_value
#define APACHE_THRIFT_ACCESSOR_value
APACHE_THRIFT_DEFINE_ACCESSOR(value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_flags
#define APACHE_THRIFT_ACCESSOR_flags
APACHE_THRIFT_DEFINE_ACCESSOR(flags);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
#define APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
APACHE_THRIFT_DEFINE_ACCESSOR(appSpecificErrorCode);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums

// END declare_enums
// BEGIN struct_indirection

// END struct_indirection
// BEGIN forward_declare
namespace facebook { namespace memcache { namespace thrift {
class McGetRequest;
class McGetReply;
class McSetRequest;
class McSetReply;
class McDeleteRequest;
class McDeleteReply;
class McLeaseGetRequest;
class McLeaseGetReply;
class McLeaseSetRequest;
class McLeaseSetReply;
class McAddRequest;
class McAddReply;
class McReplaceRequest;
class McReplaceReply;
class McGetsRequest;
class McGetsReply;
class McCasRequest;
class McCasReply;
class McIncrRequest;
class McIncrReply;
class McDecrRequest;
class McDecrReply;
class McMetagetRequest;
class McMetagetReply;
class McAppendRequest;
class McAppendReply;
class McPrependRequest;
class McPrependReply;
class McTouchRequest;
class McTouchReply;
class McFlushReRequest;
class McFlushReReply;
class McFlushAllRequest;
class McFlushAllReply;
class McGatRequest;
class McGatReply;
class McGatsRequest;
class McGatsReply;
}}} // facebook::memcache::thrift
// END forward_declare
// BEGIN typedefs

// END typedefs
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace facebook { namespace memcache { namespace thrift {
class McGetRequest final  {
 public:
  using __fbthrift_cpp2_type = McGetRequest;

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McGetRequest() :
      flags(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McGetRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg, uint64_t flags__arg);

  McGetRequest(McGetRequest&&) = default;

  McGetRequest(const McGetRequest&) = default;

  McGetRequest& operator=(McGetRequest&&) = default;

  McGetRequest& operator=(const McGetRequest&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();
 public:
   ::carbon::thrift::IOBufKey key;
 public:
  uint64_t flags;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool key;
    bool flags;
  } __isset = {};
  bool operator==(const McGetRequest& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McGetRequest& __x, const McGetRequest& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McGetRequest& rhs) const;
#ifndef SWIG
  friend bool operator>(const McGetRequest& __x, const McGetRequest& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McGetRequest& __x, const McGetRequest& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McGetRequest& __x, const McGetRequest& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> key_ref() const& {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> key_ref() const&& {
    return {std::move(this->key), __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> key_ref() & {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> key_ref() && {
    return {std::move(this->key), __isset.key};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> flags_ref() const& {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> flags_ref() const&& {
    return {std::move(this->flags), __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> flags_ref() & {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> flags_ref() && {
    return {std::move(this->flags), __isset.flags};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McGetRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McGetRequest_key_struct_setter&& key_) {
    key = std::forward<T_McGetRequest_key_struct_setter>(key_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.key = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return key;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.flags = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return flags;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McGetRequest >;
};

void swap(McGetRequest& a, McGetRequest& b);

template <class Protocol_>
uint32_t McGetRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McGetReply final  {
 public:
  using __fbthrift_cpp2_type = McGetReply;

  McGetReply();
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McGetReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, folly::IOBuf value__arg, uint64_t flags__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);

  McGetReply(McGetReply&&) = default;

  McGetReply(const McGetReply&) = default;

  McGetReply& operator=(McGetReply&&) = default;

  McGetReply& operator=(const McGetReply&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();

  ~McGetReply();

 public:
   ::carbon::Result result;
 private:
  folly::IOBuf value;
 public:
  uint64_t flags;
 public:
  ::std::string message;
 public:
  int16_t appSpecificErrorCode;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool result;
    bool value;
    bool flags;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McGetReply& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McGetReply& __x, const McGetReply& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McGetReply& rhs) const;
#ifndef SWIG
  friend bool operator>(const McGetReply& __x, const McGetReply& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McGetReply& __x, const McGetReply& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McGetReply& __x, const McGetReply& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> result_ref() const& {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> result_ref() const&& {
    return {std::move(this->result), __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> result_ref() & {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> result_ref() && {
    return {std::move(this->result), __isset.result};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const folly::IOBuf&> value_ref() const& {
    return {value, __isset.value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const folly::IOBuf&&> value_ref() const&& {
    return {std::move(value), __isset.value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<folly::IOBuf&> value_ref() & {
    return {value, __isset.value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<folly::IOBuf&&> value_ref() && {
    return {std::move(value), __isset.value};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> flags_ref() const& {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> flags_ref() const&& {
    return {std::move(this->flags), __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> flags_ref() & {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> flags_ref() && {
    return {std::move(this->flags), __isset.flags};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> message_ref() const& {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> message_ref() const&& {
    return {std::move(this->message), __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> message_ref() & {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> message_ref() && {
    return {std::move(this->message), __isset.message};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> appSpecificErrorCode_ref() const& {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> appSpecificErrorCode_ref() const&& {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> appSpecificErrorCode_ref() & {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> appSpecificErrorCode_ref() && {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.result = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return result;
  }

  const folly::IOBuf* get_value() const& {
    return value_ref() ? std::addressof(value) : nullptr;
  }

  folly::IOBuf* get_value() & {
    return value_ref() ? std::addressof(value) : nullptr;
  }
  folly::IOBuf* get_value() && = delete;

  template <typename T_McGetReply_value_struct_setter = folly::IOBuf>
  folly::IOBuf& set_value(T_McGetReply_value_struct_setter&& value_) {
    value = std::forward<T_McGetReply_value_struct_setter>(value_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.value = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return value;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.flags = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return flags;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McGetReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McGetReply_message_struct_setter&& message_) {
    message = std::forward<T_McGetReply_message_struct_setter>(message_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.message = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.appSpecificErrorCode = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McGetReply >;
};

void swap(McGetReply& a, McGetReply& b);

template <class Protocol_>
uint32_t McGetReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McSetRequest final  {
 public:
  using __fbthrift_cpp2_type = McSetRequest;

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McSetRequest() :
      exptime(0),
      flags(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McSetRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg, int32_t exptime__arg, uint64_t flags__arg, folly::IOBuf value__arg);

  McSetRequest(McSetRequest&&) = default;

  McSetRequest(const McSetRequest&) = default;

  McSetRequest& operator=(McSetRequest&&) = default;

  McSetRequest& operator=(const McSetRequest&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();
 public:
   ::carbon::thrift::IOBufKey key;
 public:
  int32_t exptime;
 public:
  uint64_t flags;
 public:
  folly::IOBuf value;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool key;
    bool exptime;
    bool flags;
    bool value;
  } __isset = {};
  bool operator==(const McSetRequest& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McSetRequest& __x, const McSetRequest& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McSetRequest& rhs) const;
#ifndef SWIG
  friend bool operator>(const McSetRequest& __x, const McSetRequest& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McSetRequest& __x, const McSetRequest& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McSetRequest& __x, const McSetRequest& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> key_ref() const& {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> key_ref() const&& {
    return {std::move(this->key), __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> key_ref() & {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> key_ref() && {
    return {std::move(this->key), __isset.key};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> exptime_ref() const& {
    return {this->exptime, __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> exptime_ref() const&& {
    return {std::move(this->exptime), __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> exptime_ref() & {
    return {this->exptime, __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> exptime_ref() && {
    return {std::move(this->exptime), __isset.exptime};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> flags_ref() const& {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> flags_ref() const&& {
    return {std::move(this->flags), __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> flags_ref() & {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> flags_ref() && {
    return {std::move(this->flags), __isset.flags};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> value_ref() const& {
    return {this->value, __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> value_ref() const&& {
    return {std::move(this->value), __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> value_ref() & {
    return {this->value, __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> value_ref() && {
    return {std::move(this->value), __isset.value};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McSetRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McSetRequest_key_struct_setter&& key_) {
    key = std::forward<T_McSetRequest_key_struct_setter>(key_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.key = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return key;
  }

  int32_t get_exptime() const {
    return exptime;
  }

  int32_t& set_exptime(int32_t exptime_) {
    exptime = exptime_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.exptime = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return exptime;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.flags = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return flags;
  }

  const folly::IOBuf& get_value() const& {
    return value;
  }

  folly::IOBuf get_value() && {
    return std::move(value);
  }

  template <typename T_McSetRequest_value_struct_setter = folly::IOBuf>
  folly::IOBuf& set_value(T_McSetRequest_value_struct_setter&& value_) {
    value = std::forward<T_McSetRequest_value_struct_setter>(value_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.value = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return value;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McSetRequest >;
};

void swap(McSetRequest& a, McSetRequest& b);

template <class Protocol_>
uint32_t McSetRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McSetReply final  {
 public:
  using __fbthrift_cpp2_type = McSetReply;

  McSetReply();
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McSetReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, uint64_t flags__arg, folly::IOBuf value__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);

  McSetReply(McSetReply&&) = default;

  McSetReply(const McSetReply&) = default;

  McSetReply& operator=(McSetReply&&) = default;

  McSetReply& operator=(const McSetReply&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();

  ~McSetReply();

 public:
   ::carbon::Result result;
 public:
  uint64_t flags;
 public:
  folly::IOBuf value;
 public:
  ::std::string message;
 public:
  int16_t appSpecificErrorCode;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool result;
    bool flags;
    bool value;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McSetReply& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McSetReply& __x, const McSetReply& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McSetReply& rhs) const;
#ifndef SWIG
  friend bool operator>(const McSetReply& __x, const McSetReply& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McSetReply& __x, const McSetReply& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McSetReply& __x, const McSetReply& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> result_ref() const& {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> result_ref() const&& {
    return {std::move(this->result), __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> result_ref() & {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> result_ref() && {
    return {std::move(this->result), __isset.result};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> flags_ref() const& {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> flags_ref() const&& {
    return {std::move(this->flags), __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> flags_ref() & {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> flags_ref() && {
    return {std::move(this->flags), __isset.flags};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> value_ref() const& {
    return {this->value, __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> value_ref() const&& {
    return {std::move(this->value), __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> value_ref() & {
    return {this->value, __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> value_ref() && {
    return {std::move(this->value), __isset.value};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> message_ref() const& {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> message_ref() const&& {
    return {std::move(this->message), __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> message_ref() & {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> message_ref() && {
    return {std::move(this->message), __isset.message};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> appSpecificErrorCode_ref() const& {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> appSpecificErrorCode_ref() const&& {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> appSpecificErrorCode_ref() & {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> appSpecificErrorCode_ref() && {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.result = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return result;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.flags = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return flags;
  }

  const folly::IOBuf& get_value() const& {
    return value;
  }

  folly::IOBuf get_value() && {
    return std::move(value);
  }

  template <typename T_McSetReply_value_struct_setter = folly::IOBuf>
  folly::IOBuf& set_value(T_McSetReply_value_struct_setter&& value_) {
    value = std::forward<T_McSetReply_value_struct_setter>(value_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.value = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return value;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McSetReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McSetReply_message_struct_setter&& message_) {
    message = std::forward<T_McSetReply_message_struct_setter>(message_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.message = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.appSpecificErrorCode = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McSetReply >;
};

void swap(McSetReply& a, McSetReply& b);

template <class Protocol_>
uint32_t McSetReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McDeleteRequest final  {
 public:
  using __fbthrift_cpp2_type = McDeleteRequest;

  McDeleteRequest();
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McDeleteRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg, uint64_t flags__arg, int32_t exptime__arg, folly::IOBuf value__arg, std::unordered_map<std::string, uint64_t> attributes__arg);

  McDeleteRequest(McDeleteRequest&&) = default;

  McDeleteRequest(const McDeleteRequest&) = default;

  McDeleteRequest& operator=(McDeleteRequest&&) = default;

  McDeleteRequest& operator=(const McDeleteRequest&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();

  ~McDeleteRequest();

 public:
   ::carbon::thrift::IOBufKey key;
 public:
  uint64_t flags;
 public:
  int32_t exptime;
 public:
  folly::IOBuf value;
 public:
  std::unordered_map<std::string, uint64_t> attributes;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool key;
    bool flags;
    bool exptime;
    bool value;
    bool attributes;
  } __isset = {};
  bool operator==(const McDeleteRequest& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McDeleteRequest& __x, const McDeleteRequest& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McDeleteRequest& rhs) const;
#ifndef SWIG
  friend bool operator>(const McDeleteRequest& __x, const McDeleteRequest& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McDeleteRequest& __x, const McDeleteRequest& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McDeleteRequest& __x, const McDeleteRequest& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> key_ref() const& {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> key_ref() const&& {
    return {std::move(this->key), __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> key_ref() & {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> key_ref() && {
    return {std::move(this->key), __isset.key};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> flags_ref() const& {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> flags_ref() const&& {
    return {std::move(this->flags), __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> flags_ref() & {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> flags_ref() && {
    return {std::move(this->flags), __isset.flags};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> exptime_ref() const& {
    return {this->exptime, __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> exptime_ref() const&& {
    return {std::move(this->exptime), __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> exptime_ref() & {
    return {this->exptime, __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> exptime_ref() && {
    return {std::move(this->exptime), __isset.exptime};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> value_ref() const& {
    return {this->value, __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> value_ref() const&& {
    return {std::move(this->value), __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> value_ref() & {
    return {this->value, __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> value_ref() && {
    return {std::move(this->value), __isset.value};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = std::unordered_map<std::string, uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> attributes_ref() const& {
    return {this->attributes, __isset.attributes};
  }

  template <typename..., typename T = std::unordered_map<std::string, uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> attributes_ref() const&& {
    return {std::move(this->attributes), __isset.attributes};
  }

  template <typename..., typename T = std::unordered_map<std::string, uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> attributes_ref() & {
    return {this->attributes, __isset.attributes};
  }

  template <typename..., typename T = std::unordered_map<std::string, uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> attributes_ref() && {
    return {std::move(this->attributes), __isset.attributes};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McDeleteRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McDeleteRequest_key_struct_setter&& key_) {
    key = std::forward<T_McDeleteRequest_key_struct_setter>(key_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.key = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return key;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.flags = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return flags;
  }

  int32_t get_exptime() const {
    return exptime;
  }

  int32_t& set_exptime(int32_t exptime_) {
    exptime = exptime_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.exptime = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return exptime;
  }

  const folly::IOBuf& get_value() const& {
    return value;
  }

  folly::IOBuf get_value() && {
    return std::move(value);
  }

  template <typename T_McDeleteRequest_value_struct_setter = folly::IOBuf>
  folly::IOBuf& set_value(T_McDeleteRequest_value_struct_setter&& value_) {
    value = std::forward<T_McDeleteRequest_value_struct_setter>(value_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.value = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return value;
  }
  const std::unordered_map<std::string, uint64_t>& get_attributes() const&;
  std::unordered_map<std::string, uint64_t> get_attributes() &&;

  template <typename T_McDeleteRequest_attributes_struct_setter = std::unordered_map<std::string, uint64_t>>
  std::unordered_map<std::string, uint64_t>& set_attributes(T_McDeleteRequest_attributes_struct_setter&& attributes_) {
    attributes = std::forward<T_McDeleteRequest_attributes_struct_setter>(attributes_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.attributes = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return attributes;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McDeleteRequest >;
};

void swap(McDeleteRequest& a, McDeleteRequest& b);

template <class Protocol_>
uint32_t McDeleteRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McDeleteReply final  {
 public:
  using __fbthrift_cpp2_type = McDeleteReply;

  McDeleteReply();
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McDeleteReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, uint64_t flags__arg, folly::IOBuf value__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);

  McDeleteReply(McDeleteReply&&) = default;

  McDeleteReply(const McDeleteReply&) = default;

  McDeleteReply& operator=(McDeleteReply&&) = default;

  McDeleteReply& operator=(const McDeleteReply&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();

  ~McDeleteReply();

 public:
   ::carbon::Result result;
 public:
  uint64_t flags;
 public:
  folly::IOBuf value;
 public:
  ::std::string message;
 public:
  int16_t appSpecificErrorCode;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool result;
    bool flags;
    bool value;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McDeleteReply& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McDeleteReply& __x, const McDeleteReply& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McDeleteReply& rhs) const;
#ifndef SWIG
  friend bool operator>(const McDeleteReply& __x, const McDeleteReply& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McDeleteReply& __x, const McDeleteReply& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McDeleteReply& __x, const McDeleteReply& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> result_ref() const& {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> result_ref() const&& {
    return {std::move(this->result), __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> result_ref() & {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> result_ref() && {
    return {std::move(this->result), __isset.result};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> flags_ref() const& {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> flags_ref() const&& {
    return {std::move(this->flags), __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> flags_ref() & {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> flags_ref() && {
    return {std::move(this->flags), __isset.flags};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> value_ref() const& {
    return {this->value, __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> value_ref() const&& {
    return {std::move(this->value), __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> value_ref() & {
    return {this->value, __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> value_ref() && {
    return {std::move(this->value), __isset.value};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> message_ref() const& {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> message_ref() const&& {
    return {std::move(this->message), __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> message_ref() & {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> message_ref() && {
    return {std::move(this->message), __isset.message};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> appSpecificErrorCode_ref() const& {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> appSpecificErrorCode_ref() const&& {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> appSpecificErrorCode_ref() & {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> appSpecificErrorCode_ref() && {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.result = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return result;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.flags = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return flags;
  }

  const folly::IOBuf& get_value() const& {
    return value;
  }

  folly::IOBuf get_value() && {
    return std::move(value);
  }

  template <typename T_McDeleteReply_value_struct_setter = folly::IOBuf>
  folly::IOBuf& set_value(T_McDeleteReply_value_struct_setter&& value_) {
    value = std::forward<T_McDeleteReply_value_struct_setter>(value_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.value = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return value;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McDeleteReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McDeleteReply_message_struct_setter&& message_) {
    message = std::forward<T_McDeleteReply_message_struct_setter>(message_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.message = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.appSpecificErrorCode = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McDeleteReply >;
};

void swap(McDeleteReply& a, McDeleteReply& b);

template <class Protocol_>
uint32_t McDeleteReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McLeaseGetRequest final  {
 public:
  using __fbthrift_cpp2_type = McLeaseGetRequest;

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McLeaseGetRequest() :
      flags(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McLeaseGetRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg, uint64_t flags__arg);

  McLeaseGetRequest(McLeaseGetRequest&&) = default;

  McLeaseGetRequest(const McLeaseGetRequest&) = default;

  McLeaseGetRequest& operator=(McLeaseGetRequest&&) = default;

  McLeaseGetRequest& operator=(const McLeaseGetRequest&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();
 public:
   ::carbon::thrift::IOBufKey key;
 public:
  uint64_t flags;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool key;
    bool flags;
  } __isset = {};
  bool operator==(const McLeaseGetRequest& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McLeaseGetRequest& __x, const McLeaseGetRequest& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McLeaseGetRequest& rhs) const;
#ifndef SWIG
  friend bool operator>(const McLeaseGetRequest& __x, const McLeaseGetRequest& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McLeaseGetRequest& __x, const McLeaseGetRequest& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McLeaseGetRequest& __x, const McLeaseGetRequest& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> key_ref() const& {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> key_ref() const&& {
    return {std::move(this->key), __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> key_ref() & {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> key_ref() && {
    return {std::move(this->key), __isset.key};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> flags_ref() const& {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> flags_ref() const&& {
    return {std::move(this->flags), __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> flags_ref() & {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> flags_ref() && {
    return {std::move(this->flags), __isset.flags};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McLeaseGetRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McLeaseGetRequest_key_struct_setter&& key_) {
    key = std::forward<T_McLeaseGetRequest_key_struct_setter>(key_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.key = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return key;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.flags = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return flags;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McLeaseGetRequest >;
};

void swap(McLeaseGetRequest& a, McLeaseGetRequest& b);

template <class Protocol_>
uint32_t McLeaseGetRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McLeaseGetReply final  {
 public:
  using __fbthrift_cpp2_type = McLeaseGetReply;

  McLeaseGetReply();
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McLeaseGetReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, int64_t leaseToken__arg, folly::IOBuf value__arg, uint64_t flags__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);

  McLeaseGetReply(McLeaseGetReply&&) = default;

  McLeaseGetReply(const McLeaseGetReply&) = default;

  McLeaseGetReply& operator=(McLeaseGetReply&&) = default;

  McLeaseGetReply& operator=(const McLeaseGetReply&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();

  ~McLeaseGetReply();

 public:
   ::carbon::Result result;
 public:
  int64_t leaseToken;
 private:
  folly::IOBuf value;
 public:
  uint64_t flags;
 public:
  ::std::string message;
 public:
  int16_t appSpecificErrorCode;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool result;
    bool leaseToken;
    bool value;
    bool flags;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McLeaseGetReply& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McLeaseGetReply& __x, const McLeaseGetReply& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McLeaseGetReply& rhs) const;
#ifndef SWIG
  friend bool operator>(const McLeaseGetReply& __x, const McLeaseGetReply& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McLeaseGetReply& __x, const McLeaseGetReply& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McLeaseGetReply& __x, const McLeaseGetReply& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> result_ref() const& {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> result_ref() const&& {
    return {std::move(this->result), __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> result_ref() & {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> result_ref() && {
    return {std::move(this->result), __isset.result};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> leaseToken_ref() const& {
    return {this->leaseToken, __isset.leaseToken};
  }

  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> leaseToken_ref() const&& {
    return {std::move(this->leaseToken), __isset.leaseToken};
  }

  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> leaseToken_ref() & {
    return {this->leaseToken, __isset.leaseToken};
  }

  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> leaseToken_ref() && {
    return {std::move(this->leaseToken), __isset.leaseToken};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const folly::IOBuf&> value_ref() const& {
    return {value, __isset.value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const folly::IOBuf&&> value_ref() const&& {
    return {std::move(value), __isset.value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<folly::IOBuf&> value_ref() & {
    return {value, __isset.value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<folly::IOBuf&&> value_ref() && {
    return {std::move(value), __isset.value};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> flags_ref() const& {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> flags_ref() const&& {
    return {std::move(this->flags), __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> flags_ref() & {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> flags_ref() && {
    return {std::move(this->flags), __isset.flags};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> message_ref() const& {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> message_ref() const&& {
    return {std::move(this->message), __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> message_ref() & {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> message_ref() && {
    return {std::move(this->message), __isset.message};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> appSpecificErrorCode_ref() const& {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> appSpecificErrorCode_ref() const&& {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> appSpecificErrorCode_ref() & {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> appSpecificErrorCode_ref() && {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.result = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return result;
  }

  int64_t get_leaseToken() const {
    return leaseToken;
  }

  int64_t& set_leaseToken(int64_t leaseToken_) {
    leaseToken = leaseToken_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.leaseToken = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return leaseToken;
  }

  const folly::IOBuf* get_value() const& {
    return value_ref() ? std::addressof(value) : nullptr;
  }

  folly::IOBuf* get_value() & {
    return value_ref() ? std::addressof(value) : nullptr;
  }
  folly::IOBuf* get_value() && = delete;

  template <typename T_McLeaseGetReply_value_struct_setter = folly::IOBuf>
  folly::IOBuf& set_value(T_McLeaseGetReply_value_struct_setter&& value_) {
    value = std::forward<T_McLeaseGetReply_value_struct_setter>(value_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.value = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return value;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.flags = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return flags;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McLeaseGetReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McLeaseGetReply_message_struct_setter&& message_) {
    message = std::forward<T_McLeaseGetReply_message_struct_setter>(message_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.message = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.appSpecificErrorCode = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McLeaseGetReply >;
};

void swap(McLeaseGetReply& a, McLeaseGetReply& b);

template <class Protocol_>
uint32_t McLeaseGetReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McLeaseSetRequest final  {
 public:
  using __fbthrift_cpp2_type = McLeaseSetRequest;

  McLeaseSetRequest();
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McLeaseSetRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg, int32_t exptime__arg, uint64_t flags__arg, folly::IOBuf value__arg, int64_t leaseToken__arg);

  McLeaseSetRequest(McLeaseSetRequest&&) = default;

  McLeaseSetRequest(const McLeaseSetRequest&) = default;

  McLeaseSetRequest& operator=(McLeaseSetRequest&&) = default;

  McLeaseSetRequest& operator=(const McLeaseSetRequest&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();

  ~McLeaseSetRequest();

 public:
   ::carbon::thrift::IOBufKey key;
 public:
  int32_t exptime;
 public:
  uint64_t flags;
 public:
  folly::IOBuf value;
 public:
  int64_t leaseToken;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool key;
    bool exptime;
    bool flags;
    bool value;
    bool leaseToken;
  } __isset = {};
  bool operator==(const McLeaseSetRequest& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McLeaseSetRequest& __x, const McLeaseSetRequest& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McLeaseSetRequest& rhs) const;
#ifndef SWIG
  friend bool operator>(const McLeaseSetRequest& __x, const McLeaseSetRequest& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McLeaseSetRequest& __x, const McLeaseSetRequest& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McLeaseSetRequest& __x, const McLeaseSetRequest& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> key_ref() const& {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> key_ref() const&& {
    return {std::move(this->key), __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> key_ref() & {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> key_ref() && {
    return {std::move(this->key), __isset.key};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> exptime_ref() const& {
    return {this->exptime, __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> exptime_ref() const&& {
    return {std::move(this->exptime), __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> exptime_ref() & {
    return {this->exptime, __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> exptime_ref() && {
    return {std::move(this->exptime), __isset.exptime};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> flags_ref() const& {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> flags_ref() const&& {
    return {std::move(this->flags), __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> flags_ref() & {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> flags_ref() && {
    return {std::move(this->flags), __isset.flags};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> value_ref() const& {
    return {this->value, __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> value_ref() const&& {
    return {std::move(this->value), __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> value_ref() & {
    return {this->value, __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> value_ref() && {
    return {std::move(this->value), __isset.value};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> leaseToken_ref() const& {
    return {this->leaseToken, __isset.leaseToken};
  }

  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> leaseToken_ref() const&& {
    return {std::move(this->leaseToken), __isset.leaseToken};
  }

  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> leaseToken_ref() & {
    return {this->leaseToken, __isset.leaseToken};
  }

  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> leaseToken_ref() && {
    return {std::move(this->leaseToken), __isset.leaseToken};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McLeaseSetRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McLeaseSetRequest_key_struct_setter&& key_) {
    key = std::forward<T_McLeaseSetRequest_key_struct_setter>(key_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.key = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return key;
  }

  int32_t get_exptime() const {
    return exptime;
  }

  int32_t& set_exptime(int32_t exptime_) {
    exptime = exptime_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.exptime = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return exptime;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.flags = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return flags;
  }

  const folly::IOBuf& get_value() const& {
    return value;
  }

  folly::IOBuf get_value() && {
    return std::move(value);
  }

  template <typename T_McLeaseSetRequest_value_struct_setter = folly::IOBuf>
  folly::IOBuf& set_value(T_McLeaseSetRequest_value_struct_setter&& value_) {
    value = std::forward<T_McLeaseSetRequest_value_struct_setter>(value_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.value = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return value;
  }

  int64_t get_leaseToken() const {
    return leaseToken;
  }

  int64_t& set_leaseToken(int64_t leaseToken_) {
    leaseToken = leaseToken_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.leaseToken = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return leaseToken;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McLeaseSetRequest >;
};

void swap(McLeaseSetRequest& a, McLeaseSetRequest& b);

template <class Protocol_>
uint32_t McLeaseSetRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McLeaseSetReply final  {
 public:
  using __fbthrift_cpp2_type = McLeaseSetReply;

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McLeaseSetReply() :
      result( ::carbon::Result::UNKNOWN),
      appSpecificErrorCode(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McLeaseSetReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);

  McLeaseSetReply(McLeaseSetReply&&) = default;

  McLeaseSetReply(const McLeaseSetReply&) = default;

  McLeaseSetReply& operator=(McLeaseSetReply&&) = default;

  McLeaseSetReply& operator=(const McLeaseSetReply&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();
 public:
   ::carbon::Result result;
 public:
  ::std::string message;
 public:
  int16_t appSpecificErrorCode;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool result;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McLeaseSetReply& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McLeaseSetReply& __x, const McLeaseSetReply& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McLeaseSetReply& rhs) const;
#ifndef SWIG
  friend bool operator>(const McLeaseSetReply& __x, const McLeaseSetReply& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McLeaseSetReply& __x, const McLeaseSetReply& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McLeaseSetReply& __x, const McLeaseSetReply& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> result_ref() const& {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> result_ref() const&& {
    return {std::move(this->result), __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> result_ref() & {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> result_ref() && {
    return {std::move(this->result), __isset.result};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> message_ref() const& {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> message_ref() const&& {
    return {std::move(this->message), __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> message_ref() & {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> message_ref() && {
    return {std::move(this->message), __isset.message};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> appSpecificErrorCode_ref() const& {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> appSpecificErrorCode_ref() const&& {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> appSpecificErrorCode_ref() & {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> appSpecificErrorCode_ref() && {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.result = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return result;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McLeaseSetReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McLeaseSetReply_message_struct_setter&& message_) {
    message = std::forward<T_McLeaseSetReply_message_struct_setter>(message_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.message = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.appSpecificErrorCode = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McLeaseSetReply >;
};

void swap(McLeaseSetReply& a, McLeaseSetReply& b);

template <class Protocol_>
uint32_t McLeaseSetReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McAddRequest final  {
 public:
  using __fbthrift_cpp2_type = McAddRequest;

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McAddRequest() :
      exptime(0),
      flags(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McAddRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg, int32_t exptime__arg, uint64_t flags__arg, folly::IOBuf value__arg);

  McAddRequest(McAddRequest&&) = default;

  McAddRequest(const McAddRequest&) = default;

  McAddRequest& operator=(McAddRequest&&) = default;

  McAddRequest& operator=(const McAddRequest&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();
 public:
   ::carbon::thrift::IOBufKey key;
 public:
  int32_t exptime;
 public:
  uint64_t flags;
 public:
  folly::IOBuf value;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool key;
    bool exptime;
    bool flags;
    bool value;
  } __isset = {};
  bool operator==(const McAddRequest& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McAddRequest& __x, const McAddRequest& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McAddRequest& rhs) const;
#ifndef SWIG
  friend bool operator>(const McAddRequest& __x, const McAddRequest& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McAddRequest& __x, const McAddRequest& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McAddRequest& __x, const McAddRequest& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> key_ref() const& {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> key_ref() const&& {
    return {std::move(this->key), __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> key_ref() & {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> key_ref() && {
    return {std::move(this->key), __isset.key};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> exptime_ref() const& {
    return {this->exptime, __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> exptime_ref() const&& {
    return {std::move(this->exptime), __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> exptime_ref() & {
    return {this->exptime, __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> exptime_ref() && {
    return {std::move(this->exptime), __isset.exptime};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> flags_ref() const& {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> flags_ref() const&& {
    return {std::move(this->flags), __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> flags_ref() & {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> flags_ref() && {
    return {std::move(this->flags), __isset.flags};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> value_ref() const& {
    return {this->value, __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> value_ref() const&& {
    return {std::move(this->value), __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> value_ref() & {
    return {this->value, __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> value_ref() && {
    return {std::move(this->value), __isset.value};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McAddRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McAddRequest_key_struct_setter&& key_) {
    key = std::forward<T_McAddRequest_key_struct_setter>(key_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.key = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return key;
  }

  int32_t get_exptime() const {
    return exptime;
  }

  int32_t& set_exptime(int32_t exptime_) {
    exptime = exptime_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.exptime = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return exptime;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.flags = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return flags;
  }

  const folly::IOBuf& get_value() const& {
    return value;
  }

  folly::IOBuf get_value() && {
    return std::move(value);
  }

  template <typename T_McAddRequest_value_struct_setter = folly::IOBuf>
  folly::IOBuf& set_value(T_McAddRequest_value_struct_setter&& value_) {
    value = std::forward<T_McAddRequest_value_struct_setter>(value_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.value = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return value;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McAddRequest >;
};

void swap(McAddRequest& a, McAddRequest& b);

template <class Protocol_>
uint32_t McAddRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McAddReply final  {
 public:
  using __fbthrift_cpp2_type = McAddReply;

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McAddReply() :
      result( ::carbon::Result::UNKNOWN),
      appSpecificErrorCode(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McAddReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);

  McAddReply(McAddReply&&) = default;

  McAddReply(const McAddReply&) = default;

  McAddReply& operator=(McAddReply&&) = default;

  McAddReply& operator=(const McAddReply&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();
 public:
   ::carbon::Result result;
 public:
  ::std::string message;
 public:
  int16_t appSpecificErrorCode;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool result;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McAddReply& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McAddReply& __x, const McAddReply& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McAddReply& rhs) const;
#ifndef SWIG
  friend bool operator>(const McAddReply& __x, const McAddReply& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McAddReply& __x, const McAddReply& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McAddReply& __x, const McAddReply& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> result_ref() const& {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> result_ref() const&& {
    return {std::move(this->result), __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> result_ref() & {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> result_ref() && {
    return {std::move(this->result), __isset.result};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> message_ref() const& {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> message_ref() const&& {
    return {std::move(this->message), __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> message_ref() & {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> message_ref() && {
    return {std::move(this->message), __isset.message};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> appSpecificErrorCode_ref() const& {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> appSpecificErrorCode_ref() const&& {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> appSpecificErrorCode_ref() & {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> appSpecificErrorCode_ref() && {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.result = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return result;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McAddReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McAddReply_message_struct_setter&& message_) {
    message = std::forward<T_McAddReply_message_struct_setter>(message_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.message = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.appSpecificErrorCode = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McAddReply >;
};

void swap(McAddReply& a, McAddReply& b);

template <class Protocol_>
uint32_t McAddReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McReplaceRequest final  {
 public:
  using __fbthrift_cpp2_type = McReplaceRequest;

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McReplaceRequest() :
      exptime(0),
      flags(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McReplaceRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg, int32_t exptime__arg, uint64_t flags__arg, folly::IOBuf value__arg);

  McReplaceRequest(McReplaceRequest&&) = default;

  McReplaceRequest(const McReplaceRequest&) = default;

  McReplaceRequest& operator=(McReplaceRequest&&) = default;

  McReplaceRequest& operator=(const McReplaceRequest&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();
 public:
   ::carbon::thrift::IOBufKey key;
 public:
  int32_t exptime;
 public:
  uint64_t flags;
 public:
  folly::IOBuf value;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool key;
    bool exptime;
    bool flags;
    bool value;
  } __isset = {};
  bool operator==(const McReplaceRequest& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McReplaceRequest& __x, const McReplaceRequest& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McReplaceRequest& rhs) const;
#ifndef SWIG
  friend bool operator>(const McReplaceRequest& __x, const McReplaceRequest& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McReplaceRequest& __x, const McReplaceRequest& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McReplaceRequest& __x, const McReplaceRequest& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> key_ref() const& {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> key_ref() const&& {
    return {std::move(this->key), __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> key_ref() & {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> key_ref() && {
    return {std::move(this->key), __isset.key};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> exptime_ref() const& {
    return {this->exptime, __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> exptime_ref() const&& {
    return {std::move(this->exptime), __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> exptime_ref() & {
    return {this->exptime, __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> exptime_ref() && {
    return {std::move(this->exptime), __isset.exptime};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> flags_ref() const& {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> flags_ref() const&& {
    return {std::move(this->flags), __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> flags_ref() & {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> flags_ref() && {
    return {std::move(this->flags), __isset.flags};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> value_ref() const& {
    return {this->value, __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> value_ref() const&& {
    return {std::move(this->value), __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> value_ref() & {
    return {this->value, __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> value_ref() && {
    return {std::move(this->value), __isset.value};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McReplaceRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McReplaceRequest_key_struct_setter&& key_) {
    key = std::forward<T_McReplaceRequest_key_struct_setter>(key_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.key = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return key;
  }

  int32_t get_exptime() const {
    return exptime;
  }

  int32_t& set_exptime(int32_t exptime_) {
    exptime = exptime_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.exptime = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return exptime;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.flags = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return flags;
  }

  const folly::IOBuf& get_value() const& {
    return value;
  }

  folly::IOBuf get_value() && {
    return std::move(value);
  }

  template <typename T_McReplaceRequest_value_struct_setter = folly::IOBuf>
  folly::IOBuf& set_value(T_McReplaceRequest_value_struct_setter&& value_) {
    value = std::forward<T_McReplaceRequest_value_struct_setter>(value_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.value = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return value;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McReplaceRequest >;
};

void swap(McReplaceRequest& a, McReplaceRequest& b);

template <class Protocol_>
uint32_t McReplaceRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McReplaceReply final  {
 public:
  using __fbthrift_cpp2_type = McReplaceReply;

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McReplaceReply() :
      result( ::carbon::Result::UNKNOWN),
      appSpecificErrorCode(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McReplaceReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);

  McReplaceReply(McReplaceReply&&) = default;

  McReplaceReply(const McReplaceReply&) = default;

  McReplaceReply& operator=(McReplaceReply&&) = default;

  McReplaceReply& operator=(const McReplaceReply&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();
 public:
   ::carbon::Result result;
 public:
  ::std::string message;
 public:
  int16_t appSpecificErrorCode;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool result;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McReplaceReply& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McReplaceReply& __x, const McReplaceReply& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McReplaceReply& rhs) const;
#ifndef SWIG
  friend bool operator>(const McReplaceReply& __x, const McReplaceReply& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McReplaceReply& __x, const McReplaceReply& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McReplaceReply& __x, const McReplaceReply& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> result_ref() const& {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> result_ref() const&& {
    return {std::move(this->result), __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> result_ref() & {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> result_ref() && {
    return {std::move(this->result), __isset.result};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> message_ref() const& {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> message_ref() const&& {
    return {std::move(this->message), __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> message_ref() & {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> message_ref() && {
    return {std::move(this->message), __isset.message};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> appSpecificErrorCode_ref() const& {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> appSpecificErrorCode_ref() const&& {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> appSpecificErrorCode_ref() & {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> appSpecificErrorCode_ref() && {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.result = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return result;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McReplaceReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McReplaceReply_message_struct_setter&& message_) {
    message = std::forward<T_McReplaceReply_message_struct_setter>(message_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.message = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.appSpecificErrorCode = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McReplaceReply >;
};

void swap(McReplaceReply& a, McReplaceReply& b);

template <class Protocol_>
uint32_t McReplaceReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McGetsRequest final  {
 public:
  using __fbthrift_cpp2_type = McGetsRequest;

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McGetsRequest() :
      flags(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McGetsRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg, uint64_t flags__arg);

  McGetsRequest(McGetsRequest&&) = default;

  McGetsRequest(const McGetsRequest&) = default;

  McGetsRequest& operator=(McGetsRequest&&) = default;

  McGetsRequest& operator=(const McGetsRequest&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();
 public:
   ::carbon::thrift::IOBufKey key;
 public:
  uint64_t flags;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool key;
    bool flags;
  } __isset = {};
  bool operator==(const McGetsRequest& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McGetsRequest& __x, const McGetsRequest& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McGetsRequest& rhs) const;
#ifndef SWIG
  friend bool operator>(const McGetsRequest& __x, const McGetsRequest& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McGetsRequest& __x, const McGetsRequest& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McGetsRequest& __x, const McGetsRequest& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> key_ref() const& {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> key_ref() const&& {
    return {std::move(this->key), __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> key_ref() & {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> key_ref() && {
    return {std::move(this->key), __isset.key};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> flags_ref() const& {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> flags_ref() const&& {
    return {std::move(this->flags), __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> flags_ref() & {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> flags_ref() && {
    return {std::move(this->flags), __isset.flags};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McGetsRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McGetsRequest_key_struct_setter&& key_) {
    key = std::forward<T_McGetsRequest_key_struct_setter>(key_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.key = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return key;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.flags = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return flags;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McGetsRequest >;
};

void swap(McGetsRequest& a, McGetsRequest& b);

template <class Protocol_>
uint32_t McGetsRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McGetsReply final  {
 public:
  using __fbthrift_cpp2_type = McGetsReply;

  McGetsReply();
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McGetsReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, uint64_t casToken__arg, folly::IOBuf value__arg, uint64_t flags__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);

  McGetsReply(McGetsReply&&) = default;

  McGetsReply(const McGetsReply&) = default;

  McGetsReply& operator=(McGetsReply&&) = default;

  McGetsReply& operator=(const McGetsReply&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();

  ~McGetsReply();

 public:
   ::carbon::Result result;
 public:
  uint64_t casToken;
 private:
  folly::IOBuf value;
 public:
  uint64_t flags;
 public:
  ::std::string message;
 public:
  int16_t appSpecificErrorCode;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool result;
    bool casToken;
    bool value;
    bool flags;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McGetsReply& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McGetsReply& __x, const McGetsReply& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McGetsReply& rhs) const;
#ifndef SWIG
  friend bool operator>(const McGetsReply& __x, const McGetsReply& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McGetsReply& __x, const McGetsReply& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McGetsReply& __x, const McGetsReply& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> result_ref() const& {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> result_ref() const&& {
    return {std::move(this->result), __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> result_ref() & {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> result_ref() && {
    return {std::move(this->result), __isset.result};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> casToken_ref() const& {
    return {this->casToken, __isset.casToken};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> casToken_ref() const&& {
    return {std::move(this->casToken), __isset.casToken};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> casToken_ref() & {
    return {this->casToken, __isset.casToken};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> casToken_ref() && {
    return {std::move(this->casToken), __isset.casToken};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const folly::IOBuf&> value_ref() const& {
    return {value, __isset.value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const folly::IOBuf&&> value_ref() const&& {
    return {std::move(value), __isset.value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<folly::IOBuf&> value_ref() & {
    return {value, __isset.value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<folly::IOBuf&&> value_ref() && {
    return {std::move(value), __isset.value};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> flags_ref() const& {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> flags_ref() const&& {
    return {std::move(this->flags), __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> flags_ref() & {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> flags_ref() && {
    return {std::move(this->flags), __isset.flags};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> message_ref() const& {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> message_ref() const&& {
    return {std::move(this->message), __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> message_ref() & {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> message_ref() && {
    return {std::move(this->message), __isset.message};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> appSpecificErrorCode_ref() const& {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> appSpecificErrorCode_ref() const&& {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> appSpecificErrorCode_ref() & {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> appSpecificErrorCode_ref() && {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.result = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return result;
  }

  uint64_t get_casToken() const {
    return casToken;
  }

  uint64_t& set_casToken(uint64_t casToken_) {
    casToken = casToken_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.casToken = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return casToken;
  }

  const folly::IOBuf* get_value() const& {
    return value_ref() ? std::addressof(value) : nullptr;
  }

  folly::IOBuf* get_value() & {
    return value_ref() ? std::addressof(value) : nullptr;
  }
  folly::IOBuf* get_value() && = delete;

  template <typename T_McGetsReply_value_struct_setter = folly::IOBuf>
  folly::IOBuf& set_value(T_McGetsReply_value_struct_setter&& value_) {
    value = std::forward<T_McGetsReply_value_struct_setter>(value_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.value = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return value;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.flags = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return flags;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McGetsReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McGetsReply_message_struct_setter&& message_) {
    message = std::forward<T_McGetsReply_message_struct_setter>(message_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.message = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.appSpecificErrorCode = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McGetsReply >;
};

void swap(McGetsReply& a, McGetsReply& b);

template <class Protocol_>
uint32_t McGetsReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McCasRequest final  {
 public:
  using __fbthrift_cpp2_type = McCasRequest;

  McCasRequest();
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McCasRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg, int32_t exptime__arg, uint64_t flags__arg, folly::IOBuf value__arg, uint64_t casToken__arg);

  McCasRequest(McCasRequest&&) = default;

  McCasRequest(const McCasRequest&) = default;

  McCasRequest& operator=(McCasRequest&&) = default;

  McCasRequest& operator=(const McCasRequest&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();

  ~McCasRequest();

 public:
   ::carbon::thrift::IOBufKey key;
 public:
  int32_t exptime;
 public:
  uint64_t flags;
 public:
  folly::IOBuf value;
 public:
  uint64_t casToken;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool key;
    bool exptime;
    bool flags;
    bool value;
    bool casToken;
  } __isset = {};
  bool operator==(const McCasRequest& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McCasRequest& __x, const McCasRequest& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McCasRequest& rhs) const;
#ifndef SWIG
  friend bool operator>(const McCasRequest& __x, const McCasRequest& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McCasRequest& __x, const McCasRequest& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McCasRequest& __x, const McCasRequest& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> key_ref() const& {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> key_ref() const&& {
    return {std::move(this->key), __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> key_ref() & {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> key_ref() && {
    return {std::move(this->key), __isset.key};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> exptime_ref() const& {
    return {this->exptime, __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> exptime_ref() const&& {
    return {std::move(this->exptime), __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> exptime_ref() & {
    return {this->exptime, __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> exptime_ref() && {
    return {std::move(this->exptime), __isset.exptime};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> flags_ref() const& {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> flags_ref() const&& {
    return {std::move(this->flags), __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> flags_ref() & {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> flags_ref() && {
    return {std::move(this->flags), __isset.flags};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> value_ref() const& {
    return {this->value, __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> value_ref() const&& {
    return {std::move(this->value), __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> value_ref() & {
    return {this->value, __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> value_ref() && {
    return {std::move(this->value), __isset.value};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> casToken_ref() const& {
    return {this->casToken, __isset.casToken};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> casToken_ref() const&& {
    return {std::move(this->casToken), __isset.casToken};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> casToken_ref() & {
    return {this->casToken, __isset.casToken};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> casToken_ref() && {
    return {std::move(this->casToken), __isset.casToken};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McCasRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McCasRequest_key_struct_setter&& key_) {
    key = std::forward<T_McCasRequest_key_struct_setter>(key_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.key = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return key;
  }

  int32_t get_exptime() const {
    return exptime;
  }

  int32_t& set_exptime(int32_t exptime_) {
    exptime = exptime_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.exptime = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return exptime;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.flags = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return flags;
  }

  const folly::IOBuf& get_value() const& {
    return value;
  }

  folly::IOBuf get_value() && {
    return std::move(value);
  }

  template <typename T_McCasRequest_value_struct_setter = folly::IOBuf>
  folly::IOBuf& set_value(T_McCasRequest_value_struct_setter&& value_) {
    value = std::forward<T_McCasRequest_value_struct_setter>(value_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.value = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return value;
  }

  uint64_t get_casToken() const {
    return casToken;
  }

  uint64_t& set_casToken(uint64_t casToken_) {
    casToken = casToken_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.casToken = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return casToken;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McCasRequest >;
};

void swap(McCasRequest& a, McCasRequest& b);

template <class Protocol_>
uint32_t McCasRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McCasReply final  {
 public:
  using __fbthrift_cpp2_type = McCasReply;

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McCasReply() :
      result( ::carbon::Result::UNKNOWN),
      appSpecificErrorCode(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McCasReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);

  McCasReply(McCasReply&&) = default;

  McCasReply(const McCasReply&) = default;

  McCasReply& operator=(McCasReply&&) = default;

  McCasReply& operator=(const McCasReply&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();
 public:
   ::carbon::Result result;
 public:
  ::std::string message;
 public:
  int16_t appSpecificErrorCode;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool result;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McCasReply& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McCasReply& __x, const McCasReply& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McCasReply& rhs) const;
#ifndef SWIG
  friend bool operator>(const McCasReply& __x, const McCasReply& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McCasReply& __x, const McCasReply& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McCasReply& __x, const McCasReply& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> result_ref() const& {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> result_ref() const&& {
    return {std::move(this->result), __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> result_ref() & {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> result_ref() && {
    return {std::move(this->result), __isset.result};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> message_ref() const& {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> message_ref() const&& {
    return {std::move(this->message), __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> message_ref() & {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> message_ref() && {
    return {std::move(this->message), __isset.message};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> appSpecificErrorCode_ref() const& {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> appSpecificErrorCode_ref() const&& {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> appSpecificErrorCode_ref() & {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> appSpecificErrorCode_ref() && {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.result = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return result;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McCasReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McCasReply_message_struct_setter&& message_) {
    message = std::forward<T_McCasReply_message_struct_setter>(message_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.message = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.appSpecificErrorCode = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McCasReply >;
};

void swap(McCasReply& a, McCasReply& b);

template <class Protocol_>
uint32_t McCasReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McIncrRequest final  {
 public:
  using __fbthrift_cpp2_type = McIncrRequest;

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McIncrRequest() :
      delta(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McIncrRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg, int64_t delta__arg);

  McIncrRequest(McIncrRequest&&) = default;

  McIncrRequest(const McIncrRequest&) = default;

  McIncrRequest& operator=(McIncrRequest&&) = default;

  McIncrRequest& operator=(const McIncrRequest&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();
 public:
   ::carbon::thrift::IOBufKey key;
 public:
  int64_t delta;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool key;
    bool delta;
  } __isset = {};
  bool operator==(const McIncrRequest& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McIncrRequest& __x, const McIncrRequest& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McIncrRequest& rhs) const;
#ifndef SWIG
  friend bool operator>(const McIncrRequest& __x, const McIncrRequest& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McIncrRequest& __x, const McIncrRequest& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McIncrRequest& __x, const McIncrRequest& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> key_ref() const& {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> key_ref() const&& {
    return {std::move(this->key), __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> key_ref() & {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> key_ref() && {
    return {std::move(this->key), __isset.key};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> delta_ref() const& {
    return {this->delta, __isset.delta};
  }

  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> delta_ref() const&& {
    return {std::move(this->delta), __isset.delta};
  }

  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> delta_ref() & {
    return {this->delta, __isset.delta};
  }

  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> delta_ref() && {
    return {std::move(this->delta), __isset.delta};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McIncrRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McIncrRequest_key_struct_setter&& key_) {
    key = std::forward<T_McIncrRequest_key_struct_setter>(key_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.key = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return key;
  }

  int64_t get_delta() const {
    return delta;
  }

  int64_t& set_delta(int64_t delta_) {
    delta = delta_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.delta = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return delta;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McIncrRequest >;
};

void swap(McIncrRequest& a, McIncrRequest& b);

template <class Protocol_>
uint32_t McIncrRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McIncrReply final  {
 public:
  using __fbthrift_cpp2_type = McIncrReply;

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McIncrReply() :
      result( ::carbon::Result::UNKNOWN),
      delta(0),
      appSpecificErrorCode(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McIncrReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, int64_t delta__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);

  McIncrReply(McIncrReply&&) = default;

  McIncrReply(const McIncrReply&) = default;

  McIncrReply& operator=(McIncrReply&&) = default;

  McIncrReply& operator=(const McIncrReply&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();
 public:
   ::carbon::Result result;
 public:
  int64_t delta;
 public:
  ::std::string message;
 public:
  int16_t appSpecificErrorCode;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool result;
    bool delta;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McIncrReply& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McIncrReply& __x, const McIncrReply& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McIncrReply& rhs) const;
#ifndef SWIG
  friend bool operator>(const McIncrReply& __x, const McIncrReply& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McIncrReply& __x, const McIncrReply& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McIncrReply& __x, const McIncrReply& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> result_ref() const& {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> result_ref() const&& {
    return {std::move(this->result), __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> result_ref() & {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> result_ref() && {
    return {std::move(this->result), __isset.result};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> delta_ref() const& {
    return {this->delta, __isset.delta};
  }

  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> delta_ref() const&& {
    return {std::move(this->delta), __isset.delta};
  }

  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> delta_ref() & {
    return {this->delta, __isset.delta};
  }

  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> delta_ref() && {
    return {std::move(this->delta), __isset.delta};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> message_ref() const& {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> message_ref() const&& {
    return {std::move(this->message), __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> message_ref() & {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> message_ref() && {
    return {std::move(this->message), __isset.message};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> appSpecificErrorCode_ref() const& {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> appSpecificErrorCode_ref() const&& {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> appSpecificErrorCode_ref() & {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> appSpecificErrorCode_ref() && {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.result = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return result;
  }

  int64_t get_delta() const {
    return delta;
  }

  int64_t& set_delta(int64_t delta_) {
    delta = delta_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.delta = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return delta;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McIncrReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McIncrReply_message_struct_setter&& message_) {
    message = std::forward<T_McIncrReply_message_struct_setter>(message_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.message = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.appSpecificErrorCode = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McIncrReply >;
};

void swap(McIncrReply& a, McIncrReply& b);

template <class Protocol_>
uint32_t McIncrReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McDecrRequest final  {
 public:
  using __fbthrift_cpp2_type = McDecrRequest;

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McDecrRequest() :
      delta(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McDecrRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg, int64_t delta__arg);

  McDecrRequest(McDecrRequest&&) = default;

  McDecrRequest(const McDecrRequest&) = default;

  McDecrRequest& operator=(McDecrRequest&&) = default;

  McDecrRequest& operator=(const McDecrRequest&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();
 public:
   ::carbon::thrift::IOBufKey key;
 public:
  int64_t delta;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool key;
    bool delta;
  } __isset = {};
  bool operator==(const McDecrRequest& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McDecrRequest& __x, const McDecrRequest& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McDecrRequest& rhs) const;
#ifndef SWIG
  friend bool operator>(const McDecrRequest& __x, const McDecrRequest& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McDecrRequest& __x, const McDecrRequest& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McDecrRequest& __x, const McDecrRequest& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> key_ref() const& {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> key_ref() const&& {
    return {std::move(this->key), __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> key_ref() & {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> key_ref() && {
    return {std::move(this->key), __isset.key};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> delta_ref() const& {
    return {this->delta, __isset.delta};
  }

  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> delta_ref() const&& {
    return {std::move(this->delta), __isset.delta};
  }

  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> delta_ref() & {
    return {this->delta, __isset.delta};
  }

  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> delta_ref() && {
    return {std::move(this->delta), __isset.delta};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McDecrRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McDecrRequest_key_struct_setter&& key_) {
    key = std::forward<T_McDecrRequest_key_struct_setter>(key_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.key = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return key;
  }

  int64_t get_delta() const {
    return delta;
  }

  int64_t& set_delta(int64_t delta_) {
    delta = delta_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.delta = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return delta;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McDecrRequest >;
};

void swap(McDecrRequest& a, McDecrRequest& b);

template <class Protocol_>
uint32_t McDecrRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McDecrReply final  {
 public:
  using __fbthrift_cpp2_type = McDecrReply;

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McDecrReply() :
      result( ::carbon::Result::UNKNOWN),
      delta(0),
      appSpecificErrorCode(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McDecrReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, int64_t delta__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);

  McDecrReply(McDecrReply&&) = default;

  McDecrReply(const McDecrReply&) = default;

  McDecrReply& operator=(McDecrReply&&) = default;

  McDecrReply& operator=(const McDecrReply&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();
 public:
   ::carbon::Result result;
 public:
  int64_t delta;
 public:
  ::std::string message;
 public:
  int16_t appSpecificErrorCode;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool result;
    bool delta;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McDecrReply& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McDecrReply& __x, const McDecrReply& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McDecrReply& rhs) const;
#ifndef SWIG
  friend bool operator>(const McDecrReply& __x, const McDecrReply& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McDecrReply& __x, const McDecrReply& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McDecrReply& __x, const McDecrReply& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> result_ref() const& {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> result_ref() const&& {
    return {std::move(this->result), __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> result_ref() & {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> result_ref() && {
    return {std::move(this->result), __isset.result};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> delta_ref() const& {
    return {this->delta, __isset.delta};
  }

  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> delta_ref() const&& {
    return {std::move(this->delta), __isset.delta};
  }

  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> delta_ref() & {
    return {this->delta, __isset.delta};
  }

  template <typename..., typename T = int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> delta_ref() && {
    return {std::move(this->delta), __isset.delta};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> message_ref() const& {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> message_ref() const&& {
    return {std::move(this->message), __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> message_ref() & {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> message_ref() && {
    return {std::move(this->message), __isset.message};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> appSpecificErrorCode_ref() const& {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> appSpecificErrorCode_ref() const&& {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> appSpecificErrorCode_ref() & {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> appSpecificErrorCode_ref() && {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.result = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return result;
  }

  int64_t get_delta() const {
    return delta;
  }

  int64_t& set_delta(int64_t delta_) {
    delta = delta_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.delta = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return delta;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McDecrReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McDecrReply_message_struct_setter&& message_) {
    message = std::forward<T_McDecrReply_message_struct_setter>(message_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.message = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.appSpecificErrorCode = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McDecrReply >;
};

void swap(McDecrReply& a, McDecrReply& b);

template <class Protocol_>
uint32_t McDecrReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McMetagetRequest final  {
 public:
  using __fbthrift_cpp2_type = McMetagetRequest;

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McMetagetRequest() {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McMetagetRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg);

  McMetagetRequest(McMetagetRequest&&) = default;

  McMetagetRequest(const McMetagetRequest&) = default;

  McMetagetRequest& operator=(McMetagetRequest&&) = default;

  McMetagetRequest& operator=(const McMetagetRequest&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();
 public:
   ::carbon::thrift::IOBufKey key;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool key;
  } __isset = {};
  bool operator==(const McMetagetRequest& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McMetagetRequest& __x, const McMetagetRequest& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McMetagetRequest& rhs) const;
#ifndef SWIG
  friend bool operator>(const McMetagetRequest& __x, const McMetagetRequest& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McMetagetRequest& __x, const McMetagetRequest& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McMetagetRequest& __x, const McMetagetRequest& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> key_ref() const& {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> key_ref() const&& {
    return {std::move(this->key), __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> key_ref() & {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> key_ref() && {
    return {std::move(this->key), __isset.key};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McMetagetRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McMetagetRequest_key_struct_setter&& key_) {
    key = std::forward<T_McMetagetRequest_key_struct_setter>(key_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.key = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return key;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McMetagetRequest >;
};

void swap(McMetagetRequest& a, McMetagetRequest& b);

template <class Protocol_>
uint32_t McMetagetRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McMetagetReply final  {
 public:
  using __fbthrift_cpp2_type = McMetagetReply;

  McMetagetReply();
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McMetagetReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, int32_t age__arg, int32_t exptime__arg, int16_t ipv__arg, ::std::string ipAddress__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);

  McMetagetReply(McMetagetReply&&) = default;

  McMetagetReply(const McMetagetReply&) = default;

  McMetagetReply& operator=(McMetagetReply&&) = default;

  McMetagetReply& operator=(const McMetagetReply&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();

  ~McMetagetReply();

 public:
   ::carbon::Result result;
 public:
  int32_t age;
 public:
  int32_t exptime;
 public:
  int16_t ipv;
 public:
  ::std::string ipAddress;
 public:
  ::std::string message;
 public:
  int16_t appSpecificErrorCode;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool result;
    bool age;
    bool exptime;
    bool ipv;
    bool ipAddress;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McMetagetReply& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McMetagetReply& __x, const McMetagetReply& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McMetagetReply& rhs) const;
#ifndef SWIG
  friend bool operator>(const McMetagetReply& __x, const McMetagetReply& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McMetagetReply& __x, const McMetagetReply& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McMetagetReply& __x, const McMetagetReply& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> result_ref() const& {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> result_ref() const&& {
    return {std::move(this->result), __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> result_ref() & {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> result_ref() && {
    return {std::move(this->result), __isset.result};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> age_ref() const& {
    return {this->age, __isset.age};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> age_ref() const&& {
    return {std::move(this->age), __isset.age};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> age_ref() & {
    return {this->age, __isset.age};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> age_ref() && {
    return {std::move(this->age), __isset.age};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> exptime_ref() const& {
    return {this->exptime, __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> exptime_ref() const&& {
    return {std::move(this->exptime), __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> exptime_ref() & {
    return {this->exptime, __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> exptime_ref() && {
    return {std::move(this->exptime), __isset.exptime};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> ipv_ref() const& {
    return {this->ipv, __isset.ipv};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> ipv_ref() const&& {
    return {std::move(this->ipv), __isset.ipv};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> ipv_ref() & {
    return {this->ipv, __isset.ipv};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> ipv_ref() && {
    return {std::move(this->ipv), __isset.ipv};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> ipAddress_ref() const& {
    return {this->ipAddress, __isset.ipAddress};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> ipAddress_ref() const&& {
    return {std::move(this->ipAddress), __isset.ipAddress};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> ipAddress_ref() & {
    return {this->ipAddress, __isset.ipAddress};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> ipAddress_ref() && {
    return {std::move(this->ipAddress), __isset.ipAddress};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> message_ref() const& {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> message_ref() const&& {
    return {std::move(this->message), __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> message_ref() & {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> message_ref() && {
    return {std::move(this->message), __isset.message};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> appSpecificErrorCode_ref() const& {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> appSpecificErrorCode_ref() const&& {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> appSpecificErrorCode_ref() & {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> appSpecificErrorCode_ref() && {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.result = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return result;
  }

  int32_t get_age() const {
    return age;
  }

  int32_t& set_age(int32_t age_) {
    age = age_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.age = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return age;
  }

  int32_t get_exptime() const {
    return exptime;
  }

  int32_t& set_exptime(int32_t exptime_) {
    exptime = exptime_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.exptime = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return exptime;
  }

  int16_t get_ipv() const {
    return ipv;
  }

  int16_t& set_ipv(int16_t ipv_) {
    ipv = ipv_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.ipv = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return ipv;
  }

  const ::std::string& get_ipAddress() const& {
    return ipAddress;
  }

  ::std::string get_ipAddress() && {
    return std::move(ipAddress);
  }

  template <typename T_McMetagetReply_ipAddress_struct_setter = ::std::string>
  ::std::string& set_ipAddress(T_McMetagetReply_ipAddress_struct_setter&& ipAddress_) {
    ipAddress = std::forward<T_McMetagetReply_ipAddress_struct_setter>(ipAddress_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.ipAddress = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return ipAddress;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McMetagetReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McMetagetReply_message_struct_setter&& message_) {
    message = std::forward<T_McMetagetReply_message_struct_setter>(message_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.message = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.appSpecificErrorCode = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McMetagetReply >;
};

void swap(McMetagetReply& a, McMetagetReply& b);

template <class Protocol_>
uint32_t McMetagetReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McAppendRequest final  {
 public:
  using __fbthrift_cpp2_type = McAppendRequest;

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McAppendRequest() :
      exptime(0),
      flags(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McAppendRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg, int32_t exptime__arg, uint64_t flags__arg, folly::IOBuf value__arg);

  McAppendRequest(McAppendRequest&&) = default;

  McAppendRequest(const McAppendRequest&) = default;

  McAppendRequest& operator=(McAppendRequest&&) = default;

  McAppendRequest& operator=(const McAppendRequest&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();
 public:
   ::carbon::thrift::IOBufKey key;
 public:
  int32_t exptime;
 public:
  uint64_t flags;
 public:
  folly::IOBuf value;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool key;
    bool exptime;
    bool flags;
    bool value;
  } __isset = {};
  bool operator==(const McAppendRequest& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McAppendRequest& __x, const McAppendRequest& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McAppendRequest& rhs) const;
#ifndef SWIG
  friend bool operator>(const McAppendRequest& __x, const McAppendRequest& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McAppendRequest& __x, const McAppendRequest& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McAppendRequest& __x, const McAppendRequest& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> key_ref() const& {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> key_ref() const&& {
    return {std::move(this->key), __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> key_ref() & {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> key_ref() && {
    return {std::move(this->key), __isset.key};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> exptime_ref() const& {
    return {this->exptime, __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> exptime_ref() const&& {
    return {std::move(this->exptime), __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> exptime_ref() & {
    return {this->exptime, __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> exptime_ref() && {
    return {std::move(this->exptime), __isset.exptime};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> flags_ref() const& {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> flags_ref() const&& {
    return {std::move(this->flags), __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> flags_ref() & {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> flags_ref() && {
    return {std::move(this->flags), __isset.flags};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> value_ref() const& {
    return {this->value, __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> value_ref() const&& {
    return {std::move(this->value), __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> value_ref() & {
    return {this->value, __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> value_ref() && {
    return {std::move(this->value), __isset.value};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McAppendRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McAppendRequest_key_struct_setter&& key_) {
    key = std::forward<T_McAppendRequest_key_struct_setter>(key_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.key = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return key;
  }

  int32_t get_exptime() const {
    return exptime;
  }

  int32_t& set_exptime(int32_t exptime_) {
    exptime = exptime_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.exptime = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return exptime;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.flags = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return flags;
  }

  const folly::IOBuf& get_value() const& {
    return value;
  }

  folly::IOBuf get_value() && {
    return std::move(value);
  }

  template <typename T_McAppendRequest_value_struct_setter = folly::IOBuf>
  folly::IOBuf& set_value(T_McAppendRequest_value_struct_setter&& value_) {
    value = std::forward<T_McAppendRequest_value_struct_setter>(value_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.value = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return value;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McAppendRequest >;
};

void swap(McAppendRequest& a, McAppendRequest& b);

template <class Protocol_>
uint32_t McAppendRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McAppendReply final  {
 public:
  using __fbthrift_cpp2_type = McAppendReply;

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McAppendReply() :
      result( ::carbon::Result::UNKNOWN),
      appSpecificErrorCode(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McAppendReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);

  McAppendReply(McAppendReply&&) = default;

  McAppendReply(const McAppendReply&) = default;

  McAppendReply& operator=(McAppendReply&&) = default;

  McAppendReply& operator=(const McAppendReply&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();
 public:
   ::carbon::Result result;
 public:
  ::std::string message;
 public:
  int16_t appSpecificErrorCode;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool result;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McAppendReply& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McAppendReply& __x, const McAppendReply& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McAppendReply& rhs) const;
#ifndef SWIG
  friend bool operator>(const McAppendReply& __x, const McAppendReply& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McAppendReply& __x, const McAppendReply& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McAppendReply& __x, const McAppendReply& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> result_ref() const& {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> result_ref() const&& {
    return {std::move(this->result), __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> result_ref() & {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> result_ref() && {
    return {std::move(this->result), __isset.result};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> message_ref() const& {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> message_ref() const&& {
    return {std::move(this->message), __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> message_ref() & {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> message_ref() && {
    return {std::move(this->message), __isset.message};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> appSpecificErrorCode_ref() const& {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> appSpecificErrorCode_ref() const&& {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> appSpecificErrorCode_ref() & {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> appSpecificErrorCode_ref() && {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.result = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return result;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McAppendReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McAppendReply_message_struct_setter&& message_) {
    message = std::forward<T_McAppendReply_message_struct_setter>(message_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.message = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.appSpecificErrorCode = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McAppendReply >;
};

void swap(McAppendReply& a, McAppendReply& b);

template <class Protocol_>
uint32_t McAppendReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McPrependRequest final  {
 public:
  using __fbthrift_cpp2_type = McPrependRequest;

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McPrependRequest() :
      exptime(0),
      flags(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McPrependRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg, int32_t exptime__arg, uint64_t flags__arg, folly::IOBuf value__arg);

  McPrependRequest(McPrependRequest&&) = default;

  McPrependRequest(const McPrependRequest&) = default;

  McPrependRequest& operator=(McPrependRequest&&) = default;

  McPrependRequest& operator=(const McPrependRequest&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();
 public:
   ::carbon::thrift::IOBufKey key;
 public:
  int32_t exptime;
 public:
  uint64_t flags;
 public:
  folly::IOBuf value;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool key;
    bool exptime;
    bool flags;
    bool value;
  } __isset = {};
  bool operator==(const McPrependRequest& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McPrependRequest& __x, const McPrependRequest& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McPrependRequest& rhs) const;
#ifndef SWIG
  friend bool operator>(const McPrependRequest& __x, const McPrependRequest& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McPrependRequest& __x, const McPrependRequest& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McPrependRequest& __x, const McPrependRequest& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> key_ref() const& {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> key_ref() const&& {
    return {std::move(this->key), __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> key_ref() & {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> key_ref() && {
    return {std::move(this->key), __isset.key};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> exptime_ref() const& {
    return {this->exptime, __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> exptime_ref() const&& {
    return {std::move(this->exptime), __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> exptime_ref() & {
    return {this->exptime, __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> exptime_ref() && {
    return {std::move(this->exptime), __isset.exptime};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> flags_ref() const& {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> flags_ref() const&& {
    return {std::move(this->flags), __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> flags_ref() & {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> flags_ref() && {
    return {std::move(this->flags), __isset.flags};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> value_ref() const& {
    return {this->value, __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> value_ref() const&& {
    return {std::move(this->value), __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> value_ref() & {
    return {this->value, __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> value_ref() && {
    return {std::move(this->value), __isset.value};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McPrependRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McPrependRequest_key_struct_setter&& key_) {
    key = std::forward<T_McPrependRequest_key_struct_setter>(key_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.key = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return key;
  }

  int32_t get_exptime() const {
    return exptime;
  }

  int32_t& set_exptime(int32_t exptime_) {
    exptime = exptime_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.exptime = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return exptime;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.flags = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return flags;
  }

  const folly::IOBuf& get_value() const& {
    return value;
  }

  folly::IOBuf get_value() && {
    return std::move(value);
  }

  template <typename T_McPrependRequest_value_struct_setter = folly::IOBuf>
  folly::IOBuf& set_value(T_McPrependRequest_value_struct_setter&& value_) {
    value = std::forward<T_McPrependRequest_value_struct_setter>(value_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.value = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return value;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McPrependRequest >;
};

void swap(McPrependRequest& a, McPrependRequest& b);

template <class Protocol_>
uint32_t McPrependRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McPrependReply final  {
 public:
  using __fbthrift_cpp2_type = McPrependReply;

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McPrependReply() :
      result( ::carbon::Result::UNKNOWN),
      appSpecificErrorCode(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McPrependReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);

  McPrependReply(McPrependReply&&) = default;

  McPrependReply(const McPrependReply&) = default;

  McPrependReply& operator=(McPrependReply&&) = default;

  McPrependReply& operator=(const McPrependReply&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();
 public:
   ::carbon::Result result;
 public:
  ::std::string message;
 public:
  int16_t appSpecificErrorCode;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool result;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McPrependReply& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McPrependReply& __x, const McPrependReply& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McPrependReply& rhs) const;
#ifndef SWIG
  friend bool operator>(const McPrependReply& __x, const McPrependReply& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McPrependReply& __x, const McPrependReply& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McPrependReply& __x, const McPrependReply& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> result_ref() const& {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> result_ref() const&& {
    return {std::move(this->result), __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> result_ref() & {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> result_ref() && {
    return {std::move(this->result), __isset.result};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> message_ref() const& {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> message_ref() const&& {
    return {std::move(this->message), __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> message_ref() & {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> message_ref() && {
    return {std::move(this->message), __isset.message};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> appSpecificErrorCode_ref() const& {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> appSpecificErrorCode_ref() const&& {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> appSpecificErrorCode_ref() & {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> appSpecificErrorCode_ref() && {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.result = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return result;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McPrependReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McPrependReply_message_struct_setter&& message_) {
    message = std::forward<T_McPrependReply_message_struct_setter>(message_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.message = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.appSpecificErrorCode = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McPrependReply >;
};

void swap(McPrependReply& a, McPrependReply& b);

template <class Protocol_>
uint32_t McPrependReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McTouchRequest final  {
 public:
  using __fbthrift_cpp2_type = McTouchRequest;

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McTouchRequest() :
      exptime(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McTouchRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg, int32_t exptime__arg);

  McTouchRequest(McTouchRequest&&) = default;

  McTouchRequest(const McTouchRequest&) = default;

  McTouchRequest& operator=(McTouchRequest&&) = default;

  McTouchRequest& operator=(const McTouchRequest&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();
 public:
   ::carbon::thrift::IOBufKey key;
 public:
  int32_t exptime;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool key;
    bool exptime;
  } __isset = {};
  bool operator==(const McTouchRequest& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McTouchRequest& __x, const McTouchRequest& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McTouchRequest& rhs) const;
#ifndef SWIG
  friend bool operator>(const McTouchRequest& __x, const McTouchRequest& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McTouchRequest& __x, const McTouchRequest& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McTouchRequest& __x, const McTouchRequest& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> key_ref() const& {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> key_ref() const&& {
    return {std::move(this->key), __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> key_ref() & {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> key_ref() && {
    return {std::move(this->key), __isset.key};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> exptime_ref() const& {
    return {this->exptime, __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> exptime_ref() const&& {
    return {std::move(this->exptime), __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> exptime_ref() & {
    return {this->exptime, __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> exptime_ref() && {
    return {std::move(this->exptime), __isset.exptime};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McTouchRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McTouchRequest_key_struct_setter&& key_) {
    key = std::forward<T_McTouchRequest_key_struct_setter>(key_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.key = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return key;
  }

  int32_t get_exptime() const {
    return exptime;
  }

  int32_t& set_exptime(int32_t exptime_) {
    exptime = exptime_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.exptime = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return exptime;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McTouchRequest >;
};

void swap(McTouchRequest& a, McTouchRequest& b);

template <class Protocol_>
uint32_t McTouchRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McTouchReply final  {
 public:
  using __fbthrift_cpp2_type = McTouchReply;

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McTouchReply() :
      result( ::carbon::Result::UNKNOWN),
      appSpecificErrorCode(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McTouchReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);

  McTouchReply(McTouchReply&&) = default;

  McTouchReply(const McTouchReply&) = default;

  McTouchReply& operator=(McTouchReply&&) = default;

  McTouchReply& operator=(const McTouchReply&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();
 public:
   ::carbon::Result result;
 public:
  ::std::string message;
 public:
  int16_t appSpecificErrorCode;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool result;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McTouchReply& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McTouchReply& __x, const McTouchReply& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McTouchReply& rhs) const;
#ifndef SWIG
  friend bool operator>(const McTouchReply& __x, const McTouchReply& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McTouchReply& __x, const McTouchReply& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McTouchReply& __x, const McTouchReply& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> result_ref() const& {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> result_ref() const&& {
    return {std::move(this->result), __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> result_ref() & {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> result_ref() && {
    return {std::move(this->result), __isset.result};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> message_ref() const& {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> message_ref() const&& {
    return {std::move(this->message), __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> message_ref() & {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> message_ref() && {
    return {std::move(this->message), __isset.message};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> appSpecificErrorCode_ref() const& {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> appSpecificErrorCode_ref() const&& {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> appSpecificErrorCode_ref() & {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> appSpecificErrorCode_ref() && {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.result = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return result;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McTouchReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McTouchReply_message_struct_setter&& message_) {
    message = std::forward<T_McTouchReply_message_struct_setter>(message_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.message = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.appSpecificErrorCode = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McTouchReply >;
};

void swap(McTouchReply& a, McTouchReply& b);

template <class Protocol_>
uint32_t McTouchReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McFlushReRequest final  {
 public:
  using __fbthrift_cpp2_type = McFlushReRequest;

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McFlushReRequest() {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McFlushReRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg);

  McFlushReRequest(McFlushReRequest&&) = default;

  McFlushReRequest(const McFlushReRequest&) = default;

  McFlushReRequest& operator=(McFlushReRequest&&) = default;

  McFlushReRequest& operator=(const McFlushReRequest&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();
 public:
   ::carbon::thrift::IOBufKey key;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool key;
  } __isset = {};
  bool operator==(const McFlushReRequest& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McFlushReRequest& __x, const McFlushReRequest& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McFlushReRequest& rhs) const;
#ifndef SWIG
  friend bool operator>(const McFlushReRequest& __x, const McFlushReRequest& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McFlushReRequest& __x, const McFlushReRequest& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McFlushReRequest& __x, const McFlushReRequest& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> key_ref() const& {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> key_ref() const&& {
    return {std::move(this->key), __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> key_ref() & {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> key_ref() && {
    return {std::move(this->key), __isset.key};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McFlushReRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McFlushReRequest_key_struct_setter&& key_) {
    key = std::forward<T_McFlushReRequest_key_struct_setter>(key_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.key = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return key;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McFlushReRequest >;
};

void swap(McFlushReRequest& a, McFlushReRequest& b);

template <class Protocol_>
uint32_t McFlushReRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McFlushReReply final  {
 public:
  using __fbthrift_cpp2_type = McFlushReReply;

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McFlushReReply() :
      result( ::carbon::Result::UNKNOWN),
      appSpecificErrorCode(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McFlushReReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);

  McFlushReReply(McFlushReReply&&) = default;

  McFlushReReply(const McFlushReReply&) = default;

  McFlushReReply& operator=(McFlushReReply&&) = default;

  McFlushReReply& operator=(const McFlushReReply&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();
 public:
   ::carbon::Result result;
 public:
  ::std::string message;
 public:
  int16_t appSpecificErrorCode;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool result;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McFlushReReply& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McFlushReReply& __x, const McFlushReReply& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McFlushReReply& rhs) const;
#ifndef SWIG
  friend bool operator>(const McFlushReReply& __x, const McFlushReReply& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McFlushReReply& __x, const McFlushReReply& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McFlushReReply& __x, const McFlushReReply& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> result_ref() const& {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> result_ref() const&& {
    return {std::move(this->result), __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> result_ref() & {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> result_ref() && {
    return {std::move(this->result), __isset.result};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> message_ref() const& {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> message_ref() const&& {
    return {std::move(this->message), __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> message_ref() & {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> message_ref() && {
    return {std::move(this->message), __isset.message};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> appSpecificErrorCode_ref() const& {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> appSpecificErrorCode_ref() const&& {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> appSpecificErrorCode_ref() & {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> appSpecificErrorCode_ref() && {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.result = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return result;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McFlushReReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McFlushReReply_message_struct_setter&& message_) {
    message = std::forward<T_McFlushReReply_message_struct_setter>(message_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.message = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.appSpecificErrorCode = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McFlushReReply >;
};

void swap(McFlushReReply& a, McFlushReReply& b);

template <class Protocol_>
uint32_t McFlushReReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McFlushAllRequest final  {
 public:
  using __fbthrift_cpp2_type = McFlushAllRequest;

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McFlushAllRequest() :
      delay(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McFlushAllRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg, int32_t delay__arg);

  McFlushAllRequest(McFlushAllRequest&&) = default;

  McFlushAllRequest(const McFlushAllRequest&) = default;

  McFlushAllRequest& operator=(McFlushAllRequest&&) = default;

  McFlushAllRequest& operator=(const McFlushAllRequest&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();
 public:
   ::carbon::thrift::IOBufKey key;
 public:
  int32_t delay;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool key;
    bool delay;
  } __isset = {};
  bool operator==(const McFlushAllRequest& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McFlushAllRequest& __x, const McFlushAllRequest& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McFlushAllRequest& rhs) const;
#ifndef SWIG
  friend bool operator>(const McFlushAllRequest& __x, const McFlushAllRequest& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McFlushAllRequest& __x, const McFlushAllRequest& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McFlushAllRequest& __x, const McFlushAllRequest& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> key_ref() const& {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> key_ref() const&& {
    return {std::move(this->key), __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> key_ref() & {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> key_ref() && {
    return {std::move(this->key), __isset.key};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> delay_ref() const& {
    return {this->delay, __isset.delay};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> delay_ref() const&& {
    return {std::move(this->delay), __isset.delay};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> delay_ref() & {
    return {this->delay, __isset.delay};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> delay_ref() && {
    return {std::move(this->delay), __isset.delay};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McFlushAllRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McFlushAllRequest_key_struct_setter&& key_) {
    key = std::forward<T_McFlushAllRequest_key_struct_setter>(key_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.key = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return key;
  }

  int32_t get_delay() const {
    return delay;
  }

  int32_t& set_delay(int32_t delay_) {
    delay = delay_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.delay = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return delay;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McFlushAllRequest >;
};

void swap(McFlushAllRequest& a, McFlushAllRequest& b);

template <class Protocol_>
uint32_t McFlushAllRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McFlushAllReply final  {
 public:
  using __fbthrift_cpp2_type = McFlushAllReply;

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McFlushAllReply() :
      result( ::carbon::Result::UNKNOWN),
      appSpecificErrorCode(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McFlushAllReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);

  McFlushAllReply(McFlushAllReply&&) = default;

  McFlushAllReply(const McFlushAllReply&) = default;

  McFlushAllReply& operator=(McFlushAllReply&&) = default;

  McFlushAllReply& operator=(const McFlushAllReply&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();
 public:
   ::carbon::Result result;
 public:
  ::std::string message;
 public:
  int16_t appSpecificErrorCode;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool result;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McFlushAllReply& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McFlushAllReply& __x, const McFlushAllReply& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McFlushAllReply& rhs) const;
#ifndef SWIG
  friend bool operator>(const McFlushAllReply& __x, const McFlushAllReply& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McFlushAllReply& __x, const McFlushAllReply& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McFlushAllReply& __x, const McFlushAllReply& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> result_ref() const& {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> result_ref() const&& {
    return {std::move(this->result), __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> result_ref() & {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> result_ref() && {
    return {std::move(this->result), __isset.result};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> message_ref() const& {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> message_ref() const&& {
    return {std::move(this->message), __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> message_ref() & {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> message_ref() && {
    return {std::move(this->message), __isset.message};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> appSpecificErrorCode_ref() const& {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> appSpecificErrorCode_ref() const&& {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> appSpecificErrorCode_ref() & {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> appSpecificErrorCode_ref() && {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.result = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return result;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McFlushAllReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McFlushAllReply_message_struct_setter&& message_) {
    message = std::forward<T_McFlushAllReply_message_struct_setter>(message_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.message = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.appSpecificErrorCode = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McFlushAllReply >;
};

void swap(McFlushAllReply& a, McFlushAllReply& b);

template <class Protocol_>
uint32_t McFlushAllReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McGatRequest final  {
 public:
  using __fbthrift_cpp2_type = McGatRequest;

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McGatRequest() :
      exptime(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McGatRequest(apache::thrift::FragileConstructor, int32_t exptime__arg,  ::carbon::thrift::IOBufKey key__arg);

  McGatRequest(McGatRequest&&) = default;

  McGatRequest(const McGatRequest&) = default;

  McGatRequest& operator=(McGatRequest&&) = default;

  McGatRequest& operator=(const McGatRequest&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();
 public:
  int32_t exptime;
 public:
   ::carbon::thrift::IOBufKey key;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool exptime;
    bool key;
  } __isset = {};
  bool operator==(const McGatRequest& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McGatRequest& __x, const McGatRequest& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McGatRequest& rhs) const;
#ifndef SWIG
  friend bool operator>(const McGatRequest& __x, const McGatRequest& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McGatRequest& __x, const McGatRequest& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McGatRequest& __x, const McGatRequest& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> exptime_ref() const& {
    return {this->exptime, __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> exptime_ref() const&& {
    return {std::move(this->exptime), __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> exptime_ref() & {
    return {this->exptime, __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> exptime_ref() && {
    return {std::move(this->exptime), __isset.exptime};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> key_ref() const& {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> key_ref() const&& {
    return {std::move(this->key), __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> key_ref() & {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> key_ref() && {
    return {std::move(this->key), __isset.key};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

  int32_t get_exptime() const {
    return exptime;
  }

  int32_t& set_exptime(int32_t exptime_) {
    exptime = exptime_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.exptime = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return exptime;
  }

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McGatRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McGatRequest_key_struct_setter&& key_) {
    key = std::forward<T_McGatRequest_key_struct_setter>(key_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.key = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return key;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McGatRequest >;
};

void swap(McGatRequest& a, McGatRequest& b);

template <class Protocol_>
uint32_t McGatRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McGatReply final  {
 public:
  using __fbthrift_cpp2_type = McGatReply;

  McGatReply();
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McGatReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, folly::IOBuf value__arg, uint64_t flags__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);

  McGatReply(McGatReply&&) = default;

  McGatReply(const McGatReply&) = default;

  McGatReply& operator=(McGatReply&&) = default;

  McGatReply& operator=(const McGatReply&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();

  ~McGatReply();

 public:
   ::carbon::Result result;
 private:
  folly::IOBuf value;
 public:
  uint64_t flags;
 public:
  ::std::string message;
 public:
  int16_t appSpecificErrorCode;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool result;
    bool value;
    bool flags;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McGatReply& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McGatReply& __x, const McGatReply& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McGatReply& rhs) const;
#ifndef SWIG
  friend bool operator>(const McGatReply& __x, const McGatReply& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McGatReply& __x, const McGatReply& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McGatReply& __x, const McGatReply& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> result_ref() const& {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> result_ref() const&& {
    return {std::move(this->result), __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> result_ref() & {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> result_ref() && {
    return {std::move(this->result), __isset.result};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const folly::IOBuf&> value_ref() const& {
    return {value, __isset.value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const folly::IOBuf&&> value_ref() const&& {
    return {std::move(value), __isset.value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<folly::IOBuf&> value_ref() & {
    return {value, __isset.value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<folly::IOBuf&&> value_ref() && {
    return {std::move(value), __isset.value};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> flags_ref() const& {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> flags_ref() const&& {
    return {std::move(this->flags), __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> flags_ref() & {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> flags_ref() && {
    return {std::move(this->flags), __isset.flags};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> message_ref() const& {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> message_ref() const&& {
    return {std::move(this->message), __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> message_ref() & {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> message_ref() && {
    return {std::move(this->message), __isset.message};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> appSpecificErrorCode_ref() const& {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> appSpecificErrorCode_ref() const&& {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> appSpecificErrorCode_ref() & {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> appSpecificErrorCode_ref() && {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.result = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return result;
  }

  const folly::IOBuf* get_value() const& {
    return value_ref() ? std::addressof(value) : nullptr;
  }

  folly::IOBuf* get_value() & {
    return value_ref() ? std::addressof(value) : nullptr;
  }
  folly::IOBuf* get_value() && = delete;

  template <typename T_McGatReply_value_struct_setter = folly::IOBuf>
  folly::IOBuf& set_value(T_McGatReply_value_struct_setter&& value_) {
    value = std::forward<T_McGatReply_value_struct_setter>(value_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.value = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return value;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.flags = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return flags;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McGatReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McGatReply_message_struct_setter&& message_) {
    message = std::forward<T_McGatReply_message_struct_setter>(message_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.message = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.appSpecificErrorCode = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McGatReply >;
};

void swap(McGatReply& a, McGatReply& b);

template <class Protocol_>
uint32_t McGatReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McGatsRequest final  {
 public:
  using __fbthrift_cpp2_type = McGatsRequest;

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McGatsRequest() :
      exptime(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McGatsRequest(apache::thrift::FragileConstructor, int32_t exptime__arg,  ::carbon::thrift::IOBufKey key__arg);

  McGatsRequest(McGatsRequest&&) = default;

  McGatsRequest(const McGatsRequest&) = default;

  McGatsRequest& operator=(McGatsRequest&&) = default;

  McGatsRequest& operator=(const McGatsRequest&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();
 public:
  int32_t exptime;
 public:
   ::carbon::thrift::IOBufKey key;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool exptime;
    bool key;
  } __isset = {};
  bool operator==(const McGatsRequest& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McGatsRequest& __x, const McGatsRequest& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McGatsRequest& rhs) const;
#ifndef SWIG
  friend bool operator>(const McGatsRequest& __x, const McGatsRequest& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McGatsRequest& __x, const McGatsRequest& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McGatsRequest& __x, const McGatsRequest& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> exptime_ref() const& {
    return {this->exptime, __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> exptime_ref() const&& {
    return {std::move(this->exptime), __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> exptime_ref() & {
    return {this->exptime, __isset.exptime};
  }

  template <typename..., typename T = int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> exptime_ref() && {
    return {std::move(this->exptime), __isset.exptime};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> key_ref() const& {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> key_ref() const&& {
    return {std::move(this->key), __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> key_ref() & {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> key_ref() && {
    return {std::move(this->key), __isset.key};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

  int32_t get_exptime() const {
    return exptime;
  }

  int32_t& set_exptime(int32_t exptime_) {
    exptime = exptime_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.exptime = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return exptime;
  }

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McGatsRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McGatsRequest_key_struct_setter&& key_) {
    key = std::forward<T_McGatsRequest_key_struct_setter>(key_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.key = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return key;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McGatsRequest >;
};

void swap(McGatsRequest& a, McGatsRequest& b);

template <class Protocol_>
uint32_t McGatsRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McGatsReply final  {
 public:
  using __fbthrift_cpp2_type = McGatsReply;

  McGatsReply();
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McGatsReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, uint64_t casToken__arg, folly::IOBuf value__arg, uint64_t flags__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);

  McGatsReply(McGatsReply&&) = default;

  McGatsReply(const McGatsReply&) = default;

  McGatsReply& operator=(McGatsReply&&) = default;

  McGatsReply& operator=(const McGatsReply&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();

  ~McGatsReply();

 public:
   ::carbon::Result result;
 public:
  uint64_t casToken;
 private:
  folly::IOBuf value;
 public:
  uint64_t flags;
 public:
  ::std::string message;
 public:
  int16_t appSpecificErrorCode;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool result;
    bool casToken;
    bool value;
    bool flags;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McGatsReply& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McGatsReply& __x, const McGatsReply& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McGatsReply& rhs) const;
#ifndef SWIG
  friend bool operator>(const McGatsReply& __x, const McGatsReply& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McGatsReply& __x, const McGatsReply& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McGatsReply& __x, const McGatsReply& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> result_ref() const& {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> result_ref() const&& {
    return {std::move(this->result), __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> result_ref() & {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> result_ref() && {
    return {std::move(this->result), __isset.result};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> casToken_ref() const& {
    return {this->casToken, __isset.casToken};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> casToken_ref() const&& {
    return {std::move(this->casToken), __isset.casToken};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> casToken_ref() & {
    return {this->casToken, __isset.casToken};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> casToken_ref() && {
    return {std::move(this->casToken), __isset.casToken};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const folly::IOBuf&> value_ref() const& {
    return {value, __isset.value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const folly::IOBuf&&> value_ref() const&& {
    return {std::move(value), __isset.value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<folly::IOBuf&> value_ref() & {
    return {value, __isset.value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<folly::IOBuf&&> value_ref() && {
    return {std::move(value), __isset.value};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> flags_ref() const& {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> flags_ref() const&& {
    return {std::move(this->flags), __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> flags_ref() & {
    return {this->flags, __isset.flags};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> flags_ref() && {
    return {std::move(this->flags), __isset.flags};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> message_ref() const& {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> message_ref() const&& {
    return {std::move(this->message), __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> message_ref() & {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> message_ref() && {
    return {std::move(this->message), __isset.message};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> appSpecificErrorCode_ref() const& {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> appSpecificErrorCode_ref() const&& {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> appSpecificErrorCode_ref() & {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> appSpecificErrorCode_ref() && {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.result = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return result;
  }

  uint64_t get_casToken() const {
    return casToken;
  }

  uint64_t& set_casToken(uint64_t casToken_) {
    casToken = casToken_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.casToken = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return casToken;
  }

  const folly::IOBuf* get_value() const& {
    return value_ref() ? std::addressof(value) : nullptr;
  }

  folly::IOBuf* get_value() & {
    return value_ref() ? std::addressof(value) : nullptr;
  }
  folly::IOBuf* get_value() && = delete;

  template <typename T_McGatsReply_value_struct_setter = folly::IOBuf>
  folly::IOBuf& set_value(T_McGatsReply_value_struct_setter&& value_) {
    value = std::forward<T_McGatsReply_value_struct_setter>(value_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.value = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return value;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.flags = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return flags;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McGatsReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McGatsReply_message_struct_setter&& message_) {
    message = std::forward<T_McGatsReply_message_struct_setter>(message_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.message = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.appSpecificErrorCode = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McGatsReply >;
};

void swap(McGatsReply& a, McGatsReply& b);

template <class Protocol_>
uint32_t McGatsReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
