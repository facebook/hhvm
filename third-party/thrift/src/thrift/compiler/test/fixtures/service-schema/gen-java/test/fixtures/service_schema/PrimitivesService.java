/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.service_schema;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.service.*;
import com.facebook.thrift.client.*;
import com.google.common.util.concurrent.ListenableFuture;
import java.io.*;
import java.util.*;
import reactor.core.publisher.Mono;

@SwiftGenerated
@com.facebook.swift.service.ThriftService("PrimitivesService")
public interface PrimitivesService extends java.io.Closeable, com.facebook.thrift.util.BlockingService {
    static com.facebook.thrift.server.RpcServerHandlerBuilder<PrimitivesService> serverHandlerBuilder(PrimitivesService _serverImpl) {
        return new com.facebook.thrift.server.RpcServerHandlerBuilder<PrimitivesService>(_serverImpl) {
                @java.lang.Override
                public com.facebook.thrift.server.RpcServerHandler build() {
                return new PrimitivesServiceRpcServerHandler(impl, eventHandlers);
            }
        };
    }

    static com.facebook.thrift.client.ClientBuilder<PrimitivesService> clientBuilder() {
        return new ClientBuilder<PrimitivesService>() {
            @java.lang.Override
            public PrimitivesService build(Mono<RpcClient> rpcClientMono) {
                PrimitivesService.Reactive _delegate =
                    new PrimitivesServiceReactiveClient(protocolId, rpcClientMono, headers, persistentHeaders);
                return new PrimitivesServiceReactiveBlockingWrapper(_delegate);
            }
        };
    }

    @com.facebook.swift.service.ThriftService("PrimitivesService")
    public interface Async extends java.io.Closeable, com.facebook.thrift.util.AsyncService {
        static com.facebook.thrift.server.RpcServerHandlerBuilder<PrimitivesService.Async> serverHandlerBuilder(PrimitivesService.Async _serverImpl) {
            return new com.facebook.thrift.server.RpcServerHandlerBuilder<PrimitivesService.Async>(_serverImpl) {
                @java.lang.Override
                public com.facebook.thrift.server.RpcServerHandler build() {
                    return new PrimitivesServiceRpcServerHandler(impl, eventHandlers);
                }
            };
        }

        static com.facebook.thrift.client.ClientBuilder<PrimitivesService.Async> clientBuilder() {
            return new ClientBuilder<PrimitivesService.Async>() {
                @java.lang.Override
                public PrimitivesService.Async build(Mono<RpcClient> rpcClientMono) {
                    PrimitivesService.Reactive _delegate =
                        new PrimitivesServiceReactiveClient(protocolId, rpcClientMono, headers, persistentHeaders);
                    return new PrimitivesServiceReactiveAsyncWrapper(_delegate);
                }
            };
        }

        @java.lang.Override void close();

        @ThriftMethod(value = "init")
        ListenableFuture<Long> init(
            @com.facebook.swift.codec.ThriftField(value=1, name="param0", requiredness=Requiredness.NONE) final long param0,
            @com.facebook.swift.codec.ThriftField(value=2, name="param1", requiredness=Requiredness.NONE) final long param1);

        default ListenableFuture<Long> init(
            @com.facebook.swift.codec.ThriftField(value=1, name="param0", requiredness=Requiredness.NONE) final long param0,
            @com.facebook.swift.codec.ThriftField(value=2, name="param1", requiredness=Requiredness.NONE) final long param1,
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default ListenableFuture<ResponseWrapper<Long>> initWrapper(
            @com.facebook.swift.codec.ThriftField(value=1, name="param0", requiredness=Requiredness.NONE) final long param0,
            @com.facebook.swift.codec.ThriftField(value=2, name="param1", requiredness=Requiredness.NONE) final long param1,
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        @ThriftMethod(value = "method_that_throws",
                      exception = { 
                          @ThriftException(type=test.fixtures.service_schema.CustomException.class, id=1)
                      })
        ListenableFuture<test.fixtures.service_schema.Result> methodThatThrows();

        default ListenableFuture<test.fixtures.service_schema.Result> methodThatThrows(
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default ListenableFuture<ResponseWrapper<test.fixtures.service_schema.Result>> methodThatThrowsWrapper(
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        @ThriftMethod(value = "return_void_method")
        ListenableFuture<Void> returnVoidMethod(
            @com.facebook.swift.codec.ThriftField(value=1, name="id", requiredness=Requiredness.NONE) final long id);

        default ListenableFuture<Void> returnVoidMethod(
            @com.facebook.swift.codec.ThriftField(value=1, name="id", requiredness=Requiredness.NONE) final long id,
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default ListenableFuture<ResponseWrapper<Void>> returnVoidMethodWrapper(
            @com.facebook.swift.codec.ThriftField(value=1, name="id", requiredness=Requiredness.NONE) final long id,
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }
    }
    @java.lang.Override void close();

    @ThriftMethod(value = "init")
    long init(
        @com.facebook.swift.codec.ThriftField(value=1, name="param0", requiredness=Requiredness.NONE) final long param0,
        @com.facebook.swift.codec.ThriftField(value=2, name="param1", requiredness=Requiredness.NONE) final long param1) throws org.apache.thrift.TException;

    default long init(
        @com.facebook.swift.codec.ThriftField(value=1, name="param0", requiredness=Requiredness.NONE) final long param0,
        @com.facebook.swift.codec.ThriftField(value=2, name="param1", requiredness=Requiredness.NONE) final long param1,
        RpcOptions rpcOptions) throws org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    default ResponseWrapper<Long> initWrapper(
        @com.facebook.swift.codec.ThriftField(value=1, name="param0", requiredness=Requiredness.NONE) final long param0,
        @com.facebook.swift.codec.ThriftField(value=2, name="param1", requiredness=Requiredness.NONE) final long param1,
        RpcOptions rpcOptions) throws org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    @ThriftMethod(value = "method_that_throws",
                  exception = { 
                      @ThriftException(type=test.fixtures.service_schema.CustomException.class, id=1)
                  })
    test.fixtures.service_schema.Result methodThatThrows() throws test.fixtures.service_schema.CustomException, org.apache.thrift.TException;

    default test.fixtures.service_schema.Result methodThatThrows(
        RpcOptions rpcOptions) throws test.fixtures.service_schema.CustomException, org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    default ResponseWrapper<test.fixtures.service_schema.Result> methodThatThrowsWrapper(
        RpcOptions rpcOptions) throws test.fixtures.service_schema.CustomException, org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    @ThriftMethod(value = "return_void_method")
    void returnVoidMethod(
        @com.facebook.swift.codec.ThriftField(value=1, name="id", requiredness=Requiredness.NONE) final long id) throws org.apache.thrift.TException;

    default void returnVoidMethod(
        @com.facebook.swift.codec.ThriftField(value=1, name="id", requiredness=Requiredness.NONE) final long id,
        RpcOptions rpcOptions) throws org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    default ResponseWrapper<Void> returnVoidMethodWrapper(
        @com.facebook.swift.codec.ThriftField(value=1, name="id", requiredness=Requiredness.NONE) final long id,
        RpcOptions rpcOptions) throws org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    @com.facebook.swift.service.ThriftService("PrimitivesService")
    interface Reactive extends reactor.core.Disposable, com.facebook.thrift.util.ReactiveService {
        static com.facebook.thrift.server.RpcServerHandlerBuilder<PrimitivesService.Reactive> serverHandlerBuilder(PrimitivesService.Reactive _serverImpl) {
            return new com.facebook.thrift.server.RpcServerHandlerBuilder<PrimitivesService.Reactive>(_serverImpl) {
                @java.lang.Override
                public com.facebook.thrift.server.RpcServerHandler build() {
                    return new PrimitivesServiceRpcServerHandler(impl, eventHandlers);
                }
            };
        }

        static com.facebook.thrift.client.ClientBuilder<PrimitivesService.Reactive> clientBuilder() {
            return new ClientBuilder<PrimitivesService.Reactive>() {
                @java.lang.Override
                public PrimitivesService.Reactive build(Mono<RpcClient> rpcClientMono) {
                    return new PrimitivesServiceReactiveClient(protocolId, rpcClientMono, headers, persistentHeaders);
                }
            };
        }

        @ThriftMethod(value = "init")
        reactor.core.publisher.Mono<Long> init(final long param0, final long param1);

        default reactor.core.publisher.Mono<Long> init(final long param0, final long param1, RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default reactor.core.publisher.Mono<ResponseWrapper<Long>> initWrapper(final long param0, final long param1, RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        @ThriftMethod(value = "method_that_throws",
                  exception = { 
                      @ThriftException(type=test.fixtures.service_schema.CustomException.class, id=1)
                  })
        reactor.core.publisher.Mono<test.fixtures.service_schema.Result> methodThatThrows();

        default reactor.core.publisher.Mono<test.fixtures.service_schema.Result> methodThatThrows(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default reactor.core.publisher.Mono<ResponseWrapper<test.fixtures.service_schema.Result>> methodThatThrowsWrapper(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        @ThriftMethod(value = "return_void_method")
        reactor.core.publisher.Mono<Void> returnVoidMethod(final long id);

        default reactor.core.publisher.Mono<Void> returnVoidMethod(final long id, RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default reactor.core.publisher.Mono<ResponseWrapper<Void>> returnVoidMethodWrapper(final long id, RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

    }
}
