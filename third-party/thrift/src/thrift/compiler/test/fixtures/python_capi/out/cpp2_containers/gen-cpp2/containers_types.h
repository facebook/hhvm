/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/python_capi/src/containers.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>
#include <deque>
#include <unordered_map>
#include <unordered_set>
#include <folly/container/F14Set.h>
#include <folly/FBString.h>
#include <folly/container/F14Map.h>
#include <folly/small_vector.h>
#include <thrift/test/python_capi/indirection.h>

namespace apache::thrift {
namespace ident {
struct std_string;
struct deque_string;
struct small_vector_iobuf;
struct nested_small_vector;
struct small_vector_tensor;
struct std_set;
struct std_unordered;
struct folly_fast;
struct folly_node;
struct folly_value;
struct folly_vector;
struct folly_sorted_vector;
struct std_map;
struct std_unordered;
struct folly_fast;
struct folly_node;
struct folly_value;
struct folly_vector;
struct folly_sorted_vector;
struct fieldA;
struct fieldB;
struct lst;
struct lst;
struct lst;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_std_string
#define APACHE_THRIFT_ACCESSOR_std_string
APACHE_THRIFT_DEFINE_ACCESSOR(std_string);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_deque_string
#define APACHE_THRIFT_ACCESSOR_deque_string
APACHE_THRIFT_DEFINE_ACCESSOR(deque_string);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_small_vector_iobuf
#define APACHE_THRIFT_ACCESSOR_small_vector_iobuf
APACHE_THRIFT_DEFINE_ACCESSOR(small_vector_iobuf);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_nested_small_vector
#define APACHE_THRIFT_ACCESSOR_nested_small_vector
APACHE_THRIFT_DEFINE_ACCESSOR(nested_small_vector);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_small_vector_tensor
#define APACHE_THRIFT_ACCESSOR_small_vector_tensor
APACHE_THRIFT_DEFINE_ACCESSOR(small_vector_tensor);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_std_set
#define APACHE_THRIFT_ACCESSOR_std_set
APACHE_THRIFT_DEFINE_ACCESSOR(std_set);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_std_unordered
#define APACHE_THRIFT_ACCESSOR_std_unordered
APACHE_THRIFT_DEFINE_ACCESSOR(std_unordered);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_folly_fast
#define APACHE_THRIFT_ACCESSOR_folly_fast
APACHE_THRIFT_DEFINE_ACCESSOR(folly_fast);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_folly_node
#define APACHE_THRIFT_ACCESSOR_folly_node
APACHE_THRIFT_DEFINE_ACCESSOR(folly_node);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_folly_value
#define APACHE_THRIFT_ACCESSOR_folly_value
APACHE_THRIFT_DEFINE_ACCESSOR(folly_value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_folly_vector
#define APACHE_THRIFT_ACCESSOR_folly_vector
APACHE_THRIFT_DEFINE_ACCESSOR(folly_vector);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_folly_sorted_vector
#define APACHE_THRIFT_ACCESSOR_folly_sorted_vector
APACHE_THRIFT_DEFINE_ACCESSOR(folly_sorted_vector);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_std_map
#define APACHE_THRIFT_ACCESSOR_std_map
APACHE_THRIFT_DEFINE_ACCESSOR(std_map);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_std_unordered
#define APACHE_THRIFT_ACCESSOR_std_unordered
APACHE_THRIFT_DEFINE_ACCESSOR(std_unordered);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_folly_fast
#define APACHE_THRIFT_ACCESSOR_folly_fast
APACHE_THRIFT_DEFINE_ACCESSOR(folly_fast);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_folly_node
#define APACHE_THRIFT_ACCESSOR_folly_node
APACHE_THRIFT_DEFINE_ACCESSOR(folly_node);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_folly_value
#define APACHE_THRIFT_ACCESSOR_folly_value
APACHE_THRIFT_DEFINE_ACCESSOR(folly_value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_folly_vector
#define APACHE_THRIFT_ACCESSOR_folly_vector
APACHE_THRIFT_DEFINE_ACCESSOR(folly_vector);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_folly_sorted_vector
#define APACHE_THRIFT_ACCESSOR_folly_sorted_vector
APACHE_THRIFT_DEFINE_ACCESSOR(folly_sorted_vector);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldA
#define APACHE_THRIFT_ACCESSOR_fieldA
APACHE_THRIFT_DEFINE_ACCESSOR(fieldA);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldB
#define APACHE_THRIFT_ACCESSOR_fieldB
APACHE_THRIFT_DEFINE_ACCESSOR(fieldB);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lst
#define APACHE_THRIFT_ACCESSOR_lst
APACHE_THRIFT_DEFINE_ACCESSOR(lst);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lst
#define APACHE_THRIFT_ACCESSOR_lst
APACHE_THRIFT_DEFINE_ACCESSOR(lst);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lst
#define APACHE_THRIFT_ACCESSOR_lst
APACHE_THRIFT_DEFINE_ACCESSOR(lst);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
// END declare_enums
// BEGIN forward_declare
namespace test::fixtures::python_capi {
class TemplateLists;
class TemplateSets;
class TemplateMaps;
class TWrapped;
class IndirectionA;
class IndirectionB;
class IndirectionC;
} // namespace test::fixtures::python_capi
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace test::fixtures::python_capi {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/containers.thrift", "name": "IOBuf", "kind": "typedef" } */
using IOBuf = folly::IOBuf;
/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/containers.thrift", "name": "small_vector_iobuf", "kind": "typedef" } */
using small_vector_iobuf = folly::small_vector<::test::fixtures::python_capi::IOBuf>;
/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/containers.thrift", "name": "fbvector_string", "kind": "typedef" } */
using fbvector_string = folly::fbvector<::std::string>;
/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/containers.thrift", "name": "fbvector_fbvector_string", "kind": "typedef" } */
using fbvector_fbvector_string = folly::fbvector<::test::fixtures::python_capi::fbvector_string>;
/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/containers.thrift", "name": "ListOfWrapped", "kind": "typedef" } */
using ListOfWrapped = ::std::vector<::test::fixtures::python_capi::TWrapped>;
/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/containers.thrift", "name": "VecOfWrapped", "kind": "typedef" } */
using VecOfWrapped = std::vector<::test::fixtures::python_capi::TWrapped>;
/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/containers.thrift", "name": "ListOfWrappedAlias", "kind": "typedef" } */
using ListOfWrappedAlias = ::test::fixtures::python_capi::ListOfWrapped;

/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/containers.thrift", "name": "TemplateLists", "kind": "struct" } */
class TemplateLists final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "containers";
  }
  static constexpr std::size_t __fbthrift_num_fields = 5;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::std_string,
    ::apache::thrift::ident::deque_string,
    ::apache::thrift::ident::small_vector_iobuf,
    ::apache::thrift::ident::nested_small_vector,
    ::apache::thrift::ident::small_vector_tensor
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::cpp_type<std::vector<::std::string>, ::apache::thrift::type::list<::apache::thrift::type::string_t>>,
    ::apache::thrift::type::cpp_type<std::deque<::std::string>, ::apache::thrift::type::list<::apache::thrift::type::binary_t>>,
    ::apache::thrift::type::cpp_type<folly::small_vector<::test::fixtures::python_capi::IOBuf>, ::apache::thrift::type::list<::apache::thrift::type::cpp_type<folly::IOBuf, ::apache::thrift::type::binary_t>>>,
    ::apache::thrift::type::cpp_type<folly::small_vector<::test::fixtures::python_capi::fbvector_string>, ::apache::thrift::type::list<::apache::thrift::type::cpp_type<folly::fbvector<::std::string>, ::apache::thrift::type::list<::apache::thrift::type::string_t>>>>,
    ::apache::thrift::type::cpp_type<folly::fbvector<::test::fixtures::python_capi::fbvector_fbvector_string>, ::apache::thrift::type::list<::apache::thrift::type::cpp_type<folly::fbvector<::test::fixtures::python_capi::fbvector_string>, ::apache::thrift::type::list<::apache::thrift::type::cpp_type<folly::fbvector<::std::string>, ::apache::thrift::type::list<::apache::thrift::type::string_t>>>>>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TemplateLists;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  TemplateLists();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TemplateLists(apache::thrift::FragileConstructor, std::vector<::std::string> std_string__arg, std::deque<::std::string> deque_string__arg, ::test::fixtures::python_capi::small_vector_iobuf small_vector_iobuf__arg, folly::small_vector<::test::fixtures::python_capi::fbvector_string> nested_small_vector__arg, folly::fbvector<::test::fixtures::python_capi::fbvector_fbvector_string> small_vector_tensor__arg);

  TemplateLists(TemplateLists&&) noexcept;

  TemplateLists(const TemplateLists& src);


  TemplateLists& operator=(TemplateLists&&) noexcept;
  TemplateLists& operator=(const TemplateLists& src);

  ~TemplateLists();

 private:
  std::vector<::std::string> __fbthrift_field_std_string;
 private:
  std::deque<::std::string> __fbthrift_field_deque_string;
 private:
  ::test::fixtures::python_capi::small_vector_iobuf __fbthrift_field_small_vector_iobuf;
 private:
  folly::small_vector<::test::fixtures::python_capi::fbvector_string> __fbthrift_field_nested_small_vector;
 private:
  folly::fbvector<::test::fixtures::python_capi::fbvector_fbvector_string> __fbthrift_field_small_vector_tensor;
 private:
  apache::thrift::detail::isset_bitset<5, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  /** Glean { "field": "std_string" } */
  template <typename..., typename fbthrift_T = std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> std_string_ref() const& {
    return {this->__fbthrift_field_std_string, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "std_string" } */
  template <typename..., typename fbthrift_T = std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> std_string_ref() & {
    return {this->__fbthrift_field_std_string, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "std_string" } */
  template <typename..., typename fbthrift_T = std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> std_string_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_std_string), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "std_string" } */
  template <typename..., typename fbthrift_T = std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> std_string() const& {
    return {this->__fbthrift_field_std_string, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "std_string" } */
  template <typename..., typename fbthrift_T = std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> std_string() & {
    return {this->__fbthrift_field_std_string, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "std_string" } */
  template <typename..., typename fbthrift_T = std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> std_string() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_std_string), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "deque_string" } */
  template <typename..., typename fbthrift_T = std::deque<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> deque_string_ref() const& {
    return {this->__fbthrift_field_deque_string, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "deque_string" } */
  template <typename..., typename fbthrift_T = std::deque<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> deque_string_ref() & {
    return {this->__fbthrift_field_deque_string, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "deque_string" } */
  template <typename..., typename fbthrift_T = std::deque<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> deque_string_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_deque_string), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "deque_string" } */
  template <typename..., typename fbthrift_T = std::deque<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> deque_string() const& {
    return {this->__fbthrift_field_deque_string, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "deque_string" } */
  template <typename..., typename fbthrift_T = std::deque<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> deque_string() & {
    return {this->__fbthrift_field_deque_string, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "deque_string" } */
  template <typename..., typename fbthrift_T = std::deque<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> deque_string() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_deque_string), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "small_vector_iobuf" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::small_vector_iobuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> small_vector_iobuf_ref() const& {
    return {this->__fbthrift_field_small_vector_iobuf, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "small_vector_iobuf" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::small_vector_iobuf>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> small_vector_iobuf_ref() & {
    return {this->__fbthrift_field_small_vector_iobuf, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "small_vector_iobuf" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::small_vector_iobuf>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> small_vector_iobuf_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_small_vector_iobuf), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "small_vector_iobuf" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::small_vector_iobuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> small_vector_iobuf() const& {
    return {this->__fbthrift_field_small_vector_iobuf, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "small_vector_iobuf" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::small_vector_iobuf>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> small_vector_iobuf() & {
    return {this->__fbthrift_field_small_vector_iobuf, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "small_vector_iobuf" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::small_vector_iobuf>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> small_vector_iobuf() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_small_vector_iobuf), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "nested_small_vector" } */
  template <typename..., typename fbthrift_T = folly::small_vector<::test::fixtures::python_capi::fbvector_string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> nested_small_vector_ref() const& {
    return {this->__fbthrift_field_nested_small_vector, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "nested_small_vector" } */
  template <typename..., typename fbthrift_T = folly::small_vector<::test::fixtures::python_capi::fbvector_string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> nested_small_vector_ref() & {
    return {this->__fbthrift_field_nested_small_vector, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "nested_small_vector" } */
  template <typename..., typename fbthrift_T = folly::small_vector<::test::fixtures::python_capi::fbvector_string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> nested_small_vector_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_nested_small_vector), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "nested_small_vector" } */
  template <typename..., typename fbthrift_T = folly::small_vector<::test::fixtures::python_capi::fbvector_string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> nested_small_vector() const& {
    return {this->__fbthrift_field_nested_small_vector, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "nested_small_vector" } */
  template <typename..., typename fbthrift_T = folly::small_vector<::test::fixtures::python_capi::fbvector_string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> nested_small_vector() & {
    return {this->__fbthrift_field_nested_small_vector, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "nested_small_vector" } */
  template <typename..., typename fbthrift_T = folly::small_vector<::test::fixtures::python_capi::fbvector_string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> nested_small_vector() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_nested_small_vector), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "small_vector_tensor" } */
  template <typename..., typename fbthrift_T = folly::fbvector<::test::fixtures::python_capi::fbvector_fbvector_string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> small_vector_tensor_ref() const& {
    return {this->__fbthrift_field_small_vector_tensor, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "small_vector_tensor" } */
  template <typename..., typename fbthrift_T = folly::fbvector<::test::fixtures::python_capi::fbvector_fbvector_string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> small_vector_tensor_ref() & {
    return {this->__fbthrift_field_small_vector_tensor, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "small_vector_tensor" } */
  template <typename..., typename fbthrift_T = folly::fbvector<::test::fixtures::python_capi::fbvector_fbvector_string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> small_vector_tensor_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_small_vector_tensor), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "small_vector_tensor" } */
  template <typename..., typename fbthrift_T = folly::fbvector<::test::fixtures::python_capi::fbvector_fbvector_string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> small_vector_tensor() const& {
    return {this->__fbthrift_field_small_vector_tensor, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "small_vector_tensor" } */
  template <typename..., typename fbthrift_T = folly::fbvector<::test::fixtures::python_capi::fbvector_fbvector_string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> small_vector_tensor() & {
    return {this->__fbthrift_field_small_vector_tensor, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "small_vector_tensor" } */
  template <typename..., typename fbthrift_T = folly::fbvector<::test::fixtures::python_capi::fbvector_fbvector_string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> small_vector_tensor() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_small_vector_tensor), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "std_string" } */
  [[deprecated("Use `FOO.std_string().value()` instead of `FOO.get_std_string()`")]]
  const std::vector<::std::string>* get_std_string() const&;

  /** Glean { "field": "std_string" } */
  [[deprecated("Use `FOO.std_string().value()` instead of `FOO.get_std_string()`")]]
  std::vector<::std::string>* get_std_string() &;

  std::vector<::std::string>* get_std_string() && = delete;

  /** Glean { "field": "std_string" } */
  template <typename T_TemplateLists_std_string_struct_setter = std::vector<::std::string>>
  [[deprecated("Use `FOO.std_string() = BAR` instead of `FOO.set_std_string(BAR)`")]]
  std::vector<::std::string>& set_std_string(T_TemplateLists_std_string_struct_setter&& std_string_) {
    std_string_ref() = std::forward<T_TemplateLists_std_string_struct_setter>(std_string_);
    return __fbthrift_field_std_string;
  }

  /** Glean { "field": "deque_string" } */
  [[deprecated("Use `FOO.deque_string().value()` instead of `FOO.get_deque_string()`")]]
  const std::deque<::std::string>& get_deque_string() const&;

  /** Glean { "field": "deque_string" } */
  [[deprecated("Use `FOO.deque_string().value()` instead of `FOO.get_deque_string()`")]]
  std::deque<::std::string> get_deque_string() &&;

  /** Glean { "field": "deque_string" } */
  template <typename T_TemplateLists_deque_string_struct_setter = std::deque<::std::string>>
  [[deprecated("Use `FOO.deque_string() = BAR` instead of `FOO.set_deque_string(BAR)`")]]
  std::deque<::std::string>& set_deque_string(T_TemplateLists_deque_string_struct_setter&& deque_string_) {
    deque_string_ref() = std::forward<T_TemplateLists_deque_string_struct_setter>(deque_string_);
    return __fbthrift_field_deque_string;
  }

  /** Glean { "field": "small_vector_iobuf" } */
  [[deprecated("Use `FOO.small_vector_iobuf().value()` instead of `FOO.get_small_vector_iobuf()`")]]
  const ::test::fixtures::python_capi::small_vector_iobuf& get_small_vector_iobuf() const&;

  /** Glean { "field": "small_vector_iobuf" } */
  [[deprecated("Use `FOO.small_vector_iobuf().value()` instead of `FOO.get_small_vector_iobuf()`")]]
  ::test::fixtures::python_capi::small_vector_iobuf get_small_vector_iobuf() &&;

  /** Glean { "field": "small_vector_iobuf" } */
  template <typename T_TemplateLists_small_vector_iobuf_struct_setter = ::test::fixtures::python_capi::small_vector_iobuf>
  [[deprecated("Use `FOO.small_vector_iobuf() = BAR` instead of `FOO.set_small_vector_iobuf(BAR)`")]]
  ::test::fixtures::python_capi::small_vector_iobuf& set_small_vector_iobuf(T_TemplateLists_small_vector_iobuf_struct_setter&& small_vector_iobuf_) {
    small_vector_iobuf_ref() = std::forward<T_TemplateLists_small_vector_iobuf_struct_setter>(small_vector_iobuf_);
    return __fbthrift_field_small_vector_iobuf;
  }

  /** Glean { "field": "nested_small_vector" } */
  [[deprecated("Use `FOO.nested_small_vector().value()` instead of `FOO.get_nested_small_vector()`")]]
  const folly::small_vector<::test::fixtures::python_capi::fbvector_string>& get_nested_small_vector() const&;

  /** Glean { "field": "nested_small_vector" } */
  [[deprecated("Use `FOO.nested_small_vector().value()` instead of `FOO.get_nested_small_vector()`")]]
  folly::small_vector<::test::fixtures::python_capi::fbvector_string> get_nested_small_vector() &&;

  /** Glean { "field": "nested_small_vector" } */
  template <typename T_TemplateLists_nested_small_vector_struct_setter = folly::small_vector<::test::fixtures::python_capi::fbvector_string>>
  [[deprecated("Use `FOO.nested_small_vector() = BAR` instead of `FOO.set_nested_small_vector(BAR)`")]]
  folly::small_vector<::test::fixtures::python_capi::fbvector_string>& set_nested_small_vector(T_TemplateLists_nested_small_vector_struct_setter&& nested_small_vector_) {
    nested_small_vector_ref() = std::forward<T_TemplateLists_nested_small_vector_struct_setter>(nested_small_vector_);
    return __fbthrift_field_nested_small_vector;
  }

  /** Glean { "field": "small_vector_tensor" } */
  [[deprecated("Use `FOO.small_vector_tensor().value()` instead of `FOO.get_small_vector_tensor()`")]]
  const folly::fbvector<::test::fixtures::python_capi::fbvector_fbvector_string>& get_small_vector_tensor() const&;

  /** Glean { "field": "small_vector_tensor" } */
  [[deprecated("Use `FOO.small_vector_tensor().value()` instead of `FOO.get_small_vector_tensor()`")]]
  folly::fbvector<::test::fixtures::python_capi::fbvector_fbvector_string> get_small_vector_tensor() &&;

  /** Glean { "field": "small_vector_tensor" } */
  template <typename T_TemplateLists_small_vector_tensor_struct_setter = folly::fbvector<::test::fixtures::python_capi::fbvector_fbvector_string>>
  [[deprecated("Use `FOO.small_vector_tensor() = BAR` instead of `FOO.set_small_vector_tensor(BAR)`")]]
  folly::fbvector<::test::fixtures::python_capi::fbvector_fbvector_string>& set_small_vector_tensor(T_TemplateLists_small_vector_tensor_struct_setter&& small_vector_tensor_) {
    small_vector_tensor_ref() = std::forward<T_TemplateLists_small_vector_tensor_struct_setter>(small_vector_tensor_);
    return __fbthrift_field_small_vector_tensor;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TemplateLists>;
  friend void swap(TemplateLists& a, TemplateLists& b);
};

template <class Protocol_>
unsigned long TemplateLists::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/containers.thrift", "name": "TemplateSets", "kind": "struct" } */
class TemplateSets final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "containers";
  }
  static constexpr std::size_t __fbthrift_num_fields = 7;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::std_set,
    ::apache::thrift::ident::std_unordered,
    ::apache::thrift::ident::folly_fast,
    ::apache::thrift::ident::folly_node,
    ::apache::thrift::ident::folly_value,
    ::apache::thrift::ident::folly_vector,
    ::apache::thrift::ident::folly_sorted_vector
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::cpp_type<std::set<::std::string>, ::apache::thrift::type::set<::apache::thrift::type::string_t>>,
    ::apache::thrift::type::cpp_type<std::unordered_set<::std::string>, ::apache::thrift::type::set<::apache::thrift::type::string_t>>,
    ::apache::thrift::type::cpp_type<folly::F14FastSet<::std::string>, ::apache::thrift::type::set<::apache::thrift::type::string_t>>,
    ::apache::thrift::type::cpp_type<folly::F14NodeSet<::std::string>, ::apache::thrift::type::set<::apache::thrift::type::string_t>>,
    ::apache::thrift::type::cpp_type<folly::F14ValueSet<::std::string>, ::apache::thrift::type::set<::apache::thrift::type::string_t>>,
    ::apache::thrift::type::cpp_type<folly::F14VectorSet<::std::string>, ::apache::thrift::type::set<::apache::thrift::type::string_t>>,
    ::apache::thrift::type::cpp_type<folly::sorted_vector_set<::std::string>, ::apache::thrift::type::set<::apache::thrift::type::string_t>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TemplateSets;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  TemplateSets();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TemplateSets(apache::thrift::FragileConstructor, std::set<::std::string> std_set__arg, std::unordered_set<::std::string> std_unordered__arg, folly::F14FastSet<::std::string> folly_fast__arg, folly::F14NodeSet<::std::string> folly_node__arg, folly::F14ValueSet<::std::string> folly_value__arg, folly::F14VectorSet<::std::string> folly_vector__arg, folly::sorted_vector_set<::std::string> folly_sorted_vector__arg);

  TemplateSets(TemplateSets&&) noexcept;

  TemplateSets(const TemplateSets& src);


  TemplateSets& operator=(TemplateSets&&) noexcept;
  TemplateSets& operator=(const TemplateSets& src);

  ~TemplateSets();

 private:
  std::set<::std::string> __fbthrift_field_std_set;
 private:
  std::unordered_set<::std::string> __fbthrift_field_std_unordered;
 private:
  folly::F14FastSet<::std::string> __fbthrift_field_folly_fast;
 private:
  folly::F14NodeSet<::std::string> __fbthrift_field_folly_node;
 private:
  folly::F14ValueSet<::std::string> __fbthrift_field_folly_value;
 private:
  folly::F14VectorSet<::std::string> __fbthrift_field_folly_vector;
 private:
  folly::sorted_vector_set<::std::string> __fbthrift_field_folly_sorted_vector;
 private:
  apache::thrift::detail::isset_bitset<7, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const TemplateSets&) const;
  bool operator<(const TemplateSets&) const;

  /** Glean { "field": "std_set" } */
  template <typename..., typename fbthrift_T = std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> std_set_ref() const& {
    return {this->__fbthrift_field_std_set, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "std_set" } */
  template <typename..., typename fbthrift_T = std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> std_set_ref() & {
    return {this->__fbthrift_field_std_set, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "std_set" } */
  template <typename..., typename fbthrift_T = std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> std_set_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_std_set), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "std_set" } */
  template <typename..., typename fbthrift_T = std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> std_set() const& {
    return {this->__fbthrift_field_std_set, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "std_set" } */
  template <typename..., typename fbthrift_T = std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> std_set() & {
    return {this->__fbthrift_field_std_set, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "std_set" } */
  template <typename..., typename fbthrift_T = std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> std_set() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_std_set), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "std_unordered" } */
  template <typename..., typename fbthrift_T = std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> std_unordered_ref() const& {
    return {this->__fbthrift_field_std_unordered, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "std_unordered" } */
  template <typename..., typename fbthrift_T = std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> std_unordered_ref() & {
    return {this->__fbthrift_field_std_unordered, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "std_unordered" } */
  template <typename..., typename fbthrift_T = std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> std_unordered_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_std_unordered), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "std_unordered" } */
  template <typename..., typename fbthrift_T = std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> std_unordered() const& {
    return {this->__fbthrift_field_std_unordered, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "std_unordered" } */
  template <typename..., typename fbthrift_T = std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> std_unordered() & {
    return {this->__fbthrift_field_std_unordered, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "std_unordered" } */
  template <typename..., typename fbthrift_T = std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> std_unordered() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_std_unordered), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "folly_fast" } */
  template <typename..., typename fbthrift_T = folly::F14FastSet<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> folly_fast_ref() const& {
    return {this->__fbthrift_field_folly_fast, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "folly_fast" } */
  template <typename..., typename fbthrift_T = folly::F14FastSet<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> folly_fast_ref() & {
    return {this->__fbthrift_field_folly_fast, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "folly_fast" } */
  template <typename..., typename fbthrift_T = folly::F14FastSet<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> folly_fast_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_folly_fast), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "folly_fast" } */
  template <typename..., typename fbthrift_T = folly::F14FastSet<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> folly_fast() const& {
    return {this->__fbthrift_field_folly_fast, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "folly_fast" } */
  template <typename..., typename fbthrift_T = folly::F14FastSet<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> folly_fast() & {
    return {this->__fbthrift_field_folly_fast, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "folly_fast" } */
  template <typename..., typename fbthrift_T = folly::F14FastSet<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> folly_fast() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_folly_fast), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "folly_node" } */
  template <typename..., typename fbthrift_T = folly::F14NodeSet<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> folly_node_ref() const& {
    return {this->__fbthrift_field_folly_node, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "folly_node" } */
  template <typename..., typename fbthrift_T = folly::F14NodeSet<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> folly_node_ref() & {
    return {this->__fbthrift_field_folly_node, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "folly_node" } */
  template <typename..., typename fbthrift_T = folly::F14NodeSet<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> folly_node_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_folly_node), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "folly_node" } */
  template <typename..., typename fbthrift_T = folly::F14NodeSet<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> folly_node() const& {
    return {this->__fbthrift_field_folly_node, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "folly_node" } */
  template <typename..., typename fbthrift_T = folly::F14NodeSet<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> folly_node() & {
    return {this->__fbthrift_field_folly_node, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "folly_node" } */
  template <typename..., typename fbthrift_T = folly::F14NodeSet<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> folly_node() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_folly_node), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "folly_value" } */
  template <typename..., typename fbthrift_T = folly::F14ValueSet<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> folly_value_ref() const& {
    return {this->__fbthrift_field_folly_value, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "folly_value" } */
  template <typename..., typename fbthrift_T = folly::F14ValueSet<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> folly_value_ref() & {
    return {this->__fbthrift_field_folly_value, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "folly_value" } */
  template <typename..., typename fbthrift_T = folly::F14ValueSet<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> folly_value_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_folly_value), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "folly_value" } */
  template <typename..., typename fbthrift_T = folly::F14ValueSet<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> folly_value() const& {
    return {this->__fbthrift_field_folly_value, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "folly_value" } */
  template <typename..., typename fbthrift_T = folly::F14ValueSet<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> folly_value() & {
    return {this->__fbthrift_field_folly_value, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "folly_value" } */
  template <typename..., typename fbthrift_T = folly::F14ValueSet<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> folly_value() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_folly_value), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "folly_vector" } */
  template <typename..., typename fbthrift_T = folly::F14VectorSet<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> folly_vector_ref() const& {
    return {this->__fbthrift_field_folly_vector, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "folly_vector" } */
  template <typename..., typename fbthrift_T = folly::F14VectorSet<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> folly_vector_ref() & {
    return {this->__fbthrift_field_folly_vector, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "folly_vector" } */
  template <typename..., typename fbthrift_T = folly::F14VectorSet<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> folly_vector_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_folly_vector), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "folly_vector" } */
  template <typename..., typename fbthrift_T = folly::F14VectorSet<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> folly_vector() const& {
    return {this->__fbthrift_field_folly_vector, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "folly_vector" } */
  template <typename..., typename fbthrift_T = folly::F14VectorSet<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> folly_vector() & {
    return {this->__fbthrift_field_folly_vector, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "folly_vector" } */
  template <typename..., typename fbthrift_T = folly::F14VectorSet<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> folly_vector() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_folly_vector), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "folly_sorted_vector" } */
  template <typename..., typename fbthrift_T = folly::sorted_vector_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> folly_sorted_vector_ref() const& {
    return {this->__fbthrift_field_folly_sorted_vector, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "folly_sorted_vector" } */
  template <typename..., typename fbthrift_T = folly::sorted_vector_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> folly_sorted_vector_ref() & {
    return {this->__fbthrift_field_folly_sorted_vector, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "folly_sorted_vector" } */
  template <typename..., typename fbthrift_T = folly::sorted_vector_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> folly_sorted_vector_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_folly_sorted_vector), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "folly_sorted_vector" } */
  template <typename..., typename fbthrift_T = folly::sorted_vector_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> folly_sorted_vector() const& {
    return {this->__fbthrift_field_folly_sorted_vector, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "folly_sorted_vector" } */
  template <typename..., typename fbthrift_T = folly::sorted_vector_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> folly_sorted_vector() & {
    return {this->__fbthrift_field_folly_sorted_vector, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "folly_sorted_vector" } */
  template <typename..., typename fbthrift_T = folly::sorted_vector_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> folly_sorted_vector() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_folly_sorted_vector), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "std_set" } */
  [[deprecated("Use `FOO.std_set().value()` instead of `FOO.get_std_set()`")]]
  const std::set<::std::string>& get_std_set() const&;

  /** Glean { "field": "std_set" } */
  [[deprecated("Use `FOO.std_set().value()` instead of `FOO.get_std_set()`")]]
  std::set<::std::string> get_std_set() &&;

  /** Glean { "field": "std_set" } */
  template <typename T_TemplateSets_std_set_struct_setter = std::set<::std::string>>
  [[deprecated("Use `FOO.std_set() = BAR` instead of `FOO.set_std_set(BAR)`")]]
  std::set<::std::string>& set_std_set(T_TemplateSets_std_set_struct_setter&& std_set_) {
    std_set_ref() = std::forward<T_TemplateSets_std_set_struct_setter>(std_set_);
    return __fbthrift_field_std_set;
  }

  /** Glean { "field": "std_unordered" } */
  [[deprecated("Use `FOO.std_unordered().value()` instead of `FOO.get_std_unordered()`")]]
  const std::unordered_set<::std::string>& get_std_unordered() const&;

  /** Glean { "field": "std_unordered" } */
  [[deprecated("Use `FOO.std_unordered().value()` instead of `FOO.get_std_unordered()`")]]
  std::unordered_set<::std::string> get_std_unordered() &&;

  /** Glean { "field": "std_unordered" } */
  template <typename T_TemplateSets_std_unordered_struct_setter = std::unordered_set<::std::string>>
  [[deprecated("Use `FOO.std_unordered() = BAR` instead of `FOO.set_std_unordered(BAR)`")]]
  std::unordered_set<::std::string>& set_std_unordered(T_TemplateSets_std_unordered_struct_setter&& std_unordered_) {
    std_unordered_ref() = std::forward<T_TemplateSets_std_unordered_struct_setter>(std_unordered_);
    return __fbthrift_field_std_unordered;
  }

  /** Glean { "field": "folly_fast" } */
  [[deprecated("Use `FOO.folly_fast().value()` instead of `FOO.get_folly_fast()`")]]
  const folly::F14FastSet<::std::string>& get_folly_fast() const&;

  /** Glean { "field": "folly_fast" } */
  [[deprecated("Use `FOO.folly_fast().value()` instead of `FOO.get_folly_fast()`")]]
  folly::F14FastSet<::std::string> get_folly_fast() &&;

  /** Glean { "field": "folly_fast" } */
  template <typename T_TemplateSets_folly_fast_struct_setter = folly::F14FastSet<::std::string>>
  [[deprecated("Use `FOO.folly_fast() = BAR` instead of `FOO.set_folly_fast(BAR)`")]]
  folly::F14FastSet<::std::string>& set_folly_fast(T_TemplateSets_folly_fast_struct_setter&& folly_fast_) {
    folly_fast_ref() = std::forward<T_TemplateSets_folly_fast_struct_setter>(folly_fast_);
    return __fbthrift_field_folly_fast;
  }

  /** Glean { "field": "folly_node" } */
  [[deprecated("Use `FOO.folly_node().value()` instead of `FOO.get_folly_node()`")]]
  const folly::F14NodeSet<::std::string>& get_folly_node() const&;

  /** Glean { "field": "folly_node" } */
  [[deprecated("Use `FOO.folly_node().value()` instead of `FOO.get_folly_node()`")]]
  folly::F14NodeSet<::std::string> get_folly_node() &&;

  /** Glean { "field": "folly_node" } */
  template <typename T_TemplateSets_folly_node_struct_setter = folly::F14NodeSet<::std::string>>
  [[deprecated("Use `FOO.folly_node() = BAR` instead of `FOO.set_folly_node(BAR)`")]]
  folly::F14NodeSet<::std::string>& set_folly_node(T_TemplateSets_folly_node_struct_setter&& folly_node_) {
    folly_node_ref() = std::forward<T_TemplateSets_folly_node_struct_setter>(folly_node_);
    return __fbthrift_field_folly_node;
  }

  /** Glean { "field": "folly_value" } */
  [[deprecated("Use `FOO.folly_value().value()` instead of `FOO.get_folly_value()`")]]
  const folly::F14ValueSet<::std::string>& get_folly_value() const&;

  /** Glean { "field": "folly_value" } */
  [[deprecated("Use `FOO.folly_value().value()` instead of `FOO.get_folly_value()`")]]
  folly::F14ValueSet<::std::string> get_folly_value() &&;

  /** Glean { "field": "folly_value" } */
  template <typename T_TemplateSets_folly_value_struct_setter = folly::F14ValueSet<::std::string>>
  [[deprecated("Use `FOO.folly_value() = BAR` instead of `FOO.set_folly_value(BAR)`")]]
  folly::F14ValueSet<::std::string>& set_folly_value(T_TemplateSets_folly_value_struct_setter&& folly_value_) {
    folly_value_ref() = std::forward<T_TemplateSets_folly_value_struct_setter>(folly_value_);
    return __fbthrift_field_folly_value;
  }

  /** Glean { "field": "folly_vector" } */
  [[deprecated("Use `FOO.folly_vector().value()` instead of `FOO.get_folly_vector()`")]]
  const folly::F14VectorSet<::std::string>& get_folly_vector() const&;

  /** Glean { "field": "folly_vector" } */
  [[deprecated("Use `FOO.folly_vector().value()` instead of `FOO.get_folly_vector()`")]]
  folly::F14VectorSet<::std::string> get_folly_vector() &&;

  /** Glean { "field": "folly_vector" } */
  template <typename T_TemplateSets_folly_vector_struct_setter = folly::F14VectorSet<::std::string>>
  [[deprecated("Use `FOO.folly_vector() = BAR` instead of `FOO.set_folly_vector(BAR)`")]]
  folly::F14VectorSet<::std::string>& set_folly_vector(T_TemplateSets_folly_vector_struct_setter&& folly_vector_) {
    folly_vector_ref() = std::forward<T_TemplateSets_folly_vector_struct_setter>(folly_vector_);
    return __fbthrift_field_folly_vector;
  }

  /** Glean { "field": "folly_sorted_vector" } */
  [[deprecated("Use `FOO.folly_sorted_vector().value()` instead of `FOO.get_folly_sorted_vector()`")]]
  const folly::sorted_vector_set<::std::string>& get_folly_sorted_vector() const&;

  /** Glean { "field": "folly_sorted_vector" } */
  [[deprecated("Use `FOO.folly_sorted_vector().value()` instead of `FOO.get_folly_sorted_vector()`")]]
  folly::sorted_vector_set<::std::string> get_folly_sorted_vector() &&;

  /** Glean { "field": "folly_sorted_vector" } */
  template <typename T_TemplateSets_folly_sorted_vector_struct_setter = folly::sorted_vector_set<::std::string>>
  [[deprecated("Use `FOO.folly_sorted_vector() = BAR` instead of `FOO.set_folly_sorted_vector(BAR)`")]]
  folly::sorted_vector_set<::std::string>& set_folly_sorted_vector(T_TemplateSets_folly_sorted_vector_struct_setter&& folly_sorted_vector_) {
    folly_sorted_vector_ref() = std::forward<T_TemplateSets_folly_sorted_vector_struct_setter>(folly_sorted_vector_);
    return __fbthrift_field_folly_sorted_vector;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TemplateSets>;
  friend void swap(TemplateSets& a, TemplateSets& b);
};

template <class Protocol_>
unsigned long TemplateSets::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/containers.thrift", "name": "TemplateMaps", "kind": "struct" } */
class TemplateMaps final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "containers";
  }
  static constexpr std::size_t __fbthrift_num_fields = 7;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::std_map,
    ::apache::thrift::ident::std_unordered,
    ::apache::thrift::ident::folly_fast,
    ::apache::thrift::ident::folly_node,
    ::apache::thrift::ident::folly_value,
    ::apache::thrift::ident::folly_vector,
    ::apache::thrift::ident::folly_sorted_vector
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::cpp_type<std::map<::std::string, ::std::string>, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>>,
    ::apache::thrift::type::cpp_type<std::unordered_map<::std::string, ::std::string>, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>>,
    ::apache::thrift::type::cpp_type<folly::F14FastMap<::std::string, ::std::string>, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>>,
    ::apache::thrift::type::cpp_type<folly::F14NodeMap<::std::string, ::std::string>, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>>,
    ::apache::thrift::type::cpp_type<folly::F14ValueMap<::std::string, ::std::string>, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>>,
    ::apache::thrift::type::cpp_type<folly::F14VectorMap<::std::string, ::std::string>, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>>,
    ::apache::thrift::type::cpp_type<folly::sorted_vector_map<::std::string, ::std::string>, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TemplateMaps;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  TemplateMaps();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TemplateMaps(apache::thrift::FragileConstructor, std::map<::std::string, ::std::string> std_map__arg, std::unordered_map<::std::string, ::std::string> std_unordered__arg, folly::F14FastMap<::std::string, ::std::string> folly_fast__arg, folly::F14NodeMap<::std::string, ::std::string> folly_node__arg, folly::F14ValueMap<::std::string, ::std::string> folly_value__arg, folly::F14VectorMap<::std::string, ::std::string> folly_vector__arg, folly::sorted_vector_map<::std::string, ::std::string> folly_sorted_vector__arg);

  TemplateMaps(TemplateMaps&&) noexcept;

  TemplateMaps(const TemplateMaps& src);


  TemplateMaps& operator=(TemplateMaps&&) noexcept;
  TemplateMaps& operator=(const TemplateMaps& src);

  ~TemplateMaps();

 private:
  std::map<::std::string, ::std::string> __fbthrift_field_std_map;
 private:
  std::unordered_map<::std::string, ::std::string> __fbthrift_field_std_unordered;
 private:
  folly::F14FastMap<::std::string, ::std::string> __fbthrift_field_folly_fast;
 private:
  folly::F14NodeMap<::std::string, ::std::string> __fbthrift_field_folly_node;
 private:
  folly::F14ValueMap<::std::string, ::std::string> __fbthrift_field_folly_value;
 private:
  folly::F14VectorMap<::std::string, ::std::string> __fbthrift_field_folly_vector;
 private:
  folly::sorted_vector_map<::std::string, ::std::string> __fbthrift_field_folly_sorted_vector;
 private:
  apache::thrift::detail::isset_bitset<7, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const TemplateMaps&) const;
  bool operator<(const TemplateMaps&) const;

  /** Glean { "field": "std_map" } */
  template <typename..., typename fbthrift_T = std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> std_map_ref() const& {
    return {this->__fbthrift_field_std_map, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "std_map" } */
  template <typename..., typename fbthrift_T = std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> std_map_ref() & {
    return {this->__fbthrift_field_std_map, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "std_map" } */
  template <typename..., typename fbthrift_T = std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> std_map_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_std_map), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "std_map" } */
  template <typename..., typename fbthrift_T = std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> std_map() const& {
    return {this->__fbthrift_field_std_map, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "std_map" } */
  template <typename..., typename fbthrift_T = std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> std_map() & {
    return {this->__fbthrift_field_std_map, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "std_map" } */
  template <typename..., typename fbthrift_T = std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> std_map() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_std_map), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "std_unordered" } */
  template <typename..., typename fbthrift_T = std::unordered_map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> std_unordered_ref() const& {
    return {this->__fbthrift_field_std_unordered, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "std_unordered" } */
  template <typename..., typename fbthrift_T = std::unordered_map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> std_unordered_ref() & {
    return {this->__fbthrift_field_std_unordered, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "std_unordered" } */
  template <typename..., typename fbthrift_T = std::unordered_map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> std_unordered_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_std_unordered), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "std_unordered" } */
  template <typename..., typename fbthrift_T = std::unordered_map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> std_unordered() const& {
    return {this->__fbthrift_field_std_unordered, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "std_unordered" } */
  template <typename..., typename fbthrift_T = std::unordered_map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> std_unordered() & {
    return {this->__fbthrift_field_std_unordered, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "std_unordered" } */
  template <typename..., typename fbthrift_T = std::unordered_map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> std_unordered() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_std_unordered), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "folly_fast" } */
  template <typename..., typename fbthrift_T = folly::F14FastMap<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> folly_fast_ref() const& {
    return {this->__fbthrift_field_folly_fast, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "folly_fast" } */
  template <typename..., typename fbthrift_T = folly::F14FastMap<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> folly_fast_ref() & {
    return {this->__fbthrift_field_folly_fast, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "folly_fast" } */
  template <typename..., typename fbthrift_T = folly::F14FastMap<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> folly_fast_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_folly_fast), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "folly_fast" } */
  template <typename..., typename fbthrift_T = folly::F14FastMap<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> folly_fast() const& {
    return {this->__fbthrift_field_folly_fast, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "folly_fast" } */
  template <typename..., typename fbthrift_T = folly::F14FastMap<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> folly_fast() & {
    return {this->__fbthrift_field_folly_fast, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "folly_fast" } */
  template <typename..., typename fbthrift_T = folly::F14FastMap<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> folly_fast() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_folly_fast), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "folly_node" } */
  template <typename..., typename fbthrift_T = folly::F14NodeMap<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> folly_node_ref() const& {
    return {this->__fbthrift_field_folly_node, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "folly_node" } */
  template <typename..., typename fbthrift_T = folly::F14NodeMap<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> folly_node_ref() & {
    return {this->__fbthrift_field_folly_node, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "folly_node" } */
  template <typename..., typename fbthrift_T = folly::F14NodeMap<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> folly_node_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_folly_node), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "folly_node" } */
  template <typename..., typename fbthrift_T = folly::F14NodeMap<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> folly_node() const& {
    return {this->__fbthrift_field_folly_node, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "folly_node" } */
  template <typename..., typename fbthrift_T = folly::F14NodeMap<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> folly_node() & {
    return {this->__fbthrift_field_folly_node, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "folly_node" } */
  template <typename..., typename fbthrift_T = folly::F14NodeMap<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> folly_node() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_folly_node), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "folly_value" } */
  template <typename..., typename fbthrift_T = folly::F14ValueMap<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> folly_value_ref() const& {
    return {this->__fbthrift_field_folly_value, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "folly_value" } */
  template <typename..., typename fbthrift_T = folly::F14ValueMap<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> folly_value_ref() & {
    return {this->__fbthrift_field_folly_value, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "folly_value" } */
  template <typename..., typename fbthrift_T = folly::F14ValueMap<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> folly_value_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_folly_value), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "folly_value" } */
  template <typename..., typename fbthrift_T = folly::F14ValueMap<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> folly_value() const& {
    return {this->__fbthrift_field_folly_value, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "folly_value" } */
  template <typename..., typename fbthrift_T = folly::F14ValueMap<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> folly_value() & {
    return {this->__fbthrift_field_folly_value, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "folly_value" } */
  template <typename..., typename fbthrift_T = folly::F14ValueMap<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> folly_value() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_folly_value), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "folly_vector" } */
  template <typename..., typename fbthrift_T = folly::F14VectorMap<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> folly_vector_ref() const& {
    return {this->__fbthrift_field_folly_vector, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "folly_vector" } */
  template <typename..., typename fbthrift_T = folly::F14VectorMap<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> folly_vector_ref() & {
    return {this->__fbthrift_field_folly_vector, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "folly_vector" } */
  template <typename..., typename fbthrift_T = folly::F14VectorMap<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> folly_vector_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_folly_vector), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "folly_vector" } */
  template <typename..., typename fbthrift_T = folly::F14VectorMap<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> folly_vector() const& {
    return {this->__fbthrift_field_folly_vector, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "folly_vector" } */
  template <typename..., typename fbthrift_T = folly::F14VectorMap<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> folly_vector() & {
    return {this->__fbthrift_field_folly_vector, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "folly_vector" } */
  template <typename..., typename fbthrift_T = folly::F14VectorMap<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> folly_vector() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_folly_vector), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "folly_sorted_vector" } */
  template <typename..., typename fbthrift_T = folly::sorted_vector_map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> folly_sorted_vector_ref() const& {
    return {this->__fbthrift_field_folly_sorted_vector, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "folly_sorted_vector" } */
  template <typename..., typename fbthrift_T = folly::sorted_vector_map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> folly_sorted_vector_ref() & {
    return {this->__fbthrift_field_folly_sorted_vector, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "folly_sorted_vector" } */
  template <typename..., typename fbthrift_T = folly::sorted_vector_map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> folly_sorted_vector_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_folly_sorted_vector), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "folly_sorted_vector" } */
  template <typename..., typename fbthrift_T = folly::sorted_vector_map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> folly_sorted_vector() const& {
    return {this->__fbthrift_field_folly_sorted_vector, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "folly_sorted_vector" } */
  template <typename..., typename fbthrift_T = folly::sorted_vector_map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> folly_sorted_vector() & {
    return {this->__fbthrift_field_folly_sorted_vector, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "folly_sorted_vector" } */
  template <typename..., typename fbthrift_T = folly::sorted_vector_map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> folly_sorted_vector() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_folly_sorted_vector), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "std_map" } */
  [[deprecated("Use `FOO.std_map().value()` instead of `FOO.get_std_map()`")]]
  const std::map<::std::string, ::std::string>& get_std_map() const&;

  /** Glean { "field": "std_map" } */
  [[deprecated("Use `FOO.std_map().value()` instead of `FOO.get_std_map()`")]]
  std::map<::std::string, ::std::string> get_std_map() &&;

  /** Glean { "field": "std_map" } */
  template <typename T_TemplateMaps_std_map_struct_setter = std::map<::std::string, ::std::string>>
  [[deprecated("Use `FOO.std_map() = BAR` instead of `FOO.set_std_map(BAR)`")]]
  std::map<::std::string, ::std::string>& set_std_map(T_TemplateMaps_std_map_struct_setter&& std_map_) {
    std_map_ref() = std::forward<T_TemplateMaps_std_map_struct_setter>(std_map_);
    return __fbthrift_field_std_map;
  }

  /** Glean { "field": "std_unordered" } */
  [[deprecated("Use `FOO.std_unordered().value()` instead of `FOO.get_std_unordered()`")]]
  const std::unordered_map<::std::string, ::std::string>& get_std_unordered() const&;

  /** Glean { "field": "std_unordered" } */
  [[deprecated("Use `FOO.std_unordered().value()` instead of `FOO.get_std_unordered()`")]]
  std::unordered_map<::std::string, ::std::string> get_std_unordered() &&;

  /** Glean { "field": "std_unordered" } */
  template <typename T_TemplateMaps_std_unordered_struct_setter = std::unordered_map<::std::string, ::std::string>>
  [[deprecated("Use `FOO.std_unordered() = BAR` instead of `FOO.set_std_unordered(BAR)`")]]
  std::unordered_map<::std::string, ::std::string>& set_std_unordered(T_TemplateMaps_std_unordered_struct_setter&& std_unordered_) {
    std_unordered_ref() = std::forward<T_TemplateMaps_std_unordered_struct_setter>(std_unordered_);
    return __fbthrift_field_std_unordered;
  }

  /** Glean { "field": "folly_fast" } */
  [[deprecated("Use `FOO.folly_fast().value()` instead of `FOO.get_folly_fast()`")]]
  const folly::F14FastMap<::std::string, ::std::string>& get_folly_fast() const&;

  /** Glean { "field": "folly_fast" } */
  [[deprecated("Use `FOO.folly_fast().value()` instead of `FOO.get_folly_fast()`")]]
  folly::F14FastMap<::std::string, ::std::string> get_folly_fast() &&;

  /** Glean { "field": "folly_fast" } */
  template <typename T_TemplateMaps_folly_fast_struct_setter = folly::F14FastMap<::std::string, ::std::string>>
  [[deprecated("Use `FOO.folly_fast() = BAR` instead of `FOO.set_folly_fast(BAR)`")]]
  folly::F14FastMap<::std::string, ::std::string>& set_folly_fast(T_TemplateMaps_folly_fast_struct_setter&& folly_fast_) {
    folly_fast_ref() = std::forward<T_TemplateMaps_folly_fast_struct_setter>(folly_fast_);
    return __fbthrift_field_folly_fast;
  }

  /** Glean { "field": "folly_node" } */
  [[deprecated("Use `FOO.folly_node().value()` instead of `FOO.get_folly_node()`")]]
  const folly::F14NodeMap<::std::string, ::std::string>& get_folly_node() const&;

  /** Glean { "field": "folly_node" } */
  [[deprecated("Use `FOO.folly_node().value()` instead of `FOO.get_folly_node()`")]]
  folly::F14NodeMap<::std::string, ::std::string> get_folly_node() &&;

  /** Glean { "field": "folly_node" } */
  template <typename T_TemplateMaps_folly_node_struct_setter = folly::F14NodeMap<::std::string, ::std::string>>
  [[deprecated("Use `FOO.folly_node() = BAR` instead of `FOO.set_folly_node(BAR)`")]]
  folly::F14NodeMap<::std::string, ::std::string>& set_folly_node(T_TemplateMaps_folly_node_struct_setter&& folly_node_) {
    folly_node_ref() = std::forward<T_TemplateMaps_folly_node_struct_setter>(folly_node_);
    return __fbthrift_field_folly_node;
  }

  /** Glean { "field": "folly_value" } */
  [[deprecated("Use `FOO.folly_value().value()` instead of `FOO.get_folly_value()`")]]
  const folly::F14ValueMap<::std::string, ::std::string>& get_folly_value() const&;

  /** Glean { "field": "folly_value" } */
  [[deprecated("Use `FOO.folly_value().value()` instead of `FOO.get_folly_value()`")]]
  folly::F14ValueMap<::std::string, ::std::string> get_folly_value() &&;

  /** Glean { "field": "folly_value" } */
  template <typename T_TemplateMaps_folly_value_struct_setter = folly::F14ValueMap<::std::string, ::std::string>>
  [[deprecated("Use `FOO.folly_value() = BAR` instead of `FOO.set_folly_value(BAR)`")]]
  folly::F14ValueMap<::std::string, ::std::string>& set_folly_value(T_TemplateMaps_folly_value_struct_setter&& folly_value_) {
    folly_value_ref() = std::forward<T_TemplateMaps_folly_value_struct_setter>(folly_value_);
    return __fbthrift_field_folly_value;
  }

  /** Glean { "field": "folly_vector" } */
  [[deprecated("Use `FOO.folly_vector().value()` instead of `FOO.get_folly_vector()`")]]
  const folly::F14VectorMap<::std::string, ::std::string>& get_folly_vector() const&;

  /** Glean { "field": "folly_vector" } */
  [[deprecated("Use `FOO.folly_vector().value()` instead of `FOO.get_folly_vector()`")]]
  folly::F14VectorMap<::std::string, ::std::string> get_folly_vector() &&;

  /** Glean { "field": "folly_vector" } */
  template <typename T_TemplateMaps_folly_vector_struct_setter = folly::F14VectorMap<::std::string, ::std::string>>
  [[deprecated("Use `FOO.folly_vector() = BAR` instead of `FOO.set_folly_vector(BAR)`")]]
  folly::F14VectorMap<::std::string, ::std::string>& set_folly_vector(T_TemplateMaps_folly_vector_struct_setter&& folly_vector_) {
    folly_vector_ref() = std::forward<T_TemplateMaps_folly_vector_struct_setter>(folly_vector_);
    return __fbthrift_field_folly_vector;
  }

  /** Glean { "field": "folly_sorted_vector" } */
  [[deprecated("Use `FOO.folly_sorted_vector().value()` instead of `FOO.get_folly_sorted_vector()`")]]
  const folly::sorted_vector_map<::std::string, ::std::string>& get_folly_sorted_vector() const&;

  /** Glean { "field": "folly_sorted_vector" } */
  [[deprecated("Use `FOO.folly_sorted_vector().value()` instead of `FOO.get_folly_sorted_vector()`")]]
  folly::sorted_vector_map<::std::string, ::std::string> get_folly_sorted_vector() &&;

  /** Glean { "field": "folly_sorted_vector" } */
  template <typename T_TemplateMaps_folly_sorted_vector_struct_setter = folly::sorted_vector_map<::std::string, ::std::string>>
  [[deprecated("Use `FOO.folly_sorted_vector() = BAR` instead of `FOO.set_folly_sorted_vector(BAR)`")]]
  folly::sorted_vector_map<::std::string, ::std::string>& set_folly_sorted_vector(T_TemplateMaps_folly_sorted_vector_struct_setter&& folly_sorted_vector_) {
    folly_sorted_vector_ref() = std::forward<T_TemplateMaps_folly_sorted_vector_struct_setter>(folly_sorted_vector_);
    return __fbthrift_field_folly_sorted_vector;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TemplateMaps>;
  friend void swap(TemplateMaps& a, TemplateMaps& b);
};

template <class Protocol_>
unsigned long TemplateMaps::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/containers.thrift", "name": "TWrapped", "kind": "struct" } */
class TWrapped final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "containers";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::fieldA,
    ::apache::thrift::ident::fieldB
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::binary_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TWrapped;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  TWrapped();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TWrapped(apache::thrift::FragileConstructor, ::std::string fieldA__arg, ::std::string fieldB__arg);

  TWrapped(TWrapped&&) noexcept;

  TWrapped(const TWrapped& src);


  TWrapped& operator=(TWrapped&&) noexcept;
  TWrapped& operator=(const TWrapped& src);

  ~TWrapped();

 private:
  ::std::string __fbthrift_field_fieldA;
 private:
  ::std::string __fbthrift_field_fieldB;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const TWrapped&) const;
  bool operator<(const TWrapped&) const;

  /** Glean { "field": "fieldA" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldA_ref() const& {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "fieldA" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldA_ref() & {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "fieldA" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldA_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldA), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "fieldA" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldA() const& {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "fieldA" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldA() & {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "fieldA" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldA() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldA), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "fieldB" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldB_ref() const& {
    return {this->__fbthrift_field_fieldB, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "fieldB" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldB_ref() & {
    return {this->__fbthrift_field_fieldB, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "fieldB" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldB_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldB), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "fieldB" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldB() const& {
    return {this->__fbthrift_field_fieldB, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "fieldB" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldB() & {
    return {this->__fbthrift_field_fieldB, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "fieldB" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldB() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldB), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "fieldA" } */
  [[deprecated("Use `FOO.fieldA().value()` instead of `FOO.get_fieldA()`")]]
  const ::std::string& get_fieldA() const& {
    return __fbthrift_field_fieldA;
  }

  /** Glean { "field": "fieldA" } */
  [[deprecated("Use `FOO.fieldA().value()` instead of `FOO.get_fieldA()`")]]
  ::std::string get_fieldA() && {
    return static_cast<::std::string&&>(__fbthrift_field_fieldA);
  }

  /** Glean { "field": "fieldA" } */
  template <typename T_TWrapped_fieldA_struct_setter = ::std::string>
  [[deprecated("Use `FOO.fieldA() = BAR` instead of `FOO.set_fieldA(BAR)`")]]
  ::std::string& set_fieldA(T_TWrapped_fieldA_struct_setter&& fieldA_) {
    fieldA_ref() = std::forward<T_TWrapped_fieldA_struct_setter>(fieldA_);
    return __fbthrift_field_fieldA;
  }

  /** Glean { "field": "fieldB" } */
  [[deprecated("Use `FOO.fieldB().value()` instead of `FOO.get_fieldB()`")]]
  const ::std::string& get_fieldB() const& {
    return __fbthrift_field_fieldB;
  }

  /** Glean { "field": "fieldB" } */
  [[deprecated("Use `FOO.fieldB().value()` instead of `FOO.get_fieldB()`")]]
  ::std::string get_fieldB() && {
    return static_cast<::std::string&&>(__fbthrift_field_fieldB);
  }

  /** Glean { "field": "fieldB" } */
  template <typename T_TWrapped_fieldB_struct_setter = ::std::string>
  [[deprecated("Use `FOO.fieldB() = BAR` instead of `FOO.set_fieldB(BAR)`")]]
  ::std::string& set_fieldB(T_TWrapped_fieldB_struct_setter&& fieldB_) {
    fieldB_ref() = std::forward<T_TWrapped_fieldB_struct_setter>(fieldB_);
    return __fbthrift_field_fieldB;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TWrapped>;
  friend void swap(TWrapped& a, TWrapped& b);
};

template <class Protocol_>
unsigned long TWrapped::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/containers.thrift", "name": "IndirectionA", "kind": "struct" } */
class IndirectionA final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "containers";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::lst
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::struct_t<::test::fixtures::python_capi::TWrapped>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = IndirectionA;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  IndirectionA();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  IndirectionA(apache::thrift::FragileConstructor, ::test::fixtures::python_capi::ListOfWrapped lst__arg);

  IndirectionA(IndirectionA&&) noexcept;

  IndirectionA(const IndirectionA& src);


  IndirectionA& operator=(IndirectionA&&) noexcept;
  IndirectionA& operator=(const IndirectionA& src);

  ~IndirectionA();

 private:
  ::test::fixtures::python_capi::ListOfWrapped __fbthrift_field_lst;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const IndirectionA&) const;
  bool operator<(const IndirectionA&) const;

  /** Glean { "field": "lst" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::ListOfWrapped>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lst_ref() const& {
    return {this->__fbthrift_field_lst, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lst" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::ListOfWrapped>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lst_ref() & {
    return {this->__fbthrift_field_lst, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lst" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::ListOfWrapped>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lst_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lst), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lst" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::ListOfWrapped>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lst() const& {
    return {this->__fbthrift_field_lst, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lst" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::ListOfWrapped>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lst() & {
    return {this->__fbthrift_field_lst, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lst" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::ListOfWrapped>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lst() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lst), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lst" } */
  [[deprecated("Use `FOO.lst().value()` instead of `FOO.get_lst()`")]]
  const ::test::fixtures::python_capi::ListOfWrapped& get_lst() const&;

  /** Glean { "field": "lst" } */
  [[deprecated("Use `FOO.lst().value()` instead of `FOO.get_lst()`")]]
  ::test::fixtures::python_capi::ListOfWrapped get_lst() &&;

  /** Glean { "field": "lst" } */
  template <typename T_IndirectionA_lst_struct_setter = ::test::fixtures::python_capi::ListOfWrapped>
  [[deprecated("Use `FOO.lst() = BAR` instead of `FOO.set_lst(BAR)`")]]
  ::test::fixtures::python_capi::ListOfWrapped& set_lst(T_IndirectionA_lst_struct_setter&& lst_) {
    lst_ref() = std::forward<T_IndirectionA_lst_struct_setter>(lst_);
    return __fbthrift_field_lst;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<IndirectionA>;
  friend void swap(IndirectionA& a, IndirectionA& b);
};

template <class Protocol_>
unsigned long IndirectionA::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/containers.thrift", "name": "IndirectionB", "kind": "struct" } */
class IndirectionB final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "containers";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::lst
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::cpp_type<std::vector<::test::fixtures::python_capi::TWrapped>, ::apache::thrift::type::list<::apache::thrift::type::struct_t<::test::fixtures::python_capi::TWrapped>>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = IndirectionB;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  IndirectionB();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  IndirectionB(apache::thrift::FragileConstructor, ::test::fixtures::python_capi::VecOfWrapped lst__arg);

  IndirectionB(IndirectionB&&) noexcept;

  IndirectionB(const IndirectionB& src);


  IndirectionB& operator=(IndirectionB&&) noexcept;
  IndirectionB& operator=(const IndirectionB& src);

  ~IndirectionB();

 private:
  ::test::fixtures::python_capi::VecOfWrapped __fbthrift_field_lst;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const IndirectionB&) const;
  bool operator<(const IndirectionB&) const;

  /** Glean { "field": "lst" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::VecOfWrapped>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lst_ref() const& {
    return {this->__fbthrift_field_lst, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lst" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::VecOfWrapped>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lst_ref() & {
    return {this->__fbthrift_field_lst, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lst" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::VecOfWrapped>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lst_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lst), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lst" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::VecOfWrapped>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lst() const& {
    return {this->__fbthrift_field_lst, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lst" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::VecOfWrapped>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lst() & {
    return {this->__fbthrift_field_lst, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lst" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::VecOfWrapped>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lst() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lst), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lst" } */
  [[deprecated("Use `FOO.lst().value()` instead of `FOO.get_lst()`")]]
  const ::test::fixtures::python_capi::VecOfWrapped& get_lst() const&;

  /** Glean { "field": "lst" } */
  [[deprecated("Use `FOO.lst().value()` instead of `FOO.get_lst()`")]]
  ::test::fixtures::python_capi::VecOfWrapped get_lst() &&;

  /** Glean { "field": "lst" } */
  template <typename T_IndirectionB_lst_struct_setter = ::test::fixtures::python_capi::VecOfWrapped>
  [[deprecated("Use `FOO.lst() = BAR` instead of `FOO.set_lst(BAR)`")]]
  ::test::fixtures::python_capi::VecOfWrapped& set_lst(T_IndirectionB_lst_struct_setter&& lst_) {
    lst_ref() = std::forward<T_IndirectionB_lst_struct_setter>(lst_);
    return __fbthrift_field_lst;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<IndirectionB>;
  friend void swap(IndirectionB& a, IndirectionB& b);
};

template <class Protocol_>
unsigned long IndirectionB::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/containers.thrift", "name": "IndirectionC", "kind": "struct" } */
class IndirectionC final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "containers";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::lst
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::struct_t<::test::fixtures::python_capi::TWrapped>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = IndirectionC;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  IndirectionC();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  IndirectionC(apache::thrift::FragileConstructor, ::test::fixtures::python_capi::ListOfWrappedAlias lst__arg);

  IndirectionC(IndirectionC&&) noexcept;

  IndirectionC(const IndirectionC& src);


  IndirectionC& operator=(IndirectionC&&) noexcept;
  IndirectionC& operator=(const IndirectionC& src);

  ~IndirectionC();

 private:
  ::test::fixtures::python_capi::ListOfWrappedAlias __fbthrift_field_lst;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const IndirectionC&) const;
  bool operator<(const IndirectionC&) const;

  /** Glean { "field": "lst" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::ListOfWrappedAlias>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lst_ref() const& {
    return {this->__fbthrift_field_lst, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lst" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::ListOfWrappedAlias>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lst_ref() & {
    return {this->__fbthrift_field_lst, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lst" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::ListOfWrappedAlias>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lst_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lst), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lst" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::ListOfWrappedAlias>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lst() const& {
    return {this->__fbthrift_field_lst, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lst" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::ListOfWrappedAlias>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lst() & {
    return {this->__fbthrift_field_lst, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lst" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::ListOfWrappedAlias>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lst() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lst), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lst" } */
  [[deprecated("Use `FOO.lst().value()` instead of `FOO.get_lst()`")]]
  const ::test::fixtures::python_capi::ListOfWrappedAlias& get_lst() const&;

  /** Glean { "field": "lst" } */
  [[deprecated("Use `FOO.lst().value()` instead of `FOO.get_lst()`")]]
  ::test::fixtures::python_capi::ListOfWrappedAlias get_lst() &&;

  /** Glean { "field": "lst" } */
  template <typename T_IndirectionC_lst_struct_setter = ::test::fixtures::python_capi::ListOfWrappedAlias>
  [[deprecated("Use `FOO.lst() = BAR` instead of `FOO.set_lst(BAR)`")]]
  ::test::fixtures::python_capi::ListOfWrappedAlias& set_lst(T_IndirectionC_lst_struct_setter&& lst_) {
    lst_ref() = std::forward<T_IndirectionC_lst_struct_setter>(lst_);
    return __fbthrift_field_lst;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<IndirectionC>;
  friend void swap(IndirectionC& a, IndirectionC& b);
};

template <class Protocol_>
unsigned long IndirectionC::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace test::fixtures::python_capi

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::test::fixtures::python_capi::TemplateLists, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -4917736979722623495;
  static constexpr ::std::string_view definitionKey = {"\xc0\x5d\x74\x2b\x61\x67\x04\x66\x3c\x5f\x12\x6f\x1b\x46\x38\x94", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::python_capi::TemplateSets, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -4917736979722623495;
  static constexpr ::std::string_view definitionKey = {"\x8a\x64\xcf\xcb\x78\xf8\xf0\xaf\x11\x00\x58\x88\x04\x15\x30\xcf", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::python_capi::TemplateMaps, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -4917736979722623495;
  static constexpr ::std::string_view definitionKey = {"\x1c\x39\x69\xec\x77\xc4\x14\xbe\x16\xd4\x3b\x56\x77\x2b\xb4\xf6", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::python_capi::TWrapped, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -4917736979722623495;
  static constexpr ::std::string_view definitionKey = {"\x29\x29\x4d\x20\x3e\x7f\x89\x86\x25\x6b\x62\xbd\xb5\x11\xf4\x56", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::python_capi::IndirectionA, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -4917736979722623495;
  static constexpr ::std::string_view definitionKey = {"\x4b\x6d\x76\x4f\x70\x10\x94\xbd\xdf\x5a\x90\x34\x10\x72\xc2\xc1", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::python_capi::IndirectionB, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -4917736979722623495;
  static constexpr ::std::string_view definitionKey = {"\x1e\x49\x8e\xef\x4a\x37\x7b\x40\xe1\x3b\xf7\x37\xac\x90\x11\xb3", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::python_capi::IndirectionC, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -4917736979722623495;
  static constexpr ::std::string_view definitionKey = {"\xe2\x6f\xe1\x5a\xbb\x49\x4a\xf6\x5a\xd5\xcd\x38\x4a\x85\x4c\x8e", 16};
};
} // namespace apache::thrift::detail
