---- real collections: compact ----
object(TestStruct) (3) {
  ["aList"]=>
  object(HH\Vector) (3) {
    [0]=>
    float(13.3)
    [1]=>
    float(23.4)
    [2]=>
    float(3576.2)
  }
  ["aMap"]=>
  object(HH\Map) (2) {
    [10]=>
    float(1.2)
    [43]=>
    float(5.33)
  }
  ["aSet"]=>
  object(HH\Set) (2) {
    int(10)
    int(11)
  }
}
---- real collections: binary ----
object(TestStruct) (3) {
  ["aList"]=>
  object(HH\Vector) (3) {
    [0]=>
    float(13.3)
    [1]=>
    float(23.4)
    [2]=>
    float(3576.2)
  }
  ["aMap"]=>
  object(HH\Map) (2) {
    [10]=>
    float(1.2)
    [43]=>
    float(5.33)
  }
  ["aSet"]=>
  object(HH\Set) (2) {
    int(10)
    int(11)
  }
}
---- hack arrays: compact ----
object(TestStruct) (3) {
  ["aList"]=>
  object(HH\Vector) (3) {
    [0]=>
    float(13.3)
    [1]=>
    float(23.4)
    [2]=>
    float(3576.2)
  }
  ["aMap"]=>
  object(HH\Map) (2) {
    [10]=>
    float(1.2)
    [43]=>
    float(5.33)
  }
  ["aSet"]=>
  object(HH\Set) (2) {
    int(10)
    int(11)
  }
}
---- hack arrays: binary ----
object(TestStruct) (3) {
  ["aList"]=>
  object(HH\Vector) (3) {
    [0]=>
    float(13.3)
    [1]=>
    float(23.4)
    [2]=>
    float(3576.2)
  }
  ["aMap"]=>
  object(HH\Map) (2) {
    [10]=>
    float(1.2)
    [43]=>
    float(5.33)
  }
  ["aSet"]=>
  object(HH\Set) (2) {
    int(10)
    int(11)
  }
}
---- php arrays: compact ----
object(TestStruct) (3) {
  ["aList"]=>
  object(HH\Vector) (3) {
    [0]=>
    float(13.3)
    [1]=>
    float(23.4)
    [2]=>
    float(3576.2)
  }
  ["aMap"]=>
  object(HH\Map) (2) {
    [10]=>
    float(1.2)
    [43]=>
    float(5.33)
  }
  ["aSet"]=>
  object(HH\Set) (2) {
    int(10)
    int(11)
  }
}
---- php arrays: binary ----
object(TestStruct) (3) {
  ["aList"]=>
  object(HH\Vector) (3) {
    [0]=>
    float(13.3)
    [1]=>
    float(23.4)
    [2]=>
    float(3576.2)
  }
  ["aMap"]=>
  object(HH\Map) (2) {
    [10]=>
    float(1.2)
    [43]=>
    float(5.33)
  }
  ["aSet"]=>
  object(HH\Set) (2) {
    int(10)
    int(11)
  }
}
---- sadly, this is legal: compact ----
object(TestStruct) (3) {
  ["aList"]=>
  object(HH\Vector) (3) {
    [0]=>
    float(13.3)
    [1]=>
    float(23.4)
    [2]=>
    float(3576.2)
  }
  ["aMap"]=>
  object(HH\Map) (2) {
    [10]=>
    float(1.2)
    [43]=>
    float(5.33)
  }
  ["aSet"]=>
  object(HH\Set) (2) {
    int(10)
    int(11)
  }
}
---- sadly, this is legal: binary ----
object(TestStruct) (3) {
  ["aList"]=>
  object(HH\Vector) (3) {
    [0]=>
    float(13.3)
    [1]=>
    float(23.4)
    [2]=>
    float(3576.2)
  }
  ["aMap"]=>
  object(HH\Map) (2) {
    [10]=>
    float(1.2)
    [43]=>
    float(5.33)
  }
  ["aSet"]=>
  object(HH\Set) (2) {
    int(10)
    int(11)
  }
}
