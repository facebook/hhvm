/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/types/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/visitation/visit_by_thrift_field_metadata.h>
#include "thrift/compiler/test/fixtures/types/gen-cpp2/module_metadata.h"

namespace apache {
namespace thrift {
namespace detail {

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::empty_struct> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::empty_struct");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::decorated_struct> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).field_ref());
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::decorated_struct");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::ContainerStruct> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 12:
      return f(0, static_cast<T&&>(t).fieldA_ref());
    case 2:
      return f(1, static_cast<T&&>(t).fieldB_ref());
    case 3:
      return f(2, static_cast<T&&>(t).fieldC_ref());
    case 4:
      return f(3, static_cast<T&&>(t).fieldD_ref());
    case 5:
      return f(4, static_cast<T&&>(t).fieldE_ref());
    case 6:
      return f(5, static_cast<T&&>(t).fieldF_ref());
    case 7:
      return f(6, static_cast<T&&>(t).fieldG_ref());
    case 8:
      return f(7, static_cast<T&&>(t).fieldH_ref());
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::ContainerStruct");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::CppTypeStruct> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).fieldA_ref());
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::CppTypeStruct");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::VirtualStruct> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).MyIntField_ref());
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::VirtualStruct");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).a_ref());
    case 2:
      return f(1, static_cast<T&&>(t).b_ref());
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::MyStructWithForwardRefEnum");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::TrivialNumeric> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).a_ref());
    case 2:
      return f(1, static_cast<T&&>(t).b_ref());
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::TrivialNumeric");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::TrivialNestedWithDefault> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).z_ref());
    case 2:
      return f(1, static_cast<T&&>(t).n_ref());
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::TrivialNestedWithDefault");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::ComplexString> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).a_ref());
    case 2:
      return f(1, static_cast<T&&>(t).b_ref());
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::ComplexString");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::ComplexNestedWithDefault> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).z_ref());
    case 2:
      return f(1, static_cast<T&&>(t).n_ref());
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::ComplexNestedWithDefault");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::MinPadding> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).small_ref());
    case 2:
      return f(1, static_cast<T&&>(t).big_ref());
    case 3:
      return f(2, static_cast<T&&>(t).medium_ref());
    case 4:
      return f(3, static_cast<T&&>(t).biggish_ref());
    case 5:
      return f(4, static_cast<T&&>(t).tiny_ref());
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::MinPadding");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::MinPaddingWithCustomType> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).small_ref());
    case 2:
      return f(1, static_cast<T&&>(t).big_ref());
    case 3:
      return f(2, static_cast<T&&>(t).medium_ref());
    case 4:
      return f(3, static_cast<T&&>(t).biggish_ref());
    case 5:
      return f(4, static_cast<T&&>(t).tiny_ref());
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::MinPaddingWithCustomType");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::MyStruct> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).MyIntField_ref());
    case 2:
      return f(1, static_cast<T&&>(t).MyStringField_ref());
    case 3:
      return f(2, static_cast<T&&>(t).majorVer_ref());
    case 4:
      return f(3, static_cast<T&&>(t).data_ref());
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::MyStruct");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::MyDataItem> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::MyDataItem");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::Renamed> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).bar_ref());
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::Renamed");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::AnnotatedTypes> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).binary_field_ref());
    case 2:
      return f(1, static_cast<T&&>(t).list_field_ref());
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::AnnotatedTypes");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::ForwardUsageRoot> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).ForwardUsageStruct_ref());
    case 2:
      return f(1, static_cast<T&&>(t).ForwardUsageByRef_ref());
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::ForwardUsageRoot");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::ForwardUsageStruct> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).foo_ref());
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::ForwardUsageStruct");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::ForwardUsageByRef> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).foo_ref());
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::ForwardUsageByRef");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::IncompleteMap> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).field_ref());
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::IncompleteMap");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::IncompleteMapDep> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::IncompleteMapDep");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::CompleteMap> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).field_ref());
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::CompleteMap");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::CompleteMapDep> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::CompleteMapDep");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::IncompleteList> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).field_ref());
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::IncompleteList");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::IncompleteListDep> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::IncompleteListDep");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::CompleteList> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).field_ref());
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::CompleteList");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::CompleteListDep> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::CompleteListDep");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::AdaptedList> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).field_ref());
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::AdaptedList");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::detail::AdaptedListDep> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).field_ref());
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::detail::AdaptedListDep");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::DependentAdaptedList> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).field_ref());
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::DependentAdaptedList");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).field_ref());
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::detail::DependentAdaptedListDep");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::AllocatorAware> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).aa_list_ref());
    case 2:
      return f(1, static_cast<T&&>(t).aa_set_ref());
    case 3:
      return f(2, static_cast<T&&>(t).aa_map_ref());
    case 4:
      return f(3, static_cast<T&&>(t).aa_string_ref());
    case 5:
      return f(4, static_cast<T&&>(t).not_a_container_ref());
    case 6:
      return f(5, static_cast<T&&>(t).aa_unique_ref());
    case 7:
      return f(6, static_cast<T&&>(t).aa_shared_ref());
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::AllocatorAware");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::AllocatorAware2> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).not_a_container_ref());
    case 2:
      return f(1, static_cast<T&&>(t).box_field_ref());
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::AllocatorAware2");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::TypedefStruct> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).i32_field_ref());
    case 2:
      return f(1, static_cast<T&&>(t).IntTypedef_field_ref());
    case 3:
      return f(2, static_cast<T&&>(t).UintTypedef_field_ref());
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::TypedefStruct");
    }
  }
};

template <>
struct VisitByFieldId<::apache::thrift::fixtures::types::StructWithDoubleUnderscores> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).__field_ref());
    default:
      throwInvalidThriftId(fieldId, "::apache::thrift::fixtures::types::StructWithDoubleUnderscores");
    }
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
