[(Fun
    { Aast.AnnotatedAST.f_annotation = (); f_mode = <opaque>;
      f_ret =
      (Some ([5:23-25],
             (Hoption ([5:24-25], (Happly (([5:24-25], "\\A"), []))))));
      f_name = ([5:10-19], "\\get_A_opt"); f_tparams = [];
      f_where_constraints = []; f_variadic = FVnonVariadic; f_params = [];
      f_body =
      (NamedBody
         { Aast.AnnotatedAST.fnb_nast =
           [(Return ([6:3-18],
               (Some (([6:10-17], A),
                      (New ((([6:14-15], A), (CI (([6:14-15], "\\A"), []))),
                         [], []))))
               ))
             ];
           fnb_unsafe = false });
      f_fun_kind = FSync; f_user_attributes = []; f_ret_by_ref = false;
      f_external = false });
  (Fun
     { Aast.AnnotatedAST.f_annotation = (); f_mode = <opaque>;
       f_ret = (Some ([9:20-24], (Hprim Tvoid)));
       f_name = ([9:10-16], "\\fwhile"); f_tparams = [];
       f_where_constraints = []; f_variadic = FVnonVariadic; f_params = [];
       f_body =
       (NamedBody
          { Aast.AnnotatedAST.fnb_nast =
            [(Expr
                (([10:3-15], A),
                 (Binop ((Eq None), (([10:3-5], A), (Lvar ([10:3-5], $x))),
                    (([10:8-15], A),
                     (New ((([10:12-13], A), (CI (([10:12-13], "\\A"), []))),
                        [], [])))
                    ))));
              (While ((([11:10-12], ?A), (Lvar ([11:10-12], $x))),
                 [(Expr
                     (([12:5-21], ?A),
                      (Binop ((Eq None),
                         (([12:5-7], ?A), (Lvar ([12:5-7], $x))),
                         (([12:10-21], ?A),
                          (Call (Cnormal,
                             (([12:10-19], (function(): ?A)),
                              (Id ([12:10-19], "\\get_A_opt"))),
                             [], [], [])))
                         ))))
                   ]
                 ))
              ];
            fnb_unsafe = false });
       f_fun_kind = FSync; f_user_attributes = []; f_ret_by_ref = false;
       f_external = false });
  (Fun
     { Aast.AnnotatedAST.f_annotation = (); f_mode = <opaque>;
       f_ret = (Some ([16:18-22], (Hprim Tvoid)));
       f_name = ([16:10-14], "\\ffor"); f_tparams = [];
       f_where_constraints = []; f_variadic = FVnonVariadic; f_params = [];
       f_body =
       (NamedBody
          { Aast.AnnotatedAST.fnb_nast =
            [(For (
                (([17:8-20], (A)),
                 (Expr_list
                    [(([17:8-20], A),
                      (Binop ((Eq None),
                         (([17:8-10], A), (Lvar ([17:8-10], $x))),
                         (([17:13-20], A),
                          (New (
                             (([17:17-18], A), (CI (([17:17-18], "\\A"), []))),
                             [], [])))
                         )))
                      ])),
                (([17:22-24], (?A)),
                 (Expr_list [(([17:22-24], ?A), (Lvar ([17:22-24], $x)))])),
                (([17:26-42], (?A)),
                 (Expr_list
                    [(([17:26-42], ?A),
                      (Binop ((Eq None),
                         (([17:26-28], ?A), (Lvar ([17:26-28], $x))),
                         (([17:31-42], ?A),
                          (Call (Cnormal,
                             (([17:31-40], (function(): ?A)),
                              (Id ([17:31-40], "\\get_A_opt"))),
                             [], [], [])))
                         )))
                      ])),
                []))
              ];
            fnb_unsafe = false });
       f_fun_kind = FSync; f_user_attributes = []; f_ret_by_ref = false;
       f_external = false });
  (Class
     { Aast.AnnotatedAST.c_annotation = (); c_mode = <opaque>;
       c_final = false; c_is_xhp = false; c_kind = Cnormal;
       c_name = ([3:7-8], "\\A"); c_tparams = <opaque>; c_extends = [];
       c_uses = []; c_xhp_attr_uses = []; c_xhp_category = [];
       c_req_extends = []; c_req_implements = []; c_implements = [];
       c_consts = []; c_typeconsts = []; c_static_vars = []; c_vars = [];
       c_constructor = None; c_static_methods = []; c_methods = [];
       c_user_attributes = []; c_enum = None })
  ]
