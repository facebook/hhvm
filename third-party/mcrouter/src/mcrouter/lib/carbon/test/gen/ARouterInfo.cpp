/*
 *  Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 *  This source code is licensed under the MIT license found in the LICENSE
 *  file in the root directory of this source tree.
 *
 */

/*
 *  THIS FILE IS AUTOGENERATED. DO NOT MODIFY IT; ALL CHANGES WILL BE LOST IN
 *  VAIN.
 *
 *  @generated
 */
#include "ARouterInfo.h"

#include <unordered_map>

#include <folly/Range.h>
#include <folly/dynamic.h>

#include <mcrouter/routes/ExtraRouteHandleProviderIf.h>
#include <mcrouter/routes/McRouteHandleProvider.h>

#include <mcrouter/lib/routes/NullRoute.h>
#include <mcrouter/routes/AllAsyncRouteFactory.h>
#include <mcrouter/routes/AllFastestRouteFactory.h>
#include <mcrouter/routes/AllInitialRouteFactory.h>
#include <mcrouter/routes/AllMajorityRouteFactory.h>
#include <mcrouter/routes/AllSyncRouteFactory.h>
#include <mcrouter/routes/BigValueRoute.h>
#include <mcrouter/routes/BlackholeRoute.h>
#include <mcrouter/routes/DevNullRoute.h>
#include <mcrouter/routes/ErrorRoute.h>
#include <mcrouter/routes/FailoverRoute.h>
#include <mcrouter/routes/HashRouteFactory.h>
#include <mcrouter/routes/HostIdRouteFactory.h>
#include <mcrouter/routes/LatencyInjectionRoute.h>
#include <mcrouter/routes/LatestRoute.h>
#include <mcrouter/routes/LoadBalancerRoute.h>
#include <mcrouter/routes/LoggingRoute.h>
#include <mcrouter/routes/MigrateRouteFactory.h>
#include <mcrouter/routes/MissFailoverRoute.h>
#include <mcrouter/routes/ModifyKeyRoute.h>
#include <mcrouter/routes/OperationSelectorRoute.h>
#include <mcrouter/routes/OutstandingLimitRoute.h>
#include <mcrouter/routes/RandomRouteFactory.h>

#include <mcrouter/routes/McExtraRouteHandleProvider.h>

using namespace facebook::memcache;
using namespace facebook::memcache::mcrouter;

namespace facebook {
namespace memcache {
namespace mcrouter {

extern template carbon::test::A::ARouterInfo::RouteHandlePtr
makeAllAsyncRoute<carbon::test::A::ARouterInfo>(
RouteHandleFactory<carbon::test::A::ARouterInfo::RouteHandleIf>& factory,
const folly::dynamic& json);

extern template carbon::test::A::ARouterInfo::RouteHandlePtr
makeAllFastestRoute<carbon::test::A::ARouterInfo>(
RouteHandleFactory<carbon::test::A::ARouterInfo::RouteHandleIf>& factory,
const folly::dynamic& json);

extern template carbon::test::A::ARouterInfo::RouteHandlePtr
makeAllInitialRoute<carbon::test::A::ARouterInfo>(
RouteHandleFactory<carbon::test::A::ARouterInfo::RouteHandleIf>& factory,
const folly::dynamic& json);

extern template carbon::test::A::ARouterInfo::RouteHandlePtr
makeAllMajorityRoute<carbon::test::A::ARouterInfo>(
RouteHandleFactory<carbon::test::A::ARouterInfo::RouteHandleIf>& factory,
const folly::dynamic& json);

extern template carbon::test::A::ARouterInfo::RouteHandlePtr
makeAllSyncRoute<carbon::test::A::ARouterInfo>(
RouteHandleFactory<carbon::test::A::ARouterInfo::RouteHandleIf>& factory,
const folly::dynamic& json);

extern template carbon::test::A::ARouterInfo::RouteHandlePtr
makeBigValueRoute<carbon::test::A::ARouterInfo>(
RouteHandleFactory<carbon::test::A::ARouterInfo::RouteHandleIf>& factory,
const folly::dynamic& json);

extern template carbon::test::A::ARouterInfo::RouteHandlePtr
makeBlackholeRoute<carbon::test::A::ARouterInfo>(
RouteHandleFactory<carbon::test::A::ARouterInfo::RouteHandleIf>& factory,
const folly::dynamic& json);

extern template carbon::test::A::ARouterInfo::RouteHandlePtr
makeDevNullRoute<carbon::test::A::ARouterInfo>(
RouteHandleFactory<carbon::test::A::ARouterInfo::RouteHandleIf>& factory,
const folly::dynamic& json);

extern template carbon::test::A::ARouterInfo::RouteHandlePtr
makeErrorRoute<carbon::test::A::ARouterInfo>(
RouteHandleFactory<carbon::test::A::ARouterInfo::RouteHandleIf>& factory,
const folly::dynamic& json);

extern template carbon::test::A::ARouterInfo::RouteHandlePtr
makeHostIdRoute<carbon::test::A::ARouterInfo>(
RouteHandleFactory<carbon::test::A::ARouterInfo::RouteHandleIf>& factory,
const folly::dynamic& json);

extern template carbon::test::A::ARouterInfo::RouteHandlePtr
makeLatencyInjectionRoute<carbon::test::A::ARouterInfo>(
RouteHandleFactory<carbon::test::A::ARouterInfo::RouteHandleIf>& factory,
const folly::dynamic& json);

extern template carbon::test::A::ARouterInfo::RouteHandlePtr
makeLatestRoute<carbon::test::A::ARouterInfo>(
RouteHandleFactory<carbon::test::A::ARouterInfo::RouteHandleIf>& factory,
const folly::dynamic& json);

extern template carbon::test::A::ARouterInfo::RouteHandlePtr
makeLoadBalancerRoute<carbon::test::A::ARouterInfo>(
RouteHandleFactory<carbon::test::A::ARouterInfo::RouteHandleIf>& factory,
const folly::dynamic& json);

extern template carbon::test::A::ARouterInfo::RouteHandlePtr
makeLoggingRoute<carbon::test::A::ARouterInfo>(
RouteHandleFactory<carbon::test::A::ARouterInfo::RouteHandleIf>& factory,
const folly::dynamic& json);

extern template carbon::test::A::ARouterInfo::RouteHandlePtr
makeMigrateRoute<carbon::test::A::ARouterInfo>(
RouteHandleFactory<carbon::test::A::ARouterInfo::RouteHandleIf>& factory,
const folly::dynamic& json);

extern template carbon::test::A::ARouterInfo::RouteHandlePtr
makeMissFailoverRoute<carbon::test::A::ARouterInfo>(
RouteHandleFactory<carbon::test::A::ARouterInfo::RouteHandleIf>& factory,
const folly::dynamic& json);

extern template carbon::test::A::ARouterInfo::RouteHandlePtr
makeModifyKeyRoute<carbon::test::A::ARouterInfo>(
RouteHandleFactory<carbon::test::A::ARouterInfo::RouteHandleIf>& factory,
const folly::dynamic& json);

extern template carbon::test::A::ARouterInfo::RouteHandlePtr
makeOperationSelectorRoute<carbon::test::A::ARouterInfo>(
RouteHandleFactory<carbon::test::A::ARouterInfo::RouteHandleIf>& factory,
const folly::dynamic& json);

extern template carbon::test::A::ARouterInfo::RouteHandlePtr
makeRandomRoute<carbon::test::A::ARouterInfo>(
RouteHandleFactory<carbon::test::A::ARouterInfo::RouteHandleIf>& factory,
const folly::dynamic& json);

template carbon::test::A::ARouterInfo::RouteHandlePtr
makeHashRoute<carbon::test::A::ARouterInfo>(
RouteHandleFactory<carbon::test::A::ARouterInfo::RouteHandleIf>& factory,
const folly::dynamic& json,
ProxyBase& proxy);

extern template class ExtraRouteHandleProviderIf<carbon::test::A::ARouterInfo>;

} // namespace mcrouter
} // namespace memcache
} // namespace facebook

namespace carbon {
namespace test {
namespace A {

constexpr const char* ARouterInfo::name;

/* static */ ARouterInfo::RouteHandleFactoryMap
ARouterInfo::buildRouteMap() {
  RouteHandleFactoryMap map{
      {"AllAsyncRoute", &makeAllAsyncRoute<ARouterInfo>},
      {"AllFastestRoute", &makeAllFastestRoute<ARouterInfo>},
      {"AllInitialRoute", &makeAllInitialRoute<ARouterInfo>},
      {"AllMajorityRoute", &makeAllMajorityRoute<ARouterInfo>},
      {"AllSyncRoute", &makeAllSyncRoute<ARouterInfo>},
      {"BigValueRoute", &makeBigValueRoute<ARouterInfo>},
      {"BlackholeRoute", &makeBlackholeRoute<ARouterInfo>},
      {"DevNullRoute", &makeDevNullRoute<ARouterInfo>},
      {"ErrorRoute", &makeErrorRoute<ARouterInfo>},
      {"HostIdRoute", &makeHostIdRoute<ARouterInfo>},
      {"LatencyInjectionRoute",
       &makeLatencyInjectionRoute<ARouterInfo>},
      {"LatestRoute", &makeLatestRoute<ARouterInfo>},
      {"LoadBalancerRoute", &makeLoadBalancerRoute<ARouterInfo>},
      {"LoggingRoute", &makeLoggingRoute<ARouterInfo>},
      {"MigrateRoute", &makeMigrateRoute<ARouterInfo>},
      {"MissFailoverRoute", &makeMissFailoverRoute<ARouterInfo>},
      {"ModifyKeyRoute", &makeModifyKeyRoute<ARouterInfo>},
      {"NullRoute", &makeNullRoute<ARouteHandleIf>},
      {"OperationSelectorRoute",
       &makeOperationSelectorRoute<ARouterInfo>},
      {"RandomRoute", &makeRandomRoute<ARouterInfo>},
  };
  return map;
}

/* static */ ARouterInfo::RouteHandleFactoryMapWithProxy
ARouterInfo::buildRouteMapWithProxy() {
  RouteHandleFactoryMapWithProxy map {
      {"HashRoute", &makeHashRoute<ARouterInfo>},
  };
  return map;
  }

/* static */ ARouterInfo::RouteHandleFactoryMapForWrapper
ARouterInfo::buildRouteMapForWrapper() {
  return RouteHandleFactoryMapForWrapper();
}

/* static */ bool ARouterInfo::isSRLinked() {
    return false;
}
    
} // namespace A
} // namespace test
} // namespace carbon
