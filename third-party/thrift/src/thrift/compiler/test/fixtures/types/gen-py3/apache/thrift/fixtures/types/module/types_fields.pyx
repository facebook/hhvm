#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#
cimport cython as __cython
from cython.operator cimport dereference as deref
from libcpp.memory cimport make_unique, unique_ptr, shared_ptr
from thrift.py3.types cimport assign_unique_ptr, assign_shared_ptr, assign_shared_const_ptr

cimport thrift.py3.types
from thrift.py3.types cimport (
    reset_field as __reset_field,
    StructFieldsSetter as __StructFieldsSetter
)

from thrift.py3.types cimport const_pointer_cast, BadEnum as _fbthrift_BadEnum


@__cython.auto_pickle(False)
cdef class __empty_struct_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __empty_struct_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cempty_struct* struct_cpp_obj):
        cdef __empty_struct_FieldsSetter __fbthrift_inst = __empty_struct_FieldsSetter.__new__(__empty_struct_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        return __fbthrift_inst

    cdef void set_field(__empty_struct_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __empty_struct_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)


@__cython.auto_pickle(False)
cdef class __decorated_struct_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __decorated_struct_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cdecorated_struct* struct_cpp_obj):
        cdef __decorated_struct_FieldsSetter __fbthrift_inst = __decorated_struct_FieldsSetter.__new__(__decorated_struct_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"field")] = __decorated_struct_FieldsSetter._set_field_0
        return __fbthrift_inst

    cdef void set_field(__decorated_struct_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __decorated_struct_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field field
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cdecorated_struct](deref(self._struct_cpp_obj), 0)
            return
        if not isinstance(_fbthrift_value, str):
            raise TypeError(f'field is not a { str !r}.')
        deref(self._struct_cpp_obj).field_ref().assign(cmove(bytes_to_string(_fbthrift_value.encode('utf-8'))))


@__cython.auto_pickle(False)
cdef class __ContainerStruct_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __ContainerStruct_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cContainerStruct* struct_cpp_obj):
        cdef __ContainerStruct_FieldsSetter __fbthrift_inst = __ContainerStruct_FieldsSetter.__new__(__ContainerStruct_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"fieldA")] = __ContainerStruct_FieldsSetter._set_field_0
        __fbthrift_inst._setters[__cstring_view(<const char*>"fieldB")] = __ContainerStruct_FieldsSetter._set_field_1
        __fbthrift_inst._setters[__cstring_view(<const char*>"fieldC")] = __ContainerStruct_FieldsSetter._set_field_2
        __fbthrift_inst._setters[__cstring_view(<const char*>"fieldD")] = __ContainerStruct_FieldsSetter._set_field_3
        __fbthrift_inst._setters[__cstring_view(<const char*>"fieldE")] = __ContainerStruct_FieldsSetter._set_field_4
        __fbthrift_inst._setters[__cstring_view(<const char*>"fieldF")] = __ContainerStruct_FieldsSetter._set_field_5
        __fbthrift_inst._setters[__cstring_view(<const char*>"fieldG")] = __ContainerStruct_FieldsSetter._set_field_6
        __fbthrift_inst._setters[__cstring_view(<const char*>"fieldH")] = __ContainerStruct_FieldsSetter._set_field_7
        return __fbthrift_inst

    cdef void set_field(__ContainerStruct_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __ContainerStruct_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field fieldA
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cContainerStruct](deref(self._struct_cpp_obj), 0)
            return
        deref(self._struct_cpp_obj).fieldA_ref().assign(deref(_apache_thrift_fixtures_types_module_types.List__i32(_fbthrift_value)._cpp_obj))

    cdef void _set_field_1(self, _fbthrift_value) except *:
        # for field fieldB
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cContainerStruct](deref(self._struct_cpp_obj), 1)
            return
        deref(self._struct_cpp_obj).fieldB_ref().assign(deref(_apache_thrift_fixtures_types_module_types.std_list__List__i32(_fbthrift_value)._cpp_obj))

    cdef void _set_field_2(self, _fbthrift_value) except *:
        # for field fieldC
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cContainerStruct](deref(self._struct_cpp_obj), 2)
            return
        deref(self._struct_cpp_obj).fieldC_ref().assign(deref(_apache_thrift_fixtures_types_module_types.std_deque__List__i32(_fbthrift_value)._cpp_obj))

    cdef void _set_field_3(self, _fbthrift_value) except *:
        # for field fieldD
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cContainerStruct](deref(self._struct_cpp_obj), 3)
            return
        deref(self._struct_cpp_obj).fieldD_ref().assign(deref(_apache_thrift_fixtures_types_module_types.folly_fbvector__List__i32(_fbthrift_value)._cpp_obj))

    cdef void _set_field_4(self, _fbthrift_value) except *:
        # for field fieldE
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cContainerStruct](deref(self._struct_cpp_obj), 4)
            return
        deref(self._struct_cpp_obj).fieldE_ref().assign(deref(_apache_thrift_fixtures_types_module_types.folly_small_vector__List__i32(_fbthrift_value)._cpp_obj))

    cdef void _set_field_5(self, _fbthrift_value) except *:
        # for field fieldF
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cContainerStruct](deref(self._struct_cpp_obj), 5)
            return
        deref(self._struct_cpp_obj).fieldF_ref().assign(deref(_apache_thrift_fixtures_types_module_types.folly_sorted_vector_set__Set__i32(_fbthrift_value)._cpp_obj))

    cdef void _set_field_6(self, _fbthrift_value) except *:
        # for field fieldG
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cContainerStruct](deref(self._struct_cpp_obj), 6)
            return
        deref(self._struct_cpp_obj).fieldG_ref().assign(deref(_apache_thrift_fixtures_types_module_types.folly_sorted_vector_map__Map__i32_string(_fbthrift_value)._cpp_obj))

    cdef void _set_field_7(self, _fbthrift_value) except *:
        # for field fieldH
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cContainerStruct](deref(self._struct_cpp_obj), 7)
            return
        deref(self._struct_cpp_obj).fieldH_ref().assign(deref(_apache_thrift_fixtures_types_module_types.std_unordered_map__Map__i32_string(_fbthrift_value)._cpp_obj))


@__cython.auto_pickle(False)
cdef class __CppTypeStruct_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __CppTypeStruct_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cCppTypeStruct* struct_cpp_obj):
        cdef __CppTypeStruct_FieldsSetter __fbthrift_inst = __CppTypeStruct_FieldsSetter.__new__(__CppTypeStruct_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"fieldA")] = __CppTypeStruct_FieldsSetter._set_field_0
        return __fbthrift_inst

    cdef void set_field(__CppTypeStruct_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __CppTypeStruct_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field fieldA
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cCppTypeStruct](deref(self._struct_cpp_obj), 0)
            return
        deref(self._struct_cpp_obj).fieldA_ref().assign(deref(_apache_thrift_fixtures_types_module_types.std_list_int32_t__List__i32(_fbthrift_value)._cpp_obj))


@__cython.auto_pickle(False)
cdef class __VirtualStruct_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __VirtualStruct_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cVirtualStruct* struct_cpp_obj):
        cdef __VirtualStruct_FieldsSetter __fbthrift_inst = __VirtualStruct_FieldsSetter.__new__(__VirtualStruct_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"MyIntField")] = __VirtualStruct_FieldsSetter._set_field_0
        return __fbthrift_inst

    cdef void set_field(__VirtualStruct_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __VirtualStruct_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field MyIntField
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cVirtualStruct](deref(self._struct_cpp_obj), 0)
            return
        if not isinstance(_fbthrift_value, int):
            raise TypeError(f'MyIntField is not a { int !r}.')
        _fbthrift_value = <cint64_t> _fbthrift_value
        deref(self._struct_cpp_obj).MyIntField_ref().assign(_fbthrift_value)


@__cython.auto_pickle(False)
cdef class __MyStructWithForwardRefEnum_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __MyStructWithForwardRefEnum_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cMyStructWithForwardRefEnum* struct_cpp_obj):
        cdef __MyStructWithForwardRefEnum_FieldsSetter __fbthrift_inst = __MyStructWithForwardRefEnum_FieldsSetter.__new__(__MyStructWithForwardRefEnum_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"a")] = __MyStructWithForwardRefEnum_FieldsSetter._set_field_0
        __fbthrift_inst._setters[__cstring_view(<const char*>"b")] = __MyStructWithForwardRefEnum_FieldsSetter._set_field_1
        return __fbthrift_inst

    cdef void set_field(__MyStructWithForwardRefEnum_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __MyStructWithForwardRefEnum_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field a
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cMyStructWithForwardRefEnum](deref(self._struct_cpp_obj), 0)
            return
        if not isinstance(_fbthrift_value, _fbthrift_BadEnum) and not isinstance(_fbthrift_value, _apache_thrift_fixtures_types_module_types.MyForwardRefEnum):
            raise TypeError(f'field a value: {repr(_fbthrift_value)} is not of the enum type { _apache_thrift_fixtures_types_module_types.MyForwardRefEnum }.')
        deref(self._struct_cpp_obj).a_ref().assign(<_apache_thrift_fixtures_types_module_types.cMyForwardRefEnum><int>_fbthrift_value)

    cdef void _set_field_1(self, _fbthrift_value) except *:
        # for field b
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cMyStructWithForwardRefEnum](deref(self._struct_cpp_obj), 1)
            return
        if not isinstance(_fbthrift_value, _fbthrift_BadEnum) and not isinstance(_fbthrift_value, _apache_thrift_fixtures_types_module_types.MyForwardRefEnum):
            raise TypeError(f'field b value: {repr(_fbthrift_value)} is not of the enum type { _apache_thrift_fixtures_types_module_types.MyForwardRefEnum }.')
        deref(self._struct_cpp_obj).b_ref().assign(<_apache_thrift_fixtures_types_module_types.cMyForwardRefEnum><int>_fbthrift_value)


@__cython.auto_pickle(False)
cdef class __TrivialNumeric_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __TrivialNumeric_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cTrivialNumeric* struct_cpp_obj):
        cdef __TrivialNumeric_FieldsSetter __fbthrift_inst = __TrivialNumeric_FieldsSetter.__new__(__TrivialNumeric_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"a")] = __TrivialNumeric_FieldsSetter._set_field_0
        __fbthrift_inst._setters[__cstring_view(<const char*>"b")] = __TrivialNumeric_FieldsSetter._set_field_1
        return __fbthrift_inst

    cdef void set_field(__TrivialNumeric_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __TrivialNumeric_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field a
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cTrivialNumeric](deref(self._struct_cpp_obj), 0)
            return
        if not isinstance(_fbthrift_value, int):
            raise TypeError(f'a is not a { int !r}.')
        _fbthrift_value = <cint32_t> _fbthrift_value
        deref(self._struct_cpp_obj).a_ref().assign(_fbthrift_value)

    cdef void _set_field_1(self, _fbthrift_value) except *:
        # for field b
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cTrivialNumeric](deref(self._struct_cpp_obj), 1)
            return
        if not isinstance(_fbthrift_value, bool):
            raise TypeError(f'b is not a { bool !r}.')
        deref(self._struct_cpp_obj).b_ref().assign(_fbthrift_value)


@__cython.auto_pickle(False)
cdef class __TrivialNestedWithDefault_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __TrivialNestedWithDefault_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cTrivialNestedWithDefault* struct_cpp_obj):
        cdef __TrivialNestedWithDefault_FieldsSetter __fbthrift_inst = __TrivialNestedWithDefault_FieldsSetter.__new__(__TrivialNestedWithDefault_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"z")] = __TrivialNestedWithDefault_FieldsSetter._set_field_0
        __fbthrift_inst._setters[__cstring_view(<const char*>"n")] = __TrivialNestedWithDefault_FieldsSetter._set_field_1
        return __fbthrift_inst

    cdef void set_field(__TrivialNestedWithDefault_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __TrivialNestedWithDefault_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field z
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cTrivialNestedWithDefault](deref(self._struct_cpp_obj), 0)
            return
        if not isinstance(_fbthrift_value, int):
            raise TypeError(f'z is not a { int !r}.')
        _fbthrift_value = <cint32_t> _fbthrift_value
        deref(self._struct_cpp_obj).z_ref().assign(_fbthrift_value)

    cdef void _set_field_1(self, _fbthrift_value) except *:
        # for field n
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cTrivialNestedWithDefault](deref(self._struct_cpp_obj), 1)
            return
        if not isinstance(_fbthrift_value, _apache_thrift_fixtures_types_module_types.TrivialNumeric):
            raise TypeError(f'n is not a { _apache_thrift_fixtures_types_module_types.TrivialNumeric !r}.')
        deref(self._struct_cpp_obj).n_ref().assign(deref((<_apache_thrift_fixtures_types_module_types.TrivialNumeric?> _fbthrift_value)._cpp_obj))


@__cython.auto_pickle(False)
cdef class __ComplexString_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __ComplexString_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cComplexString* struct_cpp_obj):
        cdef __ComplexString_FieldsSetter __fbthrift_inst = __ComplexString_FieldsSetter.__new__(__ComplexString_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"a")] = __ComplexString_FieldsSetter._set_field_0
        __fbthrift_inst._setters[__cstring_view(<const char*>"b")] = __ComplexString_FieldsSetter._set_field_1
        return __fbthrift_inst

    cdef void set_field(__ComplexString_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __ComplexString_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field a
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cComplexString](deref(self._struct_cpp_obj), 0)
            return
        if not isinstance(_fbthrift_value, str):
            raise TypeError(f'a is not a { str !r}.')
        deref(self._struct_cpp_obj).a_ref().assign(cmove(bytes_to_string(_fbthrift_value.encode('utf-8'))))

    cdef void _set_field_1(self, _fbthrift_value) except *:
        # for field b
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cComplexString](deref(self._struct_cpp_obj), 1)
            return
        deref(self._struct_cpp_obj).b_ref().assign(deref(_apache_thrift_fixtures_types_module_types.Map__string_i32(_fbthrift_value)._cpp_obj))


@__cython.auto_pickle(False)
cdef class __ComplexNestedWithDefault_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __ComplexNestedWithDefault_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cComplexNestedWithDefault* struct_cpp_obj):
        cdef __ComplexNestedWithDefault_FieldsSetter __fbthrift_inst = __ComplexNestedWithDefault_FieldsSetter.__new__(__ComplexNestedWithDefault_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"z")] = __ComplexNestedWithDefault_FieldsSetter._set_field_0
        __fbthrift_inst._setters[__cstring_view(<const char*>"n")] = __ComplexNestedWithDefault_FieldsSetter._set_field_1
        return __fbthrift_inst

    cdef void set_field(__ComplexNestedWithDefault_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __ComplexNestedWithDefault_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field z
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cComplexNestedWithDefault](deref(self._struct_cpp_obj), 0)
            return
        if not isinstance(_fbthrift_value, str):
            raise TypeError(f'z is not a { str !r}.')
        deref(self._struct_cpp_obj).z_ref().assign(cmove(bytes_to_string(_fbthrift_value.encode('utf-8'))))

    cdef void _set_field_1(self, _fbthrift_value) except *:
        # for field n
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cComplexNestedWithDefault](deref(self._struct_cpp_obj), 1)
            return
        if not isinstance(_fbthrift_value, _apache_thrift_fixtures_types_module_types.ComplexString):
            raise TypeError(f'n is not a { _apache_thrift_fixtures_types_module_types.ComplexString !r}.')
        deref(self._struct_cpp_obj).n_ref().assign(deref((<_apache_thrift_fixtures_types_module_types.ComplexString?> _fbthrift_value)._cpp_obj))


@__cython.auto_pickle(False)
cdef class __MinPadding_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __MinPadding_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cMinPadding* struct_cpp_obj):
        cdef __MinPadding_FieldsSetter __fbthrift_inst = __MinPadding_FieldsSetter.__new__(__MinPadding_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"small")] = __MinPadding_FieldsSetter._set_field_0
        __fbthrift_inst._setters[__cstring_view(<const char*>"big")] = __MinPadding_FieldsSetter._set_field_1
        __fbthrift_inst._setters[__cstring_view(<const char*>"medium")] = __MinPadding_FieldsSetter._set_field_2
        __fbthrift_inst._setters[__cstring_view(<const char*>"biggish")] = __MinPadding_FieldsSetter._set_field_3
        __fbthrift_inst._setters[__cstring_view(<const char*>"tiny")] = __MinPadding_FieldsSetter._set_field_4
        return __fbthrift_inst

    cdef void set_field(__MinPadding_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __MinPadding_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field small
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cMinPadding](deref(self._struct_cpp_obj), 0)
            return
        if not isinstance(_fbthrift_value, int):
            raise TypeError(f'small is not a { int !r}.')
        _fbthrift_value = <cint8_t> _fbthrift_value
        deref(self._struct_cpp_obj).small_ref().assign(_fbthrift_value)

    cdef void _set_field_1(self, _fbthrift_value) except *:
        # for field big
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cMinPadding](deref(self._struct_cpp_obj), 1)
            return
        if not isinstance(_fbthrift_value, int):
            raise TypeError(f'big is not a { int !r}.')
        _fbthrift_value = <cint64_t> _fbthrift_value
        deref(self._struct_cpp_obj).big_ref().assign(_fbthrift_value)

    cdef void _set_field_2(self, _fbthrift_value) except *:
        # for field medium
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cMinPadding](deref(self._struct_cpp_obj), 2)
            return
        if not isinstance(_fbthrift_value, int):
            raise TypeError(f'medium is not a { int !r}.')
        _fbthrift_value = <cint16_t> _fbthrift_value
        deref(self._struct_cpp_obj).medium_ref().assign(_fbthrift_value)

    cdef void _set_field_3(self, _fbthrift_value) except *:
        # for field biggish
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cMinPadding](deref(self._struct_cpp_obj), 3)
            return
        if not isinstance(_fbthrift_value, int):
            raise TypeError(f'biggish is not a { int !r}.')
        _fbthrift_value = <cint32_t> _fbthrift_value
        deref(self._struct_cpp_obj).biggish_ref().assign(_fbthrift_value)

    cdef void _set_field_4(self, _fbthrift_value) except *:
        # for field tiny
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cMinPadding](deref(self._struct_cpp_obj), 4)
            return
        if not isinstance(_fbthrift_value, int):
            raise TypeError(f'tiny is not a { int !r}.')
        _fbthrift_value = <cint8_t> _fbthrift_value
        deref(self._struct_cpp_obj).tiny_ref().assign(_fbthrift_value)


@__cython.auto_pickle(False)
cdef class __MinPaddingWithCustomType_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __MinPaddingWithCustomType_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cMinPaddingWithCustomType* struct_cpp_obj):
        cdef __MinPaddingWithCustomType_FieldsSetter __fbthrift_inst = __MinPaddingWithCustomType_FieldsSetter.__new__(__MinPaddingWithCustomType_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"small")] = __MinPaddingWithCustomType_FieldsSetter._set_field_0
        __fbthrift_inst._setters[__cstring_view(<const char*>"big")] = __MinPaddingWithCustomType_FieldsSetter._set_field_1
        __fbthrift_inst._setters[__cstring_view(<const char*>"medium")] = __MinPaddingWithCustomType_FieldsSetter._set_field_2
        __fbthrift_inst._setters[__cstring_view(<const char*>"biggish")] = __MinPaddingWithCustomType_FieldsSetter._set_field_3
        __fbthrift_inst._setters[__cstring_view(<const char*>"tiny")] = __MinPaddingWithCustomType_FieldsSetter._set_field_4
        return __fbthrift_inst

    cdef void set_field(__MinPaddingWithCustomType_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __MinPaddingWithCustomType_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field small
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cMinPaddingWithCustomType](deref(self._struct_cpp_obj), 0)
            return
        if not isinstance(_fbthrift_value, int):
            raise TypeError(f'small is not a { int !r}.')
        _fbthrift_value = <cint8_t> _fbthrift_value
        deref(self._struct_cpp_obj).small_ref().assign(_fbthrift_value)

    cdef void _set_field_1(self, _fbthrift_value) except *:
        # for field big
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cMinPaddingWithCustomType](deref(self._struct_cpp_obj), 1)
            return
        if not isinstance(_fbthrift_value, int):
            raise TypeError(f'big is not a { int !r}.')
        _fbthrift_value = <cint64_t> _fbthrift_value
        deref(self._struct_cpp_obj).big_ref().assign(_fbthrift_value)

    cdef void _set_field_2(self, _fbthrift_value) except *:
        # for field medium
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cMinPaddingWithCustomType](deref(self._struct_cpp_obj), 2)
            return
        if not isinstance(_fbthrift_value, int):
            raise TypeError(f'medium is not a { int !r}.')
        _fbthrift_value = <cint16_t> _fbthrift_value
        deref(self._struct_cpp_obj).medium_ref().assign(_fbthrift_value)

    cdef void _set_field_3(self, _fbthrift_value) except *:
        # for field biggish
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cMinPaddingWithCustomType](deref(self._struct_cpp_obj), 3)
            return
        if not isinstance(_fbthrift_value, int):
            raise TypeError(f'biggish is not a { int !r}.')
        _fbthrift_value = <cint32_t> _fbthrift_value
        deref(self._struct_cpp_obj).biggish_ref().assign(_fbthrift_value)

    cdef void _set_field_4(self, _fbthrift_value) except *:
        # for field tiny
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cMinPaddingWithCustomType](deref(self._struct_cpp_obj), 4)
            return
        if not isinstance(_fbthrift_value, int):
            raise TypeError(f'tiny is not a { int !r}.')
        _fbthrift_value = <cint8_t> _fbthrift_value
        deref(self._struct_cpp_obj).tiny_ref().assign(_fbthrift_value)


@__cython.auto_pickle(False)
cdef class __MyStruct_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __MyStruct_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cMyStruct* struct_cpp_obj):
        cdef __MyStruct_FieldsSetter __fbthrift_inst = __MyStruct_FieldsSetter.__new__(__MyStruct_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"MyIntField")] = __MyStruct_FieldsSetter._set_field_0
        __fbthrift_inst._setters[__cstring_view(<const char*>"MyStringField")] = __MyStruct_FieldsSetter._set_field_1
        __fbthrift_inst._setters[__cstring_view(<const char*>"majorVer")] = __MyStruct_FieldsSetter._set_field_2
        __fbthrift_inst._setters[__cstring_view(<const char*>"data")] = __MyStruct_FieldsSetter._set_field_3
        return __fbthrift_inst

    cdef void set_field(__MyStruct_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __MyStruct_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field MyIntField
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cMyStruct](deref(self._struct_cpp_obj), 0)
            return
        if not isinstance(_fbthrift_value, int):
            raise TypeError(f'MyIntField is not a { int !r}.')
        _fbthrift_value = <cint64_t> _fbthrift_value
        deref(self._struct_cpp_obj).MyIntField_ref().assign(_fbthrift_value)

    cdef void _set_field_1(self, _fbthrift_value) except *:
        # for field MyStringField
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cMyStruct](deref(self._struct_cpp_obj), 1)
            return
        if not isinstance(_fbthrift_value, str):
            raise TypeError(f'MyStringField is not a { str !r}.')
        deref(self._struct_cpp_obj).MyStringField_ref().assign(cmove(bytes_to_string(_fbthrift_value.encode('utf-8'))))

    cdef void _set_field_2(self, _fbthrift_value) except *:
        # for field majorVer
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cMyStruct](deref(self._struct_cpp_obj), 2)
            return
        if not isinstance(_fbthrift_value, int):
            raise TypeError(f'majorVer is not a { int !r}.')
        _fbthrift_value = <cint64_t> _fbthrift_value
        deref(self._struct_cpp_obj).majorVer_ref().assign(_fbthrift_value)

    cdef void _set_field_3(self, _fbthrift_value) except *:
        # for field data
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cMyStruct](deref(self._struct_cpp_obj), 3)
            return
        if not isinstance(_fbthrift_value, _apache_thrift_fixtures_types_module_types.MyDataItem):
            raise TypeError(f'data is not a { _apache_thrift_fixtures_types_module_types.MyDataItem !r}.')
        deref(self._struct_cpp_obj).data_ref().assign(deref((<_apache_thrift_fixtures_types_module_types.MyDataItem?> _fbthrift_value)._cpp_obj))


@__cython.auto_pickle(False)
cdef class __MyDataItem_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __MyDataItem_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cMyDataItem* struct_cpp_obj):
        cdef __MyDataItem_FieldsSetter __fbthrift_inst = __MyDataItem_FieldsSetter.__new__(__MyDataItem_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        return __fbthrift_inst

    cdef void set_field(__MyDataItem_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __MyDataItem_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)


@__cython.auto_pickle(False)
cdef class __Renaming_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __Renaming_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cRenaming* struct_cpp_obj):
        cdef __Renaming_FieldsSetter __fbthrift_inst = __Renaming_FieldsSetter.__new__(__Renaming_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"foo")] = __Renaming_FieldsSetter._set_field_0
        return __fbthrift_inst

    cdef void set_field(__Renaming_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __Renaming_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field foo
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cRenaming](deref(self._struct_cpp_obj), 0)
            return
        if not isinstance(_fbthrift_value, int):
            raise TypeError(f'foo is not a { int !r}.')
        _fbthrift_value = <cint64_t> _fbthrift_value
        deref(self._struct_cpp_obj).foo_ref().assign(_fbthrift_value)


@__cython.auto_pickle(False)
cdef class __AnnotatedTypes_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __AnnotatedTypes_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cAnnotatedTypes* struct_cpp_obj):
        cdef __AnnotatedTypes_FieldsSetter __fbthrift_inst = __AnnotatedTypes_FieldsSetter.__new__(__AnnotatedTypes_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"binary_field")] = __AnnotatedTypes_FieldsSetter._set_field_0
        __fbthrift_inst._setters[__cstring_view(<const char*>"list_field")] = __AnnotatedTypes_FieldsSetter._set_field_1
        return __fbthrift_inst

    cdef void set_field(__AnnotatedTypes_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __AnnotatedTypes_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field binary_field
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cAnnotatedTypes](deref(self._struct_cpp_obj), 0)
            return
        if not isinstance(_fbthrift_value, bytes):
            raise TypeError(f'binary_field is not a { bytes !r}.')
        deref(self._struct_cpp_obj).binary_field_ref().assign(cmove(bytes_to_string(_fbthrift_value)))

    cdef void _set_field_1(self, _fbthrift_value) except *:
        # for field list_field
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cAnnotatedTypes](deref(self._struct_cpp_obj), 1)
            return
        deref(self._struct_cpp_obj).list_field_ref().assign(deref(_apache_thrift_fixtures_types_module_types.List__std_unordered_map__Map__i32_string(_fbthrift_value)._cpp_obj))


@__cython.auto_pickle(False)
cdef class __ForwardUsageRoot_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __ForwardUsageRoot_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cForwardUsageRoot* struct_cpp_obj):
        cdef __ForwardUsageRoot_FieldsSetter __fbthrift_inst = __ForwardUsageRoot_FieldsSetter.__new__(__ForwardUsageRoot_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"ForwardUsageStruct")] = __ForwardUsageRoot_FieldsSetter._set_field_0
        __fbthrift_inst._setters[__cstring_view(<const char*>"ForwardUsageByRef")] = __ForwardUsageRoot_FieldsSetter._set_field_1
        return __fbthrift_inst

    cdef void set_field(__ForwardUsageRoot_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __ForwardUsageRoot_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field ForwardUsageStruct
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cForwardUsageRoot](deref(self._struct_cpp_obj), 0)
            return
        if not isinstance(_fbthrift_value, _apache_thrift_fixtures_types_module_types.ForwardUsageStruct):
            raise TypeError(f'ForwardUsageStruct is not a { _apache_thrift_fixtures_types_module_types.ForwardUsageStruct !r}.')
        deref(self._struct_cpp_obj).ForwardUsageStruct_ref().assign(deref((<_apache_thrift_fixtures_types_module_types.ForwardUsageStruct?> _fbthrift_value)._cpp_obj))

    cdef void _set_field_1(self, _fbthrift_value) except *:
        # for field ForwardUsageByRef
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cForwardUsageRoot](deref(self._struct_cpp_obj), 1)
            return
        if not isinstance(_fbthrift_value, _apache_thrift_fixtures_types_module_types.ForwardUsageByRef):
            raise TypeError(f'ForwardUsageByRef is not a { _apache_thrift_fixtures_types_module_types.ForwardUsageByRef !r}.')
        assign_unique_ptr[_apache_thrift_fixtures_types_module_types.cForwardUsageByRef](deref(self._struct_cpp_obj).ForwardUsageByRef_ref(), make_unique[_apache_thrift_fixtures_types_module_types.cForwardUsageByRef](deref((<_apache_thrift_fixtures_types_module_types.ForwardUsageByRef?>_fbthrift_value)._cpp_obj)))


@__cython.auto_pickle(False)
cdef class __ForwardUsageStruct_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __ForwardUsageStruct_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cForwardUsageStruct* struct_cpp_obj):
        cdef __ForwardUsageStruct_FieldsSetter __fbthrift_inst = __ForwardUsageStruct_FieldsSetter.__new__(__ForwardUsageStruct_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"foo")] = __ForwardUsageStruct_FieldsSetter._set_field_0
        return __fbthrift_inst

    cdef void set_field(__ForwardUsageStruct_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __ForwardUsageStruct_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field foo
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cForwardUsageStruct](deref(self._struct_cpp_obj), 0)
            return
        if not isinstance(_fbthrift_value, _apache_thrift_fixtures_types_module_types.ForwardUsageRoot):
            raise TypeError(f'foo is not a { _apache_thrift_fixtures_types_module_types.ForwardUsageRoot !r}.')
        assign_unique_ptr[_apache_thrift_fixtures_types_module_types.cForwardUsageRoot](deref(self._struct_cpp_obj).foo_ref(), make_unique[_apache_thrift_fixtures_types_module_types.cForwardUsageRoot](deref((<_apache_thrift_fixtures_types_module_types.ForwardUsageRoot?>_fbthrift_value)._cpp_obj)))


@__cython.auto_pickle(False)
cdef class __ForwardUsageByRef_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __ForwardUsageByRef_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cForwardUsageByRef* struct_cpp_obj):
        cdef __ForwardUsageByRef_FieldsSetter __fbthrift_inst = __ForwardUsageByRef_FieldsSetter.__new__(__ForwardUsageByRef_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"foo")] = __ForwardUsageByRef_FieldsSetter._set_field_0
        return __fbthrift_inst

    cdef void set_field(__ForwardUsageByRef_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __ForwardUsageByRef_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field foo
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cForwardUsageByRef](deref(self._struct_cpp_obj), 0)
            return
        if not isinstance(_fbthrift_value, _apache_thrift_fixtures_types_module_types.ForwardUsageRoot):
            raise TypeError(f'foo is not a { _apache_thrift_fixtures_types_module_types.ForwardUsageRoot !r}.')
        assign_unique_ptr[_apache_thrift_fixtures_types_module_types.cForwardUsageRoot](deref(self._struct_cpp_obj).foo_ref(), make_unique[_apache_thrift_fixtures_types_module_types.cForwardUsageRoot](deref((<_apache_thrift_fixtures_types_module_types.ForwardUsageRoot?>_fbthrift_value)._cpp_obj)))


@__cython.auto_pickle(False)
cdef class __IncompleteMap_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __IncompleteMap_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cIncompleteMap* struct_cpp_obj):
        cdef __IncompleteMap_FieldsSetter __fbthrift_inst = __IncompleteMap_FieldsSetter.__new__(__IncompleteMap_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"field")] = __IncompleteMap_FieldsSetter._set_field_0
        return __fbthrift_inst

    cdef void set_field(__IncompleteMap_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __IncompleteMap_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field field
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cIncompleteMap](deref(self._struct_cpp_obj), 0)
            return
        deref(self._struct_cpp_obj).field_ref().assign(deref(_apache_thrift_fixtures_types_module_types.Map__i32_IncompleteMapDep(_fbthrift_value)._cpp_obj))


@__cython.auto_pickle(False)
cdef class __IncompleteMapDep_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __IncompleteMapDep_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cIncompleteMapDep* struct_cpp_obj):
        cdef __IncompleteMapDep_FieldsSetter __fbthrift_inst = __IncompleteMapDep_FieldsSetter.__new__(__IncompleteMapDep_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        return __fbthrift_inst

    cdef void set_field(__IncompleteMapDep_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __IncompleteMapDep_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)


@__cython.auto_pickle(False)
cdef class __CompleteMap_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __CompleteMap_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cCompleteMap* struct_cpp_obj):
        cdef __CompleteMap_FieldsSetter __fbthrift_inst = __CompleteMap_FieldsSetter.__new__(__CompleteMap_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"field")] = __CompleteMap_FieldsSetter._set_field_0
        return __fbthrift_inst

    cdef void set_field(__CompleteMap_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __CompleteMap_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field field
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cCompleteMap](deref(self._struct_cpp_obj), 0)
            return
        deref(self._struct_cpp_obj).field_ref().assign(deref(_apache_thrift_fixtures_types_module_types.std_unordered_map__Map__i32_CompleteMapDep(_fbthrift_value)._cpp_obj))


@__cython.auto_pickle(False)
cdef class __CompleteMapDep_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __CompleteMapDep_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cCompleteMapDep* struct_cpp_obj):
        cdef __CompleteMapDep_FieldsSetter __fbthrift_inst = __CompleteMapDep_FieldsSetter.__new__(__CompleteMapDep_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        return __fbthrift_inst

    cdef void set_field(__CompleteMapDep_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __CompleteMapDep_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)


@__cython.auto_pickle(False)
cdef class __IncompleteList_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __IncompleteList_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cIncompleteList* struct_cpp_obj):
        cdef __IncompleteList_FieldsSetter __fbthrift_inst = __IncompleteList_FieldsSetter.__new__(__IncompleteList_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"field")] = __IncompleteList_FieldsSetter._set_field_0
        return __fbthrift_inst

    cdef void set_field(__IncompleteList_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __IncompleteList_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field field
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cIncompleteList](deref(self._struct_cpp_obj), 0)
            return
        deref(self._struct_cpp_obj).field_ref().assign(deref(_apache_thrift_fixtures_types_module_types._std_list__List__IncompleteListDep(_fbthrift_value)._cpp_obj))


@__cython.auto_pickle(False)
cdef class __IncompleteListDep_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __IncompleteListDep_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cIncompleteListDep* struct_cpp_obj):
        cdef __IncompleteListDep_FieldsSetter __fbthrift_inst = __IncompleteListDep_FieldsSetter.__new__(__IncompleteListDep_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        return __fbthrift_inst

    cdef void set_field(__IncompleteListDep_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __IncompleteListDep_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)


@__cython.auto_pickle(False)
cdef class __CompleteList_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __CompleteList_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cCompleteList* struct_cpp_obj):
        cdef __CompleteList_FieldsSetter __fbthrift_inst = __CompleteList_FieldsSetter.__new__(__CompleteList_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"field")] = __CompleteList_FieldsSetter._set_field_0
        return __fbthrift_inst

    cdef void set_field(__CompleteList_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __CompleteList_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field field
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cCompleteList](deref(self._struct_cpp_obj), 0)
            return
        deref(self._struct_cpp_obj).field_ref().assign(deref(_apache_thrift_fixtures_types_module_types.folly_small_vector__List__CompleteListDep(_fbthrift_value)._cpp_obj))


@__cython.auto_pickle(False)
cdef class __CompleteListDep_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __CompleteListDep_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cCompleteListDep* struct_cpp_obj):
        cdef __CompleteListDep_FieldsSetter __fbthrift_inst = __CompleteListDep_FieldsSetter.__new__(__CompleteListDep_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        return __fbthrift_inst

    cdef void set_field(__CompleteListDep_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __CompleteListDep_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)


@__cython.auto_pickle(False)
cdef class __AdaptedList_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __AdaptedList_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cAdaptedList* struct_cpp_obj):
        cdef __AdaptedList_FieldsSetter __fbthrift_inst = __AdaptedList_FieldsSetter.__new__(__AdaptedList_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"field")] = __AdaptedList_FieldsSetter._set_field_0
        return __fbthrift_inst

    cdef void set_field(__AdaptedList_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __AdaptedList_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field field
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cAdaptedList](deref(self._struct_cpp_obj), 0)
            return
        deref(self._struct_cpp_obj).field_ref().assign(deref(_apache_thrift_fixtures_types_module_types.List__AdaptedListDep(_fbthrift_value)._cpp_obj))


@__cython.auto_pickle(False)
cdef class __DependentAdaptedList_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __DependentAdaptedList_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cDependentAdaptedList* struct_cpp_obj):
        cdef __DependentAdaptedList_FieldsSetter __fbthrift_inst = __DependentAdaptedList_FieldsSetter.__new__(__DependentAdaptedList_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"field")] = __DependentAdaptedList_FieldsSetter._set_field_0
        return __fbthrift_inst

    cdef void set_field(__DependentAdaptedList_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __DependentAdaptedList_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field field
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cDependentAdaptedList](deref(self._struct_cpp_obj), 0)
            return
        deref(self._struct_cpp_obj).field_ref().assign(deref(_apache_thrift_fixtures_types_module_types.List__DependentAdaptedListDep(_fbthrift_value)._cpp_obj))


@__cython.auto_pickle(False)
cdef class __AllocatorAware_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __AllocatorAware_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cAllocatorAware* struct_cpp_obj):
        cdef __AllocatorAware_FieldsSetter __fbthrift_inst = __AllocatorAware_FieldsSetter.__new__(__AllocatorAware_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"aa_list")] = __AllocatorAware_FieldsSetter._set_field_0
        __fbthrift_inst._setters[__cstring_view(<const char*>"aa_set")] = __AllocatorAware_FieldsSetter._set_field_1
        __fbthrift_inst._setters[__cstring_view(<const char*>"aa_map")] = __AllocatorAware_FieldsSetter._set_field_2
        __fbthrift_inst._setters[__cstring_view(<const char*>"aa_string")] = __AllocatorAware_FieldsSetter._set_field_3
        __fbthrift_inst._setters[__cstring_view(<const char*>"not_a_container")] = __AllocatorAware_FieldsSetter._set_field_4
        __fbthrift_inst._setters[__cstring_view(<const char*>"aa_unique")] = __AllocatorAware_FieldsSetter._set_field_5
        __fbthrift_inst._setters[__cstring_view(<const char*>"aa_shared")] = __AllocatorAware_FieldsSetter._set_field_6
        return __fbthrift_inst

    cdef void set_field(__AllocatorAware_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __AllocatorAware_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field aa_list
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cAllocatorAware](deref(self._struct_cpp_obj), 0)
            return
        deref(self._struct_cpp_obj).aa_list_ref().assign(deref(_apache_thrift_fixtures_types_module_types.List__i32(_fbthrift_value)._cpp_obj))

    cdef void _set_field_1(self, _fbthrift_value) except *:
        # for field aa_set
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cAllocatorAware](deref(self._struct_cpp_obj), 1)
            return
        deref(self._struct_cpp_obj).aa_set_ref().assign(deref(_apache_thrift_fixtures_types_module_types.Set__i32(_fbthrift_value)._cpp_obj))

    cdef void _set_field_2(self, _fbthrift_value) except *:
        # for field aa_map
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cAllocatorAware](deref(self._struct_cpp_obj), 2)
            return
        deref(self._struct_cpp_obj).aa_map_ref().assign(deref(_apache_thrift_fixtures_types_module_types.Map__i32_i32(_fbthrift_value)._cpp_obj))

    cdef void _set_field_3(self, _fbthrift_value) except *:
        # for field aa_string
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cAllocatorAware](deref(self._struct_cpp_obj), 3)
            return
        if not isinstance(_fbthrift_value, str):
            raise TypeError(f'aa_string is not a { str !r}.')
        deref(self._struct_cpp_obj).aa_string_ref().assign(cmove(bytes_to_string(_fbthrift_value.encode('utf-8'))))

    cdef void _set_field_4(self, _fbthrift_value) except *:
        # for field not_a_container
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cAllocatorAware](deref(self._struct_cpp_obj), 4)
            return
        if not isinstance(_fbthrift_value, int):
            raise TypeError(f'not_a_container is not a { int !r}.')
        _fbthrift_value = <cint32_t> _fbthrift_value
        deref(self._struct_cpp_obj).not_a_container_ref().assign(_fbthrift_value)

    cdef void _set_field_5(self, _fbthrift_value) except *:
        # for field aa_unique
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cAllocatorAware](deref(self._struct_cpp_obj), 5)
            return
        if not isinstance(_fbthrift_value, int):
            raise TypeError(f'aa_unique is not a { int !r}.')
        _fbthrift_value = <cint32_t> _fbthrift_value
        assign_unique_ptr[cint32_t](deref(self._struct_cpp_obj).aa_unique_ref(), make_unique[cint32_t](deref((<cint32_t?>_fbthrift_value)._cpp_obj)))

    cdef void _set_field_6(self, _fbthrift_value) except *:
        # for field aa_shared
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cAllocatorAware](deref(self._struct_cpp_obj), 6)
            return
        if not isinstance(_fbthrift_value, int):
            raise TypeError(f'aa_shared is not a { int !r}.')
        _fbthrift_value = <cint32_t> _fbthrift_value
        assign_shared_ptr[cint32_t](deref(self._struct_cpp_obj).aa_shared_ref(), (<cint32_t?>_fbthrift_value)._cpp_obj)


@__cython.auto_pickle(False)
cdef class __AllocatorAware2_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __AllocatorAware2_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cAllocatorAware2* struct_cpp_obj):
        cdef __AllocatorAware2_FieldsSetter __fbthrift_inst = __AllocatorAware2_FieldsSetter.__new__(__AllocatorAware2_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"not_a_container")] = __AllocatorAware2_FieldsSetter._set_field_0
        __fbthrift_inst._setters[__cstring_view(<const char*>"box_field")] = __AllocatorAware2_FieldsSetter._set_field_1
        return __fbthrift_inst

    cdef void set_field(__AllocatorAware2_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __AllocatorAware2_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field not_a_container
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cAllocatorAware2](deref(self._struct_cpp_obj), 0)
            return
        if not isinstance(_fbthrift_value, int):
            raise TypeError(f'not_a_container is not a { int !r}.')
        _fbthrift_value = <cint32_t> _fbthrift_value
        deref(self._struct_cpp_obj).not_a_container_ref().assign(_fbthrift_value)

    cdef void _set_field_1(self, _fbthrift_value) except *:
        # for field box_field
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cAllocatorAware2](deref(self._struct_cpp_obj), 1)
            return
        if not isinstance(_fbthrift_value, int):
            raise TypeError(f'box_field is not a { int !r}.')
        _fbthrift_value = <cint32_t> _fbthrift_value
        deref(self._struct_cpp_obj).box_field_ref().assign(_fbthrift_value)


@__cython.auto_pickle(False)
cdef class __TypedefStruct_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __TypedefStruct_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cTypedefStruct* struct_cpp_obj):
        cdef __TypedefStruct_FieldsSetter __fbthrift_inst = __TypedefStruct_FieldsSetter.__new__(__TypedefStruct_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"i32_field")] = __TypedefStruct_FieldsSetter._set_field_0
        __fbthrift_inst._setters[__cstring_view(<const char*>"IntTypedef_field")] = __TypedefStruct_FieldsSetter._set_field_1
        __fbthrift_inst._setters[__cstring_view(<const char*>"UintTypedef_field")] = __TypedefStruct_FieldsSetter._set_field_2
        return __fbthrift_inst

    cdef void set_field(__TypedefStruct_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __TypedefStruct_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field i32_field
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cTypedefStruct](deref(self._struct_cpp_obj), 0)
            return
        if not isinstance(_fbthrift_value, int):
            raise TypeError(f'i32_field is not a { int !r}.')
        _fbthrift_value = <cint32_t> _fbthrift_value
        deref(self._struct_cpp_obj).i32_field_ref().assign(_fbthrift_value)

    cdef void _set_field_1(self, _fbthrift_value) except *:
        # for field IntTypedef_field
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cTypedefStruct](deref(self._struct_cpp_obj), 1)
            return
        if not isinstance(_fbthrift_value, int):
            raise TypeError(f'IntTypedef_field is not a { int !r}.')
        _fbthrift_value = <cint32_t> _fbthrift_value
        deref(self._struct_cpp_obj).IntTypedef_field_ref().assign(_fbthrift_value)

    cdef void _set_field_2(self, _fbthrift_value) except *:
        # for field UintTypedef_field
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cTypedefStruct](deref(self._struct_cpp_obj), 2)
            return
        if not isinstance(_fbthrift_value, int):
            raise TypeError(f'UintTypedef_field is not a { int !r}.')
        _fbthrift_value = <cint32_t> _fbthrift_value
        deref(self._struct_cpp_obj).UintTypedef_field_ref().assign(_fbthrift_value)


@__cython.auto_pickle(False)
cdef class __StructWithDoubleUnderscores_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __StructWithDoubleUnderscores_FieldsSetter _fbthrift_create(_apache_thrift_fixtures_types_module_types.cStructWithDoubleUnderscores* struct_cpp_obj):
        cdef __StructWithDoubleUnderscores_FieldsSetter __fbthrift_inst = __StructWithDoubleUnderscores_FieldsSetter.__new__(__StructWithDoubleUnderscores_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"__field")] = __StructWithDoubleUnderscores_FieldsSetter._set_field_0
        return __fbthrift_inst

    cdef void set_field(__StructWithDoubleUnderscores_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __StructWithDoubleUnderscores_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field __field
        if _fbthrift_value is None:
            __reset_field[_apache_thrift_fixtures_types_module_types.cStructWithDoubleUnderscores](deref(self._struct_cpp_obj), 0)
            return
        if not isinstance(_fbthrift_value, int):
            raise TypeError(f'__field is not a { int !r}.')
        _fbthrift_value = <cint32_t> _fbthrift_value
        deref(self._struct_cpp_obj).__field_ref().assign(_fbthrift_value)

