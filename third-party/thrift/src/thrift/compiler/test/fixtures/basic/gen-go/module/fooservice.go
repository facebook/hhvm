// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package module

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	hack0 "thrift/annotation/hack"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var _ = hack0.GoUnusedProtection__
type FooService interface {
  SimpleRPC() (err error)
}

type FooServiceClientInterface interface {
  thrift.ClientInterface
  SimpleRPC() (err error)
}

type FooServiceClient struct {
  FooServiceClientInterface
  CC thrift.ClientConn
}

func(client *FooServiceClient) Open() error {
  return client.CC.Open()
}

func(client *FooServiceClient) Close() error {
  return client.CC.Close()
}

func(client *FooServiceClient) IsOpen() bool {
  return client.CC.IsOpen()
}

func NewFooServiceClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *FooServiceClient {
  return &FooServiceClient{ CC: thrift.NewClientConn(t, f) }
}

func NewFooServiceClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *FooServiceClient {
  return &FooServiceClient{ CC: thrift.NewClientConnWithProtocols(t, iprot, oprot) }
}

func NewFooServiceClientProtocol(prot thrift.Protocol) *FooServiceClient {
  return NewFooServiceClient(prot.Transport(), prot, prot)
}

func (p *FooServiceClient) SimpleRPC() (err error) {
  var args FooServiceSimpleRpcArgs
  err = p.CC.SendMsg("simple_rpc", &args, thrift.CALL)
  if err != nil { return }
  return p.recvSimpleRPC()
}


func (p *FooServiceClient) recvSimpleRPC() (err error) {
  var __result FooServiceSimpleRpcResult
  return p.CC.RecvMsg("simple_rpc", &__result)
}


type FooServiceThreadsafeClient struct {
  FooServiceClientInterface
  CC thrift.ClientConn
  Mu sync.Mutex
}

func(client *FooServiceThreadsafeClient) Open() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Open()
}

func(client *FooServiceThreadsafeClient) Close() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Close()
}

func(client *FooServiceThreadsafeClient) IsOpen() bool {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.IsOpen()
}

func NewFooServiceThreadsafeClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *FooServiceThreadsafeClient {
  return &FooServiceThreadsafeClient{ CC: thrift.NewClientConn(t, f) }
}

func NewFooServiceThreadsafeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *FooServiceThreadsafeClient {
  return &FooServiceThreadsafeClient{ CC: thrift.NewClientConnWithProtocols(t, iprot, oprot) }
}

func NewFooServiceThreadsafeClientProtocol(prot thrift.Protocol) *FooServiceThreadsafeClient {
  return NewFooServiceThreadsafeClient(prot.Transport(), prot, prot)
}

func (p *FooServiceThreadsafeClient) SimpleRPC() (err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  var args FooServiceSimpleRpcArgs
  err = p.CC.SendMsg("simple_rpc", &args, thrift.CALL)
  if err != nil { return }
  return p.recvSimpleRPC()
}


func (p *FooServiceThreadsafeClient) recvSimpleRPC() (err error) {
  var __result FooServiceSimpleRpcResult
  return p.CC.RecvMsg("simple_rpc", &__result)
}


type FooServiceChannelClient struct {
  RequestChannel thrift.RequestChannel
}

func (c *FooServiceChannelClient) Close() error {
  return c.RequestChannel.Close()
}

func (c *FooServiceChannelClient) IsOpen() bool {
  return c.RequestChannel.IsOpen()
}

func (c *FooServiceChannelClient) Open() error {
  return c.RequestChannel.Open()
}

func NewFooServiceChannelClient(channel thrift.RequestChannel) *FooServiceChannelClient {
  return &FooServiceChannelClient{RequestChannel: channel}
}

func (p *FooServiceChannelClient) SimpleRPC(ctx context.Context) (err error) {
  args := FooServiceSimpleRpcArgs{
  }
  var __result FooServiceSimpleRpcResult
  err = p.RequestChannel.Call(ctx, "simple_rpc", &args, &__result)
  if err != nil { return }

  return nil
}


type FooServiceProcessor struct {
  processorMap map[string]thrift.ProcessorFunction
  functionServiceMap map[string]string
  handler FooService
}

func (p *FooServiceProcessor) AddToProcessorMap(key string, processor thrift.ProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *FooServiceProcessor) AddToFunctionServiceMap(key, service string) {
  p.functionServiceMap[key] = service
}

func (p *FooServiceProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction, err error) {
  if processor, ok := p.processorMap[key]; ok {
    return processor, nil
  }
  return nil, nil // generic error message will be sent
}

func (p *FooServiceProcessor) ProcessorMap() map[string]thrift.ProcessorFunction {
  return p.processorMap
}

func (p *FooServiceProcessor) FunctionServiceMap() map[string]string {
  return p.functionServiceMap
}

func NewFooServiceProcessor(handler FooService) *FooServiceProcessor {
  self3 := &FooServiceProcessor{handler:handler, processorMap:make(map[string]thrift.ProcessorFunction), functionServiceMap:make(map[string]string)}
  self3.processorMap["simple_rpc"] = &fooServiceProcessorSimpleRPC{handler:handler}
  self3.functionServiceMap["simple_rpc"] = "FooService"
  return self3
}

type fooServiceProcessorSimpleRPC struct {
  handler FooService
}

func (p *FooServiceSimpleRpcResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *fooServiceProcessorSimpleRPC) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := FooServiceSimpleRpcArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *fooServiceProcessorSimpleRPC) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("simple_rpc", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *fooServiceProcessorSimpleRPC) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  var __result FooServiceSimpleRpcResult
  if err := p.handler.SimpleRPC(); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing simple_rpc: " + err.Error(), err)
      return x, x
    }
  }
  return &__result, nil
}


// HELPER FUNCTIONS AND STRUCTURES

type FooServiceSimpleRpcArgs struct {
  thrift.IRequest
}

func NewFooServiceSimpleRpcArgs() *FooServiceSimpleRpcArgs {
  return &FooServiceSimpleRpcArgs{}
}

type FooServiceSimpleRpcArgsBuilder struct {
  obj *FooServiceSimpleRpcArgs
}

func NewFooServiceSimpleRpcArgsBuilder() *FooServiceSimpleRpcArgsBuilder{
  return &FooServiceSimpleRpcArgsBuilder{
    obj: NewFooServiceSimpleRpcArgs(),
  }
}

func (p FooServiceSimpleRpcArgsBuilder) Emit() *FooServiceSimpleRpcArgs{
  return &FooServiceSimpleRpcArgs{
  }
}

func (p *FooServiceSimpleRpcArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FooServiceSimpleRpcArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("simple_rpc_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FooServiceSimpleRpcArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("FooServiceSimpleRpcArgs({})")
}

type FooServiceSimpleRpcResult struct {
  thrift.IResponse
}

func NewFooServiceSimpleRpcResult() *FooServiceSimpleRpcResult {
  return &FooServiceSimpleRpcResult{}
}

type FooServiceSimpleRpcResultBuilder struct {
  obj *FooServiceSimpleRpcResult
}

func NewFooServiceSimpleRpcResultBuilder() *FooServiceSimpleRpcResultBuilder{
  return &FooServiceSimpleRpcResultBuilder{
    obj: NewFooServiceSimpleRpcResult(),
  }
}

func (p FooServiceSimpleRpcResultBuilder) Emit() *FooServiceSimpleRpcResult{
  return &FooServiceSimpleRpcResult{
  }
}

func (p *FooServiceSimpleRpcResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FooServiceSimpleRpcResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("simple_rpc_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FooServiceSimpleRpcResult) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("FooServiceSimpleRpcResult({})")
}


