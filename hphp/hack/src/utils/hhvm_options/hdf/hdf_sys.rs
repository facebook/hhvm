/* automatically generated by rust-bindgen */

#![allow(improper_ctypes)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![cfg_attr(test, allow(deref_nullptr))]
#[link(name = "stdc++")]
extern {}

pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type UINT32 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _neo_err {
    pub error: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub desc: [::std::os::raw::c_char; 256usize],
    pub file: *const ::std::os::raw::c_char,
    pub func: *const ::std::os::raw::c_char,
    pub lineno: ::std::os::raw::c_int,
    pub next: *mut _neo_err,
}
#[test]
fn bindgen_test_layout__neo_err() {
    assert_eq!(
        ::std::mem::size_of::<_neo_err>(),
        296usize,
        concat!("Size of: ", stringify!(_neo_err))
    );
    assert_eq!(
        ::std::mem::align_of::<_neo_err>(),
        8usize,
        concat!("Alignment of ", stringify!(_neo_err))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_neo_err>())).error as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_neo_err),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_neo_err>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_neo_err),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_neo_err>())).desc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_neo_err),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_neo_err>())).file as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_neo_err),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_neo_err>())).func as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_neo_err),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_neo_err>())).lineno as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_neo_err),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_neo_err>())).next as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_neo_err),
            "::",
            stringify!(next)
        )
    );
}
pub type NEOERR = _neo_err;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _string {
    pub buf: *mut ::std::os::raw::c_char,
    pub len: ::std::os::raw::c_int,
    pub max: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__string() {
    assert_eq!(
        ::std::mem::size_of::<_string>(),
        16usize,
        concat!("Size of: ", stringify!(_string))
    );
    assert_eq!(
        ::std::mem::align_of::<_string>(),
        8usize,
        concat!("Alignment of ", stringify!(_string))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_string>())).buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_string),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_string>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_string),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_string>())).max as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_string),
            "::",
            stringify!(max)
        )
    );
}
pub type NEOSTRING = _string;
extern "C" {
    pub fn string_clear(str: *mut NEOSTRING);
}
extern "C" {
    pub fn nerr_error_string(nerr: *mut NEOERR, str: *mut NEOSTRING);
}
pub type NE_HASH_FUNC =
    ::std::option::Option<unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> UINT32>;
pub type NE_COMP_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NE_HASHNODE {
    pub key: *mut ::std::os::raw::c_void,
    pub value: *mut ::std::os::raw::c_void,
    pub hashv: UINT32,
    pub next: *mut _NE_HASHNODE,
}
#[test]
fn bindgen_test_layout__NE_HASHNODE() {
    assert_eq!(
        ::std::mem::size_of::<_NE_HASHNODE>(),
        32usize,
        concat!("Size of: ", stringify!(_NE_HASHNODE))
    );
    assert_eq!(
        ::std::mem::align_of::<_NE_HASHNODE>(),
        8usize,
        concat!("Alignment of ", stringify!(_NE_HASHNODE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_NE_HASHNODE>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_NE_HASHNODE),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_NE_HASHNODE>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_NE_HASHNODE),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_NE_HASHNODE>())).hashv as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_NE_HASHNODE),
            "::",
            stringify!(hashv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_NE_HASHNODE>())).next as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_NE_HASHNODE),
            "::",
            stringify!(next)
        )
    );
}
pub type NE_HASHNODE = _NE_HASHNODE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HASH {
    pub size: UINT32,
    pub num: UINT32,
    pub nodes: *mut *mut NE_HASHNODE,
    pub hash_func: NE_HASH_FUNC,
    pub comp_func: NE_COMP_FUNC,
}
#[test]
fn bindgen_test_layout__HASH() {
    assert_eq!(
        ::std::mem::size_of::<_HASH>(),
        32usize,
        concat!("Size of: ", stringify!(_HASH))
    );
    assert_eq!(
        ::std::mem::align_of::<_HASH>(),
        8usize,
        concat!("Alignment of ", stringify!(_HASH))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_HASH>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HASH),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_HASH>())).num as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_HASH),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_HASH>())).nodes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HASH),
            "::",
            stringify!(nodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_HASH>())).hash_func as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HASH),
            "::",
            stringify!(hash_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_HASH>())).comp_func as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HASH),
            "::",
            stringify!(comp_func)
        )
    );
}
pub type NE_HASH = _HASH;
pub type HDF = _hdf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _attr {
    pub key: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_char,
    pub next: *mut _attr,
}
#[test]
fn bindgen_test_layout__attr() {
    assert_eq!(
        ::std::mem::size_of::<_attr>(),
        24usize,
        concat!("Size of: ", stringify!(_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<_attr>(),
        8usize,
        concat!("Alignment of ", stringify!(_attr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_attr>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_attr),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_attr>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_attr),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_attr>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_attr),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _hdf {
    pub link: ::std::os::raw::c_int,
    pub alloc_value: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub name_len: ::std::os::raw::c_int,
    pub value: *mut ::std::os::raw::c_char,
    pub attr: *mut _attr,
    pub top: *mut _hdf,
    pub next: *mut _hdf,
    pub child: *mut _hdf,
    pub last_hp: *mut _hdf,
    pub last_hs: *mut _hdf,
    pub hash: *mut NE_HASH,
    pub last_child: *mut _hdf,
    pub visited: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__hdf() {
    assert_eq!(
        ::std::mem::size_of::<_hdf>(),
        104usize,
        concat!("Size of: ", stringify!(_hdf))
    );
    assert_eq!(
        ::std::mem::align_of::<_hdf>(),
        8usize,
        concat!("Alignment of ", stringify!(_hdf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hdf>())).link as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_hdf),
            "::",
            stringify!(link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hdf>())).alloc_value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_hdf),
            "::",
            stringify!(alloc_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hdf>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_hdf),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hdf>())).name_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_hdf),
            "::",
            stringify!(name_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hdf>())).value as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_hdf),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hdf>())).attr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_hdf),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hdf>())).top as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(_hdf), "::", stringify!(top))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hdf>())).next as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_hdf),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hdf>())).child as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_hdf),
            "::",
            stringify!(child)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hdf>())).last_hp as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_hdf),
            "::",
            stringify!(last_hp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hdf>())).last_hs as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_hdf),
            "::",
            stringify!(last_hs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hdf>())).hash as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_hdf),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hdf>())).last_child as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_hdf),
            "::",
            stringify!(last_child)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hdf>())).visited as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_hdf),
            "::",
            stringify!(visited)
        )
    );
}
extern "C" {
    pub fn hdf_init(hdf: *mut *mut HDF) -> *mut NEOERR;
}
extern "C" {
    pub fn hdf_destroy(hdf: *mut *mut HDF);
}
extern "C" {
    pub fn hdf_get_obj(
        hdf: *mut HDF,
        name: *const ::std::os::raw::c_char,
        err: *mut *mut NEOERR,
    ) -> *mut HDF;
}
extern "C" {
    pub fn hdf_get_node(
        hdf: *mut HDF,
        name: *const ::std::os::raw::c_char,
        ret: *mut *mut HDF,
    ) -> *mut NEOERR;
}
extern "C" {
    pub fn hdf_get_child(
        hdf: *mut HDF,
        name: *const ::std::os::raw::c_char,
        err: *mut *mut NEOERR,
    ) -> *mut HDF;
}
extern "C" {
    pub fn hdf_set_visited(hdf: *mut HDF, visited: ::std::os::raw::c_int);
}
extern "C" {
    pub fn hdf_is_visited(hdf: *mut HDF) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hdf_obj_child(hdf: *mut HDF, arg1: *mut *mut NEOERR) -> *mut HDF;
}
extern "C" {
    pub fn hdf_obj_next(hdf: *mut HDF) -> *mut HDF;
}
extern "C" {
    pub fn hdf_obj_name(hdf: *mut HDF) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn hdf_obj_value(hdf: *mut HDF, arg1: *mut *mut NEOERR) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn hdf_set_value(
        hdf: *mut HDF,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> *mut NEOERR;
}
extern "C" {
    pub fn hdf_read_file(hdf: *mut HDF, path: *const ::std::os::raw::c_char) -> *mut NEOERR;
}
extern "C" {
    pub fn hdf_write_file(hdf: *mut HDF, path: *const ::std::os::raw::c_char) -> *mut NEOERR;
}
extern "C" {
    pub fn hdf_read_string(hdf: *mut HDF, s: *const ::std::os::raw::c_char) -> *mut NEOERR;
}
extern "C" {
    pub fn hdf_write_string(hdf: *mut HDF, s: *mut *mut ::std::os::raw::c_char) -> *mut NEOERR;
}
extern "C" {
    pub fn hdf_dump_format(hdf: *mut HDF, lvl: ::std::os::raw::c_int, fp: *mut FILE)
        -> *mut NEOERR;
}
extern "C" {
    pub fn hdf_dump_str(
        hdf: *mut HDF,
        prefix: *const ::std::os::raw::c_char,
        compact: ::std::os::raw::c_int,
        str: *mut NEOSTRING,
    ) -> *mut NEOERR;
}
extern "C" {
    pub fn hdf_remove_tree(hdf: *mut HDF, name: *const ::std::os::raw::c_char) -> *mut NEOERR;
}
extern "C" {
    pub fn hdf_copy(
        dest_hdf: *mut HDF,
        name: *const ::std::os::raw::c_char,
        src: *mut HDF,
    ) -> *mut NEOERR;
}
extern "C" {
    pub fn hdf_search_path(
        hdf: *mut HDF,
        path: *const ::std::os::raw::c_char,
        full: *mut ::std::os::raw::c_char,
        full_len: ::std::os::raw::c_int,
    ) -> *mut NEOERR;
}
