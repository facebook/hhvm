/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>


#include "mcrouter/lib/carbon/gen-cpp2/carbon_types.h"
#include "mcrouter/lib/carbon/gen-cpp2/carbon_result_types.h"
#include "mcrouter/lib/network/gen/gen-cpp2/Common_types.h"

// BEGIN declare_enums

// END declare_enums
// BEGIN struct_indirection

// END struct_indirection
// BEGIN forward_declare
namespace facebook { namespace memcache { namespace thrift {
class McGetRequest;
class McGetReply;
class McSetRequest;
class McSetReply;
class McDeleteRequest;
class McDeleteReply;
class McLeaseGetRequest;
class McLeaseGetReply;
class McLeaseSetRequest;
class McLeaseSetReply;
class McAddRequest;
class McAddReply;
class McReplaceRequest;
class McReplaceReply;
class McGetsRequest;
class McGetsReply;
class McCasRequest;
class McCasReply;
class McIncrRequest;
class McIncrReply;
class McDecrRequest;
class McDecrReply;
class McMetagetRequest;
class McMetagetReply;
class McAppendRequest;
class McAppendReply;
class McPrependRequest;
class McPrependReply;
class McTouchRequest;
class McTouchReply;
class McFlushReRequest;
class McFlushReReply;
class McFlushAllRequest;
class McFlushAllReply;
class McGatRequest;
class McGatReply;
class McGatsRequest;
class McGatsReply;
}}} // facebook::memcache::thrift
// END forward_declare
// BEGIN typedefs

// END typedefs
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace facebook { namespace memcache { namespace thrift {
class McGetRequest final : private apache::thrift::detail::st::ComparisonOperators<McGetRequest> {
 public:

  McGetRequest() :
      flags(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McGetRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg, uint64_t flags__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    key = arg.extract();
    __isset.key = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    flags = arg.extract();
    __isset.flags = true;
  }

  McGetRequest(McGetRequest&&) = default;

  McGetRequest(const McGetRequest&) = default;

  McGetRequest& operator=(McGetRequest&&) = default;

  McGetRequest& operator=(const McGetRequest&) = default;
  void __clear();
   ::carbon::thrift::IOBufKey key;
  uint64_t flags;

  struct __isset {
    bool key;
    bool flags;
  } __isset = {};
  bool operator==(const McGetRequest& rhs) const;
  bool operator<(const McGetRequest& rhs) const;

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McGetRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McGetRequest_key_struct_setter&& key_) {
    key = std::forward<T_McGetRequest_key_struct_setter>(key_);
    __isset.key = true;
    return key;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
    __isset.flags = true;
    return flags;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McGetRequest >;
};

void swap(McGetRequest& a, McGetRequest& b);

template <class Protocol_>
uint32_t McGetRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McGetReply final : private apache::thrift::detail::st::ComparisonOperators<McGetReply> {
 public:

  McGetReply();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McGetReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, folly::IOBuf value__arg, uint64_t flags__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    result = arg.extract();
    __isset.result = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    value = arg.extract();
    __isset.value = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    flags = arg.extract();
    __isset.flags = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<4, _T> arg) {
    message = arg.extract();
    __isset.message = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<5, _T> arg) {
    appSpecificErrorCode = arg.extract();
    __isset.appSpecificErrorCode = true;
  }

  McGetReply(McGetReply&&) = default;

  McGetReply(const McGetReply&) = default;

  McGetReply& operator=(McGetReply&&) = default;

  McGetReply& operator=(const McGetReply&) = default;
  void __clear();

  ~McGetReply();

   ::carbon::Result result;
  folly::IOBuf value;
  uint64_t flags;
  ::std::string message;
  int16_t appSpecificErrorCode;

  struct __isset {
    bool result;
    bool value;
    bool flags;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McGetReply& rhs) const;
  bool operator<(const McGetReply& rhs) const;

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const folly::IOBuf&> value_ref() const& {
    return {value, __isset.value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const folly::IOBuf&&> value_ref() const&& {
    return {std::move(value), __isset.value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<folly::IOBuf&> value_ref() & {
    return {value, __isset.value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<folly::IOBuf&&> value_ref() && {
    return {std::move(value), __isset.value};
  }

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
    __isset.result = true;
    return result;
  }

  const folly::IOBuf* get_value() const& {
    return __isset.value ? std::addressof(value) : nullptr;
  }

  folly::IOBuf* get_value() & {
    return __isset.value ? std::addressof(value) : nullptr;
  }
  folly::IOBuf* get_value() && = delete;

  template <typename T_McGetReply_value_struct_setter = folly::IOBuf>
  folly::IOBuf& set_value(T_McGetReply_value_struct_setter&& value_) {
    value = std::forward<T_McGetReply_value_struct_setter>(value_);
    __isset.value = true;
    return value;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
    __isset.flags = true;
    return flags;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McGetReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McGetReply_message_struct_setter&& message_) {
    message = std::forward<T_McGetReply_message_struct_setter>(message_);
    __isset.message = true;
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
    __isset.appSpecificErrorCode = true;
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McGetReply >;
};

void swap(McGetReply& a, McGetReply& b);

template <class Protocol_>
uint32_t McGetReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McSetRequest final : private apache::thrift::detail::st::ComparisonOperators<McSetRequest> {
 public:

  McSetRequest() :
      exptime(0),
      flags(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McSetRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg, int32_t exptime__arg, uint64_t flags__arg, folly::IOBuf value__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    key = arg.extract();
    __isset.key = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    exptime = arg.extract();
    __isset.exptime = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    flags = arg.extract();
    __isset.flags = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<4, _T> arg) {
    value = arg.extract();
    __isset.value = true;
  }

  McSetRequest(McSetRequest&&) = default;

  McSetRequest(const McSetRequest&) = default;

  McSetRequest& operator=(McSetRequest&&) = default;

  McSetRequest& operator=(const McSetRequest&) = default;
  void __clear();
   ::carbon::thrift::IOBufKey key;
  int32_t exptime;
  uint64_t flags;
  folly::IOBuf value;

  struct __isset {
    bool key;
    bool exptime;
    bool flags;
    bool value;
  } __isset = {};
  bool operator==(const McSetRequest& rhs) const;
  bool operator<(const McSetRequest& rhs) const;

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McSetRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McSetRequest_key_struct_setter&& key_) {
    key = std::forward<T_McSetRequest_key_struct_setter>(key_);
    __isset.key = true;
    return key;
  }

  int32_t get_exptime() const {
    return exptime;
  }

  int32_t& set_exptime(int32_t exptime_) {
    exptime = exptime_;
    __isset.exptime = true;
    return exptime;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
    __isset.flags = true;
    return flags;
  }

  const folly::IOBuf& get_value() const& {
    return value;
  }

  folly::IOBuf get_value() && {
    return std::move(value);
  }

  template <typename T_McSetRequest_value_struct_setter = folly::IOBuf>
  folly::IOBuf& set_value(T_McSetRequest_value_struct_setter&& value_) {
    value = std::forward<T_McSetRequest_value_struct_setter>(value_);
    __isset.value = true;
    return value;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McSetRequest >;
};

void swap(McSetRequest& a, McSetRequest& b);

template <class Protocol_>
uint32_t McSetRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McSetReply final : private apache::thrift::detail::st::ComparisonOperators<McSetReply> {
 public:

  McSetReply();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McSetReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, uint64_t flags__arg, folly::IOBuf value__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    result = arg.extract();
    __isset.result = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    flags = arg.extract();
    __isset.flags = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    value = arg.extract();
    __isset.value = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<4, _T> arg) {
    message = arg.extract();
    __isset.message = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<5, _T> arg) {
    appSpecificErrorCode = arg.extract();
    __isset.appSpecificErrorCode = true;
  }

  McSetReply(McSetReply&&) = default;

  McSetReply(const McSetReply&) = default;

  McSetReply& operator=(McSetReply&&) = default;

  McSetReply& operator=(const McSetReply&) = default;
  void __clear();

  ~McSetReply();

   ::carbon::Result result;
  uint64_t flags;
  folly::IOBuf value;
  ::std::string message;
  int16_t appSpecificErrorCode;

  struct __isset {
    bool result;
    bool flags;
    bool value;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McSetReply& rhs) const;
  bool operator<(const McSetReply& rhs) const;

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
    __isset.result = true;
    return result;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
    __isset.flags = true;
    return flags;
  }

  const folly::IOBuf& get_value() const& {
    return value;
  }

  folly::IOBuf get_value() && {
    return std::move(value);
  }

  template <typename T_McSetReply_value_struct_setter = folly::IOBuf>
  folly::IOBuf& set_value(T_McSetReply_value_struct_setter&& value_) {
    value = std::forward<T_McSetReply_value_struct_setter>(value_);
    __isset.value = true;
    return value;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McSetReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McSetReply_message_struct_setter&& message_) {
    message = std::forward<T_McSetReply_message_struct_setter>(message_);
    __isset.message = true;
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
    __isset.appSpecificErrorCode = true;
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McSetReply >;
};

void swap(McSetReply& a, McSetReply& b);

template <class Protocol_>
uint32_t McSetReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McDeleteRequest final : private apache::thrift::detail::st::ComparisonOperators<McDeleteRequest> {
 public:

  McDeleteRequest();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McDeleteRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg, uint64_t flags__arg, int32_t exptime__arg, folly::IOBuf value__arg, std::unordered_map<std::string, uint64_t> attributes__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    key = arg.extract();
    __isset.key = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    flags = arg.extract();
    __isset.flags = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    exptime = arg.extract();
    __isset.exptime = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<4, _T> arg) {
    value = arg.extract();
    __isset.value = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<5, _T> arg) {
    attributes = arg.extract();
    __isset.attributes = true;
  }

  McDeleteRequest(McDeleteRequest&&) = default;

  McDeleteRequest(const McDeleteRequest&) = default;

  McDeleteRequest& operator=(McDeleteRequest&&) = default;

  McDeleteRequest& operator=(const McDeleteRequest&) = default;
  void __clear();

  ~McDeleteRequest();

   ::carbon::thrift::IOBufKey key;
  uint64_t flags;
  int32_t exptime;
  folly::IOBuf value;
  std::unordered_map<std::string, uint64_t> attributes;

  struct __isset {
    bool key;
    bool flags;
    bool exptime;
    bool value;
    bool attributes;
  } __isset = {};
  bool operator==(const McDeleteRequest& rhs) const;
  bool operator<(const McDeleteRequest& rhs) const;

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McDeleteRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McDeleteRequest_key_struct_setter&& key_) {
    key = std::forward<T_McDeleteRequest_key_struct_setter>(key_);
    __isset.key = true;
    return key;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
    __isset.flags = true;
    return flags;
  }

  int32_t get_exptime() const {
    return exptime;
  }

  int32_t& set_exptime(int32_t exptime_) {
    exptime = exptime_;
    __isset.exptime = true;
    return exptime;
  }

  const folly::IOBuf& get_value() const& {
    return value;
  }

  folly::IOBuf get_value() && {
    return std::move(value);
  }

  template <typename T_McDeleteRequest_value_struct_setter = folly::IOBuf>
  folly::IOBuf& set_value(T_McDeleteRequest_value_struct_setter&& value_) {
    value = std::forward<T_McDeleteRequest_value_struct_setter>(value_);
    __isset.value = true;
    return value;
  }
  const std::unordered_map<std::string, uint64_t>& get_attributes() const&;
  std::unordered_map<std::string, uint64_t> get_attributes() &&;

  template <typename T_McDeleteRequest_attributes_struct_setter = std::unordered_map<std::string, uint64_t>>
  std::unordered_map<std::string, uint64_t>& set_attributes(T_McDeleteRequest_attributes_struct_setter&& attributes_) {
    attributes = std::forward<T_McDeleteRequest_attributes_struct_setter>(attributes_);
    __isset.attributes = true;
    return attributes;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McDeleteRequest >;
};

void swap(McDeleteRequest& a, McDeleteRequest& b);

template <class Protocol_>
uint32_t McDeleteRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McDeleteReply final : private apache::thrift::detail::st::ComparisonOperators<McDeleteReply> {
 public:

  McDeleteReply();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McDeleteReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, uint64_t flags__arg, folly::IOBuf value__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    result = arg.extract();
    __isset.result = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    flags = arg.extract();
    __isset.flags = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    value = arg.extract();
    __isset.value = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<4, _T> arg) {
    message = arg.extract();
    __isset.message = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<5, _T> arg) {
    appSpecificErrorCode = arg.extract();
    __isset.appSpecificErrorCode = true;
  }

  McDeleteReply(McDeleteReply&&) = default;

  McDeleteReply(const McDeleteReply&) = default;

  McDeleteReply& operator=(McDeleteReply&&) = default;

  McDeleteReply& operator=(const McDeleteReply&) = default;
  void __clear();

  ~McDeleteReply();

   ::carbon::Result result;
  uint64_t flags;
  folly::IOBuf value;
  ::std::string message;
  int16_t appSpecificErrorCode;

  struct __isset {
    bool result;
    bool flags;
    bool value;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McDeleteReply& rhs) const;
  bool operator<(const McDeleteReply& rhs) const;

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
    __isset.result = true;
    return result;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
    __isset.flags = true;
    return flags;
  }

  const folly::IOBuf& get_value() const& {
    return value;
  }

  folly::IOBuf get_value() && {
    return std::move(value);
  }

  template <typename T_McDeleteReply_value_struct_setter = folly::IOBuf>
  folly::IOBuf& set_value(T_McDeleteReply_value_struct_setter&& value_) {
    value = std::forward<T_McDeleteReply_value_struct_setter>(value_);
    __isset.value = true;
    return value;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McDeleteReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McDeleteReply_message_struct_setter&& message_) {
    message = std::forward<T_McDeleteReply_message_struct_setter>(message_);
    __isset.message = true;
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
    __isset.appSpecificErrorCode = true;
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McDeleteReply >;
};

void swap(McDeleteReply& a, McDeleteReply& b);

template <class Protocol_>
uint32_t McDeleteReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McLeaseGetRequest final : private apache::thrift::detail::st::ComparisonOperators<McLeaseGetRequest> {
 public:

  McLeaseGetRequest() :
      flags(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McLeaseGetRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg, uint64_t flags__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    key = arg.extract();
    __isset.key = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    flags = arg.extract();
    __isset.flags = true;
  }

  McLeaseGetRequest(McLeaseGetRequest&&) = default;

  McLeaseGetRequest(const McLeaseGetRequest&) = default;

  McLeaseGetRequest& operator=(McLeaseGetRequest&&) = default;

  McLeaseGetRequest& operator=(const McLeaseGetRequest&) = default;
  void __clear();
   ::carbon::thrift::IOBufKey key;
  uint64_t flags;

  struct __isset {
    bool key;
    bool flags;
  } __isset = {};
  bool operator==(const McLeaseGetRequest& rhs) const;
  bool operator<(const McLeaseGetRequest& rhs) const;

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McLeaseGetRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McLeaseGetRequest_key_struct_setter&& key_) {
    key = std::forward<T_McLeaseGetRequest_key_struct_setter>(key_);
    __isset.key = true;
    return key;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
    __isset.flags = true;
    return flags;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McLeaseGetRequest >;
};

void swap(McLeaseGetRequest& a, McLeaseGetRequest& b);

template <class Protocol_>
uint32_t McLeaseGetRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McLeaseGetReply final : private apache::thrift::detail::st::ComparisonOperators<McLeaseGetReply> {
 public:

  McLeaseGetReply();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McLeaseGetReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, int64_t leaseToken__arg, folly::IOBuf value__arg, uint64_t flags__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    result = arg.extract();
    __isset.result = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    leaseToken = arg.extract();
    __isset.leaseToken = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    value = arg.extract();
    __isset.value = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<4, _T> arg) {
    flags = arg.extract();
    __isset.flags = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<5, _T> arg) {
    message = arg.extract();
    __isset.message = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<6, _T> arg) {
    appSpecificErrorCode = arg.extract();
    __isset.appSpecificErrorCode = true;
  }

  McLeaseGetReply(McLeaseGetReply&&) = default;

  McLeaseGetReply(const McLeaseGetReply&) = default;

  McLeaseGetReply& operator=(McLeaseGetReply&&) = default;

  McLeaseGetReply& operator=(const McLeaseGetReply&) = default;
  void __clear();

  ~McLeaseGetReply();

   ::carbon::Result result;
  int64_t leaseToken;
  folly::IOBuf value;
  uint64_t flags;
  ::std::string message;
  int16_t appSpecificErrorCode;

  struct __isset {
    bool result;
    bool leaseToken;
    bool value;
    bool flags;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McLeaseGetReply& rhs) const;
  bool operator<(const McLeaseGetReply& rhs) const;

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const folly::IOBuf&> value_ref() const& {
    return {value, __isset.value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const folly::IOBuf&&> value_ref() const&& {
    return {std::move(value), __isset.value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<folly::IOBuf&> value_ref() & {
    return {value, __isset.value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<folly::IOBuf&&> value_ref() && {
    return {std::move(value), __isset.value};
  }

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
    __isset.result = true;
    return result;
  }

  int64_t get_leaseToken() const {
    return leaseToken;
  }

  int64_t& set_leaseToken(int64_t leaseToken_) {
    leaseToken = leaseToken_;
    __isset.leaseToken = true;
    return leaseToken;
  }

  const folly::IOBuf* get_value() const& {
    return __isset.value ? std::addressof(value) : nullptr;
  }

  folly::IOBuf* get_value() & {
    return __isset.value ? std::addressof(value) : nullptr;
  }
  folly::IOBuf* get_value() && = delete;

  template <typename T_McLeaseGetReply_value_struct_setter = folly::IOBuf>
  folly::IOBuf& set_value(T_McLeaseGetReply_value_struct_setter&& value_) {
    value = std::forward<T_McLeaseGetReply_value_struct_setter>(value_);
    __isset.value = true;
    return value;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
    __isset.flags = true;
    return flags;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McLeaseGetReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McLeaseGetReply_message_struct_setter&& message_) {
    message = std::forward<T_McLeaseGetReply_message_struct_setter>(message_);
    __isset.message = true;
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
    __isset.appSpecificErrorCode = true;
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McLeaseGetReply >;
};

void swap(McLeaseGetReply& a, McLeaseGetReply& b);

template <class Protocol_>
uint32_t McLeaseGetReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McLeaseSetRequest final : private apache::thrift::detail::st::ComparisonOperators<McLeaseSetRequest> {
 public:

  McLeaseSetRequest();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McLeaseSetRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg, int32_t exptime__arg, uint64_t flags__arg, folly::IOBuf value__arg, int64_t leaseToken__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    key = arg.extract();
    __isset.key = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    exptime = arg.extract();
    __isset.exptime = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    flags = arg.extract();
    __isset.flags = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<4, _T> arg) {
    value = arg.extract();
    __isset.value = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<5, _T> arg) {
    leaseToken = arg.extract();
    __isset.leaseToken = true;
  }

  McLeaseSetRequest(McLeaseSetRequest&&) = default;

  McLeaseSetRequest(const McLeaseSetRequest&) = default;

  McLeaseSetRequest& operator=(McLeaseSetRequest&&) = default;

  McLeaseSetRequest& operator=(const McLeaseSetRequest&) = default;
  void __clear();

  ~McLeaseSetRequest();

   ::carbon::thrift::IOBufKey key;
  int32_t exptime;
  uint64_t flags;
  folly::IOBuf value;
  int64_t leaseToken;

  struct __isset {
    bool key;
    bool exptime;
    bool flags;
    bool value;
    bool leaseToken;
  } __isset = {};
  bool operator==(const McLeaseSetRequest& rhs) const;
  bool operator<(const McLeaseSetRequest& rhs) const;

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McLeaseSetRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McLeaseSetRequest_key_struct_setter&& key_) {
    key = std::forward<T_McLeaseSetRequest_key_struct_setter>(key_);
    __isset.key = true;
    return key;
  }

  int32_t get_exptime() const {
    return exptime;
  }

  int32_t& set_exptime(int32_t exptime_) {
    exptime = exptime_;
    __isset.exptime = true;
    return exptime;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
    __isset.flags = true;
    return flags;
  }

  const folly::IOBuf& get_value() const& {
    return value;
  }

  folly::IOBuf get_value() && {
    return std::move(value);
  }

  template <typename T_McLeaseSetRequest_value_struct_setter = folly::IOBuf>
  folly::IOBuf& set_value(T_McLeaseSetRequest_value_struct_setter&& value_) {
    value = std::forward<T_McLeaseSetRequest_value_struct_setter>(value_);
    __isset.value = true;
    return value;
  }

  int64_t get_leaseToken() const {
    return leaseToken;
  }

  int64_t& set_leaseToken(int64_t leaseToken_) {
    leaseToken = leaseToken_;
    __isset.leaseToken = true;
    return leaseToken;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McLeaseSetRequest >;
};

void swap(McLeaseSetRequest& a, McLeaseSetRequest& b);

template <class Protocol_>
uint32_t McLeaseSetRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McLeaseSetReply final : private apache::thrift::detail::st::ComparisonOperators<McLeaseSetReply> {
 public:

  McLeaseSetReply() :
      result( ::carbon::Result::UNKNOWN),
      appSpecificErrorCode(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McLeaseSetReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    result = arg.extract();
    __isset.result = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    message = arg.extract();
    __isset.message = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    appSpecificErrorCode = arg.extract();
    __isset.appSpecificErrorCode = true;
  }

  McLeaseSetReply(McLeaseSetReply&&) = default;

  McLeaseSetReply(const McLeaseSetReply&) = default;

  McLeaseSetReply& operator=(McLeaseSetReply&&) = default;

  McLeaseSetReply& operator=(const McLeaseSetReply&) = default;
  void __clear();
   ::carbon::Result result;
  ::std::string message;
  int16_t appSpecificErrorCode;

  struct __isset {
    bool result;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McLeaseSetReply& rhs) const;
  bool operator<(const McLeaseSetReply& rhs) const;

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
    __isset.result = true;
    return result;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McLeaseSetReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McLeaseSetReply_message_struct_setter&& message_) {
    message = std::forward<T_McLeaseSetReply_message_struct_setter>(message_);
    __isset.message = true;
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
    __isset.appSpecificErrorCode = true;
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McLeaseSetReply >;
};

void swap(McLeaseSetReply& a, McLeaseSetReply& b);

template <class Protocol_>
uint32_t McLeaseSetReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McAddRequest final : private apache::thrift::detail::st::ComparisonOperators<McAddRequest> {
 public:

  McAddRequest() :
      exptime(0),
      flags(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McAddRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg, int32_t exptime__arg, uint64_t flags__arg, folly::IOBuf value__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    key = arg.extract();
    __isset.key = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    exptime = arg.extract();
    __isset.exptime = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    flags = arg.extract();
    __isset.flags = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<4, _T> arg) {
    value = arg.extract();
    __isset.value = true;
  }

  McAddRequest(McAddRequest&&) = default;

  McAddRequest(const McAddRequest&) = default;

  McAddRequest& operator=(McAddRequest&&) = default;

  McAddRequest& operator=(const McAddRequest&) = default;
  void __clear();
   ::carbon::thrift::IOBufKey key;
  int32_t exptime;
  uint64_t flags;
  folly::IOBuf value;

  struct __isset {
    bool key;
    bool exptime;
    bool flags;
    bool value;
  } __isset = {};
  bool operator==(const McAddRequest& rhs) const;
  bool operator<(const McAddRequest& rhs) const;

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McAddRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McAddRequest_key_struct_setter&& key_) {
    key = std::forward<T_McAddRequest_key_struct_setter>(key_);
    __isset.key = true;
    return key;
  }

  int32_t get_exptime() const {
    return exptime;
  }

  int32_t& set_exptime(int32_t exptime_) {
    exptime = exptime_;
    __isset.exptime = true;
    return exptime;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
    __isset.flags = true;
    return flags;
  }

  const folly::IOBuf& get_value() const& {
    return value;
  }

  folly::IOBuf get_value() && {
    return std::move(value);
  }

  template <typename T_McAddRequest_value_struct_setter = folly::IOBuf>
  folly::IOBuf& set_value(T_McAddRequest_value_struct_setter&& value_) {
    value = std::forward<T_McAddRequest_value_struct_setter>(value_);
    __isset.value = true;
    return value;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McAddRequest >;
};

void swap(McAddRequest& a, McAddRequest& b);

template <class Protocol_>
uint32_t McAddRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McAddReply final : private apache::thrift::detail::st::ComparisonOperators<McAddReply> {
 public:

  McAddReply() :
      result( ::carbon::Result::UNKNOWN),
      appSpecificErrorCode(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McAddReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    result = arg.extract();
    __isset.result = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    message = arg.extract();
    __isset.message = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    appSpecificErrorCode = arg.extract();
    __isset.appSpecificErrorCode = true;
  }

  McAddReply(McAddReply&&) = default;

  McAddReply(const McAddReply&) = default;

  McAddReply& operator=(McAddReply&&) = default;

  McAddReply& operator=(const McAddReply&) = default;
  void __clear();
   ::carbon::Result result;
  ::std::string message;
  int16_t appSpecificErrorCode;

  struct __isset {
    bool result;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McAddReply& rhs) const;
  bool operator<(const McAddReply& rhs) const;

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
    __isset.result = true;
    return result;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McAddReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McAddReply_message_struct_setter&& message_) {
    message = std::forward<T_McAddReply_message_struct_setter>(message_);
    __isset.message = true;
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
    __isset.appSpecificErrorCode = true;
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McAddReply >;
};

void swap(McAddReply& a, McAddReply& b);

template <class Protocol_>
uint32_t McAddReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McReplaceRequest final : private apache::thrift::detail::st::ComparisonOperators<McReplaceRequest> {
 public:

  McReplaceRequest() :
      exptime(0),
      flags(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McReplaceRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg, int32_t exptime__arg, uint64_t flags__arg, folly::IOBuf value__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    key = arg.extract();
    __isset.key = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    exptime = arg.extract();
    __isset.exptime = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    flags = arg.extract();
    __isset.flags = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<4, _T> arg) {
    value = arg.extract();
    __isset.value = true;
  }

  McReplaceRequest(McReplaceRequest&&) = default;

  McReplaceRequest(const McReplaceRequest&) = default;

  McReplaceRequest& operator=(McReplaceRequest&&) = default;

  McReplaceRequest& operator=(const McReplaceRequest&) = default;
  void __clear();
   ::carbon::thrift::IOBufKey key;
  int32_t exptime;
  uint64_t flags;
  folly::IOBuf value;

  struct __isset {
    bool key;
    bool exptime;
    bool flags;
    bool value;
  } __isset = {};
  bool operator==(const McReplaceRequest& rhs) const;
  bool operator<(const McReplaceRequest& rhs) const;

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McReplaceRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McReplaceRequest_key_struct_setter&& key_) {
    key = std::forward<T_McReplaceRequest_key_struct_setter>(key_);
    __isset.key = true;
    return key;
  }

  int32_t get_exptime() const {
    return exptime;
  }

  int32_t& set_exptime(int32_t exptime_) {
    exptime = exptime_;
    __isset.exptime = true;
    return exptime;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
    __isset.flags = true;
    return flags;
  }

  const folly::IOBuf& get_value() const& {
    return value;
  }

  folly::IOBuf get_value() && {
    return std::move(value);
  }

  template <typename T_McReplaceRequest_value_struct_setter = folly::IOBuf>
  folly::IOBuf& set_value(T_McReplaceRequest_value_struct_setter&& value_) {
    value = std::forward<T_McReplaceRequest_value_struct_setter>(value_);
    __isset.value = true;
    return value;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McReplaceRequest >;
};

void swap(McReplaceRequest& a, McReplaceRequest& b);

template <class Protocol_>
uint32_t McReplaceRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McReplaceReply final : private apache::thrift::detail::st::ComparisonOperators<McReplaceReply> {
 public:

  McReplaceReply() :
      result( ::carbon::Result::UNKNOWN),
      appSpecificErrorCode(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McReplaceReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    result = arg.extract();
    __isset.result = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    message = arg.extract();
    __isset.message = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    appSpecificErrorCode = arg.extract();
    __isset.appSpecificErrorCode = true;
  }

  McReplaceReply(McReplaceReply&&) = default;

  McReplaceReply(const McReplaceReply&) = default;

  McReplaceReply& operator=(McReplaceReply&&) = default;

  McReplaceReply& operator=(const McReplaceReply&) = default;
  void __clear();
   ::carbon::Result result;
  ::std::string message;
  int16_t appSpecificErrorCode;

  struct __isset {
    bool result;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McReplaceReply& rhs) const;
  bool operator<(const McReplaceReply& rhs) const;

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
    __isset.result = true;
    return result;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McReplaceReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McReplaceReply_message_struct_setter&& message_) {
    message = std::forward<T_McReplaceReply_message_struct_setter>(message_);
    __isset.message = true;
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
    __isset.appSpecificErrorCode = true;
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McReplaceReply >;
};

void swap(McReplaceReply& a, McReplaceReply& b);

template <class Protocol_>
uint32_t McReplaceReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McGetsRequest final : private apache::thrift::detail::st::ComparisonOperators<McGetsRequest> {
 public:

  McGetsRequest() :
      flags(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McGetsRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg, uint64_t flags__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    key = arg.extract();
    __isset.key = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    flags = arg.extract();
    __isset.flags = true;
  }

  McGetsRequest(McGetsRequest&&) = default;

  McGetsRequest(const McGetsRequest&) = default;

  McGetsRequest& operator=(McGetsRequest&&) = default;

  McGetsRequest& operator=(const McGetsRequest&) = default;
  void __clear();
   ::carbon::thrift::IOBufKey key;
  uint64_t flags;

  struct __isset {
    bool key;
    bool flags;
  } __isset = {};
  bool operator==(const McGetsRequest& rhs) const;
  bool operator<(const McGetsRequest& rhs) const;

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McGetsRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McGetsRequest_key_struct_setter&& key_) {
    key = std::forward<T_McGetsRequest_key_struct_setter>(key_);
    __isset.key = true;
    return key;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
    __isset.flags = true;
    return flags;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McGetsRequest >;
};

void swap(McGetsRequest& a, McGetsRequest& b);

template <class Protocol_>
uint32_t McGetsRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McGetsReply final : private apache::thrift::detail::st::ComparisonOperators<McGetsReply> {
 public:

  McGetsReply();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McGetsReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, uint64_t casToken__arg, folly::IOBuf value__arg, uint64_t flags__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    result = arg.extract();
    __isset.result = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    casToken = arg.extract();
    __isset.casToken = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    value = arg.extract();
    __isset.value = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<4, _T> arg) {
    flags = arg.extract();
    __isset.flags = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<5, _T> arg) {
    message = arg.extract();
    __isset.message = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<6, _T> arg) {
    appSpecificErrorCode = arg.extract();
    __isset.appSpecificErrorCode = true;
  }

  McGetsReply(McGetsReply&&) = default;

  McGetsReply(const McGetsReply&) = default;

  McGetsReply& operator=(McGetsReply&&) = default;

  McGetsReply& operator=(const McGetsReply&) = default;
  void __clear();

  ~McGetsReply();

   ::carbon::Result result;
  uint64_t casToken;
  folly::IOBuf value;
  uint64_t flags;
  ::std::string message;
  int16_t appSpecificErrorCode;

  struct __isset {
    bool result;
    bool casToken;
    bool value;
    bool flags;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McGetsReply& rhs) const;
  bool operator<(const McGetsReply& rhs) const;

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const folly::IOBuf&> value_ref() const& {
    return {value, __isset.value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const folly::IOBuf&&> value_ref() const&& {
    return {std::move(value), __isset.value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<folly::IOBuf&> value_ref() & {
    return {value, __isset.value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<folly::IOBuf&&> value_ref() && {
    return {std::move(value), __isset.value};
  }

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
    __isset.result = true;
    return result;
  }

  uint64_t get_casToken() const {
    return casToken;
  }

  uint64_t& set_casToken(uint64_t casToken_) {
    casToken = casToken_;
    __isset.casToken = true;
    return casToken;
  }

  const folly::IOBuf* get_value() const& {
    return __isset.value ? std::addressof(value) : nullptr;
  }

  folly::IOBuf* get_value() & {
    return __isset.value ? std::addressof(value) : nullptr;
  }
  folly::IOBuf* get_value() && = delete;

  template <typename T_McGetsReply_value_struct_setter = folly::IOBuf>
  folly::IOBuf& set_value(T_McGetsReply_value_struct_setter&& value_) {
    value = std::forward<T_McGetsReply_value_struct_setter>(value_);
    __isset.value = true;
    return value;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
    __isset.flags = true;
    return flags;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McGetsReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McGetsReply_message_struct_setter&& message_) {
    message = std::forward<T_McGetsReply_message_struct_setter>(message_);
    __isset.message = true;
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
    __isset.appSpecificErrorCode = true;
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McGetsReply >;
};

void swap(McGetsReply& a, McGetsReply& b);

template <class Protocol_>
uint32_t McGetsReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McCasRequest final : private apache::thrift::detail::st::ComparisonOperators<McCasRequest> {
 public:

  McCasRequest();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McCasRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg, int32_t exptime__arg, uint64_t flags__arg, folly::IOBuf value__arg, uint64_t casToken__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    key = arg.extract();
    __isset.key = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    exptime = arg.extract();
    __isset.exptime = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    flags = arg.extract();
    __isset.flags = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<4, _T> arg) {
    value = arg.extract();
    __isset.value = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<5, _T> arg) {
    casToken = arg.extract();
    __isset.casToken = true;
  }

  McCasRequest(McCasRequest&&) = default;

  McCasRequest(const McCasRequest&) = default;

  McCasRequest& operator=(McCasRequest&&) = default;

  McCasRequest& operator=(const McCasRequest&) = default;
  void __clear();

  ~McCasRequest();

   ::carbon::thrift::IOBufKey key;
  int32_t exptime;
  uint64_t flags;
  folly::IOBuf value;
  uint64_t casToken;

  struct __isset {
    bool key;
    bool exptime;
    bool flags;
    bool value;
    bool casToken;
  } __isset = {};
  bool operator==(const McCasRequest& rhs) const;
  bool operator<(const McCasRequest& rhs) const;

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McCasRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McCasRequest_key_struct_setter&& key_) {
    key = std::forward<T_McCasRequest_key_struct_setter>(key_);
    __isset.key = true;
    return key;
  }

  int32_t get_exptime() const {
    return exptime;
  }

  int32_t& set_exptime(int32_t exptime_) {
    exptime = exptime_;
    __isset.exptime = true;
    return exptime;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
    __isset.flags = true;
    return flags;
  }

  const folly::IOBuf& get_value() const& {
    return value;
  }

  folly::IOBuf get_value() && {
    return std::move(value);
  }

  template <typename T_McCasRequest_value_struct_setter = folly::IOBuf>
  folly::IOBuf& set_value(T_McCasRequest_value_struct_setter&& value_) {
    value = std::forward<T_McCasRequest_value_struct_setter>(value_);
    __isset.value = true;
    return value;
  }

  uint64_t get_casToken() const {
    return casToken;
  }

  uint64_t& set_casToken(uint64_t casToken_) {
    casToken = casToken_;
    __isset.casToken = true;
    return casToken;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McCasRequest >;
};

void swap(McCasRequest& a, McCasRequest& b);

template <class Protocol_>
uint32_t McCasRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McCasReply final : private apache::thrift::detail::st::ComparisonOperators<McCasReply> {
 public:

  McCasReply() :
      result( ::carbon::Result::UNKNOWN),
      appSpecificErrorCode(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McCasReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    result = arg.extract();
    __isset.result = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    message = arg.extract();
    __isset.message = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    appSpecificErrorCode = arg.extract();
    __isset.appSpecificErrorCode = true;
  }

  McCasReply(McCasReply&&) = default;

  McCasReply(const McCasReply&) = default;

  McCasReply& operator=(McCasReply&&) = default;

  McCasReply& operator=(const McCasReply&) = default;
  void __clear();
   ::carbon::Result result;
  ::std::string message;
  int16_t appSpecificErrorCode;

  struct __isset {
    bool result;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McCasReply& rhs) const;
  bool operator<(const McCasReply& rhs) const;

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
    __isset.result = true;
    return result;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McCasReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McCasReply_message_struct_setter&& message_) {
    message = std::forward<T_McCasReply_message_struct_setter>(message_);
    __isset.message = true;
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
    __isset.appSpecificErrorCode = true;
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McCasReply >;
};

void swap(McCasReply& a, McCasReply& b);

template <class Protocol_>
uint32_t McCasReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McIncrRequest final : private apache::thrift::detail::st::ComparisonOperators<McIncrRequest> {
 public:

  McIncrRequest() :
      delta(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McIncrRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg, int64_t delta__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    key = arg.extract();
    __isset.key = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    delta = arg.extract();
    __isset.delta = true;
  }

  McIncrRequest(McIncrRequest&&) = default;

  McIncrRequest(const McIncrRequest&) = default;

  McIncrRequest& operator=(McIncrRequest&&) = default;

  McIncrRequest& operator=(const McIncrRequest&) = default;
  void __clear();
   ::carbon::thrift::IOBufKey key;
  int64_t delta;

  struct __isset {
    bool key;
    bool delta;
  } __isset = {};
  bool operator==(const McIncrRequest& rhs) const;
  bool operator<(const McIncrRequest& rhs) const;

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McIncrRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McIncrRequest_key_struct_setter&& key_) {
    key = std::forward<T_McIncrRequest_key_struct_setter>(key_);
    __isset.key = true;
    return key;
  }

  int64_t get_delta() const {
    return delta;
  }

  int64_t& set_delta(int64_t delta_) {
    delta = delta_;
    __isset.delta = true;
    return delta;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McIncrRequest >;
};

void swap(McIncrRequest& a, McIncrRequest& b);

template <class Protocol_>
uint32_t McIncrRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McIncrReply final : private apache::thrift::detail::st::ComparisonOperators<McIncrReply> {
 public:

  McIncrReply() :
      result( ::carbon::Result::UNKNOWN),
      delta(0),
      appSpecificErrorCode(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McIncrReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, int64_t delta__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    result = arg.extract();
    __isset.result = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    delta = arg.extract();
    __isset.delta = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    message = arg.extract();
    __isset.message = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<4, _T> arg) {
    appSpecificErrorCode = arg.extract();
    __isset.appSpecificErrorCode = true;
  }

  McIncrReply(McIncrReply&&) = default;

  McIncrReply(const McIncrReply&) = default;

  McIncrReply& operator=(McIncrReply&&) = default;

  McIncrReply& operator=(const McIncrReply&) = default;
  void __clear();
   ::carbon::Result result;
  int64_t delta;
  ::std::string message;
  int16_t appSpecificErrorCode;

  struct __isset {
    bool result;
    bool delta;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McIncrReply& rhs) const;
  bool operator<(const McIncrReply& rhs) const;

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
    __isset.result = true;
    return result;
  }

  int64_t get_delta() const {
    return delta;
  }

  int64_t& set_delta(int64_t delta_) {
    delta = delta_;
    __isset.delta = true;
    return delta;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McIncrReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McIncrReply_message_struct_setter&& message_) {
    message = std::forward<T_McIncrReply_message_struct_setter>(message_);
    __isset.message = true;
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
    __isset.appSpecificErrorCode = true;
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McIncrReply >;
};

void swap(McIncrReply& a, McIncrReply& b);

template <class Protocol_>
uint32_t McIncrReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McDecrRequest final : private apache::thrift::detail::st::ComparisonOperators<McDecrRequest> {
 public:

  McDecrRequest() :
      delta(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McDecrRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg, int64_t delta__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    key = arg.extract();
    __isset.key = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    delta = arg.extract();
    __isset.delta = true;
  }

  McDecrRequest(McDecrRequest&&) = default;

  McDecrRequest(const McDecrRequest&) = default;

  McDecrRequest& operator=(McDecrRequest&&) = default;

  McDecrRequest& operator=(const McDecrRequest&) = default;
  void __clear();
   ::carbon::thrift::IOBufKey key;
  int64_t delta;

  struct __isset {
    bool key;
    bool delta;
  } __isset = {};
  bool operator==(const McDecrRequest& rhs) const;
  bool operator<(const McDecrRequest& rhs) const;

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McDecrRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McDecrRequest_key_struct_setter&& key_) {
    key = std::forward<T_McDecrRequest_key_struct_setter>(key_);
    __isset.key = true;
    return key;
  }

  int64_t get_delta() const {
    return delta;
  }

  int64_t& set_delta(int64_t delta_) {
    delta = delta_;
    __isset.delta = true;
    return delta;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McDecrRequest >;
};

void swap(McDecrRequest& a, McDecrRequest& b);

template <class Protocol_>
uint32_t McDecrRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McDecrReply final : private apache::thrift::detail::st::ComparisonOperators<McDecrReply> {
 public:

  McDecrReply() :
      result( ::carbon::Result::UNKNOWN),
      delta(0),
      appSpecificErrorCode(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McDecrReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, int64_t delta__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    result = arg.extract();
    __isset.result = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    delta = arg.extract();
    __isset.delta = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    message = arg.extract();
    __isset.message = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<4, _T> arg) {
    appSpecificErrorCode = arg.extract();
    __isset.appSpecificErrorCode = true;
  }

  McDecrReply(McDecrReply&&) = default;

  McDecrReply(const McDecrReply&) = default;

  McDecrReply& operator=(McDecrReply&&) = default;

  McDecrReply& operator=(const McDecrReply&) = default;
  void __clear();
   ::carbon::Result result;
  int64_t delta;
  ::std::string message;
  int16_t appSpecificErrorCode;

  struct __isset {
    bool result;
    bool delta;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McDecrReply& rhs) const;
  bool operator<(const McDecrReply& rhs) const;

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
    __isset.result = true;
    return result;
  }

  int64_t get_delta() const {
    return delta;
  }

  int64_t& set_delta(int64_t delta_) {
    delta = delta_;
    __isset.delta = true;
    return delta;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McDecrReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McDecrReply_message_struct_setter&& message_) {
    message = std::forward<T_McDecrReply_message_struct_setter>(message_);
    __isset.message = true;
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
    __isset.appSpecificErrorCode = true;
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McDecrReply >;
};

void swap(McDecrReply& a, McDecrReply& b);

template <class Protocol_>
uint32_t McDecrReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McMetagetRequest final : private apache::thrift::detail::st::ComparisonOperators<McMetagetRequest> {
 public:

  McMetagetRequest() {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McMetagetRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    key = arg.extract();
    __isset.key = true;
  }

  McMetagetRequest(McMetagetRequest&&) = default;

  McMetagetRequest(const McMetagetRequest&) = default;

  McMetagetRequest& operator=(McMetagetRequest&&) = default;

  McMetagetRequest& operator=(const McMetagetRequest&) = default;
  void __clear();
   ::carbon::thrift::IOBufKey key;

  struct __isset {
    bool key;
  } __isset = {};
  bool operator==(const McMetagetRequest& rhs) const;
  bool operator<(const McMetagetRequest& rhs) const;

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McMetagetRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McMetagetRequest_key_struct_setter&& key_) {
    key = std::forward<T_McMetagetRequest_key_struct_setter>(key_);
    __isset.key = true;
    return key;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McMetagetRequest >;
};

void swap(McMetagetRequest& a, McMetagetRequest& b);

template <class Protocol_>
uint32_t McMetagetRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McMetagetReply final : private apache::thrift::detail::st::ComparisonOperators<McMetagetReply> {
 public:

  McMetagetReply();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McMetagetReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, int32_t age__arg, int32_t exptime__arg, int16_t ipv__arg, ::std::string ipAddress__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    result = arg.extract();
    __isset.result = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    age = arg.extract();
    __isset.age = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    exptime = arg.extract();
    __isset.exptime = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<4, _T> arg) {
    ipv = arg.extract();
    __isset.ipv = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<5, _T> arg) {
    ipAddress = arg.extract();
    __isset.ipAddress = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<6, _T> arg) {
    message = arg.extract();
    __isset.message = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<7, _T> arg) {
    appSpecificErrorCode = arg.extract();
    __isset.appSpecificErrorCode = true;
  }

  McMetagetReply(McMetagetReply&&) = default;

  McMetagetReply(const McMetagetReply&) = default;

  McMetagetReply& operator=(McMetagetReply&&) = default;

  McMetagetReply& operator=(const McMetagetReply&) = default;
  void __clear();

  ~McMetagetReply();

   ::carbon::Result result;
  int32_t age;
  int32_t exptime;
  int16_t ipv;
  ::std::string ipAddress;
  ::std::string message;
  int16_t appSpecificErrorCode;

  struct __isset {
    bool result;
    bool age;
    bool exptime;
    bool ipv;
    bool ipAddress;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McMetagetReply& rhs) const;
  bool operator<(const McMetagetReply& rhs) const;

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
    __isset.result = true;
    return result;
  }

  int32_t get_age() const {
    return age;
  }

  int32_t& set_age(int32_t age_) {
    age = age_;
    __isset.age = true;
    return age;
  }

  int32_t get_exptime() const {
    return exptime;
  }

  int32_t& set_exptime(int32_t exptime_) {
    exptime = exptime_;
    __isset.exptime = true;
    return exptime;
  }

  int16_t get_ipv() const {
    return ipv;
  }

  int16_t& set_ipv(int16_t ipv_) {
    ipv = ipv_;
    __isset.ipv = true;
    return ipv;
  }

  const ::std::string& get_ipAddress() const& {
    return ipAddress;
  }

  ::std::string get_ipAddress() && {
    return std::move(ipAddress);
  }

  template <typename T_McMetagetReply_ipAddress_struct_setter = ::std::string>
  ::std::string& set_ipAddress(T_McMetagetReply_ipAddress_struct_setter&& ipAddress_) {
    ipAddress = std::forward<T_McMetagetReply_ipAddress_struct_setter>(ipAddress_);
    __isset.ipAddress = true;
    return ipAddress;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McMetagetReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McMetagetReply_message_struct_setter&& message_) {
    message = std::forward<T_McMetagetReply_message_struct_setter>(message_);
    __isset.message = true;
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
    __isset.appSpecificErrorCode = true;
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McMetagetReply >;
};

void swap(McMetagetReply& a, McMetagetReply& b);

template <class Protocol_>
uint32_t McMetagetReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McAppendRequest final : private apache::thrift::detail::st::ComparisonOperators<McAppendRequest> {
 public:

  McAppendRequest() :
      exptime(0),
      flags(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McAppendRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg, int32_t exptime__arg, uint64_t flags__arg, folly::IOBuf value__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    key = arg.extract();
    __isset.key = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    exptime = arg.extract();
    __isset.exptime = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    flags = arg.extract();
    __isset.flags = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<4, _T> arg) {
    value = arg.extract();
    __isset.value = true;
  }

  McAppendRequest(McAppendRequest&&) = default;

  McAppendRequest(const McAppendRequest&) = default;

  McAppendRequest& operator=(McAppendRequest&&) = default;

  McAppendRequest& operator=(const McAppendRequest&) = default;
  void __clear();
   ::carbon::thrift::IOBufKey key;
  int32_t exptime;
  uint64_t flags;
  folly::IOBuf value;

  struct __isset {
    bool key;
    bool exptime;
    bool flags;
    bool value;
  } __isset = {};
  bool operator==(const McAppendRequest& rhs) const;
  bool operator<(const McAppendRequest& rhs) const;

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McAppendRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McAppendRequest_key_struct_setter&& key_) {
    key = std::forward<T_McAppendRequest_key_struct_setter>(key_);
    __isset.key = true;
    return key;
  }

  int32_t get_exptime() const {
    return exptime;
  }

  int32_t& set_exptime(int32_t exptime_) {
    exptime = exptime_;
    __isset.exptime = true;
    return exptime;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
    __isset.flags = true;
    return flags;
  }

  const folly::IOBuf& get_value() const& {
    return value;
  }

  folly::IOBuf get_value() && {
    return std::move(value);
  }

  template <typename T_McAppendRequest_value_struct_setter = folly::IOBuf>
  folly::IOBuf& set_value(T_McAppendRequest_value_struct_setter&& value_) {
    value = std::forward<T_McAppendRequest_value_struct_setter>(value_);
    __isset.value = true;
    return value;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McAppendRequest >;
};

void swap(McAppendRequest& a, McAppendRequest& b);

template <class Protocol_>
uint32_t McAppendRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McAppendReply final : private apache::thrift::detail::st::ComparisonOperators<McAppendReply> {
 public:

  McAppendReply() :
      result( ::carbon::Result::UNKNOWN),
      appSpecificErrorCode(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McAppendReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    result = arg.extract();
    __isset.result = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    message = arg.extract();
    __isset.message = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    appSpecificErrorCode = arg.extract();
    __isset.appSpecificErrorCode = true;
  }

  McAppendReply(McAppendReply&&) = default;

  McAppendReply(const McAppendReply&) = default;

  McAppendReply& operator=(McAppendReply&&) = default;

  McAppendReply& operator=(const McAppendReply&) = default;
  void __clear();
   ::carbon::Result result;
  ::std::string message;
  int16_t appSpecificErrorCode;

  struct __isset {
    bool result;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McAppendReply& rhs) const;
  bool operator<(const McAppendReply& rhs) const;

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
    __isset.result = true;
    return result;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McAppendReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McAppendReply_message_struct_setter&& message_) {
    message = std::forward<T_McAppendReply_message_struct_setter>(message_);
    __isset.message = true;
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
    __isset.appSpecificErrorCode = true;
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McAppendReply >;
};

void swap(McAppendReply& a, McAppendReply& b);

template <class Protocol_>
uint32_t McAppendReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McPrependRequest final : private apache::thrift::detail::st::ComparisonOperators<McPrependRequest> {
 public:

  McPrependRequest() :
      exptime(0),
      flags(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McPrependRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg, int32_t exptime__arg, uint64_t flags__arg, folly::IOBuf value__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    key = arg.extract();
    __isset.key = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    exptime = arg.extract();
    __isset.exptime = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    flags = arg.extract();
    __isset.flags = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<4, _T> arg) {
    value = arg.extract();
    __isset.value = true;
  }

  McPrependRequest(McPrependRequest&&) = default;

  McPrependRequest(const McPrependRequest&) = default;

  McPrependRequest& operator=(McPrependRequest&&) = default;

  McPrependRequest& operator=(const McPrependRequest&) = default;
  void __clear();
   ::carbon::thrift::IOBufKey key;
  int32_t exptime;
  uint64_t flags;
  folly::IOBuf value;

  struct __isset {
    bool key;
    bool exptime;
    bool flags;
    bool value;
  } __isset = {};
  bool operator==(const McPrependRequest& rhs) const;
  bool operator<(const McPrependRequest& rhs) const;

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McPrependRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McPrependRequest_key_struct_setter&& key_) {
    key = std::forward<T_McPrependRequest_key_struct_setter>(key_);
    __isset.key = true;
    return key;
  }

  int32_t get_exptime() const {
    return exptime;
  }

  int32_t& set_exptime(int32_t exptime_) {
    exptime = exptime_;
    __isset.exptime = true;
    return exptime;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
    __isset.flags = true;
    return flags;
  }

  const folly::IOBuf& get_value() const& {
    return value;
  }

  folly::IOBuf get_value() && {
    return std::move(value);
  }

  template <typename T_McPrependRequest_value_struct_setter = folly::IOBuf>
  folly::IOBuf& set_value(T_McPrependRequest_value_struct_setter&& value_) {
    value = std::forward<T_McPrependRequest_value_struct_setter>(value_);
    __isset.value = true;
    return value;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McPrependRequest >;
};

void swap(McPrependRequest& a, McPrependRequest& b);

template <class Protocol_>
uint32_t McPrependRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McPrependReply final : private apache::thrift::detail::st::ComparisonOperators<McPrependReply> {
 public:

  McPrependReply() :
      result( ::carbon::Result::UNKNOWN),
      appSpecificErrorCode(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McPrependReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    result = arg.extract();
    __isset.result = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    message = arg.extract();
    __isset.message = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    appSpecificErrorCode = arg.extract();
    __isset.appSpecificErrorCode = true;
  }

  McPrependReply(McPrependReply&&) = default;

  McPrependReply(const McPrependReply&) = default;

  McPrependReply& operator=(McPrependReply&&) = default;

  McPrependReply& operator=(const McPrependReply&) = default;
  void __clear();
   ::carbon::Result result;
  ::std::string message;
  int16_t appSpecificErrorCode;

  struct __isset {
    bool result;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McPrependReply& rhs) const;
  bool operator<(const McPrependReply& rhs) const;

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
    __isset.result = true;
    return result;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McPrependReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McPrependReply_message_struct_setter&& message_) {
    message = std::forward<T_McPrependReply_message_struct_setter>(message_);
    __isset.message = true;
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
    __isset.appSpecificErrorCode = true;
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McPrependReply >;
};

void swap(McPrependReply& a, McPrependReply& b);

template <class Protocol_>
uint32_t McPrependReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McTouchRequest final : private apache::thrift::detail::st::ComparisonOperators<McTouchRequest> {
 public:

  McTouchRequest() :
      exptime(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McTouchRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg, int32_t exptime__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    key = arg.extract();
    __isset.key = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    exptime = arg.extract();
    __isset.exptime = true;
  }

  McTouchRequest(McTouchRequest&&) = default;

  McTouchRequest(const McTouchRequest&) = default;

  McTouchRequest& operator=(McTouchRequest&&) = default;

  McTouchRequest& operator=(const McTouchRequest&) = default;
  void __clear();
   ::carbon::thrift::IOBufKey key;
  int32_t exptime;

  struct __isset {
    bool key;
    bool exptime;
  } __isset = {};
  bool operator==(const McTouchRequest& rhs) const;
  bool operator<(const McTouchRequest& rhs) const;

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McTouchRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McTouchRequest_key_struct_setter&& key_) {
    key = std::forward<T_McTouchRequest_key_struct_setter>(key_);
    __isset.key = true;
    return key;
  }

  int32_t get_exptime() const {
    return exptime;
  }

  int32_t& set_exptime(int32_t exptime_) {
    exptime = exptime_;
    __isset.exptime = true;
    return exptime;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McTouchRequest >;
};

void swap(McTouchRequest& a, McTouchRequest& b);

template <class Protocol_>
uint32_t McTouchRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McTouchReply final : private apache::thrift::detail::st::ComparisonOperators<McTouchReply> {
 public:

  McTouchReply() :
      result( ::carbon::Result::UNKNOWN),
      appSpecificErrorCode(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McTouchReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    result = arg.extract();
    __isset.result = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    message = arg.extract();
    __isset.message = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    appSpecificErrorCode = arg.extract();
    __isset.appSpecificErrorCode = true;
  }

  McTouchReply(McTouchReply&&) = default;

  McTouchReply(const McTouchReply&) = default;

  McTouchReply& operator=(McTouchReply&&) = default;

  McTouchReply& operator=(const McTouchReply&) = default;
  void __clear();
   ::carbon::Result result;
  ::std::string message;
  int16_t appSpecificErrorCode;

  struct __isset {
    bool result;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McTouchReply& rhs) const;
  bool operator<(const McTouchReply& rhs) const;

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
    __isset.result = true;
    return result;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McTouchReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McTouchReply_message_struct_setter&& message_) {
    message = std::forward<T_McTouchReply_message_struct_setter>(message_);
    __isset.message = true;
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
    __isset.appSpecificErrorCode = true;
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McTouchReply >;
};

void swap(McTouchReply& a, McTouchReply& b);

template <class Protocol_>
uint32_t McTouchReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McFlushReRequest final : private apache::thrift::detail::st::ComparisonOperators<McFlushReRequest> {
 public:

  McFlushReRequest() {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McFlushReRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    key = arg.extract();
    __isset.key = true;
  }

  McFlushReRequest(McFlushReRequest&&) = default;

  McFlushReRequest(const McFlushReRequest&) = default;

  McFlushReRequest& operator=(McFlushReRequest&&) = default;

  McFlushReRequest& operator=(const McFlushReRequest&) = default;
  void __clear();
   ::carbon::thrift::IOBufKey key;

  struct __isset {
    bool key;
  } __isset = {};
  bool operator==(const McFlushReRequest& rhs) const;
  bool operator<(const McFlushReRequest& rhs) const;

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McFlushReRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McFlushReRequest_key_struct_setter&& key_) {
    key = std::forward<T_McFlushReRequest_key_struct_setter>(key_);
    __isset.key = true;
    return key;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McFlushReRequest >;
};

void swap(McFlushReRequest& a, McFlushReRequest& b);

template <class Protocol_>
uint32_t McFlushReRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McFlushReReply final : private apache::thrift::detail::st::ComparisonOperators<McFlushReReply> {
 public:

  McFlushReReply() :
      result( ::carbon::Result::UNKNOWN),
      appSpecificErrorCode(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McFlushReReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    result = arg.extract();
    __isset.result = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    message = arg.extract();
    __isset.message = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    appSpecificErrorCode = arg.extract();
    __isset.appSpecificErrorCode = true;
  }

  McFlushReReply(McFlushReReply&&) = default;

  McFlushReReply(const McFlushReReply&) = default;

  McFlushReReply& operator=(McFlushReReply&&) = default;

  McFlushReReply& operator=(const McFlushReReply&) = default;
  void __clear();
   ::carbon::Result result;
  ::std::string message;
  int16_t appSpecificErrorCode;

  struct __isset {
    bool result;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McFlushReReply& rhs) const;
  bool operator<(const McFlushReReply& rhs) const;

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
    __isset.result = true;
    return result;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McFlushReReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McFlushReReply_message_struct_setter&& message_) {
    message = std::forward<T_McFlushReReply_message_struct_setter>(message_);
    __isset.message = true;
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
    __isset.appSpecificErrorCode = true;
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McFlushReReply >;
};

void swap(McFlushReReply& a, McFlushReReply& b);

template <class Protocol_>
uint32_t McFlushReReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McFlushAllRequest final : private apache::thrift::detail::st::ComparisonOperators<McFlushAllRequest> {
 public:

  McFlushAllRequest() :
      delay(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McFlushAllRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg, int32_t delay__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    key = arg.extract();
    __isset.key = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    delay = arg.extract();
    __isset.delay = true;
  }

  McFlushAllRequest(McFlushAllRequest&&) = default;

  McFlushAllRequest(const McFlushAllRequest&) = default;

  McFlushAllRequest& operator=(McFlushAllRequest&&) = default;

  McFlushAllRequest& operator=(const McFlushAllRequest&) = default;
  void __clear();
   ::carbon::thrift::IOBufKey key;
  int32_t delay;

  struct __isset {
    bool key;
    bool delay;
  } __isset = {};
  bool operator==(const McFlushAllRequest& rhs) const;
  bool operator<(const McFlushAllRequest& rhs) const;

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McFlushAllRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McFlushAllRequest_key_struct_setter&& key_) {
    key = std::forward<T_McFlushAllRequest_key_struct_setter>(key_);
    __isset.key = true;
    return key;
  }

  int32_t get_delay() const {
    return delay;
  }

  int32_t& set_delay(int32_t delay_) {
    delay = delay_;
    __isset.delay = true;
    return delay;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McFlushAllRequest >;
};

void swap(McFlushAllRequest& a, McFlushAllRequest& b);

template <class Protocol_>
uint32_t McFlushAllRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McFlushAllReply final : private apache::thrift::detail::st::ComparisonOperators<McFlushAllReply> {
 public:

  McFlushAllReply() :
      result( ::carbon::Result::UNKNOWN),
      appSpecificErrorCode(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McFlushAllReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    result = arg.extract();
    __isset.result = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    message = arg.extract();
    __isset.message = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    appSpecificErrorCode = arg.extract();
    __isset.appSpecificErrorCode = true;
  }

  McFlushAllReply(McFlushAllReply&&) = default;

  McFlushAllReply(const McFlushAllReply&) = default;

  McFlushAllReply& operator=(McFlushAllReply&&) = default;

  McFlushAllReply& operator=(const McFlushAllReply&) = default;
  void __clear();
   ::carbon::Result result;
  ::std::string message;
  int16_t appSpecificErrorCode;

  struct __isset {
    bool result;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McFlushAllReply& rhs) const;
  bool operator<(const McFlushAllReply& rhs) const;

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
    __isset.result = true;
    return result;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McFlushAllReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McFlushAllReply_message_struct_setter&& message_) {
    message = std::forward<T_McFlushAllReply_message_struct_setter>(message_);
    __isset.message = true;
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
    __isset.appSpecificErrorCode = true;
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McFlushAllReply >;
};

void swap(McFlushAllReply& a, McFlushAllReply& b);

template <class Protocol_>
uint32_t McFlushAllReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McGatRequest final : private apache::thrift::detail::st::ComparisonOperators<McGatRequest> {
 public:

  McGatRequest() :
      exptime(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McGatRequest(apache::thrift::FragileConstructor, int32_t exptime__arg,  ::carbon::thrift::IOBufKey key__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    exptime = arg.extract();
    __isset.exptime = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    key = arg.extract();
    __isset.key = true;
  }

  McGatRequest(McGatRequest&&) = default;

  McGatRequest(const McGatRequest&) = default;

  McGatRequest& operator=(McGatRequest&&) = default;

  McGatRequest& operator=(const McGatRequest&) = default;
  void __clear();
  int32_t exptime;
   ::carbon::thrift::IOBufKey key;

  struct __isset {
    bool exptime;
    bool key;
  } __isset = {};
  bool operator==(const McGatRequest& rhs) const;
  bool operator<(const McGatRequest& rhs) const;

  int32_t get_exptime() const {
    return exptime;
  }

  int32_t& set_exptime(int32_t exptime_) {
    exptime = exptime_;
    __isset.exptime = true;
    return exptime;
  }

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McGatRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McGatRequest_key_struct_setter&& key_) {
    key = std::forward<T_McGatRequest_key_struct_setter>(key_);
    __isset.key = true;
    return key;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McGatRequest >;
};

void swap(McGatRequest& a, McGatRequest& b);

template <class Protocol_>
uint32_t McGatRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McGatReply final : private apache::thrift::detail::st::ComparisonOperators<McGatReply> {
 public:

  McGatReply();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McGatReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, folly::IOBuf value__arg, uint64_t flags__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    result = arg.extract();
    __isset.result = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    value = arg.extract();
    __isset.value = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    flags = arg.extract();
    __isset.flags = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<4, _T> arg) {
    message = arg.extract();
    __isset.message = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<5, _T> arg) {
    appSpecificErrorCode = arg.extract();
    __isset.appSpecificErrorCode = true;
  }

  McGatReply(McGatReply&&) = default;

  McGatReply(const McGatReply&) = default;

  McGatReply& operator=(McGatReply&&) = default;

  McGatReply& operator=(const McGatReply&) = default;
  void __clear();

  ~McGatReply();

   ::carbon::Result result;
  folly::IOBuf value;
  uint64_t flags;
  ::std::string message;
  int16_t appSpecificErrorCode;

  struct __isset {
    bool result;
    bool value;
    bool flags;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McGatReply& rhs) const;
  bool operator<(const McGatReply& rhs) const;

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const folly::IOBuf&> value_ref() const& {
    return {value, __isset.value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const folly::IOBuf&&> value_ref() const&& {
    return {std::move(value), __isset.value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<folly::IOBuf&> value_ref() & {
    return {value, __isset.value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<folly::IOBuf&&> value_ref() && {
    return {std::move(value), __isset.value};
  }

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
    __isset.result = true;
    return result;
  }

  const folly::IOBuf* get_value() const& {
    return __isset.value ? std::addressof(value) : nullptr;
  }

  folly::IOBuf* get_value() & {
    return __isset.value ? std::addressof(value) : nullptr;
  }
  folly::IOBuf* get_value() && = delete;

  template <typename T_McGatReply_value_struct_setter = folly::IOBuf>
  folly::IOBuf& set_value(T_McGatReply_value_struct_setter&& value_) {
    value = std::forward<T_McGatReply_value_struct_setter>(value_);
    __isset.value = true;
    return value;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
    __isset.flags = true;
    return flags;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McGatReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McGatReply_message_struct_setter&& message_) {
    message = std::forward<T_McGatReply_message_struct_setter>(message_);
    __isset.message = true;
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
    __isset.appSpecificErrorCode = true;
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McGatReply >;
};

void swap(McGatReply& a, McGatReply& b);

template <class Protocol_>
uint32_t McGatReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McGatsRequest final : private apache::thrift::detail::st::ComparisonOperators<McGatsRequest> {
 public:

  McGatsRequest() :
      exptime(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McGatsRequest(apache::thrift::FragileConstructor, int32_t exptime__arg,  ::carbon::thrift::IOBufKey key__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    exptime = arg.extract();
    __isset.exptime = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    key = arg.extract();
    __isset.key = true;
  }

  McGatsRequest(McGatsRequest&&) = default;

  McGatsRequest(const McGatsRequest&) = default;

  McGatsRequest& operator=(McGatsRequest&&) = default;

  McGatsRequest& operator=(const McGatsRequest&) = default;
  void __clear();
  int32_t exptime;
   ::carbon::thrift::IOBufKey key;

  struct __isset {
    bool exptime;
    bool key;
  } __isset = {};
  bool operator==(const McGatsRequest& rhs) const;
  bool operator<(const McGatsRequest& rhs) const;

  int32_t get_exptime() const {
    return exptime;
  }

  int32_t& set_exptime(int32_t exptime_) {
    exptime = exptime_;
    __isset.exptime = true;
    return exptime;
  }

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McGatsRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McGatsRequest_key_struct_setter&& key_) {
    key = std::forward<T_McGatsRequest_key_struct_setter>(key_);
    __isset.key = true;
    return key;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McGatsRequest >;
};

void swap(McGatsRequest& a, McGatsRequest& b);

template <class Protocol_>
uint32_t McGatsRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McGatsReply final : private apache::thrift::detail::st::ComparisonOperators<McGatsReply> {
 public:

  McGatsReply();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McGatsReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, uint64_t casToken__arg, folly::IOBuf value__arg, uint64_t flags__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    result = arg.extract();
    __isset.result = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    casToken = arg.extract();
    __isset.casToken = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    value = arg.extract();
    __isset.value = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<4, _T> arg) {
    flags = arg.extract();
    __isset.flags = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<5, _T> arg) {
    message = arg.extract();
    __isset.message = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<6, _T> arg) {
    appSpecificErrorCode = arg.extract();
    __isset.appSpecificErrorCode = true;
  }

  McGatsReply(McGatsReply&&) = default;

  McGatsReply(const McGatsReply&) = default;

  McGatsReply& operator=(McGatsReply&&) = default;

  McGatsReply& operator=(const McGatsReply&) = default;
  void __clear();

  ~McGatsReply();

   ::carbon::Result result;
  uint64_t casToken;
  folly::IOBuf value;
  uint64_t flags;
  ::std::string message;
  int16_t appSpecificErrorCode;

  struct __isset {
    bool result;
    bool casToken;
    bool value;
    bool flags;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McGatsReply& rhs) const;
  bool operator<(const McGatsReply& rhs) const;

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const folly::IOBuf&> value_ref() const& {
    return {value, __isset.value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const folly::IOBuf&&> value_ref() const&& {
    return {std::move(value), __isset.value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<folly::IOBuf&> value_ref() & {
    return {value, __isset.value};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<folly::IOBuf&&> value_ref() && {
    return {std::move(value), __isset.value};
  }

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
    __isset.result = true;
    return result;
  }

  uint64_t get_casToken() const {
    return casToken;
  }

  uint64_t& set_casToken(uint64_t casToken_) {
    casToken = casToken_;
    __isset.casToken = true;
    return casToken;
  }

  const folly::IOBuf* get_value() const& {
    return __isset.value ? std::addressof(value) : nullptr;
  }

  folly::IOBuf* get_value() & {
    return __isset.value ? std::addressof(value) : nullptr;
  }
  folly::IOBuf* get_value() && = delete;

  template <typename T_McGatsReply_value_struct_setter = folly::IOBuf>
  folly::IOBuf& set_value(T_McGatsReply_value_struct_setter&& value_) {
    value = std::forward<T_McGatsReply_value_struct_setter>(value_);
    __isset.value = true;
    return value;
  }

  uint64_t get_flags() const {
    return flags;
  }

  uint64_t& set_flags(uint64_t flags_) {
    flags = flags_;
    __isset.flags = true;
    return flags;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McGatsReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McGatsReply_message_struct_setter&& message_) {
    message = std::forward<T_McGatsReply_message_struct_setter>(message_);
    __isset.message = true;
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
    __isset.appSpecificErrorCode = true;
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McGatsReply >;
};

void swap(McGatsReply& a, McGatsReply& b);

template <class Protocol_>
uint32_t McGatsReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
