[("\\HH\\Lib\\Dict\\MixedDict",
  (Shallow_decl_defs.Typedef
     { Typing_defs.td_module = None; td_pos = [5:10-19];
       td_vis = Transparent; td_tparams = []; td_as_constraint = None;
       td_super_constraint = None;
       td_type =
       (Rhint ([5:22-43]),
        (Tapply (([5:22-26], "\\HH\\dict"),
           [(Rhint ([5:27-35]), (Tprim Tarraykey));
             (Rhint ([5:37-42]), Tmixed)]
           )));
       td_is_ctx = false; td_attributes = []; td_internal = false;
       td_docs_url = None }));
  ("\\make_dict",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([8:12-21]),
         (Tfun
            { ft_tparams = []; ft_where_constraints = []; ft_params = [];
              ft_implicit_params = { capability = (CapDefaults [8:12-21]) };
              ft_ret =
              { et_enforced = Typing_defs_core.Unenforced;
                et_type =
                (Rhint ([8:25-39]),
                 (Tapply (([8:25-39], "\\HH\\Lib\\Dict\\MixedDict"), [])))
                };
              ft_flags =
              (make_ft_flags FSync ~return_disposable:false
                ~returns_readonly:false ~support_dynamic_type:false
                ~readonly_this:false ~is_memoized:false ~variadic:false);
              ft_ifc_decl = FDPolicied {PUBLIC}ft_cross_package = None }));
        fe_pos = [8:12-21]; fe_php_std_lib = false;
        fe_support_dynamic_type = false; fe_no_auto_dynamic = false }));
  ("\\get_value",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([12:12-21]),
         (Tfun
            { ft_tparams = []; ft_where_constraints = [];
              ft_params =
              [{ fp_pos = [12:37-39]; fp_name = (Some "$d");
                 fp_type =
                 { et_enforced = Typing_defs_core.Unenforced;
                   et_type =
                   (Rhint ([12:22-36]),
                    (Tapply (([12:22-36], "\\HH\\Lib\\Dict\\MixedDict"), [])))
                   };
                 fp_flags =
                 (make_fp_flags ~accept_disposable:false ~has_default:false
                   ~mode:Typing_defs_core.FPnormal ~ifc_external:false
                   ~ifc_can_call:false ~readonly:false);
                  };
                { fp_pos = [12:50-52]; fp_name = (Some "$k");
                  fp_type =
                  { et_enforced = Typing_defs_core.Unenforced;
                    et_type = (Rhint ([12:41-49]), (Tprim Tarraykey)) };
                  fp_flags =
                  (make_fp_flags ~accept_disposable:false ~has_default:false
                    ~mode:Typing_defs_core.FPnormal ~ifc_external:false
                    ~ifc_can_call:false ~readonly:false);
                   }
                ];
              ft_implicit_params = { capability = (CapDefaults [12:12-21]) };
              ft_ret =
              { et_enforced = Typing_defs_core.Unenforced;
                et_type = (Rhint ([12:55-60]), Tmixed) };
              ft_flags =
              (make_ft_flags FSync ~return_disposable:false
                ~returns_readonly:false ~support_dynamic_type:false
                ~readonly_this:false ~is_memoized:false ~variadic:false);
              ft_ifc_decl = FDPolicied {PUBLIC}ft_cross_package = None }));
        fe_pos = [12:12-21]; fe_php_std_lib = false;
        fe_support_dynamic_type = false; fe_no_auto_dynamic = false }));
  ("\\MyDict",
   (Shallow_decl_defs.Typedef
      { Typing_defs.td_module = None; td_pos = [16:8-14];
        td_vis = Transparent; td_tparams = []; td_as_constraint = None;
        td_super_constraint = None;
        td_type =
        (Rhint ([16:17-31]),
         (Tapply (([16:17-31], "\\HH\\Lib\\Dict\\MixedDict"), [])));
        td_is_ctx = false; td_attributes = []; td_internal = false;
        td_docs_url = None }))
  ]
