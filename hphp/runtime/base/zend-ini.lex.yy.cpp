/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010-2013 Facebook, Inc. (http://www.facebook.com)     |
   | Copyright (c) 1998-2010 Zend Technologies Ltd. (http://www.zend.com) |
   +----------------------------------------------------------------------+
   | This source file is subject to version 2.00 of the Zend license,     |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.zend.com/license/2_00.txt.                                |
   | If you did not receive a copy of the Zend license and are unable to  |
   | obtain it through the world-wide-web, please send a note to          |
   | license@zend.com so we can mail you a copy immediately.              |
   +----------------------------------------------------------------------+
*/
#define yy_create_buffer ini__create_buffer
#define yy_delete_buffer ini__delete_buffer
#define yy_scan_buffer ini__scan_buffer
#define yy_scan_string ini__scan_string
#define yy_scan_bytes ini__scan_bytes
#define yy_flex_debug ini__flex_debug
#define yy_init_buffer ini__init_buffer
#define yy_flush_buffer ini__flush_buffer
#define yy_load_buffer_state ini__load_buffer_state
#define yy_switch_to_buffer ini__switch_to_buffer
#define yyin ini_in
#define yyleng ini_leng
#define yylex ini_lex
#define yyout ini_out
#define yyrestart ini_restart
#define yytext ini_text

#line 19 "zend_ini.lex.yy.cpp"
/* A lexical scanner generated by flex*/

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* Some routines like yy_flex_realloc() are emitted as static but are
   not called by all lexers. This generates warnings in some compilers,
   notably GCC. Arrange to suppress these. */
#ifdef __GNUC__
#define YY_MAY_BE_UNUSED __attribute__((unused))
#else
#define YY_MAY_BE_UNUSED
#endif

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) YY_MAY_BE_UNUSED;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 31
#define YY_END_OF_BUFFER 32
static yyconst short int yy_accept[188] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   32,   31,   27,   28,
       28,   18,   31,   11,   31,   12,    1,   11,   11,   11,
       11,   11,   22,   22,   23,   31,   31,   22,   22,   17,
       31,    5,   16,   22,    3,   21,   26,   15,   15,   19,
       31,   21,   21,   17,   20,   16,   16,   16,   16,   16,
       16,   14,   24,   25,   31,   31,    7,    8,   13,   13,
       27,   28,   28,    0,    0,   12,    0,   30,   30,   11,
        4,    0,   29,   29,   12,   11,   10,   11,   11,    9,
       11,   11,   22,    0,    0,   22,   23,    5,   22,   22,

        6,    0,   17,   17,   17,   17,   22,   16,   22,    3,
        3,    3,   21,    0,   26,   15,   15,   19,   21,   17,
       17,   17,   17,   16,   16,   10,   16,   16,    9,   16,
       16,   14,   24,    0,    0,   25,   24,   24,    0,    7,
       13,   13,    4,   11,   10,   11,   11,   10,    9,   11,
       22,   22,   22,    2,   17,   21,   21,   17,   16,   16,
       16,   10,   16,   24,   24,   24,   24,   24,   11,   22,
       22,   22,   22,   21,   16,   24,   24,   24,   24,   22,
       22,   24,   24,   24,   24,   24,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,    6,   11,    6,
        6,   12,   10,   10,   13,   14,   10,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   10,   16,   10,
       17,   10,   10,   10,   22,   23,   23,   23,   24,   25,
       23,   23,   23,   23,   23,   26,   23,   27,   28,   23,
       23,   29,   30,   31,   32,   23,   23,   23,   33,   23,
       18,   19,   20,   10,   21,    1,   22,   23,   23,   23,

       24,   25,   23,   23,   23,   23,   23,   26,   23,   27,
       28,   23,   23,   29,   30,   31,   32,   23,   23,   23,
       33,   23,   34,    6,   35,    6,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[37] =
    {   0,
        1,    2,    3,    3,    2,    2,    4,    1,    1,    1,
        5,    6,    6,    6,    6,    7,    8,    9,    1,   10,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    1,    1,   11
    } ;

static yyconst short int yy_base[209] =
    {   0,
        0,    0,   36,    0,   71,   72,   92,    0,  126,  128,
       71,  126,  148,    0,  183,  199,  560,  848,  215,  848,
      549,  848,   78,  520,   80,   83,  848,   57,  177,  116,
      118,  120,  187,  231,  848,  173,    0,  215,  220,  228,
      250,  848,  270,  239,  208,  524,  305,  848,  529,   84,
      320,  182,  199,  212,  848,  354,  508,  161,  112,  496,
      488,    0,  236,  220,  230,  491,    0,  848,    0,  312,
        0,  848,  484,  256,  259,  263,  270,  848,  467,  445,
      327,  315,  848,  453,  328,  172,  333,  251,  295,  338,
      249,  316,  333,  325,  388,  407,  848,  848,  338,  392,

      848,  432,  387,  388,  404,  406,  339,    0,  427,  435,
      848,  428,  413,  383,    0,  848,  402,  348,  444,  356,
      409,  426,  443,    0,  372,  440,  367,  345,  428,  313,
      311,    0,  391,  425,  304,  460,  445,  464,  465,    0,
        0,  472,  476,  331,  477,  466,  467,  263,  484,  473,
      483,  485,  520,  848,  486,  277,  539,  491,  226,  204,
      168,  494,  118,  504,  494,  501,  528,  507,  491,  574,
      509,  548,  593,  515,  116,  552,  544,  580,  561,  560,
      579,  582,  596,  614,  601,  615,  848,  637,  648,  659,
      670,  676,  685,  696,  707,  717,  728,  738,  749,  760,

       81,  770,  781,  792,  803,  814,  825,  836
    } ;

static yyconst short int yy_def[209] =
    {   0,
      187,    1,  187,    3,    3,    3,  187,    7,  188,  188,
      189,  189,  187,   13,  190,  190,  187,  187,  187,  187,
      187,  187,  191,  192,  193,  187,  187,  192,  192,  192,
      192,  192,  194,  194,  187,  195,  196,  194,  194,  194,
      194,  187,  187,  194,  187,  197,  187,  187,  187,  187,
      197,  197,  197,  197,  187,  187,   56,   56,   56,   56,
       56,  198,  199,  187,  200,  199,  201,  187,  202,  202,
       19,  187,  187,  191,  193,  187,  191,  187,  187,  192,
      187,  193,  187,  187,  187,  192,  192,  192,  192,  192,
      192,  192,  194,  195,  194,  194,  187,  187,  194,  195,

      187,  196,  194,  194,  194,  194,  194,   43,  194,  187,
      187,  187,  197,   51,   47,  187,  187,  187,  203,  197,
      197,  197,  197,   56,   56,   56,   56,   56,   56,   56,
       56,  198,  199,  200,  199,  187,  199,  204,  199,  201,
      202,  202,  187,  192,  187,  192,  192,   87,  187,  192,
      194,  195,  205,  187,  194,  197,  203,  197,   56,   56,
       56,   56,   56,  199,  199,  199,  204,  206,  192,  207,
      194,  195,  205,  157,   56,  208,  199,  204,  206,  194,
      194,  199,  199,  206,  204,  206,    0,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,

      187,  187,  187,  187,  187,  187,  187,  187
    } ;

static yyconst short int yy_nxt[885] =
    {   0,
       18,   19,   20,   21,   19,   22,   22,   23,   22,   22,
       22,   22,   22,   22,   24,   25,   26,   27,   18,   22,
       24,   24,   24,   24,   28,   24,   29,   30,   24,   24,
       31,   24,   32,   22,   22,   18,   33,   34,   18,   18,
       34,   33,   35,   33,   36,   33,   37,   33,   38,   39,
       40,   18,   33,   33,   41,   42,   33,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   33,
       33,   33,   44,   44,   81,   44,   44,   64,   86,   65,
       78,   79,   83,   84,   85,  118,  140,   85,  118,   66,
       45,   45,   46,   47,   48,   49,   47,   50,   35,   46,

       51,   46,   37,   46,   52,   53,   54,   25,   55,   46,
       46,   46,   46,   56,   56,   56,   57,   56,   58,   59,
       56,   56,   60,   56,   61,   46,   46,   18,   18,   18,
       18,   18,   64,   81,   65,   81,  128,   81,  129,  162,
       89,  129,   90,   92,   66,   45,   91,   45,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   67,   18,   18,   18,   18,   18,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   18,   68,   18,   70,   48,   49,   70,  126,   81,
      114,  100,  127,  162,   81,   94,  120,  144,   25,   18,

       70,   48,   49,   70,   87,   95,  101,  114,   88,  110,
      111,  112,  110,  121,   25,   18,   71,   72,   73,   71,
      114,  136,   74,   94,  136,  122,  123,  162,   94,  103,
       75,   76,   96,   95,  104,   96,   94,   97,   95,   94,
      109,  105,  106,  109,  134,   97,   95,   94,  138,   95,
       98,  107,   93,   93,  135,  175,   93,   95,   78,   79,
       93,   83,   84,  101,   85,   93,   81,   85,   81,   93,
       93,   93,   78,   79,   93,   93,  147,   93,   94,   93,
      150,   93,   93,   93,  108,  114,   93,   93,   95,   80,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,

      108,  108,  108,   93,   93,   93,  115,  116,  117,  115,
      164,   97,   81,  142,  116,  117,  142,   83,   84,  148,
       75,  113,  113,  113,  113,  113,  113,   75,  143,   85,
      113,  143,   85,   81,  145,  113,  113,  145,  119,  149,
      129,   94,  149,  100,  163,   90,   94,   94,   81,  118,
       81,   95,  118,  101,  113,   81,   95,   95,  187,  146,
      169,  113,  114,  113,  114,  113,  113,  113,  124,  162,
      120,  113,  113,  113,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  113,  113,  107,
       93,   93,  161,  151,   93,   94,   94,  159,   93,  134,

      152,  103,  104,   93,  116,   95,   95,   93,   96,  135,
      153,   96,   94,   97,   94,   94,  187,  114,  155,  105,
      106,  114,   95,  121,   95,   95,   98,   99,  109,  149,
      111,  109,  149,   97,  114,   94,  110,  111,  112,  110,
      158,  145,  154,  138,  145,   95,  113,  113,  113,  113,
      113,  114,  157,  134,  113,   83,  122,  123,  187,  113,
      113,  136,   81,  135,  136,  166,  160,  187,  187,   78,
      137,  133,  167,  142,  116,  117,  142,  143,  145,  113,
      143,  145,  168,   81,   81,  149,   72,   75,  149,  148,
       81,   94,  148,  152,   94,  145,   90,  139,  145,  114,

      155,   95,  134,  170,   95,  158,  187,  187,   81,  134,
      133,  131,  135,  164,  148,  178,  156,   94,   93,  135,
       93,  171,   93,   93,  130,  179,   93,   95,  172,  125,
       93,  116,  114,  156,  137,   93,  167,   81,  173,   93,
      113,  113,  113,  113,  113,  113,  176,  157,  156,  113,
      113,   72,  134,  183,  113,  113,  152,  174,  184,  187,
      185,  133,  135,  133,  187,  187,  170,  164,   94,  178,
      186,  187,  113,  187,  187,  181,   99,   99,   95,  179,
       99,   93,  152,   93,   99,  187,  137,   94,  167,   99,
      134,  187,  153,   99,  171,   93,   93,   95,  176,   93,

      135,  172,  187,   93,  134,  187,  187,  137,   93,  167,
      187,  173,   93,  133,  135,  133,  133,  133,  187,  176,
      133,  164,  178,  178,  187,  187,  187,  187,  187,  187,
      187,  187,  179,  179,  133,  187,  133,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   80,  187,  187,   80,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   93,   93,  187,  187,

      187,   93,  187,   93,   93,  187,   93,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,  102,  102,  102,
      102,  187,  102,  102,  102,  102,  102,  102,  113,  187,
      187,  187,  187,  113,  187,  187,  113,  113,  132,  132,
      187,  132,  132,  132,  132,  132,  132,  187,  132,  133,
      133,  133,  187,  133,  133,  133,  133,  133,  133,  133,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      141,  141,  187,  141,  141,  141,  187,  187,  141,  141,
      141,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  165,  165,  165,  165,  165,  165,  165,  165,

      165,  165,  165,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,   17,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187
    } ;

static yyconst short int yy_chk[885] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    6,   28,    5,    6,   11,   28,   11,
       23,   23,   25,   25,   26,   50,  201,   26,   50,   11,
        5,    6,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    9,    9,
       10,   10,   12,   30,   12,   31,   59,   32,   59,  175,
       30,  163,   30,   32,   12,    9,   31,   10,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   15,   15,   15,   15,   58,   86,
       52,   36,   58,  161,   29,   33,   52,   86,   15,   15,

       16,   16,   16,   16,   29,   33,   36,   53,   29,   45,
       45,   45,   45,   53,   16,   16,   19,   19,   19,   19,
       54,   64,   19,   38,   64,   54,   54,  160,   39,   38,
       19,   19,   34,   38,   39,   34,   40,   34,   39,   34,
       44,   40,   40,   44,   63,   44,   40,   44,   65,   34,
       34,   41,   41,   41,   63,  159,   41,   44,   74,   74,
       41,   75,   75,   65,   76,   41,   91,   76,   88,   41,
       43,   43,   77,   77,   43,   43,   88,   43,   43,   43,
       91,   43,   43,   43,   43,  156,   43,   43,   43,  148,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,

       43,   43,   43,   43,   43,   43,   47,   47,   47,   47,
      135,   47,   89,   70,   70,   70,   70,   82,   82,   89,
       47,   51,   51,   51,   51,   51,   51,   70,   81,   85,
       51,   81,   85,   92,   87,   51,   51,   87,   51,   90,
      131,   93,   90,   94,  130,   92,   99,  107,  144,  118,
       87,   93,  118,   51,   56,   90,   99,  107,   94,   87,
      144,   56,   56,   56,  120,   56,   56,   56,   56,  128,
      120,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   95,
       95,   95,  127,  100,   95,  103,  104,  125,   95,  133,

      100,  103,  104,   95,  117,  103,  104,   95,   96,  133,
      100,   96,  105,   96,  106,   96,  114,  121,  105,  106,
      106,  113,  105,  121,  106,   96,   96,  100,  109,  129,
      112,  109,  129,  109,  122,  109,  110,  110,  110,  110,
      122,  126,  102,  134,  126,  109,  119,  119,  119,  119,
      119,  123,  119,  137,  119,   84,  123,  123,  134,  119,
      119,  136,   80,  137,  136,  138,  126,  139,  139,   79,
      138,  139,  138,  142,  142,  142,  142,  143,  145,  119,
      143,  145,  138,  146,  147,  149,   73,  142,  149,  146,
      150,  151,  147,  152,  155,  162,  150,   66,  162,  158,

      155,  151,  165,  152,  155,  158,  164,  164,  169,  166,
      164,   61,  165,  168,  169,  168,  174,  171,  152,  166,
      152,  153,  153,  153,   60,  168,  153,  171,  153,   57,
      153,   49,   46,  174,  167,  153,  167,   24,  153,  153,
      157,  157,  157,  157,  157,  157,  167,  157,  174,  157,
      174,   21,  177,  176,  157,  157,  172,  157,  176,   17,
      176,  167,  177,  167,    0,    0,  172,  179,  180,  179,
      176,    0,  157,    0,  157,  170,  170,  170,  180,  179,
      170,  172,  170,  172,  170,    0,  178,  181,  178,  170,
      182,    0,  170,  170,  173,  173,  173,  181,  178,  173,

      182,  173,    0,  173,  183,    0,    0,  185,  173,  185,
        0,  173,  173,  178,  183,  178,  184,  184,    0,  185,
      184,  186,  184,  186,    0,    0,    0,    0,    0,    0,
        0,    0,  184,  186,  185,    0,  185,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  192,    0,    0,  192,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  194,  194,    0,    0,

        0,  194,    0,  194,  194,    0,  194,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  196,  196,  196,
      196,    0,  196,  196,  196,  196,  196,  196,  197,    0,
        0,    0,    0,  197,    0,    0,  197,  197,  198,  198,
        0,  198,  198,  198,  198,  198,  198,    0,  198,  199,
      199,  199,    0,  199,  199,  199,  199,  199,  199,  199,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      202,  202,    0,  202,  202,  202,    0,    0,  202,  202,
      202,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  204,  204,  204,  204,  204,  204,  204,  204,

      204,  204,  204,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "zend_ini.x"
#define INITIAL 0
#line 2 "zend_ini.x"
/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010 Facebook, Inc. (http://www.facebook.com)          |
   | Copyright (c) 1998-2010 Zend Technologies Ltd. (http://www.zend.com) |
   +----------------------------------------------------------------------+
   | This source file is subject to version 2.00 of the Zend license,     |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.zend.com/license/2_00.txt.                                |
   | If you did not receive a copy of the Zend license and are unable to  |
   | obtain it through the world-wide-web, please send a note to          |
   | license@zend.com so we can mail you a copy immediately.              |
   +----------------------------------------------------------------------+
*/

#include <errno.h>
#include "hphp/runtime/base/zend-ini.tab.hpp"
#include "hphp/runtime/base/string_buffer.h"
#include "hphp/runtime/base/ini_setting.h"
#include "hphp/util/logger.h"

using namespace HPHP;

/* Globals Macros */
struct ZendINIGlobals {
  int scanner_mode;
  std::string filename;
  int lineno;
  IniSetting::PFN_PARSER_CALLBACK callback;
  void *arg;
};
static ZendINIGlobals s_zend_ini;
#define SCNG(v) s_zend_ini.v

/* Eat trailing whitespace + extra char */
#define EAT_TRAILING_WHITESPACE_EX(ch)            \
  while (yyleng > 0 && (                          \
    (ch != 'X' && yytext[yyleng - 1] ==  ch) ||   \
    yytext[yyleng - 1] == '\n' ||                 \
    yytext[yyleng - 1] == '\r' ||                 \
    yytext[yyleng - 1] == '\t' ||                 \
    yytext[yyleng - 1] == ' ')                    \
  ) {                                             \
    yyleng--;                                     \
  }

/* Eat trailing whitespace */
#define EAT_TRAILING_WHITESPACE()  EAT_TRAILING_WHITESPACE_EX('X')

#define RETURN_TOKEN(type, str, len) {            \
  *ini_lval = String(str, len, CopyString);       \
  return type;                                    \
}

void zend_ini_scan(CStrRef str, int scanner_mode, CStrRef filename,
                   IniSetting::PFN_PARSER_CALLBACK callback, void *arg) {
  SCNG(scanner_mode) = scanner_mode;
  SCNG(filename) = filename.data();
  SCNG(lineno) = 1;
  SCNG(callback) = callback;
  SCNG(arg) = arg;

  BEGIN(INITIAL);

  /* Eat any UTF-8 BOM we find in the first 3 bytes */
  if (memcmp(str.data(), "\xef\xbb\xbf", 3) == 0) {
    yy_scan_string(str.data() + 3);
  } else {
    yy_scan_string(str.data());
  }
}

void zend_ini_callback(String *arg1, String *arg2, String *arg3,
                       int callback_type) {
  SCNG(callback)(arg1, arg2, arg3, callback_type, SCNG(arg));
}

static void zend_ini_escape_string(String &lval, char *str, int len,
                                   char quote_type) {
  register char *s, *t;
  char *end;

  String sval(str, len, CopyString);
  lval = sval;

  /* convert escape sequences */
  s = t = (char*)sval.data();
  end = s + sval.size();

  while (s < end) {
    if (*s == '\\') {
      s++;
      if (s >= end) {
        *t++ = '\\';
        continue;
      }
      switch (*s) {
        case '"':
          if (*s != quote_type) {
            *t++ = '\\';
            *t++ = *s;
            break;
          }
        case '\\':
        case '$':
          *t++ = *s;
          lval = lval.substr(0, lval.size() - 1);
          break;
        default:
          *t++ = '\\';
          *t++ = *s;
          break;
      }
    } else {
      *t++ = *s;
    }
    if (*s == '\n' || (*s == '\r' && (*(s+1) != '\n'))) {
      SCNG(lineno)++;
    }
    s++;
  }
  *t = 0;
}

void ini_error(char *msg) {
  StringBuffer smsg;
  if (!SCNG(filename).empty()) {
    smsg.printf("%s in %s on line %d\n", msg, SCNG(filename).data(),
                SCNG(lineno));
  } else {
    smsg.append("Invalid configuration directive\n");
  }

  Logger::Warning("%s", smsg.data());
}

#define YY_USE_PROTOS
#define YY_DECL int ini_lex_impl YY_PROTO((String *ini_lval))

#define GOTO_RESTART 9999

int ini_lex_impl(String *ini_lval);
int ini_lex(String *ini_lval) {
restart:
  int ret = ini_lex_impl(ini_lval);
  if (ret == GOTO_RESTART) goto restart;
  return ret;
}

#define ST_OFFSET 1

#define ST_SECTION_VALUE 2

#define ST_VALUE 3

#define ST_SECTION_RAW 4

#define ST_DOUBLE_QUOTES 5

#define ST_VARNAME 6

#define ST_RAW 7

#define YY_STACK_USED 1
#line 818 "zend_ini.lex.yy.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = nullptr, *yy_bp = nullptr;
	register int yy_act;

#line 187 "zend_ini.x"


#line 972 "zend_ini.lex.yy.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 188 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 848 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 189 "zend_ini.x"
{
/* Section start */
  /* Enter section data lookup state */
  if (SCNG(scanner_mode) == IniSetting::RawScanner) {
    yy_push_state(ST_SECTION_RAW);
  } else {
    yy_push_state(ST_SECTION_VALUE);
  }
  return TC_SECTION;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 200 "zend_ini.x"
{
/* Raw string */
  /* Eat leading and trailing single quotes */
  if (yytext[0] == '\'' && yytext[yyleng - 1] == '\'') {
    yytext++;
    yyleng = yyleng - 2;
  }
  RETURN_TOKEN(TC_RAW, yytext, yyleng);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 210 "zend_ini.x"
{
/* End of section */
  BEGIN(INITIAL);
  SCNG(lineno)++;
  return ']';
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 217 "zend_ini.x"
{
/* Start of option with offset */
  /* Eat trailing whitespace and [ */
  EAT_TRAILING_WHITESPACE_EX('[');

  /* Enter offset lookup state */
  yy_push_state(ST_OFFSET);

  RETURN_TOKEN(TC_OFFSET, yytext, yyleng);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 228 "zend_ini.x"
{
/* End of section or an option offset */
  BEGIN(INITIAL);
  return ']';
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 234 "zend_ini.x"
{
/* Variable start */
  yy_push_state(ST_VARNAME);
  return TC_DOLLAR_CURLY;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 240 "zend_ini.x"
{
/* Variable name */
  RETURN_TOKEN(TC_VARNAME, yytext, yyleng);
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 245 "zend_ini.x"
{ /* Variable end */
  yy_pop_state();
  return '}';
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 250 "zend_ini.x"
{
/* TRUE value (when used outside option value/offset this causes error!) */
  RETURN_TOKEN(BOOL_TRUE, "1", 1);
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 255 "zend_ini.x"
{
/* FALSE value (when used outside option value/offset this causes error!)*/
  RETURN_TOKEN(BOOL_FALSE, "", 0);
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 260 "zend_ini.x"
{
/* Get option name */
  RETURN_TOKEN(TC_LABEL, yytext, yyleng);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 265 "zend_ini.x"
{
/* Start option value */
  if (SCNG(scanner_mode) == IniSetting::RawScanner) {
    yy_push_state(ST_RAW);
  } else {
    yy_push_state(ST_VALUE);
  }
  return '=';
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 275 "zend_ini.x"
{
/* Raw value, only used when SCNG(scanner_mode) == IniSetting::RawScanner. */
  /* Eat leading and trailing double quotes */
  if (yytext[0] == '"' && yytext[yyleng - 1] == '"') {
    yytext++;
    yyleng = yyleng - 2;
  }
  RETURN_TOKEN(TC_RAW, yytext, yyleng);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 285 "zend_ini.x"
{
/* Raw value, only used when SCNG(scanner_mode) == IniSetting::RawScanner. */
  RETURN_TOKEN(TC_RAW, yytext, yyleng);
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 290 "zend_ini.x"
{
/* End of option value */
  BEGIN(INITIAL);
  SCNG(lineno)++;
  return END_OF_LINE;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 297 "zend_ini.x"
{
/* Get constant option value */
  RETURN_TOKEN(TC_CONSTANT, yytext, yyleng);
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 302 "zend_ini.x"
{
/* Get number option value as string */
  RETURN_TOKEN(TC_NUMBER, yytext, yyleng);
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 307 "zend_ini.x"
{
/* Disallow these chars outside option values */
  return yytext[0];
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 312 "zend_ini.x"
{
/* Boolean operators */
  return yytext[0];
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 317 "zend_ini.x"
{
/* Make = used in option value to trigger error */
  yyless(0);
  BEGIN(INITIAL);
  return END_OF_LINE;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 324 "zend_ini.x"
{
/* Get everything else as option/offset value */
  RETURN_TOKEN(TC_STRING, yytext, yyleng);
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 329 "zend_ini.x"
{
/* Get rest as section/offset value */
  RETURN_TOKEN(TC_STRING, yytext, yyleng);
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 334 "zend_ini.x"
{
/* Double quoted '"' string start */
  yy_push_state(ST_DOUBLE_QUOTES);
  return '"';
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 340 "zend_ini.x"
{
/* Escape double quoted string contents */
  if (yyleng > 1 && yytext[yyleng-1] == '"' && yytext[yyleng-2] == '\\') {
    yyless(yyleng-1);
    yyleng--;
  }
  zend_ini_escape_string(*ini_lval, yytext, yyleng, '"');
  return TC_QUOTED_STRING;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 350 "zend_ini.x"
{
/* Double quoted '"' string ends */
  yy_pop_state();
  return '"';
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 356 "zend_ini.x"
{
  RETURN_TOKEN(TC_WHITESPACE, yytext, yyleng);
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 360 "zend_ini.x"
{
  /* eat whitespace */
  return GOTO_RESTART;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 365 "zend_ini.x"
{
  SCNG(lineno)++;
  return END_OF_LINE;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 370 "zend_ini.x"
{
/* Comment */
  BEGIN(INITIAL);
  SCNG(lineno)++;
  return END_OF_LINE;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 377 "zend_ini.x"
{
/* #Comment */
  Logger::Error("Comments starting with '#' are deprecated in %s on line %d",
                SCNG(filename).data(), SCNG(lineno));
  BEGIN(INITIAL);
  SCNG(lineno)++;
  return END_OF_LINE;
}
	YY_BREAK
case YY_STATE_EOF(ST_VALUE):
case YY_STATE_EOF(ST_RAW):
#line 386 "zend_ini.x"
{
/* End of option value (if EOF is reached before EOL) */
  BEGIN(INITIAL);
  return END_OF_LINE;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 392 "zend_ini.x"
ECHO;
	YY_BREAK
#line 1356 "zend_ini.lex.yy.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ST_OFFSET):
case YY_STATE_EOF(ST_SECTION_VALUE):
case YY_STATE_EOF(ST_SECTION_RAW):
case YY_STATE_EOF(ST_DOUBLE_QUOTES):
case YY_STATE_EOF(ST_VARNAME):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 36);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 188 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 36;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 188 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 187);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 392 "zend_ini.x"


static void __attribute__((__unused__))
suppress_defined_but_not_used_warnings() {
  yyunput(0, 0);
  yy_top_state();
}
