[("\\NS1\\NS2\\C",
  (Shallow_decl_defs.Class
     { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
       sc_abstract = false; sc_is_xhp = false; sc_internal = false;
       sc_has_xhp_keyword = false; sc_kind = (Cclass Concrete);
       sc_module = None; sc_name = ([5:7-8], "\\NS1\\NS2\\C");
       sc_tparams = []; sc_where_constraints = []; sc_extends = [];
       sc_uses = []; sc_xhp_attr_uses = []; sc_xhp_enum_values = {};
       sc_xhp_marked_empty = false; sc_req_extends = [];
       sc_req_implements = []; sc_req_class = []; sc_implements = [];
       sc_support_dynamic_type = false;
       sc_consts =
       [{ Shallow_decl_defs.scc_abstract = Typing_defs.CCConcrete;
          scc_name = ([6:16-19], "KEY");
          scc_type = (Rhint ([6:9-15]), (Tprim Tstring)); scc_refs = [] }
         ];
       sc_typeconsts =
       [{ Shallow_decl_defs.stc_name = ([8:14-18], "TInt");
          stc_kind =
          (Typing_defs.TCConcrete
             { Typing_defs.tc_type = (Rhint ([8:21-24]), (Tprim Tint)) });
          stc_enforceable = ([Pos.none], false); stc_reifiable = None;
          stc_is_ctx = false };
         { Shallow_decl_defs.stc_name = ([9:14-20], "TShape");
           stc_kind =
           (Typing_defs.TCConcrete
              { Typing_defs.tc_type =
                (Rhint ([9:23-11:4]),
                 (Tshape ((Rhint ([Pos.none]), (Tunion [])),
                    { (Typing_defs_core.TSFclass_const (
                         ([10:5-9], "\\NS1\\NS2\\C"), ([10:11-14], "KEY"))) ->
                      { sft_optional = false;
                        sft_ty =
                        (Rhint ([10:18-28]),
                         (Taccess
                            ((Rhint ([10:18-28]),
                              (Tapply (([5:7-8], "\\NS1\\NS2\\C"), []))),
                             [([10:24-28], "TInt")])))
                        } }
                    )))
                });
           stc_enforceable = ([Pos.none], false); stc_reifiable = None;
           stc_is_ctx = false }
         ];
       sc_props = []; sc_sprops = []; sc_constructor = None;
       sc_static_methods = [];
       sc_methods =
       [{ Shallow_decl_defs.sm_name = ([13:19-20], "f");
          sm_type =
          (Rwitness_from_decl ([13:19-20]),
           (Tfun
              { ft_tparams = []; ft_where_constraints = [];
                ft_params =
                [{ fp_pos = [13:32-34]; fp_name = (Some "$x");
                   fp_type =
                   { et_enforced = Typing_defs_core.Unenforced;
                     et_type =
                     (Rhint ([13:21-31]),
                      (Taccess
                         ((Rhint ([13:21-31]),
                           (Tapply (([5:7-8], "\\NS1\\NS2\\C"), []))),
                          [([13:27-31], "TInt")])))
                     };
                   fp_flags =
                   (make_fp_flags ~accept_disposable:false ~has_default:false
                     ~mode:Typing_defs_core.FPnormal ~ifc_external:false
                     ~ifc_can_call:false ~readonly:false);
                    }
                  ];
                ft_implicit_params =
                { capability = (CapDefaults [13:19-20]) };
                ft_ret =
                { et_enforced = Typing_defs_core.Unenforced;
                  et_type = (Rhint ([13:37-41]), (Tprim Tvoid)) };
                ft_flags =
                (make_ft_flags FSync ~return_disposable:false
                  ~returns_readonly:false ~support_dynamic_type:false
                  ~readonly_this:false ~is_memoized:false ~variadic:false);
                ft_ifc_decl = FDPolicied {PUBLIC}ft_cross_package = None }));
          sm_visibility = Public; sm_deprecated = None; sm_flags = (empty);
          sm_attributes = [] }
         ];
       sc_user_attributes = []; sc_enum_type = None; sc_docs_url = None }))
  ]
