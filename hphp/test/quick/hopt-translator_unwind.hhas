# Tests unwinding with dirty callee-saved registers that are mapped to
# execution stack locations.

.main {
  FPushFuncD 1 "set_error_handler"
    String "thrower"
  FCall <> 1 1 "" - "" ""
  PopC

  # If get_undefined_var is inlined then the context passed to handler will
  # contain the locals from test_unwind_dirty_stack_regs in an array which will
  # be stored along wtih other arguments inside the exception unless we pass
  # ignore args. If this happens the exception will keep the DtorPrinter objects
  # alive past the end of test_unwind_dirty_stack_regs.
  FPushClsMethodD 1 "setTraceOptions" "Exception"
    Cns "DEBUG_BACKTRACE_IGNORE_ARGS"
  FCall <> 1 1 "" - "" ""
  PopC

  .try {
    FPushFuncD 0 "test_unwind_dirty_stack_regs"
    FCall <> 0 1 "" - "" ""
    RetC
  } .catch {
    SetL _1
    PopC
    String "Received exception:  "
    PushL _1
    FPushObjMethodD 0 "getMessage" NullThrows
    FCall <> 0 1 "" - "" ""
    Concat
    String "\n"
    Concat
    Print
    PopC
    Int 1
    RetC
  }
}

.function thrower() {
  NewObjD "Exception"
  Dup
  FPushCtor 1
    String "hi"
  FCall <> 1 1 "" - "" ""
  PopC
  Throw
}

.class DtorPrinter {
  .method [public] __construct($id) {
    String "ctor: "
    CGetL $id
    Concat
    String "\n"
    Concat
    Print
    PopC

    This
    CGetL $id
    BaseC 1 Define
    SetM 1 PT:"x"
    PopC
    Int 1
    RetC
  }

  .property [private] x;
}

.function make_obj($id) {
  NewObjD "DtorPrinter"
  Dup
  FPushCtor 1
    CGetL $id
  FCall <> 1 1 "" - "" ""
  PopC
  RetC
}

# We do this in a separate scope to avoid
# having the $k_* locals in test_unwind_dirty_stack_regs()
# getting caught in the $context parameter to handler()
.function get_undefined_var() {
  CGetL $k_99  # undefined variable
  RetC
}

# This test is dependent on the register allocator implementation, but
# probably better than nothing and unlikely to significantly change.
# It seems fairly hard to get a EMIT_CALL to happen while a Stack
# location is in a dirty callee-saved register with our normal php
# emitter, but this accomplishes it by CGetL'ing everything to the
# stack.

.function test_unwind_dirty_stack_regs() {
  FPushFuncD 1 "make_obj"
    Int 0
  FCall <> 1 1 "" - "" ""
  SetL $k_0
  PopC
  FPushFuncD 1 "make_obj"
    Int 1
  FCall <> 1 1 "" - "" ""
  SetL $k_1
  PopC
  FPushFuncD 1 "make_obj"
    Int 2
  FCall <> 1 1 "" - "" ""
  SetL $k_2
  PopC

  CGetL $k_0
  CGetL $k_1
  CGetL $k_2

  FPushFuncD 0 "get_undefined_var"
  FCall <> 0 1 "" - "" ""
  PopC

  # This code isn't reached---but let's Pop this junk just so
  # theoretically we could pass verification some day.
  PopC # k_0
  PopC
  PopC

  Int 1
  RetC
}
