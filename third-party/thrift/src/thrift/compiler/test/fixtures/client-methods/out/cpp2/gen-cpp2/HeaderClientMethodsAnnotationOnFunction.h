/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/client-methods/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/service_h.h>

#include "thrift/compiler/test/fixtures/client-methods/gen-cpp2/HeaderClientMethodsAnnotationOnFunctionAsyncClient.h"
#include "thrift/compiler/test/fixtures/client-methods/gen-cpp2/module_types.h"

namespace folly {
  class IOBuf;
  class IOBufQueue;
}
namespace apache { namespace thrift {
  class Cpp2RequestContext;
  class BinaryProtocolReader;
  class CompactProtocolReader;
  namespace transport { class THeader; }
}}

namespace cpp2 {
class HeaderClientMethodsAnnotationOnFunction;
class HeaderClientMethodsAnnotationOnFunctionAsyncProcessor;

class HeaderClientMethodsAnnotationOnFunctionServiceInfoHolder : public apache::thrift::ServiceInfoHolder {
  public:
   apache::thrift::ServiceRequestInfoMap const& requestInfoMap() const override;
   static apache::thrift::ServiceRequestInfoMap staticRequestInfoMap();
};
} // namespace cpp2

namespace apache::thrift {
template <>
class ServiceHandler<::cpp2::HeaderClientMethodsAnnotationOnFunction> : public apache::thrift::ServerInterface {
  static_assert(!folly::is_detected_v<::apache::thrift::detail::st::detect_complete, ::cpp2::HeaderClientMethodsAnnotationOnFunction>, "Definition collision with service tag. Either rename the Thrift service using @cpp.Name annotation or rename the conflicting C++ type.");

 public:
  std::string_view getGeneratedName() const override { return "HeaderClientMethodsAnnotationOnFunction"; }

  typedef ::cpp2::HeaderClientMethodsAnnotationOnFunctionAsyncProcessor ProcessorType;
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override;
  CreateMethodMetadataResult createMethodMetadata() override;
  bool isThriftGenerated() const override final { return true; }
 private:
  std::optional<std::reference_wrapper<apache::thrift::ServiceRequestInfoMap const>> getServiceRequestInfoMap() const;
 public:

  virtual void sync_echo(::cpp2::EchoResponse& /*_return*/, std::unique_ptr<::cpp2::EchoRequest> /*request*/);
  [[deprecated("Use sync_echo instead")]] virtual void echo(::cpp2::EchoResponse& /*_return*/, std::unique_ptr<::cpp2::EchoRequest> /*request*/);
  virtual folly::Future<std::unique_ptr<::cpp2::EchoResponse>> future_echo(std::unique_ptr<::cpp2::EchoRequest> p_request);
  virtual folly::SemiFuture<std::unique_ptr<::cpp2::EchoResponse>> semifuture_echo(std::unique_ptr<::cpp2::EchoRequest> p_request);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::cpp2::EchoResponse>> co_echo(std::unique_ptr<::cpp2::EchoRequest> p_request);
  virtual folly::coro::Task<std::unique_ptr<::cpp2::EchoResponse>> co_echo(apache::thrift::RequestParams params, std::unique_ptr<::cpp2::EchoRequest> p_request);
#endif
  virtual void async_tm_echo(apache::thrift::HandlerCallbackPtr<std::unique_ptr<::cpp2::EchoResponse>> callback, std::unique_ptr<::cpp2::EchoRequest> p_request);
  virtual void sync_echo_2(::cpp2::EchoResponse& /*_return*/, std::unique_ptr<::cpp2::EchoRequest> /*request*/);
  [[deprecated("Use sync_echo_2 instead")]] virtual void echo_2(::cpp2::EchoResponse& /*_return*/, std::unique_ptr<::cpp2::EchoRequest> /*request*/);
  virtual folly::Future<std::unique_ptr<::cpp2::EchoResponse>> future_echo_2(std::unique_ptr<::cpp2::EchoRequest> p_request);
  virtual folly::SemiFuture<std::unique_ptr<::cpp2::EchoResponse>> semifuture_echo_2(std::unique_ptr<::cpp2::EchoRequest> p_request);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::cpp2::EchoResponse>> co_echo_2(std::unique_ptr<::cpp2::EchoRequest> p_request);
  virtual folly::coro::Task<std::unique_ptr<::cpp2::EchoResponse>> co_echo_2(apache::thrift::RequestParams params, std::unique_ptr<::cpp2::EchoRequest> p_request);
#endif
  virtual void async_tm_echo_2(apache::thrift::HandlerCallbackPtr<std::unique_ptr<::cpp2::EchoResponse>> callback, std::unique_ptr<::cpp2::EchoRequest> p_request);
 private:
  static ::cpp2::HeaderClientMethodsAnnotationOnFunctionServiceInfoHolder __fbthrift_serviceInfoHolder;
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_echo{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_echo_2{apache::thrift::detail::si::InvocationType::AsyncTm};
 public:

  virtual void fbthrift_execute_decorators_before_echo(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorArgType<::cpp2::EchoRequest>::type /*p_request*/) {}
  virtual void fbthrift_execute_decorators_after_echo(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorReturnType<::cpp2::EchoResponse>::type /*result*/) {}
  static void fbthrift_invoke_decorator_after_echo(void* iface, apache::thrift::Cpp2RequestContext* ctx, apache::thrift::detail::DecoratorReturnType<::cpp2::EchoResponse>::type result) {
    static_cast<ServiceHandler<::cpp2::HeaderClientMethodsAnnotationOnFunction>*>(iface)->fbthrift_execute_decorators_after_echo(*ctx, result);
  }
  virtual void fbthrift_execute_decorators_before_echo_2(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorArgType<::cpp2::EchoRequest>::type /*p_request*/) {}
  virtual void fbthrift_execute_decorators_after_echo_2(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorReturnType<::cpp2::EchoResponse>::type /*result*/) {}
  static void fbthrift_invoke_decorator_after_echo_2(void* iface, apache::thrift::Cpp2RequestContext* ctx, apache::thrift::detail::DecoratorReturnType<::cpp2::EchoResponse>::type result) {
    static_cast<ServiceHandler<::cpp2::HeaderClientMethodsAnnotationOnFunction>*>(iface)->fbthrift_execute_decorators_after_echo_2(*ctx, result);
  }
};

namespace detail {
template <> struct TSchemaAssociation<::cpp2::HeaderClientMethodsAnnotationOnFunction, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 8289997534464861998;
  static constexpr ::std::string_view definitionKey = {"\x9c\xdd\xc7\xa5\x1c\x0f\xae\x50\xa3\x27\xa7\xe4\xe1\x56\xea\x62", 16};
};
}
} // namespace apache::thrift

namespace cpp2 {
using HeaderClientMethodsAnnotationOnFunctionSvIf [[deprecated("Use apache::thrift::ServiceHandler<HeaderClientMethodsAnnotationOnFunction> instead")]] = ::apache::thrift::ServiceHandler<HeaderClientMethodsAnnotationOnFunction>;
} // namespace cpp2

namespace cpp2 {
class HeaderClientMethodsAnnotationOnFunctionSvNull : public ::apache::thrift::ServiceHandler<HeaderClientMethodsAnnotationOnFunction> {
 public:
  void echo(::cpp2::EchoResponse& /*_return*/, std::unique_ptr<::cpp2::EchoRequest> /*request*/) override;
  void echo_2(::cpp2::EchoResponse& /*_return*/, std::unique_ptr<::cpp2::EchoRequest> /*request*/) override;
};

class HeaderClientMethodsAnnotationOnFunctionAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessorBase {
 public:
  std::string_view getServiceName() override;
  void getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) override;
  using BaseAsyncProcessor = void;
 protected:
  ::apache::thrift::ServiceHandler<::cpp2::HeaderClientMethodsAnnotationOnFunction>* iface_;
 public:
  void processSerializedCompressedRequestWithMetadata(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) override;
  void executeRequest(apache::thrift::ServerRequest&& serverRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata) override;
 public:
  using ProcessFuncs = GeneratedAsyncProcessorBase::ProcessFuncs<HeaderClientMethodsAnnotationOnFunctionAsyncProcessor>;
  using ProcessMap = GeneratedAsyncProcessorBase::ProcessMap<ProcessFuncs>;
  static const HeaderClientMethodsAnnotationOnFunctionAsyncProcessor::ProcessMap& getOwnProcessMap();
 private:
  static const HeaderClientMethodsAnnotationOnFunctionAsyncProcessor::ProcessMap kOwnProcessMap_;
 private:
  //
  // Service Methods
  //

  //
  // Method 'echo'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_echo(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_echo(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_echo(
      apache::thrift::ContextStack* ctx,
      ::cpp2::EchoResponse const& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_echo(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'echo'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'echo_2'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_echo_2(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_echo_2(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_echo_2(
      apache::thrift::ContextStack* ctx,
      ::cpp2::EchoResponse const& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_echo_2(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'echo_2'
  //

  //
  // End of Service Methods
  //
 public:
  HeaderClientMethodsAnnotationOnFunctionAsyncProcessor(::apache::thrift::ServiceHandler<::cpp2::HeaderClientMethodsAnnotationOnFunction>* iface) :
      iface_(iface) {}
  ~HeaderClientMethodsAnnotationOnFunctionAsyncProcessor() override {}
};

} // namespace cpp2
