/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class FieldLevelTerseStruct implements TBase, java.io.Serializable, Cloneable, Comparable<FieldLevelTerseStruct> {
  private static final TStruct STRUCT_DESC = new TStruct("FieldLevelTerseStruct");
  private static final TField TERSE_BOOL_FIELD_FIELD_DESC = new TField("terse_bool_field", TType.BOOL, (short)1);
  private static final TField TERSE_BYTE_FIELD_FIELD_DESC = new TField("terse_byte_field", TType.BYTE, (short)2);
  private static final TField TERSE_SHORT_FIELD_FIELD_DESC = new TField("terse_short_field", TType.I16, (short)3);
  private static final TField TERSE_INT_FIELD_FIELD_DESC = new TField("terse_int_field", TType.I32, (short)4);
  private static final TField TERSE_LONG_FIELD_FIELD_DESC = new TField("terse_long_field", TType.I64, (short)5);
  private static final TField TERSE_FLOAT_FIELD_FIELD_DESC = new TField("terse_float_field", TType.FLOAT, (short)6);
  private static final TField TERSE_DOUBLE_FIELD_FIELD_DESC = new TField("terse_double_field", TType.DOUBLE, (short)7);
  private static final TField TERSE_STRING_FIELD_FIELD_DESC = new TField("terse_string_field", TType.STRING, (short)8);
  private static final TField TERSE_BINARY_FIELD_FIELD_DESC = new TField("terse_binary_field", TType.STRING, (short)9);
  private static final TField TERSE_ENUM_FIELD_FIELD_DESC = new TField("terse_enum_field", TType.I32, (short)10);
  private static final TField TERSE_LIST_FIELD_FIELD_DESC = new TField("terse_list_field", TType.LIST, (short)11);
  private static final TField TERSE_SET_FIELD_FIELD_DESC = new TField("terse_set_field", TType.SET, (short)12);
  private static final TField TERSE_MAP_FIELD_FIELD_DESC = new TField("terse_map_field", TType.MAP, (short)13);
  private static final TField TERSE_STRUCT_FIELD_FIELD_DESC = new TField("terse_struct_field", TType.STRUCT, (short)14);
  private static final TField TERSE_UNION_FIELD_FIELD_DESC = new TField("terse_union_field", TType.STRUCT, (short)29);
  private static final TField BOOL_FIELD_FIELD_DESC = new TField("bool_field", TType.BOOL, (short)15);
  private static final TField BYTE_FIELD_FIELD_DESC = new TField("byte_field", TType.BYTE, (short)16);
  private static final TField SHORT_FIELD_FIELD_DESC = new TField("short_field", TType.I16, (short)17);
  private static final TField INT_FIELD_FIELD_DESC = new TField("int_field", TType.I32, (short)18);
  private static final TField LONG_FIELD_FIELD_DESC = new TField("long_field", TType.I64, (short)19);
  private static final TField FLOAT_FIELD_FIELD_DESC = new TField("float_field", TType.FLOAT, (short)20);
  private static final TField DOUBLE_FIELD_FIELD_DESC = new TField("double_field", TType.DOUBLE, (short)21);
  private static final TField STRING_FIELD_FIELD_DESC = new TField("string_field", TType.STRING, (short)22);
  private static final TField BINARY_FIELD_FIELD_DESC = new TField("binary_field", TType.STRING, (short)23);
  private static final TField ENUM_FIELD_FIELD_DESC = new TField("enum_field", TType.I32, (short)24);
  private static final TField LIST_FIELD_FIELD_DESC = new TField("list_field", TType.LIST, (short)25);
  private static final TField SET_FIELD_FIELD_DESC = new TField("set_field", TType.SET, (short)26);
  private static final TField MAP_FIELD_FIELD_DESC = new TField("map_field", TType.MAP, (short)27);
  private static final TField STRUCT_FIELD_FIELD_DESC = new TField("struct_field", TType.STRUCT, (short)28);
  private static final TField UNION_FIELD_FIELD_DESC = new TField("union_field", TType.STRUCT, (short)30);

  public boolean terse_bool_field;
  public byte terse_byte_field;
  public short terse_short_field;
  public int terse_int_field;
  public long terse_long_field;
  public float terse_float_field;
  public double terse_double_field;
  public String terse_string_field;
  public byte[] terse_binary_field;
  /**
   * 
   * @see MyEnum
   */
  public MyEnum terse_enum_field;
  public List<Short> terse_list_field;
  public Set<Short> terse_set_field;
  public Map<Short,Short> terse_map_field;
  public MyStruct terse_struct_field;
  public MyUnion terse_union_field;
  public boolean bool_field;
  public byte byte_field;
  public short short_field;
  public int int_field;
  public long long_field;
  public float float_field;
  public double double_field;
  public String string_field;
  public byte[] binary_field;
  /**
   * 
   * @see MyEnum
   */
  public MyEnum enum_field;
  public List<Short> list_field;
  public Set<Short> set_field;
  public Map<Short,Short> map_field;
  public MyStruct struct_field;
  public MyUnion union_field;
  public static final int TERSE_BOOL_FIELD = 1;
  public static final int TERSE_BYTE_FIELD = 2;
  public static final int TERSE_SHORT_FIELD = 3;
  public static final int TERSE_INT_FIELD = 4;
  public static final int TERSE_LONG_FIELD = 5;
  public static final int TERSE_FLOAT_FIELD = 6;
  public static final int TERSE_DOUBLE_FIELD = 7;
  public static final int TERSE_STRING_FIELD = 8;
  public static final int TERSE_BINARY_FIELD = 9;
  public static final int TERSE_ENUM_FIELD = 10;
  public static final int TERSE_LIST_FIELD = 11;
  public static final int TERSE_SET_FIELD = 12;
  public static final int TERSE_MAP_FIELD = 13;
  public static final int TERSE_STRUCT_FIELD = 14;
  public static final int TERSE_UNION_FIELD = 29;
  public static final int BOOL_FIELD = 15;
  public static final int BYTE_FIELD = 16;
  public static final int SHORT_FIELD = 17;
  public static final int INT_FIELD = 18;
  public static final int LONG_FIELD = 19;
  public static final int FLOAT_FIELD = 20;
  public static final int DOUBLE_FIELD = 21;
  public static final int STRING_FIELD = 22;
  public static final int BINARY_FIELD = 23;
  public static final int ENUM_FIELD = 24;
  public static final int LIST_FIELD = 25;
  public static final int SET_FIELD = 26;
  public static final int MAP_FIELD = 27;
  public static final int STRUCT_FIELD = 28;
  public static final int UNION_FIELD = 30;

  // isset id assignments
  private static final int __TERSE_BOOL_FIELD_ISSET_ID = 0;
  private static final int __TERSE_BYTE_FIELD_ISSET_ID = 1;
  private static final int __TERSE_SHORT_FIELD_ISSET_ID = 2;
  private static final int __TERSE_INT_FIELD_ISSET_ID = 3;
  private static final int __TERSE_LONG_FIELD_ISSET_ID = 4;
  private static final int __TERSE_FLOAT_FIELD_ISSET_ID = 5;
  private static final int __TERSE_DOUBLE_FIELD_ISSET_ID = 6;
  private static final int __BOOL_FIELD_ISSET_ID = 7;
  private static final int __BYTE_FIELD_ISSET_ID = 8;
  private static final int __SHORT_FIELD_ISSET_ID = 9;
  private static final int __INT_FIELD_ISSET_ID = 10;
  private static final int __LONG_FIELD_ISSET_ID = 11;
  private static final int __FLOAT_FIELD_ISSET_ID = 12;
  private static final int __DOUBLE_FIELD_ISSET_ID = 13;
  private BitSet __isset_bit_vector = new BitSet(14);

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(TERSE_BOOL_FIELD, new FieldMetaData("terse_bool_field", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMetaDataMap.put(TERSE_BYTE_FIELD, new FieldMetaData("terse_byte_field", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BYTE)));
    tmpMetaDataMap.put(TERSE_SHORT_FIELD, new FieldMetaData("terse_short_field", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I16)));
    tmpMetaDataMap.put(TERSE_INT_FIELD, new FieldMetaData("terse_int_field", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(TERSE_LONG_FIELD, new FieldMetaData("terse_long_field", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(TERSE_FLOAT_FIELD, new FieldMetaData("terse_float_field", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.FLOAT)));
    tmpMetaDataMap.put(TERSE_DOUBLE_FIELD, new FieldMetaData("terse_double_field", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    tmpMetaDataMap.put(TERSE_STRING_FIELD, new FieldMetaData("terse_string_field", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(TERSE_BINARY_FIELD, new FieldMetaData("terse_binary_field", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(TERSE_ENUM_FIELD, new FieldMetaData("terse_enum_field", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(TERSE_LIST_FIELD, new FieldMetaData("terse_list_field", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.I16))));
    tmpMetaDataMap.put(TERSE_SET_FIELD, new FieldMetaData("terse_set_field", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new FieldValueMetaData(TType.I16))));
    tmpMetaDataMap.put(TERSE_MAP_FIELD, new FieldMetaData("terse_map_field", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I16), 
            new FieldValueMetaData(TType.I16))));
    tmpMetaDataMap.put(TERSE_STRUCT_FIELD, new FieldMetaData("terse_struct_field", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, MyStruct.class)));
    tmpMetaDataMap.put(TERSE_UNION_FIELD, new FieldMetaData("terse_union_field", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, MyUnion.class)));
    tmpMetaDataMap.put(BOOL_FIELD, new FieldMetaData("bool_field", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMetaDataMap.put(BYTE_FIELD, new FieldMetaData("byte_field", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BYTE)));
    tmpMetaDataMap.put(SHORT_FIELD, new FieldMetaData("short_field", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I16)));
    tmpMetaDataMap.put(INT_FIELD, new FieldMetaData("int_field", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(LONG_FIELD, new FieldMetaData("long_field", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(FLOAT_FIELD, new FieldMetaData("float_field", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.FLOAT)));
    tmpMetaDataMap.put(DOUBLE_FIELD, new FieldMetaData("double_field", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    tmpMetaDataMap.put(STRING_FIELD, new FieldMetaData("string_field", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(BINARY_FIELD, new FieldMetaData("binary_field", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(ENUM_FIELD, new FieldMetaData("enum_field", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(LIST_FIELD, new FieldMetaData("list_field", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.I16))));
    tmpMetaDataMap.put(SET_FIELD, new FieldMetaData("set_field", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new FieldValueMetaData(TType.I16))));
    tmpMetaDataMap.put(MAP_FIELD, new FieldMetaData("map_field", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I16), 
            new FieldValueMetaData(TType.I16))));
    tmpMetaDataMap.put(STRUCT_FIELD, new FieldMetaData("struct_field", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, MyStruct.class)));
    tmpMetaDataMap.put(UNION_FIELD, new FieldMetaData("union_field", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, MyUnion.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(FieldLevelTerseStruct.class, metaDataMap);
  }

  public FieldLevelTerseStruct() {
  }

  public FieldLevelTerseStruct(
      boolean terse_bool_field,
      byte terse_byte_field,
      short terse_short_field,
      int terse_int_field,
      long terse_long_field,
      float terse_float_field,
      double terse_double_field,
      String terse_string_field,
      byte[] terse_binary_field,
      MyEnum terse_enum_field,
      List<Short> terse_list_field,
      Set<Short> terse_set_field,
      Map<Short,Short> terse_map_field,
      MyStruct terse_struct_field,
      MyUnion terse_union_field,
      boolean bool_field,
      byte byte_field,
      short short_field,
      int int_field,
      long long_field,
      float float_field,
      double double_field,
      String string_field,
      byte[] binary_field,
      MyEnum enum_field,
      List<Short> list_field,
      Set<Short> set_field,
      Map<Short,Short> map_field,
      MyStruct struct_field,
      MyUnion union_field) {
    this();
    this.terse_bool_field = terse_bool_field;
    setTerse_bool_fieldIsSet(true);
    this.terse_byte_field = terse_byte_field;
    setTerse_byte_fieldIsSet(true);
    this.terse_short_field = terse_short_field;
    setTerse_short_fieldIsSet(true);
    this.terse_int_field = terse_int_field;
    setTerse_int_fieldIsSet(true);
    this.terse_long_field = terse_long_field;
    setTerse_long_fieldIsSet(true);
    this.terse_float_field = terse_float_field;
    setTerse_float_fieldIsSet(true);
    this.terse_double_field = terse_double_field;
    setTerse_double_fieldIsSet(true);
    this.terse_string_field = terse_string_field;
    this.terse_binary_field = terse_binary_field;
    this.terse_enum_field = terse_enum_field;
    this.terse_list_field = terse_list_field;
    this.terse_set_field = terse_set_field;
    this.terse_map_field = terse_map_field;
    this.terse_struct_field = terse_struct_field;
    this.terse_union_field = terse_union_field;
    this.bool_field = bool_field;
    setBool_fieldIsSet(true);
    this.byte_field = byte_field;
    setByte_fieldIsSet(true);
    this.short_field = short_field;
    setShort_fieldIsSet(true);
    this.int_field = int_field;
    setInt_fieldIsSet(true);
    this.long_field = long_field;
    setLong_fieldIsSet(true);
    this.float_field = float_field;
    setFloat_fieldIsSet(true);
    this.double_field = double_field;
    setDouble_fieldIsSet(true);
    this.string_field = string_field;
    this.binary_field = binary_field;
    this.enum_field = enum_field;
    this.list_field = list_field;
    this.set_field = set_field;
    this.map_field = map_field;
    this.struct_field = struct_field;
    this.union_field = union_field;
  }

  public static class Builder {
    private boolean terse_bool_field;
    private byte terse_byte_field;
    private short terse_short_field;
    private int terse_int_field;
    private long terse_long_field;
    private float terse_float_field;
    private double terse_double_field;
    private String terse_string_field;
    private byte[] terse_binary_field;
    private MyEnum terse_enum_field;
    private List<Short> terse_list_field;
    private Set<Short> terse_set_field;
    private Map<Short,Short> terse_map_field;
    private MyStruct terse_struct_field;
    private MyUnion terse_union_field;
    private boolean bool_field;
    private byte byte_field;
    private short short_field;
    private int int_field;
    private long long_field;
    private float float_field;
    private double double_field;
    private String string_field;
    private byte[] binary_field;
    private MyEnum enum_field;
    private List<Short> list_field;
    private Set<Short> set_field;
    private Map<Short,Short> map_field;
    private MyStruct struct_field;
    private MyUnion union_field;

    BitSet __optional_isset = new BitSet(14);

    public Builder() {
    }

    public Builder setTerse_bool_field(final boolean terse_bool_field) {
      this.terse_bool_field = terse_bool_field;
      __optional_isset.set(__TERSE_BOOL_FIELD_ISSET_ID, true);
      return this;
    }

    public Builder setTerse_byte_field(final byte terse_byte_field) {
      this.terse_byte_field = terse_byte_field;
      __optional_isset.set(__TERSE_BYTE_FIELD_ISSET_ID, true);
      return this;
    }

    public Builder setTerse_short_field(final short terse_short_field) {
      this.terse_short_field = terse_short_field;
      __optional_isset.set(__TERSE_SHORT_FIELD_ISSET_ID, true);
      return this;
    }

    public Builder setTerse_int_field(final int terse_int_field) {
      this.terse_int_field = terse_int_field;
      __optional_isset.set(__TERSE_INT_FIELD_ISSET_ID, true);
      return this;
    }

    public Builder setTerse_long_field(final long terse_long_field) {
      this.terse_long_field = terse_long_field;
      __optional_isset.set(__TERSE_LONG_FIELD_ISSET_ID, true);
      return this;
    }

    public Builder setTerse_float_field(final float terse_float_field) {
      this.terse_float_field = terse_float_field;
      __optional_isset.set(__TERSE_FLOAT_FIELD_ISSET_ID, true);
      return this;
    }

    public Builder setTerse_double_field(final double terse_double_field) {
      this.terse_double_field = terse_double_field;
      __optional_isset.set(__TERSE_DOUBLE_FIELD_ISSET_ID, true);
      return this;
    }

    public Builder setTerse_string_field(final String terse_string_field) {
      this.terse_string_field = terse_string_field;
      return this;
    }

    public Builder setTerse_binary_field(final byte[] terse_binary_field) {
      this.terse_binary_field = terse_binary_field;
      return this;
    }

    public Builder setTerse_enum_field(final MyEnum terse_enum_field) {
      this.terse_enum_field = terse_enum_field;
      return this;
    }

    public Builder setTerse_list_field(final List<Short> terse_list_field) {
      this.terse_list_field = terse_list_field;
      return this;
    }

    public Builder setTerse_set_field(final Set<Short> terse_set_field) {
      this.terse_set_field = terse_set_field;
      return this;
    }

    public Builder setTerse_map_field(final Map<Short,Short> terse_map_field) {
      this.terse_map_field = terse_map_field;
      return this;
    }

    public Builder setTerse_struct_field(final MyStruct terse_struct_field) {
      this.terse_struct_field = terse_struct_field;
      return this;
    }

    public Builder setTerse_union_field(final MyUnion terse_union_field) {
      this.terse_union_field = terse_union_field;
      return this;
    }

    public Builder setBool_field(final boolean bool_field) {
      this.bool_field = bool_field;
      __optional_isset.set(__BOOL_FIELD_ISSET_ID, true);
      return this;
    }

    public Builder setByte_field(final byte byte_field) {
      this.byte_field = byte_field;
      __optional_isset.set(__BYTE_FIELD_ISSET_ID, true);
      return this;
    }

    public Builder setShort_field(final short short_field) {
      this.short_field = short_field;
      __optional_isset.set(__SHORT_FIELD_ISSET_ID, true);
      return this;
    }

    public Builder setInt_field(final int int_field) {
      this.int_field = int_field;
      __optional_isset.set(__INT_FIELD_ISSET_ID, true);
      return this;
    }

    public Builder setLong_field(final long long_field) {
      this.long_field = long_field;
      __optional_isset.set(__LONG_FIELD_ISSET_ID, true);
      return this;
    }

    public Builder setFloat_field(final float float_field) {
      this.float_field = float_field;
      __optional_isset.set(__FLOAT_FIELD_ISSET_ID, true);
      return this;
    }

    public Builder setDouble_field(final double double_field) {
      this.double_field = double_field;
      __optional_isset.set(__DOUBLE_FIELD_ISSET_ID, true);
      return this;
    }

    public Builder setString_field(final String string_field) {
      this.string_field = string_field;
      return this;
    }

    public Builder setBinary_field(final byte[] binary_field) {
      this.binary_field = binary_field;
      return this;
    }

    public Builder setEnum_field(final MyEnum enum_field) {
      this.enum_field = enum_field;
      return this;
    }

    public Builder setList_field(final List<Short> list_field) {
      this.list_field = list_field;
      return this;
    }

    public Builder setSet_field(final Set<Short> set_field) {
      this.set_field = set_field;
      return this;
    }

    public Builder setMap_field(final Map<Short,Short> map_field) {
      this.map_field = map_field;
      return this;
    }

    public Builder setStruct_field(final MyStruct struct_field) {
      this.struct_field = struct_field;
      return this;
    }

    public Builder setUnion_field(final MyUnion union_field) {
      this.union_field = union_field;
      return this;
    }

    public FieldLevelTerseStruct build() {
      FieldLevelTerseStruct result = new FieldLevelTerseStruct();
      if (__optional_isset.get(__TERSE_BOOL_FIELD_ISSET_ID)) {
        result.setTerse_bool_field(this.terse_bool_field);
      }
      if (__optional_isset.get(__TERSE_BYTE_FIELD_ISSET_ID)) {
        result.setTerse_byte_field(this.terse_byte_field);
      }
      if (__optional_isset.get(__TERSE_SHORT_FIELD_ISSET_ID)) {
        result.setTerse_short_field(this.terse_short_field);
      }
      if (__optional_isset.get(__TERSE_INT_FIELD_ISSET_ID)) {
        result.setTerse_int_field(this.terse_int_field);
      }
      if (__optional_isset.get(__TERSE_LONG_FIELD_ISSET_ID)) {
        result.setTerse_long_field(this.terse_long_field);
      }
      if (__optional_isset.get(__TERSE_FLOAT_FIELD_ISSET_ID)) {
        result.setTerse_float_field(this.terse_float_field);
      }
      if (__optional_isset.get(__TERSE_DOUBLE_FIELD_ISSET_ID)) {
        result.setTerse_double_field(this.terse_double_field);
      }
      result.setTerse_string_field(this.terse_string_field);
      result.setTerse_binary_field(this.terse_binary_field);
      result.setTerse_enum_field(this.terse_enum_field);
      result.setTerse_list_field(this.terse_list_field);
      result.setTerse_set_field(this.terse_set_field);
      result.setTerse_map_field(this.terse_map_field);
      result.setTerse_struct_field(this.terse_struct_field);
      result.setTerse_union_field(this.terse_union_field);
      if (__optional_isset.get(__BOOL_FIELD_ISSET_ID)) {
        result.setBool_field(this.bool_field);
      }
      if (__optional_isset.get(__BYTE_FIELD_ISSET_ID)) {
        result.setByte_field(this.byte_field);
      }
      if (__optional_isset.get(__SHORT_FIELD_ISSET_ID)) {
        result.setShort_field(this.short_field);
      }
      if (__optional_isset.get(__INT_FIELD_ISSET_ID)) {
        result.setInt_field(this.int_field);
      }
      if (__optional_isset.get(__LONG_FIELD_ISSET_ID)) {
        result.setLong_field(this.long_field);
      }
      if (__optional_isset.get(__FLOAT_FIELD_ISSET_ID)) {
        result.setFloat_field(this.float_field);
      }
      if (__optional_isset.get(__DOUBLE_FIELD_ISSET_ID)) {
        result.setDouble_field(this.double_field);
      }
      result.setString_field(this.string_field);
      result.setBinary_field(this.binary_field);
      result.setEnum_field(this.enum_field);
      result.setList_field(this.list_field);
      result.setSet_field(this.set_field);
      result.setMap_field(this.map_field);
      result.setStruct_field(this.struct_field);
      result.setUnion_field(this.union_field);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FieldLevelTerseStruct(FieldLevelTerseStruct other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.terse_bool_field = TBaseHelper.deepCopy(other.terse_bool_field);
    this.terse_byte_field = TBaseHelper.deepCopy(other.terse_byte_field);
    this.terse_short_field = TBaseHelper.deepCopy(other.terse_short_field);
    this.terse_int_field = TBaseHelper.deepCopy(other.terse_int_field);
    this.terse_long_field = TBaseHelper.deepCopy(other.terse_long_field);
    this.terse_float_field = TBaseHelper.deepCopy(other.terse_float_field);
    this.terse_double_field = TBaseHelper.deepCopy(other.terse_double_field);
    if (other.isSetTerse_string_field()) {
      this.terse_string_field = TBaseHelper.deepCopy(other.terse_string_field);
    }
    if (other.isSetTerse_binary_field()) {
      this.terse_binary_field = TBaseHelper.deepCopy(other.terse_binary_field);
    }
    if (other.isSetTerse_enum_field()) {
      this.terse_enum_field = TBaseHelper.deepCopy(other.terse_enum_field);
    }
    if (other.isSetTerse_list_field()) {
      this.terse_list_field = TBaseHelper.deepCopy(other.terse_list_field);
    }
    if (other.isSetTerse_set_field()) {
      this.terse_set_field = TBaseHelper.deepCopy(other.terse_set_field);
    }
    if (other.isSetTerse_map_field()) {
      this.terse_map_field = TBaseHelper.deepCopy(other.terse_map_field);
    }
    if (other.isSetTerse_struct_field()) {
      this.terse_struct_field = TBaseHelper.deepCopy(other.terse_struct_field);
    }
    if (other.isSetTerse_union_field()) {
      this.terse_union_field = TBaseHelper.deepCopy(other.terse_union_field);
    }
    this.bool_field = TBaseHelper.deepCopy(other.bool_field);
    this.byte_field = TBaseHelper.deepCopy(other.byte_field);
    this.short_field = TBaseHelper.deepCopy(other.short_field);
    this.int_field = TBaseHelper.deepCopy(other.int_field);
    this.long_field = TBaseHelper.deepCopy(other.long_field);
    this.float_field = TBaseHelper.deepCopy(other.float_field);
    this.double_field = TBaseHelper.deepCopy(other.double_field);
    if (other.isSetString_field()) {
      this.string_field = TBaseHelper.deepCopy(other.string_field);
    }
    if (other.isSetBinary_field()) {
      this.binary_field = TBaseHelper.deepCopy(other.binary_field);
    }
    if (other.isSetEnum_field()) {
      this.enum_field = TBaseHelper.deepCopy(other.enum_field);
    }
    if (other.isSetList_field()) {
      this.list_field = TBaseHelper.deepCopy(other.list_field);
    }
    if (other.isSetSet_field()) {
      this.set_field = TBaseHelper.deepCopy(other.set_field);
    }
    if (other.isSetMap_field()) {
      this.map_field = TBaseHelper.deepCopy(other.map_field);
    }
    if (other.isSetStruct_field()) {
      this.struct_field = TBaseHelper.deepCopy(other.struct_field);
    }
    if (other.isSetUnion_field()) {
      this.union_field = TBaseHelper.deepCopy(other.union_field);
    }
  }

  public FieldLevelTerseStruct deepCopy() {
    return new FieldLevelTerseStruct(this);
  }

  public boolean isTerse_bool_field() {
    return this.terse_bool_field;
  }

  public FieldLevelTerseStruct setTerse_bool_field(boolean terse_bool_field) {
    this.terse_bool_field = terse_bool_field;
    setTerse_bool_fieldIsSet(true);
    return this;
  }

  public void unsetTerse_bool_field() {
    __isset_bit_vector.clear(__TERSE_BOOL_FIELD_ISSET_ID);
  }

  // Returns true if field terse_bool_field is set (has been assigned a value) and false otherwise
  public boolean isSetTerse_bool_field() {
    return __isset_bit_vector.get(__TERSE_BOOL_FIELD_ISSET_ID);
  }

  public void setTerse_bool_fieldIsSet(boolean __value) {
    __isset_bit_vector.set(__TERSE_BOOL_FIELD_ISSET_ID, __value);
  }

  public byte getTerse_byte_field() {
    return this.terse_byte_field;
  }

  public FieldLevelTerseStruct setTerse_byte_field(byte terse_byte_field) {
    this.terse_byte_field = terse_byte_field;
    setTerse_byte_fieldIsSet(true);
    return this;
  }

  public void unsetTerse_byte_field() {
    __isset_bit_vector.clear(__TERSE_BYTE_FIELD_ISSET_ID);
  }

  // Returns true if field terse_byte_field is set (has been assigned a value) and false otherwise
  public boolean isSetTerse_byte_field() {
    return __isset_bit_vector.get(__TERSE_BYTE_FIELD_ISSET_ID);
  }

  public void setTerse_byte_fieldIsSet(boolean __value) {
    __isset_bit_vector.set(__TERSE_BYTE_FIELD_ISSET_ID, __value);
  }

  public short getTerse_short_field() {
    return this.terse_short_field;
  }

  public FieldLevelTerseStruct setTerse_short_field(short terse_short_field) {
    this.terse_short_field = terse_short_field;
    setTerse_short_fieldIsSet(true);
    return this;
  }

  public void unsetTerse_short_field() {
    __isset_bit_vector.clear(__TERSE_SHORT_FIELD_ISSET_ID);
  }

  // Returns true if field terse_short_field is set (has been assigned a value) and false otherwise
  public boolean isSetTerse_short_field() {
    return __isset_bit_vector.get(__TERSE_SHORT_FIELD_ISSET_ID);
  }

  public void setTerse_short_fieldIsSet(boolean __value) {
    __isset_bit_vector.set(__TERSE_SHORT_FIELD_ISSET_ID, __value);
  }

  public int getTerse_int_field() {
    return this.terse_int_field;
  }

  public FieldLevelTerseStruct setTerse_int_field(int terse_int_field) {
    this.terse_int_field = terse_int_field;
    setTerse_int_fieldIsSet(true);
    return this;
  }

  public void unsetTerse_int_field() {
    __isset_bit_vector.clear(__TERSE_INT_FIELD_ISSET_ID);
  }

  // Returns true if field terse_int_field is set (has been assigned a value) and false otherwise
  public boolean isSetTerse_int_field() {
    return __isset_bit_vector.get(__TERSE_INT_FIELD_ISSET_ID);
  }

  public void setTerse_int_fieldIsSet(boolean __value) {
    __isset_bit_vector.set(__TERSE_INT_FIELD_ISSET_ID, __value);
  }

  public long getTerse_long_field() {
    return this.terse_long_field;
  }

  public FieldLevelTerseStruct setTerse_long_field(long terse_long_field) {
    this.terse_long_field = terse_long_field;
    setTerse_long_fieldIsSet(true);
    return this;
  }

  public void unsetTerse_long_field() {
    __isset_bit_vector.clear(__TERSE_LONG_FIELD_ISSET_ID);
  }

  // Returns true if field terse_long_field is set (has been assigned a value) and false otherwise
  public boolean isSetTerse_long_field() {
    return __isset_bit_vector.get(__TERSE_LONG_FIELD_ISSET_ID);
  }

  public void setTerse_long_fieldIsSet(boolean __value) {
    __isset_bit_vector.set(__TERSE_LONG_FIELD_ISSET_ID, __value);
  }

  public float getTerse_float_field() {
    return this.terse_float_field;
  }

  public FieldLevelTerseStruct setTerse_float_field(float terse_float_field) {
    this.terse_float_field = terse_float_field;
    setTerse_float_fieldIsSet(true);
    return this;
  }

  public void unsetTerse_float_field() {
    __isset_bit_vector.clear(__TERSE_FLOAT_FIELD_ISSET_ID);
  }

  // Returns true if field terse_float_field is set (has been assigned a value) and false otherwise
  public boolean isSetTerse_float_field() {
    return __isset_bit_vector.get(__TERSE_FLOAT_FIELD_ISSET_ID);
  }

  public void setTerse_float_fieldIsSet(boolean __value) {
    __isset_bit_vector.set(__TERSE_FLOAT_FIELD_ISSET_ID, __value);
  }

  public double getTerse_double_field() {
    return this.terse_double_field;
  }

  public FieldLevelTerseStruct setTerse_double_field(double terse_double_field) {
    this.terse_double_field = terse_double_field;
    setTerse_double_fieldIsSet(true);
    return this;
  }

  public void unsetTerse_double_field() {
    __isset_bit_vector.clear(__TERSE_DOUBLE_FIELD_ISSET_ID);
  }

  // Returns true if field terse_double_field is set (has been assigned a value) and false otherwise
  public boolean isSetTerse_double_field() {
    return __isset_bit_vector.get(__TERSE_DOUBLE_FIELD_ISSET_ID);
  }

  public void setTerse_double_fieldIsSet(boolean __value) {
    __isset_bit_vector.set(__TERSE_DOUBLE_FIELD_ISSET_ID, __value);
  }

  public String getTerse_string_field() {
    return this.terse_string_field;
  }

  public FieldLevelTerseStruct setTerse_string_field(String terse_string_field) {
    this.terse_string_field = terse_string_field;
    return this;
  }

  public void unsetTerse_string_field() {
    this.terse_string_field = null;
  }

  // Returns true if field terse_string_field is set (has been assigned a value) and false otherwise
  public boolean isSetTerse_string_field() {
    return this.terse_string_field != null;
  }

  public void setTerse_string_fieldIsSet(boolean __value) {
    if (!__value) {
      this.terse_string_field = null;
    }
  }

  public byte[] getTerse_binary_field() {
    return this.terse_binary_field;
  }

  public FieldLevelTerseStruct setTerse_binary_field(byte[] terse_binary_field) {
    this.terse_binary_field = terse_binary_field;
    return this;
  }

  public void unsetTerse_binary_field() {
    this.terse_binary_field = null;
  }

  // Returns true if field terse_binary_field is set (has been assigned a value) and false otherwise
  public boolean isSetTerse_binary_field() {
    return this.terse_binary_field != null;
  }

  public void setTerse_binary_fieldIsSet(boolean __value) {
    if (!__value) {
      this.terse_binary_field = null;
    }
  }

  /**
   * 
   * @see MyEnum
   */
  public MyEnum getTerse_enum_field() {
    return this.terse_enum_field;
  }

  /**
   * 
   * @see MyEnum
   */
  public FieldLevelTerseStruct setTerse_enum_field(MyEnum terse_enum_field) {
    this.terse_enum_field = terse_enum_field;
    return this;
  }

  public void unsetTerse_enum_field() {
    this.terse_enum_field = null;
  }

  // Returns true if field terse_enum_field is set (has been assigned a value) and false otherwise
  public boolean isSetTerse_enum_field() {
    return this.terse_enum_field != null;
  }

  public void setTerse_enum_fieldIsSet(boolean __value) {
    if (!__value) {
      this.terse_enum_field = null;
    }
  }

  public List<Short> getTerse_list_field() {
    return this.terse_list_field;
  }

  public FieldLevelTerseStruct setTerse_list_field(List<Short> terse_list_field) {
    this.terse_list_field = terse_list_field;
    return this;
  }

  public void unsetTerse_list_field() {
    this.terse_list_field = null;
  }

  // Returns true if field terse_list_field is set (has been assigned a value) and false otherwise
  public boolean isSetTerse_list_field() {
    return this.terse_list_field != null;
  }

  public void setTerse_list_fieldIsSet(boolean __value) {
    if (!__value) {
      this.terse_list_field = null;
    }
  }

  public Set<Short> getTerse_set_field() {
    return this.terse_set_field;
  }

  public FieldLevelTerseStruct setTerse_set_field(Set<Short> terse_set_field) {
    this.terse_set_field = terse_set_field;
    return this;
  }

  public void unsetTerse_set_field() {
    this.terse_set_field = null;
  }

  // Returns true if field terse_set_field is set (has been assigned a value) and false otherwise
  public boolean isSetTerse_set_field() {
    return this.terse_set_field != null;
  }

  public void setTerse_set_fieldIsSet(boolean __value) {
    if (!__value) {
      this.terse_set_field = null;
    }
  }

  public Map<Short,Short> getTerse_map_field() {
    return this.terse_map_field;
  }

  public FieldLevelTerseStruct setTerse_map_field(Map<Short,Short> terse_map_field) {
    this.terse_map_field = terse_map_field;
    return this;
  }

  public void unsetTerse_map_field() {
    this.terse_map_field = null;
  }

  // Returns true if field terse_map_field is set (has been assigned a value) and false otherwise
  public boolean isSetTerse_map_field() {
    return this.terse_map_field != null;
  }

  public void setTerse_map_fieldIsSet(boolean __value) {
    if (!__value) {
      this.terse_map_field = null;
    }
  }

  public MyStruct getTerse_struct_field() {
    return this.terse_struct_field;
  }

  public FieldLevelTerseStruct setTerse_struct_field(MyStruct terse_struct_field) {
    this.terse_struct_field = terse_struct_field;
    return this;
  }

  public void unsetTerse_struct_field() {
    this.terse_struct_field = null;
  }

  // Returns true if field terse_struct_field is set (has been assigned a value) and false otherwise
  public boolean isSetTerse_struct_field() {
    return this.terse_struct_field != null;
  }

  public void setTerse_struct_fieldIsSet(boolean __value) {
    if (!__value) {
      this.terse_struct_field = null;
    }
  }

  public MyUnion getTerse_union_field() {
    return this.terse_union_field;
  }

  public FieldLevelTerseStruct setTerse_union_field(MyUnion terse_union_field) {
    this.terse_union_field = terse_union_field;
    return this;
  }

  public void unsetTerse_union_field() {
    this.terse_union_field = null;
  }

  // Returns true if field terse_union_field is set (has been assigned a value) and false otherwise
  public boolean isSetTerse_union_field() {
    return this.terse_union_field != null;
  }

  public void setTerse_union_fieldIsSet(boolean __value) {
    if (!__value) {
      this.terse_union_field = null;
    }
  }

  public boolean isBool_field() {
    return this.bool_field;
  }

  public FieldLevelTerseStruct setBool_field(boolean bool_field) {
    this.bool_field = bool_field;
    setBool_fieldIsSet(true);
    return this;
  }

  public void unsetBool_field() {
    __isset_bit_vector.clear(__BOOL_FIELD_ISSET_ID);
  }

  // Returns true if field bool_field is set (has been assigned a value) and false otherwise
  public boolean isSetBool_field() {
    return __isset_bit_vector.get(__BOOL_FIELD_ISSET_ID);
  }

  public void setBool_fieldIsSet(boolean __value) {
    __isset_bit_vector.set(__BOOL_FIELD_ISSET_ID, __value);
  }

  public byte getByte_field() {
    return this.byte_field;
  }

  public FieldLevelTerseStruct setByte_field(byte byte_field) {
    this.byte_field = byte_field;
    setByte_fieldIsSet(true);
    return this;
  }

  public void unsetByte_field() {
    __isset_bit_vector.clear(__BYTE_FIELD_ISSET_ID);
  }

  // Returns true if field byte_field is set (has been assigned a value) and false otherwise
  public boolean isSetByte_field() {
    return __isset_bit_vector.get(__BYTE_FIELD_ISSET_ID);
  }

  public void setByte_fieldIsSet(boolean __value) {
    __isset_bit_vector.set(__BYTE_FIELD_ISSET_ID, __value);
  }

  public short getShort_field() {
    return this.short_field;
  }

  public FieldLevelTerseStruct setShort_field(short short_field) {
    this.short_field = short_field;
    setShort_fieldIsSet(true);
    return this;
  }

  public void unsetShort_field() {
    __isset_bit_vector.clear(__SHORT_FIELD_ISSET_ID);
  }

  // Returns true if field short_field is set (has been assigned a value) and false otherwise
  public boolean isSetShort_field() {
    return __isset_bit_vector.get(__SHORT_FIELD_ISSET_ID);
  }

  public void setShort_fieldIsSet(boolean __value) {
    __isset_bit_vector.set(__SHORT_FIELD_ISSET_ID, __value);
  }

  public int getInt_field() {
    return this.int_field;
  }

  public FieldLevelTerseStruct setInt_field(int int_field) {
    this.int_field = int_field;
    setInt_fieldIsSet(true);
    return this;
  }

  public void unsetInt_field() {
    __isset_bit_vector.clear(__INT_FIELD_ISSET_ID);
  }

  // Returns true if field int_field is set (has been assigned a value) and false otherwise
  public boolean isSetInt_field() {
    return __isset_bit_vector.get(__INT_FIELD_ISSET_ID);
  }

  public void setInt_fieldIsSet(boolean __value) {
    __isset_bit_vector.set(__INT_FIELD_ISSET_ID, __value);
  }

  public long getLong_field() {
    return this.long_field;
  }

  public FieldLevelTerseStruct setLong_field(long long_field) {
    this.long_field = long_field;
    setLong_fieldIsSet(true);
    return this;
  }

  public void unsetLong_field() {
    __isset_bit_vector.clear(__LONG_FIELD_ISSET_ID);
  }

  // Returns true if field long_field is set (has been assigned a value) and false otherwise
  public boolean isSetLong_field() {
    return __isset_bit_vector.get(__LONG_FIELD_ISSET_ID);
  }

  public void setLong_fieldIsSet(boolean __value) {
    __isset_bit_vector.set(__LONG_FIELD_ISSET_ID, __value);
  }

  public float getFloat_field() {
    return this.float_field;
  }

  public FieldLevelTerseStruct setFloat_field(float float_field) {
    this.float_field = float_field;
    setFloat_fieldIsSet(true);
    return this;
  }

  public void unsetFloat_field() {
    __isset_bit_vector.clear(__FLOAT_FIELD_ISSET_ID);
  }

  // Returns true if field float_field is set (has been assigned a value) and false otherwise
  public boolean isSetFloat_field() {
    return __isset_bit_vector.get(__FLOAT_FIELD_ISSET_ID);
  }

  public void setFloat_fieldIsSet(boolean __value) {
    __isset_bit_vector.set(__FLOAT_FIELD_ISSET_ID, __value);
  }

  public double getDouble_field() {
    return this.double_field;
  }

  public FieldLevelTerseStruct setDouble_field(double double_field) {
    this.double_field = double_field;
    setDouble_fieldIsSet(true);
    return this;
  }

  public void unsetDouble_field() {
    __isset_bit_vector.clear(__DOUBLE_FIELD_ISSET_ID);
  }

  // Returns true if field double_field is set (has been assigned a value) and false otherwise
  public boolean isSetDouble_field() {
    return __isset_bit_vector.get(__DOUBLE_FIELD_ISSET_ID);
  }

  public void setDouble_fieldIsSet(boolean __value) {
    __isset_bit_vector.set(__DOUBLE_FIELD_ISSET_ID, __value);
  }

  public String getString_field() {
    return this.string_field;
  }

  public FieldLevelTerseStruct setString_field(String string_field) {
    this.string_field = string_field;
    return this;
  }

  public void unsetString_field() {
    this.string_field = null;
  }

  // Returns true if field string_field is set (has been assigned a value) and false otherwise
  public boolean isSetString_field() {
    return this.string_field != null;
  }

  public void setString_fieldIsSet(boolean __value) {
    if (!__value) {
      this.string_field = null;
    }
  }

  public byte[] getBinary_field() {
    return this.binary_field;
  }

  public FieldLevelTerseStruct setBinary_field(byte[] binary_field) {
    this.binary_field = binary_field;
    return this;
  }

  public void unsetBinary_field() {
    this.binary_field = null;
  }

  // Returns true if field binary_field is set (has been assigned a value) and false otherwise
  public boolean isSetBinary_field() {
    return this.binary_field != null;
  }

  public void setBinary_fieldIsSet(boolean __value) {
    if (!__value) {
      this.binary_field = null;
    }
  }

  /**
   * 
   * @see MyEnum
   */
  public MyEnum getEnum_field() {
    return this.enum_field;
  }

  /**
   * 
   * @see MyEnum
   */
  public FieldLevelTerseStruct setEnum_field(MyEnum enum_field) {
    this.enum_field = enum_field;
    return this;
  }

  public void unsetEnum_field() {
    this.enum_field = null;
  }

  // Returns true if field enum_field is set (has been assigned a value) and false otherwise
  public boolean isSetEnum_field() {
    return this.enum_field != null;
  }

  public void setEnum_fieldIsSet(boolean __value) {
    if (!__value) {
      this.enum_field = null;
    }
  }

  public List<Short> getList_field() {
    return this.list_field;
  }

  public FieldLevelTerseStruct setList_field(List<Short> list_field) {
    this.list_field = list_field;
    return this;
  }

  public void unsetList_field() {
    this.list_field = null;
  }

  // Returns true if field list_field is set (has been assigned a value) and false otherwise
  public boolean isSetList_field() {
    return this.list_field != null;
  }

  public void setList_fieldIsSet(boolean __value) {
    if (!__value) {
      this.list_field = null;
    }
  }

  public Set<Short> getSet_field() {
    return this.set_field;
  }

  public FieldLevelTerseStruct setSet_field(Set<Short> set_field) {
    this.set_field = set_field;
    return this;
  }

  public void unsetSet_field() {
    this.set_field = null;
  }

  // Returns true if field set_field is set (has been assigned a value) and false otherwise
  public boolean isSetSet_field() {
    return this.set_field != null;
  }

  public void setSet_fieldIsSet(boolean __value) {
    if (!__value) {
      this.set_field = null;
    }
  }

  public Map<Short,Short> getMap_field() {
    return this.map_field;
  }

  public FieldLevelTerseStruct setMap_field(Map<Short,Short> map_field) {
    this.map_field = map_field;
    return this;
  }

  public void unsetMap_field() {
    this.map_field = null;
  }

  // Returns true if field map_field is set (has been assigned a value) and false otherwise
  public boolean isSetMap_field() {
    return this.map_field != null;
  }

  public void setMap_fieldIsSet(boolean __value) {
    if (!__value) {
      this.map_field = null;
    }
  }

  public MyStruct getStruct_field() {
    return this.struct_field;
  }

  public FieldLevelTerseStruct setStruct_field(MyStruct struct_field) {
    this.struct_field = struct_field;
    return this;
  }

  public void unsetStruct_field() {
    this.struct_field = null;
  }

  // Returns true if field struct_field is set (has been assigned a value) and false otherwise
  public boolean isSetStruct_field() {
    return this.struct_field != null;
  }

  public void setStruct_fieldIsSet(boolean __value) {
    if (!__value) {
      this.struct_field = null;
    }
  }

  public MyUnion getUnion_field() {
    return this.union_field;
  }

  public FieldLevelTerseStruct setUnion_field(MyUnion union_field) {
    this.union_field = union_field;
    return this;
  }

  public void unsetUnion_field() {
    this.union_field = null;
  }

  // Returns true if field union_field is set (has been assigned a value) and false otherwise
  public boolean isSetUnion_field() {
    return this.union_field != null;
  }

  public void setUnion_fieldIsSet(boolean __value) {
    if (!__value) {
      this.union_field = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case TERSE_BOOL_FIELD:
      if (__value == null) {
        unsetTerse_bool_field();
      } else {
        setTerse_bool_field((Boolean)__value);
      }
      break;

    case TERSE_BYTE_FIELD:
      if (__value == null) {
        unsetTerse_byte_field();
      } else {
        setTerse_byte_field((Byte)__value);
      }
      break;

    case TERSE_SHORT_FIELD:
      if (__value == null) {
        unsetTerse_short_field();
      } else {
        setTerse_short_field((Short)__value);
      }
      break;

    case TERSE_INT_FIELD:
      if (__value == null) {
        unsetTerse_int_field();
      } else {
        setTerse_int_field((Integer)__value);
      }
      break;

    case TERSE_LONG_FIELD:
      if (__value == null) {
        unsetTerse_long_field();
      } else {
        setTerse_long_field((Long)__value);
      }
      break;

    case TERSE_FLOAT_FIELD:
      if (__value == null) {
        unsetTerse_float_field();
      } else {
        setTerse_float_field((Float)__value);
      }
      break;

    case TERSE_DOUBLE_FIELD:
      if (__value == null) {
        unsetTerse_double_field();
      } else {
        setTerse_double_field((Double)__value);
      }
      break;

    case TERSE_STRING_FIELD:
      if (__value == null) {
        unsetTerse_string_field();
      } else {
        setTerse_string_field((String)__value);
      }
      break;

    case TERSE_BINARY_FIELD:
      if (__value == null) {
        unsetTerse_binary_field();
      } else {
        setTerse_binary_field((byte[])__value);
      }
      break;

    case TERSE_ENUM_FIELD:
      if (__value == null) {
        unsetTerse_enum_field();
      } else {
        setTerse_enum_field((MyEnum)__value);
      }
      break;

    case TERSE_LIST_FIELD:
      if (__value == null) {
        unsetTerse_list_field();
      } else {
        setTerse_list_field((List<Short>)__value);
      }
      break;

    case TERSE_SET_FIELD:
      if (__value == null) {
        unsetTerse_set_field();
      } else {
        setTerse_set_field((Set<Short>)__value);
      }
      break;

    case TERSE_MAP_FIELD:
      if (__value == null) {
        unsetTerse_map_field();
      } else {
        setTerse_map_field((Map<Short,Short>)__value);
      }
      break;

    case TERSE_STRUCT_FIELD:
      if (__value == null) {
        unsetTerse_struct_field();
      } else {
        setTerse_struct_field((MyStruct)__value);
      }
      break;

    case TERSE_UNION_FIELD:
      if (__value == null) {
        unsetTerse_union_field();
      } else {
        setTerse_union_field((MyUnion)__value);
      }
      break;

    case BOOL_FIELD:
      if (__value == null) {
        unsetBool_field();
      } else {
        setBool_field((Boolean)__value);
      }
      break;

    case BYTE_FIELD:
      if (__value == null) {
        unsetByte_field();
      } else {
        setByte_field((Byte)__value);
      }
      break;

    case SHORT_FIELD:
      if (__value == null) {
        unsetShort_field();
      } else {
        setShort_field((Short)__value);
      }
      break;

    case INT_FIELD:
      if (__value == null) {
        unsetInt_field();
      } else {
        setInt_field((Integer)__value);
      }
      break;

    case LONG_FIELD:
      if (__value == null) {
        unsetLong_field();
      } else {
        setLong_field((Long)__value);
      }
      break;

    case FLOAT_FIELD:
      if (__value == null) {
        unsetFloat_field();
      } else {
        setFloat_field((Float)__value);
      }
      break;

    case DOUBLE_FIELD:
      if (__value == null) {
        unsetDouble_field();
      } else {
        setDouble_field((Double)__value);
      }
      break;

    case STRING_FIELD:
      if (__value == null) {
        unsetString_field();
      } else {
        setString_field((String)__value);
      }
      break;

    case BINARY_FIELD:
      if (__value == null) {
        unsetBinary_field();
      } else {
        setBinary_field((byte[])__value);
      }
      break;

    case ENUM_FIELD:
      if (__value == null) {
        unsetEnum_field();
      } else {
        setEnum_field((MyEnum)__value);
      }
      break;

    case LIST_FIELD:
      if (__value == null) {
        unsetList_field();
      } else {
        setList_field((List<Short>)__value);
      }
      break;

    case SET_FIELD:
      if (__value == null) {
        unsetSet_field();
      } else {
        setSet_field((Set<Short>)__value);
      }
      break;

    case MAP_FIELD:
      if (__value == null) {
        unsetMap_field();
      } else {
        setMap_field((Map<Short,Short>)__value);
      }
      break;

    case STRUCT_FIELD:
      if (__value == null) {
        unsetStruct_field();
      } else {
        setStruct_field((MyStruct)__value);
      }
      break;

    case UNION_FIELD:
      if (__value == null) {
        unsetUnion_field();
      } else {
        setUnion_field((MyUnion)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case TERSE_BOOL_FIELD:
      return new Boolean(isTerse_bool_field());

    case TERSE_BYTE_FIELD:
      return new Byte(getTerse_byte_field());

    case TERSE_SHORT_FIELD:
      return new Short(getTerse_short_field());

    case TERSE_INT_FIELD:
      return new Integer(getTerse_int_field());

    case TERSE_LONG_FIELD:
      return new Long(getTerse_long_field());

    case TERSE_FLOAT_FIELD:
      return new Float(getTerse_float_field());

    case TERSE_DOUBLE_FIELD:
      return new Double(getTerse_double_field());

    case TERSE_STRING_FIELD:
      return getTerse_string_field();

    case TERSE_BINARY_FIELD:
      return getTerse_binary_field();

    case TERSE_ENUM_FIELD:
      return getTerse_enum_field();

    case TERSE_LIST_FIELD:
      return getTerse_list_field();

    case TERSE_SET_FIELD:
      return getTerse_set_field();

    case TERSE_MAP_FIELD:
      return getTerse_map_field();

    case TERSE_STRUCT_FIELD:
      return getTerse_struct_field();

    case TERSE_UNION_FIELD:
      return getTerse_union_field();

    case BOOL_FIELD:
      return new Boolean(isBool_field());

    case BYTE_FIELD:
      return new Byte(getByte_field());

    case SHORT_FIELD:
      return new Short(getShort_field());

    case INT_FIELD:
      return new Integer(getInt_field());

    case LONG_FIELD:
      return new Long(getLong_field());

    case FLOAT_FIELD:
      return new Float(getFloat_field());

    case DOUBLE_FIELD:
      return new Double(getDouble_field());

    case STRING_FIELD:
      return getString_field();

    case BINARY_FIELD:
      return getBinary_field();

    case ENUM_FIELD:
      return getEnum_field();

    case LIST_FIELD:
      return getList_field();

    case SET_FIELD:
      return getSet_field();

    case MAP_FIELD:
      return getMap_field();

    case STRUCT_FIELD:
      return getStruct_field();

    case UNION_FIELD:
      return getUnion_field();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof FieldLevelTerseStruct))
      return false;
    FieldLevelTerseStruct that = (FieldLevelTerseStruct)_that;

    if (!TBaseHelper.equalsNobinary(this.terse_bool_field, that.terse_bool_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.terse_byte_field, that.terse_byte_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.terse_short_field, that.terse_short_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.terse_int_field, that.terse_int_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.terse_long_field, that.terse_long_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.terse_float_field, that.terse_float_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.terse_double_field, that.terse_double_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetTerse_string_field(), that.isSetTerse_string_field(), this.terse_string_field, that.terse_string_field)) { return false; }

    if (!TBaseHelper.equalsSlow(this.isSetTerse_binary_field(), that.isSetTerse_binary_field(), this.terse_binary_field, that.terse_binary_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetTerse_enum_field(), that.isSetTerse_enum_field(), this.terse_enum_field, that.terse_enum_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetTerse_list_field(), that.isSetTerse_list_field(), this.terse_list_field, that.terse_list_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetTerse_set_field(), that.isSetTerse_set_field(), this.terse_set_field, that.terse_set_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetTerse_map_field(), that.isSetTerse_map_field(), this.terse_map_field, that.terse_map_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetTerse_struct_field(), that.isSetTerse_struct_field(), this.terse_struct_field, that.terse_struct_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetTerse_union_field(), that.isSetTerse_union_field(), this.terse_union_field, that.terse_union_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.bool_field, that.bool_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.byte_field, that.byte_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.short_field, that.short_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.int_field, that.int_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.long_field, that.long_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.float_field, that.float_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.double_field, that.double_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetString_field(), that.isSetString_field(), this.string_field, that.string_field)) { return false; }

    if (!TBaseHelper.equalsSlow(this.isSetBinary_field(), that.isSetBinary_field(), this.binary_field, that.binary_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetEnum_field(), that.isSetEnum_field(), this.enum_field, that.enum_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetList_field(), that.isSetList_field(), this.list_field, that.list_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetSet_field(), that.isSetSet_field(), this.set_field, that.set_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMap_field(), that.isSetMap_field(), this.map_field, that.map_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetStruct_field(), that.isSetStruct_field(), this.struct_field, that.struct_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetUnion_field(), that.isSetUnion_field(), this.union_field, that.union_field)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {terse_bool_field, terse_byte_field, terse_short_field, terse_int_field, terse_long_field, terse_float_field, terse_double_field, terse_string_field, terse_binary_field, terse_enum_field, terse_list_field, terse_set_field, terse_map_field, terse_struct_field, terse_union_field, bool_field, byte_field, short_field, int_field, long_field, float_field, double_field, string_field, binary_field, enum_field, list_field, set_field, map_field, struct_field, union_field});
  }

  @Override
  public int compareTo(FieldLevelTerseStruct other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTerse_bool_field()).compareTo(other.isSetTerse_bool_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(terse_bool_field, other.terse_bool_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetTerse_byte_field()).compareTo(other.isSetTerse_byte_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(terse_byte_field, other.terse_byte_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetTerse_short_field()).compareTo(other.isSetTerse_short_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(terse_short_field, other.terse_short_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetTerse_int_field()).compareTo(other.isSetTerse_int_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(terse_int_field, other.terse_int_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetTerse_long_field()).compareTo(other.isSetTerse_long_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(terse_long_field, other.terse_long_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetTerse_float_field()).compareTo(other.isSetTerse_float_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(terse_float_field, other.terse_float_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetTerse_double_field()).compareTo(other.isSetTerse_double_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(terse_double_field, other.terse_double_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetTerse_string_field()).compareTo(other.isSetTerse_string_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(terse_string_field, other.terse_string_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetTerse_binary_field()).compareTo(other.isSetTerse_binary_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(terse_binary_field, other.terse_binary_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetTerse_enum_field()).compareTo(other.isSetTerse_enum_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(terse_enum_field, other.terse_enum_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetTerse_list_field()).compareTo(other.isSetTerse_list_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(terse_list_field, other.terse_list_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetTerse_set_field()).compareTo(other.isSetTerse_set_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(terse_set_field, other.terse_set_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetTerse_map_field()).compareTo(other.isSetTerse_map_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(terse_map_field, other.terse_map_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetTerse_struct_field()).compareTo(other.isSetTerse_struct_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(terse_struct_field, other.terse_struct_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetTerse_union_field()).compareTo(other.isSetTerse_union_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(terse_union_field, other.terse_union_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetBool_field()).compareTo(other.isSetBool_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(bool_field, other.bool_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetByte_field()).compareTo(other.isSetByte_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(byte_field, other.byte_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetShort_field()).compareTo(other.isSetShort_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(short_field, other.short_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetInt_field()).compareTo(other.isSetInt_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(int_field, other.int_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetLong_field()).compareTo(other.isSetLong_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(long_field, other.long_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetFloat_field()).compareTo(other.isSetFloat_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(float_field, other.float_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetDouble_field()).compareTo(other.isSetDouble_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(double_field, other.double_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetString_field()).compareTo(other.isSetString_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(string_field, other.string_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetBinary_field()).compareTo(other.isSetBinary_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(binary_field, other.binary_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetEnum_field()).compareTo(other.isSetEnum_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(enum_field, other.enum_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetList_field()).compareTo(other.isSetList_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(list_field, other.list_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetSet_field()).compareTo(other.isSetSet_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(set_field, other.set_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetMap_field()).compareTo(other.isSetMap_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(map_field, other.map_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetStruct_field()).compareTo(other.isSetStruct_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(struct_field, other.struct_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetUnion_field()).compareTo(other.isSetUnion_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(union_field, other.union_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) {
        break;
      }
      switch (__field.id)
      {
        case TERSE_BOOL_FIELD:
          if (__field.type == TType.BOOL) {
            this.terse_bool_field = iprot.readBool();
            setTerse_bool_fieldIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case TERSE_BYTE_FIELD:
          if (__field.type == TType.BYTE) {
            this.terse_byte_field = iprot.readByte();
            setTerse_byte_fieldIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case TERSE_SHORT_FIELD:
          if (__field.type == TType.I16) {
            this.terse_short_field = iprot.readI16();
            setTerse_short_fieldIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case TERSE_INT_FIELD:
          if (__field.type == TType.I32) {
            this.terse_int_field = iprot.readI32();
            setTerse_int_fieldIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case TERSE_LONG_FIELD:
          if (__field.type == TType.I64) {
            this.terse_long_field = iprot.readI64();
            setTerse_long_fieldIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case TERSE_FLOAT_FIELD:
          if (__field.type == TType.FLOAT) {
            this.terse_float_field = iprot.readFloat();
            setTerse_float_fieldIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case TERSE_DOUBLE_FIELD:
          if (__field.type == TType.DOUBLE) {
            this.terse_double_field = iprot.readDouble();
            setTerse_double_fieldIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case TERSE_STRING_FIELD:
          if (__field.type == TType.STRING) {
            this.terse_string_field = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case TERSE_BINARY_FIELD:
          if (__field.type == TType.STRING) {
            this.terse_binary_field = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case TERSE_ENUM_FIELD:
          if (__field.type == TType.I32) {
            this.terse_enum_field = MyEnum.findByValue(iprot.readI32());
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case TERSE_LIST_FIELD:
          if (__field.type == TType.LIST) {
            {
              TList _list26 = iprot.readListBegin();
              this.terse_list_field = new ArrayList<Short>(Math.max(0, _list26.size));
              for (int _i27 = 0; 
                   (_list26.size < 0) ? iprot.peekList() : (_i27 < _list26.size); 
                   ++_i27)
              {
                short _elem28;
                _elem28 = iprot.readI16();
                this.terse_list_field.add(_elem28);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case TERSE_SET_FIELD:
          if (__field.type == TType.SET) {
            {
              TSet _set29 = iprot.readSetBegin();
              this.terse_set_field = new HashSet<Short>(Math.max(0, 2*_set29.size));
              for (int _i30 = 0; 
                   (_set29.size < 0) ? iprot.peekSet() : (_i30 < _set29.size); 
                   ++_i30)
              {
                short _elem31;
                _elem31 = iprot.readI16();
                this.terse_set_field.add(_elem31);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case TERSE_MAP_FIELD:
          if (__field.type == TType.MAP) {
            {
              TMap _map32 = iprot.readMapBegin();
              this.terse_map_field = new HashMap<Short,Short>(Math.max(0, 2*_map32.size));
              for (int _i33 = 0; 
                   (_map32.size < 0) ? iprot.peekMap() : (_i33 < _map32.size); 
                   ++_i33)
              {
                short _key34;
                short _val35;
                _key34 = iprot.readI16();
                _val35 = iprot.readI16();
                this.terse_map_field.put(_key34, _val35);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case TERSE_STRUCT_FIELD:
          if (__field.type == TType.STRUCT) {
            this.terse_struct_field = new MyStruct();
            this.terse_struct_field.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case TERSE_UNION_FIELD:
          if (__field.type == TType.STRUCT) {
            this.terse_union_field = new MyUnion();
            this.terse_union_field.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case BOOL_FIELD:
          if (__field.type == TType.BOOL) {
            this.bool_field = iprot.readBool();
            setBool_fieldIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case BYTE_FIELD:
          if (__field.type == TType.BYTE) {
            this.byte_field = iprot.readByte();
            setByte_fieldIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SHORT_FIELD:
          if (__field.type == TType.I16) {
            this.short_field = iprot.readI16();
            setShort_fieldIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case INT_FIELD:
          if (__field.type == TType.I32) {
            this.int_field = iprot.readI32();
            setInt_fieldIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LONG_FIELD:
          if (__field.type == TType.I64) {
            this.long_field = iprot.readI64();
            setLong_fieldIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case FLOAT_FIELD:
          if (__field.type == TType.FLOAT) {
            this.float_field = iprot.readFloat();
            setFloat_fieldIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case DOUBLE_FIELD:
          if (__field.type == TType.DOUBLE) {
            this.double_field = iprot.readDouble();
            setDouble_fieldIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case STRING_FIELD:
          if (__field.type == TType.STRING) {
            this.string_field = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case BINARY_FIELD:
          if (__field.type == TType.STRING) {
            this.binary_field = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ENUM_FIELD:
          if (__field.type == TType.I32) {
            this.enum_field = MyEnum.findByValue(iprot.readI32());
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LIST_FIELD:
          if (__field.type == TType.LIST) {
            {
              TList _list36 = iprot.readListBegin();
              this.list_field = new ArrayList<Short>(Math.max(0, _list36.size));
              for (int _i37 = 0; 
                   (_list36.size < 0) ? iprot.peekList() : (_i37 < _list36.size); 
                   ++_i37)
              {
                short _elem38;
                _elem38 = iprot.readI16();
                this.list_field.add(_elem38);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SET_FIELD:
          if (__field.type == TType.SET) {
            {
              TSet _set39 = iprot.readSetBegin();
              this.set_field = new HashSet<Short>(Math.max(0, 2*_set39.size));
              for (int _i40 = 0; 
                   (_set39.size < 0) ? iprot.peekSet() : (_i40 < _set39.size); 
                   ++_i40)
              {
                short _elem41;
                _elem41 = iprot.readI16();
                this.set_field.add(_elem41);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAP_FIELD:
          if (__field.type == TType.MAP) {
            {
              TMap _map42 = iprot.readMapBegin();
              this.map_field = new HashMap<Short,Short>(Math.max(0, 2*_map42.size));
              for (int _i43 = 0; 
                   (_map42.size < 0) ? iprot.peekMap() : (_i43 < _map42.size); 
                   ++_i43)
              {
                short _key44;
                short _val45;
                _key44 = iprot.readI16();
                _val45 = iprot.readI16();
                this.map_field.put(_key44, _val45);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case STRUCT_FIELD:
          if (__field.type == TType.STRUCT) {
            this.struct_field = new MyStruct();
            this.struct_field.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case UNION_FIELD:
          if (__field.type == TType.STRUCT) {
            this.union_field = new MyUnion();
            this.union_field.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(TERSE_BOOL_FIELD_FIELD_DESC);
    oprot.writeBool(this.terse_bool_field);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TERSE_BYTE_FIELD_FIELD_DESC);
    oprot.writeByte(this.terse_byte_field);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TERSE_SHORT_FIELD_FIELD_DESC);
    oprot.writeI16(this.terse_short_field);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TERSE_INT_FIELD_FIELD_DESC);
    oprot.writeI32(this.terse_int_field);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TERSE_LONG_FIELD_FIELD_DESC);
    oprot.writeI64(this.terse_long_field);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TERSE_FLOAT_FIELD_FIELD_DESC);
    oprot.writeFloat(this.terse_float_field);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TERSE_DOUBLE_FIELD_FIELD_DESC);
    oprot.writeDouble(this.terse_double_field);
    oprot.writeFieldEnd();
    if (this.terse_string_field != null) {
      oprot.writeFieldBegin(TERSE_STRING_FIELD_FIELD_DESC);
      oprot.writeString(this.terse_string_field);
      oprot.writeFieldEnd();
    }
    if (this.terse_binary_field != null) {
      oprot.writeFieldBegin(TERSE_BINARY_FIELD_FIELD_DESC);
      oprot.writeBinary(this.terse_binary_field);
      oprot.writeFieldEnd();
    }
    if (this.terse_enum_field != null) {
      oprot.writeFieldBegin(TERSE_ENUM_FIELD_FIELD_DESC);
      oprot.writeI32(this.terse_enum_field == null ? 0 : this.terse_enum_field.getValue());
      oprot.writeFieldEnd();
    }
    if (this.terse_list_field != null) {
      oprot.writeFieldBegin(TERSE_LIST_FIELD_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I16, this.terse_list_field.size()));
        for (short _iter46 : this.terse_list_field)        {
          oprot.writeI16(_iter46);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.terse_set_field != null) {
      oprot.writeFieldBegin(TERSE_SET_FIELD_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.I16, this.terse_set_field.size()));
        for (short _iter47 : this.terse_set_field)        {
          oprot.writeI16(_iter47);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.terse_map_field != null) {
      oprot.writeFieldBegin(TERSE_MAP_FIELD_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I16, TType.I16, this.terse_map_field.size()));
        for (Map.Entry<Short, Short> _iter48 : this.terse_map_field.entrySet())        {
          oprot.writeI16(_iter48.getKey());
          oprot.writeI16(_iter48.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.terse_struct_field != null) {
      oprot.writeFieldBegin(TERSE_STRUCT_FIELD_FIELD_DESC);
      this.terse_struct_field.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(BOOL_FIELD_FIELD_DESC);
    oprot.writeBool(this.bool_field);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(BYTE_FIELD_FIELD_DESC);
    oprot.writeByte(this.byte_field);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SHORT_FIELD_FIELD_DESC);
    oprot.writeI16(this.short_field);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(INT_FIELD_FIELD_DESC);
    oprot.writeI32(this.int_field);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(LONG_FIELD_FIELD_DESC);
    oprot.writeI64(this.long_field);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(FLOAT_FIELD_FIELD_DESC);
    oprot.writeFloat(this.float_field);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(DOUBLE_FIELD_FIELD_DESC);
    oprot.writeDouble(this.double_field);
    oprot.writeFieldEnd();
    if (this.string_field != null) {
      oprot.writeFieldBegin(STRING_FIELD_FIELD_DESC);
      oprot.writeString(this.string_field);
      oprot.writeFieldEnd();
    }
    if (this.binary_field != null) {
      oprot.writeFieldBegin(BINARY_FIELD_FIELD_DESC);
      oprot.writeBinary(this.binary_field);
      oprot.writeFieldEnd();
    }
    if (this.enum_field != null) {
      oprot.writeFieldBegin(ENUM_FIELD_FIELD_DESC);
      oprot.writeI32(this.enum_field == null ? 0 : this.enum_field.getValue());
      oprot.writeFieldEnd();
    }
    if (this.list_field != null) {
      oprot.writeFieldBegin(LIST_FIELD_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I16, this.list_field.size()));
        for (short _iter49 : this.list_field)        {
          oprot.writeI16(_iter49);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.set_field != null) {
      oprot.writeFieldBegin(SET_FIELD_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.I16, this.set_field.size()));
        for (short _iter50 : this.set_field)        {
          oprot.writeI16(_iter50);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.map_field != null) {
      oprot.writeFieldBegin(MAP_FIELD_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I16, TType.I16, this.map_field.size()));
        for (Map.Entry<Short, Short> _iter51 : this.map_field.entrySet())        {
          oprot.writeI16(_iter51.getKey());
          oprot.writeI16(_iter51.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.struct_field != null) {
      oprot.writeFieldBegin(STRUCT_FIELD_FIELD_DESC);
      this.struct_field.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.terse_union_field != null) {
      oprot.writeFieldBegin(TERSE_UNION_FIELD_FIELD_DESC);
      this.terse_union_field.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.union_field != null) {
      oprot.writeFieldBegin(UNION_FIELD_FIELD_DESC);
      this.union_field.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("FieldLevelTerseStruct");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("terse_bool_field");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.isTerse_bool_field(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("terse_byte_field");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getTerse_byte_field(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("terse_short_field");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getTerse_short_field(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("terse_int_field");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getTerse_int_field(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("terse_long_field");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getTerse_long_field(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("terse_float_field");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getTerse_float_field(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("terse_double_field");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getTerse_double_field(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("terse_string_field");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getTerse_string_field() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getTerse_string_field(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("terse_binary_field");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getTerse_binary_field() == null) {
      sb.append("null");
    } else {
        int __terse_binary_field_size = Math.min(this.getTerse_binary_field().length, 128);
        for (int i = 0; i < __terse_binary_field_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this.getTerse_binary_field()[i]).length() > 1 ? Integer.toHexString(this.getTerse_binary_field()[i]).substring(Integer.toHexString(this.getTerse_binary_field()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getTerse_binary_field()[i]).toUpperCase());
        }
        if (this.getTerse_binary_field().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("terse_enum_field");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getTerse_enum_field() == null) {
      sb.append("null");
    } else {
      String terse_enum_field_name = this.getTerse_enum_field() == null ? "null" : this.getTerse_enum_field().name();
      if (terse_enum_field_name != null) {
        sb.append(terse_enum_field_name);
        sb.append(" (");
      }
      sb.append(this.getTerse_enum_field());
      if (terse_enum_field_name != null) {
        sb.append(")");
      }
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("terse_list_field");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getTerse_list_field() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getTerse_list_field(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("terse_set_field");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getTerse_set_field() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getTerse_set_field(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("terse_map_field");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getTerse_map_field() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getTerse_map_field(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("terse_struct_field");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getTerse_struct_field() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getTerse_struct_field(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("terse_union_field");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getTerse_union_field() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getTerse_union_field(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("bool_field");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.isBool_field(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("byte_field");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getByte_field(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("short_field");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getShort_field(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("int_field");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getInt_field(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("long_field");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getLong_field(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("float_field");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getFloat_field(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("double_field");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getDouble_field(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("string_field");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getString_field() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getString_field(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("binary_field");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getBinary_field() == null) {
      sb.append("null");
    } else {
        int __binary_field_size = Math.min(this.getBinary_field().length, 128);
        for (int i = 0; i < __binary_field_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this.getBinary_field()[i]).length() > 1 ? Integer.toHexString(this.getBinary_field()[i]).substring(Integer.toHexString(this.getBinary_field()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getBinary_field()[i]).toUpperCase());
        }
        if (this.getBinary_field().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("enum_field");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getEnum_field() == null) {
      sb.append("null");
    } else {
      String enum_field_name = this.getEnum_field() == null ? "null" : this.getEnum_field().name();
      if (enum_field_name != null) {
        sb.append(enum_field_name);
        sb.append(" (");
      }
      sb.append(this.getEnum_field());
      if (enum_field_name != null) {
        sb.append(")");
      }
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("list_field");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getList_field() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getList_field(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("set_field");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getSet_field() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getSet_field(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("map_field");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMap_field() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMap_field(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("struct_field");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getStruct_field() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getStruct_field(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("union_field");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getUnion_field() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getUnion_field(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

