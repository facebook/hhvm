/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/py3/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>

namespace apache::thrift {
namespace ident {
struct err_code;
struct optional_blob;
struct is_on;
struct tiny_int;
struct small_int;
struct nice_sized_int;
struct big_int;
struct real;
struct smaller_real;
struct something;
struct hidden_field;
struct opt_default_int;
struct opt_default_str;
struct opt_default_enum;
struct field1;
struct field2;
struct field3;
struct best;
struct test;
struct structOne;
struct structTwo;
struct an_integer;
struct name;
struct an_enum;
struct some_bytes;
struct from;
struct cdef;
struct bytes_with_cpp_type;
struct iobuf_val;
struct u;
struct bool_field;
struct integer_field;
struct double_field;
struct string_field;
struct binary_field;
struct list_field;
struct set_field;
struct map_field;
struct struct_field;
struct bool_field;
struct integer_field;
struct double_field;
struct string_field;
struct binary_field;
struct list_field;
struct set_field;
struct map_field;
struct struct_field;
struct bool_field;
struct integer_field;
struct double_field;
struct string_field;
struct binary_field;
struct list_field;
struct set_field;
struct map_field;
struct struct_field;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_err_code
#define APACHE_THRIFT_ACCESSOR_err_code
APACHE_THRIFT_DEFINE_ACCESSOR(err_code);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optional_blob
#define APACHE_THRIFT_ACCESSOR_optional_blob
APACHE_THRIFT_DEFINE_ACCESSOR(optional_blob);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_is_on
#define APACHE_THRIFT_ACCESSOR_is_on
APACHE_THRIFT_DEFINE_ACCESSOR(is_on);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_tiny_int
#define APACHE_THRIFT_ACCESSOR_tiny_int
APACHE_THRIFT_DEFINE_ACCESSOR(tiny_int);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_small_int
#define APACHE_THRIFT_ACCESSOR_small_int
APACHE_THRIFT_DEFINE_ACCESSOR(small_int);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_nice_sized_int
#define APACHE_THRIFT_ACCESSOR_nice_sized_int
APACHE_THRIFT_DEFINE_ACCESSOR(nice_sized_int);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_big_int
#define APACHE_THRIFT_ACCESSOR_big_int
APACHE_THRIFT_DEFINE_ACCESSOR(big_int);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_real
#define APACHE_THRIFT_ACCESSOR_real
APACHE_THRIFT_DEFINE_ACCESSOR(real);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_smaller_real
#define APACHE_THRIFT_ACCESSOR_smaller_real
APACHE_THRIFT_DEFINE_ACCESSOR(smaller_real);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_something
#define APACHE_THRIFT_ACCESSOR_something
APACHE_THRIFT_DEFINE_ACCESSOR(something);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_hidden_field
#define APACHE_THRIFT_ACCESSOR_hidden_field
APACHE_THRIFT_DEFINE_ACCESSOR(hidden_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_default_int
#define APACHE_THRIFT_ACCESSOR_opt_default_int
APACHE_THRIFT_DEFINE_ACCESSOR(opt_default_int);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_default_str
#define APACHE_THRIFT_ACCESSOR_opt_default_str
APACHE_THRIFT_DEFINE_ACCESSOR(opt_default_str);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_default_enum
#define APACHE_THRIFT_ACCESSOR_opt_default_enum
APACHE_THRIFT_DEFINE_ACCESSOR(opt_default_enum);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field1
#define APACHE_THRIFT_ACCESSOR_field1
APACHE_THRIFT_DEFINE_ACCESSOR(field1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field2
#define APACHE_THRIFT_ACCESSOR_field2
APACHE_THRIFT_DEFINE_ACCESSOR(field2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field3
#define APACHE_THRIFT_ACCESSOR_field3
APACHE_THRIFT_DEFINE_ACCESSOR(field3);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_best
#define APACHE_THRIFT_ACCESSOR_best
APACHE_THRIFT_DEFINE_ACCESSOR(best);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_test
#define APACHE_THRIFT_ACCESSOR_test
APACHE_THRIFT_DEFINE_ACCESSOR(test);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_structOne
#define APACHE_THRIFT_ACCESSOR_structOne
APACHE_THRIFT_DEFINE_ACCESSOR(structOne);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_structTwo
#define APACHE_THRIFT_ACCESSOR_structTwo
APACHE_THRIFT_DEFINE_ACCESSOR(structTwo);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_an_integer
#define APACHE_THRIFT_ACCESSOR_an_integer
APACHE_THRIFT_DEFINE_ACCESSOR(an_integer);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_name
#define APACHE_THRIFT_ACCESSOR_name
APACHE_THRIFT_DEFINE_ACCESSOR(name);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_an_enum
#define APACHE_THRIFT_ACCESSOR_an_enum
APACHE_THRIFT_DEFINE_ACCESSOR(an_enum);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_some_bytes
#define APACHE_THRIFT_ACCESSOR_some_bytes
APACHE_THRIFT_DEFINE_ACCESSOR(some_bytes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_from
#define APACHE_THRIFT_ACCESSOR_from
APACHE_THRIFT_DEFINE_ACCESSOR(from);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_cdef
#define APACHE_THRIFT_ACCESSOR_cdef
APACHE_THRIFT_DEFINE_ACCESSOR(cdef);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_bytes_with_cpp_type
#define APACHE_THRIFT_ACCESSOR_bytes_with_cpp_type
APACHE_THRIFT_DEFINE_ACCESSOR(bytes_with_cpp_type);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_iobuf_val
#define APACHE_THRIFT_ACCESSOR_iobuf_val
APACHE_THRIFT_DEFINE_ACCESSOR(iobuf_val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_u
#define APACHE_THRIFT_ACCESSOR_u
APACHE_THRIFT_DEFINE_ACCESSOR(u);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_bool_field
#define APACHE_THRIFT_ACCESSOR_bool_field
APACHE_THRIFT_DEFINE_ACCESSOR(bool_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_integer_field
#define APACHE_THRIFT_ACCESSOR_integer_field
APACHE_THRIFT_DEFINE_ACCESSOR(integer_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_double_field
#define APACHE_THRIFT_ACCESSOR_double_field
APACHE_THRIFT_DEFINE_ACCESSOR(double_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_string_field
#define APACHE_THRIFT_ACCESSOR_string_field
APACHE_THRIFT_DEFINE_ACCESSOR(string_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binary_field
#define APACHE_THRIFT_ACCESSOR_binary_field
APACHE_THRIFT_DEFINE_ACCESSOR(binary_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_field
#define APACHE_THRIFT_ACCESSOR_list_field
APACHE_THRIFT_DEFINE_ACCESSOR(list_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_set_field
#define APACHE_THRIFT_ACCESSOR_set_field
APACHE_THRIFT_DEFINE_ACCESSOR(set_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_map_field
#define APACHE_THRIFT_ACCESSOR_map_field
APACHE_THRIFT_DEFINE_ACCESSOR(map_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_struct_field
#define APACHE_THRIFT_ACCESSOR_struct_field
APACHE_THRIFT_DEFINE_ACCESSOR(struct_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_bool_field
#define APACHE_THRIFT_ACCESSOR_bool_field
APACHE_THRIFT_DEFINE_ACCESSOR(bool_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_integer_field
#define APACHE_THRIFT_ACCESSOR_integer_field
APACHE_THRIFT_DEFINE_ACCESSOR(integer_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_double_field
#define APACHE_THRIFT_ACCESSOR_double_field
APACHE_THRIFT_DEFINE_ACCESSOR(double_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_string_field
#define APACHE_THRIFT_ACCESSOR_string_field
APACHE_THRIFT_DEFINE_ACCESSOR(string_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binary_field
#define APACHE_THRIFT_ACCESSOR_binary_field
APACHE_THRIFT_DEFINE_ACCESSOR(binary_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_field
#define APACHE_THRIFT_ACCESSOR_list_field
APACHE_THRIFT_DEFINE_ACCESSOR(list_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_set_field
#define APACHE_THRIFT_ACCESSOR_set_field
APACHE_THRIFT_DEFINE_ACCESSOR(set_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_map_field
#define APACHE_THRIFT_ACCESSOR_map_field
APACHE_THRIFT_DEFINE_ACCESSOR(map_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_struct_field
#define APACHE_THRIFT_ACCESSOR_struct_field
APACHE_THRIFT_DEFINE_ACCESSOR(struct_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_bool_field
#define APACHE_THRIFT_ACCESSOR_bool_field
APACHE_THRIFT_DEFINE_ACCESSOR(bool_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_integer_field
#define APACHE_THRIFT_ACCESSOR_integer_field
APACHE_THRIFT_DEFINE_ACCESSOR(integer_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_double_field
#define APACHE_THRIFT_ACCESSOR_double_field
APACHE_THRIFT_DEFINE_ACCESSOR(double_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_string_field
#define APACHE_THRIFT_ACCESSOR_string_field
APACHE_THRIFT_DEFINE_ACCESSOR(string_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binary_field
#define APACHE_THRIFT_ACCESSOR_binary_field
APACHE_THRIFT_DEFINE_ACCESSOR(binary_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_field
#define APACHE_THRIFT_ACCESSOR_list_field
APACHE_THRIFT_DEFINE_ACCESSOR(list_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_set_field
#define APACHE_THRIFT_ACCESSOR_set_field
APACHE_THRIFT_DEFINE_ACCESSOR(set_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_map_field
#define APACHE_THRIFT_ACCESSOR_map_field
APACHE_THRIFT_DEFINE_ACCESSOR(map_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_struct_field
#define APACHE_THRIFT_ACCESSOR_struct_field
APACHE_THRIFT_DEFINE_ACCESSOR(struct_field);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
namespace py3::simple {

/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "AnEnum", "kind": "enum" } */
enum class AnEnum {
  None = 0,
  ONE = 1,
  TWO = 2,
  THREE = 3,
  FOUR = 4,
};

/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "AnEnumRenamed", "kind": "enum" } */
enum class AnEnumRenamed {
  name = 0,
  value = 1,
  normal = 2,
};

/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "Flags", "kind": "enum" } */
enum class Flags {
  flag_A = 1,
  flag_B = 2,
  flag_C = 4,
  flag_D = 8,
};

} // namespace py3::simple

template<> struct std::hash<::py3::simple::AnEnum> :
  ::apache::thrift::detail::enum_hash<::py3::simple::AnEnum> {};
template<> struct std::hash<::py3::simple::AnEnumRenamed> :
  ::apache::thrift::detail::enum_hash<::py3::simple::AnEnumRenamed> {};
template<> struct std::hash<::py3::simple::Flags> :
  ::apache::thrift::detail::enum_hash<::py3::simple::Flags> {};

namespace apache::thrift {

template <> struct TEnumTraits<::py3::simple::AnEnum> {
  using type = ::py3::simple::AnEnum;

  static constexpr std::size_t const size = 5;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "AnEnum";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "module";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::None; }
  static constexpr type max() { return type::FOUR; }

  static const std::vector<std::any>& annotations() noexcept;
};

template <> struct TEnumTraits<::py3::simple::AnEnumRenamed> {
  using type = ::py3::simple::AnEnumRenamed;

  static constexpr std::size_t const size = 3;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "AnEnumRenamed";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "module";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::name; }
  static constexpr type max() { return type::normal; }

  static const std::vector<std::any>& annotations() noexcept;
};

template <> struct TEnumTraits<::py3::simple::Flags> {
  using type = ::py3::simple::Flags;

  static constexpr std::size_t const size = 4;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "Flags";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "module";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::flag_A; }
  static constexpr type max() { return type::flag_D; }

  static const std::vector<std::any>& annotations() noexcept;
};

} // namespace apache::thrift
// END declare_enums
// BEGIN forward_declare
namespace py3::simple {
class SimpleException;
class OptionalRefStruct;
class SimpleStruct;
class HiddenTypeFieldsStruct;
namespace detail {
class AdaptedUnion;
} // namespace detail
class HiddenException;
class ComplexStruct;
class BinaryUnion;
class BinaryUnionStruct;
class CustomFields;
class CustomTypedefFields;
class AdaptedTypedefFields;
} // namespace py3::simple
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace py3::simple {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "IOBufPtr", "kind": "typedef" } */
using IOBufPtr = std::unique_ptr<folly::IOBuf>;
/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "IOBuf", "kind": "typedef" } */
using IOBuf = folly::IOBuf;

/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "SimpleStruct", "kind": "struct" } */
class SimpleStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 12;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,9,8,10,11,12};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::is_on,
    ::apache::thrift::ident::tiny_int,
    ::apache::thrift::ident::small_int,
    ::apache::thrift::ident::nice_sized_int,
    ::apache::thrift::ident::big_int,
    ::apache::thrift::ident::real,
    ::apache::thrift::ident::smaller_real,
    ::apache::thrift::ident::something,
    ::apache::thrift::ident::hidden_field,
    ::apache::thrift::ident::opt_default_int,
    ::apache::thrift::ident::opt_default_str,
    ::apache::thrift::ident::opt_default_enum
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::byte_t,
    ::apache::thrift::type::i16_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::float_t,
    ::apache::thrift::type::cpp_type<::std::unordered_map<::std::int32_t, ::std::int32_t>, ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::i16_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::enum_t<::py3::simple::AnEnum>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = SimpleStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  SimpleStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  SimpleStruct(apache::thrift::FragileConstructor, bool is_on__arg, ::std::int8_t tiny_int__arg, ::std::int16_t small_int__arg, ::std::int32_t nice_sized_int__arg, ::std::int64_t big_int__arg, double real__arg, float smaller_real__arg, ::std::unordered_map<::std::int32_t, ::std::int32_t> something__arg, ::std::int16_t hidden_field__arg, ::std::int32_t opt_default_int__arg, ::std::string opt_default_str__arg, ::py3::simple::AnEnum opt_default_enum__arg);

  SimpleStruct(SimpleStruct&&) noexcept;

  SimpleStruct(const SimpleStruct& src);


  SimpleStruct& operator=(SimpleStruct&&) noexcept;
  SimpleStruct& operator=(const SimpleStruct& src);

  ~SimpleStruct();

 private:
  bool __fbthrift_field_is_on;
 private:
  ::std::int8_t __fbthrift_field_tiny_int;
 private:
  ::std::int16_t __fbthrift_field_small_int;
 private:
  ::std::int32_t __fbthrift_field_nice_sized_int;
 private:
  ::std::int64_t __fbthrift_field_big_int;
 private:
  double __fbthrift_field_real;
 private:
  float __fbthrift_field_smaller_real;
 private:
  ::std::unordered_map<::std::int32_t, ::std::int32_t> __fbthrift_field_something;
 private:
  ::std::int16_t __fbthrift_field_hidden_field;
 private:
  ::std::int32_t __fbthrift_field_opt_default_int;
 private:
  ::std::string __fbthrift_field_opt_default_str;
 private:
  ::py3::simple::AnEnum __fbthrift_field_opt_default_enum;
 private:
  apache::thrift::detail::isset_bitset<12, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const SimpleStruct&) const;
  bool operator<(const SimpleStruct&) const;

  /** Glean { "field": "is_on" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> is_on_ref() const& {
    return {this->__fbthrift_field_is_on, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "is_on" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> is_on_ref() & {
    return {this->__fbthrift_field_is_on, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "is_on" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> is_on_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_is_on), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "is_on" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> is_on() const& {
    return {this->__fbthrift_field_is_on, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "is_on" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> is_on() & {
    return {this->__fbthrift_field_is_on, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "is_on" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> is_on() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_is_on), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "tiny_int" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> tiny_int_ref() const& {
    return {this->__fbthrift_field_tiny_int, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "tiny_int" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> tiny_int_ref() & {
    return {this->__fbthrift_field_tiny_int, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "tiny_int" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> tiny_int_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_tiny_int), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "tiny_int" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> tiny_int() const& {
    return {this->__fbthrift_field_tiny_int, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "tiny_int" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> tiny_int() & {
    return {this->__fbthrift_field_tiny_int, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "tiny_int" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> tiny_int() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_tiny_int), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "small_int" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> small_int_ref() const& {
    return {this->__fbthrift_field_small_int, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "small_int" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> small_int_ref() & {
    return {this->__fbthrift_field_small_int, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "small_int" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> small_int_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_small_int), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "small_int" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> small_int() const& {
    return {this->__fbthrift_field_small_int, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "small_int" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> small_int() & {
    return {this->__fbthrift_field_small_int, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "small_int" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> small_int() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_small_int), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "nice_sized_int" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> nice_sized_int_ref() const& {
    return {this->__fbthrift_field_nice_sized_int, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "nice_sized_int" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> nice_sized_int_ref() & {
    return {this->__fbthrift_field_nice_sized_int, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "nice_sized_int" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> nice_sized_int_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_nice_sized_int), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "nice_sized_int" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> nice_sized_int() const& {
    return {this->__fbthrift_field_nice_sized_int, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "nice_sized_int" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> nice_sized_int() & {
    return {this->__fbthrift_field_nice_sized_int, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "nice_sized_int" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> nice_sized_int() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_nice_sized_int), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "big_int" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> big_int_ref() const& {
    return {this->__fbthrift_field_big_int, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "big_int" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> big_int_ref() & {
    return {this->__fbthrift_field_big_int, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "big_int" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> big_int_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_big_int), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "big_int" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> big_int() const& {
    return {this->__fbthrift_field_big_int, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "big_int" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> big_int() & {
    return {this->__fbthrift_field_big_int, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "big_int" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> big_int() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_big_int), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "real" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> real_ref() const& {
    return {this->__fbthrift_field_real, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "real" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> real_ref() & {
    return {this->__fbthrift_field_real, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "real" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> real_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_real), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "real" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> real() const& {
    return {this->__fbthrift_field_real, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "real" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> real() & {
    return {this->__fbthrift_field_real, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "real" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> real() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_real), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "smaller_real" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> smaller_real_ref() const& {
    return {this->__fbthrift_field_smaller_real, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "smaller_real" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> smaller_real_ref() & {
    return {this->__fbthrift_field_smaller_real, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "smaller_real" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> smaller_real_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_smaller_real), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "smaller_real" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> smaller_real() const& {
    return {this->__fbthrift_field_smaller_real, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "smaller_real" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> smaller_real() & {
    return {this->__fbthrift_field_smaller_real, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "smaller_real" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> smaller_real() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_smaller_real), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "something" } */
  template <typename..., typename fbthrift_T = ::std::unordered_map<::std::int32_t, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> something_ref() const& {
    return {this->__fbthrift_field_something, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "something" } */
  template <typename..., typename fbthrift_T = ::std::unordered_map<::std::int32_t, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> something_ref() & {
    return {this->__fbthrift_field_something, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "something" } */
  template <typename..., typename fbthrift_T = ::std::unordered_map<::std::int32_t, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> something_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_something), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "something" } */
  template <typename..., typename fbthrift_T = ::std::unordered_map<::std::int32_t, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> something() const& {
    return {this->__fbthrift_field_something, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "something" } */
  template <typename..., typename fbthrift_T = ::std::unordered_map<::std::int32_t, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> something() & {
    return {this->__fbthrift_field_something, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "something" } */
  template <typename..., typename fbthrift_T = ::std::unordered_map<::std::int32_t, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> something() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_something), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "hidden_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> hidden_field_ref() const& {
    return {this->__fbthrift_field_hidden_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "hidden_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> hidden_field_ref() & {
    return {this->__fbthrift_field_hidden_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "hidden_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> hidden_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_hidden_field), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "hidden_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> hidden_field() const& {
    return {this->__fbthrift_field_hidden_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "hidden_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> hidden_field() & {
    return {this->__fbthrift_field_hidden_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "hidden_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> hidden_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_hidden_field), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "opt_default_int" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> opt_default_int_ref() const& {
    return {this->__fbthrift_field_opt_default_int, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "opt_default_int" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> opt_default_int_ref() & {
    return {this->__fbthrift_field_opt_default_int, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "opt_default_int" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> opt_default_int_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_opt_default_int), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "opt_default_int" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> opt_default_int() const& {
    return {this->__fbthrift_field_opt_default_int, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "opt_default_int" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> opt_default_int() & {
    return {this->__fbthrift_field_opt_default_int, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "opt_default_int" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> opt_default_int() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_opt_default_int), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "opt_default_str" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> opt_default_str_ref() const& {
    return {this->__fbthrift_field_opt_default_str, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "opt_default_str" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> opt_default_str_ref() & {
    return {this->__fbthrift_field_opt_default_str, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "opt_default_str" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> opt_default_str_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_opt_default_str), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "opt_default_str" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> opt_default_str() const& {
    return {this->__fbthrift_field_opt_default_str, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "opt_default_str" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> opt_default_str() & {
    return {this->__fbthrift_field_opt_default_str, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "opt_default_str" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> opt_default_str() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_opt_default_str), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "opt_default_enum" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AnEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> opt_default_enum_ref() const& {
    return {this->__fbthrift_field_opt_default_enum, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "opt_default_enum" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AnEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> opt_default_enum_ref() & {
    return {this->__fbthrift_field_opt_default_enum, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "opt_default_enum" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AnEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> opt_default_enum_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_opt_default_enum), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "opt_default_enum" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AnEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> opt_default_enum() const& {
    return {this->__fbthrift_field_opt_default_enum, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "opt_default_enum" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AnEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> opt_default_enum() & {
    return {this->__fbthrift_field_opt_default_enum, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "opt_default_enum" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AnEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> opt_default_enum() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_opt_default_enum), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "is_on" } */
  [[deprecated("Use `FOO.is_on().value()` instead of `FOO.get_is_on()`")]]
  bool get_is_on() const;

  /** Glean { "field": "is_on" } */
  [[deprecated("Use `FOO.is_on() = BAR` instead of `FOO.set_is_on(BAR)`")]]
  bool& set_is_on(bool is_on_);

  /** Glean { "field": "tiny_int" } */
  [[deprecated("Use `FOO.tiny_int().value()` instead of `FOO.get_tiny_int()`")]]
  ::std::int8_t get_tiny_int() const;

  /** Glean { "field": "tiny_int" } */
  [[deprecated("Use `FOO.tiny_int() = BAR` instead of `FOO.set_tiny_int(BAR)`")]]
  ::std::int8_t& set_tiny_int(::std::int8_t tiny_int_);

  /** Glean { "field": "small_int" } */
  [[deprecated("Use `FOO.small_int().value()` instead of `FOO.get_small_int()`")]]
  ::std::int16_t get_small_int() const;

  /** Glean { "field": "small_int" } */
  [[deprecated("Use `FOO.small_int() = BAR` instead of `FOO.set_small_int(BAR)`")]]
  ::std::int16_t& set_small_int(::std::int16_t small_int_);

  /** Glean { "field": "nice_sized_int" } */
  [[deprecated("Use `FOO.nice_sized_int().value()` instead of `FOO.get_nice_sized_int()`")]]
  ::std::int32_t get_nice_sized_int() const;

  /** Glean { "field": "nice_sized_int" } */
  [[deprecated("Use `FOO.nice_sized_int() = BAR` instead of `FOO.set_nice_sized_int(BAR)`")]]
  ::std::int32_t& set_nice_sized_int(::std::int32_t nice_sized_int_);

  /** Glean { "field": "big_int" } */
  [[deprecated("Use `FOO.big_int().value()` instead of `FOO.get_big_int()`")]]
  ::std::int64_t get_big_int() const;

  /** Glean { "field": "big_int" } */
  [[deprecated("Use `FOO.big_int() = BAR` instead of `FOO.set_big_int(BAR)`")]]
  ::std::int64_t& set_big_int(::std::int64_t big_int_);

  /** Glean { "field": "real" } */
  [[deprecated("Use `FOO.real().value()` instead of `FOO.get_real()`")]]
  double get_real() const;

  /** Glean { "field": "real" } */
  [[deprecated("Use `FOO.real() = BAR` instead of `FOO.set_real(BAR)`")]]
  double& set_real(double real_);

  /** Glean { "field": "smaller_real" } */
  [[deprecated("Use `FOO.smaller_real().value()` instead of `FOO.get_smaller_real()`")]]
  float get_smaller_real() const;

  /** Glean { "field": "smaller_real" } */
  [[deprecated("Use `FOO.smaller_real() = BAR` instead of `FOO.set_smaller_real(BAR)`")]]
  float& set_smaller_real(float smaller_real_);

  /** Glean { "field": "something" } */
  [[deprecated("Use `FOO.something().value()` instead of `FOO.get_something()`")]]
  const ::std::unordered_map<::std::int32_t, ::std::int32_t>& get_something() const&;

  /** Glean { "field": "something" } */
  [[deprecated("Use `FOO.something().value()` instead of `FOO.get_something()`")]]
  ::std::unordered_map<::std::int32_t, ::std::int32_t> get_something() &&;

  /** Glean { "field": "something" } */
  template <typename T_SimpleStruct_something_struct_setter = ::std::unordered_map<::std::int32_t, ::std::int32_t>>
  [[deprecated("Use `FOO.something() = BAR` instead of `FOO.set_something(BAR)`")]]
  ::std::unordered_map<::std::int32_t, ::std::int32_t>& set_something(T_SimpleStruct_something_struct_setter&& something_) {
    something_ref() = std::forward<T_SimpleStruct_something_struct_setter>(something_);
    return __fbthrift_field_something;
  }

  /** Glean { "field": "hidden_field" } */
  [[deprecated("Use `FOO.hidden_field().value()` instead of `FOO.get_hidden_field()`")]]
  ::std::int16_t get_hidden_field() const;

  /** Glean { "field": "hidden_field" } */
  [[deprecated("Use `FOO.hidden_field() = BAR` instead of `FOO.set_hidden_field(BAR)`")]]
  ::std::int16_t& set_hidden_field(::std::int16_t hidden_field_);

  /** Glean { "field": "opt_default_int" } */
  [[deprecated("Use `FOO.opt_default_int().value()` instead of `FOO.get_opt_default_int()`")]]
  const ::std::int32_t* get_opt_default_int() const&;

  /** Glean { "field": "opt_default_int" } */
  [[deprecated("Use `FOO.opt_default_int().value()` instead of `FOO.get_opt_default_int()`")]]
  ::std::int32_t* get_opt_default_int() &;

  ::std::int32_t* get_opt_default_int() && = delete;

  /** Glean { "field": "opt_default_int" } */
  [[deprecated("Use `FOO.opt_default_int() = BAR` instead of `FOO.set_opt_default_int(BAR)`")]]
  ::std::int32_t& set_opt_default_int(::std::int32_t opt_default_int_);

  /** Glean { "field": "opt_default_str" } */
  [[deprecated("Use `FOO.opt_default_str().value()` instead of `FOO.get_opt_default_str()`")]]
  const ::std::string* get_opt_default_str() const&;

  /** Glean { "field": "opt_default_str" } */
  [[deprecated("Use `FOO.opt_default_str().value()` instead of `FOO.get_opt_default_str()`")]]
  ::std::string* get_opt_default_str() &;

  ::std::string* get_opt_default_str() && = delete;

  /** Glean { "field": "opt_default_str" } */
  template <typename T_SimpleStruct_opt_default_str_struct_setter = ::std::string>
  [[deprecated("Use `FOO.opt_default_str() = BAR` instead of `FOO.set_opt_default_str(BAR)`")]]
  ::std::string& set_opt_default_str(T_SimpleStruct_opt_default_str_struct_setter&& opt_default_str_) {
    opt_default_str_ref() = std::forward<T_SimpleStruct_opt_default_str_struct_setter>(opt_default_str_);
    return __fbthrift_field_opt_default_str;
  }

  /** Glean { "field": "opt_default_enum" } */
  [[deprecated("Use `FOO.opt_default_enum().value()` instead of `FOO.get_opt_default_enum()`")]]
  const ::py3::simple::AnEnum* get_opt_default_enum() const&;

  /** Glean { "field": "opt_default_enum" } */
  [[deprecated("Use `FOO.opt_default_enum().value()` instead of `FOO.get_opt_default_enum()`")]]
  ::py3::simple::AnEnum* get_opt_default_enum() &;

  ::py3::simple::AnEnum* get_opt_default_enum() && = delete;

  /** Glean { "field": "opt_default_enum" } */
  [[deprecated("Use `FOO.opt_default_enum() = BAR` instead of `FOO.set_opt_default_enum(BAR)`")]]
  ::py3::simple::AnEnum& set_opt_default_enum(::py3::simple::AnEnum opt_default_enum_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<SimpleStruct>;
  friend void swap(SimpleStruct& a, SimpleStruct& b);
};

template <class Protocol_>
unsigned long SimpleStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "AdaptedTypeDef", "kind": "typedef" } */
using AdaptedTypeDef = ::apache::thrift::adapt_detail::adapted_t<Adapter, ::py3::simple::SimpleStruct>;
/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "HiddenTypeDef", "kind": "typedef" } */
using HiddenTypeDef = ::py3::simple::SimpleStruct;

namespace detail {
/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "AdaptedUnion", "kind": "union" } */
class AdaptedUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::best
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i16_t
  >;
  void __fbthrift_clear();
  void __fbthrift_destruct();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = AdaptedUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:
  enum class Type : int {
    __EMPTY__ = 0,
    best = 1,
  } ;

  AdaptedUnion()
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {}

  AdaptedUnion(AdaptedUnion&& rhs) noexcept
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::best:
      {
        set_best(std::move(rhs.value_.best));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  AdaptedUnion(const AdaptedUnion& rhs);

  AdaptedUnion& operator=(AdaptedUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        __fbthrift_clear();
        return *this;
      }
      case Type::best:
      {
        set_best(std::move(rhs.value_.best));
        break;
      }
      default:
      {
        assert(false);
        __fbthrift_clear();
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  AdaptedUnion& operator=(const AdaptedUnion& rhs);


  union storage_type {
    ::std::int16_t best;

  } ;

  bool operator==(const AdaptedUnion&) const;
  bool operator<(const AdaptedUnion&) const;

  /** Glean { "field": "best" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::std::int16_t& set_best(::std::int16_t t = ::std::int16_t()) {
    using T0 = ::std::int16_t;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::best);
    ::new (std::addressof(value_.best)) T(t);
    return value_.best;
  }


  /** Glean { "field": "best" } */
  ::std::int16_t const& get_best() const {
    if (getType() != Type::best) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.best;
  }

  ::std::int16_t& mutable_best() {
    assert(getType() == Type::best);
    return value_.best;
  }

  template <typename..., typename T = ::std::int16_t>
  T move_best() {
    assert(getType() == Type::best);
    return std::move(value_.best);
  }

  /** Glean { "field": "best" } */
  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> best_ref() const& {
    return {value_.best, fbthrift_type_, folly::to_underlying(Type::best), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "best" } */
  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> best_ref() & {
    return {value_.best, fbthrift_type_, folly::to_underlying(Type::best), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "best" } */
  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> best_ref() && {
    return {std::move(value_.best), fbthrift_type_, folly::to_underlying(Type::best), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "best" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::std::int16_t&> best() const& {
    return {value_.best, fbthrift_type_, folly::to_underlying(Type::best), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "best" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::int16_t&> best() & {
    return {value_.best, fbthrift_type_, folly::to_underlying(Type::best), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "best" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::int16_t&&> best() && {
    return {std::move(value_.best), fbthrift_type_, folly::to_underlying(Type::best), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(fbthrift_type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  storage_type value_;
  std::underlying_type_t<Type> fbthrift_type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<AdaptedUnion>;
  friend void swap(AdaptedUnion& a, AdaptedUnion& b);
};

template <class Protocol_>
unsigned long AdaptedUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}
} // namespace detail

using AdaptedUnion = ::apache::thrift::adapt_detail::adapted_t<Adapter, ::py3::simple::detail::AdaptedUnion>;

/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "ImplicitlyHiddenTypeDef", "kind": "typedef" } */
using ImplicitlyHiddenTypeDef = ::py3::simple::AdaptedUnion;
/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "foo_bar", "kind": "typedef" } */
using foo_bar = foo::Bar;
/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "CustomBool", "kind": "typedef" } */
using CustomBool = ::MyType;
/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "CustomInteger", "kind": "typedef" } */
using CustomInteger = ::MyType;
/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "CustomDouble", "kind": "typedef" } */
using CustomDouble = ::MyType;
/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "CustomString", "kind": "typedef" } */
using CustomString = ::MyType;
/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "CustomBinary", "kind": "typedef" } */
using CustomBinary = ::MyType;
/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "CustomList", "kind": "typedef" } */
using CustomList = ::MyType;
/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "CustomSet", "kind": "typedef" } */
using CustomSet = ::MyType;
/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "CustomMap", "kind": "typedef" } */
using CustomMap = ::MyType;
/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "CustomStruct", "kind": "typedef" } */
using CustomStruct = ::MyType;
/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "AdaptedBool", "kind": "typedef" } */
using AdaptedBool = ::apache::thrift::adapt_detail::adapted_t<::MyAdapter, bool>;
/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "AdaptedInteger", "kind": "typedef" } */
using AdaptedInteger = ::apache::thrift::adapt_detail::adapted_t<::MyAdapter, ::std::int64_t>;
/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "AdaptedDouble", "kind": "typedef" } */
using AdaptedDouble = ::apache::thrift::adapt_detail::adapted_t<::MyAdapter, double>;
/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "AdaptedString", "kind": "typedef" } */
using AdaptedString = ::apache::thrift::adapt_detail::adapted_t<::MyAdapter, ::std::string>;
/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "AdaptedBinary", "kind": "typedef" } */
using AdaptedBinary = ::apache::thrift::adapt_detail::adapted_t<::MyAdapter, ::std::string>;
/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "AdaptedList", "kind": "typedef" } */
using AdaptedList = ::apache::thrift::adapt_detail::adapted_t<::MyAdapter, ::std::vector<::std::int32_t>>;
/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "AdaptedSet", "kind": "typedef" } */
using AdaptedSet = ::apache::thrift::adapt_detail::adapted_t<::MyAdapter, ::std::set<::std::int32_t>>;
/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "AdaptedMap", "kind": "typedef" } */
using AdaptedMap = ::apache::thrift::adapt_detail::adapted_t<::MyAdapter, ::std::map<::std::int32_t, ::std::int32_t>>;
/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "AdaptedStruct", "kind": "typedef" } */
using AdaptedStruct = ::apache::thrift::adapt_detail::adapted_t<::MyAdapter, ::py3::simple::SimpleStruct>;

/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "SimpleException", "kind": "exception" } */
class FOLLY_EXPORT SimpleException : public virtual apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::err_code
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i16_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::UNSPECIFIED;

 public:
  using __fbthrift_cpp2_type = SimpleException;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  SimpleException();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  SimpleException(apache::thrift::FragileConstructor, ::std::int16_t err_code__arg);

  SimpleException(SimpleException&&) noexcept;

  SimpleException(const SimpleException& src);


  SimpleException& operator=(SimpleException&&) noexcept;
  SimpleException& operator=(const SimpleException& src);

  ~SimpleException() override;

 private:
  ::std::int16_t __fbthrift_field_err_code;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const SimpleException&) const;
  bool operator<(const SimpleException&) const;

  /** Glean { "field": "err_code" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> err_code_ref() const& {
    return {this->__fbthrift_field_err_code, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "err_code" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> err_code_ref() & {
    return {this->__fbthrift_field_err_code, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "err_code" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> err_code_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_err_code), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "err_code" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> err_code() const& {
    return {this->__fbthrift_field_err_code, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "err_code" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> err_code() & {
    return {this->__fbthrift_field_err_code, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "err_code" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> err_code() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_err_code), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "err_code" } */
  [[deprecated("Use `FOO.err_code().value()` instead of `FOO.get_err_code()`")]]
  ::std::int16_t get_err_code() const;

  /** Glean { "field": "err_code" } */
  [[deprecated("Use `FOO.err_code() = BAR` instead of `FOO.set_err_code(BAR)`")]]
  ::std::int16_t& set_err_code(::std::int16_t err_code_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return "::py3::simple::SimpleException";
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<SimpleException>;
  friend void swap(SimpleException& a, SimpleException& b);
};

template <class Protocol_>
unsigned long SimpleException::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "OptionalRefStruct", "kind": "struct" } */
class OptionalRefStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::optional_blob
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::cpp_type<std::unique_ptr<folly::IOBuf>, ::apache::thrift::type::binary_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = OptionalRefStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  OptionalRefStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  OptionalRefStruct(apache::thrift::FragileConstructor, ::py3::simple::IOBufPtr optional_blob__arg);

  OptionalRefStruct(OptionalRefStruct&&) noexcept;
  OptionalRefStruct(const OptionalRefStruct& src);


  OptionalRefStruct& operator=(OptionalRefStruct&&) noexcept;
  OptionalRefStruct& operator=(const OptionalRefStruct& src);

  ~OptionalRefStruct();

 private:
  ::py3::simple::IOBufPtr __fbthrift_field_optional_blob;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const OptionalRefStruct&) const;
  bool operator<(const OptionalRefStruct&) const;

  /** Glean { "field": "optional_blob" } */
  template <typename..., typename fbthrift_T = ::py3::simple::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> optional_blob_ref() const& {
    return {this->__fbthrift_field_optional_blob, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "optional_blob" } */
  template <typename..., typename fbthrift_T = ::py3::simple::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> optional_blob_ref() & {
    return {this->__fbthrift_field_optional_blob, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "optional_blob" } */
  template <typename..., typename fbthrift_T = ::py3::simple::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> optional_blob_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_optional_blob), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "optional_blob" } */
  template <typename..., typename fbthrift_T = ::py3::simple::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> optional_blob() const& {
    return {this->__fbthrift_field_optional_blob, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "optional_blob" } */
  template <typename..., typename fbthrift_T = ::py3::simple::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> optional_blob() & {
    return {this->__fbthrift_field_optional_blob, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "optional_blob" } */
  template <typename..., typename fbthrift_T = ::py3::simple::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> optional_blob() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_optional_blob), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "optional_blob" } */
  [[deprecated("Use `FOO.optional_blob().value()` instead of `FOO.get_optional_blob()`")]]
  const ::py3::simple::IOBufPtr* get_optional_blob() const&;

  /** Glean { "field": "optional_blob" } */
  [[deprecated("Use `FOO.optional_blob().value()` instead of `FOO.get_optional_blob()`")]]
  ::py3::simple::IOBufPtr* get_optional_blob() &;

  ::py3::simple::IOBufPtr* get_optional_blob() && = delete;

  /** Glean { "field": "optional_blob" } */
  template <typename T_OptionalRefStruct_optional_blob_struct_setter = ::py3::simple::IOBufPtr>
  [[deprecated("Use `FOO.optional_blob() = BAR` instead of `FOO.set_optional_blob(BAR)`")]]
  ::py3::simple::IOBufPtr& set_optional_blob(T_OptionalRefStruct_optional_blob_struct_setter&& optional_blob_) {
    optional_blob_ref() = std::forward<T_OptionalRefStruct_optional_blob_struct_setter>(optional_blob_);
    return __fbthrift_field_optional_blob;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<OptionalRefStruct>;
  friend void swap(OptionalRefStruct& a, OptionalRefStruct& b);
};

template <class Protocol_>
unsigned long OptionalRefStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "HiddenTypeFieldsStruct", "kind": "struct" } */
class HiddenTypeFieldsStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 3;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field1,
    ::apache::thrift::ident::field2,
    ::apache::thrift::ident::field3
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::adapted<Adapter, ::apache::thrift::type::struct_t<::py3::simple::SimpleStruct>>,
    ::apache::thrift::type::list<::apache::thrift::type::adapted<Adapter, ::apache::thrift::type::struct_t<::py3::simple::SimpleStruct>>>,
    ::apache::thrift::type::cpp_type<::std::unordered_map<::std::int32_t, ::py3::simple::AdaptedTypeDef>, ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::adapted<Adapter, ::apache::thrift::type::struct_t<::py3::simple::SimpleStruct>>>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = HiddenTypeFieldsStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    true;


 public:

  HiddenTypeFieldsStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  HiddenTypeFieldsStruct(apache::thrift::FragileConstructor, ::py3::simple::AdaptedTypeDef field1__arg, ::std::vector<::py3::simple::AdaptedTypeDef> field2__arg, ::std::unordered_map<::std::int32_t, ::py3::simple::AdaptedTypeDef> field3__arg);

  HiddenTypeFieldsStruct(HiddenTypeFieldsStruct&&) noexcept;
  HiddenTypeFieldsStruct(const HiddenTypeFieldsStruct& src);


  HiddenTypeFieldsStruct& operator=(HiddenTypeFieldsStruct&&) noexcept;
  HiddenTypeFieldsStruct& operator=(const HiddenTypeFieldsStruct& src);

  ~HiddenTypeFieldsStruct();

 private:
  ::py3::simple::AdaptedTypeDef __fbthrift_field_field1;
 private:
  ::std::vector<::py3::simple::AdaptedTypeDef> __fbthrift_field_field2;
 private:
  ::std::unordered_map<::std::int32_t, ::py3::simple::AdaptedTypeDef> __fbthrift_field_field3;
 private:
  apache::thrift::detail::isset_bitset<3, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const HiddenTypeFieldsStruct&) const;
  bool operator<(const HiddenTypeFieldsStruct&) const;

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedTypeDef>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field1_ref() const& {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedTypeDef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field1_ref() & {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedTypeDef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field1_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedTypeDef>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field1() const& {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedTypeDef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field1() & {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedTypeDef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field1() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::py3::simple::AdaptedTypeDef>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field2_ref() const& {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::py3::simple::AdaptedTypeDef>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field2_ref() & {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::py3::simple::AdaptedTypeDef>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field2_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field2), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::py3::simple::AdaptedTypeDef>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field2() const& {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::py3::simple::AdaptedTypeDef>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field2() & {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::py3::simple::AdaptedTypeDef>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field2() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field2), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::unordered_map<::std::int32_t, ::py3::simple::AdaptedTypeDef>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field3_ref() const& {
    return {this->__fbthrift_field_field3, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::unordered_map<::std::int32_t, ::py3::simple::AdaptedTypeDef>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field3_ref() & {
    return {this->__fbthrift_field_field3, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::unordered_map<::std::int32_t, ::py3::simple::AdaptedTypeDef>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field3_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field3), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::unordered_map<::std::int32_t, ::py3::simple::AdaptedTypeDef>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field3() const& {
    return {this->__fbthrift_field_field3, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::unordered_map<::std::int32_t, ::py3::simple::AdaptedTypeDef>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field3() & {
    return {this->__fbthrift_field_field3, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::unordered_map<::std::int32_t, ::py3::simple::AdaptedTypeDef>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field3() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field3), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field2" } */
  [[deprecated("Use `FOO.field2().value()` instead of `FOO.get_field2()`")]]
  const ::std::vector<::py3::simple::AdaptedTypeDef>& get_field2() const&;

  /** Glean { "field": "field2" } */
  [[deprecated("Use `FOO.field2().value()` instead of `FOO.get_field2()`")]]
  ::std::vector<::py3::simple::AdaptedTypeDef> get_field2() &&;

  /** Glean { "field": "field2" } */
  template <typename T_HiddenTypeFieldsStruct_field2_struct_setter = ::std::vector<::py3::simple::AdaptedTypeDef>>
  [[deprecated("Use `FOO.field2() = BAR` instead of `FOO.set_field2(BAR)`")]]
  ::std::vector<::py3::simple::AdaptedTypeDef>& set_field2(T_HiddenTypeFieldsStruct_field2_struct_setter&& field2_) {
    field2_ref() = std::forward<T_HiddenTypeFieldsStruct_field2_struct_setter>(field2_);
    return __fbthrift_field_field2;
  }

  /** Glean { "field": "field3" } */
  [[deprecated("Use `FOO.field3().value()` instead of `FOO.get_field3()`")]]
  const ::std::unordered_map<::std::int32_t, ::py3::simple::AdaptedTypeDef>& get_field3() const&;

  /** Glean { "field": "field3" } */
  [[deprecated("Use `FOO.field3().value()` instead of `FOO.get_field3()`")]]
  ::std::unordered_map<::std::int32_t, ::py3::simple::AdaptedTypeDef> get_field3() &&;

  /** Glean { "field": "field3" } */
  template <typename T_HiddenTypeFieldsStruct_field3_struct_setter = ::std::unordered_map<::std::int32_t, ::py3::simple::AdaptedTypeDef>>
  [[deprecated("Use `FOO.field3() = BAR` instead of `FOO.set_field3(BAR)`")]]
  ::std::unordered_map<::std::int32_t, ::py3::simple::AdaptedTypeDef>& set_field3(T_HiddenTypeFieldsStruct_field3_struct_setter&& field3_) {
    field3_ref() = std::forward<T_HiddenTypeFieldsStruct_field3_struct_setter>(field3_);
    return __fbthrift_field_field3;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<HiddenTypeFieldsStruct>;
  friend void swap(HiddenTypeFieldsStruct& a, HiddenTypeFieldsStruct& b);
};

template <class Protocol_>
unsigned long HiddenTypeFieldsStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "HiddenException", "kind": "exception" } */
class FOLLY_EXPORT HiddenException : public virtual apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::test
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i16_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::SAFE;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::UNSPECIFIED;

 public:
  using __fbthrift_cpp2_type = HiddenException;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  HiddenException();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  HiddenException(apache::thrift::FragileConstructor, ::std::int16_t test__arg);

  HiddenException(HiddenException&&) noexcept;

  HiddenException(const HiddenException& src);


  HiddenException& operator=(HiddenException&&) noexcept;
  HiddenException& operator=(const HiddenException& src);

  ~HiddenException() override;

 private:
  ::std::int16_t __fbthrift_field_test;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const HiddenException&) const;
  bool operator<(const HiddenException&) const;

  /** Glean { "field": "test" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> test_ref() const& {
    return {this->__fbthrift_field_test, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "test" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> test_ref() & {
    return {this->__fbthrift_field_test, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "test" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> test_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_test), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "test" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> test() const& {
    return {this->__fbthrift_field_test, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "test" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> test() & {
    return {this->__fbthrift_field_test, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "test" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> test() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_test), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "test" } */
  [[deprecated("Use `FOO.test().value()` instead of `FOO.get_test()`")]]
  ::std::int16_t get_test() const;

  /** Glean { "field": "test" } */
  [[deprecated("Use `FOO.test() = BAR` instead of `FOO.set_test(BAR)`")]]
  ::std::int16_t& set_test(::std::int16_t test_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return "::py3::simple::HiddenException";
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<HiddenException>;
  friend void swap(HiddenException& a, HiddenException& b);
};

template <class Protocol_>
unsigned long HiddenException::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "ComplexStruct", "kind": "struct" } */
class ComplexStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 9;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::structOne,
    ::apache::thrift::ident::structTwo,
    ::apache::thrift::ident::an_integer,
    ::apache::thrift::ident::name,
    ::apache::thrift::ident::an_enum,
    ::apache::thrift::ident::some_bytes,
    ::apache::thrift::ident::from,
    ::apache::thrift::ident::cdef,
    ::apache::thrift::ident::bytes_with_cpp_type
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::py3::simple::SimpleStruct>,
    ::apache::thrift::type::struct_t<::py3::simple::SimpleStruct>,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::enum_t<::py3::simple::AnEnum>,
    ::apache::thrift::type::binary_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::cpp_type<foo::Bar, ::apache::thrift::type::binary_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ComplexStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  ComplexStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ComplexStruct(apache::thrift::FragileConstructor, ::py3::simple::SimpleStruct structOne__arg, ::py3::simple::SimpleStruct structTwo__arg, ::std::int32_t an_integer__arg, ::std::string name__arg, ::py3::simple::AnEnum an_enum__arg, ::std::string some_bytes__arg, ::std::string from__arg, ::std::string cdef__arg, ::py3::simple::foo_bar bytes_with_cpp_type__arg);

  ComplexStruct(ComplexStruct&&) noexcept;

  ComplexStruct(const ComplexStruct& src);


  ComplexStruct& operator=(ComplexStruct&&) noexcept;
  ComplexStruct& operator=(const ComplexStruct& src);

  ~ComplexStruct();

 private:
  ::py3::simple::SimpleStruct __fbthrift_field_structOne;
 private:
  ::py3::simple::SimpleStruct __fbthrift_field_structTwo;
 private:
  ::std::int32_t __fbthrift_field_an_integer;
 private:
  ::std::string __fbthrift_field_name;
 private:
  ::py3::simple::AnEnum __fbthrift_field_an_enum;
 private:
  ::std::string __fbthrift_field_some_bytes;
 private:
  ::std::string __fbthrift_field_from;
 private:
  ::std::string __fbthrift_field_cdef;
 private:
  ::py3::simple::foo_bar __fbthrift_field_bytes_with_cpp_type;
 private:
  apache::thrift::detail::isset_bitset<9, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const ComplexStruct&) const;
  bool operator<(const ComplexStruct&) const;

  /** Glean { "field": "structOne" } */
  template <typename..., typename fbthrift_T = ::py3::simple::SimpleStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> structOne_ref() const& {
    return {this->__fbthrift_field_structOne, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "structOne" } */
  template <typename..., typename fbthrift_T = ::py3::simple::SimpleStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> structOne_ref() & {
    return {this->__fbthrift_field_structOne, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "structOne" } */
  template <typename..., typename fbthrift_T = ::py3::simple::SimpleStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> structOne_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_structOne), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "structOne" } */
  template <typename..., typename fbthrift_T = ::py3::simple::SimpleStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> structOne() const& {
    return {this->__fbthrift_field_structOne, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "structOne" } */
  template <typename..., typename fbthrift_T = ::py3::simple::SimpleStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> structOne() & {
    return {this->__fbthrift_field_structOne, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "structOne" } */
  template <typename..., typename fbthrift_T = ::py3::simple::SimpleStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> structOne() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_structOne), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "structTwo" } */
  template <typename..., typename fbthrift_T = ::py3::simple::SimpleStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> structTwo_ref() const& {
    return {this->__fbthrift_field_structTwo, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "structTwo" } */
  template <typename..., typename fbthrift_T = ::py3::simple::SimpleStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> structTwo_ref() & {
    return {this->__fbthrift_field_structTwo, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "structTwo" } */
  template <typename..., typename fbthrift_T = ::py3::simple::SimpleStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> structTwo_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_structTwo), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "structTwo" } */
  template <typename..., typename fbthrift_T = ::py3::simple::SimpleStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> structTwo() const& {
    return {this->__fbthrift_field_structTwo, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "structTwo" } */
  template <typename..., typename fbthrift_T = ::py3::simple::SimpleStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> structTwo() & {
    return {this->__fbthrift_field_structTwo, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "structTwo" } */
  template <typename..., typename fbthrift_T = ::py3::simple::SimpleStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> structTwo() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_structTwo), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "an_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> an_integer_ref() const& {
    return {this->__fbthrift_field_an_integer, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "an_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> an_integer_ref() & {
    return {this->__fbthrift_field_an_integer, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "an_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> an_integer_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_an_integer), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "an_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> an_integer() const& {
    return {this->__fbthrift_field_an_integer, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "an_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> an_integer() & {
    return {this->__fbthrift_field_an_integer, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "an_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> an_integer() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_an_integer), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name_ref() const& {
    return {this->__fbthrift_field_name, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name_ref() & {
    return {this->__fbthrift_field_name, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name() const& {
    return {this->__fbthrift_field_name, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name() & {
    return {this->__fbthrift_field_name, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "an_enum" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AnEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> an_enum_ref() const& {
    return {this->__fbthrift_field_an_enum, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "an_enum" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AnEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> an_enum_ref() & {
    return {this->__fbthrift_field_an_enum, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "an_enum" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AnEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> an_enum_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_an_enum), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "an_enum" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AnEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> an_enum() const& {
    return {this->__fbthrift_field_an_enum, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "an_enum" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AnEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> an_enum() & {
    return {this->__fbthrift_field_an_enum, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "an_enum" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AnEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> an_enum() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_an_enum), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "some_bytes" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> some_bytes_ref() const& {
    return {this->__fbthrift_field_some_bytes, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "some_bytes" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> some_bytes_ref() & {
    return {this->__fbthrift_field_some_bytes, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "some_bytes" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> some_bytes_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_some_bytes), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "some_bytes" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> some_bytes() const& {
    return {this->__fbthrift_field_some_bytes, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "some_bytes" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> some_bytes() & {
    return {this->__fbthrift_field_some_bytes, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "some_bytes" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> some_bytes() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_some_bytes), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "from" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> from_ref() const& {
    return {this->__fbthrift_field_from, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "from" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> from_ref() & {
    return {this->__fbthrift_field_from, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "from" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> from_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_from), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "from" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> from() const& {
    return {this->__fbthrift_field_from, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "from" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> from() & {
    return {this->__fbthrift_field_from, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "from" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> from() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_from), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "cdef" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> cdef_ref() const& {
    return {this->__fbthrift_field_cdef, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "cdef" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> cdef_ref() & {
    return {this->__fbthrift_field_cdef, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "cdef" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> cdef_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_cdef), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "cdef" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> cdef() const& {
    return {this->__fbthrift_field_cdef, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "cdef" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> cdef() & {
    return {this->__fbthrift_field_cdef, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "cdef" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> cdef() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_cdef), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "bytes_with_cpp_type" } */
  template <typename..., typename fbthrift_T = ::py3::simple::foo_bar>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bytes_with_cpp_type_ref() const& {
    return {this->__fbthrift_field_bytes_with_cpp_type, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "bytes_with_cpp_type" } */
  template <typename..., typename fbthrift_T = ::py3::simple::foo_bar>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bytes_with_cpp_type_ref() & {
    return {this->__fbthrift_field_bytes_with_cpp_type, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "bytes_with_cpp_type" } */
  template <typename..., typename fbthrift_T = ::py3::simple::foo_bar>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bytes_with_cpp_type_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bytes_with_cpp_type), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "bytes_with_cpp_type" } */
  template <typename..., typename fbthrift_T = ::py3::simple::foo_bar>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bytes_with_cpp_type() const& {
    return {this->__fbthrift_field_bytes_with_cpp_type, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "bytes_with_cpp_type" } */
  template <typename..., typename fbthrift_T = ::py3::simple::foo_bar>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bytes_with_cpp_type() & {
    return {this->__fbthrift_field_bytes_with_cpp_type, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "bytes_with_cpp_type" } */
  template <typename..., typename fbthrift_T = ::py3::simple::foo_bar>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bytes_with_cpp_type() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bytes_with_cpp_type), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "structOne" } */
  [[deprecated("Use `FOO.structOne().value()` instead of `FOO.get_structOne()`")]]
  const ::py3::simple::SimpleStruct& get_structOne() const&;

  /** Glean { "field": "structOne" } */
  [[deprecated("Use `FOO.structOne().value()` instead of `FOO.get_structOne()`")]]
  ::py3::simple::SimpleStruct get_structOne() &&;

  /** Glean { "field": "structOne" } */
  template <typename T_ComplexStruct_structOne_struct_setter = ::py3::simple::SimpleStruct>
  [[deprecated("Use `FOO.structOne() = BAR` instead of `FOO.set_structOne(BAR)`")]]
  ::py3::simple::SimpleStruct& set_structOne(T_ComplexStruct_structOne_struct_setter&& structOne_) {
    structOne_ref() = std::forward<T_ComplexStruct_structOne_struct_setter>(structOne_);
    return __fbthrift_field_structOne;
  }

  /** Glean { "field": "structTwo" } */
  [[deprecated("Use `FOO.structTwo().value()` instead of `FOO.get_structTwo()`")]]
  const ::py3::simple::SimpleStruct& get_structTwo() const&;

  /** Glean { "field": "structTwo" } */
  [[deprecated("Use `FOO.structTwo().value()` instead of `FOO.get_structTwo()`")]]
  ::py3::simple::SimpleStruct get_structTwo() &&;

  /** Glean { "field": "structTwo" } */
  template <typename T_ComplexStruct_structTwo_struct_setter = ::py3::simple::SimpleStruct>
  [[deprecated("Use `FOO.structTwo() = BAR` instead of `FOO.set_structTwo(BAR)`")]]
  ::py3::simple::SimpleStruct& set_structTwo(T_ComplexStruct_structTwo_struct_setter&& structTwo_) {
    structTwo_ref() = std::forward<T_ComplexStruct_structTwo_struct_setter>(structTwo_);
    return __fbthrift_field_structTwo;
  }

  /** Glean { "field": "an_integer" } */
  [[deprecated("Use `FOO.an_integer().value()` instead of `FOO.get_an_integer()`")]]
  ::std::int32_t get_an_integer() const;

  /** Glean { "field": "an_integer" } */
  [[deprecated("Use `FOO.an_integer() = BAR` instead of `FOO.set_an_integer(BAR)`")]]
  ::std::int32_t& set_an_integer(::std::int32_t an_integer_);

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  const ::std::string& get_name() const& {
    return __fbthrift_field_name;
  }

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  ::std::string get_name() && {
    return static_cast<::std::string&&>(__fbthrift_field_name);
  }

  /** Glean { "field": "name" } */
  template <typename T_ComplexStruct_name_struct_setter = ::std::string>
  [[deprecated("Use `FOO.name() = BAR` instead of `FOO.set_name(BAR)`")]]
  ::std::string& set_name(T_ComplexStruct_name_struct_setter&& name_) {
    name_ref() = std::forward<T_ComplexStruct_name_struct_setter>(name_);
    return __fbthrift_field_name;
  }

  /** Glean { "field": "an_enum" } */
  [[deprecated("Use `FOO.an_enum().value()` instead of `FOO.get_an_enum()`")]]
  ::py3::simple::AnEnum get_an_enum() const;

  /** Glean { "field": "an_enum" } */
  [[deprecated("Use `FOO.an_enum() = BAR` instead of `FOO.set_an_enum(BAR)`")]]
  ::py3::simple::AnEnum& set_an_enum(::py3::simple::AnEnum an_enum_);

  /** Glean { "field": "some_bytes" } */
  [[deprecated("Use `FOO.some_bytes().value()` instead of `FOO.get_some_bytes()`")]]
  const ::std::string& get_some_bytes() const& {
    return __fbthrift_field_some_bytes;
  }

  /** Glean { "field": "some_bytes" } */
  [[deprecated("Use `FOO.some_bytes().value()` instead of `FOO.get_some_bytes()`")]]
  ::std::string get_some_bytes() && {
    return static_cast<::std::string&&>(__fbthrift_field_some_bytes);
  }

  /** Glean { "field": "some_bytes" } */
  template <typename T_ComplexStruct_some_bytes_struct_setter = ::std::string>
  [[deprecated("Use `FOO.some_bytes() = BAR` instead of `FOO.set_some_bytes(BAR)`")]]
  ::std::string& set_some_bytes(T_ComplexStruct_some_bytes_struct_setter&& some_bytes_) {
    some_bytes_ref() = std::forward<T_ComplexStruct_some_bytes_struct_setter>(some_bytes_);
    return __fbthrift_field_some_bytes;
  }

  /** Glean { "field": "from" } */
  [[deprecated("Use `FOO.from().value()` instead of `FOO.get_from()`")]]
  const ::std::string& get_from() const& {
    return __fbthrift_field_from;
  }

  /** Glean { "field": "from" } */
  [[deprecated("Use `FOO.from().value()` instead of `FOO.get_from()`")]]
  ::std::string get_from() && {
    return static_cast<::std::string&&>(__fbthrift_field_from);
  }

  /** Glean { "field": "from" } */
  template <typename T_ComplexStruct_from_struct_setter = ::std::string>
  [[deprecated("Use `FOO.from() = BAR` instead of `FOO.set_from(BAR)`")]]
  ::std::string& set_from(T_ComplexStruct_from_struct_setter&& from_) {
    from_ref() = std::forward<T_ComplexStruct_from_struct_setter>(from_);
    return __fbthrift_field_from;
  }

  /** Glean { "field": "cdef" } */
  [[deprecated("Use `FOO.cdef().value()` instead of `FOO.get_cdef()`")]]
  const ::std::string& get_cdef() const& {
    return __fbthrift_field_cdef;
  }

  /** Glean { "field": "cdef" } */
  [[deprecated("Use `FOO.cdef().value()` instead of `FOO.get_cdef()`")]]
  ::std::string get_cdef() && {
    return static_cast<::std::string&&>(__fbthrift_field_cdef);
  }

  /** Glean { "field": "cdef" } */
  template <typename T_ComplexStruct_cdef_struct_setter = ::std::string>
  [[deprecated("Use `FOO.cdef() = BAR` instead of `FOO.set_cdef(BAR)`")]]
  ::std::string& set_cdef(T_ComplexStruct_cdef_struct_setter&& cdef_) {
    cdef_ref() = std::forward<T_ComplexStruct_cdef_struct_setter>(cdef_);
    return __fbthrift_field_cdef;
  }

  /** Glean { "field": "bytes_with_cpp_type" } */
  [[deprecated("Use `FOO.bytes_with_cpp_type().value()` instead of `FOO.get_bytes_with_cpp_type()`")]]
  const ::py3::simple::foo_bar& get_bytes_with_cpp_type() const& {
    return __fbthrift_field_bytes_with_cpp_type;
  }

  /** Glean { "field": "bytes_with_cpp_type" } */
  [[deprecated("Use `FOO.bytes_with_cpp_type().value()` instead of `FOO.get_bytes_with_cpp_type()`")]]
  ::py3::simple::foo_bar get_bytes_with_cpp_type() && {
    return static_cast<::py3::simple::foo_bar&&>(__fbthrift_field_bytes_with_cpp_type);
  }

  /** Glean { "field": "bytes_with_cpp_type" } */
  template <typename T_ComplexStruct_bytes_with_cpp_type_struct_setter = ::py3::simple::foo_bar>
  [[deprecated("Use `FOO.bytes_with_cpp_type() = BAR` instead of `FOO.set_bytes_with_cpp_type(BAR)`")]]
  ::py3::simple::foo_bar& set_bytes_with_cpp_type(T_ComplexStruct_bytes_with_cpp_type_struct_setter&& bytes_with_cpp_type_) {
    bytes_with_cpp_type_ref() = std::forward<T_ComplexStruct_bytes_with_cpp_type_struct_setter>(bytes_with_cpp_type_);
    return __fbthrift_field_bytes_with_cpp_type;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ComplexStruct>;
  friend void swap(ComplexStruct& a, ComplexStruct& b);
};

template <class Protocol_>
unsigned long ComplexStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "BinaryUnion", "kind": "union" } */
class BinaryUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::iobuf_val
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::cpp_type<folly::IOBuf, ::apache::thrift::type::binary_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_destruct();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = BinaryUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:
  enum class Type : int {
    __EMPTY__ = 0,
    iobuf_val = 1,
  } ;

  BinaryUnion()
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {}

  BinaryUnion(BinaryUnion&& rhs) noexcept
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::iobuf_val:
      {
        set_iobuf_val(std::move(rhs.value_.iobuf_val));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  BinaryUnion(const BinaryUnion& rhs);

  BinaryUnion& operator=(BinaryUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        __fbthrift_clear();
        return *this;
      }
      case Type::iobuf_val:
      {
        set_iobuf_val(std::move(rhs.value_.iobuf_val));
        break;
      }
      default:
      {
        assert(false);
        __fbthrift_clear();
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  BinaryUnion& operator=(const BinaryUnion& rhs);

  ~BinaryUnion();

  union storage_type {
    ::py3::simple::IOBuf iobuf_val;

    storage_type() {}
    ~storage_type() {}
  } ;

  /** Glean { "field": "iobuf_val" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::py3::simple::IOBuf& set_iobuf_val(::py3::simple::IOBuf const &t) {
    using T0 = ::py3::simple::IOBuf;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::iobuf_val);
    ::new (std::addressof(value_.iobuf_val)) T(t);
    return value_.iobuf_val;
  }

  /** Glean { "field": "iobuf_val" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::py3::simple::IOBuf& set_iobuf_val(::py3::simple::IOBuf&& t) {
    using T0 = ::py3::simple::IOBuf;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::iobuf_val);
    ::new (std::addressof(value_.iobuf_val)) T(std::move(t));
    return value_.iobuf_val;
  }

  /** Glean { "field": "iobuf_val" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::py3::simple::IOBuf, T...>> ::py3::simple::IOBuf& set_iobuf_val(T&&... t) {
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::iobuf_val);
    ::new (std::addressof(value_.iobuf_val)) ::py3::simple::IOBuf(std::forward<T>(t)...);
    return value_.iobuf_val;
  }


  /** Glean { "field": "iobuf_val" } */
  ::py3::simple::IOBuf const& get_iobuf_val() const {
    if (getType() != Type::iobuf_val) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.iobuf_val;
  }

  ::py3::simple::IOBuf& mutable_iobuf_val() {
    assert(getType() == Type::iobuf_val);
    return value_.iobuf_val;
  }

  template <typename..., typename T = ::py3::simple::IOBuf>
  T move_iobuf_val() {
    assert(getType() == Type::iobuf_val);
    return std::move(value_.iobuf_val);
  }

  /** Glean { "field": "iobuf_val" } */
  template <typename..., typename T = ::py3::simple::IOBuf>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> iobuf_val_ref() const& {
    return {value_.iobuf_val, fbthrift_type_, folly::to_underlying(Type::iobuf_val), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "iobuf_val" } */
  template <typename..., typename T = ::py3::simple::IOBuf>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> iobuf_val_ref() & {
    return {value_.iobuf_val, fbthrift_type_, folly::to_underlying(Type::iobuf_val), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "iobuf_val" } */
  template <typename..., typename T = ::py3::simple::IOBuf>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> iobuf_val_ref() && {
    return {std::move(value_.iobuf_val), fbthrift_type_, folly::to_underlying(Type::iobuf_val), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "iobuf_val" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::py3::simple::IOBuf&> iobuf_val() const& {
    return {value_.iobuf_val, fbthrift_type_, folly::to_underlying(Type::iobuf_val), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "iobuf_val" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::py3::simple::IOBuf&> iobuf_val() & {
    return {value_.iobuf_val, fbthrift_type_, folly::to_underlying(Type::iobuf_val), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "iobuf_val" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::py3::simple::IOBuf&&> iobuf_val() && {
    return {std::move(value_.iobuf_val), fbthrift_type_, folly::to_underlying(Type::iobuf_val), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(fbthrift_type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  storage_type value_;
  std::underlying_type_t<Type> fbthrift_type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<BinaryUnion>;
  friend void swap(BinaryUnion& a, BinaryUnion& b);
};

template <class Protocol_>
unsigned long BinaryUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "BinaryUnionStruct", "kind": "struct" } */
class BinaryUnionStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::u
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::union_t<::py3::simple::BinaryUnion>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = BinaryUnionStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  BinaryUnionStruct() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  BinaryUnionStruct(apache::thrift::FragileConstructor, ::py3::simple::BinaryUnion u__arg);

  BinaryUnionStruct(BinaryUnionStruct&&) noexcept;

  BinaryUnionStruct(const BinaryUnionStruct& src);


  BinaryUnionStruct& operator=(BinaryUnionStruct&&) noexcept;
  BinaryUnionStruct& operator=(const BinaryUnionStruct& src);
 private:
  ::py3::simple::BinaryUnion __fbthrift_field_u;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  /** Glean { "field": "u" } */
  template <typename..., typename fbthrift_T = ::py3::simple::BinaryUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> u_ref() const& {
    return {this->__fbthrift_field_u, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "u" } */
  template <typename..., typename fbthrift_T = ::py3::simple::BinaryUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> u_ref() & {
    return {this->__fbthrift_field_u, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "u" } */
  template <typename..., typename fbthrift_T = ::py3::simple::BinaryUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> u_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_u), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "u" } */
  template <typename..., typename fbthrift_T = ::py3::simple::BinaryUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> u() const& {
    return {this->__fbthrift_field_u, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "u" } */
  template <typename..., typename fbthrift_T = ::py3::simple::BinaryUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> u() & {
    return {this->__fbthrift_field_u, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "u" } */
  template <typename..., typename fbthrift_T = ::py3::simple::BinaryUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> u() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_u), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "u" } */
  [[deprecated("Use `FOO.u().value()` instead of `FOO.get_u()`")]]
  const ::py3::simple::BinaryUnion& get_u() const&;

  /** Glean { "field": "u" } */
  [[deprecated("Use `FOO.u().value()` instead of `FOO.get_u()`")]]
  ::py3::simple::BinaryUnion get_u() &&;

  /** Glean { "field": "u" } */
  template <typename T_BinaryUnionStruct_u_struct_setter = ::py3::simple::BinaryUnion>
  [[deprecated("Use `FOO.u() = BAR` instead of `FOO.set_u(BAR)`")]]
  ::py3::simple::BinaryUnion& set_u(T_BinaryUnionStruct_u_struct_setter&& u_) {
    u_ref() = std::forward<T_BinaryUnionStruct_u_struct_setter>(u_);
    return __fbthrift_field_u;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<BinaryUnionStruct>;
  friend void swap(BinaryUnionStruct& a, BinaryUnionStruct& b);
};

template <class Protocol_>
unsigned long BinaryUnionStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "CustomFields", "kind": "struct" } */
class CustomFields final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 9;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::bool_field,
    ::apache::thrift::ident::integer_field,
    ::apache::thrift::ident::double_field,
    ::apache::thrift::ident::string_field,
    ::apache::thrift::ident::binary_field,
    ::apache::thrift::ident::list_field,
    ::apache::thrift::ident::set_field,
    ::apache::thrift::ident::map_field,
    ::apache::thrift::ident::struct_field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::cpp_type<::MyType, ::apache::thrift::type::bool_t>,
    ::apache::thrift::type::cpp_type<::MyType, ::apache::thrift::type::i64_t>,
    ::apache::thrift::type::cpp_type<::MyType, ::apache::thrift::type::double_t>,
    ::apache::thrift::type::cpp_type<::MyType, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::cpp_type<::MyType, ::apache::thrift::type::binary_t>,
    ::apache::thrift::type::cpp_type<::MyType, ::apache::thrift::type::list<::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::cpp_type<::MyType, ::apache::thrift::type::set<::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::cpp_type<::MyType, ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::cpp_type<::MyType, ::apache::thrift::type::struct_t<::py3::simple::SimpleStruct>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = CustomFields;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  CustomFields();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  CustomFields(apache::thrift::FragileConstructor, ::MyType bool_field__arg, ::MyType integer_field__arg, ::MyType double_field__arg, ::MyType string_field__arg, ::MyType binary_field__arg, ::MyType list_field__arg, ::MyType set_field__arg, ::MyType map_field__arg, ::MyType struct_field__arg);

  CustomFields(CustomFields&&) noexcept;

  CustomFields(const CustomFields& src);


  CustomFields& operator=(CustomFields&&) noexcept;
  CustomFields& operator=(const CustomFields& src);

  ~CustomFields();

 private:
  ::MyType __fbthrift_field_bool_field;
 private:
  ::MyType __fbthrift_field_integer_field;
 private:
  ::MyType __fbthrift_field_double_field;
 private:
  ::MyType __fbthrift_field_string_field;
 private:
  ::MyType __fbthrift_field_binary_field;
 private:
  ::MyType __fbthrift_field_list_field;
 private:
  ::MyType __fbthrift_field_set_field;
 private:
  ::MyType __fbthrift_field_map_field;
 private:
  ::MyType __fbthrift_field_struct_field;
 private:
  apache::thrift::detail::isset_bitset<9, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const CustomFields&) const;
  bool operator<(const CustomFields&) const;

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bool_field_ref() const& {
    return {this->__fbthrift_field_bool_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bool_field_ref() & {
    return {this->__fbthrift_field_bool_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bool_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bool_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bool_field() const& {
    return {this->__fbthrift_field_bool_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bool_field() & {
    return {this->__fbthrift_field_bool_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bool_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bool_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "integer_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> integer_field_ref() const& {
    return {this->__fbthrift_field_integer_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "integer_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> integer_field_ref() & {
    return {this->__fbthrift_field_integer_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "integer_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> integer_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_integer_field), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "integer_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> integer_field() const& {
    return {this->__fbthrift_field_integer_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "integer_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> integer_field() & {
    return {this->__fbthrift_field_integer_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "integer_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> integer_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_integer_field), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> double_field_ref() const& {
    return {this->__fbthrift_field_double_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> double_field_ref() & {
    return {this->__fbthrift_field_double_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> double_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_double_field), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> double_field() const& {
    return {this->__fbthrift_field_double_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> double_field() & {
    return {this->__fbthrift_field_double_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> double_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_double_field), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> string_field_ref() const& {
    return {this->__fbthrift_field_string_field, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> string_field_ref() & {
    return {this->__fbthrift_field_string_field, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> string_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_string_field), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> string_field() const& {
    return {this->__fbthrift_field_string_field, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> string_field() & {
    return {this->__fbthrift_field_string_field, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> string_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_string_field), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> binary_field_ref() const& {
    return {this->__fbthrift_field_binary_field, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> binary_field_ref() & {
    return {this->__fbthrift_field_binary_field, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> binary_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_binary_field), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> binary_field() const& {
    return {this->__fbthrift_field_binary_field, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> binary_field() & {
    return {this->__fbthrift_field_binary_field, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> binary_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_binary_field), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_field_ref() const& {
    return {this->__fbthrift_field_list_field, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_field_ref() & {
    return {this->__fbthrift_field_list_field, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_field), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_field() const& {
    return {this->__fbthrift_field_list_field, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_field() & {
    return {this->__fbthrift_field_list_field, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_field), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_field_ref() const& {
    return {this->__fbthrift_field_set_field, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_field_ref() & {
    return {this->__fbthrift_field_set_field, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_field), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_field() const& {
    return {this->__fbthrift_field_set_field, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_field() & {
    return {this->__fbthrift_field_set_field, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_field), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> map_field_ref() const& {
    return {this->__fbthrift_field_map_field, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> map_field_ref() & {
    return {this->__fbthrift_field_map_field, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> map_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_map_field), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> map_field() const& {
    return {this->__fbthrift_field_map_field, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> map_field() & {
    return {this->__fbthrift_field_map_field, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> map_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_map_field), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "struct_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> struct_field_ref() const& {
    return {this->__fbthrift_field_struct_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "struct_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> struct_field_ref() & {
    return {this->__fbthrift_field_struct_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "struct_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> struct_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_struct_field), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "struct_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> struct_field() const& {
    return {this->__fbthrift_field_struct_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "struct_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> struct_field() & {
    return {this->__fbthrift_field_struct_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "struct_field" } */
  template <typename..., typename fbthrift_T = ::MyType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> struct_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_struct_field), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "bool_field" } */
  [[deprecated("Use `FOO.bool_field().value()` instead of `FOO.get_bool_field()`")]]
  ::MyType get_bool_field() const;

  /** Glean { "field": "bool_field" } */
  [[deprecated("Use `FOO.bool_field() = BAR` instead of `FOO.set_bool_field(BAR)`")]]
  ::MyType& set_bool_field(::MyType bool_field_);

  /** Glean { "field": "integer_field" } */
  [[deprecated("Use `FOO.integer_field().value()` instead of `FOO.get_integer_field()`")]]
  ::MyType get_integer_field() const;

  /** Glean { "field": "integer_field" } */
  [[deprecated("Use `FOO.integer_field() = BAR` instead of `FOO.set_integer_field(BAR)`")]]
  ::MyType& set_integer_field(::MyType integer_field_);

  /** Glean { "field": "double_field" } */
  [[deprecated("Use `FOO.double_field().value()` instead of `FOO.get_double_field()`")]]
  ::MyType get_double_field() const;

  /** Glean { "field": "double_field" } */
  [[deprecated("Use `FOO.double_field() = BAR` instead of `FOO.set_double_field(BAR)`")]]
  ::MyType& set_double_field(::MyType double_field_);

  /** Glean { "field": "string_field" } */
  [[deprecated("Use `FOO.string_field().value()` instead of `FOO.get_string_field()`")]]
  const ::MyType& get_string_field() const& {
    return __fbthrift_field_string_field;
  }

  /** Glean { "field": "string_field" } */
  [[deprecated("Use `FOO.string_field().value()` instead of `FOO.get_string_field()`")]]
  ::MyType get_string_field() && {
    return static_cast<::MyType&&>(__fbthrift_field_string_field);
  }

  /** Glean { "field": "string_field" } */
  template <typename T_CustomFields_string_field_struct_setter = ::MyType>
  [[deprecated("Use `FOO.string_field() = BAR` instead of `FOO.set_string_field(BAR)`")]]
  ::MyType& set_string_field(T_CustomFields_string_field_struct_setter&& string_field_) {
    string_field_ref() = std::forward<T_CustomFields_string_field_struct_setter>(string_field_);
    return __fbthrift_field_string_field;
  }

  /** Glean { "field": "binary_field" } */
  [[deprecated("Use `FOO.binary_field().value()` instead of `FOO.get_binary_field()`")]]
  const ::MyType& get_binary_field() const& {
    return __fbthrift_field_binary_field;
  }

  /** Glean { "field": "binary_field" } */
  [[deprecated("Use `FOO.binary_field().value()` instead of `FOO.get_binary_field()`")]]
  ::MyType get_binary_field() && {
    return static_cast<::MyType&&>(__fbthrift_field_binary_field);
  }

  /** Glean { "field": "binary_field" } */
  template <typename T_CustomFields_binary_field_struct_setter = ::MyType>
  [[deprecated("Use `FOO.binary_field() = BAR` instead of `FOO.set_binary_field(BAR)`")]]
  ::MyType& set_binary_field(T_CustomFields_binary_field_struct_setter&& binary_field_) {
    binary_field_ref() = std::forward<T_CustomFields_binary_field_struct_setter>(binary_field_);
    return __fbthrift_field_binary_field;
  }

  /** Glean { "field": "list_field" } */
  [[deprecated("Use `FOO.list_field().value()` instead of `FOO.get_list_field()`")]]
  const ::MyType& get_list_field() const&;

  /** Glean { "field": "list_field" } */
  [[deprecated("Use `FOO.list_field().value()` instead of `FOO.get_list_field()`")]]
  ::MyType get_list_field() &&;

  /** Glean { "field": "list_field" } */
  template <typename T_CustomFields_list_field_struct_setter = ::MyType>
  [[deprecated("Use `FOO.list_field() = BAR` instead of `FOO.set_list_field(BAR)`")]]
  ::MyType& set_list_field(T_CustomFields_list_field_struct_setter&& list_field_) {
    list_field_ref() = std::forward<T_CustomFields_list_field_struct_setter>(list_field_);
    return __fbthrift_field_list_field;
  }

  /** Glean { "field": "set_field" } */
  [[deprecated("Use `FOO.set_field().value()` instead of `FOO.get_set_field()`")]]
  const ::MyType& get_set_field() const&;

  /** Glean { "field": "set_field" } */
  [[deprecated("Use `FOO.set_field().value()` instead of `FOO.get_set_field()`")]]
  ::MyType get_set_field() &&;

  /** Glean { "field": "set_field" } */
  template <typename T_CustomFields_set_field_struct_setter = ::MyType>
  [[deprecated("Use `FOO.set_field() = BAR` instead of `FOO.set_set_field(BAR)`")]]
  ::MyType& set_set_field(T_CustomFields_set_field_struct_setter&& set_field_) {
    set_field_ref() = std::forward<T_CustomFields_set_field_struct_setter>(set_field_);
    return __fbthrift_field_set_field;
  }

  /** Glean { "field": "map_field" } */
  [[deprecated("Use `FOO.map_field().value()` instead of `FOO.get_map_field()`")]]
  const ::MyType& get_map_field() const&;

  /** Glean { "field": "map_field" } */
  [[deprecated("Use `FOO.map_field().value()` instead of `FOO.get_map_field()`")]]
  ::MyType get_map_field() &&;

  /** Glean { "field": "map_field" } */
  template <typename T_CustomFields_map_field_struct_setter = ::MyType>
  [[deprecated("Use `FOO.map_field() = BAR` instead of `FOO.set_map_field(BAR)`")]]
  ::MyType& set_map_field(T_CustomFields_map_field_struct_setter&& map_field_) {
    map_field_ref() = std::forward<T_CustomFields_map_field_struct_setter>(map_field_);
    return __fbthrift_field_map_field;
  }

  /** Glean { "field": "struct_field" } */
  [[deprecated("Use `FOO.struct_field().value()` instead of `FOO.get_struct_field()`")]]
  const ::MyType& get_struct_field() const&;

  /** Glean { "field": "struct_field" } */
  [[deprecated("Use `FOO.struct_field().value()` instead of `FOO.get_struct_field()`")]]
  ::MyType get_struct_field() &&;

  /** Glean { "field": "struct_field" } */
  template <typename T_CustomFields_struct_field_struct_setter = ::MyType>
  [[deprecated("Use `FOO.struct_field() = BAR` instead of `FOO.set_struct_field(BAR)`")]]
  ::MyType& set_struct_field(T_CustomFields_struct_field_struct_setter&& struct_field_) {
    struct_field_ref() = std::forward<T_CustomFields_struct_field_struct_setter>(struct_field_);
    return __fbthrift_field_struct_field;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<CustomFields>;
  friend void swap(CustomFields& a, CustomFields& b);
};

template <class Protocol_>
unsigned long CustomFields::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "CustomTypedefFields", "kind": "struct" } */
class CustomTypedefFields final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 9;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::bool_field,
    ::apache::thrift::ident::integer_field,
    ::apache::thrift::ident::double_field,
    ::apache::thrift::ident::string_field,
    ::apache::thrift::ident::binary_field,
    ::apache::thrift::ident::list_field,
    ::apache::thrift::ident::set_field,
    ::apache::thrift::ident::map_field,
    ::apache::thrift::ident::struct_field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::cpp_type<::MyType, ::apache::thrift::type::bool_t>,
    ::apache::thrift::type::cpp_type<::MyType, ::apache::thrift::type::i64_t>,
    ::apache::thrift::type::cpp_type<::MyType, ::apache::thrift::type::double_t>,
    ::apache::thrift::type::cpp_type<::MyType, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::cpp_type<::MyType, ::apache::thrift::type::binary_t>,
    ::apache::thrift::type::cpp_type<::MyType, ::apache::thrift::type::list<::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::cpp_type<::MyType, ::apache::thrift::type::set<::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::cpp_type<::MyType, ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::cpp_type<::MyType, ::apache::thrift::type::struct_t<::py3::simple::SimpleStruct>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = CustomTypedefFields;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  CustomTypedefFields();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  CustomTypedefFields(apache::thrift::FragileConstructor, ::py3::simple::CustomBool bool_field__arg, ::py3::simple::CustomInteger integer_field__arg, ::py3::simple::CustomDouble double_field__arg, ::py3::simple::CustomString string_field__arg, ::py3::simple::CustomBinary binary_field__arg, ::py3::simple::CustomList list_field__arg, ::py3::simple::CustomSet set_field__arg, ::py3::simple::CustomMap map_field__arg, ::py3::simple::CustomStruct struct_field__arg);

  CustomTypedefFields(CustomTypedefFields&&) noexcept;

  CustomTypedefFields(const CustomTypedefFields& src);


  CustomTypedefFields& operator=(CustomTypedefFields&&) noexcept;
  CustomTypedefFields& operator=(const CustomTypedefFields& src);

  ~CustomTypedefFields();

 private:
  ::py3::simple::CustomBool __fbthrift_field_bool_field;
 private:
  ::py3::simple::CustomInteger __fbthrift_field_integer_field;
 private:
  ::py3::simple::CustomDouble __fbthrift_field_double_field;
 private:
  ::py3::simple::CustomString __fbthrift_field_string_field;
 private:
  ::py3::simple::CustomBinary __fbthrift_field_binary_field;
 private:
  ::py3::simple::CustomList __fbthrift_field_list_field;
 private:
  ::py3::simple::CustomSet __fbthrift_field_set_field;
 private:
  ::py3::simple::CustomMap __fbthrift_field_map_field;
 private:
  ::py3::simple::CustomStruct __fbthrift_field_struct_field;
 private:
  apache::thrift::detail::isset_bitset<9, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const CustomTypedefFields&) const;
  bool operator<(const CustomTypedefFields&) const;

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomBool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bool_field_ref() const& {
    return {this->__fbthrift_field_bool_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomBool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bool_field_ref() & {
    return {this->__fbthrift_field_bool_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomBool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bool_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bool_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomBool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bool_field() const& {
    return {this->__fbthrift_field_bool_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomBool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bool_field() & {
    return {this->__fbthrift_field_bool_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomBool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bool_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bool_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "integer_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomInteger>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> integer_field_ref() const& {
    return {this->__fbthrift_field_integer_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "integer_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomInteger>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> integer_field_ref() & {
    return {this->__fbthrift_field_integer_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "integer_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomInteger>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> integer_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_integer_field), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "integer_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomInteger>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> integer_field() const& {
    return {this->__fbthrift_field_integer_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "integer_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomInteger>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> integer_field() & {
    return {this->__fbthrift_field_integer_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "integer_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomInteger>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> integer_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_integer_field), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomDouble>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> double_field_ref() const& {
    return {this->__fbthrift_field_double_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomDouble>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> double_field_ref() & {
    return {this->__fbthrift_field_double_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomDouble>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> double_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_double_field), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomDouble>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> double_field() const& {
    return {this->__fbthrift_field_double_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomDouble>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> double_field() & {
    return {this->__fbthrift_field_double_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomDouble>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> double_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_double_field), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomString>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> string_field_ref() const& {
    return {this->__fbthrift_field_string_field, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomString>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> string_field_ref() & {
    return {this->__fbthrift_field_string_field, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomString>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> string_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_string_field), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomString>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> string_field() const& {
    return {this->__fbthrift_field_string_field, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomString>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> string_field() & {
    return {this->__fbthrift_field_string_field, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomString>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> string_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_string_field), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomBinary>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> binary_field_ref() const& {
    return {this->__fbthrift_field_binary_field, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomBinary>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> binary_field_ref() & {
    return {this->__fbthrift_field_binary_field, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomBinary>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> binary_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_binary_field), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomBinary>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> binary_field() const& {
    return {this->__fbthrift_field_binary_field, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomBinary>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> binary_field() & {
    return {this->__fbthrift_field_binary_field, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomBinary>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> binary_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_binary_field), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomList>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_field_ref() const& {
    return {this->__fbthrift_field_list_field, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomList>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_field_ref() & {
    return {this->__fbthrift_field_list_field, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomList>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_field), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomList>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_field() const& {
    return {this->__fbthrift_field_list_field, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomList>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_field() & {
    return {this->__fbthrift_field_list_field, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomList>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_field), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomSet>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_field_ref() const& {
    return {this->__fbthrift_field_set_field, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomSet>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_field_ref() & {
    return {this->__fbthrift_field_set_field, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomSet>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_field), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomSet>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_field() const& {
    return {this->__fbthrift_field_set_field, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomSet>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_field() & {
    return {this->__fbthrift_field_set_field, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomSet>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_field), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomMap>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> map_field_ref() const& {
    return {this->__fbthrift_field_map_field, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomMap>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> map_field_ref() & {
    return {this->__fbthrift_field_map_field, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomMap>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> map_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_map_field), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomMap>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> map_field() const& {
    return {this->__fbthrift_field_map_field, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomMap>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> map_field() & {
    return {this->__fbthrift_field_map_field, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomMap>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> map_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_map_field), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "struct_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> struct_field_ref() const& {
    return {this->__fbthrift_field_struct_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "struct_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> struct_field_ref() & {
    return {this->__fbthrift_field_struct_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "struct_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> struct_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_struct_field), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "struct_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> struct_field() const& {
    return {this->__fbthrift_field_struct_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "struct_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> struct_field() & {
    return {this->__fbthrift_field_struct_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "struct_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::CustomStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> struct_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_struct_field), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "bool_field" } */
  [[deprecated("Use `FOO.bool_field().value()` instead of `FOO.get_bool_field()`")]]
  ::py3::simple::CustomBool get_bool_field() const;

  /** Glean { "field": "bool_field" } */
  [[deprecated("Use `FOO.bool_field() = BAR` instead of `FOO.set_bool_field(BAR)`")]]
  ::py3::simple::CustomBool& set_bool_field(::py3::simple::CustomBool bool_field_);

  /** Glean { "field": "integer_field" } */
  [[deprecated("Use `FOO.integer_field().value()` instead of `FOO.get_integer_field()`")]]
  ::py3::simple::CustomInteger get_integer_field() const;

  /** Glean { "field": "integer_field" } */
  [[deprecated("Use `FOO.integer_field() = BAR` instead of `FOO.set_integer_field(BAR)`")]]
  ::py3::simple::CustomInteger& set_integer_field(::py3::simple::CustomInteger integer_field_);

  /** Glean { "field": "double_field" } */
  [[deprecated("Use `FOO.double_field().value()` instead of `FOO.get_double_field()`")]]
  ::py3::simple::CustomDouble get_double_field() const;

  /** Glean { "field": "double_field" } */
  [[deprecated("Use `FOO.double_field() = BAR` instead of `FOO.set_double_field(BAR)`")]]
  ::py3::simple::CustomDouble& set_double_field(::py3::simple::CustomDouble double_field_);

  /** Glean { "field": "string_field" } */
  [[deprecated("Use `FOO.string_field().value()` instead of `FOO.get_string_field()`")]]
  const ::py3::simple::CustomString& get_string_field() const& {
    return __fbthrift_field_string_field;
  }

  /** Glean { "field": "string_field" } */
  [[deprecated("Use `FOO.string_field().value()` instead of `FOO.get_string_field()`")]]
  ::py3::simple::CustomString get_string_field() && {
    return static_cast<::py3::simple::CustomString&&>(__fbthrift_field_string_field);
  }

  /** Glean { "field": "string_field" } */
  template <typename T_CustomTypedefFields_string_field_struct_setter = ::py3::simple::CustomString>
  [[deprecated("Use `FOO.string_field() = BAR` instead of `FOO.set_string_field(BAR)`")]]
  ::py3::simple::CustomString& set_string_field(T_CustomTypedefFields_string_field_struct_setter&& string_field_) {
    string_field_ref() = std::forward<T_CustomTypedefFields_string_field_struct_setter>(string_field_);
    return __fbthrift_field_string_field;
  }

  /** Glean { "field": "binary_field" } */
  [[deprecated("Use `FOO.binary_field().value()` instead of `FOO.get_binary_field()`")]]
  const ::py3::simple::CustomBinary& get_binary_field() const& {
    return __fbthrift_field_binary_field;
  }

  /** Glean { "field": "binary_field" } */
  [[deprecated("Use `FOO.binary_field().value()` instead of `FOO.get_binary_field()`")]]
  ::py3::simple::CustomBinary get_binary_field() && {
    return static_cast<::py3::simple::CustomBinary&&>(__fbthrift_field_binary_field);
  }

  /** Glean { "field": "binary_field" } */
  template <typename T_CustomTypedefFields_binary_field_struct_setter = ::py3::simple::CustomBinary>
  [[deprecated("Use `FOO.binary_field() = BAR` instead of `FOO.set_binary_field(BAR)`")]]
  ::py3::simple::CustomBinary& set_binary_field(T_CustomTypedefFields_binary_field_struct_setter&& binary_field_) {
    binary_field_ref() = std::forward<T_CustomTypedefFields_binary_field_struct_setter>(binary_field_);
    return __fbthrift_field_binary_field;
  }

  /** Glean { "field": "list_field" } */
  [[deprecated("Use `FOO.list_field().value()` instead of `FOO.get_list_field()`")]]
  const ::py3::simple::CustomList& get_list_field() const&;

  /** Glean { "field": "list_field" } */
  [[deprecated("Use `FOO.list_field().value()` instead of `FOO.get_list_field()`")]]
  ::py3::simple::CustomList get_list_field() &&;

  /** Glean { "field": "list_field" } */
  template <typename T_CustomTypedefFields_list_field_struct_setter = ::py3::simple::CustomList>
  [[deprecated("Use `FOO.list_field() = BAR` instead of `FOO.set_list_field(BAR)`")]]
  ::py3::simple::CustomList& set_list_field(T_CustomTypedefFields_list_field_struct_setter&& list_field_) {
    list_field_ref() = std::forward<T_CustomTypedefFields_list_field_struct_setter>(list_field_);
    return __fbthrift_field_list_field;
  }

  /** Glean { "field": "set_field" } */
  [[deprecated("Use `FOO.set_field().value()` instead of `FOO.get_set_field()`")]]
  const ::py3::simple::CustomSet& get_set_field() const&;

  /** Glean { "field": "set_field" } */
  [[deprecated("Use `FOO.set_field().value()` instead of `FOO.get_set_field()`")]]
  ::py3::simple::CustomSet get_set_field() &&;

  /** Glean { "field": "set_field" } */
  template <typename T_CustomTypedefFields_set_field_struct_setter = ::py3::simple::CustomSet>
  [[deprecated("Use `FOO.set_field() = BAR` instead of `FOO.set_set_field(BAR)`")]]
  ::py3::simple::CustomSet& set_set_field(T_CustomTypedefFields_set_field_struct_setter&& set_field_) {
    set_field_ref() = std::forward<T_CustomTypedefFields_set_field_struct_setter>(set_field_);
    return __fbthrift_field_set_field;
  }

  /** Glean { "field": "map_field" } */
  [[deprecated("Use `FOO.map_field().value()` instead of `FOO.get_map_field()`")]]
  const ::py3::simple::CustomMap& get_map_field() const&;

  /** Glean { "field": "map_field" } */
  [[deprecated("Use `FOO.map_field().value()` instead of `FOO.get_map_field()`")]]
  ::py3::simple::CustomMap get_map_field() &&;

  /** Glean { "field": "map_field" } */
  template <typename T_CustomTypedefFields_map_field_struct_setter = ::py3::simple::CustomMap>
  [[deprecated("Use `FOO.map_field() = BAR` instead of `FOO.set_map_field(BAR)`")]]
  ::py3::simple::CustomMap& set_map_field(T_CustomTypedefFields_map_field_struct_setter&& map_field_) {
    map_field_ref() = std::forward<T_CustomTypedefFields_map_field_struct_setter>(map_field_);
    return __fbthrift_field_map_field;
  }

  /** Glean { "field": "struct_field" } */
  [[deprecated("Use `FOO.struct_field().value()` instead of `FOO.get_struct_field()`")]]
  const ::py3::simple::CustomStruct& get_struct_field() const&;

  /** Glean { "field": "struct_field" } */
  [[deprecated("Use `FOO.struct_field().value()` instead of `FOO.get_struct_field()`")]]
  ::py3::simple::CustomStruct get_struct_field() &&;

  /** Glean { "field": "struct_field" } */
  template <typename T_CustomTypedefFields_struct_field_struct_setter = ::py3::simple::CustomStruct>
  [[deprecated("Use `FOO.struct_field() = BAR` instead of `FOO.set_struct_field(BAR)`")]]
  ::py3::simple::CustomStruct& set_struct_field(T_CustomTypedefFields_struct_field_struct_setter&& struct_field_) {
    struct_field_ref() = std::forward<T_CustomTypedefFields_struct_field_struct_setter>(struct_field_);
    return __fbthrift_field_struct_field;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<CustomTypedefFields>;
  friend void swap(CustomTypedefFields& a, CustomTypedefFields& b);
};

template <class Protocol_>
unsigned long CustomTypedefFields::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/py3/src/module.thrift", "name": "AdaptedTypedefFields", "kind": "struct" } */
class AdaptedTypedefFields final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 9;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::bool_field,
    ::apache::thrift::ident::integer_field,
    ::apache::thrift::ident::double_field,
    ::apache::thrift::ident::string_field,
    ::apache::thrift::ident::binary_field,
    ::apache::thrift::ident::list_field,
    ::apache::thrift::ident::set_field,
    ::apache::thrift::ident::map_field,
    ::apache::thrift::ident::struct_field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::adapted<::MyAdapter, ::apache::thrift::type::bool_t>,
    ::apache::thrift::type::adapted<::MyAdapter, ::apache::thrift::type::i64_t>,
    ::apache::thrift::type::adapted<::MyAdapter, ::apache::thrift::type::double_t>,
    ::apache::thrift::type::adapted<::MyAdapter, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::adapted<::MyAdapter, ::apache::thrift::type::binary_t>,
    ::apache::thrift::type::adapted<::MyAdapter, ::apache::thrift::type::list<::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::adapted<::MyAdapter, ::apache::thrift::type::set<::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::adapted<::MyAdapter, ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::adapted<::MyAdapter, ::apache::thrift::type::struct_t<::py3::simple::SimpleStruct>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = AdaptedTypedefFields;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    true;


 public:

  AdaptedTypedefFields();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  AdaptedTypedefFields(apache::thrift::FragileConstructor, ::py3::simple::AdaptedBool bool_field__arg, ::py3::simple::AdaptedInteger integer_field__arg, ::py3::simple::AdaptedDouble double_field__arg, ::py3::simple::AdaptedString string_field__arg, ::py3::simple::AdaptedBinary binary_field__arg, ::py3::simple::AdaptedList list_field__arg, ::py3::simple::AdaptedSet set_field__arg, ::py3::simple::AdaptedMap map_field__arg, ::py3::simple::AdaptedStruct struct_field__arg);

  AdaptedTypedefFields(AdaptedTypedefFields&&) noexcept;
  AdaptedTypedefFields(const AdaptedTypedefFields& src);


  AdaptedTypedefFields& operator=(AdaptedTypedefFields&&) noexcept;
  AdaptedTypedefFields& operator=(const AdaptedTypedefFields& src);

  ~AdaptedTypedefFields();

 private:
  ::py3::simple::AdaptedBool __fbthrift_field_bool_field;
 private:
  ::py3::simple::AdaptedInteger __fbthrift_field_integer_field;
 private:
  ::py3::simple::AdaptedDouble __fbthrift_field_double_field;
 private:
  ::py3::simple::AdaptedString __fbthrift_field_string_field;
 private:
  ::py3::simple::AdaptedBinary __fbthrift_field_binary_field;
 private:
  ::py3::simple::AdaptedList __fbthrift_field_list_field;
 private:
  ::py3::simple::AdaptedSet __fbthrift_field_set_field;
 private:
  ::py3::simple::AdaptedMap __fbthrift_field_map_field;
 private:
  ::py3::simple::AdaptedStruct __fbthrift_field_struct_field;
 private:
  apache::thrift::detail::isset_bitset<9, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const AdaptedTypedefFields&) const;
  bool operator<(const AdaptedTypedefFields&) const;

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedBool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bool_field_ref() const& {
    return {this->__fbthrift_field_bool_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedBool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bool_field_ref() & {
    return {this->__fbthrift_field_bool_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedBool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bool_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bool_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedBool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bool_field() const& {
    return {this->__fbthrift_field_bool_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedBool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bool_field() & {
    return {this->__fbthrift_field_bool_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedBool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bool_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bool_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "integer_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedInteger>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> integer_field_ref() const& {
    return {this->__fbthrift_field_integer_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "integer_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedInteger>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> integer_field_ref() & {
    return {this->__fbthrift_field_integer_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "integer_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedInteger>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> integer_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_integer_field), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "integer_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedInteger>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> integer_field() const& {
    return {this->__fbthrift_field_integer_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "integer_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedInteger>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> integer_field() & {
    return {this->__fbthrift_field_integer_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "integer_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedInteger>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> integer_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_integer_field), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedDouble>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> double_field_ref() const& {
    return {this->__fbthrift_field_double_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedDouble>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> double_field_ref() & {
    return {this->__fbthrift_field_double_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedDouble>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> double_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_double_field), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedDouble>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> double_field() const& {
    return {this->__fbthrift_field_double_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedDouble>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> double_field() & {
    return {this->__fbthrift_field_double_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedDouble>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> double_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_double_field), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedString>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> string_field_ref() const& {
    return {this->__fbthrift_field_string_field, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedString>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> string_field_ref() & {
    return {this->__fbthrift_field_string_field, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedString>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> string_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_string_field), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedString>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> string_field() const& {
    return {this->__fbthrift_field_string_field, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedString>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> string_field() & {
    return {this->__fbthrift_field_string_field, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedString>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> string_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_string_field), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedBinary>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> binary_field_ref() const& {
    return {this->__fbthrift_field_binary_field, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedBinary>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> binary_field_ref() & {
    return {this->__fbthrift_field_binary_field, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedBinary>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> binary_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_binary_field), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedBinary>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> binary_field() const& {
    return {this->__fbthrift_field_binary_field, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedBinary>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> binary_field() & {
    return {this->__fbthrift_field_binary_field, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedBinary>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> binary_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_binary_field), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedList>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_field_ref() const& {
    return {this->__fbthrift_field_list_field, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedList>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_field_ref() & {
    return {this->__fbthrift_field_list_field, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedList>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_field), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedList>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_field() const& {
    return {this->__fbthrift_field_list_field, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedList>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_field() & {
    return {this->__fbthrift_field_list_field, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedList>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_field), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedSet>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_field_ref() const& {
    return {this->__fbthrift_field_set_field, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedSet>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_field_ref() & {
    return {this->__fbthrift_field_set_field, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedSet>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_field), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedSet>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_field() const& {
    return {this->__fbthrift_field_set_field, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedSet>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_field() & {
    return {this->__fbthrift_field_set_field, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedSet>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_field), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedMap>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> map_field_ref() const& {
    return {this->__fbthrift_field_map_field, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedMap>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> map_field_ref() & {
    return {this->__fbthrift_field_map_field, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedMap>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> map_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_map_field), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedMap>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> map_field() const& {
    return {this->__fbthrift_field_map_field, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedMap>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> map_field() & {
    return {this->__fbthrift_field_map_field, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedMap>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> map_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_map_field), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "struct_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> struct_field_ref() const& {
    return {this->__fbthrift_field_struct_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "struct_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> struct_field_ref() & {
    return {this->__fbthrift_field_struct_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "struct_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> struct_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_struct_field), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "struct_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> struct_field() const& {
    return {this->__fbthrift_field_struct_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "struct_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> struct_field() & {
    return {this->__fbthrift_field_struct_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "struct_field" } */
  template <typename..., typename fbthrift_T = ::py3::simple::AdaptedStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> struct_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_struct_field), __isset.at(8), __isset.bit(8)};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<AdaptedTypedefFields>;
  friend void swap(AdaptedTypedefFields& a, AdaptedTypedefFields& b);
};

template <class Protocol_>
unsigned long AdaptedTypedefFields::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace py3::simple

namespace apache::thrift {

template <> struct TEnumDataStorage<::py3::simple::detail::AdaptedUnion::Type>;

template <> struct TEnumTraits<::py3::simple::detail::AdaptedUnion::Type> {
  using type = ::py3::simple::detail::AdaptedUnion::Type;

  static constexpr std::size_t const size = 1;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }

  static constexpr type min() { return type::best; }
  static constexpr type max() { return type::best; }
};

template <> struct TEnumDataStorage<::py3::simple::BinaryUnion::Type>;

template <> struct TEnumTraits<::py3::simple::BinaryUnion::Type> {
  using type = ::py3::simple::BinaryUnion::Type;

  static constexpr std::size_t const size = 1;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }

  static constexpr type min() { return type::iobuf_val; }
  static constexpr type max() { return type::iobuf_val; }
};
} // namespace apache::thrift

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::py3::simple::SimpleException, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -8607107063930754448;
  static constexpr ::std::string_view definitionKey = {"\x84\x77\xe7\xf8\x6d\xa8\x4b\x72\xea\xfb\xff\x66\x6b\x18\x6c\x7a", 16};
};
template <> struct TSchemaAssociation<::py3::simple::OptionalRefStruct, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -8607107063930754448;
  static constexpr ::std::string_view definitionKey = {"\x8c\xcb\x4d\x67\x40\x0f\xb0\x54\x32\x3e\xe1\xc4\xc3\xaf\x7b\x78", 16};
};
template <> struct TSchemaAssociation<::py3::simple::SimpleStruct, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -8607107063930754448;
  static constexpr ::std::string_view definitionKey = {"\xb3\x76\x2f\xe4\xc4\xc5\xe5\x2f\xf3\x4f\x72\x3e\xf3\x45\x8d\x17", 16};
};
template <> struct TSchemaAssociation<::py3::simple::HiddenTypeFieldsStruct, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -8607107063930754448;
  static constexpr ::std::string_view definitionKey = {"\x21\x50\xd1\xa6\xcd\x34\x43\x25\xcb\x21\xe9\x7d\x05\x75\xeb\x26", 16};
};
template <> struct TSchemaAssociation<::py3::simple::detail::AdaptedUnion, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -8607107063930754448;
  static constexpr ::std::string_view definitionKey = {"\x7b\xc9\x33\x91\x29\x3d\x12\xac\x28\x15\x43\x02\x3f\x11\x82\x0c", 16};
};
template <> struct TSchemaAssociation<::py3::simple::HiddenException, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -8607107063930754448;
  static constexpr ::std::string_view definitionKey = {"\xd4\x0f\xaa\x81\xcf\x9e\x31\xa7\x19\xe2\x62\x02\xad\x8f\x2e\x76", 16};
};
template <> struct TSchemaAssociation<::py3::simple::ComplexStruct, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -8607107063930754448;
  static constexpr ::std::string_view definitionKey = {"\x73\x12\x2a\xa3\xe5\xf8\x2a\xa9\xa8\x99\x1d\x3d\x44\xf6\x6e\x59", 16};
};
template <> struct TSchemaAssociation<::py3::simple::BinaryUnion, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -8607107063930754448;
  static constexpr ::std::string_view definitionKey = {"\x92\x91\x41\xeb\x12\x3e\x8e\xf2\x59\xd9\x78\xe6\x27\x8d\x09\x27", 16};
};
template <> struct TSchemaAssociation<::py3::simple::BinaryUnionStruct, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -8607107063930754448;
  static constexpr ::std::string_view definitionKey = {"\x72\xba\x3a\xec\x18\xf2\x67\x00\xe8\x2a\xbd\x07\xb5\x49\x47\xa4", 16};
};
template <> struct TSchemaAssociation<::py3::simple::CustomFields, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -8607107063930754448;
  static constexpr ::std::string_view definitionKey = {"\x02\x10\xb5\x39\x8b\x23\xca\xfc\xd2\x4f\xdc\x7f\x7a\xc0\xfa\x20", 16};
};
template <> struct TSchemaAssociation<::py3::simple::CustomTypedefFields, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -8607107063930754448;
  static constexpr ::std::string_view definitionKey = {"\xac\xad\xfb\x85\x91\x4d\xa6\x26\xe2\xec\x2d\x5e\xa7\x16\xc0\x8f", 16};
};
template <> struct TSchemaAssociation<::py3::simple::AdaptedTypedefFields, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -8607107063930754448;
  static constexpr ::std::string_view definitionKey = {"\x62\xe8\x0f\xf3\x43\xc3\xb3\x98\x00\x97\x12\x93\x2f\x17\x60\x28", 16};
};
template <> struct TSchemaAssociation<::py3::simple::AnEnum, true> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -8607107063930754448;
  static constexpr ::std::string_view definitionKey = {"\x7b\x48\xbd\xe9\x65\x9b\x4f\x16\x4c\xe3\xe4\xa5\x29\x9f\x61\xd3", 16};
};
template <> struct TSchemaAssociation<::py3::simple::AnEnumRenamed, true> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -8607107063930754448;
  static constexpr ::std::string_view definitionKey = {"\xa1\xbc\x0a\xab\x0a\xd1\xed\xf1\x90\x37\xbc\x58\x4b\x29\x3b\xbe", 16};
};
template <> struct TSchemaAssociation<::py3::simple::Flags, true> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -8607107063930754448;
  static constexpr ::std::string_view definitionKey = {"\xbf\x90\x08\x33\x6d\xa9\xd8\xcc\x3b\x14\x24\x22\x3c\x91\x2c\x9a", 16};
};
} // namespace apache::thrift::detail
