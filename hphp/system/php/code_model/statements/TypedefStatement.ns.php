<?php
// Copyright 2004-present Facebook. All Rights Reserved.
// This file is @generated by
// fbcode/hphp/facebook/tools/code_model/Generate.sh

namespace HH\CodeModel {

/**
 *  type name [typeParameters] [as constraint] = typeAnnotation;
 *  newtype name [typeParameters] [as constraint] = typeAnnotation;
 */
class TypedefStatement /*implements ITypedefStatement*/ {
  use Statement;
  use Node;

  private /*?string*/ $name;
  private /*?bool*/ $isOpaque;
  private /*?Vector<ITypeParameterExpression>*/ $typeParameters;
  private /*?ITypeExpression*/ $constraint;
  private /*?ITypeExpression*/ $typeAnnotation;

  /**
   *  type name [typeParameters] [as constraint] = typeAnnotation;
   *  newtype name [typeParameters] [as constraint] = typeAnnotation;
   */
  public function getName() /*: string*/ {
    if ($this->name === null) {
      throw new \Exception("Name is not initialized");
    }
    return $this->name;
  }
  /**
   *  type name [typeParameters] [as constraint] = typeAnnotation;
   *  newtype name [typeParameters] [as constraint] = typeAnnotation;
   */
  public function setName(/*string*/ $value) /*: this*/ {
    $this->name = $value;
    return $this;
  }

  /**
   *  type name [typeParameters] [as constraint] = typeAnnotation;
   *  newtype name [typeParameters] [as constraint] = typeAnnotation;
   */
  public function getIsOpaque() /*: bool*/ {
    if ($this->isOpaque === null) {
      return false;
    }
    return $this->isOpaque;
  }
  /**
   *  type name [typeParameters] [as constraint] = typeAnnotation;
   *  newtype name [typeParameters] [as constraint] = typeAnnotation;
   */
  public function setIsOpaque(/*bool*/ $value) /*: this*/ {
    $this->isOpaque = $value;
    return $this;
  }

  /**
   *  type name [typeParameters] [as constraint] = typeAnnotation;
   *  newtype name [typeParameters] [as constraint] = typeAnnotation;
   */
  public function getTypeParameters() /*: Vector<ITypeParameterExpression>*/ {
    if ($this->typeParameters === null) {
      $this->typeParameters = Vector {};
    }
    return $this->typeParameters;
  }
  /**
   *  type name [typeParameters] [as constraint] = typeAnnotation;
   *  newtype name [typeParameters] [as constraint] = typeAnnotation;
   */
  public function setTypeParameters(/*Vector<ITypeParameterExpression>*/ $value)
     /*: this*/ {
    $this->typeParameters = $value;
    return $this;
  }

  /**
   *  type name [typeParameters] [as constraint] = typeAnnotation;
   *  newtype name [typeParameters] [as constraint] = typeAnnotation;
   */
  public function getConstraint() /*: ?ITypeExpression*/ {
    return $this->constraint;
  }
  /**
   *  type name [typeParameters] [as constraint] = typeAnnotation;
   *  newtype name [typeParameters] [as constraint] = typeAnnotation;
   */
  public function setConstraint(/*?ITypeExpression*/ $value) /*: this*/ {
    $this->constraint = $value;
    return $this;
  }

  /**
   *  type name [typeParameters] [as constraint] = typeAnnotation;
   *  newtype name [typeParameters] [as constraint] = typeAnnotation;
   */
  public function getTypeAnnotation() /*: ITypeExpression*/ {
    if ($this->typeAnnotation === null) {
      throw new \Exception("TypeAnnotation is not initialized");
    }
    return $this->typeAnnotation;
  }
  /**
   *  type name [typeParameters] [as constraint] = typeAnnotation;
   *  newtype name [typeParameters] [as constraint] = typeAnnotation;
   */
  public function setTypeAnnotation(/*ITypeExpression*/ $value) /*: this*/ {
    $this->typeAnnotation = $value;
    return $this;
  }

  /**
   * Returns $visitor->visitTypedefStatement($this) if
   * such a method exists on $visitor.
   * Otherwise returns $visitor->visitStatement($this) if
   * such a method exists on $visitor.
   * Otherwise returns $visitor->visitNode($this) if
   */
  public function accept(/*mixed*/ $visitor) /*: mixed*/ {
    if (method_exists($visitor, "visitTypedefStatement")) {
      // UNSAFE
      return $visitor->visitTypedefStatement($this);
    } else if (method_exists($visitor, "visitStatement")) {
      // UNSAFE
      return $visitor->visitStatement($this);
    } else {
      return $visitor->visitNode($this);
    }
  }

  /**
   * Yields a list of nodes that are children of this node.
   * A node has exactly one parent, so doing a depth
   * first traversal of a node graph using getChildren will
   * traverse a spanning tree.
   */
  public function getChildren() /*: Continuation<INode>*/ {
    if ($this->typeParameters !== null) {
      foreach ($this->typeParameters as $elem) {
        yield $elem;
      }
    }
    if ($this->constraint !== null) {
      yield $this->constraint;
    }
    if ($this->typeAnnotation !== null) {
      yield $this->typeAnnotation;
    }
  }
}
}
