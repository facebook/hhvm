#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#

from __future__ import annotations

import folly.iobuf as _fbthrift_iobuf

from abc import ABCMeta as _fbthrift_ABCMeta
import test.fixtures.basic-structured-annotations.module.thrift_abstract_types as _fbthrift_abstract_types
import thrift.python.types as _fbthrift_python_types
import thrift.python.exceptions as _fbthrift_python_exceptions


import included.thrift_types
import included.thrift_types as _fbthrift__included__thrift_types

import namespaced.thrift_types
import namespaced.thrift_types as _fbthrift__namespaced__thrift_types

from test.fixtures.basic-structured-annotations.module.thrift_enums import (
    MyEnum,
    MyEnum as _fbthrift_MyEnum,
)


class runtime_annotation(metaclass=_fbthrift_python_types.StructMeta):
    _fbthrift_SPEC = (
    )

    @staticmethod
    def __get_thrift_name__() -> str:
        return "module.runtime_annotation"

    @staticmethod
    def __get_thrift_uri__():
        return "test.dev/fixtures/basic-structured-annotations/runtime_annotation"

    @classmethod
    def _fbthrift_auto_migrate_enabled(cls):
        return False

    @staticmethod
    def __get_metadata__():
        return _fbthrift_metadata__struct_runtime_annotation()

    def _to_python(self):
        return self

    def _to_mutable_python(self):
        from thrift.python import mutable_converter
        import importlib
        mutable_types = importlib.import_module("test.fixtures.basic-structured-annotations.module.thrift_mutable_types")
        return mutable_converter.to_mutable_python_struct_or_union(mutable_types.runtime_annotation, self)

    def _to_py3(self):
        import importlib
        py3_types = importlib.import_module("test.fixtures.basic-structured-annotations.module.types")
        from thrift.py3 import converter
        return converter.to_py3_struct(py3_types.runtime_annotation, self)

    def _to_py_deprecated(self):
        import importlib
        from thrift.util import converter
        try:
            py_deprecated_types = importlib.import_module("module.ttypes")
            return converter.to_py_struct(py_deprecated_types.runtime_annotation, self)
        except ModuleNotFoundError:
            py_asyncio_types = importlib.import_module("module.ttypes")
            return converter.to_py_struct(py_asyncio_types.runtime_annotation, self)

_fbthrift_ABCMeta.register(_fbthrift_abstract_types.runtime_annotation, runtime_annotation)
_fbthrift_runtime_annotation = runtime_annotation

class structured_annotation_inline(metaclass=_fbthrift_python_types.StructMeta):
    _fbthrift_SPEC = (
        _fbthrift_python_types.FieldInfo(
            1,  # id
            _fbthrift_python_types.FieldQualifier.Unqualified, # qualifier
            "count",  # name
            "count",  # python name (from @python.Name annotation)
            _fbthrift_python_types.typeinfo_i64,  # typeinfo
            None,  # default value
            None,  # adapter info
            True, # field type is primitive
            5, # IDL type (see BaseTypeEnum)
        ),
        _fbthrift_python_types.FieldInfo(
            2,  # id
            _fbthrift_python_types.FieldQualifier.Unqualified, # qualifier
            "name",  # name
            "name",  # python name (from @python.Name annotation)
            _fbthrift_python_types.typeinfo_string,  # typeinfo
            "abacaba",  # default value
            None,  # adapter info
            False, # field type is primitive
            8, # IDL type (see BaseTypeEnum)
        ),
    )

    @staticmethod
    def __get_thrift_name__() -> str:
        return "module.structured_annotation_inline"

    @staticmethod
    def __get_thrift_uri__():
        return "test.dev/fixtures/basic-structured-annotations/structured_annotation_inline"

    @classmethod
    def _fbthrift_auto_migrate_enabled(cls):
        return False

    @staticmethod
    def __get_metadata__():
        return _fbthrift_metadata__struct_structured_annotation_inline()

    def _to_python(self):
        return self

    def _to_mutable_python(self):
        from thrift.python import mutable_converter
        import importlib
        mutable_types = importlib.import_module("test.fixtures.basic-structured-annotations.module.thrift_mutable_types")
        return mutable_converter.to_mutable_python_struct_or_union(mutable_types.structured_annotation_inline, self)

    def _to_py3(self):
        import importlib
        py3_types = importlib.import_module("test.fixtures.basic-structured-annotations.module.types")
        from thrift.py3 import converter
        return converter.to_py3_struct(py3_types.structured_annotation_inline, self)

    def _to_py_deprecated(self):
        import importlib
        from thrift.util import converter
        try:
            py_deprecated_types = importlib.import_module("module.ttypes")
            return converter.to_py_struct(py_deprecated_types.structured_annotation_inline, self)
        except ModuleNotFoundError:
            py_asyncio_types = importlib.import_module("module.ttypes")
            return converter.to_py_struct(py_asyncio_types.structured_annotation_inline, self)

_fbthrift_ABCMeta.register(_fbthrift_abstract_types.structured_annotation_inline, structured_annotation_inline)
_fbthrift_structured_annotation_inline = structured_annotation_inline

class structured_annotation_with_default(metaclass=_fbthrift_python_types.StructMeta):
    _fbthrift_SPEC = (
        _fbthrift_python_types.FieldInfo(
            1,  # id
            _fbthrift_python_types.FieldQualifier.Unqualified, # qualifier
            "name",  # name
            "name",  # python name (from @python.Name annotation)
            _fbthrift_python_types.typeinfo_string,  # typeinfo
            "abacabadabacaba",  # default value
            None,  # adapter info
            False, # field type is primitive
            8, # IDL type (see BaseTypeEnum)
        ),
    )

    @staticmethod
    def __get_thrift_name__() -> str:
        return "module.structured_annotation_with_default"

    @staticmethod
    def __get_thrift_uri__():
        return "test.dev/fixtures/basic-structured-annotations/structured_annotation_with_default"

    @classmethod
    def _fbthrift_auto_migrate_enabled(cls):
        return False

    @staticmethod
    def __get_metadata__():
        return _fbthrift_metadata__struct_structured_annotation_with_default()

    def _to_python(self):
        return self

    def _to_mutable_python(self):
        from thrift.python import mutable_converter
        import importlib
        mutable_types = importlib.import_module("test.fixtures.basic-structured-annotations.module.thrift_mutable_types")
        return mutable_converter.to_mutable_python_struct_or_union(mutable_types.structured_annotation_with_default, self)

    def _to_py3(self):
        import importlib
        py3_types = importlib.import_module("test.fixtures.basic-structured-annotations.module.types")
        from thrift.py3 import converter
        return converter.to_py3_struct(py3_types.structured_annotation_with_default, self)

    def _to_py_deprecated(self):
        import importlib
        from thrift.util import converter
        try:
            py_deprecated_types = importlib.import_module("module.ttypes")
            return converter.to_py_struct(py_deprecated_types.structured_annotation_with_default, self)
        except ModuleNotFoundError:
            py_asyncio_types = importlib.import_module("module.ttypes")
            return converter.to_py_struct(py_asyncio_types.structured_annotation_with_default, self)

_fbthrift_ABCMeta.register(_fbthrift_abstract_types.structured_annotation_with_default, structured_annotation_with_default)
_fbthrift_structured_annotation_with_default = structured_annotation_with_default

class structured_annotation_recursive(metaclass=_fbthrift_python_types.StructMeta):
    _fbthrift_SPEC = (
        _fbthrift_python_types.FieldInfo(
            1,  # id
            _fbthrift_python_types.FieldQualifier.Unqualified, # qualifier
            "name",  # name
            "name",  # python name (from @python.Name annotation)
            _fbthrift_python_types.typeinfo_string,  # typeinfo
            None,  # default value
            None,  # adapter info
            False, # field type is primitive
            8, # IDL type (see BaseTypeEnum)
        ),
        _fbthrift_python_types.FieldInfo(
            2,  # id
            _fbthrift_python_types.FieldQualifier.Optional, # qualifier
            "recurse",  # name
            "recurse",  # python name (from @python.Name annotation)
            lambda: _fbthrift_python_types.StructTypeInfo(structured_annotation_recursive),  # typeinfo
            None,  # default value
            None,  # adapter info
            False, # field type is primitive
            11, # IDL type (see BaseTypeEnum)
        ),
        _fbthrift_python_types.FieldInfo(
            3,  # id
            _fbthrift_python_types.FieldQualifier.Unqualified, # qualifier
            "forward",  # name
            "forward",  # python name (from @python.Name annotation)
            lambda: _fbthrift_python_types.StructTypeInfo(structured_annotation_forward),  # typeinfo
            None,  # default value
            None,  # adapter info
            False, # field type is primitive
            11, # IDL type (see BaseTypeEnum)
        ),
    )

    @staticmethod
    def __get_thrift_name__() -> str:
        return "module.structured_annotation_recursive"

    @staticmethod
    def __get_thrift_uri__():
        return "test.dev/fixtures/basic-structured-annotations/structured_annotation_recursive"

    @classmethod
    def _fbthrift_auto_migrate_enabled(cls):
        return False

    @staticmethod
    def __get_metadata__():
        return _fbthrift_metadata__struct_structured_annotation_recursive()

    def _to_python(self):
        return self

    def _to_mutable_python(self):
        from thrift.python import mutable_converter
        import importlib
        mutable_types = importlib.import_module("test.fixtures.basic-structured-annotations.module.thrift_mutable_types")
        return mutable_converter.to_mutable_python_struct_or_union(mutable_types.structured_annotation_recursive, self)

    def _to_py3(self):
        import importlib
        py3_types = importlib.import_module("test.fixtures.basic-structured-annotations.module.types")
        from thrift.py3 import converter
        return converter.to_py3_struct(py3_types.structured_annotation_recursive, self)

    def _to_py_deprecated(self):
        import importlib
        from thrift.util import converter
        try:
            py_deprecated_types = importlib.import_module("module.ttypes")
            return converter.to_py_struct(py_deprecated_types.structured_annotation_recursive, self)
        except ModuleNotFoundError:
            py_asyncio_types = importlib.import_module("module.ttypes")
            return converter.to_py_struct(py_asyncio_types.structured_annotation_recursive, self)

_fbthrift_ABCMeta.register(_fbthrift_abstract_types.structured_annotation_recursive, structured_annotation_recursive)
_fbthrift_structured_annotation_recursive = structured_annotation_recursive

class structured_annotation_forward(metaclass=_fbthrift_python_types.StructMeta):
    _fbthrift_SPEC = (
        _fbthrift_python_types.FieldInfo(
            1,  # id
            _fbthrift_python_types.FieldQualifier.Unqualified, # qualifier
            "count",  # name
            "count",  # python name (from @python.Name annotation)
            _fbthrift_python_types.typeinfo_i64,  # typeinfo
            None,  # default value
            None,  # adapter info
            True, # field type is primitive
            5, # IDL type (see BaseTypeEnum)
        ),
    )

    @staticmethod
    def __get_thrift_name__() -> str:
        return "module.structured_annotation_forward"

    @staticmethod
    def __get_thrift_uri__():
        return "test.dev/fixtures/basic-structured-annotations/structured_annotation_forward"

    @classmethod
    def _fbthrift_auto_migrate_enabled(cls):
        return False

    @staticmethod
    def __get_metadata__():
        return _fbthrift_metadata__struct_structured_annotation_forward()

    def _to_python(self):
        return self

    def _to_mutable_python(self):
        from thrift.python import mutable_converter
        import importlib
        mutable_types = importlib.import_module("test.fixtures.basic-structured-annotations.module.thrift_mutable_types")
        return mutable_converter.to_mutable_python_struct_or_union(mutable_types.structured_annotation_forward, self)

    def _to_py3(self):
        import importlib
        py3_types = importlib.import_module("test.fixtures.basic-structured-annotations.module.types")
        from thrift.py3 import converter
        return converter.to_py3_struct(py3_types.structured_annotation_forward, self)

    def _to_py_deprecated(self):
        import importlib
        from thrift.util import converter
        try:
            py_deprecated_types = importlib.import_module("module.ttypes")
            return converter.to_py_struct(py_deprecated_types.structured_annotation_forward, self)
        except ModuleNotFoundError:
            py_asyncio_types = importlib.import_module("module.ttypes")
            return converter.to_py_struct(py_asyncio_types.structured_annotation_forward, self)

_fbthrift_ABCMeta.register(_fbthrift_abstract_types.structured_annotation_forward, structured_annotation_forward)
_fbthrift_structured_annotation_forward = structured_annotation_forward

class structured_annotation_nested(metaclass=_fbthrift_python_types.StructMeta):
    _fbthrift_SPEC = (
        _fbthrift_python_types.FieldInfo(
            1,  # id
            _fbthrift_python_types.FieldQualifier.Unqualified, # qualifier
            "name",  # name
            "name",  # python name (from @python.Name annotation)
            _fbthrift_python_types.typeinfo_string,  # typeinfo
            None,  # default value
            None,  # adapter info
            False, # field type is primitive
            8, # IDL type (see BaseTypeEnum)
        ),
        _fbthrift_python_types.FieldInfo(
            2,  # id
            _fbthrift_python_types.FieldQualifier.Unqualified, # qualifier
            "nest",  # name
            "nest",  # python name (from @python.Name annotation)
            lambda: _fbthrift_python_types.StructTypeInfo(structured_annotation_with_default),  # typeinfo
            None,  # default value
            None,  # adapter info
            False, # field type is primitive
            11, # IDL type (see BaseTypeEnum)
        ),
    )

    @staticmethod
    def __get_thrift_name__() -> str:
        return "module.structured_annotation_nested"

    @staticmethod
    def __get_thrift_uri__():
        return "test.dev/fixtures/basic-structured-annotations/structured_annotation_nested"

    @classmethod
    def _fbthrift_auto_migrate_enabled(cls):
        return False

    @staticmethod
    def __get_metadata__():
        return _fbthrift_metadata__struct_structured_annotation_nested()

    def _to_python(self):
        return self

    def _to_mutable_python(self):
        from thrift.python import mutable_converter
        import importlib
        mutable_types = importlib.import_module("test.fixtures.basic-structured-annotations.module.thrift_mutable_types")
        return mutable_converter.to_mutable_python_struct_or_union(mutable_types.structured_annotation_nested, self)

    def _to_py3(self):
        import importlib
        py3_types = importlib.import_module("test.fixtures.basic-structured-annotations.module.types")
        from thrift.py3 import converter
        return converter.to_py3_struct(py3_types.structured_annotation_nested, self)

    def _to_py_deprecated(self):
        import importlib
        from thrift.util import converter
        try:
            py_deprecated_types = importlib.import_module("module.ttypes")
            return converter.to_py_struct(py_deprecated_types.structured_annotation_nested, self)
        except ModuleNotFoundError:
            py_asyncio_types = importlib.import_module("module.ttypes")
            return converter.to_py_struct(py_asyncio_types.structured_annotation_nested, self)

_fbthrift_ABCMeta.register(_fbthrift_abstract_types.structured_annotation_nested, structured_annotation_nested)
_fbthrift_structured_annotation_nested = structured_annotation_nested

class MyStruct(metaclass=_fbthrift_python_types.StructMeta):
    _fbthrift_SPEC = (
        _fbthrift_python_types.FieldInfo(
            1,  # id
            _fbthrift_python_types.FieldQualifier.Unqualified, # qualifier
            "annotated_field",  # name
            "annotated_field",  # python name (from @python.Name annotation)
            _fbthrift_python_types.typeinfo_i64,  # typeinfo
            None,  # default value
            None,  # adapter info
            True, # field type is primitive
            5, # IDL type (see BaseTypeEnum)
        ),
        _fbthrift_python_types.FieldInfo(
            2,  # id
            _fbthrift_python_types.FieldQualifier.Unqualified, # qualifier
            "annotated_type",  # name
            "annotated_type",  # python name (from @python.Name annotation)
            _fbthrift_python_types.typeinfo_string,  # typeinfo
            None,  # default value
            None,  # adapter info
            False, # field type is primitive
            8, # IDL type (see BaseTypeEnum)
        ),
        _fbthrift_python_types.FieldInfo(
            3,  # id
            _fbthrift_python_types.FieldQualifier.Unqualified, # qualifier
            "annotated_recursive",  # name
            "annotated_recursive",  # python name (from @python.Name annotation)
            _fbthrift_python_types.typeinfo_string,  # typeinfo
            None,  # default value
            None,  # adapter info
            False, # field type is primitive
            8, # IDL type (see BaseTypeEnum)
        ),
        _fbthrift_python_types.FieldInfo(
            4,  # id
            _fbthrift_python_types.FieldQualifier.Unqualified, # qualifier
            "annotated_nested",  # name
            "annotated_nested",  # python name (from @python.Name annotation)
            _fbthrift_python_types.typeinfo_i64,  # typeinfo
            None,  # default value
            None,  # adapter info
            True, # field type is primitive
            5, # IDL type (see BaseTypeEnum)
        ),
    )

    @staticmethod
    def __get_thrift_name__() -> str:
        return "module.MyStruct"

    @staticmethod
    def __get_thrift_uri__():
        return "test.dev/fixtures/basic-structured-annotations/MyStruct"

    @classmethod
    def _fbthrift_auto_migrate_enabled(cls):
        return False

    @staticmethod
    def __get_metadata__():
        return _fbthrift_metadata__struct_MyStruct()

    def _to_python(self):
        return self

    def _to_mutable_python(self):
        from thrift.python import mutable_converter
        import importlib
        mutable_types = importlib.import_module("test.fixtures.basic-structured-annotations.module.thrift_mutable_types")
        return mutable_converter.to_mutable_python_struct_or_union(mutable_types.MyStruct, self)

    def _to_py3(self):
        import importlib
        py3_types = importlib.import_module("test.fixtures.basic-structured-annotations.module.types")
        from thrift.py3 import converter
        return converter.to_py3_struct(py3_types.MyStruct, self)

    def _to_py_deprecated(self):
        import importlib
        from thrift.util import converter
        try:
            py_deprecated_types = importlib.import_module("module.ttypes")
            return converter.to_py_struct(py_deprecated_types.MyStruct, self)
        except ModuleNotFoundError:
            py_asyncio_types = importlib.import_module("module.ttypes")
            return converter.to_py_struct(py_asyncio_types.MyStruct, self)

_fbthrift_ABCMeta.register(_fbthrift_abstract_types.MyStruct, MyStruct)
_fbthrift_MyStruct = MyStruct

class MyException(metaclass=_fbthrift_python_exceptions.GeneratedErrorMeta):
    _fbthrift_SPEC = (
        _fbthrift_python_types.FieldInfo(
            1,  # id
            _fbthrift_python_types.FieldQualifier.Unqualified, # qualifier
            "context",  # name
            "context",  # python name (from @python.Name annotation)
            _fbthrift_python_types.typeinfo_string,  # typeinfo
            None,  # default value
            None,  # adapter info
            False, # field type is primitive
            8, # IDL type (see BaseTypeEnum)
        ),
    )

    _fbthrift_abstract_base_class = _fbthrift_abstract_types.MyException


    @staticmethod
    def __get_thrift_name__() -> str:
        return "module.MyException"

    @staticmethod
    def __get_thrift_uri__():
        return "test.dev/fixtures/basic-structured-annotations/MyException"

    @classmethod
    def _fbthrift_auto_migrate_enabled(cls):
        return False

    @staticmethod
    def __get_metadata__():
        return _fbthrift_metadata__exception_MyException()

    def _to_python(self):
        return self

    def _to_mutable_python(self):
        from thrift.python import mutable_converter
        import importlib
        mutable_types = importlib.import_module("test.fixtures.basic-structured-annotations.module.thrift_mutable_types")
        return mutable_converter.to_mutable_python_struct_or_union(mutable_types.MyException, self)

    def _to_py3(self):
        import importlib
        py3_types = importlib.import_module("test.fixtures.basic-structured-annotations.module.types")
        from thrift.py3 import converter
        return converter.to_py3_struct(py3_types.MyException, self)

    def _to_py_deprecated(self):
        import importlib
        from thrift.util import converter
        try:
            py_deprecated_types = importlib.import_module("module.ttypes")
            return converter.to_py_struct(py_deprecated_types.MyException, self)
        except ModuleNotFoundError:
            py_asyncio_types = importlib.import_module("module.ttypes")
            return converter.to_py_struct(py_asyncio_types.MyException, self)
_fbthrift_MyException = MyException

class MyUnion(metaclass=_fbthrift_python_types.UnionMeta):
    _fbthrift_SPEC = (
        _fbthrift_python_types.FieldInfo(
            1,  # id
            _fbthrift_python_types.FieldQualifier.Unqualified, # qualifier
            "first",  # name
            "first",  # python name (from @python.Name annotation)
            _fbthrift_python_types.typeinfo_string,  # typeinfo
            None,  # default value
            None,  # adapter info
            False, # field type is primitive
            8, # IDL type (see BaseTypeEnum)
        ),
        _fbthrift_python_types.FieldInfo(
            2,  # id
            _fbthrift_python_types.FieldQualifier.Unqualified, # qualifier
            "second",  # name
            "second",  # python name (from @python.Name annotation)
            _fbthrift_python_types.typeinfo_i64,  # typeinfo
            None,  # default value
            None,  # adapter info
            True, # field type is primitive
            5, # IDL type (see BaseTypeEnum)
        ),
    )

    _fbthrift_abstract_base_class = _fbthrift_abstract_types.MyUnion


    @staticmethod
    def __get_thrift_name__() -> str:
        return "module.MyUnion"

    @staticmethod
    def __get_thrift_uri__():
        return "test.dev/fixtures/basic-structured-annotations/MyUnion"

    @classmethod
    def _fbthrift_auto_migrate_enabled(cls):
        return False

    @staticmethod
    def __get_metadata__():
        return _fbthrift_metadata__struct_MyUnion()

    def _to_python(self):
        return self

    def _to_mutable_python(self):
        from thrift.python import mutable_converter
        import importlib
        mutable_types = importlib.import_module("test.fixtures.basic-structured-annotations.module.thrift_mutable_types")
        return mutable_converter.to_mutable_python_struct_or_union(mutable_types.MyUnion, self)

    def _to_py3(self):
        import importlib
        py3_types = importlib.import_module("test.fixtures.basic-structured-annotations.module.types")
        from thrift.py3 import converter
        return converter.to_py3_struct(py3_types.MyUnion, self)

    def _to_py_deprecated(self):
        import importlib
        from thrift.util import converter
        try:
            py_deprecated_types = importlib.import_module("module.ttypes")
            return converter.to_py_struct(py_deprecated_types.MyUnion, self)
        except ModuleNotFoundError:
            py_asyncio_types = importlib.import_module("module.ttypes")
            return converter.to_py_struct(py_asyncio_types.MyUnion, self)

_fbthrift_ABCMeta.register(_fbthrift_abstract_types.MyUnion, MyUnion)
_fbthrift_MyUnion = MyUnion

# This unfortunately has to be down here to prevent circular imports
import test.fixtures.basic-structured-annotations.module.thrift_metadata as _fbthrift__test__fixtures__basic-structured-annotations__module__thrift_metadata

_fbthrift_all_enums = [
    MyEnum,
]


def _fbthrift_metadata__struct_runtime_annotation():
    return _fbthrift__test__fixtures__basic-structured-annotations__module__thrift_metadata.gen_metadata_struct_runtime_annotation()


def _fbthrift_metadata__struct_structured_annotation_inline():
    return _fbthrift__test__fixtures__basic-structured-annotations__module__thrift_metadata.gen_metadata_struct_structured_annotation_inline()


def _fbthrift_metadata__struct_structured_annotation_with_default():
    return _fbthrift__test__fixtures__basic-structured-annotations__module__thrift_metadata.gen_metadata_struct_structured_annotation_with_default()


def _fbthrift_metadata__struct_structured_annotation_recursive():
    return _fbthrift__test__fixtures__basic-structured-annotations__module__thrift_metadata.gen_metadata_struct_structured_annotation_recursive()


def _fbthrift_metadata__struct_structured_annotation_forward():
    return _fbthrift__test__fixtures__basic-structured-annotations__module__thrift_metadata.gen_metadata_struct_structured_annotation_forward()


def _fbthrift_metadata__struct_structured_annotation_nested():
    return _fbthrift__test__fixtures__basic-structured-annotations__module__thrift_metadata.gen_metadata_struct_structured_annotation_nested()


def _fbthrift_metadata__struct_MyStruct():
    return _fbthrift__test__fixtures__basic-structured-annotations__module__thrift_metadata.gen_metadata_struct_MyStruct()


def _fbthrift_metadata__exception_MyException():
    return _fbthrift__test__fixtures__basic-structured-annotations__module__thrift_metadata.gen_metadata_exception_MyException()


def _fbthrift_metadata__struct_MyUnion():
    return _fbthrift__test__fixtures__basic-structured-annotations__module__thrift_metadata.gen_metadata_struct_MyUnion()


_fbthrift_all_structs = [
    runtime_annotation,
    structured_annotation_inline,
    structured_annotation_with_default,
    structured_annotation_recursive,
    structured_annotation_forward,
    structured_annotation_nested,
    MyStruct,
    MyException,
    MyUnion,
]
_fbthrift_python_types.fill_specs(*_fbthrift_all_structs)


MyConst = _fbthrift_python_types.Map(_fbthrift_python_types.typeinfo_string, _fbthrift_python_types.typeinfo_string, { "ENUMERATOR": "enum", "CONST": "const"})

annotated_with_default_string = str
annotated_inline_string = str
annotated_inline_i64 = int



class _fbthrift_MyService_first_args(metaclass=_fbthrift_python_types.StructMeta):
    _fbthrift_SPEC = (
    )


class _fbthrift_MyService_first_result(metaclass=_fbthrift_python_types.StructMeta):
    _fbthrift_SPEC = (
        _fbthrift_python_types.FieldInfo(
            0,  # id
            _fbthrift_python_types.FieldQualifier.Optional, # qualifier
            "success",  # name
            "success", # name
            _fbthrift_python_types.typeinfo_string,  # typeinfo
            None,  # default value
            None,  # adapter info
            False, # field type is primitive
        ),
    )


class _fbthrift_MyService_second_args(metaclass=_fbthrift_python_types.StructMeta):
    _fbthrift_SPEC = (
        _fbthrift_python_types.FieldInfo(
            1,  # id
            _fbthrift_python_types.FieldQualifier.Unqualified, # qualifier
            "count",  # name
            "count",  # python name (from @python.Name annotation)
            _fbthrift_python_types.typeinfo_i64,  # typeinfo
            None,  # default value
            None,  # adapter info
            True, # field type is primitive
            5, # IDL type (see BaseTypeEnum)
        ),
    )


class _fbthrift_MyService_second_result(metaclass=_fbthrift_python_types.StructMeta):
    _fbthrift_SPEC = (
        _fbthrift_python_types.FieldInfo(
            0,  # id
            _fbthrift_python_types.FieldQualifier.Optional, # qualifier
            "success",  # name
            "success", # name
            _fbthrift_python_types.typeinfo_bool,  # typeinfo
            None,  # default value
            None,  # adapter info
            True, # field type is primitive
        ),
    )



_fbthrift_python_types.fill_specs(
    _fbthrift_MyService_first_args,
    _fbthrift_MyService_first_result,
    _fbthrift_MyService_second_args,
    _fbthrift_MyService_second_result,
)
