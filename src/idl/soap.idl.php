<?php
/**
 * Automatically generated by running "php schema.php soap".
 *
 * You may modify the file, but re-running schema.php against this file will
 * standardize the format without losing your schema changes. It does lose
 * any changes that are not part of schema. Use "note" field to comment on
 * schema itself, and "note" fields are not used in any code generation but
 * only staying within this file.
 */
///////////////////////////////////////////////////////////////////////////////
// Preamble: C++ code inserted at beginning of ext_{name}.h

DefinePreamble(<<<CPP
#include <system/gen/php/classes/exception.h>
#include <runtime/ext/soap/soap.h>
CPP
);

///////////////////////////////////////////////////////////////////////////////
// Constants
//
// array (
//   'name' => name of the constant
//   'type' => type of the constant
//   'note' => additional note about this constant's schema
// )


///////////////////////////////////////////////////////////////////////////////
// Functions
//
// array (
//   'name'   => name of the function
//   'desc'   => description of the function's purpose
//   'flags'  => attributes of the function, see base.php for possible values
//   'opt'    => optimization callback function's name for compiler
//   'note'   => additional note about this function's schema
//   'return' =>
//      array (
//        'type'  => return type, use Reference for ref return
//        'desc'  => description of the return value
//      )
//   'args'   => arguments
//      array (
//        'name'  => name of the argument
//        'type'  => type of the argument, use Reference for output parameter
//        'value' => default value of the argument
//        'desc'  => description of the argument
//      )
// )

DefineFunction(
  array(
    'name'   => "use_soap_error_handler",
    'desc'   => "This function sets whether or not to use the SOAP error handler in the SOAP server. It will return the previous value. If set to TRUE, details of errors in a SoapServer application will be sent to the clients. If FALSE, no information will be sent.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
      'desc'   => "Returns TRUE on success or FALSE on failure.",
    ),
    'args'   => array(
      array(
        'name'   => "handler",
        'type'   => Boolean,
        'value'  => "true",
        'desc'   => "Set to TRUE to send error details to clients.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "is_soap_fault",
    'desc'   => "This function is useful to check if the SOAP call failed, but without using exceptions. To use it, create a SoapClient object with the exceptions option set to zero or FALSE. In this case, the SOAP method will return a special SoapFault object which encapsulates the fault details (faultcode, faultstring, faultactor and faultdetails).\n\nIf exceptions is not set then SOAP call will throw an exception on error. is_soap_fault() checks if the given parameter is a SoapFault object.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
      'desc'   => "This will return TRUE on error, and FALSE otherwise.",
    ),
    'args'   => array(
      array(
        'name'   => "fault",
        'type'   => Variant,
        'desc'   => "The object to test.",
      ),
    ),
  ));


///////////////////////////////////////////////////////////////////////////////
// Classes
//
// BeginClass
// array (
//   'name'   => name of the class
//   'desc'   => description of the class's purpose
//   'flags'  => attributes of the class, see base.php for possible values
//   'note'   => additional note about this class's schema
//   'parent' => parent class name, if any
//   'ifaces' => array of interfaces tihs class implements
//   'bases'  => extra internal and special base classes this class requires
//   'footer' => extra C++ inserted at end of class declaration
// )
//
// DefineConstant(..)
// DefineConstant(..)
// ...
// DefineFunction(..)
// DefineFunction(..)
// ...
// DefineProperty
// DefineProperty
//
// array (
//   'name'  => name of the property
//   'type'  => type of the property
//   'flags' => attributes of the property
//   'desc'  => description of the property
//   'note'  => additional note about this property's schema
// )
//
// EndClass()

///////////////////////////////////////////////////////////////////////////////

BeginClass(
  array(
    'name'   => "SoapServer",
    'desc'   => "The SoapServer class provides a server for the » SOAP 1.1 and » SOAP 1.2 protocols. It can be used with or without a WSDL service description.",
    'flags'  =>  HasDocComment,
    'footer' => <<<EOT

  public: int                        m_type;
  public: soapFunctions              m_soap_functions;
  public: soapClass                  m_soap_class;
  public: Object                     m_soap_object;
  public: String                     m_actor;
  public: String                     m_uri;
  public: int                        m_version;
  public: sdl                       *m_sdl;
  public: xmlCharEncodingHandlerPtr  m_encoding;
  public: Array                      m_classmap;
  public: encodeMap                 *m_typemap;
  public: int                        m_features;
  public: Array                      m_soap_headers;
  public: int                        m_send_errors;
EOT
,
  ));

DefineFunction(
  array(
    'name'   => "__construct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "wsdl",
        'type'   => Variant,
      ),
      array(
        'name'   => "options",
        'type'   => VariantMap,
        'value'  => "null_array",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "setclass",
    'desc'   => "Exports all methods from specified class.\n\nThe object can be made persistent across request for a given PHP session with the SoapServer::setPersistence() method.",
    'flags'  =>  HasDocComment | VariableArguments,
    'return' => array(
      'type'   => null,
      'desc'   => "No value is returned.",
    ),
    'args'   => array(
      array(
        'name'   => "name",
        'type'   => String,
        'desc'   => "The name of the exported class.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "setobject",
    'desc'   => "This sets a specific object as the handler for SOAP requests, rather than just a class as in SoapServer::setClass().",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => null,
      'desc'   => "No value is returned.",
    ),
    'args'   => array(
      array(
        'name'   => "obj",
        'type'   => Object,
        'desc'   => "The object to handle the requests.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "addfunction",
    'desc'   => "Exports one or more functions for remote clients",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => null,
      'desc'   => "No value is returned.",
    ),
    'args'   => array(
      array(
        'name'   => "func",
        'type'   => Variant,
        'desc'   => "To export one function, pass the function name into this parameter as a string.\n\nTo export several functions, pass an array of function names.\n\nTo export all the functions, pass a special constant SOAP_FUNCTIONS_ALL.\n\nfunctions must receive all input arguments in the same order as defined in the WSDL file (They should not receive any output parameters as arguments) and return one or more values. To return several values they must return an array with named output parameters.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "getfunctions",
    'desc'   => "Returns a list of the defined functions in the SoapServer object. This method returns the list of all functions added by SoapServer::addFunction() or SoapServer::setClass().",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
      'desc'   => "An array of the defined functions.",
    ),
  ));

DefineFunction(
  array(
    'name'   => "handle",
    'desc'   => "Processes a SOAP request, calls necessary functions, and sends a response back.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => null,
      'desc'   => "No value is returned.",
    ),
    'args'   => array(
      array(
        'name'   => "request",
        'type'   => String,
        'value'  => "null_string",
        'desc'   => "The SOAP request. If this argument is omitted, the request is assumed to be in the raw POST data of the HTTP request.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "setpersistence",
    'desc'   => "This function allows saving data between requests in a PHP session. It works only with a server that exports functions from a class with SoapServer::setClass() or SoapServer::setObject().\n\nThe persistence SOAP_PERSISTENCE_SESSION makes only objects of the given class persistent, but not the class static data. In this case, use \$this->bar instead of self::\$bar.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => null,
      'desc'   => "No value is returned.",
    ),
    'args'   => array(
      array(
        'name'   => "mode",
        'type'   => Int64,
        'desc'   => "One of the SOAP_PERSISTENCE_XXX constants.\n\nSOAP_PERSISTENCE_REQUEST - persist the object for the duration of a request.\n\nSOAP_PERSISTENCE_SESSION - persist the object for the duration of a session.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "fault",
    'desc'   => "Sends a response to the client of the current request indicating an error.\n\nThis can only be called when handling a request.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => null,
      'desc'   => "No value is returned.",
    ),
    'args'   => array(
      array(
        'name'   => "code",
        'type'   => Variant,
        'desc'   => "The error code to return",
      ),
      array(
        'name'   => "fault",
        'type'   => String,
        'desc'   => "A brief description of the error",
      ),
      array(
        'name'   => "actor",
        'type'   => String,
        'value'  => "null_string",
        'desc'   => "A string identifying the actor that caused the fault.",
      ),
      array(
        'name'   => "detail",
        'type'   => Variant,
        'value'  => "null",
        'desc'   => "More details of the fault",
      ),
      array(
        'name'   => "name",
        'type'   => String,
        'value'  => "null_string",
        'desc'   => "The name of the fault. This can be used to select a name from a WSDL file.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "addsoapheader",
    'desc'   => "Adds a SOAP header to be returned with the response to the current request.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => null,
      'desc'   => "No value is returned.",
    ),
    'args'   => array(
      array(
        'name'   => "fault",
        'type'   => Object,
        'desc'   => "The header to be returned.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "__destruct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
  ));

EndClass(
);

///////////////////////////////////////////////////////////////////////////////

BeginClass(
  array(
    'name'   => "SoapClient",
    'desc'   => "The SoapClient class provides a client for » SOAP 1.1, » SOAP 1.2 servers. It can be used in WSDL or non-WSDL mode.",
    'flags'  =>  HasDocComment,
    'footer' => <<<EOT

  public: int                         m_soap_version;
  public: sdl                        *m_sdl;
  public: xmlCharEncodingHandlerPtr   m_encoding;
  public: encodeMap                  *m_typemap;
  public: Array                       m_classmap;
  public: int                         m_features;
  public: String                      m_uri;
  public: String                      m_location;
  public: int                         m_style;
  public: int                         m_use;
  public: String                      m_login;
  public: String                      m_password;
  public: int                         m_authentication;
  public: bool                        m_digest;
  public: String                      m_proxy_host;
  public: int                         m_proxy_port;
  public: String                      m_proxy_login;
  public: String                      m_proxy_password;
  public: int                         m_connection_timeout;
  public: int                         m_max_redirect;
  public: bool                        m_use11;
  public: String                      m_user_agent;
  public: bool                        m_compression;
  public: Variant                     m_default_headers;
  public: Variant                     m_cookies;
  public: bool                        m_exceptions;
  public: Variant                     m_soap_fault;
  public: bool                        m_trace;
  public: Variant                     m_last_request;
  public: Variant                     m_last_response;
  public: Variant                     m_last_request_headers;
  public: Variant                     m_last_response_headers;

EOT
,
  ));

DefineFunction(
  array(
    'name'   => "__construct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "wsdl",
        'type'   => Variant,
      ),
      array(
        'name'   => "options",
        'type'   => VariantMap,
        'value'  => "null_array",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "__call",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
    'args'   => array(
      array(
        'name'   => "name",
        'type'   => Variant,
      ),
      array(
        'name'   => "args",
        'type'   => Variant,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "__soapcall",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
    'args'   => array(
      array(
        'name'   => "name",
        'type'   => String,
      ),
      array(
        'name'   => "args",
        'type'   => VariantMap,
      ),
      array(
        'name'   => "options",
        'type'   => VariantMap,
        'value'  => "null_array",
      ),
      array(
        'name'   => "input_headers",
        'type'   => Variant,
        'value'  => "null_variant",
      ),
      array(
        'name'   => "output_headers",
        'type'   => Variant | Reference,
        'value'  => "null",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "__getlastrequest",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
  ));

DefineFunction(
  array(
    'name'   => "__getlastresponse",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
  ));

DefineFunction(
  array(
    'name'   => "__getlastrequestheaders",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
  ));

DefineFunction(
  array(
    'name'   => "__getlastresponseheaders",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
  ));

DefineFunction(
  array(
    'name'   => "__getfunctions",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
  ));

DefineFunction(
  array(
    'name'   => "__gettypes",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
  ));

DefineFunction(
  array(
    'name'   => "__dorequest",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
    'args'   => array(
      array(
        'name'   => "buf",
        'type'   => String,
      ),
      array(
        'name'   => "location",
        'type'   => String,
      ),
      array(
        'name'   => "action",
        'type'   => String,
      ),
      array(
        'name'   => "version",
        'type'   => Int64,
      ),
      array(
        'name'   => "oneway",
        'type'   => Boolean,
        'value'  => "false",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "__setcookie",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
    'args'   => array(
      array(
        'name'   => "name",
        'type'   => String,
      ),
      array(
        'name'   => "value",
        'type'   => String,
        'value'  => "null_string",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "__setlocation",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
    'args'   => array(
      array(
        'name'   => "new_location",
        'type'   => String,
        'value'  => "null_string",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "__setsoapheaders",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
    ),
    'args'   => array(
      array(
        'name'   => "headers",
        'type'   => Variant,
        'value'  => "null_variant",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "__destruct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
  ));

EndClass(
);

///////////////////////////////////////////////////////////////////////////////

BeginClass(
  array(
    'name'   => "SoapVar",
    'desc'   => "A class representing a variable or object for use with SOAP services.",
    'flags'  =>  HasDocComment,
    'footer' => <<<EOT

  public: Variant m_value;
  public: int64   m_type;
  public: String  m_stype;
  public: String  m_ns;
  public: String  m_name;
  public: String  m_namens;
EOT
,
  ));

DefineFunction(
  array(
    'name'   => "__construct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "data",
        'type'   => Variant,
      ),
      array(
        'name'   => "type",
        'type'   => Variant,
      ),
      array(
        'name'   => "type_name",
        'type'   => String,
        'value'  => "null_string",
      ),
      array(
        'name'   => "type_namespace",
        'type'   => String,
        'value'  => "null_string",
      ),
      array(
        'name'   => "node_name",
        'type'   => String,
        'value'  => "null_string",
      ),
      array(
        'name'   => "node_namespace",
        'type'   => String,
        'value'  => "null_string",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "__destruct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
  ));

EndClass(
);

///////////////////////////////////////////////////////////////////////////////

BeginClass(
  array(
    'name'   => "SoapFault",
    'parent' => "Exception",
    'desc'   => "Represents a SOAP fault.",
    'flags'  =>  HasDocComment,
    'footer' => <<<EOT

  public: String  m_faultstring;
  public: String  m_faultcode;
  public: String  m_faultcodens;
  public: String  m_faultactor;
  public: Variant m_detail;
  public: String  m_name;
  public: Variant m_headerfault;
EOT
,
  ));

DefineFunction(
  array(
    'name'   => "__construct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "code",
        'type'   => Variant,
      ),
      array(
        'name'   => "message",
        'type'   => String,
      ),
      array(
        'name'   => "actor",
        'type'   => String,
        'value'  => "null_string",
      ),
      array(
        'name'   => "detail",
        'type'   => Variant,
        'value'  => "null",
      ),
      array(
        'name'   => "name",
        'type'   => String,
        'value'  => "null_string",
      ),
      array(
        'name'   => "header",
        'type'   => Variant,
        'value'  => "null",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "__tostring",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => String,
    ),
  ));

DefineFunction(
  array(
    'name'   => "__destruct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
  ));

EndClass(
);

///////////////////////////////////////////////////////////////////////////////

BeginClass(
  array(
    'name'   => "SoapParam",
    'desc'   => "Represents parameter to a SOAP call.",
    'flags'  =>  HasDocComment,
    'footer' => <<<EOT

  public: String  m_name;
  public: String  m_data;
EOT
,
  ));

DefineFunction(
  array(
    'name'   => "__construct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "data",
        'type'   => Variant,
      ),
      array(
        'name'   => "name",
        'type'   => String,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "__destruct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
  ));

EndClass(
);

///////////////////////////////////////////////////////////////////////////////

BeginClass(
  array(
    'name'   => "SoapHeader",
    'desc'   => "Represents a SOAP header.",
    'flags'  =>  HasDocComment,
    'footer' => <<<EOT

  public: String  m_namespace;
  public: String  m_name;
  public: Variant m_data;
  public: bool    m_mustUnderstand;
  public: Variant m_actor;
EOT
,
  ));

DefineFunction(
  array(
    'name'   => "__construct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "ns",
        'type'   => String,
      ),
      array(
        'name'   => "name",
        'type'   => String,
      ),
      array(
        'name'   => "data",
        'type'   => Variant,
        'value'  => "null",
      ),
      array(
        'name'   => "mustunderstand",
        'type'   => Boolean,
        'value'  => "false",
      ),
      array(
        'name'   => "actor",
        'type'   => Variant,
        'value'  => "null",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "__destruct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
  ));

EndClass(
);

