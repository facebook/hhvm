<?php
// Copyright 2004-present Facebook. All Rights Reserved.
// This file is @generated by
// fbcode/hphp/facebook/tools/code_model/Generate.sh

namespace HH\CodeModel {

/**
 * A type is the metadata for a set of values and a set of operations that
 * may be applied to the values in the set.
 */
class TypeData /*implements ITypeData*/ {
  use NamespaceMember;
  use TypeMember;
  use NamedNode;
  use Node;

  private /*?Vector<IAttribute>*/ $attributes;
  private /*?Vector<IModifier>*/ $modifiers;
  private /*?bool*/ $isClass;
  private /*?bool*/ $isInterface;
  private /*?Vector<ITypeData>*/ $typeArguments;
  private /*?Vector<ITypeData>*/ $baseTypes;
  private /*?Vector<ITypeData>*/ $interfaces;
  private /*?Vector<IFunctionData>*/ $methods;
  private /*?Vector<IPropertyData>*/ $properties;

  /** Zero or more attributes, for example: << __MockClass >>. */
  public function getAttributes() /*: Vector<IAttribute>*/ {
    if ($this->attributes === null) {
      $this->attributes = Vector {};
    }
    return $this->attributes;
  }
  /** Zero or more attributes, for example: << __MockClass >>. */
  public function setAttributes(/*Vector<IAttribute>*/ $value) /*: this*/ {
    $this->attributes = $value;
    return $this;
  }

  /** Zero or more modifiers, such as final. */
  public function getModifiers() /*: Vector<IModifier>*/ {
    if ($this->modifiers === null) {
      $this->modifiers = Vector {};
    }
    return $this->modifiers;
  }
  /** Zero or more modifiers, such as final. */
  public function setModifiers(/*Vector<IModifier>*/ $value) /*: this*/ {
    $this->modifiers = $value;
    return $this;
  }

  /** Indicates if this type is a class. */
  public function getIsClass() /*: bool*/ {
    if ($this->isClass === null) {
      return false;
    }
    return $this->isClass;
  }
  /** Indicates if this type is a class. */
  public function setIsClass(/*bool*/ $value) /*: this*/ {
    $this->isClass = $value;
    return $this;
  }

  /** Indicates if this type is an interface */
  public function getIsInterface() /*: bool*/ {
    if ($this->isInterface === null) {
      return false;
    }
    return $this->isInterface;
  }
  /** Indicates if this type is an interface */
  public function setIsInterface(/*bool*/ $value) /*: this*/ {
    $this->isInterface = $value;
    return $this;
  }

  /** Zero or more type references representing generic arguments. */
  public function getTypeArguments() /*: Vector<ITypeData>*/ {
    if ($this->typeArguments === null) {
      $this->typeArguments = Vector {};
    }
    return $this->typeArguments;
  }
  /** Zero or more type references representing generic arguments. */
  public function setTypeArguments(/*Vector<ITypeData>*/ $value) /*: this*/ {
    $this->typeArguments = $value;
    return $this;
  }

  /** Zero or one type references representing the base type. */
  public function getBaseTypes() /*: Vector<ITypeData>*/ {
    if ($this->baseTypes === null) {
      $this->baseTypes = Vector {};
    }
    return $this->baseTypes;
  }
  /** Zero or one type references representing the base type. */
  public function setBaseTypes(/*Vector<ITypeData>*/ $value) /*: this*/ {
    $this->baseTypes = $value;
    return $this;
  }

  /** Zero or more type references representing implemented interfaces. */
  public function getInterfaces() /*: Vector<ITypeData>*/ {
    if ($this->interfaces === null) {
      $this->interfaces = Vector {};
    }
    return $this->interfaces;
  }
  /** Zero or more type references representing implemented interfaces. */
  public function setInterfaces(/*Vector<ITypeData>*/ $value) /*: this*/ {
    $this->interfaces = $value;
    return $this;
  }

  /** Zero or more functions that are methods of this type. */
  public function getMethods() /*: Vector<IFunctionData>*/ {
    if ($this->methods === null) {
      $this->methods = Vector {};
    }
    return $this->methods;
  }
  /** Zero or more functions that are methods of this type. */
  public function setMethods(/*Vector<IFunctionData>*/ $value) /*: this*/ {
    $this->methods = $value;
    return $this;
  }

  /** Zero or more properties that belong to this type. */
  public function getProperties() /*: Vector<IPropertyData>*/ {
    if ($this->properties === null) {
      $this->properties = Vector {};
    }
    return $this->properties;
  }
  /** Zero or more properties that belong to this type. */
  public function setProperties(/*Vector<IPropertyData>*/ $value) /*: this*/ {
    $this->properties = $value;
    return $this;
  }

  /**
   * Returns $visitor->visitTypeData($this) if
   * such a method exists on $visitor.
   * Falls back to a base interface visit method if possible.
   * Otherwise it returns $visitor->visitNode() .
   */
  public function accept(/*mixed*/ $visitor) /*: mixed*/ {
    if (method_exists($visitor, "visitTypeData")) {
      // UNSAFE
      return $visitor->visitTypeData($this);
    }
    if ($this->getContainingNamespace() !== null) {
      if (method_exists($visitor, "visitINamespaceMember")) {
        // UNSAFE
        return $visitor->visitINamespaceMember($this);
      }
      }
    if ($this->getContainingType() !== null) {
      if (method_exists($visitor, "visitITypeMember")) {
        // UNSAFE
        return $visitor->visitITypeMember($this);
      }
      }
    if (method_exists($visitor, "visitINamedNode")) {
      // UNSAFE
      return $visitor->visitINamedNode($this);
    }
    // UNSAFE
    return $visitor->visitNode($this);
  }

  /**
   * Calls $visitor->visitTypeDataReference($this) if
   * such a method exists on $visitor. If not it returns null.
   */
  public function acceptAsReference(/*mixed*/ $visitor)/*: mixed*/{
    if (method_exists($visitor, "visitTypeDataReference")) {
      // UNSAFE
      return $visitor->visitTypeDataReference($this);
    }
    if ($this->getContainingNamespace() !== null) {
      if (method_exists($visitor, "visitINamespaceMemberReference")) {
        // UNSAFE
        return $visitor->visitINamespaceMemberReference($this);
      }
      }
    if ($this->getContainingType() !== null) {
      if (method_exists($visitor, "visitITypeMemberReference")) {
        // UNSAFE
        return $visitor->visitITypeMemberReference($this);
      }
      }
    if (method_exists($visitor, "visitINamedNodeReference")) {
      // UNSAFE
      return $visitor->visitINamedNodeReference($this);
    }
    // UNSAFE
    return $visitor->visitNodeReference($this);
  }

  /**
   * Yields a list of nodes that are children of this node.
   * A node has exactly one parent, so doing a depth
   * first traversal of a node graph using getChildren will
   * traverse a spanning tree.
   */
  public function getChildren() /*: Continuation<INode>*/ {
    // UNSAFE
    yield break;
  }

  /**
   * Yields a list of nodes that can be reached from this
   * node but are not children of this node. Most traversals
   * will not traverse the children of nodes reached via
   * getReferences.
   */
  public function getReferences() /*: Continuation<INode>*/ {
    if ($this->containingNamespace !== null) {
      yield $this->containingNamespace;
    }
    if ($this->containingType !== null) {
      yield $this->containingType;
    }
  }

}
}
