// @generated by Thrift for [[[ program path ]]]
// This file is probably not the place you want to edit!

package module // [[[ program thrift source path ]]]

import (
    "fmt"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
)


// (needed to ensure safety because of naive import list construction)
var _ = fmt.Printf
var _ = thrift.ZERO


type PersonID = int64

func NewPersonID() PersonID {
  return 0
}

func WritePersonID(item PersonID, p thrift.Protocol) error {
  if err := p.WriteI64(item); err != nil {
    return err
}
  return nil
}

func ReadPersonID(p thrift.Protocol) (PersonID, error) {
  var decodeResult PersonID
  decodeErr := func() error {
    result, err := p.ReadI64()
if err != nil {
    return err
}
    decodeResult = result
    return nil
  }()
  return decodeResult, decodeErr
}

type Animal int32

const (
    Animal_DOG Animal = 1
    Animal_CAT Animal = 2
    Animal_TARANTULA Animal = 3
)

// Enum value maps for Animal
var (
    AnimalToName = map[Animal]string {
        Animal_DOG: "DOG",
        Animal_CAT: "CAT",
        Animal_TARANTULA: "TARANTULA",
    }

    AnimalToValue = map[string]Animal {
        "DOG": Animal_DOG,
        "CAT": Animal_CAT,
        "TARANTULA": Animal_TARANTULA,
    }

    AnimalNames = []string{
        "DOG",
        "CAT",
        "TARANTULA",
    }

    AnimalValues = []Animal{
        Animal_DOG,
        Animal_CAT,
        Animal_TARANTULA,
    }
)

func (x Animal) String() string {
    if v, ok := AnimalToName[x]; ok {
        return v
    }
    return "<UNSET>"
}

func (x Animal) Ptr() *Animal {
    return &x
}

// Deprecated: Use AnimalToValue instead (e.g. `x, ok := AnimalToValue["name"]`).
func AnimalFromString(s string) (Animal, error) {
    if v, ok := AnimalToValue[s]; ok {
        return v, nil
    }
    return Animal(0), fmt.Errorf("not a valid Animal string")
}

// Deprecated: Use Animal.Ptr() instead.
func AnimalPtr(v Animal) *Animal {
    return &v
}


type Color struct {
    Red float64 `thrift:"red,1" json:"red" db:"red"`
    Green float64 `thrift:"green,2" json:"green" db:"green"`
    Blue float64 `thrift:"blue,3" json:"blue" db:"blue"`
    Alpha float64 `thrift:"alpha,4" json:"alpha" db:"alpha"`
}
// Compile time interface enforcer
var _ thrift.Struct = &Color{}


func NewColor() *Color {
    return (&Color{})
}

func (x *Color) GetRedNonCompat() float64 {
    return x.Red
}

func (x *Color) GetRed() float64 {
    return x.Red
}

func (x *Color) GetGreenNonCompat() float64 {
    return x.Green
}

func (x *Color) GetGreen() float64 {
    return x.Green
}

func (x *Color) GetBlueNonCompat() float64 {
    return x.Blue
}

func (x *Color) GetBlue() float64 {
    return x.Blue
}

func (x *Color) GetAlphaNonCompat() float64 {
    return x.Alpha
}

func (x *Color) GetAlpha() float64 {
    return x.Alpha
}

func (x *Color) SetRed(value float64) *Color {
    x.Red = value
    return x
}

func (x *Color) SetGreen(value float64) *Color {
    x.Green = value
    return x
}

func (x *Color) SetBlue(value float64) *Color {
    x.Blue = value
    return x
}

func (x *Color) SetAlpha(value float64) *Color {
    x.Alpha = value
    return x
}





func (x *Color) writeField1(p thrift.Protocol) error {  // Red
    if err := p.WriteFieldBegin("red", thrift.DOUBLE, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetRedNonCompat()
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Color) writeField2(p thrift.Protocol) error {  // Green
    if err := p.WriteFieldBegin("green", thrift.DOUBLE, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetGreenNonCompat()
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Color) writeField3(p thrift.Protocol) error {  // Blue
    if err := p.WriteFieldBegin("blue", thrift.DOUBLE, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetBlueNonCompat()
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Color) writeField4(p thrift.Protocol) error {  // Alpha
    if err := p.WriteFieldBegin("alpha", thrift.DOUBLE, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAlphaNonCompat()
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Color) readField1(p thrift.Protocol) error {  // Red
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.SetRed(result)
    return nil
}

func (x *Color) readField2(p thrift.Protocol) error {  // Green
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.SetGreen(result)
    return nil
}

func (x *Color) readField3(p thrift.Protocol) error {  // Blue
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.SetBlue(result)
    return nil
}

func (x *Color) readField4(p thrift.Protocol) error {  // Alpha
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.SetAlpha(result)
    return nil
}

func (x *Color) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use Color.Set* methods instead or set the fields directly.
type ColorBuilder struct {
    obj *Color
}

func NewColorBuilder() *ColorBuilder {
    return &ColorBuilder{
        obj: NewColor(),
    }
}

func (x *ColorBuilder) Red(value float64) *ColorBuilder {
    x.obj.Red = value
    return x
}

func (x *ColorBuilder) Green(value float64) *ColorBuilder {
    x.obj.Green = value
    return x
}

func (x *ColorBuilder) Blue(value float64) *ColorBuilder {
    x.obj.Blue = value
    return x
}

func (x *ColorBuilder) Alpha(value float64) *ColorBuilder {
    x.obj.Alpha = value
    return x
}

func (x *ColorBuilder) Emit() *Color {
    var objCopy Color = *x.obj
    return &objCopy
}

func (x *Color) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("Color"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Color) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // red
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // green
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // blue
            if err := x.readField3(p); err != nil {
                return err
            }
        case 4:  // alpha
            if err := x.readField4(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}


type Vehicle struct {
    Color *Color `thrift:"color,1" json:"color" db:"color"`
    LicensePlate *string `thrift:"licensePlate,2,optional" json:"licensePlate,omitempty" db:"licensePlate"`
    Description *string `thrift:"description,3,optional" json:"description,omitempty" db:"description"`
    Name *string `thrift:"name,4,optional" json:"name,omitempty" db:"name"`
    HasAC *bool `thrift:"hasAC,5,optional" json:"hasAC,omitempty" db:"hasAC"`
}
// Compile time interface enforcer
var _ thrift.Struct = &Vehicle{}


func NewVehicle() *Vehicle {
    return (&Vehicle{}).
        SetHasAC(false)
}

// Deprecated: Use NewVehicle().Color instead.
var Vehicle_Color_DEFAULT = NewVehicle().Color

// Deprecated: Use NewVehicle().LicensePlate instead.
var Vehicle_LicensePlate_DEFAULT = NewVehicle().LicensePlate

// Deprecated: Use NewVehicle().Description instead.
var Vehicle_Description_DEFAULT = NewVehicle().Description

// Deprecated: Use NewVehicle().Name instead.
var Vehicle_Name_DEFAULT = NewVehicle().Name

// Deprecated: Use NewVehicle().HasAC instead.
var Vehicle_HasAC_DEFAULT = NewVehicle().HasAC

func (x *Vehicle) GetColorNonCompat() *Color {
    return x.Color
}

func (x *Vehicle) GetColor() *Color {
    if !x.IsSetColor() {
      return NewColor()
    }

    return x.Color
}

func (x *Vehicle) GetLicensePlateNonCompat() *string {
    return x.LicensePlate
}

func (x *Vehicle) GetLicensePlate() string {
    if !x.IsSetLicensePlate() {
      return ""
    }

    return *x.LicensePlate
}

func (x *Vehicle) GetDescriptionNonCompat() *string {
    return x.Description
}

func (x *Vehicle) GetDescription() string {
    if !x.IsSetDescription() {
      return ""
    }

    return *x.Description
}

func (x *Vehicle) GetNameNonCompat() *string {
    return x.Name
}

func (x *Vehicle) GetName() string {
    if !x.IsSetName() {
      return ""
    }

    return *x.Name
}

func (x *Vehicle) GetHasACNonCompat() *bool {
    return x.HasAC
}

func (x *Vehicle) GetHasAC() bool {
    if !x.IsSetHasAC() {
      return false
    }

    return *x.HasAC
}

func (x *Vehicle) SetColor(value Color) *Vehicle {
    x.Color = &value
    return x
}

func (x *Vehicle) SetLicensePlate(value string) *Vehicle {
    x.LicensePlate = &value
    return x
}

func (x *Vehicle) SetDescription(value string) *Vehicle {
    x.Description = &value
    return x
}

func (x *Vehicle) SetName(value string) *Vehicle {
    x.Name = &value
    return x
}

func (x *Vehicle) SetHasAC(value bool) *Vehicle {
    x.HasAC = &value
    return x
}

func (x *Vehicle) IsSetColor() bool {
    return x.Color != nil
}

func (x *Vehicle) IsSetLicensePlate() bool {
    return x.LicensePlate != nil
}

func (x *Vehicle) IsSetDescription() bool {
    return x.Description != nil
}

func (x *Vehicle) IsSetName() bool {
    return x.Name != nil
}

func (x *Vehicle) IsSetHasAC() bool {
    return x.HasAC != nil
}

func (x *Vehicle) writeField1(p thrift.Protocol) error {  // Color
    if !x.IsSetColor() {
        return nil
    }

    if err := p.WriteFieldBegin("color", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetColorNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Vehicle) writeField2(p thrift.Protocol) error {  // LicensePlate
    if !x.IsSetLicensePlate() {
        return nil
    }

    if err := p.WriteFieldBegin("licensePlate", thrift.STRING, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetLicensePlateNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Vehicle) writeField3(p thrift.Protocol) error {  // Description
    if !x.IsSetDescription() {
        return nil
    }

    if err := p.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetDescriptionNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Vehicle) writeField4(p thrift.Protocol) error {  // Name
    if !x.IsSetName() {
        return nil
    }

    if err := p.WriteFieldBegin("name", thrift.STRING, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetNameNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Vehicle) writeField5(p thrift.Protocol) error {  // HasAC
    if !x.IsSetHasAC() {
        return nil
    }

    if err := p.WriteFieldBegin("hasAC", thrift.BOOL, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetHasACNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Vehicle) readField1(p thrift.Protocol) error {  // Color
    result := *NewColor()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetColor(result)
    return nil
}

func (x *Vehicle) readField2(p thrift.Protocol) error {  // LicensePlate
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetLicensePlate(result)
    return nil
}

func (x *Vehicle) readField3(p thrift.Protocol) error {  // Description
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetDescription(result)
    return nil
}

func (x *Vehicle) readField4(p thrift.Protocol) error {  // Name
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetName(result)
    return nil
}

func (x *Vehicle) readField5(p thrift.Protocol) error {  // HasAC
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetHasAC(result)
    return nil
}

func (x *Vehicle) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use Vehicle.Set* methods instead or set the fields directly.
type VehicleBuilder struct {
    obj *Vehicle
}

func NewVehicleBuilder() *VehicleBuilder {
    return &VehicleBuilder{
        obj: NewVehicle(),
    }
}

func (x *VehicleBuilder) Color(value *Color) *VehicleBuilder {
    x.obj.Color = value
    return x
}

func (x *VehicleBuilder) LicensePlate(value *string) *VehicleBuilder {
    x.obj.LicensePlate = value
    return x
}

func (x *VehicleBuilder) Description(value *string) *VehicleBuilder {
    x.obj.Description = value
    return x
}

func (x *VehicleBuilder) Name(value *string) *VehicleBuilder {
    x.obj.Name = value
    return x
}

func (x *VehicleBuilder) HasAC(value *bool) *VehicleBuilder {
    x.obj.HasAC = value
    return x
}

func (x *VehicleBuilder) Emit() *Vehicle {
    var objCopy Vehicle = *x.obj
    return &objCopy
}

func (x *Vehicle) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("Vehicle"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Vehicle) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // color
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // licensePlate
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // description
            if err := x.readField3(p); err != nil {
                return err
            }
        case 4:  // name
            if err := x.readField4(p); err != nil {
                return err
            }
        case 5:  // hasAC
            if err := x.readField5(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}


type Person struct {
    Id PersonID `thrift:"id,1" json:"id" db:"id"`
    Name string `thrift:"name,2" json:"name" db:"name"`
    Age *int16 `thrift:"age,3,optional" json:"age,omitempty" db:"age"`
    Address *string `thrift:"address,4,optional" json:"address,omitempty" db:"address"`
    FavoriteColor *Color `thrift:"favoriteColor,5,optional" json:"favoriteColor,omitempty" db:"favoriteColor"`
    Friends []PersonID `thrift:"friends,6,optional" json:"friends,omitempty" db:"friends"`
    BestFriend *PersonID `thrift:"bestFriend,7,optional" json:"bestFriend,omitempty" db:"bestFriend"`
    PetNames map[Animal]string `thrift:"petNames,8,optional" json:"petNames,omitempty" db:"petNames"`
    AfraidOfAnimal *Animal `thrift:"afraidOfAnimal,9,optional" json:"afraidOfAnimal,omitempty" db:"afraidOfAnimal"`
    Vehicles []*Vehicle `thrift:"vehicles,10,optional" json:"vehicles,omitempty" db:"vehicles"`
}
// Compile time interface enforcer
var _ thrift.Struct = &Person{}


func NewPerson() *Person {
    return (&Person{})
}

// Deprecated: Use NewPerson().Age instead.
var Person_Age_DEFAULT = NewPerson().Age

// Deprecated: Use NewPerson().Address instead.
var Person_Address_DEFAULT = NewPerson().Address

// Deprecated: Use NewPerson().FavoriteColor instead.
var Person_FavoriteColor_DEFAULT = NewPerson().FavoriteColor

// Deprecated: Use NewPerson().BestFriend instead.
var Person_BestFriend_DEFAULT = NewPerson().BestFriend

// Deprecated: Use NewPerson().AfraidOfAnimal instead.
var Person_AfraidOfAnimal_DEFAULT = NewPerson().AfraidOfAnimal

func (x *Person) GetIdNonCompat() PersonID {
    return x.Id
}

func (x *Person) GetId() PersonID {
    return x.Id
}

func (x *Person) GetNameNonCompat() string {
    return x.Name
}

func (x *Person) GetName() string {
    return x.Name
}

func (x *Person) GetAgeNonCompat() *int16 {
    return x.Age
}

func (x *Person) GetAge() int16 {
    if !x.IsSetAge() {
      return 0
    }

    return *x.Age
}

func (x *Person) GetAddressNonCompat() *string {
    return x.Address
}

func (x *Person) GetAddress() string {
    if !x.IsSetAddress() {
      return ""
    }

    return *x.Address
}

func (x *Person) GetFavoriteColorNonCompat() *Color {
    return x.FavoriteColor
}

func (x *Person) GetFavoriteColor() *Color {
    if !x.IsSetFavoriteColor() {
      return NewColor()
    }

    return x.FavoriteColor
}

func (x *Person) GetFriendsNonCompat() []PersonID {
    return x.Friends
}

func (x *Person) GetFriends() []PersonID {
    if !x.IsSetFriends() {
      return nil
    }

    return x.Friends
}

func (x *Person) GetBestFriendNonCompat() *PersonID {
    return x.BestFriend
}

func (x *Person) GetBestFriend() PersonID {
    if !x.IsSetBestFriend() {
      return NewPersonID()
    }

    return *x.BestFriend
}

func (x *Person) GetPetNamesNonCompat() map[Animal]string {
    return x.PetNames
}

func (x *Person) GetPetNames() map[Animal]string {
    if !x.IsSetPetNames() {
      return nil
    }

    return x.PetNames
}

func (x *Person) GetAfraidOfAnimalNonCompat() *Animal {
    return x.AfraidOfAnimal
}

func (x *Person) GetAfraidOfAnimal() Animal {
    if !x.IsSetAfraidOfAnimal() {
      return 0
    }

    return *x.AfraidOfAnimal
}

func (x *Person) GetVehiclesNonCompat() []*Vehicle {
    return x.Vehicles
}

func (x *Person) GetVehicles() []*Vehicle {
    if !x.IsSetVehicles() {
      return nil
    }

    return x.Vehicles
}

func (x *Person) SetId(value PersonID) *Person {
    x.Id = value
    return x
}

func (x *Person) SetName(value string) *Person {
    x.Name = value
    return x
}

func (x *Person) SetAge(value int16) *Person {
    x.Age = &value
    return x
}

func (x *Person) SetAddress(value string) *Person {
    x.Address = &value
    return x
}

func (x *Person) SetFavoriteColor(value Color) *Person {
    x.FavoriteColor = &value
    return x
}

func (x *Person) SetFriends(value []PersonID) *Person {
    x.Friends = value
    return x
}

func (x *Person) SetBestFriend(value PersonID) *Person {
    x.BestFriend = &value
    return x
}

func (x *Person) SetPetNames(value map[Animal]string) *Person {
    x.PetNames = value
    return x
}

func (x *Person) SetAfraidOfAnimal(value Animal) *Person {
    x.AfraidOfAnimal = &value
    return x
}

func (x *Person) SetVehicles(value []*Vehicle) *Person {
    x.Vehicles = value
    return x
}



func (x *Person) IsSetAge() bool {
    return x.Age != nil
}

func (x *Person) IsSetAddress() bool {
    return x.Address != nil
}

func (x *Person) IsSetFavoriteColor() bool {
    return x.FavoriteColor != nil
}

func (x *Person) IsSetFriends() bool {
    return x.Friends != nil
}

func (x *Person) IsSetBestFriend() bool {
    return x.BestFriend != nil
}

func (x *Person) IsSetPetNames() bool {
    return x.PetNames != nil
}

func (x *Person) IsSetAfraidOfAnimal() bool {
    return x.AfraidOfAnimal != nil
}

func (x *Person) IsSetVehicles() bool {
    return x.Vehicles != nil
}

func (x *Person) writeField1(p thrift.Protocol) error {  // Id
    if err := p.WriteFieldBegin("id", thrift.I64, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetIdNonCompat()
    err := WritePersonID(item, p)
if err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Person) writeField2(p thrift.Protocol) error {  // Name
    if err := p.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetNameNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Person) writeField3(p thrift.Protocol) error {  // Age
    if !x.IsSetAge() {
        return nil
    }

    if err := p.WriteFieldBegin("age", thrift.I16, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetAgeNonCompat()
    if err := p.WriteI16(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Person) writeField4(p thrift.Protocol) error {  // Address
    if !x.IsSetAddress() {
        return nil
    }

    if err := p.WriteFieldBegin("address", thrift.STRING, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetAddressNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Person) writeField5(p thrift.Protocol) error {  // FavoriteColor
    if !x.IsSetFavoriteColor() {
        return nil
    }

    if err := p.WriteFieldBegin("favoriteColor", thrift.STRUCT, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetFavoriteColorNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Person) writeField6(p thrift.Protocol) error {  // Friends
    if !x.IsSetFriends() {
        return nil
    }

    if err := p.WriteFieldBegin("friends", thrift.SET, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetFriendsNonCompat()
    if err := p.WriteSetBegin(thrift.I64, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        err := WritePersonID(item, p)
if err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Person) writeField7(p thrift.Protocol) error {  // BestFriend
    if !x.IsSetBestFriend() {
        return nil
    }

    if err := p.WriteFieldBegin("bestFriend", thrift.I64, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetBestFriendNonCompat()
    err := WritePersonID(item, p)
if err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Person) writeField8(p thrift.Protocol) error {  // PetNames
    if !x.IsSetPetNames() {
        return nil
    }

    if err := p.WriteFieldBegin("petNames", thrift.MAP, 8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPetNamesNonCompat()
    if err := p.WriteMapBegin(thrift.I32, thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteI32(int32(item)); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Person) writeField9(p thrift.Protocol) error {  // AfraidOfAnimal
    if !x.IsSetAfraidOfAnimal() {
        return nil
    }

    if err := p.WriteFieldBegin("afraidOfAnimal", thrift.I32, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetAfraidOfAnimalNonCompat()
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Person) writeField10(p thrift.Protocol) error {  // Vehicles
    if !x.IsSetVehicles() {
        return nil
    }

    if err := p.WriteFieldBegin("vehicles", thrift.LIST, 10); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetVehiclesNonCompat()
    if err := p.WriteListBegin(thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Person) readField1(p thrift.Protocol) error {  // Id
    result, err := ReadPersonID(p)
if err != nil {
    return err
}

    x.SetId(result)
    return nil
}

func (x *Person) readField2(p thrift.Protocol) error {  // Name
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetName(result)
    return nil
}

func (x *Person) readField3(p thrift.Protocol) error {  // Age
    result, err := p.ReadI16()
if err != nil {
    return err
}

    x.SetAge(result)
    return nil
}

func (x *Person) readField4(p thrift.Protocol) error {  // Address
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetAddress(result)
    return nil
}

func (x *Person) readField5(p thrift.Protocol) error {  // FavoriteColor
    result := *NewColor()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetFavoriteColor(result)
    return nil
}

func (x *Person) readField6(p thrift.Protocol) error {  // Friends
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]PersonID, 0, size)
for i := 0; i < size; i++ {
    var elem PersonID
    {
        result, err := ReadPersonID(p)
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.SetFriends(result)
    return nil
}

func (x *Person) readField7(p thrift.Protocol) error {  // BestFriend
    result, err := ReadPersonID(p)
if err != nil {
    return err
}

    x.SetBestFriend(result)
    return nil
}

func (x *Person) readField8(p thrift.Protocol) error {  // PetNames
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[Animal]string, size)
for i := 0; i < size; i++ {
    var key Animal
    {
        enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := Animal(enumResult)
        key = result
    }

    var value string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetPetNames(result)
    return nil
}

func (x *Person) readField9(p thrift.Protocol) error {  // AfraidOfAnimal
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := Animal(enumResult)

    x.SetAfraidOfAnimal(result)
    return nil
}

func (x *Person) readField10(p thrift.Protocol) error {  // Vehicles
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]*Vehicle, 0, size)
for i := 0; i < size; i++ {
    var elem Vehicle
    {
        result := *NewVehicle()
err := result.Read(p)
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, &elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetVehicles(result)
    return nil
}

func (x *Person) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use Person.Set* methods instead or set the fields directly.
type PersonBuilder struct {
    obj *Person
}

func NewPersonBuilder() *PersonBuilder {
    return &PersonBuilder{
        obj: NewPerson(),
    }
}

func (x *PersonBuilder) Id(value PersonID) *PersonBuilder {
    x.obj.Id = value
    return x
}

func (x *PersonBuilder) Name(value string) *PersonBuilder {
    x.obj.Name = value
    return x
}

func (x *PersonBuilder) Age(value *int16) *PersonBuilder {
    x.obj.Age = value
    return x
}

func (x *PersonBuilder) Address(value *string) *PersonBuilder {
    x.obj.Address = value
    return x
}

func (x *PersonBuilder) FavoriteColor(value *Color) *PersonBuilder {
    x.obj.FavoriteColor = value
    return x
}

func (x *PersonBuilder) Friends(value []PersonID) *PersonBuilder {
    x.obj.Friends = value
    return x
}

func (x *PersonBuilder) BestFriend(value *PersonID) *PersonBuilder {
    x.obj.BestFriend = value
    return x
}

func (x *PersonBuilder) PetNames(value map[Animal]string) *PersonBuilder {
    x.obj.PetNames = value
    return x
}

func (x *PersonBuilder) AfraidOfAnimal(value *Animal) *PersonBuilder {
    x.obj.AfraidOfAnimal = value
    return x
}

func (x *PersonBuilder) Vehicles(value []*Vehicle) *PersonBuilder {
    x.obj.Vehicles = value
    return x
}

func (x *PersonBuilder) Emit() *Person {
    var objCopy Person = *x.obj
    return &objCopy
}

func (x *Person) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("Person"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := x.writeField8(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := x.writeField10(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Person) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // id
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // name
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // age
            if err := x.readField3(p); err != nil {
                return err
            }
        case 4:  // address
            if err := x.readField4(p); err != nil {
                return err
            }
        case 5:  // favoriteColor
            if err := x.readField5(p); err != nil {
                return err
            }
        case 6:  // friends
            if err := x.readField6(p); err != nil {
                return err
            }
        case 7:  // bestFriend
            if err := x.readField7(p); err != nil {
                return err
            }
        case 8:  // petNames
            if err := x.readField8(p); err != nil {
                return err
            }
        case 9:  // afraidOfAnimal
            if err := x.readField9(p); err != nil {
                return err
            }
        case 10:  // vehicles
            if err := x.readField10(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

