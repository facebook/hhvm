<?hh
class Universe implements \IUniverse {
  const type TContext = \IContext;
}
interface IUniverse {
  abstract const type TContext as \IContext;
}
trait TFrobQuery {
  require extends \BaseQuery<\Frob::TContext>;
}
abstract class BaseQuery<TContext> {}
interface ICreation {
  const type TContext = this::TUniverse::TContext;
  abstract const type TUniverse as \IUniverse;
}
interface IContext {}
abstract class Query extends \BaseQuery<this::TContext> {
  const type TContext = this::TCreation::TContext;
  abstract const type TCreation as \ICreation;
}
final class FrobQuery extends \Query {
  use \TFrobQuery;
  const type TCreation = \Frob;
}
function frob_query(): FrobQuery {
  return new FrobQuery();
}
class Frob implements \ICreation {
  const type TUniverse = \Universe;
}
