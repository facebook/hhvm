{
    "preamble": "",
    "consts": [
        {
            "name": "YAML_ANY_SCALAR_STYLE",
            "value": 0
        },
        {
            "name": "YAML_PLAIN_SCALAR_STYLE",
            "value": 1
        },
        {
            "name": "YAML_SINGLE_QUOTED_SCALAR_STYLE",
            "value": 2
        },
        {
            "name": "YAML_DOUBLE_QUOTED_SCALAR_STYLE",
            "value": 3
        },
        {
            "name": "YAML_LITERAL_SCALAR_STYLE",
            "value": 4
        },
        {
            "name": "YAML_FOLDED_SCALAR_STYLE",
            "value": 5
        },
        {
            "name": "YAML_NULL_TAG",
            "value": "tag:yaml.org,2002:null"
        },
        {
            "name": "YAML_BOOL_TAG",
            "value": "tag:yaml.org,2002:bool"
        },
        {
            "name": "YAML_STR_TAG",
            "value": "tag:yaml.org,2002:str"
        },
        {
            "name": "YAML_INT_TAG",
            "value": "tag:yaml.org,2002:int"
        },
        {
            "name": "YAML_FLOAT_TAG",
            "value": "tag:yaml.org,2002:float"
        },
        {
            "name": "YAML_TIMESTAMP_TAG",
            "value": "tag:yaml.org,2002:timestamp"
        },
        {
            "name": "YAML_SEQ_TAG",
            "value": "tag:yaml.org,2002:seq"
        },
        {
            "name": "YAML_MAP_TAG",
            "value": "tag:yaml.org,2002:map"
        },
        {
            "name": "YAML_ANY_ENCODING",
            "value": 0
        },
        {
            "name": "YAML_UTF8_ENCODING",
            "value": 1
        },
        {
            "name": "YAML_UTF16LE_ENCODING",
            "value": 2
        },
        {
            "name": "YAML_UTF16BE_ENCODING",
            "value": 3
        },
        {
            "name": "YAML_ANY_BREAK",
            "value": 0
        },
        {
            "name": "YAML_CR_BREAK",
            "value": 1
        },
        {
            "name": "YAML_LN_BREAK",
            "value": 2
        },
        {
            "name": "YAML_CRLN_BREAK",
            "value": 3
        }
    ],
    "funcs": [
        {
            "name": "yaml_emit_file",
            "desc": "Generate a YAML representation of the provided data in the filename.",
            "flags": [
                "ZendCompat",
                "NeedsActRec"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns TRUE on success."
            },
            "args": [
                {
                    "name": "filename",
                    "type": "String",
                    "desc": "Path to the file."
                },
                {
                    "name": "data",
                    "type": "Variant",
                    "desc": "The data being encoded. Can be any type except a resource."
                },
                {
                    "name": "encoding",
                    "type": "int",
                    "value": "k_YAML_ANY_ENCODING",
                    "desc": "Output character encoding chosen from YAML_ANY_ENCODING, YAML_UTF8_ENCODING, YAML_UTF16LE_ENCODING, YAML_UTF16BE_ENCODING."
                },
                {
                    "name": "linebreak",
                    "type": "int",
                    "value": "k_YAML_ANY_BREAK",
                    "desc": "Output linebreak style chosen from YAML_ANY_BREAK, YAML_CR_BREAK, YAML_LN_BREAK, YAML_CRLN_BREAK."
                },
                {
                    "name": "callbacks",
                    "type": "VariantMap",
                    "value": "null_array",
                    "desc": "Content handlers for emitting YAML nodes. Associative array of classname => callable mappings. See emit callbacks for more details."
                }
            ]
        },
        {
            "name": "yaml_emit",
            "desc": "Generate a YAML representation of the provided data.",
            "flags": [
                "ZendCompat",
                "NeedsActRec"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns a YAML encoded string on success."
            },
            "args": [
                {
                    "name": "data",
                    "type": "Variant",
                    "desc": "The data being encoded. Can be any type except a resource."
                },
                {
                    "name": "encoding",
                    "type": "int",
                    "value": "k_YAML_ANY_ENCODING",
                    "desc": "Output character encoding chosen from YAML_ANY_ENCODING, YAML_UTF8_ENCODING, YAML_UTF16LE_ENCODING, YAML_UTF16BE_ENCODING."
                },
                {
                    "name": "linebreak",
                    "type": "int",
                    "value": "k_YAML_ANY_BREAK",
                    "desc": "Output linebreak style chosen from YAML_ANY_BREAK, YAML_CR_BREAK, YAML_LN_BREAK, YAML_CRLN_BREAK."
                },
                {
                    "name": "callbacks",
                    "type": "VariantMap",
                    "value": "null_array",
                    "desc": "Content handlers for emitting YAML nodes. Associative array of classname => callable mappings. See emit callbacks for more details."
                }
            ]
        },
        {
            "name": "yaml_parse_file",
            "desc": "Convert all or part of a YAML document stream read from a file to a PHP variable.",
            "flags": [
                "ZendCompat",
                "NeedsActRec"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the value encoded in input in appropriate PHP type or FALSE on failure. If pos is -1 an array will be returned with one entry for each document found in the stream."
            },
            "args": [
                {
                    "name": "filename",
                    "type": "String",
                    "desc": "Path to the file."
                },
                {
                    "name": "pos",
                    "type": "Integer",
                    "default": 0,
                    "desc": "Document to extract from stream (-1 for all documents, 0 for first document, ...)."
                },
                {
                    "name": "ndocs",
                    "type": "Integer",
                    "default": 0,
                    "ref": true,
                    "desc": "If ndocs is provided, then it is filled with the number of documents found in stream."
                },
                {
                    "name": "callbacks",
                    "type": "VariantMap",
                    "value": "null_array",
                    "desc": "Content handlers for YAML nodes. Associative array of YAML tag => callable mappings. See parse callbacks for more details."
                }
            ]
        },
        {
            "name": "yaml_parse_url",
            "desc": "Convert all or part of a YAML document stream read from a URL to a PHP variable.",
            "flags": [
                "ZendCompat",
                "NeedsActRec"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the value encoded in input in appropriate PHP type or FALSE on failure. If pos is -1 an array will be returned with one entry for each document found in the stream."
            },
            "args": [
                {
                    "name": "url",
                    "type": "String",
                    "desc": "url should be of the form \"scheme:\/\/...\". PHP will search for a protocol handler (also known as a wrapper) for that scheme. If no wrappers for that protocol are registered, PHP will emit a notice to help you track potential problems in your script and then continue as though filename specifies a regular file."
                },
                {
                    "name": "pos",
                    "type": "Integer",
                    "default": 0,
                    "desc": "Document to extract from stream (-1 for all documents, 0 for first document, ...)."
                },
                {
                    "name": "ndocs",
                    "type": "Integer",
                    "default": 0,
                    "ref": true,
                    "desc": "If ndocs is provided, then it is filled with the number of documents found in stream."
                },
                {
                    "name": "callbacks",
                    "type": "VariantMap",
                    "value": "null_array",
                    "desc": "Content handlers for YAML nodes. Associative array of YAML tag => callable mappings. See parse callbacks for more details."
                }
            ]
        },
        {
            "name": "yaml_parse",
            "desc": "Convert all or part of a YAML document stream to a PHP variable.",
            "flags": [
                "ZendCompat",
                "NeedsActRec"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the value encoded in input in appropriate PHP type or FALSE on failure. If pos is -1 an array will be returned with one entry for each document found in the stream."
            },
            "args": [
                {
                    "name": "input",
                    "type": "String",
                    "desc": "The string to parse as a YAML document stream."
                },
                {
                    "name": "pos",
                    "type": "Integer",
                    "default": 0,
                    "desc": "Document to extract from stream (-1 for all documents, 0 for first document, ...)."
                },
                {
                    "name": "ndocs",
                    "type": "Integer",
                    "default": 0,
                    "ref": true,
                    "desc": "If ndocs is provided, then it is filled with the number of documents found in stream."
                },
                {
                    "name": "callbacks",
                    "type": "VariantMap",
                    "value": "null_array",
                    "desc": "Content handlers for YAML nodes. Associative array of YAML tag => callable mappings. See parse callbacks for more details."
                }
            ]
        }
    ],
    "classes": [
    ]
}
