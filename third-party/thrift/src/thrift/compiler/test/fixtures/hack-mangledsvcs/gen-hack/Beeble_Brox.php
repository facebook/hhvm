<?hh
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/**
 * Original thrift service:-
 * Brox
 */
interface Beeble_BroxAsyncIf extends \IThriftAsyncIf {
}

/**
 * Original thrift service:-
 * Brox
 */
interface Beeble_BroxIf extends \IThriftSyncIf {
}

/**
 * Original thrift service:-
 * Brox
 */
interface Beeble_BroxAsyncClientIf extends Beeble_BroxAsyncIf {
}

/**
 * Original thrift service:-
 * Brox
 */
interface Beeble_BroxClientIf extends \IThriftSyncIf {
}

/**
 * Original thrift service:-
 * Brox
 */
trait Beeble_BroxClientBase {
  require extends \ThriftClientBase;

}

class Beeble_BroxAsyncClient extends \ThriftClientBase implements Beeble_BroxAsyncClientIf {
  use Beeble_BroxClientBase;

}

class Beeble_BroxClient extends \ThriftClientBase implements Beeble_BroxClientIf {
  use Beeble_BroxClientBase;

  /* send and recv functions */
}

// HELPER FUNCTIONS AND STRUCTURES

class Beeble_BroxStaticMetadata implements \IThriftServiceStaticMetadata {
  public static function getServiceMetadata()[]: \tmeta_ThriftService {
    return tmeta_ThriftService::fromShape(
      shape(
        "name" => "module.Brox",
      )
    );
  }

  public static function getServiceMetadataResponse()[]: \tmeta_ThriftServiceMetadataResponse {
    return \tmeta_ThriftServiceMetadataResponse::fromShape(
      shape(
        'context' => \tmeta_ThriftServiceContext::fromShape(
          shape(
            'service_info' => self::getServiceMetadata(),
            'module' => \tmeta_ThriftModuleContext::fromShape(
              shape(
                'name' => 'module',
              )
            ),
          )
        ),
        'metadata' => \tmeta_ThriftMetadata::fromShape(
          shape(
            'enums' => dict[
            ],
            'structs' => dict[
            ],
            'exceptions' => dict[
            ],
            'services' => dict[
            ],
          )
        ),
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TServiceAnnotations {
    return shape(
      'service' => dict[],
      'functions' => dict[
      ],
    );
  }
}

