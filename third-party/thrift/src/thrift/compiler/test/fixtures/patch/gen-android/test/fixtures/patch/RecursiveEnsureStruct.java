/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package test.fixtures.patch;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class RecursiveEnsureStruct implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("RecursiveEnsureStruct");
  private static final TField NODES_FIELD_DESC = new TField("nodes", TType.MAP, (short)-1);

  public final Map<String,Recursive> nodes;
  public static final int NODES = -1;

  public RecursiveEnsureStruct(
      Map<String,Recursive> nodes) {
    this.nodes = nodes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RecursiveEnsureStruct(RecursiveEnsureStruct other) {
    if (other.isSetNodes()) {
      this.nodes = TBaseHelper.deepCopy(other.nodes);
    } else {
      this.nodes = null;
    }
  }

  public RecursiveEnsureStruct deepCopy() {
    return new RecursiveEnsureStruct(this);
  }

  public Map<String,Recursive> getNodes() {
    return this.nodes;
  }

  // Returns true if field nodes is set (has been assigned a value) and false otherwise
  public boolean isSetNodes() {
    return this.nodes != null;
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof RecursiveEnsureStruct))
      return false;
    RecursiveEnsureStruct that = (RecursiveEnsureStruct)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetNodes(), that.isSetNodes(), this.nodes, that.nodes)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {nodes});
  }

  // This is required to satisfy the TBase interface, but can't be implemented on immutable struture.
  public void read(TProtocol iprot) throws TException {
    throw new TException("unimplemented in android immutable structure");
  }

  public static RecursiveEnsureStruct deserialize(TProtocol iprot) throws TException {
    Map<String,Recursive> tmp_nodes = null;
    TField __field;
    iprot.readStructBegin();
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) {
        break;
      }
      switch (__field.id)
      {
        case NODES:
          if (__field.type == TType.MAP) {
            {
              TMap _map279 = iprot.readMapBegin();
              tmp_nodes = new HashMap<String,Recursive>(Math.max(0, 2*_map279.size));
              for (int _i280 = 0; 
                   (_map279.size < 0) ? iprot.peekMap() : (_i280 < _map279.size); 
                   ++_i280)
              {
                String _key281;
                Recursive _val282;
                _key281 = iprot.readString();
                _val282 = Recursive.deserialize(iprot);
                tmp_nodes.put(_key281, _val282);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    RecursiveEnsureStruct _that;
    _that = new RecursiveEnsureStruct(
      tmp_nodes
    );
    _that.validate();
    return _that;
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.nodes != null) {
      if (isSetNodes()) {
        oprot.writeFieldBegin(NODES_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.nodes.size()));
          for (Map.Entry<String, Recursive> _iter283 : this.nodes.entrySet())          {
            oprot.writeString(_iter283.getKey());
            _iter283.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    return TBaseHelper.toStringHelper(this, indent, prettyPrint);
  }

  public void validate() throws TException {
    // check for required fields
  }

}

