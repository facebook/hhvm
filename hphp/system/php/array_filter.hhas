.function [skip_frame dyn_callable] array_filter($arr = no_args, $func = start("""null"""), $flag = start("""null"""), $res = start) {
          .numiters 2;

# if we get here, a value was supplied for $res
          String "array_filter() expects at most 3 parameters"
          Jmp warning
no_args:  String "array_filter() expects at least 1 parameter, 0 given"
          Jmp warning
not_array:
          CGetL $arr
          InstanceOfD "HH\\KeyedTraversable"
          JmpNZ start_kt
          String "array_filter() expects parameter 1 to be an array or collection"
          Jmp warning
bad_param2:
          String "array_filter() expects parameter 2 to be a valid callback"
warning:  Cns "E_WARNING"
          FCallBuiltin 2 2 "trigger_error"
          PopR
          Null
          RetC

start:          IsTypeL $arr ArrLike
                JmpZ not_array

                IssetL $func
                JmpZ no_func

                CGetL $func
                DecodeCufIter 0 bad_param2
.try {
                NewLikeArrayL $arr 0
                SetL $res
                PopC

                CGetL $arr
                WIterInitK 1 endloop_a $v $k
  .try 1 {
                IssetL $flag
                JmpZ loop_val
                Int 1           # ARRAY_FILTER_USE_BOTH
                CGetL $flag
                Same
                JmpNZ loop_both
                Int 2           # ARRAY_FILTER_USE_KEY
                CGetL $flag
                Same
                JmpNZ loop_key

    loop_val:   FPushCufIter 1 0
                FIsParamByRefCufIter 0 Any 0
                JmpNZ by_ref_val
                CGetL $v
                Jmp call_val
    by_ref_val: VGetL $v
    call_val:   FCall 1 0 1 - "" ""
                UnboxR
                JmpZ next_val
                BaseL $res Define
                SetWithRefLML $k $v
    next_val:   WIterNextK 1 loop_val $v $k
                Jmp endloop_a

    loop_both:  FPushCufIter 2 0
                FIsParamByRefCufIter 0 Any 0
                JmpNZ by_ref_v_both
                CGetL $v
                Jmp pass_k_both
    by_ref_v_both:
                VGetL $v
    pass_k_both:FIsParamByRefCufIter 1 Any 0
                JmpNZ by_ref_k_both
                CGetL $k
                Jmp call_both
    by_ref_k_both:
                VGetL $k
    call_both:  FCall 2 0 1 - "" ""
                UnboxR
                JmpZ next_both
                BaseL $res Define
                SetWithRefLML $k $v
    next_both:  WIterNextK 1 loop_both $v $k
                Jmp endloop_a

    loop_key:   FPushCufIter 1 0
                FIsParamByRefCufIter 0 Any 0
                JmpNZ by_ref_key
                CGetL $k
                Jmp call_key
    by_ref_key: VGetL $k
    call_key:   FCall 1 0 1 - "" ""
                UnboxR
                JmpZ next_key
                BaseL $res Define
                SetWithRefLML $k $v
    next_key:   WIterNextK 1 loop_key $v $k
                Jmp endloop_a
  } .catch {
                IterFree 1
                Throw
  }
} .catch {
            CIterFree 0
            Throw
}

endloop_a:CIterFree 0
endloop_n:CGetL $res
          RetC

no_func:  NewLikeArrayL $arr 0
          SetL $res
          PopC
          CGetL $arr
          WIterInitK 1 endloop_n $v $k
.try 1 {
loop_n:   CGetL $v
          JmpZ skip_n
          BaseL $res Define
          SetWithRefLML $k $v
skip_n:   WIterNextK 1 loop_n $v $k
          Jmp endloop_n
} .catch {
          IterFree 1
          Throw
}


start_kt:         IssetL $func
                  JmpZ no_func_kt

                  CGetL $func
                  DecodeCufIter 0 bad_param2
.try {
                  NewLikeArrayL $arr 0
                  SetL $res
                  PopC

                  CGetL $arr
                  IterInitK 1 endloop_a_kt $v $k
  .try 1 {
                  IssetL $flag
                  JmpZ loop_val_kt
                  Int 1           # ARRAY_FILTER_USE_BOTH
                  CGetL $flag
                  Same
                  JmpNZ loop_both_kt
                  Int 2           # ARRAY_FILTER_USE_KEY
                  CGetL $flag
                  Same
                  JmpNZ loop_key_kt

    loop_val_kt:  FPushCufIter 1 0
                  FIsParamByRefCufIter 0 Any 0
                  JmpNZ by_ref_val_kt
                  CGetL $v
                  Jmp call_val_kt
    by_ref_val_kt:VGetL $v
    call_val_kt:  FCall 1 0 1 - "" ""
                  UnboxR
                  JmpZ next_val_kt
                  CGetL $v
                  BaseL $res Define
                  SetM 0 EL:$k
                  PopC
    next_val_kt:  IterNextK 1 loop_val_kt $v $k
                  Jmp endloop_a_kt

    loop_both_kt: FPushCufIter 2 0
                  FIsParamByRefCufIter 0 Any 0
                  JmpNZ by_ref_v_both_kt
                  CGetL $v
                  Jmp pass_k_both_kt
    by_ref_v_both_kt:
                  VGetL $v
    pass_k_both_kt:
                  FIsParamByRefCufIter 1 Any 0
                  JmpNZ by_ref_k_both_kt
                  CGetL $k
                  Jmp call_both_kt
    by_ref_k_both_kt:
                  VGetL $k
    call_both_kt: FCall 2 0 1 - "" ""
                  UnboxR
                  JmpZ next_both_kt
                  CGetL $v
                  BaseL $res Define
                  SetM 0 EL:$k
                  PopC
    next_both_kt: IterNextK 1 loop_both_kt $v $k
                  Jmp endloop_a_kt

    loop_key_kt:  FPushCufIter 1 0
                  FIsParamByRefCufIter 0 Any 0
                  JmpNZ by_ref_key_kt
                  CGetL $k
                  Jmp call_key_kt
    by_ref_key_kt:VGetL $k
    call_key_kt:  FCall 1 0 1 - "" ""
                  UnboxR
                  JmpZ next_key_kt
                  CGetL $v
                  BaseL $res Define
                  SetM 0 EL:$k
                  PopC
    next_key_kt:  IterNextK 1 loop_key_kt $v $k
                  Jmp endloop_a_kt
  } .catch {
                  IterFree 1
                  Throw
  }
} .catch {
               CIterFree 0
               Throw
}

endloop_a_kt:CIterFree 0
endloop_n_kt:CGetL $res
             RetC

no_func_kt:  NewLikeArrayL $arr 0
             SetL $res
             PopC
             CGetL $arr
             IterInitK 1 endloop_n_kt $v $k
.try 1 {
loop_n_kt:   CGetL $v
             JmpZ skip_n_kt
             CGetL $v
             BaseL $res Define
             SetM 0 EL:$k
             PopC
skip_n_kt:   IterNextK 1 loop_n_kt $v $k
             Jmp endloop_n_kt
} .catch {
             IterFree 1
             Throw
}
}
