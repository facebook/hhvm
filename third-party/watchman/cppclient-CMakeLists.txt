cmake_minimum_required(VERSION 3.10)
project(watchman CXX C)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# TODO when Ubuntu 18.04 support is dropped:
# - use CONFIGURE_DEPENDS in these globs
# - use file(CREATE_DIRECTORY and file(CREATE_LINK instead of the `watchman_include_dir_symlink` target

file(GLOB_RECURSE SOURCES "*.cpp")

# Files include `#include <watchman/foo.h>` where `foo.h` isn't in a directory
# called watchman
file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/include")

add_custom_target(
  watchmanclient_include_dir_symlink
  COMMAND
    ${CMAKE_COMMAND} -E make_directory "${CMAKE_CURRENT_BINARY_DIR}/include"
  COMMAND
    ${CMAKE_COMMAND} -E create_symlink "${CMAKE_CURRENT_SOURCE_DIR}" "${CMAKE_CURRENT_BINARY_DIR}/include/watchman"
)

add_library(watchmanclient STATIC ${SOURCES})
add_dependencies(watchmanclient watchmanclient_include_dir_symlink)

target_include_directories(watchmanclient PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}" "${CMAKE_CURRENT_BINARY_DIR}/include")

foreach(DEP BOOST DOUBLE_CONVERSION FMT FOLLY GLOG JEMALLOC LIBEVENT OPENSSL)
  set("${DEP}_INCLUDE_DIR" "${DEP}_INCLUDE_DIR-notfound" CACHE PATH "Path to ${DEP}'s includes")
  target_include_directories(watchmanclient PRIVATE "${${DEP}_INCLUDE_DIR}")
endforeach()

include(GNUInstallDirs)
install(TARGETS watchmanclient LIBRARY ARCHIVE DESTINATION lib)

file(GLOB HEADERS "*.h")
install(FILES ${HEADERS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/watchman/cppclient)
