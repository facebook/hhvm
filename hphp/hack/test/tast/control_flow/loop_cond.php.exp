[(Class
    { c_span = [3:1-11]; c_annotation = (); c_mode = Mstrict; c_final = false; 
      c_is_xhp = false; c_has_xhp_keyword = false; c_kind = (Cclass Concrete); 
      c_name = ([3:7-8], "\\A"); c_tparams = []; c_extends = []; c_uses = []; 
      c_xhp_attr_uses = []; c_xhp_category = None; c_reqs = []; c_implements = []; 
      c_where_constraints = []; c_consts = []; c_typeconsts = []; c_vars = []; 
      c_methods = []; c_xhp_children = []; c_xhp_attrs = [];
      c_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
        ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
        ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
      c_user_attributes = []; c_file_attributes = []; c_docs_url = None; 
      c_enum = None; c_doc_comment = None; c_emit_id = None; c_internal = false; 
      c_module = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([5:10-19], "\\get_A_opt");
       fd_fun =
       { f_span = [5:1-7:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_ret = ((?A), (Some ([5:23-25], (Hoption ([5:24-25], (Happly (([5:24-25], "\\A"), []))))))); 
         f_params = []; f_ctxs = None; f_unsafe_ctxs = None;
         f_body = { fb_ast = [([6:3-18], (Return (Some ((A), [6:10-17], (New (((A), [6:14-15], (CI ([6:14-15], "\\A"))), [], [], None, ((function(): void))))))))] }; 
         f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
         f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = [] });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([9:10-16], "\\fwhile");
       fd_fun =
       { f_span = [9:1-14:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_ret = ((void), (Some ([9:20-24], (Hprim Tvoid)))); 
         f_params = []; f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([10:3-16],
             (Expr
                ((A), [10:3-15],
                 (Binop
                    { bop = (Eq None); lhs = ((A), [10:3-5], (Lvar ([10:3-5], $x))); rhs = ((A), [10:8-15], (New (((A), [10:12-13], (CI ([10:12-13], "\\A"))), [], [], None, ((function(): void))))) }))));
             ([11:3-13:4],
              (While (((?A), [11:10-12], (Lvar ([11:10-12], $x))),
                 [([11:3-13:4], (AssertEnv (Join, {$#capability $#local_capability $x}))); (
                   [11:3-13:4], (AssertEnv (Refinement, {$x})));
                   ([12:5-22],
                    (Expr
                       ((?A), [12:5-21],
                        (Binop
                           { bop = (Eq None); lhs = ((?A), [12:5-7], (Lvar ([12:5-7], $x)));
                             rhs = ((?A), [12:10-21], (Call ((((function(): ?A)), [12:10-19], (Id ([12:10-19], "\\get_A_opt"))), [], [], None))) }))))
                   ]
                 )));
             ([11:3-13:4], (AssertEnv (Refinement, {$x})))]
           };
         f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
         f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = [] });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([16:10-14], "\\ffor");
       fd_fun =
       { f_span = [16:1-19:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_ret = ((void), (Some ([16:18-22], (Hprim Tvoid)))); 
         f_params = []; f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([17:3-18:4],
             (For (
                [((A), [17:8-20],
                  (Binop
                     { bop = (Eq None); lhs = ((A), [17:8-10], (Lvar ([17:8-10], $x)));
                       rhs = ((A), [17:13-20], (New (((A), [17:17-18], (CI ([17:17-18], "\\A"))), [], [], None, ((function(): void))))) }))
                  ],
                (Some ((?A), [17:22-24], (Lvar ([17:22-24], $x)))),
                [((?A), [17:26-42],
                  (Binop
                     { bop = (Eq None); lhs = ((?A), [17:26-28], (Lvar ([17:26-28], $x)));
                       rhs = ((?A), [17:31-42], (Call ((((function(): ?A)), [17:31-40], (Id ([17:31-40], "\\get_A_opt"))), [], [], None))) }))
                  ],
                [([17:3-18:4], (AssertEnv (Join, {$#capability $#local_capability $x}))); ([17:3-18:4], (AssertEnv (Refinement, {$x})))])));
             ([17:3-18:4], (AssertEnv (Refinement, {$x})))]
           };
         f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
         f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = [] })