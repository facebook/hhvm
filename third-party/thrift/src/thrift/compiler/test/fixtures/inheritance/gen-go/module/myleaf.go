// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package module

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

type MyLeaf interface {
MyNode

  DoLeaf() (err error)
}

type MyLeafClientInterface interface {
  thrift.ClientInterface
  DoLeaf() (err error)
}

type MyLeafClient struct {
  MyLeafClientInterface
  *MyNodeClient
}

func(client *MyLeafClient) Open() error {
  return client.CC.Open()
}

func(client *MyLeafClient) Close() error {
  return client.CC.Close()
}

func(client *MyLeafClient) IsOpen() bool {
  return client.CC.IsOpen()
}

func NewMyLeafClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *MyLeafClient {
  return &MyLeafClient{MyNodeClient: NewMyNodeClientFactory(t, f)}
}

func NewMyLeafClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *MyLeafClient {
  return &MyLeafClient{MyNodeClient: NewMyNodeClient(t, iprot, oprot)}
}

func NewMyLeafClientProtocol(prot thrift.Protocol) *MyLeafClient {
  return NewMyLeafClient(prot.Transport(), prot, prot)
}

func (p *MyLeafClient) DoLeaf() (err error) {
  var args MyLeafDoLeafArgs
  err = p.CC.SendMsg("do_leaf", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDoLeaf()
}


func (p *MyLeafClient) recvDoLeaf() (err error) {
  var __result MyLeafDoLeafResult
  return p.CC.RecvMsg("do_leaf", &__result)
}


type MyLeafThreadsafeClient struct {
  MyLeafClientInterface
  *MyNodeThreadsafeClient
}

func(client *MyLeafThreadsafeClient) Open() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Open()
}

func(client *MyLeafThreadsafeClient) Close() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Close()
}

func(client *MyLeafThreadsafeClient) IsOpen() bool {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.IsOpen()
}

func NewMyLeafThreadsafeClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *MyLeafThreadsafeClient {
  return &MyLeafThreadsafeClient{MyNodeThreadsafeClient: NewMyNodeThreadsafeClientFactory(t, f)}
}

func NewMyLeafThreadsafeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *MyLeafThreadsafeClient {
  return &MyLeafThreadsafeClient{MyNodeThreadsafeClient: NewMyNodeThreadsafeClient(t, iprot, oprot)}
}

func NewMyLeafThreadsafeClientProtocol(prot thrift.Protocol) *MyLeafThreadsafeClient {
  return NewMyLeafThreadsafeClient(prot.Transport(), prot, prot)
}

func (p *MyLeafThreadsafeClient) DoLeaf() (err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  var args MyLeafDoLeafArgs
  err = p.CC.SendMsg("do_leaf", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDoLeaf()
}


func (p *MyLeafThreadsafeClient) recvDoLeaf() (err error) {
  var __result MyLeafDoLeafResult
  return p.CC.RecvMsg("do_leaf", &__result)
}


type MyLeafChannelClient struct {
  *MyNodeChannelClient
}

func (c *MyLeafChannelClient) Close() error {
  return c.RequestChannel.Close()
}

func (c *MyLeafChannelClient) IsOpen() bool {
  return c.RequestChannel.IsOpen()
}

func (c *MyLeafChannelClient) Open() error {
  return c.RequestChannel.Open()
}

func NewMyLeafChannelClient(channel thrift.RequestChannel) *MyLeafChannelClient {
  return &MyLeafChannelClient{MyNodeChannelClient: NewMyNodeChannelClient(channel)}
}

func (p *MyLeafChannelClient) DoLeaf(ctx context.Context) (err error) {
  args := MyLeafDoLeafArgs{
  }
  var __result MyLeafDoLeafResult
  err = p.RequestChannel.Call(ctx, "do_leaf", &args, &__result)
  if err != nil { return }

  return nil
}


type MyLeafProcessor struct {
  *MyNodeProcessor
}

func NewMyLeafProcessor(handler MyLeaf) *MyLeafProcessor {
  self3 := &MyLeafProcessor{NewMyNodeProcessor(handler)}
  self3.AddToProcessorMap("do_leaf", &myLeafProcessorDoLeaf{handler:handler})
  self3.AddToFunctionServiceMap("do_leaf", "MyLeaf")
  return self3
}

type myLeafProcessorDoLeaf struct {
  handler MyLeaf
}

func (p *MyLeafDoLeafResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *myLeafProcessorDoLeaf) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MyLeafDoLeafArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *myLeafProcessorDoLeaf) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("do_leaf", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *myLeafProcessorDoLeaf) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  var __result MyLeafDoLeafResult
  if err := p.handler.DoLeaf(); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing do_leaf: " + err.Error(), err)
      return x, x
    }
  }
  return &__result, nil
}


// HELPER FUNCTIONS AND STRUCTURES

type MyLeafDoLeafArgs struct {
  thrift.IRequest
}

func NewMyLeafDoLeafArgs() *MyLeafDoLeafArgs {
  return &MyLeafDoLeafArgs{}
}

type MyLeafDoLeafArgsBuilder struct {
  obj *MyLeafDoLeafArgs
}

func NewMyLeafDoLeafArgsBuilder() *MyLeafDoLeafArgsBuilder{
  return &MyLeafDoLeafArgsBuilder{
    obj: NewMyLeafDoLeafArgs(),
  }
}

func (p MyLeafDoLeafArgsBuilder) Emit() *MyLeafDoLeafArgs{
  return &MyLeafDoLeafArgs{
  }
}

func (p *MyLeafDoLeafArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyLeafDoLeafArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("do_leaf_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyLeafDoLeafArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("MyLeafDoLeafArgs({})")
}

type MyLeafDoLeafResult struct {
  thrift.IResponse
}

func NewMyLeafDoLeafResult() *MyLeafDoLeafResult {
  return &MyLeafDoLeafResult{}
}

type MyLeafDoLeafResultBuilder struct {
  obj *MyLeafDoLeafResult
}

func NewMyLeafDoLeafResultBuilder() *MyLeafDoLeafResultBuilder{
  return &MyLeafDoLeafResultBuilder{
    obj: NewMyLeafDoLeafResult(),
  }
}

func (p MyLeafDoLeafResultBuilder) Emit() *MyLeafDoLeafResult{
  return &MyLeafDoLeafResult{
  }
}

func (p *MyLeafDoLeafResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyLeafDoLeafResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("do_leaf_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyLeafDoLeafResult) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("MyLeafDoLeafResult({})")
}


