/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/frozen-struct/src/include2.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/frozen-struct/gen-cpp2/include2_types.tcc"
#include "thrift/compiler/test/fixtures/frozen-struct/gen-cpp2/include2_constants.h"
#include "thrift/compiler/test/fixtures/frozen-struct/gen-cpp2/include2_data.h"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

[[maybe_unused]] static constexpr std::string_view kModuleName = "include2";



namespace some::ns {

std::string_view IncludedB::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<IncludedB>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view IncludedB::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<IncludedB>::name;
}

IncludedB::IncludedB(const IncludedB&) = default;
IncludedB& IncludedB::operator=(const IncludedB&) = default;
IncludedB::IncludedB() :
    __fbthrift_field_i32Field() {
}


IncludedB::~IncludedB() {}

IncludedB::IncludedB([[maybe_unused]] IncludedB&& other) noexcept :
    __fbthrift_field_i32Field(std::move(other.__fbthrift_field_i32Field)),
    __fbthrift_field_strField(std::move(other.__fbthrift_field_strField)),
    __isset(other.__isset) {
}

IncludedB& IncludedB::operator=([[maybe_unused]] IncludedB&& other) noexcept {
    this->__fbthrift_field_i32Field = std::move(other.__fbthrift_field_i32Field);
    this->__fbthrift_field_strField = std::move(other.__fbthrift_field_strField);
    __isset = other.__isset;
    return *this;
}


IncludedB::IncludedB(apache::thrift::FragileConstructor, ::std::int32_t i32Field__arg, ::std::string strField__arg) :
    __fbthrift_field_i32Field(std::move(i32Field__arg)),
    __fbthrift_field_strField(std::move(strField__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}

void IncludedB::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_i32Field = ::std::int32_t();
  this->__fbthrift_field_strField = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  __isset = {};
}

void IncludedB::__fbthrift_clear_terse_fields() {
}

bool IncludedB::__fbthrift_is_empty() const {
  return false;
}

bool IncludedB::operator==([[maybe_unused]] const IncludedB& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool IncludedB::operator<([[maybe_unused]] const IncludedB& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int32_t IncludedB::get_i32Field() const {
  return __fbthrift_field_i32Field;
}

::std::int32_t& IncludedB::set_i32Field(::std::int32_t i32Field_) {
  i32Field_ref() = i32Field_;
  return __fbthrift_field_i32Field;
}

void swap([[maybe_unused]] IncludedB& a, [[maybe_unused]] IncludedB& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_i32Field, b.__fbthrift_field_i32Field);
  swap(a.__fbthrift_field_strField, b.__fbthrift_field_strField);
  swap(a.__isset, b.__isset);
}


} // namespace some::ns

namespace some::ns { namespace {
[[maybe_unused]] FOLLY_ERASE void validateAdapters() {
}
}} // namespace some::ns
namespace apache::thrift::detail::annotation {
}
