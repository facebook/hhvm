// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"checkdate", T(Boolean), S(0), "month", T(Int32), NULL, NULL, S(0), "day", T(Int32), NULL, NULL, S(0), "year", T(Int32), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.checkdate.php )\n *\n * Checks the validity of the date formed by the arguments. A date is\n * considered valid if each parameter is properly defined.\n *\n * @month      int     The month is between 1 and 12 inclusive.\n * @day        int     The day is within the allowed number of days for the\n *                     given month. Leap years are taken into\n *                     consideration.\n * @year       int     The year is between 1 and 32767 inclusive.\n *\n * @return     bool    Returns TRUE if the date given is valid; otherwise\n *                     returns FALSE.\n */", 
"date_add", T(Object), S(0), "object", T(Object), NULL, NULL, S(0), "interval", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.date-add.php )\n *\n *\n * @object     object\n * @interval   object\n *\n * @return     object\n */", 
"date_create_from_format", T(Object), S(0), "format", T(String), NULL, NULL, S(0), "time", T(String), NULL, NULL, S(0), "timezone", T(Object), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.date-create-from-format.php )\n *\n *\n * @format     string\n * @time       string\n * @timezone   object\n *\n * @return     object\n */", 
"date_create", T(Object), S(0), "time", T(String), "N;", "null", S(0), "timezone", T(Object), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.date-create.php )\n *\n *\n * @time       string\n * @timezone   object\n *\n * @return     object\n */", 
"date_date_set", T(Void), S(0), "object", T(Object), NULL, NULL, S(0), "year", T(Int32), NULL, NULL, S(0), "month", T(Int32), NULL, NULL, S(0), "day", T(Int32), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.date-date-set.php )\n *\n *\n * @object     object\n * @year       int\n * @month      int\n * @day        int\n */", 
"date_default_timezone_get", T(String), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.date-default-timezone-get.php )\n *\n * In order of preference, this function returns the default timezone by:\n *\n * Reading the timezone set using the date_default_timezone_set() function\n * (if any)\n *\n * Reading the TZ environment variable (if non empty) (Prior to PHP 5.3.0)\n *\n * Reading the value of the date.timezone ini option (if set)\n *\n * Querying the host operating system (if supported and allowed by the OS)\n *\n * If none of the above succeed, date_default_timezone_get() will return a\n * default timezone of UTC.\n *\n * @return     string  Returns a string.\n */", 
"date_default_timezone_set", T(Boolean), S(0), "name", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.date-default-timezone-set.php )\n *\n * date_default_timezone_set() sets the default timezone used by all\n * date/time functions.\n *\n * Since PHP 5.1.0 (when the date/time functions were rewritten), every\n * call to a date/time function will generate a E_NOTICE if the timezone\n * isn't valid, and/or a E_WARNING message if using the system settings or\n * the TZ environment variable.\n *\n * Instead of using this function to set the default timezone in your\n * script, you can also use the INI setting date.timezone to set the\n * default timezone.\n *\n * @name       string  The timezone identifier, like UTC or Europe/Lisbon.\n *                     The list of valid identifiers is available in the\n *                     List of Supported Timezones.\n *\n * @return     bool    This function returns FALSE if the\n *                     timezone_identifier isn't valid, or TRUE otherwise.\n */", 
"date_diff", T(Object), S(0), "datetime1", T(Object), NULL, NULL, S(0), "datetime2", T(Object), NULL, NULL, S(0), "absolute", T(Boolean), "b:0;", "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.date-diff.php )\n *\n *\n * @datetime1  object\n * @datetime2  object\n * @absolute   bool\n *\n * @return     object\n */", 
"date_format", T(String), S(0), "object", T(Object), NULL, NULL, S(0), "format", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.date-format.php )\n *\n *\n * @object     object\n * @format     string\n *\n * @return     string\n */", 
"date_get_last_errors", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.date-get-last-errors.php )\n *\n *\n * @return     mixed\n */", 
"date_interval_create_from_date_string", T(Object), S(0), "time", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.date-interval-create-from-date-string.php\n * )\n *\n *\n * @time       string\n *\n * @return     object\n */", 
"date_interval_format", T(String), S(0), "object", T(Object), NULL, NULL, S(0), "format", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.date-interval-format.php )\n *\n *\n * @object     object\n * @format     string\n *\n * @return     string\n */", 
"date_isodate_set", T(Void), S(0), "object", T(Object), NULL, NULL, S(0), "year", T(Int32), NULL, NULL, S(0), "week", T(Int32), NULL, NULL, S(0), "day", T(Int32), "i:1;", "1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.date-isodate-set.php )\n *\n *\n * @object     object\n * @year       int\n * @week       int\n * @day        int\n */", 
"date_modify", T(Void), S(0), "object", T(Object), NULL, NULL, S(0), "modify", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.date-modify.php )\n *\n *\n * @object     object\n * @modify     string\n */", 
"date_offset_get", T(Int32), S(0), "object", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.date-offset-get.php )\n *\n *\n * @object     object\n *\n * @return     int\n */", 
"date_parse_from_format", T(Array), S(0), "format", T(String), NULL, NULL, S(0), "date", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.date-parse-from-format.php )\n *\n * Returns associative array with detailed info about given date.\n *\n * @format     string  Format accepted by DateTime::createFromFormat().\n * @date       string  String representing the date.\n *\n * @return     vector  Returns associative array with detailed info about\n *                     given date.\n */", 
"date_parse", T(Variant), S(0), "date", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.date-parse.php )\n *\n *\n * @date       string  Date in format accepted by strtotime().\n *\n * @return     mixed   Returns array with information about the parsed date\n *                     on success or FALSE on failure.\n */", 
"date_sub", T(Object), S(0), "object", T(Object), NULL, NULL, S(0), "interval", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.date-sub.php )\n *\n *\n * @object     object\n * @interval   object\n *\n * @return     object\n */", 
"date_sun_info", T(Array), S(0), "ts", T(Int64), NULL, NULL, S(0), "latitude", T(Double), NULL, NULL, S(0), "longitude", T(Double), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.date-sun-info.php )\n *\n *\n * @ts         int     Timestamp.\n * @latitude   float   Latitude in degrees.\n * @longitude  float   Longitude in degrees.\n *\n * @return     map     Returns array on success or FALSE on failure.\n */", 
"date_sunrise", T(Variant), S(0), "timestamp", T(Int64), NULL, NULL, S(0), "format", T(Int32), "i:0;", "0", S(0), "latitude", T(Double), "d:0;", "0.0", S(0), "longitude", T(Double), "d:0;", "0.0", S(0), "zenith", T(Double), "d:0;", "0.0", S(0), "gmt_offset", T(Double), "d:99999;", "99999.0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.date-sunrise.php )\n *\n * date_sunrise() returns the sunrise time for a given day (specified as a\n * timestamp) and location.\n *\n * @timestamp  int     The timestamp of the day from which the sunrise time\n *                     is taken.\n * @format     int     format constants constant description example\n *                     SUNFUNCS_RET_STRING returns the result as string\n *                     16:46 SUNFUNCS_RET_DOUBLE returns the result as\n *                     float 16.78243132 SUNFUNCS_RET_TIMESTAMP returns the\n *                     result as integer (timestamp) 1095034606\n * @latitude   float   Defaults to North, pass in a negative value for\n *                     South. See also: date.default_latitude\n * @longitude  float   Defaults to East, pass in a negative value for West.\n *                     See also: date.default_longitude\n * @zenith     float   Default: date.sunrise_zenith\n * @gmt_offset float   Specified in hours.\n *\n * @return     mixed   Returns the sunrise time in a specified format on\n *                     success or FALSE on failure.\n */", 
"date_sunset", T(Variant), S(0), "timestamp", T(Int64), NULL, NULL, S(0), "format", T(Int32), "i:0;", "0", S(0), "latitude", T(Double), "d:0;", "0.0", S(0), "longitude", T(Double), "d:0;", "0.0", S(0), "zenith", T(Double), "d:0;", "0.0", S(0), "gmt_offset", T(Double), "d:99999;", "99999.0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.date-sunset.php )\n *\n * date_sunset() returns the sunset time for a given day (specified as a\n * timestamp) and location.\n *\n * @timestamp  int     The timestamp of the day from which the sunset time\n *                     is taken.\n * @format     int     format constants constant description example\n *                     SUNFUNCS_RET_STRING returns the result as string\n *                     16:46 SUNFUNCS_RET_DOUBLE returns the result as\n *                     float 16.78243132 SUNFUNCS_RET_TIMESTAMP returns the\n *                     result as integer (timestamp) 1095034606\n * @latitude   float   Defaults to North, pass in a negative value for\n *                     South. See also: date.default_latitude\n * @longitude  float   Defaults to East, pass in a negative value for West.\n *                     See also: date.default_longitude\n * @zenith     float   Default: date.sunset_zenith\n * @gmt_offset float   Specified in hours.\n *\n * @return     mixed   Returns the sunset time in a specified format on\n *                     success or FALSE on failure.\n */", 
"date_time_set", T(Void), S(0), "object", T(Object), NULL, NULL, S(0), "hour", T(Int32), NULL, NULL, S(0), "minute", T(Int32), NULL, NULL, S(0), "second", T(Int32), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.date-time-set.php )\n *\n *\n * @object     object\n * @hour       int\n * @minute     int\n * @second     int\n */", 
"date_timestamp_get", T(Variant), S(0), "object", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.date-timestamp-get.php\n * )\n *\n *\n * @object     object\n *\n * @return     mixed\n */", 
"date_timestamp_set", T(Object), S(0), "object", T(Object), NULL, NULL, S(0), "unixtimestamp", T(Int64), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.date-timestamp-set.php\n * )\n *\n *\n * @object     object\n * @unixtimestamp\n *             int\n *\n * @return     object\n */", 
"date_timezone_get", T(Variant), S(0), "object", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.date-timezone-get.php )\n *\n *\n * @object     object\n *\n * @return     mixed\n */", 
"date_timezone_set", T(Void), S(0), "object", T(Object), NULL, NULL, S(0), "timezone", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.date-timezone-set.php )\n *\n *\n * @object     object\n * @timezone   object\n */", 
"date", T(Variant), S(0), "format", T(String), NULL, NULL, S(0), "timestamp", T(Int64), "\001", "TimeStamp::Current()", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.date.php )\n *\n * Returns a string formatted according to the given format string using\n * the given integer timestamp or the current time if no timestamp is\n * given. In other words, timestamp is optional and defaults to the value\n * of time().\n *\n * @format     string\n * @timestamp  int\n *\n * @return     mixed   Returns a formatted date string. If a non-numeric\n *                     value is used for timestamp, FALSE is returned and\n *                     an E_WARNING level error is emitted.\n */", 
"getdate", T(Array), S(0), "timestamp", T(Int64), "\001", "TimeStamp::Current()", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.getdate.php )\n *\n * Returns an associative array containing the date information of the\n * timestamp, or the current local time if no timestamp is given.\n *\n * @timestamp  int     The optional timestamp parameter is an integer Unix\n *                     timestamp that defaults to the current local time if\n *                     a timestamp is not given. In other words, it\n *                     defaults to the value of time().\n *\n * @return     map\n */", 
"gettimeofday", T(Variant), S(0), "return_float", T(Boolean), "b:0;", "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gettimeofday.php )\n *\n * This is an interface to gettimeofday(2). It returns an associative array\n * containing the data returned from the system call.\n *\n * @return_float\n *             bool    When set to TRUE, a float instead of an array is\n *                     returned.\n *\n * @return     mixed   By default an array is returned. If return_float is\n *                     set, then a float is returned.\n *\n *                     Array keys: \"sec\" - seconds since the Unix Epoch\n *                     \"usec\" - microseconds \"minuteswest\" - minutes west\n *                     of Greenwich \"dsttime\" - type of dst correction\n */", 
"gmdate", T(Variant), S(0), "format", T(String), NULL, NULL, S(0), "timestamp", T(Int64), "\001", "TimeStamp::Current()", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gmdate.php )\n *\n * Identical to the date() function except that the time returned is\n * Greenwich Mean Time (GMT).\n *\n * @format     string  The format of the outputted date string. See the\n *                     formatting options for the date() function.\n * @timestamp  int     The optional timestamp parameter is an integer Unix\n *                     timestamp that defaults to the current local time if\n *                     a timestamp is not given. In other words, it\n *                     defaults to the value of time().\n *\n * @return     mixed   Returns a formatted date string. If a non-numeric\n *                     value is used for timestamp, FALSE is returned and\n *                     an E_WARNING level error is emitted.\n */", 
"gmmktime", T(Variant), S(0), "hour", T(Int32), "i:2147483647;", "INT_MAX", S(0), "minute", T(Int32), "i:2147483647;", "INT_MAX", S(0), "second", T(Int32), "i:2147483647;", "INT_MAX", S(0), "month", T(Int32), "i:2147483647;", "INT_MAX", S(0), "day", T(Int32), "i:2147483647;", "INT_MAX", S(0), "year", T(Int32), "i:2147483647;", "INT_MAX", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gmmktime.php )\n *\n * Identical to mktime() except the passed parameters represents a GMT\n * date. gmmktime() internally uses mktime() so only times valid in derived\n * local time can be used.\n *\n * Like mktime(), arguments may be left out in order from right to left,\n * with any omitted arguments being set to the current corresponding GMT\n * value.\n *\n * @hour       int     The hour\n * @minute     int     The minute\n * @second     int     The second\n * @month      int     The month\n * @day        int     The day\n * @year       int     The year\n *\n * @return     mixed   Returns a integer Unix timestamp.\n */", 
"gmstrftime", T(String), S(0), "format", T(String), NULL, NULL, S(0), "timestamp", T(Int64), "\001", "TimeStamp::Current()", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gmstrftime.php )\n *\n * Behaves the same as strftime() except that the time returned is\n * Greenwich Mean Time (GMT). For example, when run in Eastern Standard\n * Time (GMT -0500), the first line below prints \"Dec 31 1998 20:00:00\",\n * while the second prints \"Jan 01 1999 01:00:00\".\n *\n * @format     string  See description in strftime().\n * @timestamp  int     The optional timestamp parameter is an integer Unix\n *                     timestamp that defaults to the current local time if\n *                     a timestamp is not given. In other words, it\n *                     defaults to the value of time().\n *\n * @return     string  Returns a string formatted according to the given\n *                     format string using the given timestamp or the\n *                     current local time if no timestamp is given. Month\n *                     and weekday names and other language dependent\n *                     strings respect the current locale set with\n *                     setlocale().\n */", 
"idate", T(Variant), S(0), "format", T(String), NULL, NULL, S(0), "timestamp", T(Int64), "\001", "TimeStamp::Current()", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.idate.php )\n *\n * Returns a number formatted according to the given format string using\n * the given integer timestamp or the current local time if no timestamp is\n * given. In other words, timestamp is optional and defaults to the value\n * of time().\n *\n * Unlike the function date(), idate() accepts just one char in the format\n * parameter.\n *\n * @format     string  The following characters are recognized in the\n *                     format parameter string format character Description\n *                     B Swatch Beat/Internet Time d Day of the month h\n *                     Hour (12 hour format) H Hour (24 hour format) i\n *                     Minutes I (uppercase i) returns 1 if DST is\n *                     activated, 0 otherwise L (uppercase l) returns 1 for\n *                     leap year, 0 otherwise m Month number s Seconds t\n *                     Days in current month U Seconds since the Unix Epoch\n *                     - January 1 1970 00:00:00 UTC - this is the same as\n *                     time() w Day of the week (0 on Sunday) W ISO-8601\n *                     week number of year, weeks starting on Monday y Year\n *                     (1 or 2 digits - check note below) Y Year (4 digits)\n *                     z Day of the year Z Timezone offset in seconds\n * @timestamp  int     The optional timestamp parameter is an integer Unix\n *                     timestamp that defaults to the current local time if\n *                     a timestamp is not given. In other words, it\n *                     defaults to the value of time().\n *\n * @return     mixed   Returns an integer.\n *\n *                     As idate() always returns an integer and as they\n *                     can't start with a \"0\", idate() may return fewer\n *                     digits than you would expect. See the example below.\n */", 
"localtime", T(Array), S(0), "timestamp", T(Int64), "\001", "TimeStamp::Current()", S(0), "is_associative", T(Boolean), "b:0;", "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.localtime.php )\n *\n * The localtime() function returns an array identical to that of the\n * structure returned by the C function call.\n *\n * @timestamp  int     The optional timestamp parameter is an integer Unix\n *                     timestamp that defaults to the current local time if\n *                     a timestamp is not given. In other words, it\n *                     defaults to the value of time().\n * @is_associative\n *             bool    If set to FALSE or not supplied then the array is\n *                     returned as a regular, numerically indexed array. If\n *                     the argument is set to TRUE then localtime() returns\n *                     an associative array containing all the different\n *                     elements of the structure returned by the C function\n *                     call to localtime. The names of the different keys\n *                     of the associative array are as follows:\n *\n *                     \"tm_sec\" - seconds \"tm_min\" - minutes \"tm_hour\" -\n *                     hour \"tm_mday\" - day of the month Months are from 0\n *                     (Jan) to 11 (Dec) and days of the week are from 0\n *                     (Sun) to 6 (Sat). \"tm_mon\" - month of the year,\n *                     starting with 0 for January \"tm_year\" - Years since\n *                     1900 \"tm_wday\" - Day of the week \"tm_yday\" - Day of\n *                     the year \"tm_isdst\" - Is daylight savings time in\n *                     effect\n *\n * @return     map\n */", 
"microtime", T(Variant), S(0), "get_as_float", T(Boolean), "b:0;", "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.microtime.php )\n *\n * microtime() returns the current Unix timestamp with microseconds. This\n * function is only available on operating systems that support the\n * gettimeofday() system call.\n *\n * @get_as_float\n *             bool    When called without the optional argument, this\n *                     function returns the string \"msec sec\" where sec is\n *                     the current time measured in the number of seconds\n *                     since the Unix Epoch (0:00:00 January 1, 1970 GMT),\n *                     and msec is the microseconds part. Both portions of\n *                     the string are returned in units of seconds.\n *\n *                     If the optional get_as_float is set to TRUE then a\n *                     float (in seconds) is returned.\n *\n * @return     mixed\n */", 
"mktime", T(Variant), S(0), "hour", T(Int32), "i:2147483647;", "INT_MAX", S(0), "minute", T(Int32), "i:2147483647;", "INT_MAX", S(0), "second", T(Int32), "i:2147483647;", "INT_MAX", S(0), "month", T(Int32), "i:2147483647;", "INT_MAX", S(0), "day", T(Int32), "i:2147483647;", "INT_MAX", S(0), "year", T(Int32), "i:2147483647;", "INT_MAX", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mktime.php )\n *\n * Returns the Unix timestamp corresponding to the arguments given. This\n * timestamp is a long integer containing the number of seconds between the\n * Unix Epoch (January 1 1970 00:00:00 GMT) and the time specified.\n *\n * Arguments may be left out in order from right to left; any arguments\n * thus omitted will be set to the current value according to the local\n * date and time.\n *\n * @hour       int     The number of the hour.\n * @minute     int     The number of the minute.\n * @second     int     The number of seconds past the minute.\n * @month      int     The number of the month.\n * @day        int     The number of the day.\n * @year       int     The number of the year, may be a two or four digit\n *                     value, with values between 0-69 mapping to 2000-2069\n *                     and 70-100 to 1970-2000. On systems where time_t is\n *                     a 32bit signed integer, as most common today, the\n *                     valid range for year is somewhere between 1901 and\n *                     2038. However, before PHP 5.1.0 this range was\n *                     limited from 1970 to 2038 on some systems (e.g.\n *                     Windows).\n *\n * @return     mixed   mktime() returns the Unix timestamp of the arguments\n *                     given. If the arguments are invalid, the function\n *                     returns FALSE (before PHP 5.1 it returned -1).\n */", 
"strftime", T(Variant), S(0), "format", T(String), NULL, NULL, S(0), "timestamp", T(Int64), "\001", "TimeStamp::Current()", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.strftime.php )\n *\n * Format the time and/or date according to locale settings. Month and\n * weekday names and other language-dependent strings respect the current\n * locale set with setlocale().\n *\n * Not all conversion specifiers may be supported by your C library, in\n * which case they will not be supported by PHP's strftime(). Additionally,\n * not all platforms support negative timestamps, so your date range may be\n * limited to no earlier than the Unix epoch. This means that %e, %T, %R\n * and, %D (and possibly others) - as well as dates prior to Jan 1, 1970 -\n * will not work on Windows, some Linux distributions, and a few other\n * operating systems. For Windows systems, a complete overview of supported\n * conversion specifiers can be found at \302\273 MSDN.\n *\n * @format     string\n * @timestamp  int\n *\n * @return     mixed   Returns a string formatted according format using\n *                     the given timestamp or the current local time if no\n *                     timestamp is given. Month and weekday names and\n *                     other language-dependent strings respect the current\n *                     locale set with setlocale().\n */", 
"strptime", T(Variant), S(0), "date", T(String), NULL, NULL, S(0), "format", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.strptime.php )\n *\n * strptime() returns an array with the date parsed, or FALSE on error.\n *\n * Month and weekday names and other language dependent strings respect the\n * current locale set with setlocale() (LC_TIME).\n *\n * @date       string  The string to parse (e.g. returned from strftime()).\n * @format     string  The format used in date (e.g. the same as used in\n *                     strftime()). Note that some of the format options\n *                     available to strftime() may not have any effect\n *                     within strptime(); the exact subset that are\n *                     supported will vary based on the operating system\n *                     and C library in use.\n *\n *                     For more information about the format options, read\n *                     the strftime() page.\n *\n * @return     mixed   Returns an array or FALSE on failure.\n *\n *                     The following parameters are returned in the array\n *                     parameters Description \"tm_sec\" Seconds after the\n *                     minute (0-61) \"tm_min\" Minutes after the hour (0-59)\n *                     \"tm_hour\" Hour since midnight (0-23) \"tm_mday\" Day\n *                     of the month (1-31) \"tm_mon\" Months since January\n *                     (0-11) \"tm_year\" Years since 1900 \"tm_wday\" Days\n *                     since Sunday (0-6) \"tm_yday\" Days since January 1\n *                     (0-365) \"unparsed\" the date part which was not\n *                     recognized using the specified format\n */", 
"strtotime", T(Variant), S(0), "input", T(String), NULL, NULL, S(0), "timestamp", T(Int64), "\001", "TimeStamp::Current()", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.strtotime.php )\n *\n *\n * @input      string  Date and Time Formats.\n * @timestamp  int     The timestamp which is used as a base for the\n *                     calculation of relative dates.\n *\n * @return     mixed   Returns a timestamp on success, FALSE otherwise.\n *                     Previous to PHP 5.1.0, this function would return -1\n *                     on failure.\n */", 
"time", T(Int32), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.time.php )\n *\n * Returns the current time measured in the number of seconds since the\n * Unix Epoch (January 1 1970 00:00:00 GMT).\n *\n * @return     int\n */", 
"timezone_abbreviations_list", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.timezone-abbreviations-list.php )\n *\n *\n * @return     vector\n */", 
"timezone_identifiers_list", T(Array), S(0), "what", T(Int64), "i:2047;", "2047", S(0), "country", T(String), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.timezone-identifiers-list.php )\n *\n *\n * @what       int\n * @country    string\n *\n * @return     vector\n */", 
"timezone_location_get", T(Array), S(0), "object", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.timezone-location-get.php )\n *\n *\n * @object     object\n *\n * @return     map\n */", 
"timezone_name_from_abbr", T(Variant), S(0), "abbr", T(String), NULL, NULL, S(0), "gmtoffset", T(Int32), "i:-1;", "-1", S(0), "isdst", T(Boolean), "b:1;", "true", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.timezone-name-from-abbr.php )\n *\n *\n * @abbr       string  Time zone abbreviation.\n * @gmtoffset  int     Offset from GMT in seconds. Defaults to -1 which\n *                     means that first found time zone corresponding to\n *                     abbr is returned. Otherwise exact offset is searched\n *                     and only if not found then the first time zone with\n *                     any offset is returned.\n * @isdst      bool    Daylight saving time indicator. Defaults to -1,\n *                     which means that whether the time zone has daylight\n *                     saving or not is not taken into consideration when\n *                     searching. If this is set to 1, then the gmtOffset\n *                     is assumed to be an offset with daylight saving in\n *                     effect; if 0, then gmtOffset is assumed to be an\n *                     offset without daylight saving in effect. If abbr\n *                     doesn't exist then the time zone is searched solely\n *                     by the gmtOffset and isdst.\n *\n * @return     mixed   Returns time zone name on success or FALSE on\n *                     failure.\n */", 
"timezone_name_get", T(String), S(0), "object", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.timezone-name-get.php )\n *\n *\n * @object     object\n *\n * @return     string\n */", 
"timezone_offset_get", T(Int32), S(0), "object", T(Object), NULL, NULL, S(0), "dt", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.timezone-offset-get.php\n * )\n *\n *\n * @object     object\n * @dt         object\n *\n * @return     int\n */", 
"timezone_open", T(Object), S(0), "timezone", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.timezone-open.php )\n *\n *\n * @timezone   string\n *\n * @return     object\n */", 
"timezone_transitions_get", T(Array), S(0), "object", T(Object), NULL, NULL, S(0), "timestamp_begin", T(Int64), "d:-9223372036854775808;", "LLONG_MIN", S(0), "timestamp_end", T(Int64), "i:9223372036854775807;", "LLONG_MAX", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.timezone-transitions-get.php )\n *\n *\n * @object     object\n * @timestamp_begin\n *             int\n * @timestamp_end\n *             int\n *\n * @return     vector\n */", 

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2
"DateTime", "", NULL, "__construct", T(Void), S(0), "time", T(String), "s:3:\"now\";", "\"now\"", S(0), "timezone", T(Object), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/datetime.--construct.php )\n *\n *\n * @time       string\n * @timezone   object\n */", S(16384),"createFromFormat", T(Object), S(0), "format", T(String), NULL, NULL, S(0), "time", T(String), NULL, NULL, S(0), "timezone", T(Object), "N;", "null", S(0), NULL, S(16896), "/**\n * ( excerpt from http://php.net/manual/en/datetime.createfromformat.php )\n *\n * Procedural style DateTime date_create_from_format ( string $format ,\n * string $time [, DateTimeZone $timezone ] ) Returns new DateTime object\n * formatted according to the specified format.\n *\n * @format     string  The format that the passed in string should be in.\n *                     See the formatting options below. In most cases, the\n *                     same letters as for the date() can be used.\n *\n *                     The following characters are recognized in the\n *                     format parameter string format character Description\n *                     Example parsable values Day --- --- d and j Day of\n *                     the month, 2 digits with or without leading zeros 01\n *                     to 31 or 1 to 31 D and l A textual representation of\n *                     a day Mon through Sun or Sunday through Saturday S\n *                     English ordinal suffix for the day of the month, 2\n *                     characters. It's ignored while processing. st, nd,\n *                     rd or th. z The day of the year (starting from 0) 0\n *                     through 365 Month --- --- F and M A textual\n *                     representation of a month, such as January or Sept\n *                     January through December or Jan through Dec m and n\n *                     Numeric representation of a month, with or without\n *                     leading zeros 01 through 12 or 1 through 12 Year ---\n *                     --- Y A full numeric representation of a year, 4\n *                     digits Examples: 1999 or 2003 y A two digit\n *                     representation of a year Examples: 99 or 03 Time ---\n *                     --- a and A Ante meridiem and Post meridiem am or pm\n *                     g and h 12-hour format of an hour with or without\n *                     leading zero 1 through 12 or 01 through 12 G and H\n *                     24-hour format of an hour with or without leading\n *                     zeros 0 through 23 or 00 through 23 i Minutes with\n *                     leading zeros 00 to 59 s Seconds, with leading zeros\n *                     00 through 59 u Microseconds (up to six digits)\n *                     Example: 45, 654321 Timezone --- --- e, O, P and T\n *                     Timezone identifier, or difference to UTC in hours,\n *                     or difference to UTC with colon between hours and\n *                     minutes, or timezone abbreviation Examples: UTC,\n *                     GMT, Atlantic/Azores or +0200 or +02:00 or EST, MDT\n *                     Full Date/Time --- --- U Seconds since the Unix\n *                     Epoch (January 1 1970 00:00:00 GMT) Example:\n *                     1292177455 Whitespace and Separators --- --- (space)\n *                     One space or one tab Example: # One of the following\n *                     separation symbol: ;, :, /, ., ,, -, ( or ) Example:\n *                     / ;, :, /, ., ,, -, ( or ) The specified character.\n *                     Example: - \? A random byte Example: ^ (Be aware that\n *                     for UTF-8 characracters you might need more than one\n *                     \?. In this case, using * is probably what you want\n *                     instead) * Random bytes until the next separator or\n *                     digit Example: * in Y-*-d with the string\n *                     2009-aWord-08 will match aWord ! Resets all fields\n *                     (year, month, day, hour, minute, second, fraction\n *                     and timzone information) to the Unix Epoch Without\n *                     !, all fields will be set to the current date and\n *                     time. | Resets all fields (year, month, day, hour,\n *                     minute, second, fraction and timzone information) to\n *                     the Unix Epoch if they have not been parsed yet\n *                     Y-m-d| will set the year, month and day to the\n *                     information found in the string to parse, and sets\n *                     the hour, minute and second to 0. + If this format\n *                     specifier is present, trailing data in the string\n *                     will not cause an error, but a warning instead Use\n *                     DateTime::getLastErrors() to find out whether\n *                     trailing data was present.\n *\n *                     Unrecognized characters in the format string will\n *                     cause the parsing to fail and an error message is\n *                     appended to the returned structure. You can query\n *                     error messages with DateTime::getLastErrors().\n *\n *                     If format does not contain the character ! then\n *                     portions of the generated time which are not\n *                     specified in format will be set to the current\n *                     system time.\n *\n *                     If format contains the character !, then portions of\n *                     the generated time not provided in format, as well\n *                     as values to the left-hand side of the !, will be\n *                     set to corresponding values from the Unix epoch.\n *\n *                     The Unix epoch is 1970-01-01 00:00:00 UTC.\n * @time       string  String representing the time.\n * @timezone   object  A DateTimeZone object representing the desired time\n *                     zone.\n *\n * @return     object  Returns a new DateTime instance or FALSE on failure.\n */", S(16896),"add", T(Object), S(0), "interval", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/datetime.add.php )\n *\n * Procedural style DateTime date_add ( DateTime $object , DateInterval\n * $interval ) Adds the specified DateInterval object to the specified\n * DateTime object.\n *\n * @interval   object  DateTime object returned by date_create(). The\n *                     function modifies this object.\n *\n * @return     object  Returns the DateTime object for method chaining or\n *                     FALSE on failure.\n */", S(16384),"diff", T(Object), S(0), "datetime2", T(Object), NULL, NULL, S(0), "absolute", T(Boolean), "b:0;", "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/datetime.diff.php )\n *\n * Procedural style DateInterval date_diff ( DateTime $datetime1 , DateTime\n * $datetime2 [, bool $absolute = false ] ) Returns the difference between\n * two DateTime objects.\n *\n * @datetime2  object  The date to compare to.\n * @absolute   bool    Whether to return absolute difference.\n *\n * @return     object  The DateInterval object representing the difference\n *                     between the two dates or FALSE on failure.\n */", S(16384),"format", T(String), S(0), "format", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/datetime.format.php )\n *\n * Procedural style string date_format ( DateTime $object , string $format\n * ) Returns date formatted according to given format.\n *\n * @format     string  DateTime object returned by date_create()\n *\n * @return     string  Returns the formatted date string on success or\n *                     FALSE on failure.\n */", S(16384),"getLastErrors", T(Variant), S(0), NULL, S(16896), "/**\n * ( excerpt from http://php.net/manual/en/datetime.getlasterrors.php )\n *\n * Procedural style array date_get_last_errors ( void ) Returns an array of\n * warnings and errors found while parsing a date/time string.\n *\n * @return     mixed   Returns array containing info about warnings and\n *                     errors.\n */", S(16896),"getOffset", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/datetime.getoffset.php )\n *\n * Procedural style int date_offset_get ( DateTime $object ) Returns the\n * timezone offset.\n *\n * @return     int     Returns the timezone offset in seconds from UTC on\n *                     success or FALSE on failure.\n */", S(16384),"getTimezone", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/datetime.gettimezone.php )\n *\n * Procedural style DateTimeZone date_timezone_get ( DateTime $object )\n * Return time zone relative to given DateTime.\n *\n * @return     mixed   Returns a DateTimeZone object on success or FALSE on\n *                     failure.\n */", S(16384),"modify", T(Object), S(0), "modify", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/datetime.modify.php )\n *\n * Procedural style DateTime date_modify ( DateTime $object , string\n * $modify ) Alter the timestamp of a DateTime object by incrementing or\n * decrementing in a format accepted by strtotime().\n *\n * @modify     string  DateTime object returned by date_create(). The\n *                     function modifies this object.\n *\n * @return     object  Returns the modified DateTime object or FALSE on\n *                     failure.\n */", S(16384),"setDate", T(Object), S(0), "year", T(Int64), NULL, NULL, S(0), "month", T(Int64), NULL, NULL, S(0), "day", T(Int64), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/datetime.setdate.php )\n *\n * Procedural style DateTime date_date_set ( DateTime $object , int $year ,\n * int $month , int $day ) Resets the current date of the DateTime object\n * to a different date.\n *\n * @year       int     DateTime object returned by date_create(). The\n *                     function modifies this object.\n * @month      int     Year of the date.\n * @day        int     Month of the date.\n *\n * @return     object  Returns the modified DateTime object or FALSE on\n *                     failure.\n */", S(16384),"setISODate", T(Object), S(0), "year", T(Int64), NULL, NULL, S(0), "week", T(Int64), NULL, NULL, S(0), "day", T(Int64), "i:1;", "1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/datetime.setisodate.php )\n *\n * Procedural style DateTime date_isodate_set ( DateTime $object , int\n * $year , int $week [, int $day = 1 ] ) Set a date according to the ISO\n * 8601 standard - using weeks and day offsets rather than specific dates.\n *\n * @year       int     DateTime object returned by date_create(). The\n *                     function modifies this object.\n * @week       int     Year of the date.\n * @day        int     Week of the date.\n *\n * @return     object  Returns the modified DateTime object or FALSE on\n *                     failure.\n */", S(16384),"setTime", T(Object), S(0), "hour", T(Int64), NULL, NULL, S(0), "minute", T(Int64), NULL, NULL, S(0), "second", T(Int64), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/datetime.settime.php )\n *\n * Procedural style DateTime date_time_set ( DateTime $object , int $hour ,\n * int $minute [, int $second = 0 ] ) Resets the current time of the\n * DateTime object to a different time.\n *\n * @hour       int     DateTime object returned by date_create(). The\n *                     function modifies this object.\n * @minute     int     Hour of the time.\n * @second     int     Minute of the time.\n *\n * @return     object  Returns the modified DateTime object or FALSE on\n *                     failure.\n */", S(16384),"getTimestamp", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/datetime.gettimestamp.php )\n *\n * Procedural style int date_timestamp_get ( DateTime $object ) Gets the\n * Unix timestamp.\n *\n * @return     mixed   Returns the Unix timestamp representing the date.\n */", S(16384),"setTimestamp", T(Object), S(0), "unixtimestamp", T(Int64), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/datetime.settimestamp.php )\n *\n * Procedural style DateTime date_timestamp_set ( DateTime $object , int\n * $unixtimestamp ) Sets the date and time based on an Unix timestamp.\n *\n * @unixtimestamp\n *             int     DateTime object returned by date_create(). The\n *                     function modifies this object.\n *\n * @return     object  Returns the DateTime object for method chaining or\n *                     FALSE on failure.\n */", S(16384),"setTimezone", T(Object), S(0), "timezone", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/datetime.settimezone.php )\n *\n * Procedural style DateTime date_timezone_set ( DateTime $object ,\n * DateTimeZone $timezone )\n *\n * @timezone   object  DateTime object returned by date_create(). The\n *                     function modifies this object.\n *\n * @return     object  Returns the modified DateTime object or FALSE on\n *                     failure.\n */", S(16384),"sub", T(Object), S(0), "interval", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/datetime.sub.php )\n *\n * Procedural style DateTime date_sub ( DateTime $object , DateInterval\n * $interval ) Subtracts the specified DateInterval object from the\n * specified DateTime object.\n *\n * @interval   object  DateTime object returned by date_create(). The\n *                     function modifies this object.\n *\n * @return     object  Returns the DateTime object for method chaining or\n *                     FALSE on failure.\n */", S(16384),"__destruct", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/datetime.--destruct.php )\n *\n *\n * @return     mixed\n */", S(16384),NULL,NULL,"ATOM", T(String),"COOKIE", T(String),"ISO8601", T(String),"RFC822", T(String),"RFC850", T(String),"RFC1036", T(String),"RFC1123", T(String),"RFC2822", T(String),"RFC3339", T(String),"RSS", T(String),"W3C", T(String),NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.datetime.php )\n *\n * Representation of date and time.\n *\n */", "DateTimeZone", "", NULL, "__construct", T(Void), S(0), "timezone", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/datetimezone.--construct.php )\n *\n *\n * @timezone   string\n */", S(16384),"getLocation", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/datetimezone.getlocation.php )\n *\n * Procedural style array timezone_location_get ( void ) Returns location\n * information for a timezone, including country code, latitude/longitude\n * and comments.\n *\n * @return     map     Array containing location information about\n *                     timezone.\n */", S(16384),"getName", T(String), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/datetimezone.getname.php )\n *\n * Procedural style string timezone_name_get ( void ) Returns the name of\n * the timezone.\n *\n * @return     string  One of timezones.\n */", S(16384),"getOffset", T(Int64), S(0), "datetime", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/datetimezone.getoffset.php )\n *\n * Procedural style int timezone_offset_get ( DateTimeZone $object ,\n * DateTime $datetime ) This function returns the offset to GMT for the\n * date/time specified in the datetime parameter. The GMT offset is\n * calculated with the timezone information contained in the DateTimeZone\n * object being used.\n *\n * @datetime   object  DateTimeZone object returned by timezone_open()\n *\n * @return     int     Returns time zone offset in seconds on success or\n *                     FALSE on failure.\n */", S(16384),"getTransitions", T(Array), S(0), "timestamp_begin", T(Int64), "d:-9223372036854775808;", "LLONG_MIN", S(0), "timestamp_end", T(Int64), "i:9223372036854775807;", "LLONG_MAX", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/datetimezone.gettransitions.php\n * )\n *\n * Procedural style array timezone_transitions_get ( DateTimeZone $object\n * [, int $timestamp_begin [, int $timestamp_end ]] )\n *\n * @timestamp_begin\n *             int\n * @timestamp_end\n *             int\n *\n * @return     map     Returns numerically indexed array containing\n *                     associative array with all transitions on success or\n *                     FALSE on failure.\n */", S(16384),"listAbbreviations", T(Array), S(0), NULL, S(16896), "/**\n * ( excerpt from\n * http://php.net/manual/en/datetimezone.listabbreviations.php )\n *\n * Procedural style array timezone_abbreviations_list ( void )\n *\n * @return     map     Returns array on success or FALSE on failure.\n */", S(16896),"listIdentifiers", T(Array), S(0), "what", T(Int64), "i:2047;", "2047", S(0), "country", T(String), "N;", "null", S(0), NULL, S(16896), "/**\n * ( excerpt from http://php.net/manual/en/datetimezone.listidentifiers.php\n * )\n *\n * Procedural style array timezone_identifiers_list ([ int $what =\n * DateTimeZone::ALL [, string $country = NULL ]] )\n *\n * @what       int\n * @country    string\n *\n * @return     map     Returns array on success or FALSE on failure.\n */", S(16896),"__destruct", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/datetimezone.--destruct.php )\n *\n *\n * @return     mixed\n */", S(16384),NULL,NULL,"AFRICA", T(Int64),"AMERICA", T(Int64),"ANTARCTICA", T(Int64),"ARCTIC", T(Int64),"ASIA", T(Int64),"ATLANTIC", T(Int64),"AUSTRALIA", T(Int64),"EUROPE", T(Int64),"INDIAN", T(Int64),"PACIFIC", T(Int64),"UTC", T(Int64),"ALL", T(Int64),"ALL_WITH_BC", T(Int64),"PER_COUNTRY", T(Int64),NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.datetimezone.php )\n *\n * Representation of time zone.\n *\n */", "DateInterval", "", NULL, "__construct", T(Void), S(0), "interval_spec", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/dateinterval.--construct.php )\n *\n *\n * @interval_spec\n *             string\n */", S(16384),"createFromDateString", T(Object), S(0), "time", T(String), NULL, NULL, S(0), NULL, S(16896), "/**\n * ( excerpt from\n * http://php.net/manual/en/dateinterval.createfromdatestring.php )\n *\n * Uses the normal date parsers and sets up a DateInterval from the\n * relative parts of the parsed string.\n *\n * @time       string  Date with relative parts.\n *\n * @return     object  Returns new DateInterval instance if success.\n */", S(16896),"format", T(String), S(0), "format", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/dateinterval.format.php )\n *\n * Formats the interval.\n *\n * @format     string  The following characters are recognized in the\n *                     format parameter string. Each format character must\n *                     be prefixed by a percent sign (%). format character\n *                     Description Example values % Literal % % Y Years,\n *                     numeric, at least 2 digits with leading 0 01, 03 y\n *                     Years, numeric 1, 3 M Months, numeric, at least 2\n *                     digits with leading 0 01, 03, 12 m Months, numeric\n *                     1, 3, 12 D Days, numeric, at least 2 digits with\n *                     leading 0 01, 03, 31 d Days, numeric 1, 3, 31 a\n *                     Total amount of days 4, 18, 8123 H Hours, numeric,\n *                     at least 2 digits with leading 0 01, 03, 23 h Hours,\n *                     numeric 1, 3, 23 I Minutes, numeric, at least 2\n *                     digits with leading 0 01, 03, 59 i Minutes, numeric\n *                     1, 3, 59 S Seconds, numeric, at least 2 digits with\n *                     leading 0 01, 03, 57 s Seconds, numeric 1, 3, 57 R\n *                     Sign \"-\" when negative, \"+\" when positive -, + r\n *                     Sign \"-\" when negative, empty when positive -,\n *\n * @return     string  Returns the formatted interval.\n */", S(16384),"__destruct", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/dateinterval.--destruct.php )\n *\n *\n * @return     mixed\n */", S(16384),NULL,S(16384), "y", T(Int64),S(16384), "m", T(Int64),S(16384), "d", T(Int64),S(16384), "h", T(Int64),S(16384), "i", T(Int64),S(16384), "s", T(Int64),S(16384), "invert", T(Int32),S(16384), "days", T(Variant),NULL,NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.dateinterval.php )\n *\n * Representation of date interval. A date interval stores either a fixed\n * amount of time (in years, months, days, hours etc) or a relative time\n * string in the format that DateTime's constructor supports.\n *\n */", 
#elif EXT_TYPE == 3

#endif
