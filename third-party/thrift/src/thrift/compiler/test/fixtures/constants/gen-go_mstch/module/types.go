// @generated by Thrift for [[[ program path ]]]
// This file is probably not the place you want to edit!

package module // [[[ program thrift source path ]]]

import (
    "fmt"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
)


// (needed to ensure safety because of naive import list construction)
var _ = fmt.Printf
var _ = thrift.ZERO


type MyCompany = Company

func NewMyCompany() MyCompany {
  return 0
}

func WriteMyCompany(item MyCompany, p thrift.Protocol) error {
  if err := p.WriteI32(int32(item)); err != nil {
    return err
}
  return nil
}

func ReadMyCompany(p thrift.Protocol) (MyCompany, error) {
  var decodeResult MyCompany
  decodeErr := func() error {
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := Company(enumResult)
    decodeResult = result
    return nil
  }()
  return decodeResult, decodeErr
}

type MyStringIdentifier = string

func NewMyStringIdentifier() MyStringIdentifier {
  return ""
}

func WriteMyStringIdentifier(item MyStringIdentifier, p thrift.Protocol) error {
  if err := p.WriteString(item); err != nil {
    return err
}
  return nil
}

func ReadMyStringIdentifier(p thrift.Protocol) (MyStringIdentifier, error) {
  var decodeResult MyStringIdentifier
  decodeErr := func() error {
    result, err := p.ReadString()
if err != nil {
    return err
}
    decodeResult = result
    return nil
  }()
  return decodeResult, decodeErr
}

type MyIntIdentifier = int32

func NewMyIntIdentifier() MyIntIdentifier {
  return 0
}

func WriteMyIntIdentifier(item MyIntIdentifier, p thrift.Protocol) error {
  if err := p.WriteI32(item); err != nil {
    return err
}
  return nil
}

func ReadMyIntIdentifier(p thrift.Protocol) (MyIntIdentifier, error) {
  var decodeResult MyIntIdentifier
  decodeErr := func() error {
    result, err := p.ReadI32()
if err != nil {
    return err
}
    decodeResult = result
    return nil
  }()
  return decodeResult, decodeErr
}

type MyMapIdentifier = map[string]string

func NewMyMapIdentifier() MyMapIdentifier {
  return nil
}

func WriteMyMapIdentifier(item MyMapIdentifier, p thrift.Protocol) error {
  if err := p.WriteMapBegin(thrift.STRING, thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
  return nil
}

func ReadMyMapIdentifier(p thrift.Protocol) (MyMapIdentifier, error) {
  var decodeResult MyMapIdentifier
  decodeErr := func() error {
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]string, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
    decodeResult = result
    return nil
  }()
  return decodeResult, decodeErr
}

type EmptyEnum int32

const (
)

// Enum value maps for EmptyEnum
var (
    EmptyEnumToName = map[EmptyEnum]string {
    }

    EmptyEnumToValue = map[string]EmptyEnum {
    }

    EmptyEnumNames = []string{
    }

    EmptyEnumValues = []EmptyEnum{
    }
)

func (x EmptyEnum) String() string {
    if v, ok := EmptyEnumToName[x]; ok {
        return v
    }
    return "<UNSET>"
}

func (x EmptyEnum) Ptr() *EmptyEnum {
    return &x
}

// Deprecated: Use EmptyEnumToValue instead (e.g. `x, ok := EmptyEnumToValue["name"]`).
func EmptyEnumFromString(s string) (EmptyEnum, error) {
    if v, ok := EmptyEnumToValue[s]; ok {
        return v, nil
    }
    return EmptyEnum(0), fmt.Errorf("not a valid EmptyEnum string")
}

// Deprecated: Use EmptyEnum.Ptr() instead.
func EmptyEnumPtr(v EmptyEnum) *EmptyEnum {
    return &v
}


type City int32

const (
    City_NYC City = 0
    City_MPK City = 1
    City_SEA City = 2
    City_LON City = 3
)

// Enum value maps for City
var (
    CityToName = map[City]string {
        City_NYC: "NYC",
        City_MPK: "MPK",
        City_SEA: "SEA",
        City_LON: "LON",
    }

    CityToValue = map[string]City {
        "NYC": City_NYC,
        "MPK": City_MPK,
        "SEA": City_SEA,
        "LON": City_LON,
    }

    CityNames = []string{
        "NYC",
        "MPK",
        "SEA",
        "LON",
    }

    CityValues = []City{
        City_NYC,
        City_MPK,
        City_SEA,
        City_LON,
    }
)

func (x City) String() string {
    if v, ok := CityToName[x]; ok {
        return v
    }
    return "<UNSET>"
}

func (x City) Ptr() *City {
    return &x
}

// Deprecated: Use CityToValue instead (e.g. `x, ok := CityToValue["name"]`).
func CityFromString(s string) (City, error) {
    if v, ok := CityToValue[s]; ok {
        return v, nil
    }
    return City(0), fmt.Errorf("not a valid City string")
}

// Deprecated: Use City.Ptr() instead.
func CityPtr(v City) *City {
    return &v
}


type Company int32

const (
    Company_FACEBOOK Company = 0
    Company_WHATSAPP Company = 1
    Company_OCULUS Company = 2
    Company_INSTAGRAM Company = 3
)

// Enum value maps for Company
var (
    CompanyToName = map[Company]string {
        Company_FACEBOOK: "FACEBOOK",
        Company_WHATSAPP: "WHATSAPP",
        Company_OCULUS: "OCULUS",
        Company_INSTAGRAM: "INSTAGRAM",
    }

    CompanyToValue = map[string]Company {
        "FACEBOOK": Company_FACEBOOK,
        "WHATSAPP": Company_WHATSAPP,
        "OCULUS": Company_OCULUS,
        "INSTAGRAM": Company_INSTAGRAM,
    }

    CompanyNames = []string{
        "FACEBOOK",
        "WHATSAPP",
        "OCULUS",
        "INSTAGRAM",
    }

    CompanyValues = []Company{
        Company_FACEBOOK,
        Company_WHATSAPP,
        Company_OCULUS,
        Company_INSTAGRAM,
    }
)

func (x Company) String() string {
    if v, ok := CompanyToName[x]; ok {
        return v
    }
    return "<UNSET>"
}

func (x Company) Ptr() *Company {
    return &x
}

// Deprecated: Use CompanyToValue instead (e.g. `x, ok := CompanyToValue["name"]`).
func CompanyFromString(s string) (Company, error) {
    if v, ok := CompanyToValue[s]; ok {
        return v, nil
    }
    return Company(0), fmt.Errorf("not a valid Company string")
}

// Deprecated: Use Company.Ptr() instead.
func CompanyPtr(v Company) *Company {
    return &v
}


type Internship struct {
    Weeks int32 `thrift:"weeks,1,required" json:"weeks" db:"weeks"`
    Title string `thrift:"title,2" json:"title" db:"title"`
    Employer *Company `thrift:"employer,3,optional" json:"employer,omitempty" db:"employer"`
    Compensation *float64 `thrift:"compensation,4,optional" json:"compensation,omitempty" db:"compensation"`
    School *string `thrift:"school,5,optional" json:"school,omitempty" db:"school"`
}
// Compile time interface enforcer
var _ thrift.Struct = &Internship{}


func NewInternship() *Internship {
    return (&Internship{})
}

// Deprecated: Use NewInternship().Employer instead.
var Internship_Employer_DEFAULT = NewInternship().Employer

// Deprecated: Use NewInternship().Compensation instead.
var Internship_Compensation_DEFAULT = NewInternship().Compensation

// Deprecated: Use NewInternship().School instead.
var Internship_School_DEFAULT = NewInternship().School

func (x *Internship) GetWeeksNonCompat() int32 {
    return x.Weeks
}

func (x *Internship) GetWeeks() int32 {
    return x.Weeks
}

func (x *Internship) GetTitleNonCompat() string {
    return x.Title
}

func (x *Internship) GetTitle() string {
    return x.Title
}

func (x *Internship) GetEmployerNonCompat() *Company {
    return x.Employer
}

func (x *Internship) GetEmployer() Company {
    if !x.IsSetEmployer() {
      return 0
    }

    return *x.Employer
}

func (x *Internship) GetCompensationNonCompat() *float64 {
    return x.Compensation
}

func (x *Internship) GetCompensation() float64 {
    if !x.IsSetCompensation() {
      return 0.0
    }

    return *x.Compensation
}

func (x *Internship) GetSchoolNonCompat() *string {
    return x.School
}

func (x *Internship) GetSchool() string {
    if !x.IsSetSchool() {
      return ""
    }

    return *x.School
}

func (x *Internship) SetWeeks(value int32) *Internship {
    x.Weeks = value
    return x
}

func (x *Internship) SetTitle(value string) *Internship {
    x.Title = value
    return x
}

func (x *Internship) SetEmployer(value Company) *Internship {
    x.Employer = &value
    return x
}

func (x *Internship) SetCompensation(value float64) *Internship {
    x.Compensation = &value
    return x
}

func (x *Internship) SetSchool(value string) *Internship {
    x.School = &value
    return x
}



func (x *Internship) IsSetEmployer() bool {
    return x.Employer != nil
}

func (x *Internship) IsSetCompensation() bool {
    return x.Compensation != nil
}

func (x *Internship) IsSetSchool() bool {
    return x.School != nil
}

func (x *Internship) writeField1(p thrift.Protocol) error {  // Weeks
    if err := p.WriteFieldBegin("weeks", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetWeeksNonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Internship) writeField2(p thrift.Protocol) error {  // Title
    if err := p.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetTitleNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Internship) writeField3(p thrift.Protocol) error {  // Employer
    if !x.IsSetEmployer() {
        return nil
    }

    if err := p.WriteFieldBegin("employer", thrift.I32, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetEmployerNonCompat()
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Internship) writeField4(p thrift.Protocol) error {  // Compensation
    if !x.IsSetCompensation() {
        return nil
    }

    if err := p.WriteFieldBegin("compensation", thrift.DOUBLE, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetCompensationNonCompat()
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Internship) writeField5(p thrift.Protocol) error {  // School
    if !x.IsSetSchool() {
        return nil
    }

    if err := p.WriteFieldBegin("school", thrift.STRING, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetSchoolNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Internship) readField1(p thrift.Protocol) error {  // Weeks
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetWeeks(result)
    return nil
}

func (x *Internship) readField2(p thrift.Protocol) error {  // Title
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetTitle(result)
    return nil
}

func (x *Internship) readField3(p thrift.Protocol) error {  // Employer
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := Company(enumResult)

    x.SetEmployer(result)
    return nil
}

func (x *Internship) readField4(p thrift.Protocol) error {  // Compensation
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.SetCompensation(result)
    return nil
}

func (x *Internship) readField5(p thrift.Protocol) error {  // School
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetSchool(result)
    return nil
}

func (x *Internship) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use Internship.Set* methods instead or set the fields directly.
type InternshipBuilder struct {
    obj *Internship
}

func NewInternshipBuilder() *InternshipBuilder {
    return &InternshipBuilder{
        obj: NewInternship(),
    }
}

func (x *InternshipBuilder) Weeks(value int32) *InternshipBuilder {
    x.obj.Weeks = value
    return x
}

func (x *InternshipBuilder) Title(value string) *InternshipBuilder {
    x.obj.Title = value
    return x
}

func (x *InternshipBuilder) Employer(value *Company) *InternshipBuilder {
    x.obj.Employer = value
    return x
}

func (x *InternshipBuilder) Compensation(value *float64) *InternshipBuilder {
    x.obj.Compensation = value
    return x
}

func (x *InternshipBuilder) School(value *string) *InternshipBuilder {
    x.obj.School = value
    return x
}

func (x *InternshipBuilder) Emit() *Internship {
    var objCopy Internship = *x.obj
    return &objCopy
}

func (x *Internship) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("Internship"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Internship) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // weeks
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // title
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // employer
            if err := x.readField3(p); err != nil {
                return err
            }
        case 4:  // compensation
            if err := x.readField4(p); err != nil {
                return err
            }
        case 5:  // school
            if err := x.readField5(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}


type Range struct {
    Min int32 `thrift:"min,1,required" json:"min" db:"min"`
    Max int32 `thrift:"max,2,required" json:"max" db:"max"`
}
// Compile time interface enforcer
var _ thrift.Struct = &Range{}


func NewRange() *Range {
    return (&Range{})
}

func (x *Range) GetMinNonCompat() int32 {
    return x.Min
}

func (x *Range) GetMin() int32 {
    return x.Min
}

func (x *Range) GetMaxNonCompat() int32 {
    return x.Max
}

func (x *Range) GetMax() int32 {
    return x.Max
}

func (x *Range) SetMin(value int32) *Range {
    x.Min = value
    return x
}

func (x *Range) SetMax(value int32) *Range {
    x.Max = value
    return x
}



func (x *Range) writeField1(p thrift.Protocol) error {  // Min
    if err := p.WriteFieldBegin("min", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetMinNonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Range) writeField2(p thrift.Protocol) error {  // Max
    if err := p.WriteFieldBegin("max", thrift.I32, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetMaxNonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Range) readField1(p thrift.Protocol) error {  // Min
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetMin(result)
    return nil
}

func (x *Range) readField2(p thrift.Protocol) error {  // Max
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetMax(result)
    return nil
}

func (x *Range) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use Range.Set* methods instead or set the fields directly.
type RangeBuilder struct {
    obj *Range
}

func NewRangeBuilder() *RangeBuilder {
    return &RangeBuilder{
        obj: NewRange(),
    }
}

func (x *RangeBuilder) Min(value int32) *RangeBuilder {
    x.obj.Min = value
    return x
}

func (x *RangeBuilder) Max(value int32) *RangeBuilder {
    x.obj.Max = value
    return x
}

func (x *RangeBuilder) Emit() *Range {
    var objCopy Range = *x.obj
    return &objCopy
}

func (x *Range) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("Range"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Range) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // min
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // max
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}


type Struct1 struct {
    A int32 `thrift:"a,1" json:"a" db:"a"`
    B string `thrift:"b,2" json:"b" db:"b"`
}
// Compile time interface enforcer
var _ thrift.Struct = &Struct1{}


func NewStruct1() *Struct1 {
    return (&Struct1{}).
        SetA(1234567).
        SetB("<uninitialized>")
}

func (x *Struct1) GetANonCompat() int32 {
    return x.A
}

func (x *Struct1) GetA() int32 {
    return x.A
}

func (x *Struct1) GetBNonCompat() string {
    return x.B
}

func (x *Struct1) GetB() string {
    return x.B
}

func (x *Struct1) SetA(value int32) *Struct1 {
    x.A = value
    return x
}

func (x *Struct1) SetB(value string) *Struct1 {
    x.B = value
    return x
}



func (x *Struct1) writeField1(p thrift.Protocol) error {  // A
    if err := p.WriteFieldBegin("a", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetANonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Struct1) writeField2(p thrift.Protocol) error {  // B
    if err := p.WriteFieldBegin("b", thrift.STRING, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetBNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Struct1) readField1(p thrift.Protocol) error {  // A
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetA(result)
    return nil
}

func (x *Struct1) readField2(p thrift.Protocol) error {  // B
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetB(result)
    return nil
}

func (x *Struct1) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use Struct1.Set* methods instead or set the fields directly.
type Struct1Builder struct {
    obj *Struct1
}

func NewStruct1Builder() *Struct1Builder {
    return &Struct1Builder{
        obj: NewStruct1(),
    }
}

func (x *Struct1Builder) A(value int32) *Struct1Builder {
    x.obj.A = value
    return x
}

func (x *Struct1Builder) B(value string) *Struct1Builder {
    x.obj.B = value
    return x
}

func (x *Struct1Builder) Emit() *Struct1 {
    var objCopy Struct1 = *x.obj
    return &objCopy
}

func (x *Struct1) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("struct1"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Struct1) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // a
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // b
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}


type Struct2 struct {
    A int32 `thrift:"a,1" json:"a" db:"a"`
    B string `thrift:"b,2" json:"b" db:"b"`
    C *Struct1 `thrift:"c,3" json:"c" db:"c"`
    D []int32 `thrift:"d,4" json:"d" db:"d"`
}
// Compile time interface enforcer
var _ thrift.Struct = &Struct2{}


func NewStruct2() *Struct2 {
    return (&Struct2{})
}

// Deprecated: Use NewStruct2().C instead.
var Struct2_C_DEFAULT = NewStruct2().C

func (x *Struct2) GetANonCompat() int32 {
    return x.A
}

func (x *Struct2) GetA() int32 {
    return x.A
}

func (x *Struct2) GetBNonCompat() string {
    return x.B
}

func (x *Struct2) GetB() string {
    return x.B
}

func (x *Struct2) GetCNonCompat() *Struct1 {
    return x.C
}

func (x *Struct2) GetC() *Struct1 {
    if !x.IsSetC() {
      return NewStruct1()
    }

    return x.C
}

func (x *Struct2) GetDNonCompat() []int32 {
    return x.D
}

func (x *Struct2) GetD() []int32 {
    if !x.IsSetD() {
      return nil
    }

    return x.D
}

func (x *Struct2) SetA(value int32) *Struct2 {
    x.A = value
    return x
}

func (x *Struct2) SetB(value string) *Struct2 {
    x.B = value
    return x
}

func (x *Struct2) SetC(value Struct1) *Struct2 {
    x.C = &value
    return x
}

func (x *Struct2) SetD(value []int32) *Struct2 {
    x.D = value
    return x
}



func (x *Struct2) IsSetC() bool {
    return x.C != nil
}

func (x *Struct2) IsSetD() bool {
    return x.D != nil
}

func (x *Struct2) writeField1(p thrift.Protocol) error {  // A
    if err := p.WriteFieldBegin("a", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetANonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Struct2) writeField2(p thrift.Protocol) error {  // B
    if err := p.WriteFieldBegin("b", thrift.STRING, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetBNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Struct2) writeField3(p thrift.Protocol) error {  // C
    if !x.IsSetC() {
        return nil
    }

    if err := p.WriteFieldBegin("c", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetCNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Struct2) writeField4(p thrift.Protocol) error {  // D
    if !x.IsSetD() {
        return nil
    }

    if err := p.WriteFieldBegin("d", thrift.LIST, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetDNonCompat()
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Struct2) readField1(p thrift.Protocol) error {  // A
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetA(result)
    return nil
}

func (x *Struct2) readField2(p thrift.Protocol) error {  // B
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetB(result)
    return nil
}

func (x *Struct2) readField3(p thrift.Protocol) error {  // C
    result := *NewStruct1()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetC(result)
    return nil
}

func (x *Struct2) readField4(p thrift.Protocol) error {  // D
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetD(result)
    return nil
}

func (x *Struct2) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use Struct2.Set* methods instead or set the fields directly.
type Struct2Builder struct {
    obj *Struct2
}

func NewStruct2Builder() *Struct2Builder {
    return &Struct2Builder{
        obj: NewStruct2(),
    }
}

func (x *Struct2Builder) A(value int32) *Struct2Builder {
    x.obj.A = value
    return x
}

func (x *Struct2Builder) B(value string) *Struct2Builder {
    x.obj.B = value
    return x
}

func (x *Struct2Builder) C(value *Struct1) *Struct2Builder {
    x.obj.C = value
    return x
}

func (x *Struct2Builder) D(value []int32) *Struct2Builder {
    x.obj.D = value
    return x
}

func (x *Struct2Builder) Emit() *Struct2 {
    var objCopy Struct2 = *x.obj
    return &objCopy
}

func (x *Struct2) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("struct2"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Struct2) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // a
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // b
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // c
            if err := x.readField3(p); err != nil {
                return err
            }
        case 4:  // d
            if err := x.readField4(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}


type Struct3 struct {
    A string `thrift:"a,1" json:"a" db:"a"`
    B int32 `thrift:"b,2" json:"b" db:"b"`
    C *Struct2 `thrift:"c,3" json:"c" db:"c"`
}
// Compile time interface enforcer
var _ thrift.Struct = &Struct3{}


func NewStruct3() *Struct3 {
    return (&Struct3{})
}

// Deprecated: Use NewStruct3().C instead.
var Struct3_C_DEFAULT = NewStruct3().C

func (x *Struct3) GetANonCompat() string {
    return x.A
}

func (x *Struct3) GetA() string {
    return x.A
}

func (x *Struct3) GetBNonCompat() int32 {
    return x.B
}

func (x *Struct3) GetB() int32 {
    return x.B
}

func (x *Struct3) GetCNonCompat() *Struct2 {
    return x.C
}

func (x *Struct3) GetC() *Struct2 {
    if !x.IsSetC() {
      return NewStruct2()
    }

    return x.C
}

func (x *Struct3) SetA(value string) *Struct3 {
    x.A = value
    return x
}

func (x *Struct3) SetB(value int32) *Struct3 {
    x.B = value
    return x
}

func (x *Struct3) SetC(value Struct2) *Struct3 {
    x.C = &value
    return x
}



func (x *Struct3) IsSetC() bool {
    return x.C != nil
}

func (x *Struct3) writeField1(p thrift.Protocol) error {  // A
    if err := p.WriteFieldBegin("a", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetANonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Struct3) writeField2(p thrift.Protocol) error {  // B
    if err := p.WriteFieldBegin("b", thrift.I32, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetBNonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Struct3) writeField3(p thrift.Protocol) error {  // C
    if !x.IsSetC() {
        return nil
    }

    if err := p.WriteFieldBegin("c", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetCNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Struct3) readField1(p thrift.Protocol) error {  // A
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetA(result)
    return nil
}

func (x *Struct3) readField2(p thrift.Protocol) error {  // B
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetB(result)
    return nil
}

func (x *Struct3) readField3(p thrift.Protocol) error {  // C
    result := *NewStruct2()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetC(result)
    return nil
}

func (x *Struct3) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use Struct3.Set* methods instead or set the fields directly.
type Struct3Builder struct {
    obj *Struct3
}

func NewStruct3Builder() *Struct3Builder {
    return &Struct3Builder{
        obj: NewStruct3(),
    }
}

func (x *Struct3Builder) A(value string) *Struct3Builder {
    x.obj.A = value
    return x
}

func (x *Struct3Builder) B(value int32) *Struct3Builder {
    x.obj.B = value
    return x
}

func (x *Struct3Builder) C(value *Struct2) *Struct3Builder {
    x.obj.C = value
    return x
}

func (x *Struct3Builder) Emit() *Struct3 {
    var objCopy Struct3 = *x.obj
    return &objCopy
}

func (x *Struct3) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("struct3"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Struct3) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // a
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // b
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // c
            if err := x.readField3(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}


type Struct4 struct {
    A int32 `thrift:"a,1" json:"a" db:"a"`
    B *float64 `thrift:"b,2,optional" json:"b,omitempty" db:"b"`
    C *byte `thrift:"c,3,optional" json:"c,omitempty" db:"c"`
}
// Compile time interface enforcer
var _ thrift.Struct = &Struct4{}


func NewStruct4() *Struct4 {
    return (&Struct4{})
}

// Deprecated: Use NewStruct4().B instead.
var Struct4_B_DEFAULT = NewStruct4().B

// Deprecated: Use NewStruct4().C instead.
var Struct4_C_DEFAULT = NewStruct4().C

func (x *Struct4) GetANonCompat() int32 {
    return x.A
}

func (x *Struct4) GetA() int32 {
    return x.A
}

func (x *Struct4) GetBNonCompat() *float64 {
    return x.B
}

func (x *Struct4) GetB() float64 {
    if !x.IsSetB() {
      return 0.0
    }

    return *x.B
}

func (x *Struct4) GetCNonCompat() *byte {
    return x.C
}

func (x *Struct4) GetC() byte {
    if !x.IsSetC() {
      return 0
    }

    return *x.C
}

func (x *Struct4) SetA(value int32) *Struct4 {
    x.A = value
    return x
}

func (x *Struct4) SetB(value float64) *Struct4 {
    x.B = &value
    return x
}

func (x *Struct4) SetC(value byte) *Struct4 {
    x.C = &value
    return x
}


func (x *Struct4) IsSetB() bool {
    return x.B != nil
}

func (x *Struct4) IsSetC() bool {
    return x.C != nil
}

func (x *Struct4) writeField1(p thrift.Protocol) error {  // A
    if err := p.WriteFieldBegin("a", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetANonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Struct4) writeField2(p thrift.Protocol) error {  // B
    if !x.IsSetB() {
        return nil
    }

    if err := p.WriteFieldBegin("b", thrift.DOUBLE, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetBNonCompat()
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Struct4) writeField3(p thrift.Protocol) error {  // C
    if !x.IsSetC() {
        return nil
    }

    if err := p.WriteFieldBegin("c", thrift.BYTE, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetCNonCompat()
    if err := p.WriteByte(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Struct4) readField1(p thrift.Protocol) error {  // A
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetA(result)
    return nil
}

func (x *Struct4) readField2(p thrift.Protocol) error {  // B
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.SetB(result)
    return nil
}

func (x *Struct4) readField3(p thrift.Protocol) error {  // C
    result, err := p.ReadByte()
if err != nil {
    return err
}

    x.SetC(result)
    return nil
}

func (x *Struct4) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use Struct4.Set* methods instead or set the fields directly.
type Struct4Builder struct {
    obj *Struct4
}

func NewStruct4Builder() *Struct4Builder {
    return &Struct4Builder{
        obj: NewStruct4(),
    }
}

func (x *Struct4Builder) A(value int32) *Struct4Builder {
    x.obj.A = value
    return x
}

func (x *Struct4Builder) B(value *float64) *Struct4Builder {
    x.obj.B = value
    return x
}

func (x *Struct4Builder) C(value *byte) *Struct4Builder {
    x.obj.C = value
    return x
}

func (x *Struct4Builder) Emit() *Struct4 {
    var objCopy Struct4 = *x.obj
    return &objCopy
}

func (x *Struct4) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("struct4"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Struct4) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // a
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // b
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // c
            if err := x.readField3(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}


type Union1 struct {
    I *int32 `thrift:"i,1" json:"i" db:"i"`
    D *float64 `thrift:"d,2" json:"d" db:"d"`
}
// Compile time interface enforcer
var _ thrift.Struct = &Union1{}


func NewUnion1() *Union1 {
    return (&Union1{})
}

// Deprecated: Use NewUnion1().I instead.
var Union1_I_DEFAULT = NewUnion1().I

// Deprecated: Use NewUnion1().D instead.
var Union1_D_DEFAULT = NewUnion1().D

func (x *Union1) GetINonCompat() *int32 {
    return x.I
}

func (x *Union1) GetI() int32 {
    if !x.IsSetI() {
      return 0
    }

    return *x.I
}

func (x *Union1) GetDNonCompat() *float64 {
    return x.D
}

func (x *Union1) GetD() float64 {
    if !x.IsSetD() {
      return 0.0
    }

    return *x.D
}

func (x *Union1) SetI(value int32) *Union1 {
    x.I = &value
    return x
}

func (x *Union1) SetD(value float64) *Union1 {
    x.D = &value
    return x
}

func (x *Union1) IsSetI() bool {
    return x.I != nil
}

func (x *Union1) IsSetD() bool {
    return x.D != nil
}

func (x *Union1) writeField1(p thrift.Protocol) error {  // I
    if !x.IsSetI() {
        return nil
    }

    if err := p.WriteFieldBegin("i", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetINonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Union1) writeField2(p thrift.Protocol) error {  // D
    if !x.IsSetD() {
        return nil
    }

    if err := p.WriteFieldBegin("d", thrift.DOUBLE, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetDNonCompat()
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Union1) readField1(p thrift.Protocol) error {  // I
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetI(result)
    return nil
}

func (x *Union1) readField2(p thrift.Protocol) error {  // D
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.SetD(result)
    return nil
}

func (x *Union1) String() string {
    return fmt.Sprintf("%+v", x)
}

func (x *Union1) countSetFields() int {
    count := int(0)
    if (x.IsSetI()) {
        count++
    }
    if (x.IsSetD()) {
        count++
    }
    return count
}


// Deprecated: Use Union1.Set* methods instead or set the fields directly.
type Union1Builder struct {
    obj *Union1
}

func NewUnion1Builder() *Union1Builder {
    return &Union1Builder{
        obj: NewUnion1(),
    }
}

func (x *Union1Builder) I(value *int32) *Union1Builder {
    x.obj.I = value
    return x
}

func (x *Union1Builder) D(value *float64) *Union1Builder {
    x.obj.D = value
    return x
}

func (x *Union1Builder) Emit() *Union1 {
    var objCopy Union1 = *x.obj
    return &objCopy
}

func (x *Union1) Write(p thrift.Protocol) error {
    if countSet := x.countSetFields(); countSet > 1 {
        return fmt.Errorf("%T write union: no more than one field must be set (%d set).", x, countSet)
    }
    if err := p.WriteStructBegin("union1"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Union1) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // i
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // d
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}


type Union2 struct {
    I *int32 `thrift:"i,1" json:"i" db:"i"`
    D *float64 `thrift:"d,2" json:"d" db:"d"`
    S *Struct1 `thrift:"s,3" json:"s" db:"s"`
    U *Union1 `thrift:"u,4" json:"u" db:"u"`
}
// Compile time interface enforcer
var _ thrift.Struct = &Union2{}


func NewUnion2() *Union2 {
    return (&Union2{})
}

// Deprecated: Use NewUnion2().I instead.
var Union2_I_DEFAULT = NewUnion2().I

// Deprecated: Use NewUnion2().D instead.
var Union2_D_DEFAULT = NewUnion2().D

// Deprecated: Use NewUnion2().S instead.
var Union2_S_DEFAULT = NewUnion2().S

// Deprecated: Use NewUnion2().U instead.
var Union2_U_DEFAULT = NewUnion2().U

func (x *Union2) GetINonCompat() *int32 {
    return x.I
}

func (x *Union2) GetI() int32 {
    if !x.IsSetI() {
      return 0
    }

    return *x.I
}

func (x *Union2) GetDNonCompat() *float64 {
    return x.D
}

func (x *Union2) GetD() float64 {
    if !x.IsSetD() {
      return 0.0
    }

    return *x.D
}

func (x *Union2) GetSNonCompat() *Struct1 {
    return x.S
}

func (x *Union2) GetS() *Struct1 {
    if !x.IsSetS() {
      return NewStruct1()
    }

    return x.S
}

func (x *Union2) GetUNonCompat() *Union1 {
    return x.U
}

func (x *Union2) GetU() *Union1 {
    if !x.IsSetU() {
      return NewUnion1()
    }

    return x.U
}

func (x *Union2) SetI(value int32) *Union2 {
    x.I = &value
    return x
}

func (x *Union2) SetD(value float64) *Union2 {
    x.D = &value
    return x
}

func (x *Union2) SetS(value Struct1) *Union2 {
    x.S = &value
    return x
}

func (x *Union2) SetU(value Union1) *Union2 {
    x.U = &value
    return x
}

func (x *Union2) IsSetI() bool {
    return x.I != nil
}

func (x *Union2) IsSetD() bool {
    return x.D != nil
}

func (x *Union2) IsSetS() bool {
    return x.S != nil
}

func (x *Union2) IsSetU() bool {
    return x.U != nil
}

func (x *Union2) writeField1(p thrift.Protocol) error {  // I
    if !x.IsSetI() {
        return nil
    }

    if err := p.WriteFieldBegin("i", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetINonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Union2) writeField2(p thrift.Protocol) error {  // D
    if !x.IsSetD() {
        return nil
    }

    if err := p.WriteFieldBegin("d", thrift.DOUBLE, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetDNonCompat()
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Union2) writeField3(p thrift.Protocol) error {  // S
    if !x.IsSetS() {
        return nil
    }

    if err := p.WriteFieldBegin("s", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetSNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Union2) writeField4(p thrift.Protocol) error {  // U
    if !x.IsSetU() {
        return nil
    }

    if err := p.WriteFieldBegin("u", thrift.STRUCT, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetUNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Union2) readField1(p thrift.Protocol) error {  // I
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetI(result)
    return nil
}

func (x *Union2) readField2(p thrift.Protocol) error {  // D
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.SetD(result)
    return nil
}

func (x *Union2) readField3(p thrift.Protocol) error {  // S
    result := *NewStruct1()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetS(result)
    return nil
}

func (x *Union2) readField4(p thrift.Protocol) error {  // U
    result := *NewUnion1()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetU(result)
    return nil
}

func (x *Union2) String() string {
    return fmt.Sprintf("%+v", x)
}

func (x *Union2) countSetFields() int {
    count := int(0)
    if (x.IsSetI()) {
        count++
    }
    if (x.IsSetD()) {
        count++
    }
    if (x.IsSetS()) {
        count++
    }
    if (x.IsSetU()) {
        count++
    }
    return count
}


// Deprecated: Use Union2.Set* methods instead or set the fields directly.
type Union2Builder struct {
    obj *Union2
}

func NewUnion2Builder() *Union2Builder {
    return &Union2Builder{
        obj: NewUnion2(),
    }
}

func (x *Union2Builder) I(value *int32) *Union2Builder {
    x.obj.I = value
    return x
}

func (x *Union2Builder) D(value *float64) *Union2Builder {
    x.obj.D = value
    return x
}

func (x *Union2Builder) S(value *Struct1) *Union2Builder {
    x.obj.S = value
    return x
}

func (x *Union2Builder) U(value *Union1) *Union2Builder {
    x.obj.U = value
    return x
}

func (x *Union2Builder) Emit() *Union2 {
    var objCopy Union2 = *x.obj
    return &objCopy
}

func (x *Union2) Write(p thrift.Protocol) error {
    if countSet := x.countSetFields(); countSet > 1 {
        return fmt.Errorf("%T write union: no more than one field must be set (%d set).", x, countSet)
    }
    if err := p.WriteStructBegin("union2"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Union2) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // i
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // d
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // s
            if err := x.readField3(p); err != nil {
                return err
            }
        case 4:  // u
            if err := x.readField4(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

