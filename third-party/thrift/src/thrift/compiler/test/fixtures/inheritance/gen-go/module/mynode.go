// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package module

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

type MyNode interface {
MyRoot

  DoMid() (err error)
}

type MyNodeClientInterface interface {
  thrift.ClientInterface
  DoMid() (err error)
}

type MyNodeClient struct {
  MyNodeClientInterface
  *MyRootClient
}

func(client *MyNodeClient) Open() error {
  return client.CC.Open()
}

func(client *MyNodeClient) Close() error {
  return client.CC.Close()
}

func(client *MyNodeClient) IsOpen() bool {
  return client.CC.IsOpen()
}

func NewMyNodeClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *MyNodeClient {
  return &MyNodeClient{MyRootClient: NewMyRootClientFactory(t, f)}
}

func NewMyNodeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *MyNodeClient {
  return &MyNodeClient{MyRootClient: NewMyRootClient(t, iprot, oprot)}
}

func NewMyNodeClientProtocol(prot thrift.Protocol) *MyNodeClient {
  return NewMyNodeClient(prot.Transport(), prot, prot)
}

func (p *MyNodeClient) DoMid() (err error) {
  var args MyNodeDoMidArgs
  err = p.CC.SendMsg("do_mid", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDoMid()
}


func (p *MyNodeClient) recvDoMid() (err error) {
  var __result MyNodeDoMidResult
  return p.CC.RecvMsg("do_mid", &__result)
}


type MyNodeThreadsafeClient struct {
  MyNodeClientInterface
  *MyRootThreadsafeClient
}

func(client *MyNodeThreadsafeClient) Open() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Open()
}

func(client *MyNodeThreadsafeClient) Close() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Close()
}

func(client *MyNodeThreadsafeClient) IsOpen() bool {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.IsOpen()
}

func NewMyNodeThreadsafeClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *MyNodeThreadsafeClient {
  return &MyNodeThreadsafeClient{MyRootThreadsafeClient: NewMyRootThreadsafeClientFactory(t, f)}
}

func NewMyNodeThreadsafeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *MyNodeThreadsafeClient {
  return &MyNodeThreadsafeClient{MyRootThreadsafeClient: NewMyRootThreadsafeClient(t, iprot, oprot)}
}

func NewMyNodeThreadsafeClientProtocol(prot thrift.Protocol) *MyNodeThreadsafeClient {
  return NewMyNodeThreadsafeClient(prot.Transport(), prot, prot)
}

func (p *MyNodeThreadsafeClient) DoMid() (err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  var args MyNodeDoMidArgs
  err = p.CC.SendMsg("do_mid", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDoMid()
}


func (p *MyNodeThreadsafeClient) recvDoMid() (err error) {
  var __result MyNodeDoMidResult
  return p.CC.RecvMsg("do_mid", &__result)
}


type MyNodeChannelClient struct {
  *MyRootChannelClient
}

func (c *MyNodeChannelClient) Close() error {
  return c.RequestChannel.Close()
}

func (c *MyNodeChannelClient) IsOpen() bool {
  return c.RequestChannel.IsOpen()
}

func (c *MyNodeChannelClient) Open() error {
  return c.RequestChannel.Open()
}

func NewMyNodeChannelClient(channel thrift.RequestChannel) *MyNodeChannelClient {
  return &MyNodeChannelClient{MyRootChannelClient: NewMyRootChannelClient(channel)}
}

func (p *MyNodeChannelClient) DoMid(ctx context.Context) (err error) {
  args := MyNodeDoMidArgs{
  }
  var __result MyNodeDoMidResult
  err = p.RequestChannel.Call(ctx, "do_mid", &args, &__result)
  if err != nil { return }

  return nil
}


type MyNodeProcessor struct {
  *MyRootProcessor
}

func NewMyNodeProcessor(handler MyNode) *MyNodeProcessor {
  self2 := &MyNodeProcessor{NewMyRootProcessor(handler)}
  self2.AddToProcessorMap("do_mid", &myNodeProcessorDoMid{handler:handler})
  self2.AddToFunctionServiceMap("do_mid", "MyNode")
  return self2
}

type myNodeProcessorDoMid struct {
  handler MyNode
}

func (p *MyNodeDoMidResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *myNodeProcessorDoMid) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MyNodeDoMidArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *myNodeProcessorDoMid) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("do_mid", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *myNodeProcessorDoMid) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  var __result MyNodeDoMidResult
  if err := p.handler.DoMid(); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing do_mid: " + err.Error(), err)
      return x, x
    }
  }
  return &__result, nil
}


// HELPER FUNCTIONS AND STRUCTURES

type MyNodeDoMidArgs struct {
  thrift.IRequest
}

func NewMyNodeDoMidArgs() *MyNodeDoMidArgs {
  return &MyNodeDoMidArgs{}
}

type MyNodeDoMidArgsBuilder struct {
  obj *MyNodeDoMidArgs
}

func NewMyNodeDoMidArgsBuilder() *MyNodeDoMidArgsBuilder{
  return &MyNodeDoMidArgsBuilder{
    obj: NewMyNodeDoMidArgs(),
  }
}

func (p MyNodeDoMidArgsBuilder) Emit() *MyNodeDoMidArgs{
  return &MyNodeDoMidArgs{
  }
}

func (p *MyNodeDoMidArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyNodeDoMidArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("do_mid_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyNodeDoMidArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("MyNodeDoMidArgs({})")
}

type MyNodeDoMidResult struct {
  thrift.IResponse
}

func NewMyNodeDoMidResult() *MyNodeDoMidResult {
  return &MyNodeDoMidResult{}
}

type MyNodeDoMidResultBuilder struct {
  obj *MyNodeDoMidResult
}

func NewMyNodeDoMidResultBuilder() *MyNodeDoMidResultBuilder{
  return &MyNodeDoMidResultBuilder{
    obj: NewMyNodeDoMidResult(),
  }
}

func (p MyNodeDoMidResultBuilder) Emit() *MyNodeDoMidResult{
  return &MyNodeDoMidResult{
  }
}

func (p *MyNodeDoMidResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyNodeDoMidResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("do_mid_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyNodeDoMidResult) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("MyNodeDoMidResult({})")
}


