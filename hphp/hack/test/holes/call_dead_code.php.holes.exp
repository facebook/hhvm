[(Fun
    { fd_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
        ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
        ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
      fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([3:10-13], "\\foo");
      fd_fun =
      { f_span = [3:1-30]; f_readonly_this = None; f_annotation = (); 
        f_readonly_ret = None; f_ret = ((void), (Some ([3:23-27], (Hprim Tvoid))));
        f_params =
        [{ param_annotation = (int); param_type_hint = ((int), (Some ([3:14-17], (Hprim Tint)))); 
           param_is_variadic = false; param_pos = [3:18-20]; param_name = "$x"; 
           param_expr = None; param_readonly = None; param_callconv = Pnormal; 
           param_user_attributes = []; param_visibility = None }
          ];
        f_ctxs = None; f_unsafe_ctxs = None; f_body = { fb_ast = [([Pos.none], Noop)] }; 
        f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
        f_doc_comment = None };
      fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = [] });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([5:10-24], "\\call_dead_code");
       fd_fun =
       { f_span = [5:1-15:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_ret = ((void), (Some ([5:28-32], (Hprim Tvoid)))); 
         f_params = []; f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([6:3-10], (Expr ((int), [6:3-9], (Binop { bop = (Eq None); lhs = ((int), [6:3-5], (Lvar ([6:3-5], $x))); rhs = ((int), [6:8-9], (Int "1")) }))));
             ([7:3-14:4],
              (If (((bool), [7:7-11], True),
                 [([8:5-19], (Expr ((string), [8:5-18], (Binop { bop = (Eq None); lhs = ((string), [8:5-7], (Lvar ([8:5-7], $x))); rhs = ((string), [8:10-18], (String "string")) }))));
                   ([10:5-13],
                    (Expr
                       ((void), [10:5-12],
                        (Call ((((function(int $x): void)), [10:5-8], (Id ([10:5-8], "\\foo"))), 
                           [], [(Pnormal, ((string), [10:9-11], (Hole (((string), [10:9-11], (Lvar ([10:9-11], $x))), (string), (int), Typing))))], None)))))
                   ],
                 [([12:5-19], (Expr ((string), [12:5-18], (Binop { bop = (Eq None); lhs = ((string), [12:5-7], (Lvar ([12:5-7], $x))); rhs = ((string), [12:10-18], (String "string")) }))));
                   ([13:5-13],
                    (Expr ((void), [13:5-12], (Call ((((function(int $x): void)), [13:5-8], (Id ([13:5-8], "\\foo"))), [], [(Pnormal, ((nothing), [13:9-11], (Lvar ([13:9-11], $x))))], None)))))
                   ]
                 )))
             ]
           };
         f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
         f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = [] });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([17:10-29], "\\call_dead_code_cast");
       fd_fun =
       { f_span = [17:1-27:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_ret = ((void), (Some ([17:33-37], (Hprim Tvoid)))); 
         f_params = []; f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([18:3-10], (Expr ((int), [18:3-9], (Binop { bop = (Eq None); lhs = ((int), [18:3-5], (Lvar ([18:3-5], $x))); rhs = ((int), [18:8-9], (Int "1")) }))));
             ([19:3-26:4],
              (If (((bool), [19:7-11], True),
                 [([20:5-19], (Expr ((string), [20:5-18], (Binop { bop = (Eq None); lhs = ((string), [20:5-7], (Lvar ([20:5-7], $x))); rhs = ((string), [20:10-18], (String "string")) }))));
                   ([22:5-48],
                    (Expr
                       ((void), [22:5-47],
                        (Call ((((function(int $x): void)), [22:5-8], (Id ([22:5-8], "\\foo"))), 
                           [],
                           [(Pnormal,
                             ((int), [22:9-46], (Hole (((string), [22:43-45], (Lvar ([22:43-45], $x))), (string), (int), (UnsafeCast [([22:31-37], (Hprim Tstring)); ([22:38-41], (Hprim Tint))])))))],
                           None)))))
                   ],
                 [([24:5-19], (Expr ((string), [24:5-18], (Binop { bop = (Eq None); lhs = ((string), [24:5-7], (Lvar ([24:5-7], $x))); rhs = ((string), [24:10-18], (String "string")) }))));
                   ([25:5-13],
                    (Expr ((void), [25:5-12], (Call ((((function(int $x): void)), [25:5-8], (Id ([25:5-8], "\\foo"))), [], [(Pnormal, ((nothing), [25:9-11], (Lvar ([25:9-11], $x))))], None)))))
                   ]
                 )))
             ]
           };
         f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
         f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = [] })