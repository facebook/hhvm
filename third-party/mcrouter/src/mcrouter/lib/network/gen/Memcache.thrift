/*
 *  Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 *  This source code is licensed under the MIT license found in the LICENSE
 *  file in the root directory of this source tree.
 *
 */

/*
 *  THIS FILE IS AUTOGENERATED. DO NOT MODIFY IT; ALL CHANGES WILL BE LOST IN
 *  VAIN.
 *
 *  @generated
 */
include "mcrouter/lib/carbon/carbon.thrift"
include "mcrouter/lib/carbon/carbon_result.thrift"
include "thrift/annotation/cpp.thrift"
include "thrift/annotation/thrift.thrift"
include "mcrouter/lib/network/gen/Common.thrift"

cpp_include "<mcrouter/lib/carbon/CarbonProtocolReader.h>"

namespace cpp2 facebook.memcache.thrift
namespace py3 facebook.memcache.thrift
namespace hack memcache

@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

"
  },
}
struct MemcacheRequestCommon {
  1: optional carbon.ui64 beforeLatencyUs
  2: optional carbon.ui64 afterLatencyUs
  3: optional string bucketId
  4: optional i64 productId
  5: optional i32 regionalizationEntity
  6: optional carbon.ui32 mcTenantId
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

"
  },
}
struct MemcacheReplyCommon {
  1: carbon.ui32 replySourceBitMask
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McGetRequest {
  @thrift.Mixin
  -1: MemcacheRequestCommon memcacheRequestCommon
  1: carbon.IOBufKey key
  2: carbon.ui64 flags
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McGetReply {
  @thrift.Mixin
  -1: MemcacheReplyCommon memcacheReplyCommon
  1: carbon_result.Result result
  2: optional carbon.IOBuf value
  3: carbon.ui64 flags
  4: string message
  5: i16 appSpecificErrorCode
  6: optional i32 exptime
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McSetRequest {
  @thrift.Mixin
  -1: MemcacheRequestCommon memcacheRequestCommon
  1: carbon.IOBufKey key
  2: i32 exptime
  3: carbon.ui64 flags
  4: carbon.IOBuf value
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McSetReply {
  @thrift.Mixin
  -1: MemcacheReplyCommon memcacheReplyCommon
  1: carbon_result.Result result
  2: carbon.ui64 flags
  3: carbon.IOBuf value
  4: string message
  5: i16 appSpecificErrorCode
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McDeleteRequest {
  @thrift.Mixin
  -1: MemcacheRequestCommon memcacheRequestCommon
  1: carbon.IOBufKey key
  2: carbon.ui64 flags
  3: i32 exptime
  4: carbon.IOBuf value
  5: string_to_carbon_ui64_std_unordered_map attributes
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McDeleteReply {
  @thrift.Mixin
  -1: MemcacheReplyCommon memcacheReplyCommon
  1: carbon_result.Result result
  2: carbon.ui64 flags
  3: carbon.IOBuf value
  4: string message
  5: i16 appSpecificErrorCode
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McLeaseGetRequest {
  @thrift.Mixin
  -1: MemcacheRequestCommon memcacheRequestCommon
  1: carbon.IOBufKey key
  2: carbon.ui64 flags
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McLeaseGetReply {
  @thrift.Mixin
  -1: MemcacheReplyCommon memcacheReplyCommon
  1: carbon_result.Result result
  2: i64 leaseToken
  3: optional carbon.IOBuf value
  4: carbon.ui64 flags
  5: string message
  6: i16 appSpecificErrorCode
  7: optional i32 exptime
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McLeaseSetRequest {
  @thrift.Mixin
  -1: MemcacheRequestCommon memcacheRequestCommon
  1: carbon.IOBufKey key
  2: i32 exptime
  3: carbon.ui64 flags
  4: carbon.IOBuf value
  5: i64 leaseToken
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McLeaseSetReply {
  @thrift.Mixin
  -1: MemcacheReplyCommon memcacheReplyCommon
  1: carbon_result.Result result
  2: string message
  3: i16 appSpecificErrorCode
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McAddRequest {
  @thrift.Mixin
  -1: MemcacheRequestCommon memcacheRequestCommon
  1: carbon.IOBufKey key
  2: i32 exptime
  3: carbon.ui64 flags
  4: carbon.IOBuf value
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McAddReply {
  @thrift.Mixin
  -1: MemcacheReplyCommon memcacheReplyCommon
  1: carbon_result.Result result
  2: string message
  3: i16 appSpecificErrorCode
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McReplaceRequest {
  @thrift.Mixin
  -1: MemcacheRequestCommon memcacheRequestCommon
  1: carbon.IOBufKey key
  2: i32 exptime
  3: carbon.ui64 flags
  4: carbon.IOBuf value
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McReplaceReply {
  @thrift.Mixin
  -1: MemcacheReplyCommon memcacheReplyCommon
  1: carbon_result.Result result
  2: string message
  3: i16 appSpecificErrorCode
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McGetsRequest {
  @thrift.Mixin
  -1: MemcacheRequestCommon memcacheRequestCommon
  1: carbon.IOBufKey key
  2: carbon.ui64 flags
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McGetsReply {
  @thrift.Mixin
  -1: MemcacheReplyCommon memcacheReplyCommon
  1: carbon_result.Result result
  2: carbon.ui64 casToken
  3: optional carbon.IOBuf value
  4: carbon.ui64 flags
  5: string message
  6: i16 appSpecificErrorCode
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McCasRequest {
  @thrift.Mixin
  -1: MemcacheRequestCommon memcacheRequestCommon
  1: carbon.IOBufKey key
  2: i32 exptime
  3: carbon.ui64 flags
  4: carbon.IOBuf value
  5: carbon.ui64 casToken
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McCasReply {
  @thrift.Mixin
  -1: MemcacheReplyCommon memcacheReplyCommon
  1: carbon_result.Result result
  2: string message
  3: i16 appSpecificErrorCode
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McIncrRequest {
  @thrift.Mixin
  -1: MemcacheRequestCommon memcacheRequestCommon
  1: carbon.IOBufKey key
  2: i64 delta
  3: carbon.ui64 flags
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McIncrReply {
  @thrift.Mixin
  -1: MemcacheReplyCommon memcacheReplyCommon
  1: carbon_result.Result result
  2: i64 delta
  3: string message
  4: i16 appSpecificErrorCode
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McDecrRequest {
  @thrift.Mixin
  -1: MemcacheRequestCommon memcacheRequestCommon
  1: carbon.IOBufKey key
  2: i64 delta
  3: carbon.ui64 flags
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McDecrReply {
  @thrift.Mixin
  -1: MemcacheReplyCommon memcacheReplyCommon
  1: carbon_result.Result result
  2: i64 delta
  3: string message
  4: i16 appSpecificErrorCode
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McMetagetRequest {
  @thrift.Mixin
  -1: MemcacheRequestCommon memcacheRequestCommon
  1: carbon.IOBufKey key
  2: carbon.ui64 flags
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McMetagetReply {
  @thrift.Mixin
  -1: MemcacheReplyCommon memcacheReplyCommon
  1: carbon_result.Result result
  2: i32 age
  3: i32 exptime
  4: i16 ipv
  5: string ipAddress
  6: string message
  7: i16 appSpecificErrorCode
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McAppendRequest {
  @thrift.Mixin
  -1: MemcacheRequestCommon memcacheRequestCommon
  1: carbon.IOBufKey key
  2: i32 exptime
  3: carbon.ui64 flags
  4: carbon.IOBuf value
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McAppendReply {
  @thrift.Mixin
  -1: MemcacheReplyCommon memcacheReplyCommon
  1: carbon_result.Result result
  2: string message
  3: i16 appSpecificErrorCode
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McPrependRequest {
  @thrift.Mixin
  -1: MemcacheRequestCommon memcacheRequestCommon
  1: carbon.IOBufKey key
  2: i32 exptime
  3: carbon.ui64 flags
  4: carbon.IOBuf value
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McPrependReply {
  @thrift.Mixin
  -1: MemcacheReplyCommon memcacheReplyCommon
  1: carbon_result.Result result
  2: string message
  3: i16 appSpecificErrorCode
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McTouchRequest {
  @thrift.Mixin
  -1: MemcacheRequestCommon memcacheRequestCommon
  1: carbon.IOBufKey key
  2: i32 exptime
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McTouchReply {
  @thrift.Mixin
  -1: MemcacheReplyCommon memcacheReplyCommon
  1: carbon_result.Result result
  2: string message
  3: i16 appSpecificErrorCode
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McFlushReRequest {
  @thrift.Mixin
  -1: MemcacheRequestCommon memcacheRequestCommon
  1: carbon.IOBufKey key
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McFlushReReply {
  @thrift.Mixin
  -1: MemcacheReplyCommon memcacheReplyCommon
  1: carbon_result.Result result
  2: string message
  3: i16 appSpecificErrorCode
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McFlushAllRequest {
  @thrift.Mixin
  -1: MemcacheRequestCommon memcacheRequestCommon
  1: carbon.IOBufKey key
  2: i32 delay
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McFlushAllReply {
  @thrift.Mixin
  -1: MemcacheReplyCommon memcacheReplyCommon
  1: carbon_result.Result result
  2: string message
  3: i16 appSpecificErrorCode
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McGatRequest {
  @thrift.Mixin
  -1: MemcacheRequestCommon memcacheRequestCommon
  1: i32 exptime
  2: carbon.IOBufKey key
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McGatReply {
  @thrift.Mixin
  -1: MemcacheReplyCommon memcacheReplyCommon
  1: carbon_result.Result result
  2: optional carbon.IOBuf value
  3: carbon.ui64 flags
  4: string message
  5: i16 appSpecificErrorCode
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McGatsRequest {
  @thrift.Mixin
  -1: MemcacheRequestCommon memcacheRequestCommon
  1: i32 exptime
  2: carbon.IOBufKey key
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McGatsReply {
  @thrift.Mixin
  -1: MemcacheReplyCommon memcacheReplyCommon
  1: carbon_result.Result result
  2: carbon.ui64 casToken
  3: optional carbon.IOBuf value
  4: carbon.ui64 flags
  5: string message
  6: i16 appSpecificErrorCode
}

@cpp.Type{name = "std::unordered_map<std::string, uint64_t>"}
typedef map<string, carbon.ui64> string_to_carbon_ui64_std_unordered_map