[(Class
    { c_span = [3:1-5:2]; c_annotation = (); c_mode = Mstrict; c_final = false; 
      c_is_xhp = true; c_has_xhp_keyword = false; c_kind = (Cclass Concrete); 
      c_name = ([3:7-11], "\\:foo"); c_tparams = []; c_extends = [([3:20-27], (Happly (([3:20-27], "\\XHPTest"), [])))]; 
      c_uses = []; c_xhp_attr_uses = []; c_xhp_category = None; c_reqs = []; 
      c_implements = [([3:39-47], (Happly (([3:39-47], "\\XHPChild"), [])))]; 
      c_where_constraints = []; c_consts = []; c_typeconsts = [];
      c_vars =
      [{ cv_final = false; cv_xhp_attr = (Some { xai_like = None; xai_tag = None; xai_enum_values = [(XEV_String "herp"); (XEV_String "derp")] }); 
         cv_abstract = false; cv_readonly = false; cv_visibility = Public; 
         cv_type = ((?string), (Some ([4:13-34], (Hoption ([4:13-34], (Hprim Tstring)))))); 
         cv_id = ([4:35-38], ":bar"); cv_expr = None; cv_user_attributes = []; 
         cv_doc_comment = None; cv_is_promoted_variadic = false; cv_is_static = false; 
         cv_span = [4:35-38] }
        ];
      c_methods = []; c_xhp_children = []; c_xhp_attrs = [];
      c_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
        ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
        ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
      c_user_attributes = []; c_file_attributes = []; c_docs_url = None; 
      c_enum = None; c_doc_comment = None; c_emit_id = None; c_internal = false; 
      c_module = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([7:10-14], "\\main");
       fd_fun =
       { f_span = [7:1-19:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_ret = ((void), (Some ([7:18-22], (Hprim Tvoid)))); 
         f_params = []; f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([9:3-22],
             (Expr ((:foo), [9:3-21], (Xml (([9:4-7], "\\:foo"), [(Xhp_simple { xs_name = ([9:8-11], "bar"); xs_type = (?string); xs_expr = ((string), [9:12-18], (String "herp")) })], [])))));
             ([10:3-18], (Expr ((string), [10:3-17], (Binop { bop = (Eq None); lhs = ((string), [10:3-8], (Lvar ([10:3-8], $derp))); rhs = ((string), [10:11-17], (String "derp")) }))));
             ([11:3-23],
              (Expr
                 ((:foo), [11:3-22],
                  (Xml (([11:4-7], "\\:foo"), [(Xhp_simple { xs_name = ([11:8-11], "bar"); xs_type = (?string); xs_expr = ((string), [11:13-18], (Lvar ([11:13-18], $derp))) })], [])))));
             ([14:3-18:10],
              (Expr
                 ((:foo), [14:3-18:9],
                  (Xml (([14:4-7], "\\:foo"), [(Xhp_simple { xs_name = ([14:8-11], "bar"); xs_type = (?string); xs_expr = ((string), [14:12-18], (String "herp")) })],
                     [((:foo), [15:5-17:11],
                       (Xml (([15:6-9], "\\:foo"), [(Xhp_simple { xs_name = ([15:10-13], "bar"); xs_type = (?string); xs_expr = ((string), [15:14-20], (String "derp")) })],
                          [((:foo), [16:7-25],
                            (Xml (([16:8-11], "\\:foo"), [(Xhp_simple { xs_name = ([16:12-15], "bar"); xs_type = (?string); xs_expr = ((string), [16:16-22], (String "herp")) })], [])))]
                          )))
                       ]
                     )))))
             ]
           };
         f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
         f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = [] })