Errors:
  [7:12-13] Wrong number of type arguments (expected 2, got 0)
  [3:7-8] Definition is here
[(Class
    { c_span = [3:1-5:2]; c_annotation = (); c_mode = Mstrict; c_final = false; 
      c_is_xhp = false; c_has_xhp_keyword = false; c_kind = (Cclass Concrete); 
      c_name = ([3:7-8], "\\C");
      c_tparams =
      [{ tp_variance = Covariant; tp_name = ([3:10-12], "Tu"); tp_parameters = []; tp_constraints = []; tp_reified = Erased; tp_user_attributes = [] };
        { tp_variance = Contravariant; tp_name = ([3:15-17], "Tv"); tp_parameters = []; tp_constraints = []; tp_reified = Erased; tp_user_attributes = [] }];
      c_extends = []; c_uses = []; c_xhp_attr_uses = []; c_xhp_category = None; 
      c_reqs = []; c_implements = []; c_where_constraints = []; c_consts = []; 
      c_typeconsts = []; c_vars = [];
      c_methods =
      [{ m_span = [4:3-47]; m_annotation = (); m_final = false; m_abstract = false; 
         m_static = false; m_readonly_this = false; m_visibility = Public; 
         m_name = ([4:19-30], "__construct"); m_tparams = []; m_where_constraints = [];
         m_params =
         [{ param_annotation = (Tu); param_type_hint = ((Tu), (Some ([4:31-33], (Habstr ("Tu", []))))); 
            param_is_variadic = false; param_pos = [4:34-36]; param_name = "$x"; 
            param_expr = None; param_readonly = None; param_callconv = Pnormal; 
            param_user_attributes = []; param_visibility = None };
           { param_annotation = (Tv); param_type_hint = ((Tv), (Some ([4:38-40], (Habstr ("Tv", []))))); 
             param_is_variadic = false; param_pos = [4:41-43]; param_name = "$y"; 
             param_expr = None; param_readonly = None; param_callconv = Pnormal; 
             param_user_attributes = []; param_visibility = None }
           ];
         m_ctxs = None; m_unsafe_ctxs = None; m_body = { fb_ast = [([Pos.none], Noop)] }; 
         m_fun_kind = FSync; m_user_attributes = []; m_readonly_ret = None; 
         m_ret = ((void), (Some ([4:19-30], (Hprim Tvoid)))); m_external = false; 
         m_doc_comment = None }
        ];
      c_xhp_children = []; c_xhp_attrs = [];
      c_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
        ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
        ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
      c_user_attributes = []; c_file_attributes = []; c_docs_url = None; 
      c_enum = None; c_doc_comment = None; c_emit_id = None; c_internal = false; 
      c_module = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([7:10-11], "\\f");
       fd_fun =
       { f_span = [7:1-26]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_ret = ((void), (Some ([7:19-23], (Hprim Tvoid))));
         f_params =
         [{ param_annotation = (C<mixed, nothing>); param_type_hint = ((C<mixed, nothing>), (Some ([7:12-13], (Happly (([7:12-13], "\\C"), []))))); 
            param_is_variadic = false; param_pos = [7:14-16]; param_name = "$x"; 
            param_expr = None; param_readonly = None; param_callconv = Pnormal; 
            param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None; f_body = { fb_ast = [([Pos.none], Noop)] }; 
         f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
         f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = [] })