[("\\C",
  (Shallow_decl_defs.Class
     { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
       sc_abstract = false; sc_is_xhp = false; sc_internal = false;
       sc_has_xhp_keyword = false; sc_kind = (Cclass Concrete);
       sc_module = None; sc_name = ([4:7-8], "\\C"); sc_tparams = [];
       sc_where_constraints = []; sc_extends = []; sc_uses = [];
       sc_xhp_attr_uses = []; sc_xhp_enum_values = {};
       sc_xhp_marked_empty = false; sc_req_extends = [];
       sc_req_implements = []; sc_req_class = []; sc_implements = [];
       sc_support_dynamic_type = false; sc_consts = [];
       sc_typeconsts =
       [{ Shallow_decl_defs.stc_name = ([5:14-15], "T");
          stc_kind =
          (Typing_defs.TCConcrete
             { Typing_defs.tc_type = (Rhint ([5:18-21]), (Tprim Tint)) });
          stc_enforceable = ([Pos.none], false); stc_reifiable = None;
          stc_is_ctx = false };
         { Shallow_decl_defs.stc_name = ([15:14-16], "T2");
           stc_kind =
           (Typing_defs.TCConcrete
              { Typing_defs.tc_type = (Rhint ([15:19-25]), (Tprim Tstring)) });
           stc_enforceable = ([Pos.none], false); stc_reifiable = None;
           stc_is_ctx = false }
         ];
       sc_props = []; sc_sprops = []; sc_constructor = None;
       sc_static_methods = [];
       sc_methods =
       [{ Shallow_decl_defs.sm_name = ([7:19-20], "f");
          sm_type =
          (Rwitness_from_decl ([7:19-20]),
           (Tfun
              { ft_tparams = []; ft_where_constraints = []; ft_params = [];
                ft_implicit_params = { capability = (CapDefaults [7:19-20]) };
                ft_ret =
                { et_enforced = Typing_defs_core.Unenforced;
                  et_type =
                  (Rhint ([7:24-31]),
                   (Taccess ((Rhint ([7:24-31]), Tthis), [([7:30-31], "T")])))
                  };
                ft_flags =
                (make_ft_flags FSync ~return_disposable:false
                  ~returns_readonly:false ~support_dynamic_type:false
                  ~readonly_this:false ~is_memoized:false ~variadic:false);
                ft_ifc_decl = FDPolicied {PUBLIC}ft_cross_package = None }));
          sm_visibility = Public; sm_deprecated = None; sm_flags = (empty);
          sm_attributes = [] };
         { Shallow_decl_defs.sm_name = ([11:19-20], "g");
           sm_type =
           (Rwitness_from_decl ([11:19-20]),
            (Tfun
               { ft_tparams = []; ft_where_constraints = []; ft_params = [];
                 ft_implicit_params =
                 { capability = (CapDefaults [11:19-20]) };
                 ft_ret =
                 { et_enforced = Typing_defs_core.Unenforced;
                   et_type =
                   (Rhint ([11:24-32]),
                    (Taccess
                       ((Rhint ([11:24-32]), Tthis), [([11:30-32], "T2")])))
                   };
                 ft_flags =
                 (make_ft_flags FSync ~return_disposable:false
                   ~returns_readonly:false ~support_dynamic_type:false
                   ~readonly_this:false ~is_memoized:false ~variadic:false);
                 ft_ifc_decl = FDPolicied {PUBLIC}ft_cross_package = None }));
           sm_visibility = Public; sm_deprecated = None; sm_flags = (empty);
           sm_attributes = [] }
         ];
       sc_user_attributes = []; sc_enum_type = None; sc_docs_url = None }));
  ("\\C2",
   (Shallow_decl_defs.Class
      { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
        sc_abstract = true; sc_is_xhp = false; sc_internal = false;
        sc_has_xhp_keyword = false; sc_kind = (Cclass Abstract);
        sc_module = None; sc_name = ([18:16-18], "\\C2"); sc_tparams = [];
        sc_where_constraints = []; sc_extends = []; sc_uses = [];
        sc_xhp_attr_uses = []; sc_xhp_enum_values = {};
        sc_xhp_marked_empty = false; sc_req_extends = [];
        sc_req_implements = []; sc_req_class = []; sc_implements = [];
        sc_support_dynamic_type = false; sc_consts = [];
        sc_typeconsts =
        [{ Shallow_decl_defs.stc_name = ([19:23-33], "TConstType");
           stc_kind =
           (Typing_defs.TCAbstract
              { Typing_defs.atc_as_constraint =
                (Some (Rhint ([19:37-38]), (Tapply (([19:37-38], "\\C"), []))));
                atc_super_constraint = None; atc_default = None });
           stc_enforceable = ([Pos.none], false); stc_reifiable = None;
           stc_is_ctx = false }
          ];
        sc_props = []; sc_sprops = []; sc_constructor = None;
        sc_static_methods = [];
        sc_methods =
        [{ Shallow_decl_defs.sm_name = ([20:28-39], "instantiate");
           sm_type =
           (Rwitness_from_decl ([20:28-39]),
            (Tfun
               { ft_tparams = []; ft_where_constraints = [];
                 ft_params =
                 [{ fp_pos = [20:60-68]; fp_name = (Some "$request");
                    fp_type =
                    { et_enforced = Typing_defs_core.Unenforced;
                      et_type =
                      (Rhint ([20:40-59]),
                       (Taccess
                          ((Rhint ([20:40-59]),
                            (Taccess
                               ((Rhint ([20:40-59]), Tthis),
                                [([20:46-56], "TConstType")]))),
                           [([20:58-59], "T")])))
                      };
                    fp_flags =
                    (make_fp_flags ~accept_disposable:false
                      ~has_default:false ~mode:Typing_defs_core.FPnormal
                      ~ifc_external:false ~ifc_can_call:false
                      ~readonly:false);
                     }
                   ];
                 ft_implicit_params =
                 { capability = (CapDefaults [20:28-39]) };
                 ft_ret =
                 { et_enforced = Typing_defs_core.Unenforced;
                   et_type =
                   (Rhint ([20:71-87]),
                    (Taccess
                       ((Rhint ([20:71-87]), Tthis),
                        [([20:77-87], "TConstType")])))
                   };
                 ft_flags =
                 (make_ft_flags FSync ~return_disposable:false
                   ~returns_readonly:false ~support_dynamic_type:false
                   ~readonly_this:false ~is_memoized:false ~variadic:false);
                 ft_ifc_decl = FDPolicied {PUBLIC}ft_cross_package = None }));
           sm_visibility = Public; sm_deprecated = None; sm_flags = abstract;
           sm_attributes = [] }
          ];
        sc_user_attributes = []; sc_enum_type = None; sc_docs_url = None }))
  ]
