/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010 Facebook, Inc. (http://www.facebook.com)          |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/
// @generated by HipHop Compiler

#include <php/classes/reflection.h>
#include <php/classes/reflection.fws.h>

// Dependencies
#include <php/classes/exception.h>
#include <php/classes/stdclass.h>
#include <runtime/ext/ext.h>
#include <runtime/eval/eval.h>
namespace hphp_impl_starter {}

namespace HPHP {
///////////////////////////////////////////////////////////////////////////////

/* preface starts */
extern CallInfo ci_;
/* preface finishes */
/* SRC: classes/reflection.php line 248 */
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_ReflectionFunctionAbstract
Variant c_ReflectionFunctionAbstract::os_getInit(CStrRef s) {
  DECLARE_SYSTEM_GLOBALS(g);
  int64 hash = s->hash();
  switch (hash & 1) {
    case 1:
      HASH_RETURN_NAMSTR(0x0F2EF58F157D479FLL, NAMSTR(s_sys_ss33988b3e, "info"),
                         null, 4);
      break;
    default:
      break;
  }
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_ReflectionFunctionAbstract
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_ReflectionFunctionAbstract
Variant c_ReflectionFunctionAbstract::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_ReflectionFunctionAbstract
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_ReflectionFunctionAbstract
Variant &c_ReflectionFunctionAbstract::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_ReflectionFunctionAbstract
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_ReflectionFunctionAbstract
void c_ReflectionFunctionAbstract::o_getArray(Array &props, bool pubOnly) const {
  if (!pubOnly) if (isInitialized(m_info)) props.lvalAt(NAMSTR(s_sys_ss33988b3e, "info"), AccessFlags::Key).setWithRef(m_info);
  c_ObjectData::o_getArray(props, pubOnly);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_ReflectionFunctionAbstract
#ifndef OMIT_JUMP_TABLE_CLASS_SETARRAY_ReflectionFunctionAbstract
void c_ReflectionFunctionAbstract::o_setArray(CArrRef props) {
  c_ObjectData::o_setArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_SETARRAY_ReflectionFunctionAbstract
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_ReflectionFunctionAbstract
Variant * c_ReflectionFunctionAbstract::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_ReflectionFunctionAbstract
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_ReflectionFunctionAbstract
Variant * c_ReflectionFunctionAbstract::o_realPropPublic(CStrRef s, int flags) const {
  int64 hash = s->hash();
  switch (hash & 1) {
    case 1:
      HASH_REALPROP_STRING(0x0F2EF58F157D479FLL, "info", 4, info);
      break;
    default:
      break;
  }
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_ReflectionFunctionAbstract
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_ReflectionFunctionAbstract
Variant * c_ReflectionFunctionAbstract::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_ReflectionFunctionAbstract
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_ReflectionFunctionAbstract
Variant c_ReflectionFunctionAbstract::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_ReflectionFunctionAbstract
IMPLEMENT_CLASS(ReflectionFunctionAbstract)
bool c_ReflectionFunctionAbstract::o_instanceof(CStrRef s) const {
  int64 hash = s->hash();
  switch (hash & 1) {
    case 0:
      HASH_INSTANCEOF(0x33BD46E935281082LL, NAMSTR(s_sys_ss5b2a52c1, "ReflectionFunctionAbstract"));
      break;
    default:
      break;
  }
  return false;
}
ObjectData *c_ReflectionFunctionAbstract::cloneImpl() {
  c_ReflectionFunctionAbstract *obj = NEWOBJ(c_ReflectionFunctionAbstract)();
  c_ReflectionFunctionAbstract::cloneSet(obj);
  return obj;
}
void c_ReflectionFunctionAbstract::cloneSet(ObjectData *cl) {
  c_ReflectionFunctionAbstract *clone = static_cast<c_ReflectionFunctionAbstract*>(cl);
  ObjectData::cloneSet(clone);
  clone->m_info.setWithRef(m_info);
}
CallInfo c_ReflectionFunctionAbstract::ci_getnumberofrequiredparameters((void*)&c_ReflectionFunctionAbstract::i_getnumberofrequiredparameters, (void*)&c_ReflectionFunctionAbstract::ifa_getnumberofrequiredparameters, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionFunctionAbstract::ci_isuserdefined((void*)&c_ReflectionFunctionAbstract::i_isuserdefined, (void*)&c_ReflectionFunctionAbstract::ifa_isuserdefined, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionFunctionAbstract::ci_getnumberofparameters((void*)&c_ReflectionFunctionAbstract::i_getnumberofparameters, (void*)&c_ReflectionFunctionAbstract::ifa_getnumberofparameters, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionFunctionAbstract::ci_getendline((void*)&c_ReflectionFunctionAbstract::i_getendline, (void*)&c_ReflectionFunctionAbstract::ifa_getendline, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionFunctionAbstract::ci_getstaticvariables((void*)&c_ReflectionFunctionAbstract::i_getstaticvariables, (void*)&c_ReflectionFunctionAbstract::ifa_getstaticvariables, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionFunctionAbstract::ci_getparameters((void*)&c_ReflectionFunctionAbstract::i_getparameters, (void*)&c_ReflectionFunctionAbstract::ifa_getparameters, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionFunctionAbstract::ci_returnsreference((void*)&c_ReflectionFunctionAbstract::i_returnsreference, (void*)&c_ReflectionFunctionAbstract::ifa_returnsreference, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionFunctionAbstract::ci_getfilename((void*)&c_ReflectionFunctionAbstract::i_getfilename, (void*)&c_ReflectionFunctionAbstract::ifa_getfilename, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionFunctionAbstract::ci_getstartline((void*)&c_ReflectionFunctionAbstract::i_getstartline, (void*)&c_ReflectionFunctionAbstract::ifa_getstartline, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionFunctionAbstract::ci_getdoccomment((void*)&c_ReflectionFunctionAbstract::i_getdoccomment, (void*)&c_ReflectionFunctionAbstract::ifa_getdoccomment, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionFunctionAbstract::ci_getclosure((void*)&c_ReflectionFunctionAbstract::i_getclosure, (void*)&c_ReflectionFunctionAbstract::ifa_getclosure, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionFunctionAbstract::ci_getname((void*)&c_ReflectionFunctionAbstract::i_getname, (void*)&c_ReflectionFunctionAbstract::ifa_getname, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionFunctionAbstract::ci_isinternal((void*)&c_ReflectionFunctionAbstract::i_isinternal, (void*)&c_ReflectionFunctionAbstract::ifa_isinternal, 0, 4, 0x0000000000000000LL);
Variant c_ReflectionFunctionAbstract::i_getnumberofrequiredparameters(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionFunctionAbstract *self = NULL;
  p_ReflectionFunctionAbstract pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunctionAbstract*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfRequiredParameters", 0, 1);
  return (self->t_getnumberofrequiredparameters());
}
Variant c_ReflectionFunctionAbstract::i_isuserdefined(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionFunctionAbstract *self = NULL;
  p_ReflectionFunctionAbstract pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunctionAbstract*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isUserDefined", 0, 1);
  return (self->t_isuserdefined());
}
Variant c_ReflectionFunctionAbstract::i_getnumberofparameters(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionFunctionAbstract *self = NULL;
  p_ReflectionFunctionAbstract pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunctionAbstract*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfParameters", 0, 1);
  return (self->t_getnumberofparameters());
}
Variant c_ReflectionFunctionAbstract::i_getendline(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionFunctionAbstract *self = NULL;
  p_ReflectionFunctionAbstract pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunctionAbstract*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getEndLine", 0, 1);
  return (self->t_getendline());
}
Variant c_ReflectionFunctionAbstract::i_getstaticvariables(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionFunctionAbstract *self = NULL;
  p_ReflectionFunctionAbstract pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunctionAbstract*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStaticVariables", 0, 1);
  return (self->t_getstaticvariables());
}
Variant c_ReflectionFunctionAbstract::i_getparameters(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionFunctionAbstract *self = NULL;
  p_ReflectionFunctionAbstract pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunctionAbstract*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getParameters", 0, 1);
  return (self->t_getparameters());
}
Variant c_ReflectionFunctionAbstract::i_returnsreference(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionFunctionAbstract *self = NULL;
  p_ReflectionFunctionAbstract pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunctionAbstract*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::returnsReference", 0, 1);
  return (self->t_returnsreference());
}
Variant c_ReflectionFunctionAbstract::i_getfilename(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionFunctionAbstract *self = NULL;
  p_ReflectionFunctionAbstract pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunctionAbstract*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getFileName", 0, 1);
  return (self->t_getfilename());
}
Variant c_ReflectionFunctionAbstract::i_getstartline(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionFunctionAbstract *self = NULL;
  p_ReflectionFunctionAbstract pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunctionAbstract*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStartLine", 0, 1);
  return (self->t_getstartline());
}
Variant c_ReflectionFunctionAbstract::i_getdoccomment(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionFunctionAbstract *self = NULL;
  p_ReflectionFunctionAbstract pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunctionAbstract*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getDocComment", 0, 1);
  return (self->t_getdoccomment());
}
Variant c_ReflectionFunctionAbstract::i_getclosure(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionFunctionAbstract *self = NULL;
  p_ReflectionFunctionAbstract pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunctionAbstract*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getClosure", 0, 1);
  return (self->t_getclosure());
}
Variant c_ReflectionFunctionAbstract::i_getname(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionFunctionAbstract *self = NULL;
  p_ReflectionFunctionAbstract pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunctionAbstract*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getName", 0, 1);
  return (self->t_getname());
}
Variant c_ReflectionFunctionAbstract::i_isinternal(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionFunctionAbstract *self = NULL;
  p_ReflectionFunctionAbstract pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunctionAbstract*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isInternal", 0, 1);
  return (self->t_isinternal());
}
Variant c_ReflectionFunctionAbstract::ifa_getnumberofrequiredparameters(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionFunctionAbstract *self = NULL;
  p_ReflectionFunctionAbstract pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunctionAbstract*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfRequiredParameters", 0, 1);
  return (self->t_getnumberofrequiredparameters());
}
Variant c_ReflectionFunctionAbstract::ifa_isuserdefined(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionFunctionAbstract *self = NULL;
  p_ReflectionFunctionAbstract pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunctionAbstract*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isUserDefined", 0, 1);
  return (self->t_isuserdefined());
}
Variant c_ReflectionFunctionAbstract::ifa_getnumberofparameters(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionFunctionAbstract *self = NULL;
  p_ReflectionFunctionAbstract pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunctionAbstract*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getNumberOfParameters", 0, 1);
  return (self->t_getnumberofparameters());
}
Variant c_ReflectionFunctionAbstract::ifa_getendline(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionFunctionAbstract *self = NULL;
  p_ReflectionFunctionAbstract pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunctionAbstract*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getEndLine", 0, 1);
  return (self->t_getendline());
}
Variant c_ReflectionFunctionAbstract::ifa_getstaticvariables(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionFunctionAbstract *self = NULL;
  p_ReflectionFunctionAbstract pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunctionAbstract*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStaticVariables", 0, 1);
  return (self->t_getstaticvariables());
}
Variant c_ReflectionFunctionAbstract::ifa_getparameters(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionFunctionAbstract *self = NULL;
  p_ReflectionFunctionAbstract pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunctionAbstract*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getParameters", 0, 1);
  return (self->t_getparameters());
}
Variant c_ReflectionFunctionAbstract::ifa_returnsreference(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionFunctionAbstract *self = NULL;
  p_ReflectionFunctionAbstract pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunctionAbstract*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::returnsReference", 0, 1);
  return (self->t_returnsreference());
}
Variant c_ReflectionFunctionAbstract::ifa_getfilename(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionFunctionAbstract *self = NULL;
  p_ReflectionFunctionAbstract pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunctionAbstract*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getFileName", 0, 1);
  return (self->t_getfilename());
}
Variant c_ReflectionFunctionAbstract::ifa_getstartline(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionFunctionAbstract *self = NULL;
  p_ReflectionFunctionAbstract pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunctionAbstract*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getStartLine", 0, 1);
  return (self->t_getstartline());
}
Variant c_ReflectionFunctionAbstract::ifa_getdoccomment(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionFunctionAbstract *self = NULL;
  p_ReflectionFunctionAbstract pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunctionAbstract*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getDocComment", 0, 1);
  return (self->t_getdoccomment());
}
Variant c_ReflectionFunctionAbstract::ifa_getclosure(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionFunctionAbstract *self = NULL;
  p_ReflectionFunctionAbstract pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunctionAbstract*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getClosure", 0, 1);
  return (self->t_getclosure());
}
Variant c_ReflectionFunctionAbstract::ifa_getname(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionFunctionAbstract *self = NULL;
  p_ReflectionFunctionAbstract pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunctionAbstract*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::getName", 0, 1);
  return (self->t_getname());
}
Variant c_ReflectionFunctionAbstract::ifa_isinternal(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionFunctionAbstract *self = NULL;
  p_ReflectionFunctionAbstract pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunctionAbstract*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionFunctionAbstract::isInternal", 0, 1);
  return (self->t_isinternal());
}
bool c_ReflectionFunctionAbstract::os_get_call_info(MethodCallPackage &mcp, int64 hash) {
  CStrRef s __attribute__((__unused__)) (*mcp.name);
  if (hash < 0) hash = s->hash();
  switch (hash & 31) {
    case 0:
      HASH_GUARD_LITSTR(0x57D8DC34C9A03560LL, NAMSTR(s_sys_ss88a8c728, "getNumberOfParameters")) {
        mcp.ci = &c_ReflectionFunctionAbstract::ci_getnumberofparameters;
        return true;
      }
      break;
    case 1:
      HASH_GUARD_LITSTR(0x4D637DECDBFA6221LL, NAMSTR(s_sys_ss8fed3624, "getNumberOfRequiredParameters")) {
        mcp.ci = &c_ReflectionFunctionAbstract::ci_getnumberofrequiredparameters;
        return true;
      }
      break;
    case 2:
      HASH_GUARD_LITSTR(0x33A6C2CFBDB05EE2LL, NAMSTR(s_sys_ss88e41acd, "getClosure")) {
        mcp.ci = &c_ReflectionFunctionAbstract::ci_getclosure;
        return true;
      }
      break;
    case 4:
      HASH_GUARD_LITSTR(0x6A6B8BECAE7D4164LL, NAMSTR(s_sys_ss5e0a51ee, "isUserDefined")) {
        mcp.ci = &c_ReflectionFunctionAbstract::ci_isuserdefined;
        return true;
      }
      HASH_GUARD_LITSTR(0x39C1BB731CB1CB04LL, NAMSTR(s_sys_ssf8395a4d, "getStartLine")) {
        mcp.ci = &c_ReflectionFunctionAbstract::ci_getstartline;
        return true;
      }
      break;
    case 5:
      HASH_GUARD_LITSTR(0x23F51CDECC198965LL, NAMSTR(s_sys_ssc2df217e, "getName")) {
        mcp.ci = &c_ReflectionFunctionAbstract::ci_getname;
        return true;
      }
      break;
    case 8:
      HASH_GUARD_LITSTR(0x37FFB8F44A3329A8LL, NAMSTR(s_sys_ss33872dc4, "getStaticVariables")) {
        mcp.ci = &c_ReflectionFunctionAbstract::ci_getstaticvariables;
        return true;
      }
      HASH_GUARD_LITSTR(0x1A3AB3B0276D2668LL, NAMSTR(s_sys_ss06d80b5c, "returnsReference")) {
        mcp.ci = &c_ReflectionFunctionAbstract::ci_returnsreference;
        return true;
      }
      break;
    case 13:
      HASH_GUARD_LITSTR(0x3E62225132C2A32DLL, NAMSTR(s_sys_ss1902bc14, "getParameters")) {
        mcp.ci = &c_ReflectionFunctionAbstract::ci_getparameters;
        return true;
      }
      HASH_GUARD_LITSTR(0x1930CE336D39474DLL, NAMSTR(s_sys_ss3a783e44, "getFileName")) {
        mcp.ci = &c_ReflectionFunctionAbstract::ci_getfilename;
        return true;
      }
      break;
    case 15:
      HASH_GUARD_LITSTR(0x48FDF6C5835C64CFLL, NAMSTR(s_sys_ss504bc94d, "isInternal")) {
        mcp.ci = &c_ReflectionFunctionAbstract::ci_isinternal;
        return true;
      }
      break;
    case 16:
      HASH_GUARD_LITSTR(0x6C19E85007BC4570LL, NAMSTR(s_sys_ss8934f5fc, "getEndLine")) {
        mcp.ci = &c_ReflectionFunctionAbstract::ci_getendline;
        return true;
      }
      break;
    case 24:
      HASH_GUARD_LITSTR(0x7C4F424FDA56ADF8LL, NAMSTR(s_sys_ssd5dbbd47, "getDocComment")) {
        mcp.ci = &c_ReflectionFunctionAbstract::ci_getdoccomment;
        return true;
      }
      break;
    default:
      break;
  }
  return c_ObjectData::os_get_call_info(mcp, hash);
}
bool c_ReflectionFunctionAbstract::o_get_call_info(MethodCallPackage &mcp, int64 hash) {
  mcp.obj = this;
  return os_get_call_info(mcp, hash);
}
struct ObjectStaticCallbacks cw_ReflectionFunctionAbstract = {
  c_ReflectionFunctionAbstract::os_getInit,
  c_ReflectionFunctionAbstract::os_get,
  c_ReflectionFunctionAbstract::os_lval,
  c_ReflectionFunctionAbstract::os_invoke,
  c_ReflectionFunctionAbstract::os_constant,
  c_ReflectionFunctionAbstract::os_get_call_info
};
void c_ReflectionFunctionAbstract::init() {
  m_info = null;
}
/* SRC: classes/reflection.php line 261 */
Variant c_ReflectionFunctionAbstract::t_getname() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::getName);
  return m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 276 */
Variant c_ReflectionFunctionAbstract::t_isinternal() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::isInternal);
  return m_info.rvalAt(NAMSTR(s_sys_ss9332a8ac, "internal"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 280 */
Variant c_ReflectionFunctionAbstract::t_getclosure() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::getClosure);
  return m_info.rvalAt(NAMSTR(s_sys_ss4cd61020, "closure"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 295 */
bool c_ReflectionFunctionAbstract::t_isuserdefined() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::isUserDefined);
  return !(toBoolean(m_info.rvalAt(NAMSTR(s_sys_ss9332a8ac, "internal"), AccessFlags::Error_Key)));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 309 */
Variant c_ReflectionFunctionAbstract::t_getfilename() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::getFileName);
  return m_info.rvalAt(NAMSTR(s_sys_ss8ce7db5b, "file"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 323 */
Variant c_ReflectionFunctionAbstract::t_getstartline() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::getStartLine);
  return m_info.rvalAt(NAMSTR(s_sys_ssd4c67725, "line1"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 338 */
Variant c_ReflectionFunctionAbstract::t_getendline() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::getEndLine);
  return m_info.rvalAt(NAMSTR(s_sys_ssbefe32a8, "line2"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 352 */
Variant c_ReflectionFunctionAbstract::t_getdoccomment() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::getDocComment);
  return m_info.rvalAt(NAMSTR(s_sys_ss9cfa17a6, "doc"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 367 */
Variant c_ReflectionFunctionAbstract::t_getstaticvariables() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::getStaticVariables);
  return m_info.rvalAt(NAMSTR(s_sys_ss5be7a94a, "static_variables"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 382 */
Variant c_ReflectionFunctionAbstract::t_returnsreference() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::returnsReference);
  return m_info.rvalAt(NAMSTR(s_sys_ss134fd5fa, "ref"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 397 */
Array c_ReflectionFunctionAbstract::t_getparameters() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::getParameters);
  Array v_ret;
  Primitive v_name = 0;
  Variant v_info;
  p_ReflectionParameter v_param;

  v_ret = s_sys_sa00000000;
  {
    LOOP_COUNTER(1);
    Variant map2 = m_info.rvalAt(NAMSTR(s_sys_ss1f20ac62, "params"), AccessFlags::Error_Key);
    for (ArrayIter iter3 = map2.begin(s_class_name, true); !iter3.end(); iter3.next()) {
      LOOP_COUNTER_CHECK(1);
      iter3.second(v_info);
      v_name = iter3.first();
      {
        {
          const p_ReflectionParameter &tmp0((p_ReflectionParameter((NEWOBJ(c_ReflectionParameter)())->create(null, null))));
          v_param = tmp0;
        }
        v_param->m_info = v_info;
        v_ret.append((VarNR(v_param)));
      }
    }
  }
  return v_ret;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 419 */
int c_ReflectionFunctionAbstract::t_getnumberofparameters() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::getNumberOfParameters);
  return x_count(m_info.rvalAt(NAMSTR(s_sys_ss1f20ac62, "params"), AccessFlags::Error_Key));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 435 */
int64 c_ReflectionFunctionAbstract::t_getnumberofrequiredparameters() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunctionAbstract, ReflectionFunctionAbstract::getNumberOfRequiredParameters);
  int64 v_count = 0;
  Array v_params;
  Primitive v_name = 0;
  Variant v_param;

  v_count = 0LL;
  {
    const Array &tmp0((t_getparameters()));
    v_params = tmp0;
  }
  {
    LOOP_COUNTER(1);
    for (ArrayIter iter3 = v_params.begin(s_class_name, true); !iter3.end(); ++iter3) {
      LOOP_COUNTER_CHECK(1);
      iter3.second(v_param);
      v_name = iter3.first();
      {
        {
          bool tmp0;
          {
            MethodCallPackage mcp1;
            CVarRef obj1 = v_param;
            mcp1.methodCall((obj1), NAMSTR(s_sys_ss6d9ef7e5, "isOptional"), 0x2D6EF48BBAB22735LL);
            const CallInfo *cit1 __attribute__((__unused__)) = mcp1.ci;
            tmp0 = (toBoolean((mcp1.bindClass(fi)->getMeth0Args())(mcp1, 0)));
          }
          if (tmp0) {
            {
              break;
            }
          }
        }
        v_count++;
      }
    }
  }
  return v_count;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1280 */
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_ReflectionObject
Variant c_ReflectionObject::os_getInit(CStrRef s) {
  return c_ReflectionClass::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_ReflectionObject
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_ReflectionObject
Variant c_ReflectionObject::os_get(CStrRef s) {
  return c_ReflectionClass::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_ReflectionObject
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_ReflectionObject
Variant &c_ReflectionObject::os_lval(CStrRef s) {
  return c_ReflectionClass::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_ReflectionObject
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_ReflectionObject
void c_ReflectionObject::o_getArray(Array &props, bool pubOnly) const {
  c_ReflectionClass::o_getArray(props, pubOnly);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_ReflectionObject
#ifndef OMIT_JUMP_TABLE_CLASS_SETARRAY_ReflectionObject
void c_ReflectionObject::o_setArray(CArrRef props) {
  c_ReflectionClass::o_setArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_SETARRAY_ReflectionObject
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_ReflectionObject
Variant * c_ReflectionObject::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  CStrRef s = context.isNull() ? FrameInjection::GetClassName(false) : context;
  int64 hash = s->hash();
  switch (hash & 1) {
    case 1:
      HASH_GUARD_STRING(0x35A44A5E6AE2E71DLL, ReflectionClass) { return c_ReflectionClass::o_realPropPrivate(prop, flags); }
      break;
    default:
      break;
  }
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_ReflectionObject
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_ReflectionObject
Variant * c_ReflectionObject::o_realPropPublic(CStrRef s, int flags) const {
  return c_ReflectionClass::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_ReflectionObject
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_ReflectionObject
Variant * c_ReflectionObject::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_ReflectionObject
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_ReflectionObject
Variant c_ReflectionObject::os_constant(const char *s) {
  return c_ReflectionClass::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_ReflectionObject
IMPLEMENT_CLASS(ReflectionObject)
bool c_ReflectionObject::o_instanceof(CStrRef s) const {
  int64 hash = s->hash();
  switch (hash & 7) {
    case 2:
      HASH_INSTANCEOF(0x41A9F7D81254DD7ALL, NAMSTR(s_sys_ssb5a1e6bc, "ReflectionObject"));
      break;
    case 5:
      HASH_INSTANCEOF(0x35A44A5E6AE2E71DLL, NAMSTR(s_sys_ssfc63c2bb, "ReflectionClass"));
      HASH_INSTANCEOF(0x62F7F85447C0A605LL, NAMSTR(s_sys_ss0d7533cf, "Reflector"));
      break;
    default:
      break;
  }
  return false;
}
ObjectData *c_ReflectionObject::cloneImpl() {
  c_ReflectionObject *obj = NEWOBJ(c_ReflectionObject)();
  c_ReflectionObject::cloneSet(obj);
  return obj;
}
void c_ReflectionObject::cloneSet(ObjectData *cl) {
  c_ReflectionObject *clone = static_cast<c_ReflectionObject*>(cl);
  c_ReflectionClass::cloneSet(clone);
}
CallInfo c_ReflectionObject::ci_export((void*)&c_ReflectionObject::i_export, (void*)&c_ReflectionObject::ifa_export, 2, 12, 0x0000000000000000LL);
Variant c_ReflectionObject::i_export(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  if (count != 2) return throw_wrong_arguments("ReflectionObject::export", count, 2, 2, 1);
  CStrRef c(mcp.isObj ? mcp.rootObj->o_getClassName() : String(mcp.rootCls));
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (c_ReflectionObject::ti_export(c, arg0, arg1));
  }
}
Variant c_ReflectionObject::ifa_export(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (count != 2) return throw_wrong_arguments("ReflectionObject::export", count, 2, 2, 1);
  CStrRef c(mcp.isObj ? mcp.rootObj->o_getClassName() : String(mcp.rootCls));
  CVarRef arg0((a0));
  CVarRef arg1((a1));
  return (c_ReflectionObject::ti_export(c, arg0, arg1));
}
bool c_ReflectionObject::os_get_call_info(MethodCallPackage &mcp, int64 hash) {
  CStrRef s __attribute__((__unused__)) (*mcp.name);
  if (hash < 0) hash = s->hash();
  switch (hash & 1) {
    case 0:
      HASH_GUARD_LITSTR(0x0B5ABC58C98E70E8LL, NAMSTR(s_sys_ssd04b2eb8, "export")) {
        mcp.ci = &c_ReflectionObject::ci_export;
        return true;
      }
      break;
    default:
      break;
  }
  return c_ReflectionClass::os_get_call_info(mcp, hash);
}
bool c_ReflectionObject::o_get_call_info(MethodCallPackage &mcp, int64 hash) {
  mcp.obj = this;
  return os_get_call_info(mcp, hash);
}
struct ObjectStaticCallbacks cw_ReflectionObject = {
  c_ReflectionObject::os_getInit,
  c_ReflectionObject::os_get,
  c_ReflectionObject::os_lval,
  c_ReflectionObject::os_invoke,
  c_ReflectionObject::os_constant,
  c_ReflectionObject::os_get_call_info
};
void c_ReflectionObject::init() {
  c_ReflectionClass::init();
}
/* SRC: classes/reflection.php line 1297 */
Variant c_ReflectionObject::ti_export(CStrRef cls, Variant v_obj, CVarRef v_ret) {
  STATIC_METHOD_INJECTION_BUILTIN(ReflectionObject, ReflectionObject::export);
  String v_str;

  {
    p_ReflectionObject tmp0 = NEWOBJ(c_ReflectionObject)();
    (tmp0->create(v_obj));
    v_obj = tmp0;
  }
  v_str = (toString(v_obj));
  if (toBoolean(v_ret)) {
    {
      return v_str;
    }
  }
  print(v_str);
  return null;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 27 */
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_ReflectionException
Variant c_ReflectionException::os_getInit(CStrRef s) {
  return c_Exception::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_ReflectionException
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_ReflectionException
Variant c_ReflectionException::os_get(CStrRef s) {
  return c_Exception::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_ReflectionException
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_ReflectionException
Variant &c_ReflectionException::os_lval(CStrRef s) {
  return c_Exception::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_ReflectionException
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_ReflectionException
void c_ReflectionException::o_getArray(Array &props, bool pubOnly) const {
  c_Exception::o_getArray(props, pubOnly);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_ReflectionException
#ifndef OMIT_JUMP_TABLE_CLASS_SETARRAY_ReflectionException
void c_ReflectionException::o_setArray(CArrRef props) {
  c_Exception::o_setArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_SETARRAY_ReflectionException
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_ReflectionException
Variant * c_ReflectionException::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_ReflectionException
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_ReflectionException
Variant * c_ReflectionException::o_realPropPublic(CStrRef s, int flags) const {
  return c_Exception::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_ReflectionException
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_ReflectionException
Variant * c_ReflectionException::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_ReflectionException
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_ReflectionException
Variant c_ReflectionException::os_constant(const char *s) {
  return c_Exception::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_ReflectionException
IMPLEMENT_CLASS(ReflectionException)
bool c_ReflectionException::o_instanceof(CStrRef s) const {
  int64 hash = s->hash();
  switch (hash & 3) {
    case 0:
      HASH_INSTANCEOF(0x672AD818DDE95538LL, NAMSTR(s_sys_ss1da57557, "ReflectionException"));
      HASH_INSTANCEOF(0x47D93E6F80B66A94LL, NAMSTR(s_sys_sseacf71c9, "Exception"));
      break;
    default:
      break;
  }
  return false;
}
ObjectData *c_ReflectionException::cloneImpl() {
  c_ReflectionException *obj = NEWOBJ(c_ReflectionException)();
  c_ReflectionException::cloneSet(obj);
  return obj;
}
void c_ReflectionException::cloneSet(ObjectData *cl) {
  c_ReflectionException *clone = static_cast<c_ReflectionException*>(cl);
  c_Exception::cloneSet(clone);
}
bool c_ReflectionException::os_get_call_info(MethodCallPackage &mcp, int64 hash) {
  CStrRef s __attribute__((__unused__)) (*mcp.name);
  return c_Exception::os_get_call_info(mcp, hash);
}
bool c_ReflectionException::o_get_call_info(MethodCallPackage &mcp, int64 hash) {
  mcp.obj = this;
  return os_get_call_info(mcp, hash);
}
struct ObjectStaticCallbacks cw_ReflectionException = {
  c_ReflectionException::os_getInit,
  c_ReflectionException::os_get,
  c_ReflectionException::os_lval,
  c_ReflectionException::os_invoke,
  c_ReflectionException::os_constant,
  c_ReflectionException::os_get_call_info
};
void c_ReflectionException::init() {
  c_Exception::init();
}
/* SRC: classes/reflection.php line 538 */
const int64 q_ReflectionClass_IS_IMPLICIT_ABSTRACT = 16LL;
const int64 q_ReflectionClass_IS_EXPLICIT_ABSTRACT = 32LL;
const int64 q_ReflectionClass_IS_FINAL = 64LL;
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_ReflectionClass
Variant c_ReflectionClass::os_getInit(CStrRef s) {
  DECLARE_SYSTEM_GLOBALS(g);
  int64 hash = s->hash();
  switch (hash & 3) {
    case 2:
      HASH_RETURN_NAMSTR(0x5655B4FF77E35232LL, NAMSTR(s_sys_ssdc3cbddc, "name"),
                         null, 4);
      break;
    case 3:
      HASH_RETURN_NAMSTR(0x0F2EF58F157D479FLL, NAMSTR(s_sys_ss33988b3e, "info"),
                         null, 4);
      break;
    default:
      break;
  }
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_ReflectionClass
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_ReflectionClass
Variant c_ReflectionClass::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_ReflectionClass
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_ReflectionClass
Variant &c_ReflectionClass::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_ReflectionClass
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_ReflectionClass
void c_ReflectionClass::o_getArray(Array &props, bool pubOnly) const {
  if (isInitialized(m_name)) props.lvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Key).setWithRef(m_name);
  if (!pubOnly) if (isInitialized(m_info)) props.lvalAt(NAMSTR(s_sys_ss84e1d89d, "\000ReflectionClass\000info"), AccessFlags::Key).setWithRef(m_info);
  c_ObjectData::o_getArray(props, pubOnly);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_ReflectionClass
#ifndef OMIT_JUMP_TABLE_CLASS_SETARRAY_ReflectionClass
void c_ReflectionClass::o_setArray(CArrRef props) {
  props->load(NAMSTR(s_sys_ss84e1d89d, "\000ReflectionClass\000info"), m_info);
  c_ObjectData::o_setArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_SETARRAY_ReflectionClass
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_ReflectionClass
Variant * c_ReflectionClass::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  CStrRef s = context.isNull() ? FrameInjection::GetClassName(false) : context;
  int64 hash = s->hash();
  switch (hash & 1) {
    case 1:
      HASH_GUARD_STRING(0x35A44A5E6AE2E71DLL, ReflectionClass) { return o_realPropPrivate(prop, flags); }
      break;
    default:
      break;
  }
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_ReflectionClass
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_ReflectionClass
Variant * c_ReflectionClass::o_realPropPublic(CStrRef s, int flags) const {
  int64 hash = s->hash();
  switch (hash & 1) {
    case 0:
      HASH_REALPROP_STRING(0x5655B4FF77E35232LL, "name", 4, name);
      break;
    default:
      break;
  }
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_ReflectionClass
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_ReflectionClass
Variant * c_ReflectionClass::o_realPropPrivate(CStrRef s, int flags) const {
  int64 hash = s->hash();
  switch (hash & 1) {
    case 1:
      HASH_REALPROP_STRING(0x0F2EF58F157D479FLL, "info", 4, info);
      break;
    default:
      break;
  }
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_ReflectionClass
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_ReflectionClass
Variant c_ReflectionClass::os_constant(const char *s) {
  int64 hash = hash_string(s);
  switch (hash & 7) {
    case 2:
      HASH_RETURN(0x042E299D3BE2773ALL, q_ReflectionClass_IS_IMPLICIT_ABSTRACT, "IS_IMPLICIT_ABSTRACT");
      break;
    case 6:
      HASH_RETURN(0x468EF528A19B529ELL, q_ReflectionClass_IS_EXPLICIT_ABSTRACT, "IS_EXPLICIT_ABSTRACT");
      HASH_RETURN(0x47AAFAC74A58AD66LL, q_ReflectionClass_IS_FINAL, "IS_FINAL");
      break;
    default:
      break;
  }
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_ReflectionClass
IMPLEMENT_CLASS(ReflectionClass)
bool c_ReflectionClass::o_instanceof(CStrRef s) const {
  int64 hash = s->hash();
  switch (hash & 3) {
    case 1:
      HASH_INSTANCEOF(0x35A44A5E6AE2E71DLL, NAMSTR(s_sys_ssfc63c2bb, "ReflectionClass"));
      HASH_INSTANCEOF(0x62F7F85447C0A605LL, NAMSTR(s_sys_ss0d7533cf, "Reflector"));
      break;
    default:
      break;
  }
  return false;
}
ObjectData *c_ReflectionClass::cloneImpl() {
  c_ReflectionClass *obj = NEWOBJ(c_ReflectionClass)();
  c_ReflectionClass::cloneSet(obj);
  return obj;
}
void c_ReflectionClass::cloneSet(ObjectData *cl) {
  c_ReflectionClass *clone = static_cast<c_ReflectionClass*>(cl);
  ObjectData::cloneSet(clone);
  clone->m_name.setWithRef(m_name);
  clone->m_info.setWithRef(m_info);
}
CallInfo c_ReflectionClass::ci_getmethods((void*)&c_ReflectionClass::i_getmethods, (void*)&c_ReflectionClass::ifa_getmethods, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_isiterateable((void*)&c_ReflectionClass::i_isiterateable, (void*)&c_ReflectionClass::ifa_isiterateable, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getstaticpropertyvalue((void*)&c_ReflectionClass::i_getstaticpropertyvalue, (void*)&c_ReflectionClass::ifa_getstaticpropertyvalue, 2, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_isuserdefined((void*)&c_ReflectionClass::i_isuserdefined, (void*)&c_ReflectionClass::ifa_isuserdefined, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_newinstance((void*)&c_ReflectionClass::i_newinstance, (void*)&c_ReflectionClass::ifa_newinstance, 0, 5, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getextension((void*)&c_ReflectionClass::i_getextension, (void*)&c_ReflectionClass::ifa_getextension, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getconstructor((void*)&c_ReflectionClass::i_getconstructor, (void*)&c_ReflectionClass::ifa_getconstructor, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci___tostring((void*)&c_ReflectionClass::i___tostring, (void*)&c_ReflectionClass::ifa___tostring, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_newinstanceargs((void*)&c_ReflectionClass::i_newinstanceargs, (void*)&c_ReflectionClass::ifa_newinstanceargs, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getendline((void*)&c_ReflectionClass::i_getendline, (void*)&c_ReflectionClass::ifa_getendline, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_isinstance((void*)&c_ReflectionClass::i_isinstance, (void*)&c_ReflectionClass::ifa_isinstance, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_hasmethod((void*)&c_ReflectionClass::i_hasmethod, (void*)&c_ReflectionClass::ifa_hasmethod, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci___construct((void*)&c_ReflectionClass::i___construct, (void*)&c_ReflectionClass::ifa___construct, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_isfinal((void*)&c_ReflectionClass::i_isfinal, (void*)&c_ReflectionClass::ifa_isfinal, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getmodifiers((void*)&c_ReflectionClass::i_getmodifiers, (void*)&c_ReflectionClass::ifa_getmodifiers, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_export((void*)&c_ReflectionClass::i_export, (void*)&c_ReflectionClass::ifa_export, 2, 12, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getproperties((void*)&c_ReflectionClass::i_getproperties, (void*)&c_ReflectionClass::ifa_getproperties, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_hasconstant((void*)&c_ReflectionClass::i_hasconstant, (void*)&c_ReflectionClass::ifa_hasconstant, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getmethod((void*)&c_ReflectionClass::i_getmethod, (void*)&c_ReflectionClass::ifa_getmethod, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getextensionname((void*)&c_ReflectionClass::i_getextensionname, (void*)&c_ReflectionClass::ifa_getextensionname, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getparentclass((void*)&c_ReflectionClass::i_getparentclass, (void*)&c_ReflectionClass::ifa_getparentclass, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getfilename((void*)&c_ReflectionClass::i_getfilename, (void*)&c_ReflectionClass::ifa_getfilename, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_implementsinterface((void*)&c_ReflectionClass::i_implementsinterface, (void*)&c_ReflectionClass::ifa_implementsinterface, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getinterfacenames((void*)&c_ReflectionClass::i_getinterfacenames, (void*)&c_ReflectionClass::ifa_getinterfacenames, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getconstant((void*)&c_ReflectionClass::i_getconstant, (void*)&c_ReflectionClass::ifa_getconstant, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getstartline((void*)&c_ReflectionClass::i_getstartline, (void*)&c_ReflectionClass::ifa_getstartline, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getconstants((void*)&c_ReflectionClass::i_getconstants, (void*)&c_ReflectionClass::ifa_getconstants, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getdoccomment((void*)&c_ReflectionClass::i_getdoccomment, (void*)&c_ReflectionClass::ifa_getdoccomment, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_isinterface((void*)&c_ReflectionClass::i_isinterface, (void*)&c_ReflectionClass::ifa_isinterface, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_issubclassof((void*)&c_ReflectionClass::i_issubclassof, (void*)&c_ReflectionClass::ifa_issubclassof, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_hasproperty((void*)&c_ReflectionClass::i_hasproperty, (void*)&c_ReflectionClass::ifa_hasproperty, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getstaticproperties((void*)&c_ReflectionClass::i_getstaticproperties, (void*)&c_ReflectionClass::ifa_getstaticproperties, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_test((void*)&c_ReflectionClass::i_test, (void*)&c_ReflectionClass::ifa_test, 2, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getdefaultproperties((void*)&c_ReflectionClass::i_getdefaultproperties, (void*)&c_ReflectionClass::ifa_getdefaultproperties, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_setstaticpropertyvalue((void*)&c_ReflectionClass::i_setstaticpropertyvalue, (void*)&c_ReflectionClass::ifa_setstaticpropertyvalue, 2, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_isinstantiable((void*)&c_ReflectionClass::i_isinstantiable, (void*)&c_ReflectionClass::ifa_isinstantiable, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getinterfaces((void*)&c_ReflectionClass::i_getinterfaces, (void*)&c_ReflectionClass::ifa_getinterfaces, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_fetch((void*)&c_ReflectionClass::i_fetch, (void*)&c_ReflectionClass::ifa_fetch, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_isabstract((void*)&c_ReflectionClass::i_isabstract, (void*)&c_ReflectionClass::ifa_isabstract, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getname((void*)&c_ReflectionClass::i_getname, (void*)&c_ReflectionClass::ifa_getname, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_getproperty((void*)&c_ReflectionClass::i_getproperty, (void*)&c_ReflectionClass::ifa_getproperty, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionClass::ci_isinternal((void*)&c_ReflectionClass::i_isinternal, (void*)&c_ReflectionClass::ifa_isinternal, 0, 4, 0x0000000000000000LL);
Variant c_ReflectionClass::i_getmethods(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 1) return throw_toomany_arguments("ReflectionClass::getMethods", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_getmethods());
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_getmethods(arg0));
  }
}
Variant c_ReflectionClass::i_isiterateable(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::isIterateable", 0, 1);
  return (self->t_isiterateable());
}
Variant c_ReflectionClass::i_getstaticpropertyvalue(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count < 1 || count > 2) return throw_wrong_arguments("ReflectionClass::getStaticPropertyValue", count, 1, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t_getstaticpropertyvalue(arg0));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_getstaticpropertyvalue(arg0, arg1));
  }
}
Variant c_ReflectionClass::i_isuserdefined(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::isUserDefined", 0, 1);
  return (self->t_isuserdefined());
}
Variant c_ReflectionClass::i_newinstance(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  const Array &p(count > 0 ? params.slice(0, count - 0, false) : Array());
  return (self->t_newinstance(count, p));
}
Variant c_ReflectionClass::i_getextension(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::getExtension", 0, 1);
  return (self->t_getextension());
}
Variant c_ReflectionClass::i_getconstructor(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::getConstructor", 0, 1);
  return (self->t_getconstructor());
}
Variant c_ReflectionClass::i___tostring(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::__toString", 0, 1);
  return (self->t___tostring());
}
Variant c_ReflectionClass::i_newinstanceargs(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionClass::newInstanceArgs", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_newinstanceargs(arg0));
  }
}
Variant c_ReflectionClass::i_getendline(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::getEndLine", 0, 1);
  return (self->t_getendline());
}
Variant c_ReflectionClass::i_isinstance(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionClass::isInstance", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_isinstance(arg0));
  }
}
Variant c_ReflectionClass::i_hasmethod(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionClass::hasMethod", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_hasmethod(arg0));
  }
}
Variant c_ReflectionClass::i___construct(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionClass::__construct", count, 1, 1, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___construct(arg0), null);
  }
}
Variant c_ReflectionClass::i_isfinal(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::isFinal", 0, 1);
  return (self->t_isfinal());
}
Variant c_ReflectionClass::i_getmodifiers(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::getModifiers", 0, 1);
  return (self->t_getmodifiers());
}
Variant c_ReflectionClass::i_export(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  if (count != 2) return throw_wrong_arguments("ReflectionClass::export", count, 2, 2, 1);
  CStrRef c(mcp.isObj ? mcp.rootObj->o_getClassName() : String(mcp.rootCls));
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (c_ReflectionClass::ti_export(c, arg0, arg1));
  }
}
Variant c_ReflectionClass::i_getproperties(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 1) return throw_toomany_arguments("ReflectionClass::getProperties", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_getproperties());
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_getproperties(arg0));
  }
}
Variant c_ReflectionClass::i_hasconstant(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionClass::hasConstant", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_hasconstant(arg0));
  }
}
Variant c_ReflectionClass::i_getmethod(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionClass::getMethod", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_getmethod(arg0));
  }
}
Variant c_ReflectionClass::i_getextensionname(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::getExtensionName", 0, 1);
  return (self->t_getextensionname());
}
Variant c_ReflectionClass::i_getparentclass(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::getParentClass", 0, 1);
  return (self->t_getparentclass());
}
Variant c_ReflectionClass::i_getfilename(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::getFileName", 0, 1);
  return (self->t_getfilename());
}
Variant c_ReflectionClass::i_implementsinterface(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionClass::implementsInterface", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_implementsinterface(arg0));
  }
}
Variant c_ReflectionClass::i_getinterfacenames(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::getInterfaceNames", 0, 1);
  return (self->t_getinterfacenames());
}
Variant c_ReflectionClass::i_getconstant(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionClass::getConstant", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_getconstant(arg0));
  }
}
Variant c_ReflectionClass::i_getstartline(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::getStartLine", 0, 1);
  return (self->t_getstartline());
}
Variant c_ReflectionClass::i_getconstants(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::getConstants", 0, 1);
  return (self->t_getconstants());
}
Variant c_ReflectionClass::i_getdoccomment(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::getDocComment", 0, 1);
  return (self->t_getdoccomment());
}
Variant c_ReflectionClass::i_isinterface(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::isInterface", 0, 1);
  return (self->t_isinterface());
}
Variant c_ReflectionClass::i_issubclassof(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionClass::isSubclassOf", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_issubclassof(arg0));
  }
}
Variant c_ReflectionClass::i_hasproperty(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionClass::hasProperty", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_hasproperty(arg0));
  }
}
Variant c_ReflectionClass::i_getstaticproperties(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::getStaticProperties", 0, 1);
  return (self->t_getstaticproperties());
}
Variant c_ReflectionClass::i_test(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 2) return throw_wrong_arguments("ReflectionClass::test", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_test(arg0, arg1));
  }
}
Variant c_ReflectionClass::i_getdefaultproperties(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::getDefaultProperties", 0, 1);
  return (self->t_getdefaultproperties());
}
Variant c_ReflectionClass::i_setstaticpropertyvalue(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 2) return throw_wrong_arguments("ReflectionClass::setStaticPropertyValue", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_setstaticpropertyvalue(arg0, arg1), null);
  }
}
Variant c_ReflectionClass::i_isinstantiable(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::isInstantiable", 0, 1);
  return (self->t_isinstantiable());
}
Variant c_ReflectionClass::i_getinterfaces(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::getInterfaces", 0, 1);
  return (self->t_getinterfaces());
}
Variant c_ReflectionClass::i_fetch(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionClass::fetch", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_fetch(arg0));
  }
}
Variant c_ReflectionClass::i_isabstract(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::isAbstract", 0, 1);
  return (self->t_isabstract());
}
Variant c_ReflectionClass::i_getname(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::getName", 0, 1);
  return (self->t_getname());
}
Variant c_ReflectionClass::i_getproperty(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionClass::getProperty", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_getproperty(arg0));
  }
}
Variant c_ReflectionClass::i_isinternal(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::isInternal", 0, 1);
  return (self->t_isinternal());
}
Variant c_ReflectionClass::ifa_getmethods(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 1) return throw_toomany_arguments("ReflectionClass::getMethods", 1, 1);
  if (count <= 0) return (self->t_getmethods());
  CVarRef arg0((a0));
  return (self->t_getmethods(arg0));
}
Variant c_ReflectionClass::ifa_isiterateable(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::isIterateable", 0, 1);
  return (self->t_isiterateable());
}
Variant c_ReflectionClass::ifa_getstaticpropertyvalue(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count < 1 || count > 2) return throw_wrong_arguments("ReflectionClass::getStaticPropertyValue", count, 1, 2, 1);
  CVarRef arg0((a0));
  if (count <= 1) return (self->t_getstaticpropertyvalue(arg0));
  CVarRef arg1((a1));
  return (self->t_getstaticpropertyvalue(arg0, arg1));
}
Variant c_ReflectionClass::ifa_isuserdefined(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::isUserDefined", 0, 1);
  return (self->t_isuserdefined());
}
Variant c_ReflectionClass::ifa_newinstance(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  Array p;
  if (count >= 1) p.append(a0);
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (self->t_newinstance(count, p));
}
Variant c_ReflectionClass::ifa_getextension(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::getExtension", 0, 1);
  return (self->t_getextension());
}
Variant c_ReflectionClass::ifa_getconstructor(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::getConstructor", 0, 1);
  return (self->t_getconstructor());
}
Variant c_ReflectionClass::ifa___tostring(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::__toString", 0, 1);
  return (self->t___tostring());
}
Variant c_ReflectionClass::ifa_newinstanceargs(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionClass::newInstanceArgs", count, 1, 1, 1);
  CVarRef arg0((a0));
  return (self->t_newinstanceargs(arg0));
}
Variant c_ReflectionClass::ifa_getendline(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::getEndLine", 0, 1);
  return (self->t_getendline());
}
Variant c_ReflectionClass::ifa_isinstance(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionClass::isInstance", count, 1, 1, 1);
  CVarRef arg0((a0));
  return (self->t_isinstance(arg0));
}
Variant c_ReflectionClass::ifa_hasmethod(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionClass::hasMethod", count, 1, 1, 1);
  CVarRef arg0((a0));
  return (self->t_hasmethod(arg0));
}
Variant c_ReflectionClass::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionClass::__construct", count, 1, 1, 2);
  CVarRef arg0((a0));
  return (self->t___construct(arg0), null);
}
Variant c_ReflectionClass::ifa_isfinal(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::isFinal", 0, 1);
  return (self->t_isfinal());
}
Variant c_ReflectionClass::ifa_getmodifiers(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::getModifiers", 0, 1);
  return (self->t_getmodifiers());
}
Variant c_ReflectionClass::ifa_export(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (count != 2) return throw_wrong_arguments("ReflectionClass::export", count, 2, 2, 1);
  CStrRef c(mcp.isObj ? mcp.rootObj->o_getClassName() : String(mcp.rootCls));
  CVarRef arg0((a0));
  CVarRef arg1((a1));
  return (c_ReflectionClass::ti_export(c, arg0, arg1));
}
Variant c_ReflectionClass::ifa_getproperties(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 1) return throw_toomany_arguments("ReflectionClass::getProperties", 1, 1);
  if (count <= 0) return (self->t_getproperties());
  CVarRef arg0((a0));
  return (self->t_getproperties(arg0));
}
Variant c_ReflectionClass::ifa_hasconstant(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionClass::hasConstant", count, 1, 1, 1);
  CVarRef arg0((a0));
  return (self->t_hasconstant(arg0));
}
Variant c_ReflectionClass::ifa_getmethod(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionClass::getMethod", count, 1, 1, 1);
  CVarRef arg0((a0));
  return (self->t_getmethod(arg0));
}
Variant c_ReflectionClass::ifa_getextensionname(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::getExtensionName", 0, 1);
  return (self->t_getextensionname());
}
Variant c_ReflectionClass::ifa_getparentclass(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::getParentClass", 0, 1);
  return (self->t_getparentclass());
}
Variant c_ReflectionClass::ifa_getfilename(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::getFileName", 0, 1);
  return (self->t_getfilename());
}
Variant c_ReflectionClass::ifa_implementsinterface(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionClass::implementsInterface", count, 1, 1, 1);
  CVarRef arg0((a0));
  return (self->t_implementsinterface(arg0));
}
Variant c_ReflectionClass::ifa_getinterfacenames(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::getInterfaceNames", 0, 1);
  return (self->t_getinterfacenames());
}
Variant c_ReflectionClass::ifa_getconstant(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionClass::getConstant", count, 1, 1, 1);
  CVarRef arg0((a0));
  return (self->t_getconstant(arg0));
}
Variant c_ReflectionClass::ifa_getstartline(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::getStartLine", 0, 1);
  return (self->t_getstartline());
}
Variant c_ReflectionClass::ifa_getconstants(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::getConstants", 0, 1);
  return (self->t_getconstants());
}
Variant c_ReflectionClass::ifa_getdoccomment(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::getDocComment", 0, 1);
  return (self->t_getdoccomment());
}
Variant c_ReflectionClass::ifa_isinterface(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::isInterface", 0, 1);
  return (self->t_isinterface());
}
Variant c_ReflectionClass::ifa_issubclassof(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionClass::isSubclassOf", count, 1, 1, 1);
  CVarRef arg0((a0));
  return (self->t_issubclassof(arg0));
}
Variant c_ReflectionClass::ifa_hasproperty(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionClass::hasProperty", count, 1, 1, 1);
  CVarRef arg0((a0));
  return (self->t_hasproperty(arg0));
}
Variant c_ReflectionClass::ifa_getstaticproperties(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::getStaticProperties", 0, 1);
  return (self->t_getstaticproperties());
}
Variant c_ReflectionClass::ifa_test(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 2) return throw_wrong_arguments("ReflectionClass::test", count, 2, 2, 1);
  CVarRef arg0((a0));
  CVarRef arg1((a1));
  return (self->t_test(arg0, arg1));
}
Variant c_ReflectionClass::ifa_getdefaultproperties(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::getDefaultProperties", 0, 1);
  return (self->t_getdefaultproperties());
}
Variant c_ReflectionClass::ifa_setstaticpropertyvalue(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 2) return throw_wrong_arguments("ReflectionClass::setStaticPropertyValue", count, 2, 2, 1);
  CVarRef arg0((a0));
  CVarRef arg1((a1));
  return (self->t_setstaticpropertyvalue(arg0, arg1), null);
}
Variant c_ReflectionClass::ifa_isinstantiable(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::isInstantiable", 0, 1);
  return (self->t_isinstantiable());
}
Variant c_ReflectionClass::ifa_getinterfaces(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::getInterfaces", 0, 1);
  return (self->t_getinterfaces());
}
Variant c_ReflectionClass::ifa_fetch(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionClass::fetch", count, 1, 1, 1);
  CVarRef arg0((a0));
  return (self->t_fetch(arg0));
}
Variant c_ReflectionClass::ifa_isabstract(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::isAbstract", 0, 1);
  return (self->t_isabstract());
}
Variant c_ReflectionClass::ifa_getname(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::getName", 0, 1);
  return (self->t_getname());
}
Variant c_ReflectionClass::ifa_getproperty(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionClass::getProperty", count, 1, 1, 1);
  CVarRef arg0((a0));
  return (self->t_getproperty(arg0));
}
Variant c_ReflectionClass::ifa_isinternal(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionClass *self = NULL;
  p_ReflectionClass pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionClass*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionClass::isInternal", 0, 1);
  return (self->t_isinternal());
}
bool c_ReflectionClass::os_get_call_info(MethodCallPackage &mcp, int64 hash) {
  CStrRef s __attribute__((__unused__)) (*mcp.name);
  if (hash < 0) hash = s->hash();
  switch (hash & 127) {
    case 4:
      HASH_GUARD_LITSTR(0x39C1BB731CB1CB04LL, NAMSTR(s_sys_ssf8395a4d, "getStartLine")) {
        mcp.ci = &c_ReflectionClass::ci_getstartline;
        return true;
      }
      break;
    case 15:
      HASH_GUARD_LITSTR(0x40C7B30DCB439C8FLL, NAMSTR(s_sys_ssf3f5d744, "hasProperty")) {
        mcp.ci = &c_ReflectionClass::ci_hasproperty;
        return true;
      }
      break;
    case 19:
      HASH_GUARD_LITSTR(0x642C2D2994B34A13LL, NAMSTR(s_sys_ss6974a1cc, "__toString")) {
        mcp.ci = &c_ReflectionClass::ci___tostring;
        return true;
      }
      break;
    case 20:
      HASH_GUARD_LITSTR(0x24253EBA491D6014LL, NAMSTR(s_sys_ss97b15062, "getModifiers")) {
        mcp.ci = &c_ReflectionClass::ci_getmodifiers;
        return true;
      }
      break;
    case 24:
      HASH_GUARD_LITSTR(0x21820E7AA4733998LL, NAMSTR(s_sys_sse1ffa7cf, "hasMethod")) {
        mcp.ci = &c_ReflectionClass::ci_hasmethod;
        return true;
      }
      break;
    case 27:
      HASH_GUARD_LITSTR(0x0F1AD0A8EC4C229BLL, NAMSTR(s_sys_ssc7d7a51a, "getDefaultProperties")) {
        mcp.ci = &c_ReflectionClass::ci_getdefaultproperties;
        return true;
      }
      break;
    case 30:
      HASH_GUARD_LITSTR(0x1BC5F3D87676509ELL, NAMSTR(s_sys_ss27634730, "isInterface")) {
        mcp.ci = &c_ReflectionClass::ci_isinterface;
        return true;
      }
      break;
    case 34:
      HASH_GUARD_LITSTR(0x323D9BCB05797B22LL, NAMSTR(s_sys_ss1ce69cd5, "getStaticProperties")) {
        mcp.ci = &c_ReflectionClass::ci_getstaticproperties;
        return true;
      }
      break;
    case 41:
      HASH_GUARD_LITSTR(0x030CE1D6142F8C29LL, NAMSTR(s_sys_ss43d0dde2, "isInstance")) {
        mcp.ci = &c_ReflectionClass::ci_isinstance;
        return true;
      }
      HASH_GUARD_LITSTR(0x1D6B8CA358B49929LL, NAMSTR(s_sys_ss7157d1ae, "getExtensionName")) {
        mcp.ci = &c_ReflectionClass::ci_getextensionname;
        return true;
      }
      break;
    case 42:
      HASH_GUARD_LITSTR(0x16BA16CE6488AAAALL, NAMSTR(s_sys_ss4483b6ae, "getMethods")) {
        mcp.ci = &c_ReflectionClass::ci_getmethods;
        return true;
      }
      HASH_GUARD_LITSTR(0x226F6E80CECD3CAALL, NAMSTR(s_sys_ss53ec6e8f, "getConstructor")) {
        mcp.ci = &c_ReflectionClass::ci_getconstructor;
        return true;
      }
      HASH_GUARD_LITSTR(0x24596BE6D21F7CAALL, NAMSTR(s_sys_ss8e2abdf3, "getInterfaceNames")) {
        mcp.ci = &c_ReflectionClass::ci_getinterfacenames;
        return true;
      }
      break;
    case 46:
      HASH_GUARD_LITSTR(0x3C882D4A895F612ELL, NAMSTR(s_sys_ss5e1f54fe, "getStaticPropertyValue")) {
        mcp.ci = &c_ReflectionClass::ci_getstaticpropertyvalue;
        return true;
      }
      HASH_GUARD_LITSTR(0x06FB6A7DC3D795AELL, NAMSTR(s_sys_ssc556d1b5, "isFinal")) {
        mcp.ci = &c_ReflectionClass::ci_isfinal;
        return true;
      }
      break;
    case 48:
      HASH_GUARD_LITSTR(0x30A86FCA01FE7030LL, NAMSTR(s_sys_ss56c85b78, "newInstance")) {
        mcp.ci = &c_ReflectionClass::ci_newinstance;
        return true;
      }
      break;
    case 52:
      HASH_GUARD_LITSTR(0x3DB53E1FBD3C0734LL, NAMSTR(s_sys_ss0f90caf6, "getConstant")) {
        mcp.ci = &c_ReflectionClass::ci_getconstant;
        return true;
      }
      break;
    case 54:
      HASH_GUARD_LITSTR(0x0D81ECE253A3B5B6LL, NAMSTR(s_sys_sscdbb2d67, "getMethod")) {
        mcp.ci = &c_ReflectionClass::ci_getmethod;
        return true;
      }
      break;
    case 55:
      HASH_GUARD_LITSTR(0x7460D945DA32FDB7LL, NAMSTR(s_sys_ssdf34c0b4, "isAbstract")) {
        mcp.ci = &c_ReflectionClass::ci_isabstract;
        return true;
      }
      break;
    case 59:
      HASH_GUARD_LITSTR(0x25D24435915E6E3BLL, NAMSTR(s_sys_sscd0bfaee, "getExtension")) {
        mcp.ci = &c_ReflectionClass::ci_getextension;
        return true;
      }
      break;
    case 60:
      HASH_GUARD_LITSTR(0x0D8AAD6BA2BBCD3CLL, NAMSTR(s_sys_ss4d6442de, "isInstantiable")) {
        mcp.ci = &c_ReflectionClass::ci_isinstantiable;
        return true;
      }
      break;
    case 63:
      HASH_GUARD_LITSTR(0x54C2DC04C4A62B3FLL, NAMSTR(s_sys_ss37217e60, "hasConstant")) {
        mcp.ci = &c_ReflectionClass::ci_hasconstant;
        return true;
      }
      break;
    case 67:
      HASH_GUARD_LITSTR(0x67C15E3D98C00B43LL, NAMSTR(s_sys_ssd6eedaeb, "getInterfaces")) {
        mcp.ci = &c_ReflectionClass::ci_getinterfaces;
        return true;
      }
      break;
    case 68:
      HASH_GUARD_LITSTR(0x1EB679C3602F4B44LL, NAMSTR(s_sys_ss7ace3627, "getProperties")) {
        mcp.ci = &c_ReflectionClass::ci_getproperties;
        return true;
      }
      break;
    case 71:
      HASH_GUARD_LITSTR(0x0FD73627FB023047LL, NAMSTR(s_sys_ssd029c1ac, "getProperty")) {
        mcp.ci = &c_ReflectionClass::ci_getproperty;
        return true;
      }
      break;
    case 77:
      HASH_GUARD_LITSTR(0x1930CE336D39474DLL, NAMSTR(s_sys_ss3a783e44, "getFileName")) {
        mcp.ci = &c_ReflectionClass::ci_getfilename;
        return true;
      }
      break;
    case 78:
      HASH_GUARD_LITSTR(0x7D5A57B5370B68CELL, NAMSTR(s_sys_ss8f9bd044, "isIterateable")) {
        mcp.ci = &c_ReflectionClass::ci_isiterateable;
        return true;
      }
      break;
    case 79:
      HASH_GUARD_LITSTR(0x48FDF6C5835C64CFLL, NAMSTR(s_sys_ss504bc94d, "isInternal")) {
        mcp.ci = &c_ReflectionClass::ci_isinternal;
        return true;
      }
      break;
    case 85:
      HASH_GUARD_LITSTR(0x1CC71CB013143955LL, NAMSTR(s_sys_ss6c17831d, "getConstants")) {
        mcp.ci = &c_ReflectionClass::ci_getconstants;
        return true;
      }
      break;
    case 95:
      HASH_GUARD_LITSTR(0x0D31D0AC229C615FLL, NAMSTR(s_sys_ssa1b87da7, "__construct")) {
        mcp.ci = &c_ReflectionClass::ci___construct;
        return true;
      }
      break;
    case 100:
      HASH_GUARD_LITSTR(0x6A6B8BECAE7D4164LL, NAMSTR(s_sys_ss5e0a51ee, "isUserDefined")) {
        mcp.ci = &c_ReflectionClass::ci_isuserdefined;
        return true;
      }
      break;
    case 101:
      HASH_GUARD_LITSTR(0x23F51CDECC198965LL, NAMSTR(s_sys_ssc2df217e, "getName")) {
        mcp.ci = &c_ReflectionClass::ci_getname;
        return true;
      }
      break;
    case 102:
      HASH_GUARD_LITSTR(0x2735DCC254EE5C66LL, NAMSTR(s_sys_ssd8c7abd7, "newInstanceArgs")) {
        mcp.ci = &c_ReflectionClass::ci_newinstanceargs;
        return true;
      }
      break;
    case 103:
      HASH_GUARD_LITSTR(0x37349B25A0ED29E7LL, NAMSTR(s_sys_ssa6cfea13, "test")) {
        mcp.ci = &c_ReflectionClass::ci_test;
        return true;
      }
      break;
    case 104:
      HASH_GUARD_LITSTR(0x0B5ABC58C98E70E8LL, NAMSTR(s_sys_ssd04b2eb8, "export")) {
        mcp.ci = &c_ReflectionClass::ci_export;
        return true;
      }
      break;
    case 112:
      HASH_GUARD_LITSTR(0x6C19E85007BC4570LL, NAMSTR(s_sys_ss8934f5fc, "getEndLine")) {
        mcp.ci = &c_ReflectionClass::ci_getendline;
        return true;
      }
      break;
    case 113:
      HASH_GUARD_LITSTR(0x07ECA928E37717F1LL, NAMSTR(s_sys_ss6b8aaff2, "setStaticPropertyValue")) {
        mcp.ci = &c_ReflectionClass::ci_setstaticpropertyvalue;
        return true;
      }
      break;
    case 114:
      HASH_GUARD_LITSTR(0x74F7FEDE16957472LL, NAMSTR(s_sys_ss24749844, "getParentClass")) {
        mcp.ci = &c_ReflectionClass::ci_getparentclass;
        return true;
      }
      break;
    case 120:
      HASH_GUARD_LITSTR(0x7C4F424FDA56ADF8LL, NAMSTR(s_sys_ssd5dbbd47, "getDocComment")) {
        mcp.ci = &c_ReflectionClass::ci_getdoccomment;
        return true;
      }
      break;
    case 123:
      HASH_GUARD_LITSTR(0x28DC702215C7D6FBLL, NAMSTR(s_sys_ssef52e4e1, "implementsInterface")) {
        mcp.ci = &c_ReflectionClass::ci_implementsinterface;
        return true;
      }
      HASH_GUARD_LITSTR(0x5E82B850BB90B0FBLL, NAMSTR(s_sys_ssf46d6580, "fetch")) {
        mcp.ci = &c_ReflectionClass::ci_fetch;
        return true;
      }
      break;
    case 126:
      HASH_GUARD_LITSTR(0x373333991926C97ELL, NAMSTR(s_sys_ssdd355b2b, "isSubclassOf")) {
        mcp.ci = &c_ReflectionClass::ci_issubclassof;
        return true;
      }
      break;
    default:
      break;
  }
  return c_ObjectData::os_get_call_info(mcp, hash);
}
bool c_ReflectionClass::o_get_call_info(MethodCallPackage &mcp, int64 hash) {
  mcp.obj = this;
  return os_get_call_info(mcp, hash);
}
c_ReflectionClass *c_ReflectionClass::create(Variant v_name) {
  CountableHelper h(this);
  init();
  t___construct(v_name);
  return this;
}
void c_ReflectionClass::dynConstruct(CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  if (count != 1) throw_wrong_arguments("ReflectionClass::__construct", count, 1, 1, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    (t___construct(arg0));
  }
}
void c_ReflectionClass::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_ReflectionClass::ci___construct;
  mcp.obj = this;
}
void c_ReflectionClass::dynConstructFromEval(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  unsigned int i = 0;
  do {
    if (i == params.size()) break;
    a0 = params[i]->eval(env);
    i++;
  } while(false);
  for (; i != params.size(); ++i) {
    params[i]->eval(env);
  }
  int count __attribute__((__unused__)) = params.size();
  if (count != 1) throw_wrong_arguments("ReflectionClass::__construct", count, 1, 1, 1);
  (t___construct(a0), null);
}
struct ObjectStaticCallbacks cw_ReflectionClass = {
  c_ReflectionClass::os_getInit,
  c_ReflectionClass::os_get,
  c_ReflectionClass::os_lval,
  c_ReflectionClass::os_invoke,
  c_ReflectionClass::os_constant,
  c_ReflectionClass::os_get_call_info
};
void c_ReflectionClass::init() {
  m_name = null;
  m_info = null;
}
/* SRC: classes/reflection.php line 546 */
void c_ReflectionClass::t___construct(Variant v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::__construct);
  bool oldInCtor = gasInCtor(true);
  if (x_is_object(v_name)) {
    {
      {
        const Variant &tmp0((x_get_class(v_name)));
        v_name = tmp0;
      }
    }
  }
  else {
    {
      {
        bool tmp0;
        {
          bool tmp1((toBoolean(x_call_user_func(2, VarNR(NAMSTR(s_sys_ssb7ae555d, "class_exists")), Array(ArrayInit(1, true).setRef(v_name).create())))));
          bool tmp2 = (!(tmp1));
          if (tmp2) {
            bool tmp3((toBoolean(x_call_user_func(2, VarNR(NAMSTR(s_sys_ss5f48f4d6, "interface_exists")), Array(ArrayInit(1, true).setRef(v_name).create())))));
            tmp2 = (!(tmp3));
          }
          tmp0 = (tmp2);
        }
        if (tmp0) {
          {
            {
              p_ReflectionException tmp0 = NEWOBJ(c_ReflectionException)();
              throw_exception((tmp0->create(concat3(NAMSTR(s_sys_ssa78ef7eb, "Class "), toString(v_name), NAMSTR(s_sys_ss5784ed2b, " does not exist"))), tmp0));
            }
          }
        }
      }
    }
  }
  {
    const String &tmp0((x_hphp_get_original_class_name(toString(v_name))));
    m_name = tmp0;
  }
  gasInCtor(oldInCtor);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 559 */
Variant c_ReflectionClass::t_fetch(CVarRef v_what) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::fetch);
  Primitive v_interface = 0;
  Variant v__;
  p_ReflectionClass v_p;

  if (!(toBoolean(m_info))) {
    {
      {
        const Variant &tmp0((x_call_user_func(2, VarNR(NAMSTR(s_sys_ss7732a9a6, "hphp_get_class_info")), Array(ArrayInit(1, true).setRef(m_name).create()))));
        m_info = tmp0;
      }
      if (empty(m_info)) {
        {
          {
            p_ReflectionException tmp0 = NEWOBJ(c_ReflectionException)();
            throw_exception((tmp0->create(concat3(NAMSTR(s_sys_ssa78ef7eb, "Class "), toString(m_name), NAMSTR(s_sys_ss5784ed2b, " does not exist"))), tmp0));
          }
        }
      }
      {
        LOOP_COUNTER(1);
        Variant map2 = m_info.rvalAt(NAMSTR(s_sys_sscfb8e254, "interfaces"), AccessFlags::Error_Key);
        for (ArrayIter iter3 = map2.begin(s_class_name, true); !iter3.end(); iter3.next()) {
          LOOP_COUNTER_CHECK(1);
          iter3.second(v__);
          v_interface = iter3.first();
          {
            {
              p_ReflectionClass tmp0 = NEWOBJ(c_ReflectionClass)();
              (tmp0->create(v_interface));
              v_p = tmp0;
            }
            {
              const Variant &tmp0((v_p->t_fetch(VarNR(NAMSTR(s_sys_ss5b229ad5, "methods")))));
              m_info.setOpEqual(277, NAMSTR(s_sys_ss5b229ad5, "methods"), (tmp0), true);
            }
            {
              Variant tmp0((v_p->m_info.rvalAt(NAMSTR(s_sys_ss623ae369, "constants"), AccessFlags::Error_Key)));
              m_info.setOpEqual(277, NAMSTR(s_sys_ss623ae369, "constants"), (tmp0), true);
            }
            {
              Variant tmp0((v_p->m_info.rvalAt(NAMSTR(s_sys_sscfb8e254, "interfaces"), AccessFlags::Error_Key)));
              m_info.setOpEqual(277, NAMSTR(s_sys_sscfb8e254, "interfaces"), (tmp0), true);
            }
          }
        }
      }
      if (!(empty(m_info, NAMSTR(s_sys_ssfb10fd8c, "parent"), true))) {
        {
          {
            p_ReflectionClass tmp0 = NEWOBJ(c_ReflectionClass)();
            (tmp0->create(m_info.rvalAt(NAMSTR(s_sys_ssfb10fd8c, "parent"), AccessFlags::Error_Key)));
            v_p = tmp0;
          }
          if (toBoolean(t_isinterface())) {
            {
              {
                Variant tmp0((m_info.rvalAt(NAMSTR(s_sys_ssfb10fd8c, "parent"), AccessFlags::Error_Key)));
                lval(m_info.lvalAt(NAMSTR(s_sys_sscfb8e254, "interfaces"), AccessFlags::CheckExist_Key)).append((tmp0));
              }
            }
          }
          {
            const Variant &tmp0((v_p->t_fetch(VarNR(NAMSTR(s_sys_sscfb8e254, "interfaces")))));
            m_info.setOpEqual(277, NAMSTR(s_sys_sscfb8e254, "interfaces"), (tmp0), true);
          }
          {
            Variant tmp0((v_p->m_info.rvalAt(NAMSTR(s_sys_ss90269404, "properties"), AccessFlags::Error_Key)));
            m_info.setOpEqual(277, NAMSTR(s_sys_ss90269404, "properties"), (tmp0), true);
          }
          {
            Variant tmp0((v_p->m_info.rvalAt(NAMSTR(s_sys_ss5b229ad5, "methods"), AccessFlags::Error_Key)));
            m_info.setOpEqual(277, NAMSTR(s_sys_ss5b229ad5, "methods"), (tmp0), true);
          }
          {
            Variant tmp0((v_p->m_info.rvalAt(NAMSTR(s_sys_ss623ae369, "constants"), AccessFlags::Error_Key)));
            m_info.setOpEqual(277, NAMSTR(s_sys_ss623ae369, "constants"), (tmp0), true);
          }
        }
      }
    }
  }
  return m_info.rvalAt(v_what, AccessFlags::Error);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 586 */
bool c_ReflectionClass::t_test(CVarRef v_what, CVarRef v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::test);
  Variant v_v;

  {
    const Variant &tmp0((t_fetch(v_what)));
    v_v = tmp0;
  }
  return (toBoolean(v_v) && isset(v_v, v_name));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 591 */
String c_ReflectionClass::t___tostring() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::__toString);
  return toString(null);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 610 */
Variant c_ReflectionClass::ti_export(CStrRef cls, CVarRef v_name, CVarRef v_ret) {
  STATIC_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::export);
  p_ReflectionClass v_obj;
  String v_str;

  {
    p_ReflectionClass tmp0 = NEWOBJ(c_ReflectionClass)();
    (tmp0->create(v_name));
    v_obj = tmp0;
  }
  v_str = (toString(v_obj));
  if (toBoolean(v_ret)) {
    {
      return v_str;
    }
  }
  print(v_str);
  return null;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 628 */
Variant c_ReflectionClass::t_getname() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getName);
  return t_fetch(VarNR(NAMSTR(s_sys_ssdc3cbddc, "name")));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 642 */
Variant c_ReflectionClass::t_isinternal() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::isInternal);
  return t_fetch(VarNR(NAMSTR(s_sys_ss9332a8ac, "internal")));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 655 */
bool c_ReflectionClass::t_isuserdefined() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::isUserDefined);
  {
    bool tmp0((toBoolean(t_fetch(VarNR(NAMSTR(s_sys_ss9332a8ac, "internal"))))));
    return !(tmp0);
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 669 */
bool c_ReflectionClass::t_isinstantiable() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::isInstantiable);
  {
    bool tmp0((toBoolean(t_fetch(VarNR(NAMSTR(s_sys_ss12c8a8a6, "abstract"))))));
    return !(tmp0);
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 684 */
bool c_ReflectionClass::t_hasconstant(CVarRef v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::hasConstant);
  return t_test(VarNR(NAMSTR(s_sys_ss623ae369, "constants")), v_name);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 698 */
bool c_ReflectionClass::t_hasmethod(CVarRef v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::hasMethod);
  {
    const String &tmp0((x_strtolower(toString(v_name))));
    return t_test(VarNR(NAMSTR(s_sys_ss5b229ad5, "methods")), VarNR(tmp0));
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 713 */
bool c_ReflectionClass::t_hasproperty(CVarRef v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::hasProperty);
  return t_test(VarNR(NAMSTR(s_sys_ss90269404, "properties")), v_name);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 728 */
Variant c_ReflectionClass::t_getfilename() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getFileName);
  return t_fetch(VarNR(NAMSTR(s_sys_ss8ce7db5b, "file")));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 742 */
Variant c_ReflectionClass::t_getstartline() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getStartLine);
  return t_fetch(VarNR(NAMSTR(s_sys_ssd4c67725, "line1")));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 755 */
Variant c_ReflectionClass::t_getendline() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getEndLine);
  return t_fetch(VarNR(NAMSTR(s_sys_ssbefe32a8, "line2")));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 769 */
Variant c_ReflectionClass::t_getdoccomment() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getDocComment);
  return t_fetch(VarNR(NAMSTR(s_sys_ss9cfa17a6, "doc")));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 783 */
Variant c_ReflectionClass::t_getconstructor() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getConstructor);
  Variant v_name;

  if (t_hasmethod(VarNR(NAMSTR(s_sys_ssa1b87da7, "__construct")))) {
    {
      return t_getmethod(VarNR(NAMSTR(s_sys_ssa1b87da7, "__construct")));
    }
  }
  {
    bool tmp0;
    {
      const Variant &tmp1((t_fetch(VarNR(NAMSTR(s_sys_ssdc3cbddc, "name")))));
      tmp0 = (t_hasmethod((v_name = tmp1)));
    }
    if (tmp0) {
      {
        return t_getmethod(v_name);
      }
    }
  }
  return null;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 804 */
p_ReflectionMethod c_ReflectionClass::t_getmethod(CVarRef v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getMethod);
  String v_lname;
  Variant v_methods;
  Variant v_class;
  p_ReflectionMethod v_ret;

  {
    const String &tmp0((x_strtolower(toString(v_name))));
    v_lname = tmp0;
  }
  {
    const Variant &tmp0((t_fetch(VarNR(NAMSTR(s_sys_ss5b229ad5, "methods")))));
    v_methods = tmp0;
  }
  if (!(isset(v_methods, v_lname))) {
    {
      {
        Variant tmp0((m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key)));
        v_class = tmp0;
      }
      {
        p_ReflectionException tmp0 = NEWOBJ(c_ReflectionException)();
        throw_exception((tmp0->create(concat5(NAMSTR(s_sys_ssdc6e02c2, "Method "), toString(v_class), NAMSTR(s_sys_ss819481f3, "::"), toString(v_name), NAMSTR(s_sys_ss5784ed2b, " does not exist"))), tmp0));
      }
    }
  }
  {
    const p_ReflectionMethod &tmp0((p_ReflectionMethod((NEWOBJ(c_ReflectionMethod)())->create(null, null))));
    v_ret = tmp0;
  }
  {
    Variant tmp0((v_methods.rvalAt(v_lname, AccessFlags::Error)));
    v_ret->m_info = tmp0;
  }
  v_ret->m_name = v_lname;
  {
    Variant tmp0((m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key)));
    v_ret->m_class = tmp0;
  }
  {
    bool tmp0;
    {
      bool tmp1 = (equal(v_lname, NAMSTR(s_sys_ssa1b87da7, "__construct")));
      if (!tmp1) {
        bool tmp2((toBoolean(x_strcasecmp(v_lname, toString(v_ret->m_class)))));
        bool tmp3 = (!(tmp2));
        if (tmp3) {
          bool tmp4((t_hasmethod(VarNR(NAMSTR(s_sys_ssa1b87da7, "__construct")))));
          tmp3 = (!(tmp4));
        }
        tmp1 = (tmp3);
      }
      tmp0 = (tmp1);
    }
    if (tmp0) {
      {
        v_ret->m_info.set(NAMSTR(s_sys_ssefecb9dd, "constructor"), (true), true);
      }
    }
  }
  return v_ret;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 840 */
Array c_ReflectionClass::t_getmethods(CVarRef v_filter //  = 65535LL
) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getMethods);
  Array v_ret;
  Variant v_methods;
  Primitive v_name = 0;
  Variant v__;
  p_ReflectionMethod v_m;

  v_ret = s_sys_sa00000000;
  {
    const Variant &tmp0((t_fetch(VarNR(NAMSTR(s_sys_ss5b229ad5, "methods")))));
    v_methods = tmp0;
  }
  {
    LOOP_COUNTER(1);
    for (ArrayIter iter3 = v_methods.begin(s_class_name, true); !iter3.end(); ++iter3) {
      LOOP_COUNTER_CHECK(1);
      iter3.second(v__);
      v_name = iter3.first();
      {
        {
          const p_ReflectionMethod &tmp0((t_getmethod(v_name)));
          v_m = tmp0;
        }
        if (((((((toBoolean(bitwise_and(v_filter, 256LL /* ReflectionMethod::IS_PUBLIC */)) && v_m->t_ispublic()) || (toBoolean(bitwise_and(v_filter, 512LL /* ReflectionMethod::IS_PROTECTED */)) && v_m->t_isprotected())) || (toBoolean(bitwise_and(v_filter, 1024LL /* ReflectionMethod::IS_PRIVATE */)) && v_m->t_isprivate())) || (toBoolean(bitwise_and(v_filter, 1LL /* ReflectionMethod::IS_STATIC */)) && toBoolean(v_m->t_isstatic()))) || (toBoolean(bitwise_and(v_filter, 4LL /* ReflectionMethod::IS_FINAL */)) && toBoolean(v_m->t_isfinal()))) || (toBoolean(bitwise_and(v_filter, 2LL /* ReflectionMethod::IS_ABSTRACT */)) && toBoolean(v_m->t_isabstract())))) {
          {
            v_ret.append((VarNR(v_m)));
          }
        }
      }
    }
  }
  return v_ret;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 869 */
p_ReflectionProperty c_ReflectionClass::t_getproperty(CVarRef v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getProperty);
  Variant v_properties;
  Variant v_class;
  p_ReflectionProperty v_ret;

  {
    const Variant &tmp0((t_fetch(VarNR(NAMSTR(s_sys_ss90269404, "properties")))));
    v_properties = tmp0;
  }
  if (!(isset(v_properties, v_name))) {
    {
      {
        Variant tmp0((m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key)));
        v_class = tmp0;
      }
      {
        p_ReflectionException tmp0 = NEWOBJ(c_ReflectionException)();
        throw_exception((tmp0->create(concat5(NAMSTR(s_sys_ss9795dfc8, "Property "), toString(v_class), NAMSTR(s_sys_ss819481f3, "::"), toString(v_name), NAMSTR(s_sys_ss5784ed2b, " does not exist"))), tmp0));
      }
    }
  }
  {
    const p_ReflectionProperty &tmp0((p_ReflectionProperty((NEWOBJ(c_ReflectionProperty)())->create(null, null))));
    v_ret = tmp0;
  }
  {
    Variant tmp0((v_properties.rvalAt(v_name, AccessFlags::Error)));
    v_ret->m_info = tmp0;
  }
  v_ret->m_name = v_name;
  {
    Variant tmp0((m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key)));
    v_ret->m_class = tmp0;
  }
  return v_ret;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 892 */
Array c_ReflectionClass::t_getproperties(CVarRef v_filter //  = 65535LL
) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getProperties);
  Array v_ret;
  Primitive v_name = 0;
  Variant v__;
  p_ReflectionProperty v_p;

  v_ret = s_sys_sa00000000;
  {
    LOOP_COUNTER(1);
    Variant map2 = t_fetch(VarNR(NAMSTR(s_sys_ss90269404, "properties")));
    for (ArrayIter iter3 = map2.begin(s_class_name, true); !iter3.end(); iter3.next()) {
      LOOP_COUNTER_CHECK(1);
      iter3.second(v__);
      v_name = iter3.first();
      {
        {
          const p_ReflectionProperty &tmp0((t_getproperty(v_name)));
          v_p = tmp0;
        }
        if (((((toBoolean(bitwise_and(v_filter, 256LL /* ReflectionProperty::IS_PUBLIC */)) && v_p->t_ispublic()) || (toBoolean(bitwise_and(v_filter, 512LL /* ReflectionProperty::IS_PROTECTED */)) && v_p->t_isprotected())) || (toBoolean(bitwise_and(v_filter, 1024LL /* ReflectionProperty::IS_PRIVATE */)) && v_p->t_isprivate())) || (toBoolean(bitwise_and(v_filter, 1LL /* ReflectionProperty::IS_STATIC */)) && toBoolean(v_p->t_isstatic())))) {
          {
            v_ret.append((VarNR(v_p)));
          }
        }
      }
    }
  }
  return v_ret;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 916 */
Variant c_ReflectionClass::t_getconstants() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getConstants);
  return t_fetch(VarNR(NAMSTR(s_sys_ss623ae369, "constants")));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 930 */
Variant c_ReflectionClass::t_getconstant(CVarRef v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getConstant);
  Variant v_constants;
  Variant v_class;

  {
    const Variant &tmp0((t_fetch(VarNR(NAMSTR(s_sys_ss623ae369, "constants")))));
    v_constants = tmp0;
  }
  if (!(isset(v_constants, v_name))) {
    {
      {
        Variant tmp0((m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key)));
        v_class = tmp0;
      }
      {
        p_ReflectionException tmp0 = NEWOBJ(c_ReflectionException)();
        throw_exception((tmp0->create(concat5(NAMSTR(s_sys_ssd816f860, "Class constant "), toString(v_class), NAMSTR(s_sys_ss819481f3, "::"), toString(v_name), NAMSTR(s_sys_ss5784ed2b, " does not exist"))), tmp0));
      }
    }
  }
  return v_constants.rvalAt(v_name, AccessFlags::Error);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 950 */
Array c_ReflectionClass::t_getinterfaces() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getInterfaces);
  Array v_ret;
  Primitive v_name = 0;
  Variant v__;
  p_ReflectionClass v_cls;

  v_ret = s_sys_sa00000000;
  {
    LOOP_COUNTER(1);
    Variant map2 = t_fetch(VarNR(NAMSTR(s_sys_sscfb8e254, "interfaces")));
    for (ArrayIter iter3 = map2.begin(s_class_name, true); !iter3.end(); iter3.next()) {
      LOOP_COUNTER_CHECK(1);
      iter3.second(v__);
      v_name = iter3.first();
      {
        {
          p_ReflectionClass tmp0 = NEWOBJ(c_ReflectionClass)();
          (tmp0->create(v_name));
          v_cls = tmp0;
        }
        if (toBoolean(v_cls->t_isinterface())) {
          {
            {
              const Variant &tmp0((v_cls->t_getname()));
              v_ret.set(tmp0, (VarNR(v_cls)));
            }
          }
        }
      }
    }
  }
  return v_ret;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 971 */
Array c_ReflectionClass::t_getinterfacenames() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getInterfaceNames);
  Array v_ret;
  Primitive v_name = 0;
  Variant v__;
  p_ReflectionClass v_cls;

  v_ret = s_sys_sa00000000;
  {
    LOOP_COUNTER(1);
    Variant map2 = t_fetch(VarNR(NAMSTR(s_sys_sscfb8e254, "interfaces")));
    for (ArrayIter iter3 = map2.begin(s_class_name, true); !iter3.end(); iter3.next()) {
      LOOP_COUNTER_CHECK(1);
      iter3.second(v__);
      v_name = iter3.first();
      {
        {
          p_ReflectionClass tmp0 = NEWOBJ(c_ReflectionClass)();
          (tmp0->create(v_name));
          v_cls = tmp0;
        }
        if (toBoolean(v_cls->t_isinterface())) {
          {
            {
              const Variant &tmp0((v_cls->t_getname()));
              v_ret.append((tmp0));
            }
          }
        }
      }
    }
  }
  return v_ret;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 992 */
Variant c_ReflectionClass::t_isinterface() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::isInterface);
  return t_fetch(VarNR(NAMSTR(s_sys_ss7228e959, "interface")));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1004 */
Variant c_ReflectionClass::t_isabstract() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::isAbstract);
  return t_fetch(VarNR(NAMSTR(s_sys_ss12c8a8a6, "abstract")));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1016 */
Variant c_ReflectionClass::t_isfinal() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::isFinal);
  return t_fetch(VarNR(NAMSTR(s_sys_ss2145036e, "final")));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1029 */
Variant c_ReflectionClass::t_getmodifiers() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getModifiers);
  return t_fetch(VarNR(NAMSTR(s_sys_ss9f244c80, "modifiers")));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1043 */
bool c_ReflectionClass::t_isinstance(CVarRef v_obj) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::isInstance);
  return x_hphp_instanceof(toObject(v_obj), toString(m_name));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1056 */
Object c_ReflectionClass::t_newinstance(int num_args, Array args /* = Array() */) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::newInstance);
  Array v_args;

  {
    const Array &tmp0((func_get_args(num_args, Array(),args)));
    v_args = tmp0;
  }
  return x_hphp_create_object(toString(m_name), v_args);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1075 */
Object c_ReflectionClass::t_newinstanceargs(CVarRef v_args) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::newInstanceArgs);
  {
    const String &tmp0((toString(m_name)));
    const Array &tmp1((toArray(x_array_values(v_args))));
    return x_hphp_create_object(tmp0, tmp1);
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1089 */
Variant c_ReflectionClass::t_getparentclass() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getParentClass);
  {
    bool tmp0;
    {
      const Variant &tmp1((t_fetch(VarNR(NAMSTR(s_sys_ssfb10fd8c, "parent")))));
      tmp0 = (empty(tmp1));
    }
    if (tmp0) {
      {
        return false;
      }
    }
  }
  {
    p_ReflectionClass tmp0 = NEWOBJ(c_ReflectionClass)();
    const Variant &tmp1((t_fetch(VarNR(NAMSTR(s_sys_ssfb10fd8c, "parent")))));
    return (tmp0->create(tmp1), tmp0);
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1107 */
Variant c_ReflectionClass::t_issubclassof(Variant v_cls) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::isSubclassOf);
  Primitive v_name = 0;
  Variant v__;

  if (instanceOf(v_cls, NAMSTR(s_sys_ssfc63c2bb, "ReflectionClass"))) {
    {
      {
        MethodCallPackage mcp0;
        CVarRef obj0 = v_cls;
        mcp0.methodCall((obj0), NAMSTR(s_sys_ssf46d6580, "fetch"), 0x5E82B850BB90B0FBLL);
        const CallInfo *cit0 __attribute__((__unused__)) = mcp0.ci;
        Variant tmp1(((mcp0.bindClass(fi)->getMeth1Args())(mcp0, 1, VarNR(NAMSTR(s_sys_ssdc3cbddc, "name")))));
        v_cls = tmp1;
      }
    }
  }
  {
    LOOP_COUNTER(1);
    Variant map2 = t_fetch(VarNR(NAMSTR(s_sys_sscfb8e254, "interfaces")));
    for (ArrayIter iter3 = map2.begin(s_class_name, true); !iter3.end(); iter3.next()) {
      LOOP_COUNTER_CHECK(1);
      iter3.second(v__);
      v_name = iter3.first();
      {
        {
          bool tmp0;
          {
            int tmp1((x_strcasecmp(toString(v_cls), toString(v_name))));
            tmp0 = (equal(tmp1, 0LL));
          }
          if (tmp0) {
            {
              return true;
            }
          }
        }
      }
    }
  }
  {
    bool tmp0;
    {
      const Variant &tmp1((t_fetch(VarNR(NAMSTR(s_sys_ssfb10fd8c, "parent")))));
      tmp0 = (empty(tmp1));
    }
    if (tmp0) {
      {
        return false;
      }
    }
  }
  {
    bool tmp0;
    {
      const String &tmp1((toString(v_cls)));
      const String &tmp2((toString(t_fetch(VarNR(NAMSTR(s_sys_ssfb10fd8c, "parent"))))));
      int tmp3((x_strcasecmp(tmp1, tmp2)));
      tmp0 = (equal(tmp3, 0LL));
    }
    if (tmp0) {
      {
        return true;
      }
    }
  }
  {
    MethodCallPackage mcp0;
    CVarRef obj0 = t_getparentclass();
    mcp0.methodCall((obj0), NAMSTR(s_sys_ssdd355b2b, "isSubclassOf"), 0x373333991926C97ELL);
    const CallInfo *cit0 __attribute__((__unused__)) = mcp0.ci;
    return wrap_variant((mcp0.bindClass(fi)->getMeth1Args())(mcp0, 1, v_cls));
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1135 */
Array c_ReflectionClass::t_getstaticproperties() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getStaticProperties);
  Array v_ret;
  Variant v_prop;

  v_ret = s_sys_sa00000000;
  {
    LOOP_COUNTER(1);
    Variant map2 = t_getproperties();
    for (ArrayIter iter3 = map2.begin(s_class_name, true); !iter3.end(); iter3.next()) {
      LOOP_COUNTER_CHECK(1);
      iter3.second(v_prop);
      {
        {
          bool tmp0;
          {
            MethodCallPackage mcp1;
            CVarRef obj1 = v_prop;
            mcp1.methodCall((obj1), NAMSTR(s_sys_ss404bf1b4, "isStatic"), 0x7A15DC56E8CC0B19LL);
            const CallInfo *cit1 __attribute__((__unused__)) = mcp1.ci;
            tmp0 = (toBoolean((mcp1.bindClass(fi)->getMeth0Args())(mcp1, 0)));
          }
          if (tmp0) {
            {
              {
                const Variant &tmp0((v_prop.o_getPublic(NAMSTR(s_sys_ssdc3cbddc, "name"), true)));
                v_ret.set(tmp0, (v_prop));
              }
            }
          }
        }
      }
    }
  }
  return v_ret;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1156 */
Variant c_ReflectionClass::t_getstaticpropertyvalue(CVarRef v_name, CVarRef v_default //  = null_variant
) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getStaticPropertyValue);
  {
    bool tmp0;
    {
      bool tmp1 = (t_hasproperty(v_name));
      if (tmp1) {
        const p_ReflectionProperty &tmp2((t_getproperty(v_name)));
        tmp1 = (toBoolean(tmp2->t_isstatic()));
      }
      tmp0 = (tmp1);
    }
    if (tmp0) {
      {
        return x_hphp_get_static_property(toString(m_name), toString(v_name));
      }
    }
  }
  return v_default;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1177 */
void c_ReflectionClass::t_setstaticpropertyvalue(CVarRef v_name, CVarRef v_value) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::setStaticPropertyValue);
  x_hphp_set_static_property(toString(m_name), toString(v_name), v_value);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1191 */
Array c_ReflectionClass::t_getdefaultproperties() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getDefaultProperties);
  Array v_ret;
  Variant v_prop;

  v_ret = s_sys_sa00000000;
  {
    LOOP_COUNTER(1);
    Variant map2 = t_getproperties();
    for (ArrayIter iter3 = map2.begin(s_class_name, true); !iter3.end(); iter3.next()) {
      LOOP_COUNTER_CHECK(1);
      iter3.second(v_prop);
      {
        {
          bool tmp0;
          {
            MethodCallPackage mcp1;
            CVarRef obj1 = v_prop;
            mcp1.methodCall((obj1), NAMSTR(s_sys_ss9dad4367, "isDefault"), 0x384A52597AB11F15LL);
            const CallInfo *cit1 __attribute__((__unused__)) = mcp1.ci;
            tmp0 = (toBoolean((mcp1.bindClass(fi)->getMeth0Args())(mcp1, 0)));
          }
          if (tmp0) {
            {
              {
                const Variant &tmp0((v_prop.o_getPublic(NAMSTR(s_sys_ssdc3cbddc, "name"), true)));
                v_ret.set(tmp0, (v_prop));
              }
            }
          }
        }
      }
    }
  }
  return v_ret;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1210 */
Variant c_ReflectionClass::t_isiterateable() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::isIterateable);
  return t_issubclassof(NAMSTR(s_sys_ss92306c9b, "ArrayAccess"));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1225 */
bool c_ReflectionClass::t_implementsinterface(Variant v_cls) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::implementsInterface);
  p_ReflectionClass v_clsObj;
  Primitive v_name = 0;
  Variant v__;

  if (instanceOf(v_cls, NAMSTR(s_sys_ssfc63c2bb, "ReflectionClass"))) {
    {
      {
        MethodCallPackage mcp0;
        CVarRef obj0 = v_cls;
        mcp0.methodCall((obj0), NAMSTR(s_sys_ssf46d6580, "fetch"), 0x5E82B850BB90B0FBLL);
        const CallInfo *cit0 __attribute__((__unused__)) = mcp0.ci;
        Variant tmp1(((mcp0.bindClass(fi)->getMeth1Args())(mcp0, 1, VarNR(NAMSTR(s_sys_ssdc3cbddc, "name")))));
        v_cls = tmp1;
      }
    }
  }
  {
    p_ReflectionClass tmp0 = NEWOBJ(c_ReflectionClass)();
    (tmp0->create(v_cls));
    v_clsObj = tmp0;
  }
  {
    bool tmp0;
    {
      bool tmp1((toBoolean(v_clsObj->t_isinterface())));
      tmp0 = (!(tmp1));
    }
    if (tmp0) {
      {
        {
          p_ReflectionException tmp0 = NEWOBJ(c_ReflectionException)();
          throw_exception((tmp0->create(concat3(NAMSTR(s_sys_ss44fe7272, "Interface "), toString(v_cls), NAMSTR(s_sys_ss4c77dad1, " is a Class"))), tmp0));
        }
      }
    }
  }
  {
    LOOP_COUNTER(1);
    Variant map2 = t_fetch(VarNR(NAMSTR(s_sys_sscfb8e254, "interfaces")));
    for (ArrayIter iter3 = map2.begin(s_class_name, true); !iter3.end(); iter3.next()) {
      LOOP_COUNTER_CHECK(1);
      iter3.second(v__);
      v_name = iter3.first();
      {
        {
          bool tmp0;
          {
            int tmp1((x_strcasecmp(toString(v_cls), toString(v_name))));
            tmp0 = (equal(tmp1, 0LL));
          }
          if (tmp0) {
            {
              return true;
            }
          }
        }
      }
    }
  }
  return false;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1251 */
Variant c_ReflectionClass::t_getextension() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getExtension);
  return t_fetch(VarNR(NAMSTR(s_sys_sse9bf4500, "extension")));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1265 */
Variant c_ReflectionClass::t_getextensionname() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionClass, ReflectionClass::getExtensionName);
  {
    MethodCallPackage mcp0;
    CVarRef obj0 = t_fetch(VarNR(NAMSTR(s_sys_sse9bf4500, "extension")));
    mcp0.methodCall((obj0), NAMSTR(s_sys_ssc2df217e, "getName"), 0x23F51CDECC198965LL);
    const CallInfo *cit0 __attribute__((__unused__)) = mcp0.ci;
    return wrap_variant((mcp0.bindClass(fi)->getMeth0Args())(mcp0, 0));
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1832 */
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_ReflectionExtension
Variant c_ReflectionExtension::os_getInit(CStrRef s) {
  DECLARE_SYSTEM_GLOBALS(g);
  int64 hash = s->hash();
  switch (hash & 3) {
    case 2:
      HASH_RETURN_NAMSTR(0x5655B4FF77E35232LL, NAMSTR(s_sys_ssdc3cbddc, "name"),
                         null, 4);
      break;
    case 3:
      HASH_RETURN_NAMSTR(0x0F2EF58F157D479FLL, NAMSTR(s_sys_ss33988b3e, "info"),
                         null, 4);
      break;
    default:
      break;
  }
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_ReflectionExtension
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_ReflectionExtension
Variant c_ReflectionExtension::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_ReflectionExtension
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_ReflectionExtension
Variant &c_ReflectionExtension::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_ReflectionExtension
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_ReflectionExtension
void c_ReflectionExtension::o_getArray(Array &props, bool pubOnly) const {
  if (!pubOnly) if (isInitialized(m_name)) props.lvalAt(NAMSTR(s_sys_ss8bbc8ede, "\000ReflectionExtension\000name"), AccessFlags::Key).setWithRef(m_name);
  if (!pubOnly) if (isInitialized(m_info)) props.lvalAt(NAMSTR(s_sys_ss5596f6c8, "\000ReflectionExtension\000info"), AccessFlags::Key).setWithRef(m_info);
  c_ObjectData::o_getArray(props, pubOnly);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_ReflectionExtension
#ifndef OMIT_JUMP_TABLE_CLASS_SETARRAY_ReflectionExtension
void c_ReflectionExtension::o_setArray(CArrRef props) {
  props->load(NAMSTR(s_sys_ss8bbc8ede, "\000ReflectionExtension\000name"), m_name);
  props->load(NAMSTR(s_sys_ss5596f6c8, "\000ReflectionExtension\000info"), m_info);
  c_ObjectData::o_setArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_SETARRAY_ReflectionExtension
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_ReflectionExtension
Variant * c_ReflectionExtension::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  CStrRef s = context.isNull() ? FrameInjection::GetClassName(false) : context;
  int64 hash = s->hash();
  switch (hash & 1) {
    case 1:
      HASH_GUARD_STRING(0x0B61E0BFCFA06573LL, ReflectionExtension) { return o_realPropPrivate(prop, flags); }
      break;
    default:
      break;
  }
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_ReflectionExtension
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_ReflectionExtension
Variant * c_ReflectionExtension::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_ReflectionExtension
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_ReflectionExtension
Variant * c_ReflectionExtension::o_realPropPrivate(CStrRef s, int flags) const {
  int64 hash = s->hash();
  switch (hash & 3) {
    case 2:
      HASH_REALPROP_STRING(0x5655B4FF77E35232LL, "name", 4, name);
      break;
    case 3:
      HASH_REALPROP_STRING(0x0F2EF58F157D479FLL, "info", 4, info);
      break;
    default:
      break;
  }
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_ReflectionExtension
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_ReflectionExtension
Variant c_ReflectionExtension::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_ReflectionExtension
IMPLEMENT_CLASS(ReflectionExtension)
bool c_ReflectionExtension::o_instanceof(CStrRef s) const {
  int64 hash = s->hash();
  switch (hash & 3) {
    case 1:
      HASH_INSTANCEOF(0x62F7F85447C0A605LL, NAMSTR(s_sys_ss0d7533cf, "Reflector"));
      break;
    case 3:
      HASH_INSTANCEOF(0x0B61E0BFCFA06573LL, NAMSTR(s_sys_ssff10260d, "ReflectionExtension"));
      break;
    default:
      break;
  }
  return false;
}
ObjectData *c_ReflectionExtension::cloneImpl() {
  c_ReflectionExtension *obj = NEWOBJ(c_ReflectionExtension)();
  c_ReflectionExtension::cloneSet(obj);
  return obj;
}
void c_ReflectionExtension::cloneSet(ObjectData *cl) {
  c_ReflectionExtension *clone = static_cast<c_ReflectionExtension*>(cl);
  ObjectData::cloneSet(clone);
  clone->m_name.setWithRef(m_name);
  clone->m_info.setWithRef(m_info);
}
CallInfo c_ReflectionExtension::ci___tostring((void*)&c_ReflectionExtension::i___tostring, (void*)&c_ReflectionExtension::ifa___tostring, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionExtension::ci___construct((void*)&c_ReflectionExtension::i___construct, (void*)&c_ReflectionExtension::ifa___construct, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionExtension::ci_getfunctions((void*)&c_ReflectionExtension::i_getfunctions, (void*)&c_ReflectionExtension::ifa_getfunctions, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionExtension::ci_export((void*)&c_ReflectionExtension::i_export, (void*)&c_ReflectionExtension::ifa_export, 2, 12, 0x0000000000000000LL);
CallInfo c_ReflectionExtension::ci_info((void*)&c_ReflectionExtension::i_info, (void*)&c_ReflectionExtension::ifa_info, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionExtension::ci_getinientries((void*)&c_ReflectionExtension::i_getinientries, (void*)&c_ReflectionExtension::ifa_getinientries, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionExtension::ci_getconstants((void*)&c_ReflectionExtension::i_getconstants, (void*)&c_ReflectionExtension::ifa_getconstants, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionExtension::ci_getclassnames((void*)&c_ReflectionExtension::i_getclassnames, (void*)&c_ReflectionExtension::ifa_getclassnames, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionExtension::ci_getversion((void*)&c_ReflectionExtension::i_getversion, (void*)&c_ReflectionExtension::ifa_getversion, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionExtension::ci_getname((void*)&c_ReflectionExtension::i_getname, (void*)&c_ReflectionExtension::ifa_getname, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionExtension::ci_getclasses((void*)&c_ReflectionExtension::i_getclasses, (void*)&c_ReflectionExtension::ifa_getclasses, 0, 4, 0x0000000000000000LL);
Variant c_ReflectionExtension::i___tostring(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionExtension *self = NULL;
  p_ReflectionExtension pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionExtension*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionExtension::__toString", 0, 1);
  return (self->t___tostring());
}
Variant c_ReflectionExtension::i___construct(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionExtension *self = NULL;
  p_ReflectionExtension pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionExtension*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionExtension::__construct", count, 1, 1, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___construct(arg0), null);
  }
}
Variant c_ReflectionExtension::i_getfunctions(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionExtension *self = NULL;
  p_ReflectionExtension pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionExtension*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionExtension::getFunctions", 0, 1);
  return (self->t_getfunctions());
}
Variant c_ReflectionExtension::i_export(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  if (count != 2) return throw_wrong_arguments("ReflectionExtension::export", count, 2, 2, 1);
  CStrRef c(mcp.isObj ? mcp.rootObj->o_getClassName() : String(mcp.rootCls));
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (c_ReflectionExtension::ti_export(c, arg0, arg1));
  }
}
Variant c_ReflectionExtension::i_info(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionExtension *self = NULL;
  p_ReflectionExtension pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionExtension*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionExtension::info", 0, 1);
  return (self->t_info());
}
Variant c_ReflectionExtension::i_getinientries(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionExtension *self = NULL;
  p_ReflectionExtension pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionExtension*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionExtension::getINIEntries", 0, 1);
  return (self->t_getinientries());
}
Variant c_ReflectionExtension::i_getconstants(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionExtension *self = NULL;
  p_ReflectionExtension pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionExtension*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionExtension::getConstants", 0, 1);
  return (self->t_getconstants());
}
Variant c_ReflectionExtension::i_getclassnames(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionExtension *self = NULL;
  p_ReflectionExtension pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionExtension*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionExtension::getClassNames", 0, 1);
  return (self->t_getclassnames());
}
Variant c_ReflectionExtension::i_getversion(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionExtension *self = NULL;
  p_ReflectionExtension pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionExtension*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionExtension::getVersion", 0, 1);
  return (self->t_getversion());
}
Variant c_ReflectionExtension::i_getname(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionExtension *self = NULL;
  p_ReflectionExtension pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionExtension*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionExtension::getName", 0, 1);
  return (self->t_getname());
}
Variant c_ReflectionExtension::i_getclasses(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionExtension *self = NULL;
  p_ReflectionExtension pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionExtension*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionExtension::getClasses", 0, 1);
  return (self->t_getclasses());
}
Variant c_ReflectionExtension::ifa___tostring(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionExtension *self = NULL;
  p_ReflectionExtension pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionExtension*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionExtension::__toString", 0, 1);
  return (self->t___tostring());
}
Variant c_ReflectionExtension::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionExtension *self = NULL;
  p_ReflectionExtension pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionExtension*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionExtension::__construct", count, 1, 1, 2);
  CVarRef arg0((a0));
  return (self->t___construct(arg0), null);
}
Variant c_ReflectionExtension::ifa_getfunctions(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionExtension *self = NULL;
  p_ReflectionExtension pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionExtension*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionExtension::getFunctions", 0, 1);
  return (self->t_getfunctions());
}
Variant c_ReflectionExtension::ifa_export(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (count != 2) return throw_wrong_arguments("ReflectionExtension::export", count, 2, 2, 1);
  CStrRef c(mcp.isObj ? mcp.rootObj->o_getClassName() : String(mcp.rootCls));
  CVarRef arg0((a0));
  CVarRef arg1((a1));
  return (c_ReflectionExtension::ti_export(c, arg0, arg1));
}
Variant c_ReflectionExtension::ifa_info(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionExtension *self = NULL;
  p_ReflectionExtension pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionExtension*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionExtension::info", 0, 1);
  return (self->t_info());
}
Variant c_ReflectionExtension::ifa_getinientries(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionExtension *self = NULL;
  p_ReflectionExtension pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionExtension*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionExtension::getINIEntries", 0, 1);
  return (self->t_getinientries());
}
Variant c_ReflectionExtension::ifa_getconstants(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionExtension *self = NULL;
  p_ReflectionExtension pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionExtension*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionExtension::getConstants", 0, 1);
  return (self->t_getconstants());
}
Variant c_ReflectionExtension::ifa_getclassnames(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionExtension *self = NULL;
  p_ReflectionExtension pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionExtension*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionExtension::getClassNames", 0, 1);
  return (self->t_getclassnames());
}
Variant c_ReflectionExtension::ifa_getversion(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionExtension *self = NULL;
  p_ReflectionExtension pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionExtension*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionExtension::getVersion", 0, 1);
  return (self->t_getversion());
}
Variant c_ReflectionExtension::ifa_getname(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionExtension *self = NULL;
  p_ReflectionExtension pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionExtension*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionExtension::getName", 0, 1);
  return (self->t_getname());
}
Variant c_ReflectionExtension::ifa_getclasses(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionExtension *self = NULL;
  p_ReflectionExtension pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionExtension*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionExtension::getClasses", 0, 1);
  return (self->t_getclasses());
}
bool c_ReflectionExtension::os_get_call_info(MethodCallPackage &mcp, int64 hash) {
  CStrRef s __attribute__((__unused__)) (*mcp.name);
  if (hash < 0) hash = s->hash();
  switch (hash & 31) {
    case 2:
      HASH_GUARD_LITSTR(0x0113D73FC859EDC2LL, NAMSTR(s_sys_ssd5cc982b, "getClasses")) {
        mcp.ci = &c_ReflectionExtension::ci_getclasses;
        return true;
      }
      break;
    case 5:
      HASH_GUARD_LITSTR(0x23F51CDECC198965LL, NAMSTR(s_sys_ssc2df217e, "getName")) {
        mcp.ci = &c_ReflectionExtension::ci_getname;
        return true;
      }
      break;
    case 8:
      HASH_GUARD_LITSTR(0x0B5ABC58C98E70E8LL, NAMSTR(s_sys_ssd04b2eb8, "export")) {
        mcp.ci = &c_ReflectionExtension::ci_export;
        return true;
      }
      break;
    case 15:
      HASH_GUARD_LITSTR(0x652BDFA6E22F17AFLL, NAMSTR(s_sys_ss1d6e06d8, "getFunctions")) {
        mcp.ci = &c_ReflectionExtension::ci_getfunctions;
        return true;
      }
      break;
    case 19:
      HASH_GUARD_LITSTR(0x642C2D2994B34A13LL, NAMSTR(s_sys_ss6974a1cc, "__toString")) {
        mcp.ci = &c_ReflectionExtension::ci___tostring;
        return true;
      }
      break;
    case 20:
      HASH_GUARD_LITSTR(0x5CE2786E11341594LL, NAMSTR(s_sys_ss09d4c665, "getClassNames")) {
        mcp.ci = &c_ReflectionExtension::ci_getclassnames;
        return true;
      }
      break;
    case 21:
      HASH_GUARD_LITSTR(0x306B5F4D1D03D335LL, NAMSTR(s_sys_ssa4e142d1, "getINIEntries")) {
        mcp.ci = &c_ReflectionExtension::ci_getinientries;
        return true;
      }
      HASH_GUARD_LITSTR(0x1CC71CB013143955LL, NAMSTR(s_sys_ss6c17831d, "getConstants")) {
        mcp.ci = &c_ReflectionExtension::ci_getconstants;
        return true;
      }
      break;
    case 22:
      HASH_GUARD_LITSTR(0x7521E8833BE3D316LL, NAMSTR(s_sys_sse4a1cad7, "getVersion")) {
        mcp.ci = &c_ReflectionExtension::ci_getversion;
        return true;
      }
      break;
    case 31:
      HASH_GUARD_LITSTR(0x0D31D0AC229C615FLL, NAMSTR(s_sys_ssa1b87da7, "__construct")) {
        mcp.ci = &c_ReflectionExtension::ci___construct;
        return true;
      }
      HASH_GUARD_LITSTR(0x0F2EF58F157D479FLL, NAMSTR(s_sys_ss33988b3e, "info")) {
        mcp.ci = &c_ReflectionExtension::ci_info;
        return true;
      }
      break;
    default:
      break;
  }
  return c_ObjectData::os_get_call_info(mcp, hash);
}
bool c_ReflectionExtension::o_get_call_info(MethodCallPackage &mcp, int64 hash) {
  mcp.obj = this;
  return os_get_call_info(mcp, hash);
}
c_ReflectionExtension *c_ReflectionExtension::create(Variant v_name) {
  CountableHelper h(this);
  init();
  t___construct(v_name);
  return this;
}
void c_ReflectionExtension::dynConstruct(CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  if (count != 1) throw_wrong_arguments("ReflectionExtension::__construct", count, 1, 1, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    (t___construct(arg0));
  }
}
void c_ReflectionExtension::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_ReflectionExtension::ci___construct;
  mcp.obj = this;
}
void c_ReflectionExtension::dynConstructFromEval(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  unsigned int i = 0;
  do {
    if (i == params.size()) break;
    a0 = params[i]->eval(env);
    i++;
  } while(false);
  for (; i != params.size(); ++i) {
    params[i]->eval(env);
  }
  int count __attribute__((__unused__)) = params.size();
  if (count != 1) throw_wrong_arguments("ReflectionExtension::__construct", count, 1, 1, 1);
  (t___construct(a0), null);
}
struct ObjectStaticCallbacks cw_ReflectionExtension = {
  c_ReflectionExtension::os_getInit,
  c_ReflectionExtension::os_get,
  c_ReflectionExtension::os_lval,
  c_ReflectionExtension::os_invoke,
  c_ReflectionExtension::os_constant,
  c_ReflectionExtension::os_get_call_info
};
void c_ReflectionExtension::init() {
  m_name = null;
  m_info = null;
}
/* SRC: classes/reflection.php line 1836 */
void c_ReflectionExtension::t___construct(Variant v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::__construct);
  bool oldInCtor = gasInCtor(true);
  {
    const Array &tmp0((x_hphp_get_extension_info(toString(v_name))));
    m_info = tmp0;
  }
  gasInCtor(oldInCtor);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1840 */
String c_ReflectionExtension::t___tostring() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::__toString);
  return toString(null);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1859 */
Variant c_ReflectionExtension::ti_export(CStrRef cls, CVarRef v_name, CVarRef v_ret) {
  STATIC_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::export);
  p_ReflectionExtension v_obj;
  String v_str;

  {
    p_ReflectionExtension tmp0 = NEWOBJ(c_ReflectionExtension)();
    (tmp0->create(v_name));
    v_obj = tmp0;
  }
  v_str = (toString(v_obj));
  if (toBoolean(v_ret)) {
    {
      return v_str;
    }
  }
  print(v_str);
  return null;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1877 */
Variant c_ReflectionExtension::t_getname() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::getName);
  return m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1890 */
Variant c_ReflectionExtension::t_getversion() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::getVersion);
  return m_info.rvalAt(NAMSTR(s_sys_ss7cd91db4, "version"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1906 */
Variant c_ReflectionExtension::t_getfunctions() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::getFunctions);
  return m_info.rvalAt(NAMSTR(s_sys_ssc8396b02, "functions"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1919 */
Variant c_ReflectionExtension::t_getconstants() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::getConstants);
  return m_info.rvalAt(NAMSTR(s_sys_ss623ae369, "constants"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1933 */
Variant c_ReflectionExtension::t_getinientries() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::getINIEntries);
  return m_info.rvalAt(NAMSTR(s_sys_sscedef5dc, "ini"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1948 */
Variant c_ReflectionExtension::t_getclasses() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::getClasses);
  return m_info.rvalAt(NAMSTR(s_sys_ss0415e4a0, "classes"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1963 */
Array c_ReflectionExtension::t_getclassnames() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::getClassNames);
  Array v_ret;
  Variant v_cls;

  v_ret = s_sys_sa00000000;
  {
    LOOP_COUNTER(1);
    Variant map2 = m_info.rvalAt(NAMSTR(s_sys_ss0415e4a0, "classes"), AccessFlags::Error_Key);
    for (ArrayIter iter3 = map2.begin(s_class_name, true); !iter3.end(); iter3.next()) {
      LOOP_COUNTER_CHECK(1);
      iter3.second(v_cls);
      {
        {
          MethodCallPackage mcp0;
          CVarRef obj0 = v_cls;
          mcp0.methodCall((obj0), NAMSTR(s_sys_ssc2df217e, "getName"), 0x23F51CDECC198965LL);
          const CallInfo *cit0 __attribute__((__unused__)) = mcp0.ci;
          Variant tmp1(((mcp0.bindClass(fi)->getMeth0Args())(mcp0, 0)));
          v_ret.append((tmp1));
        }
      }
    }
  }
  return v_ret;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1979 */
Variant c_ReflectionExtension::t_info() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionExtension, ReflectionExtension::info);
  return m_info.rvalAt(NAMSTR(s_sys_ss33988b3e, "info"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1570 */
const int64 q_ReflectionMethod_IS_STATIC = 1LL;
const int64 q_ReflectionMethod_IS_PUBLIC = 256LL;
const int64 q_ReflectionMethod_IS_PROTECTED = 512LL;
const int64 q_ReflectionMethod_IS_PRIVATE = 1024LL;
const int64 q_ReflectionMethod_IS_ABSTRACT = 2LL;
const int64 q_ReflectionMethod_IS_FINAL = 4LL;
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_ReflectionMethod
Variant c_ReflectionMethod::os_getInit(CStrRef s) {
  DECLARE_SYSTEM_GLOBALS(g);
  int64 hash = s->hash();
  switch (hash & 3) {
    case 0:
      HASH_RETURN_NAMSTR(0x2E3A246D1F74C210LL, NAMSTR(s_sys_ssc82dbd12, "class"),
                         null, 5);
      break;
    case 2:
      HASH_RETURN_NAMSTR(0x5655B4FF77E35232LL, NAMSTR(s_sys_ssdc3cbddc, "name"),
                         null, 4);
      break;
    default:
      break;
  }
  return c_ReflectionFunctionAbstract::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_ReflectionMethod
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_ReflectionMethod
Variant c_ReflectionMethod::os_get(CStrRef s) {
  return c_ReflectionFunctionAbstract::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_ReflectionMethod
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_ReflectionMethod
Variant &c_ReflectionMethod::os_lval(CStrRef s) {
  return c_ReflectionFunctionAbstract::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_ReflectionMethod
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_ReflectionMethod
void c_ReflectionMethod::o_getArray(Array &props, bool pubOnly) const {
  if (isInitialized(m_name)) props.lvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Key).setWithRef(m_name);
  if (isInitialized(m_class)) props.lvalAt(NAMSTR(s_sys_ssc82dbd12, "class"), AccessFlags::Key).setWithRef(m_class);
  c_ReflectionFunctionAbstract::o_getArray(props, pubOnly);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_ReflectionMethod
#ifndef OMIT_JUMP_TABLE_CLASS_SETARRAY_ReflectionMethod
void c_ReflectionMethod::o_setArray(CArrRef props) {
  c_ReflectionFunctionAbstract::o_setArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_SETARRAY_ReflectionMethod
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_ReflectionMethod
Variant * c_ReflectionMethod::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_ReflectionMethod
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_ReflectionMethod
Variant * c_ReflectionMethod::o_realPropPublic(CStrRef s, int flags) const {
  int64 hash = s->hash();
  switch (hash & 3) {
    case 0:
      HASH_REALPROP_STRING(0x2E3A246D1F74C210LL, "class", 5, class);
      break;
    case 2:
      HASH_REALPROP_STRING(0x5655B4FF77E35232LL, "name", 4, name);
      break;
    default:
      break;
  }
  return c_ReflectionFunctionAbstract::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_ReflectionMethod
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_ReflectionMethod
Variant * c_ReflectionMethod::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_ReflectionMethod
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_ReflectionMethod
Variant c_ReflectionMethod::os_constant(const char *s) {
  int64 hash = hash_string(s);
  switch (hash & 15) {
    case 0:
      HASH_RETURN(0x7DA78A433EE05120LL, q_ReflectionMethod_IS_STATIC, "IS_STATIC");
      break;
    case 1:
      HASH_RETURN(0x163BE642CB04C741LL, q_ReflectionMethod_IS_PRIVATE, "IS_PRIVATE");
      break;
    case 3:
      HASH_RETURN(0x3784532769C1EF03LL, q_ReflectionMethod_IS_PUBLIC, "IS_PUBLIC");
      HASH_RETURN(0x6572B785E302A373LL, q_ReflectionMethod_IS_ABSTRACT, "IS_ABSTRACT");
      break;
    case 6:
      HASH_RETURN(0x47AAFAC74A58AD66LL, q_ReflectionMethod_IS_FINAL, "IS_FINAL");
      break;
    case 14:
      HASH_RETURN(0x10A614A8C272DC9ELL, q_ReflectionMethod_IS_PROTECTED, "IS_PROTECTED");
      break;
    default:
      break;
  }
  return c_ReflectionFunctionAbstract::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_ReflectionMethod
IMPLEMENT_CLASS(ReflectionMethod)
bool c_ReflectionMethod::o_instanceof(CStrRef s) const {
  int64 hash = s->hash();
  switch (hash & 7) {
    case 0:
      HASH_INSTANCEOF(0x43BBC8F6F28E44B0LL, NAMSTR(s_sys_ss8f4d0eb2, "ReflectionMethod"));
      break;
    case 2:
      HASH_INSTANCEOF(0x33BD46E935281082LL, NAMSTR(s_sys_ss5b2a52c1, "ReflectionFunctionAbstract"));
      break;
    case 5:
      HASH_INSTANCEOF(0x62F7F85447C0A605LL, NAMSTR(s_sys_ss0d7533cf, "Reflector"));
      break;
    default:
      break;
  }
  return false;
}
ObjectData *c_ReflectionMethod::cloneImpl() {
  c_ReflectionMethod *obj = NEWOBJ(c_ReflectionMethod)();
  c_ReflectionMethod::cloneSet(obj);
  return obj;
}
void c_ReflectionMethod::cloneSet(ObjectData *cl) {
  c_ReflectionMethod *clone = static_cast<c_ReflectionMethod*>(cl);
  c_ReflectionFunctionAbstract::cloneSet(clone);
  clone->m_name.setWithRef(m_name);
  clone->m_class.setWithRef(m_class);
}
CallInfo c_ReflectionMethod::ci_isprivate((void*)&c_ReflectionMethod::i_isprivate, (void*)&c_ReflectionMethod::ifa_isprivate, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionMethod::ci___tostring((void*)&c_ReflectionMethod::i___tostring, (void*)&c_ReflectionMethod::ifa___tostring, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionMethod::ci_isprotected((void*)&c_ReflectionMethod::i_isprotected, (void*)&c_ReflectionMethod::ifa_isprotected, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionMethod::ci_isstatic((void*)&c_ReflectionMethod::i_isstatic, (void*)&c_ReflectionMethod::ifa_isstatic, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionMethod::ci_getdeclaringclass((void*)&c_ReflectionMethod::i_getdeclaringclass, (void*)&c_ReflectionMethod::ifa_getdeclaringclass, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionMethod::ci_isconstructor((void*)&c_ReflectionMethod::i_isconstructor, (void*)&c_ReflectionMethod::ifa_isconstructor, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionMethod::ci___construct((void*)&c_ReflectionMethod::i___construct, (void*)&c_ReflectionMethod::ifa___construct, 2, 4, 0x0000000000000000LL);
CallInfo c_ReflectionMethod::ci_isfinal((void*)&c_ReflectionMethod::i_isfinal, (void*)&c_ReflectionMethod::ifa_isfinal, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionMethod::ci_invokeargs((void*)&c_ReflectionMethod::i_invokeargs, (void*)&c_ReflectionMethod::ifa_invokeargs, 2, 4, 0x0000000000000000LL);
CallInfo c_ReflectionMethod::ci_getmodifiers((void*)&c_ReflectionMethod::i_getmodifiers, (void*)&c_ReflectionMethod::ifa_getmodifiers, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionMethod::ci_export((void*)&c_ReflectionMethod::i_export, (void*)&c_ReflectionMethod::ifa_export, 3, 12, 0x0000000000000000LL);
CallInfo c_ReflectionMethod::ci_invoke((void*)&c_ReflectionMethod::i_invoke, (void*)&c_ReflectionMethod::ifa_invoke, 1, 5, 0x0000000000000000LL);
CallInfo c_ReflectionMethod::ci_ispublic((void*)&c_ReflectionMethod::i_ispublic, (void*)&c_ReflectionMethod::ifa_ispublic, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionMethod::ci_isdestructor((void*)&c_ReflectionMethod::i_isdestructor, (void*)&c_ReflectionMethod::ifa_isdestructor, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionMethod::ci_getclosure((void*)&c_ReflectionMethod::i_getclosure, (void*)&c_ReflectionMethod::ifa_getclosure, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionMethod::ci_isabstract((void*)&c_ReflectionMethod::i_isabstract, (void*)&c_ReflectionMethod::ifa_isabstract, 0, 4, 0x0000000000000000LL);
Variant c_ReflectionMethod::i_isprivate(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionMethod *self = NULL;
  p_ReflectionMethod pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionMethod*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionMethod::isPrivate", 0, 1);
  return (self->t_isprivate());
}
Variant c_ReflectionMethod::i___tostring(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionMethod *self = NULL;
  p_ReflectionMethod pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionMethod*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionMethod::__toString", 0, 1);
  return (self->t___tostring());
}
Variant c_ReflectionMethod::i_isprotected(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionMethod *self = NULL;
  p_ReflectionMethod pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionMethod*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionMethod::isProtected", 0, 1);
  return (self->t_isprotected());
}
Variant c_ReflectionMethod::i_isstatic(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionMethod *self = NULL;
  p_ReflectionMethod pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionMethod*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionMethod::isStatic", 0, 1);
  return (self->t_isstatic());
}
Variant c_ReflectionMethod::i_getdeclaringclass(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionMethod *self = NULL;
  p_ReflectionMethod pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionMethod*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionMethod::getDeclaringClass", 0, 1);
  return (self->t_getdeclaringclass());
}
Variant c_ReflectionMethod::i_isconstructor(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionMethod *self = NULL;
  p_ReflectionMethod pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionMethod*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionMethod::isConstructor", 0, 1);
  return (self->t_isconstructor());
}
Variant c_ReflectionMethod::i___construct(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionMethod *self = NULL;
  p_ReflectionMethod pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionMethod*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count < 1 || count > 2) return throw_wrong_arguments("ReflectionMethod::__construct", count, 1, 2, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t___construct(arg0), null);
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___construct(arg0, arg1), null);
  }
}
Variant c_ReflectionMethod::i_isfinal(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionMethod *self = NULL;
  p_ReflectionMethod pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionMethod*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionMethod::isFinal", 0, 1);
  return (self->t_isfinal());
}
Variant c_ReflectionMethod::i_invokeargs(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionMethod *self = NULL;
  p_ReflectionMethod pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionMethod*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 2) return throw_wrong_arguments("ReflectionMethod::invokeArgs", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_invokeargs(arg0, arg1));
  }
}
Variant c_ReflectionMethod::i_getmodifiers(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionMethod *self = NULL;
  p_ReflectionMethod pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionMethod*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionMethod::getModifiers", 0, 1);
  return (self->t_getmodifiers());
}
Variant c_ReflectionMethod::i_export(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  if (count != 3) return throw_wrong_arguments("ReflectionMethod::export", count, 3, 3, 1);
  CStrRef c(mcp.isObj ? mcp.rootObj->o_getClassName() : String(mcp.rootCls));
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (c_ReflectionMethod::ti_export(c, arg0, arg1, arg2));
  }
}
Variant c_ReflectionMethod::i_invoke(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionMethod *self = NULL;
  p_ReflectionMethod pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionMethod*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count < 1) return throw_missing_arguments("ReflectionMethod::invoke", count+1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    const Array &p(count > 1 ? params.slice(1, count - 1, false) : Array());
    return (self->t_invoke(count, arg0, p));
  }
}
Variant c_ReflectionMethod::i_ispublic(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionMethod *self = NULL;
  p_ReflectionMethod pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionMethod*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionMethod::isPublic", 0, 1);
  return (self->t_ispublic());
}
Variant c_ReflectionMethod::i_isdestructor(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionMethod *self = NULL;
  p_ReflectionMethod pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionMethod*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionMethod::isDestructor", 0, 1);
  return (self->t_isdestructor());
}
Variant c_ReflectionMethod::i_getclosure(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionMethod *self = NULL;
  p_ReflectionMethod pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionMethod*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionMethod::getClosure", 0, 1);
  return (self->t_getclosure());
}
Variant c_ReflectionMethod::i_isabstract(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionMethod *self = NULL;
  p_ReflectionMethod pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionMethod*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionMethod::isAbstract", 0, 1);
  return (self->t_isabstract());
}
Variant c_ReflectionMethod::ifa_isprivate(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionMethod *self = NULL;
  p_ReflectionMethod pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionMethod*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionMethod::isPrivate", 0, 1);
  return (self->t_isprivate());
}
Variant c_ReflectionMethod::ifa___tostring(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionMethod *self = NULL;
  p_ReflectionMethod pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionMethod*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionMethod::__toString", 0, 1);
  return (self->t___tostring());
}
Variant c_ReflectionMethod::ifa_isprotected(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionMethod *self = NULL;
  p_ReflectionMethod pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionMethod*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionMethod::isProtected", 0, 1);
  return (self->t_isprotected());
}
Variant c_ReflectionMethod::ifa_isstatic(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionMethod *self = NULL;
  p_ReflectionMethod pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionMethod*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionMethod::isStatic", 0, 1);
  return (self->t_isstatic());
}
Variant c_ReflectionMethod::ifa_getdeclaringclass(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionMethod *self = NULL;
  p_ReflectionMethod pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionMethod*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionMethod::getDeclaringClass", 0, 1);
  return (self->t_getdeclaringclass());
}
Variant c_ReflectionMethod::ifa_isconstructor(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionMethod *self = NULL;
  p_ReflectionMethod pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionMethod*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionMethod::isConstructor", 0, 1);
  return (self->t_isconstructor());
}
Variant c_ReflectionMethod::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionMethod *self = NULL;
  p_ReflectionMethod pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionMethod*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count < 1 || count > 2) return throw_wrong_arguments("ReflectionMethod::__construct", count, 1, 2, 2);
  CVarRef arg0((a0));
  if (count <= 1) return (self->t___construct(arg0), null);
  CVarRef arg1((a1));
  return (self->t___construct(arg0, arg1), null);
}
Variant c_ReflectionMethod::ifa_isfinal(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionMethod *self = NULL;
  p_ReflectionMethod pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionMethod*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionMethod::isFinal", 0, 1);
  return (self->t_isfinal());
}
Variant c_ReflectionMethod::ifa_invokeargs(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionMethod *self = NULL;
  p_ReflectionMethod pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionMethod*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 2) return throw_wrong_arguments("ReflectionMethod::invokeArgs", count, 2, 2, 1);
  CVarRef arg0((a0));
  CVarRef arg1((a1));
  return (self->t_invokeargs(arg0, arg1));
}
Variant c_ReflectionMethod::ifa_getmodifiers(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionMethod *self = NULL;
  p_ReflectionMethod pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionMethod*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionMethod::getModifiers", 0, 1);
  return (self->t_getmodifiers());
}
Variant c_ReflectionMethod::ifa_export(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (count != 3) return throw_wrong_arguments("ReflectionMethod::export", count, 3, 3, 1);
  CStrRef c(mcp.isObj ? mcp.rootObj->o_getClassName() : String(mcp.rootCls));
  CVarRef arg0((a0));
  CVarRef arg1((a1));
  CVarRef arg2((a2));
  return (c_ReflectionMethod::ti_export(c, arg0, arg1, arg2));
}
Variant c_ReflectionMethod::ifa_invoke(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionMethod *self = NULL;
  p_ReflectionMethod pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionMethod*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count < 1) return throw_missing_arguments("ReflectionMethod::invoke", count+1, 1);
  CVarRef arg0((a0));
  Array p;
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (self->t_invoke(count, arg0, p));
}
Variant c_ReflectionMethod::ifa_ispublic(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionMethod *self = NULL;
  p_ReflectionMethod pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionMethod*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionMethod::isPublic", 0, 1);
  return (self->t_ispublic());
}
Variant c_ReflectionMethod::ifa_isdestructor(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionMethod *self = NULL;
  p_ReflectionMethod pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionMethod*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionMethod::isDestructor", 0, 1);
  return (self->t_isdestructor());
}
Variant c_ReflectionMethod::ifa_getclosure(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionMethod *self = NULL;
  p_ReflectionMethod pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionMethod*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionMethod::getClosure", 0, 1);
  return (self->t_getclosure());
}
Variant c_ReflectionMethod::ifa_isabstract(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionMethod *self = NULL;
  p_ReflectionMethod pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionMethod*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionMethod::isAbstract", 0, 1);
  return (self->t_isabstract());
}
bool c_ReflectionMethod::os_get_call_info(MethodCallPackage &mcp, int64 hash) {
  CStrRef s __attribute__((__unused__)) (*mcp.name);
  if (hash < 0) hash = s->hash();
  switch (hash & 31) {
    case 2:
      HASH_GUARD_LITSTR(0x3FCE192CF6199942LL, NAMSTR(s_sys_ssc90e239b, "invoke")) {
        mcp.ci = &c_ReflectionMethod::ci_invoke;
        return true;
      }
      HASH_GUARD_LITSTR(0x33A6C2CFBDB05EE2LL, NAMSTR(s_sys_ss88e41acd, "getClosure")) {
        mcp.ci = &c_ReflectionMethod::ci_getclosure;
        return true;
      }
      break;
    case 3:
      HASH_GUARD_LITSTR(0x6ED51288559D6063LL, NAMSTR(s_sys_ss94ec964c, "getDeclaringClass")) {
        mcp.ci = &c_ReflectionMethod::ci_getdeclaringclass;
        return true;
      }
      break;
    case 4:
      HASH_GUARD_LITSTR(0x3235AF57F23103C4LL, NAMSTR(s_sys_ss1fa13716, "invokeArgs")) {
        mcp.ci = &c_ReflectionMethod::ci_invokeargs;
        return true;
      }
      break;
    case 7:
      HASH_GUARD_LITSTR(0x51A20EA0E327F607LL, NAMSTR(s_sys_ss9631f2ea, "isDestructor")) {
        mcp.ci = &c_ReflectionMethod::ci_isdestructor;
        return true;
      }
      break;
    case 8:
      HASH_GUARD_LITSTR(0x0B5ABC58C98E70E8LL, NAMSTR(s_sys_ssd04b2eb8, "export")) {
        mcp.ci = &c_ReflectionMethod::ci_export;
        return true;
      }
      break;
    case 10:
      HASH_GUARD_LITSTR(0x2D7209A590477CEALL, NAMSTR(s_sys_ssce80f767, "isProtected")) {
        mcp.ci = &c_ReflectionMethod::ci_isprotected;
        return true;
      }
      break;
    case 14:
      HASH_GUARD_LITSTR(0x06FB6A7DC3D795AELL, NAMSTR(s_sys_ssc556d1b5, "isFinal")) {
        mcp.ci = &c_ReflectionMethod::ci_isfinal;
        return true;
      }
      break;
    case 15:
      HASH_GUARD_LITSTR(0x37AAE0845E2F636FLL, NAMSTR(s_sys_ssa812760b, "isPrivate")) {
        mcp.ci = &c_ReflectionMethod::ci_isprivate;
        return true;
      }
      break;
    case 19:
      HASH_GUARD_LITSTR(0x642C2D2994B34A13LL, NAMSTR(s_sys_ss6974a1cc, "__toString")) {
        mcp.ci = &c_ReflectionMethod::ci___tostring;
        return true;
      }
      break;
    case 20:
      HASH_GUARD_LITSTR(0x24253EBA491D6014LL, NAMSTR(s_sys_ss97b15062, "getModifiers")) {
        mcp.ci = &c_ReflectionMethod::ci_getmodifiers;
        return true;
      }
      break;
    case 23:
      HASH_GUARD_LITSTR(0x7460D945DA32FDB7LL, NAMSTR(s_sys_ssdf34c0b4, "isAbstract")) {
        mcp.ci = &c_ReflectionMethod::ci_isabstract;
        return true;
      }
      break;
    case 25:
      HASH_GUARD_LITSTR(0x7A15DC56E8CC0B19LL, NAMSTR(s_sys_ss404bf1b4, "isStatic")) {
        mcp.ci = &c_ReflectionMethod::ci_isstatic;
        return true;
      }
      break;
    case 26:
      HASH_GUARD_LITSTR(0x654B5F965C5CAC7ALL, NAMSTR(s_sys_ss90d9de57, "isConstructor")) {
        mcp.ci = &c_ReflectionMethod::ci_isconstructor;
        return true;
      }
      break;
    case 28:
      HASH_GUARD_LITSTR(0x2820F10358723B7CLL, NAMSTR(s_sys_ssdec3c0f0, "isPublic")) {
        mcp.ci = &c_ReflectionMethod::ci_ispublic;
        return true;
      }
      break;
    case 31:
      HASH_GUARD_LITSTR(0x0D31D0AC229C615FLL, NAMSTR(s_sys_ssa1b87da7, "__construct")) {
        mcp.ci = &c_ReflectionMethod::ci___construct;
        return true;
      }
      break;
    default:
      break;
  }
  return c_ReflectionFunctionAbstract::os_get_call_info(mcp, hash);
}
bool c_ReflectionMethod::o_get_call_info(MethodCallPackage &mcp, int64 hash) {
  mcp.obj = this;
  return os_get_call_info(mcp, hash);
}
c_ReflectionMethod *c_ReflectionMethod::create(Variant v_cls, Variant v_name //  = NAMSTR(s_sys_ss00000000, "")
) {
  CountableHelper h(this);
  init();
  t___construct(v_cls, v_name);
  return this;
}
void c_ReflectionMethod::dynConstruct(CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  if (count < 1 || count > 2) throw_wrong_arguments("ReflectionMethod::__construct", count, 1, 2, 2);
  do {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) {
      (t___construct(arg0));
      break;
    }
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    (t___construct(arg0, arg1));
  } while (false);
}
void c_ReflectionMethod::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_ReflectionMethod::ci___construct;
  mcp.obj = this;
}
void c_ReflectionMethod::dynConstructFromEval(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  unsigned int i = 0;
  do {
    if (i == params.size()) break;
    a0 = params[i]->eval(env);
    i++;
    if (i == params.size()) break;
    a1 = params[i]->eval(env);
    i++;
  } while(false);
  for (; i != params.size(); ++i) {
    params[i]->eval(env);
  }
  int count __attribute__((__unused__)) = params.size();
  if (count < 1 || count > 2) throw_wrong_arguments("ReflectionMethod::__construct", count, 1, 2, 1);
  if (count <= 1) (t___construct(a0), null);
  else (t___construct(a0, a1), null);
}
struct ObjectStaticCallbacks cw_ReflectionMethod = {
  c_ReflectionMethod::os_getInit,
  c_ReflectionMethod::os_get,
  c_ReflectionMethod::os_lval,
  c_ReflectionMethod::os_invoke,
  c_ReflectionMethod::os_constant,
  c_ReflectionMethod::os_get_call_info
};
void c_ReflectionMethod::init() {
  c_ReflectionFunctionAbstract::init();
  m_name = null;
  m_class = null;
}
/* SRC: classes/reflection.php line 1582 */
void c_ReflectionMethod::t___construct(Variant v_cls, Variant v_name //  = NAMSTR(s_sys_ss00000000, "")
) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::__construct);
  bool oldInCtor = gasInCtor(true);
  Variant v_arr;
  Variant v_method;

  if ((!(toBoolean(v_name)) && x_is_string(v_cls))) {
    {
      {
        const Variant &tmp0((x_explode(NAMSTR(s_sys_ss819481f3, "::"), toString(v_cls))));
        v_arr = tmp0;
      }
      {
        bool tmp0;
        {
          int tmp1((x_count(v_arr)));
          tmp0 = (equal(tmp1, 2LL));
        }
        if (tmp0) {
          {
            {
              Variant tmp0((v_arr.rvalAt(0LL, AccessFlags::Error)));
              v_cls = tmp0;
            }
            {
              Variant tmp0((v_arr.rvalAt(1LL, AccessFlags::Error)));
              v_name = tmp0;
            }
          }
        }
      }
    }
  }
  if ((toBoolean(v_cls) && toBoolean(v_name))) {
    {
      if (!(x_is_object(v_cls))) {
        {
          {
            p_ReflectionClass tmp0 = NEWOBJ(c_ReflectionClass)();
            (tmp0->create(v_cls));
            v_cls = tmp0;
          }
        }
      }
      else {
        {
          {
            p_ReflectionClass tmp0 = NEWOBJ(c_ReflectionClass)();
            const Variant &tmp1((x_get_class(v_cls)));
            (tmp0->create(tmp1));
            v_cls = tmp0;
          }
        }
      }
      {
        MethodCallPackage mcp0;
        CVarRef obj0 = v_cls;
        mcp0.methodCall((obj0), NAMSTR(s_sys_sscdbb2d67, "getMethod"), 0x0D81ECE253A3B5B6LL);
        const CallInfo *cit0 __attribute__((__unused__)) = mcp0.ci;
        Variant tmp1(((mcp0.bindClass(fi)->getMeth1Args())(mcp0, 1, v_name)));
        v_method = tmp1;
      }
      if (toBoolean(v_method)) {
        {
          {
            const Variant &tmp0((v_method.o_getPublic(NAMSTR(s_sys_ss33988b3e, "info"), true)));
            m_info = tmp0;
          }
          {
            const Variant &tmp0((v_method.o_getPublic(NAMSTR(s_sys_ssdc3cbddc, "name"), true)));
            m_name = tmp0;
          }
          {
            const Variant &tmp0((v_method.o_getPublic(NAMSTR(s_sys_ssc82dbd12, "class"), true)));
            m_class = tmp0;
          }
        }
      }
    }
  }
  gasInCtor(oldInCtor);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1605 */
String c_ReflectionMethod::t___tostring() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::__toString);
  return toString(null);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1626 */
Variant c_ReflectionMethod::ti_export(CStrRef cls, Variant v_cls, CVarRef v_name, CVarRef v_ret) {
  STATIC_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::export);
  Variant v_obj;
  String v_str;

  if (!(x_is_object(v_cls))) {
    {
      {
        p_ReflectionClass tmp0 = NEWOBJ(c_ReflectionClass)();
        (tmp0->create(v_cls));
        v_cls = tmp0;
      }
    }
  }
  else {
    {
      {
        p_ReflectionClass tmp0 = NEWOBJ(c_ReflectionClass)();
        const Variant &tmp1((x_get_class(v_cls)));
        (tmp0->create(tmp1));
        v_cls = tmp0;
      }
    }
  }
  {
    MethodCallPackage mcp0;
    CVarRef obj0 = v_cls;
    mcp0.methodCall((obj0), NAMSTR(s_sys_sscdbb2d67, "getMethod"), 0x0D81ECE253A3B5B6LL);
    const CallInfo *cit0 __attribute__((__unused__)) = mcp0.ci;
    Variant tmp1(((mcp0.bindClass(fi)->getMeth1Args())(mcp0, 1, v_name)));
    v_obj = tmp1;
  }
  v_str = (toString(v_obj));
  if (toBoolean(v_ret)) {
    {
      return v_str;
    }
  }
  print(v_str);
  return null;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1651 */
Variant c_ReflectionMethod::t_invoke(int num_args, CVarRef v_obj, Array args /* = Array() */) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::invoke);
  Variant v_args;

  {
    const Array &tmp0((func_get_args(num_args, Array(ArrayInit(1, true).set(v_obj).create()),args)));
    v_args = tmp0;
  }
  x_array_shift(ref(v_args));
  {
    Variant tmp0((v_obj));
    const String &tmp1((toString(m_info.rvalAt(NAMSTR(s_sys_ssc82dbd12, "class"), AccessFlags::Error_Key))));
    const String &tmp2((toString(m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key))));
    return x_hphp_invoke_method(tmp0, tmp1, tmp2, toArray(v_args));
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1672 */
Variant c_ReflectionMethod::t_invokeargs(CVarRef v_obj, CVarRef v_args) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::invokeArgs);
  {
    Variant tmp0((v_obj));
    const String &tmp1((toString(m_info.rvalAt(NAMSTR(s_sys_ssc82dbd12, "class"), AccessFlags::Error_Key))));
    const String &tmp2((toString(m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key))));
    const Array &tmp3((toArray(x_array_values(v_args))));
    return x_hphp_invoke_method(tmp0, tmp1, tmp2, tmp3);
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1685 */
Variant c_ReflectionMethod::t_isfinal() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::isFinal);
  return m_info.rvalAt(NAMSTR(s_sys_ss2145036e, "final"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1698 */
Variant c_ReflectionMethod::t_isabstract() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::isAbstract);
  return m_info.rvalAt(NAMSTR(s_sys_ss12c8a8a6, "abstract"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1710 */
bool c_ReflectionMethod::t_ispublic() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::isPublic);
  return equal(m_info.rvalAt(NAMSTR(s_sys_ss750cda3b, "access"), AccessFlags::Error_Key), NAMSTR(s_sys_ss4ce85288, "public"));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1723 */
bool c_ReflectionMethod::t_isprivate() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::isPrivate);
  return equal(m_info.rvalAt(NAMSTR(s_sys_ss750cda3b, "access"), AccessFlags::Error_Key), NAMSTR(s_sys_sse781f7da, "private"));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1736 */
bool c_ReflectionMethod::t_isprotected() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::isProtected);
  return equal(m_info.rvalAt(NAMSTR(s_sys_ss750cda3b, "access"), AccessFlags::Error_Key), NAMSTR(s_sys_ss9fb56979, "protected"));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1748 */
Variant c_ReflectionMethod::t_isstatic() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::isStatic);
  return m_info.rvalAt(NAMSTR(s_sys_ssf08d205d, "static"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1761 */
bool c_ReflectionMethod::t_isconstructor() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::isConstructor);
  return isset(m_info, NAMSTR(s_sys_ssefecb9dd, "constructor"), true);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1774 */
bool c_ReflectionMethod::t_isdestructor() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::isDestructor);
  {
    const Variant &tmp0((t_getname()));
    return equal(tmp0, NAMSTR(s_sys_ssa5a7f4f9, "__destruct"));
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1796 */
Variant c_ReflectionMethod::t_getmodifiers() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::getModifiers);
  return m_info.rvalAt(NAMSTR(s_sys_ss9f244c80, "modifiers"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1800 */
Variant c_ReflectionMethod::t_getclosure() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::getClosure);
  return m_info.rvalAt(NAMSTR(s_sys_ss4cd61020, "closure"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1814 */
Variant c_ReflectionMethod::t_getdeclaringclass() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionMethod, ReflectionMethod::getDeclaringClass);
  if (empty(m_info, NAMSTR(s_sys_ssc82dbd12, "class"), true)) {
    {
      return null;
    }
  }
  {
    p_ReflectionClass tmp0 = NEWOBJ(c_ReflectionClass)();
    return (tmp0->create(m_info.rvalAt(NAMSTR(s_sys_ssc82dbd12, "class"), AccessFlags::Error_Key)), tmp0);
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1318 */
const int64 q_ReflectionProperty_IS_STATIC = 1LL;
const int64 q_ReflectionProperty_IS_PUBLIC = 256LL;
const int64 q_ReflectionProperty_IS_PROTECTED = 512LL;
const int64 q_ReflectionProperty_IS_PRIVATE = 1024LL;
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_ReflectionProperty
Variant c_ReflectionProperty::os_getInit(CStrRef s) {
  DECLARE_SYSTEM_GLOBALS(g);
  int64 hash = s->hash();
  switch (hash & 7) {
    case 0:
      HASH_RETURN_NAMSTR(0x2E3A246D1F74C210LL, NAMSTR(s_sys_ssc82dbd12, "class"),
                         null, 5);
      break;
    case 2:
      HASH_RETURN_NAMSTR(0x5655B4FF77E35232LL, NAMSTR(s_sys_ssdc3cbddc, "name"),
                         null, 4);
      break;
    case 7:
      HASH_RETURN_NAMSTR(0x0F2EF58F157D479FLL, NAMSTR(s_sys_ss33988b3e, "info"),
                         null, 4);
      break;
    default:
      break;
  }
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_ReflectionProperty
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_ReflectionProperty
Variant c_ReflectionProperty::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_ReflectionProperty
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_ReflectionProperty
Variant &c_ReflectionProperty::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_ReflectionProperty
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_ReflectionProperty
void c_ReflectionProperty::o_getArray(Array &props, bool pubOnly) const {
  if (isInitialized(m_info)) props.lvalAt(NAMSTR(s_sys_ss33988b3e, "info"), AccessFlags::Key).setWithRef(m_info);
  if (isInitialized(m_name)) props.lvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Key).setWithRef(m_name);
  if (isInitialized(m_class)) props.lvalAt(NAMSTR(s_sys_ssc82dbd12, "class"), AccessFlags::Key).setWithRef(m_class);
  c_ObjectData::o_getArray(props, pubOnly);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_ReflectionProperty
#ifndef OMIT_JUMP_TABLE_CLASS_SETARRAY_ReflectionProperty
void c_ReflectionProperty::o_setArray(CArrRef props) {
  c_ObjectData::o_setArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_SETARRAY_ReflectionProperty
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_ReflectionProperty
Variant * c_ReflectionProperty::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_ReflectionProperty
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_ReflectionProperty
Variant * c_ReflectionProperty::o_realPropPublic(CStrRef s, int flags) const {
  int64 hash = s->hash();
  switch (hash & 7) {
    case 0:
      HASH_REALPROP_STRING(0x2E3A246D1F74C210LL, "class", 5, class);
      break;
    case 2:
      HASH_REALPROP_STRING(0x5655B4FF77E35232LL, "name", 4, name);
      break;
    case 7:
      HASH_REALPROP_STRING(0x0F2EF58F157D479FLL, "info", 4, info);
      break;
    default:
      break;
  }
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_ReflectionProperty
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_ReflectionProperty
Variant * c_ReflectionProperty::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_ReflectionProperty
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_ReflectionProperty
Variant c_ReflectionProperty::os_constant(const char *s) {
  int64 hash = hash_string(s);
  switch (hash & 7) {
    case 0:
      HASH_RETURN(0x7DA78A433EE05120LL, q_ReflectionProperty_IS_STATIC, "IS_STATIC");
      break;
    case 1:
      HASH_RETURN(0x163BE642CB04C741LL, q_ReflectionProperty_IS_PRIVATE, "IS_PRIVATE");
      break;
    case 3:
      HASH_RETURN(0x3784532769C1EF03LL, q_ReflectionProperty_IS_PUBLIC, "IS_PUBLIC");
      break;
    case 6:
      HASH_RETURN(0x10A614A8C272DC9ELL, q_ReflectionProperty_IS_PROTECTED, "IS_PROTECTED");
      break;
    default:
      break;
  }
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_ReflectionProperty
IMPLEMENT_CLASS(ReflectionProperty)
bool c_ReflectionProperty::o_instanceof(CStrRef s) const {
  int64 hash = s->hash();
  switch (hash & 3) {
    case 0:
      HASH_INSTANCEOF(0x75AA2571BDB659E4LL, NAMSTR(s_sys_ssec8fccc4, "ReflectionProperty"));
      break;
    case 1:
      HASH_INSTANCEOF(0x62F7F85447C0A605LL, NAMSTR(s_sys_ss0d7533cf, "Reflector"));
      break;
    default:
      break;
  }
  return false;
}
ObjectData *c_ReflectionProperty::cloneImpl() {
  c_ReflectionProperty *obj = NEWOBJ(c_ReflectionProperty)();
  c_ReflectionProperty::cloneSet(obj);
  return obj;
}
void c_ReflectionProperty::cloneSet(ObjectData *cl) {
  c_ReflectionProperty *clone = static_cast<c_ReflectionProperty*>(cl);
  ObjectData::cloneSet(clone);
  clone->m_info.setWithRef(m_info);
  clone->m_name.setWithRef(m_name);
  clone->m_class.setWithRef(m_class);
}
CallInfo c_ReflectionProperty::ci_isprivate((void*)&c_ReflectionProperty::i_isprivate, (void*)&c_ReflectionProperty::ifa_isprivate, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionProperty::ci_getvalue((void*)&c_ReflectionProperty::i_getvalue, (void*)&c_ReflectionProperty::ifa_getvalue, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionProperty::ci___tostring((void*)&c_ReflectionProperty::i___tostring, (void*)&c_ReflectionProperty::ifa___tostring, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionProperty::ci_isprotected((void*)&c_ReflectionProperty::i_isprotected, (void*)&c_ReflectionProperty::ifa_isprotected, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionProperty::ci_isstatic((void*)&c_ReflectionProperty::i_isstatic, (void*)&c_ReflectionProperty::ifa_isstatic, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionProperty::ci_getdeclaringclass((void*)&c_ReflectionProperty::i_getdeclaringclass, (void*)&c_ReflectionProperty::ifa_getdeclaringclass, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionProperty::ci_isdefault((void*)&c_ReflectionProperty::i_isdefault, (void*)&c_ReflectionProperty::ifa_isdefault, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionProperty::ci___construct((void*)&c_ReflectionProperty::i___construct, (void*)&c_ReflectionProperty::ifa___construct, 2, 4, 0x0000000000000000LL);
CallInfo c_ReflectionProperty::ci_getmodifiers((void*)&c_ReflectionProperty::i_getmodifiers, (void*)&c_ReflectionProperty::ifa_getmodifiers, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionProperty::ci_export((void*)&c_ReflectionProperty::i_export, (void*)&c_ReflectionProperty::ifa_export, 3, 12, 0x0000000000000000LL);
CallInfo c_ReflectionProperty::ci_ispublic((void*)&c_ReflectionProperty::i_ispublic, (void*)&c_ReflectionProperty::ifa_ispublic, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionProperty::ci_setaccessible((void*)&c_ReflectionProperty::i_setaccessible, (void*)&c_ReflectionProperty::ifa_setaccessible, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionProperty::ci_getdoccomment((void*)&c_ReflectionProperty::i_getdoccomment, (void*)&c_ReflectionProperty::ifa_getdoccomment, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionProperty::ci_setvalue((void*)&c_ReflectionProperty::i_setvalue, (void*)&c_ReflectionProperty::ifa_setvalue, 2, 4, 0x0000000000000000LL);
CallInfo c_ReflectionProperty::ci_getname((void*)&c_ReflectionProperty::i_getname, (void*)&c_ReflectionProperty::ifa_getname, 0, 4, 0x0000000000000000LL);
Variant c_ReflectionProperty::i_isprivate(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionProperty *self = NULL;
  p_ReflectionProperty pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionProperty*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionProperty::isPrivate", 0, 1);
  return (self->t_isprivate());
}
Variant c_ReflectionProperty::i_getvalue(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionProperty *self = NULL;
  p_ReflectionProperty pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionProperty*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 1) return throw_toomany_arguments("ReflectionProperty::getValue", 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    if (count <= 0) return (self->t_getvalue());
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_getvalue(arg0));
  }
}
Variant c_ReflectionProperty::i___tostring(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionProperty *self = NULL;
  p_ReflectionProperty pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionProperty*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionProperty::__toString", 0, 1);
  return (self->t___tostring());
}
Variant c_ReflectionProperty::i_isprotected(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionProperty *self = NULL;
  p_ReflectionProperty pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionProperty*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionProperty::isProtected", 0, 1);
  return (self->t_isprotected());
}
Variant c_ReflectionProperty::i_isstatic(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionProperty *self = NULL;
  p_ReflectionProperty pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionProperty*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionProperty::isStatic", 0, 1);
  return (self->t_isstatic());
}
Variant c_ReflectionProperty::i_getdeclaringclass(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionProperty *self = NULL;
  p_ReflectionProperty pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionProperty*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionProperty::getDeclaringClass", 0, 1);
  return (self->t_getdeclaringclass());
}
Variant c_ReflectionProperty::i_isdefault(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionProperty *self = NULL;
  p_ReflectionProperty pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionProperty*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionProperty::isDefault", 0, 1);
  return (self->t_isdefault());
}
Variant c_ReflectionProperty::i___construct(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionProperty *self = NULL;
  p_ReflectionProperty pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionProperty*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 2) return throw_wrong_arguments("ReflectionProperty::__construct", count, 2, 2, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___construct(arg0, arg1), null);
  }
}
Variant c_ReflectionProperty::i_getmodifiers(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionProperty *self = NULL;
  p_ReflectionProperty pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionProperty*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionProperty::getModifiers", 0, 1);
  return (self->t_getmodifiers());
}
Variant c_ReflectionProperty::i_export(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  if (count != 3) return throw_wrong_arguments("ReflectionProperty::export", count, 3, 3, 1);
  CStrRef c(mcp.isObj ? mcp.rootObj->o_getClassName() : String(mcp.rootCls));
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (c_ReflectionProperty::ti_export(c, arg0, arg1, arg2));
  }
}
Variant c_ReflectionProperty::i_ispublic(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionProperty *self = NULL;
  p_ReflectionProperty pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionProperty*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionProperty::isPublic", 0, 1);
  return (self->t_ispublic());
}
Variant c_ReflectionProperty::i_setaccessible(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionProperty *self = NULL;
  p_ReflectionProperty pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionProperty*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionProperty::setAccessible", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_setaccessible(arg0), null);
  }
}
Variant c_ReflectionProperty::i_getdoccomment(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionProperty *self = NULL;
  p_ReflectionProperty pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionProperty*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionProperty::getDocComment", 0, 1);
  return (self->t_getdoccomment());
}
Variant c_ReflectionProperty::i_setvalue(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionProperty *self = NULL;
  p_ReflectionProperty pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionProperty*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 2) return throw_wrong_arguments("ReflectionProperty::setValue", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_setvalue(arg0, arg1), null);
  }
}
Variant c_ReflectionProperty::i_getname(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionProperty *self = NULL;
  p_ReflectionProperty pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionProperty*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionProperty::getName", 0, 1);
  return (self->t_getname());
}
Variant c_ReflectionProperty::ifa_isprivate(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionProperty *self = NULL;
  p_ReflectionProperty pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionProperty*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionProperty::isPrivate", 0, 1);
  return (self->t_isprivate());
}
Variant c_ReflectionProperty::ifa_getvalue(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionProperty *self = NULL;
  p_ReflectionProperty pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionProperty*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 1) return throw_toomany_arguments("ReflectionProperty::getValue", 1, 1);
  if (count <= 0) return (self->t_getvalue());
  CVarRef arg0((a0));
  return (self->t_getvalue(arg0));
}
Variant c_ReflectionProperty::ifa___tostring(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionProperty *self = NULL;
  p_ReflectionProperty pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionProperty*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionProperty::__toString", 0, 1);
  return (self->t___tostring());
}
Variant c_ReflectionProperty::ifa_isprotected(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionProperty *self = NULL;
  p_ReflectionProperty pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionProperty*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionProperty::isProtected", 0, 1);
  return (self->t_isprotected());
}
Variant c_ReflectionProperty::ifa_isstatic(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionProperty *self = NULL;
  p_ReflectionProperty pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionProperty*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionProperty::isStatic", 0, 1);
  return (self->t_isstatic());
}
Variant c_ReflectionProperty::ifa_getdeclaringclass(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionProperty *self = NULL;
  p_ReflectionProperty pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionProperty*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionProperty::getDeclaringClass", 0, 1);
  return (self->t_getdeclaringclass());
}
Variant c_ReflectionProperty::ifa_isdefault(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionProperty *self = NULL;
  p_ReflectionProperty pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionProperty*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionProperty::isDefault", 0, 1);
  return (self->t_isdefault());
}
Variant c_ReflectionProperty::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionProperty *self = NULL;
  p_ReflectionProperty pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionProperty*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 2) return throw_wrong_arguments("ReflectionProperty::__construct", count, 2, 2, 2);
  CVarRef arg0((a0));
  CVarRef arg1((a1));
  return (self->t___construct(arg0, arg1), null);
}
Variant c_ReflectionProperty::ifa_getmodifiers(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionProperty *self = NULL;
  p_ReflectionProperty pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionProperty*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionProperty::getModifiers", 0, 1);
  return (self->t_getmodifiers());
}
Variant c_ReflectionProperty::ifa_export(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (count != 3) return throw_wrong_arguments("ReflectionProperty::export", count, 3, 3, 1);
  CStrRef c(mcp.isObj ? mcp.rootObj->o_getClassName() : String(mcp.rootCls));
  CVarRef arg0((a0));
  CVarRef arg1((a1));
  CVarRef arg2((a2));
  return (c_ReflectionProperty::ti_export(c, arg0, arg1, arg2));
}
Variant c_ReflectionProperty::ifa_ispublic(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionProperty *self = NULL;
  p_ReflectionProperty pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionProperty*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionProperty::isPublic", 0, 1);
  return (self->t_ispublic());
}
Variant c_ReflectionProperty::ifa_setaccessible(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionProperty *self = NULL;
  p_ReflectionProperty pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionProperty*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionProperty::setAccessible", count, 1, 1, 1);
  CVarRef arg0((a0));
  return (self->t_setaccessible(arg0), null);
}
Variant c_ReflectionProperty::ifa_getdoccomment(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionProperty *self = NULL;
  p_ReflectionProperty pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionProperty*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionProperty::getDocComment", 0, 1);
  return (self->t_getdoccomment());
}
Variant c_ReflectionProperty::ifa_setvalue(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionProperty *self = NULL;
  p_ReflectionProperty pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionProperty*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 2) return throw_wrong_arguments("ReflectionProperty::setValue", count, 2, 2, 1);
  CVarRef arg0((a0));
  CVarRef arg1((a1));
  return (self->t_setvalue(arg0, arg1), null);
}
Variant c_ReflectionProperty::ifa_getname(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionProperty *self = NULL;
  p_ReflectionProperty pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionProperty*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionProperty::getName", 0, 1);
  return (self->t_getname());
}
bool c_ReflectionProperty::os_get_call_info(MethodCallPackage &mcp, int64 hash) {
  CStrRef s __attribute__((__unused__)) (*mcp.name);
  if (hash < 0) hash = s->hash();
  switch (hash & 31) {
    case 2:
      HASH_GUARD_LITSTR(0x791E9751F5B8C5A2LL, NAMSTR(s_sys_ss3fe4822b, "setAccessible")) {
        mcp.ci = &c_ReflectionProperty::ci_setaccessible;
        return true;
      }
      break;
    case 3:
      HASH_GUARD_LITSTR(0x56879BCEB40997E3LL, NAMSTR(s_sys_ssd14ebd08, "getValue")) {
        mcp.ci = &c_ReflectionProperty::ci_getvalue;
        return true;
      }
      HASH_GUARD_LITSTR(0x6ED51288559D6063LL, NAMSTR(s_sys_ss94ec964c, "getDeclaringClass")) {
        mcp.ci = &c_ReflectionProperty::ci_getdeclaringclass;
        return true;
      }
      break;
    case 5:
      HASH_GUARD_LITSTR(0x23F51CDECC198965LL, NAMSTR(s_sys_ssc2df217e, "getName")) {
        mcp.ci = &c_ReflectionProperty::ci_getname;
        return true;
      }
      break;
    case 8:
      HASH_GUARD_LITSTR(0x0B5ABC58C98E70E8LL, NAMSTR(s_sys_ssd04b2eb8, "export")) {
        mcp.ci = &c_ReflectionProperty::ci_export;
        return true;
      }
      break;
    case 10:
      HASH_GUARD_LITSTR(0x2D7209A590477CEALL, NAMSTR(s_sys_ssce80f767, "isProtected")) {
        mcp.ci = &c_ReflectionProperty::ci_isprotected;
        return true;
      }
      break;
    case 15:
      HASH_GUARD_LITSTR(0x37AAE0845E2F636FLL, NAMSTR(s_sys_ssa812760b, "isPrivate")) {
        mcp.ci = &c_ReflectionProperty::ci_isprivate;
        return true;
      }
      break;
    case 19:
      HASH_GUARD_LITSTR(0x642C2D2994B34A13LL, NAMSTR(s_sys_ss6974a1cc, "__toString")) {
        mcp.ci = &c_ReflectionProperty::ci___tostring;
        return true;
      }
      break;
    case 20:
      HASH_GUARD_LITSTR(0x24253EBA491D6014LL, NAMSTR(s_sys_ss97b15062, "getModifiers")) {
        mcp.ci = &c_ReflectionProperty::ci_getmodifiers;
        return true;
      }
      break;
    case 21:
      HASH_GUARD_LITSTR(0x384A52597AB11F15LL, NAMSTR(s_sys_ss9dad4367, "isDefault")) {
        mcp.ci = &c_ReflectionProperty::ci_isdefault;
        return true;
      }
      HASH_GUARD_LITSTR(0x36FBED35008C8DB5LL, NAMSTR(s_sys_ss325815c1, "setValue")) {
        mcp.ci = &c_ReflectionProperty::ci_setvalue;
        return true;
      }
      break;
    case 24:
      HASH_GUARD_LITSTR(0x7C4F424FDA56ADF8LL, NAMSTR(s_sys_ssd5dbbd47, "getDocComment")) {
        mcp.ci = &c_ReflectionProperty::ci_getdoccomment;
        return true;
      }
      break;
    case 25:
      HASH_GUARD_LITSTR(0x7A15DC56E8CC0B19LL, NAMSTR(s_sys_ss404bf1b4, "isStatic")) {
        mcp.ci = &c_ReflectionProperty::ci_isstatic;
        return true;
      }
      break;
    case 28:
      HASH_GUARD_LITSTR(0x2820F10358723B7CLL, NAMSTR(s_sys_ssdec3c0f0, "isPublic")) {
        mcp.ci = &c_ReflectionProperty::ci_ispublic;
        return true;
      }
      break;
    case 31:
      HASH_GUARD_LITSTR(0x0D31D0AC229C615FLL, NAMSTR(s_sys_ssa1b87da7, "__construct")) {
        mcp.ci = &c_ReflectionProperty::ci___construct;
        return true;
      }
      break;
    default:
      break;
  }
  return c_ObjectData::os_get_call_info(mcp, hash);
}
bool c_ReflectionProperty::o_get_call_info(MethodCallPackage &mcp, int64 hash) {
  mcp.obj = this;
  return os_get_call_info(mcp, hash);
}
c_ReflectionProperty *c_ReflectionProperty::create(Variant v_cls, Variant v_name) {
  CountableHelper h(this);
  init();
  t___construct(v_cls, v_name);
  return this;
}
void c_ReflectionProperty::dynConstruct(CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  if (count != 2) throw_wrong_arguments("ReflectionProperty::__construct", count, 2, 2, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    (t___construct(arg0, arg1));
  }
}
void c_ReflectionProperty::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_ReflectionProperty::ci___construct;
  mcp.obj = this;
}
void c_ReflectionProperty::dynConstructFromEval(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  unsigned int i = 0;
  do {
    if (i == params.size()) break;
    a0 = params[i]->eval(env);
    i++;
    if (i == params.size()) break;
    a1 = params[i]->eval(env);
    i++;
  } while(false);
  for (; i != params.size(); ++i) {
    params[i]->eval(env);
  }
  int count __attribute__((__unused__)) = params.size();
  if (count != 2) throw_wrong_arguments("ReflectionProperty::__construct", count, 2, 2, 1);
  (t___construct(a0, a1), null);
}
struct ObjectStaticCallbacks cw_ReflectionProperty = {
  c_ReflectionProperty::os_getInit,
  c_ReflectionProperty::os_get,
  c_ReflectionProperty::os_lval,
  c_ReflectionProperty::os_invoke,
  c_ReflectionProperty::os_constant,
  c_ReflectionProperty::os_get_call_info
};
void c_ReflectionProperty::init() {
  m_info = null;
  m_name = null;
  m_class = null;
}
/* SRC: classes/reflection.php line 1328 */
void c_ReflectionProperty::t___construct(Variant v_cls, Variant v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::__construct);
  bool oldInCtor = gasInCtor(true);
  Variant v_prop;

  if ((toBoolean(v_cls) && toBoolean(v_name))) {
    {
      if (!(x_is_object(v_cls))) {
        {
          {
            p_ReflectionClass tmp0 = NEWOBJ(c_ReflectionClass)();
            (tmp0->create(v_cls));
            v_cls = tmp0;
          }
        }
      }
      else {
        {
          {
            p_ReflectionClass tmp0 = NEWOBJ(c_ReflectionClass)();
            const Variant &tmp1((x_get_class(v_cls)));
            (tmp0->create(tmp1));
            v_cls = tmp0;
          }
        }
      }
      {
        MethodCallPackage mcp0;
        CVarRef obj0 = v_cls;
        mcp0.methodCall((obj0), NAMSTR(s_sys_ssd029c1ac, "getProperty"), 0x0FD73627FB023047LL);
        const CallInfo *cit0 __attribute__((__unused__)) = mcp0.ci;
        Variant tmp1(((mcp0.bindClass(fi)->getMeth1Args())(mcp0, 1, v_name)));
        v_prop = tmp1;
      }
      if (toBoolean(v_prop)) {
        {
          {
            const Variant &tmp0((v_prop.o_getPublic(NAMSTR(s_sys_ss33988b3e, "info"), true)));
            m_info = tmp0;
          }
          {
            const Variant &tmp0((v_prop.o_getPublic(NAMSTR(s_sys_ssdc3cbddc, "name"), true)));
            m_name = tmp0;
          }
          {
            const Variant &tmp0((v_prop.o_getPublic(NAMSTR(s_sys_ssc82dbd12, "class"), true)));
            m_class = tmp0;
          }
        }
      }
    }
  }
  gasInCtor(oldInCtor);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1344 */
String c_ReflectionProperty::t___tostring() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::__toString);
  return toString(null);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1360 */
Variant c_ReflectionProperty::ti_export(CStrRef cls, Variant v_cls, CVarRef v_name, CVarRef v_ret) {
  STATIC_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::export);
  Variant v_obj;
  String v_str;

  if (!(x_is_object(v_cls))) {
    {
      {
        p_ReflectionClass tmp0 = NEWOBJ(c_ReflectionClass)();
        (tmp0->create(v_cls));
        v_cls = tmp0;
      }
    }
  }
  else {
    {
      {
        p_ReflectionClass tmp0 = NEWOBJ(c_ReflectionClass)();
        const Variant &tmp1((x_get_class(v_cls)));
        (tmp0->create(tmp1));
        v_cls = tmp0;
      }
    }
  }
  {
    MethodCallPackage mcp0;
    CVarRef obj0 = v_cls;
    mcp0.methodCall((obj0), NAMSTR(s_sys_ssd029c1ac, "getProperty"), 0x0FD73627FB023047LL);
    const CallInfo *cit0 __attribute__((__unused__)) = mcp0.ci;
    Variant tmp1(((mcp0.bindClass(fi)->getMeth1Args())(mcp0, 1, v_name)));
    v_obj = tmp1;
  }
  v_str = (toString(v_obj));
  if (toBoolean(v_ret)) {
    {
      return v_str;
    }
  }
  print(v_str);
  return null;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1383 */
Variant c_ReflectionProperty::t_getname() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::getName);
  return m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1396 */
bool c_ReflectionProperty::t_ispublic() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::isPublic);
  return equal(m_info.rvalAt(NAMSTR(s_sys_ss750cda3b, "access"), AccessFlags::Error_Key), NAMSTR(s_sys_ss4ce85288, "public"));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1409 */
bool c_ReflectionProperty::t_isprivate() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::isPrivate);
  return equal(m_info.rvalAt(NAMSTR(s_sys_ss750cda3b, "access"), AccessFlags::Error_Key), NAMSTR(s_sys_sse781f7da, "private"));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1422 */
bool c_ReflectionProperty::t_isprotected() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::isProtected);
  return equal(m_info.rvalAt(NAMSTR(s_sys_ss750cda3b, "access"), AccessFlags::Error_Key), NAMSTR(s_sys_ss9fb56979, "protected"));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1435 */
Variant c_ReflectionProperty::t_isstatic() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::isStatic);
  return m_info.rvalAt(NAMSTR(s_sys_ssf08d205d, "static"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1449 */
Variant c_ReflectionProperty::t_isdefault() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::isDefault);
  return m_info.rvalAt(NAMSTR(s_sys_ss570270cc, "default"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1463 */
void c_ReflectionProperty::t_setaccessible(CVarRef v_accessible) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::setAccessible);
  throw_exception(p_ReflectionException((NEWOBJ(c_ReflectionException)())->create(NAMSTR(s_sys_ssf82f565f, "ReflectionProperty::setAccessible is not supported"))));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1477 */
Variant c_ReflectionProperty::t_getmodifiers() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::getModifiers);
  return m_info.rvalAt(NAMSTR(s_sys_ss9f244c80, "modifiers"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1493 */
Variant c_ReflectionProperty::t_getvalue(CVarRef v_obj //  = null_variant
) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::getValue);
  if (toBoolean(t_isstatic())) {
    {
      {
        const String &tmp0((toString(m_info.rvalAt(NAMSTR(s_sys_ssc82dbd12, "class"), AccessFlags::Error_Key))));
        const String &tmp1((toString(m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key))));
        return x_hphp_get_static_property(tmp0, tmp1);
      }
    }
  }
  if (toBoolean(v_obj)) {
    {
      {
        const Object &tmp0((toObject(v_obj)));
        const String &tmp1((toString(m_info.rvalAt(NAMSTR(s_sys_ssc82dbd12, "class"), AccessFlags::Error_Key))));
        const String &tmp2((toString(m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key))));
        return x_hphp_get_property(tmp0, tmp1, tmp2);
      }
    }
  }
  return null;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1518 */
void c_ReflectionProperty::t_setvalue(CVarRef v_obj, CVarRef v_value) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::setValue);
  if (toBoolean(t_isstatic())) {
    {
      {
        const String &tmp0((toString(m_info.rvalAt(NAMSTR(s_sys_ssc82dbd12, "class"), AccessFlags::Error_Key))));
        const String &tmp1((toString(m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key))));
        x_hphp_set_static_property(tmp0, tmp1, v_value);
      }
    }
  }
  else {
    {
      {
        const Object &tmp0((toObject(v_obj)));
        const String &tmp1((toString(m_info.rvalAt(NAMSTR(s_sys_ssc82dbd12, "class"), AccessFlags::Error_Key))));
        const String &tmp2((toString(m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key))));
        x_hphp_set_property(tmp0, tmp1, tmp2, v_value);
      }
    }
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1538 */
Variant c_ReflectionProperty::t_getdeclaringclass() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::getDeclaringClass);
  if (empty(m_info, NAMSTR(s_sys_ssc82dbd12, "class"), true)) {
    {
      return null;
    }
  }
  {
    p_ReflectionClass tmp0 = NEWOBJ(c_ReflectionClass)();
    return (tmp0->create(m_info.rvalAt(NAMSTR(s_sys_ssc82dbd12, "class"), AccessFlags::Error_Key)), tmp0);
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 1555 */
Variant c_ReflectionProperty::t_getdoccomment() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionProperty, ReflectionProperty::getDocComment);
  return m_info.rvalAt(NAMSTR(s_sys_ss9cfa17a6, "doc"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 461 */
const int64 q_ReflectionFunction_IS_DEPRECATED = 262144LL;
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_ReflectionFunction
Variant c_ReflectionFunction::os_getInit(CStrRef s) {
  return c_ReflectionFunctionAbstract::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_ReflectionFunction
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_ReflectionFunction
Variant c_ReflectionFunction::os_get(CStrRef s) {
  return c_ReflectionFunctionAbstract::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_ReflectionFunction
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_ReflectionFunction
Variant &c_ReflectionFunction::os_lval(CStrRef s) {
  return c_ReflectionFunctionAbstract::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_ReflectionFunction
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_ReflectionFunction
void c_ReflectionFunction::o_getArray(Array &props, bool pubOnly) const {
  c_ReflectionFunctionAbstract::o_getArray(props, pubOnly);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_ReflectionFunction
#ifndef OMIT_JUMP_TABLE_CLASS_SETARRAY_ReflectionFunction
void c_ReflectionFunction::o_setArray(CArrRef props) {
  c_ReflectionFunctionAbstract::o_setArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_SETARRAY_ReflectionFunction
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_ReflectionFunction
Variant * c_ReflectionFunction::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_ReflectionFunction
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_ReflectionFunction
Variant * c_ReflectionFunction::o_realPropPublic(CStrRef s, int flags) const {
  return c_ReflectionFunctionAbstract::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_ReflectionFunction
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_ReflectionFunction
Variant * c_ReflectionFunction::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_ReflectionFunction
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_ReflectionFunction
Variant c_ReflectionFunction::os_constant(const char *s) {
  int64 hash = hash_string(s);
  switch (hash & 1) {
    case 0:
      HASH_RETURN(0x25C5A7C72E7B0EF6LL, q_ReflectionFunction_IS_DEPRECATED, "IS_DEPRECATED");
      break;
    default:
      break;
  }
  return c_ReflectionFunctionAbstract::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_ReflectionFunction
IMPLEMENT_CLASS(ReflectionFunction)
bool c_ReflectionFunction::o_instanceof(CStrRef s) const {
  int64 hash = s->hash();
  switch (hash & 7) {
    case 1:
      HASH_INSTANCEOF(0x21EF70351574EC09LL, NAMSTR(s_sys_ss99f908fe, "ReflectionFunction"));
      break;
    case 2:
      HASH_INSTANCEOF(0x33BD46E935281082LL, NAMSTR(s_sys_ss5b2a52c1, "ReflectionFunctionAbstract"));
      break;
    case 5:
      HASH_INSTANCEOF(0x62F7F85447C0A605LL, NAMSTR(s_sys_ss0d7533cf, "Reflector"));
      break;
    default:
      break;
  }
  return false;
}
ObjectData *c_ReflectionFunction::cloneImpl() {
  c_ReflectionFunction *obj = NEWOBJ(c_ReflectionFunction)();
  c_ReflectionFunction::cloneSet(obj);
  return obj;
}
void c_ReflectionFunction::cloneSet(ObjectData *cl) {
  c_ReflectionFunction *clone = static_cast<c_ReflectionFunction*>(cl);
  c_ReflectionFunctionAbstract::cloneSet(clone);
}
CallInfo c_ReflectionFunction::ci___tostring((void*)&c_ReflectionFunction::i___tostring, (void*)&c_ReflectionFunction::ifa___tostring, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionFunction::ci___construct((void*)&c_ReflectionFunction::i___construct, (void*)&c_ReflectionFunction::ifa___construct, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionFunction::ci_invokeargs((void*)&c_ReflectionFunction::i_invokeargs, (void*)&c_ReflectionFunction::ifa_invokeargs, 1, 4, 0x0000000000000000LL);
CallInfo c_ReflectionFunction::ci_export((void*)&c_ReflectionFunction::i_export, (void*)&c_ReflectionFunction::ifa_export, 2, 12, 0x0000000000000000LL);
CallInfo c_ReflectionFunction::ci_invoke((void*)&c_ReflectionFunction::i_invoke, (void*)&c_ReflectionFunction::ifa_invoke, 0, 5, 0x0000000000000000LL);
Variant c_ReflectionFunction::i___tostring(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionFunction *self = NULL;
  p_ReflectionFunction pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunction*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionFunction::__toString", 0, 1);
  return (self->t___tostring());
}
Variant c_ReflectionFunction::i___construct(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionFunction *self = NULL;
  p_ReflectionFunction pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunction*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionFunction::__construct", count, 1, 1, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___construct(arg0), null);
  }
}
Variant c_ReflectionFunction::i_invokeargs(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionFunction *self = NULL;
  p_ReflectionFunction pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunction*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionFunction::invokeArgs", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_invokeargs(arg0));
  }
}
Variant c_ReflectionFunction::i_export(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  if (count != 2) return throw_wrong_arguments("ReflectionFunction::export", count, 2, 2, 1);
  CStrRef c(mcp.isObj ? mcp.rootObj->o_getClassName() : String(mcp.rootCls));
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (c_ReflectionFunction::ti_export(c, arg0, arg1));
  }
}
Variant c_ReflectionFunction::i_invoke(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionFunction *self = NULL;
  p_ReflectionFunction pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunction*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  const Array &p(count > 0 ? params.slice(0, count - 0, false) : Array());
  return (self->t_invoke(count, p));
}
Variant c_ReflectionFunction::ifa___tostring(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionFunction *self = NULL;
  p_ReflectionFunction pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunction*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionFunction::__toString", 0, 1);
  return (self->t___tostring());
}
Variant c_ReflectionFunction::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionFunction *self = NULL;
  p_ReflectionFunction pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunction*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionFunction::__construct", count, 1, 1, 2);
  CVarRef arg0((a0));
  return (self->t___construct(arg0), null);
}
Variant c_ReflectionFunction::ifa_invokeargs(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionFunction *self = NULL;
  p_ReflectionFunction pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunction*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 1) return throw_wrong_arguments("ReflectionFunction::invokeArgs", count, 1, 1, 1);
  CVarRef arg0((a0));
  return (self->t_invokeargs(arg0));
}
Variant c_ReflectionFunction::ifa_export(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (count != 2) return throw_wrong_arguments("ReflectionFunction::export", count, 2, 2, 1);
  CStrRef c(mcp.isObj ? mcp.rootObj->o_getClassName() : String(mcp.rootCls));
  CVarRef arg0((a0));
  CVarRef arg1((a1));
  return (c_ReflectionFunction::ti_export(c, arg0, arg1));
}
Variant c_ReflectionFunction::ifa_invoke(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionFunction *self = NULL;
  p_ReflectionFunction pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionFunction*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  Array p;
  if (count >= 1) p.append(a0);
  if (count >= 2) p.append(a1);
  if (count >= 3) p.append(a2);
  if (count >= 4) p.append(a3);
  if (count >= 5) p.append(a4);
  if (count >= 6) p.append(a5);
  return (self->t_invoke(count, p));
}
bool c_ReflectionFunction::os_get_call_info(MethodCallPackage &mcp, int64 hash) {
  CStrRef s __attribute__((__unused__)) (*mcp.name);
  if (hash < 0) hash = s->hash();
  switch (hash & 15) {
    case 2:
      HASH_GUARD_LITSTR(0x3FCE192CF6199942LL, NAMSTR(s_sys_ssc90e239b, "invoke")) {
        mcp.ci = &c_ReflectionFunction::ci_invoke;
        return true;
      }
      break;
    case 3:
      HASH_GUARD_LITSTR(0x642C2D2994B34A13LL, NAMSTR(s_sys_ss6974a1cc, "__toString")) {
        mcp.ci = &c_ReflectionFunction::ci___tostring;
        return true;
      }
      break;
    case 4:
      HASH_GUARD_LITSTR(0x3235AF57F23103C4LL, NAMSTR(s_sys_ss1fa13716, "invokeArgs")) {
        mcp.ci = &c_ReflectionFunction::ci_invokeargs;
        return true;
      }
      break;
    case 8:
      HASH_GUARD_LITSTR(0x0B5ABC58C98E70E8LL, NAMSTR(s_sys_ssd04b2eb8, "export")) {
        mcp.ci = &c_ReflectionFunction::ci_export;
        return true;
      }
      break;
    case 15:
      HASH_GUARD_LITSTR(0x0D31D0AC229C615FLL, NAMSTR(s_sys_ssa1b87da7, "__construct")) {
        mcp.ci = &c_ReflectionFunction::ci___construct;
        return true;
      }
      break;
    default:
      break;
  }
  return c_ReflectionFunctionAbstract::os_get_call_info(mcp, hash);
}
bool c_ReflectionFunction::o_get_call_info(MethodCallPackage &mcp, int64 hash) {
  mcp.obj = this;
  return os_get_call_info(mcp, hash);
}
c_ReflectionFunction *c_ReflectionFunction::create(Variant v_name) {
  CountableHelper h(this);
  init();
  t___construct(v_name);
  return this;
}
void c_ReflectionFunction::dynConstruct(CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  if (count != 1) throw_wrong_arguments("ReflectionFunction::__construct", count, 1, 1, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    (t___construct(arg0));
  }
}
void c_ReflectionFunction::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_ReflectionFunction::ci___construct;
  mcp.obj = this;
}
void c_ReflectionFunction::dynConstructFromEval(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  unsigned int i = 0;
  do {
    if (i == params.size()) break;
    a0 = params[i]->eval(env);
    i++;
  } while(false);
  for (; i != params.size(); ++i) {
    params[i]->eval(env);
  }
  int count __attribute__((__unused__)) = params.size();
  if (count != 1) throw_wrong_arguments("ReflectionFunction::__construct", count, 1, 1, 1);
  (t___construct(a0), null);
}
struct ObjectStaticCallbacks cw_ReflectionFunction = {
  c_ReflectionFunction::os_getInit,
  c_ReflectionFunction::os_get,
  c_ReflectionFunction::os_lval,
  c_ReflectionFunction::os_invoke,
  c_ReflectionFunction::os_constant,
  c_ReflectionFunction::os_get_call_info
};
void c_ReflectionFunction::init() {
  c_ReflectionFunctionAbstract::init();
}
/* SRC: classes/reflection.php line 465 */
void c_ReflectionFunction::t___construct(Variant v_name) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunction, ReflectionFunction::__construct);
  bool oldInCtor = gasInCtor(true);
  {
    const Array &tmp0((x_hphp_get_function_info(toString(v_name))));
    m_info = tmp0;
  }
  if (empty(m_info)) {
    {
      {
        p_ReflectionException tmp0 = NEWOBJ(c_ReflectionException)();
        throw_exception((tmp0->create(concat3(NAMSTR(s_sys_ss985d885e, "Function "), toString(v_name), NAMSTR(s_sys_ss5784ed2b, " does not exist"))), tmp0));
      }
    }
  }
  gasInCtor(oldInCtor);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 472 */
String c_ReflectionFunction::t___tostring() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunction, ReflectionFunction::__toString);
  return toString(null);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 492 */
Variant c_ReflectionFunction::ti_export(CStrRef cls, CVarRef v_name, CVarRef v_ret) {
  STATIC_METHOD_INJECTION_BUILTIN(ReflectionFunction, ReflectionFunction::export);
  p_ReflectionFunction v_obj;
  String v_str;

  {
    p_ReflectionFunction tmp0 = NEWOBJ(c_ReflectionFunction)();
    (tmp0->create(v_name));
    v_obj = tmp0;
  }
  v_str = (toString(v_obj));
  if (toBoolean(v_ret)) {
    {
      return v_str;
    }
  }
  print(v_str);
  return null;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 508 */
Variant c_ReflectionFunction::t_invoke(int num_args, Array args /* = Array() */) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunction, ReflectionFunction::invoke);
  Array v_args;

  {
    const Array &tmp0((func_get_args(num_args, Array(),args)));
    v_args = tmp0;
  }
  {
    const String &tmp0((toString(m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key))));
    return x_hphp_invoke(tmp0, v_args);
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 523 */
Variant c_ReflectionFunction::t_invokeargs(CVarRef v_args) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionFunction, ReflectionFunction::invokeArgs);
  {
    const String &tmp0((toString(m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key))));
    const Array &tmp1((toArray(x_array_values(v_args))));
    return x_hphp_invoke(tmp0, tmp1);
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 46 */
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_ReflectionParameter
Variant c_ReflectionParameter::os_getInit(CStrRef s) {
  DECLARE_SYSTEM_GLOBALS(g);
  int64 hash = s->hash();
  switch (hash & 1) {
    case 1:
      HASH_RETURN_NAMSTR(0x0F2EF58F157D479FLL, NAMSTR(s_sys_ss33988b3e, "info"),
                         null, 4);
      break;
    default:
      break;
  }
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_ReflectionParameter
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_ReflectionParameter
Variant c_ReflectionParameter::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_ReflectionParameter
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_ReflectionParameter
Variant &c_ReflectionParameter::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_ReflectionParameter
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_ReflectionParameter
void c_ReflectionParameter::o_getArray(Array &props, bool pubOnly) const {
  if (isInitialized(m_info)) props.lvalAt(NAMSTR(s_sys_ss33988b3e, "info"), AccessFlags::Key).setWithRef(m_info);
  c_ObjectData::o_getArray(props, pubOnly);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_ReflectionParameter
#ifndef OMIT_JUMP_TABLE_CLASS_SETARRAY_ReflectionParameter
void c_ReflectionParameter::o_setArray(CArrRef props) {
  c_ObjectData::o_setArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_SETARRAY_ReflectionParameter
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_ReflectionParameter
Variant * c_ReflectionParameter::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_ReflectionParameter
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_ReflectionParameter
Variant * c_ReflectionParameter::o_realPropPublic(CStrRef s, int flags) const {
  int64 hash = s->hash();
  switch (hash & 1) {
    case 1:
      HASH_REALPROP_STRING(0x0F2EF58F157D479FLL, "info", 4, info);
      break;
    default:
      break;
  }
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_ReflectionParameter
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_ReflectionParameter
Variant * c_ReflectionParameter::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_ReflectionParameter
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_ReflectionParameter
Variant c_ReflectionParameter::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_ReflectionParameter
IMPLEMENT_CLASS(ReflectionParameter)
bool c_ReflectionParameter::o_instanceof(CStrRef s) const {
  int64 hash = s->hash();
  switch (hash & 3) {
    case 1:
      HASH_INSTANCEOF(0x62F7F85447C0A605LL, NAMSTR(s_sys_ss0d7533cf, "Reflector"));
      break;
    case 3:
      HASH_INSTANCEOF(0x2E7081C468A05993LL, NAMSTR(s_sys_sscd5dc41e, "ReflectionParameter"));
      break;
    default:
      break;
  }
  return false;
}
ObjectData *c_ReflectionParameter::cloneImpl() {
  c_ReflectionParameter *obj = NEWOBJ(c_ReflectionParameter)();
  c_ReflectionParameter::cloneSet(obj);
  return obj;
}
void c_ReflectionParameter::cloneSet(ObjectData *cl) {
  c_ReflectionParameter *clone = static_cast<c_ReflectionParameter*>(cl);
  ObjectData::cloneSet(clone);
  clone->m_info.setWithRef(m_info);
}
CallInfo c_ReflectionParameter::ci___tostring((void*)&c_ReflectionParameter::i___tostring, (void*)&c_ReflectionParameter::ifa___tostring, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionParameter::ci_getdeclaringclass((void*)&c_ReflectionParameter::i_getdeclaringclass, (void*)&c_ReflectionParameter::ifa_getdeclaringclass, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionParameter::ci_isdefaultvalueavailable((void*)&c_ReflectionParameter::i_isdefaultvalueavailable, (void*)&c_ReflectionParameter::ifa_isdefaultvalueavailable, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionParameter::ci___construct((void*)&c_ReflectionParameter::i___construct, (void*)&c_ReflectionParameter::ifa___construct, 2, 4, 0x0000000000000000LL);
CallInfo c_ReflectionParameter::ci_getclass((void*)&c_ReflectionParameter::i_getclass, (void*)&c_ReflectionParameter::ifa_getclass, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionParameter::ci_export((void*)&c_ReflectionParameter::i_export, (void*)&c_ReflectionParameter::ifa_export, 3, 12, 0x0000000000000000LL);
CallInfo c_ReflectionParameter::ci_allowsnull((void*)&c_ReflectionParameter::i_allowsnull, (void*)&c_ReflectionParameter::ifa_allowsnull, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionParameter::ci_getposition((void*)&c_ReflectionParameter::i_getposition, (void*)&c_ReflectionParameter::ifa_getposition, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionParameter::ci_isarray((void*)&c_ReflectionParameter::i_isarray, (void*)&c_ReflectionParameter::ifa_isarray, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionParameter::ci_isoptional((void*)&c_ReflectionParameter::i_isoptional, (void*)&c_ReflectionParameter::ifa_isoptional, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionParameter::ci_getdefaultvalue((void*)&c_ReflectionParameter::i_getdefaultvalue, (void*)&c_ReflectionParameter::ifa_getdefaultvalue, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionParameter::ci_getname((void*)&c_ReflectionParameter::i_getname, (void*)&c_ReflectionParameter::ifa_getname, 0, 4, 0x0000000000000000LL);
CallInfo c_ReflectionParameter::ci_ispassedbyreference((void*)&c_ReflectionParameter::i_ispassedbyreference, (void*)&c_ReflectionParameter::ifa_ispassedbyreference, 0, 4, 0x0000000000000000LL);
Variant c_ReflectionParameter::i___tostring(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionParameter *self = NULL;
  p_ReflectionParameter pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionParameter*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionParameter::__toString", 0, 1);
  return (self->t___tostring());
}
Variant c_ReflectionParameter::i_getdeclaringclass(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionParameter *self = NULL;
  p_ReflectionParameter pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionParameter*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionParameter::getDeclaringClass", 0, 1);
  return (self->t_getdeclaringclass());
}
Variant c_ReflectionParameter::i_isdefaultvalueavailable(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionParameter *self = NULL;
  p_ReflectionParameter pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionParameter*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionParameter::isDefaultValueAvailable", 0, 1);
  return (self->t_isdefaultvalueavailable());
}
Variant c_ReflectionParameter::i___construct(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionParameter *self = NULL;
  p_ReflectionParameter pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionParameter*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 2) return throw_wrong_arguments("ReflectionParameter::__construct", count, 2, 2, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___construct(arg0, arg1), null);
  }
}
Variant c_ReflectionParameter::i_getclass(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionParameter *self = NULL;
  p_ReflectionParameter pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionParameter*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionParameter::getClass", 0, 1);
  return (self->t_getclass());
}
Variant c_ReflectionParameter::i_export(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  if (count != 3) return throw_wrong_arguments("ReflectionParameter::export", count, 3, 3, 1);
  CStrRef c(mcp.isObj ? mcp.rootObj->o_getClassName() : String(mcp.rootCls));
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (c_ReflectionParameter::ti_export(c, arg0, arg1, arg2));
  }
}
Variant c_ReflectionParameter::i_allowsnull(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionParameter *self = NULL;
  p_ReflectionParameter pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionParameter*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionParameter::allowsNull", 0, 1);
  return (self->t_allowsnull());
}
Variant c_ReflectionParameter::i_getposition(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionParameter *self = NULL;
  p_ReflectionParameter pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionParameter*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionParameter::getPosition", 0, 1);
  return (self->t_getposition());
}
Variant c_ReflectionParameter::i_isarray(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionParameter *self = NULL;
  p_ReflectionParameter pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionParameter*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionParameter::isArray", 0, 1);
  return (self->t_isarray());
}
Variant c_ReflectionParameter::i_isoptional(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionParameter *self = NULL;
  p_ReflectionParameter pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionParameter*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionParameter::isOptional", 0, 1);
  return (self->t_isoptional());
}
Variant c_ReflectionParameter::i_getdefaultvalue(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionParameter *self = NULL;
  p_ReflectionParameter pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionParameter*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionParameter::getDefaultValue", 0, 1);
  return (self->t_getdefaultvalue());
}
Variant c_ReflectionParameter::i_getname(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionParameter *self = NULL;
  p_ReflectionParameter pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionParameter*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionParameter::getName", 0, 1);
  return (self->t_getname());
}
Variant c_ReflectionParameter::i_ispassedbyreference(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ReflectionParameter *self = NULL;
  p_ReflectionParameter pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionParameter*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionParameter::isPassedByReference", 0, 1);
  return (self->t_ispassedbyreference());
}
Variant c_ReflectionParameter::ifa___tostring(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionParameter *self = NULL;
  p_ReflectionParameter pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionParameter*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionParameter::__toString", 0, 1);
  return (self->t___tostring());
}
Variant c_ReflectionParameter::ifa_getdeclaringclass(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionParameter *self = NULL;
  p_ReflectionParameter pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionParameter*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionParameter::getDeclaringClass", 0, 1);
  return (self->t_getdeclaringclass());
}
Variant c_ReflectionParameter::ifa_isdefaultvalueavailable(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionParameter *self = NULL;
  p_ReflectionParameter pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionParameter*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionParameter::isDefaultValueAvailable", 0, 1);
  return (self->t_isdefaultvalueavailable());
}
Variant c_ReflectionParameter::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionParameter *self = NULL;
  p_ReflectionParameter pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionParameter*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count != 2) return throw_wrong_arguments("ReflectionParameter::__construct", count, 2, 2, 2);
  CVarRef arg0((a0));
  CVarRef arg1((a1));
  return (self->t___construct(arg0, arg1), null);
}
Variant c_ReflectionParameter::ifa_getclass(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionParameter *self = NULL;
  p_ReflectionParameter pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionParameter*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionParameter::getClass", 0, 1);
  return (self->t_getclass());
}
Variant c_ReflectionParameter::ifa_export(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  if (count != 3) return throw_wrong_arguments("ReflectionParameter::export", count, 3, 3, 1);
  CStrRef c(mcp.isObj ? mcp.rootObj->o_getClassName() : String(mcp.rootCls));
  CVarRef arg0((a0));
  CVarRef arg1((a1));
  CVarRef arg2((a2));
  return (c_ReflectionParameter::ti_export(c, arg0, arg1, arg2));
}
Variant c_ReflectionParameter::ifa_allowsnull(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionParameter *self = NULL;
  p_ReflectionParameter pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionParameter*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionParameter::allowsNull", 0, 1);
  return (self->t_allowsnull());
}
Variant c_ReflectionParameter::ifa_getposition(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionParameter *self = NULL;
  p_ReflectionParameter pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionParameter*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionParameter::getPosition", 0, 1);
  return (self->t_getposition());
}
Variant c_ReflectionParameter::ifa_isarray(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionParameter *self = NULL;
  p_ReflectionParameter pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionParameter*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionParameter::isArray", 0, 1);
  return (self->t_isarray());
}
Variant c_ReflectionParameter::ifa_isoptional(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionParameter *self = NULL;
  p_ReflectionParameter pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionParameter*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionParameter::isOptional", 0, 1);
  return (self->t_isoptional());
}
Variant c_ReflectionParameter::ifa_getdefaultvalue(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionParameter *self = NULL;
  p_ReflectionParameter pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionParameter*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionParameter::getDefaultValue", 0, 1);
  return (self->t_getdefaultvalue());
}
Variant c_ReflectionParameter::ifa_getname(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionParameter *self = NULL;
  p_ReflectionParameter pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionParameter*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionParameter::getName", 0, 1);
  return (self->t_getname());
}
Variant c_ReflectionParameter::ifa_ispassedbyreference(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ReflectionParameter *self = NULL;
  p_ReflectionParameter pobj;
  if (mcp.obj) {
    self = static_cast<c_ReflectionParameter*>(mcp.obj);
  } else {
    self = createDummy(pobj);
  }
  if (count > 0) return throw_toomany_arguments("ReflectionParameter::isPassedByReference", 0, 1);
  return (self->t_ispassedbyreference());
}
bool c_ReflectionParameter::os_get_call_info(MethodCallPackage &mcp, int64 hash) {
  CStrRef s __attribute__((__unused__)) (*mcp.name);
  if (hash < 0) hash = s->hash();
  switch (hash & 31) {
    case 3:
      HASH_GUARD_LITSTR(0x6ED51288559D6063LL, NAMSTR(s_sys_ss94ec964c, "getDeclaringClass")) {
        mcp.ci = &c_ReflectionParameter::ci_getdeclaringclass;
        return true;
      }
      break;
    case 5:
      HASH_GUARD_LITSTR(0x23F51CDECC198965LL, NAMSTR(s_sys_ssc2df217e, "getName")) {
        mcp.ci = &c_ReflectionParameter::ci_getname;
        return true;
      }
      break;
    case 8:
      HASH_GUARD_LITSTR(0x0B5ABC58C98E70E8LL, NAMSTR(s_sys_ssd04b2eb8, "export")) {
        mcp.ci = &c_ReflectionParameter::ci_export;
        return true;
      }
      HASH_GUARD_LITSTR(0x4044F1EEBF3BB8C8LL, NAMSTR(s_sys_ssf1bd1a9d, "getPosition")) {
        mcp.ci = &c_ReflectionParameter::ci_getposition;
        return true;
      }
      break;
    case 9:
      HASH_GUARD_LITSTR(0x4F51DA0B633E9909LL, NAMSTR(s_sys_ss969a2913, "getClass")) {
        mcp.ci = &c_ReflectionParameter::ci_getclass;
        return true;
      }
      HASH_GUARD_LITSTR(0x24ED05F4504C4C09LL, NAMSTR(s_sys_ss5bfa95ac, "allowsNull")) {
        mcp.ci = &c_ReflectionParameter::ci_allowsnull;
        return true;
      }
      break;
    case 12:
      HASH_GUARD_LITSTR(0x27C482A6C7951E0CLL, NAMSTR(s_sys_ss1c65f80a, "getDefaultValue")) {
        mcp.ci = &c_ReflectionParameter::ci_getdefaultvalue;
        return true;
      }
      break;
    case 17:
      HASH_GUARD_LITSTR(0x13E3F304BDD89FB1LL, NAMSTR(s_sys_ss6e47b4b1, "isPassedByReference")) {
        mcp.ci = &c_ReflectionParameter::ci_ispassedbyreference;
        return true;
      }
      break;
    case 18:
      HASH_GUARD_LITSTR(0x6E34805C91257C92LL, NAMSTR(s_sys_ssf4dfdccf, "isDefaultValueAvailable")) {
        mcp.ci = &c_ReflectionParameter::ci_isdefaultvalueavailable;
        return true;
      }
      break;
    case 19:
      HASH_GUARD_LITSTR(0x642C2D2994B34A13LL, NAMSTR(s_sys_ss6974a1cc, "__toString")) {
        mcp.ci = &c_ReflectionParameter::ci___tostring;
        return true;
      }
      break;
    case 21:
      HASH_GUARD_LITSTR(0x2D6EF48BBAB22735LL, NAMSTR(s_sys_ss6d9ef7e5, "isOptional")) {
        mcp.ci = &c_ReflectionParameter::ci_isoptional;
        return true;
      }
      break;
    case 29:
      HASH_GUARD_LITSTR(0x5A9CE40C0F25871DLL, NAMSTR(s_sys_ssbc590ceb, "isArray")) {
        mcp.ci = &c_ReflectionParameter::ci_isarray;
        return true;
      }
      break;
    case 31:
      HASH_GUARD_LITSTR(0x0D31D0AC229C615FLL, NAMSTR(s_sys_ssa1b87da7, "__construct")) {
        mcp.ci = &c_ReflectionParameter::ci___construct;
        return true;
      }
      break;
    default:
      break;
  }
  return c_ObjectData::os_get_call_info(mcp, hash);
}
bool c_ReflectionParameter::o_get_call_info(MethodCallPackage &mcp, int64 hash) {
  mcp.obj = this;
  return os_get_call_info(mcp, hash);
}
c_ReflectionParameter *c_ReflectionParameter::create(Variant v_func, Variant v_param) {
  CountableHelper h(this);
  init();
  t___construct(v_func, v_param);
  return this;
}
void c_ReflectionParameter::dynConstruct(CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  if (count != 2) throw_wrong_arguments("ReflectionParameter::__construct", count, 2, 2, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    (t___construct(arg0, arg1));
  }
}
void c_ReflectionParameter::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_ReflectionParameter::ci___construct;
  mcp.obj = this;
}
void c_ReflectionParameter::dynConstructFromEval(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  unsigned int i = 0;
  do {
    if (i == params.size()) break;
    a0 = params[i]->eval(env);
    i++;
    if (i == params.size()) break;
    a1 = params[i]->eval(env);
    i++;
  } while(false);
  for (; i != params.size(); ++i) {
    params[i]->eval(env);
  }
  int count __attribute__((__unused__)) = params.size();
  if (count != 2) throw_wrong_arguments("ReflectionParameter::__construct", count, 2, 2, 1);
  (t___construct(a0, a1), null);
}
struct ObjectStaticCallbacks cw_ReflectionParameter = {
  c_ReflectionParameter::os_getInit,
  c_ReflectionParameter::os_get,
  c_ReflectionParameter::os_lval,
  c_ReflectionParameter::os_invoke,
  c_ReflectionParameter::os_constant,
  c_ReflectionParameter::os_get_call_info
};
void c_ReflectionParameter::init() {
  m_info = null;
}
/* SRC: classes/reflection.php line 49 */
void c_ReflectionParameter::t___construct(Variant v_func, Variant v_param) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::__construct);
  bool oldInCtor = gasInCtor(true);
  Variant v_params;

  Variant tmp_ref;
  if ((toBoolean(v_func) && toBoolean(v_param))) {
    {
      {
        MethodCallPackage mcp0;
        CVarRef obj0 = v_func;
        mcp0.methodCall((obj0), NAMSTR(s_sys_ss1902bc14, "getParameters"), 0x3E62225132C2A32DLL);
        const CallInfo *cit0 __attribute__((__unused__)) = mcp0.ci;
        Variant tmp1(((mcp0.bindClass(fi)->getMeth0Args())(mcp0, 0)));
        v_params = tmp1;
      }
      {
        const Variant &tmp0((v_params.rvalRef(v_param, tmp_ref, AccessFlags::Error).o_getPublic(NAMSTR(s_sys_ss33988b3e, "info"), true)));
        m_info = tmp0;
        tmp_ref.unset();
      }
    }
  }
  gasInCtor(oldInCtor);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 56 */
String c_ReflectionParameter::t___tostring() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::__toString);
  return toString(null);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 75 */
Variant c_ReflectionParameter::ti_export(CStrRef cls, CVarRef v_func, CVarRef v_param, CVarRef v_ret) {
  STATIC_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::export);
  p_ReflectionParameter v_obj;
  String v_str;

  {
    p_ReflectionParameter tmp0 = NEWOBJ(c_ReflectionParameter)();
    (tmp0->create(v_func, v_param));
    v_obj = tmp0;
  }
  v_str = (toString(v_obj));
  if (toBoolean(v_ret)) {
    {
      return v_str;
    }
  }
  print(v_str);
  return null;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 93 */
Variant c_ReflectionParameter::t_getname() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::getName);
  return m_info.rvalAt(NAMSTR(s_sys_ssdc3cbddc, "name"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 108 */
Variant c_ReflectionParameter::t_ispassedbyreference() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::isPassedByReference);
  return m_info.rvalAt(NAMSTR(s_sys_ss134fd5fa, "ref"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 122 */
Variant c_ReflectionParameter::t_getdeclaringclass() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::getDeclaringClass);
  if (empty(m_info, NAMSTR(s_sys_ssc82dbd12, "class"), true)) {
    {
      return null;
    }
  }
  {
    p_ReflectionClass tmp0 = NEWOBJ(c_ReflectionClass)();
    return (tmp0->create(m_info.rvalAt(NAMSTR(s_sys_ssc82dbd12, "class"), AccessFlags::Error_Key)), tmp0);
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 139 */
Variant c_ReflectionParameter::t_getclass() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::getClass);
  if (empty(m_info, NAMSTR(s_sys_ss724a760a, "type"), true)) {
    {
      return null;
    }
  }
  {
    p_ReflectionClass tmp0 = NEWOBJ(c_ReflectionClass)();
    return (tmp0->create(m_info.rvalAt(NAMSTR(s_sys_ss724a760a, "type"), AccessFlags::Error_Key)), tmp0);
  }
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 155 */
bool c_ReflectionParameter::t_isarray() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::isArray);
  return equal(m_info.rvalAt(NAMSTR(s_sys_ss724a760a, "type"), AccessFlags::Error_Key), NAMSTR(s_sys_ss8c04b960, "array"));
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 169 */
Variant c_ReflectionParameter::t_allowsnull() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::allowsNull);
  return m_info.rvalAt(NAMSTR(s_sys_ssedd47a43, "nullable"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 182 */
bool c_ReflectionParameter::t_isoptional() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::isOptional);
  return x_array_key_exists(VarNR(NAMSTR(s_sys_ss570270cc, "default")), m_info);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 197 */
bool c_ReflectionParameter::t_isdefaultvalueavailable() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::isDefaultValueAvailable);
  return x_array_key_exists(VarNR(NAMSTR(s_sys_ss570270cc, "default")), m_info);
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 212 */
Variant c_ReflectionParameter::t_getdefaultvalue() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::getDefaultValue);
  Variant v_defaultValue;

  {
    bool tmp0;
    {
      bool tmp1((t_isoptional()));
      tmp0 = (!(tmp1));
    }
    if (tmp0) {
      {
        throw_exception(p_ReflectionException((NEWOBJ(c_ReflectionException)())->create(NAMSTR(s_sys_ss4ad0c110, "Parameter is not optional"))));
      }
    }
  }
  {
    Variant tmp0((m_info.rvalAt(NAMSTR(s_sys_ss570270cc, "default"), AccessFlags::Error_Key)));
    v_defaultValue = tmp0;
  }
  if (instanceOf(v_defaultValue, NAMSTR(s_sys_ss41c7a197, "stdclass"))) {
    {
      {
        const String &tmp0((toString(v_defaultValue.o_getPublic(NAMSTR(s_sys_ss309aefff, "msg"), true))));
        x_hphp_throw_fatal_error(tmp0);
      }
    }
  }
  return v_defaultValue;
}
namespace hphp_impl_splitter {}
/* SRC: classes/reflection.php line 233 */
Variant c_ReflectionParameter::t_getposition() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ReflectionParameter, ReflectionParameter::getPosition);
  return m_info.rvalAt(NAMSTR(s_sys_ssc0ff3081, "index"), AccessFlags::Error_Key);
}
namespace hphp_impl_splitter {}
Object co_ReflectionFunctionAbstract(CArrRef params, bool init /* = true */) {
  return Object((NEWOBJ(c_ReflectionFunctionAbstract)())->dynCreate(params, init));
}
Object coo_ReflectionFunctionAbstract() {
  Object r(NEWOBJ(c_ReflectionFunctionAbstract)());
  r->init();
  return r;
}
Object co_ReflectionObject(CArrRef params, bool init /* = true */) {
  return Object((NEWOBJ(c_ReflectionObject)())->dynCreate(params, init));
}
Object coo_ReflectionObject() {
  Object r(NEWOBJ(c_ReflectionObject)());
  r->init();
  return r;
}
Object co_ReflectionException(CArrRef params, bool init /* = true */) {
  return Object((NEWOBJ(c_ReflectionException)())->dynCreate(params, init));
}
Object coo_ReflectionException() {
  Object r(NEWOBJ(c_ReflectionException)());
  r->init();
  return r;
}
Object co_ReflectionClass(CArrRef params, bool init /* = true */) {
  return Object((NEWOBJ(c_ReflectionClass)())->dynCreate(params, init));
}
Object coo_ReflectionClass() {
  Object r(NEWOBJ(c_ReflectionClass)());
  r->init();
  return r;
}
Object co_ReflectionExtension(CArrRef params, bool init /* = true */) {
  return Object((NEWOBJ(c_ReflectionExtension)())->dynCreate(params, init));
}
Object coo_ReflectionExtension() {
  Object r(NEWOBJ(c_ReflectionExtension)());
  r->init();
  return r;
}
Object co_ReflectionMethod(CArrRef params, bool init /* = true */) {
  return Object((NEWOBJ(c_ReflectionMethod)())->dynCreate(params, init));
}
Object coo_ReflectionMethod() {
  Object r(NEWOBJ(c_ReflectionMethod)());
  r->init();
  return r;
}
Object co_ReflectionProperty(CArrRef params, bool init /* = true */) {
  return Object((NEWOBJ(c_ReflectionProperty)())->dynCreate(params, init));
}
Object coo_ReflectionProperty() {
  Object r(NEWOBJ(c_ReflectionProperty)());
  r->init();
  return r;
}
Object co_ReflectionFunction(CArrRef params, bool init /* = true */) {
  return Object((NEWOBJ(c_ReflectionFunction)())->dynCreate(params, init));
}
Object coo_ReflectionFunction() {
  Object r(NEWOBJ(c_ReflectionFunction)());
  r->init();
  return r;
}
Object co_ReflectionParameter(CArrRef params, bool init /* = true */) {
  return Object((NEWOBJ(c_ReflectionParameter)())->dynCreate(params, init));
}
Object coo_ReflectionParameter() {
  Object r(NEWOBJ(c_ReflectionParameter)());
  r->init();
  return r;
}
Variant pm_php$classes$reflection_php(bool incOnce /* = false */, LVariableTable* variables /* = NULL */, Globals *globals /* = get_globals() */) {
  PSEUDOMAIN_INJECTION_BUILTIN(run_init::classes/reflection.php, pm_php$classes$reflection_php);
  LVariableTable *gVariables __attribute__((__unused__)) = (LVariableTable *)g;
  return true;
}
namespace hphp_impl_splitter {}

///////////////////////////////////////////////////////////////////////////////
}
