#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#

from __future__ import annotations


import typing as _typing

import enum

import folly.iobuf as _fbthrift_iobuf
import thrift.python.types as _fbthrift_python_types
import thrift.python.exceptions as _fbthrift_python_exceptions

import facebook.thrift.annotation.java.thrift_types

import facebook.thrift.annotation.thrift.thrift_types


class StandardProtocol(_fbthrift_python_types.Enum, enum.Enum):
    Custom: StandardProtocol = ...
    Binary: StandardProtocol = ...
    Compact: StandardProtocol = ...
    Json: StandardProtocol = ...
    SimpleJson: StandardProtocol = ...
    def _to_python(self) -> StandardProtocol: ...
    def _to_py3(self) -> "apache.thrift.type.standard.types.StandardProtocol": ...  # type: ignore
    def _to_py_deprecated(self) -> int: ...


class Void(_fbthrift_python_types.Enum, enum.Enum):
    NoValueVoid: Void = ...
    def _to_python(self) -> Void: ...
    def _to_py3(self) -> "apache.thrift.type.standard.types.Void": ...  # type: ignore
    def _to_py_deprecated(self) -> int: ...


class UriStruct(_fbthrift_python_types.Struct):
    scheme: _typing.Final[str] = ...
    domain: _typing.Final[_typing.Sequence[str]] = ...
    path: _typing.Final[_typing.Sequence[str]] = ...
    query: _typing.Final[_typing.Mapping[str, str]] = ...
    fragment: _typing.Final[str] = ...
    def __init__(
        self, *,
        scheme: _typing.Optional[str]=...,
        domain: _typing.Optional[_typing.Sequence[str]]=...,
        path: _typing.Optional[_typing.Sequence[str]]=...,
        query: _typing.Optional[_typing.Mapping[str, str]]=...,
        fragment: _typing.Optional[str]=...
    ) -> None: ...

    def __call__(
        self, *,
        scheme: _typing.Optional[str]=...,
        domain: _typing.Optional[_typing.Sequence[str]]=...,
        path: _typing.Optional[_typing.Sequence[str]]=...,
        query: _typing.Optional[_typing.Mapping[str, str]]=...,
        fragment: _typing.Optional[str]=...
    ) -> UriStruct: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[str, _typing.Sequence[str], _typing.Sequence[str], _typing.Mapping[str, str], str]]]: ...
    def _to_python(self) -> UriStruct: ...
    def _to_py3(self) -> "apache.thrift.type.standard.types.UriStruct": ...  # type: ignore
    def _to_py_deprecated(self) -> "thrift.lib.thrift.standard.ttypes.UriStruct": ...  # type: ignore


class TypeUri(_fbthrift_python_types.Union):
    uri: _typing.Final[str] = ...
    typeHashPrefixSha2_256: _typing.Final[bytes] = ...
    def __init__(
        self, *,
        uri: _typing.Optional[str]=...,
        typeHashPrefixSha2_256: _typing.Optional[bytes]=...
    ) -> None: ...


    class Type(enum.Enum):
        EMPTY: TypeUri.Type = ...
        uri: TypeUri.Type = ...
        typeHashPrefixSha2_256: TypeUri.Type = ...

    @classmethod
    def fromValue(cls, value: _typing.Union[None, str, bytes]) -> TypeUri: ...
    value: _typing.Final[_typing.Union[None, str, bytes]]
    type: Type
    def get_type(self) -> Type:...
    def _to_python(self) -> TypeUri: ...
    def _to_py3(self) -> "apache.thrift.type.standard.types.TypeUri": ...  # type: ignore
    def _to_py_deprecated(self) -> "thrift.lib.thrift.standard.ttypes.TypeUri": ...  # type: ignore


class TypeName(_fbthrift_python_types.Union):
    boolType: _typing.Final[Void] = ...
    byteType: _typing.Final[Void] = ...
    i16Type: _typing.Final[Void] = ...
    i32Type: _typing.Final[Void] = ...
    i64Type: _typing.Final[Void] = ...
    floatType: _typing.Final[Void] = ...
    doubleType: _typing.Final[Void] = ...
    stringType: _typing.Final[Void] = ...
    binaryType: _typing.Final[Void] = ...
    enumType: _typing.Final[TypeUri] = ...
    structType: _typing.Final[TypeUri] = ...
    unionType: _typing.Final[TypeUri] = ...
    exceptionType: _typing.Final[TypeUri] = ...
    listType: _typing.Final[Void] = ...
    setType: _typing.Final[Void] = ...
    mapType: _typing.Final[Void] = ...
    def __init__(
        self, *,
        boolType: _typing.Optional[Void]=...,
        byteType: _typing.Optional[Void]=...,
        i16Type: _typing.Optional[Void]=...,
        i32Type: _typing.Optional[Void]=...,
        i64Type: _typing.Optional[Void]=...,
        floatType: _typing.Optional[Void]=...,
        doubleType: _typing.Optional[Void]=...,
        stringType: _typing.Optional[Void]=...,
        binaryType: _typing.Optional[Void]=...,
        enumType: _typing.Optional[TypeUri]=...,
        structType: _typing.Optional[TypeUri]=...,
        unionType: _typing.Optional[TypeUri]=...,
        exceptionType: _typing.Optional[TypeUri]=...,
        listType: _typing.Optional[Void]=...,
        setType: _typing.Optional[Void]=...,
        mapType: _typing.Optional[Void]=...
    ) -> None: ...


    class Type(enum.Enum):
        EMPTY: TypeName.Type = ...
        boolType: TypeName.Type = ...
        byteType: TypeName.Type = ...
        i16Type: TypeName.Type = ...
        i32Type: TypeName.Type = ...
        i64Type: TypeName.Type = ...
        floatType: TypeName.Type = ...
        doubleType: TypeName.Type = ...
        stringType: TypeName.Type = ...
        binaryType: TypeName.Type = ...
        enumType: TypeName.Type = ...
        structType: TypeName.Type = ...
        unionType: TypeName.Type = ...
        exceptionType: TypeName.Type = ...
        listType: TypeName.Type = ...
        setType: TypeName.Type = ...
        mapType: TypeName.Type = ...

    @classmethod
    def fromValue(cls, value: _typing.Union[None, Void, Void, Void, Void, Void, Void, Void, Void, Void, TypeUri, TypeUri, TypeUri, TypeUri, Void, Void, Void]) -> TypeName: ...
    value: _typing.Final[_typing.Union[None, Void, Void, Void, Void, Void, Void, Void, Void, Void, TypeUri, TypeUri, TypeUri, TypeUri, Void, Void, Void]]
    type: Type
    def get_type(self) -> Type:...
    def _to_python(self) -> TypeName: ...
    def _to_py3(self) -> "apache.thrift.type.standard.types.TypeName": ...  # type: ignore
    def _to_py_deprecated(self) -> "thrift.lib.thrift.standard.ttypes.TypeName": ...  # type: ignore


minTypeHashBytes: int = ...

defaultTypeHashBytes: int = ...

ByteString = bytes
ByteBuffer = _fbthrift_iobuf.IOBuf
Uuid = bytes
UuidString = str
Path = str
PathSegments = _typing.List[str]
Domain = str
DomainLabels = _typing.List[str]
QueryString = str
QueryArgs = _typing.Dict[str, str]
Uri = str
