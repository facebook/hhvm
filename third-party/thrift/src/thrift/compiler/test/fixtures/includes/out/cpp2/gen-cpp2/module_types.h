/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/includes/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>
#include "thrift/compiler/test/fixtures/includes/gen-cpp2/includes_types.h"

namespace apache::thrift {
namespace ident {
struct MyIncludedField;
struct MyOtherIncludedField;
struct MyIncludedInt;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_MyIncludedField
#define APACHE_THRIFT_ACCESSOR_MyIncludedField
APACHE_THRIFT_DEFINE_ACCESSOR(MyIncludedField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyOtherIncludedField
#define APACHE_THRIFT_ACCESSOR_MyOtherIncludedField
APACHE_THRIFT_DEFINE_ACCESSOR(MyOtherIncludedField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyIncludedInt
#define APACHE_THRIFT_ACCESSOR_MyIncludedInt
APACHE_THRIFT_DEFINE_ACCESSOR(MyIncludedInt);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
// END declare_enums
// BEGIN forward_declare
namespace cpp2 {
class MyStruct;
} // namespace cpp2
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;


/** Glean {"file": "thrift/compiler/test/fixtures/includes/src/module.thrift", "name": "MyStruct", "kind": "struct" } */
class MyStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 3;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::MyIncludedField,
    ::apache::thrift::ident::MyOtherIncludedField,
    ::apache::thrift::ident::MyIncludedInt
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::cpp2::Included>,
    ::apache::thrift::type::struct_t<::cpp2::Included>,
    ::apache::thrift::type::i64_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStruct() :
      __fbthrift_field_MyIncludedField(::apache::thrift::detail::make_structured_constant<::cpp2::Included>(::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::MyIntField>(static_cast<::std::int64_t>(2)), ::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::MyTransitiveField>(::cpp2::transitive_constants::ExampleFoo()))),
      __fbthrift_field_MyIncludedInt(static_cast<::cpp2::IncludedInt64>(42)) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStruct(apache::thrift::FragileConstructor, ::cpp2::Included MyIncludedField__arg, ::cpp2::Included MyOtherIncludedField__arg, ::cpp2::IncludedInt64 MyIncludedInt__arg);

  MyStruct(MyStruct&&) noexcept;

  MyStruct(const MyStruct& src);


  MyStruct& operator=(MyStruct&&) noexcept;
  MyStruct& operator=(const MyStruct& src);
 private:
  ::cpp2::Included __fbthrift_field_MyIncludedField;
 private:
  ::cpp2::Included __fbthrift_field_MyOtherIncludedField;
 private:
  ::cpp2::IncludedInt64 __fbthrift_field_MyIncludedInt;
 private:
  apache::thrift::detail::isset_bitset<3, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStruct&) const;
  bool operator<(const MyStruct&) const;

  /** Glean { "field": "MyIncludedField" } */
  template <typename..., typename fbthrift_T = ::cpp2::Included>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyIncludedField_ref() const& {
    return {this->__fbthrift_field_MyIncludedField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIncludedField" } */
  template <typename..., typename fbthrift_T = ::cpp2::Included>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyIncludedField_ref() & {
    return {this->__fbthrift_field_MyIncludedField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIncludedField" } */
  template <typename..., typename fbthrift_T = ::cpp2::Included>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyIncludedField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyIncludedField), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIncludedField" } */
  template <typename..., typename fbthrift_T = ::cpp2::Included>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyIncludedField() const& {
    return {this->__fbthrift_field_MyIncludedField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIncludedField" } */
  template <typename..., typename fbthrift_T = ::cpp2::Included>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyIncludedField() & {
    return {this->__fbthrift_field_MyIncludedField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIncludedField" } */
  template <typename..., typename fbthrift_T = ::cpp2::Included>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyIncludedField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyIncludedField), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyOtherIncludedField" } */
  template <typename..., typename fbthrift_T = ::cpp2::Included>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyOtherIncludedField_ref() const& {
    return {this->__fbthrift_field_MyOtherIncludedField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyOtherIncludedField" } */
  template <typename..., typename fbthrift_T = ::cpp2::Included>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyOtherIncludedField_ref() & {
    return {this->__fbthrift_field_MyOtherIncludedField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyOtherIncludedField" } */
  template <typename..., typename fbthrift_T = ::cpp2::Included>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyOtherIncludedField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyOtherIncludedField), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyOtherIncludedField" } */
  template <typename..., typename fbthrift_T = ::cpp2::Included>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyOtherIncludedField() const& {
    return {this->__fbthrift_field_MyOtherIncludedField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyOtherIncludedField" } */
  template <typename..., typename fbthrift_T = ::cpp2::Included>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyOtherIncludedField() & {
    return {this->__fbthrift_field_MyOtherIncludedField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyOtherIncludedField" } */
  template <typename..., typename fbthrift_T = ::cpp2::Included>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyOtherIncludedField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyOtherIncludedField), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyIncludedInt" } */
  template <typename..., typename fbthrift_T = ::cpp2::IncludedInt64>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyIncludedInt_ref() const& {
    return {this->__fbthrift_field_MyIncludedInt, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "MyIncludedInt" } */
  template <typename..., typename fbthrift_T = ::cpp2::IncludedInt64>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyIncludedInt_ref() & {
    return {this->__fbthrift_field_MyIncludedInt, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "MyIncludedInt" } */
  template <typename..., typename fbthrift_T = ::cpp2::IncludedInt64>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyIncludedInt_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyIncludedInt), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "MyIncludedInt" } */
  template <typename..., typename fbthrift_T = ::cpp2::IncludedInt64>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyIncludedInt() const& {
    return {this->__fbthrift_field_MyIncludedInt, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "MyIncludedInt" } */
  template <typename..., typename fbthrift_T = ::cpp2::IncludedInt64>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyIncludedInt() & {
    return {this->__fbthrift_field_MyIncludedInt, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "MyIncludedInt" } */
  template <typename..., typename fbthrift_T = ::cpp2::IncludedInt64>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyIncludedInt() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyIncludedInt), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "MyIncludedField" } */
  [[deprecated("Use `FOO.MyIncludedField().value()` instead of `FOO.get_MyIncludedField()`")]]
  const ::cpp2::Included& get_MyIncludedField() const&;

  /** Glean { "field": "MyIncludedField" } */
  [[deprecated("Use `FOO.MyIncludedField().value()` instead of `FOO.get_MyIncludedField()`")]]
  ::cpp2::Included get_MyIncludedField() &&;

  /** Glean { "field": "MyIncludedField" } */
  template <typename T_MyStruct_MyIncludedField_struct_setter = ::cpp2::Included>
  [[deprecated("Use `FOO.MyIncludedField() = BAR` instead of `FOO.set_MyIncludedField(BAR)`")]]
  ::cpp2::Included& set_MyIncludedField(T_MyStruct_MyIncludedField_struct_setter&& MyIncludedField_) {
    MyIncludedField_ref() = std::forward<T_MyStruct_MyIncludedField_struct_setter>(MyIncludedField_);
    return __fbthrift_field_MyIncludedField;
  }

  /** Glean { "field": "MyOtherIncludedField" } */
  [[deprecated("Use `FOO.MyOtherIncludedField().value()` instead of `FOO.get_MyOtherIncludedField()`")]]
  const ::cpp2::Included& get_MyOtherIncludedField() const&;

  /** Glean { "field": "MyOtherIncludedField" } */
  [[deprecated("Use `FOO.MyOtherIncludedField().value()` instead of `FOO.get_MyOtherIncludedField()`")]]
  ::cpp2::Included get_MyOtherIncludedField() &&;

  /** Glean { "field": "MyOtherIncludedField" } */
  template <typename T_MyStruct_MyOtherIncludedField_struct_setter = ::cpp2::Included>
  [[deprecated("Use `FOO.MyOtherIncludedField() = BAR` instead of `FOO.set_MyOtherIncludedField(BAR)`")]]
  ::cpp2::Included& set_MyOtherIncludedField(T_MyStruct_MyOtherIncludedField_struct_setter&& MyOtherIncludedField_) {
    MyOtherIncludedField_ref() = std::forward<T_MyStruct_MyOtherIncludedField_struct_setter>(MyOtherIncludedField_);
    return __fbthrift_field_MyOtherIncludedField;
  }

  /** Glean { "field": "MyIncludedInt" } */
  [[deprecated("Use `FOO.MyIncludedInt().value()` instead of `FOO.get_MyIncludedInt()`")]]
  ::cpp2::IncludedInt64 get_MyIncludedInt() const;

  /** Glean { "field": "MyIncludedInt" } */
  [[deprecated("Use `FOO.MyIncludedInt() = BAR` instead of `FOO.set_MyIncludedInt(BAR)`")]]
  ::cpp2::IncludedInt64& set_MyIncludedInt(::cpp2::IncludedInt64 MyIncludedInt_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStruct>;
  friend void swap(MyStruct& a, MyStruct& b);
};

template <class Protocol_>
unsigned long MyStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace cpp2

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::cpp2::MyStruct, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -2720716125495948740;
  static constexpr ::std::string_view definitionKey = {"\x35\x23\x28\x4d\x4f\x59\x24\x96\xe8\xb4\x63\xb3\xf7\x4b\x5c\xb2", 16};
};
} // namespace apache::thrift::detail
