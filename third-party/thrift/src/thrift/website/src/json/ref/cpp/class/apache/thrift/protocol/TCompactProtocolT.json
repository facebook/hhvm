{
  "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
  "kind": "class",
  "language": "C++",
  "prot": "public",
  "compoundname_html": "apache::thrift::protocol::TCompactProtocolT",
  "basecompoundref": [
    {
      "prot": "public",
      "virtual": "non-virtual",
      "text_html": "TVirtualProtocol&lt; TCompactProtocolT&lt; Transport_ &gt; &gt;"
    }
  ],
  "includes": {
    "refid": "TCompactProtocol_8h",
    "local": "no",
    "text_html": "TCompactProtocol.h"
  },
  "tparams": [
    {
      "type_html": "class",
      "declname_html": "Transport_",
      "defname_html": "Transport_"
    }
  ],
  "functions": [
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a61d284327ed8d20e23e85944cffdb768",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "yes",
      "inline": "yes",
      "virtual": "non-virtual",
      "type_html": "",
      "definition_html": "apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::TCompactProtocolT",
      "argsstring_html": "(std::shared_ptr&lt; Transport_ &gt; trans)",
      "name_html": "TCompactProtocolT",
      "param": [
        {
          "type_html": "std::shared_ptr&lt; Transport_ &gt;",
          "declname_html": "trans"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "80",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "80",
        "bodyend": "89"
      },
      "definition": {
        "simple_html": "TCompactProtocolT(std::shared_ptr&lt;Transport_&gt; trans)",
        "simple_raw": "TCompactProtocolT(std::shared_ptr<Transport_> trans)",
        "detailed_html": "explicit inline TCompactProtocolT(std::shared_ptr&lt;Transport_&gt; trans)",
        "detailed_raw": "explicit inline TCompactProtocolT(std::shared_ptr<Transport_> trans)",
        "original_definition_html": "apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::TCompactProtocolT",
        "original_argsstring_html": "(std::shared_ptr&lt; Transport_ &gt; trans)"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/TCompactProtocolT",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/TCompactProtocolT"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a249a0e3345475c8ded53745c91328e76",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "yes",
      "virtual": "non-virtual",
      "type_html": "",
      "definition_html": "apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::TCompactProtocolT",
      "argsstring_html": "(std::shared_ptr&lt; Transport_ &gt; trans, int32_t string_limit, int32_t container_limit)",
      "name_html": "TCompactProtocolT",
      "param": [
        {
          "type_html": "std::shared_ptr&lt; Transport_ &gt;",
          "declname_html": "trans"
        },
        {
          "type_html": "int32_t",
          "declname_html": "string_limit"
        },
        {
          "type_html": "int32_t",
          "declname_html": "container_limit"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "91",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "91",
        "bodyend": "103"
      },
      "definition": {
        "simple_html": "TCompactProtocolT(\n    std::shared_ptr&lt;Transport_&gt; trans,\n    int32_t string_limit,\n    int32_t container_limit)",
        "simple_raw": "TCompactProtocolT(\n    std::shared_ptr<Transport_> trans,\n    int32_t string_limit,\n    int32_t container_limit)",
        "detailed_html": "inline TCompactProtocolT(\n    std::shared_ptr&lt;Transport_&gt; trans,\n    int32_t string_limit,\n    int32_t container_limit)",
        "detailed_raw": "inline TCompactProtocolT(\n    std::shared_ptr<Transport_> trans,\n    int32_t string_limit,\n    int32_t container_limit)",
        "original_definition_html": "apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::TCompactProtocolT",
        "original_argsstring_html": "(std::shared_ptr&lt; Transport_ &gt; trans, int32_t string_limit, int32_t container_limit)"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/TCompactProtocolT",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/TCompactProtocolT"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a24e8f410fe839667308fbb5cc5dad633",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "yes",
      "inline": "yes",
      "virtual": "non-virtual",
      "type_html": "",
      "definition_html": "apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::TCompactProtocolT",
      "argsstring_html": "(Transport_ *trans)",
      "name_html": "TCompactProtocolT",
      "param": [
        {
          "type_html": "Transport_ *",
          "declname_html": "trans"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "111",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "111",
        "bodyend": "120"
      },
      "definition": {
        "simple_html": "TCompactProtocolT(Transport_* trans)",
        "simple_raw": "TCompactProtocolT(Transport_* trans)",
        "detailed_html": "explicit inline TCompactProtocolT(Transport_* trans)",
        "detailed_raw": "explicit inline TCompactProtocolT(Transport_* trans)",
        "original_definition_html": "apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::TCompactProtocolT",
        "original_argsstring_html": "(Transport_ *trans)"
      },
      "description": {
        "detailed_html": "<p>Construct a <code>TCompactProtocolT</code> using a raw pointer to the transport.</p><p>The caller is responsible for ensuring that the transport remains valid for the lifetime of the protocol. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/TCompactProtocolT",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/TCompactProtocolT"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a836457a50cb0156e08a03aa7c5b4fed5",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "yes",
      "virtual": "non-virtual",
      "type_html": "void",
      "definition_html": "void apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::setStringSizeLimit",
      "argsstring_html": "(int32_t string_limit)",
      "name_html": "setStringSizeLimit",
      "param": [
        {
          "type_html": "int32_t",
          "declname_html": "string_limit"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "122",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "122",
        "bodyend": "124"
      },
      "definition": {
        "simple_html": "void setStringSizeLimit(int32_t string_limit)",
        "simple_raw": "void setStringSizeLimit(int32_t string_limit)",
        "detailed_html": "inline void setStringSizeLimit(int32_t string_limit)",
        "detailed_raw": "inline void setStringSizeLimit(int32_t string_limit)",
        "original_definition_html": "void apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::setStringSizeLimit",
        "original_argsstring_html": "(int32_t string_limit)"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/setStringSizeLimit",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/setStringSizeLimit"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1abc9a72c0ecba26ccfa473c1193b3480b",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "yes",
      "virtual": "non-virtual",
      "type_html": "void",
      "definition_html": "void apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::setContainerSizeLimit",
      "argsstring_html": "(int32_t container_limit)",
      "name_html": "setContainerSizeLimit",
      "param": [
        {
          "type_html": "int32_t",
          "declname_html": "container_limit"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "126",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "126",
        "bodyend": "128"
      },
      "definition": {
        "simple_html": "void setContainerSizeLimit(int32_t container_limit)",
        "simple_raw": "void setContainerSizeLimit(int32_t container_limit)",
        "detailed_html": "inline void setContainerSizeLimit(int32_t container_limit)",
        "detailed_raw": "inline void setContainerSizeLimit(int32_t container_limit)",
        "original_definition_html": "void apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::setContainerSizeLimit",
        "original_argsstring_html": "(int32_t container_limit)"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/setContainerSizeLimit",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/setContainerSizeLimit"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a46b6bcbd685b48eeafef9332165143cf",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "yes",
      "virtual": "non-virtual",
      "type_html": "int32_t",
      "definition_html": "int32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::getStringSizeLimit",
      "argsstring_html": "()",
      "name_html": "getStringSizeLimit",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "130",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "130",
        "bodyend": "130"
      },
      "definition": {
        "simple_html": "int32_t getStringSizeLimit()",
        "simple_raw": "int32_t getStringSizeLimit()",
        "detailed_html": "inline int32_t getStringSizeLimit()",
        "detailed_raw": "inline int32_t getStringSizeLimit()",
        "original_definition_html": "int32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::getStringSizeLimit",
        "original_argsstring_html": "()"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/getStringSizeLimit",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/getStringSizeLimit"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1ac473580ab3efa8019e425cac32d3200f",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "yes",
      "virtual": "non-virtual",
      "type_html": "int32_t",
      "definition_html": "int32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::getContainerSizeLimit",
      "argsstring_html": "()",
      "name_html": "getContainerSizeLimit",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "132",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "132",
        "bodyend": "132"
      },
      "definition": {
        "simple_html": "int32_t getContainerSizeLimit()",
        "simple_raw": "int32_t getContainerSizeLimit()",
        "detailed_html": "inline int32_t getContainerSizeLimit()",
        "detailed_raw": "inline int32_t getContainerSizeLimit()",
        "original_definition_html": "int32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::getContainerSizeLimit",
        "original_argsstring_html": "()"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/getContainerSizeLimit",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/getContainerSizeLimit"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a052be595d077f9f8104861fe7c225a8f",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "yes",
      "virtual": "non-virtual",
      "type_html": "void",
      "definition_html": "void apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::setVersion",
      "argsstring_html": "(const int8_t version)",
      "name_html": "setVersion",
      "param": [
        {
          "type_html": "const int8_t",
          "declname_html": "version"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "135",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "135",
        "bodyend": "135"
      },
      "definition": {
        "simple_html": "void setVersion(const int8_t version)",
        "simple_raw": "void setVersion(const int8_t version)",
        "detailed_html": "inline void setVersion(const int8_t version)",
        "detailed_raw": "inline void setVersion(const int8_t version)",
        "original_definition_html": "void apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::setVersion",
        "original_argsstring_html": "(const int8_t version)"
      },
      "description": {
        "detailed_html": "<p>Set this if you need backwards compatibility with an old version </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/setVersion",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/setVersion"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a837f78703fea129866a091d705204ba6",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeMessageBegin",
      "argsstring_html": "(const std::string &amp;name, const TMessageType messageType, const int32_t seqid)",
      "name_html": "writeMessageBegin",
      "param": [
        {
          "type_html": "const std::string &amp;",
          "declname_html": "name"
        },
        {
          "type_html": "const TMessageType",
          "declname_html": "messageType"
        },
        {
          "type_html": "const int32_t",
          "declname_html": "seqid"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "141",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "86",
        "bodyend": "98"
      },
      "definition": {
        "simple_html": "virtual uint32_t writeMessageBegin(\n    const std::string&amp; name,\n    const TMessageType messageType,\n    const int32_t seqid)",
        "simple_raw": "virtual uint32_t writeMessageBegin(\n    const std::string& name,\n    const TMessageType messageType,\n    const int32_t seqid)",
        "detailed_html": "virtual uint32_t writeMessageBegin(\n    const std::string&amp; name,\n    const TMessageType messageType,\n    const int32_t seqid)",
        "detailed_raw": "virtual uint32_t writeMessageBegin(\n    const std::string& name,\n    const TMessageType messageType,\n    const int32_t seqid)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeMessageBegin",
        "original_argsstring_html": "(const std::string &amp;name, const TMessageType messageType, const int32_t seqid)"
      },
      "description": {
        "detailed_html": "<p>Writing functions </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeMessageBegin",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeMessageBegin"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1ad3cdf326222c12a61c82ab28c1a03610",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeStructBegin",
      "argsstring_html": "(const char *name)",
      "name_html": "writeStructBegin",
      "param": [
        {
          "type_html": "const char *",
          "declname_html": "name"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "146",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "133",
        "bodyend": "138"
      },
      "definition": {
        "simple_html": "uint32_t writeStructBegin(const char* name)",
        "simple_raw": "uint32_t writeStructBegin(const char* name)",
        "detailed_html": "uint32_t writeStructBegin(const char* name)",
        "detailed_raw": "uint32_t writeStructBegin(const char* name)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeStructBegin",
        "original_argsstring_html": "(const char *name)"
      },
      "description": {
        "detailed_html": "<p>Write a struct begin. This doesn't actually put anything on the wire. We use it as an opportunity to put special placeholder markers on the field stack so we can get the field id deltas correct. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeStructBegin",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeStructBegin"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1af6fb14f03a8437a40f60cc31293f6772",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeStructEnd",
      "argsstring_html": "()",
      "name_html": "writeStructEnd",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "148",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "146",
        "bodyend": "150"
      },
      "definition": {
        "simple_html": "uint32_t writeStructEnd()",
        "simple_raw": "uint32_t writeStructEnd()",
        "detailed_html": "uint32_t writeStructEnd()",
        "detailed_raw": "uint32_t writeStructEnd()",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeStructEnd",
        "original_argsstring_html": "()"
      },
      "description": {
        "detailed_html": "<p>Write a struct end. This doesn't actually put anything on the wire. We use this as an opportunity to pop the last field from the current struct off of the field stack. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeStructEnd",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeStructEnd"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a438999fe313d09ee064419533bab8358",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeFieldBegin",
      "argsstring_html": "(const char *name, const TType fieldType, const int16_t fieldId)",
      "name_html": "writeFieldBegin",
      "param": [
        {
          "type_html": "const char *",
          "declname_html": "name"
        },
        {
          "type_html": "const TType",
          "declname_html": "fieldType"
        },
        {
          "type_html": "const int16_t",
          "declname_html": "fieldId"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "150",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "107",
        "bodyend": "117"
      },
      "definition": {
        "simple_html": "uint32_t writeFieldBegin(\n    const char* name, const TType fieldType, const int16_t fieldId)",
        "simple_raw": "uint32_t writeFieldBegin(\n    const char* name, const TType fieldType, const int16_t fieldId)",
        "detailed_html": "uint32_t writeFieldBegin(\n    const char* name, const TType fieldType, const int16_t fieldId)",
        "detailed_raw": "uint32_t writeFieldBegin(\n    const char* name, const TType fieldType, const int16_t fieldId)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeFieldBegin",
        "original_argsstring_html": "(const char *name, const TType fieldType, const int16_t fieldId)"
      },
      "description": {
        "detailed_html": "<p>Write a field header containing the field id and field type. If the difference between the current field id and the last one is small (&lt; 15), then the field id will be encoded in the 4 MSB as a delta. Otherwise, the field id will follow the type header as a zigzag varint. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeFieldBegin",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeFieldBegin"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a7799a17bc47d3d92ac0f9a436f0ebedb",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeFieldStop",
      "argsstring_html": "()",
      "name_html": "writeFieldStop",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "153",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "123",
        "bodyend": "125"
      },
      "definition": {
        "simple_html": "uint32_t writeFieldStop()",
        "simple_raw": "uint32_t writeFieldStop()",
        "detailed_html": "uint32_t writeFieldStop()",
        "detailed_raw": "uint32_t writeFieldStop()",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeFieldStop",
        "original_argsstring_html": "()"
      },
      "description": {
        "detailed_html": "<p>Write the STOP symbol so we know there are no more fields in this struct. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeFieldStop",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeFieldStop"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1aa0b67d7f0ed472d95d9fa09ea8806bb5",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeListBegin",
      "argsstring_html": "(const TType elemType, const uint32_t size)",
      "name_html": "writeListBegin",
      "param": [
        {
          "type_html": "const TType",
          "declname_html": "elemType"
        },
        {
          "type_html": "const uint32_t",
          "declname_html": "size"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "155",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "156",
        "bodyend": "159"
      },
      "definition": {
        "simple_html": "uint32_t writeListBegin(const TType elemType, const uint32_t size)",
        "simple_raw": "uint32_t writeListBegin(const TType elemType, const uint32_t size)",
        "detailed_html": "uint32_t writeListBegin(const TType elemType, const uint32_t size)",
        "detailed_raw": "uint32_t writeListBegin(const TType elemType, const uint32_t size)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeListBegin",
        "original_argsstring_html": "(const TType elemType, const uint32_t size)"
      },
      "description": {
        "detailed_html": "<p>Write a List header. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeListBegin",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeListBegin"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1afcc7414cb9cc5b8e9606ac16e1c4ee7f",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeSetBegin",
      "argsstring_html": "(const TType elemType, const uint32_t size)",
      "name_html": "writeSetBegin",
      "param": [
        {
          "type_html": "const TType",
          "declname_html": "elemType"
        },
        {
          "type_html": "const uint32_t",
          "declname_html": "size"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "157",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "165",
        "bodyend": "168"
      },
      "definition": {
        "simple_html": "uint32_t writeSetBegin(const TType elemType, const uint32_t size)",
        "simple_raw": "uint32_t writeSetBegin(const TType elemType, const uint32_t size)",
        "detailed_html": "uint32_t writeSetBegin(const TType elemType, const uint32_t size)",
        "detailed_raw": "uint32_t writeSetBegin(const TType elemType, const uint32_t size)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeSetBegin",
        "original_argsstring_html": "(const TType elemType, const uint32_t size)"
      },
      "description": {
        "detailed_html": "<p>Write a set header. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeSetBegin",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeSetBegin"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a8948f0a0ec5c285622adec6d0c97ec66",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeMapBegin",
      "argsstring_html": "(const TType keyType, const TType valType, const uint32_t size)",
      "name_html": "writeMapBegin",
      "param": [
        {
          "type_html": "const TType",
          "declname_html": "keyType"
        },
        {
          "type_html": "const TType",
          "declname_html": "valType"
        },
        {
          "type_html": "const uint32_t",
          "declname_html": "size"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "159",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "175",
        "bodyend": "186"
      },
      "definition": {
        "simple_html": "virtual uint32_t writeMapBegin(\n    const TType keyType, const TType valType, const uint32_t size)",
        "simple_raw": "virtual uint32_t writeMapBegin(\n    const TType keyType, const TType valType, const uint32_t size)",
        "detailed_html": "virtual uint32_t writeMapBegin(\n    const TType keyType, const TType valType, const uint32_t size)",
        "detailed_raw": "virtual uint32_t writeMapBegin(\n    const TType keyType, const TType valType, const uint32_t size)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeMapBegin",
        "original_argsstring_html": "(const TType keyType, const TType valType, const uint32_t size)"
      },
      "description": {
        "detailed_html": "<p>Write a map header. If the map is empty, omit the key and value type headers, as we don't need any additional information to skip it. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeMapBegin",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeMapBegin"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a24b1aaf205bc97c728799c451319f443",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeBool",
      "argsstring_html": "(const bool value)",
      "name_html": "writeBool",
      "param": [
        {
          "type_html": "const bool",
          "declname_html": "value"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "162",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "195",
        "bodyend": "214"
      },
      "definition": {
        "simple_html": "uint32_t writeBool(const bool value)",
        "simple_raw": "uint32_t writeBool(const bool value)",
        "detailed_html": "uint32_t writeBool(const bool value)",
        "detailed_raw": "uint32_t writeBool(const bool value)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeBool",
        "original_argsstring_html": "(const bool value)"
      },
      "description": {
        "detailed_html": "<p>Write a boolean value. Potentially, this could be a boolean field, in which case the field header info isn't written yet. If so, decide what the right type header is for the value and then write the field header. Otherwise, write a single byte. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeBool",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeBool"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1ae1f32ced182dacb92aa3e2c5ae1e8ca0",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeByte",
      "argsstring_html": "(const int8_t byte)",
      "name_html": "writeByte",
      "param": [
        {
          "type_html": "const int8_t",
          "declname_html": "byte"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "164",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "217",
        "bodyend": "220"
      },
      "definition": {
        "simple_html": "uint32_t writeByte(const int8_t byte)",
        "simple_raw": "uint32_t writeByte(const int8_t byte)",
        "detailed_html": "uint32_t writeByte(const int8_t byte)",
        "detailed_raw": "uint32_t writeByte(const int8_t byte)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeByte",
        "original_argsstring_html": "(const int8_t byte)"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeByte",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeByte"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a4e5901daa7a096e3c3622371f0b4c32a",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeI16",
      "argsstring_html": "(const int16_t i16)",
      "name_html": "writeI16",
      "param": [
        {
          "type_html": "const int16_t",
          "declname_html": "i16"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "166",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "226",
        "bodyend": "228"
      },
      "definition": {
        "simple_html": "uint32_t writeI16(const int16_t i16)",
        "simple_raw": "uint32_t writeI16(const int16_t i16)",
        "detailed_html": "uint32_t writeI16(const int16_t i16)",
        "detailed_raw": "uint32_t writeI16(const int16_t i16)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeI16",
        "original_argsstring_html": "(const int16_t i16)"
      },
      "description": {
        "detailed_html": "<p>Write an i16 as a zigzag varint. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeI16",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeI16"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a0338ccf1bfa433c70af7b9ff008bad10",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeI32",
      "argsstring_html": "(const int32_t i32)",
      "name_html": "writeI32",
      "param": [
        {
          "type_html": "const int32_t",
          "declname_html": "i32"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "168",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "234",
        "bodyend": "236"
      },
      "definition": {
        "simple_html": "uint32_t writeI32(const int32_t i32)",
        "simple_raw": "uint32_t writeI32(const int32_t i32)",
        "detailed_html": "uint32_t writeI32(const int32_t i32)",
        "detailed_raw": "uint32_t writeI32(const int32_t i32)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeI32",
        "original_argsstring_html": "(const int32_t i32)"
      },
      "description": {
        "detailed_html": "<p>Write an i32 as a zigzag varint. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeI32",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeI32"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a4195f664dafe9537055c1face51dae9e",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeI64",
      "argsstring_html": "(const int64_t i64)",
      "name_html": "writeI64",
      "param": [
        {
          "type_html": "const int64_t",
          "declname_html": "i64"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "170",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "242",
        "bodyend": "244"
      },
      "definition": {
        "simple_html": "uint32_t writeI64(const int64_t i64)",
        "simple_raw": "uint32_t writeI64(const int64_t i64)",
        "detailed_html": "uint32_t writeI64(const int64_t i64)",
        "detailed_raw": "uint32_t writeI64(const int64_t i64)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeI64",
        "original_argsstring_html": "(const int64_t i64)"
      },
      "description": {
        "detailed_html": "<p>Write an i64 as a zigzag varint. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeI64",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeI64"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1aa64d8b391f232949727580815b66d2f2",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeDouble",
      "argsstring_html": "(const double dub)",
      "name_html": "writeDouble",
      "param": [
        {
          "type_html": "const double",
          "declname_html": "dub"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "172",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "250",
        "bodyend": "264"
      },
      "definition": {
        "simple_html": "uint32_t writeDouble(const double dub)",
        "simple_raw": "uint32_t writeDouble(const double dub)",
        "detailed_html": "uint32_t writeDouble(const double dub)",
        "detailed_raw": "uint32_t writeDouble(const double dub)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeDouble",
        "original_argsstring_html": "(const double dub)"
      },
      "description": {
        "detailed_html": "<p>Write a double to the wire as 8 bytes. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeDouble",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeDouble"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1adb75a3b2bf1f161ff1ce0ca0c7007281",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeFloat",
      "argsstring_html": "(const float flt)",
      "name_html": "writeFloat",
      "param": [
        {
          "type_html": "const float",
          "declname_html": "flt"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "174",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "270",
        "bodyend": "278"
      },
      "definition": {
        "simple_html": "uint32_t writeFloat(const float flt)",
        "simple_raw": "uint32_t writeFloat(const float flt)",
        "detailed_html": "uint32_t writeFloat(const float flt)",
        "detailed_raw": "uint32_t writeFloat(const float flt)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeFloat",
        "original_argsstring_html": "(const float flt)"
      },
      "description": {
        "detailed_html": "<p>Write a float to the wire as 4 bytes. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeFloat",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeFloat"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a7950be6037aed291e8b66617db142c79",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeString",
      "argsstring_html": "(const char *str)",
      "name_html": "writeString",
      "param": [
        {
          "type_html": "const char *",
          "declname_html": "str"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "176",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "284",
        "bodyend": "286"
      },
      "definition": {
        "simple_html": "uint32_t writeString(const char* str)",
        "simple_raw": "uint32_t writeString(const char* str)",
        "detailed_html": "uint32_t writeString(const char* str)",
        "detailed_raw": "uint32_t writeString(const char* str)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeString",
        "original_argsstring_html": "(const char *str)"
      },
      "description": {
        "detailed_html": "<p>Write a string to the wire with a varint size preceding. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeString",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeString"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a527ec420e3190ecaf65b98671ed37d2b",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "tparams": [
        {
          "type_html": "class String_"
        }
      ],
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeString",
      "argsstring_html": "(const String_ &amp;str)",
      "name_html": "writeString",
      "param": [
        {
          "type_html": "const String_ &amp;",
          "declname_html": "str"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "179",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "290",
        "bodyend": "292"
      },
      "definition": {
        "simple_html": "template &lt;class String_&gt;\nuint32_t writeString(const String_&amp; str)",
        "simple_raw": "template <class String_>\nuint32_t writeString(const String_& str)",
        "detailed_html": "template &lt;class String_&gt;\nuint32_t writeString(const String_&amp; str)",
        "detailed_raw": "template <class String_>\nuint32_t writeString(const String_& str)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeString",
        "original_argsstring_html": "(const String_ &amp;str)"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeString",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeString"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a4053831c21a3715eb1c63d6c9009a960",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "tparams": [
        {
          "type_html": "class String_"
        }
      ],
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeBinary",
      "argsstring_html": "(const String_ &amp;str)",
      "name_html": "writeBinary",
      "param": [
        {
          "type_html": "const String_ &amp;",
          "declname_html": "str"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "182",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "296",
        "bodyend": "301"
      },
      "definition": {
        "simple_html": "template &lt;class String_&gt;\nuint32_t writeBinary(const String_&amp; str)",
        "simple_raw": "template <class String_>\nuint32_t writeBinary(const String_& str)",
        "detailed_html": "template &lt;class String_&gt;\nuint32_t writeBinary(const String_&amp; str)",
        "detailed_raw": "template <class String_>\nuint32_t writeBinary(const String_& str)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeBinary",
        "original_argsstring_html": "(const String_ &amp;str)"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeBinary",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeBinary"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a973d841b6a14dd5da3c527e0e3c36a46",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "yes",
      "virtual": "virtual",
      "type_html": "uint32_t",
      "definition_html": "virtual uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeMessageEnd",
      "argsstring_html": "()",
      "name_html": "writeMessageEnd",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "188",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "188",
        "bodyend": "188"
      },
      "definition": {
        "simple_html": "virtual uint32_t writeMessageEnd()",
        "simple_raw": "virtual uint32_t writeMessageEnd()",
        "detailed_html": "inline virtual uint32_t writeMessageEnd()",
        "detailed_raw": "inline virtual uint32_t writeMessageEnd()",
        "original_definition_html": "virtual uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeMessageEnd",
        "original_argsstring_html": "()"
      },
      "description": {
        "detailed_html": "<p>These methods are called by structs, but don't actually have any wired output or purpose </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeMessageEnd",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeMessageEnd"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1ab941d65f6e5c870f203a80b42bd79b71",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "yes",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeMapEnd",
      "argsstring_html": "()",
      "name_html": "writeMapEnd",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "189",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "189",
        "bodyend": "189"
      },
      "definition": {
        "simple_html": "uint32_t writeMapEnd()",
        "simple_raw": "uint32_t writeMapEnd()",
        "detailed_html": "inline uint32_t writeMapEnd()",
        "detailed_raw": "inline uint32_t writeMapEnd()",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeMapEnd",
        "original_argsstring_html": "()"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeMapEnd",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeMapEnd"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1af83a04c8a2f6b89c993bab14ee2b72ca",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "yes",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeListEnd",
      "argsstring_html": "()",
      "name_html": "writeListEnd",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "190",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "190",
        "bodyend": "190"
      },
      "definition": {
        "simple_html": "uint32_t writeListEnd()",
        "simple_raw": "uint32_t writeListEnd()",
        "detailed_html": "inline uint32_t writeListEnd()",
        "detailed_raw": "inline uint32_t writeListEnd()",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeListEnd",
        "original_argsstring_html": "()"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeListEnd",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeListEnd"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a4666cd711c0fce1b8b150a6693466ad0",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "yes",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeSetEnd",
      "argsstring_html": "()",
      "name_html": "writeSetEnd",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "191",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "191",
        "bodyend": "191"
      },
      "definition": {
        "simple_html": "uint32_t writeSetEnd()",
        "simple_raw": "uint32_t writeSetEnd()",
        "detailed_html": "inline uint32_t writeSetEnd()",
        "detailed_raw": "inline uint32_t writeSetEnd()",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeSetEnd",
        "original_argsstring_html": "()"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeSetEnd",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeSetEnd"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a5d3583f0300d55abc423db117e58f0f7",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "yes",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeFieldEnd",
      "argsstring_html": "()",
      "name_html": "writeFieldEnd",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "192",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "192",
        "bodyend": "192"
      },
      "definition": {
        "simple_html": "uint32_t writeFieldEnd()",
        "simple_raw": "uint32_t writeFieldEnd()",
        "detailed_html": "inline uint32_t writeFieldEnd()",
        "detailed_raw": "inline uint32_t writeFieldEnd()",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeFieldEnd",
        "original_argsstring_html": "()"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeFieldEnd",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeFieldEnd"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a7ebe2bfe2f6d82a3b5277f0ace03a771",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readMessageBegin",
      "argsstring_html": "(std::string &amp;name, TMessageType &amp;messageType, int32_t &amp;seqid)",
      "name_html": "readMessageBegin",
      "param": [
        {
          "type_html": "std::string &amp;",
          "declname_html": "name"
        },
        {
          "type_html": "TMessageType &amp;",
          "declname_html": "messageType"
        },
        {
          "type_html": "int32_t &amp;",
          "declname_html": "seqid"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "206",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "413",
        "bodyend": "438"
      },
      "definition": {
        "simple_html": "uint32_t readMessageBegin(\n    std::string&amp; name, TMessageType&amp; messageType, int32_t&amp; seqid)",
        "simple_raw": "uint32_t readMessageBegin(\n    std::string& name, TMessageType& messageType, int32_t& seqid)",
        "detailed_html": "uint32_t readMessageBegin(\n    std::string&amp; name, TMessageType&amp; messageType, int32_t&amp; seqid)",
        "detailed_raw": "uint32_t readMessageBegin(\n    std::string& name, TMessageType& messageType, int32_t& seqid)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readMessageBegin",
        "original_argsstring_html": "(std::string &amp;name, TMessageType &amp;messageType, int32_t &amp;seqid)"
      },
      "description": {
        "detailed_html": "<p>Read a message header. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readMessageBegin",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readMessageBegin"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1ad2cb845d6a6fed690f019c4d330c3458",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readStructBegin",
      "argsstring_html": "(std::string &amp;name)",
      "name_html": "readStructBegin",
      "param": [
        {
          "type_html": "std::string &amp;",
          "declname_html": "name"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "209",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "445",
        "bodyend": "450"
      },
      "definition": {
        "simple_html": "uint32_t readStructBegin(std::string&amp; name)",
        "simple_raw": "uint32_t readStructBegin(std::string& name)",
        "detailed_html": "uint32_t readStructBegin(std::string&amp; name)",
        "detailed_raw": "uint32_t readStructBegin(std::string& name)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readStructBegin",
        "original_argsstring_html": "(std::string &amp;name)"
      },
      "description": {
        "detailed_html": "<p>Read a struct begin. There's nothing on the wire for this, but it is our opportunity to push a new struct begin marker on the field stack. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readStructBegin",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readStructBegin"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a070e4793fe7fbecb8918aee3d23b5bcf",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readStructEnd",
      "argsstring_html": "()",
      "name_html": "readStructEnd",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "211",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "457",
        "bodyend": "461"
      },
      "definition": {
        "simple_html": "uint32_t readStructEnd()",
        "simple_raw": "uint32_t readStructEnd()",
        "detailed_html": "uint32_t readStructEnd()",
        "detailed_raw": "uint32_t readStructEnd()",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readStructEnd",
        "original_argsstring_html": "()"
      },
      "description": {
        "detailed_html": "<p>Doesn't actually consume any wire data, just removes the last field for this struct from the field stack. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readStructEnd",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readStructEnd"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a94bf36118f1da0c6c6673a6cb41cab7d",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readFieldBegin",
      "argsstring_html": "(std::string &amp;name, TType &amp;fieldType, int16_t &amp;fieldId)",
      "name_html": "readFieldBegin",
      "param": [
        {
          "type_html": "std::string &amp;",
          "declname_html": "name"
        },
        {
          "type_html": "TType &amp;",
          "declname_html": "fieldType"
        },
        {
          "type_html": "int16_t &amp;",
          "declname_html": "fieldId"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "213",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "467",
        "bodyend": "507"
      },
      "definition": {
        "simple_html": "uint32_t readFieldBegin(std::string&amp; name, TType&amp; fieldType, int16_t&amp; fieldId)",
        "simple_raw": "uint32_t readFieldBegin(std::string& name, TType& fieldType, int16_t& fieldId)",
        "detailed_html": "uint32_t readFieldBegin(std::string&amp; name, TType&amp; fieldType, int16_t&amp; fieldId)",
        "detailed_raw": "uint32_t readFieldBegin(std::string& name, TType& fieldType, int16_t& fieldId)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readFieldBegin",
        "original_argsstring_html": "(std::string &amp;name, TType &amp;fieldType, int16_t &amp;fieldId)"
      },
      "description": {
        "detailed_html": "<p>Read a field header off the wire. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readFieldBegin",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readFieldBegin"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a8333b15d60dba3c92e75f999e07935a8",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readMapBegin",
      "argsstring_html": "(TType &amp;keyType, TType &amp;valType, uint32_t &amp;size, bool &amp;sizeUnknown)",
      "name_html": "readMapBegin",
      "param": [
        {
          "type_html": "TType &amp;",
          "declname_html": "keyType"
        },
        {
          "type_html": "TType &amp;",
          "declname_html": "valType"
        },
        {
          "type_html": "uint32_t &amp;",
          "declname_html": "size"
        },
        {
          "type_html": "bool &amp;",
          "declname_html": "sizeUnknown"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "216",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "515",
        "bodyend": "537"
      },
      "definition": {
        "simple_html": "uint32_t readMapBegin(\n    TType&amp; keyType, TType&amp; valType, uint32_t&amp; size, bool&amp; sizeUnknown)",
        "simple_raw": "uint32_t readMapBegin(\n    TType& keyType, TType& valType, uint32_t& size, bool& sizeUnknown)",
        "detailed_html": "uint32_t readMapBegin(\n    TType&amp; keyType, TType&amp; valType, uint32_t&amp; size, bool&amp; sizeUnknown)",
        "detailed_raw": "uint32_t readMapBegin(\n    TType& keyType, TType& valType, uint32_t& size, bool& sizeUnknown)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readMapBegin",
        "original_argsstring_html": "(TType &amp;keyType, TType &amp;valType, uint32_t &amp;size, bool &amp;sizeUnknown)"
      },
      "description": {
        "detailed_html": "<p>Read a map header off the wire. If the size is zero, skip reading the key and value type. This means that 0-length maps will yield TMaps without the \"correct\" types. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readMapBegin",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readMapBegin"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1aa0926150a2def90a33d2add4357725ef",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readListBegin",
      "argsstring_html": "(TType &amp;elemType, uint32_t &amp;size, bool &amp;sizeUnknown)",
      "name_html": "readListBegin",
      "param": [
        {
          "type_html": "TType &amp;",
          "declname_html": "elemType"
        },
        {
          "type_html": "uint32_t &amp;",
          "declname_html": "size"
        },
        {
          "type_html": "bool &amp;",
          "declname_html": "sizeUnknown"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "219",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "546",
        "bodyend": "570"
      },
      "definition": {
        "simple_html": "uint32_t readListBegin(TType&amp; elemType, uint32_t&amp; size, bool&amp; sizeUnknown)",
        "simple_raw": "uint32_t readListBegin(TType& elemType, uint32_t& size, bool& sizeUnknown)",
        "detailed_html": "uint32_t readListBegin(TType&amp; elemType, uint32_t&amp; size, bool&amp; sizeUnknown)",
        "detailed_raw": "uint32_t readListBegin(TType& elemType, uint32_t& size, bool& sizeUnknown)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readListBegin",
        "original_argsstring_html": "(TType &amp;elemType, uint32_t &amp;size, bool &amp;sizeUnknown)"
      },
      "description": {
        "detailed_html": "<p>Read a list header off the wire. If the list size is 0-14, the size will be packed into the element type header. If it's a longer list, the 4 MSB of the element type header will be 0xF, and a varint will follow with the true size. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readListBegin",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readListBegin"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1af454a9c02c1f01c662748c5e7c4b17a4",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readSetBegin",
      "argsstring_html": "(TType &amp;elemType, uint32_t &amp;size, bool &amp;sizeUnknown)",
      "name_html": "readSetBegin",
      "param": [
        {
          "type_html": "TType &amp;",
          "declname_html": "elemType"
        },
        {
          "type_html": "uint32_t &amp;",
          "declname_html": "size"
        },
        {
          "type_html": "bool &amp;",
          "declname_html": "sizeUnknown"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "221",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "579",
        "bodyend": "582"
      },
      "definition": {
        "simple_html": "uint32_t readSetBegin(TType&amp; elemType, uint32_t&amp; size, bool&amp; sizeUnknown)",
        "simple_raw": "uint32_t readSetBegin(TType& elemType, uint32_t& size, bool& sizeUnknown)",
        "detailed_html": "uint32_t readSetBegin(TType&amp; elemType, uint32_t&amp; size, bool&amp; sizeUnknown)",
        "detailed_raw": "uint32_t readSetBegin(TType& elemType, uint32_t& size, bool& sizeUnknown)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readSetBegin",
        "original_argsstring_html": "(TType &amp;elemType, uint32_t &amp;size, bool &amp;sizeUnknown)"
      },
      "description": {
        "detailed_html": "<p>Read a set header off the wire. If the set size is 0-14, the size will be packed into the element type header. If it's a longer set, the 4 MSB of the element type header will be 0xF, and a varint will follow with the true size. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readSetBegin",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readSetBegin"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1acbba818e80723698f594c15b77078fe3",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readBool",
      "argsstring_html": "(bool &amp;value)",
      "name_html": "readBool",
      "param": [
        {
          "type_html": "bool &amp;",
          "declname_html": "value"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "223",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "590",
        "bodyend": "601"
      },
      "definition": {
        "simple_html": "uint32_t readBool(bool&amp; value)",
        "simple_raw": "uint32_t readBool(bool& value)",
        "detailed_html": "uint32_t readBool(bool&amp; value)",
        "detailed_raw": "uint32_t readBool(bool& value)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readBool",
        "original_argsstring_html": "(bool &amp;value)"
      },
      "description": {
        "detailed_html": "<p>Read a boolean off the wire. If this is a boolean field, the value should already have been read during readFieldBegin, so we'll just consume the pre-stored value. Otherwise, read a byte. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readBool",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readBool"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a0d0182c0a58679f50686be187c3e8bed",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readByte",
      "argsstring_html": "(int8_t &amp;byte)",
      "name_html": "readByte",
      "param": [
        {
          "type_html": "int8_t &amp;",
          "declname_html": "byte"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "227",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "607",
        "bodyend": "612"
      },
      "definition": {
        "simple_html": "uint32_t readByte(int8_t&amp; byte)",
        "simple_raw": "uint32_t readByte(int8_t& byte)",
        "detailed_html": "uint32_t readByte(int8_t&amp; byte)",
        "detailed_raw": "uint32_t readByte(int8_t& byte)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readByte",
        "original_argsstring_html": "(int8_t &amp;byte)"
      },
      "description": {
        "detailed_html": "<p>Read a single byte off the wire. Nothing interesting here. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readByte",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readByte"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a5770d478aafac8a1221adf21359fb7a1",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readI16",
      "argsstring_html": "(int16_t &amp;i16)",
      "name_html": "readI16",
      "param": [
        {
          "type_html": "int16_t &amp;",
          "declname_html": "i16"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "229",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "618",
        "bodyend": "623"
      },
      "definition": {
        "simple_html": "uint32_t readI16(int16_t&amp; i16)",
        "simple_raw": "uint32_t readI16(int16_t& i16)",
        "detailed_html": "uint32_t readI16(int16_t&amp; i16)",
        "detailed_raw": "uint32_t readI16(int16_t& i16)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readI16",
        "original_argsstring_html": "(int16_t &amp;i16)"
      },
      "description": {
        "detailed_html": "<p>Read an i16 from the wire as a zigzag varint. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readI16",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readI16"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a4e50add6edafe31e235c71e47b222cbe",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readI32",
      "argsstring_html": "(int32_t &amp;i32)",
      "name_html": "readI32",
      "param": [
        {
          "type_html": "int32_t &amp;",
          "declname_html": "i32"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "231",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "629",
        "bodyend": "634"
      },
      "definition": {
        "simple_html": "uint32_t readI32(int32_t&amp; i32)",
        "simple_raw": "uint32_t readI32(int32_t& i32)",
        "detailed_html": "uint32_t readI32(int32_t&amp; i32)",
        "detailed_raw": "uint32_t readI32(int32_t& i32)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readI32",
        "original_argsstring_html": "(int32_t &amp;i32)"
      },
      "description": {
        "detailed_html": "<p>Read an i32 from the wire as a zigzag varint. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readI32",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readI32"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1ac64d5c6bd463d67e01aa2cce789a062b",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readI64",
      "argsstring_html": "(int64_t &amp;i64)",
      "name_html": "readI64",
      "param": [
        {
          "type_html": "int64_t &amp;",
          "declname_html": "i64"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "233",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "640",
        "bodyend": "645"
      },
      "definition": {
        "simple_html": "uint32_t readI64(int64_t&amp; i64)",
        "simple_raw": "uint32_t readI64(int64_t& i64)",
        "detailed_html": "uint32_t readI64(int64_t&amp; i64)",
        "detailed_raw": "uint32_t readI64(int64_t& i64)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readI64",
        "original_argsstring_html": "(int64_t &amp;i64)"
      },
      "description": {
        "detailed_html": "<p>Read an i64 from the wire as a zigzag varint. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readI64",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readI64"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1ae15ccd29cca63c78ec12aff35be3c7d6",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readDouble",
      "argsstring_html": "(double &amp;dub)",
      "name_html": "readDouble",
      "param": [
        {
          "type_html": "double &amp;",
          "declname_html": "dub"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "235",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "651",
        "bodyend": "667"
      },
      "definition": {
        "simple_html": "uint32_t readDouble(double&amp; dub)",
        "simple_raw": "uint32_t readDouble(double& dub)",
        "detailed_html": "uint32_t readDouble(double&amp; dub)",
        "detailed_raw": "uint32_t readDouble(double& dub)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readDouble",
        "original_argsstring_html": "(double &amp;dub)"
      },
      "description": {
        "detailed_html": "<p>No magic here - just read a double off the wire. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readDouble",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readDouble"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1abf821800d8df471505dd294e208a5623",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readFloat",
      "argsstring_html": "(float &amp;flt)",
      "name_html": "readFloat",
      "param": [
        {
          "type_html": "float &amp;",
          "declname_html": "flt"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "237",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "673",
        "bodyend": "685"
      },
      "definition": {
        "simple_html": "uint32_t readFloat(float&amp; flt)",
        "simple_raw": "uint32_t readFloat(float& flt)",
        "detailed_html": "uint32_t readFloat(float&amp; flt)",
        "detailed_raw": "uint32_t readFloat(float& flt)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readFloat",
        "original_argsstring_html": "(float &amp;flt)"
      },
      "description": {
        "detailed_html": "<p>No magic here - just read a float off the wire. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readFloat",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readFloat"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a7831d749250e5a29bc76c06a7a21b4bc",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "tparams": [
        {
          "type_html": "class String_"
        }
      ],
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readString",
      "argsstring_html": "(String_ &amp;str)",
      "name_html": "readString",
      "param": [
        {
          "type_html": "String_ &amp;",
          "declname_html": "str"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "240",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "689",
        "bodyend": "691"
      },
      "definition": {
        "simple_html": "template &lt;class String_&gt;\nuint32_t readString(String_&amp; str)",
        "simple_raw": "template <class String_>\nuint32_t readString(String_& str)",
        "detailed_html": "template &lt;class String_&gt;\nuint32_t readString(String_&amp; str)",
        "detailed_raw": "template <class String_>\nuint32_t readString(String_& str)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readString",
        "original_argsstring_html": "(String_ &amp;str)"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readString",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readString"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a476e09203dd64f965ca71d13cbedd840",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "tparams": [
        {
          "type_html": "class String_"
        }
      ],
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readBinary",
      "argsstring_html": "(String_ &amp;str)",
      "name_html": "readBinary",
      "param": [
        {
          "type_html": "String_ &amp;",
          "declname_html": "str"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "243",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "698",
        "bodyend": "739"
      },
      "definition": {
        "simple_html": "template &lt;class String_&gt;\nuint32_t readBinary(String_&amp; str)",
        "simple_raw": "template <class String_>\nuint32_t readBinary(String_& str)",
        "detailed_html": "template &lt;class String_&gt;\nuint32_t readBinary(String_&amp; str)",
        "detailed_raw": "template <class String_>\nuint32_t readBinary(String_& str)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readBinary",
        "original_argsstring_html": "(String_ &amp;str)"
      },
      "description": {
        "detailed_html": "<p>Read a byte[] from the wire. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readBinary",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readBinary"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1ac6661a11677f31a90676c961904aec1a",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "yes",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readMessageEnd",
      "argsstring_html": "()",
      "name_html": "readMessageEnd",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "249",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "249",
        "bodyend": "249"
      },
      "definition": {
        "simple_html": "uint32_t readMessageEnd()",
        "simple_raw": "uint32_t readMessageEnd()",
        "detailed_html": "inline uint32_t readMessageEnd()",
        "detailed_raw": "inline uint32_t readMessageEnd()",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readMessageEnd",
        "original_argsstring_html": "()"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readMessageEnd",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readMessageEnd"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1ac8ae8aadab13326aba9cc40dd904cd8b",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "yes",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readFieldEnd",
      "argsstring_html": "()",
      "name_html": "readFieldEnd",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "250",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "250",
        "bodyend": "250"
      },
      "definition": {
        "simple_html": "uint32_t readFieldEnd()",
        "simple_raw": "uint32_t readFieldEnd()",
        "detailed_html": "inline uint32_t readFieldEnd()",
        "detailed_raw": "inline uint32_t readFieldEnd()",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readFieldEnd",
        "original_argsstring_html": "()"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readFieldEnd",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readFieldEnd"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1ac6ac88395be8a462c6ba8dddfab0f01a",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "yes",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readMapEnd",
      "argsstring_html": "()",
      "name_html": "readMapEnd",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "251",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "251",
        "bodyend": "251"
      },
      "definition": {
        "simple_html": "uint32_t readMapEnd()",
        "simple_raw": "uint32_t readMapEnd()",
        "detailed_html": "inline uint32_t readMapEnd()",
        "detailed_raw": "inline uint32_t readMapEnd()",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readMapEnd",
        "original_argsstring_html": "()"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readMapEnd",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readMapEnd"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a0aec9b9f7debcdd5a4afdd46c1e78142",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "yes",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readListEnd",
      "argsstring_html": "()",
      "name_html": "readListEnd",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "252",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "252",
        "bodyend": "252"
      },
      "definition": {
        "simple_html": "uint32_t readListEnd()",
        "simple_raw": "uint32_t readListEnd()",
        "detailed_html": "inline uint32_t readListEnd()",
        "detailed_raw": "inline uint32_t readListEnd()",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readListEnd",
        "original_argsstring_html": "()"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readListEnd",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readListEnd"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1acbb7fd523f201b2a8aab20a3a998b465",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "yes",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readSetEnd",
      "argsstring_html": "()",
      "name_html": "readSetEnd",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "253",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "253",
        "bodyend": "253"
      },
      "definition": {
        "simple_html": "uint32_t readSetEnd()",
        "simple_raw": "uint32_t readSetEnd()",
        "detailed_html": "inline uint32_t readSetEnd()",
        "detailed_raw": "inline uint32_t readSetEnd()",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readSetEnd",
        "original_argsstring_html": "()"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readSetEnd",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readSetEnd"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a5873ae8b70505e572b85ae0b328b060b",
      "prot": "protected",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "int32_t",
      "definition_html": "int32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeFieldBeginInternal",
      "argsstring_html": "(const char *name, const TType fieldType, const int16_t fieldId, int8_t typeOverride)",
      "name_html": "writeFieldBeginInternal",
      "param": [
        {
          "type_html": "const char *",
          "declname_html": "name"
        },
        {
          "type_html": "const TType",
          "declname_html": "fieldType"
        },
        {
          "type_html": "const int16_t",
          "declname_html": "fieldId"
        },
        {
          "type_html": "int8_t",
          "declname_html": "typeOverride"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "195",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "313",
        "bodyend": "336"
      },
      "definition": {
        "simple_html": "int32_t writeFieldBeginInternal(\n    const char* name,\n    const TType fieldType,\n    const int16_t fieldId,\n    int8_t typeOverride)",
        "simple_raw": "int32_t writeFieldBeginInternal(\n    const char* name,\n    const TType fieldType,\n    const int16_t fieldId,\n    int8_t typeOverride)",
        "detailed_html": "protected int32_t writeFieldBeginInternal(\n    const char* name,\n    const TType fieldType,\n    const int16_t fieldId,\n    int8_t typeOverride)",
        "detailed_raw": "protected int32_t writeFieldBeginInternal(\n    const char* name,\n    const TType fieldType,\n    const int16_t fieldId,\n    int8_t typeOverride)",
        "original_definition_html": "int32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeFieldBeginInternal",
        "original_argsstring_html": "(const char *name, const TType fieldType, const int16_t fieldId, int8_t typeOverride)"
      },
      "description": {
        "detailed_html": "<p>The workhorse of writeFieldBegin. It has the option of doing a 'type override' of the type header. This is used specifically in the boolean field case. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeFieldBeginInternal",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeFieldBeginInternal"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a3b3abb33994e2c5f9d0a60c8a9ea1ebd",
      "prot": "protected",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeCollectionBegin",
      "argsstring_html": "(int8_t elemType, int32_t size)",
      "name_html": "writeCollectionBegin",
      "param": [
        {
          "type_html": "int8_t",
          "declname_html": "elemType"
        },
        {
          "type_html": "int32_t",
          "declname_html": "size"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "200",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "343",
        "bodyend": "353"
      },
      "definition": {
        "simple_html": "uint32_t writeCollectionBegin(int8_t elemType, int32_t size)",
        "simple_raw": "uint32_t writeCollectionBegin(int8_t elemType, int32_t size)",
        "detailed_html": "protected uint32_t writeCollectionBegin(int8_t elemType, int32_t size)",
        "detailed_raw": "protected uint32_t writeCollectionBegin(int8_t elemType, int32_t size)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeCollectionBegin",
        "original_argsstring_html": "(int8_t elemType, int32_t size)"
      },
      "description": {
        "detailed_html": "<p>Abstract method for writing the start of lists and sets. List and sets on the wire differ only by the type indicator. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeCollectionBegin",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeCollectionBegin"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a1d839601852857f74513f48d168bbb97",
      "prot": "protected",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeVarint32",
      "argsstring_html": "(uint32_t n)",
      "name_html": "writeVarint32",
      "param": [
        {
          "type_html": "uint32_t",
          "declname_html": "n"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "201",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "359",
        "bodyend": "374"
      },
      "definition": {
        "simple_html": "uint32_t writeVarint32(uint32_t n)",
        "simple_raw": "uint32_t writeVarint32(uint32_t n)",
        "detailed_html": "protected uint32_t writeVarint32(uint32_t n)",
        "detailed_raw": "protected uint32_t writeVarint32(uint32_t n)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeVarint32",
        "original_argsstring_html": "(uint32_t n)"
      },
      "description": {
        "detailed_html": "<p>Write an i32 as a varint. Results in 1-5 bytes on the wire. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeVarint32",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeVarint32"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a3869cffad977c8ac337d86fc07419e2e",
      "prot": "protected",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeVarint64",
      "argsstring_html": "(uint64_t n)",
      "name_html": "writeVarint64",
      "param": [
        {
          "type_html": "uint64_t",
          "declname_html": "n"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "202",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "380",
        "bodyend": "395"
      },
      "definition": {
        "simple_html": "uint32_t writeVarint64(uint64_t n)",
        "simple_raw": "uint32_t writeVarint64(uint64_t n)",
        "detailed_html": "protected uint32_t writeVarint64(uint64_t n)",
        "detailed_raw": "protected uint32_t writeVarint64(uint64_t n)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeVarint64",
        "original_argsstring_html": "(uint64_t n)"
      },
      "description": {
        "detailed_html": "<p>Write an i64 as a varint. Results in 1-10 bytes on the wire. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeVarint64",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeVarint64"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1addd5b5f0ceff38e4f19fda9f5a6d5de1",
      "prot": "protected",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "yes",
      "virtual": "non-virtual",
      "type_html": "int8_t",
      "definition_html": "int8_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::getCompactType",
      "argsstring_html": "(int8_t ttype)",
      "name_html": "getCompactType",
      "param": [
        {
          "type_html": "int8_t",
          "declname_html": "ttype"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "203",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "401",
        "bodyend": "403"
      },
      "definition": {
        "simple_html": "int8_t getCompactType(int8_t ttype)",
        "simple_raw": "int8_t getCompactType(int8_t ttype)",
        "detailed_html": "protected inline int8_t getCompactType(int8_t ttype)",
        "detailed_raw": "protected inline int8_t getCompactType(int8_t ttype)",
        "original_definition_html": "int8_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::getCompactType",
        "original_argsstring_html": "(int8_t ttype)"
      },
      "description": {
        "detailed_html": "<p>Given a TType value, find the appropriate <code>detail::compact::Types</code> value </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/getCompactType",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/getCompactType"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a0614b058dd88304eec79f17fc9ed4938",
      "prot": "protected",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readVarint32",
      "argsstring_html": "(int32_t &amp;i32)",
      "name_html": "readVarint32",
      "param": [
        {
          "type_html": "int32_t &amp;",
          "declname_html": "i32"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "256",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "746",
        "bodyend": "751"
      },
      "definition": {
        "simple_html": "uint32_t readVarint32(int32_t&amp; i32)",
        "simple_raw": "uint32_t readVarint32(int32_t& i32)",
        "detailed_html": "protected uint32_t readVarint32(int32_t&amp; i32)",
        "detailed_raw": "protected uint32_t readVarint32(int32_t& i32)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readVarint32",
        "original_argsstring_html": "(int32_t &amp;i32)"
      },
      "description": {
        "detailed_html": "<p>Read an i32 from the wire as a varint. The MSB of each byte is set if there is another byte to follow. This can read up to 5 bytes. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readVarint32",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readVarint32"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a4ac3fb969cac0a2099aeeaffff78838d",
      "prot": "protected",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "uint32_t",
      "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readVarint64",
      "argsstring_html": "(int64_t &amp;i64)",
      "name_html": "readVarint64",
      "param": [
        {
          "type_html": "int64_t &amp;",
          "declname_html": "i64"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "257",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "758",
        "bodyend": "837"
      },
      "definition": {
        "simple_html": "uint32_t readVarint64(int64_t&amp; i64)",
        "simple_raw": "uint32_t readVarint64(int64_t& i64)",
        "detailed_html": "protected uint32_t readVarint64(int64_t&amp; i64)",
        "detailed_raw": "protected uint32_t readVarint64(int64_t& i64)",
        "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readVarint64",
        "original_argsstring_html": "(int64_t &amp;i64)"
      },
      "description": {
        "detailed_html": "<p>Read an i64 from the wire as a proper varint. The MSB of each byte is set if there is another byte to follow. This can read up to 10 bytes. </p>"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readVarint64",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readVarint64"
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a7bfbeb3d2fa249a9c528c080a76574b6",
      "prot": "protected",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "TType",
      "definition_html": "TType apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::getTType",
      "argsstring_html": "(int8_t type)",
      "name_html": "getTType",
      "param": [
        {
          "type_html": "int8_t",
          "declname_html": "type"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "258",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
        "bodystart": "840",
        "bodyend": "874"
      },
      "definition": {
        "simple_html": "TType getTType(int8_t type)",
        "simple_raw": "TType getTType(int8_t type)",
        "detailed_html": "protected TType getTType(int8_t type)",
        "detailed_raw": "protected TType getTType(int8_t type)",
        "original_definition_html": "TType apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::getTType",
        "original_argsstring_html": "(int8_t type)"
      },
      "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/getTType",
      "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/getTType"
    }
  ],
  "location": {
    "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
    "line": "36",
    "column": "1",
    "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
    "bodystart": "35",
    "bodyend": "262"
  },
  "namespacednames_html": [
    "apache",
    "thrift",
    "protocol",
    "TCompactProtocolT"
  ],
  "enums": [],
  "types": [],
  "members": [
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1abdf43976f4bb59ac7b0909023bc7b51a",
      "prot": "public",
      "static": "yes",
      "mutable": "no",
      "type_html": "const int8_t",
      "definition_html": "const int8_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::VERSION_N",
      "argsstring_html": "",
      "name_html": "VERSION_N",
      "initializer_html": "= 2",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "38",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "38",
        "bodyend": "-1"
      }
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a3df2572b06786491c612ff309a9ec409",
      "prot": "public",
      "static": "yes",
      "mutable": "no",
      "type_html": "const int8_t",
      "definition_html": "const int8_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::VERSION_LOW",
      "argsstring_html": "",
      "name_html": "VERSION_LOW",
      "initializer_html": "= 1",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "39",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "39",
        "bodyend": "-1"
      }
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a88ac852878e1a0e998a1b0c35554777a",
      "prot": "public",
      "static": "yes",
      "mutable": "no",
      "type_html": "const int8_t",
      "definition_html": "const int8_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::VERSION_DOUBLE_BE",
      "argsstring_html": "",
      "name_html": "VERSION_DOUBLE_BE",
      "initializer_html": "= 2",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "40",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "40",
        "bodyend": "-1"
      }
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a67e66e1d4dc8c9bae7ea8187b04b7427",
      "prot": "public",
      "static": "yes",
      "mutable": "no",
      "type_html": "const int8_t",
      "definition_html": "const int8_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::PROTOCOL_ID",
      "argsstring_html": "",
      "name_html": "PROTOCOL_ID",
      "initializer_html": "= static_cast&lt;int8_t&gt;(0x82)",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "41",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "41",
        "bodyend": "-1"
      }
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1aafc520fe7485fd543be1f0cfe4ac6116",
      "prot": "public",
      "static": "yes",
      "mutable": "no",
      "type_html": "const int8_t",
      "definition_html": "const int8_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::VERSION_MASK",
      "argsstring_html": "",
      "name_html": "VERSION_MASK",
      "initializer_html": "= 0x1f",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "42",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "42",
        "bodyend": "-1"
      }
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1ab97e636a18ba9d892bb3ecadcc3ff129",
      "prot": "protected",
      "static": "yes",
      "mutable": "no",
      "type_html": "const int8_t",
      "definition_html": "const int8_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::TYPE_MASK",
      "argsstring_html": "",
      "name_html": "TYPE_MASK",
      "initializer_html": "= 0xE0",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "45",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "45",
        "bodyend": "-1"
      }
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1aa88ce405c0436578fdf275631356c135",
      "prot": "protected",
      "static": "yes",
      "mutable": "no",
      "type_html": "const int32_t",
      "definition_html": "const int32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::TYPE_SHIFT_AMOUNT",
      "argsstring_html": "",
      "name_html": "TYPE_SHIFT_AMOUNT",
      "initializer_html": "= 5",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "46",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "46",
        "bodyend": "-1"
      }
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1aafa990e5464c5b68422ea785499d14f2",
      "prot": "protected",
      "static": "yes",
      "mutable": "no",
      "type_html": "const int8_t",
      "definition_html": "const int8_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::TYPE_SHIFTED_MASK",
      "argsstring_html": "",
      "name_html": "TYPE_SHIFTED_MASK",
      "initializer_html": "= 0x07",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "47",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "47",
        "bodyend": "-1"
      }
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a56820a806687e9b72c2173335f748438",
      "prot": "protected",
      "static": "no",
      "mutable": "no",
      "type_html": "Transport_ *",
      "definition_html": "Transport_* apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::trans_",
      "argsstring_html": "",
      "name_html": "trans_",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "49",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "49",
        "bodyend": "-1"
      }
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a559d896c5056076bb39224dcc3e419f2",
      "prot": "protected",
      "static": "no",
      "mutable": "no",
      "type_html": "struct apache::thrift::protocol::TCompactProtocolT::@0",
      "definition_html": "struct apache::thrift::protocol::TCompactProtocolT::@0  apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::booleanField_",
      "argsstring_html": "",
      "name_html": "booleanField_",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "59",
        "column": "1"
      },
      "description": {
        "detailed_html": "<p>(Writing) If we encounter a boolean field begin, save the TField here so it can have the value incorporated. </p>"
      }
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1aa9408bd33c59f38cb53cd464f9103b5f",
      "prot": "protected",
      "static": "no",
      "mutable": "no",
      "type_html": "struct apache::thrift::protocol::TCompactProtocolT::@1",
      "definition_html": "struct apache::thrift::protocol::TCompactProtocolT::@1  apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::boolValue_",
      "argsstring_html": "",
      "name_html": "boolValue_",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "68",
        "column": "1"
      },
      "description": {
        "detailed_html": "<p>(Reading) If we read a field header, and it's a boolean field, save the boolean value here so that readBool can use it. </p>"
      }
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a8eca545ce5008ce9d37b347d835b5982",
      "prot": "protected",
      "static": "no",
      "mutable": "no",
      "type_html": "std::stack&lt; int16_t, folly::fbvector&lt; int16_t &gt; &gt;",
      "definition_html": "std::stack&lt;int16_t, folly::fbvector&lt;int16_t&gt; &gt; apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::lastField_",
      "argsstring_html": "",
      "name_html": "lastField_",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "75",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "75",
        "bodyend": "-1"
      },
      "description": {
        "detailed_html": "<p>Used to keep track of the last field for the current and previous structs, so we can do the delta stuff. </p>"
      }
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a51f0832d00e6263ecdb328bb3f78476d",
      "prot": "protected",
      "static": "no",
      "mutable": "no",
      "type_html": "int16_t",
      "definition_html": "int16_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::lastFieldId_",
      "argsstring_html": "",
      "name_html": "lastFieldId_",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "76",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "76",
        "bodyend": "-1"
      }
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a078a1afd325b0ccd6ce124895a66306b",
      "prot": "protected",
      "static": "no",
      "mutable": "no",
      "type_html": "int8_t",
      "definition_html": "int8_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::version_",
      "argsstring_html": "",
      "name_html": "version_",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "77",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "77",
        "bodyend": "-1"
      }
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a2738b6a925a69120e48ccff6ed8a72f9",
      "prot": "protected",
      "static": "no",
      "mutable": "no",
      "type_html": "int32_t",
      "definition_html": "int32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::string_limit_",
      "argsstring_html": "",
      "name_html": "string_limit_",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "260",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "260",
        "bodyend": "-1"
      }
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a3a9c154e5b046531ceb2f852c53a7b76",
      "prot": "protected",
      "static": "no",
      "mutable": "no",
      "type_html": "int32_t",
      "definition_html": "int32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::container_limit_",
      "argsstring_html": "",
      "name_html": "container_limit_",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "261",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "261",
        "bodyend": "-1"
      }
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a904f2091614fd7ec7c03b41a67485c66",
      "prot": "public",
      "static": "no",
      "mutable": "no",
      "type_html": "const char *",
      "definition_html": "const char* apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::name",
      "argsstring_html": "",
      "name_html": "name",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "56",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "56",
        "bodyend": "-1"
      }
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a4823c765b8d45aa48943100c9a0a1b55",
      "prot": "public",
      "static": "no",
      "mutable": "no",
      "type_html": "TType",
      "definition_html": "TType apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::fieldType",
      "argsstring_html": "",
      "name_html": "fieldType",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "57",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "57",
        "bodyend": "-1"
      }
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a84da5b29d57514db4dbe5afd5bf0f210",
      "prot": "public",
      "static": "no",
      "mutable": "no",
      "type_html": "int16_t",
      "definition_html": "int16_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::fieldId",
      "argsstring_html": "",
      "name_html": "fieldId",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "58",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "58",
        "bodyend": "-1"
      }
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a1dee577ceee908612e619757c243ec1b",
      "prot": "public",
      "static": "no",
      "mutable": "no",
      "type_html": "bool",
      "definition_html": "bool apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::hasBoolValue",
      "argsstring_html": "",
      "name_html": "hasBoolValue",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "66",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "66",
        "bodyend": "-1"
      }
    },
    {
      "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1aa8b08f16b9323f600a5a7cf66490548b",
      "prot": "public",
      "static": "no",
      "mutable": "no",
      "type_html": "bool",
      "definition_html": "bool apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::boolValue",
      "argsstring_html": "",
      "name_html": "boolValue",
      "location": {
        "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "line": "67",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
        "bodystart": "67",
        "bodyend": "-1"
      }
    }
  ],
  "friends": [],
  "declaration_raw": "template < class Transport_ >\nclass TCompactProtocolT;",
  "declaration_html": "template &lt; class Transport_ &gt;\nclass TCompactProtocolT;",
  "description": {
    "detailed_html": "<p>C++ Implementation of the Compact Protocol as described in THRIFT-110 </p>"
  },
  "filepath": "class/apache/thrift/protocol/TCompactProtocolT",
  "href": "/ref/cpp/class/apache/thrift/protocol/TCompactProtocolT",
  "overloadgroups": [
    {
      "groupname_html": "",
      "overloadsets": [
        {
          "kind": "overloadset",
          "name_html": "TCompactProtocolT",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::TCompactProtocolT",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a61d284327ed8d20e23e85944cffdb768",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "yes",
              "inline": "yes",
              "virtual": "non-virtual",
              "type_html": "",
              "definition_html": "apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::TCompactProtocolT",
              "argsstring_html": "(std::shared_ptr&lt; Transport_ &gt; trans)",
              "name_html": "TCompactProtocolT",
              "param": [
                {
                  "type_html": "std::shared_ptr&lt; Transport_ &gt;",
                  "declname_html": "trans"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "80",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "bodystart": "80",
                "bodyend": "89"
              },
              "definition": {
                "simple_html": "TCompactProtocolT(std::shared_ptr&lt;Transport_&gt; trans)",
                "simple_raw": "TCompactProtocolT(std::shared_ptr<Transport_> trans)",
                "detailed_html": "explicit inline TCompactProtocolT(std::shared_ptr&lt;Transport_&gt; trans)",
                "detailed_raw": "explicit inline TCompactProtocolT(std::shared_ptr<Transport_> trans)",
                "original_definition_html": "apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::TCompactProtocolT",
                "original_argsstring_html": "(std::shared_ptr&lt; Transport_ &gt; trans)"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/TCompactProtocolT",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/TCompactProtocolT",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "constructor": true,
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::TCompactProtocolT"
            },
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a249a0e3345475c8ded53745c91328e76",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "yes",
              "virtual": "non-virtual",
              "type_html": "",
              "definition_html": "apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::TCompactProtocolT",
              "argsstring_html": "(std::shared_ptr&lt; Transport_ &gt; trans, int32_t string_limit, int32_t container_limit)",
              "name_html": "TCompactProtocolT",
              "param": [
                {
                  "type_html": "std::shared_ptr&lt; Transport_ &gt;",
                  "declname_html": "trans"
                },
                {
                  "type_html": "int32_t",
                  "declname_html": "string_limit"
                },
                {
                  "type_html": "int32_t",
                  "declname_html": "container_limit"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "91",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "bodystart": "91",
                "bodyend": "103"
              },
              "definition": {
                "simple_html": "TCompactProtocolT(\n    std::shared_ptr&lt;Transport_&gt; trans,\n    int32_t string_limit,\n    int32_t container_limit)",
                "simple_raw": "TCompactProtocolT(\n    std::shared_ptr<Transport_> trans,\n    int32_t string_limit,\n    int32_t container_limit)",
                "detailed_html": "inline TCompactProtocolT(\n    std::shared_ptr&lt;Transport_&gt; trans,\n    int32_t string_limit,\n    int32_t container_limit)",
                "detailed_raw": "inline TCompactProtocolT(\n    std::shared_ptr<Transport_> trans,\n    int32_t string_limit,\n    int32_t container_limit)",
                "original_definition_html": "apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::TCompactProtocolT",
                "original_argsstring_html": "(std::shared_ptr&lt; Transport_ &gt; trans, int32_t string_limit, int32_t container_limit)"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/TCompactProtocolT",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/TCompactProtocolT",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "constructor": true,
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::TCompactProtocolT"
            },
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a24e8f410fe839667308fbb5cc5dad633",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "yes",
              "inline": "yes",
              "virtual": "non-virtual",
              "type_html": "",
              "definition_html": "apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::TCompactProtocolT",
              "argsstring_html": "(Transport_ *trans)",
              "name_html": "TCompactProtocolT",
              "param": [
                {
                  "type_html": "Transport_ *",
                  "declname_html": "trans"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "111",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "bodystart": "111",
                "bodyend": "120"
              },
              "definition": {
                "simple_html": "TCompactProtocolT(Transport_* trans)",
                "simple_raw": "TCompactProtocolT(Transport_* trans)",
                "detailed_html": "explicit inline TCompactProtocolT(Transport_* trans)",
                "detailed_raw": "explicit inline TCompactProtocolT(Transport_* trans)",
                "original_definition_html": "apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::TCompactProtocolT",
                "original_argsstring_html": "(Transport_ *trans)"
              },
              "description": {
                "detailed_html": "<p>Construct a <code>TCompactProtocolT</code> using a raw pointer to the transport.</p><p>The caller is responsible for ensuring that the transport remains valid for the lifetime of the protocol. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/TCompactProtocolT",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/TCompactProtocolT",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "constructor": true,
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::TCompactProtocolT"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/TCompactProtocolT",
          "minprot": "public",
          "displayname_html": "(constructor)",
          "brief_html": "Constructs the TCompactProtocolT.",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/TCompactProtocolT",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/TCompactProtocolT"
        },
        {
          "kind": "overloadset",
          "name_html": "setStringSizeLimit",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::setStringSizeLimit",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a836457a50cb0156e08a03aa7c5b4fed5",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "yes",
              "virtual": "non-virtual",
              "type_html": "void",
              "definition_html": "void apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::setStringSizeLimit",
              "argsstring_html": "(int32_t string_limit)",
              "name_html": "setStringSizeLimit",
              "param": [
                {
                  "type_html": "int32_t",
                  "declname_html": "string_limit"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "122",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "bodystart": "122",
                "bodyend": "124"
              },
              "definition": {
                "simple_html": "void setStringSizeLimit(int32_t string_limit)",
                "simple_raw": "void setStringSizeLimit(int32_t string_limit)",
                "detailed_html": "inline void setStringSizeLimit(int32_t string_limit)",
                "detailed_raw": "inline void setStringSizeLimit(int32_t string_limit)",
                "original_definition_html": "void apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::setStringSizeLimit",
                "original_argsstring_html": "(int32_t string_limit)"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/setStringSizeLimit",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/setStringSizeLimit",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::setStringSizeLimit"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/setStringSizeLimit",
          "minprot": "public",
          "displayname_html": "setStringSizeLimit",
          "brief_html": "",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/setStringSizeLimit",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/setStringSizeLimit"
        },
        {
          "kind": "overloadset",
          "name_html": "setContainerSizeLimit",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::setContainerSizeLimit",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1abc9a72c0ecba26ccfa473c1193b3480b",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "yes",
              "virtual": "non-virtual",
              "type_html": "void",
              "definition_html": "void apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::setContainerSizeLimit",
              "argsstring_html": "(int32_t container_limit)",
              "name_html": "setContainerSizeLimit",
              "param": [
                {
                  "type_html": "int32_t",
                  "declname_html": "container_limit"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "126",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "bodystart": "126",
                "bodyend": "128"
              },
              "definition": {
                "simple_html": "void setContainerSizeLimit(int32_t container_limit)",
                "simple_raw": "void setContainerSizeLimit(int32_t container_limit)",
                "detailed_html": "inline void setContainerSizeLimit(int32_t container_limit)",
                "detailed_raw": "inline void setContainerSizeLimit(int32_t container_limit)",
                "original_definition_html": "void apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::setContainerSizeLimit",
                "original_argsstring_html": "(int32_t container_limit)"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/setContainerSizeLimit",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/setContainerSizeLimit",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::setContainerSizeLimit"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/setContainerSizeLimit",
          "minprot": "public",
          "displayname_html": "setContainerSizeLimit",
          "brief_html": "",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/setContainerSizeLimit",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/setContainerSizeLimit"
        },
        {
          "kind": "overloadset",
          "name_html": "getStringSizeLimit",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::getStringSizeLimit",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a46b6bcbd685b48eeafef9332165143cf",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "yes",
              "virtual": "non-virtual",
              "type_html": "int32_t",
              "definition_html": "int32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::getStringSizeLimit",
              "argsstring_html": "()",
              "name_html": "getStringSizeLimit",
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "130",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "bodystart": "130",
                "bodyend": "130"
              },
              "definition": {
                "simple_html": "int32_t getStringSizeLimit()",
                "simple_raw": "int32_t getStringSizeLimit()",
                "detailed_html": "inline int32_t getStringSizeLimit()",
                "detailed_raw": "inline int32_t getStringSizeLimit()",
                "original_definition_html": "int32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::getStringSizeLimit",
                "original_argsstring_html": "()"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/getStringSizeLimit",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/getStringSizeLimit",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::getStringSizeLimit"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/getStringSizeLimit",
          "minprot": "public",
          "displayname_html": "getStringSizeLimit",
          "brief_html": "",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/getStringSizeLimit",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/getStringSizeLimit"
        },
        {
          "kind": "overloadset",
          "name_html": "getContainerSizeLimit",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::getContainerSizeLimit",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1ac473580ab3efa8019e425cac32d3200f",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "yes",
              "virtual": "non-virtual",
              "type_html": "int32_t",
              "definition_html": "int32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::getContainerSizeLimit",
              "argsstring_html": "()",
              "name_html": "getContainerSizeLimit",
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "132",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "bodystart": "132",
                "bodyend": "132"
              },
              "definition": {
                "simple_html": "int32_t getContainerSizeLimit()",
                "simple_raw": "int32_t getContainerSizeLimit()",
                "detailed_html": "inline int32_t getContainerSizeLimit()",
                "detailed_raw": "inline int32_t getContainerSizeLimit()",
                "original_definition_html": "int32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::getContainerSizeLimit",
                "original_argsstring_html": "()"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/getContainerSizeLimit",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/getContainerSizeLimit",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::getContainerSizeLimit"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/getContainerSizeLimit",
          "minprot": "public",
          "displayname_html": "getContainerSizeLimit",
          "brief_html": "",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/getContainerSizeLimit",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/getContainerSizeLimit"
        },
        {
          "kind": "overloadset",
          "name_html": "setVersion",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::setVersion",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a052be595d077f9f8104861fe7c225a8f",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "yes",
              "virtual": "non-virtual",
              "type_html": "void",
              "definition_html": "void apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::setVersion",
              "argsstring_html": "(const int8_t version)",
              "name_html": "setVersion",
              "param": [
                {
                  "type_html": "const int8_t",
                  "declname_html": "version"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "135",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "bodystart": "135",
                "bodyend": "135"
              },
              "definition": {
                "simple_html": "void setVersion(const int8_t version)",
                "simple_raw": "void setVersion(const int8_t version)",
                "detailed_html": "inline void setVersion(const int8_t version)",
                "detailed_raw": "inline void setVersion(const int8_t version)",
                "original_definition_html": "void apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::setVersion",
                "original_argsstring_html": "(const int8_t version)"
              },
              "description": {
                "detailed_html": "<p>Set this if you need backwards compatibility with an old version </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/setVersion",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/setVersion",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::setVersion"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/setVersion",
          "minprot": "public",
          "displayname_html": "setVersion",
          "brief_html": "<p>Set this if you need backwards compatibility with an old version </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/setVersion",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/setVersion"
        },
        {
          "kind": "overloadset",
          "name_html": "writeMessageBegin",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeMessageBegin",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a837f78703fea129866a091d705204ba6",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeMessageBegin",
              "argsstring_html": "(const std::string &amp;name, const TMessageType messageType, const int32_t seqid)",
              "name_html": "writeMessageBegin",
              "param": [
                {
                  "type_html": "const std::string &amp;",
                  "declname_html": "name"
                },
                {
                  "type_html": "const TMessageType",
                  "declname_html": "messageType"
                },
                {
                  "type_html": "const int32_t",
                  "declname_html": "seqid"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "141",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "86",
                "bodyend": "98"
              },
              "definition": {
                "simple_html": "virtual uint32_t writeMessageBegin(\n    const std::string&amp; name,\n    const TMessageType messageType,\n    const int32_t seqid)",
                "simple_raw": "virtual uint32_t writeMessageBegin(\n    const std::string& name,\n    const TMessageType messageType,\n    const int32_t seqid)",
                "detailed_html": "virtual uint32_t writeMessageBegin(\n    const std::string&amp; name,\n    const TMessageType messageType,\n    const int32_t seqid)",
                "detailed_raw": "virtual uint32_t writeMessageBegin(\n    const std::string& name,\n    const TMessageType messageType,\n    const int32_t seqid)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeMessageBegin",
                "original_argsstring_html": "(const std::string &amp;name, const TMessageType messageType, const int32_t seqid)"
              },
              "description": {
                "detailed_html": "<p>Writing functions </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeMessageBegin",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeMessageBegin",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeMessageBegin"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/writeMessageBegin",
          "minprot": "public",
          "displayname_html": "writeMessageBegin",
          "brief_html": "<p>Writing functions </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeMessageBegin",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeMessageBegin"
        },
        {
          "kind": "overloadset",
          "name_html": "writeStructBegin",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeStructBegin",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1ad3cdf326222c12a61c82ab28c1a03610",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeStructBegin",
              "argsstring_html": "(const char *name)",
              "name_html": "writeStructBegin",
              "param": [
                {
                  "type_html": "const char *",
                  "declname_html": "name"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "146",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "133",
                "bodyend": "138"
              },
              "definition": {
                "simple_html": "uint32_t writeStructBegin(const char* name)",
                "simple_raw": "uint32_t writeStructBegin(const char* name)",
                "detailed_html": "uint32_t writeStructBegin(const char* name)",
                "detailed_raw": "uint32_t writeStructBegin(const char* name)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeStructBegin",
                "original_argsstring_html": "(const char *name)"
              },
              "description": {
                "detailed_html": "<p>Write a struct begin. This doesn't actually put anything on the wire. We use it as an opportunity to put special placeholder markers on the field stack so we can get the field id deltas correct. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeStructBegin",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeStructBegin",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeStructBegin"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/writeStructBegin",
          "minprot": "public",
          "displayname_html": "writeStructBegin",
          "brief_html": "<p>Write a struct begin. This doesn't actually put anything on the wire. We use it as an opportunity to put special placeholder markers on the field stack so we can get the field id deltas correct. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeStructBegin",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeStructBegin"
        },
        {
          "kind": "overloadset",
          "name_html": "writeStructEnd",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeStructEnd",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1af6fb14f03a8437a40f60cc31293f6772",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeStructEnd",
              "argsstring_html": "()",
              "name_html": "writeStructEnd",
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "148",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "146",
                "bodyend": "150"
              },
              "definition": {
                "simple_html": "uint32_t writeStructEnd()",
                "simple_raw": "uint32_t writeStructEnd()",
                "detailed_html": "uint32_t writeStructEnd()",
                "detailed_raw": "uint32_t writeStructEnd()",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeStructEnd",
                "original_argsstring_html": "()"
              },
              "description": {
                "detailed_html": "<p>Write a struct end. This doesn't actually put anything on the wire. We use this as an opportunity to pop the last field from the current struct off of the field stack. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeStructEnd",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeStructEnd",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeStructEnd"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/writeStructEnd",
          "minprot": "public",
          "displayname_html": "writeStructEnd",
          "brief_html": "<p>Write a struct end. This doesn't actually put anything on the wire. We use this as an opportunity to pop the last field from the current struct off of the field stack. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeStructEnd",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeStructEnd"
        },
        {
          "kind": "overloadset",
          "name_html": "writeFieldBegin",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeFieldBegin",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a438999fe313d09ee064419533bab8358",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeFieldBegin",
              "argsstring_html": "(const char *name, const TType fieldType, const int16_t fieldId)",
              "name_html": "writeFieldBegin",
              "param": [
                {
                  "type_html": "const char *",
                  "declname_html": "name"
                },
                {
                  "type_html": "const TType",
                  "declname_html": "fieldType"
                },
                {
                  "type_html": "const int16_t",
                  "declname_html": "fieldId"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "150",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "107",
                "bodyend": "117"
              },
              "definition": {
                "simple_html": "uint32_t writeFieldBegin(\n    const char* name, const TType fieldType, const int16_t fieldId)",
                "simple_raw": "uint32_t writeFieldBegin(\n    const char* name, const TType fieldType, const int16_t fieldId)",
                "detailed_html": "uint32_t writeFieldBegin(\n    const char* name, const TType fieldType, const int16_t fieldId)",
                "detailed_raw": "uint32_t writeFieldBegin(\n    const char* name, const TType fieldType, const int16_t fieldId)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeFieldBegin",
                "original_argsstring_html": "(const char *name, const TType fieldType, const int16_t fieldId)"
              },
              "description": {
                "detailed_html": "<p>Write a field header containing the field id and field type. If the difference between the current field id and the last one is small (&lt; 15), then the field id will be encoded in the 4 MSB as a delta. Otherwise, the field id will follow the type header as a zigzag varint. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeFieldBegin",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeFieldBegin",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeFieldBegin"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/writeFieldBegin",
          "minprot": "public",
          "displayname_html": "writeFieldBegin",
          "brief_html": "<p>Write a field header containing the field id and field type. If the difference between the current field id and the last one is small (&lt; 15), then the field id will be encoded in the 4 MSB as a delta. Otherwise, the field id will follow the type header as a zigzag varint. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeFieldBegin",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeFieldBegin"
        },
        {
          "kind": "overloadset",
          "name_html": "writeFieldStop",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeFieldStop",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a7799a17bc47d3d92ac0f9a436f0ebedb",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeFieldStop",
              "argsstring_html": "()",
              "name_html": "writeFieldStop",
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "153",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "123",
                "bodyend": "125"
              },
              "definition": {
                "simple_html": "uint32_t writeFieldStop()",
                "simple_raw": "uint32_t writeFieldStop()",
                "detailed_html": "uint32_t writeFieldStop()",
                "detailed_raw": "uint32_t writeFieldStop()",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeFieldStop",
                "original_argsstring_html": "()"
              },
              "description": {
                "detailed_html": "<p>Write the STOP symbol so we know there are no more fields in this struct. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeFieldStop",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeFieldStop",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeFieldStop"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/writeFieldStop",
          "minprot": "public",
          "displayname_html": "writeFieldStop",
          "brief_html": "<p>Write the STOP symbol so we know there are no more fields in this struct. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeFieldStop",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeFieldStop"
        },
        {
          "kind": "overloadset",
          "name_html": "writeListBegin",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeListBegin",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1aa0b67d7f0ed472d95d9fa09ea8806bb5",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeListBegin",
              "argsstring_html": "(const TType elemType, const uint32_t size)",
              "name_html": "writeListBegin",
              "param": [
                {
                  "type_html": "const TType",
                  "declname_html": "elemType"
                },
                {
                  "type_html": "const uint32_t",
                  "declname_html": "size"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "155",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "156",
                "bodyend": "159"
              },
              "definition": {
                "simple_html": "uint32_t writeListBegin(const TType elemType, const uint32_t size)",
                "simple_raw": "uint32_t writeListBegin(const TType elemType, const uint32_t size)",
                "detailed_html": "uint32_t writeListBegin(const TType elemType, const uint32_t size)",
                "detailed_raw": "uint32_t writeListBegin(const TType elemType, const uint32_t size)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeListBegin",
                "original_argsstring_html": "(const TType elemType, const uint32_t size)"
              },
              "description": {
                "detailed_html": "<p>Write a List header. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeListBegin",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeListBegin",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeListBegin"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/writeListBegin",
          "minprot": "public",
          "displayname_html": "writeListBegin",
          "brief_html": "<p>Write a List header. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeListBegin",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeListBegin"
        },
        {
          "kind": "overloadset",
          "name_html": "writeSetBegin",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeSetBegin",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1afcc7414cb9cc5b8e9606ac16e1c4ee7f",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeSetBegin",
              "argsstring_html": "(const TType elemType, const uint32_t size)",
              "name_html": "writeSetBegin",
              "param": [
                {
                  "type_html": "const TType",
                  "declname_html": "elemType"
                },
                {
                  "type_html": "const uint32_t",
                  "declname_html": "size"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "157",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "165",
                "bodyend": "168"
              },
              "definition": {
                "simple_html": "uint32_t writeSetBegin(const TType elemType, const uint32_t size)",
                "simple_raw": "uint32_t writeSetBegin(const TType elemType, const uint32_t size)",
                "detailed_html": "uint32_t writeSetBegin(const TType elemType, const uint32_t size)",
                "detailed_raw": "uint32_t writeSetBegin(const TType elemType, const uint32_t size)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeSetBegin",
                "original_argsstring_html": "(const TType elemType, const uint32_t size)"
              },
              "description": {
                "detailed_html": "<p>Write a set header. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeSetBegin",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeSetBegin",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeSetBegin"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/writeSetBegin",
          "minprot": "public",
          "displayname_html": "writeSetBegin",
          "brief_html": "<p>Write a set header. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeSetBegin",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeSetBegin"
        },
        {
          "kind": "overloadset",
          "name_html": "writeMapBegin",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeMapBegin",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a8948f0a0ec5c285622adec6d0c97ec66",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeMapBegin",
              "argsstring_html": "(const TType keyType, const TType valType, const uint32_t size)",
              "name_html": "writeMapBegin",
              "param": [
                {
                  "type_html": "const TType",
                  "declname_html": "keyType"
                },
                {
                  "type_html": "const TType",
                  "declname_html": "valType"
                },
                {
                  "type_html": "const uint32_t",
                  "declname_html": "size"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "159",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "175",
                "bodyend": "186"
              },
              "definition": {
                "simple_html": "virtual uint32_t writeMapBegin(\n    const TType keyType, const TType valType, const uint32_t size)",
                "simple_raw": "virtual uint32_t writeMapBegin(\n    const TType keyType, const TType valType, const uint32_t size)",
                "detailed_html": "virtual uint32_t writeMapBegin(\n    const TType keyType, const TType valType, const uint32_t size)",
                "detailed_raw": "virtual uint32_t writeMapBegin(\n    const TType keyType, const TType valType, const uint32_t size)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeMapBegin",
                "original_argsstring_html": "(const TType keyType, const TType valType, const uint32_t size)"
              },
              "description": {
                "detailed_html": "<p>Write a map header. If the map is empty, omit the key and value type headers, as we don't need any additional information to skip it. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeMapBegin",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeMapBegin",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeMapBegin"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/writeMapBegin",
          "minprot": "public",
          "displayname_html": "writeMapBegin",
          "brief_html": "<p>Write a map header. If the map is empty, omit the key and value type headers, as we don't need any additional information to skip it. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeMapBegin",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeMapBegin"
        },
        {
          "kind": "overloadset",
          "name_html": "writeBool",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeBool",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a24b1aaf205bc97c728799c451319f443",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeBool",
              "argsstring_html": "(const bool value)",
              "name_html": "writeBool",
              "param": [
                {
                  "type_html": "const bool",
                  "declname_html": "value"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "162",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "195",
                "bodyend": "214"
              },
              "definition": {
                "simple_html": "uint32_t writeBool(const bool value)",
                "simple_raw": "uint32_t writeBool(const bool value)",
                "detailed_html": "uint32_t writeBool(const bool value)",
                "detailed_raw": "uint32_t writeBool(const bool value)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeBool",
                "original_argsstring_html": "(const bool value)"
              },
              "description": {
                "detailed_html": "<p>Write a boolean value. Potentially, this could be a boolean field, in which case the field header info isn't written yet. If so, decide what the right type header is for the value and then write the field header. Otherwise, write a single byte. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeBool",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeBool",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeBool"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/writeBool",
          "minprot": "public",
          "displayname_html": "writeBool",
          "brief_html": "<p>Write a boolean value. Potentially, this could be a boolean field, in which case the field header info isn't written yet. If so, decide what the right type header is for the value and then write the field header. Otherwise, write a single byte. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeBool",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeBool"
        },
        {
          "kind": "overloadset",
          "name_html": "writeByte",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeByte",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1ae1f32ced182dacb92aa3e2c5ae1e8ca0",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeByte",
              "argsstring_html": "(const int8_t byte)",
              "name_html": "writeByte",
              "param": [
                {
                  "type_html": "const int8_t",
                  "declname_html": "byte"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "164",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "217",
                "bodyend": "220"
              },
              "definition": {
                "simple_html": "uint32_t writeByte(const int8_t byte)",
                "simple_raw": "uint32_t writeByte(const int8_t byte)",
                "detailed_html": "uint32_t writeByte(const int8_t byte)",
                "detailed_raw": "uint32_t writeByte(const int8_t byte)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeByte",
                "original_argsstring_html": "(const int8_t byte)"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeByte",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeByte",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeByte"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/writeByte",
          "minprot": "public",
          "displayname_html": "writeByte",
          "brief_html": "",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeByte",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeByte"
        },
        {
          "kind": "overloadset",
          "name_html": "writeI16",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeI16",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a4e5901daa7a096e3c3622371f0b4c32a",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeI16",
              "argsstring_html": "(const int16_t i16)",
              "name_html": "writeI16",
              "param": [
                {
                  "type_html": "const int16_t",
                  "declname_html": "i16"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "166",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "226",
                "bodyend": "228"
              },
              "definition": {
                "simple_html": "uint32_t writeI16(const int16_t i16)",
                "simple_raw": "uint32_t writeI16(const int16_t i16)",
                "detailed_html": "uint32_t writeI16(const int16_t i16)",
                "detailed_raw": "uint32_t writeI16(const int16_t i16)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeI16",
                "original_argsstring_html": "(const int16_t i16)"
              },
              "description": {
                "detailed_html": "<p>Write an i16 as a zigzag varint. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeI16",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeI16",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeI16"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/writeI16",
          "minprot": "public",
          "displayname_html": "writeI16",
          "brief_html": "<p>Write an i16 as a zigzag varint. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeI16",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeI16"
        },
        {
          "kind": "overloadset",
          "name_html": "writeI32",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeI32",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a0338ccf1bfa433c70af7b9ff008bad10",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeI32",
              "argsstring_html": "(const int32_t i32)",
              "name_html": "writeI32",
              "param": [
                {
                  "type_html": "const int32_t",
                  "declname_html": "i32"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "168",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "234",
                "bodyend": "236"
              },
              "definition": {
                "simple_html": "uint32_t writeI32(const int32_t i32)",
                "simple_raw": "uint32_t writeI32(const int32_t i32)",
                "detailed_html": "uint32_t writeI32(const int32_t i32)",
                "detailed_raw": "uint32_t writeI32(const int32_t i32)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeI32",
                "original_argsstring_html": "(const int32_t i32)"
              },
              "description": {
                "detailed_html": "<p>Write an i32 as a zigzag varint. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeI32",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeI32",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeI32"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/writeI32",
          "minprot": "public",
          "displayname_html": "writeI32",
          "brief_html": "<p>Write an i32 as a zigzag varint. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeI32",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeI32"
        },
        {
          "kind": "overloadset",
          "name_html": "writeI64",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeI64",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a4195f664dafe9537055c1face51dae9e",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeI64",
              "argsstring_html": "(const int64_t i64)",
              "name_html": "writeI64",
              "param": [
                {
                  "type_html": "const int64_t",
                  "declname_html": "i64"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "170",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "242",
                "bodyend": "244"
              },
              "definition": {
                "simple_html": "uint32_t writeI64(const int64_t i64)",
                "simple_raw": "uint32_t writeI64(const int64_t i64)",
                "detailed_html": "uint32_t writeI64(const int64_t i64)",
                "detailed_raw": "uint32_t writeI64(const int64_t i64)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeI64",
                "original_argsstring_html": "(const int64_t i64)"
              },
              "description": {
                "detailed_html": "<p>Write an i64 as a zigzag varint. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeI64",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeI64",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeI64"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/writeI64",
          "minprot": "public",
          "displayname_html": "writeI64",
          "brief_html": "<p>Write an i64 as a zigzag varint. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeI64",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeI64"
        },
        {
          "kind": "overloadset",
          "name_html": "writeDouble",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeDouble",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1aa64d8b391f232949727580815b66d2f2",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeDouble",
              "argsstring_html": "(const double dub)",
              "name_html": "writeDouble",
              "param": [
                {
                  "type_html": "const double",
                  "declname_html": "dub"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "172",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "250",
                "bodyend": "264"
              },
              "definition": {
                "simple_html": "uint32_t writeDouble(const double dub)",
                "simple_raw": "uint32_t writeDouble(const double dub)",
                "detailed_html": "uint32_t writeDouble(const double dub)",
                "detailed_raw": "uint32_t writeDouble(const double dub)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeDouble",
                "original_argsstring_html": "(const double dub)"
              },
              "description": {
                "detailed_html": "<p>Write a double to the wire as 8 bytes. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeDouble",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeDouble",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeDouble"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/writeDouble",
          "minprot": "public",
          "displayname_html": "writeDouble",
          "brief_html": "<p>Write a double to the wire as 8 bytes. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeDouble",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeDouble"
        },
        {
          "kind": "overloadset",
          "name_html": "writeFloat",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeFloat",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1adb75a3b2bf1f161ff1ce0ca0c7007281",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeFloat",
              "argsstring_html": "(const float flt)",
              "name_html": "writeFloat",
              "param": [
                {
                  "type_html": "const float",
                  "declname_html": "flt"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "174",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "270",
                "bodyend": "278"
              },
              "definition": {
                "simple_html": "uint32_t writeFloat(const float flt)",
                "simple_raw": "uint32_t writeFloat(const float flt)",
                "detailed_html": "uint32_t writeFloat(const float flt)",
                "detailed_raw": "uint32_t writeFloat(const float flt)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeFloat",
                "original_argsstring_html": "(const float flt)"
              },
              "description": {
                "detailed_html": "<p>Write a float to the wire as 4 bytes. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeFloat",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeFloat",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeFloat"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/writeFloat",
          "minprot": "public",
          "displayname_html": "writeFloat",
          "brief_html": "<p>Write a float to the wire as 4 bytes. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeFloat",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeFloat"
        },
        {
          "kind": "overloadset",
          "name_html": "writeString",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeString",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a7950be6037aed291e8b66617db142c79",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeString",
              "argsstring_html": "(const char *str)",
              "name_html": "writeString",
              "param": [
                {
                  "type_html": "const char *",
                  "declname_html": "str"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "176",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "284",
                "bodyend": "286"
              },
              "definition": {
                "simple_html": "uint32_t writeString(const char* str)",
                "simple_raw": "uint32_t writeString(const char* str)",
                "detailed_html": "uint32_t writeString(const char* str)",
                "detailed_raw": "uint32_t writeString(const char* str)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeString",
                "original_argsstring_html": "(const char *str)"
              },
              "description": {
                "detailed_html": "<p>Write a string to the wire with a varint size preceding. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeString",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeString",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeString"
            },
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a527ec420e3190ecaf65b98671ed37d2b",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "tparams": [
                {
                  "type_html": "class String_"
                }
              ],
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeString",
              "argsstring_html": "(const String_ &amp;str)",
              "name_html": "writeString",
              "param": [
                {
                  "type_html": "const String_ &amp;",
                  "declname_html": "str"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "179",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "290",
                "bodyend": "292"
              },
              "definition": {
                "simple_html": "template &lt;class String_&gt;\nuint32_t writeString(const String_&amp; str)",
                "simple_raw": "template <class String_>\nuint32_t writeString(const String_& str)",
                "detailed_html": "template &lt;class String_&gt;\nuint32_t writeString(const String_&amp; str)",
                "detailed_raw": "template <class String_>\nuint32_t writeString(const String_& str)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeString",
                "original_argsstring_html": "(const String_ &amp;str)"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeString",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeString",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeString"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/writeString",
          "minprot": "public",
          "displayname_html": "writeString",
          "brief_html": "<p>Write a string to the wire with a varint size preceding. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeString",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeString"
        },
        {
          "kind": "overloadset",
          "name_html": "writeBinary",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeBinary",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a4053831c21a3715eb1c63d6c9009a960",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "tparams": [
                {
                  "type_html": "class String_"
                }
              ],
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeBinary",
              "argsstring_html": "(const String_ &amp;str)",
              "name_html": "writeBinary",
              "param": [
                {
                  "type_html": "const String_ &amp;",
                  "declname_html": "str"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "182",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "296",
                "bodyend": "301"
              },
              "definition": {
                "simple_html": "template &lt;class String_&gt;\nuint32_t writeBinary(const String_&amp; str)",
                "simple_raw": "template <class String_>\nuint32_t writeBinary(const String_& str)",
                "detailed_html": "template &lt;class String_&gt;\nuint32_t writeBinary(const String_&amp; str)",
                "detailed_raw": "template <class String_>\nuint32_t writeBinary(const String_& str)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeBinary",
                "original_argsstring_html": "(const String_ &amp;str)"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeBinary",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeBinary",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeBinary"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/writeBinary",
          "minprot": "public",
          "displayname_html": "writeBinary",
          "brief_html": "",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeBinary",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeBinary"
        },
        {
          "kind": "overloadset",
          "name_html": "writeMessageEnd",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeMessageEnd",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a973d841b6a14dd5da3c527e0e3c36a46",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "yes",
              "virtual": "virtual",
              "type_html": "uint32_t",
              "definition_html": "virtual uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeMessageEnd",
              "argsstring_html": "()",
              "name_html": "writeMessageEnd",
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "188",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "bodystart": "188",
                "bodyend": "188"
              },
              "definition": {
                "simple_html": "virtual uint32_t writeMessageEnd()",
                "simple_raw": "virtual uint32_t writeMessageEnd()",
                "detailed_html": "inline virtual uint32_t writeMessageEnd()",
                "detailed_raw": "inline virtual uint32_t writeMessageEnd()",
                "original_definition_html": "virtual uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeMessageEnd",
                "original_argsstring_html": "()"
              },
              "description": {
                "detailed_html": "<p>These methods are called by structs, but don't actually have any wired output or purpose </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeMessageEnd",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeMessageEnd",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeMessageEnd"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/writeMessageEnd",
          "minprot": "public",
          "displayname_html": "writeMessageEnd",
          "brief_html": "<p>These methods are called by structs, but don't actually have any wired output or purpose </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeMessageEnd",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeMessageEnd"
        },
        {
          "kind": "overloadset",
          "name_html": "writeMapEnd",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeMapEnd",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1ab941d65f6e5c870f203a80b42bd79b71",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "yes",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeMapEnd",
              "argsstring_html": "()",
              "name_html": "writeMapEnd",
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "189",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "bodystart": "189",
                "bodyend": "189"
              },
              "definition": {
                "simple_html": "uint32_t writeMapEnd()",
                "simple_raw": "uint32_t writeMapEnd()",
                "detailed_html": "inline uint32_t writeMapEnd()",
                "detailed_raw": "inline uint32_t writeMapEnd()",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeMapEnd",
                "original_argsstring_html": "()"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeMapEnd",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeMapEnd",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeMapEnd"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/writeMapEnd",
          "minprot": "public",
          "displayname_html": "writeMapEnd",
          "brief_html": "",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeMapEnd",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeMapEnd"
        },
        {
          "kind": "overloadset",
          "name_html": "writeListEnd",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeListEnd",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1af83a04c8a2f6b89c993bab14ee2b72ca",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "yes",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeListEnd",
              "argsstring_html": "()",
              "name_html": "writeListEnd",
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "190",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "bodystart": "190",
                "bodyend": "190"
              },
              "definition": {
                "simple_html": "uint32_t writeListEnd()",
                "simple_raw": "uint32_t writeListEnd()",
                "detailed_html": "inline uint32_t writeListEnd()",
                "detailed_raw": "inline uint32_t writeListEnd()",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeListEnd",
                "original_argsstring_html": "()"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeListEnd",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeListEnd",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeListEnd"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/writeListEnd",
          "minprot": "public",
          "displayname_html": "writeListEnd",
          "brief_html": "",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeListEnd",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeListEnd"
        },
        {
          "kind": "overloadset",
          "name_html": "writeSetEnd",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeSetEnd",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a4666cd711c0fce1b8b150a6693466ad0",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "yes",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeSetEnd",
              "argsstring_html": "()",
              "name_html": "writeSetEnd",
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "191",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "bodystart": "191",
                "bodyend": "191"
              },
              "definition": {
                "simple_html": "uint32_t writeSetEnd()",
                "simple_raw": "uint32_t writeSetEnd()",
                "detailed_html": "inline uint32_t writeSetEnd()",
                "detailed_raw": "inline uint32_t writeSetEnd()",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeSetEnd",
                "original_argsstring_html": "()"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeSetEnd",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeSetEnd",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeSetEnd"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/writeSetEnd",
          "minprot": "public",
          "displayname_html": "writeSetEnd",
          "brief_html": "",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeSetEnd",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeSetEnd"
        },
        {
          "kind": "overloadset",
          "name_html": "writeFieldEnd",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeFieldEnd",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a5d3583f0300d55abc423db117e58f0f7",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "yes",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeFieldEnd",
              "argsstring_html": "()",
              "name_html": "writeFieldEnd",
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "192",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "bodystart": "192",
                "bodyend": "192"
              },
              "definition": {
                "simple_html": "uint32_t writeFieldEnd()",
                "simple_raw": "uint32_t writeFieldEnd()",
                "detailed_html": "inline uint32_t writeFieldEnd()",
                "detailed_raw": "inline uint32_t writeFieldEnd()",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeFieldEnd",
                "original_argsstring_html": "()"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeFieldEnd",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeFieldEnd",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeFieldEnd"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/writeFieldEnd",
          "minprot": "public",
          "displayname_html": "writeFieldEnd",
          "brief_html": "",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeFieldEnd",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeFieldEnd"
        },
        {
          "kind": "overloadset",
          "name_html": "readMessageBegin",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readMessageBegin",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a7ebe2bfe2f6d82a3b5277f0ace03a771",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readMessageBegin",
              "argsstring_html": "(std::string &amp;name, TMessageType &amp;messageType, int32_t &amp;seqid)",
              "name_html": "readMessageBegin",
              "param": [
                {
                  "type_html": "std::string &amp;",
                  "declname_html": "name"
                },
                {
                  "type_html": "TMessageType &amp;",
                  "declname_html": "messageType"
                },
                {
                  "type_html": "int32_t &amp;",
                  "declname_html": "seqid"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "206",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "413",
                "bodyend": "438"
              },
              "definition": {
                "simple_html": "uint32_t readMessageBegin(\n    std::string&amp; name, TMessageType&amp; messageType, int32_t&amp; seqid)",
                "simple_raw": "uint32_t readMessageBegin(\n    std::string& name, TMessageType& messageType, int32_t& seqid)",
                "detailed_html": "uint32_t readMessageBegin(\n    std::string&amp; name, TMessageType&amp; messageType, int32_t&amp; seqid)",
                "detailed_raw": "uint32_t readMessageBegin(\n    std::string& name, TMessageType& messageType, int32_t& seqid)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readMessageBegin",
                "original_argsstring_html": "(std::string &amp;name, TMessageType &amp;messageType, int32_t &amp;seqid)"
              },
              "description": {
                "detailed_html": "<p>Read a message header. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readMessageBegin",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readMessageBegin",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readMessageBegin"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/readMessageBegin",
          "minprot": "public",
          "displayname_html": "readMessageBegin",
          "brief_html": "<p>Read a message header. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readMessageBegin",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readMessageBegin"
        },
        {
          "kind": "overloadset",
          "name_html": "readStructBegin",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readStructBegin",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1ad2cb845d6a6fed690f019c4d330c3458",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readStructBegin",
              "argsstring_html": "(std::string &amp;name)",
              "name_html": "readStructBegin",
              "param": [
                {
                  "type_html": "std::string &amp;",
                  "declname_html": "name"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "209",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "445",
                "bodyend": "450"
              },
              "definition": {
                "simple_html": "uint32_t readStructBegin(std::string&amp; name)",
                "simple_raw": "uint32_t readStructBegin(std::string& name)",
                "detailed_html": "uint32_t readStructBegin(std::string&amp; name)",
                "detailed_raw": "uint32_t readStructBegin(std::string& name)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readStructBegin",
                "original_argsstring_html": "(std::string &amp;name)"
              },
              "description": {
                "detailed_html": "<p>Read a struct begin. There's nothing on the wire for this, but it is our opportunity to push a new struct begin marker on the field stack. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readStructBegin",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readStructBegin",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readStructBegin"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/readStructBegin",
          "minprot": "public",
          "displayname_html": "readStructBegin",
          "brief_html": "<p>Read a struct begin. There's nothing on the wire for this, but it is our opportunity to push a new struct begin marker on the field stack. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readStructBegin",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readStructBegin"
        },
        {
          "kind": "overloadset",
          "name_html": "readStructEnd",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readStructEnd",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a070e4793fe7fbecb8918aee3d23b5bcf",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readStructEnd",
              "argsstring_html": "()",
              "name_html": "readStructEnd",
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "211",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "457",
                "bodyend": "461"
              },
              "definition": {
                "simple_html": "uint32_t readStructEnd()",
                "simple_raw": "uint32_t readStructEnd()",
                "detailed_html": "uint32_t readStructEnd()",
                "detailed_raw": "uint32_t readStructEnd()",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readStructEnd",
                "original_argsstring_html": "()"
              },
              "description": {
                "detailed_html": "<p>Doesn't actually consume any wire data, just removes the last field for this struct from the field stack. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readStructEnd",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readStructEnd",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readStructEnd"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/readStructEnd",
          "minprot": "public",
          "displayname_html": "readStructEnd",
          "brief_html": "<p>Doesn't actually consume any wire data, just removes the last field for this struct from the field stack. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readStructEnd",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readStructEnd"
        },
        {
          "kind": "overloadset",
          "name_html": "readFieldBegin",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readFieldBegin",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a94bf36118f1da0c6c6673a6cb41cab7d",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readFieldBegin",
              "argsstring_html": "(std::string &amp;name, TType &amp;fieldType, int16_t &amp;fieldId)",
              "name_html": "readFieldBegin",
              "param": [
                {
                  "type_html": "std::string &amp;",
                  "declname_html": "name"
                },
                {
                  "type_html": "TType &amp;",
                  "declname_html": "fieldType"
                },
                {
                  "type_html": "int16_t &amp;",
                  "declname_html": "fieldId"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "213",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "467",
                "bodyend": "507"
              },
              "definition": {
                "simple_html": "uint32_t readFieldBegin(std::string&amp; name, TType&amp; fieldType, int16_t&amp; fieldId)",
                "simple_raw": "uint32_t readFieldBegin(std::string& name, TType& fieldType, int16_t& fieldId)",
                "detailed_html": "uint32_t readFieldBegin(std::string&amp; name, TType&amp; fieldType, int16_t&amp; fieldId)",
                "detailed_raw": "uint32_t readFieldBegin(std::string& name, TType& fieldType, int16_t& fieldId)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readFieldBegin",
                "original_argsstring_html": "(std::string &amp;name, TType &amp;fieldType, int16_t &amp;fieldId)"
              },
              "description": {
                "detailed_html": "<p>Read a field header off the wire. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readFieldBegin",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readFieldBegin",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readFieldBegin"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/readFieldBegin",
          "minprot": "public",
          "displayname_html": "readFieldBegin",
          "brief_html": "<p>Read a field header off the wire. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readFieldBegin",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readFieldBegin"
        },
        {
          "kind": "overloadset",
          "name_html": "readMapBegin",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readMapBegin",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a8333b15d60dba3c92e75f999e07935a8",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readMapBegin",
              "argsstring_html": "(TType &amp;keyType, TType &amp;valType, uint32_t &amp;size, bool &amp;sizeUnknown)",
              "name_html": "readMapBegin",
              "param": [
                {
                  "type_html": "TType &amp;",
                  "declname_html": "keyType"
                },
                {
                  "type_html": "TType &amp;",
                  "declname_html": "valType"
                },
                {
                  "type_html": "uint32_t &amp;",
                  "declname_html": "size"
                },
                {
                  "type_html": "bool &amp;",
                  "declname_html": "sizeUnknown"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "216",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "515",
                "bodyend": "537"
              },
              "definition": {
                "simple_html": "uint32_t readMapBegin(\n    TType&amp; keyType, TType&amp; valType, uint32_t&amp; size, bool&amp; sizeUnknown)",
                "simple_raw": "uint32_t readMapBegin(\n    TType& keyType, TType& valType, uint32_t& size, bool& sizeUnknown)",
                "detailed_html": "uint32_t readMapBegin(\n    TType&amp; keyType, TType&amp; valType, uint32_t&amp; size, bool&amp; sizeUnknown)",
                "detailed_raw": "uint32_t readMapBegin(\n    TType& keyType, TType& valType, uint32_t& size, bool& sizeUnknown)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readMapBegin",
                "original_argsstring_html": "(TType &amp;keyType, TType &amp;valType, uint32_t &amp;size, bool &amp;sizeUnknown)"
              },
              "description": {
                "detailed_html": "<p>Read a map header off the wire. If the size is zero, skip reading the key and value type. This means that 0-length maps will yield TMaps without the \"correct\" types. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readMapBegin",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readMapBegin",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readMapBegin"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/readMapBegin",
          "minprot": "public",
          "displayname_html": "readMapBegin",
          "brief_html": "<p>Read a map header off the wire. If the size is zero, skip reading the key and value type. This means that 0-length maps will yield TMaps without the \"correct\" types. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readMapBegin",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readMapBegin"
        },
        {
          "kind": "overloadset",
          "name_html": "readListBegin",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readListBegin",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1aa0926150a2def90a33d2add4357725ef",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readListBegin",
              "argsstring_html": "(TType &amp;elemType, uint32_t &amp;size, bool &amp;sizeUnknown)",
              "name_html": "readListBegin",
              "param": [
                {
                  "type_html": "TType &amp;",
                  "declname_html": "elemType"
                },
                {
                  "type_html": "uint32_t &amp;",
                  "declname_html": "size"
                },
                {
                  "type_html": "bool &amp;",
                  "declname_html": "sizeUnknown"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "219",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "546",
                "bodyend": "570"
              },
              "definition": {
                "simple_html": "uint32_t readListBegin(TType&amp; elemType, uint32_t&amp; size, bool&amp; sizeUnknown)",
                "simple_raw": "uint32_t readListBegin(TType& elemType, uint32_t& size, bool& sizeUnknown)",
                "detailed_html": "uint32_t readListBegin(TType&amp; elemType, uint32_t&amp; size, bool&amp; sizeUnknown)",
                "detailed_raw": "uint32_t readListBegin(TType& elemType, uint32_t& size, bool& sizeUnknown)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readListBegin",
                "original_argsstring_html": "(TType &amp;elemType, uint32_t &amp;size, bool &amp;sizeUnknown)"
              },
              "description": {
                "detailed_html": "<p>Read a list header off the wire. If the list size is 0-14, the size will be packed into the element type header. If it's a longer list, the 4 MSB of the element type header will be 0xF, and a varint will follow with the true size. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readListBegin",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readListBegin",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readListBegin"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/readListBegin",
          "minprot": "public",
          "displayname_html": "readListBegin",
          "brief_html": "<p>Read a list header off the wire. If the list size is 0-14, the size will be packed into the element type header. If it's a longer list, the 4 MSB of the element type header will be 0xF, and a varint will follow with the true size. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readListBegin",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readListBegin"
        },
        {
          "kind": "overloadset",
          "name_html": "readSetBegin",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readSetBegin",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1af454a9c02c1f01c662748c5e7c4b17a4",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readSetBegin",
              "argsstring_html": "(TType &amp;elemType, uint32_t &amp;size, bool &amp;sizeUnknown)",
              "name_html": "readSetBegin",
              "param": [
                {
                  "type_html": "TType &amp;",
                  "declname_html": "elemType"
                },
                {
                  "type_html": "uint32_t &amp;",
                  "declname_html": "size"
                },
                {
                  "type_html": "bool &amp;",
                  "declname_html": "sizeUnknown"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "221",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "579",
                "bodyend": "582"
              },
              "definition": {
                "simple_html": "uint32_t readSetBegin(TType&amp; elemType, uint32_t&amp; size, bool&amp; sizeUnknown)",
                "simple_raw": "uint32_t readSetBegin(TType& elemType, uint32_t& size, bool& sizeUnknown)",
                "detailed_html": "uint32_t readSetBegin(TType&amp; elemType, uint32_t&amp; size, bool&amp; sizeUnknown)",
                "detailed_raw": "uint32_t readSetBegin(TType& elemType, uint32_t& size, bool& sizeUnknown)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readSetBegin",
                "original_argsstring_html": "(TType &amp;elemType, uint32_t &amp;size, bool &amp;sizeUnknown)"
              },
              "description": {
                "detailed_html": "<p>Read a set header off the wire. If the set size is 0-14, the size will be packed into the element type header. If it's a longer set, the 4 MSB of the element type header will be 0xF, and a varint will follow with the true size. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readSetBegin",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readSetBegin",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readSetBegin"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/readSetBegin",
          "minprot": "public",
          "displayname_html": "readSetBegin",
          "brief_html": "<p>Read a set header off the wire. If the set size is 0-14, the size will be packed into the element type header. If it's a longer set, the 4 MSB of the element type header will be 0xF, and a varint will follow with the true size. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readSetBegin",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readSetBegin"
        },
        {
          "kind": "overloadset",
          "name_html": "readBool",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readBool",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1acbba818e80723698f594c15b77078fe3",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readBool",
              "argsstring_html": "(bool &amp;value)",
              "name_html": "readBool",
              "param": [
                {
                  "type_html": "bool &amp;",
                  "declname_html": "value"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "223",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "590",
                "bodyend": "601"
              },
              "definition": {
                "simple_html": "uint32_t readBool(bool&amp; value)",
                "simple_raw": "uint32_t readBool(bool& value)",
                "detailed_html": "uint32_t readBool(bool&amp; value)",
                "detailed_raw": "uint32_t readBool(bool& value)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readBool",
                "original_argsstring_html": "(bool &amp;value)"
              },
              "description": {
                "detailed_html": "<p>Read a boolean off the wire. If this is a boolean field, the value should already have been read during readFieldBegin, so we'll just consume the pre-stored value. Otherwise, read a byte. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readBool",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readBool",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readBool"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/readBool",
          "minprot": "public",
          "displayname_html": "readBool",
          "brief_html": "<p>Read a boolean off the wire. If this is a boolean field, the value should already have been read during readFieldBegin, so we'll just consume the pre-stored value. Otherwise, read a byte. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readBool",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readBool"
        },
        {
          "kind": "overloadset",
          "name_html": "readByte",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readByte",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a0d0182c0a58679f50686be187c3e8bed",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readByte",
              "argsstring_html": "(int8_t &amp;byte)",
              "name_html": "readByte",
              "param": [
                {
                  "type_html": "int8_t &amp;",
                  "declname_html": "byte"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "227",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "607",
                "bodyend": "612"
              },
              "definition": {
                "simple_html": "uint32_t readByte(int8_t&amp; byte)",
                "simple_raw": "uint32_t readByte(int8_t& byte)",
                "detailed_html": "uint32_t readByte(int8_t&amp; byte)",
                "detailed_raw": "uint32_t readByte(int8_t& byte)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readByte",
                "original_argsstring_html": "(int8_t &amp;byte)"
              },
              "description": {
                "detailed_html": "<p>Read a single byte off the wire. Nothing interesting here. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readByte",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readByte",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readByte"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/readByte",
          "minprot": "public",
          "displayname_html": "readByte",
          "brief_html": "<p>Read a single byte off the wire. Nothing interesting here. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readByte",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readByte"
        },
        {
          "kind": "overloadset",
          "name_html": "readI16",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readI16",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a5770d478aafac8a1221adf21359fb7a1",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readI16",
              "argsstring_html": "(int16_t &amp;i16)",
              "name_html": "readI16",
              "param": [
                {
                  "type_html": "int16_t &amp;",
                  "declname_html": "i16"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "229",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "618",
                "bodyend": "623"
              },
              "definition": {
                "simple_html": "uint32_t readI16(int16_t&amp; i16)",
                "simple_raw": "uint32_t readI16(int16_t& i16)",
                "detailed_html": "uint32_t readI16(int16_t&amp; i16)",
                "detailed_raw": "uint32_t readI16(int16_t& i16)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readI16",
                "original_argsstring_html": "(int16_t &amp;i16)"
              },
              "description": {
                "detailed_html": "<p>Read an i16 from the wire as a zigzag varint. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readI16",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readI16",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readI16"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/readI16",
          "minprot": "public",
          "displayname_html": "readI16",
          "brief_html": "<p>Read an i16 from the wire as a zigzag varint. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readI16",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readI16"
        },
        {
          "kind": "overloadset",
          "name_html": "readI32",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readI32",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a4e50add6edafe31e235c71e47b222cbe",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readI32",
              "argsstring_html": "(int32_t &amp;i32)",
              "name_html": "readI32",
              "param": [
                {
                  "type_html": "int32_t &amp;",
                  "declname_html": "i32"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "231",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "629",
                "bodyend": "634"
              },
              "definition": {
                "simple_html": "uint32_t readI32(int32_t&amp; i32)",
                "simple_raw": "uint32_t readI32(int32_t& i32)",
                "detailed_html": "uint32_t readI32(int32_t&amp; i32)",
                "detailed_raw": "uint32_t readI32(int32_t& i32)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readI32",
                "original_argsstring_html": "(int32_t &amp;i32)"
              },
              "description": {
                "detailed_html": "<p>Read an i32 from the wire as a zigzag varint. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readI32",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readI32",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readI32"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/readI32",
          "minprot": "public",
          "displayname_html": "readI32",
          "brief_html": "<p>Read an i32 from the wire as a zigzag varint. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readI32",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readI32"
        },
        {
          "kind": "overloadset",
          "name_html": "readI64",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readI64",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1ac64d5c6bd463d67e01aa2cce789a062b",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readI64",
              "argsstring_html": "(int64_t &amp;i64)",
              "name_html": "readI64",
              "param": [
                {
                  "type_html": "int64_t &amp;",
                  "declname_html": "i64"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "233",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "640",
                "bodyend": "645"
              },
              "definition": {
                "simple_html": "uint32_t readI64(int64_t&amp; i64)",
                "simple_raw": "uint32_t readI64(int64_t& i64)",
                "detailed_html": "uint32_t readI64(int64_t&amp; i64)",
                "detailed_raw": "uint32_t readI64(int64_t& i64)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readI64",
                "original_argsstring_html": "(int64_t &amp;i64)"
              },
              "description": {
                "detailed_html": "<p>Read an i64 from the wire as a zigzag varint. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readI64",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readI64",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readI64"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/readI64",
          "minprot": "public",
          "displayname_html": "readI64",
          "brief_html": "<p>Read an i64 from the wire as a zigzag varint. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readI64",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readI64"
        },
        {
          "kind": "overloadset",
          "name_html": "readDouble",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readDouble",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1ae15ccd29cca63c78ec12aff35be3c7d6",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readDouble",
              "argsstring_html": "(double &amp;dub)",
              "name_html": "readDouble",
              "param": [
                {
                  "type_html": "double &amp;",
                  "declname_html": "dub"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "235",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "651",
                "bodyend": "667"
              },
              "definition": {
                "simple_html": "uint32_t readDouble(double&amp; dub)",
                "simple_raw": "uint32_t readDouble(double& dub)",
                "detailed_html": "uint32_t readDouble(double&amp; dub)",
                "detailed_raw": "uint32_t readDouble(double& dub)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readDouble",
                "original_argsstring_html": "(double &amp;dub)"
              },
              "description": {
                "detailed_html": "<p>No magic here - just read a double off the wire. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readDouble",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readDouble",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readDouble"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/readDouble",
          "minprot": "public",
          "displayname_html": "readDouble",
          "brief_html": "<p>No magic here - just read a double off the wire. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readDouble",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readDouble"
        },
        {
          "kind": "overloadset",
          "name_html": "readFloat",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readFloat",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1abf821800d8df471505dd294e208a5623",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readFloat",
              "argsstring_html": "(float &amp;flt)",
              "name_html": "readFloat",
              "param": [
                {
                  "type_html": "float &amp;",
                  "declname_html": "flt"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "237",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "673",
                "bodyend": "685"
              },
              "definition": {
                "simple_html": "uint32_t readFloat(float&amp; flt)",
                "simple_raw": "uint32_t readFloat(float& flt)",
                "detailed_html": "uint32_t readFloat(float&amp; flt)",
                "detailed_raw": "uint32_t readFloat(float& flt)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readFloat",
                "original_argsstring_html": "(float &amp;flt)"
              },
              "description": {
                "detailed_html": "<p>No magic here - just read a float off the wire. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readFloat",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readFloat",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readFloat"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/readFloat",
          "minprot": "public",
          "displayname_html": "readFloat",
          "brief_html": "<p>No magic here - just read a float off the wire. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readFloat",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readFloat"
        },
        {
          "kind": "overloadset",
          "name_html": "readString",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readString",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a7831d749250e5a29bc76c06a7a21b4bc",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "tparams": [
                {
                  "type_html": "class String_"
                }
              ],
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readString",
              "argsstring_html": "(String_ &amp;str)",
              "name_html": "readString",
              "param": [
                {
                  "type_html": "String_ &amp;",
                  "declname_html": "str"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "240",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "689",
                "bodyend": "691"
              },
              "definition": {
                "simple_html": "template &lt;class String_&gt;\nuint32_t readString(String_&amp; str)",
                "simple_raw": "template <class String_>\nuint32_t readString(String_& str)",
                "detailed_html": "template &lt;class String_&gt;\nuint32_t readString(String_&amp; str)",
                "detailed_raw": "template <class String_>\nuint32_t readString(String_& str)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readString",
                "original_argsstring_html": "(String_ &amp;str)"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readString",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readString",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readString"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/readString",
          "minprot": "public",
          "displayname_html": "readString",
          "brief_html": "",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readString",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readString"
        },
        {
          "kind": "overloadset",
          "name_html": "readBinary",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readBinary",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a476e09203dd64f965ca71d13cbedd840",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "tparams": [
                {
                  "type_html": "class String_"
                }
              ],
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readBinary",
              "argsstring_html": "(String_ &amp;str)",
              "name_html": "readBinary",
              "param": [
                {
                  "type_html": "String_ &amp;",
                  "declname_html": "str"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "243",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "698",
                "bodyend": "739"
              },
              "definition": {
                "simple_html": "template &lt;class String_&gt;\nuint32_t readBinary(String_&amp; str)",
                "simple_raw": "template <class String_>\nuint32_t readBinary(String_& str)",
                "detailed_html": "template &lt;class String_&gt;\nuint32_t readBinary(String_&amp; str)",
                "detailed_raw": "template <class String_>\nuint32_t readBinary(String_& str)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readBinary",
                "original_argsstring_html": "(String_ &amp;str)"
              },
              "description": {
                "detailed_html": "<p>Read a byte[] from the wire. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readBinary",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readBinary",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readBinary"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/readBinary",
          "minprot": "public",
          "displayname_html": "readBinary",
          "brief_html": "<p>Read a byte[] from the wire. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readBinary",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readBinary"
        },
        {
          "kind": "overloadset",
          "name_html": "readMessageEnd",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readMessageEnd",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1ac6661a11677f31a90676c961904aec1a",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "yes",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readMessageEnd",
              "argsstring_html": "()",
              "name_html": "readMessageEnd",
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "249",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "bodystart": "249",
                "bodyend": "249"
              },
              "definition": {
                "simple_html": "uint32_t readMessageEnd()",
                "simple_raw": "uint32_t readMessageEnd()",
                "detailed_html": "inline uint32_t readMessageEnd()",
                "detailed_raw": "inline uint32_t readMessageEnd()",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readMessageEnd",
                "original_argsstring_html": "()"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readMessageEnd",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readMessageEnd",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readMessageEnd"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/readMessageEnd",
          "minprot": "public",
          "displayname_html": "readMessageEnd",
          "brief_html": "",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readMessageEnd",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readMessageEnd"
        },
        {
          "kind": "overloadset",
          "name_html": "readFieldEnd",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readFieldEnd",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1ac8ae8aadab13326aba9cc40dd904cd8b",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "yes",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readFieldEnd",
              "argsstring_html": "()",
              "name_html": "readFieldEnd",
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "250",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "bodystart": "250",
                "bodyend": "250"
              },
              "definition": {
                "simple_html": "uint32_t readFieldEnd()",
                "simple_raw": "uint32_t readFieldEnd()",
                "detailed_html": "inline uint32_t readFieldEnd()",
                "detailed_raw": "inline uint32_t readFieldEnd()",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readFieldEnd",
                "original_argsstring_html": "()"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readFieldEnd",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readFieldEnd",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readFieldEnd"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/readFieldEnd",
          "minprot": "public",
          "displayname_html": "readFieldEnd",
          "brief_html": "",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readFieldEnd",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readFieldEnd"
        },
        {
          "kind": "overloadset",
          "name_html": "readMapEnd",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readMapEnd",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1ac6ac88395be8a462c6ba8dddfab0f01a",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "yes",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readMapEnd",
              "argsstring_html": "()",
              "name_html": "readMapEnd",
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "251",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "bodystart": "251",
                "bodyend": "251"
              },
              "definition": {
                "simple_html": "uint32_t readMapEnd()",
                "simple_raw": "uint32_t readMapEnd()",
                "detailed_html": "inline uint32_t readMapEnd()",
                "detailed_raw": "inline uint32_t readMapEnd()",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readMapEnd",
                "original_argsstring_html": "()"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readMapEnd",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readMapEnd",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readMapEnd"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/readMapEnd",
          "minprot": "public",
          "displayname_html": "readMapEnd",
          "brief_html": "",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readMapEnd",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readMapEnd"
        },
        {
          "kind": "overloadset",
          "name_html": "readListEnd",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readListEnd",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a0aec9b9f7debcdd5a4afdd46c1e78142",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "yes",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readListEnd",
              "argsstring_html": "()",
              "name_html": "readListEnd",
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "252",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "bodystart": "252",
                "bodyend": "252"
              },
              "definition": {
                "simple_html": "uint32_t readListEnd()",
                "simple_raw": "uint32_t readListEnd()",
                "detailed_html": "inline uint32_t readListEnd()",
                "detailed_raw": "inline uint32_t readListEnd()",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readListEnd",
                "original_argsstring_html": "()"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readListEnd",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readListEnd",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readListEnd"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/readListEnd",
          "minprot": "public",
          "displayname_html": "readListEnd",
          "brief_html": "",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readListEnd",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readListEnd"
        },
        {
          "kind": "overloadset",
          "name_html": "readSetEnd",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readSetEnd",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1acbb7fd523f201b2a8aab20a3a998b465",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "yes",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readSetEnd",
              "argsstring_html": "()",
              "name_html": "readSetEnd",
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "253",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "bodystart": "253",
                "bodyend": "253"
              },
              "definition": {
                "simple_html": "uint32_t readSetEnd()",
                "simple_raw": "uint32_t readSetEnd()",
                "detailed_html": "inline uint32_t readSetEnd()",
                "detailed_raw": "inline uint32_t readSetEnd()",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readSetEnd",
                "original_argsstring_html": "()"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readSetEnd",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readSetEnd",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readSetEnd"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/readSetEnd",
          "minprot": "public",
          "displayname_html": "readSetEnd",
          "brief_html": "",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readSetEnd",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readSetEnd"
        },
        {
          "kind": "overloadset",
          "name_html": "writeFieldBeginInternal",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeFieldBeginInternal",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a5873ae8b70505e572b85ae0b328b060b",
              "prot": "protected",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "int32_t",
              "definition_html": "int32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeFieldBeginInternal",
              "argsstring_html": "(const char *name, const TType fieldType, const int16_t fieldId, int8_t typeOverride)",
              "name_html": "writeFieldBeginInternal",
              "param": [
                {
                  "type_html": "const char *",
                  "declname_html": "name"
                },
                {
                  "type_html": "const TType",
                  "declname_html": "fieldType"
                },
                {
                  "type_html": "const int16_t",
                  "declname_html": "fieldId"
                },
                {
                  "type_html": "int8_t",
                  "declname_html": "typeOverride"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "195",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "313",
                "bodyend": "336"
              },
              "definition": {
                "simple_html": "int32_t writeFieldBeginInternal(\n    const char* name,\n    const TType fieldType,\n    const int16_t fieldId,\n    int8_t typeOverride)",
                "simple_raw": "int32_t writeFieldBeginInternal(\n    const char* name,\n    const TType fieldType,\n    const int16_t fieldId,\n    int8_t typeOverride)",
                "detailed_html": "protected int32_t writeFieldBeginInternal(\n    const char* name,\n    const TType fieldType,\n    const int16_t fieldId,\n    int8_t typeOverride)",
                "detailed_raw": "protected int32_t writeFieldBeginInternal(\n    const char* name,\n    const TType fieldType,\n    const int16_t fieldId,\n    int8_t typeOverride)",
                "original_definition_html": "int32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeFieldBeginInternal",
                "original_argsstring_html": "(const char *name, const TType fieldType, const int16_t fieldId, int8_t typeOverride)"
              },
              "description": {
                "detailed_html": "<p>The workhorse of writeFieldBegin. It has the option of doing a 'type override' of the type header. This is used specifically in the boolean field case. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeFieldBeginInternal",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeFieldBeginInternal",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeFieldBeginInternal"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/writeFieldBeginInternal",
          "minprot": "protected",
          "displayname_html": "writeFieldBeginInternal",
          "brief_html": "<p>The workhorse of writeFieldBegin. It has the option of doing a 'type override' of the type header. This is used specifically in the boolean field case. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeFieldBeginInternal",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeFieldBeginInternal"
        },
        {
          "kind": "overloadset",
          "name_html": "writeCollectionBegin",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeCollectionBegin",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a3b3abb33994e2c5f9d0a60c8a9ea1ebd",
              "prot": "protected",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeCollectionBegin",
              "argsstring_html": "(int8_t elemType, int32_t size)",
              "name_html": "writeCollectionBegin",
              "param": [
                {
                  "type_html": "int8_t",
                  "declname_html": "elemType"
                },
                {
                  "type_html": "int32_t",
                  "declname_html": "size"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "200",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "343",
                "bodyend": "353"
              },
              "definition": {
                "simple_html": "uint32_t writeCollectionBegin(int8_t elemType, int32_t size)",
                "simple_raw": "uint32_t writeCollectionBegin(int8_t elemType, int32_t size)",
                "detailed_html": "protected uint32_t writeCollectionBegin(int8_t elemType, int32_t size)",
                "detailed_raw": "protected uint32_t writeCollectionBegin(int8_t elemType, int32_t size)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeCollectionBegin",
                "original_argsstring_html": "(int8_t elemType, int32_t size)"
              },
              "description": {
                "detailed_html": "<p>Abstract method for writing the start of lists and sets. List and sets on the wire differ only by the type indicator. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeCollectionBegin",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeCollectionBegin",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeCollectionBegin"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/writeCollectionBegin",
          "minprot": "protected",
          "displayname_html": "writeCollectionBegin",
          "brief_html": "<p>Abstract method for writing the start of lists and sets. List and sets on the wire differ only by the type indicator. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeCollectionBegin",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeCollectionBegin"
        },
        {
          "kind": "overloadset",
          "name_html": "writeVarint32",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeVarint32",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a1d839601852857f74513f48d168bbb97",
              "prot": "protected",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeVarint32",
              "argsstring_html": "(uint32_t n)",
              "name_html": "writeVarint32",
              "param": [
                {
                  "type_html": "uint32_t",
                  "declname_html": "n"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "201",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "359",
                "bodyend": "374"
              },
              "definition": {
                "simple_html": "uint32_t writeVarint32(uint32_t n)",
                "simple_raw": "uint32_t writeVarint32(uint32_t n)",
                "detailed_html": "protected uint32_t writeVarint32(uint32_t n)",
                "detailed_raw": "protected uint32_t writeVarint32(uint32_t n)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeVarint32",
                "original_argsstring_html": "(uint32_t n)"
              },
              "description": {
                "detailed_html": "<p>Write an i32 as a varint. Results in 1-5 bytes on the wire. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeVarint32",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeVarint32",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeVarint32"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/writeVarint32",
          "minprot": "protected",
          "displayname_html": "writeVarint32",
          "brief_html": "<p>Write an i32 as a varint. Results in 1-5 bytes on the wire. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeVarint32",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeVarint32"
        },
        {
          "kind": "overloadset",
          "name_html": "writeVarint64",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeVarint64",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a3869cffad977c8ac337d86fc07419e2e",
              "prot": "protected",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeVarint64",
              "argsstring_html": "(uint64_t n)",
              "name_html": "writeVarint64",
              "param": [
                {
                  "type_html": "uint64_t",
                  "declname_html": "n"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "202",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "380",
                "bodyend": "395"
              },
              "definition": {
                "simple_html": "uint32_t writeVarint64(uint64_t n)",
                "simple_raw": "uint32_t writeVarint64(uint64_t n)",
                "detailed_html": "protected uint32_t writeVarint64(uint64_t n)",
                "detailed_raw": "protected uint32_t writeVarint64(uint64_t n)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::writeVarint64",
                "original_argsstring_html": "(uint64_t n)"
              },
              "description": {
                "detailed_html": "<p>Write an i64 as a varint. Results in 1-10 bytes on the wire. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/writeVarint64",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/writeVarint64",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::writeVarint64"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/writeVarint64",
          "minprot": "protected",
          "displayname_html": "writeVarint64",
          "brief_html": "<p>Write an i64 as a varint. Results in 1-10 bytes on the wire. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeVarint64",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/writeVarint64"
        },
        {
          "kind": "overloadset",
          "name_html": "getCompactType",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::getCompactType",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1addd5b5f0ceff38e4f19fda9f5a6d5de1",
              "prot": "protected",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "yes",
              "virtual": "non-virtual",
              "type_html": "int8_t",
              "definition_html": "int8_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::getCompactType",
              "argsstring_html": "(int8_t ttype)",
              "name_html": "getCompactType",
              "param": [
                {
                  "type_html": "int8_t",
                  "declname_html": "ttype"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "203",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "401",
                "bodyend": "403"
              },
              "definition": {
                "simple_html": "int8_t getCompactType(int8_t ttype)",
                "simple_raw": "int8_t getCompactType(int8_t ttype)",
                "detailed_html": "protected inline int8_t getCompactType(int8_t ttype)",
                "detailed_raw": "protected inline int8_t getCompactType(int8_t ttype)",
                "original_definition_html": "int8_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::getCompactType",
                "original_argsstring_html": "(int8_t ttype)"
              },
              "description": {
                "detailed_html": "<p>Given a TType value, find the appropriate <code>detail::compact::Types</code> value </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/getCompactType",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/getCompactType",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::getCompactType"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/getCompactType",
          "minprot": "protected",
          "displayname_html": "getCompactType",
          "brief_html": "<p>Given a TType value, find the appropriate <code>detail::compact::Types</code> value </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/getCompactType",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/getCompactType"
        },
        {
          "kind": "overloadset",
          "name_html": "readVarint32",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readVarint32",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a0614b058dd88304eec79f17fc9ed4938",
              "prot": "protected",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readVarint32",
              "argsstring_html": "(int32_t &amp;i32)",
              "name_html": "readVarint32",
              "param": [
                {
                  "type_html": "int32_t &amp;",
                  "declname_html": "i32"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "256",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "746",
                "bodyend": "751"
              },
              "definition": {
                "simple_html": "uint32_t readVarint32(int32_t&amp; i32)",
                "simple_raw": "uint32_t readVarint32(int32_t& i32)",
                "detailed_html": "protected uint32_t readVarint32(int32_t&amp; i32)",
                "detailed_raw": "protected uint32_t readVarint32(int32_t& i32)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readVarint32",
                "original_argsstring_html": "(int32_t &amp;i32)"
              },
              "description": {
                "detailed_html": "<p>Read an i32 from the wire as a varint. The MSB of each byte is set if there is another byte to follow. This can read up to 5 bytes. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readVarint32",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readVarint32",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readVarint32"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/readVarint32",
          "minprot": "protected",
          "displayname_html": "readVarint32",
          "brief_html": "<p>Read an i32 from the wire as a varint. The MSB of each byte is set if there is another byte to follow. This can read up to 5 bytes. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readVarint32",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readVarint32"
        },
        {
          "kind": "overloadset",
          "name_html": "readVarint64",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readVarint64",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a4ac3fb969cac0a2099aeeaffff78838d",
              "prot": "protected",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "uint32_t",
              "definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readVarint64",
              "argsstring_html": "(int64_t &amp;i64)",
              "name_html": "readVarint64",
              "param": [
                {
                  "type_html": "int64_t &amp;",
                  "declname_html": "i64"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "257",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "758",
                "bodyend": "837"
              },
              "definition": {
                "simple_html": "uint32_t readVarint64(int64_t&amp; i64)",
                "simple_raw": "uint32_t readVarint64(int64_t& i64)",
                "detailed_html": "protected uint32_t readVarint64(int64_t&amp; i64)",
                "detailed_raw": "protected uint32_t readVarint64(int64_t& i64)",
                "original_definition_html": "uint32_t apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::readVarint64",
                "original_argsstring_html": "(int64_t &amp;i64)"
              },
              "description": {
                "detailed_html": "<p>Read an i64 from the wire as a proper varint. The MSB of each byte is set if there is another byte to follow. This can read up to 10 bytes. </p>"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/readVarint64",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/readVarint64",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::readVarint64"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/readVarint64",
          "minprot": "protected",
          "displayname_html": "readVarint64",
          "brief_html": "<p>Read an i64 from the wire as a proper varint. The MSB of each byte is set if there is another byte to follow. This can read up to 10 bytes. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readVarint64",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/readVarint64"
        },
        {
          "kind": "overloadset",
          "name_html": "getTType",
          "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::getTType",
          "functions": [
            {
              "refid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT_1a7bfbeb3d2fa249a9c528c080a76574b6",
              "prot": "protected",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "TType",
              "definition_html": "TType apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::getTType",
              "argsstring_html": "(int8_t type)",
              "name_html": "getTType",
              "param": [
                {
                  "type_html": "int8_t",
                  "declname_html": "type"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol.h",
                "line": "258",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp/protocol/TCompactProtocol-inl.h",
                "bodystart": "840",
                "bodyend": "874"
              },
              "definition": {
                "simple_html": "TType getTType(int8_t type)",
                "simple_raw": "TType getTType(int8_t type)",
                "detailed_html": "protected TType getTType(int8_t type)",
                "detailed_raw": "protected TType getTType(int8_t type)",
                "original_definition_html": "TType apache::thrift::protocol::TCompactProtocolT&lt; Transport_ &gt;::getTType",
                "original_argsstring_html": "(int8_t type)"
              },
              "filepath": "fns/class/apache/thrift/protocol/TCompactProtocolT/getTType",
              "href": "/ref/cpp/fns/class/apache/thrift/protocol/TCompactProtocolT/getTType",
              "parentid": "classapache_1_1thrift_1_1protocol_1_1TCompactProtocolT",
              "compoundname_html": "apache::thrift::protocol::TCompactProtocolT::getTType"
            }
          ],
          "filepath": "f/class/apache/thrift/protocol/TCompactProtocolT/getTType",
          "minprot": "protected",
          "displayname_html": "getTType",
          "brief_html": "",
          "groupname_html": "",
          "href": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/getTType",
          "refid": "/ref/cpp/f/class/apache/thrift/protocol/TCompactProtocolT/getTType"
        }
      ]
    }
  ],
  "free_overloadgroups": []
}