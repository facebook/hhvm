// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package module

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	hack0 "thrift/annotation/hack"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var _ = hack0.GoUnusedProtection__
type MyService interface {
  Ping() (err error)
  GetRandomData() (_r string, err error)
  // Parameters:
  //  - Sink
  Sink(sink int64) (err error)
  // Parameters:
  //  - Id
  //  - Data
  PutDataById(id int64, data string) (err error)
  // Parameters:
  //  - Id
  HasDataById(id int64) (_r bool, err error)
  // Parameters:
  //  - Id
  GetDataById(id int64) (_r string, err error)
  // Parameters:
  //  - Id
  DeleteDataById(id int64) (err error)
  // Parameters:
  //  - Id
  //  - Data
  LobDataById(id int64, data string) (err error)
  InvalidReturnForHack() (_r []float32, err error)
  RpcSkippedCodegen() (err error)
}

type MyServiceClientInterface interface {
  thrift.ClientInterface
  Ping() (err error)
  GetRandomData() (_r string, err error)
  // Parameters:
  //  - Sink
  Sink(sink int64) (err error)
  // Parameters:
  //  - Id
  //  - Data
  PutDataById(id int64, data string) (err error)
  // Parameters:
  //  - Id
  HasDataById(id int64) (_r bool, err error)
  // Parameters:
  //  - Id
  GetDataById(id int64) (_r string, err error)
  // Parameters:
  //  - Id
  DeleteDataById(id int64) (err error)
  // Parameters:
  //  - Id
  //  - Data
  LobDataById(id int64, data string) (err error)
  InvalidReturnForHack() (_r []float32, err error)
  RpcSkippedCodegen() (err error)
}

type MyServiceClient struct {
  MyServiceClientInterface
  CC thrift.ClientConn
}

func(client *MyServiceClient) Open() error {
  return client.CC.Open()
}

func(client *MyServiceClient) Close() error {
  return client.CC.Close()
}

func(client *MyServiceClient) IsOpen() bool {
  return client.CC.IsOpen()
}

func NewMyServiceClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *MyServiceClient {
  return &MyServiceClient{ CC: thrift.NewClientConn(t, f) }
}

func NewMyServiceClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *MyServiceClient {
  return &MyServiceClient{ CC: thrift.NewClientConnWithProtocols(t, iprot, oprot) }
}

func NewMyServiceClientProtocol(prot thrift.Protocol) *MyServiceClient {
  return NewMyServiceClient(prot.Transport(), prot, prot)
}

func (p *MyServiceClient) Ping() (err error) {
  var args MyServicePingArgs
  err = p.CC.SendMsg("ping", &args, thrift.CALL)
  if err != nil { return }
  return p.recvPing()
}


func (p *MyServiceClient) recvPing() (err error) {
  var __result MyServicePingResult
  return p.CC.RecvMsg("ping", &__result)
}

func (p *MyServiceClient) GetRandomData() (_r string, err error) {
  var args MyServiceGetRandomDataArgs
  err = p.CC.SendMsg("getRandomData", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetRandomData()
}


func (p *MyServiceClient) recvGetRandomData() (value string, err error) {
  var __result MyServiceGetRandomDataResult
  err = p.CC.RecvMsg("getRandomData", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

// Parameters:
//  - Sink
func (p *MyServiceClient) Sink(sink int64) (err error) {
  args := MyServiceSinkArgs{
    Sink : sink,
  }
  err = p.CC.SendMsg("sink", &args, thrift.CALL)
  if err != nil { return }
  return p.recvSink()
}


func (p *MyServiceClient) recvSink() (err error) {
  var __result MyServiceSinkResult
  return p.CC.RecvMsg("sink", &__result)
}

// Parameters:
//  - Id
//  - Data
func (p *MyServiceClient) PutDataById(id int64, data string) (err error) {
  args := MyServicePutDataByIdArgs{
    Id : id,
    Data : data,
  }
  err = p.CC.SendMsg("putDataById", &args, thrift.CALL)
  if err != nil { return }
  return p.recvPutDataById()
}


func (p *MyServiceClient) recvPutDataById() (err error) {
  var __result MyServicePutDataByIdResult
  return p.CC.RecvMsg("putDataById", &__result)
}

// Parameters:
//  - Id
func (p *MyServiceClient) HasDataById(id int64) (_r bool, err error) {
  args := MyServiceHasDataByIdArgs{
    Id : id,
  }
  err = p.CC.SendMsg("hasDataById", &args, thrift.CALL)
  if err != nil { return }
  return p.recvHasDataById()
}


func (p *MyServiceClient) recvHasDataById() (value bool, err error) {
  var __result MyServiceHasDataByIdResult
  err = p.CC.RecvMsg("hasDataById", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

// Parameters:
//  - Id
func (p *MyServiceClient) GetDataById(id int64) (_r string, err error) {
  args := MyServiceGetDataByIdArgs{
    Id : id,
  }
  err = p.CC.SendMsg("getDataById", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetDataById()
}


func (p *MyServiceClient) recvGetDataById() (value string, err error) {
  var __result MyServiceGetDataByIdResult
  err = p.CC.RecvMsg("getDataById", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

// Parameters:
//  - Id
func (p *MyServiceClient) DeleteDataById(id int64) (err error) {
  args := MyServiceDeleteDataByIdArgs{
    Id : id,
  }
  err = p.CC.SendMsg("deleteDataById", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDeleteDataById()
}


func (p *MyServiceClient) recvDeleteDataById() (err error) {
  var __result MyServiceDeleteDataByIdResult
  return p.CC.RecvMsg("deleteDataById", &__result)
}

// Parameters:
//  - Id
//  - Data
func (p *MyServiceClient) LobDataById(id int64, data string) (err error) {
  args := MyServiceLobDataByIdArgs{
    Id : id,
    Data : data,
  }
  err = p.CC.SendMsg("lobDataById", &args, thrift.ONEWAY)
  if err != nil { return }
  return
}

func (p *MyServiceClient) InvalidReturnForHack() (_r []float32, err error) {
  var args MyServiceInvalidReturnForHackArgs
  err = p.CC.SendMsg("invalid_return_for_hack", &args, thrift.CALL)
  if err != nil { return }
  return p.recvInvalidReturnForHack()
}


func (p *MyServiceClient) recvInvalidReturnForHack() (value []float32, err error) {
  var __result MyServiceInvalidReturnForHackResult
  err = p.CC.RecvMsg("invalid_return_for_hack", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *MyServiceClient) RpcSkippedCodegen() (err error) {
  var args MyServiceRpcSkippedCodegenArgs
  err = p.CC.SendMsg("rpc_skipped_codegen", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRpcSkippedCodegen()
}


func (p *MyServiceClient) recvRpcSkippedCodegen() (err error) {
  var __result MyServiceRpcSkippedCodegenResult
  return p.CC.RecvMsg("rpc_skipped_codegen", &__result)
}


type MyServiceThreadsafeClient struct {
  MyServiceClientInterface
  CC thrift.ClientConn
  Mu sync.Mutex
}

func(client *MyServiceThreadsafeClient) Open() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Open()
}

func(client *MyServiceThreadsafeClient) Close() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Close()
}

func(client *MyServiceThreadsafeClient) IsOpen() bool {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.IsOpen()
}

func NewMyServiceThreadsafeClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *MyServiceThreadsafeClient {
  return &MyServiceThreadsafeClient{ CC: thrift.NewClientConn(t, f) }
}

func NewMyServiceThreadsafeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *MyServiceThreadsafeClient {
  return &MyServiceThreadsafeClient{ CC: thrift.NewClientConnWithProtocols(t, iprot, oprot) }
}

func NewMyServiceThreadsafeClientProtocol(prot thrift.Protocol) *MyServiceThreadsafeClient {
  return NewMyServiceThreadsafeClient(prot.Transport(), prot, prot)
}

func (p *MyServiceThreadsafeClient) Ping() (err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  var args MyServicePingArgs
  err = p.CC.SendMsg("ping", &args, thrift.CALL)
  if err != nil { return }
  return p.recvPing()
}


func (p *MyServiceThreadsafeClient) recvPing() (err error) {
  var __result MyServicePingResult
  return p.CC.RecvMsg("ping", &__result)
}

func (p *MyServiceThreadsafeClient) GetRandomData() (_r string, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  var args MyServiceGetRandomDataArgs
  err = p.CC.SendMsg("getRandomData", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetRandomData()
}


func (p *MyServiceThreadsafeClient) recvGetRandomData() (value string, err error) {
  var __result MyServiceGetRandomDataResult
  err = p.CC.RecvMsg("getRandomData", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

// Parameters:
//  - Sink
func (p *MyServiceThreadsafeClient) Sink(sink int64) (err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MyServiceSinkArgs{
    Sink : sink,
  }
  err = p.CC.SendMsg("sink", &args, thrift.CALL)
  if err != nil { return }
  return p.recvSink()
}


func (p *MyServiceThreadsafeClient) recvSink() (err error) {
  var __result MyServiceSinkResult
  return p.CC.RecvMsg("sink", &__result)
}

// Parameters:
//  - Id
//  - Data
func (p *MyServiceThreadsafeClient) PutDataById(id int64, data string) (err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MyServicePutDataByIdArgs{
    Id : id,
    Data : data,
  }
  err = p.CC.SendMsg("putDataById", &args, thrift.CALL)
  if err != nil { return }
  return p.recvPutDataById()
}


func (p *MyServiceThreadsafeClient) recvPutDataById() (err error) {
  var __result MyServicePutDataByIdResult
  return p.CC.RecvMsg("putDataById", &__result)
}

// Parameters:
//  - Id
func (p *MyServiceThreadsafeClient) HasDataById(id int64) (_r bool, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MyServiceHasDataByIdArgs{
    Id : id,
  }
  err = p.CC.SendMsg("hasDataById", &args, thrift.CALL)
  if err != nil { return }
  return p.recvHasDataById()
}


func (p *MyServiceThreadsafeClient) recvHasDataById() (value bool, err error) {
  var __result MyServiceHasDataByIdResult
  err = p.CC.RecvMsg("hasDataById", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

// Parameters:
//  - Id
func (p *MyServiceThreadsafeClient) GetDataById(id int64) (_r string, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MyServiceGetDataByIdArgs{
    Id : id,
  }
  err = p.CC.SendMsg("getDataById", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetDataById()
}


func (p *MyServiceThreadsafeClient) recvGetDataById() (value string, err error) {
  var __result MyServiceGetDataByIdResult
  err = p.CC.RecvMsg("getDataById", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

// Parameters:
//  - Id
func (p *MyServiceThreadsafeClient) DeleteDataById(id int64) (err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MyServiceDeleteDataByIdArgs{
    Id : id,
  }
  err = p.CC.SendMsg("deleteDataById", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDeleteDataById()
}


func (p *MyServiceThreadsafeClient) recvDeleteDataById() (err error) {
  var __result MyServiceDeleteDataByIdResult
  return p.CC.RecvMsg("deleteDataById", &__result)
}

// Parameters:
//  - Id
//  - Data
func (p *MyServiceThreadsafeClient) LobDataById(id int64, data string) (err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MyServiceLobDataByIdArgs{
    Id : id,
    Data : data,
  }
  err = p.CC.SendMsg("lobDataById", &args, thrift.ONEWAY)
  if err != nil { return }
  return
}

func (p *MyServiceThreadsafeClient) InvalidReturnForHack() (_r []float32, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  var args MyServiceInvalidReturnForHackArgs
  err = p.CC.SendMsg("invalid_return_for_hack", &args, thrift.CALL)
  if err != nil { return }
  return p.recvInvalidReturnForHack()
}


func (p *MyServiceThreadsafeClient) recvInvalidReturnForHack() (value []float32, err error) {
  var __result MyServiceInvalidReturnForHackResult
  err = p.CC.RecvMsg("invalid_return_for_hack", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *MyServiceThreadsafeClient) RpcSkippedCodegen() (err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  var args MyServiceRpcSkippedCodegenArgs
  err = p.CC.SendMsg("rpc_skipped_codegen", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRpcSkippedCodegen()
}


func (p *MyServiceThreadsafeClient) recvRpcSkippedCodegen() (err error) {
  var __result MyServiceRpcSkippedCodegenResult
  return p.CC.RecvMsg("rpc_skipped_codegen", &__result)
}


type MyServiceChannelClient struct {
  RequestChannel thrift.RequestChannel
}

func (c *MyServiceChannelClient) Close() error {
  return c.RequestChannel.Close()
}

func (c *MyServiceChannelClient) IsOpen() bool {
  return c.RequestChannel.IsOpen()
}

func (c *MyServiceChannelClient) Open() error {
  return c.RequestChannel.Open()
}

func NewMyServiceChannelClient(channel thrift.RequestChannel) *MyServiceChannelClient {
  return &MyServiceChannelClient{RequestChannel: channel}
}

func (p *MyServiceChannelClient) Ping(ctx context.Context) (err error) {
  args := MyServicePingArgs{
  }
  var __result MyServicePingResult
  err = p.RequestChannel.Call(ctx, "ping", &args, &__result)
  if err != nil { return }

  return nil
}

func (p *MyServiceChannelClient) GetRandomData(ctx context.Context) (_r string, err error) {
  args := MyServiceGetRandomDataArgs{
  }
  var __result MyServiceGetRandomDataResult
  err = p.RequestChannel.Call(ctx, "getRandomData", &args, &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

// Parameters:
//  - Sink
func (p *MyServiceChannelClient) Sink(ctx context.Context, sink int64) (err error) {
  args := MyServiceSinkArgs{
    Sink : sink,
  }
  var __result MyServiceSinkResult
  err = p.RequestChannel.Call(ctx, "sink", &args, &__result)
  if err != nil { return }

  return nil
}

// Parameters:
//  - Id
//  - Data
func (p *MyServiceChannelClient) PutDataById(ctx context.Context, id int64, data string) (err error) {
  args := MyServicePutDataByIdArgs{
    Id : id,
    Data : data,
  }
  var __result MyServicePutDataByIdResult
  err = p.RequestChannel.Call(ctx, "putDataById", &args, &__result)
  if err != nil { return }

  return nil
}

// Parameters:
//  - Id
func (p *MyServiceChannelClient) HasDataById(ctx context.Context, id int64) (_r bool, err error) {
  args := MyServiceHasDataByIdArgs{
    Id : id,
  }
  var __result MyServiceHasDataByIdResult
  err = p.RequestChannel.Call(ctx, "hasDataById", &args, &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

// Parameters:
//  - Id
func (p *MyServiceChannelClient) GetDataById(ctx context.Context, id int64) (_r string, err error) {
  args := MyServiceGetDataByIdArgs{
    Id : id,
  }
  var __result MyServiceGetDataByIdResult
  err = p.RequestChannel.Call(ctx, "getDataById", &args, &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

// Parameters:
//  - Id
func (p *MyServiceChannelClient) DeleteDataById(ctx context.Context, id int64) (err error) {
  args := MyServiceDeleteDataByIdArgs{
    Id : id,
  }
  var __result MyServiceDeleteDataByIdResult
  err = p.RequestChannel.Call(ctx, "deleteDataById", &args, &__result)
  if err != nil { return }

  return nil
}

// Parameters:
//  - Id
//  - Data
func (p *MyServiceChannelClient) LobDataById(ctx context.Context, id int64, data string) (err error) {
  args := MyServiceLobDataByIdArgs{
    Id : id,
    Data : data,
  }
  err = p.RequestChannel.Oneway(ctx, "lobDataById", &args)
  if err != nil { return }

  return nil
}

func (p *MyServiceChannelClient) InvalidReturnForHack(ctx context.Context) (_r []float32, err error) {
  args := MyServiceInvalidReturnForHackArgs{
  }
  var __result MyServiceInvalidReturnForHackResult
  err = p.RequestChannel.Call(ctx, "invalid_return_for_hack", &args, &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *MyServiceChannelClient) RpcSkippedCodegen(ctx context.Context) (err error) {
  args := MyServiceRpcSkippedCodegenArgs{
  }
  var __result MyServiceRpcSkippedCodegenResult
  err = p.RequestChannel.Call(ctx, "rpc_skipped_codegen", &args, &__result)
  if err != nil { return }

  return nil
}


type MyServiceProcessor struct {
  processorMap map[string]thrift.ProcessorFunction
  functionServiceMap map[string]string
  handler MyService
}

func (p *MyServiceProcessor) AddToProcessorMap(key string, processor thrift.ProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *MyServiceProcessor) AddToFunctionServiceMap(key, service string) {
  p.functionServiceMap[key] = service
}

func (p *MyServiceProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction, err error) {
  if processor, ok := p.processorMap[key]; ok {
    return processor, nil
  }
  return nil, nil // generic error message will be sent
}

func (p *MyServiceProcessor) ProcessorMap() map[string]thrift.ProcessorFunction {
  return p.processorMap
}

func (p *MyServiceProcessor) FunctionServiceMap() map[string]string {
  return p.functionServiceMap
}

func NewMyServiceProcessor(handler MyService) *MyServiceProcessor {
  self7 := &MyServiceProcessor{handler:handler, processorMap:make(map[string]thrift.ProcessorFunction), functionServiceMap:make(map[string]string)}
  self7.processorMap["ping"] = &myServiceProcessorPing{handler:handler}
  self7.processorMap["getRandomData"] = &myServiceProcessorGetRandomData{handler:handler}
  self7.processorMap["sink"] = &myServiceProcessorSink{handler:handler}
  self7.processorMap["putDataById"] = &myServiceProcessorPutDataById{handler:handler}
  self7.processorMap["hasDataById"] = &myServiceProcessorHasDataById{handler:handler}
  self7.processorMap["getDataById"] = &myServiceProcessorGetDataById{handler:handler}
  self7.processorMap["deleteDataById"] = &myServiceProcessorDeleteDataById{handler:handler}
  self7.processorMap["lobDataById"] = &myServiceProcessorLobDataById{handler:handler}
  self7.processorMap["invalid_return_for_hack"] = &myServiceProcessorInvalidReturnForHack{handler:handler}
  self7.processorMap["rpc_skipped_codegen"] = &myServiceProcessorRpcSkippedCodegen{handler:handler}
  self7.functionServiceMap["ping"] = "MyService"
  self7.functionServiceMap["getRandomData"] = "MyService"
  self7.functionServiceMap["sink"] = "MyService"
  self7.functionServiceMap["putDataById"] = "MyService"
  self7.functionServiceMap["hasDataById"] = "MyService"
  self7.functionServiceMap["getDataById"] = "MyService"
  self7.functionServiceMap["deleteDataById"] = "MyService"
  self7.functionServiceMap["lobDataById"] = "MyService"
  self7.functionServiceMap["invalid_return_for_hack"] = "MyService"
  self7.functionServiceMap["rpc_skipped_codegen"] = "MyService"
  return self7
}

type myServiceProcessorPing struct {
  handler MyService
}

func (p *MyServicePingResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *myServiceProcessorPing) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MyServicePingArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *myServiceProcessorPing) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("ping", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *myServiceProcessorPing) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  var __result MyServicePingResult
  if err := p.handler.Ping(); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing ping: " + err.Error(), err)
      return x, x
    }
  }
  return &__result, nil
}

type myServiceProcessorGetRandomData struct {
  handler MyService
}

func (p *MyServiceGetRandomDataResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *myServiceProcessorGetRandomData) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MyServiceGetRandomDataArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *myServiceProcessorGetRandomData) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getRandomData", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *myServiceProcessorGetRandomData) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  var __result MyServiceGetRandomDataResult
  if retval, err := p.handler.GetRandomData(); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing getRandomData: " + err.Error(), err)
      return x, x
    }
  } else {
    __result.Success = &retval
  }
  return &__result, nil
}

type myServiceProcessorSink struct {
  handler MyService
}

func (p *MyServiceSinkResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *myServiceProcessorSink) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MyServiceSinkArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *myServiceProcessorSink) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("sink", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *myServiceProcessorSink) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MyServiceSinkArgs)
  var __result MyServiceSinkResult
  if err := p.handler.Sink(args.Sink); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing sink: " + err.Error(), err)
      return x, x
    }
  }
  return &__result, nil
}

type myServiceProcessorPutDataById struct {
  handler MyService
}

func (p *MyServicePutDataByIdResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *myServiceProcessorPutDataById) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MyServicePutDataByIdArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *myServiceProcessorPutDataById) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("putDataById", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *myServiceProcessorPutDataById) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MyServicePutDataByIdArgs)
  var __result MyServicePutDataByIdResult
  if err := p.handler.PutDataById(args.Id, args.Data); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing putDataById: " + err.Error(), err)
      return x, x
    }
  }
  return &__result, nil
}

type myServiceProcessorHasDataById struct {
  handler MyService
}

func (p *MyServiceHasDataByIdResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *myServiceProcessorHasDataById) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MyServiceHasDataByIdArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *myServiceProcessorHasDataById) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("hasDataById", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *myServiceProcessorHasDataById) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MyServiceHasDataByIdArgs)
  var __result MyServiceHasDataByIdResult
  if retval, err := p.handler.HasDataById(args.Id); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing hasDataById: " + err.Error(), err)
      return x, x
    }
  } else {
    __result.Success = &retval
  }
  return &__result, nil
}

type myServiceProcessorGetDataById struct {
  handler MyService
}

func (p *MyServiceGetDataByIdResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *myServiceProcessorGetDataById) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MyServiceGetDataByIdArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *myServiceProcessorGetDataById) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getDataById", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *myServiceProcessorGetDataById) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MyServiceGetDataByIdArgs)
  var __result MyServiceGetDataByIdResult
  if retval, err := p.handler.GetDataById(args.Id); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing getDataById: " + err.Error(), err)
      return x, x
    }
  } else {
    __result.Success = &retval
  }
  return &__result, nil
}

type myServiceProcessorDeleteDataById struct {
  handler MyService
}

func (p *MyServiceDeleteDataByIdResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *myServiceProcessorDeleteDataById) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MyServiceDeleteDataByIdArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *myServiceProcessorDeleteDataById) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("deleteDataById", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *myServiceProcessorDeleteDataById) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MyServiceDeleteDataByIdArgs)
  var __result MyServiceDeleteDataByIdResult
  if err := p.handler.DeleteDataById(args.Id); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing deleteDataById: " + err.Error(), err)
      return x, x
    }
  }
  return &__result, nil
}

type myServiceProcessorLobDataById struct {
  handler MyService
}

func (p *myServiceProcessorLobDataById) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MyServiceLobDataByIdArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *myServiceProcessorLobDataById) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("lobDataById", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *myServiceProcessorLobDataById) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MyServiceLobDataByIdArgs)
  if err := p.handler.LobDataById(args.Id, args.Data); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing lobDataById: " + err.Error(), err)
      return x, x
    }
  }
  return nil, nil
}

type myServiceProcessorInvalidReturnForHack struct {
  handler MyService
}

func (p *MyServiceInvalidReturnForHackResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *myServiceProcessorInvalidReturnForHack) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MyServiceInvalidReturnForHackArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *myServiceProcessorInvalidReturnForHack) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("invalid_return_for_hack", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *myServiceProcessorInvalidReturnForHack) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  var __result MyServiceInvalidReturnForHackResult
  if retval, err := p.handler.InvalidReturnForHack(); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing invalid_return_for_hack: " + err.Error(), err)
      return x, x
    }
  } else {
    __result.Success = retval
  }
  return &__result, nil
}

type myServiceProcessorRpcSkippedCodegen struct {
  handler MyService
}

func (p *MyServiceRpcSkippedCodegenResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *myServiceProcessorRpcSkippedCodegen) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MyServiceRpcSkippedCodegenArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *myServiceProcessorRpcSkippedCodegen) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("rpc_skipped_codegen", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *myServiceProcessorRpcSkippedCodegen) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  var __result MyServiceRpcSkippedCodegenResult
  if err := p.handler.RpcSkippedCodegen(); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing rpc_skipped_codegen: " + err.Error(), err)
      return x, x
    }
  }
  return &__result, nil
}


// HELPER FUNCTIONS AND STRUCTURES

type MyServicePingArgs struct {
  thrift.IRequest
}

func NewMyServicePingArgs() *MyServicePingArgs {
  return &MyServicePingArgs{}
}

type MyServicePingArgsBuilder struct {
  obj *MyServicePingArgs
}

func NewMyServicePingArgsBuilder() *MyServicePingArgsBuilder{
  return &MyServicePingArgsBuilder{
    obj: NewMyServicePingArgs(),
  }
}

func (p MyServicePingArgsBuilder) Emit() *MyServicePingArgs{
  return &MyServicePingArgs{
  }
}

func (p *MyServicePingArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyServicePingArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ping_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyServicePingArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("MyServicePingArgs({})")
}

type MyServicePingResult struct {
  thrift.IResponse
}

func NewMyServicePingResult() *MyServicePingResult {
  return &MyServicePingResult{}
}

type MyServicePingResultBuilder struct {
  obj *MyServicePingResult
}

func NewMyServicePingResultBuilder() *MyServicePingResultBuilder{
  return &MyServicePingResultBuilder{
    obj: NewMyServicePingResult(),
  }
}

func (p MyServicePingResultBuilder) Emit() *MyServicePingResult{
  return &MyServicePingResult{
  }
}

func (p *MyServicePingResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyServicePingResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ping_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyServicePingResult) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("MyServicePingResult({})")
}

type MyServiceGetRandomDataArgs struct {
  thrift.IRequest
}

func NewMyServiceGetRandomDataArgs() *MyServiceGetRandomDataArgs {
  return &MyServiceGetRandomDataArgs{}
}

type MyServiceGetRandomDataArgsBuilder struct {
  obj *MyServiceGetRandomDataArgs
}

func NewMyServiceGetRandomDataArgsBuilder() *MyServiceGetRandomDataArgsBuilder{
  return &MyServiceGetRandomDataArgsBuilder{
    obj: NewMyServiceGetRandomDataArgs(),
  }
}

func (p MyServiceGetRandomDataArgsBuilder) Emit() *MyServiceGetRandomDataArgs{
  return &MyServiceGetRandomDataArgs{
  }
}

func (p *MyServiceGetRandomDataArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyServiceGetRandomDataArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getRandomData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyServiceGetRandomDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("MyServiceGetRandomDataArgs({})")
}

// Attributes:
//  - Success
type MyServiceGetRandomDataResult struct {
  thrift.IResponse
  Success *string `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMyServiceGetRandomDataResult() *MyServiceGetRandomDataResult {
  return &MyServiceGetRandomDataResult{}
}

var MyServiceGetRandomDataResult_Success_DEFAULT string
func (p *MyServiceGetRandomDataResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return MyServiceGetRandomDataResult_Success_DEFAULT
  }
  return *p.Success
}
func (p *MyServiceGetRandomDataResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MyServiceGetRandomDataResultBuilder struct {
  obj *MyServiceGetRandomDataResult
}

func NewMyServiceGetRandomDataResultBuilder() *MyServiceGetRandomDataResultBuilder{
  return &MyServiceGetRandomDataResultBuilder{
    obj: NewMyServiceGetRandomDataResult(),
  }
}

func (p MyServiceGetRandomDataResultBuilder) Emit() *MyServiceGetRandomDataResult{
  return &MyServiceGetRandomDataResult{
    Success: p.obj.Success,
  }
}

func (m *MyServiceGetRandomDataResultBuilder) Success(success *string) *MyServiceGetRandomDataResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MyServiceGetRandomDataResult) SetSuccess(success *string) *MyServiceGetRandomDataResult {
  m.Success = success
  return m
}

func (p *MyServiceGetRandomDataResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyServiceGetRandomDataResult)  ReadField0(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
  } else {
    p.Success = &v
  }
  return nil
}

func (p *MyServiceGetRandomDataResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getRandomData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyServiceGetRandomDataResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MyServiceGetRandomDataResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", *p.Success)
  }
  return fmt.Sprintf("MyServiceGetRandomDataResult({Success:%s})", successVal)
}

// Attributes:
//  - Sink
type MyServiceSinkArgs struct {
  thrift.IRequest
  Sink int64 `thrift:"sink,1" db:"sink" json:"sink"`
}

func NewMyServiceSinkArgs() *MyServiceSinkArgs {
  return &MyServiceSinkArgs{}
}


func (p *MyServiceSinkArgs) GetSink() int64 {
  return p.Sink
}
type MyServiceSinkArgsBuilder struct {
  obj *MyServiceSinkArgs
}

func NewMyServiceSinkArgsBuilder() *MyServiceSinkArgsBuilder{
  return &MyServiceSinkArgsBuilder{
    obj: NewMyServiceSinkArgs(),
  }
}

func (p MyServiceSinkArgsBuilder) Emit() *MyServiceSinkArgs{
  return &MyServiceSinkArgs{
    Sink: p.obj.Sink,
  }
}

func (m *MyServiceSinkArgsBuilder) Sink(sink int64) *MyServiceSinkArgsBuilder {
  m.obj.Sink = sink
  return m
}

func (m *MyServiceSinkArgs) SetSink(sink int64) *MyServiceSinkArgs {
  m.Sink = sink
  return m
}

func (p *MyServiceSinkArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyServiceSinkArgs)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Sink = v
  }
  return nil
}

func (p *MyServiceSinkArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("sink_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyServiceSinkArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("sink", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sink: ", p), err) }
  if err := oprot.WriteI64(int64(p.Sink)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sink (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sink: ", p), err) }
  return err
}

func (p *MyServiceSinkArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  sinkVal := fmt.Sprintf("%v", p.Sink)
  return fmt.Sprintf("MyServiceSinkArgs({Sink:%s})", sinkVal)
}

type MyServiceSinkResult struct {
  thrift.IResponse
}

func NewMyServiceSinkResult() *MyServiceSinkResult {
  return &MyServiceSinkResult{}
}

type MyServiceSinkResultBuilder struct {
  obj *MyServiceSinkResult
}

func NewMyServiceSinkResultBuilder() *MyServiceSinkResultBuilder{
  return &MyServiceSinkResultBuilder{
    obj: NewMyServiceSinkResult(),
  }
}

func (p MyServiceSinkResultBuilder) Emit() *MyServiceSinkResult{
  return &MyServiceSinkResult{
  }
}

func (p *MyServiceSinkResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyServiceSinkResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("sink_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyServiceSinkResult) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("MyServiceSinkResult({})")
}

// Attributes:
//  - Id
//  - Data
type MyServicePutDataByIdArgs struct {
  thrift.IRequest
  Id int64 `thrift:"id,1" db:"id" json:"id"`
  Data string `thrift:"data,2" db:"data" json:"data"`
}

func NewMyServicePutDataByIdArgs() *MyServicePutDataByIdArgs {
  return &MyServicePutDataByIdArgs{}
}


func (p *MyServicePutDataByIdArgs) GetId() int64 {
  return p.Id
}

func (p *MyServicePutDataByIdArgs) GetData() string {
  return p.Data
}
type MyServicePutDataByIdArgsBuilder struct {
  obj *MyServicePutDataByIdArgs
}

func NewMyServicePutDataByIdArgsBuilder() *MyServicePutDataByIdArgsBuilder{
  return &MyServicePutDataByIdArgsBuilder{
    obj: NewMyServicePutDataByIdArgs(),
  }
}

func (p MyServicePutDataByIdArgsBuilder) Emit() *MyServicePutDataByIdArgs{
  return &MyServicePutDataByIdArgs{
    Id: p.obj.Id,
    Data: p.obj.Data,
  }
}

func (m *MyServicePutDataByIdArgsBuilder) Id(id int64) *MyServicePutDataByIdArgsBuilder {
  m.obj.Id = id
  return m
}

func (m *MyServicePutDataByIdArgsBuilder) Data(data string) *MyServicePutDataByIdArgsBuilder {
  m.obj.Data = data
  return m
}

func (m *MyServicePutDataByIdArgs) SetId(id int64) *MyServicePutDataByIdArgs {
  m.Id = id
  return m
}

func (m *MyServicePutDataByIdArgs) SetData(data string) *MyServicePutDataByIdArgs {
  m.Data = data
  return m
}

func (p *MyServicePutDataByIdArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyServicePutDataByIdArgs)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Id = v
  }
  return nil
}

func (p *MyServicePutDataByIdArgs)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Data = v
  }
  return nil
}

func (p *MyServicePutDataByIdArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("putDataById_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyServicePutDataByIdArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.Id)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *MyServicePutDataByIdArgs) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
  if err := oprot.WriteString(string(p.Data)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  return err
}

func (p *MyServicePutDataByIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  idVal := fmt.Sprintf("%v", p.Id)
  dataVal := fmt.Sprintf("%v", p.Data)
  return fmt.Sprintf("MyServicePutDataByIdArgs({Id:%s Data:%s})", idVal, dataVal)
}

type MyServicePutDataByIdResult struct {
  thrift.IResponse
}

func NewMyServicePutDataByIdResult() *MyServicePutDataByIdResult {
  return &MyServicePutDataByIdResult{}
}

type MyServicePutDataByIdResultBuilder struct {
  obj *MyServicePutDataByIdResult
}

func NewMyServicePutDataByIdResultBuilder() *MyServicePutDataByIdResultBuilder{
  return &MyServicePutDataByIdResultBuilder{
    obj: NewMyServicePutDataByIdResult(),
  }
}

func (p MyServicePutDataByIdResultBuilder) Emit() *MyServicePutDataByIdResult{
  return &MyServicePutDataByIdResult{
  }
}

func (p *MyServicePutDataByIdResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyServicePutDataByIdResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("putDataById_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyServicePutDataByIdResult) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("MyServicePutDataByIdResult({})")
}

// Attributes:
//  - Id
type MyServiceHasDataByIdArgs struct {
  thrift.IRequest
  Id int64 `thrift:"id,1" db:"id" json:"id"`
}

func NewMyServiceHasDataByIdArgs() *MyServiceHasDataByIdArgs {
  return &MyServiceHasDataByIdArgs{}
}


func (p *MyServiceHasDataByIdArgs) GetId() int64 {
  return p.Id
}
type MyServiceHasDataByIdArgsBuilder struct {
  obj *MyServiceHasDataByIdArgs
}

func NewMyServiceHasDataByIdArgsBuilder() *MyServiceHasDataByIdArgsBuilder{
  return &MyServiceHasDataByIdArgsBuilder{
    obj: NewMyServiceHasDataByIdArgs(),
  }
}

func (p MyServiceHasDataByIdArgsBuilder) Emit() *MyServiceHasDataByIdArgs{
  return &MyServiceHasDataByIdArgs{
    Id: p.obj.Id,
  }
}

func (m *MyServiceHasDataByIdArgsBuilder) Id(id int64) *MyServiceHasDataByIdArgsBuilder {
  m.obj.Id = id
  return m
}

func (m *MyServiceHasDataByIdArgs) SetId(id int64) *MyServiceHasDataByIdArgs {
  m.Id = id
  return m
}

func (p *MyServiceHasDataByIdArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyServiceHasDataByIdArgs)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Id = v
  }
  return nil
}

func (p *MyServiceHasDataByIdArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("hasDataById_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyServiceHasDataByIdArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.Id)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *MyServiceHasDataByIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  idVal := fmt.Sprintf("%v", p.Id)
  return fmt.Sprintf("MyServiceHasDataByIdArgs({Id:%s})", idVal)
}

// Attributes:
//  - Success
type MyServiceHasDataByIdResult struct {
  thrift.IResponse
  Success *bool `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMyServiceHasDataByIdResult() *MyServiceHasDataByIdResult {
  return &MyServiceHasDataByIdResult{}
}

var MyServiceHasDataByIdResult_Success_DEFAULT bool
func (p *MyServiceHasDataByIdResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return MyServiceHasDataByIdResult_Success_DEFAULT
  }
  return *p.Success
}
func (p *MyServiceHasDataByIdResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MyServiceHasDataByIdResultBuilder struct {
  obj *MyServiceHasDataByIdResult
}

func NewMyServiceHasDataByIdResultBuilder() *MyServiceHasDataByIdResultBuilder{
  return &MyServiceHasDataByIdResultBuilder{
    obj: NewMyServiceHasDataByIdResult(),
  }
}

func (p MyServiceHasDataByIdResultBuilder) Emit() *MyServiceHasDataByIdResult{
  return &MyServiceHasDataByIdResult{
    Success: p.obj.Success,
  }
}

func (m *MyServiceHasDataByIdResultBuilder) Success(success *bool) *MyServiceHasDataByIdResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MyServiceHasDataByIdResult) SetSuccess(success *bool) *MyServiceHasDataByIdResult {
  m.Success = success
  return m
}

func (p *MyServiceHasDataByIdResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyServiceHasDataByIdResult)  ReadField0(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
  } else {
    p.Success = &v
  }
  return nil
}

func (p *MyServiceHasDataByIdResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("hasDataById_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyServiceHasDataByIdResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MyServiceHasDataByIdResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", *p.Success)
  }
  return fmt.Sprintf("MyServiceHasDataByIdResult({Success:%s})", successVal)
}

// Attributes:
//  - Id
type MyServiceGetDataByIdArgs struct {
  thrift.IRequest
  Id int64 `thrift:"id,1" db:"id" json:"id"`
}

func NewMyServiceGetDataByIdArgs() *MyServiceGetDataByIdArgs {
  return &MyServiceGetDataByIdArgs{}
}


func (p *MyServiceGetDataByIdArgs) GetId() int64 {
  return p.Id
}
type MyServiceGetDataByIdArgsBuilder struct {
  obj *MyServiceGetDataByIdArgs
}

func NewMyServiceGetDataByIdArgsBuilder() *MyServiceGetDataByIdArgsBuilder{
  return &MyServiceGetDataByIdArgsBuilder{
    obj: NewMyServiceGetDataByIdArgs(),
  }
}

func (p MyServiceGetDataByIdArgsBuilder) Emit() *MyServiceGetDataByIdArgs{
  return &MyServiceGetDataByIdArgs{
    Id: p.obj.Id,
  }
}

func (m *MyServiceGetDataByIdArgsBuilder) Id(id int64) *MyServiceGetDataByIdArgsBuilder {
  m.obj.Id = id
  return m
}

func (m *MyServiceGetDataByIdArgs) SetId(id int64) *MyServiceGetDataByIdArgs {
  m.Id = id
  return m
}

func (p *MyServiceGetDataByIdArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyServiceGetDataByIdArgs)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Id = v
  }
  return nil
}

func (p *MyServiceGetDataByIdArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getDataById_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyServiceGetDataByIdArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.Id)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *MyServiceGetDataByIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  idVal := fmt.Sprintf("%v", p.Id)
  return fmt.Sprintf("MyServiceGetDataByIdArgs({Id:%s})", idVal)
}

// Attributes:
//  - Success
type MyServiceGetDataByIdResult struct {
  thrift.IResponse
  Success *string `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMyServiceGetDataByIdResult() *MyServiceGetDataByIdResult {
  return &MyServiceGetDataByIdResult{}
}

var MyServiceGetDataByIdResult_Success_DEFAULT string
func (p *MyServiceGetDataByIdResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return MyServiceGetDataByIdResult_Success_DEFAULT
  }
  return *p.Success
}
func (p *MyServiceGetDataByIdResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MyServiceGetDataByIdResultBuilder struct {
  obj *MyServiceGetDataByIdResult
}

func NewMyServiceGetDataByIdResultBuilder() *MyServiceGetDataByIdResultBuilder{
  return &MyServiceGetDataByIdResultBuilder{
    obj: NewMyServiceGetDataByIdResult(),
  }
}

func (p MyServiceGetDataByIdResultBuilder) Emit() *MyServiceGetDataByIdResult{
  return &MyServiceGetDataByIdResult{
    Success: p.obj.Success,
  }
}

func (m *MyServiceGetDataByIdResultBuilder) Success(success *string) *MyServiceGetDataByIdResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MyServiceGetDataByIdResult) SetSuccess(success *string) *MyServiceGetDataByIdResult {
  m.Success = success
  return m
}

func (p *MyServiceGetDataByIdResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyServiceGetDataByIdResult)  ReadField0(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
  } else {
    p.Success = &v
  }
  return nil
}

func (p *MyServiceGetDataByIdResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getDataById_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyServiceGetDataByIdResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MyServiceGetDataByIdResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", *p.Success)
  }
  return fmt.Sprintf("MyServiceGetDataByIdResult({Success:%s})", successVal)
}

// Attributes:
//  - Id
type MyServiceDeleteDataByIdArgs struct {
  thrift.IRequest
  Id int64 `thrift:"id,1" db:"id" json:"id"`
}

func NewMyServiceDeleteDataByIdArgs() *MyServiceDeleteDataByIdArgs {
  return &MyServiceDeleteDataByIdArgs{}
}


func (p *MyServiceDeleteDataByIdArgs) GetId() int64 {
  return p.Id
}
type MyServiceDeleteDataByIdArgsBuilder struct {
  obj *MyServiceDeleteDataByIdArgs
}

func NewMyServiceDeleteDataByIdArgsBuilder() *MyServiceDeleteDataByIdArgsBuilder{
  return &MyServiceDeleteDataByIdArgsBuilder{
    obj: NewMyServiceDeleteDataByIdArgs(),
  }
}

func (p MyServiceDeleteDataByIdArgsBuilder) Emit() *MyServiceDeleteDataByIdArgs{
  return &MyServiceDeleteDataByIdArgs{
    Id: p.obj.Id,
  }
}

func (m *MyServiceDeleteDataByIdArgsBuilder) Id(id int64) *MyServiceDeleteDataByIdArgsBuilder {
  m.obj.Id = id
  return m
}

func (m *MyServiceDeleteDataByIdArgs) SetId(id int64) *MyServiceDeleteDataByIdArgs {
  m.Id = id
  return m
}

func (p *MyServiceDeleteDataByIdArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyServiceDeleteDataByIdArgs)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Id = v
  }
  return nil
}

func (p *MyServiceDeleteDataByIdArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("deleteDataById_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyServiceDeleteDataByIdArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.Id)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *MyServiceDeleteDataByIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  idVal := fmt.Sprintf("%v", p.Id)
  return fmt.Sprintf("MyServiceDeleteDataByIdArgs({Id:%s})", idVal)
}

type MyServiceDeleteDataByIdResult struct {
  thrift.IResponse
}

func NewMyServiceDeleteDataByIdResult() *MyServiceDeleteDataByIdResult {
  return &MyServiceDeleteDataByIdResult{}
}

type MyServiceDeleteDataByIdResultBuilder struct {
  obj *MyServiceDeleteDataByIdResult
}

func NewMyServiceDeleteDataByIdResultBuilder() *MyServiceDeleteDataByIdResultBuilder{
  return &MyServiceDeleteDataByIdResultBuilder{
    obj: NewMyServiceDeleteDataByIdResult(),
  }
}

func (p MyServiceDeleteDataByIdResultBuilder) Emit() *MyServiceDeleteDataByIdResult{
  return &MyServiceDeleteDataByIdResult{
  }
}

func (p *MyServiceDeleteDataByIdResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyServiceDeleteDataByIdResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("deleteDataById_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyServiceDeleteDataByIdResult) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("MyServiceDeleteDataByIdResult({})")
}

// Attributes:
//  - Id
//  - Data
type MyServiceLobDataByIdArgs struct {
  thrift.IRequest
  Id int64 `thrift:"id,1" db:"id" json:"id"`
  Data string `thrift:"data,2" db:"data" json:"data"`
}

func NewMyServiceLobDataByIdArgs() *MyServiceLobDataByIdArgs {
  return &MyServiceLobDataByIdArgs{}
}


func (p *MyServiceLobDataByIdArgs) GetId() int64 {
  return p.Id
}

func (p *MyServiceLobDataByIdArgs) GetData() string {
  return p.Data
}
type MyServiceLobDataByIdArgsBuilder struct {
  obj *MyServiceLobDataByIdArgs
}

func NewMyServiceLobDataByIdArgsBuilder() *MyServiceLobDataByIdArgsBuilder{
  return &MyServiceLobDataByIdArgsBuilder{
    obj: NewMyServiceLobDataByIdArgs(),
  }
}

func (p MyServiceLobDataByIdArgsBuilder) Emit() *MyServiceLobDataByIdArgs{
  return &MyServiceLobDataByIdArgs{
    Id: p.obj.Id,
    Data: p.obj.Data,
  }
}

func (m *MyServiceLobDataByIdArgsBuilder) Id(id int64) *MyServiceLobDataByIdArgsBuilder {
  m.obj.Id = id
  return m
}

func (m *MyServiceLobDataByIdArgsBuilder) Data(data string) *MyServiceLobDataByIdArgsBuilder {
  m.obj.Data = data
  return m
}

func (m *MyServiceLobDataByIdArgs) SetId(id int64) *MyServiceLobDataByIdArgs {
  m.Id = id
  return m
}

func (m *MyServiceLobDataByIdArgs) SetData(data string) *MyServiceLobDataByIdArgs {
  m.Data = data
  return m
}

func (p *MyServiceLobDataByIdArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyServiceLobDataByIdArgs)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Id = v
  }
  return nil
}

func (p *MyServiceLobDataByIdArgs)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Data = v
  }
  return nil
}

func (p *MyServiceLobDataByIdArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("lobDataById_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyServiceLobDataByIdArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.Id)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *MyServiceLobDataByIdArgs) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
  if err := oprot.WriteString(string(p.Data)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  return err
}

func (p *MyServiceLobDataByIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  idVal := fmt.Sprintf("%v", p.Id)
  dataVal := fmt.Sprintf("%v", p.Data)
  return fmt.Sprintf("MyServiceLobDataByIdArgs({Id:%s Data:%s})", idVal, dataVal)
}

type MyServiceInvalidReturnForHackArgs struct {
  thrift.IRequest
}

func NewMyServiceInvalidReturnForHackArgs() *MyServiceInvalidReturnForHackArgs {
  return &MyServiceInvalidReturnForHackArgs{}
}

type MyServiceInvalidReturnForHackArgsBuilder struct {
  obj *MyServiceInvalidReturnForHackArgs
}

func NewMyServiceInvalidReturnForHackArgsBuilder() *MyServiceInvalidReturnForHackArgsBuilder{
  return &MyServiceInvalidReturnForHackArgsBuilder{
    obj: NewMyServiceInvalidReturnForHackArgs(),
  }
}

func (p MyServiceInvalidReturnForHackArgsBuilder) Emit() *MyServiceInvalidReturnForHackArgs{
  return &MyServiceInvalidReturnForHackArgs{
  }
}

func (p *MyServiceInvalidReturnForHackArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyServiceInvalidReturnForHackArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("invalid_return_for_hack_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyServiceInvalidReturnForHackArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("MyServiceInvalidReturnForHackArgs({})")
}

// Attributes:
//  - Success
type MyServiceInvalidReturnForHackResult struct {
  thrift.IResponse
  Success []float32 `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMyServiceInvalidReturnForHackResult() *MyServiceInvalidReturnForHackResult {
  return &MyServiceInvalidReturnForHackResult{}
}

var MyServiceInvalidReturnForHackResult_Success_DEFAULT []float32

func (p *MyServiceInvalidReturnForHackResult) GetSuccess() []float32 {
  return p.Success
}
func (p *MyServiceInvalidReturnForHackResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MyServiceInvalidReturnForHackResultBuilder struct {
  obj *MyServiceInvalidReturnForHackResult
}

func NewMyServiceInvalidReturnForHackResultBuilder() *MyServiceInvalidReturnForHackResultBuilder{
  return &MyServiceInvalidReturnForHackResultBuilder{
    obj: NewMyServiceInvalidReturnForHackResult(),
  }
}

func (p MyServiceInvalidReturnForHackResultBuilder) Emit() *MyServiceInvalidReturnForHackResult{
  return &MyServiceInvalidReturnForHackResult{
    Success: p.obj.Success,
  }
}

func (m *MyServiceInvalidReturnForHackResultBuilder) Success(success []float32) *MyServiceInvalidReturnForHackResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MyServiceInvalidReturnForHackResult) SetSuccess(success []float32) *MyServiceInvalidReturnForHackResult {
  m.Success = success
  return m
}

func (p *MyServiceInvalidReturnForHackResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyServiceInvalidReturnForHackResult)  ReadField0(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]float32, 0, size)
  p.Success =  tSet
  for i := 0; i < size; i ++ {
    var _elem9 float32
    if v, err := iprot.ReadFloat(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem9 = v
    }
    p.Success = append(p.Success, _elem9)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *MyServiceInvalidReturnForHackResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("invalid_return_for_hack_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyServiceInvalidReturnForHackResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.SET, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.FLOAT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    set := make(map[float32]bool, len(p.Success))
    for _, v := range p.Success {
      if ok := set[v]; ok {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
      }
      set[v] = true
    }
    for _, v := range p.Success {
      if err := oprot.WriteFloat(float32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MyServiceInvalidReturnForHackResult) String() string {
  if p == nil {
    return "<nil>"
  }

  successVal := fmt.Sprintf("%v", p.Success)
  return fmt.Sprintf("MyServiceInvalidReturnForHackResult({Success:%s})", successVal)
}

type MyServiceRpcSkippedCodegenArgs struct {
  thrift.IRequest
}

func NewMyServiceRpcSkippedCodegenArgs() *MyServiceRpcSkippedCodegenArgs {
  return &MyServiceRpcSkippedCodegenArgs{}
}

type MyServiceRpcSkippedCodegenArgsBuilder struct {
  obj *MyServiceRpcSkippedCodegenArgs
}

func NewMyServiceRpcSkippedCodegenArgsBuilder() *MyServiceRpcSkippedCodegenArgsBuilder{
  return &MyServiceRpcSkippedCodegenArgsBuilder{
    obj: NewMyServiceRpcSkippedCodegenArgs(),
  }
}

func (p MyServiceRpcSkippedCodegenArgsBuilder) Emit() *MyServiceRpcSkippedCodegenArgs{
  return &MyServiceRpcSkippedCodegenArgs{
  }
}

func (p *MyServiceRpcSkippedCodegenArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyServiceRpcSkippedCodegenArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("rpc_skipped_codegen_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyServiceRpcSkippedCodegenArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("MyServiceRpcSkippedCodegenArgs({})")
}

type MyServiceRpcSkippedCodegenResult struct {
  thrift.IResponse
}

func NewMyServiceRpcSkippedCodegenResult() *MyServiceRpcSkippedCodegenResult {
  return &MyServiceRpcSkippedCodegenResult{}
}

type MyServiceRpcSkippedCodegenResultBuilder struct {
  obj *MyServiceRpcSkippedCodegenResult
}

func NewMyServiceRpcSkippedCodegenResultBuilder() *MyServiceRpcSkippedCodegenResultBuilder{
  return &MyServiceRpcSkippedCodegenResultBuilder{
    obj: NewMyServiceRpcSkippedCodegenResult(),
  }
}

func (p MyServiceRpcSkippedCodegenResultBuilder) Emit() *MyServiceRpcSkippedCodegenResult{
  return &MyServiceRpcSkippedCodegenResult{
  }
}

func (p *MyServiceRpcSkippedCodegenResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyServiceRpcSkippedCodegenResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("rpc_skipped_codegen_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyServiceRpcSkippedCodegenResult) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("MyServiceRpcSkippedCodegenResult({})")
}


