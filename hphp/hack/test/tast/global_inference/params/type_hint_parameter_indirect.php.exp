Errors:
  [3:24-26] Was expecting a type hint
  [7:24-26] Was expecting a type hint
  [7:28-30] Was expecting a type hint
  [11:19-21] Was expecting a type hint
  [11:23-25] Was expecting a type hint
  [15:32-34] Was expecting a type hint
  [15:36-38] Was expecting a type hint
  [12:7-10] You are trying to access the property `foo` on a value whose class is unknown.
  [11:19-21] It is unknown
[(Fun
    { fd_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
        ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
        ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
      fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([3:10-23], "\\accessorentry");
      fd_fun =
      { f_span = [3:1-5:2]; f_readonly_this = None; f_annotation = (); 
        f_readonly_ret = None; f_ret = ((int), (Some ([3:30-33], (Hprim Tint))));
        f_params =
        [{ param_annotation = (nothing); param_type_hint = ((nothing), None); 
           param_is_variadic = false; param_pos = [3:24-26]; param_name = "$x"; 
           param_expr = None; param_readonly = None; param_callconv = Pnormal; 
           param_user_attributes = []; param_visibility = None }
          ];
        f_ctxs = None; f_unsafe_ctxs = None;
        f_body =
        { fb_ast =
          [([4:3-18], (Return (Some ((nothing), [4:10-17], (Obj_get (((nothing), [4:10-12], (Lvar ([4:10-12], $x))), ((nothing), [4:14-17], (Id ([4:14-17], "foo"))), OG_nullthrows, Is_prop))))))] };
        f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
        f_doc_comment = None };
      fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = [] });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([7:10-23], "\\accessorarray");
       fd_fun =
       { f_span = [7:1-9:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_ret = ((int), (Some ([7:34-37], (Hprim Tint))));
         f_params =
         [{ param_annotation = (KeyedContainer<(mixed & arraykey), nothing>); 
            param_type_hint = ((KeyedContainer<(mixed & arraykey), nothing>), None); 
            param_is_variadic = false; param_pos = [7:24-26]; param_name = "$x"; 
            param_expr = None; param_readonly = None; param_callconv = Pnormal; 
            param_user_attributes = []; param_visibility = None };
           { param_annotation = (mixed); param_type_hint = ((mixed), None); 
             param_is_variadic = false; param_pos = [7:28-30]; param_name = "$i"; 
             param_expr = None; param_readonly = None; param_callconv = Pnormal; 
             param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([8:3-17],
             (Return
                (Some ((nothing), [8:10-16], (Array_get (((KeyedContainer<(mixed & arraykey), nothing>), [8:10-12], (Lvar ([8:10-12], $x))), (Some ((mixed), [8:13-15], (Lvar ([8:13-15], $i))))))))))
             ]
           };
         f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
         f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = [] });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([11:10-18], "\\mutentry");
       fd_fun =
       { f_span = [11:1-13:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_ret = ((void), (Some ([11:29-33], (Hprim Tvoid))));
         f_params =
         [{ param_annotation = (mixed); param_type_hint = ((mixed), None); 
            param_is_variadic = false; param_pos = [11:19-21]; param_name = "$x"; 
            param_expr = None; param_readonly = None; param_callconv = Pnormal; 
            param_user_attributes = []; param_visibility = None };
           { param_annotation = (mixed); param_type_hint = ((mixed), None); 
             param_is_variadic = false; param_pos = [11:23-25]; param_name = "$w"; 
             param_expr = None; param_readonly = None; param_callconv = Pnormal; 
             param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([12:3-16],
             (Expr
                ((mixed), [12:3-15],
                 (Binop
                    { bop = (Eq None);
                      lhs =
                      ((nothing), [12:3-10],
                       (Obj_get (((mixed), [12:3-5], (Hole (((mixed), [12:3-5], (Lvar ([12:3-5], $x))), (mixed), (nothing), Typing))), (
                          (nothing), [12:7-10], (Id ([12:7-10], "foo"))), OG_nullthrows, Is_prop)));
                      rhs = ((mixed), [12:13-15], (Lvar ([12:13-15], $w))) }))))
             ]
           };
         f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
         f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = [] });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([15:10-18], "\\mutarray");
       fd_fun =
       { f_span = [15:1-17:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_ret = ((void), (Some ([15:42-46], (Hprim Tvoid))));
         f_params =
         [{ param_annotation = (vec<int>); param_type_hint = ((vec<int>), (Some ([15:19-27], (Happly (([15:19-22], "\\HH\\vec"), [([15:23-26], (Hprim Tint))]))))); 
            param_is_variadic = false; param_pos = [15:28-30]; param_name = "$x"; 
            param_expr = None; param_readonly = None; param_callconv = Pnormal; 
            param_user_attributes = []; param_visibility = None };
           { param_annotation = (int); param_type_hint = ((int), None); 
             param_is_variadic = false; param_pos = [15:32-34]; param_name = "$i"; 
             param_expr = None; param_readonly = None; param_callconv = Pnormal; 
             param_user_attributes = []; param_visibility = None };
           { param_annotation = (mixed); param_type_hint = ((mixed), None); 
             param_is_variadic = false; param_pos = [15:36-38]; param_name = "$w"; 
             param_expr = None; param_readonly = None; param_callconv = Pnormal; 
             param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([16:3-15],
             (Expr
                ((mixed), [16:3-14],
                 (Binop
                    { bop = (Eq None); lhs = ((mixed), [16:3-9], (Array_get (((vec<(mixed | int)>), [16:3-5], (Lvar ([16:3-5], $x))), (Some ((int), [16:6-8], (Lvar ([16:6-8], $i)))))));
                      rhs = ((mixed), [16:12-14], (Lvar ([16:12-14], $w))) }))))
             ]
           };
         f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
         f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = [] })