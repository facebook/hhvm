// Autogenerated by Thrift for thrift/compiler/test/fixtures/basic/src/module.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package module

import (
    "context"
    "errors"
    "fmt"
    "io"
    "reflect"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
    metadata "github.com/facebook/fbthrift/thrift/lib/thrift/metadata"
)

// (needed to ensure safety because of naive import list construction)
var _ = context.Background
var _ = errors.New
var _ = fmt.Printf
var _ = io.EOF
var _ = reflect.Ptr
var _ = thrift.VOID
var _ = metadata.GoUnusedProtection__


type FooService interface {
    SimpleRPC(ctx context.Context) (error)
}

type FooServiceClientInterface interface {
    io.Closer
    SimpleRPC(ctx context.Context) (error)
}

type FooServiceClient struct {
    ch thrift.RequestChannel
}
// Compile time interface enforcer
var _ FooServiceClientInterface = (*FooServiceClient)(nil)

func NewFooServiceChannelClient(channel thrift.RequestChannel) *FooServiceClient {
    return &FooServiceClient{
        ch: channel,
    }
}

func (c *FooServiceClient) Close() error {
    return c.ch.Close()
}

func (c *FooServiceClient) SimpleRPC(ctx context.Context) (error) {
    fbthriftReq := &reqFooServiceSimpleRPC{
    }
    fbthriftResp := newRespFooServiceSimpleRPC()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "simple_rpc", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return fbthriftEx
    }
    return nil
}


type FooServiceProcessor struct {
    processorFunctionMap map[string]thrift.ProcessorFunction
    functionServiceMap   map[string]string
    handler              FooService
}

func NewFooServiceProcessor(handler FooService) *FooServiceProcessor {
    p := &FooServiceProcessor{
        handler:              handler,
        processorFunctionMap: make(map[string]thrift.ProcessorFunction),
        functionServiceMap:   make(map[string]string),
    }
    p.AddToProcessorFunctionMap("simple_rpc", &procFuncFooServiceSimpleRPC{handler: handler})
    p.AddToFunctionServiceMap("simple_rpc", "FooService")

    return p
}

func (p *FooServiceProcessor) AddToProcessorFunctionMap(key string, processorFunction thrift.ProcessorFunction) {
    p.processorFunctionMap[key] = processorFunction
}

func (p *FooServiceProcessor) AddToFunctionServiceMap(key, service string) {
    p.functionServiceMap[key] = service
}

func (p *FooServiceProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction) {
    return p.processorFunctionMap[key]
}

func (p *FooServiceProcessor) ProcessorFunctionMap() map[string]thrift.ProcessorFunction {
    return p.processorFunctionMap
}

func (p *FooServiceProcessor) FunctionServiceMap() map[string]string {
    return p.functionServiceMap
}

func (p *FooServiceProcessor) PackageName() string {
    return "module"
}

func (p *FooServiceProcessor) GetThriftMetadata() *metadata.ThriftMetadata {
    return GetThriftMetadataForService("module.FooService")
}


type procFuncFooServiceSimpleRPC struct {
    handler FooService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncFooServiceSimpleRPC)(nil)

func (p *procFuncFooServiceSimpleRPC) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqFooServiceSimpleRPC()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncFooServiceSimpleRPC) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("simple_rpc", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncFooServiceSimpleRPC) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    result := newRespFooServiceSimpleRPC()
    err := p.handler.SimpleRPC(ctx)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing SimpleRPC: " + err.Error(), err)
        return x, x
    }

    return result, nil
}


type FB303Service interface {
    SimpleRPC(ctx context.Context, intParameter int32) (*ReservedKeyword, error)
}

type FB303ServiceClientInterface interface {
    io.Closer
    SimpleRPC(ctx context.Context, intParameter int32) (*ReservedKeyword, error)
}

type FB303ServiceClient struct {
    ch thrift.RequestChannel
}
// Compile time interface enforcer
var _ FB303ServiceClientInterface = (*FB303ServiceClient)(nil)

func NewFB303ServiceChannelClient(channel thrift.RequestChannel) *FB303ServiceClient {
    return &FB303ServiceClient{
        ch: channel,
    }
}

func (c *FB303ServiceClient) Close() error {
    return c.ch.Close()
}

func (c *FB303ServiceClient) SimpleRPC(ctx context.Context, intParameter int32) (*ReservedKeyword, error) {
    fbthriftReq := &reqFB303ServiceSimpleRPC{
        IntParameter: intParameter,
    }
    fbthriftResp := newRespFB303ServiceSimpleRPC()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "simple_rpc", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return nil, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return nil, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}


type FB303ServiceProcessor struct {
    processorFunctionMap map[string]thrift.ProcessorFunction
    functionServiceMap   map[string]string
    handler              FB303Service
}

func NewFB303ServiceProcessor(handler FB303Service) *FB303ServiceProcessor {
    p := &FB303ServiceProcessor{
        handler:              handler,
        processorFunctionMap: make(map[string]thrift.ProcessorFunction),
        functionServiceMap:   make(map[string]string),
    }
    p.AddToProcessorFunctionMap("simple_rpc", &procFuncFB303ServiceSimpleRPC{handler: handler})
    p.AddToFunctionServiceMap("simple_rpc", "FB303Service")

    return p
}

func (p *FB303ServiceProcessor) AddToProcessorFunctionMap(key string, processorFunction thrift.ProcessorFunction) {
    p.processorFunctionMap[key] = processorFunction
}

func (p *FB303ServiceProcessor) AddToFunctionServiceMap(key, service string) {
    p.functionServiceMap[key] = service
}

func (p *FB303ServiceProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction) {
    return p.processorFunctionMap[key]
}

func (p *FB303ServiceProcessor) ProcessorFunctionMap() map[string]thrift.ProcessorFunction {
    return p.processorFunctionMap
}

func (p *FB303ServiceProcessor) FunctionServiceMap() map[string]string {
    return p.functionServiceMap
}

func (p *FB303ServiceProcessor) PackageName() string {
    return "module"
}

func (p *FB303ServiceProcessor) GetThriftMetadata() *metadata.ThriftMetadata {
    return GetThriftMetadataForService("module.FB303Service")
}


type procFuncFB303ServiceSimpleRPC struct {
    handler FB303Service
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncFB303ServiceSimpleRPC)(nil)

func (p *procFuncFB303ServiceSimpleRPC) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqFB303ServiceSimpleRPC()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncFB303ServiceSimpleRPC) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("simple_rpc", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncFB303ServiceSimpleRPC) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    args := reqStruct.(*reqFB303ServiceSimpleRPC)
    result := newRespFB303ServiceSimpleRPC()
    retval, err := p.handler.SimpleRPC(ctx, args.IntParameter)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing SimpleRPC: " + err.Error(), err)
        return x, x
    }

    result.Success = retval
    return result, nil
}


type MyService interface {
    Ping(ctx context.Context) (error)
    GetRandomData(ctx context.Context) (string, error)
    Sink(ctx context.Context, sink int64) (error)
    PutDataById(ctx context.Context, id int64, data string) (error)
    HasDataById(ctx context.Context, id int64) (bool, error)
    GetDataById(ctx context.Context, id int64) (string, error)
    DeleteDataById(ctx context.Context, id int64) (error)
    LobDataById(ctx context.Context, id int64, data string) (error)
    InvalidReturnForHack(ctx context.Context) ([]float32, error)
    RpcSkippedCodegen(ctx context.Context) (error)
}

type MyServiceClientInterface interface {
    io.Closer
    Ping(ctx context.Context) (error)
    GetRandomData(ctx context.Context) (string, error)
    Sink(ctx context.Context, sink int64) (error)
    PutDataById(ctx context.Context, id int64, data string) (error)
    HasDataById(ctx context.Context, id int64) (bool, error)
    GetDataById(ctx context.Context, id int64) (string, error)
    DeleteDataById(ctx context.Context, id int64) (error)
    LobDataById(ctx context.Context, id int64, data string) (error)
    InvalidReturnForHack(ctx context.Context) ([]float32, error)
    RpcSkippedCodegen(ctx context.Context) (error)
}

type MyServiceClient struct {
    ch thrift.RequestChannel
}
// Compile time interface enforcer
var _ MyServiceClientInterface = (*MyServiceClient)(nil)

func NewMyServiceChannelClient(channel thrift.RequestChannel) *MyServiceClient {
    return &MyServiceClient{
        ch: channel,
    }
}

func (c *MyServiceClient) Close() error {
    return c.ch.Close()
}

func (c *MyServiceClient) Ping(ctx context.Context) (error) {
    fbthriftReq := &reqMyServicePing{
    }
    fbthriftResp := newRespMyServicePing()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "ping", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return fbthriftEx
    }
    return nil
}

func (c *MyServiceClient) GetRandomData(ctx context.Context) (string, error) {
    fbthriftReq := &reqMyServiceGetRandomData{
    }
    fbthriftResp := newRespMyServiceGetRandomData()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "getRandomData", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return "", fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return "", fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *MyServiceClient) Sink(ctx context.Context, sink int64) (error) {
    fbthriftReq := &reqMyServiceSink{
        Sink: sink,
    }
    fbthriftResp := newRespMyServiceSink()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "sink", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return fbthriftEx
    }
    return nil
}

func (c *MyServiceClient) PutDataById(ctx context.Context, id int64, data string) (error) {
    fbthriftReq := &reqMyServicePutDataById{
        Id: id,
        Data: data,
    }
    fbthriftResp := newRespMyServicePutDataById()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "putDataById", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return fbthriftEx
    }
    return nil
}

func (c *MyServiceClient) HasDataById(ctx context.Context, id int64) (bool, error) {
    fbthriftReq := &reqMyServiceHasDataById{
        Id: id,
    }
    fbthriftResp := newRespMyServiceHasDataById()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "hasDataById", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return false, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return false, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *MyServiceClient) GetDataById(ctx context.Context, id int64) (string, error) {
    fbthriftReq := &reqMyServiceGetDataById{
        Id: id,
    }
    fbthriftResp := newRespMyServiceGetDataById()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "getDataById", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return "", fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return "", fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *MyServiceClient) DeleteDataById(ctx context.Context, id int64) (error) {
    fbthriftReq := &reqMyServiceDeleteDataById{
        Id: id,
    }
    fbthriftResp := newRespMyServiceDeleteDataById()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "deleteDataById", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return fbthriftEx
    }
    return nil
}

func (c *MyServiceClient) LobDataById(ctx context.Context, id int64, data string) (error) {
    fbthriftReq := &reqMyServiceLobDataById{
        Id: id,
        Data: data,
    }
    return c.ch.SendRequestNoResponse(ctx, "lobDataById", fbthriftReq)
}

func (c *MyServiceClient) InvalidReturnForHack(ctx context.Context) ([]float32, error) {
    fbthriftReq := &reqMyServiceInvalidReturnForHack{
    }
    fbthriftResp := newRespMyServiceInvalidReturnForHack()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "invalid_return_for_hack", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return nil, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return nil, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *MyServiceClient) RpcSkippedCodegen(ctx context.Context) (error) {
    fbthriftReq := &reqMyServiceRpcSkippedCodegen{
    }
    fbthriftResp := newRespMyServiceRpcSkippedCodegen()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "rpc_skipped_codegen", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return fbthriftEx
    }
    return nil
}


type MyServiceProcessor struct {
    processorFunctionMap map[string]thrift.ProcessorFunction
    functionServiceMap   map[string]string
    handler              MyService
}

func NewMyServiceProcessor(handler MyService) *MyServiceProcessor {
    p := &MyServiceProcessor{
        handler:              handler,
        processorFunctionMap: make(map[string]thrift.ProcessorFunction),
        functionServiceMap:   make(map[string]string),
    }
    p.AddToProcessorFunctionMap("ping", &procFuncMyServicePing{handler: handler})
    p.AddToProcessorFunctionMap("getRandomData", &procFuncMyServiceGetRandomData{handler: handler})
    p.AddToProcessorFunctionMap("sink", &procFuncMyServiceSink{handler: handler})
    p.AddToProcessorFunctionMap("putDataById", &procFuncMyServicePutDataById{handler: handler})
    p.AddToProcessorFunctionMap("hasDataById", &procFuncMyServiceHasDataById{handler: handler})
    p.AddToProcessorFunctionMap("getDataById", &procFuncMyServiceGetDataById{handler: handler})
    p.AddToProcessorFunctionMap("deleteDataById", &procFuncMyServiceDeleteDataById{handler: handler})
    p.AddToProcessorFunctionMap("lobDataById", &procFuncMyServiceLobDataById{handler: handler})
    p.AddToProcessorFunctionMap("invalid_return_for_hack", &procFuncMyServiceInvalidReturnForHack{handler: handler})
    p.AddToProcessorFunctionMap("rpc_skipped_codegen", &procFuncMyServiceRpcSkippedCodegen{handler: handler})
    p.AddToFunctionServiceMap("ping", "MyService")
    p.AddToFunctionServiceMap("getRandomData", "MyService")
    p.AddToFunctionServiceMap("sink", "MyService")
    p.AddToFunctionServiceMap("putDataById", "MyService")
    p.AddToFunctionServiceMap("hasDataById", "MyService")
    p.AddToFunctionServiceMap("getDataById", "MyService")
    p.AddToFunctionServiceMap("deleteDataById", "MyService")
    p.AddToFunctionServiceMap("lobDataById", "MyService")
    p.AddToFunctionServiceMap("invalid_return_for_hack", "MyService")
    p.AddToFunctionServiceMap("rpc_skipped_codegen", "MyService")

    return p
}

func (p *MyServiceProcessor) AddToProcessorFunctionMap(key string, processorFunction thrift.ProcessorFunction) {
    p.processorFunctionMap[key] = processorFunction
}

func (p *MyServiceProcessor) AddToFunctionServiceMap(key, service string) {
    p.functionServiceMap[key] = service
}

func (p *MyServiceProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction) {
    return p.processorFunctionMap[key]
}

func (p *MyServiceProcessor) ProcessorFunctionMap() map[string]thrift.ProcessorFunction {
    return p.processorFunctionMap
}

func (p *MyServiceProcessor) FunctionServiceMap() map[string]string {
    return p.functionServiceMap
}

func (p *MyServiceProcessor) PackageName() string {
    return "module"
}

func (p *MyServiceProcessor) GetThriftMetadata() *metadata.ThriftMetadata {
    return GetThriftMetadataForService("module.MyService")
}


type procFuncMyServicePing struct {
    handler MyService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncMyServicePing)(nil)

func (p *procFuncMyServicePing) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqMyServicePing()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncMyServicePing) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("ping", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncMyServicePing) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    result := newRespMyServicePing()
    err := p.handler.Ping(ctx)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing Ping: " + err.Error(), err)
        return x, x
    }

    return result, nil
}


type procFuncMyServiceGetRandomData struct {
    handler MyService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncMyServiceGetRandomData)(nil)

func (p *procFuncMyServiceGetRandomData) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqMyServiceGetRandomData()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncMyServiceGetRandomData) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("getRandomData", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncMyServiceGetRandomData) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    result := newRespMyServiceGetRandomData()
    retval, err := p.handler.GetRandomData(ctx)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing GetRandomData: " + err.Error(), err)
        return x, x
    }

    result.Success = &retval
    return result, nil
}


type procFuncMyServiceSink struct {
    handler MyService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncMyServiceSink)(nil)

func (p *procFuncMyServiceSink) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqMyServiceSink()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncMyServiceSink) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("sink", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncMyServiceSink) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    args := reqStruct.(*reqMyServiceSink)
    result := newRespMyServiceSink()
    err := p.handler.Sink(ctx, args.Sink)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing Sink: " + err.Error(), err)
        return x, x
    }

    return result, nil
}


type procFuncMyServicePutDataById struct {
    handler MyService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncMyServicePutDataById)(nil)

func (p *procFuncMyServicePutDataById) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqMyServicePutDataById()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncMyServicePutDataById) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("putDataById", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncMyServicePutDataById) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    args := reqStruct.(*reqMyServicePutDataById)
    result := newRespMyServicePutDataById()
    err := p.handler.PutDataById(ctx, args.Id, args.Data)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing PutDataById: " + err.Error(), err)
        return x, x
    }

    return result, nil
}


type procFuncMyServiceHasDataById struct {
    handler MyService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncMyServiceHasDataById)(nil)

func (p *procFuncMyServiceHasDataById) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqMyServiceHasDataById()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncMyServiceHasDataById) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("hasDataById", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncMyServiceHasDataById) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    args := reqStruct.(*reqMyServiceHasDataById)
    result := newRespMyServiceHasDataById()
    retval, err := p.handler.HasDataById(ctx, args.Id)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing HasDataById: " + err.Error(), err)
        return x, x
    }

    result.Success = &retval
    return result, nil
}


type procFuncMyServiceGetDataById struct {
    handler MyService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncMyServiceGetDataById)(nil)

func (p *procFuncMyServiceGetDataById) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqMyServiceGetDataById()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncMyServiceGetDataById) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("getDataById", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncMyServiceGetDataById) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    args := reqStruct.(*reqMyServiceGetDataById)
    result := newRespMyServiceGetDataById()
    retval, err := p.handler.GetDataById(ctx, args.Id)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing GetDataById: " + err.Error(), err)
        return x, x
    }

    result.Success = &retval
    return result, nil
}


type procFuncMyServiceDeleteDataById struct {
    handler MyService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncMyServiceDeleteDataById)(nil)

func (p *procFuncMyServiceDeleteDataById) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqMyServiceDeleteDataById()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncMyServiceDeleteDataById) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("deleteDataById", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncMyServiceDeleteDataById) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    args := reqStruct.(*reqMyServiceDeleteDataById)
    result := newRespMyServiceDeleteDataById()
    err := p.handler.DeleteDataById(ctx, args.Id)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing DeleteDataById: " + err.Error(), err)
        return x, x
    }

    return result, nil
}


type procFuncMyServiceLobDataById struct {
    handler MyService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncMyServiceLobDataById)(nil)

func (p *procFuncMyServiceLobDataById) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqMyServiceLobDataById()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncMyServiceLobDataById) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("lobDataById", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncMyServiceLobDataById) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    args := reqStruct.(*reqMyServiceLobDataById)
    err := p.handler.LobDataById(ctx, args.Id, args.Data)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing LobDataById: " + err.Error(), err)
        return x, x
    }

    return nil, nil
}


type procFuncMyServiceInvalidReturnForHack struct {
    handler MyService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncMyServiceInvalidReturnForHack)(nil)

func (p *procFuncMyServiceInvalidReturnForHack) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqMyServiceInvalidReturnForHack()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncMyServiceInvalidReturnForHack) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("invalid_return_for_hack", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncMyServiceInvalidReturnForHack) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    result := newRespMyServiceInvalidReturnForHack()
    retval, err := p.handler.InvalidReturnForHack(ctx)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing InvalidReturnForHack: " + err.Error(), err)
        return x, x
    }

    result.Success = retval
    return result, nil
}


type procFuncMyServiceRpcSkippedCodegen struct {
    handler MyService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncMyServiceRpcSkippedCodegen)(nil)

func (p *procFuncMyServiceRpcSkippedCodegen) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqMyServiceRpcSkippedCodegen()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncMyServiceRpcSkippedCodegen) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("rpc_skipped_codegen", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncMyServiceRpcSkippedCodegen) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    result := newRespMyServiceRpcSkippedCodegen()
    err := p.handler.RpcSkippedCodegen(ctx)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing RpcSkippedCodegen: " + err.Error(), err)
        return x, x
    }

    return result, nil
}


type DbMixedStackArguments interface {
    GetDataByKey0(ctx context.Context, key string) ([]byte, error)
    GetDataByKey1(ctx context.Context, key string) ([]byte, error)
}

type DbMixedStackArgumentsClientInterface interface {
    io.Closer
    GetDataByKey0(ctx context.Context, key string) ([]byte, error)
    GetDataByKey1(ctx context.Context, key string) ([]byte, error)
}

type DbMixedStackArgumentsClient struct {
    ch thrift.RequestChannel
}
// Compile time interface enforcer
var _ DbMixedStackArgumentsClientInterface = (*DbMixedStackArgumentsClient)(nil)

func NewDbMixedStackArgumentsChannelClient(channel thrift.RequestChannel) *DbMixedStackArgumentsClient {
    return &DbMixedStackArgumentsClient{
        ch: channel,
    }
}

func (c *DbMixedStackArgumentsClient) Close() error {
    return c.ch.Close()
}

func (c *DbMixedStackArgumentsClient) GetDataByKey0(ctx context.Context, key string) ([]byte, error) {
    fbthriftReq := &reqDbMixedStackArgumentsGetDataByKey0{
        Key: key,
    }
    fbthriftResp := newRespDbMixedStackArgumentsGetDataByKey0()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "getDataByKey0", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return nil, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return nil, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *DbMixedStackArgumentsClient) GetDataByKey1(ctx context.Context, key string) ([]byte, error) {
    fbthriftReq := &reqDbMixedStackArgumentsGetDataByKey1{
        Key: key,
    }
    fbthriftResp := newRespDbMixedStackArgumentsGetDataByKey1()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "getDataByKey1", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return nil, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return nil, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}


type DbMixedStackArgumentsProcessor struct {
    processorFunctionMap map[string]thrift.ProcessorFunction
    functionServiceMap   map[string]string
    handler              DbMixedStackArguments
}

func NewDbMixedStackArgumentsProcessor(handler DbMixedStackArguments) *DbMixedStackArgumentsProcessor {
    p := &DbMixedStackArgumentsProcessor{
        handler:              handler,
        processorFunctionMap: make(map[string]thrift.ProcessorFunction),
        functionServiceMap:   make(map[string]string),
    }
    p.AddToProcessorFunctionMap("getDataByKey0", &procFuncDbMixedStackArgumentsGetDataByKey0{handler: handler})
    p.AddToProcessorFunctionMap("getDataByKey1", &procFuncDbMixedStackArgumentsGetDataByKey1{handler: handler})
    p.AddToFunctionServiceMap("getDataByKey0", "DbMixedStackArguments")
    p.AddToFunctionServiceMap("getDataByKey1", "DbMixedStackArguments")

    return p
}

func (p *DbMixedStackArgumentsProcessor) AddToProcessorFunctionMap(key string, processorFunction thrift.ProcessorFunction) {
    p.processorFunctionMap[key] = processorFunction
}

func (p *DbMixedStackArgumentsProcessor) AddToFunctionServiceMap(key, service string) {
    p.functionServiceMap[key] = service
}

func (p *DbMixedStackArgumentsProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction) {
    return p.processorFunctionMap[key]
}

func (p *DbMixedStackArgumentsProcessor) ProcessorFunctionMap() map[string]thrift.ProcessorFunction {
    return p.processorFunctionMap
}

func (p *DbMixedStackArgumentsProcessor) FunctionServiceMap() map[string]string {
    return p.functionServiceMap
}

func (p *DbMixedStackArgumentsProcessor) PackageName() string {
    return "module"
}

func (p *DbMixedStackArgumentsProcessor) GetThriftMetadata() *metadata.ThriftMetadata {
    return GetThriftMetadataForService("module.DbMixedStackArguments")
}


type procFuncDbMixedStackArgumentsGetDataByKey0 struct {
    handler DbMixedStackArguments
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncDbMixedStackArgumentsGetDataByKey0)(nil)

func (p *procFuncDbMixedStackArgumentsGetDataByKey0) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqDbMixedStackArgumentsGetDataByKey0()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncDbMixedStackArgumentsGetDataByKey0) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("getDataByKey0", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncDbMixedStackArgumentsGetDataByKey0) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    args := reqStruct.(*reqDbMixedStackArgumentsGetDataByKey0)
    result := newRespDbMixedStackArgumentsGetDataByKey0()
    retval, err := p.handler.GetDataByKey0(ctx, args.Key)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing GetDataByKey0: " + err.Error(), err)
        return x, x
    }

    result.Success = retval
    return result, nil
}


type procFuncDbMixedStackArgumentsGetDataByKey1 struct {
    handler DbMixedStackArguments
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncDbMixedStackArgumentsGetDataByKey1)(nil)

func (p *procFuncDbMixedStackArgumentsGetDataByKey1) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqDbMixedStackArgumentsGetDataByKey1()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncDbMixedStackArgumentsGetDataByKey1) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("getDataByKey1", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncDbMixedStackArgumentsGetDataByKey1) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    args := reqStruct.(*reqDbMixedStackArgumentsGetDataByKey1)
    result := newRespDbMixedStackArgumentsGetDataByKey1()
    retval, err := p.handler.GetDataByKey1(ctx, args.Key)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing GetDataByKey1: " + err.Error(), err)
        return x, x
    }

    result.Success = retval
    return result, nil
}


