{
    "preamble": "",
    "consts": [
        {
            "name": "ASYNC_OP_INVALID",
            "type": "Int64"
        },
        {
            "name": "ASYNC_OP_UNSET",
            "type": "Int64"
        },
        {
            "name": "ASYNC_OP_CONNECT",
            "type": "Int64"
        },
        {
            "name": "ASYNC_OP_QUERY",
            "type": "Int64"
        },
        {
            "name": "ASYNC_OP_FETCH_ROW",
            "type": "Int64"
        }
    ],
    "funcs": [
        {
            "name": "mysql_connect",
            "desc": "Opens or reuses a connection to a MySQL server.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns a MySQL link identifier on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "server",
                    "type": "String",
                    "value": "null_string",
                    "desc": "The MySQL server. It can also include a port number. e.g. \"hostname:port\" or a path to a local socket e.g. \":\/path\/to\/socket\" for the localhost.\n\nIf the PHP directive mysql.default_host is undefined (default), then the default value is 'localhost:3306'. In SQL safe mode, this parameter is ignored and value 'localhost:3306' is always used."
                },
                {
                    "name": "username",
                    "type": "String",
                    "value": "null_string",
                    "desc": "The username. Default value is defined by mysql.default_user. In SQL safe mode, this parameter is ignored and the name of the user that owns the server process is used."
                },
                {
                    "name": "password",
                    "type": "String",
                    "value": "null_string",
                    "desc": "The password. Default value is defined by mysql.default_password. In SQL safe mode, this parameter is ignored and empty password is used."
                },
                {
                    "name": "new_link",
                    "type": "Boolean",
                    "value": "false",
                    "desc": "If a second call is made to mysql_connect() with the same arguments, no new link will be established, but instead, the link identifier of the already opened link will be returned. The new_link parameter modifies this behavior and makes mysql_connect() always open a new link, even if mysql_connect() was called before with the same parameters. In SQL safe mode, this parameter is ignored."
                },
                {
                    "name": "client_flags",
                    "type": "Int32",
                    "value": "0",
                    "desc": "The client_flags parameter can be a combination of the following constants: 128 (enable LOAD DATA LOCAL handling), MYSQL_CLIENT_SSL, MYSQL_CLIENT_COMPRESS, MYSQL_CLIENT_IGNORE_SPACE or MYSQL_CLIENT_INTERACTIVE. Read the section about MySQL client constants for further information. In SQL safe mode, this parameter is ignored."
                },
                {
                    "name": "connect_timeout_ms",
                    "type": "Int32",
                    "value": "-1",
                    "desc": "(HipHop specific) How many milli-seconds to wait for connection."
                },
                {
                    "name": "query_timeout_ms",
                    "type": "Int32",
                    "value": "-1",
                    "desc": "(HipHop specific) How many milli-seconds to wait for query."
                }
            ]
        },
        {
            "name": "mysql_async_connect_start",
            "desc": "Initiate an asynchronous (non-blocking) connection to the specified MySQL server.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Initiate an asynchronos mysql connect."
            },
            "args": [
                {
                    "name": "server",
                    "type": "String",
                    "value": "null_string",
                    "desc": "The MySQL server. It can also include a port number. e.g. \"hostname:port\" or a path to a local socket e.g. \":\/path\/to\/socket\" for the localhost.\n\nIf the PHP directive mysql.default_host is undefined (default), then the default value is 'localhost:3306'. In SQL safe mode, this parameter is ignored and value 'localhost:3306' is always used."
                },
                {
                    "name": "username",
                    "type": "String",
                    "value": "null_string",
                    "desc": "The username. Default value is defined by mysql.default_user. In SQL safe mode, this parameter is ignored and the name of the user that owns the server process is used."
                },
                {
                    "name": "password",
                    "type": "String",
                    "value": "null_string",
                    "desc": "The password. Default value is defined by mysql.default_password. In SQL safe mode, this parameter is ignored and empty password is used."
                },
                {
                    "name": "database",
                    "type": "String",
                    "desc": "The name of the database that will be selected.",
                    "value": "null_string"
                }
            ]
        },
        {
            "name": "mysql_async_connect_completed",
            "desc": "A nonblocking test whether a connection has completed, or errored out.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Boolean",
                "desc": "Has the connection finished (either successfully or with error)."
            },
            "args": [
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_async_query_start",
            "desc": "Initiate a nonblocking query on a given connection.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Boolean",
                "desc": "TRUE if the query can properly be prepared and queued on the network."
            },
            "args": [
                {
                    "name": "query",
                    "type": "String",
                    "desc": "An SQL query\n\nThe query string should not end with a semicolon. Data inside the query should be properly escaped."
                },
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_async_query_result",
            "desc": "Fetch a result object, if available, containing some rows of the nonblocking query.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "A mysql result object, or null if one isn't ready yet."
            },
            "args": [
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_async_query_completed",
            "desc": "Perform a nonblocking test whether an asynchronous query has completed.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Boolean",
                "desc": "True if the the query has completed (i.e., either all rows have been returned or an error occurred)."
            },
            "args": [
                {
                    "name": "result",
                    "type": "Variant",
                    "desc": "The mysql result object from mysql_async_query_result."
                }
            ]
        },
        {
            "name": "mysql_async_fetch_array",
            "desc": "Returns an array that corresponds to the fetched row, if available.  Nonblocking.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns an array of strings that corresponds to the fetched row, or FALSE if there are no rows currently available. The type of returned array depends on how result_type is defined. By using MYSQL_BOTH, you'll get an array with both associative and number indices. Using MYSQL_ASSOC (the default), you only get associative indices (as mysql_fetch_assoc() works), using MYSQL_NUM, you only get number indices (as mysql_fetch_row() works).\n\nIf two or more columns of the result have the same field names, the last column will take precedence. To access the other column(s) of the same name, you must use the numeric index of the column or make an alias for the column. For aliased columns, you cannot access the contents with the original column name."
            },
            "args": [
                {
                    "name": "result",
                    "type": "Variant",
                    "desc": "resource that is being evaluated. This result comes from a call to mysql_async_query_result()."
                },
                {
                    "name": "result_type",
                    "type": "Int32",
                    "value": "1",
                    "desc": "The type of array that is to be fetched. It's a constant and can take the following values: MYSQL_ASSOC, MYSQL_NUM, and MYSQL_BOTH.  The default is MYSQL_ASSOC (1)"
                }
            ]
        },
        {
            "name": "mysql_async_wait_actionable",
            "desc": "Block on one or more asynchronous operations, or until the specified timeout has occurred.  Returns values from the 'items' parameter when they become actionable.  Entries are returned as soon as they are actionable (i.e., it does not wait for the entire timeout before returning results).",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns input entries that are now ready for action (such as a connection has completed or rows are available)."
            },
            "args": [
                {
                    "name": "items",
                    "type": "Variant",
                    "desc": "An array of arrays.  These arrays contain a MySQL link identifier in the 0'th position, and any other values in the remainder of the array.  Items from this parameter are returned unmodified as the result set of actionable entries."
                },
                {
                    "name": "timeout",
                    "type": "Double",
                    "desc": "Time, in seconds, to wait for actionable events.  Subsecond accuracy is supported."
                }
            ]
        },
        {
            "name": "mysql_async_status",
            "desc": "Returns the async operation status for a given mysql connection.  For non-async connections, this returns ASYNC_OP_INVALID.  For an async connection, this can be either ASYNC_OP_UNSET (no pending async operation), ASYNC_OP_QUERY (async query pending), ASYNC_OP_FETCH_ROW (async row fetching pending), or ASYNC_OP_CONNECT (async connection pending).  Returns -1 if the supplied connection itself is invalid.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Int64",
                "desc": "Returns the async operation number for this mysql connection."
            },
            "args": [
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "desc": "The MySQL connection."
                }
            ]
        },
        {
            "name": "mysql_pconnect",
            "desc": "Establishes a persistent connection to a MySQL server.\n\nmysql_pconnect() acts very much like mysql_connect() with two major differences.\n\nFirst, when connecting, the function would first try to find a (persistent) link that's already open with the same host, username and password. If one is found, an identifier for it will be returned instead of opening a new connection.\n\nSecond, the connection to the SQL server will not be closed when the execution of the script ends. Instead, the link will remain open for future use (mysql_close() will not close links established by mysql_pconnect()).\n\nThis type of link is therefore called 'persistent'.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns a MySQL persistent link identifier on success, or FALSE on failure."
            },
            "args": [
                {
                    "name": "server",
                    "type": "String",
                    "value": "null_string",
                    "desc": "The MySQL server. It can also include a port number. e.g. \"hostname:port\" or a path to a local socket e.g. \":\/path\/to\/socket\" for the localhost.\n\nIf the PHP directive mysql.default_host is undefined (default), then the default value is 'localhost:3306'"
                },
                {
                    "name": "username",
                    "type": "String",
                    "value": "null_string",
                    "desc": "The username. Default value is the name of the user that owns the server process."
                },
                {
                    "name": "password",
                    "type": "String",
                    "value": "null_string",
                    "desc": "The password. Default value is an empty password."
                },
                {
                    "name": "client_flags",
                    "type": "Int32",
                    "value": "0",
                    "desc": "The client_flags parameter can be a combination of the following constants: 128 (enable LOAD DATA LOCAL handling), MYSQL_CLIENT_SSL, MYSQL_CLIENT_COMPRESS, MYSQL_CLIENT_IGNORE_SPACE or MYSQL_CLIENT_INTERACTIVE."
                },
                {
                    "name": "connect_timeout_ms",
                    "type": "Int32",
                    "value": "-1",
                    "desc": "(HipHop specific) How many milli-seconds to wait for connection."
                },
                {
                    "name": "query_timeout_ms",
                    "type": "Int32",
                    "value": "-1",
                    "desc": "(HipHop specific) How many milli-seconds to wait for query."
                }
            ]
        },
        {
            "name": "mysql_connect_with_db",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant"
            },
            "args": [
                {
                    "name": "server",
                    "type": "String",
                    "value": "null_string"
                },
                {
                    "name": "username",
                    "type": "String",
                    "value": "null_string"
                },
                {
                    "name": "password",
                    "type": "String",
                    "value": "null_string"
                },
                {
                    "name": "database",
                    "type": "String",
                    "value": "null_string"
                },
                {
                    "name": "new_link",
                    "type": "Boolean",
                    "value": "false"
                },
                {
                    "name": "client_flags",
                    "type": "Int32",
                    "value": "0"
                },
                {
                    "name": "connect_timeout_ms",
                    "type": "Int32",
                    "value": "-1"
                },
                {
                    "name": "query_timeout_ms",
                    "type": "Int32",
                    "value": "-1"
                }
            ]
        },
        {
            "name": "mysql_pconnect_with_db",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant"
            },
            "args": [
                {
                    "name": "server",
                    "type": "String",
                    "value": "null_string"
                },
                {
                    "name": "username",
                    "type": "String",
                    "value": "null_string"
                },
                {
                    "name": "password",
                    "type": "String",
                    "value": "null_string"
                },
                {
                    "name": "database",
                    "type": "String",
                    "value": "null_string"
                },
                {
                    "name": "client_flags",
                    "type": "Int32",
                    "value": "0"
                },
                {
                    "name": "connect_timeout_ms",
                    "type": "Int32",
                    "value": "-1"
                },
                {
                    "name": "query_timeout_ms",
                    "type": "Int32",
                    "value": "-1"
                }
            ]
        },
        {
            "name": "mysql_set_charset",
            "desc": "Sets the default character set for the current connection.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "charset",
                    "type": "String",
                    "desc": "A valid character set name."
                },
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_ping",
            "desc": "Checks whether or not the connection to the server is working. If it has gone down, an automatic reconnection is attempted. This function can be used by scripts that remain idle for a long while, to check whether or not the server has closed the connection and reconnect if necessary.\n\nSince MySQL 5.0.13, automatic reconnection feature is disabled.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns TRUE if the connection to the server MySQL server is working, otherwise FALSE."
            },
            "args": [
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_escape_string",
            "desc": "This function will escape the unescaped_string, so that it is safe to place it in a mysql_query(). This function is deprecated.\n\nThis function is identical to mysql_real_escape_string() except that mysql_real_escape_string() takes a connection handler and escapes the string according to the current character set. mysql_escape_string() does not take a connection argument and does not respect the current charset setting. WarningThis function has been DEPRECATED as of PHP 5.3.0. Relying on this feature is highly discouraged.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "String",
                "desc": "Returns the escaped string."
            },
            "args": [
                {
                    "name": "unescaped_string",
                    "type": "String",
                    "desc": "The string that is to be escaped."
                }
            ]
        },
        {
            "name": "mysql_real_escape_string",
            "desc": "Escapes special characters in the unescaped_string, taking into account the current character set of the connection so that it is safe to place it in a mysql_query(). If binary data is to be inserted, this function must be used.\n\nmysql_real_escape_string() calls MySQL's library function mysql_real_escape_string, which prepends backslashes to the following characters: \\x00, \\n, \\r, \\, ', \" and \\x1a.\n\nThis function must always (with few exceptions) be used to make data safe before sending a query to MySQL.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the escaped string, or FALSE on error."
            },
            "args": [
                {
                    "name": "unescaped_string",
                    "type": "String",
                    "desc": "The string that is to be escaped."
                },
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_client_encoding",
            "desc": "Retrieves the character_set variable from MySQL.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the default character set name for the current connection."
            },
            "args": [
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_close",
            "desc": "mysql_close() closes the non-persistent connection to the MySQL server that's associated with the specified link identifier. If link_identifier isn't specified, the last opened link is used.\n\nUsing mysql_close() isn't usually necessary, as non-persistent open links are automatically closed at the end of the script's execution. See also freeing resources.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_errno",
            "desc": "Returns the error number from the last MySQL function.\n\nErrors coming back from the MySQL database backend no longer issue warnings. Instead, use mysql_errno() to retrieve the error code. Note that this function only returns the error code from the most recently executed MySQL function (not including mysql_error() and mysql_errno()), so if you want to use it, make sure you check the value before calling another MySQL function.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the error number from the last MySQL function, or 0 (zero) if no error occurred."
            },
            "args": [
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_error",
            "desc": "Returns the error text from the last MySQL function. Errors coming back from the MySQL database backend no longer issue warnings. Instead, use mysql_error() to retrieve the error text. Note that this function only returns the error text from the most recently executed MySQL function (not including mysql_error() and mysql_errno()), so if you want to use it, make sure you check the value before calling another MySQL function.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the error text from the last MySQL function, or '' (empty string) if no error occurred."
            },
            "args": [
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_warning_count",
            "desc": "Returns the number of errors generated during execution of the previous SQL statement. To retrieve warning messages you can use the SQL command SHOW WARNINGS [limit row_count].",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the number of warnings from the last MySQL function, or 0 (zero) if no warnings occurred."
            },
            "args": [
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_get_client_info",
            "desc": "mysql_get_client_info() returns a string that represents the client library version.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "String",
                "desc": "The MySQL client version."
            },
            "args": [
            ]
        },
        {
            "name": "mysql_get_host_info",
            "desc": "Describes the type of connection in use for the connection, including the server host name.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns a string describing the type of MySQL connection in use for the connection or FALSE on failure."
            },
            "args": [
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_get_proto_info",
            "desc": "Retrieves the MySQL protocol.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the MySQL protocol on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_get_server_info",
            "desc": "Retrieves the MySQL server version.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the MySQL server version on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_info",
            "desc": "Returns detailed information about the last query.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns information about the statement on success, or FALSE on failure. See the example below for which statements provide information, and what the returned value may look like. Statements that are not listed will return FALSE."
            },
            "args": [
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_insert_id",
            "desc": "Retrieves the ID generated for an AUTO_INCREMENT column by the previous query (usually INSERT).",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "The ID generated for an AUTO_INCREMENT column by the previous query on success, 0 if the previous query does not generate an AUTO_INCREMENT value, or FALSE if no MySQL connection was established."
            },
            "args": [
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_stat",
            "desc": "mysql_stat() returns the current server status.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns a string with the status for uptime, threads, queries, open tables, flush tables and queries per second. For a complete list of other status variables, you have to use the SHOW STATUS SQL command. If link_identifier is invalid, NULL is returned."
            },
            "args": [
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_thread_id",
            "desc": "Retrieves the current thread ID. If the connection is lost, and a reconnect with mysql_ping() is executed, the thread ID will change. This means only retrieve the thread ID when needed.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "The thread ID on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_create_db",
            "desc": "mysql_create_db() attempts to create a new database on the server associated with the specified link identifier.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "db",
                    "type": "String",
                    "desc": "The name of the database being created."
                },
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_select_db",
            "desc": "Sets the current active database on the server that's associated with the specified link identifier. Every subsequent call to mysql_query() will be made on the active database.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "db",
                    "type": "String",
                    "desc": "The name of the database that is to be selected."
                },
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_drop_db",
            "desc": "mysql_drop_db() attempts to drop (remove) an entire database from the server associated with the specified link identifier. This function is deprecated, it is preferable to use mysql_query() to issue an sql DROP DATABASE statement instead.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "db",
                    "type": "String",
                    "desc": "The name of the database that will be deleted."
                },
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_affected_rows",
            "desc": "Get the number of affected rows by the last INSERT, UPDATE, REPLACE or DELETE query associated with link_identifier.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the number of affected rows on success, and -1 if the last query failed.\n\nIf the last query was a DELETE query with no WHERE clause, all of the records will have been deleted from the table but this function will return zero with MySQL versions prior to 4.1.2.\n\nWhen using UPDATE, MySQL will not update columns where the new value is the same as the old value. This creates the possibility that mysql_affected_rows() may not actually equal the number of rows matched, only the number of rows that were literally affected by the query.\n\nThe REPLACE statement first deletes the record with the same primary key and then inserts the new record. This function returns the number of deleted records plus the number of inserted records."
            },
            "args": [
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_set_timeout",
            "desc": "Sets query timeout for a connection.",
            "flags": [
                "HasDocComment",
                "HipHopSpecific"
            ],
            "return": {
                "type": "Boolean"
            },
            "args": [
                {
                    "name": "query_timeout_ms",
                    "type": "Int32",
                    "value": "-1",
                    "desc": "How many milli-seconds to wait for an SQL query."
                },
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "value": "null",
                    "desc": "Which connection to set to. If absent, default or current connection will be applied to."
                }
            ]
        },
        {
            "name": "mysql_query",
            "desc": "mysql_query() sends a unique query (multiple queries are not supported) to the currently active database on the server that's associated with the specified link_identifier.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "For SELECT, SHOW, DESCRIBE, EXPLAIN and other statements returning resultset, mysql_query() returns a resource on success, or FALSE on error.\n\nFor other type of SQL statements, INSERT, UPDATE, DELETE, DROP, etc, mysql_query() returns TRUE on success or FALSE on error.\n\nThe returned result resource should be passed to mysql_fetch_array(), and other functions for dealing with result tables, to access the returned data.\n\nUse mysql_num_rows() to find out how many rows were returned for a SELECT statement or mysql_affected_rows() to find out how many rows were affected by a DELETE, INSERT, REPLACE, or UPDATE statement.\n\nmysql_query() will also fail and return FALSE if the user does not have permission to access the table(s) referenced by the query."
            },
            "args": [
                {
                    "name": "query",
                    "type": "String",
                    "desc": "An SQL query\n\nThe query string should not end with a semicolon. Data inside the query should be properly escaped."
                },
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_multi_query",
            "desc": "mysql_multi_query() executes one or more queries separated by a ; to the currently active database on the server that's associated with the specified link_identifier.",
            "flags": [
                "HasDocComment",
                "HipHopSpecific"
            ],
            "return": {
                "type": "Variant",
                "desc": "This is a fb specific query so behaviour is a little random at the moment."
            },
            "args": [
                {
                    "name": "query",
                    "type": "String",
                    "desc": "An SQL query\n\nThe query string should not end with a semicolon. Data inside the query should be properly escaped."
                },
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_next_result",
            "desc": "Used with mysql_multi_query() to move the result set on one.",
            "flags": [
                "HasDocComment",
                "HipHopSpecific"
            ],
            "return": {
                "type": "Boolean",
                "desc": "True if the iterator has more results after this one. False if there was none."
            },
            "args": [
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_more_results",
            "desc": "Used with mysql_multi_query() to check if there are more result sets to be returned.",
            "flags": [
                "HasDocComment",
                "HipHopSpecific"
            ],
            "return": {
                "type": "Boolean",
                "desc": "True if there is at least one more item in the result set."
            },
            "args": [
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_fetch_result",
            "desc": "Used with mysql_multi_query() to return a mysql result for the current iterated query.",
            "flags": [
                "HasDocComment",
                "HipHopSpecific"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns a resource or a boolean."
            },
            "args": [
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_unbuffered_query",
            "desc": "mysql_unbuffered_query() sends the SQL query query to MySQL without automatically fetching and buffering the result rows as mysql_query() does. This saves a considerable amount of memory with SQL queries that produce large result sets, and you can start working on the result set immediately after the first row has been retrieved as you don't have to wait until the complete SQL query has been performed. To use mysql_unbuffered_query() while multiple database connections are open, you must specify the optional parameter link_identifier to identify which connection you want to use.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "For SELECT, SHOW, DESCRIBE or EXPLAIN statements, mysql_unbuffered_query() returns a resource on success, or FALSE on error.\n\nFor other type of SQL statements, UPDATE, DELETE, DROP, etc, mysql_unbuffered_query() returns TRUE on success or FALSE on error."
            },
            "args": [
                {
                    "name": "query",
                    "type": "String",
                    "desc": "The SQL query to execute.\n\nData inside the query should be properly escaped."
                },
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_db_query",
            "desc": "mysql_db_query() selects a database, and executes a query on it. WarningThis function has been DEPRECATED as of PHP 5.3.0. Relying on this feature is highly discouraged.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns a positive MySQL result resource to the query result, or FALSE on error. The function also returns TRUE\/FALSE for INSERT\/UPDATE\/DELETE queries to indicate success\/failure."
            },
            "args": [
                {
                    "name": "database",
                    "type": "String",
                    "desc": "The name of the database that will be selected."
                },
                {
                    "name": "query",
                    "type": "String",
                    "desc": "The MySQL query.\n\nData inside the query should be properly escaped."
                },
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_list_dbs",
            "desc": "Returns a result pointer containing the databases available from the current mysql daemon.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns a result pointer resource on success, or FALSE on failure. Use the mysql_tablename() function to traverse this result pointer, or any function for result tables, such as mysql_fetch_array()."
            },
            "args": [
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_list_tables",
            "desc": "Retrieves a list of table names from a MySQL database.\n\nThis function is deprecated. It is preferable to use mysql_query() to issue an SQL SHOW TABLES [FROM db_name] [LIKE 'pattern'] statement instead.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "A result pointer resource on success or FALSE on failure.\n\nUse the mysql_tablename() function to traverse this result pointer, or any function for result tables, such as mysql_fetch_array()."
            },
            "args": [
                {
                    "name": "database",
                    "type": "String",
                    "desc": "The name of the database"
                },
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_list_fields",
            "desc": "Retrieves information about the given table name.\n\nThis function is deprecated. It is preferable to use mysql_query() to issue an SQL SHOW COLUMNS FROM table [LIKE 'name'] statement instead.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "A result pointer resource on success, or FALSE on failure.\n\nThe returned result can be used with mysql_field_flags(), mysql_field_len(), mysql_field_name() and mysql_field_type()."
            },
            "args": [
                {
                    "name": "database_name",
                    "type": "String",
                    "desc": "The name of the database that's being queried."
                },
                {
                    "name": "table_name",
                    "type": "String",
                    "desc": "The name of the table that's being queried."
                },
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_list_processes",
            "desc": "Retrieves the current MySQL server threads.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "A result pointer resource on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "link_identifier",
                    "type": "Variant",
                    "value": "null",
                    "desc": "The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated."
                }
            ]
        },
        {
            "name": "mysql_db_name",
            "desc": "Retrieve the database name from a call to mysql_list_dbs().",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the database name on success, and FALSE on failure. If FALSE is returned, use mysql_error() to determine the nature of the error."
            },
            "args": [
                {
                    "name": "result",
                    "type": "Variant",
                    "desc": "The result pointer from a call to mysql_list_dbs()."
                },
                {
                    "name": "row",
                    "type": "Int32",
                    "desc": "The index into the result set."
                },
                {
                    "name": "field",
                    "type": "Variant",
                    "value": "null_variant",
                    "desc": "The field name."
                }
            ]
        },
        {
            "name": "mysql_tablename",
            "desc": "Retrieves the table name from a result.\n\nThis function is deprecated. It is preferable to use mysql_query() to issue an SQL SHOW TABLES [FROM db_name] [LIKE 'pattern'] statement instead.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "The name of the table on success or FALSE on failure.\n\nUse the mysql_tablename() function to traverse this result pointer, or any function for result tables, such as mysql_fetch_array()."
            },
            "args": [
                {
                    "name": "result",
                    "type": "Variant",
                    "desc": "A result pointer resource that's returned from mysql_list_tables()."
                },
                {
                    "name": "i",
                    "type": "Int32",
                    "desc": "The integer index (row\/table number)"
                }
            ]
        },
        {
            "name": "mysql_num_fields",
            "desc": "Retrieves the number of fields from a query.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the number of fields in the result set resource on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "result",
                    "type": "Variant",
                    "desc": "resource that is being evaluated. This result comes from a call to mysql_query()."
                }
            ]
        },
        {
            "name": "mysql_num_rows",
            "desc": "Retrieves the number of rows from a result set. This command is only valid for statements like SELECT or SHOW that return an actual result set. To retrieve the number of rows affected by a INSERT, UPDATE, REPLACE or DELETE query, use mysql_affected_rows().",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "The number of rows in a result set on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "result",
                    "type": "Variant",
                    "desc": "resource that is being evaluated. This result comes from a call to mysql_query()."
                }
            ]
        },
        {
            "name": "mysql_free_result",
            "desc": "mysql_free_result() will free all memory associated with the result identifier result.\n\nmysql_free_result() only needs to be called if you are concerned about how much memory is being used for queries that return large result sets. All associated result memory is automatically freed at the end of the script's execution.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns TRUE on success or FALSE on failure.\n\nIf a non-resource is used for the result, an error of level E_WARNING will be emitted. It's worth noting that mysql_query() only returns a resource for SELECT, SHOW, EXPLAIN, and DESCRIBE queries."
            },
            "args": [
                {
                    "name": "result",
                    "type": "Variant",
                    "desc": "resource that is being evaluated. This result comes from a call to mysql_query()."
                }
            ]
        },
        {
            "name": "mysql_data_seek",
            "desc": "mysql_data_seek() moves the internal row pointer of the MySQL result associated with the specified result identifier to point to the specified row number. The next call to a MySQL fetch function, such as mysql_fetch_assoc(), would return that row.\n\nrow_number starts at 0. The row_number should be a value in the range from 0 to mysql_num_rows() - 1. However if the result set is empty (mysql_num_rows() == 0), a seek to 0 will fail with a E_WARNING and mysql_data_seek() will return FALSE.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "result",
                    "type": "Variant",
                    "desc": "resource that is being evaluated. This result comes from a call to mysql_query()."
                },
                {
                    "name": "row",
                    "type": "Int32",
                    "desc": "The desired row number of the new result pointer."
                }
            ]
        },
        {
            "name": "mysql_fetch_row",
            "desc": "Returns a numerical array that corresponds to the fetched row and moves the internal data pointer ahead.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns an numerical array of strings that corresponds to the fetched row, or FALSE if there are no more rows.\n\nmysql_fetch_row() fetches one row of data from the result associated with the specified result identifier. The row is returned as an array. Each result column is stored in an array offset, starting at offset 0."
            },
            "args": [
                {
                    "name": "result",
                    "type": "Variant",
                    "desc": "resource that is being evaluated. This result comes from a call to mysql_query()."
                }
            ]
        },
        {
            "name": "mysql_fetch_assoc",
            "desc": "Returns an associative array that corresponds to the fetched row and moves the internal data pointer ahead. mysql_fetch_assoc() is equivalent to calling mysql_fetch_array() with MYSQL_ASSOC for the optional second parameter. It only returns an associative array.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns an associative array of strings that corresponds to the fetched row, or FALSE if there are no more rows.\n\nIf two or more columns of the result have the same field names, the last column will take precedence. To access the other column(s) of the same name, you either need to access the result with numeric indices by using mysql_fetch_row() or add alias names. See the example at the mysql_fetch_array() description about aliases."
            },
            "args": [
                {
                    "name": "result",
                    "type": "Variant",
                    "desc": "resource that is being evaluated. This result comes from a call to mysql_query()."
                }
            ]
        },
        {
            "name": "mysql_fetch_array",
            "desc": "Returns an array that corresponds to the fetched row and moves the internal data pointer ahead.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns an array of strings that corresponds to the fetched row, or FALSE if there are no more rows. The type of returned array depends on how result_type is defined. By using MYSQL_BOTH (default), you'll get an array with both associative and number indices. Using MYSQL_ASSOC, you only get associative indices (as mysql_fetch_assoc() works), using MYSQL_NUM, you only get number indices (as mysql_fetch_row() works).\n\nIf two or more columns of the result have the same field names, the last column will take precedence. To access the other column(s) of the same name, you must use the numeric index of the column or make an alias for the column. For aliased columns, you cannot access the contents with the original column name."
            },
            "args": [
                {
                    "name": "result",
                    "type": "Variant",
                    "desc": "resource that is being evaluated. This result comes from a call to mysql_query()."
                },
                {
                    "name": "result_type",
                    "type": "Int32",
                    "value": "3",
                    "desc": "The type of array that is to be fetched. It's a constant and can take the following values: MYSQL_ASSOC, MYSQL_NUM, and MYSQL_BOTH."
                }
            ]
        },
        {
            "name": "mysql_fetch_lengths",
            "desc": "Returns an array that corresponds to the lengths of each field in the last row fetched by MySQL.\n\nmysql_fetch_lengths() stores the lengths of each result column in the last row returned by mysql_fetch_row(), mysql_fetch_assoc(), mysql_fetch_array(), and mysql_fetch_object() in an array, starting at offset 0.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "An array of lengths on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "result",
                    "type": "Variant",
                    "desc": "resource that is being evaluated. This result comes from a call to mysql_query()."
                }
            ]
        },
        {
            "name": "mysql_fetch_object",
            "desc": "Returns an object with properties that correspond to the fetched row and moves the internal data pointer ahead.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns an object with string properties that correspond to the fetched row, or FALSE if there are no more rows."
            },
            "args": [
                {
                    "name": "result",
                    "type": "Variant",
                    "desc": "resource that is being evaluated. This result comes from a call to mysql_query()."
                },
                {
                    "name": "class_name",
                    "type": "String",
                    "value": "\"stdClass\"",
                    "desc": "The name of the class to instantiate, set the properties of and return. If not specified, a stdClass object is returned."
                },
                {
                    "name": "params",
                    "type": "VariantVec",
                    "value": "null",
                    "desc": "An optional array of parameters to pass to the constructor for class_name objects."
                }
            ]
        },
        {
            "name": "mysql_result",
            "desc": "Retrieves the contents of one cell from a MySQL result set.\n\nWhen working on large result sets, you should consider using one of the functions that fetch an entire row (specified below). As these functions return the contents of multiple cells in one function call, they're MUCH quicker than mysql_result(). Also, note that specifying a numeric offset for the field argument is much quicker than specifying a fieldname or tablename.fieldname argument.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "The contents of one cell from a MySQL result set on success, or FALSE on failure."
            },
            "args": [
                {
                    "name": "result",
                    "type": "Variant",
                    "desc": "resource that is being evaluated. This result comes from a call to mysql_query()."
                },
                {
                    "name": "row",
                    "type": "Int32",
                    "desc": "The row number from the result that's being retrieved. Row numbers start at 0."
                },
                {
                    "name": "field",
                    "type": "Variant",
                    "value": "null_variant",
                    "desc": "The name or offset of the field being retrieved.\n\nIt can be the field's offset, the field's name, or the field's table dot field name (tablename.fieldname). If the column name has been aliased ('select foo as bar from...'), use the alias instead of the column name. If undefined, the first field is retrieved."
                }
            ]
        },
        {
            "name": "mysql_fetch_field",
            "desc": "Returns an object containing field information. This function can be used to obtain information about fields in the provided query result.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns an object containing field information. The properties of the object are:\n\nname - column name table - name of the table the column belongs to max_length - maximum length of the column not_null - 1 if the column cannot be NULL primary_key - 1 if the column is a primary key unique_key - 1 if the column is a unique key multiple_key - 1 if the column is a non-unique key numeric - 1 if the column is numeric blob - 1 if the column is a BLOB type - the type of the column unsigned - 1 if the column is unsigned zerofill - 1 if the column is zero-filled"
            },
            "args": [
                {
                    "name": "result",
                    "type": "Variant",
                    "desc": "resource that is being evaluated. This result comes from a call to mysql_query()."
                },
                {
                    "name": "field",
                    "type": "Int32",
                    "value": "-1",
                    "desc": "The numerical field offset. If the field offset is not specified, the next field that was not yet retrieved by this function is retrieved. The field_offset starts at 0."
                }
            ]
        },
        {
            "name": "mysql_field_seek",
            "desc": "Seeks to the specified field offset. If the next call to mysql_fetch_field() doesn't include a field offset, the field offset specified in mysql_field_seek() will be returned.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "result",
                    "type": "Variant",
                    "desc": "resource that is being evaluated. This result comes from a call to mysql_query()."
                },
                {
                    "name": "field",
                    "type": "Int32",
                    "value": "0",
                    "desc": "The numerical field offset. The field_offset starts at 0. If field_offset does not exist, an error of level E_WARNING is also issued."
                }
            ]
        },
        {
            "name": "mysql_field_name",
            "desc": "mysql_field_name() returns the name of the specified field index.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "The name of the specified field index on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "result",
                    "type": "Variant",
                    "desc": "resource that is being evaluated. This result comes from a call to mysql_query()."
                },
                {
                    "name": "field",
                    "type": "Int32",
                    "value": "0",
                    "desc": "The numerical field offset. The field_offset starts at 0. If field_offset does not exist, an error of level E_WARNING is also issued."
                }
            ]
        },
        {
            "name": "mysql_field_table",
            "desc": "Returns the name of the table that the specified field is in.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "The name of the table on success."
            },
            "args": [
                {
                    "name": "result",
                    "type": "Variant",
                    "desc": "resource that is being evaluated. This result comes from a call to mysql_query()."
                },
                {
                    "name": "field",
                    "type": "Int32",
                    "value": "0",
                    "desc": "The numerical field offset. The field_offset starts at 0. If field_offset does not exist, an error of level E_WARNING is also issued."
                }
            ]
        },
        {
            "name": "mysql_field_len",
            "desc": "mysql_field_len() returns the length of the specified field.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "The length of the specified field index on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "result",
                    "type": "Variant",
                    "desc": "resource that is being evaluated. This result comes from a call to mysql_query()."
                },
                {
                    "name": "field",
                    "type": "Int32",
                    "value": "0",
                    "desc": "The numerical field offset. The field_offset starts at 0. If field_offset does not exist, an error of level E_WARNING is also issued."
                }
            ]
        },
        {
            "name": "mysql_field_type",
            "desc": "mysql_field_type() is similar to the mysql_field_name() function. The arguments are identical, but the field type is returned instead.",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "The returned field type will be one of \"int\", \"real\", \"string\", \"blob\", and others as detailed in the MySQL documentation."
            },
            "args": [
                {
                    "name": "result",
                    "type": "Variant",
                    "desc": "resource that is being evaluated. This result comes from a call to mysql_query()."
                },
                {
                    "name": "field",
                    "type": "Int32",
                    "value": "0",
                    "desc": "The numerical field offset. The field_offset starts at 0. If field_offset does not exist, an error of level E_WARNING is also issued."
                }
            ]
        },
        {
            "name": "mysql_field_flags",
            "desc": "mysql_field_flags() returns the field flags of the specified field. The flags are reported as a single word per flag separated by a single space, so that you can split the returned value using explode().",
            "flags": [
                "HasDocComment"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns a string of flags associated with the result or FALSE on failure.\n\nThe following flags are reported, if your version of MySQL is current enough to support them: \"not_null\", \"primary_key\", \"unique_key\", \"multiple_key\", \"blob\", \"unsigned\", \"zerofill\", \"binary\", \"enum\", \"auto_increment\" and \"timestamp\"."
            },
            "args": [
                {
                    "name": "result",
                    "type": "Variant",
                    "desc": "resource that is being evaluated. This result comes from a call to mysql_query()."
                },
                {
                    "name": "field",
                    "type": "Int32",
                    "value": "0",
                    "desc": "The numerical field offset. The field_offset starts at 0. If field_offset does not exist, an error of level E_WARNING is also issued."
                }
            ]
        }
    ],
    "classes": [
    ]
}