{
  "__fbthrift": "@generated",
  "thrift_module" : "hack",
  "includes": {
    "scope": "thrift/annotation/scope.thrift"
  },
  "namespaces": {
    "android": "com.facebook.thrift.annotation.hack_deprecated",
    "go": "thrift.annotation.hack",
    "hs2": "facebook.thrift.annotation.hack",
    "java": "com.facebook.thrift.annotation.hack_deprecated",
    "py": "thrift.annotation.hack",
    "py.asyncio": "facebook_thrift_asyncio.annotation.hack"
  },
  "package": {
    "domain_prefix": "facebook",
    "domain_suffix": "com",
    "path": "thrift/annotation/hack",
    "filename": "hack"
  },
  "structs" :
  {
      "FieldWrapper" : {
        "name" : "FieldWrapper",
        "structured_annotations": {
          "scope.Field" : {
            "type" : {
          "type" : "struct",
          "name" : "Field",
          "path" : "thrift/annotation/scope.thrift"
        },
            "value" : {}
          }
        },
        "docstring" : "An experimental annotation that applies a Hack wrapper to fields.\nFor example:\n\n  struct User {\n    @hack.FieldWrapper{name=\"MyWrapper\"}\n    1: i64 id;\n  }\n",
        "fields" : {
          "name" : {
            "name" : "name",
            "docstring" : "The name of a Hack wrapper class used to wrap the field\n",
            "key" : 1,
            "lineno" : 40,
            "required" : "opt-in-req-out",
            "type" : "string"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 37
      },
      "Wrapper" : {
        "name" : "Wrapper",
        "structured_annotations": {
          "scope.Typedef" : {
            "type" : {
          "type" : "struct",
          "name" : "Typedef",
          "path" : "thrift/annotation/scope.thrift"
        },
            "value" : {}
          },
          "scope.Struct" : {
            "type" : {
          "type" : "struct",
          "name" : "Struct",
          "path" : "thrift/annotation/scope.thrift"
        },
            "value" : {}
          },
          "scope.Field" : {
            "type" : {
          "type" : "struct",
          "name" : "Field",
          "path" : "thrift/annotation/scope.thrift"
        },
            "value" : {}
          }
        },
        "docstring" : "An annotation that applies a Hack wrapper to fields, typedef or structs.\nFor example:\n\n  struct User {\n    @hack.FieldWrapper{name=\"MyWrapper\"}\n    1: i64 id;\n  }\n",
        "fields" : {
          "name" : {
            "name" : "name",
            "docstring" : "The name of a Hack wrapper class used to wrap the field\n",
            "key" : 1,
            "lineno" : 55,
            "required" : "opt-in-req-out",
            "type" : "string"
                  },
          "underlyingName" : {
            "name" : "underlyingName",
            "docstring" : "When applied directly to a typedef or struct, the IDL name of the\ntype will refer to the adapted type in Hack and the underlying thrift struct will be\ngenerated in a nested namespace and/or with a different name. By default the type/struct\nwill be generated in a nested 'thrift_adapted_types' namespace with the same name,\nbut both of these can be changed by setting these fields.\nEmpty string enables the nested namespace and uses the IDL name for the struct.\n",
            "key" : 2,
            "lineno" : 62,
            "required" : "opt-in-req-out",
            "type" : "string"
                  },
          "extraNamespace" : {
            "name" : "extraNamespace",
            "default_value" : "thrift_adapted_types",
            "key" : 3,
            "lineno" : 63,
            "required" : "opt-in-req-out",
            "type" : "string"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 50
      },
      "Adapter" : {
        "name" : "Adapter",
        "structured_annotations": {
          "scope.Typedef" : {
            "type" : {
          "type" : "struct",
          "name" : "Typedef",
          "path" : "thrift/annotation/scope.thrift"
        },
            "value" : {}
          },
          "scope.Field" : {
            "type" : {
          "type" : "struct",
          "name" : "Field",
          "path" : "thrift/annotation/scope.thrift"
        },
            "value" : {}
          }
        },
        "docstring" : "An annotation that applies a Hack adapter to types. For example:\n@hack.Adapter{name=\"\\\\TimestampAdapter\"}\ntypedef i64 Timestamp;\n\n  struct User {\n    1: Timestamp account_creation_time;\n  }\n\nHere the field `account_creation_time` will have type TimestampAdapter::THackType instead of i64.\n\nin hack:\n```\nfinal class TimestampAdapter implements IThriftAdapter {\n  const type TThriftType = int;\n  const type THackType = Time;\n  public static function fromThrift(int $seconds)[]: Time {\n    return Time::fromEpochSeconds($seconds);\n  }\n  public static function toThrift(Time $time): int {\n    return $hack_value->asFullSecondsSinceEpoch();\n  }\n}\n```\nelsewhere in hack:\n```\nfunction timeSinceCreated(Document $doc): Duration {\n  // $doc->created_time is of type Time\n  return Duration::between(Time::now(), $doc->created_time);\n}\n```\nThis completely replaces the underlying type of a thrift for a custom implementation and uses\nthe specified adapter to convert to and from the underlying Thrift type during (de)serialization.\n",
        "fields" : {
          "name" : {
            "name" : "name",
            "docstring" : "The name of a Hack adapter class that implements IThriftAdapter\n",
            "key" : 1,
            "lineno" : 102,
            "required" : "opt-in-req-out",
            "type" : "string"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 98
      },
      "SkipCodegen" : {
        "name" : "SkipCodegen",
        "structured_annotations": {
          "scope.Typedef" : {
            "type" : {
          "type" : "struct",
          "name" : "Typedef",
          "path" : "thrift/annotation/scope.thrift"
        },
            "value" : {}
          },
          "scope.Field" : {
            "type" : {
          "type" : "struct",
          "name" : "Field",
          "path" : "thrift/annotation/scope.thrift"
        },
            "value" : {}
          },
          "scope.Function" : {
            "type" : {
          "type" : "struct",
          "name" : "Function",
          "path" : "thrift/annotation/scope.thrift"
        },
            "value" : {}
          }
        },
        "fields" : {
          "reason" : {
            "name" : "reason",
            "key" : 1,
            "lineno" : 109,
            "required" : "opt-in-req-out",
            "type" : "string"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 105
      },
      "Name" : {
        "name" : "Name",
        "structured_annotations": {
          "scope.Definition" : {
            "type" : {
          "type" : "struct",
          "name" : "Definition",
          "path" : "thrift/annotation/scope.thrift"
        },
            "value" : {}
          }
        },
        "docstring" : "This annotation is mainly used to rename symbols which can result in symbol\nconflict errors in Hack codegen.\nFor ex: reserved keywords in Hack language, symbols with similar names from\nother files in Hack\n",
        "fields" : {
          "name" : {
            "name" : "name",
            "key" : 1,
            "lineno" : 118,
            "required" : "opt-in-req-out",
            "type" : "string"
                  },
          "reason" : {
            "name" : "reason",
            "key" : 2,
            "lineno" : 119,
            "required" : "opt-in-req-out",
            "type" : "string"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 116
      },
      "UnionEnumAttributes" : {
        "name" : "UnionEnumAttributes",
        "structured_annotations": {
          "scope.Union" : {
            "type" : {
          "type" : "struct",
          "name" : "Union",
          "path" : "thrift/annotation/scope.thrift"
        },
            "value" : {}
          }
        },
        "docstring" : "This annotation is for adding Hack attributes to union enums.\n",
        "fields" : {
          "attributes" : {
            "name" : "attributes",
            "key" : 1,
            "lineno" : 125,
            "required" : "opt-in-req-out",
            "type" : {
      "type" : "list",
      "inner_type" : "string"
    }
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 123
      },
      "StructTrait" : {
        "name" : "StructTrait",
        "structured_annotations": {
          "scope.Struct" : {
            "type" : {
          "type" : "struct",
          "name" : "Struct",
          "path" : "thrift/annotation/scope.thrift"
        },
            "value" : {}
          },
          "scope.Union" : {
            "type" : {
          "type" : "struct",
          "name" : "Union",
          "path" : "thrift/annotation/scope.thrift"
        },
            "value" : {}
          },
          "scope.Exception" : {
            "type" : {
          "type" : "struct",
          "name" : "Exception",
          "path" : "thrift/annotation/scope.thrift"
        },
            "value" : {}
          }
        },
        "docstring" : "This annotation is for using a custom trait for structs.\n",
        "fields" : {
          "name" : {
            "name" : "name",
            "key" : 1,
            "lineno" : 133,
            "required" : "opt-in-req-out",
            "type" : "string"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 129
      },
      "Attributes" : {
        "name" : "Attributes",
        "docstring" : "This annotation is for adding Hack attributes.\n* Where to use: field or struct type\n* Value: add attributes like `JSEnum` to structs or fields\n* Example:\n\n```\n// In thrift\nenum MyEnum {\n  ALLOWED = 1,\n  THIS_IS_ALLOWED  =  2,\n  THIS_IS_ALLOWED_2 = 3,\n}(\n  hack.attributes=\n    \"\\JSEnum(shape('name' => 'MyEnum')),\n    \\GraphQLEnum('MyEnum', 'Description for my enum',)\"\n)\nstruct MyThriftStruct {\n  1: string foo (hack.attributes = \"FieldAttribute\");\n  2: string bar;\n  3: string baz;\n} (hack.attributes = \"ClassAttribute\")\n```\n```\n//thrift compiler will generate this for you\n<<\\JSEnum(shape('name' => 'MyEnum')),\n\\GraphQLEnum('MyEnum', 'Description for my enum',)>>\nenum MyEnum: int {\n ALLOWED = 1;\n THIS_IS_ALLOWED = 2;\n THIS_IS_ALLOWED_2 = 3;\n}\n<<ClassAttribute>>\nclass MyThriftStruct implements \\IThriftStruct {\n ....\n <<FieldAttribute>>\n public string $foo;\n ....\n}\n```\n",
        "fields" : {
          "attributes" : {
            "name" : "attributes",
            "key" : 1,
            "lineno" : 176,
            "required" : "opt-in-req-out",
            "type" : {
      "type" : "list",
      "inner_type" : "string"
    }
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 175
      },
      "StructAsTrait" : {
        "name" : "StructAsTrait",
        "structured_annotations": {
          "scope.Struct" : {
            "type" : {
          "type" : "struct",
          "name" : "Struct",
          "path" : "thrift/annotation/scope.thrift"
        },
            "value" : {}
          },
          "scope.Union" : {
            "type" : {
          "type" : "struct",
          "name" : "Union",
          "path" : "thrift/annotation/scope.thrift"
        },
            "value" : {}
          },
          "scope.Exception" : {
            "type" : {
          "type" : "struct",
          "name" : "Exception",
          "path" : "thrift/annotation/scope.thrift"
        },
            "value" : {}
          }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 179
      },
      "ModuleInternal" : {
        "name" : "ModuleInternal",
        "structured_annotations": {
          "scope.Struct" : {
            "type" : {
          "type" : "struct",
          "name" : "Struct",
          "path" : "thrift/annotation/scope.thrift"
        },
            "value" : {}
          },
          "scope.Union" : {
            "type" : {
          "type" : "struct",
          "name" : "Union",
          "path" : "thrift/annotation/scope.thrift"
        },
            "value" : {}
          },
          "scope.Enum" : {
            "type" : {
          "type" : "struct",
          "name" : "Enum",
          "path" : "thrift/annotation/scope.thrift"
        },
            "value" : {}
          },
          "scope.Field" : {
            "type" : {
          "type" : "struct",
          "name" : "Field",
          "path" : "thrift/annotation/scope.thrift"
        },
            "value" : {}
          },
          "scope.Typedef" : {
            "type" : {
          "type" : "struct",
          "name" : "Typedef",
          "path" : "thrift/annotation/scope.thrift"
        },
            "value" : {}
          },
          "scope.Function" : {
            "type" : {
          "type" : "struct",
          "name" : "Function",
          "path" : "thrift/annotation/scope.thrift"
        },
            "value" : {}
          },
          "scope.Service" : {
            "type" : {
          "type" : "struct",
          "name" : "Service",
          "path" : "thrift/annotation/scope.thrift"
        },
            "value" : {}
          }
        },
        "docstring" : "This annotation is to generate an entity as internal\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 185
      },
      "GenerateClientMethodsWithHeaders" : {
        "name" : "GenerateClientMethodsWithHeaders",
        "structured_annotations": {
          "scope.Service" : {
            "type" : {
          "type" : "struct",
          "name" : "Service",
          "path" : "thrift/annotation/scope.thrift"
        },
            "value" : {}
          },
          "scope.Function" : {
            "type" : {
          "type" : "struct",
          "name" : "Function",
          "path" : "thrift/annotation/scope.thrift"
        },
            "value" : {}
          }
        },
        "docstring" : "Given either of the following Thrift service definitions:\n\n    @hack.GenerateClientMethodsWithHeaders\n    service Foo {\n      FooResponse bar();\n    }\n\n    service Foo {\n      @hack.GenerateClientMethodsWithHeaders\n      FooResponse bar();\n    }\n\nThis annotation instructs the compiler to generate the following client method that returns both the response and headers in addition to the bar() method:\n  - (FooResponse, ?dict<string, string>) header_bar()\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 210
      }
  },
  "source_path" : "thrift/annotation/hack",
  "py_namespace" : "thrift.annotation.hack"
}
