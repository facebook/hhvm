/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/constants/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include <thrift/lib/cpp2/gen/module_metadata_cpp.h>
#include "thrift/compiler/test/fixtures/constants/gen-cpp2/module_metadata.h"

// some of these functions can be so large that the compiler gives up optimizing
// them - and issues a warning which may be treated as an error!
//
// these functions are so rarely called that it is probably okay for them not to
// be optimized in practice
FOLLY_CLANG_DISABLE_WARNING("-Wignored-optimization-argument")

namespace apache {
namespace thrift {
namespace detail {
namespace md {
using ThriftMetadata = ::apache::thrift::metadata::ThriftMetadata;
using ThriftPrimitiveType = ::apache::thrift::metadata::ThriftPrimitiveType;
using ThriftType = ::apache::thrift::metadata::ThriftType;
using ThriftService = ::apache::thrift::metadata::ThriftService;
using ThriftServiceContext = ::apache::thrift::metadata::ThriftServiceContext;
using ThriftFunctionGenerator = void (*)(ThriftMetadata&, ThriftService&);

void EnumMetadata<::cpp2::EmptyEnum>::gen(ThriftMetadata& metadata) {
  auto res = genEnumMetadata<::cpp2::EmptyEnum>(metadata);
  if (res.preExists) {
    return;
  }
}
void EnumMetadata<::cpp2::City>::gen(ThriftMetadata& metadata) {
  auto res = genEnumMetadata<::cpp2::City>(metadata);
  if (res.preExists) {
    return;
  }
}
void EnumMetadata<::cpp2::Company>::gen(ThriftMetadata& metadata) {
  auto res = genEnumMetadata<::cpp2::Company>(metadata);
  if (res.preExists) {
    return;
  }
}

const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::cpp2::Internship>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::cpp2::Internship>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& module_Internship = res.metadata;
  module_Internship.is_union() = false;
  static const auto* const
  module_Internship_fields = new std::array<EncodedThriftField, 5>{ {
    { 1, "weeks", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "title", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "employer", true, std::make_unique<Enum<::cpp2::Company>>("module.Company"), std::vector<ThriftConstStruct>{ }},    { 4, "compensation", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 5, "school", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  std::size_t i = 0;
  for (const auto& f : *module_Internship_fields) {
    auto& field = module_Internship.fields()[i];
    DCHECK_EQ(*field.id(), f.id);
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    field.structured_annotations().emplace().assign(
        f.structured_annotations.begin(),
        f.structured_annotations.end());

    // writeAndGenType will modify metadata, which might invalidate `field` reference
    // We need to store the result in a separate `type` variable.
    apache::thrift::metadata::ThriftType type;
    f.metadata_type_interface->writeAndGenType(type, metadata);
    module_Internship.fields()[i++].type() = std::move(type);
  }
  return res.metadata;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::cpp2::Range>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::cpp2::Range>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& module_Range = res.metadata;
  module_Range.is_union() = false;
  static const auto* const
  module_Range_fields = new std::array<EncodedThriftField, 2>{ {
    { 1, "min", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "max", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  std::size_t i = 0;
  for (const auto& f : *module_Range_fields) {
    auto& field = module_Range.fields()[i];
    DCHECK_EQ(*field.id(), f.id);
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    field.structured_annotations().emplace().assign(
        f.structured_annotations.begin(),
        f.structured_annotations.end());

    // writeAndGenType will modify metadata, which might invalidate `field` reference
    // We need to store the result in a separate `type` variable.
    apache::thrift::metadata::ThriftType type;
    f.metadata_type_interface->writeAndGenType(type, metadata);
    module_Range.fields()[i++].type() = std::move(type);
  }
  return res.metadata;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::cpp2::struct1>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::cpp2::struct1>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& module_struct1 = res.metadata;
  module_struct1.is_union() = false;
  static const auto* const
  module_struct1_fields = new std::array<EncodedThriftField, 2>{ {
    { 1, "a", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "b", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  std::size_t i = 0;
  for (const auto& f : *module_struct1_fields) {
    auto& field = module_struct1.fields()[i];
    DCHECK_EQ(*field.id(), f.id);
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    field.structured_annotations().emplace().assign(
        f.structured_annotations.begin(),
        f.structured_annotations.end());

    // writeAndGenType will modify metadata, which might invalidate `field` reference
    // We need to store the result in a separate `type` variable.
    apache::thrift::metadata::ThriftType type;
    f.metadata_type_interface->writeAndGenType(type, metadata);
    module_struct1.fields()[i++].type() = std::move(type);
  }
  return res.metadata;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::cpp2::struct2>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::cpp2::struct2>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& module_struct2 = res.metadata;
  module_struct2.is_union() = false;
  static const auto* const
  module_struct2_fields = new std::array<EncodedThriftField, 4>{ {
    { 1, "a", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "b", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "c", false, std::make_unique<Struct<::cpp2::struct1>>("module.struct1"), std::vector<ThriftConstStruct>{ }},    { 4, "d", false, std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE)), std::vector<ThriftConstStruct>{ }},  }};
  std::size_t i = 0;
  for (const auto& f : *module_struct2_fields) {
    auto& field = module_struct2.fields()[i];
    DCHECK_EQ(*field.id(), f.id);
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    field.structured_annotations().emplace().assign(
        f.structured_annotations.begin(),
        f.structured_annotations.end());

    // writeAndGenType will modify metadata, which might invalidate `field` reference
    // We need to store the result in a separate `type` variable.
    apache::thrift::metadata::ThriftType type;
    f.metadata_type_interface->writeAndGenType(type, metadata);
    module_struct2.fields()[i++].type() = std::move(type);
  }
  return res.metadata;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::cpp2::struct3>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::cpp2::struct3>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& module_struct3 = res.metadata;
  module_struct3.is_union() = false;
  static const auto* const
  module_struct3_fields = new std::array<EncodedThriftField, 3>{ {
    { 1, "a", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "b", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "c", false, std::make_unique<Struct<::cpp2::struct2>>("module.struct2"), std::vector<ThriftConstStruct>{ }},  }};
  std::size_t i = 0;
  for (const auto& f : *module_struct3_fields) {
    auto& field = module_struct3.fields()[i];
    DCHECK_EQ(*field.id(), f.id);
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    field.structured_annotations().emplace().assign(
        f.structured_annotations.begin(),
        f.structured_annotations.end());

    // writeAndGenType will modify metadata, which might invalidate `field` reference
    // We need to store the result in a separate `type` variable.
    apache::thrift::metadata::ThriftType type;
    f.metadata_type_interface->writeAndGenType(type, metadata);
    module_struct3.fields()[i++].type() = std::move(type);
  }
  return res.metadata;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::cpp2::struct4>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::cpp2::struct4>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& module_struct4 = res.metadata;
  module_struct4.is_union() = false;
  static const auto* const
  module_struct4_fields = new std::array<EncodedThriftField, 3>{ {
    { 1, "a", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "b", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "c", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BYTE_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  std::size_t i = 0;
  for (const auto& f : *module_struct4_fields) {
    auto& field = module_struct4.fields()[i];
    DCHECK_EQ(*field.id(), f.id);
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    field.structured_annotations().emplace().assign(
        f.structured_annotations.begin(),
        f.structured_annotations.end());

    // writeAndGenType will modify metadata, which might invalidate `field` reference
    // We need to store the result in a separate `type` variable.
    apache::thrift::metadata::ThriftType type;
    f.metadata_type_interface->writeAndGenType(type, metadata);
    module_struct4.fields()[i++].type() = std::move(type);
  }
  return res.metadata;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::cpp2::union1>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::cpp2::union1>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& module_union1 = res.metadata;
  module_union1.is_union() = true;
  static const auto* const
  module_union1_fields = new std::array<EncodedThriftField, 2>{ {
    { 1, "i", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "d", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  std::size_t i = 0;
  for (const auto& f : *module_union1_fields) {
    auto& field = module_union1.fields()[i];
    DCHECK_EQ(*field.id(), f.id);
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    field.structured_annotations().emplace().assign(
        f.structured_annotations.begin(),
        f.structured_annotations.end());

    // writeAndGenType will modify metadata, which might invalidate `field` reference
    // We need to store the result in a separate `type` variable.
    apache::thrift::metadata::ThriftType type;
    f.metadata_type_interface->writeAndGenType(type, metadata);
    module_union1.fields()[i++].type() = std::move(type);
  }
  return res.metadata;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::cpp2::union2>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::cpp2::union2>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& module_union2 = res.metadata;
  module_union2.is_union() = true;
  static const auto* const
  module_union2_fields = new std::array<EncodedThriftField, 4>{ {
    { 1, "i", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "d", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "s", false, std::make_unique<Struct<::cpp2::struct1>>("module.struct1"), std::vector<ThriftConstStruct>{ }},    { 4, "u", false, std::make_unique<Union<::cpp2::union1>>("module.union1"), std::vector<ThriftConstStruct>{ }},  }};
  std::size_t i = 0;
  for (const auto& f : *module_union2_fields) {
    auto& field = module_union2.fields()[i];
    DCHECK_EQ(*field.id(), f.id);
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    field.structured_annotations().emplace().assign(
        f.structured_annotations.begin(),
        f.structured_annotations.end());

    // writeAndGenType will modify metadata, which might invalidate `field` reference
    // We need to store the result in a separate `type` variable.
    apache::thrift::metadata::ThriftType type;
    f.metadata_type_interface->writeAndGenType(type, metadata);
    module_union2.fields()[i++].type() = std::move(type);
  }
  return res.metadata;
}

} // namespace md
} // namespace detail
} // namespace thrift
} // namespace apache
