[(Fun
    { fd_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
        ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
        ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
      fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([3:16-32], "\\async_get_an_int");
      fd_fun =
      { f_span = [3:1-5:2]; f_readonly_this = None; f_annotation = (); 
        f_readonly_ret = None; f_ret = ((Awaitable<?int>), (Some ([3:36-51], (Happly (([3:36-45], "\\HH\\Awaitable"), [([3:46-50], (Hoption ([3:47-50], (Hprim Tint))))]))))); 
        f_params = []; f_ctxs = None; f_unsafe_ctxs = None; f_body = { fb_ast = [([4:3-12], (Return (Some ((int), [4:10-11], (Int "1")))))] }; 
        f_fun_kind = FAsync; f_user_attributes = []; f_external = false; 
        f_doc_comment = None };
      fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = [] });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([7:10-20], "\\take_a_set");
       fd_fun =
       { f_span = [7:1-42]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_ret = ((void), (Some ([7:35-39], (Hprim Tvoid))));
         f_params =
         [{ param_annotation = (Set<int>); param_type_hint = ((Set<int>), (Some ([7:21-29], (Happly (([7:21-24], "\\HH\\Set"), [([7:25-28], (Hprim Tint))]))))); 
            param_is_variadic = false; param_pos = [7:30-32]; param_name = "$x"; 
            param_expr = None; param_readonly = None; param_callconv = Pnormal; 
            param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None; f_body = { fb_ast = [([Pos.none], Noop)] }; 
         f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
         f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = [] });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([9:16-42], "\\async_value_collection_lit");
       fd_fun =
       { f_span = [9:1-13:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_ret = ((Awaitable<void>), (Some ([9:46-61], (Happly (([9:46-55], "\\HH\\Awaitable"), [([9:56-60], (Hprim Tvoid))]))))); 
         f_params = []; f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([10:3-33],
             (Expr
                ((?int), [10:3-32],
                 (Binop
                    { bop = (Eq None); lhs = ((?int), [10:3-5], (Lvar ([10:3-5], $x)));
                      rhs = ((?int), [10:8-32], (Await ((Awaitable<?int>), [10:14-32], (Call ((((function(): Awaitable<?int>)), [10:14-30], (Id ([10:14-30], "\\async_get_an_int"))), [], [], None)))))
                      }))));
             ([12:3-24],
              (Expr
                 ((void), [12:3-23],
                  (Call ((((function(Set<int> $x): void)), [12:3-13], (Id ([12:3-13], "\\take_a_set"))), 
                     [],
                     [(Pnormal,
                       ((Set<int>), [12:14-22], (ValCollection (([12:14-17], Set), None, [((?int), [12:19-21], (Hole (((?int), [12:19-21], (Lvar ([12:19-21], $x))), (?int), (int), Typing)))]))))],
                     None)))))
             ]
           };
         f_fun_kind = FAsync; f_user_attributes = []; f_external = false; 
         f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = [] })