#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#
cimport cython as __cython
from cpython.object cimport PyTypeObject, Py_LT, Py_LE, Py_EQ, Py_NE, Py_GT, Py_GE
from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from libcpp.iterator cimport inserter as cinserter
from cpython cimport bool as pbool
from cython.operator cimport dereference as deref, preincrement as inc, address as ptr_address
import thrift.py3.types
cimport thrift.py3.types
cimport thrift.py3.exceptions
from thrift.py3.std_libcpp cimport sv_to_str as __sv_to_str, string_view as __cstring_view
from thrift.py3.types cimport (
    cSetOp as __cSetOp,
    richcmp as __richcmp,
    set_op as __set_op,
    setcmp as __setcmp,
    list_index as __list_index,
    list_count as __list_count,
    list_slice as __list_slice,
    list_getitem as __list_getitem,
    set_iter as __set_iter,
    map_iter as __map_iter,
    map_contains as __map_contains,
    map_getitem as __map_getitem,
    reference_shared_ptr as __reference_shared_ptr,
    get_field_name_by_index as __get_field_name_by_index,
    reset_field as __reset_field,
    translate_cpp_enum_to_python,
    SetMetaClass as __SetMetaClass,
    const_pointer_cast,
    constant_shared_ptr,
    NOTSET as __NOTSET,
    EnumData as __EnumData,
    EnumFlagsData as __EnumFlagsData,
    UnionTypeEnumData as __UnionTypeEnumData,
    createEnumDataForUnionType as __createEnumDataForUnionType,
)
cimport thrift.py3.std_libcpp as std_libcpp
cimport thrift.py3.serializer as serializer
import folly.iobuf as _fbthrift_iobuf
from folly.optional cimport cOptional
from folly.memory cimport to_shared_ptr as __to_shared_ptr
from folly.range cimport Range as __cRange

import sys
from collections.abc import Sequence, Set, Mapping, Iterable
import weakref as __weakref
import builtins as _builtins
cimport facebook.thrift.annotation.java.types as _facebook_thrift_annotation_java_types
import facebook.thrift.annotation.java.types as _facebook_thrift_annotation_java_types
cimport facebook.thrift.annotation.thrift.types as _facebook_thrift_annotation_thrift_types
import facebook.thrift.annotation.thrift.types as _facebook_thrift_annotation_thrift_types

cimport apache.thrift.type.standard.types_reflection as _types_reflection


cdef __EnumData __StandardProtocol_enum_data  = __EnumData._fbthrift_create(thrift.py3.types.createEnumData[cStandardProtocol](), StandardProtocol)


@__cython.internal
@__cython.auto_pickle(False)
cdef class __StandardProtocolMeta(thrift.py3.types.EnumMeta):
    def _fbthrift_get_by_value(cls, int value):
        return __StandardProtocol_enum_data.get_by_value(value)

    def _fbthrift_get_all_names(cls):
        return __StandardProtocol_enum_data.get_all_names()

    def __len__(cls):
        return __StandardProtocol_enum_data.size()

    def __getattribute__(cls, str name not None):
        if name.startswith("__") or name.startswith("_fbthrift_") or name == "mro":
            return super().__getattribute__(name)
        return __StandardProtocol_enum_data.get_by_name(name)


@__cython.final
@__cython.auto_pickle(False)
cdef class StandardProtocol(thrift.py3.types.CompiledEnum):
    cdef get_by_name(self, str name):
        return __StandardProtocol_enum_data.get_by_name(name)


    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        EnumMetadata[cStandardProtocol].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "standard.StandardProtocol"

    def _to_python(self):
        import importlib
        python_types = importlib.import_module(
            "apache.thrift.type.standard.thrift_types"
        )
        return python_types.StandardProtocol(self.value)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        return self.value


__SetMetaClass(<PyTypeObject*> StandardProtocol, <PyTypeObject*> __StandardProtocolMeta)


cdef __EnumData __Void_enum_data  = __EnumData._fbthrift_create(thrift.py3.types.createEnumData[cVoid](), Void)


@__cython.internal
@__cython.auto_pickle(False)
cdef class __VoidMeta(thrift.py3.types.EnumMeta):
    def _fbthrift_get_by_value(cls, int value):
        return __Void_enum_data.get_by_value(value)

    def _fbthrift_get_all_names(cls):
        return __Void_enum_data.get_all_names()

    def __len__(cls):
        return __Void_enum_data.size()

    def __getattribute__(cls, str name not None):
        if name.startswith("__") or name.startswith("_fbthrift_") or name == "mro":
            return super().__getattribute__(name)
        return __Void_enum_data.get_by_name(name)


@__cython.final
@__cython.auto_pickle(False)
cdef class Void(thrift.py3.types.CompiledEnum):
    cdef get_by_name(self, str name):
        return __Void_enum_data.get_by_name(name)


    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        EnumMetadata[cVoid].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "standard.Void"

    def _to_python(self):
        import importlib
        python_types = importlib.import_module(
            "apache.thrift.type.standard.thrift_types"
        )
        return python_types.Void(self.value)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        return self.value


__SetMetaClass(<PyTypeObject*> Void, <PyTypeObject*> __VoidMeta)



cdef __UnionTypeEnumData __TypeUri_union_type_enum_data  = __UnionTypeEnumData._fbthrift_create(
    __createEnumDataForUnionType[cTypeUri](),
    __TypeUriType,
)


@__cython.internal
@__cython.auto_pickle(False)
cdef class __TypeUri_Union_TypeMeta(thrift.py3.types.EnumMeta):
    def _fbthrift_get_by_value(cls, int value):
        return __TypeUri_union_type_enum_data.get_by_value(value)

    def _fbthrift_get_all_names(cls):
        return __TypeUri_union_type_enum_data.get_all_names()

    def __len__(cls):
        return __TypeUri_union_type_enum_data.size()

    def __getattribute__(cls, str name not None):
        if name.startswith("__") or name.startswith("_fbthrift_") or name == "mro":
            return super().__getattribute__(name)
        return __TypeUri_union_type_enum_data.get_by_name(name)


@__cython.final
@__cython.auto_pickle(False)
cdef class __TypeUriType(thrift.py3.types.CompiledEnum):
    cdef get_by_name(self, str name):
        return __TypeUri_union_type_enum_data.get_by_name(name)


__SetMetaClass(<PyTypeObject*> __TypeUriType, <PyTypeObject*> __TypeUri_Union_TypeMeta)


cdef __UnionTypeEnumData __TypeName_union_type_enum_data  = __UnionTypeEnumData._fbthrift_create(
    __createEnumDataForUnionType[cTypeName](),
    __TypeNameType,
)


@__cython.internal
@__cython.auto_pickle(False)
cdef class __TypeName_Union_TypeMeta(thrift.py3.types.EnumMeta):
    def _fbthrift_get_by_value(cls, int value):
        return __TypeName_union_type_enum_data.get_by_value(value)

    def _fbthrift_get_all_names(cls):
        return __TypeName_union_type_enum_data.get_all_names()

    def __len__(cls):
        return __TypeName_union_type_enum_data.size()

    def __getattribute__(cls, str name not None):
        if name.startswith("__") or name.startswith("_fbthrift_") or name == "mro":
            return super().__getattribute__(name)
        return __TypeName_union_type_enum_data.get_by_name(name)


@__cython.final
@__cython.auto_pickle(False)
cdef class __TypeNameType(thrift.py3.types.CompiledEnum):
    cdef get_by_name(self, str name):
        return __TypeName_union_type_enum_data.get_by_name(name)


__SetMetaClass(<PyTypeObject*> __TypeNameType, <PyTypeObject*> __TypeName_Union_TypeMeta)


@__cython.auto_pickle(False)
cdef class UriStruct(thrift.py3.types.Struct):
    def __init__(UriStruct self, **kwargs):
        self._cpp_obj = make_shared[cUriStruct]()
        self._fields_setter = _fbthrift_types_fields.__UriStruct_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(UriStruct self, **kwargs):
        if not kwargs:
            return self
        cdef UriStruct __fbthrift_inst = UriStruct.__new__(UriStruct)
        __fbthrift_inst._cpp_obj = make_shared[cUriStruct](deref(self._cpp_obj))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__UriStruct_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return thrift.py3.types._IsSet("UriStruct", {
          "scheme": deref(self._cpp_obj).scheme_ref().has_value(),
          "domain": deref(self._cpp_obj).domain_ref().has_value(),
          "path": deref(self._cpp_obj).path_ref().has_value(),
          "query": deref(self._cpp_obj).query_ref().has_value(),
          "fragment": deref(self._cpp_obj).fragment_ref().has_value(),
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cUriStruct] cpp_obj):
        __fbthrift_inst = <UriStruct>UriStruct.__new__(UriStruct)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline scheme_impl(self):

        return (<bytes>deref(self._cpp_obj).scheme_ref().value()).decode('UTF-8')

    @property
    def scheme(self):
        return self.scheme_impl()

    cdef inline domain_impl(self):

        if self.__fbthrift_cached_domain is None:
            self.__fbthrift_cached_domain = List__string._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).domain_ref().ref(), self._cpp_obj))
        return self.__fbthrift_cached_domain

    @property
    def domain(self):
        return self.domain_impl()

    cdef inline path_impl(self):

        if self.__fbthrift_cached_path is None:
            self.__fbthrift_cached_path = List__string._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).path_ref().ref(), self._cpp_obj))
        return self.__fbthrift_cached_path

    @property
    def path(self):
        return self.path_impl()

    cdef inline query_impl(self):

        if self.__fbthrift_cached_query is None:
            self.__fbthrift_cached_query = Map__string_string._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).query_ref().ref(), self._cpp_obj))
        return self.__fbthrift_cached_query

    @property
    def query(self):
        return self.query_impl()

    cdef inline fragment_impl(self):

        return (<bytes>deref(self._cpp_obj).fragment_ref().value()).decode('UTF-8')

    @property
    def fragment(self):
        return self.fragment_impl()


    def __hash__(UriStruct self):
        return super().__hash__()

    def __repr__(UriStruct self):
        return super().__repr__()

    def __str__(UriStruct self):
        return super().__str__()


    def __copy__(UriStruct self):
        cdef shared_ptr[cUriStruct] cpp_obj = make_shared[cUriStruct](
            deref(self._cpp_obj)
        )
        return UriStruct._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cUriStruct](
            self._cpp_obj,
            (<UriStruct>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__UriStruct()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cUriStruct].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "standard.UriStruct"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cUriStruct](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 5

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(UriStruct self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cUriStruct](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(UriStruct self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cUriStruct]()
        with nogil:
            needed = serializer.cdeserialize[cUriStruct](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.type.standard.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.UriStruct, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("thrift.lib.thrift.standard.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.UriStruct, self)


@__cython.auto_pickle(False)
cdef class TypeUri(thrift.py3.types.Union):
    Type = __TypeUriType

    def __init__(
        self, *,
        str uri=None,
        bytes typeHashPrefixSha2_256=None
    ):
        self._cpp_obj = __to_shared_ptr(cmove(TypeUri._make_instance(
          NULL,
          uri,
          typeHashPrefixSha2_256,
        )))
        self._load_cache()

    @staticmethod
    def fromValue(value):
        if value is None:
            return TypeUri()
        if isinstance(value, str):
            return TypeUri(uri=value)
        if isinstance(value, bytes):
            return TypeUri(typeHashPrefixSha2_256=value)
        raise ValueError(f"Unable to derive correct union field for value: {value}")

    @staticmethod
    cdef unique_ptr[cTypeUri] _make_instance(
        cTypeUri* base_instance,
        str uri,
        bytes typeHashPrefixSha2_256
    ) except *:
        cdef unique_ptr[cTypeUri] c_inst = make_unique[cTypeUri]()
        cdef bint any_set = False
        if uri is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_uri(uri.encode('UTF-8'))
            any_set = True
        if typeHashPrefixSha2_256 is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_typeHashPrefixSha2_256(typeHashPrefixSha2_256)
            any_set = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return cmove(c_inst)

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cTypeUri] cpp_obj):
        __fbthrift_inst = <TypeUri>TypeUri.__new__(TypeUri)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        __fbthrift_inst._load_cache()
        return __fbthrift_inst

    @property
    def uri(self):
        if self.type.value != 1:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not uri')
        return self.value

    @property
    def typeHashPrefixSha2_256(self):
        if self.type.value != 2:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not typeHashPrefixSha2_256')
        return self.value


    def __hash__(TypeUri self):
        return  super().__hash__()

    cdef _load_cache(TypeUri self):
        self.type = TypeUri.Type(<int>(deref(self._cpp_obj).getType()))
        cdef int type = self.type.value
        if type == 0:    # Empty
            self.value = None
        elif type == 1:
            self.value = bytes(deref(self._cpp_obj).get_uri()).decode('UTF-8')
        elif type == 2:
            self.value = deref(self._cpp_obj).get_typeHashPrefixSha2_256()

    def __copy__(TypeUri self):
        cdef shared_ptr[cTypeUri] cpp_obj = make_shared[cTypeUri](
            deref(self._cpp_obj)
        )
        return TypeUri._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cTypeUri](
            self._cpp_obj,
            (<TypeUri>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__TypeUri()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cTypeUri].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "standard.TypeUri"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cTypeUri](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 2

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(TypeUri self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cTypeUri](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(TypeUri self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cTypeUri]()
        with nogil:
            needed = serializer.cdeserialize[cTypeUri](buf, self._cpp_obj.get(), proto)
        # force a cache reload since the underlying data's changed
        self._load_cache()
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.type.standard.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.TypeUri, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("thrift.lib.thrift.standard.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.TypeUri, self)


@__cython.auto_pickle(False)
cdef class TypeName(thrift.py3.types.Union):
    Type = __TypeNameType

    def __init__(
        self, *,
        Void boolType=None,
        Void byteType=None,
        Void i16Type=None,
        Void i32Type=None,
        Void i64Type=None,
        Void floatType=None,
        Void doubleType=None,
        Void stringType=None,
        Void binaryType=None,
        TypeUri enumType=None,
        TypeUri structType=None,
        TypeUri unionType=None,
        TypeUri exceptionType=None,
        Void listType=None,
        Void setType=None,
        Void mapType=None
    ):
        self._cpp_obj = __to_shared_ptr(cmove(TypeName._make_instance(
          NULL,
          boolType,
          byteType,
          i16Type,
          i32Type,
          i64Type,
          floatType,
          doubleType,
          stringType,
          binaryType,
          enumType,
          structType,
          unionType,
          exceptionType,
          listType,
          setType,
          mapType,
        )))
        self._load_cache()

    @staticmethod
    def fromValue(value):
        if value is None:
            return TypeName()
        if isinstance(value, Void):
            return TypeName(boolType=value)
        if isinstance(value, Void):
            return TypeName(byteType=value)
        if isinstance(value, Void):
            return TypeName(i16Type=value)
        if isinstance(value, Void):
            return TypeName(i32Type=value)
        if isinstance(value, Void):
            return TypeName(i64Type=value)
        if isinstance(value, Void):
            return TypeName(floatType=value)
        if isinstance(value, Void):
            return TypeName(doubleType=value)
        if isinstance(value, Void):
            return TypeName(stringType=value)
        if isinstance(value, Void):
            return TypeName(binaryType=value)
        if isinstance(value, TypeUri):
            return TypeName(enumType=value)
        if isinstance(value, TypeUri):
            return TypeName(structType=value)
        if isinstance(value, TypeUri):
            return TypeName(unionType=value)
        if isinstance(value, TypeUri):
            return TypeName(exceptionType=value)
        if isinstance(value, Void):
            return TypeName(listType=value)
        if isinstance(value, Void):
            return TypeName(setType=value)
        if isinstance(value, Void):
            return TypeName(mapType=value)
        raise ValueError(f"Unable to derive correct union field for value: {value}")

    @staticmethod
    cdef unique_ptr[cTypeName] _make_instance(
        cTypeName* base_instance,
        Void boolType,
        Void byteType,
        Void i16Type,
        Void i32Type,
        Void i64Type,
        Void floatType,
        Void doubleType,
        Void stringType,
        Void binaryType,
        TypeUri enumType,
        TypeUri structType,
        TypeUri unionType,
        TypeUri exceptionType,
        Void listType,
        Void setType,
        Void mapType
    ) except *:
        cdef unique_ptr[cTypeName] c_inst = make_unique[cTypeName]()
        cdef bint any_set = False
        if boolType is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_boolType(<cVoid><int>boolType)
            any_set = True
        if byteType is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_byteType(<cVoid><int>byteType)
            any_set = True
        if i16Type is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_i16Type(<cVoid><int>i16Type)
            any_set = True
        if i32Type is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_i32Type(<cVoid><int>i32Type)
            any_set = True
        if i64Type is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_i64Type(<cVoid><int>i64Type)
            any_set = True
        if floatType is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_floatType(<cVoid><int>floatType)
            any_set = True
        if doubleType is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_doubleType(<cVoid><int>doubleType)
            any_set = True
        if stringType is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_stringType(<cVoid><int>stringType)
            any_set = True
        if binaryType is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_binaryType(<cVoid><int>binaryType)
            any_set = True
        if enumType is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_enumType(deref((<TypeUri?> enumType)._cpp_obj))
            any_set = True
        if structType is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_structType(deref((<TypeUri?> structType)._cpp_obj))
            any_set = True
        if unionType is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_unionType(deref((<TypeUri?> unionType)._cpp_obj))
            any_set = True
        if exceptionType is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_exceptionType(deref((<TypeUri?> exceptionType)._cpp_obj))
            any_set = True
        if listType is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_listType(<cVoid><int>listType)
            any_set = True
        if setType is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_setType(<cVoid><int>setType)
            any_set = True
        if mapType is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_mapType(<cVoid><int>mapType)
            any_set = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return cmove(c_inst)

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cTypeName] cpp_obj):
        __fbthrift_inst = <TypeName>TypeName.__new__(TypeName)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        __fbthrift_inst._load_cache()
        return __fbthrift_inst

    @property
    def boolType(self):
        if self.type.value != 1:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not boolType')
        return self.value

    @property
    def byteType(self):
        if self.type.value != 2:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not byteType')
        return self.value

    @property
    def i16Type(self):
        if self.type.value != 3:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not i16Type')
        return self.value

    @property
    def i32Type(self):
        if self.type.value != 4:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not i32Type')
        return self.value

    @property
    def i64Type(self):
        if self.type.value != 5:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not i64Type')
        return self.value

    @property
    def floatType(self):
        if self.type.value != 6:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not floatType')
        return self.value

    @property
    def doubleType(self):
        if self.type.value != 7:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not doubleType')
        return self.value

    @property
    def stringType(self):
        if self.type.value != 8:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not stringType')
        return self.value

    @property
    def binaryType(self):
        if self.type.value != 9:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not binaryType')
        return self.value

    @property
    def enumType(self):
        if self.type.value != 10:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not enumType')
        return self.value

    @property
    def structType(self):
        if self.type.value != 11:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not structType')
        return self.value

    @property
    def unionType(self):
        if self.type.value != 12:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not unionType')
        return self.value

    @property
    def exceptionType(self):
        if self.type.value != 13:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not exceptionType')
        return self.value

    @property
    def listType(self):
        if self.type.value != 14:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not listType')
        return self.value

    @property
    def setType(self):
        if self.type.value != 15:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not setType')
        return self.value

    @property
    def mapType(self):
        if self.type.value != 16:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not mapType')
        return self.value


    def __hash__(TypeName self):
        return  super().__hash__()

    cdef _load_cache(TypeName self):
        self.type = TypeName.Type(<int>(deref(self._cpp_obj).getType()))
        cdef int type = self.type.value
        if type == 0:    # Empty
            self.value = None
        elif type == 1:
            self.value = translate_cpp_enum_to_python(Void, <int>deref(self._cpp_obj).get_boolType())
        elif type == 2:
            self.value = translate_cpp_enum_to_python(Void, <int>deref(self._cpp_obj).get_byteType())
        elif type == 3:
            self.value = translate_cpp_enum_to_python(Void, <int>deref(self._cpp_obj).get_i16Type())
        elif type == 4:
            self.value = translate_cpp_enum_to_python(Void, <int>deref(self._cpp_obj).get_i32Type())
        elif type == 5:
            self.value = translate_cpp_enum_to_python(Void, <int>deref(self._cpp_obj).get_i64Type())
        elif type == 6:
            self.value = translate_cpp_enum_to_python(Void, <int>deref(self._cpp_obj).get_floatType())
        elif type == 7:
            self.value = translate_cpp_enum_to_python(Void, <int>deref(self._cpp_obj).get_doubleType())
        elif type == 8:
            self.value = translate_cpp_enum_to_python(Void, <int>deref(self._cpp_obj).get_stringType())
        elif type == 9:
            self.value = translate_cpp_enum_to_python(Void, <int>deref(self._cpp_obj).get_binaryType())
        elif type == 10:
            self.value = TypeUri._fbthrift_create(make_shared[cTypeUri](deref(self._cpp_obj).get_enumType()))
        elif type == 11:
            self.value = TypeUri._fbthrift_create(make_shared[cTypeUri](deref(self._cpp_obj).get_structType()))
        elif type == 12:
            self.value = TypeUri._fbthrift_create(make_shared[cTypeUri](deref(self._cpp_obj).get_unionType()))
        elif type == 13:
            self.value = TypeUri._fbthrift_create(make_shared[cTypeUri](deref(self._cpp_obj).get_exceptionType()))
        elif type == 14:
            self.value = translate_cpp_enum_to_python(Void, <int>deref(self._cpp_obj).get_listType())
        elif type == 15:
            self.value = translate_cpp_enum_to_python(Void, <int>deref(self._cpp_obj).get_setType())
        elif type == 16:
            self.value = translate_cpp_enum_to_python(Void, <int>deref(self._cpp_obj).get_mapType())

    def __copy__(TypeName self):
        cdef shared_ptr[cTypeName] cpp_obj = make_shared[cTypeName](
            deref(self._cpp_obj)
        )
        return TypeName._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cTypeName](
            self._cpp_obj,
            (<TypeName>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__TypeName()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cTypeName].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "standard.TypeName"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cTypeName](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 16

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(TypeName self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cTypeName](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(TypeName self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cTypeName]()
        with nogil:
            needed = serializer.cdeserialize[cTypeName](buf, self._cpp_obj.get(), proto)
        # force a cache reload since the underlying data's changed
        self._load_cache()
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.type.standard.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.TypeName, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("thrift.lib.thrift.standard.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.TypeName, self)
@__cython.auto_pickle(False)
cdef class List__string(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__string):
            self._cpp_obj = (<List__string> items)._cpp_obj
        else:
            self._cpp_obj = List__string._make_instance(items)

    @staticmethod
    cdef _fbthrift_create(shared_ptr[vector[string]] c_items):
        __fbthrift_inst = <List__string>List__string.__new__(List__string)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__string self):
        cdef shared_ptr[vector[string]] cpp_obj = make_shared[vector[string]](
            deref(self._cpp_obj)
        )
        return List__string._fbthrift_create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[string]] _make_instance(object items) except *:
        cdef shared_ptr[vector[string]] c_inst = make_shared[vector[string]]()
        if items is not None:
            if isinstance(items, str):
                raise TypeError("If you really want to pass a string into a _typing.Sequence[str] field, explicitly convert it first.")
            for item in items:
                if not isinstance(item, str):
                    raise TypeError(f"{item!r} is not of type str")
                deref(c_inst).push_back(item.encode('UTF-8'))
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return List__string._fbthrift_create(
            __list_slice[vector[string]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef string citem
        __list_getitem(self._cpp_obj, index, citem)
        return bytes(citem).decode('UTF-8')

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, str):
            return item

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef string citem = item.encode('UTF-8')
        cdef std_libcpp.optional[size_t] found = __list_index[vector[string]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef string citem = item.encode('UTF-8')
        return __list_count[vector[string]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__string()


Sequence.register(List__string)

@__cython.auto_pickle(False)
cdef class Map__string_string(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, Map__string_string):
            self._cpp_obj = (<Map__string_string> items)._cpp_obj
        else:
            self._cpp_obj = Map__string_string._make_instance(items)

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cmap[string,string]] c_items):
        __fbthrift_inst = <Map__string_string>Map__string_string.__new__(Map__string_string)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Map__string_string self):
        cdef shared_ptr[cmap[string,string]] cpp_obj = make_shared[cmap[string,string]](
            deref(self._cpp_obj)
        )
        return Map__string_string._fbthrift_create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cmap[string,string]] _make_instance(object items) except *:
        cdef shared_ptr[cmap[string,string]] c_inst = make_shared[cmap[string,string]]()
        if items is not None:
            for key, item in items.items():
                if not isinstance(key, str):
                    raise TypeError(f"{key!r} is not of type str")
                if not isinstance(item, str):
                    raise TypeError(f"{item!r} is not of type str")

                deref(c_inst)[key.encode('UTF-8')] = item.encode('UTF-8')
        return c_inst

    cdef _check_key_type(self, key):
        if not self or key is None:
            return
        if isinstance(key, str):
            return key

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        key = self._check_key_type(key)
        if key is None:
            raise err
        cdef string ckey = key.encode('UTF-8')
        if not __map_contains(self._cpp_obj, ckey):
            raise err
        cdef string citem
        __map_getitem(self._cpp_obj, ckey, citem)
        return bytes(citem).decode('UTF-8')

    def __iter__(self):
        if not self:
            return
        cdef __map_iter[cmap[string,string]] itr = __map_iter[cmap[string,string]](self._cpp_obj)
        cdef string citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextKey(self._cpp_obj, citem)
            yield bytes(citem).decode('UTF-8')

    def __contains__(self, key):
        key = self._check_key_type(key)
        if key is None:
            return False
        cdef string ckey = key.encode('UTF-8')
        return __map_contains(self._cpp_obj, ckey)

    def values(self):
        if not self:
            return
        cdef __map_iter[cmap[string,string]] itr = __map_iter[cmap[string,string]](self._cpp_obj)
        cdef string citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextValue(self._cpp_obj, citem)
            yield bytes(citem).decode('UTF-8')

    def items(self):
        if not self:
            return
        cdef __map_iter[cmap[string,string]] itr = __map_iter[cmap[string,string]](self._cpp_obj)
        cdef string ckey
        cdef string citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextItem(self._cpp_obj, ckey, citem)
            yield (ckey.data().decode('UTF-8'), bytes(citem).decode('UTF-8'))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Map__string_string()

Mapping.register(Map__string_string)

minTypeHashBytes = 8
defaultTypeHashBytes = 16
ByteString = bytes
ByteBuffer = _fbthrift_iobuf.IOBuf
Uuid = bytes
UuidString = str
Path = str
PathSegments = List__string
Domain = str
DomainLabels = List__string
QueryString = str
QueryArgs = Map__string_string
Uri = str
