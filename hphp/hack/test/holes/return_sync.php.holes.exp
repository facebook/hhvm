[(Fun
    { fd_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
        ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
        ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
      fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([3:10-21], "\\return_sync");
      fd_fun =
      { f_span = [3:1-7:2]; f_readonly_this = None; f_annotation = (); 
        f_readonly_ret = None; f_ret = ((Pair<int, bool>), (Some ([3:25-40], (Happly (([3:25-29], "\\HH\\Pair"), [([3:30-33], (Hprim Tint)); ([3:35-39], (Hprim Tbool))]))))); 
        f_params = []; f_ctxs = None; f_unsafe_ctxs = None;
        f_body =
        { fb_ast =
          [([4:3-25],
            (Expr
               ((Pair<int, string>), [4:3-24],
                (Binop
                   { bop = (Eq None); lhs = ((Pair<int, string>), [4:3-5], (Lvar ([4:3-5], $x)));
                     rhs = ((Pair<int, string>), [4:8-24], (Pair (None, ((int), [4:14-15], (Int "2")), ((string), [4:17-23], (String "true"))))) }))));
            ([6:3-13], (Return (Some ((Pair<int, string>), [6:10-12], (Hole (((Pair<int, string>), [6:10-12], (Lvar ([6:10-12], $x))), (Pair<int, string>), (Pair<int, bool>), Typing))))))]
          };
        f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
        f_doc_comment = None };
      fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = [] })