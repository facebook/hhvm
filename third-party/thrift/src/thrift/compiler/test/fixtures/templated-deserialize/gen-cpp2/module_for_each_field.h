/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/templated-deserialize/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include "thrift/compiler/test/fixtures/templated-deserialize/gen-cpp2/module_metadata.h"
#include <thrift/lib/cpp2/visitation/for_each.h>

namespace apache {
namespace thrift {
namespace detail {

template <>
struct ForEachField<::cpp2::SmallStruct> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).small_A_ref()...);
    f(1, static_cast<T&&>(t).small_B_ref()...);
  }
};

template <>
struct ForEachField<::cpp2::containerStruct> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).fieldA_ref()...);
    f(1, static_cast<T&&>(t).fieldB_ref()...);
    f(2, static_cast<T&&>(t).fieldC_ref()...);
    f(3, static_cast<T&&>(t).fieldD_ref()...);
    f(4, static_cast<T&&>(t).fieldE_ref()...);
    f(5, static_cast<T&&>(t).fieldF_ref()...);
    f(6, static_cast<T&&>(t).fieldG_ref()...);
    f(7, static_cast<T&&>(t).fieldH_ref()...);
    f(8, static_cast<T&&>(t).fieldI_ref()...);
    f(9, static_cast<T&&>(t).fieldJ_ref()...);
    f(10, static_cast<T&&>(t).fieldK_ref()...);
    f(11, static_cast<T&&>(t).fieldL_ref()...);
    f(12, static_cast<T&&>(t).fieldM_ref()...);
    f(13, static_cast<T&&>(t).fieldN_ref()...);
    f(14, static_cast<T&&>(t).fieldO_ref()...);
    f(15, static_cast<T&&>(t).fieldP_ref()...);
    f(16, static_cast<T&&>(t).fieldQ_ref()...);
    f(17, static_cast<T&&>(t).fieldR_ref()...);
    f(18, static_cast<T&&>(t).fieldS_ref()...);
    f(19, static_cast<T&&>(t).fieldT_ref()...);
    f(20, static_cast<T&&>(t).fieldU_ref()...);
    f(21, static_cast<T&&>(t).fieldX_ref()...);
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
