#
# Autogenerated by Thrift for thrift/annotation/thrift.thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

# pyre-unsafe

import typing as __T  # sometimes `t` is used as a field name

from thrift import Thrift
from thrift.protocol.TProtocol import TProtocolBase

__property__ = property  # sometimes `property` is used as a field name


UTF8STRINGS: bool


class RpcPriority(int):
    HIGH_IMPORTANT: __T.ClassVar[RpcPriority]
    HIGH: __T.ClassVar[RpcPriority]
    IMPORTANT: __T.ClassVar[RpcPriority]
    NORMAL: __T.ClassVar[RpcPriority]
    BEST_EFFORT: __T.ClassVar[RpcPriority]

    _VALUES_TO_NAMES: __T.ClassVar[__T.Dict[RpcPriority, str]]
    _NAMES_TO_VALUES: __T.ClassVar[__T.Dict[str, RpcPriority]]


class Experimental:
    thrift_spec: __T.Tuple[__T.Optional[__T.Tuple[int, int, str, __T.Any, __T.Optional[int], int]]]
    thrift_field_annotations: __T.Dict[int, __T.Dict[str, str]]
    thrift_struct_annotations: __T.Dict[str, str]

    def __init__(
        self
    ) -> None:
        ...



    def isUnion(self) -> bool: ...
    def checkRequired(self) -> None: ...
    def read(self, iprot: TProtocolBase) -> None: ...
    @__T.overload
    def readFromJson(self, json: __T.Dict[str, __T.Any], is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    @__T.overload
    def readFromJson(self, json: str, is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    def write(self, oprot: TProtocolBase) -> None: ...
    def __eq__(self, other: __T.Any) -> bool: ...
    def __ne__(self, other: __T.Any) -> bool: ...
    def __dir__(self) -> __T.Sequence[str]: ...
    def _to_python(self) -> "facebook.thrift.annotation.thrift.thrift_types.Experimental": ...   # type: ignore
    def _to_mutable_python(self) -> "facebook.thrift.annotation.thrift.thrift_mutable_types.Experimental": ...   # type: ignore
    def _to_py3(self) -> "facebook.thrift.annotation.thrift.types.Experimental": ...   # type: ignore
    def _to_py_deprecated(self) -> Experimental: ...


class ReserveIds:
    thrift_spec: __T.Tuple[__T.Optional[__T.Tuple[int, int, str, __T.Any, __T.Optional[int], int]]]
    thrift_field_annotations: __T.Dict[int, __T.Dict[str, str]]
    thrift_struct_annotations: __T.Dict[str, str]

    def __init__(
        self, *,
        ids: __T.Optional[__T.List[int]] = ...,
        id_ranges: __T.Optional[__T.Dict[int, int]] = ...
    ) -> None:
        ...

    @__property__
    def ids(self) -> __T.List[int]: ...
    @ids.setter
    def ids(self, value: __T.Optional[__T.List[int]]) -> None: ...
    @__property__
    def id_ranges(self) -> __T.Dict[int, int]: ...
    @id_ranges.setter
    def id_ranges(self, value: __T.Optional[__T.Dict[int, int]]) -> None: ...


    def isUnion(self) -> bool: ...
    def checkRequired(self) -> None: ...
    def read(self, iprot: TProtocolBase) -> None: ...
    @__T.overload
    def readFromJson(self, json: __T.Dict[str, __T.Any], is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    @__T.overload
    def readFromJson(self, json: str, is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    def write(self, oprot: TProtocolBase) -> None: ...
    def __eq__(self, other: __T.Any) -> bool: ...
    def __ne__(self, other: __T.Any) -> bool: ...
    def __dir__(self) -> __T.Sequence[str]: ...
    def _to_python(self) -> "facebook.thrift.annotation.thrift.thrift_types.ReserveIds": ...   # type: ignore
    def _to_mutable_python(self) -> "facebook.thrift.annotation.thrift.thrift_mutable_types.ReserveIds": ...   # type: ignore
    def _to_py3(self) -> "facebook.thrift.annotation.thrift.types.ReserveIds": ...   # type: ignore
    def _to_py_deprecated(self) -> ReserveIds: ...


class RequiresBackwardCompatibility:
    thrift_spec: __T.Tuple[__T.Optional[__T.Tuple[int, int, str, __T.Any, __T.Optional[int], int]]]
    thrift_field_annotations: __T.Dict[int, __T.Dict[str, str]]
    thrift_struct_annotations: __T.Dict[str, str]

    def __init__(
        self, *,
        field_name: bool = ...
    ) -> None:
        ...

    @__property__
    def field_name(self) -> bool: ...
    @field_name.setter
    def field_name(self, value: bool) -> None: ...


    def isUnion(self) -> bool: ...
    def checkRequired(self) -> None: ...
    def read(self, iprot: TProtocolBase) -> None: ...
    @__T.overload
    def readFromJson(self, json: __T.Dict[str, __T.Any], is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    @__T.overload
    def readFromJson(self, json: str, is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    def write(self, oprot: TProtocolBase) -> None: ...
    def __eq__(self, other: __T.Any) -> bool: ...
    def __ne__(self, other: __T.Any) -> bool: ...
    def __dir__(self) -> __T.Sequence[str]: ...
    def _to_python(self) -> "facebook.thrift.annotation.thrift.thrift_types.RequiresBackwardCompatibility": ...   # type: ignore
    def _to_mutable_python(self) -> "facebook.thrift.annotation.thrift.thrift_mutable_types.RequiresBackwardCompatibility": ...   # type: ignore
    def _to_py3(self) -> "facebook.thrift.annotation.thrift.types.RequiresBackwardCompatibility": ...   # type: ignore
    def _to_py_deprecated(self) -> RequiresBackwardCompatibility: ...


class TerseWrite:
    thrift_spec: __T.Tuple[__T.Optional[__T.Tuple[int, int, str, __T.Any, __T.Optional[int], int]]]
    thrift_field_annotations: __T.Dict[int, __T.Dict[str, str]]
    thrift_struct_annotations: __T.Dict[str, str]

    def __init__(
        self
    ) -> None:
        ...



    def isUnion(self) -> bool: ...
    def checkRequired(self) -> None: ...
    def read(self, iprot: TProtocolBase) -> None: ...
    @__T.overload
    def readFromJson(self, json: __T.Dict[str, __T.Any], is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    @__T.overload
    def readFromJson(self, json: str, is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    def write(self, oprot: TProtocolBase) -> None: ...
    def __eq__(self, other: __T.Any) -> bool: ...
    def __ne__(self, other: __T.Any) -> bool: ...
    def __dir__(self) -> __T.Sequence[str]: ...
    def _to_python(self) -> "facebook.thrift.annotation.thrift.thrift_types.TerseWrite": ...   # type: ignore
    def _to_mutable_python(self) -> "facebook.thrift.annotation.thrift.thrift_mutable_types.TerseWrite": ...   # type: ignore
    def _to_py3(self) -> "facebook.thrift.annotation.thrift.types.TerseWrite": ...   # type: ignore
    def _to_py_deprecated(self) -> TerseWrite: ...


class Box:
    thrift_spec: __T.Tuple[__T.Optional[__T.Tuple[int, int, str, __T.Any, __T.Optional[int], int]]]
    thrift_field_annotations: __T.Dict[int, __T.Dict[str, str]]
    thrift_struct_annotations: __T.Dict[str, str]

    def __init__(
        self
    ) -> None:
        ...



    def isUnion(self) -> bool: ...
    def checkRequired(self) -> None: ...
    def read(self, iprot: TProtocolBase) -> None: ...
    @__T.overload
    def readFromJson(self, json: __T.Dict[str, __T.Any], is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    @__T.overload
    def readFromJson(self, json: str, is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    def write(self, oprot: TProtocolBase) -> None: ...
    def __eq__(self, other: __T.Any) -> bool: ...
    def __ne__(self, other: __T.Any) -> bool: ...
    def __dir__(self) -> __T.Sequence[str]: ...
    def _to_python(self) -> "facebook.thrift.annotation.thrift.thrift_types.Box": ...   # type: ignore
    def _to_mutable_python(self) -> "facebook.thrift.annotation.thrift.thrift_mutable_types.Box": ...   # type: ignore
    def _to_py3(self) -> "facebook.thrift.annotation.thrift.types.Box": ...   # type: ignore
    def _to_py_deprecated(self) -> Box: ...


class Mixin:
    thrift_spec: __T.Tuple[__T.Optional[__T.Tuple[int, int, str, __T.Any, __T.Optional[int], int]]]
    thrift_field_annotations: __T.Dict[int, __T.Dict[str, str]]
    thrift_struct_annotations: __T.Dict[str, str]

    def __init__(
        self
    ) -> None:
        ...



    def isUnion(self) -> bool: ...
    def checkRequired(self) -> None: ...
    def read(self, iprot: TProtocolBase) -> None: ...
    @__T.overload
    def readFromJson(self, json: __T.Dict[str, __T.Any], is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    @__T.overload
    def readFromJson(self, json: str, is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    def write(self, oprot: TProtocolBase) -> None: ...
    def __eq__(self, other: __T.Any) -> bool: ...
    def __ne__(self, other: __T.Any) -> bool: ...
    def __dir__(self) -> __T.Sequence[str]: ...
    def _to_python(self) -> "facebook.thrift.annotation.thrift.thrift_types.Mixin": ...   # type: ignore
    def _to_mutable_python(self) -> "facebook.thrift.annotation.thrift.thrift_mutable_types.Mixin": ...   # type: ignore
    def _to_py3(self) -> "facebook.thrift.annotation.thrift.types.Mixin": ...   # type: ignore
    def _to_py_deprecated(self) -> Mixin: ...


class SerializeInFieldIdOrder:
    thrift_spec: __T.Tuple[__T.Optional[__T.Tuple[int, int, str, __T.Any, __T.Optional[int], int]]]
    thrift_field_annotations: __T.Dict[int, __T.Dict[str, str]]
    thrift_struct_annotations: __T.Dict[str, str]

    def __init__(
        self
    ) -> None:
        ...



    def isUnion(self) -> bool: ...
    def checkRequired(self) -> None: ...
    def read(self, iprot: TProtocolBase) -> None: ...
    @__T.overload
    def readFromJson(self, json: __T.Dict[str, __T.Any], is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    @__T.overload
    def readFromJson(self, json: str, is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    def write(self, oprot: TProtocolBase) -> None: ...
    def __eq__(self, other: __T.Any) -> bool: ...
    def __ne__(self, other: __T.Any) -> bool: ...
    def __dir__(self) -> __T.Sequence[str]: ...
    def _to_python(self) -> "facebook.thrift.annotation.thrift.thrift_types.SerializeInFieldIdOrder": ...   # type: ignore
    def _to_mutable_python(self) -> "facebook.thrift.annotation.thrift.thrift_mutable_types.SerializeInFieldIdOrder": ...   # type: ignore
    def _to_py3(self) -> "facebook.thrift.annotation.thrift.types.SerializeInFieldIdOrder": ...   # type: ignore
    def _to_py_deprecated(self) -> SerializeInFieldIdOrder: ...


class BitmaskEnum:
    thrift_spec: __T.Tuple[__T.Optional[__T.Tuple[int, int, str, __T.Any, __T.Optional[int], int]]]
    thrift_field_annotations: __T.Dict[int, __T.Dict[str, str]]
    thrift_struct_annotations: __T.Dict[str, str]

    def __init__(
        self
    ) -> None:
        ...



    def isUnion(self) -> bool: ...
    def checkRequired(self) -> None: ...
    def read(self, iprot: TProtocolBase) -> None: ...
    @__T.overload
    def readFromJson(self, json: __T.Dict[str, __T.Any], is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    @__T.overload
    def readFromJson(self, json: str, is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    def write(self, oprot: TProtocolBase) -> None: ...
    def __eq__(self, other: __T.Any) -> bool: ...
    def __ne__(self, other: __T.Any) -> bool: ...
    def __dir__(self) -> __T.Sequence[str]: ...
    def _to_python(self) -> "facebook.thrift.annotation.thrift.thrift_types.BitmaskEnum": ...   # type: ignore
    def _to_mutable_python(self) -> "facebook.thrift.annotation.thrift.thrift_mutable_types.BitmaskEnum": ...   # type: ignore
    def _to_py3(self) -> "facebook.thrift.annotation.thrift.types.BitmaskEnum": ...   # type: ignore
    def _to_py_deprecated(self) -> BitmaskEnum: ...


class ExceptionMessage:
    thrift_spec: __T.Tuple[__T.Optional[__T.Tuple[int, int, str, __T.Any, __T.Optional[int], int]]]
    thrift_field_annotations: __T.Dict[int, __T.Dict[str, str]]
    thrift_struct_annotations: __T.Dict[str, str]

    def __init__(
        self
    ) -> None:
        ...



    def isUnion(self) -> bool: ...
    def checkRequired(self) -> None: ...
    def read(self, iprot: TProtocolBase) -> None: ...
    @__T.overload
    def readFromJson(self, json: __T.Dict[str, __T.Any], is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    @__T.overload
    def readFromJson(self, json: str, is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    def write(self, oprot: TProtocolBase) -> None: ...
    def __eq__(self, other: __T.Any) -> bool: ...
    def __ne__(self, other: __T.Any) -> bool: ...
    def __dir__(self) -> __T.Sequence[str]: ...
    def _to_python(self) -> "facebook.thrift.annotation.thrift.thrift_types.ExceptionMessage": ...   # type: ignore
    def _to_mutable_python(self) -> "facebook.thrift.annotation.thrift.thrift_mutable_types.ExceptionMessage": ...   # type: ignore
    def _to_py3(self) -> "facebook.thrift.annotation.thrift.types.ExceptionMessage": ...   # type: ignore
    def _to_py_deprecated(self) -> ExceptionMessage: ...


class InternBox:
    thrift_spec: __T.Tuple[__T.Optional[__T.Tuple[int, int, str, __T.Any, __T.Optional[int], int]]]
    thrift_field_annotations: __T.Dict[int, __T.Dict[str, str]]
    thrift_struct_annotations: __T.Dict[str, str]

    def __init__(
        self
    ) -> None:
        ...



    def isUnion(self) -> bool: ...
    def checkRequired(self) -> None: ...
    def read(self, iprot: TProtocolBase) -> None: ...
    @__T.overload
    def readFromJson(self, json: __T.Dict[str, __T.Any], is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    @__T.overload
    def readFromJson(self, json: str, is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    def write(self, oprot: TProtocolBase) -> None: ...
    def __eq__(self, other: __T.Any) -> bool: ...
    def __ne__(self, other: __T.Any) -> bool: ...
    def __dir__(self) -> __T.Sequence[str]: ...
    def _to_python(self) -> "facebook.thrift.annotation.thrift.thrift_types.InternBox": ...   # type: ignore
    def _to_mutable_python(self) -> "facebook.thrift.annotation.thrift.thrift_mutable_types.InternBox": ...   # type: ignore
    def _to_py3(self) -> "facebook.thrift.annotation.thrift.types.InternBox": ...   # type: ignore
    def _to_py_deprecated(self) -> InternBox: ...


class Serial:
    thrift_spec: __T.Tuple[__T.Optional[__T.Tuple[int, int, str, __T.Any, __T.Optional[int], int]]]
    thrift_field_annotations: __T.Dict[int, __T.Dict[str, str]]
    thrift_struct_annotations: __T.Dict[str, str]

    def __init__(
        self
    ) -> None:
        ...



    def isUnion(self) -> bool: ...
    def checkRequired(self) -> None: ...
    def read(self, iprot: TProtocolBase) -> None: ...
    @__T.overload
    def readFromJson(self, json: __T.Dict[str, __T.Any], is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    @__T.overload
    def readFromJson(self, json: str, is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    def write(self, oprot: TProtocolBase) -> None: ...
    def __eq__(self, other: __T.Any) -> bool: ...
    def __ne__(self, other: __T.Any) -> bool: ...
    def __dir__(self) -> __T.Sequence[str]: ...
    def _to_python(self) -> "facebook.thrift.annotation.thrift.thrift_types.Serial": ...   # type: ignore
    def _to_mutable_python(self) -> "facebook.thrift.annotation.thrift.thrift_mutable_types.Serial": ...   # type: ignore
    def _to_py3(self) -> "facebook.thrift.annotation.thrift.types.Serial": ...   # type: ignore
    def _to_py_deprecated(self) -> Serial: ...


class Uri:
    thrift_spec: __T.Tuple[__T.Optional[__T.Tuple[int, int, str, __T.Any, __T.Optional[int], int]]]
    thrift_field_annotations: __T.Dict[int, __T.Dict[str, str]]
    thrift_struct_annotations: __T.Dict[str, str]

    def __init__(
        self, *,
        value: __T.Optional[str] = ...
    ) -> None:
        ...

    @__property__
    def value(self) -> str: ...
    @value.setter
    def value(self, value: __T.Optional[str]) -> None: ...


    def isUnion(self) -> bool: ...
    def checkRequired(self) -> None: ...
    def read(self, iprot: TProtocolBase) -> None: ...
    @__T.overload
    def readFromJson(self, json: __T.Dict[str, __T.Any], is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    @__T.overload
    def readFromJson(self, json: str, is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    def write(self, oprot: TProtocolBase) -> None: ...
    def __eq__(self, other: __T.Any) -> bool: ...
    def __ne__(self, other: __T.Any) -> bool: ...
    def __dir__(self) -> __T.Sequence[str]: ...
    def _to_python(self) -> "facebook.thrift.annotation.thrift.thrift_types.Uri": ...   # type: ignore
    def _to_mutable_python(self) -> "facebook.thrift.annotation.thrift.thrift_mutable_types.Uri": ...   # type: ignore
    def _to_py3(self) -> "facebook.thrift.annotation.thrift.types.Uri": ...   # type: ignore
    def _to_py_deprecated(self) -> Uri: ...


class Priority:
    thrift_spec: __T.Tuple[__T.Optional[__T.Tuple[int, int, str, __T.Any, __T.Optional[int], int]]]
    thrift_field_annotations: __T.Dict[int, __T.Dict[str, str]]
    thrift_struct_annotations: __T.Dict[str, str]

    def __init__(
        self, *,
        level: __T.Optional[RpcPriority] = ...
    ) -> None:
        ...

    @__property__
    def level(self) -> RpcPriority: ...
    @level.setter
    def level(self, value: __T.Optional[RpcPriority]) -> None: ...


    def isUnion(self) -> bool: ...
    def checkRequired(self) -> None: ...
    def read(self, iprot: TProtocolBase) -> None: ...
    @__T.overload
    def readFromJson(self, json: __T.Dict[str, __T.Any], is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    @__T.overload
    def readFromJson(self, json: str, is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    def write(self, oprot: TProtocolBase) -> None: ...
    def __eq__(self, other: __T.Any) -> bool: ...
    def __ne__(self, other: __T.Any) -> bool: ...
    def __dir__(self) -> __T.Sequence[str]: ...
    def _to_python(self) -> "facebook.thrift.annotation.thrift.thrift_types.Priority": ...   # type: ignore
    def _to_mutable_python(self) -> "facebook.thrift.annotation.thrift.thrift_mutable_types.Priority": ...   # type: ignore
    def _to_py3(self) -> "facebook.thrift.annotation.thrift.types.Priority": ...   # type: ignore
    def _to_py_deprecated(self) -> Priority: ...


class DeprecatedUnvalidatedAnnotations:
    thrift_spec: __T.Tuple[__T.Optional[__T.Tuple[int, int, str, __T.Any, __T.Optional[int], int]]]
    thrift_field_annotations: __T.Dict[int, __T.Dict[str, str]]
    thrift_struct_annotations: __T.Dict[str, str]

    def __init__(
        self, *,
        items: __T.Optional[__T.Dict[str, str]] = ...
    ) -> None:
        ...

    @__property__
    def items(self) -> __T.Dict[str, str]: ...
    @items.setter
    def items(self, value: __T.Optional[__T.Dict[str, str]]) -> None: ...


    def isUnion(self) -> bool: ...
    def checkRequired(self) -> None: ...
    def read(self, iprot: TProtocolBase) -> None: ...
    @__T.overload
    def readFromJson(self, json: __T.Dict[str, __T.Any], is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    @__T.overload
    def readFromJson(self, json: str, is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    def write(self, oprot: TProtocolBase) -> None: ...
    def __eq__(self, other: __T.Any) -> bool: ...
    def __ne__(self, other: __T.Any) -> bool: ...
    def __dir__(self) -> __T.Sequence[str]: ...
    def _to_python(self) -> "facebook.thrift.annotation.thrift.thrift_types.DeprecatedUnvalidatedAnnotations": ...   # type: ignore
    def _to_mutable_python(self) -> "facebook.thrift.annotation.thrift.thrift_mutable_types.DeprecatedUnvalidatedAnnotations": ...   # type: ignore
    def _to_py3(self) -> "facebook.thrift.annotation.thrift.types.DeprecatedUnvalidatedAnnotations": ...   # type: ignore
    def _to_py_deprecated(self) -> DeprecatedUnvalidatedAnnotations: ...


class AllowReservedIdentifier:
    thrift_spec: __T.Tuple[__T.Optional[__T.Tuple[int, int, str, __T.Any, __T.Optional[int], int]]]
    thrift_field_annotations: __T.Dict[int, __T.Dict[str, str]]
    thrift_struct_annotations: __T.Dict[str, str]

    def __init__(
        self
    ) -> None:
        ...



    def isUnion(self) -> bool: ...
    def checkRequired(self) -> None: ...
    def read(self, iprot: TProtocolBase) -> None: ...
    @__T.overload
    def readFromJson(self, json: __T.Dict[str, __T.Any], is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    @__T.overload
    def readFromJson(self, json: str, is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    def write(self, oprot: TProtocolBase) -> None: ...
    def __eq__(self, other: __T.Any) -> bool: ...
    def __ne__(self, other: __T.Any) -> bool: ...
    def __dir__(self) -> __T.Sequence[str]: ...
    def _to_python(self) -> "facebook.thrift.annotation.thrift.thrift_types.AllowReservedIdentifier": ...   # type: ignore
    def _to_mutable_python(self) -> "facebook.thrift.annotation.thrift.thrift_mutable_types.AllowReservedIdentifier": ...   # type: ignore
    def _to_py3(self) -> "facebook.thrift.annotation.thrift.types.AllowReservedIdentifier": ...   # type: ignore
    def _to_py_deprecated(self) -> AllowReservedIdentifier: ...


class AllowReservedFilename:
    thrift_spec: __T.Tuple[__T.Optional[__T.Tuple[int, int, str, __T.Any, __T.Optional[int], int]]]
    thrift_field_annotations: __T.Dict[int, __T.Dict[str, str]]
    thrift_struct_annotations: __T.Dict[str, str]

    def __init__(
        self
    ) -> None:
        ...



    def isUnion(self) -> bool: ...
    def checkRequired(self) -> None: ...
    def read(self, iprot: TProtocolBase) -> None: ...
    @__T.overload
    def readFromJson(self, json: __T.Dict[str, __T.Any], is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    @__T.overload
    def readFromJson(self, json: str, is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    def write(self, oprot: TProtocolBase) -> None: ...
    def __eq__(self, other: __T.Any) -> bool: ...
    def __ne__(self, other: __T.Any) -> bool: ...
    def __dir__(self) -> __T.Sequence[str]: ...
    def _to_python(self) -> "facebook.thrift.annotation.thrift.thrift_types.AllowReservedFilename": ...   # type: ignore
    def _to_mutable_python(self) -> "facebook.thrift.annotation.thrift.thrift_mutable_types.AllowReservedFilename": ...   # type: ignore
    def _to_py3(self) -> "facebook.thrift.annotation.thrift.types.AllowReservedFilename": ...   # type: ignore
    def _to_py_deprecated(self) -> AllowReservedFilename: ...


class RuntimeAnnotation:
    thrift_spec: __T.Tuple[__T.Optional[__T.Tuple[int, int, str, __T.Any, __T.Optional[int], int]]]
    thrift_field_annotations: __T.Dict[int, __T.Dict[str, str]]
    thrift_struct_annotations: __T.Dict[str, str]

    def __init__(
        self
    ) -> None:
        ...



    def isUnion(self) -> bool: ...
    def checkRequired(self) -> None: ...
    def read(self, iprot: TProtocolBase) -> None: ...
    @__T.overload
    def readFromJson(self, json: __T.Dict[str, __T.Any], is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    @__T.overload
    def readFromJson(self, json: str, is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    def write(self, oprot: TProtocolBase) -> None: ...
    def __eq__(self, other: __T.Any) -> bool: ...
    def __ne__(self, other: __T.Any) -> bool: ...
    def __dir__(self) -> __T.Sequence[str]: ...
    def _to_python(self) -> "facebook.thrift.annotation.thrift.thrift_types.RuntimeAnnotation": ...   # type: ignore
    def _to_mutable_python(self) -> "facebook.thrift.annotation.thrift.thrift_mutable_types.RuntimeAnnotation": ...   # type: ignore
    def _to_py3(self) -> "facebook.thrift.annotation.thrift.types.RuntimeAnnotation": ...   # type: ignore
    def _to_py_deprecated(self) -> RuntimeAnnotation: ...


class AllowLegacyTypedefUri:
    thrift_spec: __T.Tuple[__T.Optional[__T.Tuple[int, int, str, __T.Any, __T.Optional[int], int]]]
    thrift_field_annotations: __T.Dict[int, __T.Dict[str, str]]
    thrift_struct_annotations: __T.Dict[str, str]

    def __init__(
        self
    ) -> None:
        ...



    def isUnion(self) -> bool: ...
    def checkRequired(self) -> None: ...
    def read(self, iprot: TProtocolBase) -> None: ...
    @__T.overload
    def readFromJson(self, json: __T.Dict[str, __T.Any], is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    @__T.overload
    def readFromJson(self, json: str, is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    def write(self, oprot: TProtocolBase) -> None: ...
    def __eq__(self, other: __T.Any) -> bool: ...
    def __ne__(self, other: __T.Any) -> bool: ...
    def __dir__(self) -> __T.Sequence[str]: ...
    def _to_python(self) -> "facebook.thrift.annotation.thrift.thrift_types.AllowLegacyTypedefUri": ...   # type: ignore
    def _to_mutable_python(self) -> "facebook.thrift.annotation.thrift.thrift_mutable_types.AllowLegacyTypedefUri": ...   # type: ignore
    def _to_py3(self) -> "facebook.thrift.annotation.thrift.types.AllowLegacyTypedefUri": ...   # type: ignore
    def _to_py_deprecated(self) -> AllowLegacyTypedefUri: ...


class AllowUnsafeOptionalCustomDefaultValue:
    thrift_spec: __T.Tuple[__T.Optional[__T.Tuple[int, int, str, __T.Any, __T.Optional[int], int]]]
    thrift_field_annotations: __T.Dict[int, __T.Dict[str, str]]
    thrift_struct_annotations: __T.Dict[str, str]

    def __init__(
        self
    ) -> None:
        ...



    def isUnion(self) -> bool: ...
    def checkRequired(self) -> None: ...
    def read(self, iprot: TProtocolBase) -> None: ...
    @__T.overload
    def readFromJson(self, json: __T.Dict[str, __T.Any], is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    @__T.overload
    def readFromJson(self, json: str, is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    def write(self, oprot: TProtocolBase) -> None: ...
    def __eq__(self, other: __T.Any) -> bool: ...
    def __ne__(self, other: __T.Any) -> bool: ...
    def __dir__(self) -> __T.Sequence[str]: ...
    def _to_python(self) -> "facebook.thrift.annotation.thrift.thrift_types.AllowUnsafeOptionalCustomDefaultValue": ...   # type: ignore
    def _to_mutable_python(self) -> "facebook.thrift.annotation.thrift.thrift_mutable_types.AllowUnsafeOptionalCustomDefaultValue": ...   # type: ignore
    def _to_py3(self) -> "facebook.thrift.annotation.thrift.types.AllowUnsafeOptionalCustomDefaultValue": ...   # type: ignore
    def _to_py_deprecated(self) -> AllowUnsafeOptionalCustomDefaultValue: ...


class AllowUnsafeUnionFieldCustomDefaultValue:
    thrift_spec: __T.Tuple[__T.Optional[__T.Tuple[int, int, str, __T.Any, __T.Optional[int], int]]]
    thrift_field_annotations: __T.Dict[int, __T.Dict[str, str]]
    thrift_struct_annotations: __T.Dict[str, str]

    def __init__(
        self
    ) -> None:
        ...



    def isUnion(self) -> bool: ...
    def checkRequired(self) -> None: ...
    def read(self, iprot: TProtocolBase) -> None: ...
    @__T.overload
    def readFromJson(self, json: __T.Dict[str, __T.Any], is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    @__T.overload
    def readFromJson(self, json: str, is_text: bool = ..., **kwargs: __T.Any) -> None: ...
    def write(self, oprot: TProtocolBase) -> None: ...
    def __eq__(self, other: __T.Any) -> bool: ...
    def __ne__(self, other: __T.Any) -> bool: ...
    def __dir__(self) -> __T.Sequence[str]: ...
    def _to_python(self) -> "facebook.thrift.annotation.thrift.thrift_types.AllowUnsafeUnionFieldCustomDefaultValue": ...   # type: ignore
    def _to_mutable_python(self) -> "facebook.thrift.annotation.thrift.thrift_mutable_types.AllowUnsafeUnionFieldCustomDefaultValue": ...   # type: ignore
    def _to_py3(self) -> "facebook.thrift.annotation.thrift.types.AllowUnsafeUnionFieldCustomDefaultValue": ...   # type: ignore
    def _to_py_deprecated(self) -> AllowUnsafeUnionFieldCustomDefaultValue: ...


