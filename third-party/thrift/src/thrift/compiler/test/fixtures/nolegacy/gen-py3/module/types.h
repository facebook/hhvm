/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#pragma once

#include <functional>
#include <folly/Range.h>

#include <thrift/lib/py3/enums.h>
#include "thrift/compiler/test/fixtures/nolegacy/src/gen-cpp2/module_data.h"
#include "thrift/compiler/test/fixtures/nolegacy/src/gen-cpp2/module_types.h"
#include "thrift/compiler/test/fixtures/nolegacy/src/gen-cpp2/module_metadata.h"
namespace thrift {
namespace py3 {


template<>
inline const std::vector<std::pair<std::string_view, std::string_view>>& PyEnumTraits<
    ::test::fixtures::nolegacy::TestEnum>::namesmap() {
  static const folly::Indestructible<NamesMap> pairs {
    {
    }
  };
  return *pairs;
}


template<>
inline const std::vector<std::pair<std::string_view, std::string_view>>& PyEnumTraits<
    ::test::fixtures::nolegacy::TestUnion::Type>::namesmap() {
  static const folly::Indestructible<NamesMap> pairs {
    {
    }
  };
  return *pairs;
}


template<>
inline void reset_field<::test::fixtures::nolegacy::TestError>(
    ::test::fixtures::nolegacy::TestError& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.test_enum().copy_from(default_inst<::test::fixtures::nolegacy::TestError>().test_enum());
      return;
    case 1:
      obj.code().copy_from(default_inst<::test::fixtures::nolegacy::TestError>().code());
      return;
  }
}

template<>
inline void reset_field<::test::fixtures::nolegacy::TestMixin>(
    ::test::fixtures::nolegacy::TestMixin& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.field1().copy_from(default_inst<::test::fixtures::nolegacy::TestMixin>().field1());
      return;
  }
}

template<>
inline void reset_field<::test::fixtures::nolegacy::TestStruct>(
    ::test::fixtures::nolegacy::TestStruct& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.bar().copy_from(default_inst<::test::fixtures::nolegacy::TestStruct>().bar());
      return;
    case 1:
      obj.baropt().copy_from(default_inst<::test::fixtures::nolegacy::TestStruct>().baropt());
      return;
    case 2:
      obj.test_error().copy_from(default_inst<::test::fixtures::nolegacy::TestStruct>().test_error());
      return;
    case 3:
      obj.test_mixin().copy_from(default_inst<::test::fixtures::nolegacy::TestStruct>().test_mixin());
      return;
  }
}

template<>
inline const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::test::fixtures::nolegacy::TestError>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
inline const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::test::fixtures::nolegacy::TestMixin>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
inline const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::test::fixtures::nolegacy::TestStruct>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
inline const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::test::fixtures::nolegacy::TestUnion>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}
} // namespace py3
} // namespace thrift
