/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/terse_write/src/deprecated_terse_write.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>

namespace apache::thrift {
namespace ident {
struct bool_field;
struct byte_field;
struct short_field;
struct int_field;
struct long_field;
struct float_field;
struct double_field;
struct string_field;
struct binary_field;
struct enum_field;
struct list_field;
struct set_field;
struct map_field;
struct struct_field;
struct union_field;
struct terse_bool_field;
struct terse_byte_field;
struct terse_short_field;
struct terse_int_field;
struct terse_long_field;
struct terse_float_field;
struct terse_double_field;
struct terse_string_field;
struct terse_binary_field;
struct terse_enum_field;
struct terse_list_field;
struct terse_set_field;
struct terse_map_field;
struct terse_struct_field;
struct bool_field;
struct byte_field;
struct short_field;
struct int_field;
struct long_field;
struct float_field;
struct double_field;
struct string_field;
struct binary_field;
struct enum_field;
struct list_field;
struct set_field;
struct map_field;
struct struct_field;
struct union_field;
struct iobuf_ptr_field;
struct primitive_ref_field;
struct struct_ref_field;
struct bool_field;
struct byte_field;
struct short_field;
struct int_field;
struct long_field;
struct float_field;
struct double_field;
struct string_field;
struct binary_field;
struct enum_field;
struct list_field;
struct set_field;
struct map_field;
struct bool_field;
struct byte_field;
struct short_field;
struct int_field;
struct long_field;
struct float_field;
struct double_field;
struct string_field;
struct binary_field;
struct enum_field;
struct list_field;
struct set_field;
struct map_field;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_bool_field
#define APACHE_THRIFT_ACCESSOR_bool_field
APACHE_THRIFT_DEFINE_ACCESSOR(bool_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_byte_field
#define APACHE_THRIFT_ACCESSOR_byte_field
APACHE_THRIFT_DEFINE_ACCESSOR(byte_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_short_field
#define APACHE_THRIFT_ACCESSOR_short_field
APACHE_THRIFT_DEFINE_ACCESSOR(short_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_int_field
#define APACHE_THRIFT_ACCESSOR_int_field
APACHE_THRIFT_DEFINE_ACCESSOR(int_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_long_field
#define APACHE_THRIFT_ACCESSOR_long_field
APACHE_THRIFT_DEFINE_ACCESSOR(long_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_float_field
#define APACHE_THRIFT_ACCESSOR_float_field
APACHE_THRIFT_DEFINE_ACCESSOR(float_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_double_field
#define APACHE_THRIFT_ACCESSOR_double_field
APACHE_THRIFT_DEFINE_ACCESSOR(double_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_string_field
#define APACHE_THRIFT_ACCESSOR_string_field
APACHE_THRIFT_DEFINE_ACCESSOR(string_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binary_field
#define APACHE_THRIFT_ACCESSOR_binary_field
APACHE_THRIFT_DEFINE_ACCESSOR(binary_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_enum_field
#define APACHE_THRIFT_ACCESSOR_enum_field
APACHE_THRIFT_DEFINE_ACCESSOR(enum_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_field
#define APACHE_THRIFT_ACCESSOR_list_field
APACHE_THRIFT_DEFINE_ACCESSOR(list_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_set_field
#define APACHE_THRIFT_ACCESSOR_set_field
APACHE_THRIFT_DEFINE_ACCESSOR(set_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_map_field
#define APACHE_THRIFT_ACCESSOR_map_field
APACHE_THRIFT_DEFINE_ACCESSOR(map_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_struct_field
#define APACHE_THRIFT_ACCESSOR_struct_field
APACHE_THRIFT_DEFINE_ACCESSOR(struct_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_union_field
#define APACHE_THRIFT_ACCESSOR_union_field
APACHE_THRIFT_DEFINE_ACCESSOR(union_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_terse_bool_field
#define APACHE_THRIFT_ACCESSOR_terse_bool_field
APACHE_THRIFT_DEFINE_ACCESSOR(terse_bool_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_terse_byte_field
#define APACHE_THRIFT_ACCESSOR_terse_byte_field
APACHE_THRIFT_DEFINE_ACCESSOR(terse_byte_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_terse_short_field
#define APACHE_THRIFT_ACCESSOR_terse_short_field
APACHE_THRIFT_DEFINE_ACCESSOR(terse_short_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_terse_int_field
#define APACHE_THRIFT_ACCESSOR_terse_int_field
APACHE_THRIFT_DEFINE_ACCESSOR(terse_int_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_terse_long_field
#define APACHE_THRIFT_ACCESSOR_terse_long_field
APACHE_THRIFT_DEFINE_ACCESSOR(terse_long_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_terse_float_field
#define APACHE_THRIFT_ACCESSOR_terse_float_field
APACHE_THRIFT_DEFINE_ACCESSOR(terse_float_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_terse_double_field
#define APACHE_THRIFT_ACCESSOR_terse_double_field
APACHE_THRIFT_DEFINE_ACCESSOR(terse_double_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_terse_string_field
#define APACHE_THRIFT_ACCESSOR_terse_string_field
APACHE_THRIFT_DEFINE_ACCESSOR(terse_string_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_terse_binary_field
#define APACHE_THRIFT_ACCESSOR_terse_binary_field
APACHE_THRIFT_DEFINE_ACCESSOR(terse_binary_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_terse_enum_field
#define APACHE_THRIFT_ACCESSOR_terse_enum_field
APACHE_THRIFT_DEFINE_ACCESSOR(terse_enum_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_terse_list_field
#define APACHE_THRIFT_ACCESSOR_terse_list_field
APACHE_THRIFT_DEFINE_ACCESSOR(terse_list_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_terse_set_field
#define APACHE_THRIFT_ACCESSOR_terse_set_field
APACHE_THRIFT_DEFINE_ACCESSOR(terse_set_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_terse_map_field
#define APACHE_THRIFT_ACCESSOR_terse_map_field
APACHE_THRIFT_DEFINE_ACCESSOR(terse_map_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_terse_struct_field
#define APACHE_THRIFT_ACCESSOR_terse_struct_field
APACHE_THRIFT_DEFINE_ACCESSOR(terse_struct_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_bool_field
#define APACHE_THRIFT_ACCESSOR_bool_field
APACHE_THRIFT_DEFINE_ACCESSOR(bool_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_byte_field
#define APACHE_THRIFT_ACCESSOR_byte_field
APACHE_THRIFT_DEFINE_ACCESSOR(byte_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_short_field
#define APACHE_THRIFT_ACCESSOR_short_field
APACHE_THRIFT_DEFINE_ACCESSOR(short_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_int_field
#define APACHE_THRIFT_ACCESSOR_int_field
APACHE_THRIFT_DEFINE_ACCESSOR(int_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_long_field
#define APACHE_THRIFT_ACCESSOR_long_field
APACHE_THRIFT_DEFINE_ACCESSOR(long_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_float_field
#define APACHE_THRIFT_ACCESSOR_float_field
APACHE_THRIFT_DEFINE_ACCESSOR(float_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_double_field
#define APACHE_THRIFT_ACCESSOR_double_field
APACHE_THRIFT_DEFINE_ACCESSOR(double_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_string_field
#define APACHE_THRIFT_ACCESSOR_string_field
APACHE_THRIFT_DEFINE_ACCESSOR(string_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binary_field
#define APACHE_THRIFT_ACCESSOR_binary_field
APACHE_THRIFT_DEFINE_ACCESSOR(binary_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_enum_field
#define APACHE_THRIFT_ACCESSOR_enum_field
APACHE_THRIFT_DEFINE_ACCESSOR(enum_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_field
#define APACHE_THRIFT_ACCESSOR_list_field
APACHE_THRIFT_DEFINE_ACCESSOR(list_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_set_field
#define APACHE_THRIFT_ACCESSOR_set_field
APACHE_THRIFT_DEFINE_ACCESSOR(set_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_map_field
#define APACHE_THRIFT_ACCESSOR_map_field
APACHE_THRIFT_DEFINE_ACCESSOR(map_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_struct_field
#define APACHE_THRIFT_ACCESSOR_struct_field
APACHE_THRIFT_DEFINE_ACCESSOR(struct_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_union_field
#define APACHE_THRIFT_ACCESSOR_union_field
APACHE_THRIFT_DEFINE_ACCESSOR(union_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_iobuf_ptr_field
#define APACHE_THRIFT_ACCESSOR_iobuf_ptr_field
APACHE_THRIFT_DEFINE_ACCESSOR(iobuf_ptr_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_primitive_ref_field
#define APACHE_THRIFT_ACCESSOR_primitive_ref_field
APACHE_THRIFT_DEFINE_ACCESSOR(primitive_ref_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_struct_ref_field
#define APACHE_THRIFT_ACCESSOR_struct_ref_field
APACHE_THRIFT_DEFINE_ACCESSOR(struct_ref_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_bool_field
#define APACHE_THRIFT_ACCESSOR_bool_field
APACHE_THRIFT_DEFINE_ACCESSOR(bool_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_byte_field
#define APACHE_THRIFT_ACCESSOR_byte_field
APACHE_THRIFT_DEFINE_ACCESSOR(byte_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_short_field
#define APACHE_THRIFT_ACCESSOR_short_field
APACHE_THRIFT_DEFINE_ACCESSOR(short_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_int_field
#define APACHE_THRIFT_ACCESSOR_int_field
APACHE_THRIFT_DEFINE_ACCESSOR(int_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_long_field
#define APACHE_THRIFT_ACCESSOR_long_field
APACHE_THRIFT_DEFINE_ACCESSOR(long_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_float_field
#define APACHE_THRIFT_ACCESSOR_float_field
APACHE_THRIFT_DEFINE_ACCESSOR(float_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_double_field
#define APACHE_THRIFT_ACCESSOR_double_field
APACHE_THRIFT_DEFINE_ACCESSOR(double_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_string_field
#define APACHE_THRIFT_ACCESSOR_string_field
APACHE_THRIFT_DEFINE_ACCESSOR(string_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binary_field
#define APACHE_THRIFT_ACCESSOR_binary_field
APACHE_THRIFT_DEFINE_ACCESSOR(binary_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_enum_field
#define APACHE_THRIFT_ACCESSOR_enum_field
APACHE_THRIFT_DEFINE_ACCESSOR(enum_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_field
#define APACHE_THRIFT_ACCESSOR_list_field
APACHE_THRIFT_DEFINE_ACCESSOR(list_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_set_field
#define APACHE_THRIFT_ACCESSOR_set_field
APACHE_THRIFT_DEFINE_ACCESSOR(set_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_map_field
#define APACHE_THRIFT_ACCESSOR_map_field
APACHE_THRIFT_DEFINE_ACCESSOR(map_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_bool_field
#define APACHE_THRIFT_ACCESSOR_bool_field
APACHE_THRIFT_DEFINE_ACCESSOR(bool_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_byte_field
#define APACHE_THRIFT_ACCESSOR_byte_field
APACHE_THRIFT_DEFINE_ACCESSOR(byte_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_short_field
#define APACHE_THRIFT_ACCESSOR_short_field
APACHE_THRIFT_DEFINE_ACCESSOR(short_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_int_field
#define APACHE_THRIFT_ACCESSOR_int_field
APACHE_THRIFT_DEFINE_ACCESSOR(int_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_long_field
#define APACHE_THRIFT_ACCESSOR_long_field
APACHE_THRIFT_DEFINE_ACCESSOR(long_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_float_field
#define APACHE_THRIFT_ACCESSOR_float_field
APACHE_THRIFT_DEFINE_ACCESSOR(float_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_double_field
#define APACHE_THRIFT_ACCESSOR_double_field
APACHE_THRIFT_DEFINE_ACCESSOR(double_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_string_field
#define APACHE_THRIFT_ACCESSOR_string_field
APACHE_THRIFT_DEFINE_ACCESSOR(string_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binary_field
#define APACHE_THRIFT_ACCESSOR_binary_field
APACHE_THRIFT_DEFINE_ACCESSOR(binary_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_enum_field
#define APACHE_THRIFT_ACCESSOR_enum_field
APACHE_THRIFT_DEFINE_ACCESSOR(enum_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_field
#define APACHE_THRIFT_ACCESSOR_list_field
APACHE_THRIFT_DEFINE_ACCESSOR(list_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_set_field
#define APACHE_THRIFT_ACCESSOR_set_field
APACHE_THRIFT_DEFINE_ACCESSOR(set_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_map_field
#define APACHE_THRIFT_ACCESSOR_map_field
APACHE_THRIFT_DEFINE_ACCESSOR(map_field);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
namespace facebook::thrift::test::terse_write::deprecated {

/** Glean {"file": "thrift/compiler/test/fixtures/terse_write/src/deprecated_terse_write.thrift", "name": "MyEnum", "kind": "enum" } */
enum class MyEnum {
  ME0 = 0,
  ME1 = 1,
};

} // namespace facebook::thrift::test::terse_write::deprecated

template<> struct std::hash<::facebook::thrift::test::terse_write::deprecated::MyEnum> :
  ::apache::thrift::detail::enum_hash<::facebook::thrift::test::terse_write::deprecated::MyEnum> {};

namespace apache::thrift {

template <> struct TEnumTraits<::facebook::thrift::test::terse_write::deprecated::MyEnum> {
  using type = ::facebook::thrift::test::terse_write::deprecated::MyEnum;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "MyEnum";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "deprecated_terse_write";
  }

  FOLLY_ERASE static constexpr std::string_view __fbthrift_thrift_uri() noexcept {
    return "facebook.com/thrift/test/terse_write/deprecated/MyEnum";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::ME0; }
  static constexpr type max() { return type::ME1; }
};

} // namespace apache::thrift
// END declare_enums
// BEGIN forward_declare
namespace facebook::thrift::test::terse_write::deprecated {
class MyStruct;
class MyUnion;
class StructLevelTerseStruct;
class FieldLevelTerseStruct;
class CppRefStructFields;
class DeprecatedTerseWriteWithCustomDefault;
class DeprecatedTerseWriteWithRedundantCustomDefault;
} // namespace facebook::thrift::test::terse_write::deprecated
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
template<>
struct is_deprecated_terse_writes_with_custom_default_field<::facebook::thrift::test::terse_write::deprecated::DeprecatedTerseWriteWithCustomDefault,::apache::thrift::type::field_id<1>> : std::true_type{};
template<>
struct is_deprecated_terse_writes_with_custom_default_field<::facebook::thrift::test::terse_write::deprecated::DeprecatedTerseWriteWithCustomDefault,::apache::thrift::type::field_id<2>> : std::true_type{};
template<>
struct is_deprecated_terse_writes_with_custom_default_field<::facebook::thrift::test::terse_write::deprecated::DeprecatedTerseWriteWithCustomDefault,::apache::thrift::type::field_id<3>> : std::true_type{};
template<>
struct is_deprecated_terse_writes_with_custom_default_field<::facebook::thrift::test::terse_write::deprecated::DeprecatedTerseWriteWithCustomDefault,::apache::thrift::type::field_id<4>> : std::true_type{};
template<>
struct is_deprecated_terse_writes_with_custom_default_field<::facebook::thrift::test::terse_write::deprecated::DeprecatedTerseWriteWithCustomDefault,::apache::thrift::type::field_id<5>> : std::true_type{};
template<>
struct is_deprecated_terse_writes_with_custom_default_field<::facebook::thrift::test::terse_write::deprecated::DeprecatedTerseWriteWithCustomDefault,::apache::thrift::type::field_id<6>> : std::true_type{};
template<>
struct is_deprecated_terse_writes_with_custom_default_field<::facebook::thrift::test::terse_write::deprecated::DeprecatedTerseWriteWithCustomDefault,::apache::thrift::type::field_id<7>> : std::true_type{};
template<>
struct is_deprecated_terse_writes_with_custom_default_field<::facebook::thrift::test::terse_write::deprecated::DeprecatedTerseWriteWithCustomDefault,::apache::thrift::type::field_id<8>> : std::true_type{};
template<>
struct is_deprecated_terse_writes_with_custom_default_field<::facebook::thrift::test::terse_write::deprecated::DeprecatedTerseWriteWithCustomDefault,::apache::thrift::type::field_id<9>> : std::true_type{};
template<>
struct is_deprecated_terse_writes_with_custom_default_field<::facebook::thrift::test::terse_write::deprecated::DeprecatedTerseWriteWithCustomDefault,::apache::thrift::type::field_id<10>> : std::true_type{};
template<>
struct is_deprecated_terse_writes_with_custom_default_field<::facebook::thrift::test::terse_write::deprecated::DeprecatedTerseWriteWithCustomDefault,::apache::thrift::type::field_id<11>> : std::true_type{};
template<>
struct is_deprecated_terse_writes_with_custom_default_field<::facebook::thrift::test::terse_write::deprecated::DeprecatedTerseWriteWithCustomDefault,::apache::thrift::type::field_id<12>> : std::true_type{};
template<>
struct is_deprecated_terse_writes_with_custom_default_field<::facebook::thrift::test::terse_write::deprecated::DeprecatedTerseWriteWithCustomDefault,::apache::thrift::type::field_id<13>> : std::true_type{};
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace facebook::thrift::test::terse_write::deprecated {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;


/** Glean {"file": "thrift/compiler/test/fixtures/terse_write/src/deprecated_terse_write.thrift", "name": "MyStruct", "kind": "struct" } */
class MyStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "deprecated_terse_write";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  MyStruct() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStruct(apache::thrift::FragileConstructor);

  MyStruct(MyStruct&&) = default;

  MyStruct(const MyStruct&) = default;


  MyStruct& operator=(MyStruct&&) = default;

  MyStruct& operator=(const MyStruct&) = default;

 public:

  bool operator==(const MyStruct&) const;
  bool operator<(const MyStruct&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStruct>;
  friend void swap(MyStruct& a, MyStruct& b);
};

template <class Protocol_>
unsigned long MyStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/terse_write/src/deprecated_terse_write.thrift", "name": "MyUnion", "kind": "union" } */
class MyUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "deprecated_terse_write";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_destruct();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:
  enum class Type : int {
    __EMPTY__ = 0,
  } ;

  MyUnion()
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {}

  MyUnion(MyUnion&& rhs) noexcept
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  MyUnion(const MyUnion& rhs);

  MyUnion& operator=(MyUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        __fbthrift_clear();
        return *this;
      }
      default:
      {
        assert(false);
        __fbthrift_clear();
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  MyUnion& operator=(const MyUnion& rhs);


  union storage_type {

  } ;

  bool operator==(const MyUnion&) const;
  bool operator<(const MyUnion&) const;

  Type getType() const { return static_cast<Type>(fbthrift_type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  storage_type value_;
  std::underlying_type_t<Type> fbthrift_type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyUnion>;
  friend void swap(MyUnion& a, MyUnion& b);
};

template <class Protocol_>
unsigned long MyUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/terse_write/src/deprecated_terse_write.thrift", "name": "StructLevelTerseStruct", "kind": "struct" } */
class StructLevelTerseStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "deprecated_terse_write";
  }
  static constexpr std::size_t __fbthrift_num_fields = 15;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::bool_field,
    ::apache::thrift::ident::byte_field,
    ::apache::thrift::ident::short_field,
    ::apache::thrift::ident::int_field,
    ::apache::thrift::ident::long_field,
    ::apache::thrift::ident::float_field,
    ::apache::thrift::ident::double_field,
    ::apache::thrift::ident::string_field,
    ::apache::thrift::ident::binary_field,
    ::apache::thrift::ident::enum_field,
    ::apache::thrift::ident::list_field,
    ::apache::thrift::ident::set_field,
    ::apache::thrift::ident::map_field,
    ::apache::thrift::ident::struct_field,
    ::apache::thrift::ident::union_field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::byte_t,
    ::apache::thrift::type::i16_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::float_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::binary_t,
    ::apache::thrift::type::enum_t<::facebook::thrift::test::terse_write::deprecated::MyEnum>,
    ::apache::thrift::type::list<::apache::thrift::type::i16_t>,
    ::apache::thrift::type::set<::apache::thrift::type::i16_t>,
    ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::i16_t>,
    ::apache::thrift::type::struct_t<::facebook::thrift::test::terse_write::deprecated::MyStruct>,
    ::apache::thrift::type::union_t<::facebook::thrift::test::terse_write::deprecated::MyUnion>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StructLevelTerseStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  StructLevelTerseStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructLevelTerseStruct(apache::thrift::FragileConstructor, bool bool_field__arg, ::std::int8_t byte_field__arg, ::std::int16_t short_field__arg, ::std::int32_t int_field__arg, ::std::int64_t long_field__arg, float float_field__arg, double double_field__arg, ::std::string string_field__arg, ::std::string binary_field__arg, ::facebook::thrift::test::terse_write::deprecated::MyEnum enum_field__arg, ::std::vector<::std::int16_t> list_field__arg, ::std::set<::std::int16_t> set_field__arg, ::std::map<::std::int16_t, ::std::int16_t> map_field__arg, ::facebook::thrift::test::terse_write::deprecated::MyStruct struct_field__arg, ::facebook::thrift::test::terse_write::deprecated::MyUnion union_field__arg);

  StructLevelTerseStruct(StructLevelTerseStruct&&) noexcept;

  StructLevelTerseStruct(const StructLevelTerseStruct& src);


  StructLevelTerseStruct& operator=(StructLevelTerseStruct&&) noexcept;
  StructLevelTerseStruct& operator=(const StructLevelTerseStruct& src);

  ~StructLevelTerseStruct();

 private:
  bool __fbthrift_field_bool_field;
 private:
  ::std::int8_t __fbthrift_field_byte_field;
 private:
  ::std::int16_t __fbthrift_field_short_field;
 private:
  ::std::int32_t __fbthrift_field_int_field;
 private:
  ::std::int64_t __fbthrift_field_long_field;
 private:
  float __fbthrift_field_float_field;
 private:
  double __fbthrift_field_double_field;
 private:
  ::std::string __fbthrift_field_string_field;
 private:
  ::std::string __fbthrift_field_binary_field;
 private:
  ::facebook::thrift::test::terse_write::deprecated::MyEnum __fbthrift_field_enum_field;
 private:
  ::std::vector<::std::int16_t> __fbthrift_field_list_field;
 private:
  ::std::set<::std::int16_t> __fbthrift_field_set_field;
 private:
  ::std::map<::std::int16_t, ::std::int16_t> __fbthrift_field_map_field;
 private:
  ::facebook::thrift::test::terse_write::deprecated::MyStruct __fbthrift_field_struct_field;
 private:
  ::facebook::thrift::test::terse_write::deprecated::MyUnion __fbthrift_field_union_field;

 public:

  bool operator==(const StructLevelTerseStruct&) const;
  bool operator<(const StructLevelTerseStruct&) const;

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> bool_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_bool_field};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> bool_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_bool_field};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> bool_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_bool_field)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> bool_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_bool_field};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> bool_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_bool_field};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> bool_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_bool_field)};
  }

  /** Glean { "field": "byte_field" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> byte_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_byte_field};
  }

  /** Glean { "field": "byte_field" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> byte_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_byte_field};
  }

  /** Glean { "field": "byte_field" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> byte_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_byte_field)};
  }

  /** Glean { "field": "byte_field" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> byte_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_byte_field};
  }

  /** Glean { "field": "byte_field" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> byte_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_byte_field};
  }

  /** Glean { "field": "byte_field" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> byte_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_byte_field)};
  }

  /** Glean { "field": "short_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> short_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_short_field};
  }

  /** Glean { "field": "short_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> short_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_short_field};
  }

  /** Glean { "field": "short_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> short_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_short_field)};
  }

  /** Glean { "field": "short_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> short_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_short_field};
  }

  /** Glean { "field": "short_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> short_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_short_field};
  }

  /** Glean { "field": "short_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> short_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_short_field)};
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> int_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_int_field};
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> int_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_int_field};
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> int_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_int_field)};
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> int_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_int_field};
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> int_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_int_field};
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> int_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_int_field)};
  }

  /** Glean { "field": "long_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> long_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_long_field};
  }

  /** Glean { "field": "long_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> long_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_long_field};
  }

  /** Glean { "field": "long_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> long_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_long_field)};
  }

  /** Glean { "field": "long_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> long_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_long_field};
  }

  /** Glean { "field": "long_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> long_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_long_field};
  }

  /** Glean { "field": "long_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> long_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_long_field)};
  }

  /** Glean { "field": "float_field" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> float_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_float_field};
  }

  /** Glean { "field": "float_field" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> float_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_float_field};
  }

  /** Glean { "field": "float_field" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> float_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_float_field)};
  }

  /** Glean { "field": "float_field" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> float_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_float_field};
  }

  /** Glean { "field": "float_field" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> float_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_float_field};
  }

  /** Glean { "field": "float_field" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> float_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_float_field)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> double_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_double_field};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> double_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_double_field};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> double_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_double_field)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> double_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_double_field};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> double_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_double_field};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> double_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_double_field)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> string_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_string_field};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> string_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_string_field};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> string_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_string_field)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> string_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_string_field};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> string_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_string_field};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> string_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_string_field)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> binary_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_binary_field};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> binary_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_binary_field};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> binary_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_binary_field)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> binary_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_binary_field};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> binary_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_binary_field};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> binary_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_binary_field)};
  }

  /** Glean { "field": "enum_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> enum_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_enum_field};
  }

  /** Glean { "field": "enum_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> enum_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_enum_field};
  }

  /** Glean { "field": "enum_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> enum_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_enum_field)};
  }

  /** Glean { "field": "enum_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> enum_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_enum_field};
  }

  /** Glean { "field": "enum_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> enum_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_enum_field};
  }

  /** Glean { "field": "enum_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> enum_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_enum_field)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> list_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_list_field};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> list_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_list_field};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> list_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_list_field)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> list_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_list_field};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> list_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_list_field};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> list_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_list_field)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> set_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_set_field};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> set_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_set_field};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> set_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_set_field)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> set_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_set_field};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> set_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_set_field};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> set_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_set_field)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> map_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_map_field};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> map_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_map_field};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> map_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_map_field)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> map_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_map_field};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> map_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_map_field};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> map_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_map_field)};
  }

  /** Glean { "field": "struct_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> struct_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_struct_field};
  }

  /** Glean { "field": "struct_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> struct_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_struct_field};
  }

  /** Glean { "field": "struct_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> struct_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_struct_field)};
  }

  /** Glean { "field": "struct_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> struct_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_struct_field};
  }

  /** Glean { "field": "struct_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> struct_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_struct_field};
  }

  /** Glean { "field": "struct_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> struct_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_struct_field)};
  }

  /** Glean { "field": "union_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyUnion>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> union_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_union_field};
  }

  /** Glean { "field": "union_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyUnion>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> union_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_union_field};
  }

  /** Glean { "field": "union_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyUnion>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> union_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_union_field)};
  }

  /** Glean { "field": "union_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyUnion>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> union_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_union_field};
  }

  /** Glean { "field": "union_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyUnion>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> union_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_union_field};
  }

  /** Glean { "field": "union_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyUnion>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> union_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_union_field)};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructLevelTerseStruct>;
  friend void swap(StructLevelTerseStruct& a, StructLevelTerseStruct& b);
};

template <class Protocol_>
unsigned long StructLevelTerseStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/terse_write/src/deprecated_terse_write.thrift", "name": "FieldLevelTerseStruct", "kind": "struct" } */
class FieldLevelTerseStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "deprecated_terse_write";
  }
  static constexpr std::size_t __fbthrift_num_fields = 30;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::terse_bool_field,
    ::apache::thrift::ident::terse_byte_field,
    ::apache::thrift::ident::terse_short_field,
    ::apache::thrift::ident::terse_int_field,
    ::apache::thrift::ident::terse_long_field,
    ::apache::thrift::ident::terse_float_field,
    ::apache::thrift::ident::terse_double_field,
    ::apache::thrift::ident::terse_string_field,
    ::apache::thrift::ident::terse_binary_field,
    ::apache::thrift::ident::terse_enum_field,
    ::apache::thrift::ident::terse_list_field,
    ::apache::thrift::ident::terse_set_field,
    ::apache::thrift::ident::terse_map_field,
    ::apache::thrift::ident::terse_struct_field,
    ::apache::thrift::ident::bool_field,
    ::apache::thrift::ident::byte_field,
    ::apache::thrift::ident::short_field,
    ::apache::thrift::ident::int_field,
    ::apache::thrift::ident::long_field,
    ::apache::thrift::ident::float_field,
    ::apache::thrift::ident::double_field,
    ::apache::thrift::ident::string_field,
    ::apache::thrift::ident::binary_field,
    ::apache::thrift::ident::enum_field,
    ::apache::thrift::ident::list_field,
    ::apache::thrift::ident::set_field,
    ::apache::thrift::ident::map_field,
    ::apache::thrift::ident::struct_field,
    ::apache::thrift::ident::union_field,
    ::apache::thrift::ident::iobuf_ptr_field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::byte_t,
    ::apache::thrift::type::i16_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::float_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::binary_t,
    ::apache::thrift::type::enum_t<::facebook::thrift::test::terse_write::deprecated::MyEnum>,
    ::apache::thrift::type::list<::apache::thrift::type::i16_t>,
    ::apache::thrift::type::set<::apache::thrift::type::i16_t>,
    ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::i16_t>,
    ::apache::thrift::type::struct_t<::facebook::thrift::test::terse_write::deprecated::MyStruct>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::byte_t,
    ::apache::thrift::type::i16_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::float_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::binary_t,
    ::apache::thrift::type::enum_t<::facebook::thrift::test::terse_write::deprecated::MyEnum>,
    ::apache::thrift::type::list<::apache::thrift::type::i16_t>,
    ::apache::thrift::type::set<::apache::thrift::type::i16_t>,
    ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::i16_t>,
    ::apache::thrift::type::struct_t<::facebook::thrift::test::terse_write::deprecated::MyStruct>,
    ::apache::thrift::type::union_t<::facebook::thrift::test::terse_write::deprecated::MyUnion>,
    ::apache::thrift::type::cpp_type<std::unique_ptr<folly::IOBuf>, ::apache::thrift::type::byte_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = FieldLevelTerseStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  FieldLevelTerseStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  FieldLevelTerseStruct(apache::thrift::FragileConstructor, bool terse_bool_field__arg, ::std::int8_t terse_byte_field__arg, ::std::int16_t terse_short_field__arg, ::std::int32_t terse_int_field__arg, ::std::int64_t terse_long_field__arg, float terse_float_field__arg, double terse_double_field__arg, ::std::string terse_string_field__arg, ::std::string terse_binary_field__arg, ::facebook::thrift::test::terse_write::deprecated::MyEnum terse_enum_field__arg, ::std::vector<::std::int16_t> terse_list_field__arg, ::std::set<::std::int16_t> terse_set_field__arg, ::std::map<::std::int16_t, ::std::int16_t> terse_map_field__arg, ::facebook::thrift::test::terse_write::deprecated::MyStruct terse_struct_field__arg, bool bool_field__arg, ::std::int8_t byte_field__arg, ::std::int16_t short_field__arg, ::std::int32_t int_field__arg, ::std::int64_t long_field__arg, float float_field__arg, double double_field__arg, ::std::string string_field__arg, ::std::string binary_field__arg, ::facebook::thrift::test::terse_write::deprecated::MyEnum enum_field__arg, ::std::vector<::std::int16_t> list_field__arg, ::std::set<::std::int16_t> set_field__arg, ::std::map<::std::int16_t, ::std::int16_t> map_field__arg, ::facebook::thrift::test::terse_write::deprecated::MyStruct struct_field__arg, ::facebook::thrift::test::terse_write::deprecated::MyUnion union_field__arg, std::unique_ptr<folly::IOBuf> iobuf_ptr_field__arg);

  FieldLevelTerseStruct(FieldLevelTerseStruct&&) noexcept;

  FieldLevelTerseStruct(const FieldLevelTerseStruct& src);


  FieldLevelTerseStruct& operator=(FieldLevelTerseStruct&&) noexcept;
  FieldLevelTerseStruct& operator=(const FieldLevelTerseStruct& src);

  ~FieldLevelTerseStruct();

 private:
  bool __fbthrift_field_terse_bool_field;
 private:
  ::std::int8_t __fbthrift_field_terse_byte_field;
 private:
  ::std::int16_t __fbthrift_field_terse_short_field;
 private:
  ::std::int32_t __fbthrift_field_terse_int_field;
 private:
  ::std::int64_t __fbthrift_field_terse_long_field;
 private:
  float __fbthrift_field_terse_float_field;
 private:
  double __fbthrift_field_terse_double_field;
 private:
  ::std::string __fbthrift_field_terse_string_field;
 private:
  ::std::string __fbthrift_field_terse_binary_field;
 private:
  ::facebook::thrift::test::terse_write::deprecated::MyEnum __fbthrift_field_terse_enum_field;
 private:
  ::std::vector<::std::int16_t> __fbthrift_field_terse_list_field;
 private:
  ::std::set<::std::int16_t> __fbthrift_field_terse_set_field;
 private:
  ::std::map<::std::int16_t, ::std::int16_t> __fbthrift_field_terse_map_field;
 private:
  ::facebook::thrift::test::terse_write::deprecated::MyStruct __fbthrift_field_terse_struct_field;
 private:
  bool __fbthrift_field_bool_field;
 private:
  ::std::int8_t __fbthrift_field_byte_field;
 private:
  ::std::int16_t __fbthrift_field_short_field;
 private:
  ::std::int32_t __fbthrift_field_int_field;
 private:
  ::std::int64_t __fbthrift_field_long_field;
 private:
  float __fbthrift_field_float_field;
 private:
  double __fbthrift_field_double_field;
 private:
  ::std::string __fbthrift_field_string_field;
 private:
  ::std::string __fbthrift_field_binary_field;
 private:
  ::facebook::thrift::test::terse_write::deprecated::MyEnum __fbthrift_field_enum_field;
 private:
  ::std::vector<::std::int16_t> __fbthrift_field_list_field;
 private:
  ::std::set<::std::int16_t> __fbthrift_field_set_field;
 private:
  ::std::map<::std::int16_t, ::std::int16_t> __fbthrift_field_map_field;
 private:
  ::facebook::thrift::test::terse_write::deprecated::MyStruct __fbthrift_field_struct_field;
 private:
  ::facebook::thrift::test::terse_write::deprecated::MyUnion __fbthrift_field_union_field;
 private:
  std::unique_ptr<folly::IOBuf> __fbthrift_field_iobuf_ptr_field;
 private:
  apache::thrift::detail::isset_bitset<16, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const FieldLevelTerseStruct&) const;
  bool operator<(const FieldLevelTerseStruct&) const;

  /** Glean { "field": "terse_bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> terse_bool_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_terse_bool_field};
  }

  /** Glean { "field": "terse_bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> terse_bool_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_terse_bool_field};
  }

  /** Glean { "field": "terse_bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> terse_bool_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_terse_bool_field)};
  }

  /** Glean { "field": "terse_bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> terse_bool_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_terse_bool_field};
  }

  /** Glean { "field": "terse_bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> terse_bool_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_terse_bool_field};
  }

  /** Glean { "field": "terse_bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> terse_bool_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_terse_bool_field)};
  }

  /** Glean { "field": "terse_byte_field" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> terse_byte_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_terse_byte_field};
  }

  /** Glean { "field": "terse_byte_field" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> terse_byte_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_terse_byte_field};
  }

  /** Glean { "field": "terse_byte_field" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> terse_byte_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_terse_byte_field)};
  }

  /** Glean { "field": "terse_byte_field" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> terse_byte_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_terse_byte_field};
  }

  /** Glean { "field": "terse_byte_field" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> terse_byte_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_terse_byte_field};
  }

  /** Glean { "field": "terse_byte_field" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> terse_byte_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_terse_byte_field)};
  }

  /** Glean { "field": "terse_short_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> terse_short_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_terse_short_field};
  }

  /** Glean { "field": "terse_short_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> terse_short_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_terse_short_field};
  }

  /** Glean { "field": "terse_short_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> terse_short_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_terse_short_field)};
  }

  /** Glean { "field": "terse_short_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> terse_short_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_terse_short_field};
  }

  /** Glean { "field": "terse_short_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> terse_short_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_terse_short_field};
  }

  /** Glean { "field": "terse_short_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> terse_short_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_terse_short_field)};
  }

  /** Glean { "field": "terse_int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> terse_int_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_terse_int_field};
  }

  /** Glean { "field": "terse_int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> terse_int_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_terse_int_field};
  }

  /** Glean { "field": "terse_int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> terse_int_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_terse_int_field)};
  }

  /** Glean { "field": "terse_int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> terse_int_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_terse_int_field};
  }

  /** Glean { "field": "terse_int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> terse_int_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_terse_int_field};
  }

  /** Glean { "field": "terse_int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> terse_int_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_terse_int_field)};
  }

  /** Glean { "field": "terse_long_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> terse_long_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_terse_long_field};
  }

  /** Glean { "field": "terse_long_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> terse_long_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_terse_long_field};
  }

  /** Glean { "field": "terse_long_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> terse_long_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_terse_long_field)};
  }

  /** Glean { "field": "terse_long_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> terse_long_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_terse_long_field};
  }

  /** Glean { "field": "terse_long_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> terse_long_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_terse_long_field};
  }

  /** Glean { "field": "terse_long_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> terse_long_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_terse_long_field)};
  }

  /** Glean { "field": "terse_float_field" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> terse_float_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_terse_float_field};
  }

  /** Glean { "field": "terse_float_field" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> terse_float_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_terse_float_field};
  }

  /** Glean { "field": "terse_float_field" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> terse_float_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_terse_float_field)};
  }

  /** Glean { "field": "terse_float_field" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> terse_float_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_terse_float_field};
  }

  /** Glean { "field": "terse_float_field" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> terse_float_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_terse_float_field};
  }

  /** Glean { "field": "terse_float_field" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> terse_float_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_terse_float_field)};
  }

  /** Glean { "field": "terse_double_field" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> terse_double_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_terse_double_field};
  }

  /** Glean { "field": "terse_double_field" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> terse_double_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_terse_double_field};
  }

  /** Glean { "field": "terse_double_field" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> terse_double_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_terse_double_field)};
  }

  /** Glean { "field": "terse_double_field" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> terse_double_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_terse_double_field};
  }

  /** Glean { "field": "terse_double_field" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> terse_double_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_terse_double_field};
  }

  /** Glean { "field": "terse_double_field" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> terse_double_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_terse_double_field)};
  }

  /** Glean { "field": "terse_string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> terse_string_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_terse_string_field};
  }

  /** Glean { "field": "terse_string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> terse_string_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_terse_string_field};
  }

  /** Glean { "field": "terse_string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> terse_string_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_terse_string_field)};
  }

  /** Glean { "field": "terse_string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> terse_string_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_terse_string_field};
  }

  /** Glean { "field": "terse_string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> terse_string_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_terse_string_field};
  }

  /** Glean { "field": "terse_string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> terse_string_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_terse_string_field)};
  }

  /** Glean { "field": "terse_binary_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> terse_binary_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_terse_binary_field};
  }

  /** Glean { "field": "terse_binary_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> terse_binary_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_terse_binary_field};
  }

  /** Glean { "field": "terse_binary_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> terse_binary_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_terse_binary_field)};
  }

  /** Glean { "field": "terse_binary_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> terse_binary_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_terse_binary_field};
  }

  /** Glean { "field": "terse_binary_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> terse_binary_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_terse_binary_field};
  }

  /** Glean { "field": "terse_binary_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> terse_binary_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_terse_binary_field)};
  }

  /** Glean { "field": "terse_enum_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> terse_enum_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_terse_enum_field};
  }

  /** Glean { "field": "terse_enum_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> terse_enum_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_terse_enum_field};
  }

  /** Glean { "field": "terse_enum_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> terse_enum_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_terse_enum_field)};
  }

  /** Glean { "field": "terse_enum_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> terse_enum_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_terse_enum_field};
  }

  /** Glean { "field": "terse_enum_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> terse_enum_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_terse_enum_field};
  }

  /** Glean { "field": "terse_enum_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> terse_enum_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_terse_enum_field)};
  }

  /** Glean { "field": "terse_list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> terse_list_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_terse_list_field};
  }

  /** Glean { "field": "terse_list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> terse_list_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_terse_list_field};
  }

  /** Glean { "field": "terse_list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> terse_list_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_terse_list_field)};
  }

  /** Glean { "field": "terse_list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> terse_list_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_terse_list_field};
  }

  /** Glean { "field": "terse_list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> terse_list_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_terse_list_field};
  }

  /** Glean { "field": "terse_list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> terse_list_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_terse_list_field)};
  }

  /** Glean { "field": "terse_set_field" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> terse_set_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_terse_set_field};
  }

  /** Glean { "field": "terse_set_field" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> terse_set_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_terse_set_field};
  }

  /** Glean { "field": "terse_set_field" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> terse_set_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_terse_set_field)};
  }

  /** Glean { "field": "terse_set_field" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> terse_set_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_terse_set_field};
  }

  /** Glean { "field": "terse_set_field" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> terse_set_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_terse_set_field};
  }

  /** Glean { "field": "terse_set_field" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> terse_set_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_terse_set_field)};
  }

  /** Glean { "field": "terse_map_field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> terse_map_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_terse_map_field};
  }

  /** Glean { "field": "terse_map_field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> terse_map_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_terse_map_field};
  }

  /** Glean { "field": "terse_map_field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> terse_map_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_terse_map_field)};
  }

  /** Glean { "field": "terse_map_field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> terse_map_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_terse_map_field};
  }

  /** Glean { "field": "terse_map_field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> terse_map_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_terse_map_field};
  }

  /** Glean { "field": "terse_map_field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> terse_map_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_terse_map_field)};
  }

  /** Glean { "field": "terse_struct_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> terse_struct_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_terse_struct_field};
  }

  /** Glean { "field": "terse_struct_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> terse_struct_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_terse_struct_field};
  }

  /** Glean { "field": "terse_struct_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> terse_struct_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_terse_struct_field)};
  }

  /** Glean { "field": "terse_struct_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> terse_struct_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_terse_struct_field};
  }

  /** Glean { "field": "terse_struct_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> terse_struct_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_terse_struct_field};
  }

  /** Glean { "field": "terse_struct_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> terse_struct_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_terse_struct_field)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bool_field_ref() const& {
    return {this->__fbthrift_field_bool_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bool_field_ref() & {
    return {this->__fbthrift_field_bool_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bool_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bool_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bool_field() const& {
    return {this->__fbthrift_field_bool_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bool_field() & {
    return {this->__fbthrift_field_bool_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bool_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bool_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "byte_field" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> byte_field_ref() const& {
    return {this->__fbthrift_field_byte_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "byte_field" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> byte_field_ref() & {
    return {this->__fbthrift_field_byte_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "byte_field" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> byte_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_byte_field), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "byte_field" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> byte_field() const& {
    return {this->__fbthrift_field_byte_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "byte_field" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> byte_field() & {
    return {this->__fbthrift_field_byte_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "byte_field" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> byte_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_byte_field), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "short_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> short_field_ref() const& {
    return {this->__fbthrift_field_short_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "short_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> short_field_ref() & {
    return {this->__fbthrift_field_short_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "short_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> short_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_short_field), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "short_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> short_field() const& {
    return {this->__fbthrift_field_short_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "short_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> short_field() & {
    return {this->__fbthrift_field_short_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "short_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> short_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_short_field), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> int_field_ref() const& {
    return {this->__fbthrift_field_int_field, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> int_field_ref() & {
    return {this->__fbthrift_field_int_field, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> int_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_int_field), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> int_field() const& {
    return {this->__fbthrift_field_int_field, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> int_field() & {
    return {this->__fbthrift_field_int_field, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> int_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_int_field), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "long_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> long_field_ref() const& {
    return {this->__fbthrift_field_long_field, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "long_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> long_field_ref() & {
    return {this->__fbthrift_field_long_field, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "long_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> long_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_long_field), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "long_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> long_field() const& {
    return {this->__fbthrift_field_long_field, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "long_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> long_field() & {
    return {this->__fbthrift_field_long_field, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "long_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> long_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_long_field), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "float_field" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> float_field_ref() const& {
    return {this->__fbthrift_field_float_field, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "float_field" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> float_field_ref() & {
    return {this->__fbthrift_field_float_field, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "float_field" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> float_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_float_field), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "float_field" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> float_field() const& {
    return {this->__fbthrift_field_float_field, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "float_field" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> float_field() & {
    return {this->__fbthrift_field_float_field, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "float_field" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> float_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_float_field), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> double_field_ref() const& {
    return {this->__fbthrift_field_double_field, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> double_field_ref() & {
    return {this->__fbthrift_field_double_field, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> double_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_double_field), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> double_field() const& {
    return {this->__fbthrift_field_double_field, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> double_field() & {
    return {this->__fbthrift_field_double_field, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> double_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_double_field), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> string_field_ref() const& {
    return {this->__fbthrift_field_string_field, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> string_field_ref() & {
    return {this->__fbthrift_field_string_field, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> string_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_string_field), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> string_field() const& {
    return {this->__fbthrift_field_string_field, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> string_field() & {
    return {this->__fbthrift_field_string_field, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> string_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_string_field), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> binary_field_ref() const& {
    return {this->__fbthrift_field_binary_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> binary_field_ref() & {
    return {this->__fbthrift_field_binary_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> binary_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_binary_field), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> binary_field() const& {
    return {this->__fbthrift_field_binary_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> binary_field() & {
    return {this->__fbthrift_field_binary_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> binary_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_binary_field), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "enum_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> enum_field_ref() const& {
    return {this->__fbthrift_field_enum_field, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "enum_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> enum_field_ref() & {
    return {this->__fbthrift_field_enum_field, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "enum_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> enum_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_enum_field), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "enum_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> enum_field() const& {
    return {this->__fbthrift_field_enum_field, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "enum_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> enum_field() & {
    return {this->__fbthrift_field_enum_field, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "enum_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> enum_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_enum_field), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_field_ref() const& {
    return {this->__fbthrift_field_list_field, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_field_ref() & {
    return {this->__fbthrift_field_list_field, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_field), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_field() const& {
    return {this->__fbthrift_field_list_field, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_field() & {
    return {this->__fbthrift_field_list_field, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_field), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_field_ref() const& {
    return {this->__fbthrift_field_set_field, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_field_ref() & {
    return {this->__fbthrift_field_set_field, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_field), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_field() const& {
    return {this->__fbthrift_field_set_field, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_field() & {
    return {this->__fbthrift_field_set_field, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_field), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> map_field_ref() const& {
    return {this->__fbthrift_field_map_field, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> map_field_ref() & {
    return {this->__fbthrift_field_map_field, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> map_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_map_field), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> map_field() const& {
    return {this->__fbthrift_field_map_field, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> map_field() & {
    return {this->__fbthrift_field_map_field, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> map_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_map_field), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "struct_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> struct_field_ref() const& {
    return {this->__fbthrift_field_struct_field, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "struct_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> struct_field_ref() & {
    return {this->__fbthrift_field_struct_field, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "struct_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> struct_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_struct_field), __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "struct_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> struct_field() const& {
    return {this->__fbthrift_field_struct_field, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "struct_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> struct_field() & {
    return {this->__fbthrift_field_struct_field, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "struct_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> struct_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_struct_field), __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "union_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> union_field_ref() const& {
    return {this->__fbthrift_field_union_field, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "union_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> union_field_ref() & {
    return {this->__fbthrift_field_union_field, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "union_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> union_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_union_field), __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "union_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> union_field() const& {
    return {this->__fbthrift_field_union_field, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "union_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> union_field() & {
    return {this->__fbthrift_field_union_field, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "union_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> union_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_union_field), __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "iobuf_ptr_field" } */
  template <typename..., typename fbthrift_T = std::unique_ptr<folly::IOBuf>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> iobuf_ptr_field_ref() const& {
    return {this->__fbthrift_field_iobuf_ptr_field, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "iobuf_ptr_field" } */
  template <typename..., typename fbthrift_T = std::unique_ptr<folly::IOBuf>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> iobuf_ptr_field_ref() & {
    return {this->__fbthrift_field_iobuf_ptr_field, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "iobuf_ptr_field" } */
  template <typename..., typename fbthrift_T = std::unique_ptr<folly::IOBuf>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> iobuf_ptr_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_iobuf_ptr_field), __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "iobuf_ptr_field" } */
  template <typename..., typename fbthrift_T = std::unique_ptr<folly::IOBuf>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> iobuf_ptr_field() const& {
    return {this->__fbthrift_field_iobuf_ptr_field, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "iobuf_ptr_field" } */
  template <typename..., typename fbthrift_T = std::unique_ptr<folly::IOBuf>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> iobuf_ptr_field() & {
    return {this->__fbthrift_field_iobuf_ptr_field, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "iobuf_ptr_field" } */
  template <typename..., typename fbthrift_T = std::unique_ptr<folly::IOBuf>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> iobuf_ptr_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_iobuf_ptr_field), __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "bool_field" } */
  [[deprecated("Use `FOO.bool_field().value()` instead of `FOO.get_bool_field()`")]]
  bool get_bool_field() const;

  /** Glean { "field": "bool_field" } */
  [[deprecated("Use `FOO.bool_field() = BAR` instead of `FOO.set_bool_field(BAR)`")]]
  bool& set_bool_field(bool bool_field_);

  /** Glean { "field": "byte_field" } */
  [[deprecated("Use `FOO.byte_field().value()` instead of `FOO.get_byte_field()`")]]
  ::std::int8_t get_byte_field() const;

  /** Glean { "field": "byte_field" } */
  [[deprecated("Use `FOO.byte_field() = BAR` instead of `FOO.set_byte_field(BAR)`")]]
  ::std::int8_t& set_byte_field(::std::int8_t byte_field_);

  /** Glean { "field": "short_field" } */
  [[deprecated("Use `FOO.short_field().value()` instead of `FOO.get_short_field()`")]]
  ::std::int16_t get_short_field() const;

  /** Glean { "field": "short_field" } */
  [[deprecated("Use `FOO.short_field() = BAR` instead of `FOO.set_short_field(BAR)`")]]
  ::std::int16_t& set_short_field(::std::int16_t short_field_);

  /** Glean { "field": "int_field" } */
  [[deprecated("Use `FOO.int_field().value()` instead of `FOO.get_int_field()`")]]
  ::std::int32_t get_int_field() const;

  /** Glean { "field": "int_field" } */
  [[deprecated("Use `FOO.int_field() = BAR` instead of `FOO.set_int_field(BAR)`")]]
  ::std::int32_t& set_int_field(::std::int32_t int_field_);

  /** Glean { "field": "long_field" } */
  [[deprecated("Use `FOO.long_field().value()` instead of `FOO.get_long_field()`")]]
  ::std::int64_t get_long_field() const;

  /** Glean { "field": "long_field" } */
  [[deprecated("Use `FOO.long_field() = BAR` instead of `FOO.set_long_field(BAR)`")]]
  ::std::int64_t& set_long_field(::std::int64_t long_field_);

  /** Glean { "field": "float_field" } */
  [[deprecated("Use `FOO.float_field().value()` instead of `FOO.get_float_field()`")]]
  float get_float_field() const;

  /** Glean { "field": "float_field" } */
  [[deprecated("Use `FOO.float_field() = BAR` instead of `FOO.set_float_field(BAR)`")]]
  float& set_float_field(float float_field_);

  /** Glean { "field": "double_field" } */
  [[deprecated("Use `FOO.double_field().value()` instead of `FOO.get_double_field()`")]]
  double get_double_field() const;

  /** Glean { "field": "double_field" } */
  [[deprecated("Use `FOO.double_field() = BAR` instead of `FOO.set_double_field(BAR)`")]]
  double& set_double_field(double double_field_);

  /** Glean { "field": "string_field" } */
  [[deprecated("Use `FOO.string_field().value()` instead of `FOO.get_string_field()`")]]
  const ::std::string& get_string_field() const& {
    return __fbthrift_field_string_field;
  }

  /** Glean { "field": "string_field" } */
  [[deprecated("Use `FOO.string_field().value()` instead of `FOO.get_string_field()`")]]
  ::std::string get_string_field() && {
    return static_cast<::std::string&&>(__fbthrift_field_string_field);
  }

  /** Glean { "field": "string_field" } */
  template <typename T_FieldLevelTerseStruct_string_field_struct_setter = ::std::string>
  [[deprecated("Use `FOO.string_field() = BAR` instead of `FOO.set_string_field(BAR)`")]]
  ::std::string& set_string_field(T_FieldLevelTerseStruct_string_field_struct_setter&& string_field_) {
    string_field_ref() = std::forward<T_FieldLevelTerseStruct_string_field_struct_setter>(string_field_);
    return __fbthrift_field_string_field;
  }

  /** Glean { "field": "binary_field" } */
  [[deprecated("Use `FOO.binary_field().value()` instead of `FOO.get_binary_field()`")]]
  const ::std::string& get_binary_field() const& {
    return __fbthrift_field_binary_field;
  }

  /** Glean { "field": "binary_field" } */
  [[deprecated("Use `FOO.binary_field().value()` instead of `FOO.get_binary_field()`")]]
  ::std::string get_binary_field() && {
    return static_cast<::std::string&&>(__fbthrift_field_binary_field);
  }

  /** Glean { "field": "binary_field" } */
  template <typename T_FieldLevelTerseStruct_binary_field_struct_setter = ::std::string>
  [[deprecated("Use `FOO.binary_field() = BAR` instead of `FOO.set_binary_field(BAR)`")]]
  ::std::string& set_binary_field(T_FieldLevelTerseStruct_binary_field_struct_setter&& binary_field_) {
    binary_field_ref() = std::forward<T_FieldLevelTerseStruct_binary_field_struct_setter>(binary_field_);
    return __fbthrift_field_binary_field;
  }

  /** Glean { "field": "enum_field" } */
  [[deprecated("Use `FOO.enum_field().value()` instead of `FOO.get_enum_field()`")]]
  ::facebook::thrift::test::terse_write::deprecated::MyEnum get_enum_field() const;

  /** Glean { "field": "enum_field" } */
  [[deprecated("Use `FOO.enum_field() = BAR` instead of `FOO.set_enum_field(BAR)`")]]
  ::facebook::thrift::test::terse_write::deprecated::MyEnum& set_enum_field(::facebook::thrift::test::terse_write::deprecated::MyEnum enum_field_);

  /** Glean { "field": "list_field" } */
  [[deprecated("Use `FOO.list_field().value()` instead of `FOO.get_list_field()`")]]
  const ::std::vector<::std::int16_t>& get_list_field() const&;

  /** Glean { "field": "list_field" } */
  [[deprecated("Use `FOO.list_field().value()` instead of `FOO.get_list_field()`")]]
  ::std::vector<::std::int16_t> get_list_field() &&;

  /** Glean { "field": "list_field" } */
  template <typename T_FieldLevelTerseStruct_list_field_struct_setter = ::std::vector<::std::int16_t>>
  [[deprecated("Use `FOO.list_field() = BAR` instead of `FOO.set_list_field(BAR)`")]]
  ::std::vector<::std::int16_t>& set_list_field(T_FieldLevelTerseStruct_list_field_struct_setter&& list_field_) {
    list_field_ref() = std::forward<T_FieldLevelTerseStruct_list_field_struct_setter>(list_field_);
    return __fbthrift_field_list_field;
  }

  /** Glean { "field": "set_field" } */
  [[deprecated("Use `FOO.set_field().value()` instead of `FOO.get_set_field()`")]]
  const ::std::set<::std::int16_t>& get_set_field() const&;

  /** Glean { "field": "set_field" } */
  [[deprecated("Use `FOO.set_field().value()` instead of `FOO.get_set_field()`")]]
  ::std::set<::std::int16_t> get_set_field() &&;

  /** Glean { "field": "set_field" } */
  template <typename T_FieldLevelTerseStruct_set_field_struct_setter = ::std::set<::std::int16_t>>
  [[deprecated("Use `FOO.set_field() = BAR` instead of `FOO.set_set_field(BAR)`")]]
  ::std::set<::std::int16_t>& set_set_field(T_FieldLevelTerseStruct_set_field_struct_setter&& set_field_) {
    set_field_ref() = std::forward<T_FieldLevelTerseStruct_set_field_struct_setter>(set_field_);
    return __fbthrift_field_set_field;
  }

  /** Glean { "field": "map_field" } */
  [[deprecated("Use `FOO.map_field().value()` instead of `FOO.get_map_field()`")]]
  const ::std::map<::std::int16_t, ::std::int16_t>& get_map_field() const&;

  /** Glean { "field": "map_field" } */
  [[deprecated("Use `FOO.map_field().value()` instead of `FOO.get_map_field()`")]]
  ::std::map<::std::int16_t, ::std::int16_t> get_map_field() &&;

  /** Glean { "field": "map_field" } */
  template <typename T_FieldLevelTerseStruct_map_field_struct_setter = ::std::map<::std::int16_t, ::std::int16_t>>
  [[deprecated("Use `FOO.map_field() = BAR` instead of `FOO.set_map_field(BAR)`")]]
  ::std::map<::std::int16_t, ::std::int16_t>& set_map_field(T_FieldLevelTerseStruct_map_field_struct_setter&& map_field_) {
    map_field_ref() = std::forward<T_FieldLevelTerseStruct_map_field_struct_setter>(map_field_);
    return __fbthrift_field_map_field;
  }

  /** Glean { "field": "struct_field" } */
  [[deprecated("Use `FOO.struct_field().value()` instead of `FOO.get_struct_field()`")]]
  const ::facebook::thrift::test::terse_write::deprecated::MyStruct& get_struct_field() const&;

  /** Glean { "field": "struct_field" } */
  [[deprecated("Use `FOO.struct_field().value()` instead of `FOO.get_struct_field()`")]]
  ::facebook::thrift::test::terse_write::deprecated::MyStruct get_struct_field() &&;

  /** Glean { "field": "struct_field" } */
  template <typename T_FieldLevelTerseStruct_struct_field_struct_setter = ::facebook::thrift::test::terse_write::deprecated::MyStruct>
  [[deprecated("Use `FOO.struct_field() = BAR` instead of `FOO.set_struct_field(BAR)`")]]
  ::facebook::thrift::test::terse_write::deprecated::MyStruct& set_struct_field(T_FieldLevelTerseStruct_struct_field_struct_setter&& struct_field_) {
    struct_field_ref() = std::forward<T_FieldLevelTerseStruct_struct_field_struct_setter>(struct_field_);
    return __fbthrift_field_struct_field;
  }

  /** Glean { "field": "union_field" } */
  [[deprecated("Use `FOO.union_field().value()` instead of `FOO.get_union_field()`")]]
  const ::facebook::thrift::test::terse_write::deprecated::MyUnion& get_union_field() const&;

  /** Glean { "field": "union_field" } */
  [[deprecated("Use `FOO.union_field().value()` instead of `FOO.get_union_field()`")]]
  ::facebook::thrift::test::terse_write::deprecated::MyUnion get_union_field() &&;

  /** Glean { "field": "union_field" } */
  template <typename T_FieldLevelTerseStruct_union_field_struct_setter = ::facebook::thrift::test::terse_write::deprecated::MyUnion>
  [[deprecated("Use `FOO.union_field() = BAR` instead of `FOO.set_union_field(BAR)`")]]
  ::facebook::thrift::test::terse_write::deprecated::MyUnion& set_union_field(T_FieldLevelTerseStruct_union_field_struct_setter&& union_field_) {
    union_field_ref() = std::forward<T_FieldLevelTerseStruct_union_field_struct_setter>(union_field_);
    return __fbthrift_field_union_field;
  }

  /** Glean { "field": "iobuf_ptr_field" } */
  [[deprecated("Use `FOO.iobuf_ptr_field().value()` instead of `FOO.get_iobuf_ptr_field()`")]]
  std::unique_ptr<folly::IOBuf> get_iobuf_ptr_field() const;

  /** Glean { "field": "iobuf_ptr_field" } */
  [[deprecated("Use `FOO.iobuf_ptr_field() = BAR` instead of `FOO.set_iobuf_ptr_field(BAR)`")]]
  std::unique_ptr<folly::IOBuf>& set_iobuf_ptr_field(std::unique_ptr<folly::IOBuf> iobuf_ptr_field_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<FieldLevelTerseStruct>;
  friend void swap(FieldLevelTerseStruct& a, FieldLevelTerseStruct& b);
};

template <class Protocol_>
unsigned long FieldLevelTerseStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/terse_write/src/deprecated_terse_write.thrift", "name": "CppRefStructFields", "kind": "struct" } */
class CppRefStructFields final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "deprecated_terse_write";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::primitive_ref_field,
    ::apache::thrift::ident::struct_ref_field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::struct_t<::facebook::thrift::test::terse_write::deprecated::MyStruct>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = CppRefStructFields;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  CppRefStructFields();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  CppRefStructFields(apache::thrift::FragileConstructor, ::std::unique_ptr<::std::int32_t> primitive_ref_field__arg, ::std::unique_ptr<::facebook::thrift::test::terse_write::deprecated::MyStruct> struct_ref_field__arg);

  CppRefStructFields(CppRefStructFields&&) noexcept;
  CppRefStructFields(const CppRefStructFields& src);


  CppRefStructFields& operator=(CppRefStructFields&&) noexcept;
  CppRefStructFields& operator=(const CppRefStructFields& src);

  ~CppRefStructFields();

 private:
  ::std::unique_ptr<::std::int32_t> __fbthrift_field_primitive_ref_field;
 private:
  ::std::unique_ptr<::facebook::thrift::test::terse_write::deprecated::MyStruct> __fbthrift_field_struct_ref_field;

 public:

  bool operator==(const CppRefStructFields&) const;
  bool operator<(const CppRefStructFields&) const;
  /** Glean { "field": "primitive_ref_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int32_t>>
  FOLLY_ERASE fbthrift_T& primitive_ref_field_ref() & {
    return __fbthrift_field_primitive_ref_field;
  }

  /** Glean { "field": "primitive_ref_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int32_t>>
  FOLLY_ERASE const fbthrift_T& primitive_ref_field_ref() const& {
    return __fbthrift_field_primitive_ref_field;
  }

  /** Glean { "field": "primitive_ref_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int32_t>>
  FOLLY_ERASE fbthrift_T&& primitive_ref_field_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_primitive_ref_field);
  }

  /** Glean { "field": "primitive_ref_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int32_t>>
  FOLLY_ERASE const fbthrift_T&& primitive_ref_field_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_primitive_ref_field);
  }

  /** Glean { "field": "primitive_ref_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int32_t>>
  FOLLY_ERASE fbthrift_T& primitive_ref_field() & {
    return __fbthrift_field_primitive_ref_field;
  }

  /** Glean { "field": "primitive_ref_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int32_t>>
  FOLLY_ERASE const fbthrift_T& primitive_ref_field() const& {
    return __fbthrift_field_primitive_ref_field;
  }

  /** Glean { "field": "primitive_ref_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int32_t>>
  FOLLY_ERASE fbthrift_T&& primitive_ref_field() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_primitive_ref_field);
  }

  /** Glean { "field": "primitive_ref_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::int32_t>>
  FOLLY_ERASE const fbthrift_T&& primitive_ref_field() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_primitive_ref_field);
  }
  /** Glean { "field": "struct_ref_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::facebook::thrift::test::terse_write::deprecated::MyStruct>>
  FOLLY_ERASE fbthrift_T& struct_ref_field_ref() & {
    return __fbthrift_field_struct_ref_field;
  }

  /** Glean { "field": "struct_ref_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::facebook::thrift::test::terse_write::deprecated::MyStruct>>
  FOLLY_ERASE const fbthrift_T& struct_ref_field_ref() const& {
    return __fbthrift_field_struct_ref_field;
  }

  /** Glean { "field": "struct_ref_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::facebook::thrift::test::terse_write::deprecated::MyStruct>>
  FOLLY_ERASE fbthrift_T&& struct_ref_field_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_struct_ref_field);
  }

  /** Glean { "field": "struct_ref_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::facebook::thrift::test::terse_write::deprecated::MyStruct>>
  FOLLY_ERASE const fbthrift_T&& struct_ref_field_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_struct_ref_field);
  }

  /** Glean { "field": "struct_ref_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::facebook::thrift::test::terse_write::deprecated::MyStruct>>
  FOLLY_ERASE fbthrift_T& struct_ref_field() & {
    return __fbthrift_field_struct_ref_field;
  }

  /** Glean { "field": "struct_ref_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::facebook::thrift::test::terse_write::deprecated::MyStruct>>
  FOLLY_ERASE const fbthrift_T& struct_ref_field() const& {
    return __fbthrift_field_struct_ref_field;
  }

  /** Glean { "field": "struct_ref_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::facebook::thrift::test::terse_write::deprecated::MyStruct>>
  FOLLY_ERASE fbthrift_T&& struct_ref_field() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_struct_ref_field);
  }

  /** Glean { "field": "struct_ref_field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::facebook::thrift::test::terse_write::deprecated::MyStruct>>
  FOLLY_ERASE const fbthrift_T&& struct_ref_field() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_struct_ref_field);
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<CppRefStructFields>;
  friend void swap(CppRefStructFields& a, CppRefStructFields& b);
};

template <class Protocol_>
unsigned long CppRefStructFields::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/terse_write/src/deprecated_terse_write.thrift", "name": "DeprecatedTerseWriteWithCustomDefault", "kind": "struct" } */
class DeprecatedTerseWriteWithCustomDefault final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "deprecated_terse_write";
  }
  static constexpr std::size_t __fbthrift_num_fields = 13;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::bool_field,
    ::apache::thrift::ident::byte_field,
    ::apache::thrift::ident::short_field,
    ::apache::thrift::ident::int_field,
    ::apache::thrift::ident::long_field,
    ::apache::thrift::ident::float_field,
    ::apache::thrift::ident::double_field,
    ::apache::thrift::ident::string_field,
    ::apache::thrift::ident::binary_field,
    ::apache::thrift::ident::enum_field,
    ::apache::thrift::ident::list_field,
    ::apache::thrift::ident::set_field,
    ::apache::thrift::ident::map_field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::byte_t,
    ::apache::thrift::type::i16_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::float_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::binary_t,
    ::apache::thrift::type::enum_t<::facebook::thrift::test::terse_write::deprecated::MyEnum>,
    ::apache::thrift::type::list<::apache::thrift::type::i16_t>,
    ::apache::thrift::type::set<::apache::thrift::type::i16_t>,
    ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::i16_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = DeprecatedTerseWriteWithCustomDefault;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  DeprecatedTerseWriteWithCustomDefault();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  DeprecatedTerseWriteWithCustomDefault(apache::thrift::FragileConstructor, bool bool_field__arg, ::std::int8_t byte_field__arg, ::std::int16_t short_field__arg, ::std::int32_t int_field__arg, ::std::int64_t long_field__arg, float float_field__arg, double double_field__arg, ::std::string string_field__arg, ::std::string binary_field__arg, ::facebook::thrift::test::terse_write::deprecated::MyEnum enum_field__arg, ::std::vector<::std::int16_t> list_field__arg, ::std::set<::std::int16_t> set_field__arg, ::std::map<::std::int16_t, ::std::int16_t> map_field__arg);

  DeprecatedTerseWriteWithCustomDefault(DeprecatedTerseWriteWithCustomDefault&&) noexcept;

  DeprecatedTerseWriteWithCustomDefault(const DeprecatedTerseWriteWithCustomDefault& src);


  DeprecatedTerseWriteWithCustomDefault& operator=(DeprecatedTerseWriteWithCustomDefault&&) noexcept;
  DeprecatedTerseWriteWithCustomDefault& operator=(const DeprecatedTerseWriteWithCustomDefault& src);

  ~DeprecatedTerseWriteWithCustomDefault();

 private:
  bool __fbthrift_field_bool_field;
 private:
  ::std::int8_t __fbthrift_field_byte_field;
 private:
  ::std::int16_t __fbthrift_field_short_field;
 private:
  ::std::int32_t __fbthrift_field_int_field;
 private:
  ::std::int64_t __fbthrift_field_long_field;
 private:
  float __fbthrift_field_float_field;
 private:
  double __fbthrift_field_double_field;
 private:
  ::std::string __fbthrift_field_string_field;
 private:
  ::std::string __fbthrift_field_binary_field;
 private:
  ::facebook::thrift::test::terse_write::deprecated::MyEnum __fbthrift_field_enum_field;
 private:
  ::std::vector<::std::int16_t> __fbthrift_field_list_field;
 private:
  ::std::set<::std::int16_t> __fbthrift_field_set_field;
 private:
  ::std::map<::std::int16_t, ::std::int16_t> __fbthrift_field_map_field;
 private:
  apache::thrift::detail::isset_bitset<13, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const DeprecatedTerseWriteWithCustomDefault&) const;
  bool operator<(const DeprecatedTerseWriteWithCustomDefault&) const;

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bool_field_ref() const& {
    return {this->__fbthrift_field_bool_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bool_field_ref() & {
    return {this->__fbthrift_field_bool_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bool_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bool_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bool_field() const& {
    return {this->__fbthrift_field_bool_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bool_field() & {
    return {this->__fbthrift_field_bool_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bool_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bool_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "byte_field" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> byte_field_ref() const& {
    return {this->__fbthrift_field_byte_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "byte_field" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> byte_field_ref() & {
    return {this->__fbthrift_field_byte_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "byte_field" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> byte_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_byte_field), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "byte_field" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> byte_field() const& {
    return {this->__fbthrift_field_byte_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "byte_field" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> byte_field() & {
    return {this->__fbthrift_field_byte_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "byte_field" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> byte_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_byte_field), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "short_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> short_field_ref() const& {
    return {this->__fbthrift_field_short_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "short_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> short_field_ref() & {
    return {this->__fbthrift_field_short_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "short_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> short_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_short_field), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "short_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> short_field() const& {
    return {this->__fbthrift_field_short_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "short_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> short_field() & {
    return {this->__fbthrift_field_short_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "short_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> short_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_short_field), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> int_field_ref() const& {
    return {this->__fbthrift_field_int_field, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> int_field_ref() & {
    return {this->__fbthrift_field_int_field, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> int_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_int_field), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> int_field() const& {
    return {this->__fbthrift_field_int_field, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> int_field() & {
    return {this->__fbthrift_field_int_field, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> int_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_int_field), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "long_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> long_field_ref() const& {
    return {this->__fbthrift_field_long_field, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "long_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> long_field_ref() & {
    return {this->__fbthrift_field_long_field, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "long_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> long_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_long_field), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "long_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> long_field() const& {
    return {this->__fbthrift_field_long_field, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "long_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> long_field() & {
    return {this->__fbthrift_field_long_field, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "long_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> long_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_long_field), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "float_field" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> float_field_ref() const& {
    return {this->__fbthrift_field_float_field, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "float_field" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> float_field_ref() & {
    return {this->__fbthrift_field_float_field, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "float_field" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> float_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_float_field), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "float_field" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> float_field() const& {
    return {this->__fbthrift_field_float_field, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "float_field" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> float_field() & {
    return {this->__fbthrift_field_float_field, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "float_field" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> float_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_float_field), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> double_field_ref() const& {
    return {this->__fbthrift_field_double_field, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> double_field_ref() & {
    return {this->__fbthrift_field_double_field, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> double_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_double_field), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> double_field() const& {
    return {this->__fbthrift_field_double_field, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> double_field() & {
    return {this->__fbthrift_field_double_field, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> double_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_double_field), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> string_field_ref() const& {
    return {this->__fbthrift_field_string_field, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> string_field_ref() & {
    return {this->__fbthrift_field_string_field, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> string_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_string_field), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> string_field() const& {
    return {this->__fbthrift_field_string_field, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> string_field() & {
    return {this->__fbthrift_field_string_field, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> string_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_string_field), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> binary_field_ref() const& {
    return {this->__fbthrift_field_binary_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> binary_field_ref() & {
    return {this->__fbthrift_field_binary_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> binary_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_binary_field), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> binary_field() const& {
    return {this->__fbthrift_field_binary_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> binary_field() & {
    return {this->__fbthrift_field_binary_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> binary_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_binary_field), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "enum_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> enum_field_ref() const& {
    return {this->__fbthrift_field_enum_field, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "enum_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> enum_field_ref() & {
    return {this->__fbthrift_field_enum_field, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "enum_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> enum_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_enum_field), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "enum_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> enum_field() const& {
    return {this->__fbthrift_field_enum_field, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "enum_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> enum_field() & {
    return {this->__fbthrift_field_enum_field, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "enum_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> enum_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_enum_field), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_field_ref() const& {
    return {this->__fbthrift_field_list_field, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_field_ref() & {
    return {this->__fbthrift_field_list_field, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_field), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_field() const& {
    return {this->__fbthrift_field_list_field, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_field() & {
    return {this->__fbthrift_field_list_field, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_field), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_field_ref() const& {
    return {this->__fbthrift_field_set_field, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_field_ref() & {
    return {this->__fbthrift_field_set_field, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_field), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_field() const& {
    return {this->__fbthrift_field_set_field, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_field() & {
    return {this->__fbthrift_field_set_field, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_field), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> map_field_ref() const& {
    return {this->__fbthrift_field_map_field, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> map_field_ref() & {
    return {this->__fbthrift_field_map_field, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> map_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_map_field), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> map_field() const& {
    return {this->__fbthrift_field_map_field, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> map_field() & {
    return {this->__fbthrift_field_map_field, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> map_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_map_field), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "bool_field" } */
  [[deprecated("Use `FOO.bool_field().value()` instead of `FOO.get_bool_field()`")]]
  bool get_bool_field() const;

  /** Glean { "field": "bool_field" } */
  [[deprecated("Use `FOO.bool_field() = BAR` instead of `FOO.set_bool_field(BAR)`")]]
  bool& set_bool_field(bool bool_field_);

  /** Glean { "field": "byte_field" } */
  [[deprecated("Use `FOO.byte_field().value()` instead of `FOO.get_byte_field()`")]]
  ::std::int8_t get_byte_field() const;

  /** Glean { "field": "byte_field" } */
  [[deprecated("Use `FOO.byte_field() = BAR` instead of `FOO.set_byte_field(BAR)`")]]
  ::std::int8_t& set_byte_field(::std::int8_t byte_field_);

  /** Glean { "field": "short_field" } */
  [[deprecated("Use `FOO.short_field().value()` instead of `FOO.get_short_field()`")]]
  ::std::int16_t get_short_field() const;

  /** Glean { "field": "short_field" } */
  [[deprecated("Use `FOO.short_field() = BAR` instead of `FOO.set_short_field(BAR)`")]]
  ::std::int16_t& set_short_field(::std::int16_t short_field_);

  /** Glean { "field": "int_field" } */
  [[deprecated("Use `FOO.int_field().value()` instead of `FOO.get_int_field()`")]]
  ::std::int32_t get_int_field() const;

  /** Glean { "field": "int_field" } */
  [[deprecated("Use `FOO.int_field() = BAR` instead of `FOO.set_int_field(BAR)`")]]
  ::std::int32_t& set_int_field(::std::int32_t int_field_);

  /** Glean { "field": "long_field" } */
  [[deprecated("Use `FOO.long_field().value()` instead of `FOO.get_long_field()`")]]
  ::std::int64_t get_long_field() const;

  /** Glean { "field": "long_field" } */
  [[deprecated("Use `FOO.long_field() = BAR` instead of `FOO.set_long_field(BAR)`")]]
  ::std::int64_t& set_long_field(::std::int64_t long_field_);

  /** Glean { "field": "float_field" } */
  [[deprecated("Use `FOO.float_field().value()` instead of `FOO.get_float_field()`")]]
  float get_float_field() const;

  /** Glean { "field": "float_field" } */
  [[deprecated("Use `FOO.float_field() = BAR` instead of `FOO.set_float_field(BAR)`")]]
  float& set_float_field(float float_field_);

  /** Glean { "field": "double_field" } */
  [[deprecated("Use `FOO.double_field().value()` instead of `FOO.get_double_field()`")]]
  double get_double_field() const;

  /** Glean { "field": "double_field" } */
  [[deprecated("Use `FOO.double_field() = BAR` instead of `FOO.set_double_field(BAR)`")]]
  double& set_double_field(double double_field_);

  /** Glean { "field": "string_field" } */
  [[deprecated("Use `FOO.string_field().value()` instead of `FOO.get_string_field()`")]]
  const ::std::string& get_string_field() const& {
    return __fbthrift_field_string_field;
  }

  /** Glean { "field": "string_field" } */
  [[deprecated("Use `FOO.string_field().value()` instead of `FOO.get_string_field()`")]]
  ::std::string get_string_field() && {
    return static_cast<::std::string&&>(__fbthrift_field_string_field);
  }

  /** Glean { "field": "string_field" } */
  template <typename T_DeprecatedTerseWriteWithCustomDefault_string_field_struct_setter = ::std::string>
  [[deprecated("Use `FOO.string_field() = BAR` instead of `FOO.set_string_field(BAR)`")]]
  ::std::string& set_string_field(T_DeprecatedTerseWriteWithCustomDefault_string_field_struct_setter&& string_field_) {
    string_field_ref() = std::forward<T_DeprecatedTerseWriteWithCustomDefault_string_field_struct_setter>(string_field_);
    return __fbthrift_field_string_field;
  }

  /** Glean { "field": "binary_field" } */
  [[deprecated("Use `FOO.binary_field().value()` instead of `FOO.get_binary_field()`")]]
  const ::std::string& get_binary_field() const& {
    return __fbthrift_field_binary_field;
  }

  /** Glean { "field": "binary_field" } */
  [[deprecated("Use `FOO.binary_field().value()` instead of `FOO.get_binary_field()`")]]
  ::std::string get_binary_field() && {
    return static_cast<::std::string&&>(__fbthrift_field_binary_field);
  }

  /** Glean { "field": "binary_field" } */
  template <typename T_DeprecatedTerseWriteWithCustomDefault_binary_field_struct_setter = ::std::string>
  [[deprecated("Use `FOO.binary_field() = BAR` instead of `FOO.set_binary_field(BAR)`")]]
  ::std::string& set_binary_field(T_DeprecatedTerseWriteWithCustomDefault_binary_field_struct_setter&& binary_field_) {
    binary_field_ref() = std::forward<T_DeprecatedTerseWriteWithCustomDefault_binary_field_struct_setter>(binary_field_);
    return __fbthrift_field_binary_field;
  }

  /** Glean { "field": "enum_field" } */
  [[deprecated("Use `FOO.enum_field().value()` instead of `FOO.get_enum_field()`")]]
  ::facebook::thrift::test::terse_write::deprecated::MyEnum get_enum_field() const;

  /** Glean { "field": "enum_field" } */
  [[deprecated("Use `FOO.enum_field() = BAR` instead of `FOO.set_enum_field(BAR)`")]]
  ::facebook::thrift::test::terse_write::deprecated::MyEnum& set_enum_field(::facebook::thrift::test::terse_write::deprecated::MyEnum enum_field_);

  /** Glean { "field": "list_field" } */
  [[deprecated("Use `FOO.list_field().value()` instead of `FOO.get_list_field()`")]]
  const ::std::vector<::std::int16_t>& get_list_field() const&;

  /** Glean { "field": "list_field" } */
  [[deprecated("Use `FOO.list_field().value()` instead of `FOO.get_list_field()`")]]
  ::std::vector<::std::int16_t> get_list_field() &&;

  /** Glean { "field": "list_field" } */
  template <typename T_DeprecatedTerseWriteWithCustomDefault_list_field_struct_setter = ::std::vector<::std::int16_t>>
  [[deprecated("Use `FOO.list_field() = BAR` instead of `FOO.set_list_field(BAR)`")]]
  ::std::vector<::std::int16_t>& set_list_field(T_DeprecatedTerseWriteWithCustomDefault_list_field_struct_setter&& list_field_) {
    list_field_ref() = std::forward<T_DeprecatedTerseWriteWithCustomDefault_list_field_struct_setter>(list_field_);
    return __fbthrift_field_list_field;
  }

  /** Glean { "field": "set_field" } */
  [[deprecated("Use `FOO.set_field().value()` instead of `FOO.get_set_field()`")]]
  const ::std::set<::std::int16_t>& get_set_field() const&;

  /** Glean { "field": "set_field" } */
  [[deprecated("Use `FOO.set_field().value()` instead of `FOO.get_set_field()`")]]
  ::std::set<::std::int16_t> get_set_field() &&;

  /** Glean { "field": "set_field" } */
  template <typename T_DeprecatedTerseWriteWithCustomDefault_set_field_struct_setter = ::std::set<::std::int16_t>>
  [[deprecated("Use `FOO.set_field() = BAR` instead of `FOO.set_set_field(BAR)`")]]
  ::std::set<::std::int16_t>& set_set_field(T_DeprecatedTerseWriteWithCustomDefault_set_field_struct_setter&& set_field_) {
    set_field_ref() = std::forward<T_DeprecatedTerseWriteWithCustomDefault_set_field_struct_setter>(set_field_);
    return __fbthrift_field_set_field;
  }

  /** Glean { "field": "map_field" } */
  [[deprecated("Use `FOO.map_field().value()` instead of `FOO.get_map_field()`")]]
  const ::std::map<::std::int16_t, ::std::int16_t>& get_map_field() const&;

  /** Glean { "field": "map_field" } */
  [[deprecated("Use `FOO.map_field().value()` instead of `FOO.get_map_field()`")]]
  ::std::map<::std::int16_t, ::std::int16_t> get_map_field() &&;

  /** Glean { "field": "map_field" } */
  template <typename T_DeprecatedTerseWriteWithCustomDefault_map_field_struct_setter = ::std::map<::std::int16_t, ::std::int16_t>>
  [[deprecated("Use `FOO.map_field() = BAR` instead of `FOO.set_map_field(BAR)`")]]
  ::std::map<::std::int16_t, ::std::int16_t>& set_map_field(T_DeprecatedTerseWriteWithCustomDefault_map_field_struct_setter&& map_field_) {
    map_field_ref() = std::forward<T_DeprecatedTerseWriteWithCustomDefault_map_field_struct_setter>(map_field_);
    return __fbthrift_field_map_field;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<DeprecatedTerseWriteWithCustomDefault>;
  friend void swap(DeprecatedTerseWriteWithCustomDefault& a, DeprecatedTerseWriteWithCustomDefault& b);
};

template <class Protocol_>
unsigned long DeprecatedTerseWriteWithCustomDefault::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/terse_write/src/deprecated_terse_write.thrift", "name": "DeprecatedTerseWriteWithRedundantCustomDefault", "kind": "struct" } */
class DeprecatedTerseWriteWithRedundantCustomDefault final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "deprecated_terse_write";
  }
  static constexpr std::size_t __fbthrift_num_fields = 13;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::bool_field,
    ::apache::thrift::ident::byte_field,
    ::apache::thrift::ident::short_field,
    ::apache::thrift::ident::int_field,
    ::apache::thrift::ident::long_field,
    ::apache::thrift::ident::float_field,
    ::apache::thrift::ident::double_field,
    ::apache::thrift::ident::string_field,
    ::apache::thrift::ident::binary_field,
    ::apache::thrift::ident::enum_field,
    ::apache::thrift::ident::list_field,
    ::apache::thrift::ident::set_field,
    ::apache::thrift::ident::map_field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::byte_t,
    ::apache::thrift::type::i16_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::float_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::binary_t,
    ::apache::thrift::type::enum_t<::facebook::thrift::test::terse_write::deprecated::MyEnum>,
    ::apache::thrift::type::list<::apache::thrift::type::i16_t>,
    ::apache::thrift::type::set<::apache::thrift::type::i16_t>,
    ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::i16_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = DeprecatedTerseWriteWithRedundantCustomDefault;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  DeprecatedTerseWriteWithRedundantCustomDefault();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  DeprecatedTerseWriteWithRedundantCustomDefault(apache::thrift::FragileConstructor, bool bool_field__arg, ::std::int8_t byte_field__arg, ::std::int16_t short_field__arg, ::std::int32_t int_field__arg, ::std::int64_t long_field__arg, float float_field__arg, double double_field__arg, ::std::string string_field__arg, ::std::string binary_field__arg, ::facebook::thrift::test::terse_write::deprecated::MyEnum enum_field__arg, ::std::vector<::std::int16_t> list_field__arg, ::std::set<::std::int16_t> set_field__arg, ::std::map<::std::int16_t, ::std::int16_t> map_field__arg);

  DeprecatedTerseWriteWithRedundantCustomDefault(DeprecatedTerseWriteWithRedundantCustomDefault&&) noexcept;

  DeprecatedTerseWriteWithRedundantCustomDefault(const DeprecatedTerseWriteWithRedundantCustomDefault& src);


  DeprecatedTerseWriteWithRedundantCustomDefault& operator=(DeprecatedTerseWriteWithRedundantCustomDefault&&) noexcept;
  DeprecatedTerseWriteWithRedundantCustomDefault& operator=(const DeprecatedTerseWriteWithRedundantCustomDefault& src);

  ~DeprecatedTerseWriteWithRedundantCustomDefault();

 private:
  bool __fbthrift_field_bool_field;
 private:
  ::std::int8_t __fbthrift_field_byte_field;
 private:
  ::std::int16_t __fbthrift_field_short_field;
 private:
  ::std::int32_t __fbthrift_field_int_field;
 private:
  ::std::int64_t __fbthrift_field_long_field;
 private:
  float __fbthrift_field_float_field;
 private:
  double __fbthrift_field_double_field;
 private:
  ::std::string __fbthrift_field_string_field;
 private:
  ::std::string __fbthrift_field_binary_field;
 private:
  ::facebook::thrift::test::terse_write::deprecated::MyEnum __fbthrift_field_enum_field;
 private:
  ::std::vector<::std::int16_t> __fbthrift_field_list_field;
 private:
  ::std::set<::std::int16_t> __fbthrift_field_set_field;
 private:
  ::std::map<::std::int16_t, ::std::int16_t> __fbthrift_field_map_field;
 private:
  apache::thrift::detail::isset_bitset<13, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const DeprecatedTerseWriteWithRedundantCustomDefault&) const;
  bool operator<(const DeprecatedTerseWriteWithRedundantCustomDefault&) const;

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bool_field_ref() const& {
    return {this->__fbthrift_field_bool_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bool_field_ref() & {
    return {this->__fbthrift_field_bool_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bool_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bool_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bool_field() const& {
    return {this->__fbthrift_field_bool_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bool_field() & {
    return {this->__fbthrift_field_bool_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bool_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bool_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "byte_field" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> byte_field_ref() const& {
    return {this->__fbthrift_field_byte_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "byte_field" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> byte_field_ref() & {
    return {this->__fbthrift_field_byte_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "byte_field" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> byte_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_byte_field), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "byte_field" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> byte_field() const& {
    return {this->__fbthrift_field_byte_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "byte_field" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> byte_field() & {
    return {this->__fbthrift_field_byte_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "byte_field" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> byte_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_byte_field), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "short_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> short_field_ref() const& {
    return {this->__fbthrift_field_short_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "short_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> short_field_ref() & {
    return {this->__fbthrift_field_short_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "short_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> short_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_short_field), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "short_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> short_field() const& {
    return {this->__fbthrift_field_short_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "short_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> short_field() & {
    return {this->__fbthrift_field_short_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "short_field" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> short_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_short_field), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> int_field_ref() const& {
    return {this->__fbthrift_field_int_field, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> int_field_ref() & {
    return {this->__fbthrift_field_int_field, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> int_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_int_field), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> int_field() const& {
    return {this->__fbthrift_field_int_field, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> int_field() & {
    return {this->__fbthrift_field_int_field, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> int_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_int_field), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "long_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> long_field_ref() const& {
    return {this->__fbthrift_field_long_field, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "long_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> long_field_ref() & {
    return {this->__fbthrift_field_long_field, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "long_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> long_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_long_field), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "long_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> long_field() const& {
    return {this->__fbthrift_field_long_field, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "long_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> long_field() & {
    return {this->__fbthrift_field_long_field, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "long_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> long_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_long_field), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "float_field" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> float_field_ref() const& {
    return {this->__fbthrift_field_float_field, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "float_field" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> float_field_ref() & {
    return {this->__fbthrift_field_float_field, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "float_field" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> float_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_float_field), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "float_field" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> float_field() const& {
    return {this->__fbthrift_field_float_field, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "float_field" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> float_field() & {
    return {this->__fbthrift_field_float_field, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "float_field" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> float_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_float_field), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> double_field_ref() const& {
    return {this->__fbthrift_field_double_field, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> double_field_ref() & {
    return {this->__fbthrift_field_double_field, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> double_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_double_field), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> double_field() const& {
    return {this->__fbthrift_field_double_field, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> double_field() & {
    return {this->__fbthrift_field_double_field, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "double_field" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> double_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_double_field), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> string_field_ref() const& {
    return {this->__fbthrift_field_string_field, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> string_field_ref() & {
    return {this->__fbthrift_field_string_field, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> string_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_string_field), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> string_field() const& {
    return {this->__fbthrift_field_string_field, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> string_field() & {
    return {this->__fbthrift_field_string_field, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> string_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_string_field), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> binary_field_ref() const& {
    return {this->__fbthrift_field_binary_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> binary_field_ref() & {
    return {this->__fbthrift_field_binary_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> binary_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_binary_field), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> binary_field() const& {
    return {this->__fbthrift_field_binary_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> binary_field() & {
    return {this->__fbthrift_field_binary_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> binary_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_binary_field), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "enum_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> enum_field_ref() const& {
    return {this->__fbthrift_field_enum_field, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "enum_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> enum_field_ref() & {
    return {this->__fbthrift_field_enum_field, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "enum_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> enum_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_enum_field), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "enum_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> enum_field() const& {
    return {this->__fbthrift_field_enum_field, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "enum_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> enum_field() & {
    return {this->__fbthrift_field_enum_field, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "enum_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::terse_write::deprecated::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> enum_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_enum_field), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_field_ref() const& {
    return {this->__fbthrift_field_list_field, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_field_ref() & {
    return {this->__fbthrift_field_list_field, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_field), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_field() const& {
    return {this->__fbthrift_field_list_field, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_field() & {
    return {this->__fbthrift_field_list_field, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_field), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_field_ref() const& {
    return {this->__fbthrift_field_set_field, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_field_ref() & {
    return {this->__fbthrift_field_set_field, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_field), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_field() const& {
    return {this->__fbthrift_field_set_field, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_field() & {
    return {this->__fbthrift_field_set_field, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_field), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> map_field_ref() const& {
    return {this->__fbthrift_field_map_field, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> map_field_ref() & {
    return {this->__fbthrift_field_map_field, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> map_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_map_field), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> map_field() const& {
    return {this->__fbthrift_field_map_field, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> map_field() & {
    return {this->__fbthrift_field_map_field, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "map_field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> map_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_map_field), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "bool_field" } */
  [[deprecated("Use `FOO.bool_field().value()` instead of `FOO.get_bool_field()`")]]
  bool get_bool_field() const;

  /** Glean { "field": "bool_field" } */
  [[deprecated("Use `FOO.bool_field() = BAR` instead of `FOO.set_bool_field(BAR)`")]]
  bool& set_bool_field(bool bool_field_);

  /** Glean { "field": "byte_field" } */
  [[deprecated("Use `FOO.byte_field().value()` instead of `FOO.get_byte_field()`")]]
  ::std::int8_t get_byte_field() const;

  /** Glean { "field": "byte_field" } */
  [[deprecated("Use `FOO.byte_field() = BAR` instead of `FOO.set_byte_field(BAR)`")]]
  ::std::int8_t& set_byte_field(::std::int8_t byte_field_);

  /** Glean { "field": "short_field" } */
  [[deprecated("Use `FOO.short_field().value()` instead of `FOO.get_short_field()`")]]
  ::std::int16_t get_short_field() const;

  /** Glean { "field": "short_field" } */
  [[deprecated("Use `FOO.short_field() = BAR` instead of `FOO.set_short_field(BAR)`")]]
  ::std::int16_t& set_short_field(::std::int16_t short_field_);

  /** Glean { "field": "int_field" } */
  [[deprecated("Use `FOO.int_field().value()` instead of `FOO.get_int_field()`")]]
  ::std::int32_t get_int_field() const;

  /** Glean { "field": "int_field" } */
  [[deprecated("Use `FOO.int_field() = BAR` instead of `FOO.set_int_field(BAR)`")]]
  ::std::int32_t& set_int_field(::std::int32_t int_field_);

  /** Glean { "field": "long_field" } */
  [[deprecated("Use `FOO.long_field().value()` instead of `FOO.get_long_field()`")]]
  ::std::int64_t get_long_field() const;

  /** Glean { "field": "long_field" } */
  [[deprecated("Use `FOO.long_field() = BAR` instead of `FOO.set_long_field(BAR)`")]]
  ::std::int64_t& set_long_field(::std::int64_t long_field_);

  /** Glean { "field": "float_field" } */
  [[deprecated("Use `FOO.float_field().value()` instead of `FOO.get_float_field()`")]]
  float get_float_field() const;

  /** Glean { "field": "float_field" } */
  [[deprecated("Use `FOO.float_field() = BAR` instead of `FOO.set_float_field(BAR)`")]]
  float& set_float_field(float float_field_);

  /** Glean { "field": "double_field" } */
  [[deprecated("Use `FOO.double_field().value()` instead of `FOO.get_double_field()`")]]
  double get_double_field() const;

  /** Glean { "field": "double_field" } */
  [[deprecated("Use `FOO.double_field() = BAR` instead of `FOO.set_double_field(BAR)`")]]
  double& set_double_field(double double_field_);

  /** Glean { "field": "string_field" } */
  [[deprecated("Use `FOO.string_field().value()` instead of `FOO.get_string_field()`")]]
  const ::std::string& get_string_field() const& {
    return __fbthrift_field_string_field;
  }

  /** Glean { "field": "string_field" } */
  [[deprecated("Use `FOO.string_field().value()` instead of `FOO.get_string_field()`")]]
  ::std::string get_string_field() && {
    return static_cast<::std::string&&>(__fbthrift_field_string_field);
  }

  /** Glean { "field": "string_field" } */
  template <typename T_DeprecatedTerseWriteWithRedundantCustomDefault_string_field_struct_setter = ::std::string>
  [[deprecated("Use `FOO.string_field() = BAR` instead of `FOO.set_string_field(BAR)`")]]
  ::std::string& set_string_field(T_DeprecatedTerseWriteWithRedundantCustomDefault_string_field_struct_setter&& string_field_) {
    string_field_ref() = std::forward<T_DeprecatedTerseWriteWithRedundantCustomDefault_string_field_struct_setter>(string_field_);
    return __fbthrift_field_string_field;
  }

  /** Glean { "field": "binary_field" } */
  [[deprecated("Use `FOO.binary_field().value()` instead of `FOO.get_binary_field()`")]]
  const ::std::string& get_binary_field() const& {
    return __fbthrift_field_binary_field;
  }

  /** Glean { "field": "binary_field" } */
  [[deprecated("Use `FOO.binary_field().value()` instead of `FOO.get_binary_field()`")]]
  ::std::string get_binary_field() && {
    return static_cast<::std::string&&>(__fbthrift_field_binary_field);
  }

  /** Glean { "field": "binary_field" } */
  template <typename T_DeprecatedTerseWriteWithRedundantCustomDefault_binary_field_struct_setter = ::std::string>
  [[deprecated("Use `FOO.binary_field() = BAR` instead of `FOO.set_binary_field(BAR)`")]]
  ::std::string& set_binary_field(T_DeprecatedTerseWriteWithRedundantCustomDefault_binary_field_struct_setter&& binary_field_) {
    binary_field_ref() = std::forward<T_DeprecatedTerseWriteWithRedundantCustomDefault_binary_field_struct_setter>(binary_field_);
    return __fbthrift_field_binary_field;
  }

  /** Glean { "field": "enum_field" } */
  [[deprecated("Use `FOO.enum_field().value()` instead of `FOO.get_enum_field()`")]]
  ::facebook::thrift::test::terse_write::deprecated::MyEnum get_enum_field() const;

  /** Glean { "field": "enum_field" } */
  [[deprecated("Use `FOO.enum_field() = BAR` instead of `FOO.set_enum_field(BAR)`")]]
  ::facebook::thrift::test::terse_write::deprecated::MyEnum& set_enum_field(::facebook::thrift::test::terse_write::deprecated::MyEnum enum_field_);

  /** Glean { "field": "list_field" } */
  [[deprecated("Use `FOO.list_field().value()` instead of `FOO.get_list_field()`")]]
  const ::std::vector<::std::int16_t>& get_list_field() const&;

  /** Glean { "field": "list_field" } */
  [[deprecated("Use `FOO.list_field().value()` instead of `FOO.get_list_field()`")]]
  ::std::vector<::std::int16_t> get_list_field() &&;

  /** Glean { "field": "list_field" } */
  template <typename T_DeprecatedTerseWriteWithRedundantCustomDefault_list_field_struct_setter = ::std::vector<::std::int16_t>>
  [[deprecated("Use `FOO.list_field() = BAR` instead of `FOO.set_list_field(BAR)`")]]
  ::std::vector<::std::int16_t>& set_list_field(T_DeprecatedTerseWriteWithRedundantCustomDefault_list_field_struct_setter&& list_field_) {
    list_field_ref() = std::forward<T_DeprecatedTerseWriteWithRedundantCustomDefault_list_field_struct_setter>(list_field_);
    return __fbthrift_field_list_field;
  }

  /** Glean { "field": "set_field" } */
  [[deprecated("Use `FOO.set_field().value()` instead of `FOO.get_set_field()`")]]
  const ::std::set<::std::int16_t>& get_set_field() const&;

  /** Glean { "field": "set_field" } */
  [[deprecated("Use `FOO.set_field().value()` instead of `FOO.get_set_field()`")]]
  ::std::set<::std::int16_t> get_set_field() &&;

  /** Glean { "field": "set_field" } */
  template <typename T_DeprecatedTerseWriteWithRedundantCustomDefault_set_field_struct_setter = ::std::set<::std::int16_t>>
  [[deprecated("Use `FOO.set_field() = BAR` instead of `FOO.set_set_field(BAR)`")]]
  ::std::set<::std::int16_t>& set_set_field(T_DeprecatedTerseWriteWithRedundantCustomDefault_set_field_struct_setter&& set_field_) {
    set_field_ref() = std::forward<T_DeprecatedTerseWriteWithRedundantCustomDefault_set_field_struct_setter>(set_field_);
    return __fbthrift_field_set_field;
  }

  /** Glean { "field": "map_field" } */
  [[deprecated("Use `FOO.map_field().value()` instead of `FOO.get_map_field()`")]]
  const ::std::map<::std::int16_t, ::std::int16_t>& get_map_field() const&;

  /** Glean { "field": "map_field" } */
  [[deprecated("Use `FOO.map_field().value()` instead of `FOO.get_map_field()`")]]
  ::std::map<::std::int16_t, ::std::int16_t> get_map_field() &&;

  /** Glean { "field": "map_field" } */
  template <typename T_DeprecatedTerseWriteWithRedundantCustomDefault_map_field_struct_setter = ::std::map<::std::int16_t, ::std::int16_t>>
  [[deprecated("Use `FOO.map_field() = BAR` instead of `FOO.set_map_field(BAR)`")]]
  ::std::map<::std::int16_t, ::std::int16_t>& set_map_field(T_DeprecatedTerseWriteWithRedundantCustomDefault_map_field_struct_setter&& map_field_) {
    map_field_ref() = std::forward<T_DeprecatedTerseWriteWithRedundantCustomDefault_map_field_struct_setter>(map_field_);
    return __fbthrift_field_map_field;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<DeprecatedTerseWriteWithRedundantCustomDefault>;
  friend void swap(DeprecatedTerseWriteWithRedundantCustomDefault& a, DeprecatedTerseWriteWithRedundantCustomDefault& b);
};

template <class Protocol_>
unsigned long DeprecatedTerseWriteWithRedundantCustomDefault::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace facebook::thrift::test::terse_write::deprecated

namespace apache::thrift {

template <> struct TEnumDataStorage<::facebook::thrift::test::terse_write::deprecated::MyUnion::Type>;

template <> struct TEnumTraits<::facebook::thrift::test::terse_write::deprecated::MyUnion::Type> {
  using type = ::facebook::thrift::test::terse_write::deprecated::MyUnion::Type;

  static constexpr std::size_t const size = 0;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }

};
} // namespace apache::thrift

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::facebook::thrift::test::terse_write::deprecated::MyStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 3152988158178856581;
  static constexpr ::std::string_view definitionKey = {"\x03\x41\xbf\x6f\x63\x03\xdd\x0f\x17\x07\xa3\x92\x0a\x06\x3e\xa9", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::terse_write::deprecated::MyUnion, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 3152988158178856581;
  static constexpr ::std::string_view definitionKey = {"\xf0\x90\x29\x21\xeb\x6a\x25\xcd\x8b\xd3\xba\x71\x41\x17\xf0\x81", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::terse_write::deprecated::StructLevelTerseStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 3152988158178856581;
  static constexpr ::std::string_view definitionKey = {"\xd1\xe0\xe5\xe5\xf4\x76\x48\xe0\x49\xa4\xaa\xce\x5b\x63\x34\xeb", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::terse_write::deprecated::FieldLevelTerseStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 3152988158178856581;
  static constexpr ::std::string_view definitionKey = {"\x05\x36\x29\xe1\x78\x69\x12\x8c\xb5\x6e\x69\xd7\x39\xfe\x54\x9e", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::terse_write::deprecated::CppRefStructFields, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 3152988158178856581;
  static constexpr ::std::string_view definitionKey = {"\xb6\xdb\xea\x91\x12\xd6\xf1\x53\x1a\x03\xe3\x6b\x95\xa7\x17\x19", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::terse_write::deprecated::DeprecatedTerseWriteWithCustomDefault, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 3152988158178856581;
  static constexpr ::std::string_view definitionKey = {"\xfd\xe0\xf3\x73\x1b\x3b\x04\x7f\xab\x43\x57\xac\x06\x83\xfc\x2a", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::terse_write::deprecated::DeprecatedTerseWriteWithRedundantCustomDefault, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 3152988158178856581;
  static constexpr ::std::string_view definitionKey = {"\x21\x42\x75\xc7\x42\xf1\x41\x59\xa8\x16\x20\xb8\x50\x3f\x3a\x98", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::terse_write::deprecated::MyEnum, true> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 3152988158178856581;
  static constexpr ::std::string_view definitionKey = {"\xdc\x13\xbe\xb9\xf8\x02\x38\x98\x2f\x61\x34\xbf\x5f\x9e\x2f\x6c", 16};
};
} // namespace apache::thrift::detail
