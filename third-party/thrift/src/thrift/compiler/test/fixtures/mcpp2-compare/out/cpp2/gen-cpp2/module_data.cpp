/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/mcpp2-compare/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#include "thrift/compiler/test/fixtures/mcpp2-compare/gen-cpp2/module_data.h"
#include "thrift/compiler/test/fixtures/mcpp2-compare/gen-cpp2/module_constants.h"

#include <thrift/lib/cpp2/gen/module_data_cpp.h>

namespace some::valid::ns {
class EmptyService;
} // namespace some::valid::ns
namespace some::valid::ns {
class ReturnService;
} // namespace some::valid::ns
namespace some::valid::ns {
class ParamService;
} // namespace some::valid::ns
namespace apache::thrift {

THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::string_view TStructDataStorage<::some::valid::ns::Empty>::name = "Empty";
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<std::string_view, 0> TStructDataStorage<::some::valid::ns::Empty>::fields_names = { {
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<int16_t, 0> TStructDataStorage<::some::valid::ns::Empty>::fields_ids = { {
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<protocol::TType, 0> TStructDataStorage<::some::valid::ns::Empty>::fields_types = { {
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<int, 0> TStructDataStorage<::some::valid::ns::Empty>::isset_indexes = { {
}};

THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::string_view TStructDataStorage<::some::valid::ns::ASimpleStruct>::name = "ASimpleStruct";
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<std::string_view, 1> TStructDataStorage<::some::valid::ns::ASimpleStruct>::fields_names = { {
  "boolField"sv,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<int16_t, 1> TStructDataStorage<::some::valid::ns::ASimpleStruct>::fields_ids = { {
  1,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<protocol::TType, 1> TStructDataStorage<::some::valid::ns::ASimpleStruct>::fields_types = { {
  TType::T_I64,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<int, 1> TStructDataStorage<::some::valid::ns::ASimpleStruct>::isset_indexes = { {
  0,
}};

THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::string_view TStructDataStorage<::some::valid::ns::ASimpleStructNoexcept>::name = "ASimpleStructNoexcept";
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<std::string_view, 1> TStructDataStorage<::some::valid::ns::ASimpleStructNoexcept>::fields_names = { {
  "boolField"sv,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<int16_t, 1> TStructDataStorage<::some::valid::ns::ASimpleStructNoexcept>::fields_ids = { {
  1,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<protocol::TType, 1> TStructDataStorage<::some::valid::ns::ASimpleStructNoexcept>::fields_types = { {
  TType::T_I64,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<int, 1> TStructDataStorage<::some::valid::ns::ASimpleStructNoexcept>::isset_indexes = { {
  0,
}};

THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::string_view TStructDataStorage<::some::valid::ns::MyStruct>::name = "MyStruct";
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<std::string_view, 11> TStructDataStorage<::some::valid::ns::MyStruct>::fields_names = { {
  "MyBoolField"sv,
  "MyIntField"sv,
  "MyStringField"sv,
  "MyStringField2"sv,
  "MyBinaryField"sv,
  "MyBinaryField2"sv,
  "MyBinaryField3"sv,
  "MyBinaryListField4"sv,
  "MyMapEnumAndInt"sv,
  "MyCustomField"sv,
  "MyOptCustomField"sv,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<int16_t, 11> TStructDataStorage<::some::valid::ns::MyStruct>::fields_ids = { {
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<protocol::TType, 11> TStructDataStorage<::some::valid::ns::MyStruct>::fields_types = { {
  TType::T_BOOL,
  TType::T_I64,
  TType::T_STRING,
  TType::T_STRING,
  TType::T_STRING,
  TType::T_STRING,
  TType::T_STRING,
  TType::T_LIST,
  TType::T_MAP,
  TType::T_STRING,
  TType::T_STRING,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<int, 11> TStructDataStorage<::some::valid::ns::MyStruct>::isset_indexes = { {
  0,
  1,
  2,
  3,
  4,
  5,
  -1,
  6,
  7,
  8,
  9,
}};

THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::string_view TStructDataStorage<::some::valid::ns::SimpleUnion>::name = "SimpleUnion";
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<std::string_view, 2> TStructDataStorage<::some::valid::ns::SimpleUnion>::fields_names = { {
  "intValue"sv,
  "stringValue"sv,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<int16_t, 2> TStructDataStorage<::some::valid::ns::SimpleUnion>::fields_ids = { {
  7,
  2,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<protocol::TType, 2> TStructDataStorage<::some::valid::ns::SimpleUnion>::fields_types = { {
  TType::T_I64,
  TType::T_STRING,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<int, 2> TStructDataStorage<::some::valid::ns::SimpleUnion>::isset_indexes = { {
  0,
  1,
}};

THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::string_view TStructDataStorage<::some::valid::ns::ComplexUnion>::name = "ComplexUnion";
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<std::string_view, 28> TStructDataStorage<::some::valid::ns::ComplexUnion>::fields_names = { {
  "intValue"sv,
  "opt_intValue"sv,
  "stringValue"sv,
  "opt_stringValue"sv,
  "intValue2"sv,
  "intValue3"sv,
  "doubelValue"sv,
  "boolValue"sv,
  "union_list"sv,
  "union_set"sv,
  "union_map"sv,
  "opt_union_map"sv,
  "enum_field"sv,
  "enum_container"sv,
  "a_struct"sv,
  "a_set_struct"sv,
  "a_union"sv,
  "opt_a_union"sv,
  "a_union_list"sv,
  "a_union_typedef"sv,
  "a_union_typedef_list"sv,
  "MyBinaryField"sv,
  "MyBinaryField2"sv,
  "MyBinaryListField4"sv,
  "ref_field"sv,
  "ref_field2"sv,
  "excp_field"sv,
  "MyCustomField"sv,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<int16_t, 28> TStructDataStorage<::some::valid::ns::ComplexUnion>::fields_ids = { {
  1,
  201,
  3,
  203,
  4,
  6,
  7,
  8,
  9,
  10,
  11,
  211,
  12,
  13,
  14,
  15,
  16,
  216,
  17,
  18,
  19,
  20,
  21,
  23,
  24,
  25,
  26,
  27,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<protocol::TType, 28> TStructDataStorage<::some::valid::ns::ComplexUnion>::fields_types = { {
  TType::T_I64,
  TType::T_I64,
  TType::T_STRING,
  TType::T_STRING,
  TType::T_I16,
  TType::T_I32,
  TType::T_DOUBLE,
  TType::T_BOOL,
  TType::T_LIST,
  TType::T_SET,
  TType::T_MAP,
  TType::T_MAP,
  TType::T_I32,
  TType::T_LIST,
  TType::T_STRUCT,
  TType::T_SET,
  TType::T_STRUCT,
  TType::T_STRUCT,
  TType::T_LIST,
  TType::T_SET,
  TType::T_LIST,
  TType::T_STRING,
  TType::T_STRING,
  TType::T_LIST,
  TType::T_STRUCT,
  TType::T_STRUCT,
  TType::T_STRUCT,
  TType::T_STRING,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<int, 28> TStructDataStorage<::some::valid::ns::ComplexUnion>::isset_indexes = { {
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  -1,
  -1,
  24,
  25,
}};

THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::string_view TStructDataStorage<::some::valid::ns::AnException>::name = "AnException";
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<std::string_view, 17> TStructDataStorage<::some::valid::ns::AnException>::fields_names = { {
  "code"sv,
  "req_code"sv,
  "message2"sv,
  "req_message"sv,
  "exception_list"sv,
  "exception_set"sv,
  "exception_map"sv,
  "req_exception_map"sv,
  "enum_field"sv,
  "enum_container"sv,
  "a_struct"sv,
  "a_set_struct"sv,
  "a_union_list"sv,
  "union_typedef"sv,
  "a_union_typedef_list"sv,
  "MyCustomField"sv,
  "MyOptCustomField"sv,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<int16_t, 17> TStructDataStorage<::some::valid::ns::AnException>::fields_ids = { {
  1,
  101,
  2,
  102,
  3,
  4,
  5,
  105,
  6,
  7,
  8,
  9,
  10,
  11,
  19,
  20,
  21,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<protocol::TType, 17> TStructDataStorage<::some::valid::ns::AnException>::fields_types = { {
  TType::T_I32,
  TType::T_I32,
  TType::T_STRING,
  TType::T_STRING,
  TType::T_LIST,
  TType::T_SET,
  TType::T_MAP,
  TType::T_MAP,
  TType::T_I32,
  TType::T_LIST,
  TType::T_STRUCT,
  TType::T_SET,
  TType::T_LIST,
  TType::T_SET,
  TType::T_LIST,
  TType::T_STRING,
  TType::T_STRING,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<int, 17> TStructDataStorage<::some::valid::ns::AnException>::isset_indexes = { {
  0,
  -1,
  1,
  -1,
  2,
  3,
  4,
  -1,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
}};

THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::string_view TStructDataStorage<::some::valid::ns::AnotherException>::name = "AnotherException";
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<std::string_view, 3> TStructDataStorage<::some::valid::ns::AnotherException>::fields_names = { {
  "code"sv,
  "req_code"sv,
  "message"sv,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<int16_t, 3> TStructDataStorage<::some::valid::ns::AnotherException>::fields_ids = { {
  1,
  101,
  2,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<protocol::TType, 3> TStructDataStorage<::some::valid::ns::AnotherException>::fields_types = { {
  TType::T_I32,
  TType::T_I32,
  TType::T_STRING,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<int, 3> TStructDataStorage<::some::valid::ns::AnotherException>::isset_indexes = { {
  0,
  -1,
  1,
}};

THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::string_view TStructDataStorage<::some::valid::ns::containerStruct>::name = "containerStruct";
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<std::string_view, 44> TStructDataStorage<::some::valid::ns::containerStruct>::fields_names = { {
  "fieldA"sv,
  "req_fieldA"sv,
  "opt_fieldA"sv,
  "fieldB"sv,
  "req_fieldB"sv,
  "opt_fieldB"sv,
  "fieldC"sv,
  "req_fieldC"sv,
  "opt_fieldC"sv,
  "fieldD"sv,
  "fieldE"sv,
  "req_fieldE"sv,
  "opt_fieldE"sv,
  "fieldF"sv,
  "fieldG"sv,
  "fieldH"sv,
  "fieldI"sv,
  "fieldJ"sv,
  "fieldK"sv,
  "fieldL"sv,
  "fieldM"sv,
  "fieldN"sv,
  "fieldO"sv,
  "fieldP"sv,
  "fieldQ"sv,
  "fieldR"sv,
  "req_fieldR"sv,
  "opt_fieldR"sv,
  "fieldS"sv,
  "fieldT"sv,
  "fieldU"sv,
  "fieldV"sv,
  "req_fieldV"sv,
  "opt_fieldV"sv,
  "fieldW"sv,
  "fieldX"sv,
  "req_fieldX"sv,
  "opt_fieldX"sv,
  "fieldY"sv,
  "fieldZ"sv,
  "fieldAA"sv,
  "fieldAC"sv,
  "fieldAD"sv,
  "fieldAE"sv,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<int16_t, 44> TStructDataStorage<::some::valid::ns::containerStruct>::fields_ids = { {
  1,
  101,
  201,
  2,
  102,
  202,
  3,
  103,
  203,
  4,
  5,
  105,
  205,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  118,
  218,
  19,
  21,
  22,
  23,
  123,
  223,
  24,
  25,
  125,
  225,
  26,
  27,
  28,
  30,
  31,
  32,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<protocol::TType, 44> TStructDataStorage<::some::valid::ns::containerStruct>::fields_types = { {
  TType::T_BOOL,
  TType::T_BOOL,
  TType::T_BOOL,
  TType::T_MAP,
  TType::T_MAP,
  TType::T_MAP,
  TType::T_SET,
  TType::T_SET,
  TType::T_SET,
  TType::T_STRING,
  TType::T_STRING,
  TType::T_STRING,
  TType::T_STRING,
  TType::T_LIST,
  TType::T_MAP,
  TType::T_LIST,
  TType::T_BOOL,
  TType::T_MAP,
  TType::T_LIST,
  TType::T_SET,
  TType::T_MAP,
  TType::T_I32,
  TType::T_LIST,
  TType::T_LIST,
  TType::T_I32,
  TType::T_I32,
  TType::T_I32,
  TType::T_I32,
  TType::T_I32,
  TType::T_LIST,
  TType::T_LIST,
  TType::T_STRUCT,
  TType::T_STRUCT,
  TType::T_STRUCT,
  TType::T_SET,
  TType::T_STRUCT,
  TType::T_STRUCT,
  TType::T_STRUCT,
  TType::T_LIST,
  TType::T_SET,
  TType::T_LIST,
  TType::T_I32,
  TType::T_I32,
  TType::T_MAP,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<int, 44> TStructDataStorage<::some::valid::ns::containerStruct>::isset_indexes = { {
  0,
  -1,
  1,
  2,
  -1,
  3,
  4,
  -1,
  5,
  6,
  7,
  -1,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  -1,
  22,
  23,
  24,
  25,
  26,
  -1,
  27,
  28,
  29,
  -1,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
}};

THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::string_view TStructDataStorage<::some::valid::ns::MyIncludedStruct>::name = "MyIncludedStruct";
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<std::string_view, 4> TStructDataStorage<::some::valid::ns::MyIncludedStruct>::fields_names = { {
  "MyIncludedInt"sv,
  "MyIncludedStruct"sv,
  "ARefField"sv,
  "ARequiredField"sv,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<int16_t, 4> TStructDataStorage<::some::valid::ns::MyIncludedStruct>::fields_ids = { {
  1,
  2,
  3,
  4,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<protocol::TType, 4> TStructDataStorage<::some::valid::ns::MyIncludedStruct>::fields_types = { {
  TType::T_I64,
  TType::T_STRUCT,
  TType::T_STRUCT,
  TType::T_STRUCT,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<int, 4> TStructDataStorage<::some::valid::ns::MyIncludedStruct>::isset_indexes = { {
  0,
  1,
  -1,
  -1,
}};

THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::string_view TStructDataStorage<::some::valid::ns::AnnotatedStruct>::name = "AnnotatedStruct";
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<std::string_view, 37> TStructDataStorage<::some::valid::ns::AnnotatedStruct>::fields_names = { {
  "no_annotation"sv,
  "cpp_unique_ref"sv,
  "cpp2_unique_ref"sv,
  "container_with_ref"sv,
  "req_cpp_unique_ref"sv,
  "req_cpp2_unique_ref"sv,
  "req_container_with_ref"sv,
  "opt_cpp_unique_ref"sv,
  "opt_cpp2_unique_ref"sv,
  "opt_container_with_ref"sv,
  "ref_type_unique"sv,
  "ref_type_shared"sv,
  "ref_type_const"sv,
  "req_ref_type_shared"sv,
  "req_ref_type_const"sv,
  "req_ref_type_unique"sv,
  "opt_ref_type_const"sv,
  "opt_ref_type_unique"sv,
  "opt_ref_type_shared"sv,
  "base_type"sv,
  "list_type"sv,
  "set_type"sv,
  "map_type"sv,
  "map_struct_type"sv,
  "iobuf_type"sv,
  "iobuf_ptr"sv,
  "list_i32_template"sv,
  "list_string_template"sv,
  "set_template"sv,
  "map_template"sv,
  "typedef_list_template"sv,
  "typedef_deque_template"sv,
  "typedef_set_template"sv,
  "typedef_map_template"sv,
  "iobuf_type_val"sv,
  "iobuf_ptr_val"sv,
  "struct_struct"sv,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<int16_t, 37> TStructDataStorage<::some::valid::ns::AnnotatedStruct>::fields_ids = { {
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  38,
  39,
  40,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<protocol::TType, 37> TStructDataStorage<::some::valid::ns::AnnotatedStruct>::fields_types = { {
  TType::T_STRUCT,
  TType::T_STRUCT,
  TType::T_STRUCT,
  TType::T_MAP,
  TType::T_STRUCT,
  TType::T_STRUCT,
  TType::T_LIST,
  TType::T_STRUCT,
  TType::T_STRUCT,
  TType::T_SET,
  TType::T_STRUCT,
  TType::T_STRUCT,
  TType::T_MAP,
  TType::T_STRUCT,
  TType::T_STRUCT,
  TType::T_LIST,
  TType::T_STRUCT,
  TType::T_STRUCT,
  TType::T_SET,
  TType::T_I32,
  TType::T_LIST,
  TType::T_SET,
  TType::T_MAP,
  TType::T_MAP,
  TType::T_STRING,
  TType::T_STRING,
  TType::T_LIST,
  TType::T_LIST,
  TType::T_SET,
  TType::T_MAP,
  TType::T_LIST,
  TType::T_LIST,
  TType::T_SET,
  TType::T_MAP,
  TType::T_STRING,
  TType::T_STRING,
  TType::T_STRUCT,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<int, 37> TStructDataStorage<::some::valid::ns::AnnotatedStruct>::isset_indexes = { {
  0,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
}};

THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::string_view TStructDataStorage<::some::valid::ns::ComplexContainerStruct>::name = "ComplexContainerStruct";
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<std::string_view, 2> TStructDataStorage<::some::valid::ns::ComplexContainerStruct>::fields_names = { {
  "map_of_iobufs"sv,
  "map_of_iobuf_ptrs"sv,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<int16_t, 2> TStructDataStorage<::some::valid::ns::ComplexContainerStruct>::fields_ids = { {
  1,
  2,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<protocol::TType, 2> TStructDataStorage<::some::valid::ns::ComplexContainerStruct>::fields_types = { {
  TType::T_MAP,
  TType::T_MAP,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<int, 2> TStructDataStorage<::some::valid::ns::ComplexContainerStruct>::isset_indexes = { {
  0,
  1,
}};

THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::string_view TStructDataStorage<::some::valid::ns::FloatStruct>::name = "FloatStruct";
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<std::string_view, 2> TStructDataStorage<::some::valid::ns::FloatStruct>::fields_names = { {
  "floatField"sv,
  "doubleField"sv,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<int16_t, 2> TStructDataStorage<::some::valid::ns::FloatStruct>::fields_ids = { {
  1,
  2,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<protocol::TType, 2> TStructDataStorage<::some::valid::ns::FloatStruct>::fields_types = { {
  TType::T_FLOAT,
  TType::T_DOUBLE,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<int, 2> TStructDataStorage<::some::valid::ns::FloatStruct>::isset_indexes = { {
  0,
  1,
}};

THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::string_view TStructDataStorage<::some::valid::ns::FloatUnion>::name = "FloatUnion";
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<std::string_view, 2> TStructDataStorage<::some::valid::ns::FloatUnion>::fields_names = { {
  "floatSide"sv,
  "doubleSide"sv,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<int16_t, 2> TStructDataStorage<::some::valid::ns::FloatUnion>::fields_ids = { {
  1,
  2,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<protocol::TType, 2> TStructDataStorage<::some::valid::ns::FloatUnion>::fields_types = { {
  TType::T_FLOAT,
  TType::T_DOUBLE,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<int, 2> TStructDataStorage<::some::valid::ns::FloatUnion>::isset_indexes = { {
  0,
  1,
}};

THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::string_view TStructDataStorage<::some::valid::ns::AllRequiredNoExceptMoveCtrStruct>::name = "AllRequiredNoExceptMoveCtrStruct";
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<std::string_view, 1> TStructDataStorage<::some::valid::ns::AllRequiredNoExceptMoveCtrStruct>::fields_names = { {
  "intField"sv,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<int16_t, 1> TStructDataStorage<::some::valid::ns::AllRequiredNoExceptMoveCtrStruct>::fields_ids = { {
  1,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<protocol::TType, 1> TStructDataStorage<::some::valid::ns::AllRequiredNoExceptMoveCtrStruct>::fields_types = { {
  TType::T_I64,
}};
THRIFT_DATA_MEMBER FOLLY_ATTR_WEAK const std::array<int, 1> TStructDataStorage<::some::valid::ns::AllRequiredNoExceptMoveCtrStruct>::isset_indexes = { {
  -1,
}};

namespace detail {




















template <> struct TSchemaAssociation<::some::valid::ns::EmptyService, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 7015249176354003585;
  static constexpr ::std::string_view definitionKey = {"\x55\x93\x05\x8b\x4e\x1d\x3f\x2c\xf1\x08\x21\xb9\xf4\x2d\x0c\x15", 16};
};
template <> struct TSchemaAssociation<::some::valid::ns::ReturnService, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 7015249176354003585;
  static constexpr ::std::string_view definitionKey = {"\x4e\xc4\x42\xc9\x22\xaa\x49\x12\x4b\x56\x6b\x0c\xf6\x79\x5f\x8a", 16};
};
template <> struct TSchemaAssociation<::some::valid::ns::ParamService, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 7015249176354003585;
  static constexpr ::std::string_view definitionKey = {"\x9b\xf2\x42\x9a\x0a\xd1\x3d\xda\xeb\xaf\xf8\xf4\x7f\xb1\x09\xb6", 16};
};
} // namespace detail
} // namespace apache::thrift
