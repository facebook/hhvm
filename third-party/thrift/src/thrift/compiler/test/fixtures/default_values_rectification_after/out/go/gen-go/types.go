// Autogenerated by Thrift for thrift/compiler/test/fixtures/default_values_rectification_after/src/module.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package module

import (
    "fmt"
    "reflect"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
    metadata "github.com/facebook/fbthrift/thrift/lib/thrift/metadata"
)

// (needed to ensure safety because of naive import list construction)
var _ = fmt.Printf
var _ = reflect.Ptr
var _ = thrift.VOID
var _ = metadata.GoUnusedProtection__

type EmptyStruct struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*EmptyStruct)(nil)

func NewEmptyStruct() *EmptyStruct {
    return (&EmptyStruct{}).setDefaults()
}



func (x *EmptyStruct) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("EmptyStruct"); err != nil {
        return thrift.PrependError("EmptyStruct write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("EmptyStruct write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("EmptyStruct write struct end error: ", err)
    }
    return nil
}

func (x *EmptyStruct) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("EmptyStruct read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("EmptyStruct field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("EmptyStruct read struct end error: ", err)
    }

    return nil
}

func (x *EmptyStruct) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *EmptyStruct) setDefaults() *EmptyStruct {
    return x
}

func (x *EmptyStruct) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_EmptyStruct
}

type TestStruct struct {
    UnqualifiedIntField int32 `thrift:"unqualified_int_field,1" json:"unqualified_int_field" db:"unqualified_int_field"`
    UnqualifiedBoolField bool `thrift:"unqualified_bool_field,2" json:"unqualified_bool_field" db:"unqualified_bool_field"`
    UnqualifiedListField []int32 `thrift:"unqualified_list_field,3" json:"unqualified_list_field" db:"unqualified_list_field"`
    UnqualifiedStructField *EmptyStruct `thrift:"unqualified_struct_field,4" json:"unqualified_struct_field" db:"unqualified_struct_field"`
    OptionalIntField *int32 `thrift:"optional_int_field,5,optional" json:"optional_int_field,omitempty" db:"optional_int_field"`
    OptionalBoolField *bool `thrift:"optional_bool_field,6,optional" json:"optional_bool_field,omitempty" db:"optional_bool_field"`
    OptionalListField []int32 `thrift:"optional_list_field,7,optional" json:"optional_list_field,omitempty" db:"optional_list_field"`
    OptionalStructField *EmptyStruct `thrift:"optional_struct_field,8,optional" json:"optional_struct_field,omitempty" db:"optional_struct_field"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*TestStruct)(nil)

func NewTestStruct() *TestStruct {
    return (&TestStruct{}).setDefaults()
}

func (x *TestStruct) GetUnqualifiedIntField() int32 {
    return x.UnqualifiedIntField
}

func (x *TestStruct) GetUnqualifiedBoolField() bool {
    return x.UnqualifiedBoolField
}

func (x *TestStruct) GetUnqualifiedListField() []int32 {
    if !x.IsSetUnqualifiedListField() {
        return make([]int32, 0)
    }
    return x.UnqualifiedListField
}

func (x *TestStruct) GetUnqualifiedStructField() *EmptyStruct {
    if !x.IsSetUnqualifiedStructField() {
        return nil
    }
    return x.UnqualifiedStructField
}

func (x *TestStruct) GetOptionalIntField() int32 {
    if !x.IsSetOptionalIntField() {
        return 0
    }
    return *x.OptionalIntField
}

func (x *TestStruct) GetOptionalBoolField() bool {
    if !x.IsSetOptionalBoolField() {
        return false
    }
    return *x.OptionalBoolField
}

func (x *TestStruct) GetOptionalListField() []int32 {
    if !x.IsSetOptionalListField() {
        return make([]int32, 0)
    }
    return x.OptionalListField
}

func (x *TestStruct) GetOptionalStructField() *EmptyStruct {
    if !x.IsSetOptionalStructField() {
        return nil
    }
    return x.OptionalStructField
}

func (x *TestStruct) SetUnqualifiedIntFieldNonCompat(value int32) *TestStruct {
    x.UnqualifiedIntField = value
    return x
}

func (x *TestStruct) SetUnqualifiedIntField(value int32) *TestStruct {
    x.UnqualifiedIntField = value
    return x
}

func (x *TestStruct) SetUnqualifiedBoolFieldNonCompat(value bool) *TestStruct {
    x.UnqualifiedBoolField = value
    return x
}

func (x *TestStruct) SetUnqualifiedBoolField(value bool) *TestStruct {
    x.UnqualifiedBoolField = value
    return x
}

func (x *TestStruct) SetUnqualifiedListFieldNonCompat(value []int32) *TestStruct {
    x.UnqualifiedListField = value
    return x
}

func (x *TestStruct) SetUnqualifiedListField(value []int32) *TestStruct {
    x.UnqualifiedListField = value
    return x
}

func (x *TestStruct) SetUnqualifiedStructFieldNonCompat(value *EmptyStruct) *TestStruct {
    x.UnqualifiedStructField = value
    return x
}

func (x *TestStruct) SetUnqualifiedStructField(value *EmptyStruct) *TestStruct {
    x.UnqualifiedStructField = value
    return x
}

func (x *TestStruct) SetOptionalIntFieldNonCompat(value int32) *TestStruct {
    x.OptionalIntField = &value
    return x
}

func (x *TestStruct) SetOptionalIntField(value *int32) *TestStruct {
    x.OptionalIntField = value
    return x
}

func (x *TestStruct) SetOptionalBoolFieldNonCompat(value bool) *TestStruct {
    x.OptionalBoolField = &value
    return x
}

func (x *TestStruct) SetOptionalBoolField(value *bool) *TestStruct {
    x.OptionalBoolField = value
    return x
}

func (x *TestStruct) SetOptionalListFieldNonCompat(value []int32) *TestStruct {
    x.OptionalListField = value
    return x
}

func (x *TestStruct) SetOptionalListField(value []int32) *TestStruct {
    x.OptionalListField = value
    return x
}

func (x *TestStruct) SetOptionalStructFieldNonCompat(value *EmptyStruct) *TestStruct {
    x.OptionalStructField = value
    return x
}

func (x *TestStruct) SetOptionalStructField(value *EmptyStruct) *TestStruct {
    x.OptionalStructField = value
    return x
}

func (x *TestStruct) IsSetUnqualifiedListField() bool {
    return x != nil && x.UnqualifiedListField != nil
}

func (x *TestStruct) IsSetUnqualifiedStructField() bool {
    return x != nil && x.UnqualifiedStructField != nil
}

func (x *TestStruct) IsSetOptionalIntField() bool {
    return x != nil && x.OptionalIntField != nil
}

func (x *TestStruct) IsSetOptionalBoolField() bool {
    return x != nil && x.OptionalBoolField != nil
}

func (x *TestStruct) IsSetOptionalListField() bool {
    return x != nil && x.OptionalListField != nil
}

func (x *TestStruct) IsSetOptionalStructField() bool {
    return x != nil && x.OptionalStructField != nil
}

func (x *TestStruct) writeField1(p thrift.Encoder) error {  // UnqualifiedIntField
    if err := p.WriteFieldBegin("unqualified_int_field", thrift.I32, 1); err != nil {
        return thrift.PrependError("TestStruct write field begin error: ", err)
    }

    item := x.UnqualifiedIntField
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("TestStruct write field end error: ", err)
    }
    return nil
}

func (x *TestStruct) writeField2(p thrift.Encoder) error {  // UnqualifiedBoolField
    if err := p.WriteFieldBegin("unqualified_bool_field", thrift.BOOL, 2); err != nil {
        return thrift.PrependError("TestStruct write field begin error: ", err)
    }

    item := x.UnqualifiedBoolField
    if err := p.WriteBool(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("TestStruct write field end error: ", err)
    }
    return nil
}

func (x *TestStruct) writeField3(p thrift.Encoder) error {  // UnqualifiedListField
    if err := p.WriteFieldBegin("unqualified_list_field", thrift.LIST, 3); err != nil {
        return thrift.PrependError("TestStruct write field begin error: ", err)
    }

    item := x.UnqualifiedListField
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
        return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range item {
        {
            item := v
            if err := p.WriteI32(item); err != nil {
                return err
            }
        }
    }
    if err := p.WriteListEnd(); err != nil {
        return thrift.PrependError("error writing list end: ", err)
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("TestStruct write field end error: ", err)
    }
    return nil
}

func (x *TestStruct) writeField4(p thrift.Encoder) error {  // UnqualifiedStructField
    if !x.IsSetUnqualifiedStructField() {
        return nil
    }

    if err := p.WriteFieldBegin("unqualified_struct_field", thrift.STRUCT, 4); err != nil {
        return thrift.PrependError("TestStruct write field begin error: ", err)
    }

    item := x.UnqualifiedStructField
    if err := item.Write(p); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("TestStruct write field end error: ", err)
    }
    return nil
}

func (x *TestStruct) writeField5(p thrift.Encoder) error {  // OptionalIntField
    if !x.IsSetOptionalIntField() {
        return nil
    }

    if err := p.WriteFieldBegin("optional_int_field", thrift.I32, 5); err != nil {
        return thrift.PrependError("TestStruct write field begin error: ", err)
    }

    item := *x.OptionalIntField
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("TestStruct write field end error: ", err)
    }
    return nil
}

func (x *TestStruct) writeField6(p thrift.Encoder) error {  // OptionalBoolField
    if !x.IsSetOptionalBoolField() {
        return nil
    }

    if err := p.WriteFieldBegin("optional_bool_field", thrift.BOOL, 6); err != nil {
        return thrift.PrependError("TestStruct write field begin error: ", err)
    }

    item := *x.OptionalBoolField
    if err := p.WriteBool(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("TestStruct write field end error: ", err)
    }
    return nil
}

func (x *TestStruct) writeField7(p thrift.Encoder) error {  // OptionalListField
    if !x.IsSetOptionalListField() {
        return nil
    }

    if err := p.WriteFieldBegin("optional_list_field", thrift.LIST, 7); err != nil {
        return thrift.PrependError("TestStruct write field begin error: ", err)
    }

    item := x.OptionalListField
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
        return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range item {
        {
            item := v
            if err := p.WriteI32(item); err != nil {
                return err
            }
        }
    }
    if err := p.WriteListEnd(); err != nil {
        return thrift.PrependError("error writing list end: ", err)
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("TestStruct write field end error: ", err)
    }
    return nil
}

func (x *TestStruct) writeField8(p thrift.Encoder) error {  // OptionalStructField
    if !x.IsSetOptionalStructField() {
        return nil
    }

    if err := p.WriteFieldBegin("optional_struct_field", thrift.STRUCT, 8); err != nil {
        return thrift.PrependError("TestStruct write field begin error: ", err)
    }

    item := x.OptionalStructField
    if err := item.Write(p); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("TestStruct write field end error: ", err)
    }
    return nil
}

func (x *TestStruct) readField1(p thrift.Decoder) error {  // UnqualifiedIntField
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.UnqualifiedIntField = result
    return nil
}

func (x *TestStruct) readField2(p thrift.Decoder) error {  // UnqualifiedBoolField
    result, err := p.ReadBool()
    if err != nil {
        return err
    }

    x.UnqualifiedBoolField = result
    return nil
}

func (x *TestStruct) readField3(p thrift.Decoder) error {  // UnqualifiedListField
    _ /* elemType */, size, err := p.ReadListBegin()
    if err != nil {
        return thrift.PrependError("error reading list begin: ", err)
    }
    
    listResult := make([]int32, 0, size)
    for i := 0; i < size; i++ {
        var elem int32
        {
            result, err := p.ReadI32()
            if err != nil {
                return err
            }
            elem = result
        }
        listResult = append(listResult, elem)
    }
    
    if err := p.ReadListEnd(); err != nil {
        return thrift.PrependError("error reading list end: ", err)
    }
    result := listResult

    x.UnqualifiedListField = result
    return nil
}

func (x *TestStruct) readField4(p thrift.Decoder) error {  // UnqualifiedStructField
    result := NewEmptyStruct()
    err := result.Read(p)
    if err != nil {
        return err
    }

    x.UnqualifiedStructField = result
    return nil
}

func (x *TestStruct) readField5(p thrift.Decoder) error {  // OptionalIntField
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.OptionalIntField = &result
    return nil
}

func (x *TestStruct) readField6(p thrift.Decoder) error {  // OptionalBoolField
    result, err := p.ReadBool()
    if err != nil {
        return err
    }

    x.OptionalBoolField = &result
    return nil
}

func (x *TestStruct) readField7(p thrift.Decoder) error {  // OptionalListField
    _ /* elemType */, size, err := p.ReadListBegin()
    if err != nil {
        return thrift.PrependError("error reading list begin: ", err)
    }
    
    listResult := make([]int32, 0, size)
    for i := 0; i < size; i++ {
        var elem int32
        {
            result, err := p.ReadI32()
            if err != nil {
                return err
            }
            elem = result
        }
        listResult = append(listResult, elem)
    }
    
    if err := p.ReadListEnd(); err != nil {
        return thrift.PrependError("error reading list end: ", err)
    }
    result := listResult

    x.OptionalListField = result
    return nil
}

func (x *TestStruct) readField8(p thrift.Decoder) error {  // OptionalStructField
    result := NewEmptyStruct()
    err := result.Read(p)
    if err != nil {
        return err
    }

    x.OptionalStructField = result
    return nil
}







func (x *TestStruct) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("TestStruct"); err != nil {
        return thrift.PrependError("TestStruct write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }
    if err := x.writeField3(p); err != nil {
        return err
    }
    if err := x.writeField4(p); err != nil {
        return err
    }
    if err := x.writeField5(p); err != nil {
        return err
    }
    if err := x.writeField6(p); err != nil {
        return err
    }
    if err := x.writeField7(p); err != nil {
        return err
    }
    if err := x.writeField8(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("TestStruct write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("TestStruct write struct end error: ", err)
    }
    return nil
}

func (x *TestStruct) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("TestStruct read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("TestStruct field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "unqualified_int_field")):  // unqualified_int_field
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.BOOL) || (id == thrift.NO_FIELD_ID && fieldName == "unqualified_bool_field")):  // unqualified_bool_field
            fieldReadErr = x.readField2(p)
        case ((id == 3 && wireType == thrift.LIST) || (id == thrift.NO_FIELD_ID && fieldName == "unqualified_list_field")):  // unqualified_list_field
            fieldReadErr = x.readField3(p)
        case ((id == 4 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "unqualified_struct_field")):  // unqualified_struct_field
            fieldReadErr = x.readField4(p)
        case ((id == 5 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "optional_int_field")):  // optional_int_field
            fieldReadErr = x.readField5(p)
        case ((id == 6 && wireType == thrift.BOOL) || (id == thrift.NO_FIELD_ID && fieldName == "optional_bool_field")):  // optional_bool_field
            fieldReadErr = x.readField6(p)
        case ((id == 7 && wireType == thrift.LIST) || (id == thrift.NO_FIELD_ID && fieldName == "optional_list_field")):  // optional_list_field
            fieldReadErr = x.readField7(p)
        case ((id == 8 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "optional_struct_field")):  // optional_struct_field
            fieldReadErr = x.readField8(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("TestStruct read struct end error: ", err)
    }

    return nil
}

func (x *TestStruct) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *TestStruct) setDefaults() *TestStruct {
    return x.
        SetUnqualifiedIntFieldNonCompat(0).
        SetUnqualifiedBoolFieldNonCompat(false).
        SetUnqualifiedListFieldNonCompat(make([]int32, 0)).
        SetUnqualifiedStructFieldNonCompat(NewEmptyStruct())
}

func (x *TestStruct) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_TestStruct
}


// RegisterTypes registers types found in this file that have a thrift_uri with the passed in registry.
func RegisterTypes(registry interface {
  RegisterType(name string, initializer func() any)
}) {
    registry.RegisterType("facebook.com/thrift/compiler/test/fixtures/default_values_rectification/EmptyStruct", func() any { return NewEmptyStruct() })
    registry.RegisterType("facebook.com/thrift/compiler/test/fixtures/default_values_rectification/TestStruct", func() any { return NewTestStruct() })

}
