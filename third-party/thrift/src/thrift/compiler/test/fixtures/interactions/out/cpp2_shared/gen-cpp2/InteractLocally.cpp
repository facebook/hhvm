/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/interactions/src/shared.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#include "thrift/compiler/test/fixtures/interactions/gen-cpp2/InteractLocally.h"
#include "thrift/compiler/test/fixtures/interactions/gen-cpp2/InteractLocally.tcc"
#include "thrift/compiler/test/fixtures/interactions/gen-cpp2/shared_metadata.h"
#include <thrift/lib/cpp2/gen/service_cpp.h>

std::unique_ptr<apache::thrift::AsyncProcessor> apache::thrift::ServiceHandler<::thrift::shared_interactions::InteractLocally>::getProcessor() {
  return std::make_unique<::thrift::shared_interactions::InteractLocallyAsyncProcessor>(this);
}

apache::thrift::ServiceHandler<::thrift::shared_interactions::InteractLocally>::CreateMethodMetadataResult apache::thrift::ServiceHandler<::thrift::shared_interactions::InteractLocally>::createMethodMetadata() {
  return ::apache::thrift::detail::ap::createMethodMetadataMap<::thrift::shared_interactions::InteractLocallyAsyncProcessor>(getServiceRequestInfoMap().value().get());
}


std::optional<std::reference_wrapper<apache::thrift::ServiceRequestInfoMap const>> apache::thrift::ServiceHandler<::thrift::shared_interactions::InteractLocally>::getServiceRequestInfoMap() const {
  return __fbthrift_serviceInfoHolder.requestInfoMap();
}

::thrift::shared_interactions::InteractLocallyServiceInfoHolder apache::thrift::ServiceHandler<::thrift::shared_interactions::InteractLocally>::__fbthrift_serviceInfoHolder;

//
// Service Methods
//


std::unique_ptr<apache::thrift::ServiceHandler<::thrift::shared_interactions::InteractLocally>::SharedInteractionIf> apache::thrift::ServiceHandler<::thrift::shared_interactions::InteractLocally>::createSharedInteraction() {
  apache::thrift::detail::si::throw_app_exn_unimplemented("createSharedInteraction");
}
//
// End of Method 'createSharedInteraction'
//

//
// End of Service Methods
//

//
// Service Methods
//

//
// Method 'init'
//

::std::int32_t apache::thrift::ServiceHandler<::thrift::shared_interactions::InteractLocally>::SharedInteractionIf::init() {
  apache::thrift::detail::si::throw_app_exn_unimplemented("init");
}

::std::int32_t apache::thrift::ServiceHandler<::thrift::shared_interactions::InteractLocally>::SharedInteractionIf::sync_init() {
  return init();
}

folly::SemiFuture<::std::int32_t>
apache::thrift::ServiceHandler<::thrift::shared_interactions::InteractLocally>::SharedInteractionIf::semifuture_init() {
  auto expected{apache::thrift::detail::si::InvocationType::SemiFuture};
  __fbthrift_invocation_init.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Sync,
      std::memory_order_relaxed);
  return sync_init();
}

#if FOLLY_HAS_COROUTINES
folly::coro::Task<::std::int32_t>
apache::thrift::ServiceHandler<::thrift::shared_interactions::InteractLocally>::SharedInteractionIf::co_init() {
  auto expected{apache::thrift::detail::si::InvocationType::Coro};
  __fbthrift_invocation_init.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::SemiFuture,
      std::memory_order_relaxed);
  folly::throw_exception(apache::thrift::detail::si::UnimplementedCoroMethod::
                             withCapturedArgs<>());
}

folly::coro::Task<::std::int32_t> apache::thrift::ServiceHandler<::thrift::shared_interactions::InteractLocally>::SharedInteractionIf::co_init(
    apache::thrift::RequestParams /* params */) {
  auto expected{apache::thrift::detail::si::InvocationType::CoroParam};
  __fbthrift_invocation_init.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Coro,
      std::memory_order_relaxed);
  return co_init();
}
#endif // FOLLY_HAS_COROUTINES

void apache::thrift::ServiceHandler<::thrift::shared_interactions::InteractLocally>::SharedInteractionIf::async_tm_init(
    apache::thrift::HandlerCallbackPtr<::std::int32_t> callback) {
  // It's possible the coroutine versions will delegate to a future-based
  // version. If that happens, we need the RequestParams arguments to be
  // available to the future through the thread-local backchannel, so we create
  // a RAII object that sets up RequestParams and clears them on destruction.
  apache::thrift::detail::si::AsyncTmPrep asyncTmPrep(this, callback.get());
#if FOLLY_HAS_COROUTINES
determineInvocationType:
#endif // FOLLY_HAS_COROUTINES
  auto invocationType =
      __fbthrift_invocation_init.load(std::memory_order_relaxed);
  try {
    switch (invocationType) {
      case apache::thrift::detail::si::InvocationType::AsyncTm: {
#if FOLLY_HAS_COROUTINES
        __fbthrift_invocation_init.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::CoroParam,
            std::memory_order_relaxed);
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_init(params);
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
#else // FOLLY_HAS_COROUTINES
        __fbthrift_invocation_init.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::SemiFuture,
            std::memory_order_relaxed);
        [[fallthrough]];
#endif // FOLLY_HAS_COROUTINES
      }
      case apache::thrift::detail::si::InvocationType::SemiFuture: {
        auto fut = semifuture_init();
        apache::thrift::detail::si::async_tm_semifuture(
            std::move(callback), std::move(fut));
        return;
      }
#if FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::CoroParam: {
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_init(params);
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
      case apache::thrift::detail::si::InvocationType::Coro: {
        auto task = co_init();
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
#endif // FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::Sync: {
        callback->result(sync_init());
        return;
      }
      default: {
        folly::assume_unreachable();
      }
    }
#if FOLLY_HAS_COROUTINES
  } catch (apache::thrift::detail::si::UnimplementedCoroMethod& ex) {
    std::tie() = std::move(ex).restoreArgs<>();
    goto determineInvocationType;
#endif // FOLLY_HAS_COROUTINES
  } catch (...) {
    callback->exception(std::current_exception());
  }
}
//
// End of Method 'init'
//

//
// Method 'do_something'
//

void apache::thrift::ServiceHandler<::thrift::shared_interactions::InteractLocally>::SharedInteractionIf::do_something(::thrift::shared_interactions::DoSomethingResult& /*_return*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("do_something");
}

void apache::thrift::ServiceHandler<::thrift::shared_interactions::InteractLocally>::SharedInteractionIf::sync_do_something(::thrift::shared_interactions::DoSomethingResult& _return) {
  return do_something(_return);
}

folly::SemiFuture<std::unique_ptr<::thrift::shared_interactions::DoSomethingResult>>
apache::thrift::ServiceHandler<::thrift::shared_interactions::InteractLocally>::SharedInteractionIf::semifuture_do_something() {
  auto expected{apache::thrift::detail::si::InvocationType::SemiFuture};
  __fbthrift_invocation_do_something.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Sync,
      std::memory_order_relaxed);
  auto ret = std::make_unique<::thrift::shared_interactions::DoSomethingResult>();
  sync_do_something(*ret);
  return folly::makeSemiFuture(std::move(ret));
}

#if FOLLY_HAS_COROUTINES
folly::coro::Task<std::unique_ptr<::thrift::shared_interactions::DoSomethingResult>>
apache::thrift::ServiceHandler<::thrift::shared_interactions::InteractLocally>::SharedInteractionIf::co_do_something() {
  auto expected{apache::thrift::detail::si::InvocationType::Coro};
  __fbthrift_invocation_do_something.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::SemiFuture,
      std::memory_order_relaxed);
  folly::throw_exception(apache::thrift::detail::si::UnimplementedCoroMethod::
                             withCapturedArgs<>());
}

folly::coro::Task<std::unique_ptr<::thrift::shared_interactions::DoSomethingResult>> apache::thrift::ServiceHandler<::thrift::shared_interactions::InteractLocally>::SharedInteractionIf::co_do_something(
    apache::thrift::RequestParams /* params */) {
  auto expected{apache::thrift::detail::si::InvocationType::CoroParam};
  __fbthrift_invocation_do_something.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Coro,
      std::memory_order_relaxed);
  return co_do_something();
}
#endif // FOLLY_HAS_COROUTINES

void apache::thrift::ServiceHandler<::thrift::shared_interactions::InteractLocally>::SharedInteractionIf::async_tm_do_something(
    apache::thrift::HandlerCallbackPtr<std::unique_ptr<::thrift::shared_interactions::DoSomethingResult>> callback) {
  // It's possible the coroutine versions will delegate to a future-based
  // version. If that happens, we need the RequestParams arguments to be
  // available to the future through the thread-local backchannel, so we create
  // a RAII object that sets up RequestParams and clears them on destruction.
  apache::thrift::detail::si::AsyncTmPrep asyncTmPrep(this, callback.get());
#if FOLLY_HAS_COROUTINES
determineInvocationType:
#endif // FOLLY_HAS_COROUTINES
  auto invocationType =
      __fbthrift_invocation_do_something.load(std::memory_order_relaxed);
  try {
    switch (invocationType) {
      case apache::thrift::detail::si::InvocationType::AsyncTm: {
#if FOLLY_HAS_COROUTINES
        __fbthrift_invocation_do_something.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::CoroParam,
            std::memory_order_relaxed);
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_do_something(params);
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
#else // FOLLY_HAS_COROUTINES
        __fbthrift_invocation_do_something.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::SemiFuture,
            std::memory_order_relaxed);
        [[fallthrough]];
#endif // FOLLY_HAS_COROUTINES
      }
      case apache::thrift::detail::si::InvocationType::SemiFuture: {
        auto fut = semifuture_do_something();
        apache::thrift::detail::si::async_tm_semifuture(
            std::move(callback), std::move(fut));
        return;
      }
#if FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::CoroParam: {
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_do_something(params);
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
      case apache::thrift::detail::si::InvocationType::Coro: {
        auto task = co_do_something();
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
#endif // FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::Sync: {
        ::thrift::shared_interactions::DoSomethingResult _return;
        sync_do_something(_return);
        callback->result(std::move(_return));
        return;
      }
      default: {
        folly::assume_unreachable();
      }
    }
#if FOLLY_HAS_COROUTINES
  } catch (apache::thrift::detail::si::UnimplementedCoroMethod& ex) {
    std::tie() = std::move(ex).restoreArgs<>();
    goto determineInvocationType;
#endif // FOLLY_HAS_COROUTINES
  } catch (...) {
    callback->exception(std::current_exception());
  }
}
//
// End of Method 'do_something'
//

//
// Method 'tear_down'
//

void apache::thrift::ServiceHandler<::thrift::shared_interactions::InteractLocally>::SharedInteractionIf::tear_down() {
  apache::thrift::detail::si::throw_app_exn_unimplemented("tear_down");
}

void apache::thrift::ServiceHandler<::thrift::shared_interactions::InteractLocally>::SharedInteractionIf::sync_tear_down() {
  return tear_down();
}

folly::SemiFuture<folly::Unit>
apache::thrift::ServiceHandler<::thrift::shared_interactions::InteractLocally>::SharedInteractionIf::semifuture_tear_down() {
  auto expected{apache::thrift::detail::si::InvocationType::SemiFuture};
  __fbthrift_invocation_tear_down.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Sync,
      std::memory_order_relaxed);
  sync_tear_down();
  return folly::makeSemiFuture();
}

#if FOLLY_HAS_COROUTINES
folly::coro::Task<void>
apache::thrift::ServiceHandler<::thrift::shared_interactions::InteractLocally>::SharedInteractionIf::co_tear_down() {
  auto expected{apache::thrift::detail::si::InvocationType::Coro};
  __fbthrift_invocation_tear_down.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::SemiFuture,
      std::memory_order_relaxed);
  folly::throw_exception(apache::thrift::detail::si::UnimplementedCoroMethod::
                             withCapturedArgs<>());
}

folly::coro::Task<void> apache::thrift::ServiceHandler<::thrift::shared_interactions::InteractLocally>::SharedInteractionIf::co_tear_down(
    apache::thrift::RequestParams /* params */) {
  auto expected{apache::thrift::detail::si::InvocationType::CoroParam};
  __fbthrift_invocation_tear_down.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Coro,
      std::memory_order_relaxed);
  return co_tear_down();
}
#endif // FOLLY_HAS_COROUTINES

void apache::thrift::ServiceHandler<::thrift::shared_interactions::InteractLocally>::SharedInteractionIf::async_tm_tear_down(
    apache::thrift::HandlerCallbackPtr<void> callback) {
  // It's possible the coroutine versions will delegate to a future-based
  // version. If that happens, we need the RequestParams arguments to be
  // available to the future through the thread-local backchannel, so we create
  // a RAII object that sets up RequestParams and clears them on destruction.
  apache::thrift::detail::si::AsyncTmPrep asyncTmPrep(this, callback.get());
#if FOLLY_HAS_COROUTINES
determineInvocationType:
#endif // FOLLY_HAS_COROUTINES
  auto invocationType =
      __fbthrift_invocation_tear_down.load(std::memory_order_relaxed);
  try {
    switch (invocationType) {
      case apache::thrift::detail::si::InvocationType::AsyncTm: {
#if FOLLY_HAS_COROUTINES
        __fbthrift_invocation_tear_down.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::CoroParam,
            std::memory_order_relaxed);
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_tear_down(params);
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
#else // FOLLY_HAS_COROUTINES
        __fbthrift_invocation_tear_down.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::SemiFuture,
            std::memory_order_relaxed);
        [[fallthrough]];
#endif // FOLLY_HAS_COROUTINES
      }
      case apache::thrift::detail::si::InvocationType::SemiFuture: {
        auto fut = semifuture_tear_down();
        apache::thrift::detail::si::async_tm_semifuture(
            std::move(callback), std::move(fut));
        return;
      }
#if FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::CoroParam: {
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_tear_down(params);
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
      case apache::thrift::detail::si::InvocationType::Coro: {
        auto task = co_tear_down();
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
#endif // FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::Sync: {
        sync_tear_down();
        callback->done();
        return;
      }
      default: {
        folly::assume_unreachable();
      }
    }
#if FOLLY_HAS_COROUTINES
  } catch (apache::thrift::detail::si::UnimplementedCoroMethod& ex) {
    std::tie() = std::move(ex).restoreArgs<>();
    goto determineInvocationType;
#endif // FOLLY_HAS_COROUTINES
  } catch (...) {
    callback->exception(std::current_exception());
  }
}
//
// End of Method 'tear_down'
//

//
// End of Service Methods
//

namespace thrift::shared_interactions {


std::string_view InteractLocallyAsyncProcessor::getServiceName() {
  return "InteractLocally";
}

void InteractLocallyAsyncProcessor::getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) {
  ::apache::thrift::detail::md::ServiceMetadata<::apache::thrift::ServiceHandler<::thrift::shared_interactions::InteractLocally>>::gen(response);
}

void InteractLocallyAsyncProcessor::processSerializedCompressedRequestWithMetadata(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  apache::thrift::detail::ap::process(this, iface_, std::move(req), std::move(serializedRequest), methodMetadata, protType, context, eb, tm);
}

void InteractLocallyAsyncProcessor::executeRequest(apache::thrift::ServerRequest&& request, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata) {
  apache::thrift::detail::ap::execute(this, std::move(request), apache::thrift::detail::ServerRequestHelper::protocol(request), methodMetadata);
}

const InteractLocallyAsyncProcessor::ProcessMap& InteractLocallyAsyncProcessor::getOwnProcessMap() {
  return kOwnProcessMap_;
}

const InteractLocallyAsyncProcessor::ProcessMap InteractLocallyAsyncProcessor::kOwnProcessMap_ {
  {"SharedInteraction.init",
    {&InteractLocallyAsyncProcessor::setUpAndProcess_SharedInteraction_init<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &InteractLocallyAsyncProcessor::setUpAndProcess_SharedInteraction_init<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>,
     &InteractLocallyAsyncProcessor::executeRequest_SharedInteraction_init<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &InteractLocallyAsyncProcessor::executeRequest_SharedInteraction_init<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>}},
  {"SharedInteraction.do_something",
    {&InteractLocallyAsyncProcessor::setUpAndProcess_SharedInteraction_do_something<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &InteractLocallyAsyncProcessor::setUpAndProcess_SharedInteraction_do_something<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>,
     &InteractLocallyAsyncProcessor::executeRequest_SharedInteraction_do_something<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &InteractLocallyAsyncProcessor::executeRequest_SharedInteraction_do_something<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>}},
  {"SharedInteraction.tear_down",
    {&InteractLocallyAsyncProcessor::setUpAndProcess_SharedInteraction_tear_down<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &InteractLocallyAsyncProcessor::setUpAndProcess_SharedInteraction_tear_down<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>,
     &InteractLocallyAsyncProcessor::executeRequest_SharedInteraction_tear_down<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &InteractLocallyAsyncProcessor::executeRequest_SharedInteraction_tear_down<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>}},
};

apache::thrift::ServiceRequestInfoMap const& InteractLocallyServiceInfoHolder::requestInfoMap() const {
  static folly::Indestructible<apache::thrift::ServiceRequestInfoMap> requestInfoMap{staticRequestInfoMap()};
  return *requestInfoMap;
}

apache::thrift::ServiceRequestInfoMap InteractLocallyServiceInfoHolder::staticRequestInfoMap() {
  apache::thrift::ServiceRequestInfoMap requestInfoMap = {
  {"SharedInteraction.init",
    { false,
     apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE,
     "InteractLocally.SharedInteraction.init",
     "SharedInteraction",
     apache::thrift::concurrency::NORMAL,
     std::nullopt}},
  {"SharedInteraction.do_something",
    { false,
     apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE,
     "InteractLocally.SharedInteraction.do_something",
     "SharedInteraction",
     apache::thrift::concurrency::NORMAL,
     std::nullopt}},
  {"SharedInteraction.tear_down",
    { false,
     apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE,
     "InteractLocally.SharedInteraction.tear_down",
     "SharedInteraction",
     apache::thrift::concurrency::NORMAL,
     std::nullopt}},
  };

  return requestInfoMap;
}
const InteractLocallyAsyncProcessor::InteractionConstructorMap& InteractLocallyAsyncProcessor::getInteractionConstructorMap() {
  return interactionConstructorMap_;
}

const InteractLocallyAsyncProcessor::InteractionConstructorMap InteractLocallyAsyncProcessor::interactionConstructorMap_ {
  {"SharedInteraction", &InteractLocallyAsyncProcessor::createSharedInteraction},
};

std::unique_ptr<apache::thrift::Tile> InteractLocallyAsyncProcessor::createInteractionImpl(const std::string& name, int16_t) {
  auto fn = getInteractionConstructorMap().at(name);
  return (this->*fn)();
}} // namespace thrift::shared_interactions
