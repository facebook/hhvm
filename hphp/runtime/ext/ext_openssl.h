/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010-2014 Facebook, Inc. (http://www.facebook.com)     |
   | Copyright (c) 1997-2010 The PHP Group                                |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/

#ifndef incl_HPHP_EXT_OPENSSL_H_
#define incl_HPHP_EXT_OPENSSL_H_

// >>>>>> Generated by idl.php. Do NOT modify. <<<<<<

#include "hphp/runtime/base/base-includes.h"

namespace HPHP {
///////////////////////////////////////////////////////////////////////////////

bool f_openssl_csr_export_to_file(const Variant& csr, const String& outfilename, bool notext = true);
bool f_openssl_csr_export(const Variant& csr, VRefParam out, bool notext = true);
Variant f_openssl_csr_get_public_key(const Variant& csr);
Variant f_openssl_csr_get_subject(const Variant& csr, bool use_shortnames = true);
Variant f_openssl_csr_new(const Array& dn, VRefParam privkey, const Variant& configargs = null_variant, const Variant& extraattribs = null_variant);
Variant f_openssl_csr_sign(const Variant& csr, const Variant& cacert, const Variant& priv_key, int days, const Variant& configargs = null_variant, int serial = 0);
Variant f_openssl_error_string();
bool f_openssl_open(const String& sealed_data, VRefParam open_data, const String& env_key, const Variant& priv_key_id);
bool f_openssl_pkcs12_export_to_file(const Variant& x509, const String& filename, const Variant& priv_key, const String& pass, const Variant& args = null_variant);
bool f_openssl_pkcs12_export(const Variant& x509, VRefParam out, const Variant& priv_key, const String& pass, const Variant& args = null_variant);
bool f_openssl_pkcs12_read(const String& pkcs12, VRefParam certs, const String& pass);
bool f_openssl_pkcs7_decrypt(const String& infilename, const String& outfilename, const Variant& recipcert, const Variant& recipkey = null_variant);
bool f_openssl_pkcs7_encrypt(const String& infilename, const String& outfilename, const Variant& recipcerts, const Array& headers, int flags = 0, int cipherid = k_OPENSSL_CIPHER_RC2_40);
bool f_openssl_pkcs7_sign(const String& infilename, const String& outfilename, const Variant& signcert, const Variant& privkey, const Variant& headers, int flags = k_PKCS7_DETACHED, const String& extracerts = null_string);
Variant f_openssl_pkcs7_verify(const String& filename, int flags, const String& outfilename = null_string, const Array& cainfo = null_array, const String& extracerts = null_string, const String& content = null_string);
bool f_openssl_pkey_export_to_file(const Variant& key, const String& outfilename, const String& passphrase = null_string, const Variant& configargs = null_variant);
bool f_openssl_pkey_export(const Variant& key, VRefParam out, const String& passphrase = null_string, const Variant& configargs = null_variant);
void f_openssl_pkey_free(const Resource& key);
void f_openssl_free_key(const Resource& key);
Array f_openssl_pkey_get_details(const Resource& key);
Variant f_openssl_pkey_get_private(const Variant& key, const String& passphrase = null_string);
Variant f_openssl_get_privatekey(const Variant& key, const String& passphrase = null_string);
Variant f_openssl_pkey_get_public(const Variant& certificate);
Variant f_openssl_get_publickey(const Variant& certificate);
Resource f_openssl_pkey_new(const Variant& configargs = null_variant);
bool f_openssl_private_decrypt(const String& data, VRefParam decrypted, const Variant& key, int padding = k_OPENSSL_PKCS1_PADDING);
bool f_openssl_private_encrypt(const String& data, VRefParam crypted, const Variant& key, int padding = k_OPENSSL_PKCS1_PADDING);
bool f_openssl_public_decrypt(const String& data, VRefParam decrypted, const Variant& key, int padding = k_OPENSSL_PKCS1_PADDING);
bool f_openssl_public_encrypt(const String& data, VRefParam crypted, const Variant& key, int padding = k_OPENSSL_PKCS1_PADDING);
Variant f_openssl_seal(const String& data, VRefParam sealed_data, VRefParam env_keys, const Array& pub_key_ids);
bool f_openssl_sign(const String& data, VRefParam signature, const Variant& priv_key_id, int signature_alg = k_OPENSSL_ALGO_SHA1);
Variant f_openssl_verify(const String& data, const String& signature, const Variant& pub_key_id, int signature_alg = k_OPENSSL_ALGO_SHA1);
bool f_openssl_x509_check_private_key(const Variant& cert, const Variant& key);
int64_t f_openssl_x509_checkpurpose(const Variant& x509cert, int purpose, const Array& cainfo = null_array, const String& untrustedfile = null_string);
bool f_openssl_x509_export_to_file(const Variant& x509, const String& outfilename, bool notext = true);
bool f_openssl_x509_export(const Variant& x509, VRefParam output, bool notext = true);
void f_openssl_x509_free(const Resource& x509cert);
Variant f_openssl_x509_parse(const Variant& x509cert, bool shortnames = true);
Variant f_openssl_x509_read(const Variant& x509certdata);
Variant f_openssl_random_pseudo_bytes(int length, VRefParam crypto_strong = false);
Variant f_openssl_cipher_iv_length(const String& method);
Variant f_openssl_encrypt(const String& data, const String& method, const String& password, int options = 0, const String& iv = null_string);
Variant f_openssl_decrypt(const String& data, const String& method, const String& password, int options = 0, const String& iv = null_string);
Variant f_openssl_digest(const String& data, const String& method, bool raw_output = false);
Array f_openssl_get_cipher_methods(bool aliases = false);
Array f_openssl_get_md_methods(bool aliases = false);
extern const int64_t k_OPENSSL_RAW_DATA;
extern const int64_t k_OPENSSL_ZERO_PADDING;

///////////////////////////////////////////////////////////////////////////////
}

#endif // incl_HPHP_EXT_OPENSSL_H_
