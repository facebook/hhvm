#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

import folly.iobuf as _fbthrift_iobuf
import thrift.py3.types
import thrift.py3.client
import thrift.py3.common
import typing as _typing
from types import TracebackType

import test.fixtures.basic.module.types as _test_fixtures_basic_module_types
import facebook.thrift.annotation.hack.types as _facebook_thrift_annotation_hack_types


_FooServiceT = _typing.TypeVar('_FooServiceT', bound='FooService')


class FooService(thrift.py3.client.Client):

    async def simple_rpc(
        self,
        rpc_options: _typing.Optional[thrift.py3.common.RpcOptions]=None
    ) -> None: ...



_FB303ServiceT = _typing.TypeVar('_FB303ServiceT', bound='FB303Service')


class FB303Service(thrift.py3.client.Client):

    async def simple_rpc(
        self,
        int_parameter: int,
        rpc_options: _typing.Optional[thrift.py3.common.RpcOptions]=None
    ) -> _test_fixtures_basic_module_types.ReservedKeyword: ...



_MyServiceT = _typing.TypeVar('_MyServiceT', bound='MyService')


class MyService(thrift.py3.client.Client):

    async def ping(
        self,
        rpc_options: _typing.Optional[thrift.py3.common.RpcOptions]=None
    ) -> None: ...

    async def getRandomData(
        self,
        rpc_options: _typing.Optional[thrift.py3.common.RpcOptions]=None
    ) -> str: ...

    async def sink(
        self,
        sink: int,
        rpc_options: _typing.Optional[thrift.py3.common.RpcOptions]=None
    ) -> None: ...

    async def putDataById(
        self,
        id: int,
        data: str,
        rpc_options: _typing.Optional[thrift.py3.common.RpcOptions]=None
    ) -> None: ...

    async def hasDataById(
        self,
        id: int,
        rpc_options: _typing.Optional[thrift.py3.common.RpcOptions]=None
    ) -> bool: ...

    async def getDataById(
        self,
        id: int,
        rpc_options: _typing.Optional[thrift.py3.common.RpcOptions]=None
    ) -> str: ...

    async def deleteDataById(
        self,
        id: int,
        rpc_options: _typing.Optional[thrift.py3.common.RpcOptions]=None
    ) -> None: ...

    async def lobDataById(
        self,
        id: int,
        data: str,
        rpc_options: _typing.Optional[thrift.py3.common.RpcOptions]=None
    ) -> None: ...

    async def invalid_return_for_hack(
        self,
        rpc_options: _typing.Optional[thrift.py3.common.RpcOptions]=None
    ) -> _typing.AbstractSet[float]: ...

    async def rpc_skipped_codegen(
        self,
        rpc_options: _typing.Optional[thrift.py3.common.RpcOptions]=None
    ) -> None: ...



_DbMixedStackArgumentsT = _typing.TypeVar('_DbMixedStackArgumentsT', bound='DbMixedStackArguments')


class DbMixedStackArguments(thrift.py3.client.Client):

    async def getDataByKey0(
        self,
        key: str,
        rpc_options: _typing.Optional[thrift.py3.common.RpcOptions]=None
    ) -> bytes: ...

    async def getDataByKey1(
        self,
        key: str,
        rpc_options: _typing.Optional[thrift.py3.common.RpcOptions]=None
    ) -> bytes: ...

