// Autogenerated by Thrift for thrift/compiler/test/fixtures/constants/src/module.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package module

import (
    "maps"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
    metadata "github.com/facebook/fbthrift/thrift/lib/thrift/metadata"
)

// (needed to ensure safety because of naive import list construction)
var _ = thrift.VOID
var _ = maps.Copy[map[int]int, map[int]int]
var _ = metadata.GoUnusedProtection__

// Premade Thrift types
var (
    premadeThriftType_module_EmptyEnum =
        &metadata.ThriftType{
            TEnum:
                &metadata.ThriftEnumType{
                    Name: "module.EmptyEnum",
                },
        }
    premadeThriftType_module_City =
        &metadata.ThriftType{
            TEnum:
                &metadata.ThriftEnumType{
                    Name: "module.City",
                },
        }
    premadeThriftType_module_Company =
        &metadata.ThriftType{
            TEnum:
                &metadata.ThriftEnumType{
                    Name: "module.Company",
                },
        }
    premadeThriftType_i32 =
        &metadata.ThriftType{
            TPrimitive:
                thrift.Pointerize(metadata.ThriftPrimitiveType_THRIFT_I32_TYPE),
        }
    premadeThriftType_string =
        &metadata.ThriftType{
            TPrimitive:
                thrift.Pointerize(metadata.ThriftPrimitiveType_THRIFT_STRING_TYPE),
        }
    premadeThriftType_double =
        &metadata.ThriftType{
            TPrimitive:
                thrift.Pointerize(metadata.ThriftPrimitiveType_THRIFT_DOUBLE_TYPE),
        }
    premadeThriftType_module_Internship =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "module.Internship",
                },
        }
    premadeThriftType_module_Range =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "module.Range",
                },
        }
    premadeThriftType_module_struct1 =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "module.struct1",
                },
        }
    premadeThriftType_list_i32 =
        &metadata.ThriftType{
            TList:
                &metadata.ThriftListType{
                    ValueType: premadeThriftType_i32,
                },
        }
    premadeThriftType_module_struct2 =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "module.struct2",
                },
        }
    premadeThriftType_module_struct3 =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "module.struct3",
                },
        }
    premadeThriftType_byte =
        &metadata.ThriftType{
            TPrimitive:
                thrift.Pointerize(metadata.ThriftPrimitiveType_THRIFT_BYTE_TYPE),
        }
    premadeThriftType_module_struct4 =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "module.struct4",
                },
        }
    premadeThriftType_module_union1 =
        &metadata.ThriftType{
            TUnion:
                &metadata.ThriftUnionType{
                    Name: "module.union1",
                },
        }
    premadeThriftType_module_union2 =
        &metadata.ThriftType{
            TUnion:
                &metadata.ThriftUnionType{
                    Name: "module.union2",
                },
        }
    premadeThriftType_module_MyCompany =
        &metadata.ThriftType{
            TTypedef:
                &metadata.ThriftTypedefType{
                    Name:           "module.MyCompany",
                    UnderlyingType: premadeThriftType_module_Company,
                },
        }
    premadeThriftType_module_MyStringIdentifier =
        &metadata.ThriftType{
            TTypedef:
                &metadata.ThriftTypedefType{
                    Name:           "module.MyStringIdentifier",
                    UnderlyingType: premadeThriftType_string,
                },
        }
    premadeThriftType_module_MyIntIdentifier =
        &metadata.ThriftType{
            TTypedef:
                &metadata.ThriftTypedefType{
                    Name:           "module.MyIntIdentifier",
                    UnderlyingType: premadeThriftType_i32,
                },
        }
    premadeThriftType_map_string_string =
        &metadata.ThriftType{
            TMap:
                &metadata.ThriftMapType{
                    KeyType:   premadeThriftType_string,
                    ValueType: premadeThriftType_string,
                },
        }
    premadeThriftType_module_MyMapIdentifier =
        &metadata.ThriftType{
            TTypedef:
                &metadata.ThriftTypedefType{
                    Name:           "module.MyMapIdentifier",
                    UnderlyingType: premadeThriftType_map_string_string,
                },
        }
)

// Premade struct metadatas
var (
    premadeStructMetadata_Internship =
        &metadata.ThriftStruct{
            Name:    "module.Internship",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
                &metadata.ThriftField{
                    Id:         1,
                    Name:       "weeks",
                    IsOptional: false,
                    Type:       premadeThriftType_i32,
                },
                &metadata.ThriftField{
                    Id:         2,
                    Name:       "title",
                    IsOptional: false,
                    Type:       premadeThriftType_string,
                },
                &metadata.ThriftField{
                    Id:         3,
                    Name:       "employer",
                    IsOptional: true,
                    Type:       premadeThriftType_module_Company,
                },
                &metadata.ThriftField{
                    Id:         4,
                    Name:       "compensation",
                    IsOptional: true,
                    Type:       premadeThriftType_double,
                },
                &metadata.ThriftField{
                    Id:         5,
                    Name:       "school",
                    IsOptional: true,
                    Type:       premadeThriftType_string,
                },
            },
        }
    premadeStructMetadata_Range =
        &metadata.ThriftStruct{
            Name:    "module.Range",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
                &metadata.ThriftField{
                    Id:         1,
                    Name:       "min",
                    IsOptional: false,
                    Type:       premadeThriftType_i32,
                },
                &metadata.ThriftField{
                    Id:         2,
                    Name:       "max",
                    IsOptional: false,
                    Type:       premadeThriftType_i32,
                },
            },
        }
    premadeStructMetadata_struct1 =
        &metadata.ThriftStruct{
            Name:    "module.struct1",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
                &metadata.ThriftField{
                    Id:         1,
                    Name:       "a",
                    IsOptional: false,
                    Type:       premadeThriftType_i32,
                },
                &metadata.ThriftField{
                    Id:         2,
                    Name:       "b",
                    IsOptional: false,
                    Type:       premadeThriftType_string,
                },
            },
        }
    premadeStructMetadata_struct2 =
        &metadata.ThriftStruct{
            Name:    "module.struct2",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
                &metadata.ThriftField{
                    Id:         1,
                    Name:       "a",
                    IsOptional: false,
                    Type:       premadeThriftType_i32,
                },
                &metadata.ThriftField{
                    Id:         2,
                    Name:       "b",
                    IsOptional: false,
                    Type:       premadeThriftType_string,
                },
                &metadata.ThriftField{
                    Id:         3,
                    Name:       "c",
                    IsOptional: false,
                    Type:       premadeThriftType_module_struct1,
                },
                &metadata.ThriftField{
                    Id:         4,
                    Name:       "d",
                    IsOptional: false,
                    Type:       premadeThriftType_list_i32,
                },
            },
        }
    premadeStructMetadata_struct3 =
        &metadata.ThriftStruct{
            Name:    "module.struct3",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
                &metadata.ThriftField{
                    Id:         1,
                    Name:       "a",
                    IsOptional: false,
                    Type:       premadeThriftType_string,
                },
                &metadata.ThriftField{
                    Id:         2,
                    Name:       "b",
                    IsOptional: false,
                    Type:       premadeThriftType_i32,
                },
                &metadata.ThriftField{
                    Id:         3,
                    Name:       "c",
                    IsOptional: false,
                    Type:       premadeThriftType_module_struct2,
                },
            },
        }
    premadeStructMetadata_struct4 =
        &metadata.ThriftStruct{
            Name:    "module.struct4",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
                &metadata.ThriftField{
                    Id:         1,
                    Name:       "a",
                    IsOptional: false,
                    Type:       premadeThriftType_i32,
                },
                &metadata.ThriftField{
                    Id:         2,
                    Name:       "b",
                    IsOptional: true,
                    Type:       premadeThriftType_double,
                },
                &metadata.ThriftField{
                    Id:         3,
                    Name:       "c",
                    IsOptional: true,
                    Type:       premadeThriftType_byte,
                },
            },
        }
    premadeStructMetadata_union1 =
        &metadata.ThriftStruct{
            Name:    "module.union1",
            IsUnion: true,
            Fields:  []*metadata.ThriftField{
                &metadata.ThriftField{
                    Id:         1,
                    Name:       "i",
                    IsOptional: false,
                    Type:       premadeThriftType_i32,
                },
                &metadata.ThriftField{
                    Id:         2,
                    Name:       "d",
                    IsOptional: false,
                    Type:       premadeThriftType_double,
                },
            },
        }
    premadeStructMetadata_union2 =
        &metadata.ThriftStruct{
            Name:    "module.union2",
            IsUnion: true,
            Fields:  []*metadata.ThriftField{
                &metadata.ThriftField{
                    Id:         1,
                    Name:       "i",
                    IsOptional: false,
                    Type:       premadeThriftType_i32,
                },
                &metadata.ThriftField{
                    Id:         2,
                    Name:       "d",
                    IsOptional: false,
                    Type:       premadeThriftType_double,
                },
                &metadata.ThriftField{
                    Id:         3,
                    Name:       "s",
                    IsOptional: false,
                    Type:       premadeThriftType_module_struct1,
                },
                &metadata.ThriftField{
                    Id:         4,
                    Name:       "u",
                    IsOptional: false,
                    Type:       premadeThriftType_module_union1,
                },
            },
        }
)

var premadeThriftTypesMap = func() map[string]*metadata.ThriftType {
    fbthriftThriftTypesMap := make(map[string]*metadata.ThriftType)
    fbthriftThriftTypesMap["module.EmptyEnum"] = premadeThriftType_module_EmptyEnum
    fbthriftThriftTypesMap["module.City"] = premadeThriftType_module_City
    fbthriftThriftTypesMap["module.Company"] = premadeThriftType_module_Company
    fbthriftThriftTypesMap["i32"] = premadeThriftType_i32
    fbthriftThriftTypesMap["string"] = premadeThriftType_string
    fbthriftThriftTypesMap["double"] = premadeThriftType_double
    fbthriftThriftTypesMap["module.Internship"] = premadeThriftType_module_Internship
    fbthriftThriftTypesMap["module.Range"] = premadeThriftType_module_Range
    fbthriftThriftTypesMap["module.struct1"] = premadeThriftType_module_struct1
    fbthriftThriftTypesMap["module.struct2"] = premadeThriftType_module_struct2
    fbthriftThriftTypesMap["module.struct3"] = premadeThriftType_module_struct3
    fbthriftThriftTypesMap["byte"] = premadeThriftType_byte
    fbthriftThriftTypesMap["module.struct4"] = premadeThriftType_module_struct4
    fbthriftThriftTypesMap["module.union1"] = premadeThriftType_module_union1
    fbthriftThriftTypesMap["module.union2"] = premadeThriftType_module_union2
    fbthriftThriftTypesMap["module.MyCompany"] = premadeThriftType_module_MyCompany
    fbthriftThriftTypesMap["module.MyStringIdentifier"] = premadeThriftType_module_MyStringIdentifier
    fbthriftThriftTypesMap["module.MyIntIdentifier"] = premadeThriftType_module_MyIntIdentifier
    fbthriftThriftTypesMap["module.MyMapIdentifier"] = premadeThriftType_module_MyMapIdentifier
    return fbthriftThriftTypesMap
}()

var structMetadatas = func() []*metadata.ThriftStruct {
    fbthriftResults := make([]*metadata.ThriftStruct, 0)
    fbthriftResults = append(fbthriftResults, premadeStructMetadata_Internship)
    fbthriftResults = append(fbthriftResults, premadeStructMetadata_Range)
    fbthriftResults = append(fbthriftResults, premadeStructMetadata_struct1)
    fbthriftResults = append(fbthriftResults, premadeStructMetadata_struct2)
    fbthriftResults = append(fbthriftResults, premadeStructMetadata_struct3)
    fbthriftResults = append(fbthriftResults, premadeStructMetadata_struct4)
    fbthriftResults = append(fbthriftResults, premadeStructMetadata_union1)
    fbthriftResults = append(fbthriftResults, premadeStructMetadata_union2)
    return fbthriftResults
}()

var exceptionMetadatas = func() []*metadata.ThriftException {
    fbthriftResults := make([]*metadata.ThriftException, 0)
    return fbthriftResults
}()

var enumMetadatas = func() []*metadata.ThriftEnum {
    fbthriftResults := make([]*metadata.ThriftEnum, 0)
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftEnum{
            Name:     "module.EmptyEnum",
            Elements: map[int32]string{
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftEnum{
            Name:     "module.City",
            Elements: map[int32]string{
                0: "NYC",
                1: "MPK",
                2: "SEA",
                3: "LON",
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftEnum{
            Name:     "module.Company",
            Elements: map[int32]string{
                0: "FACEBOOK",
                1: "WHATSAPP",
                2: "OCULUS",
                3: "INSTAGRAM",
                4: "__FRIEND__FEED",
            },
        },
    )
    return fbthriftResults
}()

var serviceMetadatas = func() []*metadata.ThriftService {
    fbthriftResults := make([]*metadata.ThriftService, 0)
    return fbthriftResults
}()

// Thrift metadata for this package, as well as all of its recursive imports.
var packageThriftMetadata = func() *metadata.ThriftMetadata {
    allEnumsMap := make(map[string]*metadata.ThriftEnum)
    allStructsMap := make(map[string]*metadata.ThriftStruct)
    allExceptionsMap := make(map[string]*metadata.ThriftException)
    allServicesMap := make(map[string]*metadata.ThriftService)

    // Add enum metadatas from the current program...
    for _, enumMetadata := range enumMetadatas {
        allEnumsMap[enumMetadata.GetName()] = enumMetadata
    }
    // Add struct metadatas from the current program...
    for _, structMetadata := range structMetadatas {
        allStructsMap[structMetadata.GetName()] = structMetadata
    }
    // Add exception metadatas from the current program...
    for _, exceptionMetadata := range exceptionMetadatas {
        allExceptionsMap[exceptionMetadata.GetName()] = exceptionMetadata
    }
    // Add service metadatas from the current program...
    for _, serviceMetadata := range serviceMetadatas {
        allServicesMap[serviceMetadata.GetName()] = serviceMetadata
    }

    // Obtain Thrift metadatas from recursively included programs...
    var recursiveThriftMetadatas []*metadata.ThriftMetadata

    // ...now merge metadatas from recursively included programs.
    for _, thriftMetadata := range recursiveThriftMetadatas {
        maps.Copy(allEnumsMap, thriftMetadata.GetEnums())
        maps.Copy(allStructsMap, thriftMetadata.GetStructs())
        maps.Copy(allExceptionsMap, thriftMetadata.GetExceptions())
        maps.Copy(allServicesMap, thriftMetadata.GetServices())
    }

    return metadata.NewThriftMetadata().
        SetEnums(allEnumsMap).
        SetStructs(allStructsMap).
        SetExceptions(allExceptionsMap).
        SetServices(allServicesMap)
}()

// GetMetadataThriftType (INTERNAL USE ONLY).
// Returns metadata ThriftType for a given full type name.
func GetMetadataThriftType(fullName string) *metadata.ThriftType {
    return premadeThriftTypesMap[fullName]
}

// GetThriftMetadata returns complete Thrift metadata for current and imported packages.
func GetThriftMetadata() *metadata.ThriftMetadata {
    return packageThriftMetadata
}

// GetThriftMetadataForService returns Thrift metadata for the given service.
func GetThriftMetadataForService(scopedServiceName string) *metadata.ThriftMetadata {
    allServicesMap := packageThriftMetadata.GetServices()
    relevantServicesMap := make(map[string]*metadata.ThriftService)

    serviceMetadata := allServicesMap[scopedServiceName]
    // Visit and record all recursive parents of the target service.
    for serviceMetadata != nil {
        relevantServicesMap[serviceMetadata.GetName()] = serviceMetadata
        if serviceMetadata.IsSetParent() {
            serviceMetadata = allServicesMap[serviceMetadata.GetParent()]
        } else {
            serviceMetadata = nil
        }
    }

    return metadata.NewThriftMetadata().
        SetEnums(packageThriftMetadata.GetEnums()).
        SetStructs(packageThriftMetadata.GetStructs()).
        SetExceptions(packageThriftMetadata.GetExceptions()).
        SetServices(relevantServicesMap)
}
