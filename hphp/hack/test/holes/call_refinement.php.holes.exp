[(Fun
    { fd_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
        ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
        ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
      fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([2:10-13], "\\foo");
      fd_fun =
      { f_span = [2:1-4:2]; f_readonly_this = None; f_annotation = (); 
        f_readonly_ret = None; f_tparams = []; f_ret = ((dynamic), (Some ([2:54-61], Hdynamic)));
        f_params =
        [{ param_annotation = (~T); param_type_hint = ((~T), (Some ([2:45-46], (Habstr "T")))); 
           param_pos = [2:47-51]; param_name = "$arr"; param_info = Param_required; 
           param_readonly = None; param_splat = None; param_callconv = (Pinout [2:39-44]); 
           param_named = None; param_user_attributes = []; param_visibility = None }
          ];
        f_ctxs = None; f_unsafe_ctxs = None; f_body = { fb_ast = [([3:3-16], (Return (Some ((bool), [3:10-15], False))))] }; 
        f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([2:10-13], "__SupportDynamicType"); ua_params = [] }]; 
        f_external = false; f_doc_comment = None };
      fd_internal = false; fd_module = None;
      fd_tparams =
      [{ tp_variance = Invariant; tp_name = ([2:14-15], "T");
         tp_constraints =
         [(Constraint_as, ([2:14-15], (Happly (([2:14-15], "\\HH\\supportdyn"), [([2:14-15], Hmixed)]))));
           (Constraint_as, ([2:19-33], (Hoption ([2:20-33], (Happly (([2:20-29], "\\HH\\Container"), [([2:30-32], (Habstr "Tv"))]))))))];
         tp_reified = Erased; tp_user_attributes = [] };
        { tp_variance = Invariant; tp_name = ([2:35-37], "Tv"); tp_constraints = [(Constraint_as, ([2:35-37], (Happly (([2:35-37], "\\HH\\supportdyn"), [([2:35-37], Hmixed)]))))];
          tp_reified = Erased; tp_user_attributes = [] }
        ];
      fd_where_constraints = []; fd_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([5:10-13], "\\bar");
       fd_fun =
       { f_span = [5:1-7:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((dynamic), (Some ([5:17-24], Hdynamic))); 
         f_params = []; f_ctxs = None; f_unsafe_ctxs = None; f_body = { fb_ast = [([6:3-16], (Return (Some ((vec<nothing>), [6:10-15], (ValCollection (([6:10-13], Vec), None, []))))))] };
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([5:10-13], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
       fd_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([8:10-13], "\\qux");
       fd_fun =
       { f_span = [8:1-10:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((~Tv), (Some ([8:48-50], (Habstr "Tv"))));
         f_params =
         [{ param_annotation = (T); param_type_hint = ((T), (Some ([8:39-40], (Habstr "T")))); 
            param_pos = [8:41-45]; param_name = "$arr"; param_info = Param_required; 
            param_readonly = None; param_splat = None; param_callconv = Pnormal; 
            param_named = None; param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([9:3-26],
             (Throw
                ((exact Exception), [9:9-25],
                 (New (((exact Exception), [9:13-23], (CI ([9:13-23], "\\Exception"))), 
                    [], [], None, ((function(optional string $message, optional int $code, optional ?Exception $previous)[]: void)))))))
             ]
           };
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([8:10-13], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None;
       fd_tparams =
       [{ tp_variance = Invariant; tp_name = ([8:14-15], "T");
          tp_constraints =
          [(Constraint_as, ([8:14-15], (Happly (([8:14-15], "\\HH\\supportdyn"), [([8:14-15], Hmixed)]))));
            (Constraint_as, ([8:19-33], (Hoption ([8:20-33], (Happly (([8:20-29], "\\HH\\Container"), [([8:30-32], (Habstr "Tv"))]))))))];
          tp_reified = Erased; tp_user_attributes = [] };
         { tp_variance = Invariant; tp_name = ([8:35-37], "Tv"); tp_constraints = [(Constraint_as, ([8:35-37], (Happly (([8:35-37], "\\HH\\supportdyn"), [([8:35-37], Hmixed)]))))];
           tp_reified = Erased; tp_user_attributes = [] }
         ];
       fd_where_constraints = []; fd_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([12:10-25], "\\call_refinement");
       fd_fun =
       { f_span = [12:1-19:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((void), (Some ([12:29-33], (Hprim Tvoid)))); 
         f_params = []; f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([13:3-16],
             (Expr
                ((dynamic), [13:3-15],
                 (Assign (((dynamic), [13:3-7], (Lvar ([13:3-7], $arr))), None,
                    ((dynamic), [13:10-15], (Call { func = (((function(): dynamic)), [13:10-13], (Id ([13:10-13], "\\bar"))); targs = []; args = []; unpacked_arg = None })))))));
             ([15:3-17:4],
              (If (
                 ((dynamic), [15:7-22],
                  (Call
                     { func = (((function<T as ?Container<nothing>, Tv>(inout ~nothing $arr): dynamic)), [15:7-10], (Id ([15:7-10], "\\foo")));
                       targs = [((nothing), ([15:7-10], Hwildcard)); ((nothing), ([15:7-10], Hwildcard))]; 
                       args = [(Ainout ([15:11-16], ((dynamic), [15:17-21], (Lvar ([15:17-21], $arr)))))]; 
                       unpacked_arg = None })),
                 [([16:5-12], (Return None))], [([Pos.none], Noop)])));
             ([18:3-25],
              (Expr
                 ((~nothing), [18:3-24],
                  (Assign (((~nothing), [18:3-12], (Lvar ([18:3-12], $whatever))), None,
                     ((~nothing), [18:15-24],
                      (Call
                         { func = (((function<T as ?Container<nothing>, Tv>(nothing $arr): ~nothing)), [18:15-18], (Id ([18:15-18], "\\qux")));
                           targs = [((nothing), ([18:15-18], Hwildcard)); ((nothing), ([18:15-18], Hwildcard))]; 
                           args = [(Anormal ((~nothing), [18:19-23], (Lvar ([18:19-23], $arr))))]; 
                           unpacked_arg = None }))
                     )))))
             ]
           };
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([12:10-25], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
       fd_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([2:10-13], "\\foo");
       fd_fun =
       { f_span = [2:1-4:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((dynamic), (Some ([2:54-61], Hdynamic)));
         f_params =
         [{ param_annotation = (dynamic); param_type_hint = ((dynamic), (Some ([2:45-46], (Habstr "T")))); 
            param_pos = [2:47-51]; param_name = "$arr"; param_info = Param_required; 
            param_readonly = None; param_splat = None; param_callconv = (Pinout [2:39-44]); 
            param_named = None; param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None; f_body = { fb_ast = [([3:3-16], (Return (Some ((bool), [3:10-15], False))))] }; 
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([2:10-13], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None;
       fd_tparams =
       [{ tp_variance = Invariant; tp_name = ([2:14-15], "T");
          tp_constraints =
          [(Constraint_as, ([2:14-15], (Happly (([2:14-15], "\\HH\\supportdyn"), [([2:14-15], Hmixed)]))));
            (Constraint_as, ([2:19-33], (Hoption ([2:20-33], (Happly (([2:20-29], "\\HH\\Container"), [([2:30-32], (Habstr "Tv"))]))))))];
          tp_reified = Erased; tp_user_attributes = [] };
         { tp_variance = Invariant; tp_name = ([2:35-37], "Tv"); tp_constraints = [(Constraint_as, ([2:35-37], (Happly (([2:35-37], "\\HH\\supportdyn"), [([2:35-37], Hmixed)]))))];
           tp_reified = Erased; tp_user_attributes = [] }
         ];
       fd_where_constraints = []; fd_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([8:10-13], "\\qux");
       fd_fun =
       { f_span = [8:1-10:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((dynamic), (Some ([8:48-50], (Habstr "Tv"))));
         f_params =
         [{ param_annotation = (dynamic); param_type_hint = ((dynamic), (Some ([8:39-40], (Habstr "T")))); 
            param_pos = [8:41-45]; param_name = "$arr"; param_info = Param_required; 
            param_readonly = None; param_splat = None; param_callconv = Pnormal; 
            param_named = None; param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([9:3-26],
             (Throw
                ((exact Exception), [9:9-25],
                 (New (((exact Exception), [9:13-23], (CI ([9:13-23], "\\Exception"))), 
                    [], [], None, ((function(optional string $message, optional int $code, optional ?Exception $previous)[]: void)))))))
             ]
           };
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([8:10-13], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None;
       fd_tparams =
       [{ tp_variance = Invariant; tp_name = ([8:14-15], "T");
          tp_constraints =
          [(Constraint_as, ([8:14-15], (Happly (([8:14-15], "\\HH\\supportdyn"), [([8:14-15], Hmixed)]))));
            (Constraint_as, ([8:19-33], (Hoption ([8:20-33], (Happly (([8:20-29], "\\HH\\Container"), [([8:30-32], (Habstr "Tv"))]))))))];
          tp_reified = Erased; tp_user_attributes = [] };
         { tp_variance = Invariant; tp_name = ([8:35-37], "Tv"); tp_constraints = [(Constraint_as, ([8:35-37], (Happly (([8:35-37], "\\HH\\supportdyn"), [([8:35-37], Hmixed)]))))];
           tp_reified = Erased; tp_user_attributes = [] }
         ];
       fd_where_constraints = []; fd_package = None })