#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#

from __future__ import annotations
import builtins


import typing as _typing
import types as _py_types

import apache.thrift.metadata.thrift_types as _fbthrift_metadata
import folly.iobuf as _fbthrift_iobuf
from thrift.python.client import (
    AsyncClient as _fbthrift_python_AsyncClient,
    SyncClient as _fbthrift_python_SyncClient,
    Client as _fbthrift_python_Client,
)
from thrift.python.client.omni_client import InteractionMethodPosition as _fbthrift_InteractionMethodPosition, FunctionQualifier as _fbthrift_FunctionQualifier
from thrift.python.common import RpcOptions
import thrift.python.mutable_containers as _fbthrift_python_mutable_containers
import thrift.python.mutable_exceptions as _fbthrift_python_mutable_exceptions
import thrift.python.mutable_types as _fbthrift_python_mutable_types
import thrift.python.exceptions as _fbthrift_python_exceptions
import thrift.python.types as _fbthrift_python_types
import test.fixtures.basic_structured_annotations.module.thrift_mutable_types as _fbthrift__test__fixtures__basic_structured_annotations__module__thrift_mutable_types
import test.fixtures.basic_structured_annotations.module.thrift_metadata as _fbthrift__test__fixtures__basic_structured_annotations__module__thrift_metadata
import included.thrift_mutable_types as _fbthrift__included__thrift_mutable_types
import namespaced.thrift_mutable_types as _fbthrift__namespaced__thrift_mutable_types

class MyService(_fbthrift_python_Client["MyService.Async", "MyService.Sync"]):
    annotations = _py_types.MappingProxyType({
    })
    @staticmethod
    def __get_thrift_name__() -> str:
        return "module.MyService"
    
    @staticmethod
    def __get_thrift_uri__() -> _typing.Optional[str]:
        return "test.dev/fixtures/basic_structured_annotations/MyService"
    
    @staticmethod
    def __get_thrift_unstructured_annotations_DEPRECATED__() -> _typing.Mapping[str, str]:
        return {
        }
    
    @staticmethod
    def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
        return _fbthrift__test__fixtures__basic_structured_annotations__module__thrift_metadata.gen_metadata_service_MyService()
    
    class Async(_fbthrift_python_AsyncClient):
        @staticmethod
        def __get_thrift_name__() -> str:
            return "module.MyService"
    
        @staticmethod
        def __get_thrift_uri__() -> _typing.Optional[str]:
            return "test.dev/fixtures/basic_structured_annotations/MyService"
    
        @staticmethod
        def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
            return _fbthrift__test__fixtures__basic_structured_annotations__module__thrift_metadata.gen_metadata_service_MyService()
    
        async def first(
            self,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.str:
            _fbthrift_resp = await self._send_request(
                "MyService",
                "first",
                _fbthrift__test__fixtures__basic_structured_annotations__module__thrift_mutable_types._fbthrift_MyService_first_args(),
                _fbthrift__test__fixtures__basic_structured_annotations__module__thrift_mutable_types._fbthrift_MyService_first_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="test.dev/fixtures/basic_structured_annotations/MyService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def second(
            self,
            count: builtins.int,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.bool:
            _fbthrift_resp = await self._send_request(
                "MyService",
                "second",
                _fbthrift__test__fixtures__basic_structured_annotations__module__thrift_mutable_types._fbthrift_MyService_second_args(
                    count=count,),
                _fbthrift__test__fixtures__basic_structured_annotations__module__thrift_mutable_types._fbthrift_MyService_second_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="test.dev/fixtures/basic_structured_annotations/MyService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
    
    # pyre-ignore[4]: Missing annotation.
    first = Async.first
    # pyre-ignore[4]: Missing annotation.
    second = Async.second
    
    class Sync(_fbthrift_python_SyncClient):
        @staticmethod
        def __get_thrift_name__() -> str:
            return "module.MyService"
    
        @staticmethod
        def __get_thrift_uri__() -> _typing.Optional[str]:
            return "test.dev/fixtures/basic_structured_annotations/MyService"
    
        @staticmethod
        def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
            return _fbthrift__test__fixtures__basic_structured_annotations__module__thrift_metadata.gen_metadata_service_MyService()
    
        def first(
            self,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.str:
            _fbthrift_resp = self._send_request(
                "MyService",
                "first",
                _fbthrift__test__fixtures__basic_structured_annotations__module__thrift_mutable_types._fbthrift_MyService_first_args(),
                _fbthrift__test__fixtures__basic_structured_annotations__module__thrift_mutable_types._fbthrift_MyService_first_result,
                uri_or_name="test.dev/fixtures/basic_structured_annotations/MyService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def second(
            self,
            count: builtins.int,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.bool:
            _fbthrift_resp = self._send_request(
                "MyService",
                "second",
                _fbthrift__test__fixtures__basic_structured_annotations__module__thrift_mutable_types._fbthrift_MyService_second_args(
                    count=count,),
                _fbthrift__test__fixtures__basic_structured_annotations__module__thrift_mutable_types._fbthrift_MyService_second_result,
                uri_or_name="test.dev/fixtures/basic_structured_annotations/MyService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )

