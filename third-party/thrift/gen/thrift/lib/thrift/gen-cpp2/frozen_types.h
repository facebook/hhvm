/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>



// BEGIN declare_enums

// END declare_enums
// BEGIN struct_indirection

// END struct_indirection
// BEGIN forward_declare
namespace apache { namespace thrift { namespace frozen { namespace schema {
class Field;
class Layout;
class Schema;
}}}} // apache::thrift::frozen::schema
// END forward_declare
// BEGIN typedefs

// END typedefs
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace apache { namespace thrift { namespace frozen { namespace schema {
class Field final : private apache::thrift::detail::st::ComparisonOperators<Field> {
 public:

  Field() :
      layoutId(0),
      offset(static_cast<int16_t>(0)) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Field(apache::thrift::FragileConstructor, int16_t layoutId__arg, int16_t offset__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    layoutId = arg.extract();
    __isset.layoutId = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    offset = arg.extract();
    __isset.offset = true;
  }

  Field(Field&&) = default;

  Field(const Field&) = default;

  Field& operator=(Field&&) = default;

  Field& operator=(const Field&) = default;
  void __clear();
  int16_t layoutId;
  int16_t offset;

  struct __isset {
    bool layoutId;
    bool offset;
  } __isset = {};
  bool operator==(const Field& rhs) const;
  bool operator<(const Field& rhs) const;

  int16_t get_layoutId() const {
    return layoutId;
  }

  int16_t& set_layoutId(int16_t layoutId_) {
    layoutId = layoutId_;
    __isset.layoutId = true;
    return layoutId;
  }

  int16_t get_offset() const {
    return offset;
  }

  int16_t& set_offset(int16_t offset_) {
    offset = offset_;
    __isset.offset = true;
    return offset;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< Field >;
};

void swap(Field& a, Field& b);

template <class Protocol_>
uint32_t Field::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // apache::thrift::frozen::schema
namespace apache { namespace thrift { namespace frozen { namespace schema {
class Layout final : private apache::thrift::detail::st::ComparisonOperators<Layout> {
 public:

  Layout() :
      size(0),
      bits(static_cast<int16_t>(0)) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Layout(apache::thrift::FragileConstructor, int32_t size__arg, int16_t bits__arg, ::std::map<int16_t,  ::apache::thrift::frozen::schema::Field> fields__arg, ::std::string typeName__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    size = arg.extract();
    __isset.size = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    bits = arg.extract();
    __isset.bits = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    fields = arg.extract();
    __isset.fields = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<4, _T> arg) {
    typeName = arg.extract();
    __isset.typeName = true;
  }

  Layout(Layout&&) = default;

  Layout(const Layout&) = default;

  Layout& operator=(Layout&&) = default;

  Layout& operator=(const Layout&) = default;
  void __clear();
  int32_t size;
  int16_t bits;
  ::std::map<int16_t,  ::apache::thrift::frozen::schema::Field> fields;
  ::std::string typeName;

  struct __isset {
    bool size;
    bool bits;
    bool fields;
    bool typeName;
  } __isset = {};
  bool operator==(const Layout& rhs) const;
  bool operator<(const Layout& rhs) const;

  int32_t get_size() const {
    return size;
  }

  int32_t& set_size(int32_t size_) {
    size = size_;
    __isset.size = true;
    return size;
  }

  int16_t get_bits() const {
    return bits;
  }

  int16_t& set_bits(int16_t bits_) {
    bits = bits_;
    __isset.bits = true;
    return bits;
  }
  const ::std::map<int16_t,  ::apache::thrift::frozen::schema::Field>& get_fields() const&;
  ::std::map<int16_t,  ::apache::thrift::frozen::schema::Field> get_fields() &&;

  template <typename T_Layout_fields_struct_setter = ::std::map<int16_t,  ::apache::thrift::frozen::schema::Field>>
  ::std::map<int16_t,  ::apache::thrift::frozen::schema::Field>& set_fields(T_Layout_fields_struct_setter&& fields_) {
    fields = std::forward<T_Layout_fields_struct_setter>(fields_);
    __isset.fields = true;
    return fields;
  }

  const ::std::string& get_typeName() const& {
    return typeName;
  }

  ::std::string get_typeName() && {
    return std::move(typeName);
  }

  template <typename T_Layout_typeName_struct_setter = ::std::string>
  ::std::string& set_typeName(T_Layout_typeName_struct_setter&& typeName_) {
    typeName = std::forward<T_Layout_typeName_struct_setter>(typeName_);
    __isset.typeName = true;
    return typeName;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< Layout >;
};

void swap(Layout& a, Layout& b);

template <class Protocol_>
uint32_t Layout::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // apache::thrift::frozen::schema
namespace apache { namespace thrift { namespace frozen { namespace schema {
class Schema final : private apache::thrift::detail::st::ComparisonOperators<Schema> {
 public:

  Schema() :
      fileVersion(0),
      relaxTypeChecks(0),
      rootLayout(static_cast<int16_t>(0)) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Schema(apache::thrift::FragileConstructor, int32_t fileVersion__arg, bool relaxTypeChecks__arg, ::std::map<int16_t,  ::apache::thrift::frozen::schema::Layout> layouts__arg, int16_t rootLayout__arg);
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<4, _T> arg) {
    fileVersion = arg.extract();
    __isset.fileVersion = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<1, _T> arg) {
    relaxTypeChecks = arg.extract();
    __isset.relaxTypeChecks = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<2, _T> arg) {
    layouts = arg.extract();
    __isset.layouts = true;
  }
  template <typename _T>
  void __set_field(::apache::thrift::detail::argument_wrapper<3, _T> arg) {
    rootLayout = arg.extract();
    __isset.rootLayout = true;
  }

  Schema(Schema&&) = default;

  Schema(const Schema&) = default;

  Schema& operator=(Schema&&) = default;

  Schema& operator=(const Schema&) = default;
  void __clear();
  int32_t fileVersion;
  bool relaxTypeChecks;
  ::std::map<int16_t,  ::apache::thrift::frozen::schema::Layout> layouts;
  int16_t rootLayout;

  struct __isset {
    bool fileVersion;
    bool relaxTypeChecks;
    bool layouts;
    bool rootLayout;
  } __isset = {};
  bool operator==(const Schema& rhs) const;
  bool operator<(const Schema& rhs) const;

  int32_t get_fileVersion() const {
    return fileVersion;
  }

  int32_t& set_fileVersion(int32_t fileVersion_) {
    fileVersion = fileVersion_;
    __isset.fileVersion = true;
    return fileVersion;
  }

  bool get_relaxTypeChecks() const {
    return relaxTypeChecks;
  }

  bool& set_relaxTypeChecks(bool relaxTypeChecks_) {
    relaxTypeChecks = relaxTypeChecks_;
    __isset.relaxTypeChecks = true;
    return relaxTypeChecks;
  }
  const ::std::map<int16_t,  ::apache::thrift::frozen::schema::Layout>& get_layouts() const&;
  ::std::map<int16_t,  ::apache::thrift::frozen::schema::Layout> get_layouts() &&;

  template <typename T_Schema_layouts_struct_setter = ::std::map<int16_t,  ::apache::thrift::frozen::schema::Layout>>
  ::std::map<int16_t,  ::apache::thrift::frozen::schema::Layout>& set_layouts(T_Schema_layouts_struct_setter&& layouts_) {
    layouts = std::forward<T_Schema_layouts_struct_setter>(layouts_);
    __isset.layouts = true;
    return layouts;
  }

  int16_t get_rootLayout() const {
    return rootLayout;
  }

  int16_t& set_rootLayout(int16_t rootLayout_) {
    rootLayout = rootLayout_;
    __isset.rootLayout = true;
    return rootLayout;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< Schema >;
};

void swap(Schema& a, Schema& b);

template <class Protocol_>
uint32_t Schema::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // apache::thrift::frozen::schema
