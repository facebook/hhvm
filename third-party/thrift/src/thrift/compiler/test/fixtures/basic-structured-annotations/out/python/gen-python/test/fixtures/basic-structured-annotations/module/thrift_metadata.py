#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#

from __future__ import annotations

import apache.thrift.metadata.thrift_types as _fbthrift_metadata

import test.fixtures.basic-structured-annotations.module.thrift_enums as _fbthrift_current_module_enums
import test.fixtures.basic-structured-annotations.module.thrift_enums


import included.thrift_enums
import included.thrift_metadata as _fbthrift__included__thrift_metadata

import namespaced.thrift_enums
import namespaced.thrift_metadata as _fbthrift__namespaced__thrift_metadata

# TODO (ffrancet): This general pattern can be optimized by using tuples and dicts
# instead of re-generating thrift structs
def _fbthrift_gen_metadata_struct_runtime_annotation(metadata_struct: _fbthrift_metadata.ThriftMetadata) -> _fbthrift_metadata.ThriftMetadata:
    qualified_name = "module.runtime_annotation"

    if qualified_name in metadata_struct.structs:
        return metadata_struct
    fields = [
    ]
    struct_dict = dict(metadata_struct.structs)
    struct_dict[qualified_name] = _fbthrift_metadata.ThriftStruct(name=qualified_name, fields=fields,
        is_union=False,
        structured_annotations=[
            _fbthrift_metadata.ThriftConstStruct(type=_fbthrift_metadata.ThriftStructType(name="thrift.RuntimeAnnotation"), fields= {  }),
        ])
    new_struct = metadata_struct(structs=struct_dict)


    return new_struct
def gen_metadata_struct_runtime_annotation() -> _fbthrift_metadata.ThriftMetadata:
    return _fbthrift_gen_metadata_struct_runtime_annotation(_fbthrift_metadata.ThriftMetadata(structs={}, enums={}, exceptions={}, services={}))

# TODO (ffrancet): This general pattern can be optimized by using tuples and dicts
# instead of re-generating thrift structs
def _fbthrift_gen_metadata_struct_structured_annotation_inline(metadata_struct: _fbthrift_metadata.ThriftMetadata) -> _fbthrift_metadata.ThriftMetadata:
    qualified_name = "module.structured_annotation_inline"

    if qualified_name in metadata_struct.structs:
        return metadata_struct
    fields = [
        _fbthrift_metadata.ThriftField(id=1, type=_fbthrift_metadata.ThriftType(t_primitive=_fbthrift_metadata.ThriftPrimitiveType.THRIFT_I64_TYPE), name="count", is_optional=False, structured_annotations=[
        ]),
        _fbthrift_metadata.ThriftField(id=2, type=_fbthrift_metadata.ThriftType(t_primitive=_fbthrift_metadata.ThriftPrimitiveType.THRIFT_STRING_TYPE), name="name", is_optional=False, structured_annotations=[
        ]),
    ]
    struct_dict = dict(metadata_struct.structs)
    struct_dict[qualified_name] = _fbthrift_metadata.ThriftStruct(name=qualified_name, fields=fields,
        is_union=False,
        structured_annotations=[
        ])
    new_struct = metadata_struct(structs=struct_dict)

    # count
        # name
    
    return new_struct
def gen_metadata_struct_structured_annotation_inline() -> _fbthrift_metadata.ThriftMetadata:
    return _fbthrift_gen_metadata_struct_structured_annotation_inline(_fbthrift_metadata.ThriftMetadata(structs={}, enums={}, exceptions={}, services={}))

# TODO (ffrancet): This general pattern can be optimized by using tuples and dicts
# instead of re-generating thrift structs
def _fbthrift_gen_metadata_struct_structured_annotation_with_default(metadata_struct: _fbthrift_metadata.ThriftMetadata) -> _fbthrift_metadata.ThriftMetadata:
    qualified_name = "module.structured_annotation_with_default"

    if qualified_name in metadata_struct.structs:
        return metadata_struct
    fields = [
        _fbthrift_metadata.ThriftField(id=1, type=_fbthrift_metadata.ThriftType(t_primitive=_fbthrift_metadata.ThriftPrimitiveType.THRIFT_STRING_TYPE), name="name", is_optional=False, structured_annotations=[
        ]),
    ]
    struct_dict = dict(metadata_struct.structs)
    struct_dict[qualified_name] = _fbthrift_metadata.ThriftStruct(name=qualified_name, fields=fields,
        is_union=False,
        structured_annotations=[
        ])
    new_struct = metadata_struct(structs=struct_dict)

    # name
    
    return new_struct
def gen_metadata_struct_structured_annotation_with_default() -> _fbthrift_metadata.ThriftMetadata:
    return _fbthrift_gen_metadata_struct_structured_annotation_with_default(_fbthrift_metadata.ThriftMetadata(structs={}, enums={}, exceptions={}, services={}))

# TODO (ffrancet): This general pattern can be optimized by using tuples and dicts
# instead of re-generating thrift structs
def _fbthrift_gen_metadata_struct_structured_annotation_recursive(metadata_struct: _fbthrift_metadata.ThriftMetadata) -> _fbthrift_metadata.ThriftMetadata:
    qualified_name = "module.structured_annotation_recursive"

    if qualified_name in metadata_struct.structs:
        return metadata_struct
    fields = [
        _fbthrift_metadata.ThriftField(id=1, type=_fbthrift_metadata.ThriftType(t_primitive=_fbthrift_metadata.ThriftPrimitiveType.THRIFT_STRING_TYPE), name="name", is_optional=False, structured_annotations=[
        ]),
        _fbthrift_metadata.ThriftField(id=2, type=_fbthrift_metadata.ThriftType(t_struct=_fbthrift_metadata.ThriftStructType(name="module.structured_annotation_recursive")), name="recurse", is_optional=True, structured_annotations=[
            _fbthrift_metadata.ThriftConstStruct(type=_fbthrift_metadata.ThriftStructType(name="cpp.Ref"), fields= { "type": _fbthrift_metadata.ThriftConstValue(cv_integer=0),  }),
        ]),
        _fbthrift_metadata.ThriftField(id=3, type=_fbthrift_metadata.ThriftType(t_struct=_fbthrift_metadata.ThriftStructType(name="module.structured_annotation_forward")), name="forward", is_optional=False, structured_annotations=[
        ]),
    ]
    struct_dict = dict(metadata_struct.structs)
    struct_dict[qualified_name] = _fbthrift_metadata.ThriftStruct(name=qualified_name, fields=fields,
        is_union=False,
        structured_annotations=[
        ])
    new_struct = metadata_struct(structs=struct_dict)

    # name
        # recurse
    new_struct = _fbthrift_gen_metadata_struct_structured_annotation_recursive(new_struct)    # forward
    new_struct = _fbthrift_gen_metadata_struct_structured_annotation_forward(new_struct)
    return new_struct
def gen_metadata_struct_structured_annotation_recursive() -> _fbthrift_metadata.ThriftMetadata:
    return _fbthrift_gen_metadata_struct_structured_annotation_recursive(_fbthrift_metadata.ThriftMetadata(structs={}, enums={}, exceptions={}, services={}))

# TODO (ffrancet): This general pattern can be optimized by using tuples and dicts
# instead of re-generating thrift structs
def _fbthrift_gen_metadata_struct_structured_annotation_forward(metadata_struct: _fbthrift_metadata.ThriftMetadata) -> _fbthrift_metadata.ThriftMetadata:
    qualified_name = "module.structured_annotation_forward"

    if qualified_name in metadata_struct.structs:
        return metadata_struct
    fields = [
        _fbthrift_metadata.ThriftField(id=1, type=_fbthrift_metadata.ThriftType(t_primitive=_fbthrift_metadata.ThriftPrimitiveType.THRIFT_I64_TYPE), name="count", is_optional=False, structured_annotations=[
        ]),
    ]
    struct_dict = dict(metadata_struct.structs)
    struct_dict[qualified_name] = _fbthrift_metadata.ThriftStruct(name=qualified_name, fields=fields,
        is_union=False,
        structured_annotations=[
        ])
    new_struct = metadata_struct(structs=struct_dict)

    # count
    
    return new_struct
def gen_metadata_struct_structured_annotation_forward() -> _fbthrift_metadata.ThriftMetadata:
    return _fbthrift_gen_metadata_struct_structured_annotation_forward(_fbthrift_metadata.ThriftMetadata(structs={}, enums={}, exceptions={}, services={}))

# TODO (ffrancet): This general pattern can be optimized by using tuples and dicts
# instead of re-generating thrift structs
def _fbthrift_gen_metadata_struct_structured_annotation_nested(metadata_struct: _fbthrift_metadata.ThriftMetadata) -> _fbthrift_metadata.ThriftMetadata:
    qualified_name = "module.structured_annotation_nested"

    if qualified_name in metadata_struct.structs:
        return metadata_struct
    fields = [
        _fbthrift_metadata.ThriftField(id=1, type=_fbthrift_metadata.ThriftType(t_primitive=_fbthrift_metadata.ThriftPrimitiveType.THRIFT_STRING_TYPE), name="name", is_optional=False, structured_annotations=[
        ]),
        _fbthrift_metadata.ThriftField(id=2, type=_fbthrift_metadata.ThriftType(t_struct=_fbthrift_metadata.ThriftStructType(name="module.structured_annotation_with_default")), name="nest", is_optional=False, structured_annotations=[
        ]),
    ]
    struct_dict = dict(metadata_struct.structs)
    struct_dict[qualified_name] = _fbthrift_metadata.ThriftStruct(name=qualified_name, fields=fields,
        is_union=False,
        structured_annotations=[
        ])
    new_struct = metadata_struct(structs=struct_dict)

    # name
        # nest
    new_struct = _fbthrift_gen_metadata_struct_structured_annotation_with_default(new_struct)
    return new_struct
def gen_metadata_struct_structured_annotation_nested() -> _fbthrift_metadata.ThriftMetadata:
    return _fbthrift_gen_metadata_struct_structured_annotation_nested(_fbthrift_metadata.ThriftMetadata(structs={}, enums={}, exceptions={}, services={}))

# TODO (ffrancet): This general pattern can be optimized by using tuples and dicts
# instead of re-generating thrift structs
def _fbthrift_gen_metadata_struct_MyStruct(metadata_struct: _fbthrift_metadata.ThriftMetadata) -> _fbthrift_metadata.ThriftMetadata:
    qualified_name = "module.MyStruct"

    if qualified_name in metadata_struct.structs:
        return metadata_struct
    fields = [
        _fbthrift_metadata.ThriftField(id=1, type=_fbthrift_metadata.ThriftType(t_primitive=_fbthrift_metadata.ThriftPrimitiveType.THRIFT_I64_TYPE), name="annotated_field", is_optional=False, structured_annotations=[
            _fbthrift_metadata.ThriftConstStruct(type=_fbthrift_metadata.ThriftStructType(name="module.structured_annotation_inline"), fields= { "count": _fbthrift_metadata.ThriftConstValue(cv_integer=1), "name": _fbthrift_metadata.ThriftConstValue(cv_string="counter"),  }),
            _fbthrift_metadata.ThriftConstStruct(type=_fbthrift_metadata.ThriftStructType(name="module.runtime_annotation"), fields= {  }),
        ]),
        _fbthrift_metadata.ThriftField(id=2, type=_fbthrift_metadata.ThriftType(t_primitive=_fbthrift_metadata.ThriftPrimitiveType.THRIFT_STRING_TYPE), name="annotated_type", is_optional=False, structured_annotations=[
        ]),
        _fbthrift_metadata.ThriftField(id=3, type=_fbthrift_metadata.ThriftType(t_primitive=_fbthrift_metadata.ThriftPrimitiveType.THRIFT_STRING_TYPE), name="annotated_recursive", is_optional=False, structured_annotations=[
            _fbthrift_metadata.ThriftConstStruct(type=_fbthrift_metadata.ThriftStructType(name="module.structured_annotation_recursive"), fields= { "name": _fbthrift_metadata.ThriftConstValue(cv_string="abc"), "recurse": _fbthrift_metadata.ThriftConstValue(cv_struct=_fbthrift_metadata.ThriftConstStruct(type=_fbthrift_metadata.ThriftStructType(name="module.structured_annotation_recursive"), fields= { "name": _fbthrift_metadata.ThriftConstValue(cv_string="cba"),  })), "forward": _fbthrift_metadata.ThriftConstValue(cv_struct=_fbthrift_metadata.ThriftConstStruct(type=_fbthrift_metadata.ThriftStructType(name="module.structured_annotation_forward"), fields= { "count": _fbthrift_metadata.ThriftConstValue(cv_integer=3),  })),  }),
        ]),
        _fbthrift_metadata.ThriftField(id=4, type=_fbthrift_metadata.ThriftType(t_primitive=_fbthrift_metadata.ThriftPrimitiveType.THRIFT_I64_TYPE), name="annotated_nested", is_optional=False, structured_annotations=[
            _fbthrift_metadata.ThriftConstStruct(type=_fbthrift_metadata.ThriftStructType(name="module.structured_annotation_nested"), fields= { "name": _fbthrift_metadata.ThriftConstValue(cv_string="nesty"),  }),
        ]),
    ]
    struct_dict = dict(metadata_struct.structs)
    struct_dict[qualified_name] = _fbthrift_metadata.ThriftStruct(name=qualified_name, fields=fields,
        is_union=False,
        structured_annotations=[
            _fbthrift_metadata.ThriftConstStruct(type=_fbthrift_metadata.ThriftStructType(name="module.structured_annotation_inline"), fields= { "count": _fbthrift_metadata.ThriftConstValue(cv_integer=2),  }),
            _fbthrift_metadata.ThriftConstStruct(type=_fbthrift_metadata.ThriftStructType(name="module.structured_annotation_with_default"), fields= {  }),
            _fbthrift_metadata.ThriftConstStruct(type=_fbthrift_metadata.ThriftStructType(name="module.structured_annotation_nested"), fields= { "name": _fbthrift_metadata.ThriftConstValue(cv_string="nesty2"), "nest": _fbthrift_metadata.ThriftConstValue(cv_struct=_fbthrift_metadata.ThriftConstStruct(type=_fbthrift_metadata.ThriftStructType(name="module.structured_annotation_with_default"), fields= { "name": _fbthrift_metadata.ThriftConstValue(cv_string="dcdbdcdadcdbdcd"),  })),  }),
            _fbthrift_metadata.ThriftConstStruct(type=_fbthrift_metadata.ThriftStructType(name="included.structured_annotation_included"), fields= { "name": _fbthrift_metadata.ThriftConstValue(cv_string="aba"),  }),
            _fbthrift_metadata.ThriftConstStruct(type=_fbthrift_metadata.ThriftStructType(name="namespaced.structured_annotation_with_namespace"), fields= { "name": _fbthrift_metadata.ThriftConstValue(cv_string="bac"),  }),
            _fbthrift_metadata.ThriftConstStruct(type=_fbthrift_metadata.ThriftStructType(name="module.runtime_annotation"), fields= {  }),
        ])
    new_struct = metadata_struct(structs=struct_dict)

    # annotated_field
        # annotated_type
        # annotated_recursive
        # annotated_nested
    
    return new_struct
def gen_metadata_struct_MyStruct() -> _fbthrift_metadata.ThriftMetadata:
    return _fbthrift_gen_metadata_struct_MyStruct(_fbthrift_metadata.ThriftMetadata(structs={}, enums={}, exceptions={}, services={}))

# TODO (ffrancet): This general pattern can be optimized by using tuples and dicts
# instead of re-generating thrift structs
def _fbthrift_gen_metadata_exception_MyException(metadata_struct: _fbthrift_metadata.ThriftMetadata) -> _fbthrift_metadata.ThriftMetadata:
    qualified_name = "module.MyException"

    if qualified_name in metadata_struct.exceptions:
        return metadata_struct
    fields = [
        _fbthrift_metadata.ThriftField(id=1, type=_fbthrift_metadata.ThriftType(t_primitive=_fbthrift_metadata.ThriftPrimitiveType.THRIFT_STRING_TYPE), name="context", is_optional=False, structured_annotations=[
            _fbthrift_metadata.ThriftConstStruct(type=_fbthrift_metadata.ThriftStructType(name="module.structured_annotation_with_default"), fields= {  }),
        ]),
    ]
    struct_dict = dict(metadata_struct.exceptions)
    struct_dict[qualified_name] = _fbthrift_metadata.ThriftException(name=qualified_name, fields=fields,
        structured_annotations=[
            _fbthrift_metadata.ThriftConstStruct(type=_fbthrift_metadata.ThriftStructType(name="module.structured_annotation_nested"), fields= { "name": _fbthrift_metadata.ThriftConstValue(cv_string="nesty"),  }),
        ])
    new_struct = metadata_struct(exceptions=struct_dict)

    # context
    
    return new_struct
def gen_metadata_exception_MyException() -> _fbthrift_metadata.ThriftMetadata:
    return _fbthrift_gen_metadata_exception_MyException(_fbthrift_metadata.ThriftMetadata(structs={}, enums={}, exceptions={}, services={}))

# TODO (ffrancet): This general pattern can be optimized by using tuples and dicts
# instead of re-generating thrift structs
def _fbthrift_gen_metadata_struct_MyUnion(metadata_struct: _fbthrift_metadata.ThriftMetadata) -> _fbthrift_metadata.ThriftMetadata:
    qualified_name = "module.MyUnion"

    if qualified_name in metadata_struct.structs:
        return metadata_struct
    fields = [
        _fbthrift_metadata.ThriftField(id=1, type=_fbthrift_metadata.ThriftType(t_primitive=_fbthrift_metadata.ThriftPrimitiveType.THRIFT_STRING_TYPE), name="first", is_optional=False, structured_annotations=[
            _fbthrift_metadata.ThriftConstStruct(type=_fbthrift_metadata.ThriftStructType(name="module.structured_annotation_with_default"), fields= {  }),
        ]),
        _fbthrift_metadata.ThriftField(id=2, type=_fbthrift_metadata.ThriftType(t_primitive=_fbthrift_metadata.ThriftPrimitiveType.THRIFT_I64_TYPE), name="second", is_optional=False, structured_annotations=[
            _fbthrift_metadata.ThriftConstStruct(type=_fbthrift_metadata.ThriftStructType(name="module.structured_annotation_with_default"), fields= { "name": _fbthrift_metadata.ThriftConstValue(cv_string="aba"),  }),
        ]),
    ]
    struct_dict = dict(metadata_struct.structs)
    struct_dict[qualified_name] = _fbthrift_metadata.ThriftStruct(name=qualified_name, fields=fields,
        is_union=True,
        structured_annotations=[
            _fbthrift_metadata.ThriftConstStruct(type=_fbthrift_metadata.ThriftStructType(name="module.structured_annotation_nested"), fields= { "name": _fbthrift_metadata.ThriftConstValue(cv_string="nesty"), "nest": _fbthrift_metadata.ThriftConstValue(cv_struct=_fbthrift_metadata.ThriftConstStruct(type=_fbthrift_metadata.ThriftStructType(name="module.structured_annotation_with_default"), fields= {  })),  }),
        ])
    new_struct = metadata_struct(structs=struct_dict)

    # first
        # second
    
    return new_struct
def gen_metadata_struct_MyUnion() -> _fbthrift_metadata.ThriftMetadata:
    return _fbthrift_gen_metadata_struct_MyUnion(_fbthrift_metadata.ThriftMetadata(structs={}, enums={}, exceptions={}, services={}))


def gen_metadata_service_MyService() -> _fbthrift_metadata.ThriftMetadata:
    return _fbthrift_gen_metadata_service_MyService(_fbthrift_metadata.ThriftMetadata(structs={}, enums={}, exceptions={}, services={}))

def _fbthrift_gen_metadata_service_MyService(metadata_struct: _fbthrift_metadata.ThriftMetadata) -> _fbthrift_metadata.ThriftMetadata:
    qualified_name = "module.MyService"
    
    if qualified_name in metadata_struct.services:
        return metadata_struct
    
    functions = [
        _fbthrift_metadata.ThriftFunction(name="first", return_type=_fbthrift_metadata.ThriftType(t_primitive=_fbthrift_metadata.ThriftPrimitiveType.THRIFT_STRING_TYPE), arguments=[
        ], exceptions = [
        ], is_oneway=False, structured_annotations=[
            _fbthrift_metadata.ThriftConstStruct(type=_fbthrift_metadata.ThriftStructType(name="module.structured_annotation_with_default"), fields= {  }),
        ]),
        _fbthrift_metadata.ThriftFunction(name="second", return_type=_fbthrift_metadata.ThriftType(t_primitive=_fbthrift_metadata.ThriftPrimitiveType.THRIFT_BOOL_TYPE), arguments=[
            _fbthrift_metadata.ThriftField(id=1, type=_fbthrift_metadata.ThriftType(t_primitive=_fbthrift_metadata.ThriftPrimitiveType.THRIFT_I64_TYPE), name="count", is_optional=False, structured_annotations=[
                _fbthrift_metadata.ThriftConstStruct(type=_fbthrift_metadata.ThriftStructType(name="module.structured_annotation_inline"), fields= { "count": _fbthrift_metadata.ThriftConstValue(cv_integer=4),  }),
            ]),
        ], exceptions = [
        ], is_oneway=False, structured_annotations=[
            _fbthrift_metadata.ThriftConstStruct(type=_fbthrift_metadata.ThriftStructType(name="module.structured_annotation_inline"), fields= { "count": _fbthrift_metadata.ThriftConstValue(cv_integer=2),  }),
        ]),
    ]
    
    service_dict = dict(metadata_struct.services)
    service_dict[qualified_name] = _fbthrift_metadata.ThriftService(name=qualified_name, functions=functions,  structured_annotations=[
        _fbthrift_metadata.ThriftConstStruct(type=_fbthrift_metadata.ThriftStructType(name="module.structured_annotation_inline"), fields= { "count": _fbthrift_metadata.ThriftConstValue(cv_integer=3),  }),
    ])
    new_struct = metadata_struct(services=service_dict)
    
    
    
     # return value
    
    
     # count
    
    
     # return value
    
    
    return new_struct

def _fbthrift_metadata_service_response_MyService() -> _fbthrift_metadata.ThriftServiceMetadataResponse:
    metadata = gen_metadata_service_MyService()
    context = _fbthrift_metadata.ThriftServiceContext(service_info=metadata.services["module.MyService"], module=_fbthrift_metadata.ThriftModuleContext(name="module"))
    services = [_fbthrift_metadata.ThriftServiceContextRef(module=_fbthrift_metadata.ThriftModuleContext(name=name.split('.')[0]), service_name=name) for name in metadata.services]
    return _fbthrift_metadata.ThriftServiceMetadataResponse(metadata=metadata,context=context,services=services)



def getThriftModuleMetadata() -> _fbthrift_metadata.ThriftMetadata:
    meta = _fbthrift_metadata.ThriftMetadata(structs={}, enums={}, exceptions={}, services={})
    meta = _fbthrift_current_module_enums._fbthrift_gen_metadata_enum_MyEnum(meta)
    meta = _fbthrift_gen_metadata_struct_runtime_annotation(meta)
    meta = _fbthrift_gen_metadata_struct_structured_annotation_inline(meta)
    meta = _fbthrift_gen_metadata_struct_structured_annotation_with_default(meta)
    meta = _fbthrift_gen_metadata_struct_structured_annotation_recursive(meta)
    meta = _fbthrift_gen_metadata_struct_structured_annotation_forward(meta)
    meta = _fbthrift_gen_metadata_struct_structured_annotation_nested(meta)
    meta = _fbthrift_gen_metadata_struct_MyStruct(meta)
    meta = _fbthrift_gen_metadata_exception_MyException(meta)
    meta = _fbthrift_gen_metadata_struct_MyUnion(meta)
    meta = _fbthrift_gen_metadata_service_MyService(meta)
    return meta
