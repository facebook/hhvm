// Autogenerated by Thrift for thrift/compiler/test/fixtures/go-typedef/src/module1.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package module1

import (
    "maps"

    module0 "module0"
    module2 "module2"
    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
    metadata "github.com/facebook/fbthrift/thrift/lib/thrift/metadata"
)

// (needed to ensure safety because of naive import list construction)
var _ = module0.GoUnusedProtection__
var _ = module2.GoUnusedProtection__
var _ = thrift.VOID
var _ = maps.Copy[map[int]int, map[int]int]
var _ = metadata.GoUnusedProtection__

// Premade Thrift types
var (
    premadeThriftType_string =
        &metadata.ThriftType{
            TPrimitive:
                thrift.Pointerize(metadata.ThriftPrimitiveType_THRIFT_STRING_TYPE),
        }
    premadeThriftType_module1_Plate =
        &metadata.ThriftType{
            TTypedef:
                &metadata.ThriftTypedefType{
                    Name:           "module1.Plate",
                    UnderlyingType: premadeThriftType_string,
                },
        }
    premadeThriftType_i32 =
        &metadata.ThriftType{
            TPrimitive:
                thrift.Pointerize(metadata.ThriftPrimitiveType_THRIFT_I32_TYPE),
        }
    premadeThriftType_module1_Year =
        &metadata.ThriftType{
            TTypedef:
                &metadata.ThriftTypedefType{
                    Name:           "module1.Year",
                    UnderlyingType: premadeThriftType_i32,
                },
        }
    premadeThriftType_list_string =
        &metadata.ThriftType{
            TList:
                &metadata.ThriftListType{
                    ValueType: premadeThriftType_string,
                },
        }
    premadeThriftType_module1_Drivers =
        &metadata.ThriftType{
            TTypedef:
                &metadata.ThriftTypedefType{
                    Name:           "module1.Drivers",
                    UnderlyingType: premadeThriftType_list_string,
                },
        }
    premadeThriftType_module1_Accessory =
        &metadata.ThriftType{
            TTypedef:
                &metadata.ThriftTypedefType{
                    Name:           "module1.Accessory",
                    UnderlyingType: module0.GetMetadataThriftType("module0.Accessory"),
                },
        }
    premadeThriftType_list_module1_Accessory =
        &metadata.ThriftType{
            TList:
                &metadata.ThriftListType{
                    ValueType: premadeThriftType_module1_Accessory,
                },
        }
    premadeThriftType_module1_PartName =
        &metadata.ThriftType{
            TTypedef:
                &metadata.ThriftTypedefType{
                    Name:           "module1.PartName",
                    UnderlyingType: module0.GetMetadataThriftType("module0.PartName"),
                    StructuredAnnotations: []*metadata.ThriftConstStruct{
                        &metadata.ThriftConstStruct{
                            Type: &metadata.ThriftStructType{
                                Name: "go.Name",
                            },
                            Fields: map[string]*metadata.ThriftConstValue{
                                "name":
                                    &metadata.ThriftConstValue{
                                        CvString: thrift.Pointerize("CarPartName"),
                                    },
                            },
                        },
                    },
                },
        }
    premadeThriftType_map_i32_module1_PartName =
        &metadata.ThriftType{
            TMap:
                &metadata.ThriftMapType{
                    KeyType:   premadeThriftType_i32,
                    ValueType: premadeThriftType_module1_PartName,
                },
        }
    premadeThriftType_module1_Automobile =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "module1.Automobile",
                },
        }
    premadeThriftType_i64 =
        &metadata.ThriftType{
            TPrimitive:
                thrift.Pointerize(metadata.ThriftPrimitiveType_THRIFT_I64_TYPE),
        }
    premadeThriftType_module1_MapKey =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "module1.MapKey",
                },
        }
    premadeThriftType_map_module1_MapKey_string =
        &metadata.ThriftType{
            TMap:
                &metadata.ThriftMapType{
                    KeyType:   premadeThriftType_module1_MapKey,
                    ValueType: premadeThriftType_string,
                },
        }
    premadeThriftType_module1_MapContainer =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "module1.MapContainer",
                },
        }
    premadeThriftType_module1_Car =
        &metadata.ThriftType{
            TTypedef:
                &metadata.ThriftTypedefType{
                    Name:           "module1.Car",
                    UnderlyingType: premadeThriftType_module1_Automobile,
                },
        }
    premadeThriftType_module1_Pair =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "module1.Pair",
                },
        }
    premadeThriftType_list_module1_Automobile =
        &metadata.ThriftType{
            TList:
                &metadata.ThriftListType{
                    ValueType: premadeThriftType_module1_Automobile,
                },
        }
    premadeThriftType_list_module1_Car =
        &metadata.ThriftType{
            TList:
                &metadata.ThriftListType{
                    ValueType: premadeThriftType_module1_Car,
                },
        }
    premadeThriftType_module1_Collection =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "module1.Collection",
                },
        }
    premadeThriftType_module1_State =
        &metadata.ThriftType{
            TTypedef:
                &metadata.ThriftTypedefType{
                    Name:           "module1.State",
                    UnderlyingType: premadeThriftType_string,
                },
        }
    premadeThriftType_module1_Enum =
        &metadata.ThriftType{
            TTypedef:
                &metadata.ThriftTypedefType{
                    Name:           "module1.Enum",
                    UnderlyingType: module2.GetMetadataThriftType("module2.Enum"),
                },
        }
)

// Premade struct metadatas
var (
    premadeStructMetadata_Automobile =
        &metadata.ThriftStruct{
            Name:    "module1.Automobile",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
                &metadata.ThriftField{
                    Id:         1,
                    Name:       "plate",
                    IsOptional: false,
                    Type:       premadeThriftType_module1_Plate,
                },
                &metadata.ThriftField{
                    Id:         2,
                    Name:       "previous_plate",
                    IsOptional: true,
                    Type:       premadeThriftType_module1_Plate,
                },
                &metadata.ThriftField{
                    Id:         3,
                    Name:       "first_plate",
                    IsOptional: true,
                    Type:       premadeThriftType_module1_Plate,
                },
                &metadata.ThriftField{
                    Id:         4,
                    Name:       "year",
                    IsOptional: false,
                    Type:       premadeThriftType_module1_Year,
                },
                &metadata.ThriftField{
                    Id:         5,
                    Name:       "drivers",
                    IsOptional: false,
                    Type:       premadeThriftType_module1_Drivers,
                },
                &metadata.ThriftField{
                    Id:         6,
                    Name:       "Accessories",
                    IsOptional: false,
                    Type:       premadeThriftType_list_module1_Accessory,
                },
                &metadata.ThriftField{
                    Id:         7,
                    Name:       "PartNames",
                    IsOptional: false,
                    Type:       premadeThriftType_map_i32_module1_PartName,
                },
            },
        }
    premadeStructMetadata_MapKey =
        &metadata.ThriftStruct{
            Name:    "module1.MapKey",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
                &metadata.ThriftField{
                    Id:         1,
                    Name:       "num",
                    IsOptional: false,
                    Type:       premadeThriftType_i64,
                },
                &metadata.ThriftField{
                    Id:         2,
                    Name:       "strval",
                    IsOptional: false,
                    Type:       premadeThriftType_string,
                },
            },
        }
    premadeStructMetadata_MapContainer =
        &metadata.ThriftStruct{
            Name:    "module1.MapContainer",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
                &metadata.ThriftField{
                    Id:         1,
                    Name:       "mapval",
                    IsOptional: false,
                    Type:       premadeThriftType_map_module1_MapKey_string,
                },
            },
        }
    premadeStructMetadata_Pair =
        &metadata.ThriftStruct{
            Name:    "module1.Pair",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
                &metadata.ThriftField{
                    Id:         1,
                    Name:       "automobile",
                    IsOptional: false,
                    Type:       premadeThriftType_module1_Automobile,
                },
                &metadata.ThriftField{
                    Id:         2,
                    Name:       "car",
                    IsOptional: false,
                    Type:       premadeThriftType_module1_Car,
                },
            },
        }
    premadeStructMetadata_Collection =
        &metadata.ThriftStruct{
            Name:    "module1.Collection",
            IsUnion: false,
            Fields:  []*metadata.ThriftField{
                &metadata.ThriftField{
                    Id:         1,
                    Name:       "automobiles",
                    IsOptional: false,
                    Type:       premadeThriftType_list_module1_Automobile,
                },
                &metadata.ThriftField{
                    Id:         2,
                    Name:       "cars",
                    IsOptional: false,
                    Type:       premadeThriftType_list_module1_Car,
                },
            },
        }
)

var premadeThriftTypesMap = func() map[string]*metadata.ThriftType {
    fbthriftThriftTypesMap := make(map[string]*metadata.ThriftType)
    fbthriftThriftTypesMap["string"] = premadeThriftType_string
    fbthriftThriftTypesMap["module1.Plate"] = premadeThriftType_module1_Plate
    fbthriftThriftTypesMap["i32"] = premadeThriftType_i32
    fbthriftThriftTypesMap["module1.Year"] = premadeThriftType_module1_Year
    fbthriftThriftTypesMap["module1.Drivers"] = premadeThriftType_module1_Drivers
    fbthriftThriftTypesMap["module1.Accessory"] = premadeThriftType_module1_Accessory
    fbthriftThriftTypesMap["module1.PartName"] = premadeThriftType_module1_PartName
    fbthriftThriftTypesMap["module1.Automobile"] = premadeThriftType_module1_Automobile
    fbthriftThriftTypesMap["i64"] = premadeThriftType_i64
    fbthriftThriftTypesMap["module1.MapKey"] = premadeThriftType_module1_MapKey
    fbthriftThriftTypesMap["module1.MapContainer"] = premadeThriftType_module1_MapContainer
    fbthriftThriftTypesMap["module1.Car"] = premadeThriftType_module1_Car
    fbthriftThriftTypesMap["module1.Pair"] = premadeThriftType_module1_Pair
    fbthriftThriftTypesMap["module1.Collection"] = premadeThriftType_module1_Collection
    fbthriftThriftTypesMap["module1.State"] = premadeThriftType_module1_State
    fbthriftThriftTypesMap["module1.Enum"] = premadeThriftType_module1_Enum
    return fbthriftThriftTypesMap
}()

var structMetadatas = func() []*metadata.ThriftStruct {
    fbthriftResults := make([]*metadata.ThriftStruct, 0)
    fbthriftResults = append(fbthriftResults, premadeStructMetadata_Automobile)
    fbthriftResults = append(fbthriftResults, premadeStructMetadata_MapKey)
    fbthriftResults = append(fbthriftResults, premadeStructMetadata_MapContainer)
    fbthriftResults = append(fbthriftResults, premadeStructMetadata_Pair)
    fbthriftResults = append(fbthriftResults, premadeStructMetadata_Collection)
    return fbthriftResults
}()

var exceptionMetadatas = func() []*metadata.ThriftException {
    fbthriftResults := make([]*metadata.ThriftException, 0)
    return fbthriftResults
}()

var enumMetadatas = func() []*metadata.ThriftEnum {
    fbthriftResults := make([]*metadata.ThriftEnum, 0)
    return fbthriftResults
}()

var serviceMetadatas = func() []*metadata.ThriftService {
    fbthriftResults := make([]*metadata.ThriftService, 0)
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftService{
            Name:      "module1.Finder",
            Functions: []*metadata.ThriftFunction{
                &metadata.ThriftFunction{
                    Name:       "byPlate",
                    IsOneway:   false,
                    ReturnType: premadeThriftType_module1_Automobile,
                    Arguments:  []*metadata.ThriftField{
                        &metadata.ThriftField{
                            Id:         1,
                            Name:       "plate",
                            IsOptional: false,
                            Type:       premadeThriftType_module1_Plate,
                        },
                    },
                },
                &metadata.ThriftFunction{
                    Name:       "aliasByPlate",
                    IsOneway:   false,
                    ReturnType: premadeThriftType_module1_Car,
                    Arguments:  []*metadata.ThriftField{
                        &metadata.ThriftField{
                            Id:         1,
                            Name:       "plate",
                            IsOptional: false,
                            Type:       premadeThriftType_module1_Plate,
                        },
                    },
                },
                &metadata.ThriftFunction{
                    Name:       "previousPlate",
                    IsOneway:   false,
                    ReturnType: premadeThriftType_module1_Plate,
                    Arguments:  []*metadata.ThriftField{
                        &metadata.ThriftField{
                            Id:         1,
                            Name:       "plate",
                            IsOptional: false,
                            Type:       premadeThriftType_module1_Plate,
                        },
                    },
                },
            },
        },
    )
    return fbthriftResults
}()

// Thrift metadata for this package, as well as all of its recursive imports.
var packageThriftMetadata = func() *metadata.ThriftMetadata {
    allEnumsMap := make(map[string]*metadata.ThriftEnum)
    allStructsMap := make(map[string]*metadata.ThriftStruct)
    allExceptionsMap := make(map[string]*metadata.ThriftException)
    allServicesMap := make(map[string]*metadata.ThriftService)

    // Add enum metadatas from the current program...
    for _, enumMetadata := range enumMetadatas {
        allEnumsMap[enumMetadata.GetName()] = enumMetadata
    }
    // Add struct metadatas from the current program...
    for _, structMetadata := range structMetadatas {
        allStructsMap[structMetadata.GetName()] = structMetadata
    }
    // Add exception metadatas from the current program...
    for _, exceptionMetadata := range exceptionMetadatas {
        allExceptionsMap[exceptionMetadata.GetName()] = exceptionMetadata
    }
    // Add service metadatas from the current program...
    for _, serviceMetadata := range serviceMetadatas {
        allServicesMap[serviceMetadata.GetName()] = serviceMetadata
    }

    // Obtain Thrift metadatas from recursively included programs...
    var recursiveThriftMetadatas []*metadata.ThriftMetadata
    recursiveThriftMetadatas = append(recursiveThriftMetadatas, module0.GetThriftMetadata())
    recursiveThriftMetadatas = append(recursiveThriftMetadatas, module2.GetThriftMetadata())

    // ...now merge metadatas from recursively included programs.
    for _, thriftMetadata := range recursiveThriftMetadatas {
        maps.Copy(allEnumsMap, thriftMetadata.GetEnums())
        maps.Copy(allStructsMap, thriftMetadata.GetStructs())
        maps.Copy(allExceptionsMap, thriftMetadata.GetExceptions())
        maps.Copy(allServicesMap, thriftMetadata.GetServices())
    }

    return metadata.NewThriftMetadata().
        SetEnums(allEnumsMap).
        SetStructs(allStructsMap).
        SetExceptions(allExceptionsMap).
        SetServices(allServicesMap)
}()

// GetMetadataThriftType (INTERNAL USE ONLY).
// Returns metadata ThriftType for a given full type name.
func GetMetadataThriftType(fullName string) *metadata.ThriftType {
    return premadeThriftTypesMap[fullName]
}

// GetThriftMetadata returns complete Thrift metadata for current and imported packages.
func GetThriftMetadata() *metadata.ThriftMetadata {
    return packageThriftMetadata
}

// GetThriftMetadataForService returns Thrift metadata for the given service.
func GetThriftMetadataForService(scopedServiceName string) *metadata.ThriftMetadata {
    allServicesMap := packageThriftMetadata.GetServices()
    relevantServicesMap := make(map[string]*metadata.ThriftService)

    serviceMetadata := allServicesMap[scopedServiceName]
    // Visit and record all recursive parents of the target service.
    for serviceMetadata != nil {
        relevantServicesMap[serviceMetadata.GetName()] = serviceMetadata
        if serviceMetadata.IsSetParent() {
            serviceMetadata = allServicesMap[serviceMetadata.GetParent()]
        } else {
            serviceMetadata = nil
        }
    }

    return metadata.NewThriftMetadata().
        SetEnums(packageThriftMetadata.GetEnums()).
        SetStructs(packageThriftMetadata.GetStructs()).
        SetExceptions(packageThriftMetadata.GetExceptions()).
        SetServices(relevantServicesMap)
}
