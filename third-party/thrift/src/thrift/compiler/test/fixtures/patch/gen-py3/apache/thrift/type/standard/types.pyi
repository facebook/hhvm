#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

import folly.iobuf as _fbthrift_iobuf
import thrift.py3.types
import thrift.py3.exceptions
from thrift.py3.types import __NotSet, NOTSET
import typing as _typing
from typing_extensions import Final

import sys
import itertools
import facebook.thrift.annotation.java.types as _facebook_thrift_annotation_java_types
import facebook.thrift.annotation.thrift.types as _facebook_thrift_annotation_thrift_types


__property__ = property


class StandardProtocol(thrift.py3.types.Enum):
    Custom: StandardProtocol = ...
    Binary: StandardProtocol = ...
    Compact: StandardProtocol = ...
    Json: StandardProtocol = ...
    SimpleJson: StandardProtocol = ...
    def _to_python(self) -> "apache.thrift.type.standard.thrift_types.StandardProtocol": ...   # type: ignore
    def _to_py3(self) -> StandardProtocol: ...
    def _to_py_deprecated(self) -> int: ...


class Void(thrift.py3.types.Enum):
    NoValue: Void = ...
    def _to_python(self) -> "apache.thrift.type.standard.thrift_types.Void": ...   # type: ignore
    def _to_py3(self) -> Void: ...
    def _to_py_deprecated(self) -> int: ...


class UriStruct(thrift.py3.types.Struct, _typing.Hashable):
    class __fbthrift_IsSet:
        scheme: bool
        domain: bool
        path: bool
        query: bool
        fragment: bool
        pass

    scheme: Final[str] = ...

    domain: Final[_typing.Sequence[str]] = ...

    path: Final[_typing.Sequence[str]] = ...

    query: Final[_typing.Mapping[str, str]] = ...

    fragment: Final[str] = ...

    def __init__(
        self, *,
        scheme: _typing.Optional[str]=None,
        domain: _typing.Optional[_typing.Sequence[str]]=None,
        path: _typing.Optional[_typing.Sequence[str]]=None,
        query: _typing.Optional[_typing.Mapping[str, str]]=None,
        fragment: _typing.Optional[str]=None
    ) -> None: ...

    def __call__(
        self, *,
        scheme: _typing.Union[str, '__NotSet', None]=NOTSET,
        domain: _typing.Union[_typing.Sequence[str], '__NotSet', None]=NOTSET,
        path: _typing.Union[_typing.Sequence[str], '__NotSet', None]=NOTSET,
        query: _typing.Union[_typing.Mapping[str, str], '__NotSet', None]=NOTSET,
        fragment: _typing.Union[str, '__NotSet', None]=NOTSET
    ) -> UriStruct: ...

    def __reduce__(self) -> _typing.Tuple[_typing.Callable, _typing.Tuple[_typing.Type['UriStruct'], bytes]]: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __lt__(self, other: 'UriStruct') -> bool: ...
    def __gt__(self, other: 'UriStruct') -> bool: ...
    def __le__(self, other: 'UriStruct') -> bool: ...
    def __ge__(self, other: 'UriStruct') -> bool: ...

    def _to_python(self) -> "apache.thrift.type.standard.thrift_types.UriStruct": ...   # type: ignore
    def _to_py3(self) -> UriStruct: ...
    def _to_py_deprecated(self) -> "thrift.lib.thrift.standard.ttypes.UriStruct": ...   # type: ignore

_TypeUriValueType = _typing.Union[None, str, bytes]

class TypeUri(thrift.py3.types.Union, _typing.Hashable):
    class __fbthrift_IsSet:
        uri: bool
        typeHashPrefixSha2_256: bool
        pass

    uri: Final[str] = ...

    typeHashPrefixSha2_256: Final[bytes] = ...

    def __init__(
        self, *,
        uri: _typing.Optional[str]=None,
        typeHashPrefixSha2_256: _typing.Optional[bytes]=None
    ) -> None: ...

    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __lt__(self, other: 'TypeUri') -> bool: ...
    def __gt__(self, other: 'TypeUri') -> bool: ...
    def __le__(self, other: 'TypeUri') -> bool: ...
    def __ge__(self, other: 'TypeUri') -> bool: ...

    class Type(thrift.py3.types.Enum):
        EMPTY: TypeUri.Type = ...
        uri: TypeUri.Type = ...
        typeHashPrefixSha2_256: TypeUri.Type = ...

    @staticmethod
    def fromValue(value: _TypeUriValueType) -> TypeUri: ...
    @__property__
    def value(self) -> _TypeUriValueType: ...
    @__property__
    def type(self) -> "TypeUri.Type": ...

    def _to_python(self) -> "apache.thrift.type.standard.thrift_types.TypeUri": ...   # type: ignore
    def _to_py3(self) -> TypeUri: ...
    def _to_py_deprecated(self) -> "thrift.lib.thrift.standard.ttypes.TypeUri": ...   # type: ignore

_TypeNameValueType = _typing.Union[None, Void, Void, Void, Void, Void, Void, Void, Void, Void, TypeUri, TypeUri, TypeUri, TypeUri, Void, Void, Void]

class TypeName(thrift.py3.types.Union, _typing.Hashable):
    class __fbthrift_IsSet:
        boolType: bool
        byteType: bool
        i16Type: bool
        i32Type: bool
        i64Type: bool
        floatType: bool
        doubleType: bool
        stringType: bool
        binaryType: bool
        enumType: bool
        structType: bool
        unionType: bool
        exceptionType: bool
        listType: bool
        setType: bool
        mapType: bool
        pass

    boolType: Final[Void] = ...

    byteType: Final[Void] = ...

    i16Type: Final[Void] = ...

    i32Type: Final[Void] = ...

    i64Type: Final[Void] = ...

    floatType: Final[Void] = ...

    doubleType: Final[Void] = ...

    stringType: Final[Void] = ...

    binaryType: Final[Void] = ...

    enumType: Final[TypeUri] = ...

    structType: Final[TypeUri] = ...

    unionType: Final[TypeUri] = ...

    exceptionType: Final[TypeUri] = ...

    listType: Final[Void] = ...

    setType: Final[Void] = ...

    mapType: Final[Void] = ...

    def __init__(
        self, *,
        boolType: _typing.Optional[Void]=None,
        byteType: _typing.Optional[Void]=None,
        i16Type: _typing.Optional[Void]=None,
        i32Type: _typing.Optional[Void]=None,
        i64Type: _typing.Optional[Void]=None,
        floatType: _typing.Optional[Void]=None,
        doubleType: _typing.Optional[Void]=None,
        stringType: _typing.Optional[Void]=None,
        binaryType: _typing.Optional[Void]=None,
        enumType: _typing.Optional[TypeUri]=None,
        structType: _typing.Optional[TypeUri]=None,
        unionType: _typing.Optional[TypeUri]=None,
        exceptionType: _typing.Optional[TypeUri]=None,
        listType: _typing.Optional[Void]=None,
        setType: _typing.Optional[Void]=None,
        mapType: _typing.Optional[Void]=None
    ) -> None: ...

    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __lt__(self, other: 'TypeName') -> bool: ...
    def __gt__(self, other: 'TypeName') -> bool: ...
    def __le__(self, other: 'TypeName') -> bool: ...
    def __ge__(self, other: 'TypeName') -> bool: ...

    class Type(thrift.py3.types.Enum):
        EMPTY: TypeName.Type = ...
        boolType: TypeName.Type = ...
        byteType: TypeName.Type = ...
        i16Type: TypeName.Type = ...
        i32Type: TypeName.Type = ...
        i64Type: TypeName.Type = ...
        floatType: TypeName.Type = ...
        doubleType: TypeName.Type = ...
        stringType: TypeName.Type = ...
        binaryType: TypeName.Type = ...
        enumType: TypeName.Type = ...
        structType: TypeName.Type = ...
        unionType: TypeName.Type = ...
        exceptionType: TypeName.Type = ...
        listType: TypeName.Type = ...
        setType: TypeName.Type = ...
        mapType: TypeName.Type = ...

    @staticmethod
    def fromValue(value: _TypeNameValueType) -> TypeName: ...
    @__property__
    def value(self) -> _TypeNameValueType: ...
    @__property__
    def type(self) -> "TypeName.Type": ...

    def _to_python(self) -> "apache.thrift.type.standard.thrift_types.TypeName": ...   # type: ignore
    def _to_py3(self) -> TypeName: ...
    def _to_py_deprecated(self) -> "thrift.lib.thrift.standard.ttypes.TypeName": ...   # type: ignore

_List__stringT = _typing.TypeVar('_List__stringT', bound=_typing.Sequence[str])


class List__string(_typing.Sequence[str], _typing.Hashable):
    def __init__(self, items: _typing.Optional[_typing.Sequence[str]]=None) -> None: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __copy__(self) -> _typing.Sequence[str]: ...
    @_typing.overload
    def __getitem__(self, i: int) -> str: ...
    @_typing.overload
    def __getitem__(self, s: slice) -> _typing.Sequence[str]: ...
    def __add__(self, other: _typing.Sequence[str]) -> 'List__string': ...
    def __radd__(self, other: _List__stringT) -> _List__stringT: ...
    def __reversed__(self) -> _typing.Iterator[str]: ...
    def __iter__(self) -> _typing.Iterator[str]: ...


class Map__string_string(_typing.Mapping[str, str], _typing.Hashable):
    def __init__(self, items: _typing.Optional[_typing.Mapping[str, str]]=None) -> None: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __copy__(self) -> _typing.Mapping[str, str]: ...
    def __getitem__(self, key: str) -> str: ...
    def __iter__(self) -> _typing.Iterator[str]: ...


minTypeHashBytes: int = ...
defaultTypeHashBytes: int = ...
ByteString = bytes
ByteBuffer = _fbthrift_iobuf.IOBuf
Uuid = bytes
UuidString = str
Path = str
PathSegments = List__string
Domain = str
DomainLabels = List__string
QueryString = str
QueryArgs = Map__string_string
Uri = str
