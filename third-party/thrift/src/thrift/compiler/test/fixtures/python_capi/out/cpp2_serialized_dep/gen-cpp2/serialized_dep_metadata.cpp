/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/python_capi/src/serialized_dep.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include <thrift/lib/cpp2/gen/module_metadata_cpp.h>
#include "thrift/compiler/test/fixtures/python_capi/gen-cpp2/serialized_dep_metadata.h"

// some of these functions can be so large that the compiler gives up optimizing
// them - and issues a warning which may be treated as an error!
//
// these functions are so rarely called that it is probably okay for them not to
// be optimized in practice
FOLLY_CLANG_DISABLE_WARNING("-Wignored-optimization-argument")

namespace apache {
namespace thrift {
namespace detail {
namespace md {
using ThriftMetadata = ::apache::thrift::metadata::ThriftMetadata;
using ThriftPrimitiveType = ::apache::thrift::metadata::ThriftPrimitiveType;
using ThriftType = ::apache::thrift::metadata::ThriftType;
using ThriftService = ::apache::thrift::metadata::ThriftService;
using ThriftServiceContext = ::apache::thrift::metadata::ThriftServiceContext;
using ThriftFunctionGenerator = void (*)(ThriftMetadata&, ThriftService&);


const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::test::fixtures::python_capi::SerializedStruct>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::test::fixtures::python_capi::SerializedStruct>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& serialized_dep_SerializedStruct = res.metadata;
  serialized_dep_SerializedStruct.is_union() = false;
  static const auto* const
  serialized_dep_SerializedStruct_fields = new std::array<EncodedThriftField, 4>{ {
    { 1, "s", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "i", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "os", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 4, "rs", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  std::size_t i = 0;
  for (const auto& f : *serialized_dep_SerializedStruct_fields) {
    auto& field = serialized_dep_SerializedStruct.fields()[i];
    DCHECK_EQ(*field.id(), f.id);
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    field.structured_annotations().emplace().assign(
        f.structured_annotations.begin(),
        f.structured_annotations.end());

    // writeAndGenType will modify metadata, which might invalidate `field` reference
    // We need to store the result in a separate `type` variable.
    apache::thrift::metadata::ThriftType type;
    f.metadata_type_interface->writeAndGenType(type, metadata);
    serialized_dep_SerializedStruct.fields()[i++].type() = std::move(type);
  }
  serialized_dep_SerializedStruct.structured_annotations()->push_back(*cvStruct("python.UseCAPI", { {"serialize", cvBool(true) } }).cv_struct());
  return res.metadata;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::test::fixtures::python_capi::SerializedUnion>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::test::fixtures::python_capi::SerializedUnion>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& serialized_dep_SerializedUnion = res.metadata;
  serialized_dep_SerializedUnion.is_union() = true;
  static const auto* const
  serialized_dep_SerializedUnion_fields = new std::array<EncodedThriftField, 2>{ {
    { 1, "s", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "i", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  std::size_t i = 0;
  for (const auto& f : *serialized_dep_SerializedUnion_fields) {
    auto& field = serialized_dep_SerializedUnion.fields()[i];
    DCHECK_EQ(*field.id(), f.id);
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    field.structured_annotations().emplace().assign(
        f.structured_annotations.begin(),
        f.structured_annotations.end());

    // writeAndGenType will modify metadata, which might invalidate `field` reference
    // We need to store the result in a separate `type` variable.
    apache::thrift::metadata::ThriftType type;
    f.metadata_type_interface->writeAndGenType(type, metadata);
    serialized_dep_SerializedUnion.fields()[i++].type() = std::move(type);
  }
  serialized_dep_SerializedUnion.structured_annotations()->push_back(*cvStruct("python.UseCAPI", { {"serialize", cvBool(true) } }).cv_struct());
  return res.metadata;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::test::fixtures::python_capi::SerializedError>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::test::fixtures::python_capi::SerializedError>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& serialized_dep_SerializedError = res.metadata;
  serialized_dep_SerializedError.is_union() = false;
  static const auto* const
  serialized_dep_SerializedError_fields = new std::array<EncodedThriftField, 3>{ {
    { 1, "msg", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "os", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "rs", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  std::size_t i = 0;
  for (const auto& f : *serialized_dep_SerializedError_fields) {
    auto& field = serialized_dep_SerializedError.fields()[i];
    DCHECK_EQ(*field.id(), f.id);
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    field.structured_annotations().emplace().assign(
        f.structured_annotations.begin(),
        f.structured_annotations.end());

    // writeAndGenType will modify metadata, which might invalidate `field` reference
    // We need to store the result in a separate `type` variable.
    apache::thrift::metadata::ThriftType type;
    f.metadata_type_interface->writeAndGenType(type, metadata);
    serialized_dep_SerializedError.fields()[i++].type() = std::move(type);
  }
  serialized_dep_SerializedError.structured_annotations()->push_back(*cvStruct("python.UseCAPI", { {"serialize", cvBool(true) } }).cv_struct());
  return res.metadata;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::test::fixtures::python_capi::MarshalStruct>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::test::fixtures::python_capi::MarshalStruct>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& serialized_dep_MarshalStruct = res.metadata;
  serialized_dep_MarshalStruct.is_union() = false;
  static const auto* const
  serialized_dep_MarshalStruct_fields = new std::array<EncodedThriftField, 4>{ {
    { 1, "s", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "i", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "os", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 4, "rs", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  std::size_t i = 0;
  for (const auto& f : *serialized_dep_MarshalStruct_fields) {
    auto& field = serialized_dep_MarshalStruct.fields()[i];
    DCHECK_EQ(*field.id(), f.id);
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    field.structured_annotations().emplace().assign(
        f.structured_annotations.begin(),
        f.structured_annotations.end());

    // writeAndGenType will modify metadata, which might invalidate `field` reference
    // We need to store the result in a separate `type` variable.
    apache::thrift::metadata::ThriftType type;
    f.metadata_type_interface->writeAndGenType(type, metadata);
    serialized_dep_MarshalStruct.fields()[i++].type() = std::move(type);
  }
  serialized_dep_MarshalStruct.structured_annotations()->push_back(*cvStruct("python.UseCAPI", {  }).cv_struct());
  return res.metadata;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::test::fixtures::python_capi::MarshalUnion>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::test::fixtures::python_capi::MarshalUnion>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& serialized_dep_MarshalUnion = res.metadata;
  serialized_dep_MarshalUnion.is_union() = true;
  static const auto* const
  serialized_dep_MarshalUnion_fields = new std::array<EncodedThriftField, 2>{ {
    { 1, "s", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "i", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  std::size_t i = 0;
  for (const auto& f : *serialized_dep_MarshalUnion_fields) {
    auto& field = serialized_dep_MarshalUnion.fields()[i];
    DCHECK_EQ(*field.id(), f.id);
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    field.structured_annotations().emplace().assign(
        f.structured_annotations.begin(),
        f.structured_annotations.end());

    // writeAndGenType will modify metadata, which might invalidate `field` reference
    // We need to store the result in a separate `type` variable.
    apache::thrift::metadata::ThriftType type;
    f.metadata_type_interface->writeAndGenType(type, metadata);
    serialized_dep_MarshalUnion.fields()[i++].type() = std::move(type);
  }
  serialized_dep_MarshalUnion.structured_annotations()->push_back(*cvStruct("python.UseCAPI", {  }).cv_struct());
  return res.metadata;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::test::fixtures::python_capi::MarshalError>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::test::fixtures::python_capi::MarshalError>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& serialized_dep_MarshalError = res.metadata;
  serialized_dep_MarshalError.is_union() = false;
  static const auto* const
  serialized_dep_MarshalError_fields = new std::array<EncodedThriftField, 3>{ {
    { 1, "msg", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "os", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "rs", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  std::size_t i = 0;
  for (const auto& f : *serialized_dep_MarshalError_fields) {
    auto& field = serialized_dep_MarshalError.fields()[i];
    DCHECK_EQ(*field.id(), f.id);
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    field.structured_annotations().emplace().assign(
        f.structured_annotations.begin(),
        f.structured_annotations.end());

    // writeAndGenType will modify metadata, which might invalidate `field` reference
    // We need to store the result in a separate `type` variable.
    apache::thrift::metadata::ThriftType type;
    f.metadata_type_interface->writeAndGenType(type, metadata);
    serialized_dep_MarshalError.fields()[i++].type() = std::move(type);
  }
  serialized_dep_MarshalError.structured_annotations()->push_back(*cvStruct("python.UseCAPI", {  }).cv_struct());
  return res.metadata;
}

void ExceptionMetadata<::test::fixtures::python_capi::SerializedError>::gen(ThriftMetadata& metadata) {
  auto res = genExceptionMetadata<::test::fixtures::python_capi::SerializedError>(metadata);
  if (res.preExists) {
    return;
  }
  [[maybe_unused]] ::apache::thrift::metadata::ThriftException& serialized_dep_SerializedError = res.metadata;
  static const auto* const
  serialized_dep_SerializedError_fields = new std::array<EncodedThriftField, 3>{ {
    { 1, "msg", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "os", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "rs", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  std::size_t i = 0;
  for (const auto& f : *serialized_dep_SerializedError_fields) {
    auto& field = serialized_dep_SerializedError.fields()[i];
    DCHECK_EQ(*field.id(), f.id);
    field.name() = f.name;
    field.is_optional() = f.is_optional;

    // writeAndGenType will modify metadata, which might invalidate `field` reference
    // We need to store the result in a separate `type` variable.
    apache::thrift::metadata::ThriftType type;
    f.metadata_type_interface->writeAndGenType(type, metadata);
    serialized_dep_SerializedError.fields()[i++].type() = std::move(type);
  }
  serialized_dep_SerializedError.structured_annotations()->push_back(*cvStruct("python.UseCAPI", { {"serialize", cvBool(true) } }).cv_struct());
}
void ExceptionMetadata<::test::fixtures::python_capi::MarshalError>::gen(ThriftMetadata& metadata) {
  auto res = genExceptionMetadata<::test::fixtures::python_capi::MarshalError>(metadata);
  if (res.preExists) {
    return;
  }
  [[maybe_unused]] ::apache::thrift::metadata::ThriftException& serialized_dep_MarshalError = res.metadata;
  static const auto* const
  serialized_dep_MarshalError_fields = new std::array<EncodedThriftField, 3>{ {
    { 1, "msg", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "os", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "rs", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  std::size_t i = 0;
  for (const auto& f : *serialized_dep_MarshalError_fields) {
    auto& field = serialized_dep_MarshalError.fields()[i];
    DCHECK_EQ(*field.id(), f.id);
    field.name() = f.name;
    field.is_optional() = f.is_optional;

    // writeAndGenType will modify metadata, which might invalidate `field` reference
    // We need to store the result in a separate `type` variable.
    apache::thrift::metadata::ThriftType type;
    f.metadata_type_interface->writeAndGenType(type, metadata);
    serialized_dep_MarshalError.fields()[i++].type() = std::move(type);
  }
  serialized_dep_MarshalError.structured_annotations()->push_back(*cvStruct("python.UseCAPI", {  }).cv_struct());
}
} // namespace md
} // namespace detail
} // namespace thrift
} // namespace apache
