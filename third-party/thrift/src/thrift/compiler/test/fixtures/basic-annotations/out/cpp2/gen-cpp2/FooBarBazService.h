/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/basic-annotations/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/service_h.h>

#include "thrift/compiler/test/fixtures/basic-annotations/gen-cpp2/FooBarBazServiceAsyncClient.h"
#include "thrift/compiler/test/fixtures/basic-annotations/gen-cpp2/module_types.h"

namespace folly {
  class IOBuf;
  class IOBufQueue;
}
namespace apache { namespace thrift {
  class Cpp2RequestContext;
  class BinaryProtocolReader;
  class CompactProtocolReader;
  namespace transport { class THeader; }
}}

namespace cpp2 {
class FooBarBazService;
class FooBarBazServiceAsyncProcessor;

class FooBarBazServiceServiceInfoHolder : public apache::thrift::ServiceInfoHolder {
  public:
   apache::thrift::ServiceRequestInfoMap const& requestInfoMap() const override;
   static apache::thrift::ServiceRequestInfoMap staticRequestInfoMap();
};
} // namespace cpp2

namespace apache::thrift {
template <>
class ServiceHandler<::cpp2::FooBarBazService> : public apache::thrift::ServerInterface {
  static_assert(!folly::is_detected_v<::apache::thrift::detail::st::detect_complete, ::cpp2::FooBarBazService>, "Definition collision with service tag. Either rename the Thrift service using @cpp.Name annotation or rename the conflicting C++ type.");

 public:
  std::string_view getGeneratedName() const override { return "FooBarBazService"; }

  typedef ::cpp2::FooBarBazServiceAsyncProcessor ProcessorType;
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override;
  CreateMethodMetadataResult createMethodMetadata() override;
  bool isThriftGenerated() const override final { return true; }
 private:
  std::optional<std::reference_wrapper<apache::thrift::ServiceRequestInfoMap const>> getServiceRequestInfoMap() const;
 public:

  virtual void sync_foo();
  [[deprecated("Use sync_foo instead")]] virtual void foo();
  virtual folly::Future<folly::Unit> future_foo();
  virtual folly::SemiFuture<folly::Unit> semifuture_foo();
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<void> co_foo();
  virtual folly::coro::Task<void> co_foo(apache::thrift::RequestParams params);
#endif
  virtual void async_tm_foo(apache::thrift::HandlerCallbackPtr<void> callback);
  virtual void sync_bar();
  [[deprecated("Use sync_bar instead")]] virtual void bar();
  virtual folly::Future<folly::Unit> future_bar();
  virtual folly::SemiFuture<folly::Unit> semifuture_bar();
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<void> co_bar();
  virtual folly::coro::Task<void> co_bar(apache::thrift::RequestParams params);
#endif
  virtual void async_tm_bar(apache::thrift::HandlerCallbackPtr<void> callback);
  virtual void sync_baz();
  [[deprecated("Use sync_baz instead")]] virtual void baz();
  virtual folly::Future<folly::Unit> future_baz();
  virtual folly::SemiFuture<folly::Unit> semifuture_baz();
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<void> co_baz();
  virtual folly::coro::Task<void> co_baz(apache::thrift::RequestParams params);
#endif
  virtual void async_tm_baz(apache::thrift::HandlerCallbackPtr<void> callback);
 private:
  static ::cpp2::FooBarBazServiceServiceInfoHolder __fbthrift_serviceInfoHolder;
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_foo{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_bar{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_baz{apache::thrift::detail::si::InvocationType::AsyncTm};
 public:

  virtual void fbthrift_execute_decorators_before_foo(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  virtual void fbthrift_execute_decorators_after_foo(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  static void fbthrift_invoke_decorator_after_foo(void* iface, apache::thrift::Cpp2RequestContext* ctx) {
    static_cast<ServiceHandler<::cpp2::FooBarBazService>*>(iface)->fbthrift_execute_decorators_after_foo(*ctx);
  }
  virtual void fbthrift_execute_decorators_before_bar(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  virtual void fbthrift_execute_decorators_after_bar(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  static void fbthrift_invoke_decorator_after_bar(void* iface, apache::thrift::Cpp2RequestContext* ctx) {
    static_cast<ServiceHandler<::cpp2::FooBarBazService>*>(iface)->fbthrift_execute_decorators_after_bar(*ctx);
  }
  virtual void fbthrift_execute_decorators_before_baz(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  virtual void fbthrift_execute_decorators_after_baz(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  static void fbthrift_invoke_decorator_after_baz(void* iface, apache::thrift::Cpp2RequestContext* ctx) {
    static_cast<ServiceHandler<::cpp2::FooBarBazService>*>(iface)->fbthrift_execute_decorators_after_baz(*ctx);
  }
};

namespace detail {
template <> struct TSchemaAssociation<::cpp2::FooBarBazService, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -2278009136013983862;
  static constexpr ::std::string_view definitionKey = {"\x52\x5b\x9b\xd0\x41\xeb\x66\x8b\x08\x61\x4e\x33\x84\x52\xef\x91", 16};
};
}
} // namespace apache::thrift

namespace cpp2 {
using FooBarBazServiceSvIf [[deprecated("Use apache::thrift::ServiceHandler<FooBarBazService> instead")]] = ::apache::thrift::ServiceHandler<FooBarBazService>;
} // namespace cpp2

namespace cpp2 {
class FooBarBazServiceSvNull : public ::apache::thrift::ServiceHandler<FooBarBazService> {
 public:
  void foo() override;
  void bar() override;
  void baz() override;
};

class FooBarBazServiceAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessorBase {
 public:
  std::string_view getServiceName() override;
  void getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) override;
  using BaseAsyncProcessor = void;
 protected:
  ::apache::thrift::ServiceHandler<::cpp2::FooBarBazService>* iface_;
 public:
  void processSerializedCompressedRequestWithMetadata(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) override;
  void executeRequest(apache::thrift::ServerRequest&& serverRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata) override;
 public:
  using ProcessFuncs = GeneratedAsyncProcessorBase::ProcessFuncs<FooBarBazServiceAsyncProcessor>;
  using ProcessMap = GeneratedAsyncProcessorBase::ProcessMap<ProcessFuncs>;
  static const FooBarBazServiceAsyncProcessor::ProcessMap& getOwnProcessMap();
 private:
  static const FooBarBazServiceAsyncProcessor::ProcessMap kOwnProcessMap_;
 private:
  //
  // Service Methods
  //

  //
  // Method 'foo'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_foo(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_foo(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_foo(
      apache::thrift::ContextStack* ctx);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_foo(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'foo'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'bar'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_bar(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_bar(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_bar(
      apache::thrift::ContextStack* ctx);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_bar(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'bar'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'baz'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_baz(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_baz(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_baz(
      apache::thrift::ContextStack* ctx);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_baz(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'baz'
  //

  //
  // End of Service Methods
  //
 public:
  FooBarBazServiceAsyncProcessor(::apache::thrift::ServiceHandler<::cpp2::FooBarBazService>* iface) :
      iface_(iface) {}
  ~FooBarBazServiceAsyncProcessor() override {}
};

} // namespace cpp2
