// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package module

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	thrift0 "thrift/annotation/thrift"
	patch1 "thrift/lib/thrift/patch"
	standard2 "thrift/lib/thrift/standard"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var _ = thrift0.GoUnusedProtection__
var _ = patch1.GoUnusedProtection__
var _ = standard2.GoUnusedProtection__
var GoUnusedProtection__ int;

type MyEnum int64
const (
  MyEnum_MyValue0 MyEnum = 0
)

var MyEnumToName = map[MyEnum]string {
  MyEnum_MyValue0: "MyValue0",
}

var MyEnumToValue = map[string]MyEnum {
  "MyValue0": MyEnum_MyValue0,
}

var MyEnumNames = []string {
  "MyValue0",
}

var MyEnumValues = []MyEnum {
  MyEnum_MyValue0,
}

func (p MyEnum) String() string {
  if v, ok := MyEnumToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func MyEnumFromString(s string) (MyEnum, error) {
  if v, ok := MyEnumToValue[s]; ok {
    return v, nil
  }
  return MyEnum(0), fmt.Errorf("not a valid MyEnum string")
}

func MyEnumPtr(v MyEnum) *MyEnum { return &v }

// Attributes:
//  - Data1
//  - Data2
type MyData struct {
  Data1 string `thrift:"data1,1" db:"data1" json:"data1"`
  Data2 int32 `thrift:"data2,2" db:"data2" json:"data2"`
}

func NewMyData() *MyData {
  return &MyData{}
}


func (p *MyData) GetData1() string {
  return p.Data1
}

func (p *MyData) GetData2() int32 {
  return p.Data2
}
type MyDataBuilder struct {
  obj *MyData
}

func NewMyDataBuilder() *MyDataBuilder{
  return &MyDataBuilder{
    obj: NewMyData(),
  }
}

func (p MyDataBuilder) Emit() *MyData{
  return &MyData{
    Data1: p.obj.Data1,
    Data2: p.obj.Data2,
  }
}

func (m *MyDataBuilder) Data1(data1 string) *MyDataBuilder {
  m.obj.Data1 = data1
  return m
}

func (m *MyDataBuilder) Data2(data2 int32) *MyDataBuilder {
  m.obj.Data2 = data2
  return m
}

func (m *MyData) SetData1(data1 string) *MyData {
  m.Data1 = data1
  return m
}

func (m *MyData) SetData2(data2 int32) *MyData {
  m.Data2 = data2
  return m
}

func (p *MyData) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyData)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Data1 = v
  }
  return nil
}

func (p *MyData)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Data2 = v
  }
  return nil
}

func (p *MyData) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyData) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("data1", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:data1: ", p), err) }
  if err := oprot.WriteString(string(p.Data1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:data1: ", p), err) }
  return err
}

func (p *MyData) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("data2", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data2: ", p), err) }
  if err := oprot.WriteI32(int32(p.Data2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data2 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data2: ", p), err) }
  return err
}

func (p *MyData) String() string {
  if p == nil {
    return "<nil>"
  }

  data1Val := fmt.Sprintf("%v", p.Data1)
  data2Val := fmt.Sprintf("%v", p.Data2)
  return fmt.Sprintf("MyData({Data1:%s Data2:%s})", data1Val, data2Val)
}

// Attributes:
//  - Data1
//  - Data2
type MyDataWithCustomDefault struct {
  Data1 string `thrift:"data1,1" db:"data1" json:"data1"`
  Data2 int32 `thrift:"data2,2" db:"data2" json:"data2"`
}

func NewMyDataWithCustomDefault() *MyDataWithCustomDefault {
  return &MyDataWithCustomDefault{
    Data1: "1",
    Data2: 2,
  }
}


func (p *MyDataWithCustomDefault) GetData1() string {
  return p.Data1
}

func (p *MyDataWithCustomDefault) GetData2() int32 {
  return p.Data2
}
type MyDataWithCustomDefaultBuilder struct {
  obj *MyDataWithCustomDefault
}

func NewMyDataWithCustomDefaultBuilder() *MyDataWithCustomDefaultBuilder{
  return &MyDataWithCustomDefaultBuilder{
    obj: NewMyDataWithCustomDefault(),
  }
}

func (p MyDataWithCustomDefaultBuilder) Emit() *MyDataWithCustomDefault{
  return &MyDataWithCustomDefault{
    Data1: p.obj.Data1,
    Data2: p.obj.Data2,
  }
}

func (m *MyDataWithCustomDefaultBuilder) Data1(data1 string) *MyDataWithCustomDefaultBuilder {
  m.obj.Data1 = data1
  return m
}

func (m *MyDataWithCustomDefaultBuilder) Data2(data2 int32) *MyDataWithCustomDefaultBuilder {
  m.obj.Data2 = data2
  return m
}

func (m *MyDataWithCustomDefault) SetData1(data1 string) *MyDataWithCustomDefault {
  m.Data1 = data1
  return m
}

func (m *MyDataWithCustomDefault) SetData2(data2 int32) *MyDataWithCustomDefault {
  m.Data2 = data2
  return m
}

func (p *MyDataWithCustomDefault) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyDataWithCustomDefault)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Data1 = v
  }
  return nil
}

func (p *MyDataWithCustomDefault)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Data2 = v
  }
  return nil
}

func (p *MyDataWithCustomDefault) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyDataWithCustomDefault"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyDataWithCustomDefault) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("data1", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:data1: ", p), err) }
  if err := oprot.WriteString(string(p.Data1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:data1: ", p), err) }
  return err
}

func (p *MyDataWithCustomDefault) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("data2", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data2: ", p), err) }
  if err := oprot.WriteI32(int32(p.Data2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data2 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data2: ", p), err) }
  return err
}

func (p *MyDataWithCustomDefault) String() string {
  if p == nil {
    return "<nil>"
  }

  data1Val := fmt.Sprintf("%v", p.Data1)
  data2Val := fmt.Sprintf("%v", p.Data2)
  return fmt.Sprintf("MyDataWithCustomDefault({Data1:%s Data2:%s})", data1Val, data2Val)
}

// Attributes:
//  - InnerOption
type InnerUnion struct {
  InnerOption []byte `thrift:"innerOption,1,optional" db:"innerOption" json:"innerOption,omitempty"`
}

func NewInnerUnion() *InnerUnion {
  return &InnerUnion{}
}

var InnerUnion_InnerOption_DEFAULT []byte

func (p *InnerUnion) GetInnerOption() []byte {
  return p.InnerOption
}
func (p *InnerUnion) IsSetInnerOption() bool {
  return p != nil && p.InnerOption != nil
}

type InnerUnionBuilder struct {
  obj *InnerUnion
}

func NewInnerUnionBuilder() *InnerUnionBuilder{
  return &InnerUnionBuilder{
    obj: NewInnerUnion(),
  }
}

func (p InnerUnionBuilder) Emit() *InnerUnion{
  return &InnerUnion{
    InnerOption: p.obj.InnerOption,
  }
}

func (i *InnerUnionBuilder) InnerOption(innerOption []byte) *InnerUnionBuilder {
  i.obj.InnerOption = innerOption
  return i
}

func (i *InnerUnion) SetInnerOption(innerOption []byte) *InnerUnion {
  i.InnerOption = innerOption
  return i
}

func (p *InnerUnion) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InnerUnion)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.InnerOption = v
  }
  return nil
}

func (p *InnerUnion) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("InnerUnion"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InnerUnion) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetInnerOption() {
    if err := oprot.WriteFieldBegin("innerOption", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:innerOption: ", p), err) }
    if err := oprot.WriteBinary(p.InnerOption); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.innerOption (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:innerOption: ", p), err) }
  }
  return err
}

func (p *InnerUnion) String() string {
  if p == nil {
    return "<nil>"
  }

  innerOptionVal := fmt.Sprintf("%v", p.InnerOption)
  return fmt.Sprintf("InnerUnion({InnerOption:%s})", innerOptionVal)
}

// Attributes:
//  - Option1
//  - Option2
//  - Option3
type MyUnion struct {
  Option1 *string `thrift:"option1,1,optional" db:"option1" json:"option1,omitempty"`
  Option2 *int32 `thrift:"option2,2,optional" db:"option2" json:"option2,omitempty"`
  Option3 *InnerUnion `thrift:"option3,3,optional" db:"option3" json:"option3,omitempty"`
}

func NewMyUnion() *MyUnion {
  return &MyUnion{}
}

var MyUnion_Option1_DEFAULT string
func (p *MyUnion) GetOption1() string {
  if !p.IsSetOption1() {
    return MyUnion_Option1_DEFAULT
  }
  return *p.Option1
}
var MyUnion_Option2_DEFAULT int32
func (p *MyUnion) GetOption2() int32 {
  if !p.IsSetOption2() {
    return MyUnion_Option2_DEFAULT
  }
  return *p.Option2
}
var MyUnion_Option3_DEFAULT *InnerUnion
func (p *MyUnion) GetOption3() *InnerUnion {
  if !p.IsSetOption3() {
    return MyUnion_Option3_DEFAULT
  }
  return p.Option3
}
func (p *MyUnion) DefaultGetOption3() *InnerUnion {
  if !p.IsSetOption3() {
    return NewInnerUnion()
  }
  return p.Option3
}
func (p *MyUnion) CountSetFieldsMyUnion() int {
  count := 0
  if (p.IsSetOption1()) {
    count++
  }
  if (p.IsSetOption2()) {
    count++
  }
  if (p.IsSetOption3()) {
    count++
  }
  return count

}

func (p *MyUnion) IsSetOption1() bool {
  return p != nil && p.Option1 != nil
}

func (p *MyUnion) IsSetOption2() bool {
  return p != nil && p.Option2 != nil
}

func (p *MyUnion) IsSetOption3() bool {
  return p != nil && p.Option3 != nil
}

type MyUnionBuilder struct {
  obj *MyUnion
}

func NewMyUnionBuilder() *MyUnionBuilder{
  return &MyUnionBuilder{
    obj: NewMyUnion(),
  }
}

func (p MyUnionBuilder) Emit() *MyUnion{
  return &MyUnion{
    Option1: p.obj.Option1,
    Option2: p.obj.Option2,
    Option3: p.obj.Option3,
  }
}

func (m *MyUnionBuilder) Option1(option1 *string) *MyUnionBuilder {
  m.obj.Option1 = option1
  return m
}

func (m *MyUnionBuilder) Option2(option2 *int32) *MyUnionBuilder {
  m.obj.Option2 = option2
  return m
}

func (m *MyUnionBuilder) Option3(option3 *InnerUnion) *MyUnionBuilder {
  m.obj.Option3 = option3
  return m
}

func (m *MyUnion) SetOption1(option1 *string) *MyUnion {
  m.Option1 = option1
  return m
}

func (m *MyUnion) SetOption2(option2 *int32) *MyUnion {
  m.Option2 = option2
  return m
}

func (m *MyUnion) SetOption3(option3 *InnerUnion) *MyUnion {
  m.Option3 = option3
  return m
}

func (p *MyUnion) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyUnion)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Option1 = &v
  }
  return nil
}

func (p *MyUnion)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Option2 = &v
  }
  return nil
}

func (p *MyUnion)  ReadField3(iprot thrift.Protocol) error {
  p.Option3 = NewInnerUnion()
  if err := p.Option3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Option3), err)
  }
  return nil
}

func (p *MyUnion) Write(oprot thrift.Protocol) error {
  if c := p.CountSetFieldsMyUnion(); c > 1 {
    return fmt.Errorf("%T write union: no more than one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin("MyUnion"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyUnion) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetOption1() {
    if err := oprot.WriteFieldBegin("option1", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:option1: ", p), err) }
    if err := oprot.WriteString(string(*p.Option1)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.option1 (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:option1: ", p), err) }
  }
  return err
}

func (p *MyUnion) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetOption2() {
    if err := oprot.WriteFieldBegin("option2", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:option2: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Option2)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.option2 (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:option2: ", p), err) }
  }
  return err
}

func (p *MyUnion) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetOption3() {
    if err := oprot.WriteFieldBegin("option3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:option3: ", p), err) }
    if err := p.Option3.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Option3), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:option3: ", p), err) }
  }
  return err
}

func (p *MyUnion) String() string {
  if p == nil {
    return "<nil>"
  }

  var option1Val string
  if p.Option1 == nil {
    option1Val = "<nil>"
  } else {
    option1Val = fmt.Sprintf("%v", *p.Option1)
  }
  var option2Val string
  if p.Option2 == nil {
    option2Val = "<nil>"
  } else {
    option2Val = fmt.Sprintf("%v", *p.Option2)
  }
  var option3Val string
  if p.Option3 == nil {
    option3Val = "<nil>"
  } else {
    option3Val = fmt.Sprintf("%v", p.Option3)
  }
  return fmt.Sprintf("MyUnion({Option1:%s Option2:%s Option3:%s})", option1Val, option2Val, option3Val)
}

// Attributes:
//  - BoolVal
//  - ByteVal
//  - I16Val
//  - I32Val
//  - I64Val
//  - FloatVal
//  - DoubleVal
//  - StringVal
//  - BinaryVal
//  - EnumVal
//  - StructVal
//  - UnionVal
//  - LateStructVal
//  - OptBoolVal
//  - OptByteVal
//  - OptI16Val
//  - OptI32Val
//  - OptI64Val
//  - OptFloatVal
//  - OptDoubleVal
//  - OptStringVal
//  - OptBinaryVal
//  - OptEnumVal
//  - OptStructVal
//  - OptLateStructVal
//  - OptListVal
//  - OptSetVal
//  - OptMapVal
//  - ListMap
//  - MapMap
//  - I32WithCustomDefault
//  - StructWithCustomDefault
//  - StructWithFieldCustomDefault
type MyStruct struct {
  BoolVal bool
  ByteVal int8
  I16Val int16
  I32Val int32
  I64Val int64
  FloatVal float32
  DoubleVal float64
  StringVal string
  BinaryVal []byte
  EnumVal MyEnum
  StructVal *MyData
  UnionVal *MyUnion
  LateStructVal *LateDefStruct
  OptBoolVal bool
  OptByteVal int8
  OptI16Val int16
  OptI32Val int32
  OptI64Val int64
  OptFloatVal float32
  OptDoubleVal float64
  OptStringVal string
  OptBinaryVal []byte
  OptEnumVal MyEnum
  OptStructVal *MyData
  OptLateStructVal *LateDefStruct
  OptListVal []int16
  OptSetVal []string
  OptMapVal map[string]string
  ListMap []map[string]int32
  MapMap map[string]map[string]int32
  I32WithCustomDefault int32
  StructWithCustomDefault *MyDataWithCustomDefault
  StructWithFieldCustomDefault *MyData
}

func NewMyStruct() *MyStruct {
  return &MyStruct{
    StructVal: NewMyData(),
    LateStructVal: NewLateDefStruct(),
    I32WithCustomDefault: 1,
    StructWithCustomDefault: NewMyDataWithCustomDefault(),
    StructWithFieldCustomDefault: NewMyData(),
  }
}


func (p *MyStruct) GetBoolVal() bool {
  return p.BoolVal
}

func (p *MyStruct) GetByteVal() int8 {
  return p.ByteVal
}

func (p *MyStruct) GetI16Val() int16 {
  return p.I16Val
}

func (p *MyStruct) GetI32Val() int32 {
  return p.I32Val
}

func (p *MyStruct) GetI64Val() int64 {
  return p.I64Val
}

func (p *MyStruct) GetFloatVal() float32 {
  return p.FloatVal
}

func (p *MyStruct) GetDoubleVal() float64 {
  return p.DoubleVal
}

func (p *MyStruct) GetStringVal() string {
  return p.StringVal
}

func (p *MyStruct) GetBinaryVal() []byte {
  return p.BinaryVal
}

func (p *MyStruct) GetEnumVal() MyEnum {
  return p.EnumVal
}
var MyStruct_StructVal_DEFAULT *MyData
func (p *MyStruct) GetStructVal() *MyData {
  if !p.IsSetStructVal() {
    return MyStruct_StructVal_DEFAULT
  }
  return p.StructVal
}
func (p *MyStruct) DefaultGetStructVal() *MyData {
  if !p.IsSetStructVal() {
    return NewMyData()
  }
  return p.StructVal
}
var MyStruct_UnionVal_DEFAULT *MyUnion
func (p *MyStruct) GetUnionVal() *MyUnion {
  if !p.IsSetUnionVal() {
    return MyStruct_UnionVal_DEFAULT
  }
  return p.UnionVal
}
func (p *MyStruct) DefaultGetUnionVal() *MyUnion {
  if !p.IsSetUnionVal() {
    return NewMyUnion()
  }
  return p.UnionVal
}
var MyStruct_LateStructVal_DEFAULT *LateDefStruct
func (p *MyStruct) GetLateStructVal() *LateDefStruct {
  if !p.IsSetLateStructVal() {
    return MyStruct_LateStructVal_DEFAULT
  }
  return p.LateStructVal
}
var MyStruct_OptBoolVal_DEFAULT bool
func (p *MyStruct) GetOptBoolVal() bool {
  if !p.IsSetOptBoolVal() {
    return MyStruct_OptBoolVal_DEFAULT
  }
  return *p.OptBoolVal
}
var MyStruct_OptByteVal_DEFAULT int8
func (p *MyStruct) GetOptByteVal() int8 {
  if !p.IsSetOptByteVal() {
    return MyStruct_OptByteVal_DEFAULT
  }
  return *p.OptByteVal
}
var MyStruct_OptI16Val_DEFAULT int16
func (p *MyStruct) GetOptI16Val() int16 {
  if !p.IsSetOptI16Val() {
    return MyStruct_OptI16Val_DEFAULT
  }
  return *p.OptI16Val
}
var MyStruct_OptI32Val_DEFAULT int32
func (p *MyStruct) GetOptI32Val() int32 {
  if !p.IsSetOptI32Val() {
    return MyStruct_OptI32Val_DEFAULT
  }
  return *p.OptI32Val
}
var MyStruct_OptI64Val_DEFAULT int64
func (p *MyStruct) GetOptI64Val() int64 {
  if !p.IsSetOptI64Val() {
    return MyStruct_OptI64Val_DEFAULT
  }
  return *p.OptI64Val
}
var MyStruct_OptFloatVal_DEFAULT float32
func (p *MyStruct) GetOptFloatVal() float32 {
  if !p.IsSetOptFloatVal() {
    return MyStruct_OptFloatVal_DEFAULT
  }
  return *p.OptFloatVal
}
var MyStruct_OptDoubleVal_DEFAULT float64
func (p *MyStruct) GetOptDoubleVal() float64 {
  if !p.IsSetOptDoubleVal() {
    return MyStruct_OptDoubleVal_DEFAULT
  }
  return *p.OptDoubleVal
}
var MyStruct_OptStringVal_DEFAULT string
func (p *MyStruct) GetOptStringVal() string {
  if !p.IsSetOptStringVal() {
    return MyStruct_OptStringVal_DEFAULT
  }
  return *p.OptStringVal
}
var MyStruct_OptBinaryVal_DEFAULT []byte

func (p *MyStruct) GetOptBinaryVal() []byte {
  return p.OptBinaryVal
}
var MyStruct_OptEnumVal_DEFAULT MyEnum
func (p *MyStruct) GetOptEnumVal() MyEnum {
  if !p.IsSetOptEnumVal() {
    return MyStruct_OptEnumVal_DEFAULT
  }
  return *p.OptEnumVal
}
var MyStruct_OptStructVal_DEFAULT *MyData
func (p *MyStruct) GetOptStructVal() *MyData {
  if !p.IsSetOptStructVal() {
    return MyStruct_OptStructVal_DEFAULT
  }
  return p.OptStructVal
}
func (p *MyStruct) DefaultGetOptStructVal() *MyData {
  if !p.IsSetOptStructVal() {
    return NewMyData()
  }
  return p.OptStructVal
}
var MyStruct_OptLateStructVal_DEFAULT *LateDefStruct
func (p *MyStruct) GetOptLateStructVal() *LateDefStruct {
  if !p.IsSetOptLateStructVal() {
    return MyStruct_OptLateStructVal_DEFAULT
  }
  return p.OptLateStructVal
}
var MyStruct_OptListVal_DEFAULT []int16

func (p *MyStruct) GetOptListVal() []int16 {
  return p.OptListVal
}
var MyStruct_OptSetVal_DEFAULT []string

func (p *MyStruct) GetOptSetVal() []string {
  return p.OptSetVal
}
var MyStruct_OptMapVal_DEFAULT map[string]string

func (p *MyStruct) GetOptMapVal() map[string]string {
  return p.OptMapVal
}

func (p *MyStruct) GetListMap() []map[string]int32 {
  return p.ListMap
}

func (p *MyStruct) GetMapMap() map[string]map[string]int32 {
  return p.MapMap
}

func (p *MyStruct) GetI32WithCustomDefault() int32 {
  return p.I32WithCustomDefault
}
var MyStruct_StructWithCustomDefault_DEFAULT *MyDataWithCustomDefault
func (p *MyStruct) GetStructWithCustomDefault() *MyDataWithCustomDefault {
  if !p.IsSetStructWithCustomDefault() {
    return MyStruct_StructWithCustomDefault_DEFAULT
  }
  return p.StructWithCustomDefault
}
func (p *MyStruct) DefaultGetStructWithCustomDefault() *MyDataWithCustomDefault {
  if !p.IsSetStructWithCustomDefault() {
    return NewMyDataWithCustomDefault()
  }
  return p.StructWithCustomDefault
}
var MyStruct_StructWithFieldCustomDefault_DEFAULT *MyData = &MyData{
  Data1: "1",
  Data2: 2,
}
func (p *MyStruct) GetStructWithFieldCustomDefault() *MyData {
  if !p.IsSetStructWithFieldCustomDefault() {
    return MyStruct_StructWithFieldCustomDefault_DEFAULT
  }
  return p.StructWithFieldCustomDefault
}
func (p *MyStruct) DefaultGetStructWithFieldCustomDefault() *MyData {
  if !p.IsSetStructWithFieldCustomDefault() {
    return NewMyData()
  }
  return p.StructWithFieldCustomDefault
}
func (p *MyStruct) IsSetStructVal() bool {
  return p != nil && p.StructVal != nil
}

func (p *MyStruct) IsSetUnionVal() bool {
  return p != nil && p.UnionVal != nil
}

func (p *MyStruct) IsSetLateStructVal() bool {
  return p != nil && p.LateStructVal != nil
}

func (p *MyStruct) IsSetOptBoolVal() bool {
  return p != nil && p.OptBoolVal != nil
}

func (p *MyStruct) IsSetOptByteVal() bool {
  return p != nil && p.OptByteVal != nil
}

func (p *MyStruct) IsSetOptI16Val() bool {
  return p != nil && p.OptI16Val != nil
}

func (p *MyStruct) IsSetOptI32Val() bool {
  return p != nil && p.OptI32Val != nil
}

func (p *MyStruct) IsSetOptI64Val() bool {
  return p != nil && p.OptI64Val != nil
}

func (p *MyStruct) IsSetOptFloatVal() bool {
  return p != nil && p.OptFloatVal != nil
}

func (p *MyStruct) IsSetOptDoubleVal() bool {
  return p != nil && p.OptDoubleVal != nil
}

func (p *MyStruct) IsSetOptStringVal() bool {
  return p != nil && p.OptStringVal != nil
}

func (p *MyStruct) IsSetOptBinaryVal() bool {
  return p != nil && p.OptBinaryVal != nil
}

func (p *MyStruct) IsSetOptEnumVal() bool {
  return p != nil && p.OptEnumVal != nil
}

func (p *MyStruct) IsSetOptStructVal() bool {
  return p != nil && p.OptStructVal != nil
}

func (p *MyStruct) IsSetOptLateStructVal() bool {
  return p != nil && p.OptLateStructVal != nil
}

func (p *MyStruct) IsSetOptListVal() bool {
  return p != nil && p.OptListVal != nil
}

func (p *MyStruct) IsSetOptSetVal() bool {
  return p != nil && p.OptSetVal != nil
}

func (p *MyStruct) IsSetOptMapVal() bool {
  return p != nil && p.OptMapVal != nil
}

func (p *MyStruct) IsSetStructWithCustomDefault() bool {
  return p != nil && p.StructWithCustomDefault != nil
}

func (p *MyStruct) IsSetStructWithFieldCustomDefault() bool {
  return p != nil && p.StructWithFieldCustomDefault != nil
}

type MyStructBuilder struct {
  obj *MyStruct
}

func NewMyStructBuilder() *MyStructBuilder{
  return &MyStructBuilder{
    obj: NewMyStruct(),
  }
}

func (p MyStructBuilder) Emit() *MyStruct{
  return &MyStruct{
    BoolVal: p.obj.BoolVal,
    ByteVal: p.obj.ByteVal,
    I16Val: p.obj.I16Val,
    I32Val: p.obj.I32Val,
    I64Val: p.obj.I64Val,
    FloatVal: p.obj.FloatVal,
    DoubleVal: p.obj.DoubleVal,
    StringVal: p.obj.StringVal,
    BinaryVal: p.obj.BinaryVal,
    EnumVal: p.obj.EnumVal,
    StructVal: p.obj.StructVal,
    UnionVal: p.obj.UnionVal,
    LateStructVal: p.obj.LateStructVal,
    OptBoolVal: p.obj.OptBoolVal,
    OptByteVal: p.obj.OptByteVal,
    OptI16Val: p.obj.OptI16Val,
    OptI32Val: p.obj.OptI32Val,
    OptI64Val: p.obj.OptI64Val,
    OptFloatVal: p.obj.OptFloatVal,
    OptDoubleVal: p.obj.OptDoubleVal,
    OptStringVal: p.obj.OptStringVal,
    OptBinaryVal: p.obj.OptBinaryVal,
    OptEnumVal: p.obj.OptEnumVal,
    OptStructVal: p.obj.OptStructVal,
    OptLateStructVal: p.obj.OptLateStructVal,
    OptListVal: p.obj.OptListVal,
    OptSetVal: p.obj.OptSetVal,
    OptMapVal: p.obj.OptMapVal,
    ListMap: p.obj.ListMap,
    MapMap: p.obj.MapMap,
    I32WithCustomDefault: p.obj.I32WithCustomDefault,
    StructWithCustomDefault: p.obj.StructWithCustomDefault,
    StructWithFieldCustomDefault: p.obj.StructWithFieldCustomDefault,
  }
}

func (m *MyStructBuilder) BoolVal(boolVal bool) *MyStructBuilder {
  m.obj.BoolVal = boolVal
  return m
}

func (m *MyStructBuilder) ByteVal(byteVal int8) *MyStructBuilder {
  m.obj.ByteVal = byteVal
  return m
}

func (m *MyStructBuilder) I16Val(i16Val int16) *MyStructBuilder {
  m.obj.I16Val = i16Val
  return m
}

func (m *MyStructBuilder) I32Val(i32Val int32) *MyStructBuilder {
  m.obj.I32Val = i32Val
  return m
}

func (m *MyStructBuilder) I64Val(i64Val int64) *MyStructBuilder {
  m.obj.I64Val = i64Val
  return m
}

func (m *MyStructBuilder) FloatVal(floatVal float32) *MyStructBuilder {
  m.obj.FloatVal = floatVal
  return m
}

func (m *MyStructBuilder) DoubleVal(doubleVal float64) *MyStructBuilder {
  m.obj.DoubleVal = doubleVal
  return m
}

func (m *MyStructBuilder) StringVal(stringVal string) *MyStructBuilder {
  m.obj.StringVal = stringVal
  return m
}

func (m *MyStructBuilder) BinaryVal(binaryVal []byte) *MyStructBuilder {
  m.obj.BinaryVal = binaryVal
  return m
}

func (m *MyStructBuilder) EnumVal(enumVal MyEnum) *MyStructBuilder {
  m.obj.EnumVal = enumVal
  return m
}

func (m *MyStructBuilder) StructVal(structVal *MyData) *MyStructBuilder {
  m.obj.StructVal = structVal
  return m
}

func (m *MyStructBuilder) UnionVal(unionVal *MyUnion) *MyStructBuilder {
  m.obj.UnionVal = unionVal
  return m
}

func (m *MyStructBuilder) LateStructVal(lateStructVal *LateDefStruct) *MyStructBuilder {
  m.obj.LateStructVal = lateStructVal
  return m
}

func (m *MyStructBuilder) OptBoolVal(optBoolVal *bool) *MyStructBuilder {
  m.obj.OptBoolVal = optBoolVal
  return m
}

func (m *MyStructBuilder) OptByteVal(optByteVal *int8) *MyStructBuilder {
  m.obj.OptByteVal = optByteVal
  return m
}

func (m *MyStructBuilder) OptI16Val(optI16Val *int16) *MyStructBuilder {
  m.obj.OptI16Val = optI16Val
  return m
}

func (m *MyStructBuilder) OptI32Val(optI32Val *int32) *MyStructBuilder {
  m.obj.OptI32Val = optI32Val
  return m
}

func (m *MyStructBuilder) OptI64Val(optI64Val *int64) *MyStructBuilder {
  m.obj.OptI64Val = optI64Val
  return m
}

func (m *MyStructBuilder) OptFloatVal(optFloatVal *float32) *MyStructBuilder {
  m.obj.OptFloatVal = optFloatVal
  return m
}

func (m *MyStructBuilder) OptDoubleVal(optDoubleVal *float64) *MyStructBuilder {
  m.obj.OptDoubleVal = optDoubleVal
  return m
}

func (m *MyStructBuilder) OptStringVal(optStringVal *string) *MyStructBuilder {
  m.obj.OptStringVal = optStringVal
  return m
}

func (m *MyStructBuilder) OptBinaryVal(optBinaryVal []byte) *MyStructBuilder {
  m.obj.OptBinaryVal = optBinaryVal
  return m
}

func (m *MyStructBuilder) OptEnumVal(optEnumVal *MyEnum) *MyStructBuilder {
  m.obj.OptEnumVal = optEnumVal
  return m
}

func (m *MyStructBuilder) OptStructVal(optStructVal *MyData) *MyStructBuilder {
  m.obj.OptStructVal = optStructVal
  return m
}

func (m *MyStructBuilder) OptLateStructVal(optLateStructVal *LateDefStruct) *MyStructBuilder {
  m.obj.OptLateStructVal = optLateStructVal
  return m
}

func (m *MyStructBuilder) OptListVal(optListVal []int16) *MyStructBuilder {
  m.obj.OptListVal = optListVal
  return m
}

func (m *MyStructBuilder) OptSetVal(optSetVal []string) *MyStructBuilder {
  m.obj.OptSetVal = optSetVal
  return m
}

func (m *MyStructBuilder) OptMapVal(optMapVal map[string]string) *MyStructBuilder {
  m.obj.OptMapVal = optMapVal
  return m
}

func (m *MyStructBuilder) ListMap(listMap []map[string]int32) *MyStructBuilder {
  m.obj.ListMap = listMap
  return m
}

func (m *MyStructBuilder) MapMap(mapMap map[string]map[string]int32) *MyStructBuilder {
  m.obj.MapMap = mapMap
  return m
}

func (m *MyStructBuilder) I32WithCustomDefault(i32WithCustomDefault int32) *MyStructBuilder {
  m.obj.I32WithCustomDefault = i32WithCustomDefault
  return m
}

func (m *MyStructBuilder) StructWithCustomDefault(structWithCustomDefault *MyDataWithCustomDefault) *MyStructBuilder {
  m.obj.StructWithCustomDefault = structWithCustomDefault
  return m
}

func (m *MyStructBuilder) StructWithFieldCustomDefault(structWithFieldCustomDefault *MyData) *MyStructBuilder {
  m.obj.StructWithFieldCustomDefault = structWithFieldCustomDefault
  return m
}

func (m *MyStruct) SetBoolVal(boolVal bool) *MyStruct {
  m.BoolVal = boolVal
  return m
}

func (m *MyStruct) SetByteVal(byteVal int8) *MyStruct {
  m.ByteVal = byteVal
  return m
}

func (m *MyStruct) SetI16Val(i16Val int16) *MyStruct {
  m.I16Val = i16Val
  return m
}

func (m *MyStruct) SetI32Val(i32Val int32) *MyStruct {
  m.I32Val = i32Val
  return m
}

func (m *MyStruct) SetI64Val(i64Val int64) *MyStruct {
  m.I64Val = i64Val
  return m
}

func (m *MyStruct) SetFloatVal(floatVal float32) *MyStruct {
  m.FloatVal = floatVal
  return m
}

func (m *MyStruct) SetDoubleVal(doubleVal float64) *MyStruct {
  m.DoubleVal = doubleVal
  return m
}

func (m *MyStruct) SetStringVal(stringVal string) *MyStruct {
  m.StringVal = stringVal
  return m
}

func (m *MyStruct) SetBinaryVal(binaryVal []byte) *MyStruct {
  m.BinaryVal = binaryVal
  return m
}

func (m *MyStruct) SetEnumVal(enumVal MyEnum) *MyStruct {
  m.EnumVal = enumVal
  return m
}

func (m *MyStruct) SetStructVal(structVal *MyData) *MyStruct {
  m.StructVal = structVal
  return m
}

func (m *MyStruct) SetUnionVal(unionVal *MyUnion) *MyStruct {
  m.UnionVal = unionVal
  return m
}

func (m *MyStruct) SetLateStructVal(lateStructVal *LateDefStruct) *MyStruct {
  m.LateStructVal = lateStructVal
  return m
}

func (m *MyStruct) SetOptBoolVal(optBoolVal *bool) *MyStruct {
  m.OptBoolVal = optBoolVal
  return m
}

func (m *MyStruct) SetOptByteVal(optByteVal *int8) *MyStruct {
  m.OptByteVal = optByteVal
  return m
}

func (m *MyStruct) SetOptI16Val(optI16Val *int16) *MyStruct {
  m.OptI16Val = optI16Val
  return m
}

func (m *MyStruct) SetOptI32Val(optI32Val *int32) *MyStruct {
  m.OptI32Val = optI32Val
  return m
}

func (m *MyStruct) SetOptI64Val(optI64Val *int64) *MyStruct {
  m.OptI64Val = optI64Val
  return m
}

func (m *MyStruct) SetOptFloatVal(optFloatVal *float32) *MyStruct {
  m.OptFloatVal = optFloatVal
  return m
}

func (m *MyStruct) SetOptDoubleVal(optDoubleVal *float64) *MyStruct {
  m.OptDoubleVal = optDoubleVal
  return m
}

func (m *MyStruct) SetOptStringVal(optStringVal *string) *MyStruct {
  m.OptStringVal = optStringVal
  return m
}

func (m *MyStruct) SetOptBinaryVal(optBinaryVal []byte) *MyStruct {
  m.OptBinaryVal = optBinaryVal
  return m
}

func (m *MyStruct) SetOptEnumVal(optEnumVal *MyEnum) *MyStruct {
  m.OptEnumVal = optEnumVal
  return m
}

func (m *MyStruct) SetOptStructVal(optStructVal *MyData) *MyStruct {
  m.OptStructVal = optStructVal
  return m
}

func (m *MyStruct) SetOptLateStructVal(optLateStructVal *LateDefStruct) *MyStruct {
  m.OptLateStructVal = optLateStructVal
  return m
}

func (m *MyStruct) SetOptListVal(optListVal []int16) *MyStruct {
  m.OptListVal = optListVal
  return m
}

func (m *MyStruct) SetOptSetVal(optSetVal []string) *MyStruct {
  m.OptSetVal = optSetVal
  return m
}

func (m *MyStruct) SetOptMapVal(optMapVal map[string]string) *MyStruct {
  m.OptMapVal = optMapVal
  return m
}

func (m *MyStruct) SetListMap(listMap []map[string]int32) *MyStruct {
  m.ListMap = listMap
  return m
}

func (m *MyStruct) SetMapMap(mapMap map[string]map[string]int32) *MyStruct {
  m.MapMap = mapMap
  return m
}

func (m *MyStruct) SetI32WithCustomDefault(i32WithCustomDefault int32) *MyStruct {
  m.I32WithCustomDefault = i32WithCustomDefault
  return m
}

func (m *MyStruct) SetStructWithCustomDefault(structWithCustomDefault *MyDataWithCustomDefault) *MyStruct {
  m.StructWithCustomDefault = structWithCustomDefault
  return m
}

func (m *MyStruct) SetStructWithFieldCustomDefault(structWithFieldCustomDefault *MyData) *MyStruct {
  m.StructWithFieldCustomDefault = structWithFieldCustomDefault
  return m
}

func (p *MyStruct) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    case -2:
      if err := p.ReadField_2(iprot); err != nil {
        return err
      }
    case -3:
      if err := p.ReadField_3(iprot); err != nil {
        return err
      }
    case -4:
      if err := p.ReadField_4(iprot); err != nil {
        return err
      }
    case -5:
      if err := p.ReadField_5(iprot); err != nil {
        return err
      }
    case -6:
      if err := p.ReadField_6(iprot); err != nil {
        return err
      }
    case -7:
      if err := p.ReadField_7(iprot); err != nil {
        return err
      }
    case -8:
      if err := p.ReadField_8(iprot); err != nil {
        return err
      }
    case -9:
      if err := p.ReadField_9(iprot); err != nil {
        return err
      }
    case -10:
      if err := p.ReadField_10(iprot); err != nil {
        return err
      }
    case -11:
      if err := p.ReadField_11(iprot); err != nil {
        return err
      }
    case -12:
      if err := p.ReadField_12(iprot); err != nil {
        return err
      }
    case -13:
      if err := p.ReadField_13(iprot); err != nil {
        return err
      }
    case -14:
      if err := p.ReadField_14(iprot); err != nil {
        return err
      }
    case -15:
      if err := p.ReadField_15(iprot); err != nil {
        return err
      }
    case -16:
      if err := p.ReadField_16(iprot); err != nil {
        return err
      }
    case -17:
      if err := p.ReadField_17(iprot); err != nil {
        return err
      }
    case -18:
      if err := p.ReadField_18(iprot); err != nil {
        return err
      }
    case -19:
      if err := p.ReadField_19(iprot); err != nil {
        return err
      }
    case -20:
      if err := p.ReadField_20(iprot); err != nil {
        return err
      }
    case -21:
      if err := p.ReadField_21(iprot); err != nil {
        return err
      }
    case -22:
      if err := p.ReadField_22(iprot); err != nil {
        return err
      }
    case -23:
      if err := p.ReadField_23(iprot); err != nil {
        return err
      }
    case -24:
      if err := p.ReadField_24(iprot); err != nil {
        return err
      }
    case -25:
      if err := p.ReadField_25(iprot); err != nil {
        return err
      }
    case -26:
      if err := p.ReadField_26(iprot); err != nil {
        return err
      }
    case -27:
      if err := p.ReadField_27(iprot); err != nil {
        return err
      }
    case -28:
      if err := p.ReadField_28(iprot); err != nil {
        return err
      }
    case -29:
      if err := p.ReadField_29(iprot); err != nil {
        return err
      }
    case -30:
      if err := p.ReadField_30(iprot); err != nil {
        return err
      }
    case -31:
      if err := p.ReadField_31(iprot); err != nil {
        return err
      }
    case -32:
      if err := p.ReadField_32(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStruct)  ReadField_1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field -1: ", err)
  } else {
    p.BoolVal = v
  }
  return nil
}

func (p *MyStruct)  ReadField_2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
    return thrift.PrependError("error reading field -2: ", err)
  } else {
    temp := int8(v)
    p.ByteVal = temp
  }
  return nil
}

func (p *MyStruct)  ReadField_3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
    return thrift.PrependError("error reading field -3: ", err)
  } else {
    p.I16Val = v
  }
  return nil
}

func (p *MyStruct)  ReadField_4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field -4: ", err)
  } else {
    p.I32Val = v
  }
  return nil
}

func (p *MyStruct)  ReadField_5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field -5: ", err)
  } else {
    p.I64Val = v
  }
  return nil
}

func (p *MyStruct)  ReadField_6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadFloat(); err != nil {
    return thrift.PrependError("error reading field -6: ", err)
  } else {
    p.FloatVal = v
  }
  return nil
}

func (p *MyStruct)  ReadField_7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field -7: ", err)
  } else {
    p.DoubleVal = v
  }
  return nil
}

func (p *MyStruct)  ReadField_8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field -8: ", err)
  } else {
    p.StringVal = v
  }
  return nil
}

func (p *MyStruct)  ReadField_9(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field -9: ", err)
  } else {
    p.BinaryVal = v
  }
  return nil
}

func (p *MyStruct)  ReadField_10(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field -10: ", err)
  } else {
    temp := MyEnum(v)
    p.EnumVal = temp
  }
  return nil
}

func (p *MyStruct)  ReadField_11(iprot thrift.Protocol) error {
  p.StructVal = NewMyData()
  if err := p.StructVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StructVal), err)
  }
  return nil
}

func (p *MyStruct)  ReadField_12(iprot thrift.Protocol) error {
  p.UnionVal = NewMyUnion()
  if err := p.UnionVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnionVal), err)
  }
  return nil
}

func (p *MyStruct)  ReadField_13(iprot thrift.Protocol) error {
  p.LateStructVal = NewLateDefStruct()
  if err := p.LateStructVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LateStructVal), err)
  }
  return nil
}

func (p *MyStruct)  ReadField_14(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field -14: ", err)
  } else {
    p.OptBoolVal = &v
  }
  return nil
}

func (p *MyStruct)  ReadField_15(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
    return thrift.PrependError("error reading field -15: ", err)
  } else {
    temp := int8(v)
    p.OptByteVal = &temp
  }
  return nil
}

func (p *MyStruct)  ReadField_16(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
    return thrift.PrependError("error reading field -16: ", err)
  } else {
    p.OptI16Val = &v
  }
  return nil
}

func (p *MyStruct)  ReadField_17(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field -17: ", err)
  } else {
    p.OptI32Val = &v
  }
  return nil
}

func (p *MyStruct)  ReadField_18(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field -18: ", err)
  } else {
    p.OptI64Val = &v
  }
  return nil
}

func (p *MyStruct)  ReadField_19(iprot thrift.Protocol) error {
  if v, err := iprot.ReadFloat(); err != nil {
    return thrift.PrependError("error reading field -19: ", err)
  } else {
    p.OptFloatVal = &v
  }
  return nil
}

func (p *MyStruct)  ReadField_20(iprot thrift.Protocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field -20: ", err)
  } else {
    p.OptDoubleVal = &v
  }
  return nil
}

func (p *MyStruct)  ReadField_21(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field -21: ", err)
  } else {
    p.OptStringVal = &v
  }
  return nil
}

func (p *MyStruct)  ReadField_22(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field -22: ", err)
  } else {
    p.OptBinaryVal = v
  }
  return nil
}

func (p *MyStruct)  ReadField_23(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field -23: ", err)
  } else {
    temp := MyEnum(v)
    p.OptEnumVal = &temp
  }
  return nil
}

func (p *MyStruct)  ReadField_24(iprot thrift.Protocol) error {
  p.OptStructVal = NewMyData()
  if err := p.OptStructVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptStructVal), err)
  }
  return nil
}

func (p *MyStruct)  ReadField_25(iprot thrift.Protocol) error {
  p.OptLateStructVal = NewLateDefStruct()
  if err := p.OptLateStructVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptLateStructVal), err)
  }
  return nil
}

func (p *MyStruct)  ReadField_26(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int16, 0, size)
  p.OptListVal =  tSlice
  for i := 0; i < size; i ++ {
    var _elem3 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem3 = v
    }
    p.OptListVal = append(p.OptListVal, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MyStruct)  ReadField_27(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.OptSetVal =  tSet
  for i := 0; i < size; i ++ {
    var _elem4 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem4 = v
    }
    p.OptSetVal = append(p.OptSetVal, _elem4)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *MyStruct)  ReadField_28(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.OptMapVal =  tMap
  for i := 0; i < size; i ++ {
    var _key5 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key5 = v
    }
    var _val6 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val6 = v
    }
    p.OptMapVal[_key5] = _val6
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStruct)  ReadField_29(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]map[string]int32, 0, size)
  p.ListMap =  tSlice
  for i := 0; i < size; i ++ {
    _, _, size, err := iprot.ReadMapBegin()
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[string]int32, size)
    _elem7 :=  tMap
    for i := 0; i < size; i ++ {
      var _key8 string
      if v, err := iprot.ReadString(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        _key8 = v
      }
      var _val9 int32
      if v, err := iprot.ReadI32(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        _val9 = v
      }
      _elem7[_key8] = _val9
    }
    if err := iprot.ReadMapEnd(); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.ListMap = append(p.ListMap, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MyStruct)  ReadField_30(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]map[string]int32, size)
  p.MapMap =  tMap
  for i := 0; i < size; i ++ {
    var _key10 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key10 = v
    }
    _, _, size, err := iprot.ReadMapBegin()
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[string]int32, size)
    _val11 :=  tMap
    for i := 0; i < size; i ++ {
      var _key12 string
      if v, err := iprot.ReadString(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        _key12 = v
      }
      var _val13 int32
      if v, err := iprot.ReadI32(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        _val13 = v
      }
      _val11[_key12] = _val13
    }
    if err := iprot.ReadMapEnd(); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.MapMap[_key10] = _val11
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStruct)  ReadField_31(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field -31: ", err)
  } else {
    p.I32WithCustomDefault = v
  }
  return nil
}

func (p *MyStruct)  ReadField_32(iprot thrift.Protocol) error {
  p.StructWithCustomDefault = NewMyDataWithCustomDefault()
  if err := p.StructWithCustomDefault.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StructWithCustomDefault), err)
  }
  return nil
}

func (p *MyStruct)  ReadField1(iprot thrift.Protocol) error {
  p.StructWithFieldCustomDefault = NewMyData()
  if err := p.StructWithFieldCustomDefault.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StructWithFieldCustomDefault), err)
  }
  return nil
}

func (p *MyStruct) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField_32(oprot); err != nil { return err }
  if err := p.writeField_31(oprot); err != nil { return err }
  if err := p.writeField_30(oprot); err != nil { return err }
  if err := p.writeField_29(oprot); err != nil { return err }
  if err := p.writeField_28(oprot); err != nil { return err }
  if err := p.writeField_27(oprot); err != nil { return err }
  if err := p.writeField_26(oprot); err != nil { return err }
  if err := p.writeField_25(oprot); err != nil { return err }
  if err := p.writeField_24(oprot); err != nil { return err }
  if err := p.writeField_23(oprot); err != nil { return err }
  if err := p.writeField_22(oprot); err != nil { return err }
  if err := p.writeField_21(oprot); err != nil { return err }
  if err := p.writeField_20(oprot); err != nil { return err }
  if err := p.writeField_19(oprot); err != nil { return err }
  if err := p.writeField_18(oprot); err != nil { return err }
  if err := p.writeField_17(oprot); err != nil { return err }
  if err := p.writeField_16(oprot); err != nil { return err }
  if err := p.writeField_15(oprot); err != nil { return err }
  if err := p.writeField_14(oprot); err != nil { return err }
  if err := p.writeField_13(oprot); err != nil { return err }
  if err := p.writeField_12(oprot); err != nil { return err }
  if err := p.writeField_11(oprot); err != nil { return err }
  if err := p.writeField_10(oprot); err != nil { return err }
  if err := p.writeField_9(oprot); err != nil { return err }
  if err := p.writeField_8(oprot); err != nil { return err }
  if err := p.writeField_7(oprot); err != nil { return err }
  if err := p.writeField_6(oprot); err != nil { return err }
  if err := p.writeField_5(oprot); err != nil { return err }
  if err := p.writeField_4(oprot); err != nil { return err }
  if err := p.writeField_3(oprot); err != nil { return err }
  if err := p.writeField_2(oprot); err != nil { return err }
  if err := p.writeField_1(oprot); err != nil { return err }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStruct) writeField_32(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("structWithCustomDefault", thrift.STRUCT, -32); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -32:structWithCustomDefault: ", p), err) }
  if err := p.StructWithCustomDefault.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StructWithCustomDefault), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -32:structWithCustomDefault: ", p), err) }
  return err
}

func (p *MyStruct) writeField_31(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("i32WithCustomDefault", thrift.I32, -31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -31:i32WithCustomDefault: ", p), err) }
  if err := oprot.WriteI32(int32(p.I32WithCustomDefault)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.i32WithCustomDefault (-31) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -31:i32WithCustomDefault: ", p), err) }
  return err
}

func (p *MyStruct) writeField_30(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("mapMap", thrift.MAP, -30); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -30:mapMap: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(p.MapMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.MapMap {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(v)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range v {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -30:mapMap: ", p), err) }
  return err
}

func (p *MyStruct) writeField_29(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("listMap", thrift.LIST, -29); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -29:listMap: ", p), err) }
  if err := oprot.WriteListBegin(thrift.MAP, len(p.ListMap)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ListMap {
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(v)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range v {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -29:listMap: ", p), err) }
  return err
}

func (p *MyStruct) writeField_28(oprot thrift.Protocol) (err error) {
  if p.IsSetOptMapVal() {
    if err := oprot.WriteFieldBegin("optMapVal", thrift.MAP, -28); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -28:optMapVal: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.OptMapVal)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.OptMapVal {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -28:optMapVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField_27(oprot thrift.Protocol) (err error) {
  if p.IsSetOptSetVal() {
    if err := oprot.WriteFieldBegin("optSetVal", thrift.SET, -27); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -27:optSetVal: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.STRING, len(p.OptSetVal)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    set := make(map[string]bool, len(p.OptSetVal))
    for _, v := range p.OptSetVal {
      if ok := set[v]; ok {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
      }
      set[v] = true
    }
    for _, v := range p.OptSetVal {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -27:optSetVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField_26(oprot thrift.Protocol) (err error) {
  if p.IsSetOptListVal() {
    if err := oprot.WriteFieldBegin("optListVal", thrift.LIST, -26); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -26:optListVal: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I16, len(p.OptListVal)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.OptListVal {
      if err := oprot.WriteI16(int16(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -26:optListVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField_25(oprot thrift.Protocol) (err error) {
  if p.IsSetOptLateStructVal() {
    if err := oprot.WriteFieldBegin("optLateStructVal", thrift.STRUCT, -25); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -25:optLateStructVal: ", p), err) }
    if err := p.OptLateStructVal.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptLateStructVal), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -25:optLateStructVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField_24(oprot thrift.Protocol) (err error) {
  if p.IsSetOptStructVal() {
    if err := oprot.WriteFieldBegin("optStructVal", thrift.STRUCT, -24); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -24:optStructVal: ", p), err) }
    if err := p.OptStructVal.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptStructVal), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -24:optStructVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField_23(oprot thrift.Protocol) (err error) {
  if p.IsSetOptEnumVal() {
    if err := oprot.WriteFieldBegin("optEnumVal", thrift.I32, -23); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -23:optEnumVal: ", p), err) }
    if err := oprot.WriteI32(int32(*p.OptEnumVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optEnumVal (-23) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -23:optEnumVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField_22(oprot thrift.Protocol) (err error) {
  if p.IsSetOptBinaryVal() {
    if err := oprot.WriteFieldBegin("optBinaryVal", thrift.STRING, -22); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -22:optBinaryVal: ", p), err) }
    if err := oprot.WriteBinary(p.OptBinaryVal); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optBinaryVal (-22) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -22:optBinaryVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField_21(oprot thrift.Protocol) (err error) {
  if p.IsSetOptStringVal() {
    if err := oprot.WriteFieldBegin("optStringVal", thrift.STRING, -21); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -21:optStringVal: ", p), err) }
    if err := oprot.WriteString(string(*p.OptStringVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optStringVal (-21) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -21:optStringVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField_20(oprot thrift.Protocol) (err error) {
  if p.IsSetOptDoubleVal() {
    if err := oprot.WriteFieldBegin("optDoubleVal", thrift.DOUBLE, -20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -20:optDoubleVal: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.OptDoubleVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optDoubleVal (-20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -20:optDoubleVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField_19(oprot thrift.Protocol) (err error) {
  if p.IsSetOptFloatVal() {
    if err := oprot.WriteFieldBegin("optFloatVal", thrift.FLOAT, -19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -19:optFloatVal: ", p), err) }
    if err := oprot.WriteFloat(float32(*p.OptFloatVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optFloatVal (-19) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -19:optFloatVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField_18(oprot thrift.Protocol) (err error) {
  if p.IsSetOptI64Val() {
    if err := oprot.WriteFieldBegin("optI64Val", thrift.I64, -18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -18:optI64Val: ", p), err) }
    if err := oprot.WriteI64(int64(*p.OptI64Val)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optI64Val (-18) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -18:optI64Val: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField_17(oprot thrift.Protocol) (err error) {
  if p.IsSetOptI32Val() {
    if err := oprot.WriteFieldBegin("optI32Val", thrift.I32, -17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -17:optI32Val: ", p), err) }
    if err := oprot.WriteI32(int32(*p.OptI32Val)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optI32Val (-17) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -17:optI32Val: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField_16(oprot thrift.Protocol) (err error) {
  if p.IsSetOptI16Val() {
    if err := oprot.WriteFieldBegin("optI16Val", thrift.I16, -16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -16:optI16Val: ", p), err) }
    if err := oprot.WriteI16(int16(*p.OptI16Val)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optI16Val (-16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -16:optI16Val: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField_15(oprot thrift.Protocol) (err error) {
  if p.IsSetOptByteVal() {
    if err := oprot.WriteFieldBegin("optByteVal", thrift.BYTE, -15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -15:optByteVal: ", p), err) }
    if err := oprot.WriteByte(byte(*p.OptByteVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optByteVal (-15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -15:optByteVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField_14(oprot thrift.Protocol) (err error) {
  if p.IsSetOptBoolVal() {
    if err := oprot.WriteFieldBegin("optBoolVal", thrift.BOOL, -14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -14:optBoolVal: ", p), err) }
    if err := oprot.WriteBool(bool(*p.OptBoolVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optBoolVal (-14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -14:optBoolVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField_13(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("lateStructVal", thrift.STRUCT, -13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -13:lateStructVal: ", p), err) }
  if err := p.LateStructVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LateStructVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -13:lateStructVal: ", p), err) }
  return err
}

func (p *MyStruct) writeField_12(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("unionVal", thrift.STRUCT, -12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -12:unionVal: ", p), err) }
  if err := p.UnionVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnionVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -12:unionVal: ", p), err) }
  return err
}

func (p *MyStruct) writeField_11(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("structVal", thrift.STRUCT, -11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -11:structVal: ", p), err) }
  if err := p.StructVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StructVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -11:structVal: ", p), err) }
  return err
}

func (p *MyStruct) writeField_10(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("enumVal", thrift.I32, -10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -10:enumVal: ", p), err) }
  if err := oprot.WriteI32(int32(p.EnumVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enumVal (-10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -10:enumVal: ", p), err) }
  return err
}

func (p *MyStruct) writeField_9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("binaryVal", thrift.STRING, -9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -9:binaryVal: ", p), err) }
  if err := oprot.WriteBinary(p.BinaryVal); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.binaryVal (-9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -9:binaryVal: ", p), err) }
  return err
}

func (p *MyStruct) writeField_8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("stringVal", thrift.STRING, -8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -8:stringVal: ", p), err) }
  if err := oprot.WriteString(string(p.StringVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stringVal (-8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -8:stringVal: ", p), err) }
  return err
}

func (p *MyStruct) writeField_7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("doubleVal", thrift.DOUBLE, -7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -7:doubleVal: ", p), err) }
  if err := oprot.WriteDouble(float64(p.DoubleVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.doubleVal (-7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -7:doubleVal: ", p), err) }
  return err
}

func (p *MyStruct) writeField_6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("floatVal", thrift.FLOAT, -6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -6:floatVal: ", p), err) }
  if err := oprot.WriteFloat(float32(p.FloatVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.floatVal (-6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -6:floatVal: ", p), err) }
  return err
}

func (p *MyStruct) writeField_5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("i64Val", thrift.I64, -5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -5:i64Val: ", p), err) }
  if err := oprot.WriteI64(int64(p.I64Val)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.i64Val (-5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -5:i64Val: ", p), err) }
  return err
}

func (p *MyStruct) writeField_4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("i32Val", thrift.I32, -4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -4:i32Val: ", p), err) }
  if err := oprot.WriteI32(int32(p.I32Val)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.i32Val (-4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -4:i32Val: ", p), err) }
  return err
}

func (p *MyStruct) writeField_3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("i16Val", thrift.I16, -3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -3:i16Val: ", p), err) }
  if err := oprot.WriteI16(int16(p.I16Val)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.i16Val (-3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -3:i16Val: ", p), err) }
  return err
}

func (p *MyStruct) writeField_2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("byteVal", thrift.BYTE, -2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -2:byteVal: ", p), err) }
  if err := oprot.WriteByte(byte(p.ByteVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.byteVal (-2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -2:byteVal: ", p), err) }
  return err
}

func (p *MyStruct) writeField_1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("boolVal", thrift.BOOL, -1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:boolVal: ", p), err) }
  if err := oprot.WriteBool(bool(p.BoolVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.boolVal (-1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -1:boolVal: ", p), err) }
  return err
}

func (p *MyStruct) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("structWithFieldCustomDefault", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:structWithFieldCustomDefault: ", p), err) }
  if err := p.StructWithFieldCustomDefault.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StructWithFieldCustomDefault), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:structWithFieldCustomDefault: ", p), err) }
  return err
}

func (p *MyStruct) String() string {
  if p == nil {
    return "<nil>"
  }

  var structWithCustomDefaultVal string
  if p.StructWithCustomDefault == nil {
    structWithCustomDefaultVal = "<nil>"
  } else {
    structWithCustomDefaultVal = fmt.Sprintf("%v", p.StructWithCustomDefault)
  }
  i32WithCustomDefaultVal := fmt.Sprintf("%v", p.I32WithCustomDefault)
  mapMapVal := fmt.Sprintf("%v", p.MapMap)
  listMapVal := fmt.Sprintf("%v", p.ListMap)
  optMapValVal := fmt.Sprintf("%v", p.OptMapVal)
  optSetValVal := fmt.Sprintf("%v", p.OptSetVal)
  optListValVal := fmt.Sprintf("%v", p.OptListVal)
  var optLateStructValVal string
  if p.OptLateStructVal == nil {
    optLateStructValVal = "<nil>"
  } else {
    optLateStructValVal = fmt.Sprintf("%v", p.OptLateStructVal)
  }
  var optStructValVal string
  if p.OptStructVal == nil {
    optStructValVal = "<nil>"
  } else {
    optStructValVal = fmt.Sprintf("%v", p.OptStructVal)
  }
  var optEnumValVal string
  if p.OptEnumVal == nil {
    optEnumValVal = "<nil>"
  } else {
    optEnumValVal = fmt.Sprintf("%v", *p.OptEnumVal)
  }
  optBinaryValVal := fmt.Sprintf("%v", p.OptBinaryVal)
  var optStringValVal string
  if p.OptStringVal == nil {
    optStringValVal = "<nil>"
  } else {
    optStringValVal = fmt.Sprintf("%v", *p.OptStringVal)
  }
  var optDoubleValVal string
  if p.OptDoubleVal == nil {
    optDoubleValVal = "<nil>"
  } else {
    optDoubleValVal = fmt.Sprintf("%v", *p.OptDoubleVal)
  }
  var optFloatValVal string
  if p.OptFloatVal == nil {
    optFloatValVal = "<nil>"
  } else {
    optFloatValVal = fmt.Sprintf("%v", *p.OptFloatVal)
  }
  var optI64ValVal string
  if p.OptI64Val == nil {
    optI64ValVal = "<nil>"
  } else {
    optI64ValVal = fmt.Sprintf("%v", *p.OptI64Val)
  }
  var optI32ValVal string
  if p.OptI32Val == nil {
    optI32ValVal = "<nil>"
  } else {
    optI32ValVal = fmt.Sprintf("%v", *p.OptI32Val)
  }
  var optI16ValVal string
  if p.OptI16Val == nil {
    optI16ValVal = "<nil>"
  } else {
    optI16ValVal = fmt.Sprintf("%v", *p.OptI16Val)
  }
  var optByteValVal string
  if p.OptByteVal == nil {
    optByteValVal = "<nil>"
  } else {
    optByteValVal = fmt.Sprintf("%v", *p.OptByteVal)
  }
  var optBoolValVal string
  if p.OptBoolVal == nil {
    optBoolValVal = "<nil>"
  } else {
    optBoolValVal = fmt.Sprintf("%v", *p.OptBoolVal)
  }
  var lateStructValVal string
  if p.LateStructVal == nil {
    lateStructValVal = "<nil>"
  } else {
    lateStructValVal = fmt.Sprintf("%v", p.LateStructVal)
  }
  var unionValVal string
  if p.UnionVal == nil {
    unionValVal = "<nil>"
  } else {
    unionValVal = fmt.Sprintf("%v", p.UnionVal)
  }
  var structValVal string
  if p.StructVal == nil {
    structValVal = "<nil>"
  } else {
    structValVal = fmt.Sprintf("%v", p.StructVal)
  }
  enumValVal := fmt.Sprintf("%v", p.EnumVal)
  binaryValVal := fmt.Sprintf("%v", p.BinaryVal)
  stringValVal := fmt.Sprintf("%v", p.StringVal)
  doubleValVal := fmt.Sprintf("%v", p.DoubleVal)
  floatValVal := fmt.Sprintf("%v", p.FloatVal)
  i64ValVal := fmt.Sprintf("%v", p.I64Val)
  i32ValVal := fmt.Sprintf("%v", p.I32Val)
  i16ValVal := fmt.Sprintf("%v", p.I16Val)
  byteValVal := fmt.Sprintf("%v", p.ByteVal)
  boolValVal := fmt.Sprintf("%v", p.BoolVal)
  var structWithFieldCustomDefaultVal string
  if p.StructWithFieldCustomDefault == nil {
    structWithFieldCustomDefaultVal = "<nil>"
  } else {
    structWithFieldCustomDefaultVal = fmt.Sprintf("%v", p.StructWithFieldCustomDefault)
  }
  return fmt.Sprintf("MyStruct({StructWithCustomDefault:%s I32WithCustomDefault:%s MapMap:%s ListMap:%s OptMapVal:%s OptSetVal:%s OptListVal:%s OptLateStructVal:%s OptStructVal:%s OptEnumVal:%s OptBinaryVal:%s OptStringVal:%s OptDoubleVal:%s OptFloatVal:%s OptI64Val:%s OptI32Val:%s OptI16Val:%s OptByteVal:%s OptBoolVal:%s LateStructVal:%s UnionVal:%s StructVal:%s EnumVal:%s BinaryVal:%s StringVal:%s DoubleVal:%s FloatVal:%s I64Val:%s I32Val:%s I16Val:%s ByteVal:%s BoolVal:%s StructWithFieldCustomDefault:%s})", structWithCustomDefaultVal, i32WithCustomDefaultVal, mapMapVal, listMapVal, optMapValVal, optSetValVal, optListValVal, optLateStructValVal, optStructValVal, optEnumValVal, optBinaryValVal, optStringValVal, optDoubleValVal, optFloatValVal, optI64ValVal, optI32ValVal, optI16ValVal, optByteValVal, optBoolValVal, lateStructValVal, unionValVal, structValVal, enumValVal, binaryValVal, stringValVal, doubleValVal, floatValVal, i64ValVal, i32ValVal, i16ValVal, byteValVal, boolValVal, structWithFieldCustomDefaultVal)
}

type LateDefStruct struct {
}

func NewLateDefStruct() *LateDefStruct {
  return &LateDefStruct{}
}

type LateDefStructBuilder struct {
  obj *LateDefStruct
}

func NewLateDefStructBuilder() *LateDefStructBuilder{
  return &LateDefStructBuilder{
    obj: NewLateDefStruct(),
  }
}

func (p LateDefStructBuilder) Emit() *LateDefStruct{
  return &LateDefStruct{
  }
}

func (p *LateDefStruct) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LateDefStruct) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("LateDefStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LateDefStruct) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("LateDefStruct({})")
}

// Attributes:
//  - Nodes
type Recursive struct {
  Nodes map[string]*Recursive
}

func NewRecursive() *Recursive {
  return &Recursive{}
}


func (p *Recursive) GetNodes() map[string]*Recursive {
  return p.Nodes
}
type RecursiveBuilder struct {
  obj *Recursive
}

func NewRecursiveBuilder() *RecursiveBuilder{
  return &RecursiveBuilder{
    obj: NewRecursive(),
  }
}

func (p RecursiveBuilder) Emit() *Recursive{
  return &Recursive{
    Nodes: p.obj.Nodes,
  }
}

func (r *RecursiveBuilder) Nodes(nodes map[string]*Recursive) *RecursiveBuilder {
  r.obj.Nodes = nodes
  return r
}

func (r *Recursive) SetNodes(nodes map[string]*Recursive) *Recursive {
  r.Nodes = nodes
  return r
}

func (p *Recursive) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Recursive)  ReadField_1(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*Recursive, size)
  p.Nodes =  tMap
  for i := 0; i < size; i ++ {
    var _key14 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key14 = v
    }
    _val15 := NewRecursive()
    if err := _val15.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val15), err)
    }
    p.Nodes[_key14] = _val15
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Recursive) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Recursive"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField_1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Recursive) writeField_1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("nodes", thrift.MAP, -1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:nodes: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Nodes)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Nodes {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -1:nodes: ", p), err) }
  return err
}

func (p *Recursive) String() string {
  if p == nil {
    return "<nil>"
  }

  nodesVal := fmt.Sprintf("%v", p.Nodes)
  return fmt.Sprintf("Recursive({Nodes:%s})", nodesVal)
}

// Attributes:
//  - Loop
type Bar struct {
  Loop *Loop
}

func NewBar() *Bar {
  return &Bar{
    Loop: NewLoop(),
  }
}

var Bar_Loop_DEFAULT *Loop
func (p *Bar) GetLoop() *Loop {
  if !p.IsSetLoop() {
    return Bar_Loop_DEFAULT
  }
  return p.Loop
}
func (p *Bar) IsSetLoop() bool {
  return p != nil && p.Loop != nil
}

type BarBuilder struct {
  obj *Bar
}

func NewBarBuilder() *BarBuilder{
  return &BarBuilder{
    obj: NewBar(),
  }
}

func (p BarBuilder) Emit() *Bar{
  return &Bar{
    Loop: p.obj.Loop,
  }
}

func (b *BarBuilder) Loop(loop *Loop) *BarBuilder {
  b.obj.Loop = loop
  return b
}

func (b *Bar) SetLoop(loop *Loop) *Bar {
  b.Loop = loop
  return b
}

func (p *Bar) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Bar)  ReadField_1(iprot thrift.Protocol) error {
  p.Loop = NewLoop()
  if err := p.Loop.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Loop), err)
  }
  return nil
}

func (p *Bar) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Bar"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField_1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Bar) writeField_1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("loop", thrift.STRUCT, -1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:loop: ", p), err) }
  if err := p.Loop.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Loop), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -1:loop: ", p), err) }
  return err
}

func (p *Bar) String() string {
  if p == nil {
    return "<nil>"
  }

  var loopVal string
  if p.Loop == nil {
    loopVal = "<nil>"
  } else {
    loopVal = fmt.Sprintf("%v", p.Loop)
  }
  return fmt.Sprintf("Bar({Loop:%s})", loopVal)
}

// Attributes:
//  - Bar
type Loop struct {
  Bar *Bar
}

func NewLoop() *Loop {
  return &Loop{
    Bar: NewBar(),
  }
}

var Loop_Bar_DEFAULT *Bar
func (p *Loop) GetBar() *Bar {
  if !p.IsSetBar() {
    return Loop_Bar_DEFAULT
  }
  return p.Bar
}
func (p *Loop) DefaultGetBar() *Bar {
  if !p.IsSetBar() {
    return NewBar()
  }
  return p.Bar
}
func (p *Loop) IsSetBar() bool {
  return p != nil && p.Bar != nil
}

type LoopBuilder struct {
  obj *Loop
}

func NewLoopBuilder() *LoopBuilder{
  return &LoopBuilder{
    obj: NewLoop(),
  }
}

func (p LoopBuilder) Emit() *Loop{
  return &Loop{
    Bar: p.obj.Bar,
  }
}

func (l *LoopBuilder) Bar(bar *Bar) *LoopBuilder {
  l.obj.Bar = bar
  return l
}

func (l *Loop) SetBar(bar *Bar) *Loop {
  l.Bar = bar
  return l
}

func (p *Loop) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Loop)  ReadField_1(iprot thrift.Protocol) error {
  p.Bar = NewBar()
  if err := p.Bar.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Bar), err)
  }
  return nil
}

func (p *Loop) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Loop"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField_1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Loop) writeField_1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("bar", thrift.STRUCT, -1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:bar: ", p), err) }
  if err := p.Bar.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Bar), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -1:bar: ", p), err) }
  return err
}

func (p *Loop) String() string {
  if p == nil {
    return "<nil>"
  }

  var barVal string
  if p.Bar == nil {
    barVal = "<nil>"
  } else {
    barVal = fmt.Sprintf("%v", p.Bar)
  }
  return fmt.Sprintf("Loop({Bar:%s})", barVal)
}

// Attributes:
//  - Assign: Assigns to a (set) value.
// 
// If set, all other operations are ignored.
// 
// Note: Optional and union fields must be set before assigned.
// 
//  - Clear: Clears a value. Applies first.
//  - PatchPrior: Patches any previously set values. Applies second.
//  - Ensure: Initialize fields, using the given defaults. Applies third.
//  - Patch: Patches any set value, including newly set values. Applies last.
type MyDataPatch struct {
  Assign *MyData `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  PatchPrior *MyDataFieldPatch `thrift:"patchPrior,3" db:"patchPrior" json:"patchPrior"`
  // unused field # 4
  Ensure *MyDataEnsureStruct `thrift:"ensure,5" db:"ensure" json:"ensure"`
  Patch *MyDataFieldPatch `thrift:"patch,6" db:"patch" json:"patch"`
}

func NewMyDataPatch() *MyDataPatch {
  return &MyDataPatch{
    PatchPrior: NewMyDataFieldPatch(),
    Ensure: NewMyDataEnsureStruct(),
    Patch: NewMyDataFieldPatch(),
  }
}

var MyDataPatch_Assign_DEFAULT *MyData
func (p *MyDataPatch) GetAssign() *MyData {
  if !p.IsSetAssign() {
    return MyDataPatch_Assign_DEFAULT
  }
  return p.Assign
}
func (p *MyDataPatch) DefaultGetAssign() *MyData {
  if !p.IsSetAssign() {
    return NewMyData()
  }
  return p.Assign
}

func (p *MyDataPatch) GetClear() bool {
  return p.Clear
}
var MyDataPatch_PatchPrior_DEFAULT *MyDataFieldPatch
func (p *MyDataPatch) GetPatchPrior() *MyDataFieldPatch {
  if !p.IsSetPatchPrior() {
    return MyDataPatch_PatchPrior_DEFAULT
  }
  return p.PatchPrior
}
func (p *MyDataPatch) DefaultGetPatchPrior() *MyDataFieldPatch {
  if !p.IsSetPatchPrior() {
    return NewMyDataFieldPatch()
  }
  return p.PatchPrior
}
var MyDataPatch_Ensure_DEFAULT *MyDataEnsureStruct
func (p *MyDataPatch) GetEnsure() *MyDataEnsureStruct {
  if !p.IsSetEnsure() {
    return MyDataPatch_Ensure_DEFAULT
  }
  return p.Ensure
}
func (p *MyDataPatch) DefaultGetEnsure() *MyDataEnsureStruct {
  if !p.IsSetEnsure() {
    return NewMyDataEnsureStruct()
  }
  return p.Ensure
}
var MyDataPatch_Patch_DEFAULT *MyDataFieldPatch
func (p *MyDataPatch) GetPatch() *MyDataFieldPatch {
  if !p.IsSetPatch() {
    return MyDataPatch_Patch_DEFAULT
  }
  return p.Patch
}
func (p *MyDataPatch) DefaultGetPatch() *MyDataFieldPatch {
  if !p.IsSetPatch() {
    return NewMyDataFieldPatch()
  }
  return p.Patch
}
func (p *MyDataPatch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

func (p *MyDataPatch) IsSetPatchPrior() bool {
  return p != nil && p.PatchPrior != nil
}

func (p *MyDataPatch) IsSetEnsure() bool {
  return p != nil && p.Ensure != nil
}

func (p *MyDataPatch) IsSetPatch() bool {
  return p != nil && p.Patch != nil
}

type MyDataPatchBuilder struct {
  obj *MyDataPatch
}

func NewMyDataPatchBuilder() *MyDataPatchBuilder{
  return &MyDataPatchBuilder{
    obj: NewMyDataPatch(),
  }
}

func (p MyDataPatchBuilder) Emit() *MyDataPatch{
  return &MyDataPatch{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
    PatchPrior: p.obj.PatchPrior,
    Ensure: p.obj.Ensure,
    Patch: p.obj.Patch,
  }
}

func (m *MyDataPatchBuilder) Assign(assign *MyData) *MyDataPatchBuilder {
  m.obj.Assign = assign
  return m
}

func (m *MyDataPatchBuilder) Clear(clear bool) *MyDataPatchBuilder {
  m.obj.Clear = clear
  return m
}

func (m *MyDataPatchBuilder) PatchPrior(patchPrior *MyDataFieldPatch) *MyDataPatchBuilder {
  m.obj.PatchPrior = patchPrior
  return m
}

func (m *MyDataPatchBuilder) Ensure(ensure *MyDataEnsureStruct) *MyDataPatchBuilder {
  m.obj.Ensure = ensure
  return m
}

func (m *MyDataPatchBuilder) Patch(patch *MyDataFieldPatch) *MyDataPatchBuilder {
  m.obj.Patch = patch
  return m
}

func (m *MyDataPatch) SetAssign(assign *MyData) *MyDataPatch {
  m.Assign = assign
  return m
}

func (m *MyDataPatch) SetClear(clear bool) *MyDataPatch {
  m.Clear = clear
  return m
}

func (m *MyDataPatch) SetPatchPrior(patchPrior *MyDataFieldPatch) *MyDataPatch {
  m.PatchPrior = patchPrior
  return m
}

func (m *MyDataPatch) SetEnsure(ensure *MyDataEnsureStruct) *MyDataPatch {
  m.Ensure = ensure
  return m
}

func (m *MyDataPatch) SetPatch(patch *MyDataFieldPatch) *MyDataPatch {
  m.Patch = patch
  return m
}

func (p *MyDataPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyDataPatch)  ReadField1(iprot thrift.Protocol) error {
  p.Assign = NewMyData()
  if err := p.Assign.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Assign), err)
  }
  return nil
}

func (p *MyDataPatch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *MyDataPatch)  ReadField3(iprot thrift.Protocol) error {
  p.PatchPrior = NewMyDataFieldPatch()
  if err := p.PatchPrior.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PatchPrior), err)
  }
  return nil
}

func (p *MyDataPatch)  ReadField5(iprot thrift.Protocol) error {
  p.Ensure = NewMyDataEnsureStruct()
  if err := p.Ensure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ensure), err)
  }
  return nil
}

func (p *MyDataPatch)  ReadField6(iprot thrift.Protocol) error {
  p.Patch = NewMyDataFieldPatch()
  if err := p.Patch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Patch), err)
  }
  return nil
}

func (p *MyDataPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyDataPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyDataPatch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := p.Assign.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Assign), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *MyDataPatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *MyDataPatch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patchPrior: ", p), err) }
  if err := p.PatchPrior.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PatchPrior), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patchPrior: ", p), err) }
  return err
}

func (p *MyDataPatch) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("ensure", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ensure: ", p), err) }
  if err := p.Ensure.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ensure), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ensure: ", p), err) }
  return err
}

func (p *MyDataPatch) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:patch: ", p), err) }
  if err := p.Patch.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Patch), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:patch: ", p), err) }
  return err
}

func (p *MyDataPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var assignVal string
  if p.Assign == nil {
    assignVal = "<nil>"
  } else {
    assignVal = fmt.Sprintf("%v", p.Assign)
  }
  clearVal := fmt.Sprintf("%v", p.Clear)
  var patchPriorVal string
  if p.PatchPrior == nil {
    patchPriorVal = "<nil>"
  } else {
    patchPriorVal = fmt.Sprintf("%v", p.PatchPrior)
  }
  var ensureVal string
  if p.Ensure == nil {
    ensureVal = "<nil>"
  } else {
    ensureVal = fmt.Sprintf("%v", p.Ensure)
  }
  var patchVal string
  if p.Patch == nil {
    patchVal = "<nil>"
  } else {
    patchVal = fmt.Sprintf("%v", p.Patch)
  }
  return fmt.Sprintf("MyDataPatch({Assign:%s Clear:%s PatchPrior:%s Ensure:%s Patch:%s})", assignVal, clearVal, patchPriorVal, ensureVal, patchVal)
}

// Attributes:
//  - Data1
//  - Data2
type MyDataFieldPatch struct {
  Data1 *patch1.StringPatch `thrift:"data1,1" db:"data1" json:"data1"`
  Data2 *patch1.I32Patch `thrift:"data2,2" db:"data2" json:"data2"`
}

func NewMyDataFieldPatch() *MyDataFieldPatch {
  return &MyDataFieldPatch{
    Data1: patch1.NewStringPatch(),
    Data2: patch1.NewI32Patch(),
  }
}

var MyDataFieldPatch_Data1_DEFAULT *patch1.StringPatch
func (p *MyDataFieldPatch) GetData1() *patch1.StringPatch {
  if !p.IsSetData1() {
    return MyDataFieldPatch_Data1_DEFAULT
  }
  return p.Data1
}
func (p *MyDataFieldPatch) DefaultGetData1() *patch1.StringPatch {
  if !p.IsSetData1() {
    return patch1.NewStringPatch()
  }
  return p.Data1
}
var MyDataFieldPatch_Data2_DEFAULT *patch1.I32Patch
func (p *MyDataFieldPatch) GetData2() *patch1.I32Patch {
  if !p.IsSetData2() {
    return MyDataFieldPatch_Data2_DEFAULT
  }
  return p.Data2
}
func (p *MyDataFieldPatch) DefaultGetData2() *patch1.I32Patch {
  if !p.IsSetData2() {
    return patch1.NewI32Patch()
  }
  return p.Data2
}
func (p *MyDataFieldPatch) IsSetData1() bool {
  return p != nil && p.Data1 != nil
}

func (p *MyDataFieldPatch) IsSetData2() bool {
  return p != nil && p.Data2 != nil
}

type MyDataFieldPatchBuilder struct {
  obj *MyDataFieldPatch
}

func NewMyDataFieldPatchBuilder() *MyDataFieldPatchBuilder{
  return &MyDataFieldPatchBuilder{
    obj: NewMyDataFieldPatch(),
  }
}

func (p MyDataFieldPatchBuilder) Emit() *MyDataFieldPatch{
  return &MyDataFieldPatch{
    Data1: p.obj.Data1,
    Data2: p.obj.Data2,
  }
}

func (m *MyDataFieldPatchBuilder) Data1(data1 *patch1.StringPatch) *MyDataFieldPatchBuilder {
  m.obj.Data1 = data1
  return m
}

func (m *MyDataFieldPatchBuilder) Data2(data2 *patch1.I32Patch) *MyDataFieldPatchBuilder {
  m.obj.Data2 = data2
  return m
}

func (m *MyDataFieldPatch) SetData1(data1 *patch1.StringPatch) *MyDataFieldPatch {
  m.Data1 = data1
  return m
}

func (m *MyDataFieldPatch) SetData2(data2 *patch1.I32Patch) *MyDataFieldPatch {
  m.Data2 = data2
  return m
}

func (p *MyDataFieldPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyDataFieldPatch)  ReadField1(iprot thrift.Protocol) error {
  p.Data1 = patch1.NewStringPatch()
  if err := p.Data1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data1), err)
  }
  return nil
}

func (p *MyDataFieldPatch)  ReadField2(iprot thrift.Protocol) error {
  p.Data2 = patch1.NewI32Patch()
  if err := p.Data2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data2), err)
  }
  return nil
}

func (p *MyDataFieldPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyDataFieldPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyDataFieldPatch) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("data1", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:data1: ", p), err) }
  if err := p.Data1.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data1), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:data1: ", p), err) }
  return err
}

func (p *MyDataFieldPatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("data2", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data2: ", p), err) }
  if err := p.Data2.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data2), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data2: ", p), err) }
  return err
}

func (p *MyDataFieldPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var data1Val string
  if p.Data1 == nil {
    data1Val = "<nil>"
  } else {
    data1Val = fmt.Sprintf("%v", p.Data1)
  }
  var data2Val string
  if p.Data2 == nil {
    data2Val = "<nil>"
  } else {
    data2Val = fmt.Sprintf("%v", p.Data2)
  }
  return fmt.Sprintf("MyDataFieldPatch({Data1:%s Data2:%s})", data1Val, data2Val)
}

// Attributes:
//  - Data1
//  - Data2
type MyDataEnsureStruct struct {
  Data1 *string `thrift:"data1,1,optional" db:"data1" json:"data1,omitempty"`
  Data2 *int32 `thrift:"data2,2,optional" db:"data2" json:"data2,omitempty"`
}

func NewMyDataEnsureStruct() *MyDataEnsureStruct {
  return &MyDataEnsureStruct{}
}

var MyDataEnsureStruct_Data1_DEFAULT string
func (p *MyDataEnsureStruct) GetData1() string {
  if !p.IsSetData1() {
    return MyDataEnsureStruct_Data1_DEFAULT
  }
  return *p.Data1
}
var MyDataEnsureStruct_Data2_DEFAULT int32
func (p *MyDataEnsureStruct) GetData2() int32 {
  if !p.IsSetData2() {
    return MyDataEnsureStruct_Data2_DEFAULT
  }
  return *p.Data2
}
func (p *MyDataEnsureStruct) IsSetData1() bool {
  return p != nil && p.Data1 != nil
}

func (p *MyDataEnsureStruct) IsSetData2() bool {
  return p != nil && p.Data2 != nil
}

type MyDataEnsureStructBuilder struct {
  obj *MyDataEnsureStruct
}

func NewMyDataEnsureStructBuilder() *MyDataEnsureStructBuilder{
  return &MyDataEnsureStructBuilder{
    obj: NewMyDataEnsureStruct(),
  }
}

func (p MyDataEnsureStructBuilder) Emit() *MyDataEnsureStruct{
  return &MyDataEnsureStruct{
    Data1: p.obj.Data1,
    Data2: p.obj.Data2,
  }
}

func (m *MyDataEnsureStructBuilder) Data1(data1 *string) *MyDataEnsureStructBuilder {
  m.obj.Data1 = data1
  return m
}

func (m *MyDataEnsureStructBuilder) Data2(data2 *int32) *MyDataEnsureStructBuilder {
  m.obj.Data2 = data2
  return m
}

func (m *MyDataEnsureStruct) SetData1(data1 *string) *MyDataEnsureStruct {
  m.Data1 = data1
  return m
}

func (m *MyDataEnsureStruct) SetData2(data2 *int32) *MyDataEnsureStruct {
  m.Data2 = data2
  return m
}

func (p *MyDataEnsureStruct) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyDataEnsureStruct)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Data1 = &v
  }
  return nil
}

func (p *MyDataEnsureStruct)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Data2 = &v
  }
  return nil
}

func (p *MyDataEnsureStruct) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyDataEnsureStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyDataEnsureStruct) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetData1() {
    if err := oprot.WriteFieldBegin("data1", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:data1: ", p), err) }
    if err := oprot.WriteString(string(*p.Data1)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.data1 (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:data1: ", p), err) }
  }
  return err
}

func (p *MyDataEnsureStruct) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetData2() {
    if err := oprot.WriteFieldBegin("data2", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data2: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Data2)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.data2 (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data2: ", p), err) }
  }
  return err
}

func (p *MyDataEnsureStruct) String() string {
  if p == nil {
    return "<nil>"
  }

  var data1Val string
  if p.Data1 == nil {
    data1Val = "<nil>"
  } else {
    data1Val = fmt.Sprintf("%v", *p.Data1)
  }
  var data2Val string
  if p.Data2 == nil {
    data2Val = "<nil>"
  } else {
    data2Val = fmt.Sprintf("%v", *p.Data2)
  }
  return fmt.Sprintf("MyDataEnsureStruct({Data1:%s Data2:%s})", data1Val, data2Val)
}

// Attributes:
//  - Assign: Assigns to a (set) value.
// 
// If set, all other operations are ignored.
// 
// Note: Optional and union fields must be set before assigned.
// 
//  - Clear: Clears a value. Applies first.
//  - PatchPrior: Patches any previously set values. Applies second.
//  - Ensure: Initialize fields, using the given defaults. Applies third.
//  - Patch: Patches any set value, including newly set values. Applies last.
type MyDataWithCustomDefaultPatch struct {
  Assign *MyDataWithCustomDefault `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  PatchPrior *MyDataWithCustomDefaultFieldPatch `thrift:"patchPrior,3" db:"patchPrior" json:"patchPrior"`
  // unused field # 4
  Ensure *MyDataWithCustomDefaultEnsureStruct `thrift:"ensure,5" db:"ensure" json:"ensure"`
  Patch *MyDataWithCustomDefaultFieldPatch `thrift:"patch,6" db:"patch" json:"patch"`
}

func NewMyDataWithCustomDefaultPatch() *MyDataWithCustomDefaultPatch {
  return &MyDataWithCustomDefaultPatch{
    PatchPrior: NewMyDataWithCustomDefaultFieldPatch(),
    Ensure: NewMyDataWithCustomDefaultEnsureStruct(),
    Patch: NewMyDataWithCustomDefaultFieldPatch(),
  }
}

var MyDataWithCustomDefaultPatch_Assign_DEFAULT *MyDataWithCustomDefault
func (p *MyDataWithCustomDefaultPatch) GetAssign() *MyDataWithCustomDefault {
  if !p.IsSetAssign() {
    return MyDataWithCustomDefaultPatch_Assign_DEFAULT
  }
  return p.Assign
}
func (p *MyDataWithCustomDefaultPatch) DefaultGetAssign() *MyDataWithCustomDefault {
  if !p.IsSetAssign() {
    return NewMyDataWithCustomDefault()
  }
  return p.Assign
}

func (p *MyDataWithCustomDefaultPatch) GetClear() bool {
  return p.Clear
}
var MyDataWithCustomDefaultPatch_PatchPrior_DEFAULT *MyDataWithCustomDefaultFieldPatch
func (p *MyDataWithCustomDefaultPatch) GetPatchPrior() *MyDataWithCustomDefaultFieldPatch {
  if !p.IsSetPatchPrior() {
    return MyDataWithCustomDefaultPatch_PatchPrior_DEFAULT
  }
  return p.PatchPrior
}
func (p *MyDataWithCustomDefaultPatch) DefaultGetPatchPrior() *MyDataWithCustomDefaultFieldPatch {
  if !p.IsSetPatchPrior() {
    return NewMyDataWithCustomDefaultFieldPatch()
  }
  return p.PatchPrior
}
var MyDataWithCustomDefaultPatch_Ensure_DEFAULT *MyDataWithCustomDefaultEnsureStruct
func (p *MyDataWithCustomDefaultPatch) GetEnsure() *MyDataWithCustomDefaultEnsureStruct {
  if !p.IsSetEnsure() {
    return MyDataWithCustomDefaultPatch_Ensure_DEFAULT
  }
  return p.Ensure
}
func (p *MyDataWithCustomDefaultPatch) DefaultGetEnsure() *MyDataWithCustomDefaultEnsureStruct {
  if !p.IsSetEnsure() {
    return NewMyDataWithCustomDefaultEnsureStruct()
  }
  return p.Ensure
}
var MyDataWithCustomDefaultPatch_Patch_DEFAULT *MyDataWithCustomDefaultFieldPatch
func (p *MyDataWithCustomDefaultPatch) GetPatch() *MyDataWithCustomDefaultFieldPatch {
  if !p.IsSetPatch() {
    return MyDataWithCustomDefaultPatch_Patch_DEFAULT
  }
  return p.Patch
}
func (p *MyDataWithCustomDefaultPatch) DefaultGetPatch() *MyDataWithCustomDefaultFieldPatch {
  if !p.IsSetPatch() {
    return NewMyDataWithCustomDefaultFieldPatch()
  }
  return p.Patch
}
func (p *MyDataWithCustomDefaultPatch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

func (p *MyDataWithCustomDefaultPatch) IsSetPatchPrior() bool {
  return p != nil && p.PatchPrior != nil
}

func (p *MyDataWithCustomDefaultPatch) IsSetEnsure() bool {
  return p != nil && p.Ensure != nil
}

func (p *MyDataWithCustomDefaultPatch) IsSetPatch() bool {
  return p != nil && p.Patch != nil
}

type MyDataWithCustomDefaultPatchBuilder struct {
  obj *MyDataWithCustomDefaultPatch
}

func NewMyDataWithCustomDefaultPatchBuilder() *MyDataWithCustomDefaultPatchBuilder{
  return &MyDataWithCustomDefaultPatchBuilder{
    obj: NewMyDataWithCustomDefaultPatch(),
  }
}

func (p MyDataWithCustomDefaultPatchBuilder) Emit() *MyDataWithCustomDefaultPatch{
  return &MyDataWithCustomDefaultPatch{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
    PatchPrior: p.obj.PatchPrior,
    Ensure: p.obj.Ensure,
    Patch: p.obj.Patch,
  }
}

func (m *MyDataWithCustomDefaultPatchBuilder) Assign(assign *MyDataWithCustomDefault) *MyDataWithCustomDefaultPatchBuilder {
  m.obj.Assign = assign
  return m
}

func (m *MyDataWithCustomDefaultPatchBuilder) Clear(clear bool) *MyDataWithCustomDefaultPatchBuilder {
  m.obj.Clear = clear
  return m
}

func (m *MyDataWithCustomDefaultPatchBuilder) PatchPrior(patchPrior *MyDataWithCustomDefaultFieldPatch) *MyDataWithCustomDefaultPatchBuilder {
  m.obj.PatchPrior = patchPrior
  return m
}

func (m *MyDataWithCustomDefaultPatchBuilder) Ensure(ensure *MyDataWithCustomDefaultEnsureStruct) *MyDataWithCustomDefaultPatchBuilder {
  m.obj.Ensure = ensure
  return m
}

func (m *MyDataWithCustomDefaultPatchBuilder) Patch(patch *MyDataWithCustomDefaultFieldPatch) *MyDataWithCustomDefaultPatchBuilder {
  m.obj.Patch = patch
  return m
}

func (m *MyDataWithCustomDefaultPatch) SetAssign(assign *MyDataWithCustomDefault) *MyDataWithCustomDefaultPatch {
  m.Assign = assign
  return m
}

func (m *MyDataWithCustomDefaultPatch) SetClear(clear bool) *MyDataWithCustomDefaultPatch {
  m.Clear = clear
  return m
}

func (m *MyDataWithCustomDefaultPatch) SetPatchPrior(patchPrior *MyDataWithCustomDefaultFieldPatch) *MyDataWithCustomDefaultPatch {
  m.PatchPrior = patchPrior
  return m
}

func (m *MyDataWithCustomDefaultPatch) SetEnsure(ensure *MyDataWithCustomDefaultEnsureStruct) *MyDataWithCustomDefaultPatch {
  m.Ensure = ensure
  return m
}

func (m *MyDataWithCustomDefaultPatch) SetPatch(patch *MyDataWithCustomDefaultFieldPatch) *MyDataWithCustomDefaultPatch {
  m.Patch = patch
  return m
}

func (p *MyDataWithCustomDefaultPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyDataWithCustomDefaultPatch)  ReadField1(iprot thrift.Protocol) error {
  p.Assign = NewMyDataWithCustomDefault()
  if err := p.Assign.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Assign), err)
  }
  return nil
}

func (p *MyDataWithCustomDefaultPatch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *MyDataWithCustomDefaultPatch)  ReadField3(iprot thrift.Protocol) error {
  p.PatchPrior = NewMyDataWithCustomDefaultFieldPatch()
  if err := p.PatchPrior.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PatchPrior), err)
  }
  return nil
}

func (p *MyDataWithCustomDefaultPatch)  ReadField5(iprot thrift.Protocol) error {
  p.Ensure = NewMyDataWithCustomDefaultEnsureStruct()
  if err := p.Ensure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ensure), err)
  }
  return nil
}

func (p *MyDataWithCustomDefaultPatch)  ReadField6(iprot thrift.Protocol) error {
  p.Patch = NewMyDataWithCustomDefaultFieldPatch()
  if err := p.Patch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Patch), err)
  }
  return nil
}

func (p *MyDataWithCustomDefaultPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyDataWithCustomDefaultPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyDataWithCustomDefaultPatch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := p.Assign.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Assign), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *MyDataWithCustomDefaultPatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *MyDataWithCustomDefaultPatch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patchPrior: ", p), err) }
  if err := p.PatchPrior.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PatchPrior), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patchPrior: ", p), err) }
  return err
}

func (p *MyDataWithCustomDefaultPatch) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("ensure", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ensure: ", p), err) }
  if err := p.Ensure.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ensure), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ensure: ", p), err) }
  return err
}

func (p *MyDataWithCustomDefaultPatch) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:patch: ", p), err) }
  if err := p.Patch.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Patch), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:patch: ", p), err) }
  return err
}

func (p *MyDataWithCustomDefaultPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var assignVal string
  if p.Assign == nil {
    assignVal = "<nil>"
  } else {
    assignVal = fmt.Sprintf("%v", p.Assign)
  }
  clearVal := fmt.Sprintf("%v", p.Clear)
  var patchPriorVal string
  if p.PatchPrior == nil {
    patchPriorVal = "<nil>"
  } else {
    patchPriorVal = fmt.Sprintf("%v", p.PatchPrior)
  }
  var ensureVal string
  if p.Ensure == nil {
    ensureVal = "<nil>"
  } else {
    ensureVal = fmt.Sprintf("%v", p.Ensure)
  }
  var patchVal string
  if p.Patch == nil {
    patchVal = "<nil>"
  } else {
    patchVal = fmt.Sprintf("%v", p.Patch)
  }
  return fmt.Sprintf("MyDataWithCustomDefaultPatch({Assign:%s Clear:%s PatchPrior:%s Ensure:%s Patch:%s})", assignVal, clearVal, patchPriorVal, ensureVal, patchVal)
}

// Attributes:
//  - Data1
//  - Data2
type MyDataWithCustomDefaultFieldPatch struct {
  Data1 *patch1.StringPatch `thrift:"data1,1" db:"data1" json:"data1"`
  Data2 *patch1.I32Patch `thrift:"data2,2" db:"data2" json:"data2"`
}

func NewMyDataWithCustomDefaultFieldPatch() *MyDataWithCustomDefaultFieldPatch {
  return &MyDataWithCustomDefaultFieldPatch{
    Data1: patch1.NewStringPatch(),
    Data2: patch1.NewI32Patch(),
  }
}

var MyDataWithCustomDefaultFieldPatch_Data1_DEFAULT *patch1.StringPatch
func (p *MyDataWithCustomDefaultFieldPatch) GetData1() *patch1.StringPatch {
  if !p.IsSetData1() {
    return MyDataWithCustomDefaultFieldPatch_Data1_DEFAULT
  }
  return p.Data1
}
func (p *MyDataWithCustomDefaultFieldPatch) DefaultGetData1() *patch1.StringPatch {
  if !p.IsSetData1() {
    return patch1.NewStringPatch()
  }
  return p.Data1
}
var MyDataWithCustomDefaultFieldPatch_Data2_DEFAULT *patch1.I32Patch
func (p *MyDataWithCustomDefaultFieldPatch) GetData2() *patch1.I32Patch {
  if !p.IsSetData2() {
    return MyDataWithCustomDefaultFieldPatch_Data2_DEFAULT
  }
  return p.Data2
}
func (p *MyDataWithCustomDefaultFieldPatch) DefaultGetData2() *patch1.I32Patch {
  if !p.IsSetData2() {
    return patch1.NewI32Patch()
  }
  return p.Data2
}
func (p *MyDataWithCustomDefaultFieldPatch) IsSetData1() bool {
  return p != nil && p.Data1 != nil
}

func (p *MyDataWithCustomDefaultFieldPatch) IsSetData2() bool {
  return p != nil && p.Data2 != nil
}

type MyDataWithCustomDefaultFieldPatchBuilder struct {
  obj *MyDataWithCustomDefaultFieldPatch
}

func NewMyDataWithCustomDefaultFieldPatchBuilder() *MyDataWithCustomDefaultFieldPatchBuilder{
  return &MyDataWithCustomDefaultFieldPatchBuilder{
    obj: NewMyDataWithCustomDefaultFieldPatch(),
  }
}

func (p MyDataWithCustomDefaultFieldPatchBuilder) Emit() *MyDataWithCustomDefaultFieldPatch{
  return &MyDataWithCustomDefaultFieldPatch{
    Data1: p.obj.Data1,
    Data2: p.obj.Data2,
  }
}

func (m *MyDataWithCustomDefaultFieldPatchBuilder) Data1(data1 *patch1.StringPatch) *MyDataWithCustomDefaultFieldPatchBuilder {
  m.obj.Data1 = data1
  return m
}

func (m *MyDataWithCustomDefaultFieldPatchBuilder) Data2(data2 *patch1.I32Patch) *MyDataWithCustomDefaultFieldPatchBuilder {
  m.obj.Data2 = data2
  return m
}

func (m *MyDataWithCustomDefaultFieldPatch) SetData1(data1 *patch1.StringPatch) *MyDataWithCustomDefaultFieldPatch {
  m.Data1 = data1
  return m
}

func (m *MyDataWithCustomDefaultFieldPatch) SetData2(data2 *patch1.I32Patch) *MyDataWithCustomDefaultFieldPatch {
  m.Data2 = data2
  return m
}

func (p *MyDataWithCustomDefaultFieldPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyDataWithCustomDefaultFieldPatch)  ReadField1(iprot thrift.Protocol) error {
  p.Data1 = patch1.NewStringPatch()
  if err := p.Data1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data1), err)
  }
  return nil
}

func (p *MyDataWithCustomDefaultFieldPatch)  ReadField2(iprot thrift.Protocol) error {
  p.Data2 = patch1.NewI32Patch()
  if err := p.Data2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data2), err)
  }
  return nil
}

func (p *MyDataWithCustomDefaultFieldPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyDataWithCustomDefaultFieldPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyDataWithCustomDefaultFieldPatch) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("data1", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:data1: ", p), err) }
  if err := p.Data1.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data1), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:data1: ", p), err) }
  return err
}

func (p *MyDataWithCustomDefaultFieldPatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("data2", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data2: ", p), err) }
  if err := p.Data2.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data2), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data2: ", p), err) }
  return err
}

func (p *MyDataWithCustomDefaultFieldPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var data1Val string
  if p.Data1 == nil {
    data1Val = "<nil>"
  } else {
    data1Val = fmt.Sprintf("%v", p.Data1)
  }
  var data2Val string
  if p.Data2 == nil {
    data2Val = "<nil>"
  } else {
    data2Val = fmt.Sprintf("%v", p.Data2)
  }
  return fmt.Sprintf("MyDataWithCustomDefaultFieldPatch({Data1:%s Data2:%s})", data1Val, data2Val)
}

// Attributes:
//  - Data1
//  - Data2
type MyDataWithCustomDefaultEnsureStruct struct {
  Data1 *string `thrift:"data1,1,optional" db:"data1" json:"data1,omitempty"`
  Data2 *int32 `thrift:"data2,2,optional" db:"data2" json:"data2,omitempty"`
}

func NewMyDataWithCustomDefaultEnsureStruct() *MyDataWithCustomDefaultEnsureStruct {
  return &MyDataWithCustomDefaultEnsureStruct{}
}

var MyDataWithCustomDefaultEnsureStruct_Data1_DEFAULT string
func (p *MyDataWithCustomDefaultEnsureStruct) GetData1() string {
  if !p.IsSetData1() {
    return MyDataWithCustomDefaultEnsureStruct_Data1_DEFAULT
  }
  return *p.Data1
}
var MyDataWithCustomDefaultEnsureStruct_Data2_DEFAULT int32
func (p *MyDataWithCustomDefaultEnsureStruct) GetData2() int32 {
  if !p.IsSetData2() {
    return MyDataWithCustomDefaultEnsureStruct_Data2_DEFAULT
  }
  return *p.Data2
}
func (p *MyDataWithCustomDefaultEnsureStruct) IsSetData1() bool {
  return p != nil && p.Data1 != nil
}

func (p *MyDataWithCustomDefaultEnsureStruct) IsSetData2() bool {
  return p != nil && p.Data2 != nil
}

type MyDataWithCustomDefaultEnsureStructBuilder struct {
  obj *MyDataWithCustomDefaultEnsureStruct
}

func NewMyDataWithCustomDefaultEnsureStructBuilder() *MyDataWithCustomDefaultEnsureStructBuilder{
  return &MyDataWithCustomDefaultEnsureStructBuilder{
    obj: NewMyDataWithCustomDefaultEnsureStruct(),
  }
}

func (p MyDataWithCustomDefaultEnsureStructBuilder) Emit() *MyDataWithCustomDefaultEnsureStruct{
  return &MyDataWithCustomDefaultEnsureStruct{
    Data1: p.obj.Data1,
    Data2: p.obj.Data2,
  }
}

func (m *MyDataWithCustomDefaultEnsureStructBuilder) Data1(data1 *string) *MyDataWithCustomDefaultEnsureStructBuilder {
  m.obj.Data1 = data1
  return m
}

func (m *MyDataWithCustomDefaultEnsureStructBuilder) Data2(data2 *int32) *MyDataWithCustomDefaultEnsureStructBuilder {
  m.obj.Data2 = data2
  return m
}

func (m *MyDataWithCustomDefaultEnsureStruct) SetData1(data1 *string) *MyDataWithCustomDefaultEnsureStruct {
  m.Data1 = data1
  return m
}

func (m *MyDataWithCustomDefaultEnsureStruct) SetData2(data2 *int32) *MyDataWithCustomDefaultEnsureStruct {
  m.Data2 = data2
  return m
}

func (p *MyDataWithCustomDefaultEnsureStruct) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyDataWithCustomDefaultEnsureStruct)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Data1 = &v
  }
  return nil
}

func (p *MyDataWithCustomDefaultEnsureStruct)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Data2 = &v
  }
  return nil
}

func (p *MyDataWithCustomDefaultEnsureStruct) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyDataWithCustomDefaultEnsureStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyDataWithCustomDefaultEnsureStruct) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetData1() {
    if err := oprot.WriteFieldBegin("data1", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:data1: ", p), err) }
    if err := oprot.WriteString(string(*p.Data1)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.data1 (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:data1: ", p), err) }
  }
  return err
}

func (p *MyDataWithCustomDefaultEnsureStruct) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetData2() {
    if err := oprot.WriteFieldBegin("data2", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data2: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Data2)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.data2 (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data2: ", p), err) }
  }
  return err
}

func (p *MyDataWithCustomDefaultEnsureStruct) String() string {
  if p == nil {
    return "<nil>"
  }

  var data1Val string
  if p.Data1 == nil {
    data1Val = "<nil>"
  } else {
    data1Val = fmt.Sprintf("%v", *p.Data1)
  }
  var data2Val string
  if p.Data2 == nil {
    data2Val = "<nil>"
  } else {
    data2Val = fmt.Sprintf("%v", *p.Data2)
  }
  return fmt.Sprintf("MyDataWithCustomDefaultEnsureStruct({Data1:%s Data2:%s})", data1Val, data2Val)
}

// Attributes:
//  - Assign: Assigns to a (set) value.
// 
// If set, all other operations are ignored.
// 
// Note: Optional and union fields must be set before assigned.
// 
//  - Clear: Clears any set value. Applies first.
//  - PatchPrior: Patches any previously set values. Applies second.
//  - Ensure: Assigns the value, if not already set to the same field. Applies third.
//  - Patch: Patches any set value, including newly set values. Applies last.
type InnerUnionPatch struct {
  Assign *InnerUnion `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  PatchPrior *InnerUnionFieldPatch `thrift:"patchPrior,3" db:"patchPrior" json:"patchPrior"`
  Ensure *InnerUnion `thrift:"ensure,4" db:"ensure" json:"ensure"`
  // unused field # 5
  Patch *InnerUnionFieldPatch `thrift:"patch,6" db:"patch" json:"patch"`
}

func NewInnerUnionPatch() *InnerUnionPatch {
  return &InnerUnionPatch{
    PatchPrior: NewInnerUnionFieldPatch(),
    Patch: NewInnerUnionFieldPatch(),
  }
}

var InnerUnionPatch_Assign_DEFAULT *InnerUnion
func (p *InnerUnionPatch) GetAssign() *InnerUnion {
  if !p.IsSetAssign() {
    return InnerUnionPatch_Assign_DEFAULT
  }
  return p.Assign
}
func (p *InnerUnionPatch) DefaultGetAssign() *InnerUnion {
  if !p.IsSetAssign() {
    return NewInnerUnion()
  }
  return p.Assign
}

func (p *InnerUnionPatch) GetClear() bool {
  return p.Clear
}
var InnerUnionPatch_PatchPrior_DEFAULT *InnerUnionFieldPatch
func (p *InnerUnionPatch) GetPatchPrior() *InnerUnionFieldPatch {
  if !p.IsSetPatchPrior() {
    return InnerUnionPatch_PatchPrior_DEFAULT
  }
  return p.PatchPrior
}
func (p *InnerUnionPatch) DefaultGetPatchPrior() *InnerUnionFieldPatch {
  if !p.IsSetPatchPrior() {
    return NewInnerUnionFieldPatch()
  }
  return p.PatchPrior
}
var InnerUnionPatch_Ensure_DEFAULT *InnerUnion
func (p *InnerUnionPatch) GetEnsure() *InnerUnion {
  if !p.IsSetEnsure() {
    return InnerUnionPatch_Ensure_DEFAULT
  }
  return p.Ensure
}
func (p *InnerUnionPatch) DefaultGetEnsure() *InnerUnion {
  if !p.IsSetEnsure() {
    return NewInnerUnion()
  }
  return p.Ensure
}
var InnerUnionPatch_Patch_DEFAULT *InnerUnionFieldPatch
func (p *InnerUnionPatch) GetPatch() *InnerUnionFieldPatch {
  if !p.IsSetPatch() {
    return InnerUnionPatch_Patch_DEFAULT
  }
  return p.Patch
}
func (p *InnerUnionPatch) DefaultGetPatch() *InnerUnionFieldPatch {
  if !p.IsSetPatch() {
    return NewInnerUnionFieldPatch()
  }
  return p.Patch
}
func (p *InnerUnionPatch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

func (p *InnerUnionPatch) IsSetPatchPrior() bool {
  return p != nil && p.PatchPrior != nil
}

func (p *InnerUnionPatch) IsSetEnsure() bool {
  return p != nil && p.Ensure != nil
}

func (p *InnerUnionPatch) IsSetPatch() bool {
  return p != nil && p.Patch != nil
}

type InnerUnionPatchBuilder struct {
  obj *InnerUnionPatch
}

func NewInnerUnionPatchBuilder() *InnerUnionPatchBuilder{
  return &InnerUnionPatchBuilder{
    obj: NewInnerUnionPatch(),
  }
}

func (p InnerUnionPatchBuilder) Emit() *InnerUnionPatch{
  return &InnerUnionPatch{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
    PatchPrior: p.obj.PatchPrior,
    Ensure: p.obj.Ensure,
    Patch: p.obj.Patch,
  }
}

func (i *InnerUnionPatchBuilder) Assign(assign *InnerUnion) *InnerUnionPatchBuilder {
  i.obj.Assign = assign
  return i
}

func (i *InnerUnionPatchBuilder) Clear(clear bool) *InnerUnionPatchBuilder {
  i.obj.Clear = clear
  return i
}

func (i *InnerUnionPatchBuilder) PatchPrior(patchPrior *InnerUnionFieldPatch) *InnerUnionPatchBuilder {
  i.obj.PatchPrior = patchPrior
  return i
}

func (i *InnerUnionPatchBuilder) Ensure(ensure *InnerUnion) *InnerUnionPatchBuilder {
  i.obj.Ensure = ensure
  return i
}

func (i *InnerUnionPatchBuilder) Patch(patch *InnerUnionFieldPatch) *InnerUnionPatchBuilder {
  i.obj.Patch = patch
  return i
}

func (i *InnerUnionPatch) SetAssign(assign *InnerUnion) *InnerUnionPatch {
  i.Assign = assign
  return i
}

func (i *InnerUnionPatch) SetClear(clear bool) *InnerUnionPatch {
  i.Clear = clear
  return i
}

func (i *InnerUnionPatch) SetPatchPrior(patchPrior *InnerUnionFieldPatch) *InnerUnionPatch {
  i.PatchPrior = patchPrior
  return i
}

func (i *InnerUnionPatch) SetEnsure(ensure *InnerUnion) *InnerUnionPatch {
  i.Ensure = ensure
  return i
}

func (i *InnerUnionPatch) SetPatch(patch *InnerUnionFieldPatch) *InnerUnionPatch {
  i.Patch = patch
  return i
}

func (p *InnerUnionPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InnerUnionPatch)  ReadField1(iprot thrift.Protocol) error {
  p.Assign = NewInnerUnion()
  if err := p.Assign.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Assign), err)
  }
  return nil
}

func (p *InnerUnionPatch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *InnerUnionPatch)  ReadField3(iprot thrift.Protocol) error {
  p.PatchPrior = NewInnerUnionFieldPatch()
  if err := p.PatchPrior.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PatchPrior), err)
  }
  return nil
}

func (p *InnerUnionPatch)  ReadField4(iprot thrift.Protocol) error {
  p.Ensure = NewInnerUnion()
  if err := p.Ensure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ensure), err)
  }
  return nil
}

func (p *InnerUnionPatch)  ReadField6(iprot thrift.Protocol) error {
  p.Patch = NewInnerUnionFieldPatch()
  if err := p.Patch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Patch), err)
  }
  return nil
}

func (p *InnerUnionPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("InnerUnionPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InnerUnionPatch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := p.Assign.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Assign), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *InnerUnionPatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *InnerUnionPatch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patchPrior: ", p), err) }
  if err := p.PatchPrior.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PatchPrior), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patchPrior: ", p), err) }
  return err
}

func (p *InnerUnionPatch) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("ensure", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ensure: ", p), err) }
  if err := p.Ensure.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ensure), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ensure: ", p), err) }
  return err
}

func (p *InnerUnionPatch) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:patch: ", p), err) }
  if err := p.Patch.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Patch), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:patch: ", p), err) }
  return err
}

func (p *InnerUnionPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var assignVal string
  if p.Assign == nil {
    assignVal = "<nil>"
  } else {
    assignVal = fmt.Sprintf("%v", p.Assign)
  }
  clearVal := fmt.Sprintf("%v", p.Clear)
  var patchPriorVal string
  if p.PatchPrior == nil {
    patchPriorVal = "<nil>"
  } else {
    patchPriorVal = fmt.Sprintf("%v", p.PatchPrior)
  }
  var ensureVal string
  if p.Ensure == nil {
    ensureVal = "<nil>"
  } else {
    ensureVal = fmt.Sprintf("%v", p.Ensure)
  }
  var patchVal string
  if p.Patch == nil {
    patchVal = "<nil>"
  } else {
    patchVal = fmt.Sprintf("%v", p.Patch)
  }
  return fmt.Sprintf("InnerUnionPatch({Assign:%s Clear:%s PatchPrior:%s Ensure:%s Patch:%s})", assignVal, clearVal, patchPriorVal, ensureVal, patchVal)
}

// Attributes:
//  - InnerOption
type InnerUnionFieldPatch struct {
  InnerOption *patch1.BinaryPatch `thrift:"innerOption,1" db:"innerOption" json:"innerOption"`
}

func NewInnerUnionFieldPatch() *InnerUnionFieldPatch {
  return &InnerUnionFieldPatch{
    InnerOption: patch1.NewBinaryPatch(),
  }
}

var InnerUnionFieldPatch_InnerOption_DEFAULT *patch1.BinaryPatch
func (p *InnerUnionFieldPatch) GetInnerOption() *patch1.BinaryPatch {
  if !p.IsSetInnerOption() {
    return InnerUnionFieldPatch_InnerOption_DEFAULT
  }
  return p.InnerOption
}
func (p *InnerUnionFieldPatch) DefaultGetInnerOption() *patch1.BinaryPatch {
  if !p.IsSetInnerOption() {
    return patch1.NewBinaryPatch()
  }
  return p.InnerOption
}
func (p *InnerUnionFieldPatch) IsSetInnerOption() bool {
  return p != nil && p.InnerOption != nil
}

type InnerUnionFieldPatchBuilder struct {
  obj *InnerUnionFieldPatch
}

func NewInnerUnionFieldPatchBuilder() *InnerUnionFieldPatchBuilder{
  return &InnerUnionFieldPatchBuilder{
    obj: NewInnerUnionFieldPatch(),
  }
}

func (p InnerUnionFieldPatchBuilder) Emit() *InnerUnionFieldPatch{
  return &InnerUnionFieldPatch{
    InnerOption: p.obj.InnerOption,
  }
}

func (i *InnerUnionFieldPatchBuilder) InnerOption(innerOption *patch1.BinaryPatch) *InnerUnionFieldPatchBuilder {
  i.obj.InnerOption = innerOption
  return i
}

func (i *InnerUnionFieldPatch) SetInnerOption(innerOption *patch1.BinaryPatch) *InnerUnionFieldPatch {
  i.InnerOption = innerOption
  return i
}

func (p *InnerUnionFieldPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InnerUnionFieldPatch)  ReadField1(iprot thrift.Protocol) error {
  p.InnerOption = patch1.NewBinaryPatch()
  if err := p.InnerOption.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InnerOption), err)
  }
  return nil
}

func (p *InnerUnionFieldPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("InnerUnionFieldPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InnerUnionFieldPatch) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("innerOption", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:innerOption: ", p), err) }
  if err := p.InnerOption.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InnerOption), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:innerOption: ", p), err) }
  return err
}

func (p *InnerUnionFieldPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var innerOptionVal string
  if p.InnerOption == nil {
    innerOptionVal = "<nil>"
  } else {
    innerOptionVal = fmt.Sprintf("%v", p.InnerOption)
  }
  return fmt.Sprintf("InnerUnionFieldPatch({InnerOption:%s})", innerOptionVal)
}

// Attributes:
//  - Assign: Assigns to a (set) value.
// 
// If set, all other operations are ignored.
// 
// Note: Optional and union fields must be set before assigned.
// 
//  - Clear: Clears any set value. Applies first.
//  - PatchPrior: Patches any previously set values. Applies second.
//  - Ensure: Assigns the value, if not already set to the same field. Applies third.
//  - Patch: Patches any set value, including newly set values. Applies last.
type MyUnionPatch struct {
  Assign *MyUnion `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  PatchPrior *MyUnionFieldPatch `thrift:"patchPrior,3" db:"patchPrior" json:"patchPrior"`
  Ensure *MyUnion `thrift:"ensure,4" db:"ensure" json:"ensure"`
  // unused field # 5
  Patch *MyUnionFieldPatch `thrift:"patch,6" db:"patch" json:"patch"`
}

func NewMyUnionPatch() *MyUnionPatch {
  return &MyUnionPatch{
    PatchPrior: NewMyUnionFieldPatch(),
    Patch: NewMyUnionFieldPatch(),
  }
}

var MyUnionPatch_Assign_DEFAULT *MyUnion
func (p *MyUnionPatch) GetAssign() *MyUnion {
  if !p.IsSetAssign() {
    return MyUnionPatch_Assign_DEFAULT
  }
  return p.Assign
}
func (p *MyUnionPatch) DefaultGetAssign() *MyUnion {
  if !p.IsSetAssign() {
    return NewMyUnion()
  }
  return p.Assign
}

func (p *MyUnionPatch) GetClear() bool {
  return p.Clear
}
var MyUnionPatch_PatchPrior_DEFAULT *MyUnionFieldPatch
func (p *MyUnionPatch) GetPatchPrior() *MyUnionFieldPatch {
  if !p.IsSetPatchPrior() {
    return MyUnionPatch_PatchPrior_DEFAULT
  }
  return p.PatchPrior
}
func (p *MyUnionPatch) DefaultGetPatchPrior() *MyUnionFieldPatch {
  if !p.IsSetPatchPrior() {
    return NewMyUnionFieldPatch()
  }
  return p.PatchPrior
}
var MyUnionPatch_Ensure_DEFAULT *MyUnion
func (p *MyUnionPatch) GetEnsure() *MyUnion {
  if !p.IsSetEnsure() {
    return MyUnionPatch_Ensure_DEFAULT
  }
  return p.Ensure
}
func (p *MyUnionPatch) DefaultGetEnsure() *MyUnion {
  if !p.IsSetEnsure() {
    return NewMyUnion()
  }
  return p.Ensure
}
var MyUnionPatch_Patch_DEFAULT *MyUnionFieldPatch
func (p *MyUnionPatch) GetPatch() *MyUnionFieldPatch {
  if !p.IsSetPatch() {
    return MyUnionPatch_Patch_DEFAULT
  }
  return p.Patch
}
func (p *MyUnionPatch) DefaultGetPatch() *MyUnionFieldPatch {
  if !p.IsSetPatch() {
    return NewMyUnionFieldPatch()
  }
  return p.Patch
}
func (p *MyUnionPatch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

func (p *MyUnionPatch) IsSetPatchPrior() bool {
  return p != nil && p.PatchPrior != nil
}

func (p *MyUnionPatch) IsSetEnsure() bool {
  return p != nil && p.Ensure != nil
}

func (p *MyUnionPatch) IsSetPatch() bool {
  return p != nil && p.Patch != nil
}

type MyUnionPatchBuilder struct {
  obj *MyUnionPatch
}

func NewMyUnionPatchBuilder() *MyUnionPatchBuilder{
  return &MyUnionPatchBuilder{
    obj: NewMyUnionPatch(),
  }
}

func (p MyUnionPatchBuilder) Emit() *MyUnionPatch{
  return &MyUnionPatch{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
    PatchPrior: p.obj.PatchPrior,
    Ensure: p.obj.Ensure,
    Patch: p.obj.Patch,
  }
}

func (m *MyUnionPatchBuilder) Assign(assign *MyUnion) *MyUnionPatchBuilder {
  m.obj.Assign = assign
  return m
}

func (m *MyUnionPatchBuilder) Clear(clear bool) *MyUnionPatchBuilder {
  m.obj.Clear = clear
  return m
}

func (m *MyUnionPatchBuilder) PatchPrior(patchPrior *MyUnionFieldPatch) *MyUnionPatchBuilder {
  m.obj.PatchPrior = patchPrior
  return m
}

func (m *MyUnionPatchBuilder) Ensure(ensure *MyUnion) *MyUnionPatchBuilder {
  m.obj.Ensure = ensure
  return m
}

func (m *MyUnionPatchBuilder) Patch(patch *MyUnionFieldPatch) *MyUnionPatchBuilder {
  m.obj.Patch = patch
  return m
}

func (m *MyUnionPatch) SetAssign(assign *MyUnion) *MyUnionPatch {
  m.Assign = assign
  return m
}

func (m *MyUnionPatch) SetClear(clear bool) *MyUnionPatch {
  m.Clear = clear
  return m
}

func (m *MyUnionPatch) SetPatchPrior(patchPrior *MyUnionFieldPatch) *MyUnionPatch {
  m.PatchPrior = patchPrior
  return m
}

func (m *MyUnionPatch) SetEnsure(ensure *MyUnion) *MyUnionPatch {
  m.Ensure = ensure
  return m
}

func (m *MyUnionPatch) SetPatch(patch *MyUnionFieldPatch) *MyUnionPatch {
  m.Patch = patch
  return m
}

func (p *MyUnionPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyUnionPatch)  ReadField1(iprot thrift.Protocol) error {
  p.Assign = NewMyUnion()
  if err := p.Assign.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Assign), err)
  }
  return nil
}

func (p *MyUnionPatch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *MyUnionPatch)  ReadField3(iprot thrift.Protocol) error {
  p.PatchPrior = NewMyUnionFieldPatch()
  if err := p.PatchPrior.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PatchPrior), err)
  }
  return nil
}

func (p *MyUnionPatch)  ReadField4(iprot thrift.Protocol) error {
  p.Ensure = NewMyUnion()
  if err := p.Ensure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ensure), err)
  }
  return nil
}

func (p *MyUnionPatch)  ReadField6(iprot thrift.Protocol) error {
  p.Patch = NewMyUnionFieldPatch()
  if err := p.Patch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Patch), err)
  }
  return nil
}

func (p *MyUnionPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyUnionPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyUnionPatch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := p.Assign.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Assign), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *MyUnionPatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *MyUnionPatch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patchPrior: ", p), err) }
  if err := p.PatchPrior.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PatchPrior), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patchPrior: ", p), err) }
  return err
}

func (p *MyUnionPatch) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("ensure", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ensure: ", p), err) }
  if err := p.Ensure.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ensure), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ensure: ", p), err) }
  return err
}

func (p *MyUnionPatch) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:patch: ", p), err) }
  if err := p.Patch.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Patch), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:patch: ", p), err) }
  return err
}

func (p *MyUnionPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var assignVal string
  if p.Assign == nil {
    assignVal = "<nil>"
  } else {
    assignVal = fmt.Sprintf("%v", p.Assign)
  }
  clearVal := fmt.Sprintf("%v", p.Clear)
  var patchPriorVal string
  if p.PatchPrior == nil {
    patchPriorVal = "<nil>"
  } else {
    patchPriorVal = fmt.Sprintf("%v", p.PatchPrior)
  }
  var ensureVal string
  if p.Ensure == nil {
    ensureVal = "<nil>"
  } else {
    ensureVal = fmt.Sprintf("%v", p.Ensure)
  }
  var patchVal string
  if p.Patch == nil {
    patchVal = "<nil>"
  } else {
    patchVal = fmt.Sprintf("%v", p.Patch)
  }
  return fmt.Sprintf("MyUnionPatch({Assign:%s Clear:%s PatchPrior:%s Ensure:%s Patch:%s})", assignVal, clearVal, patchPriorVal, ensureVal, patchVal)
}

// Attributes:
//  - Option1
//  - Option2
//  - Option3
type MyUnionFieldPatch struct {
  Option1 *patch1.StringPatch `thrift:"option1,1" db:"option1" json:"option1"`
  Option2 *patch1.I32Patch `thrift:"option2,2" db:"option2" json:"option2"`
  Option3 *InnerUnionPatch `thrift:"option3,3" db:"option3" json:"option3"`
}

func NewMyUnionFieldPatch() *MyUnionFieldPatch {
  return &MyUnionFieldPatch{
    Option1: patch1.NewStringPatch(),
    Option2: patch1.NewI32Patch(),
    Option3: NewInnerUnionPatch(),
  }
}

var MyUnionFieldPatch_Option1_DEFAULT *patch1.StringPatch
func (p *MyUnionFieldPatch) GetOption1() *patch1.StringPatch {
  if !p.IsSetOption1() {
    return MyUnionFieldPatch_Option1_DEFAULT
  }
  return p.Option1
}
func (p *MyUnionFieldPatch) DefaultGetOption1() *patch1.StringPatch {
  if !p.IsSetOption1() {
    return patch1.NewStringPatch()
  }
  return p.Option1
}
var MyUnionFieldPatch_Option2_DEFAULT *patch1.I32Patch
func (p *MyUnionFieldPatch) GetOption2() *patch1.I32Patch {
  if !p.IsSetOption2() {
    return MyUnionFieldPatch_Option2_DEFAULT
  }
  return p.Option2
}
func (p *MyUnionFieldPatch) DefaultGetOption2() *patch1.I32Patch {
  if !p.IsSetOption2() {
    return patch1.NewI32Patch()
  }
  return p.Option2
}
var MyUnionFieldPatch_Option3_DEFAULT *InnerUnionPatch
func (p *MyUnionFieldPatch) GetOption3() *InnerUnionPatch {
  if !p.IsSetOption3() {
    return MyUnionFieldPatch_Option3_DEFAULT
  }
  return p.Option3
}
func (p *MyUnionFieldPatch) DefaultGetOption3() *InnerUnionPatch {
  if !p.IsSetOption3() {
    return NewInnerUnionPatch()
  }
  return p.Option3
}
func (p *MyUnionFieldPatch) IsSetOption1() bool {
  return p != nil && p.Option1 != nil
}

func (p *MyUnionFieldPatch) IsSetOption2() bool {
  return p != nil && p.Option2 != nil
}

func (p *MyUnionFieldPatch) IsSetOption3() bool {
  return p != nil && p.Option3 != nil
}

type MyUnionFieldPatchBuilder struct {
  obj *MyUnionFieldPatch
}

func NewMyUnionFieldPatchBuilder() *MyUnionFieldPatchBuilder{
  return &MyUnionFieldPatchBuilder{
    obj: NewMyUnionFieldPatch(),
  }
}

func (p MyUnionFieldPatchBuilder) Emit() *MyUnionFieldPatch{
  return &MyUnionFieldPatch{
    Option1: p.obj.Option1,
    Option2: p.obj.Option2,
    Option3: p.obj.Option3,
  }
}

func (m *MyUnionFieldPatchBuilder) Option1(option1 *patch1.StringPatch) *MyUnionFieldPatchBuilder {
  m.obj.Option1 = option1
  return m
}

func (m *MyUnionFieldPatchBuilder) Option2(option2 *patch1.I32Patch) *MyUnionFieldPatchBuilder {
  m.obj.Option2 = option2
  return m
}

func (m *MyUnionFieldPatchBuilder) Option3(option3 *InnerUnionPatch) *MyUnionFieldPatchBuilder {
  m.obj.Option3 = option3
  return m
}

func (m *MyUnionFieldPatch) SetOption1(option1 *patch1.StringPatch) *MyUnionFieldPatch {
  m.Option1 = option1
  return m
}

func (m *MyUnionFieldPatch) SetOption2(option2 *patch1.I32Patch) *MyUnionFieldPatch {
  m.Option2 = option2
  return m
}

func (m *MyUnionFieldPatch) SetOption3(option3 *InnerUnionPatch) *MyUnionFieldPatch {
  m.Option3 = option3
  return m
}

func (p *MyUnionFieldPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyUnionFieldPatch)  ReadField1(iprot thrift.Protocol) error {
  p.Option1 = patch1.NewStringPatch()
  if err := p.Option1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Option1), err)
  }
  return nil
}

func (p *MyUnionFieldPatch)  ReadField2(iprot thrift.Protocol) error {
  p.Option2 = patch1.NewI32Patch()
  if err := p.Option2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Option2), err)
  }
  return nil
}

func (p *MyUnionFieldPatch)  ReadField3(iprot thrift.Protocol) error {
  p.Option3 = NewInnerUnionPatch()
  if err := p.Option3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Option3), err)
  }
  return nil
}

func (p *MyUnionFieldPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyUnionFieldPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyUnionFieldPatch) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("option1", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:option1: ", p), err) }
  if err := p.Option1.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Option1), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:option1: ", p), err) }
  return err
}

func (p *MyUnionFieldPatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("option2", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:option2: ", p), err) }
  if err := p.Option2.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Option2), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:option2: ", p), err) }
  return err
}

func (p *MyUnionFieldPatch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("option3", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:option3: ", p), err) }
  if err := p.Option3.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Option3), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:option3: ", p), err) }
  return err
}

func (p *MyUnionFieldPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var option1Val string
  if p.Option1 == nil {
    option1Val = "<nil>"
  } else {
    option1Val = fmt.Sprintf("%v", p.Option1)
  }
  var option2Val string
  if p.Option2 == nil {
    option2Val = "<nil>"
  } else {
    option2Val = fmt.Sprintf("%v", p.Option2)
  }
  var option3Val string
  if p.Option3 == nil {
    option3Val = "<nil>"
  } else {
    option3Val = fmt.Sprintf("%v", p.Option3)
  }
  return fmt.Sprintf("MyUnionFieldPatch({Option1:%s Option2:%s Option3:%s})", option1Val, option2Val, option3Val)
}

// Attributes:
//  - Assign: Assigns to a (set) value.
// 
// If set, all other operations are ignored.
// 
// Note: Optional and union fields must be set before assigned.
// 
//  - Clear: Clears a value. Applies first.
//  - PatchPrior: Patches any previously set values. Applies second.
//  - Ensure: Initialize fields, using the given defaults. Applies third.
//  - Patch: Patches any set value, including newly set values. Applies last.
type MyStructPatch struct {
  Assign *MyStruct `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  PatchPrior *MyStructFieldPatch `thrift:"patchPrior,3" db:"patchPrior" json:"patchPrior"`
  // unused field # 4
  Ensure *MyStructEnsureStruct `thrift:"ensure,5" db:"ensure" json:"ensure"`
  Patch *MyStructFieldPatch `thrift:"patch,6" db:"patch" json:"patch"`
}

func NewMyStructPatch() *MyStructPatch {
  return &MyStructPatch{
    PatchPrior: NewMyStructFieldPatch(),
    Ensure: NewMyStructEnsureStruct(),
    Patch: NewMyStructFieldPatch(),
  }
}

var MyStructPatch_Assign_DEFAULT *MyStruct
func (p *MyStructPatch) GetAssign() *MyStruct {
  if !p.IsSetAssign() {
    return MyStructPatch_Assign_DEFAULT
  }
  return p.Assign
}
func (p *MyStructPatch) DefaultGetAssign() *MyStruct {
  if !p.IsSetAssign() {
    return NewMyStruct()
  }
  return p.Assign
}

func (p *MyStructPatch) GetClear() bool {
  return p.Clear
}
var MyStructPatch_PatchPrior_DEFAULT *MyStructFieldPatch
func (p *MyStructPatch) GetPatchPrior() *MyStructFieldPatch {
  if !p.IsSetPatchPrior() {
    return MyStructPatch_PatchPrior_DEFAULT
  }
  return p.PatchPrior
}
func (p *MyStructPatch) DefaultGetPatchPrior() *MyStructFieldPatch {
  if !p.IsSetPatchPrior() {
    return NewMyStructFieldPatch()
  }
  return p.PatchPrior
}
var MyStructPatch_Ensure_DEFAULT *MyStructEnsureStruct
func (p *MyStructPatch) GetEnsure() *MyStructEnsureStruct {
  if !p.IsSetEnsure() {
    return MyStructPatch_Ensure_DEFAULT
  }
  return p.Ensure
}
func (p *MyStructPatch) DefaultGetEnsure() *MyStructEnsureStruct {
  if !p.IsSetEnsure() {
    return NewMyStructEnsureStruct()
  }
  return p.Ensure
}
var MyStructPatch_Patch_DEFAULT *MyStructFieldPatch
func (p *MyStructPatch) GetPatch() *MyStructFieldPatch {
  if !p.IsSetPatch() {
    return MyStructPatch_Patch_DEFAULT
  }
  return p.Patch
}
func (p *MyStructPatch) DefaultGetPatch() *MyStructFieldPatch {
  if !p.IsSetPatch() {
    return NewMyStructFieldPatch()
  }
  return p.Patch
}
func (p *MyStructPatch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

func (p *MyStructPatch) IsSetPatchPrior() bool {
  return p != nil && p.PatchPrior != nil
}

func (p *MyStructPatch) IsSetEnsure() bool {
  return p != nil && p.Ensure != nil
}

func (p *MyStructPatch) IsSetPatch() bool {
  return p != nil && p.Patch != nil
}

type MyStructPatchBuilder struct {
  obj *MyStructPatch
}

func NewMyStructPatchBuilder() *MyStructPatchBuilder{
  return &MyStructPatchBuilder{
    obj: NewMyStructPatch(),
  }
}

func (p MyStructPatchBuilder) Emit() *MyStructPatch{
  return &MyStructPatch{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
    PatchPrior: p.obj.PatchPrior,
    Ensure: p.obj.Ensure,
    Patch: p.obj.Patch,
  }
}

func (m *MyStructPatchBuilder) Assign(assign *MyStruct) *MyStructPatchBuilder {
  m.obj.Assign = assign
  return m
}

func (m *MyStructPatchBuilder) Clear(clear bool) *MyStructPatchBuilder {
  m.obj.Clear = clear
  return m
}

func (m *MyStructPatchBuilder) PatchPrior(patchPrior *MyStructFieldPatch) *MyStructPatchBuilder {
  m.obj.PatchPrior = patchPrior
  return m
}

func (m *MyStructPatchBuilder) Ensure(ensure *MyStructEnsureStruct) *MyStructPatchBuilder {
  m.obj.Ensure = ensure
  return m
}

func (m *MyStructPatchBuilder) Patch(patch *MyStructFieldPatch) *MyStructPatchBuilder {
  m.obj.Patch = patch
  return m
}

func (m *MyStructPatch) SetAssign(assign *MyStruct) *MyStructPatch {
  m.Assign = assign
  return m
}

func (m *MyStructPatch) SetClear(clear bool) *MyStructPatch {
  m.Clear = clear
  return m
}

func (m *MyStructPatch) SetPatchPrior(patchPrior *MyStructFieldPatch) *MyStructPatch {
  m.PatchPrior = patchPrior
  return m
}

func (m *MyStructPatch) SetEnsure(ensure *MyStructEnsureStruct) *MyStructPatch {
  m.Ensure = ensure
  return m
}

func (m *MyStructPatch) SetPatch(patch *MyStructFieldPatch) *MyStructPatch {
  m.Patch = patch
  return m
}

func (p *MyStructPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField1(iprot thrift.Protocol) error {
  p.Assign = NewMyStruct()
  if err := p.Assign.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Assign), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *MyStructPatch)  ReadField3(iprot thrift.Protocol) error {
  p.PatchPrior = NewMyStructFieldPatch()
  if err := p.PatchPrior.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PatchPrior), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField5(iprot thrift.Protocol) error {
  p.Ensure = NewMyStructEnsureStruct()
  if err := p.Ensure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ensure), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField6(iprot thrift.Protocol) error {
  p.Patch = NewMyStructFieldPatch()
  if err := p.Patch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Patch), err)
  }
  return nil
}

func (p *MyStructPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStructPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStructPatch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := p.Assign.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Assign), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *MyStructPatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patchPrior: ", p), err) }
  if err := p.PatchPrior.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PatchPrior), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patchPrior: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("ensure", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ensure: ", p), err) }
  if err := p.Ensure.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ensure), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ensure: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:patch: ", p), err) }
  if err := p.Patch.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Patch), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:patch: ", p), err) }
  return err
}

func (p *MyStructPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var assignVal string
  if p.Assign == nil {
    assignVal = "<nil>"
  } else {
    assignVal = fmt.Sprintf("%v", p.Assign)
  }
  clearVal := fmt.Sprintf("%v", p.Clear)
  var patchPriorVal string
  if p.PatchPrior == nil {
    patchPriorVal = "<nil>"
  } else {
    patchPriorVal = fmt.Sprintf("%v", p.PatchPrior)
  }
  var ensureVal string
  if p.Ensure == nil {
    ensureVal = "<nil>"
  } else {
    ensureVal = fmt.Sprintf("%v", p.Ensure)
  }
  var patchVal string
  if p.Patch == nil {
    patchVal = "<nil>"
  } else {
    patchVal = fmt.Sprintf("%v", p.Patch)
  }
  return fmt.Sprintf("MyStructPatch({Assign:%s Clear:%s PatchPrior:%s Ensure:%s Patch:%s})", assignVal, clearVal, patchPriorVal, ensureVal, patchVal)
}

// Attributes:
//  - Assign: Assigns to a (set) value.
// 
// If set, all other operations are ignored.
// 
// Note: Optional and union fields must be set before assigned.
// 
//  - Clear: Clears a value. Applies first.
type MyStructField10Patch struct {
  Assign *MyEnum `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
}

func NewMyStructField10Patch() *MyStructField10Patch {
  return &MyStructField10Patch{}
}

var MyStructField10Patch_Assign_DEFAULT MyEnum
func (p *MyStructField10Patch) GetAssign() MyEnum {
  if !p.IsSetAssign() {
    return MyStructField10Patch_Assign_DEFAULT
  }
  return *p.Assign
}

func (p *MyStructField10Patch) GetClear() bool {
  return p.Clear
}
func (p *MyStructField10Patch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

type MyStructField10PatchBuilder struct {
  obj *MyStructField10Patch
}

func NewMyStructField10PatchBuilder() *MyStructField10PatchBuilder{
  return &MyStructField10PatchBuilder{
    obj: NewMyStructField10Patch(),
  }
}

func (p MyStructField10PatchBuilder) Emit() *MyStructField10Patch{
  return &MyStructField10Patch{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
  }
}

func (m *MyStructField10PatchBuilder) Assign(assign *MyEnum) *MyStructField10PatchBuilder {
  m.obj.Assign = assign
  return m
}

func (m *MyStructField10PatchBuilder) Clear(clear bool) *MyStructField10PatchBuilder {
  m.obj.Clear = clear
  return m
}

func (m *MyStructField10Patch) SetAssign(assign *MyEnum) *MyStructField10Patch {
  m.Assign = assign
  return m
}

func (m *MyStructField10Patch) SetClear(clear bool) *MyStructField10Patch {
  m.Clear = clear
  return m
}

func (p *MyStructField10Patch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStructField10Patch)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := MyEnum(v)
    p.Assign = &temp
  }
  return nil
}

func (p *MyStructField10Patch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *MyStructField10Patch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStructField10Patch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStructField10Patch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Assign)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.assign (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *MyStructField10Patch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *MyStructField10Patch) String() string {
  if p == nil {
    return "<nil>"
  }

  var assignVal string
  if p.Assign == nil {
    assignVal = "<nil>"
  } else {
    assignVal = fmt.Sprintf("%v", *p.Assign)
  }
  clearVal := fmt.Sprintf("%v", p.Clear)
  return fmt.Sprintf("MyStructField10Patch({Assign:%s Clear:%s})", assignVal, clearVal)
}

// Attributes:
//  - Assign: Assigns to a (set) value.
// 
// If set, all other operations are ignored.
// 
// Note: Optional and union fields must be set before assigned.
// 
//  - Clear: Clears a value. Applies first.
type MyStructField23Patch struct {
  Assign *MyEnum `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
}

func NewMyStructField23Patch() *MyStructField23Patch {
  return &MyStructField23Patch{}
}

var MyStructField23Patch_Assign_DEFAULT MyEnum
func (p *MyStructField23Patch) GetAssign() MyEnum {
  if !p.IsSetAssign() {
    return MyStructField23Patch_Assign_DEFAULT
  }
  return *p.Assign
}

func (p *MyStructField23Patch) GetClear() bool {
  return p.Clear
}
func (p *MyStructField23Patch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

type MyStructField23PatchBuilder struct {
  obj *MyStructField23Patch
}

func NewMyStructField23PatchBuilder() *MyStructField23PatchBuilder{
  return &MyStructField23PatchBuilder{
    obj: NewMyStructField23Patch(),
  }
}

func (p MyStructField23PatchBuilder) Emit() *MyStructField23Patch{
  return &MyStructField23Patch{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
  }
}

func (m *MyStructField23PatchBuilder) Assign(assign *MyEnum) *MyStructField23PatchBuilder {
  m.obj.Assign = assign
  return m
}

func (m *MyStructField23PatchBuilder) Clear(clear bool) *MyStructField23PatchBuilder {
  m.obj.Clear = clear
  return m
}

func (m *MyStructField23Patch) SetAssign(assign *MyEnum) *MyStructField23Patch {
  m.Assign = assign
  return m
}

func (m *MyStructField23Patch) SetClear(clear bool) *MyStructField23Patch {
  m.Clear = clear
  return m
}

func (p *MyStructField23Patch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStructField23Patch)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := MyEnum(v)
    p.Assign = &temp
  }
  return nil
}

func (p *MyStructField23Patch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *MyStructField23Patch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStructField23Patch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStructField23Patch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Assign)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.assign (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *MyStructField23Patch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *MyStructField23Patch) String() string {
  if p == nil {
    return "<nil>"
  }

  var assignVal string
  if p.Assign == nil {
    assignVal = "<nil>"
  } else {
    assignVal = fmt.Sprintf("%v", *p.Assign)
  }
  clearVal := fmt.Sprintf("%v", p.Clear)
  return fmt.Sprintf("MyStructField23Patch({Assign:%s Clear:%s})", assignVal, clearVal)
}

// Attributes:
//  - Assign: Assigns to a (set) value.
// 
// If set, all other operations are ignored.
// 
// Note: Optional and union fields must be set before assigned.
// 
//  - Clear: Clears a value. Applies first.
//  - Patch: Patches list values by index. Applies second.
//  - Remove: Removes entries, if present. Applies third.
//  - Prepend: Prepends to the front of a given list.
//  - Append: Appends to the back of a given list.
type MyStructField26Patch struct {
  Assign []int16 `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  Patch map[patch1.ListPatchIndex]*patch1.I16Patch `thrift:"patch,3" db:"patch" json:"patch"`
  // unused fields # 4 to 6
  Remove []int16 `thrift:"remove,7" db:"remove" json:"remove"`
  Prepend []int16 `thrift:"prepend,8" db:"prepend" json:"prepend"`
  Append []int16 `thrift:"append,9" db:"append" json:"append"`
}

func NewMyStructField26Patch() *MyStructField26Patch {
  return &MyStructField26Patch{}
}

var MyStructField26Patch_Assign_DEFAULT []int16

func (p *MyStructField26Patch) GetAssign() []int16 {
  return p.Assign
}

func (p *MyStructField26Patch) GetClear() bool {
  return p.Clear
}

func (p *MyStructField26Patch) GetPatch() map[patch1.ListPatchIndex]*patch1.I16Patch {
  return p.Patch
}

func (p *MyStructField26Patch) GetRemove() []int16 {
  return p.Remove
}

func (p *MyStructField26Patch) GetPrepend() []int16 {
  return p.Prepend
}

func (p *MyStructField26Patch) GetAppend() []int16 {
  return p.Append
}
func (p *MyStructField26Patch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

type MyStructField26PatchBuilder struct {
  obj *MyStructField26Patch
}

func NewMyStructField26PatchBuilder() *MyStructField26PatchBuilder{
  return &MyStructField26PatchBuilder{
    obj: NewMyStructField26Patch(),
  }
}

func (p MyStructField26PatchBuilder) Emit() *MyStructField26Patch{
  return &MyStructField26Patch{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
    Patch: p.obj.Patch,
    Remove: p.obj.Remove,
    Prepend: p.obj.Prepend,
    Append: p.obj.Append,
  }
}

func (m *MyStructField26PatchBuilder) Assign(assign []int16) *MyStructField26PatchBuilder {
  m.obj.Assign = assign
  return m
}

func (m *MyStructField26PatchBuilder) Clear(clear bool) *MyStructField26PatchBuilder {
  m.obj.Clear = clear
  return m
}

func (m *MyStructField26PatchBuilder) Patch(patch map[patch1.ListPatchIndex]*patch1.I16Patch) *MyStructField26PatchBuilder {
  m.obj.Patch = patch
  return m
}

func (m *MyStructField26PatchBuilder) Remove(remove []int16) *MyStructField26PatchBuilder {
  m.obj.Remove = remove
  return m
}

func (m *MyStructField26PatchBuilder) Prepend(prepend []int16) *MyStructField26PatchBuilder {
  m.obj.Prepend = prepend
  return m
}

func (m *MyStructField26PatchBuilder) Append(append []int16) *MyStructField26PatchBuilder {
  m.obj.Append = append
  return m
}

func (m *MyStructField26Patch) SetAssign(assign []int16) *MyStructField26Patch {
  m.Assign = assign
  return m
}

func (m *MyStructField26Patch) SetClear(clear bool) *MyStructField26Patch {
  m.Clear = clear
  return m
}

func (m *MyStructField26Patch) SetPatch(patch map[patch1.ListPatchIndex]*patch1.I16Patch) *MyStructField26Patch {
  m.Patch = patch
  return m
}

func (m *MyStructField26Patch) SetRemove(remove []int16) *MyStructField26Patch {
  m.Remove = remove
  return m
}

func (m *MyStructField26Patch) SetPrepend(prepend []int16) *MyStructField26Patch {
  m.Prepend = prepend
  return m
}

func (m *MyStructField26Patch) SetAppend(append []int16) *MyStructField26Patch {
  m.Append = append
  return m
}

func (p *MyStructField26Patch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStructField26Patch)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int16, 0, size)
  p.Assign =  tSlice
  for i := 0; i < size; i ++ {
    var _elem16 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem16 = v
    }
    p.Assign = append(p.Assign, _elem16)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MyStructField26Patch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *MyStructField26Patch)  ReadField3(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[patch1.ListPatchIndex]*patch1.I16Patch, size)
  p.Patch =  tMap
  for i := 0; i < size; i ++ {
    var _key17 patch1.ListPatchIndex
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := patch1.ListPatchIndex(v)
      _key17 = temp
    }
    _val18 := patch1.NewI16Patch()
    if err := _val18.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val18), err)
    }
    p.Patch[_key17] = _val18
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStructField26Patch)  ReadField7(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int16, 0, size)
  p.Remove =  tSlice
  for i := 0; i < size; i ++ {
    var _elem19 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem19 = v
    }
    p.Remove = append(p.Remove, _elem19)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MyStructField26Patch)  ReadField8(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int16, 0, size)
  p.Prepend =  tSlice
  for i := 0; i < size; i ++ {
    var _elem20 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem20 = v
    }
    p.Prepend = append(p.Prepend, _elem20)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MyStructField26Patch)  ReadField9(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int16, 0, size)
  p.Append =  tSlice
  for i := 0; i < size; i ++ {
    var _elem21 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem21 = v
    }
    p.Append = append(p.Append, _elem21)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MyStructField26Patch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStructField26Patch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStructField26Patch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I16, len(p.Assign)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Assign {
      if err := oprot.WriteI16(int16(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *MyStructField26Patch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *MyStructField26Patch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patch: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.Patch)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Patch {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patch: ", p), err) }
  return err
}

func (p *MyStructField26Patch) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("remove", thrift.LIST, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:remove: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I16, len(p.Remove)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Remove {
    if err := oprot.WriteI16(int16(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:remove: ", p), err) }
  return err
}

func (p *MyStructField26Patch) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("prepend", thrift.LIST, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:prepend: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I16, len(p.Prepend)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Prepend {
    if err := oprot.WriteI16(int16(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:prepend: ", p), err) }
  return err
}

func (p *MyStructField26Patch) writeField9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("append", thrift.LIST, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:append: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I16, len(p.Append)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Append {
    if err := oprot.WriteI16(int16(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:append: ", p), err) }
  return err
}

func (p *MyStructField26Patch) String() string {
  if p == nil {
    return "<nil>"
  }

  assignVal := fmt.Sprintf("%v", p.Assign)
  clearVal := fmt.Sprintf("%v", p.Clear)
  patchVal := fmt.Sprintf("%v", p.Patch)
  removeVal := fmt.Sprintf("%v", p.Remove)
  prependVal := fmt.Sprintf("%v", p.Prepend)
  appendVal := fmt.Sprintf("%v", p.Append)
  return fmt.Sprintf("MyStructField26Patch({Assign:%s Clear:%s Patch:%s Remove:%s Prepend:%s Append:%s})", assignVal, clearVal, patchVal, removeVal, prependVal, appendVal)
}

// Attributes:
//  - Assign: Assigns to a (set) value.
// 
// If set, all other operations are ignored.
// 
// Note: Optional and union fields must be set before assigned.
// 
//  - Clear: Clears a value. Applies first.
//  - Remove: Removes entries, if present. Applies third.
//  - Add: Adds entries, if not already present. Applies fourth.
type MyStructField27Patch struct {
  Assign []string `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  // unused fields # 3 to 6
  Remove []string `thrift:"remove,7" db:"remove" json:"remove"`
  Add []string `thrift:"add,8" db:"add" json:"add"`
}

func NewMyStructField27Patch() *MyStructField27Patch {
  return &MyStructField27Patch{}
}

var MyStructField27Patch_Assign_DEFAULT []string

func (p *MyStructField27Patch) GetAssign() []string {
  return p.Assign
}

func (p *MyStructField27Patch) GetClear() bool {
  return p.Clear
}

func (p *MyStructField27Patch) GetRemove() []string {
  return p.Remove
}

func (p *MyStructField27Patch) GetAdd() []string {
  return p.Add
}
func (p *MyStructField27Patch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

type MyStructField27PatchBuilder struct {
  obj *MyStructField27Patch
}

func NewMyStructField27PatchBuilder() *MyStructField27PatchBuilder{
  return &MyStructField27PatchBuilder{
    obj: NewMyStructField27Patch(),
  }
}

func (p MyStructField27PatchBuilder) Emit() *MyStructField27Patch{
  return &MyStructField27Patch{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
    Remove: p.obj.Remove,
    Add: p.obj.Add,
  }
}

func (m *MyStructField27PatchBuilder) Assign(assign []string) *MyStructField27PatchBuilder {
  m.obj.Assign = assign
  return m
}

func (m *MyStructField27PatchBuilder) Clear(clear bool) *MyStructField27PatchBuilder {
  m.obj.Clear = clear
  return m
}

func (m *MyStructField27PatchBuilder) Remove(remove []string) *MyStructField27PatchBuilder {
  m.obj.Remove = remove
  return m
}

func (m *MyStructField27PatchBuilder) Add(add []string) *MyStructField27PatchBuilder {
  m.obj.Add = add
  return m
}

func (m *MyStructField27Patch) SetAssign(assign []string) *MyStructField27Patch {
  m.Assign = assign
  return m
}

func (m *MyStructField27Patch) SetClear(clear bool) *MyStructField27Patch {
  m.Clear = clear
  return m
}

func (m *MyStructField27Patch) SetRemove(remove []string) *MyStructField27Patch {
  m.Remove = remove
  return m
}

func (m *MyStructField27Patch) SetAdd(add []string) *MyStructField27Patch {
  m.Add = add
  return m
}

func (p *MyStructField27Patch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStructField27Patch)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Assign =  tSet
  for i := 0; i < size; i ++ {
    var _elem22 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem22 = v
    }
    p.Assign = append(p.Assign, _elem22)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *MyStructField27Patch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *MyStructField27Patch)  ReadField7(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Remove =  tSet
  for i := 0; i < size; i ++ {
    var _elem23 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem23 = v
    }
    p.Remove = append(p.Remove, _elem23)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *MyStructField27Patch)  ReadField8(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Add =  tSet
  for i := 0; i < size; i ++ {
    var _elem24 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem24 = v
    }
    p.Add = append(p.Add, _elem24)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *MyStructField27Patch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStructField27Patch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStructField27Patch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.SET, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.STRING, len(p.Assign)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    set := make(map[string]bool, len(p.Assign))
    for _, v := range p.Assign {
      if ok := set[v]; ok {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
      }
      set[v] = true
    }
    for _, v := range p.Assign {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *MyStructField27Patch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *MyStructField27Patch) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("remove", thrift.SET, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:remove: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.Remove)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  set := make(map[string]bool, len(p.Remove))
  for _, v := range p.Remove {
    if ok := set[v]; ok {
      return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
    }
    set[v] = true
  }
  for _, v := range p.Remove {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:remove: ", p), err) }
  return err
}

func (p *MyStructField27Patch) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("add", thrift.SET, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:add: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.Add)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  set := make(map[string]bool, len(p.Add))
  for _, v := range p.Add {
    if ok := set[v]; ok {
      return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
    }
    set[v] = true
  }
  for _, v := range p.Add {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:add: ", p), err) }
  return err
}

func (p *MyStructField27Patch) String() string {
  if p == nil {
    return "<nil>"
  }

  assignVal := fmt.Sprintf("%v", p.Assign)
  clearVal := fmt.Sprintf("%v", p.Clear)
  removeVal := fmt.Sprintf("%v", p.Remove)
  addVal := fmt.Sprintf("%v", p.Add)
  return fmt.Sprintf("MyStructField27Patch({Assign:%s Clear:%s Remove:%s Add:%s})", assignVal, clearVal, removeVal, addVal)
}

// Attributes:
//  - Assign: Assigns to a (set) value.
// 
// If set, all other operations are ignored.
// 
// Note: Optional and union fields must be set before assigned.
// 
//  - Clear: Clears a value. Applies first.
//  - PatchPrior: Patches any previously set values. Applies second.
//  - Add: Add the given values, if the keys are not already present. Applies forth.
//  - Patch: Patches any set value, including newly set values. Applies last.
//  - Remove: Removes entries, if present. Applies third.
//  - Put: Adds or replaces the given key/value pairs. Applies fifth.
type MyStructField28Patch struct {
  Assign map[string]string `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  PatchPrior map[string]*patch1.StringPatch `thrift:"patchPrior,3" db:"patchPrior" json:"patchPrior"`
  // unused field # 4
  Add map[string]string `thrift:"add,5" db:"add" json:"add"`
  Patch map[string]*patch1.StringPatch `thrift:"patch,6" db:"patch" json:"patch"`
  Remove []string `thrift:"remove,7" db:"remove" json:"remove"`
  // unused field # 8
  Put map[string]string `thrift:"put,9" db:"put" json:"put"`
}

func NewMyStructField28Patch() *MyStructField28Patch {
  return &MyStructField28Patch{}
}

var MyStructField28Patch_Assign_DEFAULT map[string]string

func (p *MyStructField28Patch) GetAssign() map[string]string {
  return p.Assign
}

func (p *MyStructField28Patch) GetClear() bool {
  return p.Clear
}

func (p *MyStructField28Patch) GetPatchPrior() map[string]*patch1.StringPatch {
  return p.PatchPrior
}

func (p *MyStructField28Patch) GetAdd() map[string]string {
  return p.Add
}

func (p *MyStructField28Patch) GetPatch() map[string]*patch1.StringPatch {
  return p.Patch
}

func (p *MyStructField28Patch) GetRemove() []string {
  return p.Remove
}

func (p *MyStructField28Patch) GetPut() map[string]string {
  return p.Put
}
func (p *MyStructField28Patch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

type MyStructField28PatchBuilder struct {
  obj *MyStructField28Patch
}

func NewMyStructField28PatchBuilder() *MyStructField28PatchBuilder{
  return &MyStructField28PatchBuilder{
    obj: NewMyStructField28Patch(),
  }
}

func (p MyStructField28PatchBuilder) Emit() *MyStructField28Patch{
  return &MyStructField28Patch{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
    PatchPrior: p.obj.PatchPrior,
    Add: p.obj.Add,
    Patch: p.obj.Patch,
    Remove: p.obj.Remove,
    Put: p.obj.Put,
  }
}

func (m *MyStructField28PatchBuilder) Assign(assign map[string]string) *MyStructField28PatchBuilder {
  m.obj.Assign = assign
  return m
}

func (m *MyStructField28PatchBuilder) Clear(clear bool) *MyStructField28PatchBuilder {
  m.obj.Clear = clear
  return m
}

func (m *MyStructField28PatchBuilder) PatchPrior(patchPrior map[string]*patch1.StringPatch) *MyStructField28PatchBuilder {
  m.obj.PatchPrior = patchPrior
  return m
}

func (m *MyStructField28PatchBuilder) Add(add map[string]string) *MyStructField28PatchBuilder {
  m.obj.Add = add
  return m
}

func (m *MyStructField28PatchBuilder) Patch(patch map[string]*patch1.StringPatch) *MyStructField28PatchBuilder {
  m.obj.Patch = patch
  return m
}

func (m *MyStructField28PatchBuilder) Remove(remove []string) *MyStructField28PatchBuilder {
  m.obj.Remove = remove
  return m
}

func (m *MyStructField28PatchBuilder) Put(put map[string]string) *MyStructField28PatchBuilder {
  m.obj.Put = put
  return m
}

func (m *MyStructField28Patch) SetAssign(assign map[string]string) *MyStructField28Patch {
  m.Assign = assign
  return m
}

func (m *MyStructField28Patch) SetClear(clear bool) *MyStructField28Patch {
  m.Clear = clear
  return m
}

func (m *MyStructField28Patch) SetPatchPrior(patchPrior map[string]*patch1.StringPatch) *MyStructField28Patch {
  m.PatchPrior = patchPrior
  return m
}

func (m *MyStructField28Patch) SetAdd(add map[string]string) *MyStructField28Patch {
  m.Add = add
  return m
}

func (m *MyStructField28Patch) SetPatch(patch map[string]*patch1.StringPatch) *MyStructField28Patch {
  m.Patch = patch
  return m
}

func (m *MyStructField28Patch) SetRemove(remove []string) *MyStructField28Patch {
  m.Remove = remove
  return m
}

func (m *MyStructField28Patch) SetPut(put map[string]string) *MyStructField28Patch {
  m.Put = put
  return m
}

func (p *MyStructField28Patch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStructField28Patch)  ReadField1(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Assign =  tMap
  for i := 0; i < size; i ++ {
    var _key25 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key25 = v
    }
    var _val26 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val26 = v
    }
    p.Assign[_key25] = _val26
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStructField28Patch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *MyStructField28Patch)  ReadField3(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*patch1.StringPatch, size)
  p.PatchPrior =  tMap
  for i := 0; i < size; i ++ {
    var _key27 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key27 = v
    }
    _val28 := patch1.NewStringPatch()
    if err := _val28.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val28), err)
    }
    p.PatchPrior[_key27] = _val28
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStructField28Patch)  ReadField5(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Add =  tMap
  for i := 0; i < size; i ++ {
    var _key29 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key29 = v
    }
    var _val30 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val30 = v
    }
    p.Add[_key29] = _val30
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStructField28Patch)  ReadField6(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*patch1.StringPatch, size)
  p.Patch =  tMap
  for i := 0; i < size; i ++ {
    var _key31 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key31 = v
    }
    _val32 := patch1.NewStringPatch()
    if err := _val32.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val32), err)
    }
    p.Patch[_key31] = _val32
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStructField28Patch)  ReadField7(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Remove =  tSet
  for i := 0; i < size; i ++ {
    var _elem33 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem33 = v
    }
    p.Remove = append(p.Remove, _elem33)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *MyStructField28Patch)  ReadField9(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Put =  tMap
  for i := 0; i < size; i ++ {
    var _key34 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key34 = v
    }
    var _val35 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val35 = v
    }
    p.Put[_key34] = _val35
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStructField28Patch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStructField28Patch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStructField28Patch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.MAP, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Assign)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Assign {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *MyStructField28Patch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *MyStructField28Patch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchPrior", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patchPrior: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.PatchPrior)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.PatchPrior {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patchPrior: ", p), err) }
  return err
}

func (p *MyStructField28Patch) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("add", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:add: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Add)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Add {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:add: ", p), err) }
  return err
}

func (p *MyStructField28Patch) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.MAP, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:patch: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Patch)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Patch {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:patch: ", p), err) }
  return err
}

func (p *MyStructField28Patch) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("remove", thrift.SET, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:remove: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.Remove)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  set := make(map[string]bool, len(p.Remove))
  for _, v := range p.Remove {
    if ok := set[v]; ok {
      return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
    }
    set[v] = true
  }
  for _, v := range p.Remove {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:remove: ", p), err) }
  return err
}

func (p *MyStructField28Patch) writeField9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("put", thrift.MAP, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:put: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Put)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Put {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:put: ", p), err) }
  return err
}

func (p *MyStructField28Patch) String() string {
  if p == nil {
    return "<nil>"
  }

  assignVal := fmt.Sprintf("%v", p.Assign)
  clearVal := fmt.Sprintf("%v", p.Clear)
  patchPriorVal := fmt.Sprintf("%v", p.PatchPrior)
  addVal := fmt.Sprintf("%v", p.Add)
  patchVal := fmt.Sprintf("%v", p.Patch)
  removeVal := fmt.Sprintf("%v", p.Remove)
  putVal := fmt.Sprintf("%v", p.Put)
  return fmt.Sprintf("MyStructField28Patch({Assign:%s Clear:%s PatchPrior:%s Add:%s Patch:%s Remove:%s Put:%s})", assignVal, clearVal, patchPriorVal, addVal, patchVal, removeVal, putVal)
}

// Attributes:
//  - Assign: Assigns to a (set) value.
// 
// If set, all other operations are ignored.
// 
// Note: Optional and union fields must be set before assigned.
// 
//  - Clear: Clears a value. Applies first.
//  - Patch: Patches list values by index. Applies second.
//  - Remove: Removes entries, if present. Applies third.
//  - Prepend: Prepends to the front of a given list.
//  - Append: Appends to the back of a given list.
type MyStructField29Patch struct {
  Assign []map[string]int32 `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  Patch map[patch1.ListPatchIndex]*MyStructField29Patch1 `thrift:"patch,3" db:"patch" json:"patch"`
  // unused fields # 4 to 6
  Remove []map[string]int32 `thrift:"remove,7" db:"remove" json:"remove"`
  Prepend []map[string]int32 `thrift:"prepend,8" db:"prepend" json:"prepend"`
  Append []map[string]int32 `thrift:"append,9" db:"append" json:"append"`
}

func NewMyStructField29Patch() *MyStructField29Patch {
  return &MyStructField29Patch{}
}

var MyStructField29Patch_Assign_DEFAULT []map[string]int32

func (p *MyStructField29Patch) GetAssign() []map[string]int32 {
  return p.Assign
}

func (p *MyStructField29Patch) GetClear() bool {
  return p.Clear
}

func (p *MyStructField29Patch) GetPatch() map[patch1.ListPatchIndex]*MyStructField29Patch1 {
  return p.Patch
}

func (p *MyStructField29Patch) GetRemove() []map[string]int32 {
  return p.Remove
}

func (p *MyStructField29Patch) GetPrepend() []map[string]int32 {
  return p.Prepend
}

func (p *MyStructField29Patch) GetAppend() []map[string]int32 {
  return p.Append
}
func (p *MyStructField29Patch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

type MyStructField29PatchBuilder struct {
  obj *MyStructField29Patch
}

func NewMyStructField29PatchBuilder() *MyStructField29PatchBuilder{
  return &MyStructField29PatchBuilder{
    obj: NewMyStructField29Patch(),
  }
}

func (p MyStructField29PatchBuilder) Emit() *MyStructField29Patch{
  return &MyStructField29Patch{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
    Patch: p.obj.Patch,
    Remove: p.obj.Remove,
    Prepend: p.obj.Prepend,
    Append: p.obj.Append,
  }
}

func (m *MyStructField29PatchBuilder) Assign(assign []map[string]int32) *MyStructField29PatchBuilder {
  m.obj.Assign = assign
  return m
}

func (m *MyStructField29PatchBuilder) Clear(clear bool) *MyStructField29PatchBuilder {
  m.obj.Clear = clear
  return m
}

func (m *MyStructField29PatchBuilder) Patch(patch map[patch1.ListPatchIndex]*MyStructField29Patch1) *MyStructField29PatchBuilder {
  m.obj.Patch = patch
  return m
}

func (m *MyStructField29PatchBuilder) Remove(remove []map[string]int32) *MyStructField29PatchBuilder {
  m.obj.Remove = remove
  return m
}

func (m *MyStructField29PatchBuilder) Prepend(prepend []map[string]int32) *MyStructField29PatchBuilder {
  m.obj.Prepend = prepend
  return m
}

func (m *MyStructField29PatchBuilder) Append(append []map[string]int32) *MyStructField29PatchBuilder {
  m.obj.Append = append
  return m
}

func (m *MyStructField29Patch) SetAssign(assign []map[string]int32) *MyStructField29Patch {
  m.Assign = assign
  return m
}

func (m *MyStructField29Patch) SetClear(clear bool) *MyStructField29Patch {
  m.Clear = clear
  return m
}

func (m *MyStructField29Patch) SetPatch(patch map[patch1.ListPatchIndex]*MyStructField29Patch1) *MyStructField29Patch {
  m.Patch = patch
  return m
}

func (m *MyStructField29Patch) SetRemove(remove []map[string]int32) *MyStructField29Patch {
  m.Remove = remove
  return m
}

func (m *MyStructField29Patch) SetPrepend(prepend []map[string]int32) *MyStructField29Patch {
  m.Prepend = prepend
  return m
}

func (m *MyStructField29Patch) SetAppend(append []map[string]int32) *MyStructField29Patch {
  m.Append = append
  return m
}

func (p *MyStructField29Patch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStructField29Patch)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]map[string]int32, 0, size)
  p.Assign =  tSlice
  for i := 0; i < size; i ++ {
    _, _, size, err := iprot.ReadMapBegin()
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[string]int32, size)
    _elem36 :=  tMap
    for i := 0; i < size; i ++ {
      var _key37 string
      if v, err := iprot.ReadString(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        _key37 = v
      }
      var _val38 int32
      if v, err := iprot.ReadI32(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        _val38 = v
      }
      _elem36[_key37] = _val38
    }
    if err := iprot.ReadMapEnd(); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.Assign = append(p.Assign, _elem36)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MyStructField29Patch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *MyStructField29Patch)  ReadField3(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[patch1.ListPatchIndex]*MyStructField29Patch1, size)
  p.Patch =  tMap
  for i := 0; i < size; i ++ {
    var _key39 patch1.ListPatchIndex
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := patch1.ListPatchIndex(v)
      _key39 = temp
    }
    _val40 := NewMyStructField29Patch1()
    if err := _val40.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val40), err)
    }
    p.Patch[_key39] = _val40
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStructField29Patch)  ReadField7(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]map[string]int32, 0, size)
  p.Remove =  tSlice
  for i := 0; i < size; i ++ {
    _, _, size, err := iprot.ReadMapBegin()
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[string]int32, size)
    _elem41 :=  tMap
    for i := 0; i < size; i ++ {
      var _key42 string
      if v, err := iprot.ReadString(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        _key42 = v
      }
      var _val43 int32
      if v, err := iprot.ReadI32(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        _val43 = v
      }
      _elem41[_key42] = _val43
    }
    if err := iprot.ReadMapEnd(); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.Remove = append(p.Remove, _elem41)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MyStructField29Patch)  ReadField8(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]map[string]int32, 0, size)
  p.Prepend =  tSlice
  for i := 0; i < size; i ++ {
    _, _, size, err := iprot.ReadMapBegin()
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[string]int32, size)
    _elem44 :=  tMap
    for i := 0; i < size; i ++ {
      var _key45 string
      if v, err := iprot.ReadString(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        _key45 = v
      }
      var _val46 int32
      if v, err := iprot.ReadI32(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        _val46 = v
      }
      _elem44[_key45] = _val46
    }
    if err := iprot.ReadMapEnd(); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.Prepend = append(p.Prepend, _elem44)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MyStructField29Patch)  ReadField9(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]map[string]int32, 0, size)
  p.Append =  tSlice
  for i := 0; i < size; i ++ {
    _, _, size, err := iprot.ReadMapBegin()
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[string]int32, size)
    _elem47 :=  tMap
    for i := 0; i < size; i ++ {
      var _key48 string
      if v, err := iprot.ReadString(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        _key48 = v
      }
      var _val49 int32
      if v, err := iprot.ReadI32(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        _val49 = v
      }
      _elem47[_key48] = _val49
    }
    if err := iprot.ReadMapEnd(); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.Append = append(p.Append, _elem47)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MyStructField29Patch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStructField29Patch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStructField29Patch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := oprot.WriteListBegin(thrift.MAP, len(p.Assign)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Assign {
      if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(v)); err != nil {
        return thrift.PrependError("error writing map begin: ", err)
      }
      for k, v := range v {
        if err := oprot.WriteString(string(k)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
        if err := oprot.WriteI32(int32(v)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      }
      if err := oprot.WriteMapEnd(); err != nil {
        return thrift.PrependError("error writing map end: ", err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *MyStructField29Patch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *MyStructField29Patch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patch: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.Patch)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Patch {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patch: ", p), err) }
  return err
}

func (p *MyStructField29Patch) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("remove", thrift.LIST, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:remove: ", p), err) }
  if err := oprot.WriteListBegin(thrift.MAP, len(p.Remove)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Remove {
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(v)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range v {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:remove: ", p), err) }
  return err
}

func (p *MyStructField29Patch) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("prepend", thrift.LIST, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:prepend: ", p), err) }
  if err := oprot.WriteListBegin(thrift.MAP, len(p.Prepend)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Prepend {
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(v)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range v {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:prepend: ", p), err) }
  return err
}

func (p *MyStructField29Patch) writeField9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("append", thrift.LIST, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:append: ", p), err) }
  if err := oprot.WriteListBegin(thrift.MAP, len(p.Append)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Append {
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(v)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range v {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:append: ", p), err) }
  return err
}

func (p *MyStructField29Patch) String() string {
  if p == nil {
    return "<nil>"
  }

  assignVal := fmt.Sprintf("%v", p.Assign)
  clearVal := fmt.Sprintf("%v", p.Clear)
  patchVal := fmt.Sprintf("%v", p.Patch)
  removeVal := fmt.Sprintf("%v", p.Remove)
  prependVal := fmt.Sprintf("%v", p.Prepend)
  appendVal := fmt.Sprintf("%v", p.Append)
  return fmt.Sprintf("MyStructField29Patch({Assign:%s Clear:%s Patch:%s Remove:%s Prepend:%s Append:%s})", assignVal, clearVal, patchVal, removeVal, prependVal, appendVal)
}

// Attributes:
//  - Assign: Assigns to a (set) value.
// 
// If set, all other operations are ignored.
// 
// Note: Optional and union fields must be set before assigned.
// 
//  - Clear: Clears a value. Applies first.
//  - PatchPrior: Patches any previously set values. Applies second.
//  - Add: Add the given values, if the keys are not already present. Applies forth.
//  - Patch: Patches any set value, including newly set values. Applies last.
//  - Remove: Removes entries, if present. Applies third.
//  - Put: Adds or replaces the given key/value pairs. Applies fifth.
type MyStructField29Patch1 struct {
  Assign map[string]int32 `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  PatchPrior map[string]*patch1.I32Patch `thrift:"patchPrior,3" db:"patchPrior" json:"patchPrior"`
  // unused field # 4
  Add map[string]int32 `thrift:"add,5" db:"add" json:"add"`
  Patch map[string]*patch1.I32Patch `thrift:"patch,6" db:"patch" json:"patch"`
  Remove []string `thrift:"remove,7" db:"remove" json:"remove"`
  // unused field # 8
  Put map[string]int32 `thrift:"put,9" db:"put" json:"put"`
}

func NewMyStructField29Patch1() *MyStructField29Patch1 {
  return &MyStructField29Patch1{}
}

var MyStructField29Patch1_Assign_DEFAULT map[string]int32

func (p *MyStructField29Patch1) GetAssign() map[string]int32 {
  return p.Assign
}

func (p *MyStructField29Patch1) GetClear() bool {
  return p.Clear
}

func (p *MyStructField29Patch1) GetPatchPrior() map[string]*patch1.I32Patch {
  return p.PatchPrior
}

func (p *MyStructField29Patch1) GetAdd() map[string]int32 {
  return p.Add
}

func (p *MyStructField29Patch1) GetPatch() map[string]*patch1.I32Patch {
  return p.Patch
}

func (p *MyStructField29Patch1) GetRemove() []string {
  return p.Remove
}

func (p *MyStructField29Patch1) GetPut() map[string]int32 {
  return p.Put
}
func (p *MyStructField29Patch1) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

type MyStructField29Patch1Builder struct {
  obj *MyStructField29Patch1
}

func NewMyStructField29Patch1Builder() *MyStructField29Patch1Builder{
  return &MyStructField29Patch1Builder{
    obj: NewMyStructField29Patch1(),
  }
}

func (p MyStructField29Patch1Builder) Emit() *MyStructField29Patch1{
  return &MyStructField29Patch1{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
    PatchPrior: p.obj.PatchPrior,
    Add: p.obj.Add,
    Patch: p.obj.Patch,
    Remove: p.obj.Remove,
    Put: p.obj.Put,
  }
}

func (m *MyStructField29Patch1Builder) Assign(assign map[string]int32) *MyStructField29Patch1Builder {
  m.obj.Assign = assign
  return m
}

func (m *MyStructField29Patch1Builder) Clear(clear bool) *MyStructField29Patch1Builder {
  m.obj.Clear = clear
  return m
}

func (m *MyStructField29Patch1Builder) PatchPrior(patchPrior map[string]*patch1.I32Patch) *MyStructField29Patch1Builder {
  m.obj.PatchPrior = patchPrior
  return m
}

func (m *MyStructField29Patch1Builder) Add(add map[string]int32) *MyStructField29Patch1Builder {
  m.obj.Add = add
  return m
}

func (m *MyStructField29Patch1Builder) Patch(patch map[string]*patch1.I32Patch) *MyStructField29Patch1Builder {
  m.obj.Patch = patch
  return m
}

func (m *MyStructField29Patch1Builder) Remove(remove []string) *MyStructField29Patch1Builder {
  m.obj.Remove = remove
  return m
}

func (m *MyStructField29Patch1Builder) Put(put map[string]int32) *MyStructField29Patch1Builder {
  m.obj.Put = put
  return m
}

func (m *MyStructField29Patch1) SetAssign(assign map[string]int32) *MyStructField29Patch1 {
  m.Assign = assign
  return m
}

func (m *MyStructField29Patch1) SetClear(clear bool) *MyStructField29Patch1 {
  m.Clear = clear
  return m
}

func (m *MyStructField29Patch1) SetPatchPrior(patchPrior map[string]*patch1.I32Patch) *MyStructField29Patch1 {
  m.PatchPrior = patchPrior
  return m
}

func (m *MyStructField29Patch1) SetAdd(add map[string]int32) *MyStructField29Patch1 {
  m.Add = add
  return m
}

func (m *MyStructField29Patch1) SetPatch(patch map[string]*patch1.I32Patch) *MyStructField29Patch1 {
  m.Patch = patch
  return m
}

func (m *MyStructField29Patch1) SetRemove(remove []string) *MyStructField29Patch1 {
  m.Remove = remove
  return m
}

func (m *MyStructField29Patch1) SetPut(put map[string]int32) *MyStructField29Patch1 {
  m.Put = put
  return m
}

func (p *MyStructField29Patch1) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStructField29Patch1)  ReadField1(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int32, size)
  p.Assign =  tMap
  for i := 0; i < size; i ++ {
    var _key50 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key50 = v
    }
    var _val51 int32
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val51 = v
    }
    p.Assign[_key50] = _val51
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStructField29Patch1)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *MyStructField29Patch1)  ReadField3(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*patch1.I32Patch, size)
  p.PatchPrior =  tMap
  for i := 0; i < size; i ++ {
    var _key52 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key52 = v
    }
    _val53 := patch1.NewI32Patch()
    if err := _val53.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val53), err)
    }
    p.PatchPrior[_key52] = _val53
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStructField29Patch1)  ReadField5(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int32, size)
  p.Add =  tMap
  for i := 0; i < size; i ++ {
    var _key54 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key54 = v
    }
    var _val55 int32
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val55 = v
    }
    p.Add[_key54] = _val55
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStructField29Patch1)  ReadField6(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*patch1.I32Patch, size)
  p.Patch =  tMap
  for i := 0; i < size; i ++ {
    var _key56 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key56 = v
    }
    _val57 := patch1.NewI32Patch()
    if err := _val57.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val57), err)
    }
    p.Patch[_key56] = _val57
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStructField29Patch1)  ReadField7(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Remove =  tSet
  for i := 0; i < size; i ++ {
    var _elem58 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem58 = v
    }
    p.Remove = append(p.Remove, _elem58)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *MyStructField29Patch1)  ReadField9(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int32, size)
  p.Put =  tMap
  for i := 0; i < size; i ++ {
    var _key59 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key59 = v
    }
    var _val60 int32
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val60 = v
    }
    p.Put[_key59] = _val60
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStructField29Patch1) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStructField29Patch1"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStructField29Patch1) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.MAP, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.Assign)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Assign {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *MyStructField29Patch1) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *MyStructField29Patch1) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchPrior", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patchPrior: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.PatchPrior)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.PatchPrior {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patchPrior: ", p), err) }
  return err
}

func (p *MyStructField29Patch1) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("add", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:add: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.Add)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Add {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:add: ", p), err) }
  return err
}

func (p *MyStructField29Patch1) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.MAP, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:patch: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Patch)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Patch {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:patch: ", p), err) }
  return err
}

func (p *MyStructField29Patch1) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("remove", thrift.SET, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:remove: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.Remove)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  set := make(map[string]bool, len(p.Remove))
  for _, v := range p.Remove {
    if ok := set[v]; ok {
      return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
    }
    set[v] = true
  }
  for _, v := range p.Remove {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:remove: ", p), err) }
  return err
}

func (p *MyStructField29Patch1) writeField9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("put", thrift.MAP, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:put: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.Put)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Put {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:put: ", p), err) }
  return err
}

func (p *MyStructField29Patch1) String() string {
  if p == nil {
    return "<nil>"
  }

  assignVal := fmt.Sprintf("%v", p.Assign)
  clearVal := fmt.Sprintf("%v", p.Clear)
  patchPriorVal := fmt.Sprintf("%v", p.PatchPrior)
  addVal := fmt.Sprintf("%v", p.Add)
  patchVal := fmt.Sprintf("%v", p.Patch)
  removeVal := fmt.Sprintf("%v", p.Remove)
  putVal := fmt.Sprintf("%v", p.Put)
  return fmt.Sprintf("MyStructField29Patch1({Assign:%s Clear:%s PatchPrior:%s Add:%s Patch:%s Remove:%s Put:%s})", assignVal, clearVal, patchPriorVal, addVal, patchVal, removeVal, putVal)
}

// Attributes:
//  - Assign: Assigns to a (set) value.
// 
// If set, all other operations are ignored.
// 
// Note: Optional and union fields must be set before assigned.
// 
//  - Clear: Clears a value. Applies first.
//  - PatchPrior: Patches any previously set values. Applies second.
//  - Add: Add the given values, if the keys are not already present. Applies forth.
//  - Patch: Patches any set value, including newly set values. Applies last.
//  - Remove: Removes entries, if present. Applies third.
//  - Put: Adds or replaces the given key/value pairs. Applies fifth.
type MyStructField30Patch struct {
  Assign map[string]map[string]int32 `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  PatchPrior map[string]*MyStructField30Patch1 `thrift:"patchPrior,3" db:"patchPrior" json:"patchPrior"`
  // unused field # 4
  Add map[string]map[string]int32 `thrift:"add,5" db:"add" json:"add"`
  Patch map[string]*MyStructField30Patch1 `thrift:"patch,6" db:"patch" json:"patch"`
  Remove []string `thrift:"remove,7" db:"remove" json:"remove"`
  // unused field # 8
  Put map[string]map[string]int32 `thrift:"put,9" db:"put" json:"put"`
}

func NewMyStructField30Patch() *MyStructField30Patch {
  return &MyStructField30Patch{}
}

var MyStructField30Patch_Assign_DEFAULT map[string]map[string]int32

func (p *MyStructField30Patch) GetAssign() map[string]map[string]int32 {
  return p.Assign
}

func (p *MyStructField30Patch) GetClear() bool {
  return p.Clear
}

func (p *MyStructField30Patch) GetPatchPrior() map[string]*MyStructField30Patch1 {
  return p.PatchPrior
}

func (p *MyStructField30Patch) GetAdd() map[string]map[string]int32 {
  return p.Add
}

func (p *MyStructField30Patch) GetPatch() map[string]*MyStructField30Patch1 {
  return p.Patch
}

func (p *MyStructField30Patch) GetRemove() []string {
  return p.Remove
}

func (p *MyStructField30Patch) GetPut() map[string]map[string]int32 {
  return p.Put
}
func (p *MyStructField30Patch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

type MyStructField30PatchBuilder struct {
  obj *MyStructField30Patch
}

func NewMyStructField30PatchBuilder() *MyStructField30PatchBuilder{
  return &MyStructField30PatchBuilder{
    obj: NewMyStructField30Patch(),
  }
}

func (p MyStructField30PatchBuilder) Emit() *MyStructField30Patch{
  return &MyStructField30Patch{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
    PatchPrior: p.obj.PatchPrior,
    Add: p.obj.Add,
    Patch: p.obj.Patch,
    Remove: p.obj.Remove,
    Put: p.obj.Put,
  }
}

func (m *MyStructField30PatchBuilder) Assign(assign map[string]map[string]int32) *MyStructField30PatchBuilder {
  m.obj.Assign = assign
  return m
}

func (m *MyStructField30PatchBuilder) Clear(clear bool) *MyStructField30PatchBuilder {
  m.obj.Clear = clear
  return m
}

func (m *MyStructField30PatchBuilder) PatchPrior(patchPrior map[string]*MyStructField30Patch1) *MyStructField30PatchBuilder {
  m.obj.PatchPrior = patchPrior
  return m
}

func (m *MyStructField30PatchBuilder) Add(add map[string]map[string]int32) *MyStructField30PatchBuilder {
  m.obj.Add = add
  return m
}

func (m *MyStructField30PatchBuilder) Patch(patch map[string]*MyStructField30Patch1) *MyStructField30PatchBuilder {
  m.obj.Patch = patch
  return m
}

func (m *MyStructField30PatchBuilder) Remove(remove []string) *MyStructField30PatchBuilder {
  m.obj.Remove = remove
  return m
}

func (m *MyStructField30PatchBuilder) Put(put map[string]map[string]int32) *MyStructField30PatchBuilder {
  m.obj.Put = put
  return m
}

func (m *MyStructField30Patch) SetAssign(assign map[string]map[string]int32) *MyStructField30Patch {
  m.Assign = assign
  return m
}

func (m *MyStructField30Patch) SetClear(clear bool) *MyStructField30Patch {
  m.Clear = clear
  return m
}

func (m *MyStructField30Patch) SetPatchPrior(patchPrior map[string]*MyStructField30Patch1) *MyStructField30Patch {
  m.PatchPrior = patchPrior
  return m
}

func (m *MyStructField30Patch) SetAdd(add map[string]map[string]int32) *MyStructField30Patch {
  m.Add = add
  return m
}

func (m *MyStructField30Patch) SetPatch(patch map[string]*MyStructField30Patch1) *MyStructField30Patch {
  m.Patch = patch
  return m
}

func (m *MyStructField30Patch) SetRemove(remove []string) *MyStructField30Patch {
  m.Remove = remove
  return m
}

func (m *MyStructField30Patch) SetPut(put map[string]map[string]int32) *MyStructField30Patch {
  m.Put = put
  return m
}

func (p *MyStructField30Patch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStructField30Patch)  ReadField1(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]map[string]int32, size)
  p.Assign =  tMap
  for i := 0; i < size; i ++ {
    var _key61 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key61 = v
    }
    _, _, size, err := iprot.ReadMapBegin()
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[string]int32, size)
    _val62 :=  tMap
    for i := 0; i < size; i ++ {
      var _key63 string
      if v, err := iprot.ReadString(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        _key63 = v
      }
      var _val64 int32
      if v, err := iprot.ReadI32(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        _val64 = v
      }
      _val62[_key63] = _val64
    }
    if err := iprot.ReadMapEnd(); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.Assign[_key61] = _val62
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStructField30Patch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *MyStructField30Patch)  ReadField3(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*MyStructField30Patch1, size)
  p.PatchPrior =  tMap
  for i := 0; i < size; i ++ {
    var _key65 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key65 = v
    }
    _val66 := NewMyStructField30Patch1()
    if err := _val66.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val66), err)
    }
    p.PatchPrior[_key65] = _val66
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStructField30Patch)  ReadField5(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]map[string]int32, size)
  p.Add =  tMap
  for i := 0; i < size; i ++ {
    var _key67 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key67 = v
    }
    _, _, size, err := iprot.ReadMapBegin()
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[string]int32, size)
    _val68 :=  tMap
    for i := 0; i < size; i ++ {
      var _key69 string
      if v, err := iprot.ReadString(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        _key69 = v
      }
      var _val70 int32
      if v, err := iprot.ReadI32(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        _val70 = v
      }
      _val68[_key69] = _val70
    }
    if err := iprot.ReadMapEnd(); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.Add[_key67] = _val68
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStructField30Patch)  ReadField6(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*MyStructField30Patch1, size)
  p.Patch =  tMap
  for i := 0; i < size; i ++ {
    var _key71 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key71 = v
    }
    _val72 := NewMyStructField30Patch1()
    if err := _val72.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val72), err)
    }
    p.Patch[_key71] = _val72
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStructField30Patch)  ReadField7(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Remove =  tSet
  for i := 0; i < size; i ++ {
    var _elem73 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem73 = v
    }
    p.Remove = append(p.Remove, _elem73)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *MyStructField30Patch)  ReadField9(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]map[string]int32, size)
  p.Put =  tMap
  for i := 0; i < size; i ++ {
    var _key74 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key74 = v
    }
    _, _, size, err := iprot.ReadMapBegin()
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[string]int32, size)
    _val75 :=  tMap
    for i := 0; i < size; i ++ {
      var _key76 string
      if v, err := iprot.ReadString(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        _key76 = v
      }
      var _val77 int32
      if v, err := iprot.ReadI32(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        _val77 = v
      }
      _val75[_key76] = _val77
    }
    if err := iprot.ReadMapEnd(); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.Put[_key74] = _val75
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStructField30Patch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStructField30Patch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStructField30Patch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.MAP, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(p.Assign)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Assign {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(v)); err != nil {
        return thrift.PrependError("error writing map begin: ", err)
      }
      for k, v := range v {
        if err := oprot.WriteString(string(k)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
        if err := oprot.WriteI32(int32(v)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      }
      if err := oprot.WriteMapEnd(); err != nil {
        return thrift.PrependError("error writing map end: ", err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *MyStructField30Patch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *MyStructField30Patch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchPrior", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patchPrior: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.PatchPrior)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.PatchPrior {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patchPrior: ", p), err) }
  return err
}

func (p *MyStructField30Patch) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("add", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:add: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(p.Add)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Add {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(v)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range v {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:add: ", p), err) }
  return err
}

func (p *MyStructField30Patch) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.MAP, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:patch: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Patch)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Patch {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:patch: ", p), err) }
  return err
}

func (p *MyStructField30Patch) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("remove", thrift.SET, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:remove: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.Remove)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  set := make(map[string]bool, len(p.Remove))
  for _, v := range p.Remove {
    if ok := set[v]; ok {
      return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
    }
    set[v] = true
  }
  for _, v := range p.Remove {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:remove: ", p), err) }
  return err
}

func (p *MyStructField30Patch) writeField9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("put", thrift.MAP, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:put: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(p.Put)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Put {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(v)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range v {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:put: ", p), err) }
  return err
}

func (p *MyStructField30Patch) String() string {
  if p == nil {
    return "<nil>"
  }

  assignVal := fmt.Sprintf("%v", p.Assign)
  clearVal := fmt.Sprintf("%v", p.Clear)
  patchPriorVal := fmt.Sprintf("%v", p.PatchPrior)
  addVal := fmt.Sprintf("%v", p.Add)
  patchVal := fmt.Sprintf("%v", p.Patch)
  removeVal := fmt.Sprintf("%v", p.Remove)
  putVal := fmt.Sprintf("%v", p.Put)
  return fmt.Sprintf("MyStructField30Patch({Assign:%s Clear:%s PatchPrior:%s Add:%s Patch:%s Remove:%s Put:%s})", assignVal, clearVal, patchPriorVal, addVal, patchVal, removeVal, putVal)
}

// Attributes:
//  - Assign: Assigns to a (set) value.
// 
// If set, all other operations are ignored.
// 
// Note: Optional and union fields must be set before assigned.
// 
//  - Clear: Clears a value. Applies first.
//  - PatchPrior: Patches any previously set values. Applies second.
//  - Add: Add the given values, if the keys are not already present. Applies forth.
//  - Patch: Patches any set value, including newly set values. Applies last.
//  - Remove: Removes entries, if present. Applies third.
//  - Put: Adds or replaces the given key/value pairs. Applies fifth.
type MyStructField30Patch1 struct {
  Assign map[string]int32 `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  PatchPrior map[string]*patch1.I32Patch `thrift:"patchPrior,3" db:"patchPrior" json:"patchPrior"`
  // unused field # 4
  Add map[string]int32 `thrift:"add,5" db:"add" json:"add"`
  Patch map[string]*patch1.I32Patch `thrift:"patch,6" db:"patch" json:"patch"`
  Remove []string `thrift:"remove,7" db:"remove" json:"remove"`
  // unused field # 8
  Put map[string]int32 `thrift:"put,9" db:"put" json:"put"`
}

func NewMyStructField30Patch1() *MyStructField30Patch1 {
  return &MyStructField30Patch1{}
}

var MyStructField30Patch1_Assign_DEFAULT map[string]int32

func (p *MyStructField30Patch1) GetAssign() map[string]int32 {
  return p.Assign
}

func (p *MyStructField30Patch1) GetClear() bool {
  return p.Clear
}

func (p *MyStructField30Patch1) GetPatchPrior() map[string]*patch1.I32Patch {
  return p.PatchPrior
}

func (p *MyStructField30Patch1) GetAdd() map[string]int32 {
  return p.Add
}

func (p *MyStructField30Patch1) GetPatch() map[string]*patch1.I32Patch {
  return p.Patch
}

func (p *MyStructField30Patch1) GetRemove() []string {
  return p.Remove
}

func (p *MyStructField30Patch1) GetPut() map[string]int32 {
  return p.Put
}
func (p *MyStructField30Patch1) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

type MyStructField30Patch1Builder struct {
  obj *MyStructField30Patch1
}

func NewMyStructField30Patch1Builder() *MyStructField30Patch1Builder{
  return &MyStructField30Patch1Builder{
    obj: NewMyStructField30Patch1(),
  }
}

func (p MyStructField30Patch1Builder) Emit() *MyStructField30Patch1{
  return &MyStructField30Patch1{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
    PatchPrior: p.obj.PatchPrior,
    Add: p.obj.Add,
    Patch: p.obj.Patch,
    Remove: p.obj.Remove,
    Put: p.obj.Put,
  }
}

func (m *MyStructField30Patch1Builder) Assign(assign map[string]int32) *MyStructField30Patch1Builder {
  m.obj.Assign = assign
  return m
}

func (m *MyStructField30Patch1Builder) Clear(clear bool) *MyStructField30Patch1Builder {
  m.obj.Clear = clear
  return m
}

func (m *MyStructField30Patch1Builder) PatchPrior(patchPrior map[string]*patch1.I32Patch) *MyStructField30Patch1Builder {
  m.obj.PatchPrior = patchPrior
  return m
}

func (m *MyStructField30Patch1Builder) Add(add map[string]int32) *MyStructField30Patch1Builder {
  m.obj.Add = add
  return m
}

func (m *MyStructField30Patch1Builder) Patch(patch map[string]*patch1.I32Patch) *MyStructField30Patch1Builder {
  m.obj.Patch = patch
  return m
}

func (m *MyStructField30Patch1Builder) Remove(remove []string) *MyStructField30Patch1Builder {
  m.obj.Remove = remove
  return m
}

func (m *MyStructField30Patch1Builder) Put(put map[string]int32) *MyStructField30Patch1Builder {
  m.obj.Put = put
  return m
}

func (m *MyStructField30Patch1) SetAssign(assign map[string]int32) *MyStructField30Patch1 {
  m.Assign = assign
  return m
}

func (m *MyStructField30Patch1) SetClear(clear bool) *MyStructField30Patch1 {
  m.Clear = clear
  return m
}

func (m *MyStructField30Patch1) SetPatchPrior(patchPrior map[string]*patch1.I32Patch) *MyStructField30Patch1 {
  m.PatchPrior = patchPrior
  return m
}

func (m *MyStructField30Patch1) SetAdd(add map[string]int32) *MyStructField30Patch1 {
  m.Add = add
  return m
}

func (m *MyStructField30Patch1) SetPatch(patch map[string]*patch1.I32Patch) *MyStructField30Patch1 {
  m.Patch = patch
  return m
}

func (m *MyStructField30Patch1) SetRemove(remove []string) *MyStructField30Patch1 {
  m.Remove = remove
  return m
}

func (m *MyStructField30Patch1) SetPut(put map[string]int32) *MyStructField30Patch1 {
  m.Put = put
  return m
}

func (p *MyStructField30Patch1) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStructField30Patch1)  ReadField1(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int32, size)
  p.Assign =  tMap
  for i := 0; i < size; i ++ {
    var _key78 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key78 = v
    }
    var _val79 int32
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val79 = v
    }
    p.Assign[_key78] = _val79
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStructField30Patch1)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *MyStructField30Patch1)  ReadField3(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*patch1.I32Patch, size)
  p.PatchPrior =  tMap
  for i := 0; i < size; i ++ {
    var _key80 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key80 = v
    }
    _val81 := patch1.NewI32Patch()
    if err := _val81.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val81), err)
    }
    p.PatchPrior[_key80] = _val81
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStructField30Patch1)  ReadField5(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int32, size)
  p.Add =  tMap
  for i := 0; i < size; i ++ {
    var _key82 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key82 = v
    }
    var _val83 int32
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val83 = v
    }
    p.Add[_key82] = _val83
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStructField30Patch1)  ReadField6(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*patch1.I32Patch, size)
  p.Patch =  tMap
  for i := 0; i < size; i ++ {
    var _key84 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key84 = v
    }
    _val85 := patch1.NewI32Patch()
    if err := _val85.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val85), err)
    }
    p.Patch[_key84] = _val85
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStructField30Patch1)  ReadField7(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Remove =  tSet
  for i := 0; i < size; i ++ {
    var _elem86 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem86 = v
    }
    p.Remove = append(p.Remove, _elem86)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *MyStructField30Patch1)  ReadField9(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int32, size)
  p.Put =  tMap
  for i := 0; i < size; i ++ {
    var _key87 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key87 = v
    }
    var _val88 int32
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val88 = v
    }
    p.Put[_key87] = _val88
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStructField30Patch1) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStructField30Patch1"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStructField30Patch1) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.MAP, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.Assign)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Assign {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *MyStructField30Patch1) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *MyStructField30Patch1) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchPrior", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patchPrior: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.PatchPrior)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.PatchPrior {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patchPrior: ", p), err) }
  return err
}

func (p *MyStructField30Patch1) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("add", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:add: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.Add)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Add {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:add: ", p), err) }
  return err
}

func (p *MyStructField30Patch1) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.MAP, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:patch: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Patch)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Patch {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:patch: ", p), err) }
  return err
}

func (p *MyStructField30Patch1) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("remove", thrift.SET, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:remove: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.Remove)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  set := make(map[string]bool, len(p.Remove))
  for _, v := range p.Remove {
    if ok := set[v]; ok {
      return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
    }
    set[v] = true
  }
  for _, v := range p.Remove {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:remove: ", p), err) }
  return err
}

func (p *MyStructField30Patch1) writeField9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("put", thrift.MAP, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:put: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.Put)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Put {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:put: ", p), err) }
  return err
}

func (p *MyStructField30Patch1) String() string {
  if p == nil {
    return "<nil>"
  }

  assignVal := fmt.Sprintf("%v", p.Assign)
  clearVal := fmt.Sprintf("%v", p.Clear)
  patchPriorVal := fmt.Sprintf("%v", p.PatchPrior)
  addVal := fmt.Sprintf("%v", p.Add)
  patchVal := fmt.Sprintf("%v", p.Patch)
  removeVal := fmt.Sprintf("%v", p.Remove)
  putVal := fmt.Sprintf("%v", p.Put)
  return fmt.Sprintf("MyStructField30Patch1({Assign:%s Clear:%s PatchPrior:%s Add:%s Patch:%s Remove:%s Put:%s})", assignVal, clearVal, patchPriorVal, addVal, patchVal, removeVal, putVal)
}

// Attributes:
//  - StructWithCustomDefault
//  - I32WithCustomDefault
//  - MapMap
//  - ListMap
//  - OptMapVal
//  - OptSetVal
//  - OptListVal
//  - OptLateStructVal
//  - OptStructVal
//  - OptEnumVal
//  - OptBinaryVal
//  - OptStringVal
//  - OptDoubleVal
//  - OptFloatVal
//  - OptI64Val
//  - OptI32Val
//  - OptI16Val
//  - OptByteVal
//  - OptBoolVal
//  - LateStructVal
//  - UnionVal
//  - StructVal
//  - EnumVal
//  - BinaryVal
//  - StringVal
//  - DoubleVal
//  - FloatVal
//  - I64Val
//  - I32Val
//  - I16Val
//  - ByteVal
//  - BoolVal
//  - StructWithFieldCustomDefault
type MyStructFieldPatch struct {
  StructWithCustomDefault *MyDataWithCustomDefaultPatch
  I32WithCustomDefault *patch1.I32Patch
  MapMap *MyStructField30Patch
  ListMap *MyStructField29Patch
  OptMapVal *MyStructField28Patch
  OptSetVal *MyStructField27Patch
  OptListVal *MyStructField26Patch
  OptLateStructVal *LateDefStructPatch
  OptStructVal *MyDataPatch
  OptEnumVal *MyStructField23Patch
  OptBinaryVal *patch1.BinaryPatch
  OptStringVal *patch1.StringPatch
  OptDoubleVal *patch1.DoublePatch
  OptFloatVal *patch1.FloatPatch
  OptI64Val *patch1.I64Patch
  OptI32Val *patch1.I32Patch
  OptI16Val *patch1.I16Patch
  OptByteVal *patch1.BytePatch
  OptBoolVal *patch1.BoolPatch
  LateStructVal *LateDefStructPatch
  UnionVal *MyUnionPatch
  StructVal *MyDataPatch
  EnumVal *MyStructField10Patch
  BinaryVal *patch1.BinaryPatch
  StringVal *patch1.StringPatch
  DoubleVal *patch1.DoublePatch
  FloatVal *patch1.FloatPatch
  I64Val *patch1.I64Patch
  I32Val *patch1.I32Patch
  I16Val *patch1.I16Patch
  ByteVal *patch1.BytePatch
  BoolVal *patch1.BoolPatch
  StructWithFieldCustomDefault *MyDataPatch
}

func NewMyStructFieldPatch() *MyStructFieldPatch {
  return &MyStructFieldPatch{
    StructWithCustomDefault: NewMyDataWithCustomDefaultPatch(),
    I32WithCustomDefault: patch1.NewI32Patch(),
    MapMap: NewMyStructField30Patch(),
    ListMap: NewMyStructField29Patch(),
    OptMapVal: NewMyStructField28Patch(),
    OptSetVal: NewMyStructField27Patch(),
    OptListVal: NewMyStructField26Patch(),
    OptLateStructVal: NewLateDefStructPatch(),
    OptStructVal: NewMyDataPatch(),
    OptEnumVal: NewMyStructField23Patch(),
    OptBinaryVal: patch1.NewBinaryPatch(),
    OptStringVal: patch1.NewStringPatch(),
    OptDoubleVal: patch1.NewDoublePatch(),
    OptFloatVal: patch1.NewFloatPatch(),
    OptI64Val: patch1.NewI64Patch(),
    OptI32Val: patch1.NewI32Patch(),
    OptI16Val: patch1.NewI16Patch(),
    OptByteVal: patch1.NewBytePatch(),
    OptBoolVal: patch1.NewBoolPatch(),
    LateStructVal: NewLateDefStructPatch(),
    UnionVal: NewMyUnionPatch(),
    StructVal: NewMyDataPatch(),
    EnumVal: NewMyStructField10Patch(),
    BinaryVal: patch1.NewBinaryPatch(),
    StringVal: patch1.NewStringPatch(),
    DoubleVal: patch1.NewDoublePatch(),
    FloatVal: patch1.NewFloatPatch(),
    I64Val: patch1.NewI64Patch(),
    I32Val: patch1.NewI32Patch(),
    I16Val: patch1.NewI16Patch(),
    ByteVal: patch1.NewBytePatch(),
    BoolVal: patch1.NewBoolPatch(),
    StructWithFieldCustomDefault: NewMyDataPatch(),
  }
}

var MyStructFieldPatch_StructWithCustomDefault_DEFAULT *MyDataWithCustomDefaultPatch
func (p *MyStructFieldPatch) GetStructWithCustomDefault() *MyDataWithCustomDefaultPatch {
  if !p.IsSetStructWithCustomDefault() {
    return MyStructFieldPatch_StructWithCustomDefault_DEFAULT
  }
  return p.StructWithCustomDefault
}
func (p *MyStructFieldPatch) DefaultGetStructWithCustomDefault() *MyDataWithCustomDefaultPatch {
  if !p.IsSetStructWithCustomDefault() {
    return NewMyDataWithCustomDefaultPatch()
  }
  return p.StructWithCustomDefault
}
var MyStructFieldPatch_I32WithCustomDefault_DEFAULT *patch1.I32Patch
func (p *MyStructFieldPatch) GetI32WithCustomDefault() *patch1.I32Patch {
  if !p.IsSetI32WithCustomDefault() {
    return MyStructFieldPatch_I32WithCustomDefault_DEFAULT
  }
  return p.I32WithCustomDefault
}
func (p *MyStructFieldPatch) DefaultGetI32WithCustomDefault() *patch1.I32Patch {
  if !p.IsSetI32WithCustomDefault() {
    return patch1.NewI32Patch()
  }
  return p.I32WithCustomDefault
}
var MyStructFieldPatch_MapMap_DEFAULT *MyStructField30Patch
func (p *MyStructFieldPatch) GetMapMap() *MyStructField30Patch {
  if !p.IsSetMapMap() {
    return MyStructFieldPatch_MapMap_DEFAULT
  }
  return p.MapMap
}
func (p *MyStructFieldPatch) DefaultGetMapMap() *MyStructField30Patch {
  if !p.IsSetMapMap() {
    return NewMyStructField30Patch()
  }
  return p.MapMap
}
var MyStructFieldPatch_ListMap_DEFAULT *MyStructField29Patch
func (p *MyStructFieldPatch) GetListMap() *MyStructField29Patch {
  if !p.IsSetListMap() {
    return MyStructFieldPatch_ListMap_DEFAULT
  }
  return p.ListMap
}
func (p *MyStructFieldPatch) DefaultGetListMap() *MyStructField29Patch {
  if !p.IsSetListMap() {
    return NewMyStructField29Patch()
  }
  return p.ListMap
}
var MyStructFieldPatch_OptMapVal_DEFAULT *MyStructField28Patch
func (p *MyStructFieldPatch) GetOptMapVal() *MyStructField28Patch {
  if !p.IsSetOptMapVal() {
    return MyStructFieldPatch_OptMapVal_DEFAULT
  }
  return p.OptMapVal
}
func (p *MyStructFieldPatch) DefaultGetOptMapVal() *MyStructField28Patch {
  if !p.IsSetOptMapVal() {
    return NewMyStructField28Patch()
  }
  return p.OptMapVal
}
var MyStructFieldPatch_OptSetVal_DEFAULT *MyStructField27Patch
func (p *MyStructFieldPatch) GetOptSetVal() *MyStructField27Patch {
  if !p.IsSetOptSetVal() {
    return MyStructFieldPatch_OptSetVal_DEFAULT
  }
  return p.OptSetVal
}
func (p *MyStructFieldPatch) DefaultGetOptSetVal() *MyStructField27Patch {
  if !p.IsSetOptSetVal() {
    return NewMyStructField27Patch()
  }
  return p.OptSetVal
}
var MyStructFieldPatch_OptListVal_DEFAULT *MyStructField26Patch
func (p *MyStructFieldPatch) GetOptListVal() *MyStructField26Patch {
  if !p.IsSetOptListVal() {
    return MyStructFieldPatch_OptListVal_DEFAULT
  }
  return p.OptListVal
}
func (p *MyStructFieldPatch) DefaultGetOptListVal() *MyStructField26Patch {
  if !p.IsSetOptListVal() {
    return NewMyStructField26Patch()
  }
  return p.OptListVal
}
var MyStructFieldPatch_OptLateStructVal_DEFAULT *LateDefStructPatch
func (p *MyStructFieldPatch) GetOptLateStructVal() *LateDefStructPatch {
  if !p.IsSetOptLateStructVal() {
    return MyStructFieldPatch_OptLateStructVal_DEFAULT
  }
  return p.OptLateStructVal
}
var MyStructFieldPatch_OptStructVal_DEFAULT *MyDataPatch
func (p *MyStructFieldPatch) GetOptStructVal() *MyDataPatch {
  if !p.IsSetOptStructVal() {
    return MyStructFieldPatch_OptStructVal_DEFAULT
  }
  return p.OptStructVal
}
func (p *MyStructFieldPatch) DefaultGetOptStructVal() *MyDataPatch {
  if !p.IsSetOptStructVal() {
    return NewMyDataPatch()
  }
  return p.OptStructVal
}
var MyStructFieldPatch_OptEnumVal_DEFAULT *MyStructField23Patch
func (p *MyStructFieldPatch) GetOptEnumVal() *MyStructField23Patch {
  if !p.IsSetOptEnumVal() {
    return MyStructFieldPatch_OptEnumVal_DEFAULT
  }
  return p.OptEnumVal
}
func (p *MyStructFieldPatch) DefaultGetOptEnumVal() *MyStructField23Patch {
  if !p.IsSetOptEnumVal() {
    return NewMyStructField23Patch()
  }
  return p.OptEnumVal
}
var MyStructFieldPatch_OptBinaryVal_DEFAULT *patch1.BinaryPatch
func (p *MyStructFieldPatch) GetOptBinaryVal() *patch1.BinaryPatch {
  if !p.IsSetOptBinaryVal() {
    return MyStructFieldPatch_OptBinaryVal_DEFAULT
  }
  return p.OptBinaryVal
}
func (p *MyStructFieldPatch) DefaultGetOptBinaryVal() *patch1.BinaryPatch {
  if !p.IsSetOptBinaryVal() {
    return patch1.NewBinaryPatch()
  }
  return p.OptBinaryVal
}
var MyStructFieldPatch_OptStringVal_DEFAULT *patch1.StringPatch
func (p *MyStructFieldPatch) GetOptStringVal() *patch1.StringPatch {
  if !p.IsSetOptStringVal() {
    return MyStructFieldPatch_OptStringVal_DEFAULT
  }
  return p.OptStringVal
}
func (p *MyStructFieldPatch) DefaultGetOptStringVal() *patch1.StringPatch {
  if !p.IsSetOptStringVal() {
    return patch1.NewStringPatch()
  }
  return p.OptStringVal
}
var MyStructFieldPatch_OptDoubleVal_DEFAULT *patch1.DoublePatch
func (p *MyStructFieldPatch) GetOptDoubleVal() *patch1.DoublePatch {
  if !p.IsSetOptDoubleVal() {
    return MyStructFieldPatch_OptDoubleVal_DEFAULT
  }
  return p.OptDoubleVal
}
func (p *MyStructFieldPatch) DefaultGetOptDoubleVal() *patch1.DoublePatch {
  if !p.IsSetOptDoubleVal() {
    return patch1.NewDoublePatch()
  }
  return p.OptDoubleVal
}
var MyStructFieldPatch_OptFloatVal_DEFAULT *patch1.FloatPatch
func (p *MyStructFieldPatch) GetOptFloatVal() *patch1.FloatPatch {
  if !p.IsSetOptFloatVal() {
    return MyStructFieldPatch_OptFloatVal_DEFAULT
  }
  return p.OptFloatVal
}
func (p *MyStructFieldPatch) DefaultGetOptFloatVal() *patch1.FloatPatch {
  if !p.IsSetOptFloatVal() {
    return patch1.NewFloatPatch()
  }
  return p.OptFloatVal
}
var MyStructFieldPatch_OptI64Val_DEFAULT *patch1.I64Patch
func (p *MyStructFieldPatch) GetOptI64Val() *patch1.I64Patch {
  if !p.IsSetOptI64Val() {
    return MyStructFieldPatch_OptI64Val_DEFAULT
  }
  return p.OptI64Val
}
func (p *MyStructFieldPatch) DefaultGetOptI64Val() *patch1.I64Patch {
  if !p.IsSetOptI64Val() {
    return patch1.NewI64Patch()
  }
  return p.OptI64Val
}
var MyStructFieldPatch_OptI32Val_DEFAULT *patch1.I32Patch
func (p *MyStructFieldPatch) GetOptI32Val() *patch1.I32Patch {
  if !p.IsSetOptI32Val() {
    return MyStructFieldPatch_OptI32Val_DEFAULT
  }
  return p.OptI32Val
}
func (p *MyStructFieldPatch) DefaultGetOptI32Val() *patch1.I32Patch {
  if !p.IsSetOptI32Val() {
    return patch1.NewI32Patch()
  }
  return p.OptI32Val
}
var MyStructFieldPatch_OptI16Val_DEFAULT *patch1.I16Patch
func (p *MyStructFieldPatch) GetOptI16Val() *patch1.I16Patch {
  if !p.IsSetOptI16Val() {
    return MyStructFieldPatch_OptI16Val_DEFAULT
  }
  return p.OptI16Val
}
func (p *MyStructFieldPatch) DefaultGetOptI16Val() *patch1.I16Patch {
  if !p.IsSetOptI16Val() {
    return patch1.NewI16Patch()
  }
  return p.OptI16Val
}
var MyStructFieldPatch_OptByteVal_DEFAULT *patch1.BytePatch
func (p *MyStructFieldPatch) GetOptByteVal() *patch1.BytePatch {
  if !p.IsSetOptByteVal() {
    return MyStructFieldPatch_OptByteVal_DEFAULT
  }
  return p.OptByteVal
}
func (p *MyStructFieldPatch) DefaultGetOptByteVal() *patch1.BytePatch {
  if !p.IsSetOptByteVal() {
    return patch1.NewBytePatch()
  }
  return p.OptByteVal
}
var MyStructFieldPatch_OptBoolVal_DEFAULT *patch1.BoolPatch
func (p *MyStructFieldPatch) GetOptBoolVal() *patch1.BoolPatch {
  if !p.IsSetOptBoolVal() {
    return MyStructFieldPatch_OptBoolVal_DEFAULT
  }
  return p.OptBoolVal
}
func (p *MyStructFieldPatch) DefaultGetOptBoolVal() *patch1.BoolPatch {
  if !p.IsSetOptBoolVal() {
    return patch1.NewBoolPatch()
  }
  return p.OptBoolVal
}
var MyStructFieldPatch_LateStructVal_DEFAULT *LateDefStructPatch
func (p *MyStructFieldPatch) GetLateStructVal() *LateDefStructPatch {
  if !p.IsSetLateStructVal() {
    return MyStructFieldPatch_LateStructVal_DEFAULT
  }
  return p.LateStructVal
}
var MyStructFieldPatch_UnionVal_DEFAULT *MyUnionPatch
func (p *MyStructFieldPatch) GetUnionVal() *MyUnionPatch {
  if !p.IsSetUnionVal() {
    return MyStructFieldPatch_UnionVal_DEFAULT
  }
  return p.UnionVal
}
func (p *MyStructFieldPatch) DefaultGetUnionVal() *MyUnionPatch {
  if !p.IsSetUnionVal() {
    return NewMyUnionPatch()
  }
  return p.UnionVal
}
var MyStructFieldPatch_StructVal_DEFAULT *MyDataPatch
func (p *MyStructFieldPatch) GetStructVal() *MyDataPatch {
  if !p.IsSetStructVal() {
    return MyStructFieldPatch_StructVal_DEFAULT
  }
  return p.StructVal
}
func (p *MyStructFieldPatch) DefaultGetStructVal() *MyDataPatch {
  if !p.IsSetStructVal() {
    return NewMyDataPatch()
  }
  return p.StructVal
}
var MyStructFieldPatch_EnumVal_DEFAULT *MyStructField10Patch
func (p *MyStructFieldPatch) GetEnumVal() *MyStructField10Patch {
  if !p.IsSetEnumVal() {
    return MyStructFieldPatch_EnumVal_DEFAULT
  }
  return p.EnumVal
}
func (p *MyStructFieldPatch) DefaultGetEnumVal() *MyStructField10Patch {
  if !p.IsSetEnumVal() {
    return NewMyStructField10Patch()
  }
  return p.EnumVal
}
var MyStructFieldPatch_BinaryVal_DEFAULT *patch1.BinaryPatch
func (p *MyStructFieldPatch) GetBinaryVal() *patch1.BinaryPatch {
  if !p.IsSetBinaryVal() {
    return MyStructFieldPatch_BinaryVal_DEFAULT
  }
  return p.BinaryVal
}
func (p *MyStructFieldPatch) DefaultGetBinaryVal() *patch1.BinaryPatch {
  if !p.IsSetBinaryVal() {
    return patch1.NewBinaryPatch()
  }
  return p.BinaryVal
}
var MyStructFieldPatch_StringVal_DEFAULT *patch1.StringPatch
func (p *MyStructFieldPatch) GetStringVal() *patch1.StringPatch {
  if !p.IsSetStringVal() {
    return MyStructFieldPatch_StringVal_DEFAULT
  }
  return p.StringVal
}
func (p *MyStructFieldPatch) DefaultGetStringVal() *patch1.StringPatch {
  if !p.IsSetStringVal() {
    return patch1.NewStringPatch()
  }
  return p.StringVal
}
var MyStructFieldPatch_DoubleVal_DEFAULT *patch1.DoublePatch
func (p *MyStructFieldPatch) GetDoubleVal() *patch1.DoublePatch {
  if !p.IsSetDoubleVal() {
    return MyStructFieldPatch_DoubleVal_DEFAULT
  }
  return p.DoubleVal
}
func (p *MyStructFieldPatch) DefaultGetDoubleVal() *patch1.DoublePatch {
  if !p.IsSetDoubleVal() {
    return patch1.NewDoublePatch()
  }
  return p.DoubleVal
}
var MyStructFieldPatch_FloatVal_DEFAULT *patch1.FloatPatch
func (p *MyStructFieldPatch) GetFloatVal() *patch1.FloatPatch {
  if !p.IsSetFloatVal() {
    return MyStructFieldPatch_FloatVal_DEFAULT
  }
  return p.FloatVal
}
func (p *MyStructFieldPatch) DefaultGetFloatVal() *patch1.FloatPatch {
  if !p.IsSetFloatVal() {
    return patch1.NewFloatPatch()
  }
  return p.FloatVal
}
var MyStructFieldPatch_I64Val_DEFAULT *patch1.I64Patch
func (p *MyStructFieldPatch) GetI64Val() *patch1.I64Patch {
  if !p.IsSetI64Val() {
    return MyStructFieldPatch_I64Val_DEFAULT
  }
  return p.I64Val
}
func (p *MyStructFieldPatch) DefaultGetI64Val() *patch1.I64Patch {
  if !p.IsSetI64Val() {
    return patch1.NewI64Patch()
  }
  return p.I64Val
}
var MyStructFieldPatch_I32Val_DEFAULT *patch1.I32Patch
func (p *MyStructFieldPatch) GetI32Val() *patch1.I32Patch {
  if !p.IsSetI32Val() {
    return MyStructFieldPatch_I32Val_DEFAULT
  }
  return p.I32Val
}
func (p *MyStructFieldPatch) DefaultGetI32Val() *patch1.I32Patch {
  if !p.IsSetI32Val() {
    return patch1.NewI32Patch()
  }
  return p.I32Val
}
var MyStructFieldPatch_I16Val_DEFAULT *patch1.I16Patch
func (p *MyStructFieldPatch) GetI16Val() *patch1.I16Patch {
  if !p.IsSetI16Val() {
    return MyStructFieldPatch_I16Val_DEFAULT
  }
  return p.I16Val
}
func (p *MyStructFieldPatch) DefaultGetI16Val() *patch1.I16Patch {
  if !p.IsSetI16Val() {
    return patch1.NewI16Patch()
  }
  return p.I16Val
}
var MyStructFieldPatch_ByteVal_DEFAULT *patch1.BytePatch
func (p *MyStructFieldPatch) GetByteVal() *patch1.BytePatch {
  if !p.IsSetByteVal() {
    return MyStructFieldPatch_ByteVal_DEFAULT
  }
  return p.ByteVal
}
func (p *MyStructFieldPatch) DefaultGetByteVal() *patch1.BytePatch {
  if !p.IsSetByteVal() {
    return patch1.NewBytePatch()
  }
  return p.ByteVal
}
var MyStructFieldPatch_BoolVal_DEFAULT *patch1.BoolPatch
func (p *MyStructFieldPatch) GetBoolVal() *patch1.BoolPatch {
  if !p.IsSetBoolVal() {
    return MyStructFieldPatch_BoolVal_DEFAULT
  }
  return p.BoolVal
}
func (p *MyStructFieldPatch) DefaultGetBoolVal() *patch1.BoolPatch {
  if !p.IsSetBoolVal() {
    return patch1.NewBoolPatch()
  }
  return p.BoolVal
}
var MyStructFieldPatch_StructWithFieldCustomDefault_DEFAULT *MyDataPatch
func (p *MyStructFieldPatch) GetStructWithFieldCustomDefault() *MyDataPatch {
  if !p.IsSetStructWithFieldCustomDefault() {
    return MyStructFieldPatch_StructWithFieldCustomDefault_DEFAULT
  }
  return p.StructWithFieldCustomDefault
}
func (p *MyStructFieldPatch) DefaultGetStructWithFieldCustomDefault() *MyDataPatch {
  if !p.IsSetStructWithFieldCustomDefault() {
    return NewMyDataPatch()
  }
  return p.StructWithFieldCustomDefault
}
func (p *MyStructFieldPatch) IsSetStructWithCustomDefault() bool {
  return p != nil && p.StructWithCustomDefault != nil
}

func (p *MyStructFieldPatch) IsSetI32WithCustomDefault() bool {
  return p != nil && p.I32WithCustomDefault != nil
}

func (p *MyStructFieldPatch) IsSetMapMap() bool {
  return p != nil && p.MapMap != nil
}

func (p *MyStructFieldPatch) IsSetListMap() bool {
  return p != nil && p.ListMap != nil
}

func (p *MyStructFieldPatch) IsSetOptMapVal() bool {
  return p != nil && p.OptMapVal != nil
}

func (p *MyStructFieldPatch) IsSetOptSetVal() bool {
  return p != nil && p.OptSetVal != nil
}

func (p *MyStructFieldPatch) IsSetOptListVal() bool {
  return p != nil && p.OptListVal != nil
}

func (p *MyStructFieldPatch) IsSetOptLateStructVal() bool {
  return p != nil && p.OptLateStructVal != nil
}

func (p *MyStructFieldPatch) IsSetOptStructVal() bool {
  return p != nil && p.OptStructVal != nil
}

func (p *MyStructFieldPatch) IsSetOptEnumVal() bool {
  return p != nil && p.OptEnumVal != nil
}

func (p *MyStructFieldPatch) IsSetOptBinaryVal() bool {
  return p != nil && p.OptBinaryVal != nil
}

func (p *MyStructFieldPatch) IsSetOptStringVal() bool {
  return p != nil && p.OptStringVal != nil
}

func (p *MyStructFieldPatch) IsSetOptDoubleVal() bool {
  return p != nil && p.OptDoubleVal != nil
}

func (p *MyStructFieldPatch) IsSetOptFloatVal() bool {
  return p != nil && p.OptFloatVal != nil
}

func (p *MyStructFieldPatch) IsSetOptI64Val() bool {
  return p != nil && p.OptI64Val != nil
}

func (p *MyStructFieldPatch) IsSetOptI32Val() bool {
  return p != nil && p.OptI32Val != nil
}

func (p *MyStructFieldPatch) IsSetOptI16Val() bool {
  return p != nil && p.OptI16Val != nil
}

func (p *MyStructFieldPatch) IsSetOptByteVal() bool {
  return p != nil && p.OptByteVal != nil
}

func (p *MyStructFieldPatch) IsSetOptBoolVal() bool {
  return p != nil && p.OptBoolVal != nil
}

func (p *MyStructFieldPatch) IsSetLateStructVal() bool {
  return p != nil && p.LateStructVal != nil
}

func (p *MyStructFieldPatch) IsSetUnionVal() bool {
  return p != nil && p.UnionVal != nil
}

func (p *MyStructFieldPatch) IsSetStructVal() bool {
  return p != nil && p.StructVal != nil
}

func (p *MyStructFieldPatch) IsSetEnumVal() bool {
  return p != nil && p.EnumVal != nil
}

func (p *MyStructFieldPatch) IsSetBinaryVal() bool {
  return p != nil && p.BinaryVal != nil
}

func (p *MyStructFieldPatch) IsSetStringVal() bool {
  return p != nil && p.StringVal != nil
}

func (p *MyStructFieldPatch) IsSetDoubleVal() bool {
  return p != nil && p.DoubleVal != nil
}

func (p *MyStructFieldPatch) IsSetFloatVal() bool {
  return p != nil && p.FloatVal != nil
}

func (p *MyStructFieldPatch) IsSetI64Val() bool {
  return p != nil && p.I64Val != nil
}

func (p *MyStructFieldPatch) IsSetI32Val() bool {
  return p != nil && p.I32Val != nil
}

func (p *MyStructFieldPatch) IsSetI16Val() bool {
  return p != nil && p.I16Val != nil
}

func (p *MyStructFieldPatch) IsSetByteVal() bool {
  return p != nil && p.ByteVal != nil
}

func (p *MyStructFieldPatch) IsSetBoolVal() bool {
  return p != nil && p.BoolVal != nil
}

func (p *MyStructFieldPatch) IsSetStructWithFieldCustomDefault() bool {
  return p != nil && p.StructWithFieldCustomDefault != nil
}

type MyStructFieldPatchBuilder struct {
  obj *MyStructFieldPatch
}

func NewMyStructFieldPatchBuilder() *MyStructFieldPatchBuilder{
  return &MyStructFieldPatchBuilder{
    obj: NewMyStructFieldPatch(),
  }
}

func (p MyStructFieldPatchBuilder) Emit() *MyStructFieldPatch{
  return &MyStructFieldPatch{
    StructWithCustomDefault: p.obj.StructWithCustomDefault,
    I32WithCustomDefault: p.obj.I32WithCustomDefault,
    MapMap: p.obj.MapMap,
    ListMap: p.obj.ListMap,
    OptMapVal: p.obj.OptMapVal,
    OptSetVal: p.obj.OptSetVal,
    OptListVal: p.obj.OptListVal,
    OptLateStructVal: p.obj.OptLateStructVal,
    OptStructVal: p.obj.OptStructVal,
    OptEnumVal: p.obj.OptEnumVal,
    OptBinaryVal: p.obj.OptBinaryVal,
    OptStringVal: p.obj.OptStringVal,
    OptDoubleVal: p.obj.OptDoubleVal,
    OptFloatVal: p.obj.OptFloatVal,
    OptI64Val: p.obj.OptI64Val,
    OptI32Val: p.obj.OptI32Val,
    OptI16Val: p.obj.OptI16Val,
    OptByteVal: p.obj.OptByteVal,
    OptBoolVal: p.obj.OptBoolVal,
    LateStructVal: p.obj.LateStructVal,
    UnionVal: p.obj.UnionVal,
    StructVal: p.obj.StructVal,
    EnumVal: p.obj.EnumVal,
    BinaryVal: p.obj.BinaryVal,
    StringVal: p.obj.StringVal,
    DoubleVal: p.obj.DoubleVal,
    FloatVal: p.obj.FloatVal,
    I64Val: p.obj.I64Val,
    I32Val: p.obj.I32Val,
    I16Val: p.obj.I16Val,
    ByteVal: p.obj.ByteVal,
    BoolVal: p.obj.BoolVal,
    StructWithFieldCustomDefault: p.obj.StructWithFieldCustomDefault,
  }
}

func (m *MyStructFieldPatchBuilder) StructWithCustomDefault(structWithCustomDefault *MyDataWithCustomDefaultPatch) *MyStructFieldPatchBuilder {
  m.obj.StructWithCustomDefault = structWithCustomDefault
  return m
}

func (m *MyStructFieldPatchBuilder) I32WithCustomDefault(i32WithCustomDefault *patch1.I32Patch) *MyStructFieldPatchBuilder {
  m.obj.I32WithCustomDefault = i32WithCustomDefault
  return m
}

func (m *MyStructFieldPatchBuilder) MapMap(mapMap *MyStructField30Patch) *MyStructFieldPatchBuilder {
  m.obj.MapMap = mapMap
  return m
}

func (m *MyStructFieldPatchBuilder) ListMap(listMap *MyStructField29Patch) *MyStructFieldPatchBuilder {
  m.obj.ListMap = listMap
  return m
}

func (m *MyStructFieldPatchBuilder) OptMapVal(optMapVal *MyStructField28Patch) *MyStructFieldPatchBuilder {
  m.obj.OptMapVal = optMapVal
  return m
}

func (m *MyStructFieldPatchBuilder) OptSetVal(optSetVal *MyStructField27Patch) *MyStructFieldPatchBuilder {
  m.obj.OptSetVal = optSetVal
  return m
}

func (m *MyStructFieldPatchBuilder) OptListVal(optListVal *MyStructField26Patch) *MyStructFieldPatchBuilder {
  m.obj.OptListVal = optListVal
  return m
}

func (m *MyStructFieldPatchBuilder) OptLateStructVal(optLateStructVal *LateDefStructPatch) *MyStructFieldPatchBuilder {
  m.obj.OptLateStructVal = optLateStructVal
  return m
}

func (m *MyStructFieldPatchBuilder) OptStructVal(optStructVal *MyDataPatch) *MyStructFieldPatchBuilder {
  m.obj.OptStructVal = optStructVal
  return m
}

func (m *MyStructFieldPatchBuilder) OptEnumVal(optEnumVal *MyStructField23Patch) *MyStructFieldPatchBuilder {
  m.obj.OptEnumVal = optEnumVal
  return m
}

func (m *MyStructFieldPatchBuilder) OptBinaryVal(optBinaryVal *patch1.BinaryPatch) *MyStructFieldPatchBuilder {
  m.obj.OptBinaryVal = optBinaryVal
  return m
}

func (m *MyStructFieldPatchBuilder) OptStringVal(optStringVal *patch1.StringPatch) *MyStructFieldPatchBuilder {
  m.obj.OptStringVal = optStringVal
  return m
}

func (m *MyStructFieldPatchBuilder) OptDoubleVal(optDoubleVal *patch1.DoublePatch) *MyStructFieldPatchBuilder {
  m.obj.OptDoubleVal = optDoubleVal
  return m
}

func (m *MyStructFieldPatchBuilder) OptFloatVal(optFloatVal *patch1.FloatPatch) *MyStructFieldPatchBuilder {
  m.obj.OptFloatVal = optFloatVal
  return m
}

func (m *MyStructFieldPatchBuilder) OptI64Val(optI64Val *patch1.I64Patch) *MyStructFieldPatchBuilder {
  m.obj.OptI64Val = optI64Val
  return m
}

func (m *MyStructFieldPatchBuilder) OptI32Val(optI32Val *patch1.I32Patch) *MyStructFieldPatchBuilder {
  m.obj.OptI32Val = optI32Val
  return m
}

func (m *MyStructFieldPatchBuilder) OptI16Val(optI16Val *patch1.I16Patch) *MyStructFieldPatchBuilder {
  m.obj.OptI16Val = optI16Val
  return m
}

func (m *MyStructFieldPatchBuilder) OptByteVal(optByteVal *patch1.BytePatch) *MyStructFieldPatchBuilder {
  m.obj.OptByteVal = optByteVal
  return m
}

func (m *MyStructFieldPatchBuilder) OptBoolVal(optBoolVal *patch1.BoolPatch) *MyStructFieldPatchBuilder {
  m.obj.OptBoolVal = optBoolVal
  return m
}

func (m *MyStructFieldPatchBuilder) LateStructVal(lateStructVal *LateDefStructPatch) *MyStructFieldPatchBuilder {
  m.obj.LateStructVal = lateStructVal
  return m
}

func (m *MyStructFieldPatchBuilder) UnionVal(unionVal *MyUnionPatch) *MyStructFieldPatchBuilder {
  m.obj.UnionVal = unionVal
  return m
}

func (m *MyStructFieldPatchBuilder) StructVal(structVal *MyDataPatch) *MyStructFieldPatchBuilder {
  m.obj.StructVal = structVal
  return m
}

func (m *MyStructFieldPatchBuilder) EnumVal(enumVal *MyStructField10Patch) *MyStructFieldPatchBuilder {
  m.obj.EnumVal = enumVal
  return m
}

func (m *MyStructFieldPatchBuilder) BinaryVal(binaryVal *patch1.BinaryPatch) *MyStructFieldPatchBuilder {
  m.obj.BinaryVal = binaryVal
  return m
}

func (m *MyStructFieldPatchBuilder) StringVal(stringVal *patch1.StringPatch) *MyStructFieldPatchBuilder {
  m.obj.StringVal = stringVal
  return m
}

func (m *MyStructFieldPatchBuilder) DoubleVal(doubleVal *patch1.DoublePatch) *MyStructFieldPatchBuilder {
  m.obj.DoubleVal = doubleVal
  return m
}

func (m *MyStructFieldPatchBuilder) FloatVal(floatVal *patch1.FloatPatch) *MyStructFieldPatchBuilder {
  m.obj.FloatVal = floatVal
  return m
}

func (m *MyStructFieldPatchBuilder) I64Val(i64Val *patch1.I64Patch) *MyStructFieldPatchBuilder {
  m.obj.I64Val = i64Val
  return m
}

func (m *MyStructFieldPatchBuilder) I32Val(i32Val *patch1.I32Patch) *MyStructFieldPatchBuilder {
  m.obj.I32Val = i32Val
  return m
}

func (m *MyStructFieldPatchBuilder) I16Val(i16Val *patch1.I16Patch) *MyStructFieldPatchBuilder {
  m.obj.I16Val = i16Val
  return m
}

func (m *MyStructFieldPatchBuilder) ByteVal(byteVal *patch1.BytePatch) *MyStructFieldPatchBuilder {
  m.obj.ByteVal = byteVal
  return m
}

func (m *MyStructFieldPatchBuilder) BoolVal(boolVal *patch1.BoolPatch) *MyStructFieldPatchBuilder {
  m.obj.BoolVal = boolVal
  return m
}

func (m *MyStructFieldPatchBuilder) StructWithFieldCustomDefault(structWithFieldCustomDefault *MyDataPatch) *MyStructFieldPatchBuilder {
  m.obj.StructWithFieldCustomDefault = structWithFieldCustomDefault
  return m
}

func (m *MyStructFieldPatch) SetStructWithCustomDefault(structWithCustomDefault *MyDataWithCustomDefaultPatch) *MyStructFieldPatch {
  m.StructWithCustomDefault = structWithCustomDefault
  return m
}

func (m *MyStructFieldPatch) SetI32WithCustomDefault(i32WithCustomDefault *patch1.I32Patch) *MyStructFieldPatch {
  m.I32WithCustomDefault = i32WithCustomDefault
  return m
}

func (m *MyStructFieldPatch) SetMapMap(mapMap *MyStructField30Patch) *MyStructFieldPatch {
  m.MapMap = mapMap
  return m
}

func (m *MyStructFieldPatch) SetListMap(listMap *MyStructField29Patch) *MyStructFieldPatch {
  m.ListMap = listMap
  return m
}

func (m *MyStructFieldPatch) SetOptMapVal(optMapVal *MyStructField28Patch) *MyStructFieldPatch {
  m.OptMapVal = optMapVal
  return m
}

func (m *MyStructFieldPatch) SetOptSetVal(optSetVal *MyStructField27Patch) *MyStructFieldPatch {
  m.OptSetVal = optSetVal
  return m
}

func (m *MyStructFieldPatch) SetOptListVal(optListVal *MyStructField26Patch) *MyStructFieldPatch {
  m.OptListVal = optListVal
  return m
}

func (m *MyStructFieldPatch) SetOptLateStructVal(optLateStructVal *LateDefStructPatch) *MyStructFieldPatch {
  m.OptLateStructVal = optLateStructVal
  return m
}

func (m *MyStructFieldPatch) SetOptStructVal(optStructVal *MyDataPatch) *MyStructFieldPatch {
  m.OptStructVal = optStructVal
  return m
}

func (m *MyStructFieldPatch) SetOptEnumVal(optEnumVal *MyStructField23Patch) *MyStructFieldPatch {
  m.OptEnumVal = optEnumVal
  return m
}

func (m *MyStructFieldPatch) SetOptBinaryVal(optBinaryVal *patch1.BinaryPatch) *MyStructFieldPatch {
  m.OptBinaryVal = optBinaryVal
  return m
}

func (m *MyStructFieldPatch) SetOptStringVal(optStringVal *patch1.StringPatch) *MyStructFieldPatch {
  m.OptStringVal = optStringVal
  return m
}

func (m *MyStructFieldPatch) SetOptDoubleVal(optDoubleVal *patch1.DoublePatch) *MyStructFieldPatch {
  m.OptDoubleVal = optDoubleVal
  return m
}

func (m *MyStructFieldPatch) SetOptFloatVal(optFloatVal *patch1.FloatPatch) *MyStructFieldPatch {
  m.OptFloatVal = optFloatVal
  return m
}

func (m *MyStructFieldPatch) SetOptI64Val(optI64Val *patch1.I64Patch) *MyStructFieldPatch {
  m.OptI64Val = optI64Val
  return m
}

func (m *MyStructFieldPatch) SetOptI32Val(optI32Val *patch1.I32Patch) *MyStructFieldPatch {
  m.OptI32Val = optI32Val
  return m
}

func (m *MyStructFieldPatch) SetOptI16Val(optI16Val *patch1.I16Patch) *MyStructFieldPatch {
  m.OptI16Val = optI16Val
  return m
}

func (m *MyStructFieldPatch) SetOptByteVal(optByteVal *patch1.BytePatch) *MyStructFieldPatch {
  m.OptByteVal = optByteVal
  return m
}

func (m *MyStructFieldPatch) SetOptBoolVal(optBoolVal *patch1.BoolPatch) *MyStructFieldPatch {
  m.OptBoolVal = optBoolVal
  return m
}

func (m *MyStructFieldPatch) SetLateStructVal(lateStructVal *LateDefStructPatch) *MyStructFieldPatch {
  m.LateStructVal = lateStructVal
  return m
}

func (m *MyStructFieldPatch) SetUnionVal(unionVal *MyUnionPatch) *MyStructFieldPatch {
  m.UnionVal = unionVal
  return m
}

func (m *MyStructFieldPatch) SetStructVal(structVal *MyDataPatch) *MyStructFieldPatch {
  m.StructVal = structVal
  return m
}

func (m *MyStructFieldPatch) SetEnumVal(enumVal *MyStructField10Patch) *MyStructFieldPatch {
  m.EnumVal = enumVal
  return m
}

func (m *MyStructFieldPatch) SetBinaryVal(binaryVal *patch1.BinaryPatch) *MyStructFieldPatch {
  m.BinaryVal = binaryVal
  return m
}

func (m *MyStructFieldPatch) SetStringVal(stringVal *patch1.StringPatch) *MyStructFieldPatch {
  m.StringVal = stringVal
  return m
}

func (m *MyStructFieldPatch) SetDoubleVal(doubleVal *patch1.DoublePatch) *MyStructFieldPatch {
  m.DoubleVal = doubleVal
  return m
}

func (m *MyStructFieldPatch) SetFloatVal(floatVal *patch1.FloatPatch) *MyStructFieldPatch {
  m.FloatVal = floatVal
  return m
}

func (m *MyStructFieldPatch) SetI64Val(i64Val *patch1.I64Patch) *MyStructFieldPatch {
  m.I64Val = i64Val
  return m
}

func (m *MyStructFieldPatch) SetI32Val(i32Val *patch1.I32Patch) *MyStructFieldPatch {
  m.I32Val = i32Val
  return m
}

func (m *MyStructFieldPatch) SetI16Val(i16Val *patch1.I16Patch) *MyStructFieldPatch {
  m.I16Val = i16Val
  return m
}

func (m *MyStructFieldPatch) SetByteVal(byteVal *patch1.BytePatch) *MyStructFieldPatch {
  m.ByteVal = byteVal
  return m
}

func (m *MyStructFieldPatch) SetBoolVal(boolVal *patch1.BoolPatch) *MyStructFieldPatch {
  m.BoolVal = boolVal
  return m
}

func (m *MyStructFieldPatch) SetStructWithFieldCustomDefault(structWithFieldCustomDefault *MyDataPatch) *MyStructFieldPatch {
  m.StructWithFieldCustomDefault = structWithFieldCustomDefault
  return m
}

func (p *MyStructFieldPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -32:
      if err := p.ReadField_32(iprot); err != nil {
        return err
      }
    case -31:
      if err := p.ReadField_31(iprot); err != nil {
        return err
      }
    case -30:
      if err := p.ReadField_30(iprot); err != nil {
        return err
      }
    case -29:
      if err := p.ReadField_29(iprot); err != nil {
        return err
      }
    case -28:
      if err := p.ReadField_28(iprot); err != nil {
        return err
      }
    case -27:
      if err := p.ReadField_27(iprot); err != nil {
        return err
      }
    case -26:
      if err := p.ReadField_26(iprot); err != nil {
        return err
      }
    case -25:
      if err := p.ReadField_25(iprot); err != nil {
        return err
      }
    case -24:
      if err := p.ReadField_24(iprot); err != nil {
        return err
      }
    case -23:
      if err := p.ReadField_23(iprot); err != nil {
        return err
      }
    case -22:
      if err := p.ReadField_22(iprot); err != nil {
        return err
      }
    case -21:
      if err := p.ReadField_21(iprot); err != nil {
        return err
      }
    case -20:
      if err := p.ReadField_20(iprot); err != nil {
        return err
      }
    case -19:
      if err := p.ReadField_19(iprot); err != nil {
        return err
      }
    case -18:
      if err := p.ReadField_18(iprot); err != nil {
        return err
      }
    case -17:
      if err := p.ReadField_17(iprot); err != nil {
        return err
      }
    case -16:
      if err := p.ReadField_16(iprot); err != nil {
        return err
      }
    case -15:
      if err := p.ReadField_15(iprot); err != nil {
        return err
      }
    case -14:
      if err := p.ReadField_14(iprot); err != nil {
        return err
      }
    case -13:
      if err := p.ReadField_13(iprot); err != nil {
        return err
      }
    case -12:
      if err := p.ReadField_12(iprot); err != nil {
        return err
      }
    case -11:
      if err := p.ReadField_11(iprot); err != nil {
        return err
      }
    case -10:
      if err := p.ReadField_10(iprot); err != nil {
        return err
      }
    case -9:
      if err := p.ReadField_9(iprot); err != nil {
        return err
      }
    case -8:
      if err := p.ReadField_8(iprot); err != nil {
        return err
      }
    case -7:
      if err := p.ReadField_7(iprot); err != nil {
        return err
      }
    case -6:
      if err := p.ReadField_6(iprot); err != nil {
        return err
      }
    case -5:
      if err := p.ReadField_5(iprot); err != nil {
        return err
      }
    case -4:
      if err := p.ReadField_4(iprot); err != nil {
        return err
      }
    case -3:
      if err := p.ReadField_3(iprot); err != nil {
        return err
      }
    case -2:
      if err := p.ReadField_2(iprot); err != nil {
        return err
      }
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_32(iprot thrift.Protocol) error {
  p.StructWithCustomDefault = NewMyDataWithCustomDefaultPatch()
  if err := p.StructWithCustomDefault.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StructWithCustomDefault), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_31(iprot thrift.Protocol) error {
  p.I32WithCustomDefault = patch1.NewI32Patch()
  if err := p.I32WithCustomDefault.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.I32WithCustomDefault), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_30(iprot thrift.Protocol) error {
  p.MapMap = NewMyStructField30Patch()
  if err := p.MapMap.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MapMap), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_29(iprot thrift.Protocol) error {
  p.ListMap = NewMyStructField29Patch()
  if err := p.ListMap.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ListMap), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_28(iprot thrift.Protocol) error {
  p.OptMapVal = NewMyStructField28Patch()
  if err := p.OptMapVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptMapVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_27(iprot thrift.Protocol) error {
  p.OptSetVal = NewMyStructField27Patch()
  if err := p.OptSetVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptSetVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_26(iprot thrift.Protocol) error {
  p.OptListVal = NewMyStructField26Patch()
  if err := p.OptListVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptListVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_25(iprot thrift.Protocol) error {
  p.OptLateStructVal = NewLateDefStructPatch()
  if err := p.OptLateStructVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptLateStructVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_24(iprot thrift.Protocol) error {
  p.OptStructVal = NewMyDataPatch()
  if err := p.OptStructVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptStructVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_23(iprot thrift.Protocol) error {
  p.OptEnumVal = NewMyStructField23Patch()
  if err := p.OptEnumVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptEnumVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_22(iprot thrift.Protocol) error {
  p.OptBinaryVal = patch1.NewBinaryPatch()
  if err := p.OptBinaryVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptBinaryVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_21(iprot thrift.Protocol) error {
  p.OptStringVal = patch1.NewStringPatch()
  if err := p.OptStringVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptStringVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_20(iprot thrift.Protocol) error {
  p.OptDoubleVal = patch1.NewDoublePatch()
  if err := p.OptDoubleVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptDoubleVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_19(iprot thrift.Protocol) error {
  p.OptFloatVal = patch1.NewFloatPatch()
  if err := p.OptFloatVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptFloatVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_18(iprot thrift.Protocol) error {
  p.OptI64Val = patch1.NewI64Patch()
  if err := p.OptI64Val.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptI64Val), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_17(iprot thrift.Protocol) error {
  p.OptI32Val = patch1.NewI32Patch()
  if err := p.OptI32Val.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptI32Val), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_16(iprot thrift.Protocol) error {
  p.OptI16Val = patch1.NewI16Patch()
  if err := p.OptI16Val.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptI16Val), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_15(iprot thrift.Protocol) error {
  p.OptByteVal = patch1.NewBytePatch()
  if err := p.OptByteVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptByteVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_14(iprot thrift.Protocol) error {
  p.OptBoolVal = patch1.NewBoolPatch()
  if err := p.OptBoolVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptBoolVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_13(iprot thrift.Protocol) error {
  p.LateStructVal = NewLateDefStructPatch()
  if err := p.LateStructVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LateStructVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_12(iprot thrift.Protocol) error {
  p.UnionVal = NewMyUnionPatch()
  if err := p.UnionVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnionVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_11(iprot thrift.Protocol) error {
  p.StructVal = NewMyDataPatch()
  if err := p.StructVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StructVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_10(iprot thrift.Protocol) error {
  p.EnumVal = NewMyStructField10Patch()
  if err := p.EnumVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EnumVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_9(iprot thrift.Protocol) error {
  p.BinaryVal = patch1.NewBinaryPatch()
  if err := p.BinaryVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BinaryVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_8(iprot thrift.Protocol) error {
  p.StringVal = patch1.NewStringPatch()
  if err := p.StringVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StringVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_7(iprot thrift.Protocol) error {
  p.DoubleVal = patch1.NewDoublePatch()
  if err := p.DoubleVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DoubleVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_6(iprot thrift.Protocol) error {
  p.FloatVal = patch1.NewFloatPatch()
  if err := p.FloatVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FloatVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_5(iprot thrift.Protocol) error {
  p.I64Val = patch1.NewI64Patch()
  if err := p.I64Val.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.I64Val), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_4(iprot thrift.Protocol) error {
  p.I32Val = patch1.NewI32Patch()
  if err := p.I32Val.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.I32Val), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_3(iprot thrift.Protocol) error {
  p.I16Val = patch1.NewI16Patch()
  if err := p.I16Val.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.I16Val), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_2(iprot thrift.Protocol) error {
  p.ByteVal = patch1.NewBytePatch()
  if err := p.ByteVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ByteVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField_1(iprot thrift.Protocol) error {
  p.BoolVal = patch1.NewBoolPatch()
  if err := p.BoolVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BoolVal), err)
  }
  return nil
}

func (p *MyStructFieldPatch)  ReadField1(iprot thrift.Protocol) error {
  p.StructWithFieldCustomDefault = NewMyDataPatch()
  if err := p.StructWithFieldCustomDefault.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StructWithFieldCustomDefault), err)
  }
  return nil
}

func (p *MyStructFieldPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStructFieldPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField_32(oprot); err != nil { return err }
  if err := p.writeField_31(oprot); err != nil { return err }
  if err := p.writeField_30(oprot); err != nil { return err }
  if err := p.writeField_29(oprot); err != nil { return err }
  if err := p.writeField_28(oprot); err != nil { return err }
  if err := p.writeField_27(oprot); err != nil { return err }
  if err := p.writeField_26(oprot); err != nil { return err }
  if err := p.writeField_25(oprot); err != nil { return err }
  if err := p.writeField_24(oprot); err != nil { return err }
  if err := p.writeField_23(oprot); err != nil { return err }
  if err := p.writeField_22(oprot); err != nil { return err }
  if err := p.writeField_21(oprot); err != nil { return err }
  if err := p.writeField_20(oprot); err != nil { return err }
  if err := p.writeField_19(oprot); err != nil { return err }
  if err := p.writeField_18(oprot); err != nil { return err }
  if err := p.writeField_17(oprot); err != nil { return err }
  if err := p.writeField_16(oprot); err != nil { return err }
  if err := p.writeField_15(oprot); err != nil { return err }
  if err := p.writeField_14(oprot); err != nil { return err }
  if err := p.writeField_13(oprot); err != nil { return err }
  if err := p.writeField_12(oprot); err != nil { return err }
  if err := p.writeField_11(oprot); err != nil { return err }
  if err := p.writeField_10(oprot); err != nil { return err }
  if err := p.writeField_9(oprot); err != nil { return err }
  if err := p.writeField_8(oprot); err != nil { return err }
  if err := p.writeField_7(oprot); err != nil { return err }
  if err := p.writeField_6(oprot); err != nil { return err }
  if err := p.writeField_5(oprot); err != nil { return err }
  if err := p.writeField_4(oprot); err != nil { return err }
  if err := p.writeField_3(oprot); err != nil { return err }
  if err := p.writeField_2(oprot); err != nil { return err }
  if err := p.writeField_1(oprot); err != nil { return err }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStructFieldPatch) writeField_32(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("structWithCustomDefault", thrift.STRUCT, -32); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -32:structWithCustomDefault: ", p), err) }
  if err := p.StructWithCustomDefault.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StructWithCustomDefault), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -32:structWithCustomDefault: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField_31(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("i32WithCustomDefault", thrift.STRUCT, -31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -31:i32WithCustomDefault: ", p), err) }
  if err := p.I32WithCustomDefault.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.I32WithCustomDefault), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -31:i32WithCustomDefault: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField_30(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("mapMap", thrift.STRUCT, -30); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -30:mapMap: ", p), err) }
  if err := p.MapMap.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MapMap), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -30:mapMap: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField_29(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("listMap", thrift.STRUCT, -29); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -29:listMap: ", p), err) }
  if err := p.ListMap.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ListMap), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -29:listMap: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField_28(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optMapVal", thrift.STRUCT, -28); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -28:optMapVal: ", p), err) }
  if err := p.OptMapVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptMapVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -28:optMapVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField_27(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optSetVal", thrift.STRUCT, -27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -27:optSetVal: ", p), err) }
  if err := p.OptSetVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptSetVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -27:optSetVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField_26(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optListVal", thrift.STRUCT, -26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -26:optListVal: ", p), err) }
  if err := p.OptListVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptListVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -26:optListVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField_25(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optLateStructVal", thrift.STRUCT, -25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -25:optLateStructVal: ", p), err) }
  if err := p.OptLateStructVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptLateStructVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -25:optLateStructVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField_24(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optStructVal", thrift.STRUCT, -24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -24:optStructVal: ", p), err) }
  if err := p.OptStructVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptStructVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -24:optStructVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField_23(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optEnumVal", thrift.STRUCT, -23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -23:optEnumVal: ", p), err) }
  if err := p.OptEnumVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptEnumVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -23:optEnumVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField_22(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optBinaryVal", thrift.STRUCT, -22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -22:optBinaryVal: ", p), err) }
  if err := p.OptBinaryVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptBinaryVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -22:optBinaryVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField_21(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optStringVal", thrift.STRUCT, -21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -21:optStringVal: ", p), err) }
  if err := p.OptStringVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptStringVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -21:optStringVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField_20(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optDoubleVal", thrift.STRUCT, -20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -20:optDoubleVal: ", p), err) }
  if err := p.OptDoubleVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptDoubleVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -20:optDoubleVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField_19(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optFloatVal", thrift.STRUCT, -19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -19:optFloatVal: ", p), err) }
  if err := p.OptFloatVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptFloatVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -19:optFloatVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField_18(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optI64Val", thrift.STRUCT, -18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -18:optI64Val: ", p), err) }
  if err := p.OptI64Val.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptI64Val), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -18:optI64Val: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField_17(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optI32Val", thrift.STRUCT, -17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -17:optI32Val: ", p), err) }
  if err := p.OptI32Val.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptI32Val), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -17:optI32Val: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField_16(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optI16Val", thrift.STRUCT, -16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -16:optI16Val: ", p), err) }
  if err := p.OptI16Val.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptI16Val), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -16:optI16Val: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField_15(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optByteVal", thrift.STRUCT, -15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -15:optByteVal: ", p), err) }
  if err := p.OptByteVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptByteVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -15:optByteVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField_14(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optBoolVal", thrift.STRUCT, -14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -14:optBoolVal: ", p), err) }
  if err := p.OptBoolVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptBoolVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -14:optBoolVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField_13(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("lateStructVal", thrift.STRUCT, -13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -13:lateStructVal: ", p), err) }
  if err := p.LateStructVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LateStructVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -13:lateStructVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField_12(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("unionVal", thrift.STRUCT, -12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -12:unionVal: ", p), err) }
  if err := p.UnionVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnionVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -12:unionVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField_11(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("structVal", thrift.STRUCT, -11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -11:structVal: ", p), err) }
  if err := p.StructVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StructVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -11:structVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField_10(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("enumVal", thrift.STRUCT, -10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -10:enumVal: ", p), err) }
  if err := p.EnumVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EnumVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -10:enumVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField_9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("binaryVal", thrift.STRUCT, -9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -9:binaryVal: ", p), err) }
  if err := p.BinaryVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BinaryVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -9:binaryVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField_8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("stringVal", thrift.STRUCT, -8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -8:stringVal: ", p), err) }
  if err := p.StringVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StringVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -8:stringVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField_7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("doubleVal", thrift.STRUCT, -7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -7:doubleVal: ", p), err) }
  if err := p.DoubleVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DoubleVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -7:doubleVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField_6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("floatVal", thrift.STRUCT, -6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -6:floatVal: ", p), err) }
  if err := p.FloatVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FloatVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -6:floatVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField_5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("i64Val", thrift.STRUCT, -5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -5:i64Val: ", p), err) }
  if err := p.I64Val.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.I64Val), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -5:i64Val: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField_4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("i32Val", thrift.STRUCT, -4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -4:i32Val: ", p), err) }
  if err := p.I32Val.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.I32Val), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -4:i32Val: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField_3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("i16Val", thrift.STRUCT, -3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -3:i16Val: ", p), err) }
  if err := p.I16Val.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.I16Val), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -3:i16Val: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField_2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("byteVal", thrift.STRUCT, -2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -2:byteVal: ", p), err) }
  if err := p.ByteVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ByteVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -2:byteVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField_1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("boolVal", thrift.STRUCT, -1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:boolVal: ", p), err) }
  if err := p.BoolVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BoolVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -1:boolVal: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("structWithFieldCustomDefault", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:structWithFieldCustomDefault: ", p), err) }
  if err := p.StructWithFieldCustomDefault.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StructWithFieldCustomDefault), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:structWithFieldCustomDefault: ", p), err) }
  return err
}

func (p *MyStructFieldPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var structWithCustomDefaultVal string
  if p.StructWithCustomDefault == nil {
    structWithCustomDefaultVal = "<nil>"
  } else {
    structWithCustomDefaultVal = fmt.Sprintf("%v", p.StructWithCustomDefault)
  }
  var i32WithCustomDefaultVal string
  if p.I32WithCustomDefault == nil {
    i32WithCustomDefaultVal = "<nil>"
  } else {
    i32WithCustomDefaultVal = fmt.Sprintf("%v", p.I32WithCustomDefault)
  }
  var mapMapVal string
  if p.MapMap == nil {
    mapMapVal = "<nil>"
  } else {
    mapMapVal = fmt.Sprintf("%v", p.MapMap)
  }
  var listMapVal string
  if p.ListMap == nil {
    listMapVal = "<nil>"
  } else {
    listMapVal = fmt.Sprintf("%v", p.ListMap)
  }
  var optMapValVal string
  if p.OptMapVal == nil {
    optMapValVal = "<nil>"
  } else {
    optMapValVal = fmt.Sprintf("%v", p.OptMapVal)
  }
  var optSetValVal string
  if p.OptSetVal == nil {
    optSetValVal = "<nil>"
  } else {
    optSetValVal = fmt.Sprintf("%v", p.OptSetVal)
  }
  var optListValVal string
  if p.OptListVal == nil {
    optListValVal = "<nil>"
  } else {
    optListValVal = fmt.Sprintf("%v", p.OptListVal)
  }
  var optLateStructValVal string
  if p.OptLateStructVal == nil {
    optLateStructValVal = "<nil>"
  } else {
    optLateStructValVal = fmt.Sprintf("%v", p.OptLateStructVal)
  }
  var optStructValVal string
  if p.OptStructVal == nil {
    optStructValVal = "<nil>"
  } else {
    optStructValVal = fmt.Sprintf("%v", p.OptStructVal)
  }
  var optEnumValVal string
  if p.OptEnumVal == nil {
    optEnumValVal = "<nil>"
  } else {
    optEnumValVal = fmt.Sprintf("%v", p.OptEnumVal)
  }
  var optBinaryValVal string
  if p.OptBinaryVal == nil {
    optBinaryValVal = "<nil>"
  } else {
    optBinaryValVal = fmt.Sprintf("%v", p.OptBinaryVal)
  }
  var optStringValVal string
  if p.OptStringVal == nil {
    optStringValVal = "<nil>"
  } else {
    optStringValVal = fmt.Sprintf("%v", p.OptStringVal)
  }
  var optDoubleValVal string
  if p.OptDoubleVal == nil {
    optDoubleValVal = "<nil>"
  } else {
    optDoubleValVal = fmt.Sprintf("%v", p.OptDoubleVal)
  }
  var optFloatValVal string
  if p.OptFloatVal == nil {
    optFloatValVal = "<nil>"
  } else {
    optFloatValVal = fmt.Sprintf("%v", p.OptFloatVal)
  }
  var optI64ValVal string
  if p.OptI64Val == nil {
    optI64ValVal = "<nil>"
  } else {
    optI64ValVal = fmt.Sprintf("%v", p.OptI64Val)
  }
  var optI32ValVal string
  if p.OptI32Val == nil {
    optI32ValVal = "<nil>"
  } else {
    optI32ValVal = fmt.Sprintf("%v", p.OptI32Val)
  }
  var optI16ValVal string
  if p.OptI16Val == nil {
    optI16ValVal = "<nil>"
  } else {
    optI16ValVal = fmt.Sprintf("%v", p.OptI16Val)
  }
  var optByteValVal string
  if p.OptByteVal == nil {
    optByteValVal = "<nil>"
  } else {
    optByteValVal = fmt.Sprintf("%v", p.OptByteVal)
  }
  var optBoolValVal string
  if p.OptBoolVal == nil {
    optBoolValVal = "<nil>"
  } else {
    optBoolValVal = fmt.Sprintf("%v", p.OptBoolVal)
  }
  var lateStructValVal string
  if p.LateStructVal == nil {
    lateStructValVal = "<nil>"
  } else {
    lateStructValVal = fmt.Sprintf("%v", p.LateStructVal)
  }
  var unionValVal string
  if p.UnionVal == nil {
    unionValVal = "<nil>"
  } else {
    unionValVal = fmt.Sprintf("%v", p.UnionVal)
  }
  var structValVal string
  if p.StructVal == nil {
    structValVal = "<nil>"
  } else {
    structValVal = fmt.Sprintf("%v", p.StructVal)
  }
  var enumValVal string
  if p.EnumVal == nil {
    enumValVal = "<nil>"
  } else {
    enumValVal = fmt.Sprintf("%v", p.EnumVal)
  }
  var binaryValVal string
  if p.BinaryVal == nil {
    binaryValVal = "<nil>"
  } else {
    binaryValVal = fmt.Sprintf("%v", p.BinaryVal)
  }
  var stringValVal string
  if p.StringVal == nil {
    stringValVal = "<nil>"
  } else {
    stringValVal = fmt.Sprintf("%v", p.StringVal)
  }
  var doubleValVal string
  if p.DoubleVal == nil {
    doubleValVal = "<nil>"
  } else {
    doubleValVal = fmt.Sprintf("%v", p.DoubleVal)
  }
  var floatValVal string
  if p.FloatVal == nil {
    floatValVal = "<nil>"
  } else {
    floatValVal = fmt.Sprintf("%v", p.FloatVal)
  }
  var i64ValVal string
  if p.I64Val == nil {
    i64ValVal = "<nil>"
  } else {
    i64ValVal = fmt.Sprintf("%v", p.I64Val)
  }
  var i32ValVal string
  if p.I32Val == nil {
    i32ValVal = "<nil>"
  } else {
    i32ValVal = fmt.Sprintf("%v", p.I32Val)
  }
  var i16ValVal string
  if p.I16Val == nil {
    i16ValVal = "<nil>"
  } else {
    i16ValVal = fmt.Sprintf("%v", p.I16Val)
  }
  var byteValVal string
  if p.ByteVal == nil {
    byteValVal = "<nil>"
  } else {
    byteValVal = fmt.Sprintf("%v", p.ByteVal)
  }
  var boolValVal string
  if p.BoolVal == nil {
    boolValVal = "<nil>"
  } else {
    boolValVal = fmt.Sprintf("%v", p.BoolVal)
  }
  var structWithFieldCustomDefaultVal string
  if p.StructWithFieldCustomDefault == nil {
    structWithFieldCustomDefaultVal = "<nil>"
  } else {
    structWithFieldCustomDefaultVal = fmt.Sprintf("%v", p.StructWithFieldCustomDefault)
  }
  return fmt.Sprintf("MyStructFieldPatch({StructWithCustomDefault:%s I32WithCustomDefault:%s MapMap:%s ListMap:%s OptMapVal:%s OptSetVal:%s OptListVal:%s OptLateStructVal:%s OptStructVal:%s OptEnumVal:%s OptBinaryVal:%s OptStringVal:%s OptDoubleVal:%s OptFloatVal:%s OptI64Val:%s OptI32Val:%s OptI16Val:%s OptByteVal:%s OptBoolVal:%s LateStructVal:%s UnionVal:%s StructVal:%s EnumVal:%s BinaryVal:%s StringVal:%s DoubleVal:%s FloatVal:%s I64Val:%s I32Val:%s I16Val:%s ByteVal:%s BoolVal:%s StructWithFieldCustomDefault:%s})", structWithCustomDefaultVal, i32WithCustomDefaultVal, mapMapVal, listMapVal, optMapValVal, optSetValVal, optListValVal, optLateStructValVal, optStructValVal, optEnumValVal, optBinaryValVal, optStringValVal, optDoubleValVal, optFloatValVal, optI64ValVal, optI32ValVal, optI16ValVal, optByteValVal, optBoolValVal, lateStructValVal, unionValVal, structValVal, enumValVal, binaryValVal, stringValVal, doubleValVal, floatValVal, i64ValVal, i32ValVal, i16ValVal, byteValVal, boolValVal, structWithFieldCustomDefaultVal)
}

// Attributes:
//  - StructWithCustomDefault
//  - I32WithCustomDefault
//  - MapMap
//  - ListMap
//  - OptMapVal
//  - OptSetVal
//  - OptListVal
//  - OptLateStructVal
//  - OptStructVal
//  - OptEnumVal
//  - OptBinaryVal
//  - OptStringVal
//  - OptDoubleVal
//  - OptFloatVal
//  - OptI64Val
//  - OptI32Val
//  - OptI16Val
//  - OptByteVal
//  - OptBoolVal
//  - LateStructVal
//  - UnionVal
//  - StructVal
//  - EnumVal
//  - BinaryVal
//  - StringVal
//  - DoubleVal
//  - FloatVal
//  - I64Val
//  - I32Val
//  - I16Val
//  - ByteVal
//  - BoolVal
//  - StructWithFieldCustomDefault
type MyStructEnsureStruct struct {
  StructWithCustomDefault *MyDataWithCustomDefault
  I32WithCustomDefault int32
  MapMap map[string]map[string]int32
  ListMap []map[string]int32
  OptMapVal map[string]string
  OptSetVal []string
  OptListVal []int16
  OptLateStructVal *LateDefStruct
  OptStructVal *MyData
  OptEnumVal MyEnum
  OptBinaryVal []byte
  OptStringVal string
  OptDoubleVal float64
  OptFloatVal float32
  OptI64Val int64
  OptI32Val int32
  OptI16Val int16
  OptByteVal int8
  OptBoolVal bool
  LateStructVal *LateDefStruct
  UnionVal *MyUnion
  StructVal *MyData
  EnumVal MyEnum
  BinaryVal []byte
  StringVal string
  DoubleVal float64
  FloatVal float32
  I64Val int64
  I32Val int32
  I16Val int16
  ByteVal int8
  BoolVal bool
  StructWithFieldCustomDefault *MyData
}

func NewMyStructEnsureStruct() *MyStructEnsureStruct {
  return &MyStructEnsureStruct{}
}

var MyStructEnsureStruct_StructWithCustomDefault_DEFAULT *MyDataWithCustomDefault
func (p *MyStructEnsureStruct) GetStructWithCustomDefault() *MyDataWithCustomDefault {
  if !p.IsSetStructWithCustomDefault() {
    return MyStructEnsureStruct_StructWithCustomDefault_DEFAULT
  }
  return p.StructWithCustomDefault
}
func (p *MyStructEnsureStruct) DefaultGetStructWithCustomDefault() *MyDataWithCustomDefault {
  if !p.IsSetStructWithCustomDefault() {
    return NewMyDataWithCustomDefault()
  }
  return p.StructWithCustomDefault
}
var MyStructEnsureStruct_I32WithCustomDefault_DEFAULT int32
func (p *MyStructEnsureStruct) GetI32WithCustomDefault() int32 {
  if !p.IsSetI32WithCustomDefault() {
    return MyStructEnsureStruct_I32WithCustomDefault_DEFAULT
  }
  return *p.I32WithCustomDefault
}
var MyStructEnsureStruct_MapMap_DEFAULT map[string]map[string]int32

func (p *MyStructEnsureStruct) GetMapMap() map[string]map[string]int32 {
  return p.MapMap
}
var MyStructEnsureStruct_ListMap_DEFAULT []map[string]int32

func (p *MyStructEnsureStruct) GetListMap() []map[string]int32 {
  return p.ListMap
}
var MyStructEnsureStruct_OptMapVal_DEFAULT map[string]string

func (p *MyStructEnsureStruct) GetOptMapVal() map[string]string {
  return p.OptMapVal
}
var MyStructEnsureStruct_OptSetVal_DEFAULT []string

func (p *MyStructEnsureStruct) GetOptSetVal() []string {
  return p.OptSetVal
}
var MyStructEnsureStruct_OptListVal_DEFAULT []int16

func (p *MyStructEnsureStruct) GetOptListVal() []int16 {
  return p.OptListVal
}
var MyStructEnsureStruct_OptLateStructVal_DEFAULT *LateDefStruct
func (p *MyStructEnsureStruct) GetOptLateStructVal() *LateDefStruct {
  if !p.IsSetOptLateStructVal() {
    return MyStructEnsureStruct_OptLateStructVal_DEFAULT
  }
  return p.OptLateStructVal
}
var MyStructEnsureStruct_OptStructVal_DEFAULT *MyData
func (p *MyStructEnsureStruct) GetOptStructVal() *MyData {
  if !p.IsSetOptStructVal() {
    return MyStructEnsureStruct_OptStructVal_DEFAULT
  }
  return p.OptStructVal
}
func (p *MyStructEnsureStruct) DefaultGetOptStructVal() *MyData {
  if !p.IsSetOptStructVal() {
    return NewMyData()
  }
  return p.OptStructVal
}
var MyStructEnsureStruct_OptEnumVal_DEFAULT MyEnum
func (p *MyStructEnsureStruct) GetOptEnumVal() MyEnum {
  if !p.IsSetOptEnumVal() {
    return MyStructEnsureStruct_OptEnumVal_DEFAULT
  }
  return *p.OptEnumVal
}
var MyStructEnsureStruct_OptBinaryVal_DEFAULT []byte

func (p *MyStructEnsureStruct) GetOptBinaryVal() []byte {
  return p.OptBinaryVal
}
var MyStructEnsureStruct_OptStringVal_DEFAULT string
func (p *MyStructEnsureStruct) GetOptStringVal() string {
  if !p.IsSetOptStringVal() {
    return MyStructEnsureStruct_OptStringVal_DEFAULT
  }
  return *p.OptStringVal
}
var MyStructEnsureStruct_OptDoubleVal_DEFAULT float64
func (p *MyStructEnsureStruct) GetOptDoubleVal() float64 {
  if !p.IsSetOptDoubleVal() {
    return MyStructEnsureStruct_OptDoubleVal_DEFAULT
  }
  return *p.OptDoubleVal
}
var MyStructEnsureStruct_OptFloatVal_DEFAULT float32
func (p *MyStructEnsureStruct) GetOptFloatVal() float32 {
  if !p.IsSetOptFloatVal() {
    return MyStructEnsureStruct_OptFloatVal_DEFAULT
  }
  return *p.OptFloatVal
}
var MyStructEnsureStruct_OptI64Val_DEFAULT int64
func (p *MyStructEnsureStruct) GetOptI64Val() int64 {
  if !p.IsSetOptI64Val() {
    return MyStructEnsureStruct_OptI64Val_DEFAULT
  }
  return *p.OptI64Val
}
var MyStructEnsureStruct_OptI32Val_DEFAULT int32
func (p *MyStructEnsureStruct) GetOptI32Val() int32 {
  if !p.IsSetOptI32Val() {
    return MyStructEnsureStruct_OptI32Val_DEFAULT
  }
  return *p.OptI32Val
}
var MyStructEnsureStruct_OptI16Val_DEFAULT int16
func (p *MyStructEnsureStruct) GetOptI16Val() int16 {
  if !p.IsSetOptI16Val() {
    return MyStructEnsureStruct_OptI16Val_DEFAULT
  }
  return *p.OptI16Val
}
var MyStructEnsureStruct_OptByteVal_DEFAULT int8
func (p *MyStructEnsureStruct) GetOptByteVal() int8 {
  if !p.IsSetOptByteVal() {
    return MyStructEnsureStruct_OptByteVal_DEFAULT
  }
  return *p.OptByteVal
}
var MyStructEnsureStruct_OptBoolVal_DEFAULT bool
func (p *MyStructEnsureStruct) GetOptBoolVal() bool {
  if !p.IsSetOptBoolVal() {
    return MyStructEnsureStruct_OptBoolVal_DEFAULT
  }
  return *p.OptBoolVal
}
var MyStructEnsureStruct_LateStructVal_DEFAULT *LateDefStruct
func (p *MyStructEnsureStruct) GetLateStructVal() *LateDefStruct {
  if !p.IsSetLateStructVal() {
    return MyStructEnsureStruct_LateStructVal_DEFAULT
  }
  return p.LateStructVal
}
var MyStructEnsureStruct_UnionVal_DEFAULT *MyUnion
func (p *MyStructEnsureStruct) GetUnionVal() *MyUnion {
  if !p.IsSetUnionVal() {
    return MyStructEnsureStruct_UnionVal_DEFAULT
  }
  return p.UnionVal
}
func (p *MyStructEnsureStruct) DefaultGetUnionVal() *MyUnion {
  if !p.IsSetUnionVal() {
    return NewMyUnion()
  }
  return p.UnionVal
}
var MyStructEnsureStruct_StructVal_DEFAULT *MyData
func (p *MyStructEnsureStruct) GetStructVal() *MyData {
  if !p.IsSetStructVal() {
    return MyStructEnsureStruct_StructVal_DEFAULT
  }
  return p.StructVal
}
func (p *MyStructEnsureStruct) DefaultGetStructVal() *MyData {
  if !p.IsSetStructVal() {
    return NewMyData()
  }
  return p.StructVal
}
var MyStructEnsureStruct_EnumVal_DEFAULT MyEnum
func (p *MyStructEnsureStruct) GetEnumVal() MyEnum {
  if !p.IsSetEnumVal() {
    return MyStructEnsureStruct_EnumVal_DEFAULT
  }
  return *p.EnumVal
}
var MyStructEnsureStruct_BinaryVal_DEFAULT []byte

func (p *MyStructEnsureStruct) GetBinaryVal() []byte {
  return p.BinaryVal
}
var MyStructEnsureStruct_StringVal_DEFAULT string
func (p *MyStructEnsureStruct) GetStringVal() string {
  if !p.IsSetStringVal() {
    return MyStructEnsureStruct_StringVal_DEFAULT
  }
  return *p.StringVal
}
var MyStructEnsureStruct_DoubleVal_DEFAULT float64
func (p *MyStructEnsureStruct) GetDoubleVal() float64 {
  if !p.IsSetDoubleVal() {
    return MyStructEnsureStruct_DoubleVal_DEFAULT
  }
  return *p.DoubleVal
}
var MyStructEnsureStruct_FloatVal_DEFAULT float32
func (p *MyStructEnsureStruct) GetFloatVal() float32 {
  if !p.IsSetFloatVal() {
    return MyStructEnsureStruct_FloatVal_DEFAULT
  }
  return *p.FloatVal
}
var MyStructEnsureStruct_I64Val_DEFAULT int64
func (p *MyStructEnsureStruct) GetI64Val() int64 {
  if !p.IsSetI64Val() {
    return MyStructEnsureStruct_I64Val_DEFAULT
  }
  return *p.I64Val
}
var MyStructEnsureStruct_I32Val_DEFAULT int32
func (p *MyStructEnsureStruct) GetI32Val() int32 {
  if !p.IsSetI32Val() {
    return MyStructEnsureStruct_I32Val_DEFAULT
  }
  return *p.I32Val
}
var MyStructEnsureStruct_I16Val_DEFAULT int16
func (p *MyStructEnsureStruct) GetI16Val() int16 {
  if !p.IsSetI16Val() {
    return MyStructEnsureStruct_I16Val_DEFAULT
  }
  return *p.I16Val
}
var MyStructEnsureStruct_ByteVal_DEFAULT int8
func (p *MyStructEnsureStruct) GetByteVal() int8 {
  if !p.IsSetByteVal() {
    return MyStructEnsureStruct_ByteVal_DEFAULT
  }
  return *p.ByteVal
}
var MyStructEnsureStruct_BoolVal_DEFAULT bool
func (p *MyStructEnsureStruct) GetBoolVal() bool {
  if !p.IsSetBoolVal() {
    return MyStructEnsureStruct_BoolVal_DEFAULT
  }
  return *p.BoolVal
}
var MyStructEnsureStruct_StructWithFieldCustomDefault_DEFAULT *MyData
func (p *MyStructEnsureStruct) GetStructWithFieldCustomDefault() *MyData {
  if !p.IsSetStructWithFieldCustomDefault() {
    return MyStructEnsureStruct_StructWithFieldCustomDefault_DEFAULT
  }
  return p.StructWithFieldCustomDefault
}
func (p *MyStructEnsureStruct) DefaultGetStructWithFieldCustomDefault() *MyData {
  if !p.IsSetStructWithFieldCustomDefault() {
    return NewMyData()
  }
  return p.StructWithFieldCustomDefault
}
func (p *MyStructEnsureStruct) IsSetStructWithCustomDefault() bool {
  return p != nil && p.StructWithCustomDefault != nil
}

func (p *MyStructEnsureStruct) IsSetI32WithCustomDefault() bool {
  return p != nil && p.I32WithCustomDefault != nil
}

func (p *MyStructEnsureStruct) IsSetMapMap() bool {
  return p != nil && p.MapMap != nil
}

func (p *MyStructEnsureStruct) IsSetListMap() bool {
  return p != nil && p.ListMap != nil
}

func (p *MyStructEnsureStruct) IsSetOptMapVal() bool {
  return p != nil && p.OptMapVal != nil
}

func (p *MyStructEnsureStruct) IsSetOptSetVal() bool {
  return p != nil && p.OptSetVal != nil
}

func (p *MyStructEnsureStruct) IsSetOptListVal() bool {
  return p != nil && p.OptListVal != nil
}

func (p *MyStructEnsureStruct) IsSetOptLateStructVal() bool {
  return p != nil && p.OptLateStructVal != nil
}

func (p *MyStructEnsureStruct) IsSetOptStructVal() bool {
  return p != nil && p.OptStructVal != nil
}

func (p *MyStructEnsureStruct) IsSetOptEnumVal() bool {
  return p != nil && p.OptEnumVal != nil
}

func (p *MyStructEnsureStruct) IsSetOptBinaryVal() bool {
  return p != nil && p.OptBinaryVal != nil
}

func (p *MyStructEnsureStruct) IsSetOptStringVal() bool {
  return p != nil && p.OptStringVal != nil
}

func (p *MyStructEnsureStruct) IsSetOptDoubleVal() bool {
  return p != nil && p.OptDoubleVal != nil
}

func (p *MyStructEnsureStruct) IsSetOptFloatVal() bool {
  return p != nil && p.OptFloatVal != nil
}

func (p *MyStructEnsureStruct) IsSetOptI64Val() bool {
  return p != nil && p.OptI64Val != nil
}

func (p *MyStructEnsureStruct) IsSetOptI32Val() bool {
  return p != nil && p.OptI32Val != nil
}

func (p *MyStructEnsureStruct) IsSetOptI16Val() bool {
  return p != nil && p.OptI16Val != nil
}

func (p *MyStructEnsureStruct) IsSetOptByteVal() bool {
  return p != nil && p.OptByteVal != nil
}

func (p *MyStructEnsureStruct) IsSetOptBoolVal() bool {
  return p != nil && p.OptBoolVal != nil
}

func (p *MyStructEnsureStruct) IsSetLateStructVal() bool {
  return p != nil && p.LateStructVal != nil
}

func (p *MyStructEnsureStruct) IsSetUnionVal() bool {
  return p != nil && p.UnionVal != nil
}

func (p *MyStructEnsureStruct) IsSetStructVal() bool {
  return p != nil && p.StructVal != nil
}

func (p *MyStructEnsureStruct) IsSetEnumVal() bool {
  return p != nil && p.EnumVal != nil
}

func (p *MyStructEnsureStruct) IsSetBinaryVal() bool {
  return p != nil && p.BinaryVal != nil
}

func (p *MyStructEnsureStruct) IsSetStringVal() bool {
  return p != nil && p.StringVal != nil
}

func (p *MyStructEnsureStruct) IsSetDoubleVal() bool {
  return p != nil && p.DoubleVal != nil
}

func (p *MyStructEnsureStruct) IsSetFloatVal() bool {
  return p != nil && p.FloatVal != nil
}

func (p *MyStructEnsureStruct) IsSetI64Val() bool {
  return p != nil && p.I64Val != nil
}

func (p *MyStructEnsureStruct) IsSetI32Val() bool {
  return p != nil && p.I32Val != nil
}

func (p *MyStructEnsureStruct) IsSetI16Val() bool {
  return p != nil && p.I16Val != nil
}

func (p *MyStructEnsureStruct) IsSetByteVal() bool {
  return p != nil && p.ByteVal != nil
}

func (p *MyStructEnsureStruct) IsSetBoolVal() bool {
  return p != nil && p.BoolVal != nil
}

func (p *MyStructEnsureStruct) IsSetStructWithFieldCustomDefault() bool {
  return p != nil && p.StructWithFieldCustomDefault != nil
}

type MyStructEnsureStructBuilder struct {
  obj *MyStructEnsureStruct
}

func NewMyStructEnsureStructBuilder() *MyStructEnsureStructBuilder{
  return &MyStructEnsureStructBuilder{
    obj: NewMyStructEnsureStruct(),
  }
}

func (p MyStructEnsureStructBuilder) Emit() *MyStructEnsureStruct{
  return &MyStructEnsureStruct{
    StructWithCustomDefault: p.obj.StructWithCustomDefault,
    I32WithCustomDefault: p.obj.I32WithCustomDefault,
    MapMap: p.obj.MapMap,
    ListMap: p.obj.ListMap,
    OptMapVal: p.obj.OptMapVal,
    OptSetVal: p.obj.OptSetVal,
    OptListVal: p.obj.OptListVal,
    OptLateStructVal: p.obj.OptLateStructVal,
    OptStructVal: p.obj.OptStructVal,
    OptEnumVal: p.obj.OptEnumVal,
    OptBinaryVal: p.obj.OptBinaryVal,
    OptStringVal: p.obj.OptStringVal,
    OptDoubleVal: p.obj.OptDoubleVal,
    OptFloatVal: p.obj.OptFloatVal,
    OptI64Val: p.obj.OptI64Val,
    OptI32Val: p.obj.OptI32Val,
    OptI16Val: p.obj.OptI16Val,
    OptByteVal: p.obj.OptByteVal,
    OptBoolVal: p.obj.OptBoolVal,
    LateStructVal: p.obj.LateStructVal,
    UnionVal: p.obj.UnionVal,
    StructVal: p.obj.StructVal,
    EnumVal: p.obj.EnumVal,
    BinaryVal: p.obj.BinaryVal,
    StringVal: p.obj.StringVal,
    DoubleVal: p.obj.DoubleVal,
    FloatVal: p.obj.FloatVal,
    I64Val: p.obj.I64Val,
    I32Val: p.obj.I32Val,
    I16Val: p.obj.I16Val,
    ByteVal: p.obj.ByteVal,
    BoolVal: p.obj.BoolVal,
    StructWithFieldCustomDefault: p.obj.StructWithFieldCustomDefault,
  }
}

func (m *MyStructEnsureStructBuilder) StructWithCustomDefault(structWithCustomDefault *MyDataWithCustomDefault) *MyStructEnsureStructBuilder {
  m.obj.StructWithCustomDefault = structWithCustomDefault
  return m
}

func (m *MyStructEnsureStructBuilder) I32WithCustomDefault(i32WithCustomDefault *int32) *MyStructEnsureStructBuilder {
  m.obj.I32WithCustomDefault = i32WithCustomDefault
  return m
}

func (m *MyStructEnsureStructBuilder) MapMap(mapMap map[string]map[string]int32) *MyStructEnsureStructBuilder {
  m.obj.MapMap = mapMap
  return m
}

func (m *MyStructEnsureStructBuilder) ListMap(listMap []map[string]int32) *MyStructEnsureStructBuilder {
  m.obj.ListMap = listMap
  return m
}

func (m *MyStructEnsureStructBuilder) OptMapVal(optMapVal map[string]string) *MyStructEnsureStructBuilder {
  m.obj.OptMapVal = optMapVal
  return m
}

func (m *MyStructEnsureStructBuilder) OptSetVal(optSetVal []string) *MyStructEnsureStructBuilder {
  m.obj.OptSetVal = optSetVal
  return m
}

func (m *MyStructEnsureStructBuilder) OptListVal(optListVal []int16) *MyStructEnsureStructBuilder {
  m.obj.OptListVal = optListVal
  return m
}

func (m *MyStructEnsureStructBuilder) OptLateStructVal(optLateStructVal *LateDefStruct) *MyStructEnsureStructBuilder {
  m.obj.OptLateStructVal = optLateStructVal
  return m
}

func (m *MyStructEnsureStructBuilder) OptStructVal(optStructVal *MyData) *MyStructEnsureStructBuilder {
  m.obj.OptStructVal = optStructVal
  return m
}

func (m *MyStructEnsureStructBuilder) OptEnumVal(optEnumVal *MyEnum) *MyStructEnsureStructBuilder {
  m.obj.OptEnumVal = optEnumVal
  return m
}

func (m *MyStructEnsureStructBuilder) OptBinaryVal(optBinaryVal []byte) *MyStructEnsureStructBuilder {
  m.obj.OptBinaryVal = optBinaryVal
  return m
}

func (m *MyStructEnsureStructBuilder) OptStringVal(optStringVal *string) *MyStructEnsureStructBuilder {
  m.obj.OptStringVal = optStringVal
  return m
}

func (m *MyStructEnsureStructBuilder) OptDoubleVal(optDoubleVal *float64) *MyStructEnsureStructBuilder {
  m.obj.OptDoubleVal = optDoubleVal
  return m
}

func (m *MyStructEnsureStructBuilder) OptFloatVal(optFloatVal *float32) *MyStructEnsureStructBuilder {
  m.obj.OptFloatVal = optFloatVal
  return m
}

func (m *MyStructEnsureStructBuilder) OptI64Val(optI64Val *int64) *MyStructEnsureStructBuilder {
  m.obj.OptI64Val = optI64Val
  return m
}

func (m *MyStructEnsureStructBuilder) OptI32Val(optI32Val *int32) *MyStructEnsureStructBuilder {
  m.obj.OptI32Val = optI32Val
  return m
}

func (m *MyStructEnsureStructBuilder) OptI16Val(optI16Val *int16) *MyStructEnsureStructBuilder {
  m.obj.OptI16Val = optI16Val
  return m
}

func (m *MyStructEnsureStructBuilder) OptByteVal(optByteVal *int8) *MyStructEnsureStructBuilder {
  m.obj.OptByteVal = optByteVal
  return m
}

func (m *MyStructEnsureStructBuilder) OptBoolVal(optBoolVal *bool) *MyStructEnsureStructBuilder {
  m.obj.OptBoolVal = optBoolVal
  return m
}

func (m *MyStructEnsureStructBuilder) LateStructVal(lateStructVal *LateDefStruct) *MyStructEnsureStructBuilder {
  m.obj.LateStructVal = lateStructVal
  return m
}

func (m *MyStructEnsureStructBuilder) UnionVal(unionVal *MyUnion) *MyStructEnsureStructBuilder {
  m.obj.UnionVal = unionVal
  return m
}

func (m *MyStructEnsureStructBuilder) StructVal(structVal *MyData) *MyStructEnsureStructBuilder {
  m.obj.StructVal = structVal
  return m
}

func (m *MyStructEnsureStructBuilder) EnumVal(enumVal *MyEnum) *MyStructEnsureStructBuilder {
  m.obj.EnumVal = enumVal
  return m
}

func (m *MyStructEnsureStructBuilder) BinaryVal(binaryVal []byte) *MyStructEnsureStructBuilder {
  m.obj.BinaryVal = binaryVal
  return m
}

func (m *MyStructEnsureStructBuilder) StringVal(stringVal *string) *MyStructEnsureStructBuilder {
  m.obj.StringVal = stringVal
  return m
}

func (m *MyStructEnsureStructBuilder) DoubleVal(doubleVal *float64) *MyStructEnsureStructBuilder {
  m.obj.DoubleVal = doubleVal
  return m
}

func (m *MyStructEnsureStructBuilder) FloatVal(floatVal *float32) *MyStructEnsureStructBuilder {
  m.obj.FloatVal = floatVal
  return m
}

func (m *MyStructEnsureStructBuilder) I64Val(i64Val *int64) *MyStructEnsureStructBuilder {
  m.obj.I64Val = i64Val
  return m
}

func (m *MyStructEnsureStructBuilder) I32Val(i32Val *int32) *MyStructEnsureStructBuilder {
  m.obj.I32Val = i32Val
  return m
}

func (m *MyStructEnsureStructBuilder) I16Val(i16Val *int16) *MyStructEnsureStructBuilder {
  m.obj.I16Val = i16Val
  return m
}

func (m *MyStructEnsureStructBuilder) ByteVal(byteVal *int8) *MyStructEnsureStructBuilder {
  m.obj.ByteVal = byteVal
  return m
}

func (m *MyStructEnsureStructBuilder) BoolVal(boolVal *bool) *MyStructEnsureStructBuilder {
  m.obj.BoolVal = boolVal
  return m
}

func (m *MyStructEnsureStructBuilder) StructWithFieldCustomDefault(structWithFieldCustomDefault *MyData) *MyStructEnsureStructBuilder {
  m.obj.StructWithFieldCustomDefault = structWithFieldCustomDefault
  return m
}

func (m *MyStructEnsureStruct) SetStructWithCustomDefault(structWithCustomDefault *MyDataWithCustomDefault) *MyStructEnsureStruct {
  m.StructWithCustomDefault = structWithCustomDefault
  return m
}

func (m *MyStructEnsureStruct) SetI32WithCustomDefault(i32WithCustomDefault *int32) *MyStructEnsureStruct {
  m.I32WithCustomDefault = i32WithCustomDefault
  return m
}

func (m *MyStructEnsureStruct) SetMapMap(mapMap map[string]map[string]int32) *MyStructEnsureStruct {
  m.MapMap = mapMap
  return m
}

func (m *MyStructEnsureStruct) SetListMap(listMap []map[string]int32) *MyStructEnsureStruct {
  m.ListMap = listMap
  return m
}

func (m *MyStructEnsureStruct) SetOptMapVal(optMapVal map[string]string) *MyStructEnsureStruct {
  m.OptMapVal = optMapVal
  return m
}

func (m *MyStructEnsureStruct) SetOptSetVal(optSetVal []string) *MyStructEnsureStruct {
  m.OptSetVal = optSetVal
  return m
}

func (m *MyStructEnsureStruct) SetOptListVal(optListVal []int16) *MyStructEnsureStruct {
  m.OptListVal = optListVal
  return m
}

func (m *MyStructEnsureStruct) SetOptLateStructVal(optLateStructVal *LateDefStruct) *MyStructEnsureStruct {
  m.OptLateStructVal = optLateStructVal
  return m
}

func (m *MyStructEnsureStruct) SetOptStructVal(optStructVal *MyData) *MyStructEnsureStruct {
  m.OptStructVal = optStructVal
  return m
}

func (m *MyStructEnsureStruct) SetOptEnumVal(optEnumVal *MyEnum) *MyStructEnsureStruct {
  m.OptEnumVal = optEnumVal
  return m
}

func (m *MyStructEnsureStruct) SetOptBinaryVal(optBinaryVal []byte) *MyStructEnsureStruct {
  m.OptBinaryVal = optBinaryVal
  return m
}

func (m *MyStructEnsureStruct) SetOptStringVal(optStringVal *string) *MyStructEnsureStruct {
  m.OptStringVal = optStringVal
  return m
}

func (m *MyStructEnsureStruct) SetOptDoubleVal(optDoubleVal *float64) *MyStructEnsureStruct {
  m.OptDoubleVal = optDoubleVal
  return m
}

func (m *MyStructEnsureStruct) SetOptFloatVal(optFloatVal *float32) *MyStructEnsureStruct {
  m.OptFloatVal = optFloatVal
  return m
}

func (m *MyStructEnsureStruct) SetOptI64Val(optI64Val *int64) *MyStructEnsureStruct {
  m.OptI64Val = optI64Val
  return m
}

func (m *MyStructEnsureStruct) SetOptI32Val(optI32Val *int32) *MyStructEnsureStruct {
  m.OptI32Val = optI32Val
  return m
}

func (m *MyStructEnsureStruct) SetOptI16Val(optI16Val *int16) *MyStructEnsureStruct {
  m.OptI16Val = optI16Val
  return m
}

func (m *MyStructEnsureStruct) SetOptByteVal(optByteVal *int8) *MyStructEnsureStruct {
  m.OptByteVal = optByteVal
  return m
}

func (m *MyStructEnsureStruct) SetOptBoolVal(optBoolVal *bool) *MyStructEnsureStruct {
  m.OptBoolVal = optBoolVal
  return m
}

func (m *MyStructEnsureStruct) SetLateStructVal(lateStructVal *LateDefStruct) *MyStructEnsureStruct {
  m.LateStructVal = lateStructVal
  return m
}

func (m *MyStructEnsureStruct) SetUnionVal(unionVal *MyUnion) *MyStructEnsureStruct {
  m.UnionVal = unionVal
  return m
}

func (m *MyStructEnsureStruct) SetStructVal(structVal *MyData) *MyStructEnsureStruct {
  m.StructVal = structVal
  return m
}

func (m *MyStructEnsureStruct) SetEnumVal(enumVal *MyEnum) *MyStructEnsureStruct {
  m.EnumVal = enumVal
  return m
}

func (m *MyStructEnsureStruct) SetBinaryVal(binaryVal []byte) *MyStructEnsureStruct {
  m.BinaryVal = binaryVal
  return m
}

func (m *MyStructEnsureStruct) SetStringVal(stringVal *string) *MyStructEnsureStruct {
  m.StringVal = stringVal
  return m
}

func (m *MyStructEnsureStruct) SetDoubleVal(doubleVal *float64) *MyStructEnsureStruct {
  m.DoubleVal = doubleVal
  return m
}

func (m *MyStructEnsureStruct) SetFloatVal(floatVal *float32) *MyStructEnsureStruct {
  m.FloatVal = floatVal
  return m
}

func (m *MyStructEnsureStruct) SetI64Val(i64Val *int64) *MyStructEnsureStruct {
  m.I64Val = i64Val
  return m
}

func (m *MyStructEnsureStruct) SetI32Val(i32Val *int32) *MyStructEnsureStruct {
  m.I32Val = i32Val
  return m
}

func (m *MyStructEnsureStruct) SetI16Val(i16Val *int16) *MyStructEnsureStruct {
  m.I16Val = i16Val
  return m
}

func (m *MyStructEnsureStruct) SetByteVal(byteVal *int8) *MyStructEnsureStruct {
  m.ByteVal = byteVal
  return m
}

func (m *MyStructEnsureStruct) SetBoolVal(boolVal *bool) *MyStructEnsureStruct {
  m.BoolVal = boolVal
  return m
}

func (m *MyStructEnsureStruct) SetStructWithFieldCustomDefault(structWithFieldCustomDefault *MyData) *MyStructEnsureStruct {
  m.StructWithFieldCustomDefault = structWithFieldCustomDefault
  return m
}

func (p *MyStructEnsureStruct) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -32:
      if err := p.ReadField_32(iprot); err != nil {
        return err
      }
    case -31:
      if err := p.ReadField_31(iprot); err != nil {
        return err
      }
    case -30:
      if err := p.ReadField_30(iprot); err != nil {
        return err
      }
    case -29:
      if err := p.ReadField_29(iprot); err != nil {
        return err
      }
    case -28:
      if err := p.ReadField_28(iprot); err != nil {
        return err
      }
    case -27:
      if err := p.ReadField_27(iprot); err != nil {
        return err
      }
    case -26:
      if err := p.ReadField_26(iprot); err != nil {
        return err
      }
    case -25:
      if err := p.ReadField_25(iprot); err != nil {
        return err
      }
    case -24:
      if err := p.ReadField_24(iprot); err != nil {
        return err
      }
    case -23:
      if err := p.ReadField_23(iprot); err != nil {
        return err
      }
    case -22:
      if err := p.ReadField_22(iprot); err != nil {
        return err
      }
    case -21:
      if err := p.ReadField_21(iprot); err != nil {
        return err
      }
    case -20:
      if err := p.ReadField_20(iprot); err != nil {
        return err
      }
    case -19:
      if err := p.ReadField_19(iprot); err != nil {
        return err
      }
    case -18:
      if err := p.ReadField_18(iprot); err != nil {
        return err
      }
    case -17:
      if err := p.ReadField_17(iprot); err != nil {
        return err
      }
    case -16:
      if err := p.ReadField_16(iprot); err != nil {
        return err
      }
    case -15:
      if err := p.ReadField_15(iprot); err != nil {
        return err
      }
    case -14:
      if err := p.ReadField_14(iprot); err != nil {
        return err
      }
    case -13:
      if err := p.ReadField_13(iprot); err != nil {
        return err
      }
    case -12:
      if err := p.ReadField_12(iprot); err != nil {
        return err
      }
    case -11:
      if err := p.ReadField_11(iprot); err != nil {
        return err
      }
    case -10:
      if err := p.ReadField_10(iprot); err != nil {
        return err
      }
    case -9:
      if err := p.ReadField_9(iprot); err != nil {
        return err
      }
    case -8:
      if err := p.ReadField_8(iprot); err != nil {
        return err
      }
    case -7:
      if err := p.ReadField_7(iprot); err != nil {
        return err
      }
    case -6:
      if err := p.ReadField_6(iprot); err != nil {
        return err
      }
    case -5:
      if err := p.ReadField_5(iprot); err != nil {
        return err
      }
    case -4:
      if err := p.ReadField_4(iprot); err != nil {
        return err
      }
    case -3:
      if err := p.ReadField_3(iprot); err != nil {
        return err
      }
    case -2:
      if err := p.ReadField_2(iprot); err != nil {
        return err
      }
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_32(iprot thrift.Protocol) error {
  p.StructWithCustomDefault = NewMyDataWithCustomDefault()
  if err := p.StructWithCustomDefault.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StructWithCustomDefault), err)
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_31(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field -31: ", err)
  } else {
    p.I32WithCustomDefault = &v
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_30(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]map[string]int32, size)
  p.MapMap =  tMap
  for i := 0; i < size; i ++ {
    var _key89 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key89 = v
    }
    _, _, size, err := iprot.ReadMapBegin()
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[string]int32, size)
    _val90 :=  tMap
    for i := 0; i < size; i ++ {
      var _key91 string
      if v, err := iprot.ReadString(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        _key91 = v
      }
      var _val92 int32
      if v, err := iprot.ReadI32(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        _val92 = v
      }
      _val90[_key91] = _val92
    }
    if err := iprot.ReadMapEnd(); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.MapMap[_key89] = _val90
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_29(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]map[string]int32, 0, size)
  p.ListMap =  tSlice
  for i := 0; i < size; i ++ {
    _, _, size, err := iprot.ReadMapBegin()
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[string]int32, size)
    _elem93 :=  tMap
    for i := 0; i < size; i ++ {
      var _key94 string
      if v, err := iprot.ReadString(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        _key94 = v
      }
      var _val95 int32
      if v, err := iprot.ReadI32(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        _val95 = v
      }
      _elem93[_key94] = _val95
    }
    if err := iprot.ReadMapEnd(); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.ListMap = append(p.ListMap, _elem93)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_28(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.OptMapVal =  tMap
  for i := 0; i < size; i ++ {
    var _key96 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key96 = v
    }
    var _val97 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val97 = v
    }
    p.OptMapVal[_key96] = _val97
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_27(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.OptSetVal =  tSet
  for i := 0; i < size; i ++ {
    var _elem98 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem98 = v
    }
    p.OptSetVal = append(p.OptSetVal, _elem98)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_26(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int16, 0, size)
  p.OptListVal =  tSlice
  for i := 0; i < size; i ++ {
    var _elem99 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem99 = v
    }
    p.OptListVal = append(p.OptListVal, _elem99)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_25(iprot thrift.Protocol) error {
  p.OptLateStructVal = NewLateDefStruct()
  if err := p.OptLateStructVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptLateStructVal), err)
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_24(iprot thrift.Protocol) error {
  p.OptStructVal = NewMyData()
  if err := p.OptStructVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptStructVal), err)
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_23(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field -23: ", err)
  } else {
    temp := MyEnum(v)
    p.OptEnumVal = &temp
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_22(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field -22: ", err)
  } else {
    p.OptBinaryVal = v
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_21(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field -21: ", err)
  } else {
    p.OptStringVal = &v
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_20(iprot thrift.Protocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field -20: ", err)
  } else {
    p.OptDoubleVal = &v
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_19(iprot thrift.Protocol) error {
  if v, err := iprot.ReadFloat(); err != nil {
    return thrift.PrependError("error reading field -19: ", err)
  } else {
    p.OptFloatVal = &v
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_18(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field -18: ", err)
  } else {
    p.OptI64Val = &v
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_17(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field -17: ", err)
  } else {
    p.OptI32Val = &v
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_16(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
    return thrift.PrependError("error reading field -16: ", err)
  } else {
    p.OptI16Val = &v
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_15(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
    return thrift.PrependError("error reading field -15: ", err)
  } else {
    temp := int8(v)
    p.OptByteVal = &temp
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_14(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field -14: ", err)
  } else {
    p.OptBoolVal = &v
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_13(iprot thrift.Protocol) error {
  p.LateStructVal = NewLateDefStruct()
  if err := p.LateStructVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LateStructVal), err)
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_12(iprot thrift.Protocol) error {
  p.UnionVal = NewMyUnion()
  if err := p.UnionVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnionVal), err)
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_11(iprot thrift.Protocol) error {
  p.StructVal = NewMyData()
  if err := p.StructVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StructVal), err)
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_10(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field -10: ", err)
  } else {
    temp := MyEnum(v)
    p.EnumVal = &temp
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_9(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field -9: ", err)
  } else {
    p.BinaryVal = v
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field -8: ", err)
  } else {
    p.StringVal = &v
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field -7: ", err)
  } else {
    p.DoubleVal = &v
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadFloat(); err != nil {
    return thrift.PrependError("error reading field -6: ", err)
  } else {
    p.FloatVal = &v
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field -5: ", err)
  } else {
    p.I64Val = &v
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field -4: ", err)
  } else {
    p.I32Val = &v
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
    return thrift.PrependError("error reading field -3: ", err)
  } else {
    p.I16Val = &v
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
    return thrift.PrependError("error reading field -2: ", err)
  } else {
    temp := int8(v)
    p.ByteVal = &temp
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField_1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field -1: ", err)
  } else {
    p.BoolVal = &v
  }
  return nil
}

func (p *MyStructEnsureStruct)  ReadField1(iprot thrift.Protocol) error {
  p.StructWithFieldCustomDefault = NewMyData()
  if err := p.StructWithFieldCustomDefault.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StructWithFieldCustomDefault), err)
  }
  return nil
}

func (p *MyStructEnsureStruct) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStructEnsureStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField_32(oprot); err != nil { return err }
  if err := p.writeField_31(oprot); err != nil { return err }
  if err := p.writeField_30(oprot); err != nil { return err }
  if err := p.writeField_29(oprot); err != nil { return err }
  if err := p.writeField_28(oprot); err != nil { return err }
  if err := p.writeField_27(oprot); err != nil { return err }
  if err := p.writeField_26(oprot); err != nil { return err }
  if err := p.writeField_25(oprot); err != nil { return err }
  if err := p.writeField_24(oprot); err != nil { return err }
  if err := p.writeField_23(oprot); err != nil { return err }
  if err := p.writeField_22(oprot); err != nil { return err }
  if err := p.writeField_21(oprot); err != nil { return err }
  if err := p.writeField_20(oprot); err != nil { return err }
  if err := p.writeField_19(oprot); err != nil { return err }
  if err := p.writeField_18(oprot); err != nil { return err }
  if err := p.writeField_17(oprot); err != nil { return err }
  if err := p.writeField_16(oprot); err != nil { return err }
  if err := p.writeField_15(oprot); err != nil { return err }
  if err := p.writeField_14(oprot); err != nil { return err }
  if err := p.writeField_13(oprot); err != nil { return err }
  if err := p.writeField_12(oprot); err != nil { return err }
  if err := p.writeField_11(oprot); err != nil { return err }
  if err := p.writeField_10(oprot); err != nil { return err }
  if err := p.writeField_9(oprot); err != nil { return err }
  if err := p.writeField_8(oprot); err != nil { return err }
  if err := p.writeField_7(oprot); err != nil { return err }
  if err := p.writeField_6(oprot); err != nil { return err }
  if err := p.writeField_5(oprot); err != nil { return err }
  if err := p.writeField_4(oprot); err != nil { return err }
  if err := p.writeField_3(oprot); err != nil { return err }
  if err := p.writeField_2(oprot); err != nil { return err }
  if err := p.writeField_1(oprot); err != nil { return err }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStructEnsureStruct) writeField_32(oprot thrift.Protocol) (err error) {
  if p.IsSetStructWithCustomDefault() {
    if err := oprot.WriteFieldBegin("structWithCustomDefault", thrift.STRUCT, -32); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -32:structWithCustomDefault: ", p), err) }
    if err := p.StructWithCustomDefault.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StructWithCustomDefault), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -32:structWithCustomDefault: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField_31(oprot thrift.Protocol) (err error) {
  if p.IsSetI32WithCustomDefault() {
    if err := oprot.WriteFieldBegin("i32WithCustomDefault", thrift.I32, -31); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -31:i32WithCustomDefault: ", p), err) }
    if err := oprot.WriteI32(int32(*p.I32WithCustomDefault)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.i32WithCustomDefault (-31) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -31:i32WithCustomDefault: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField_30(oprot thrift.Protocol) (err error) {
  if p.IsSetMapMap() {
    if err := oprot.WriteFieldBegin("mapMap", thrift.MAP, -30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -30:mapMap: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(p.MapMap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.MapMap {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(v)); err != nil {
        return thrift.PrependError("error writing map begin: ", err)
      }
      for k, v := range v {
        if err := oprot.WriteString(string(k)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
        if err := oprot.WriteI32(int32(v)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      }
      if err := oprot.WriteMapEnd(); err != nil {
        return thrift.PrependError("error writing map end: ", err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -30:mapMap: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField_29(oprot thrift.Protocol) (err error) {
  if p.IsSetListMap() {
    if err := oprot.WriteFieldBegin("listMap", thrift.LIST, -29); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -29:listMap: ", p), err) }
    if err := oprot.WriteListBegin(thrift.MAP, len(p.ListMap)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ListMap {
      if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(v)); err != nil {
        return thrift.PrependError("error writing map begin: ", err)
      }
      for k, v := range v {
        if err := oprot.WriteString(string(k)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
        if err := oprot.WriteI32(int32(v)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      }
      if err := oprot.WriteMapEnd(); err != nil {
        return thrift.PrependError("error writing map end: ", err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -29:listMap: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField_28(oprot thrift.Protocol) (err error) {
  if p.IsSetOptMapVal() {
    if err := oprot.WriteFieldBegin("optMapVal", thrift.MAP, -28); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -28:optMapVal: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.OptMapVal)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.OptMapVal {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -28:optMapVal: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField_27(oprot thrift.Protocol) (err error) {
  if p.IsSetOptSetVal() {
    if err := oprot.WriteFieldBegin("optSetVal", thrift.SET, -27); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -27:optSetVal: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.STRING, len(p.OptSetVal)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    set := make(map[string]bool, len(p.OptSetVal))
    for _, v := range p.OptSetVal {
      if ok := set[v]; ok {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
      }
      set[v] = true
    }
    for _, v := range p.OptSetVal {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -27:optSetVal: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField_26(oprot thrift.Protocol) (err error) {
  if p.IsSetOptListVal() {
    if err := oprot.WriteFieldBegin("optListVal", thrift.LIST, -26); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -26:optListVal: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I16, len(p.OptListVal)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.OptListVal {
      if err := oprot.WriteI16(int16(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -26:optListVal: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField_25(oprot thrift.Protocol) (err error) {
  if p.IsSetOptLateStructVal() {
    if err := oprot.WriteFieldBegin("optLateStructVal", thrift.STRUCT, -25); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -25:optLateStructVal: ", p), err) }
    if err := p.OptLateStructVal.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptLateStructVal), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -25:optLateStructVal: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField_24(oprot thrift.Protocol) (err error) {
  if p.IsSetOptStructVal() {
    if err := oprot.WriteFieldBegin("optStructVal", thrift.STRUCT, -24); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -24:optStructVal: ", p), err) }
    if err := p.OptStructVal.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptStructVal), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -24:optStructVal: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField_23(oprot thrift.Protocol) (err error) {
  if p.IsSetOptEnumVal() {
    if err := oprot.WriteFieldBegin("optEnumVal", thrift.I32, -23); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -23:optEnumVal: ", p), err) }
    if err := oprot.WriteI32(int32(*p.OptEnumVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optEnumVal (-23) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -23:optEnumVal: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField_22(oprot thrift.Protocol) (err error) {
  if p.IsSetOptBinaryVal() {
    if err := oprot.WriteFieldBegin("optBinaryVal", thrift.STRING, -22); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -22:optBinaryVal: ", p), err) }
    if err := oprot.WriteBinary(p.OptBinaryVal); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optBinaryVal (-22) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -22:optBinaryVal: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField_21(oprot thrift.Protocol) (err error) {
  if p.IsSetOptStringVal() {
    if err := oprot.WriteFieldBegin("optStringVal", thrift.STRING, -21); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -21:optStringVal: ", p), err) }
    if err := oprot.WriteString(string(*p.OptStringVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optStringVal (-21) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -21:optStringVal: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField_20(oprot thrift.Protocol) (err error) {
  if p.IsSetOptDoubleVal() {
    if err := oprot.WriteFieldBegin("optDoubleVal", thrift.DOUBLE, -20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -20:optDoubleVal: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.OptDoubleVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optDoubleVal (-20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -20:optDoubleVal: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField_19(oprot thrift.Protocol) (err error) {
  if p.IsSetOptFloatVal() {
    if err := oprot.WriteFieldBegin("optFloatVal", thrift.FLOAT, -19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -19:optFloatVal: ", p), err) }
    if err := oprot.WriteFloat(float32(*p.OptFloatVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optFloatVal (-19) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -19:optFloatVal: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField_18(oprot thrift.Protocol) (err error) {
  if p.IsSetOptI64Val() {
    if err := oprot.WriteFieldBegin("optI64Val", thrift.I64, -18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -18:optI64Val: ", p), err) }
    if err := oprot.WriteI64(int64(*p.OptI64Val)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optI64Val (-18) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -18:optI64Val: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField_17(oprot thrift.Protocol) (err error) {
  if p.IsSetOptI32Val() {
    if err := oprot.WriteFieldBegin("optI32Val", thrift.I32, -17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -17:optI32Val: ", p), err) }
    if err := oprot.WriteI32(int32(*p.OptI32Val)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optI32Val (-17) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -17:optI32Val: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField_16(oprot thrift.Protocol) (err error) {
  if p.IsSetOptI16Val() {
    if err := oprot.WriteFieldBegin("optI16Val", thrift.I16, -16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -16:optI16Val: ", p), err) }
    if err := oprot.WriteI16(int16(*p.OptI16Val)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optI16Val (-16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -16:optI16Val: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField_15(oprot thrift.Protocol) (err error) {
  if p.IsSetOptByteVal() {
    if err := oprot.WriteFieldBegin("optByteVal", thrift.BYTE, -15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -15:optByteVal: ", p), err) }
    if err := oprot.WriteByte(byte(*p.OptByteVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optByteVal (-15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -15:optByteVal: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField_14(oprot thrift.Protocol) (err error) {
  if p.IsSetOptBoolVal() {
    if err := oprot.WriteFieldBegin("optBoolVal", thrift.BOOL, -14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -14:optBoolVal: ", p), err) }
    if err := oprot.WriteBool(bool(*p.OptBoolVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optBoolVal (-14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -14:optBoolVal: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField_13(oprot thrift.Protocol) (err error) {
  if p.IsSetLateStructVal() {
    if err := oprot.WriteFieldBegin("lateStructVal", thrift.STRUCT, -13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -13:lateStructVal: ", p), err) }
    if err := p.LateStructVal.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LateStructVal), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -13:lateStructVal: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField_12(oprot thrift.Protocol) (err error) {
  if p.IsSetUnionVal() {
    if err := oprot.WriteFieldBegin("unionVal", thrift.STRUCT, -12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -12:unionVal: ", p), err) }
    if err := p.UnionVal.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnionVal), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -12:unionVal: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField_11(oprot thrift.Protocol) (err error) {
  if p.IsSetStructVal() {
    if err := oprot.WriteFieldBegin("structVal", thrift.STRUCT, -11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -11:structVal: ", p), err) }
    if err := p.StructVal.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StructVal), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -11:structVal: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField_10(oprot thrift.Protocol) (err error) {
  if p.IsSetEnumVal() {
    if err := oprot.WriteFieldBegin("enumVal", thrift.I32, -10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -10:enumVal: ", p), err) }
    if err := oprot.WriteI32(int32(*p.EnumVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.enumVal (-10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -10:enumVal: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField_9(oprot thrift.Protocol) (err error) {
  if p.IsSetBinaryVal() {
    if err := oprot.WriteFieldBegin("binaryVal", thrift.STRING, -9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -9:binaryVal: ", p), err) }
    if err := oprot.WriteBinary(p.BinaryVal); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.binaryVal (-9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -9:binaryVal: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField_8(oprot thrift.Protocol) (err error) {
  if p.IsSetStringVal() {
    if err := oprot.WriteFieldBegin("stringVal", thrift.STRING, -8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -8:stringVal: ", p), err) }
    if err := oprot.WriteString(string(*p.StringVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.stringVal (-8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -8:stringVal: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField_7(oprot thrift.Protocol) (err error) {
  if p.IsSetDoubleVal() {
    if err := oprot.WriteFieldBegin("doubleVal", thrift.DOUBLE, -7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -7:doubleVal: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.DoubleVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.doubleVal (-7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -7:doubleVal: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField_6(oprot thrift.Protocol) (err error) {
  if p.IsSetFloatVal() {
    if err := oprot.WriteFieldBegin("floatVal", thrift.FLOAT, -6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -6:floatVal: ", p), err) }
    if err := oprot.WriteFloat(float32(*p.FloatVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.floatVal (-6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -6:floatVal: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField_5(oprot thrift.Protocol) (err error) {
  if p.IsSetI64Val() {
    if err := oprot.WriteFieldBegin("i64Val", thrift.I64, -5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -5:i64Val: ", p), err) }
    if err := oprot.WriteI64(int64(*p.I64Val)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.i64Val (-5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -5:i64Val: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField_4(oprot thrift.Protocol) (err error) {
  if p.IsSetI32Val() {
    if err := oprot.WriteFieldBegin("i32Val", thrift.I32, -4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -4:i32Val: ", p), err) }
    if err := oprot.WriteI32(int32(*p.I32Val)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.i32Val (-4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -4:i32Val: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField_3(oprot thrift.Protocol) (err error) {
  if p.IsSetI16Val() {
    if err := oprot.WriteFieldBegin("i16Val", thrift.I16, -3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -3:i16Val: ", p), err) }
    if err := oprot.WriteI16(int16(*p.I16Val)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.i16Val (-3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -3:i16Val: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField_2(oprot thrift.Protocol) (err error) {
  if p.IsSetByteVal() {
    if err := oprot.WriteFieldBegin("byteVal", thrift.BYTE, -2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -2:byteVal: ", p), err) }
    if err := oprot.WriteByte(byte(*p.ByteVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.byteVal (-2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -2:byteVal: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField_1(oprot thrift.Protocol) (err error) {
  if p.IsSetBoolVal() {
    if err := oprot.WriteFieldBegin("boolVal", thrift.BOOL, -1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:boolVal: ", p), err) }
    if err := oprot.WriteBool(bool(*p.BoolVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.boolVal (-1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -1:boolVal: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetStructWithFieldCustomDefault() {
    if err := oprot.WriteFieldBegin("structWithFieldCustomDefault", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:structWithFieldCustomDefault: ", p), err) }
    if err := p.StructWithFieldCustomDefault.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StructWithFieldCustomDefault), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:structWithFieldCustomDefault: ", p), err) }
  }
  return err
}

func (p *MyStructEnsureStruct) String() string {
  if p == nil {
    return "<nil>"
  }

  var structWithCustomDefaultVal string
  if p.StructWithCustomDefault == nil {
    structWithCustomDefaultVal = "<nil>"
  } else {
    structWithCustomDefaultVal = fmt.Sprintf("%v", p.StructWithCustomDefault)
  }
  var i32WithCustomDefaultVal string
  if p.I32WithCustomDefault == nil {
    i32WithCustomDefaultVal = "<nil>"
  } else {
    i32WithCustomDefaultVal = fmt.Sprintf("%v", *p.I32WithCustomDefault)
  }
  mapMapVal := fmt.Sprintf("%v", p.MapMap)
  listMapVal := fmt.Sprintf("%v", p.ListMap)
  optMapValVal := fmt.Sprintf("%v", p.OptMapVal)
  optSetValVal := fmt.Sprintf("%v", p.OptSetVal)
  optListValVal := fmt.Sprintf("%v", p.OptListVal)
  var optLateStructValVal string
  if p.OptLateStructVal == nil {
    optLateStructValVal = "<nil>"
  } else {
    optLateStructValVal = fmt.Sprintf("%v", p.OptLateStructVal)
  }
  var optStructValVal string
  if p.OptStructVal == nil {
    optStructValVal = "<nil>"
  } else {
    optStructValVal = fmt.Sprintf("%v", p.OptStructVal)
  }
  var optEnumValVal string
  if p.OptEnumVal == nil {
    optEnumValVal = "<nil>"
  } else {
    optEnumValVal = fmt.Sprintf("%v", *p.OptEnumVal)
  }
  optBinaryValVal := fmt.Sprintf("%v", p.OptBinaryVal)
  var optStringValVal string
  if p.OptStringVal == nil {
    optStringValVal = "<nil>"
  } else {
    optStringValVal = fmt.Sprintf("%v", *p.OptStringVal)
  }
  var optDoubleValVal string
  if p.OptDoubleVal == nil {
    optDoubleValVal = "<nil>"
  } else {
    optDoubleValVal = fmt.Sprintf("%v", *p.OptDoubleVal)
  }
  var optFloatValVal string
  if p.OptFloatVal == nil {
    optFloatValVal = "<nil>"
  } else {
    optFloatValVal = fmt.Sprintf("%v", *p.OptFloatVal)
  }
  var optI64ValVal string
  if p.OptI64Val == nil {
    optI64ValVal = "<nil>"
  } else {
    optI64ValVal = fmt.Sprintf("%v", *p.OptI64Val)
  }
  var optI32ValVal string
  if p.OptI32Val == nil {
    optI32ValVal = "<nil>"
  } else {
    optI32ValVal = fmt.Sprintf("%v", *p.OptI32Val)
  }
  var optI16ValVal string
  if p.OptI16Val == nil {
    optI16ValVal = "<nil>"
  } else {
    optI16ValVal = fmt.Sprintf("%v", *p.OptI16Val)
  }
  var optByteValVal string
  if p.OptByteVal == nil {
    optByteValVal = "<nil>"
  } else {
    optByteValVal = fmt.Sprintf("%v", *p.OptByteVal)
  }
  var optBoolValVal string
  if p.OptBoolVal == nil {
    optBoolValVal = "<nil>"
  } else {
    optBoolValVal = fmt.Sprintf("%v", *p.OptBoolVal)
  }
  var lateStructValVal string
  if p.LateStructVal == nil {
    lateStructValVal = "<nil>"
  } else {
    lateStructValVal = fmt.Sprintf("%v", p.LateStructVal)
  }
  var unionValVal string
  if p.UnionVal == nil {
    unionValVal = "<nil>"
  } else {
    unionValVal = fmt.Sprintf("%v", p.UnionVal)
  }
  var structValVal string
  if p.StructVal == nil {
    structValVal = "<nil>"
  } else {
    structValVal = fmt.Sprintf("%v", p.StructVal)
  }
  var enumValVal string
  if p.EnumVal == nil {
    enumValVal = "<nil>"
  } else {
    enumValVal = fmt.Sprintf("%v", *p.EnumVal)
  }
  binaryValVal := fmt.Sprintf("%v", p.BinaryVal)
  var stringValVal string
  if p.StringVal == nil {
    stringValVal = "<nil>"
  } else {
    stringValVal = fmt.Sprintf("%v", *p.StringVal)
  }
  var doubleValVal string
  if p.DoubleVal == nil {
    doubleValVal = "<nil>"
  } else {
    doubleValVal = fmt.Sprintf("%v", *p.DoubleVal)
  }
  var floatValVal string
  if p.FloatVal == nil {
    floatValVal = "<nil>"
  } else {
    floatValVal = fmt.Sprintf("%v", *p.FloatVal)
  }
  var i64ValVal string
  if p.I64Val == nil {
    i64ValVal = "<nil>"
  } else {
    i64ValVal = fmt.Sprintf("%v", *p.I64Val)
  }
  var i32ValVal string
  if p.I32Val == nil {
    i32ValVal = "<nil>"
  } else {
    i32ValVal = fmt.Sprintf("%v", *p.I32Val)
  }
  var i16ValVal string
  if p.I16Val == nil {
    i16ValVal = "<nil>"
  } else {
    i16ValVal = fmt.Sprintf("%v", *p.I16Val)
  }
  var byteValVal string
  if p.ByteVal == nil {
    byteValVal = "<nil>"
  } else {
    byteValVal = fmt.Sprintf("%v", *p.ByteVal)
  }
  var boolValVal string
  if p.BoolVal == nil {
    boolValVal = "<nil>"
  } else {
    boolValVal = fmt.Sprintf("%v", *p.BoolVal)
  }
  var structWithFieldCustomDefaultVal string
  if p.StructWithFieldCustomDefault == nil {
    structWithFieldCustomDefaultVal = "<nil>"
  } else {
    structWithFieldCustomDefaultVal = fmt.Sprintf("%v", p.StructWithFieldCustomDefault)
  }
  return fmt.Sprintf("MyStructEnsureStruct({StructWithCustomDefault:%s I32WithCustomDefault:%s MapMap:%s ListMap:%s OptMapVal:%s OptSetVal:%s OptListVal:%s OptLateStructVal:%s OptStructVal:%s OptEnumVal:%s OptBinaryVal:%s OptStringVal:%s OptDoubleVal:%s OptFloatVal:%s OptI64Val:%s OptI32Val:%s OptI16Val:%s OptByteVal:%s OptBoolVal:%s LateStructVal:%s UnionVal:%s StructVal:%s EnumVal:%s BinaryVal:%s StringVal:%s DoubleVal:%s FloatVal:%s I64Val:%s I32Val:%s I16Val:%s ByteVal:%s BoolVal:%s StructWithFieldCustomDefault:%s})", structWithCustomDefaultVal, i32WithCustomDefaultVal, mapMapVal, listMapVal, optMapValVal, optSetValVal, optListValVal, optLateStructValVal, optStructValVal, optEnumValVal, optBinaryValVal, optStringValVal, optDoubleValVal, optFloatValVal, optI64ValVal, optI32ValVal, optI16ValVal, optByteValVal, optBoolValVal, lateStructValVal, unionValVal, structValVal, enumValVal, binaryValVal, stringValVal, doubleValVal, floatValVal, i64ValVal, i32ValVal, i16ValVal, byteValVal, boolValVal, structWithFieldCustomDefaultVal)
}

// Attributes:
//  - Assign: Assigns to a (set) value.
// 
// If set, all other operations are ignored.
// 
// Note: Optional and union fields must be set before assigned.
// 
//  - Clear: Clears a value. Applies first.
//  - PatchPrior: Patches any previously set values. Applies second.
//  - Ensure: Initialize fields, using the given defaults. Applies third.
//  - Patch: Patches any set value, including newly set values. Applies last.
type LateDefStructPatch struct {
  Assign *LateDefStruct `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  PatchPrior *LateDefStructFieldPatch `thrift:"patchPrior,3" db:"patchPrior" json:"patchPrior"`
  // unused field # 4
  Ensure *LateDefStructEnsureStruct `thrift:"ensure,5" db:"ensure" json:"ensure"`
  Patch *LateDefStructFieldPatch `thrift:"patch,6" db:"patch" json:"patch"`
}

func NewLateDefStructPatch() *LateDefStructPatch {
  return &LateDefStructPatch{
    PatchPrior: NewLateDefStructFieldPatch(),
    Ensure: NewLateDefStructEnsureStruct(),
    Patch: NewLateDefStructFieldPatch(),
  }
}

var LateDefStructPatch_Assign_DEFAULT *LateDefStruct
func (p *LateDefStructPatch) GetAssign() *LateDefStruct {
  if !p.IsSetAssign() {
    return LateDefStructPatch_Assign_DEFAULT
  }
  return p.Assign
}
func (p *LateDefStructPatch) DefaultGetAssign() *LateDefStruct {
  if !p.IsSetAssign() {
    return NewLateDefStruct()
  }
  return p.Assign
}

func (p *LateDefStructPatch) GetClear() bool {
  return p.Clear
}
var LateDefStructPatch_PatchPrior_DEFAULT *LateDefStructFieldPatch
func (p *LateDefStructPatch) GetPatchPrior() *LateDefStructFieldPatch {
  if !p.IsSetPatchPrior() {
    return LateDefStructPatch_PatchPrior_DEFAULT
  }
  return p.PatchPrior
}
func (p *LateDefStructPatch) DefaultGetPatchPrior() *LateDefStructFieldPatch {
  if !p.IsSetPatchPrior() {
    return NewLateDefStructFieldPatch()
  }
  return p.PatchPrior
}
var LateDefStructPatch_Ensure_DEFAULT *LateDefStructEnsureStruct
func (p *LateDefStructPatch) GetEnsure() *LateDefStructEnsureStruct {
  if !p.IsSetEnsure() {
    return LateDefStructPatch_Ensure_DEFAULT
  }
  return p.Ensure
}
func (p *LateDefStructPatch) DefaultGetEnsure() *LateDefStructEnsureStruct {
  if !p.IsSetEnsure() {
    return NewLateDefStructEnsureStruct()
  }
  return p.Ensure
}
var LateDefStructPatch_Patch_DEFAULT *LateDefStructFieldPatch
func (p *LateDefStructPatch) GetPatch() *LateDefStructFieldPatch {
  if !p.IsSetPatch() {
    return LateDefStructPatch_Patch_DEFAULT
  }
  return p.Patch
}
func (p *LateDefStructPatch) DefaultGetPatch() *LateDefStructFieldPatch {
  if !p.IsSetPatch() {
    return NewLateDefStructFieldPatch()
  }
  return p.Patch
}
func (p *LateDefStructPatch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

func (p *LateDefStructPatch) IsSetPatchPrior() bool {
  return p != nil && p.PatchPrior != nil
}

func (p *LateDefStructPatch) IsSetEnsure() bool {
  return p != nil && p.Ensure != nil
}

func (p *LateDefStructPatch) IsSetPatch() bool {
  return p != nil && p.Patch != nil
}

type LateDefStructPatchBuilder struct {
  obj *LateDefStructPatch
}

func NewLateDefStructPatchBuilder() *LateDefStructPatchBuilder{
  return &LateDefStructPatchBuilder{
    obj: NewLateDefStructPatch(),
  }
}

func (p LateDefStructPatchBuilder) Emit() *LateDefStructPatch{
  return &LateDefStructPatch{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
    PatchPrior: p.obj.PatchPrior,
    Ensure: p.obj.Ensure,
    Patch: p.obj.Patch,
  }
}

func (l *LateDefStructPatchBuilder) Assign(assign *LateDefStruct) *LateDefStructPatchBuilder {
  l.obj.Assign = assign
  return l
}

func (l *LateDefStructPatchBuilder) Clear(clear bool) *LateDefStructPatchBuilder {
  l.obj.Clear = clear
  return l
}

func (l *LateDefStructPatchBuilder) PatchPrior(patchPrior *LateDefStructFieldPatch) *LateDefStructPatchBuilder {
  l.obj.PatchPrior = patchPrior
  return l
}

func (l *LateDefStructPatchBuilder) Ensure(ensure *LateDefStructEnsureStruct) *LateDefStructPatchBuilder {
  l.obj.Ensure = ensure
  return l
}

func (l *LateDefStructPatchBuilder) Patch(patch *LateDefStructFieldPatch) *LateDefStructPatchBuilder {
  l.obj.Patch = patch
  return l
}

func (l *LateDefStructPatch) SetAssign(assign *LateDefStruct) *LateDefStructPatch {
  l.Assign = assign
  return l
}

func (l *LateDefStructPatch) SetClear(clear bool) *LateDefStructPatch {
  l.Clear = clear
  return l
}

func (l *LateDefStructPatch) SetPatchPrior(patchPrior *LateDefStructFieldPatch) *LateDefStructPatch {
  l.PatchPrior = patchPrior
  return l
}

func (l *LateDefStructPatch) SetEnsure(ensure *LateDefStructEnsureStruct) *LateDefStructPatch {
  l.Ensure = ensure
  return l
}

func (l *LateDefStructPatch) SetPatch(patch *LateDefStructFieldPatch) *LateDefStructPatch {
  l.Patch = patch
  return l
}

func (p *LateDefStructPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LateDefStructPatch)  ReadField1(iprot thrift.Protocol) error {
  p.Assign = NewLateDefStruct()
  if err := p.Assign.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Assign), err)
  }
  return nil
}

func (p *LateDefStructPatch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *LateDefStructPatch)  ReadField3(iprot thrift.Protocol) error {
  p.PatchPrior = NewLateDefStructFieldPatch()
  if err := p.PatchPrior.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PatchPrior), err)
  }
  return nil
}

func (p *LateDefStructPatch)  ReadField5(iprot thrift.Protocol) error {
  p.Ensure = NewLateDefStructEnsureStruct()
  if err := p.Ensure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ensure), err)
  }
  return nil
}

func (p *LateDefStructPatch)  ReadField6(iprot thrift.Protocol) error {
  p.Patch = NewLateDefStructFieldPatch()
  if err := p.Patch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Patch), err)
  }
  return nil
}

func (p *LateDefStructPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("LateDefStructPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LateDefStructPatch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := p.Assign.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Assign), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *LateDefStructPatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *LateDefStructPatch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patchPrior: ", p), err) }
  if err := p.PatchPrior.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PatchPrior), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patchPrior: ", p), err) }
  return err
}

func (p *LateDefStructPatch) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("ensure", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ensure: ", p), err) }
  if err := p.Ensure.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ensure), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ensure: ", p), err) }
  return err
}

func (p *LateDefStructPatch) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:patch: ", p), err) }
  if err := p.Patch.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Patch), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:patch: ", p), err) }
  return err
}

func (p *LateDefStructPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var assignVal string
  if p.Assign == nil {
    assignVal = "<nil>"
  } else {
    assignVal = fmt.Sprintf("%v", p.Assign)
  }
  clearVal := fmt.Sprintf("%v", p.Clear)
  var patchPriorVal string
  if p.PatchPrior == nil {
    patchPriorVal = "<nil>"
  } else {
    patchPriorVal = fmt.Sprintf("%v", p.PatchPrior)
  }
  var ensureVal string
  if p.Ensure == nil {
    ensureVal = "<nil>"
  } else {
    ensureVal = fmt.Sprintf("%v", p.Ensure)
  }
  var patchVal string
  if p.Patch == nil {
    patchVal = "<nil>"
  } else {
    patchVal = fmt.Sprintf("%v", p.Patch)
  }
  return fmt.Sprintf("LateDefStructPatch({Assign:%s Clear:%s PatchPrior:%s Ensure:%s Patch:%s})", assignVal, clearVal, patchPriorVal, ensureVal, patchVal)
}

type LateDefStructFieldPatch struct {
}

func NewLateDefStructFieldPatch() *LateDefStructFieldPatch {
  return &LateDefStructFieldPatch{}
}

type LateDefStructFieldPatchBuilder struct {
  obj *LateDefStructFieldPatch
}

func NewLateDefStructFieldPatchBuilder() *LateDefStructFieldPatchBuilder{
  return &LateDefStructFieldPatchBuilder{
    obj: NewLateDefStructFieldPatch(),
  }
}

func (p LateDefStructFieldPatchBuilder) Emit() *LateDefStructFieldPatch{
  return &LateDefStructFieldPatch{
  }
}

func (p *LateDefStructFieldPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LateDefStructFieldPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("LateDefStructFieldPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LateDefStructFieldPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("LateDefStructFieldPatch({})")
}

type LateDefStructEnsureStruct struct {
}

func NewLateDefStructEnsureStruct() *LateDefStructEnsureStruct {
  return &LateDefStructEnsureStruct{}
}

type LateDefStructEnsureStructBuilder struct {
  obj *LateDefStructEnsureStruct
}

func NewLateDefStructEnsureStructBuilder() *LateDefStructEnsureStructBuilder{
  return &LateDefStructEnsureStructBuilder{
    obj: NewLateDefStructEnsureStruct(),
  }
}

func (p LateDefStructEnsureStructBuilder) Emit() *LateDefStructEnsureStruct{
  return &LateDefStructEnsureStruct{
  }
}

func (p *LateDefStructEnsureStruct) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LateDefStructEnsureStruct) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("LateDefStructEnsureStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LateDefStructEnsureStruct) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("LateDefStructEnsureStruct({})")
}

// Attributes:
//  - Assign: Assigns to a (set) value.
// 
// If set, all other operations are ignored.
// 
// Note: Optional and union fields must be set before assigned.
// 
//  - Clear: Clears a value. Applies first.
//  - PatchPrior: Patches any previously set values. Applies second.
//  - Ensure: Initialize fields, using the given defaults. Applies third.
//  - Patch: Patches any set value, including newly set values. Applies last.
type RecursivePatch struct {
  Assign *Recursive `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  PatchPrior *RecursiveFieldPatch `thrift:"patchPrior,3" db:"patchPrior" json:"patchPrior"`
  // unused field # 4
  Ensure *RecursiveEnsureStruct `thrift:"ensure,5" db:"ensure" json:"ensure"`
  Patch *RecursiveFieldPatch `thrift:"patch,6" db:"patch" json:"patch"`
}

func NewRecursivePatch() *RecursivePatch {
  return &RecursivePatch{
    PatchPrior: NewRecursiveFieldPatch(),
    Ensure: NewRecursiveEnsureStruct(),
    Patch: NewRecursiveFieldPatch(),
  }
}

var RecursivePatch_Assign_DEFAULT *Recursive
func (p *RecursivePatch) GetAssign() *Recursive {
  if !p.IsSetAssign() {
    return RecursivePatch_Assign_DEFAULT
  }
  return p.Assign
}
func (p *RecursivePatch) DefaultGetAssign() *Recursive {
  if !p.IsSetAssign() {
    return NewRecursive()
  }
  return p.Assign
}

func (p *RecursivePatch) GetClear() bool {
  return p.Clear
}
var RecursivePatch_PatchPrior_DEFAULT *RecursiveFieldPatch
func (p *RecursivePatch) GetPatchPrior() *RecursiveFieldPatch {
  if !p.IsSetPatchPrior() {
    return RecursivePatch_PatchPrior_DEFAULT
  }
  return p.PatchPrior
}
func (p *RecursivePatch) DefaultGetPatchPrior() *RecursiveFieldPatch {
  if !p.IsSetPatchPrior() {
    return NewRecursiveFieldPatch()
  }
  return p.PatchPrior
}
var RecursivePatch_Ensure_DEFAULT *RecursiveEnsureStruct
func (p *RecursivePatch) GetEnsure() *RecursiveEnsureStruct {
  if !p.IsSetEnsure() {
    return RecursivePatch_Ensure_DEFAULT
  }
  return p.Ensure
}
func (p *RecursivePatch) DefaultGetEnsure() *RecursiveEnsureStruct {
  if !p.IsSetEnsure() {
    return NewRecursiveEnsureStruct()
  }
  return p.Ensure
}
var RecursivePatch_Patch_DEFAULT *RecursiveFieldPatch
func (p *RecursivePatch) GetPatch() *RecursiveFieldPatch {
  if !p.IsSetPatch() {
    return RecursivePatch_Patch_DEFAULT
  }
  return p.Patch
}
func (p *RecursivePatch) DefaultGetPatch() *RecursiveFieldPatch {
  if !p.IsSetPatch() {
    return NewRecursiveFieldPatch()
  }
  return p.Patch
}
func (p *RecursivePatch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

func (p *RecursivePatch) IsSetPatchPrior() bool {
  return p != nil && p.PatchPrior != nil
}

func (p *RecursivePatch) IsSetEnsure() bool {
  return p != nil && p.Ensure != nil
}

func (p *RecursivePatch) IsSetPatch() bool {
  return p != nil && p.Patch != nil
}

type RecursivePatchBuilder struct {
  obj *RecursivePatch
}

func NewRecursivePatchBuilder() *RecursivePatchBuilder{
  return &RecursivePatchBuilder{
    obj: NewRecursivePatch(),
  }
}

func (p RecursivePatchBuilder) Emit() *RecursivePatch{
  return &RecursivePatch{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
    PatchPrior: p.obj.PatchPrior,
    Ensure: p.obj.Ensure,
    Patch: p.obj.Patch,
  }
}

func (r *RecursivePatchBuilder) Assign(assign *Recursive) *RecursivePatchBuilder {
  r.obj.Assign = assign
  return r
}

func (r *RecursivePatchBuilder) Clear(clear bool) *RecursivePatchBuilder {
  r.obj.Clear = clear
  return r
}

func (r *RecursivePatchBuilder) PatchPrior(patchPrior *RecursiveFieldPatch) *RecursivePatchBuilder {
  r.obj.PatchPrior = patchPrior
  return r
}

func (r *RecursivePatchBuilder) Ensure(ensure *RecursiveEnsureStruct) *RecursivePatchBuilder {
  r.obj.Ensure = ensure
  return r
}

func (r *RecursivePatchBuilder) Patch(patch *RecursiveFieldPatch) *RecursivePatchBuilder {
  r.obj.Patch = patch
  return r
}

func (r *RecursivePatch) SetAssign(assign *Recursive) *RecursivePatch {
  r.Assign = assign
  return r
}

func (r *RecursivePatch) SetClear(clear bool) *RecursivePatch {
  r.Clear = clear
  return r
}

func (r *RecursivePatch) SetPatchPrior(patchPrior *RecursiveFieldPatch) *RecursivePatch {
  r.PatchPrior = patchPrior
  return r
}

func (r *RecursivePatch) SetEnsure(ensure *RecursiveEnsureStruct) *RecursivePatch {
  r.Ensure = ensure
  return r
}

func (r *RecursivePatch) SetPatch(patch *RecursiveFieldPatch) *RecursivePatch {
  r.Patch = patch
  return r
}

func (p *RecursivePatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RecursivePatch)  ReadField1(iprot thrift.Protocol) error {
  p.Assign = NewRecursive()
  if err := p.Assign.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Assign), err)
  }
  return nil
}

func (p *RecursivePatch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *RecursivePatch)  ReadField3(iprot thrift.Protocol) error {
  p.PatchPrior = NewRecursiveFieldPatch()
  if err := p.PatchPrior.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PatchPrior), err)
  }
  return nil
}

func (p *RecursivePatch)  ReadField5(iprot thrift.Protocol) error {
  p.Ensure = NewRecursiveEnsureStruct()
  if err := p.Ensure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ensure), err)
  }
  return nil
}

func (p *RecursivePatch)  ReadField6(iprot thrift.Protocol) error {
  p.Patch = NewRecursiveFieldPatch()
  if err := p.Patch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Patch), err)
  }
  return nil
}

func (p *RecursivePatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RecursivePatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RecursivePatch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := p.Assign.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Assign), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *RecursivePatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *RecursivePatch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patchPrior: ", p), err) }
  if err := p.PatchPrior.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PatchPrior), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patchPrior: ", p), err) }
  return err
}

func (p *RecursivePatch) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("ensure", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ensure: ", p), err) }
  if err := p.Ensure.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ensure), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ensure: ", p), err) }
  return err
}

func (p *RecursivePatch) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:patch: ", p), err) }
  if err := p.Patch.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Patch), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:patch: ", p), err) }
  return err
}

func (p *RecursivePatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var assignVal string
  if p.Assign == nil {
    assignVal = "<nil>"
  } else {
    assignVal = fmt.Sprintf("%v", p.Assign)
  }
  clearVal := fmt.Sprintf("%v", p.Clear)
  var patchPriorVal string
  if p.PatchPrior == nil {
    patchPriorVal = "<nil>"
  } else {
    patchPriorVal = fmt.Sprintf("%v", p.PatchPrior)
  }
  var ensureVal string
  if p.Ensure == nil {
    ensureVal = "<nil>"
  } else {
    ensureVal = fmt.Sprintf("%v", p.Ensure)
  }
  var patchVal string
  if p.Patch == nil {
    patchVal = "<nil>"
  } else {
    patchVal = fmt.Sprintf("%v", p.Patch)
  }
  return fmt.Sprintf("RecursivePatch({Assign:%s Clear:%s PatchPrior:%s Ensure:%s Patch:%s})", assignVal, clearVal, patchPriorVal, ensureVal, patchVal)
}

// Attributes:
//  - Assign: Assigns to a (set) value.
// 
// If set, all other operations are ignored.
// 
// Note: Optional and union fields must be set before assigned.
// 
//  - Clear: Clears a value. Applies first.
type RecursiveField1Patch struct {
  Assign map[string]*Recursive `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
}

func NewRecursiveField1Patch() *RecursiveField1Patch {
  return &RecursiveField1Patch{}
}

var RecursiveField1Patch_Assign_DEFAULT map[string]*Recursive

func (p *RecursiveField1Patch) GetAssign() map[string]*Recursive {
  return p.Assign
}

func (p *RecursiveField1Patch) GetClear() bool {
  return p.Clear
}
func (p *RecursiveField1Patch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

type RecursiveField1PatchBuilder struct {
  obj *RecursiveField1Patch
}

func NewRecursiveField1PatchBuilder() *RecursiveField1PatchBuilder{
  return &RecursiveField1PatchBuilder{
    obj: NewRecursiveField1Patch(),
  }
}

func (p RecursiveField1PatchBuilder) Emit() *RecursiveField1Patch{
  return &RecursiveField1Patch{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
  }
}

func (r *RecursiveField1PatchBuilder) Assign(assign map[string]*Recursive) *RecursiveField1PatchBuilder {
  r.obj.Assign = assign
  return r
}

func (r *RecursiveField1PatchBuilder) Clear(clear bool) *RecursiveField1PatchBuilder {
  r.obj.Clear = clear
  return r
}

func (r *RecursiveField1Patch) SetAssign(assign map[string]*Recursive) *RecursiveField1Patch {
  r.Assign = assign
  return r
}

func (r *RecursiveField1Patch) SetClear(clear bool) *RecursiveField1Patch {
  r.Clear = clear
  return r
}

func (p *RecursiveField1Patch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RecursiveField1Patch)  ReadField1(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*Recursive, size)
  p.Assign =  tMap
  for i := 0; i < size; i ++ {
    var _key100 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key100 = v
    }
    _val101 := NewRecursive()
    if err := _val101.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val101), err)
    }
    p.Assign[_key100] = _val101
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *RecursiveField1Patch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *RecursiveField1Patch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RecursiveField1Patch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RecursiveField1Patch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.MAP, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Assign)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Assign {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *RecursiveField1Patch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *RecursiveField1Patch) String() string {
  if p == nil {
    return "<nil>"
  }

  assignVal := fmt.Sprintf("%v", p.Assign)
  clearVal := fmt.Sprintf("%v", p.Clear)
  return fmt.Sprintf("RecursiveField1Patch({Assign:%s Clear:%s})", assignVal, clearVal)
}

// Attributes:
//  - Nodes
type RecursiveFieldPatch struct {
  Nodes *RecursiveField1Patch
}

func NewRecursiveFieldPatch() *RecursiveFieldPatch {
  return &RecursiveFieldPatch{
    Nodes: NewRecursiveField1Patch(),
  }
}

var RecursiveFieldPatch_Nodes_DEFAULT *RecursiveField1Patch
func (p *RecursiveFieldPatch) GetNodes() *RecursiveField1Patch {
  if !p.IsSetNodes() {
    return RecursiveFieldPatch_Nodes_DEFAULT
  }
  return p.Nodes
}
func (p *RecursiveFieldPatch) DefaultGetNodes() *RecursiveField1Patch {
  if !p.IsSetNodes() {
    return NewRecursiveField1Patch()
  }
  return p.Nodes
}
func (p *RecursiveFieldPatch) IsSetNodes() bool {
  return p != nil && p.Nodes != nil
}

type RecursiveFieldPatchBuilder struct {
  obj *RecursiveFieldPatch
}

func NewRecursiveFieldPatchBuilder() *RecursiveFieldPatchBuilder{
  return &RecursiveFieldPatchBuilder{
    obj: NewRecursiveFieldPatch(),
  }
}

func (p RecursiveFieldPatchBuilder) Emit() *RecursiveFieldPatch{
  return &RecursiveFieldPatch{
    Nodes: p.obj.Nodes,
  }
}

func (r *RecursiveFieldPatchBuilder) Nodes(nodes *RecursiveField1Patch) *RecursiveFieldPatchBuilder {
  r.obj.Nodes = nodes
  return r
}

func (r *RecursiveFieldPatch) SetNodes(nodes *RecursiveField1Patch) *RecursiveFieldPatch {
  r.Nodes = nodes
  return r
}

func (p *RecursiveFieldPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RecursiveFieldPatch)  ReadField_1(iprot thrift.Protocol) error {
  p.Nodes = NewRecursiveField1Patch()
  if err := p.Nodes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Nodes), err)
  }
  return nil
}

func (p *RecursiveFieldPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RecursiveFieldPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField_1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RecursiveFieldPatch) writeField_1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("nodes", thrift.STRUCT, -1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:nodes: ", p), err) }
  if err := p.Nodes.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Nodes), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -1:nodes: ", p), err) }
  return err
}

func (p *RecursiveFieldPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var nodesVal string
  if p.Nodes == nil {
    nodesVal = "<nil>"
  } else {
    nodesVal = fmt.Sprintf("%v", p.Nodes)
  }
  return fmt.Sprintf("RecursiveFieldPatch({Nodes:%s})", nodesVal)
}

// Attributes:
//  - Nodes
type RecursiveEnsureStruct struct {
  Nodes map[string]*Recursive
}

func NewRecursiveEnsureStruct() *RecursiveEnsureStruct {
  return &RecursiveEnsureStruct{}
}

var RecursiveEnsureStruct_Nodes_DEFAULT map[string]*Recursive

func (p *RecursiveEnsureStruct) GetNodes() map[string]*Recursive {
  return p.Nodes
}
func (p *RecursiveEnsureStruct) IsSetNodes() bool {
  return p != nil && p.Nodes != nil
}

type RecursiveEnsureStructBuilder struct {
  obj *RecursiveEnsureStruct
}

func NewRecursiveEnsureStructBuilder() *RecursiveEnsureStructBuilder{
  return &RecursiveEnsureStructBuilder{
    obj: NewRecursiveEnsureStruct(),
  }
}

func (p RecursiveEnsureStructBuilder) Emit() *RecursiveEnsureStruct{
  return &RecursiveEnsureStruct{
    Nodes: p.obj.Nodes,
  }
}

func (r *RecursiveEnsureStructBuilder) Nodes(nodes map[string]*Recursive) *RecursiveEnsureStructBuilder {
  r.obj.Nodes = nodes
  return r
}

func (r *RecursiveEnsureStruct) SetNodes(nodes map[string]*Recursive) *RecursiveEnsureStruct {
  r.Nodes = nodes
  return r
}

func (p *RecursiveEnsureStruct) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RecursiveEnsureStruct)  ReadField_1(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*Recursive, size)
  p.Nodes =  tMap
  for i := 0; i < size; i ++ {
    var _key102 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key102 = v
    }
    _val103 := NewRecursive()
    if err := _val103.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val103), err)
    }
    p.Nodes[_key102] = _val103
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *RecursiveEnsureStruct) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RecursiveEnsureStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField_1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RecursiveEnsureStruct) writeField_1(oprot thrift.Protocol) (err error) {
  if p.IsSetNodes() {
    if err := oprot.WriteFieldBegin("nodes", thrift.MAP, -1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:nodes: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Nodes)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Nodes {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -1:nodes: ", p), err) }
  }
  return err
}

func (p *RecursiveEnsureStruct) String() string {
  if p == nil {
    return "<nil>"
  }

  nodesVal := fmt.Sprintf("%v", p.Nodes)
  return fmt.Sprintf("RecursiveEnsureStruct({Nodes:%s})", nodesVal)
}

// Attributes:
//  - Assign: Assigns to a (set) value.
// 
// If set, all other operations are ignored.
// 
// Note: Optional and union fields must be set before assigned.
// 
//  - Clear: Clears a value. Applies first.
//  - PatchPrior: Patches any previously set values. Applies second.
//  - Ensure: Initialize fields, using the given defaults. Applies third.
//  - Patch: Patches any set value, including newly set values. Applies last.
type BarPatch struct {
  Assign *Bar `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  PatchPrior *BarFieldPatch `thrift:"patchPrior,3" db:"patchPrior" json:"patchPrior"`
  // unused field # 4
  Ensure *BarEnsureStruct `thrift:"ensure,5" db:"ensure" json:"ensure"`
  Patch *BarFieldPatch `thrift:"patch,6" db:"patch" json:"patch"`
}

func NewBarPatch() *BarPatch {
  return &BarPatch{
    PatchPrior: NewBarFieldPatch(),
    Ensure: NewBarEnsureStruct(),
    Patch: NewBarFieldPatch(),
  }
}

var BarPatch_Assign_DEFAULT *Bar
func (p *BarPatch) GetAssign() *Bar {
  if !p.IsSetAssign() {
    return BarPatch_Assign_DEFAULT
  }
  return p.Assign
}
func (p *BarPatch) DefaultGetAssign() *Bar {
  if !p.IsSetAssign() {
    return NewBar()
  }
  return p.Assign
}

func (p *BarPatch) GetClear() bool {
  return p.Clear
}
var BarPatch_PatchPrior_DEFAULT *BarFieldPatch
func (p *BarPatch) GetPatchPrior() *BarFieldPatch {
  if !p.IsSetPatchPrior() {
    return BarPatch_PatchPrior_DEFAULT
  }
  return p.PatchPrior
}
func (p *BarPatch) DefaultGetPatchPrior() *BarFieldPatch {
  if !p.IsSetPatchPrior() {
    return NewBarFieldPatch()
  }
  return p.PatchPrior
}
var BarPatch_Ensure_DEFAULT *BarEnsureStruct
func (p *BarPatch) GetEnsure() *BarEnsureStruct {
  if !p.IsSetEnsure() {
    return BarPatch_Ensure_DEFAULT
  }
  return p.Ensure
}
func (p *BarPatch) DefaultGetEnsure() *BarEnsureStruct {
  if !p.IsSetEnsure() {
    return NewBarEnsureStruct()
  }
  return p.Ensure
}
var BarPatch_Patch_DEFAULT *BarFieldPatch
func (p *BarPatch) GetPatch() *BarFieldPatch {
  if !p.IsSetPatch() {
    return BarPatch_Patch_DEFAULT
  }
  return p.Patch
}
func (p *BarPatch) DefaultGetPatch() *BarFieldPatch {
  if !p.IsSetPatch() {
    return NewBarFieldPatch()
  }
  return p.Patch
}
func (p *BarPatch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

func (p *BarPatch) IsSetPatchPrior() bool {
  return p != nil && p.PatchPrior != nil
}

func (p *BarPatch) IsSetEnsure() bool {
  return p != nil && p.Ensure != nil
}

func (p *BarPatch) IsSetPatch() bool {
  return p != nil && p.Patch != nil
}

type BarPatchBuilder struct {
  obj *BarPatch
}

func NewBarPatchBuilder() *BarPatchBuilder{
  return &BarPatchBuilder{
    obj: NewBarPatch(),
  }
}

func (p BarPatchBuilder) Emit() *BarPatch{
  return &BarPatch{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
    PatchPrior: p.obj.PatchPrior,
    Ensure: p.obj.Ensure,
    Patch: p.obj.Patch,
  }
}

func (b *BarPatchBuilder) Assign(assign *Bar) *BarPatchBuilder {
  b.obj.Assign = assign
  return b
}

func (b *BarPatchBuilder) Clear(clear bool) *BarPatchBuilder {
  b.obj.Clear = clear
  return b
}

func (b *BarPatchBuilder) PatchPrior(patchPrior *BarFieldPatch) *BarPatchBuilder {
  b.obj.PatchPrior = patchPrior
  return b
}

func (b *BarPatchBuilder) Ensure(ensure *BarEnsureStruct) *BarPatchBuilder {
  b.obj.Ensure = ensure
  return b
}

func (b *BarPatchBuilder) Patch(patch *BarFieldPatch) *BarPatchBuilder {
  b.obj.Patch = patch
  return b
}

func (b *BarPatch) SetAssign(assign *Bar) *BarPatch {
  b.Assign = assign
  return b
}

func (b *BarPatch) SetClear(clear bool) *BarPatch {
  b.Clear = clear
  return b
}

func (b *BarPatch) SetPatchPrior(patchPrior *BarFieldPatch) *BarPatch {
  b.PatchPrior = patchPrior
  return b
}

func (b *BarPatch) SetEnsure(ensure *BarEnsureStruct) *BarPatch {
  b.Ensure = ensure
  return b
}

func (b *BarPatch) SetPatch(patch *BarFieldPatch) *BarPatch {
  b.Patch = patch
  return b
}

func (p *BarPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BarPatch)  ReadField1(iprot thrift.Protocol) error {
  p.Assign = NewBar()
  if err := p.Assign.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Assign), err)
  }
  return nil
}

func (p *BarPatch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *BarPatch)  ReadField3(iprot thrift.Protocol) error {
  p.PatchPrior = NewBarFieldPatch()
  if err := p.PatchPrior.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PatchPrior), err)
  }
  return nil
}

func (p *BarPatch)  ReadField5(iprot thrift.Protocol) error {
  p.Ensure = NewBarEnsureStruct()
  if err := p.Ensure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ensure), err)
  }
  return nil
}

func (p *BarPatch)  ReadField6(iprot thrift.Protocol) error {
  p.Patch = NewBarFieldPatch()
  if err := p.Patch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Patch), err)
  }
  return nil
}

func (p *BarPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("BarPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BarPatch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := p.Assign.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Assign), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *BarPatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *BarPatch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patchPrior: ", p), err) }
  if err := p.PatchPrior.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PatchPrior), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patchPrior: ", p), err) }
  return err
}

func (p *BarPatch) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("ensure", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ensure: ", p), err) }
  if err := p.Ensure.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ensure), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ensure: ", p), err) }
  return err
}

func (p *BarPatch) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:patch: ", p), err) }
  if err := p.Patch.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Patch), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:patch: ", p), err) }
  return err
}

func (p *BarPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var assignVal string
  if p.Assign == nil {
    assignVal = "<nil>"
  } else {
    assignVal = fmt.Sprintf("%v", p.Assign)
  }
  clearVal := fmt.Sprintf("%v", p.Clear)
  var patchPriorVal string
  if p.PatchPrior == nil {
    patchPriorVal = "<nil>"
  } else {
    patchPriorVal = fmt.Sprintf("%v", p.PatchPrior)
  }
  var ensureVal string
  if p.Ensure == nil {
    ensureVal = "<nil>"
  } else {
    ensureVal = fmt.Sprintf("%v", p.Ensure)
  }
  var patchVal string
  if p.Patch == nil {
    patchVal = "<nil>"
  } else {
    patchVal = fmt.Sprintf("%v", p.Patch)
  }
  return fmt.Sprintf("BarPatch({Assign:%s Clear:%s PatchPrior:%s Ensure:%s Patch:%s})", assignVal, clearVal, patchPriorVal, ensureVal, patchVal)
}

// Attributes:
//  - Loop
type BarFieldPatch struct {
  Loop *LoopPatch
}

func NewBarFieldPatch() *BarFieldPatch {
  return &BarFieldPatch{
    Loop: NewLoopPatch(),
  }
}

var BarFieldPatch_Loop_DEFAULT *LoopPatch
func (p *BarFieldPatch) GetLoop() *LoopPatch {
  if !p.IsSetLoop() {
    return BarFieldPatch_Loop_DEFAULT
  }
  return p.Loop
}
func (p *BarFieldPatch) IsSetLoop() bool {
  return p != nil && p.Loop != nil
}

type BarFieldPatchBuilder struct {
  obj *BarFieldPatch
}

func NewBarFieldPatchBuilder() *BarFieldPatchBuilder{
  return &BarFieldPatchBuilder{
    obj: NewBarFieldPatch(),
  }
}

func (p BarFieldPatchBuilder) Emit() *BarFieldPatch{
  return &BarFieldPatch{
    Loop: p.obj.Loop,
  }
}

func (b *BarFieldPatchBuilder) Loop(loop *LoopPatch) *BarFieldPatchBuilder {
  b.obj.Loop = loop
  return b
}

func (b *BarFieldPatch) SetLoop(loop *LoopPatch) *BarFieldPatch {
  b.Loop = loop
  return b
}

func (p *BarFieldPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BarFieldPatch)  ReadField_1(iprot thrift.Protocol) error {
  p.Loop = NewLoopPatch()
  if err := p.Loop.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Loop), err)
  }
  return nil
}

func (p *BarFieldPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("BarFieldPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField_1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BarFieldPatch) writeField_1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("loop", thrift.STRUCT, -1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:loop: ", p), err) }
  if err := p.Loop.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Loop), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -1:loop: ", p), err) }
  return err
}

func (p *BarFieldPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var loopVal string
  if p.Loop == nil {
    loopVal = "<nil>"
  } else {
    loopVal = fmt.Sprintf("%v", p.Loop)
  }
  return fmt.Sprintf("BarFieldPatch({Loop:%s})", loopVal)
}

// Attributes:
//  - Loop
type BarEnsureStruct struct {
  Loop *Loop
}

func NewBarEnsureStruct() *BarEnsureStruct {
  return &BarEnsureStruct{}
}

var BarEnsureStruct_Loop_DEFAULT *Loop
func (p *BarEnsureStruct) GetLoop() *Loop {
  if !p.IsSetLoop() {
    return BarEnsureStruct_Loop_DEFAULT
  }
  return p.Loop
}
func (p *BarEnsureStruct) IsSetLoop() bool {
  return p != nil && p.Loop != nil
}

type BarEnsureStructBuilder struct {
  obj *BarEnsureStruct
}

func NewBarEnsureStructBuilder() *BarEnsureStructBuilder{
  return &BarEnsureStructBuilder{
    obj: NewBarEnsureStruct(),
  }
}

func (p BarEnsureStructBuilder) Emit() *BarEnsureStruct{
  return &BarEnsureStruct{
    Loop: p.obj.Loop,
  }
}

func (b *BarEnsureStructBuilder) Loop(loop *Loop) *BarEnsureStructBuilder {
  b.obj.Loop = loop
  return b
}

func (b *BarEnsureStruct) SetLoop(loop *Loop) *BarEnsureStruct {
  b.Loop = loop
  return b
}

func (p *BarEnsureStruct) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BarEnsureStruct)  ReadField_1(iprot thrift.Protocol) error {
  p.Loop = NewLoop()
  if err := p.Loop.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Loop), err)
  }
  return nil
}

func (p *BarEnsureStruct) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("BarEnsureStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField_1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BarEnsureStruct) writeField_1(oprot thrift.Protocol) (err error) {
  if p.IsSetLoop() {
    if err := oprot.WriteFieldBegin("loop", thrift.STRUCT, -1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:loop: ", p), err) }
    if err := p.Loop.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Loop), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -1:loop: ", p), err) }
  }
  return err
}

func (p *BarEnsureStruct) String() string {
  if p == nil {
    return "<nil>"
  }

  var loopVal string
  if p.Loop == nil {
    loopVal = "<nil>"
  } else {
    loopVal = fmt.Sprintf("%v", p.Loop)
  }
  return fmt.Sprintf("BarEnsureStruct({Loop:%s})", loopVal)
}

// Attributes:
//  - Assign: Assigns to a (set) value.
// 
// If set, all other operations are ignored.
// 
// Note: Optional and union fields must be set before assigned.
// 
//  - Clear: Clears a value. Applies first.
type LoopPatch struct {
  Assign *Loop `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
}

func NewLoopPatch() *LoopPatch {
  return &LoopPatch{}
}

var LoopPatch_Assign_DEFAULT *Loop
func (p *LoopPatch) GetAssign() *Loop {
  if !p.IsSetAssign() {
    return LoopPatch_Assign_DEFAULT
  }
  return p.Assign
}
func (p *LoopPatch) DefaultGetAssign() *Loop {
  if !p.IsSetAssign() {
    return NewLoop()
  }
  return p.Assign
}

func (p *LoopPatch) GetClear() bool {
  return p.Clear
}
func (p *LoopPatch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

type LoopPatchBuilder struct {
  obj *LoopPatch
}

func NewLoopPatchBuilder() *LoopPatchBuilder{
  return &LoopPatchBuilder{
    obj: NewLoopPatch(),
  }
}

func (p LoopPatchBuilder) Emit() *LoopPatch{
  return &LoopPatch{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
  }
}

func (l *LoopPatchBuilder) Assign(assign *Loop) *LoopPatchBuilder {
  l.obj.Assign = assign
  return l
}

func (l *LoopPatchBuilder) Clear(clear bool) *LoopPatchBuilder {
  l.obj.Clear = clear
  return l
}

func (l *LoopPatch) SetAssign(assign *Loop) *LoopPatch {
  l.Assign = assign
  return l
}

func (l *LoopPatch) SetClear(clear bool) *LoopPatch {
  l.Clear = clear
  return l
}

func (p *LoopPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LoopPatch)  ReadField1(iprot thrift.Protocol) error {
  p.Assign = NewLoop()
  if err := p.Assign.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Assign), err)
  }
  return nil
}

func (p *LoopPatch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *LoopPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("LoopPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LoopPatch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := p.Assign.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Assign), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *LoopPatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *LoopPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var assignVal string
  if p.Assign == nil {
    assignVal = "<nil>"
  } else {
    assignVal = fmt.Sprintf("%v", p.Assign)
  }
  clearVal := fmt.Sprintf("%v", p.Clear)
  return fmt.Sprintf("LoopPatch({Assign:%s Clear:%s})", assignVal, clearVal)
}

