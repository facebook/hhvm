#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from thrift.py3.reflection cimport (
  MethodSpec as __MethodSpec,
  ArgumentSpec as __ArgumentSpec,
  NumberType as __NumberType,
)

import folly.iobuf as _fbthrift_iobuf


cimport module.types as _module_types


cdef __InterfaceSpec get_reflection__MyService(bint for_clients):
    cdef __InterfaceSpec spec = __InterfaceSpec._fbthrift_create(
        name="MyService",
        annotations={
        },
    )
    spec.add_method(
        __MethodSpec._fbthrift_create(
            name="hasDataById",
            arguments=(
                __ArgumentSpec._fbthrift_create(
                    name="id",
                    type=int,
                    kind=__NumberType.I64,
                    annotations={
                    },
                ),
            ),
            result=bool,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec._fbthrift_create(
            name="getDataById",
            arguments=(
                __ArgumentSpec._fbthrift_create(
                    name="id",
                    type=int,
                    kind=__NumberType.I64,
                    annotations={
                    },
                ),
            ),
            result=str,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec._fbthrift_create(
            name="putDataById",
            arguments=(
                __ArgumentSpec._fbthrift_create(
                    name="id",
                    type=int,
                    kind=__NumberType.I64,
                    annotations={
                    },
                ),
                __ArgumentSpec._fbthrift_create(
                    name="data",
                    type=str,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=None,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec._fbthrift_create(
            name="lobDataById",
            arguments=(
                __ArgumentSpec._fbthrift_create(
                    name="id",
                    type=int,
                    kind=__NumberType.I64,
                    annotations={
                    },
                ),
                __ArgumentSpec._fbthrift_create(
                    name="data",
                    type=str,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=None,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    return spec


cdef __InterfaceSpec get_reflection__MyServiceFast(bint for_clients):
    cdef __InterfaceSpec spec = __InterfaceSpec._fbthrift_create(
        name="MyServiceFast",
        annotations={
        },
    )
    spec.add_method(
        __MethodSpec._fbthrift_create(
            name="hasDataById",
            arguments=(
                __ArgumentSpec._fbthrift_create(
                    name="id",
                    type=int,
                    kind=__NumberType.I64,
                    annotations={
                    },
                ),
            ),
            result=bool,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
                """thread""": """eb""",            },
        )
    )
    spec.add_method(
        __MethodSpec._fbthrift_create(
            name="getDataById",
            arguments=(
                __ArgumentSpec._fbthrift_create(
                    name="id",
                    type=int,
                    kind=__NumberType.I64,
                    annotations={
                    },
                ),
            ),
            result=str,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
                """thread""": """eb""",            },
        )
    )
    spec.add_method(
        __MethodSpec._fbthrift_create(
            name="putDataById",
            arguments=(
                __ArgumentSpec._fbthrift_create(
                    name="id",
                    type=int,
                    kind=__NumberType.I64,
                    annotations={
                    },
                ),
                __ArgumentSpec._fbthrift_create(
                    name="data",
                    type=str,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=None,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
                """thread""": """eb""",            },
        )
    )
    spec.add_method(
        __MethodSpec._fbthrift_create(
            name="lobDataById",
            arguments=(
                __ArgumentSpec._fbthrift_create(
                    name="id",
                    type=int,
                    kind=__NumberType.I64,
                    annotations={
                    },
                ),
                __ArgumentSpec._fbthrift_create(
                    name="data",
                    type=str,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=None,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
                """thread""": """eb""",            },
        )
    )
    return spec


cdef __InterfaceSpec get_reflection__DbMixedStackArguments(bint for_clients):
    cdef __InterfaceSpec spec = __InterfaceSpec._fbthrift_create(
        name="DbMixedStackArguments",
        annotations={
        },
    )
    spec.add_method(
        __MethodSpec._fbthrift_create(
            name="getDataByKey0",
            arguments=(
                __ArgumentSpec._fbthrift_create(
                    name="key",
                    type=str,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=bytes,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
                """cpp.stack_arguments""": """0""",            },
        )
    )
    spec.add_method(
        __MethodSpec._fbthrift_create(
            name="getDataByKey1",
            arguments=(
                __ArgumentSpec._fbthrift_create(
                    name="key",
                    type=str,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=bytes,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    return spec
