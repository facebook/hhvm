/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/bidi/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include "thrift/compiler/test/fixtures/bidi/gen-cpp2/BiDiService.h"

#include <thrift/lib/cpp2/gen/service_tcc.h>

namespace cpp2 {
typedef apache::thrift::ThriftPresult<false> BiDiService_simple_pargs;
typedef apache::thrift::ThriftPResultBiDi<
    apache::thrift::ThriftPresult<true>,
    apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, ::apache::thrift::type_class::integral, ::std::int32_t*>>,
    apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, ::apache::thrift::type_class::integral, ::std::int16_t*>>
    > BiDiService_simple_presult;
typedef apache::thrift::ThriftPresult<false> BiDiService_response_pargs;
typedef apache::thrift::ThriftPResultBiDi<
    apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, ::apache::thrift::type_class::string, ::std::string*>>,
    apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, ::apache::thrift::type_class::integral, ::std::int32_t*>>,
    apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, ::apache::thrift::type_class::integral, ::std::int16_t*>>
    > BiDiService_response_presult;
//
// Service Methods
//

//
// Method 'simple'
//
template <typename ProtocolIn_, typename ProtocolOut_>
void BiDiServiceAsyncProcessor::setUpAndProcess_simple(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    apache::thrift::SerializedCompressedRequest&& serializedRequest,
    apache::thrift::Cpp2RequestContext* ctx,
    folly::EventBase* eb,
    [[maybe_unused]] apache::thrift::concurrency::ThreadManager* tm) {
  if (!setUpRequestProcessing(
          req, ctx, eb, tm, apache::thrift::RpcKind::BIDIRECTIONAL_STREAM, iface_)) {
    return;
  }
  auto scope = iface_->getRequestExecutionScope(
      ctx, apache::thrift::concurrency::NORMAL);
  ctx->setRequestExecutionScope(std::move(scope));
  processInThread(
      std::move(req),
      std::move(serializedRequest),
      ctx,
      eb,
      tm,
      apache::thrift::RpcKind::BIDIRECTIONAL_STREAM,
      &BiDiServiceAsyncProcessor::
          executeRequest_simple<ProtocolIn_, ProtocolOut_>,
      this);
}

template <typename ProtocolIn_, typename ProtocolOut_>
void BiDiServiceAsyncProcessor::executeRequest_simple(
    apache::thrift::ServerRequest&& serverRequest) {
  std::ignore = serverRequest;
  apache::thrift::detail::si::throw_app_exn_unimplemented("Not Implemented Yet");
}

template <class ProtocolIn_, class ProtocolOut_>
/* static */ apache::thrift::ResponseAndServerBiDiStreamFactory BiDiServiceAsyncProcessor::return_simple(
    apache::thrift::ContextStack* ctx,
    folly::Executor::KeepAlive<> executor,
    ::apache::thrift::StreamTransformation<::std::int32_t, ::std::int16_t>&& _return) {
  ProtocolOut_ prot;
  BiDiService_simple_presult::InitialResponsePResultType result;
  using SinkPResultType = BiDiService_simple_presult::SinkPResultType;
  using StreamPResultType = BiDiService_simple_presult::StreamPResultType;
  auto bidiStreamFactory = apache::thrift::detail::ap::encode_server_bidi_stream<
    ProtocolIn_, SinkPResultType, ProtocolOut_, StreamPResultType>(
      std::move(_return), std::move(executor));
  return {serializeResponse("simple", &prot, ctx, result), std::move(bidiStreamFactory)};
}

template <class ProtocolIn_, class ProtocolOut_>
void BiDiServiceAsyncProcessor::throw_wrapped_simple(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    [[maybe_unused]] int32_t protoSeqId,
    apache::thrift::ContextStack* ctx,
    folly::exception_wrapper ew,
    apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  {
    apache::thrift::detail::ap::process_throw_wrapped_handler_error<
        ProtocolOut_>(ew, std::move(req), reqCtx, ctx, "simple");
    return;
  }
}
//
// End of Method 'simple'
//

//
// Method 'response'
//
template <typename ProtocolIn_, typename ProtocolOut_>
void BiDiServiceAsyncProcessor::setUpAndProcess_response(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    apache::thrift::SerializedCompressedRequest&& serializedRequest,
    apache::thrift::Cpp2RequestContext* ctx,
    folly::EventBase* eb,
    [[maybe_unused]] apache::thrift::concurrency::ThreadManager* tm) {
  if (!setUpRequestProcessing(
          req, ctx, eb, tm, apache::thrift::RpcKind::BIDIRECTIONAL_STREAM, iface_)) {
    return;
  }
  auto scope = iface_->getRequestExecutionScope(
      ctx, apache::thrift::concurrency::NORMAL);
  ctx->setRequestExecutionScope(std::move(scope));
  processInThread(
      std::move(req),
      std::move(serializedRequest),
      ctx,
      eb,
      tm,
      apache::thrift::RpcKind::BIDIRECTIONAL_STREAM,
      &BiDiServiceAsyncProcessor::
          executeRequest_response<ProtocolIn_, ProtocolOut_>,
      this);
}

template <typename ProtocolIn_, typename ProtocolOut_>
void BiDiServiceAsyncProcessor::executeRequest_response(
    apache::thrift::ServerRequest&& serverRequest) {
  std::ignore = serverRequest;
  apache::thrift::detail::si::throw_app_exn_unimplemented("Not Implemented Yet");
}

template <class ProtocolIn_, class ProtocolOut_>
/* static */ apache::thrift::ResponseAndServerBiDiStreamFactory BiDiServiceAsyncProcessor::return_response(
    apache::thrift::ContextStack* ctx,
    folly::Executor::KeepAlive<> executor,
    ::apache::thrift::ResponseAndStreamTransformation<::std::string, ::std::int32_t, ::std::int16_t>&& _return) {
  ProtocolOut_ prot;
  BiDiService_response_presult::InitialResponsePResultType result;
  using SinkPResultType = BiDiService_response_presult::SinkPResultType;
  using StreamPResultType = BiDiService_response_presult::StreamPResultType;
  result.get<0>().value = const_cast<::apache::thrift::ResponseAndStreamTransformation<::std::string, ::std::int32_t, ::std::int16_t>::ResponseType*>(&_return.response);
  result.setIsSet(0, true);
  auto bidiStreamFactory = apache::thrift::detail::ap::encode_server_bidi_stream<
    ProtocolIn_, SinkPResultType, ProtocolOut_, StreamPResultType>(
      std::move(_return.transform), std::move(executor));
  return {serializeResponse("response", &prot, ctx, result), std::move(bidiStreamFactory)};
}

template <class ProtocolIn_, class ProtocolOut_>
void BiDiServiceAsyncProcessor::throw_wrapped_response(
    apache::thrift::ResponseChannelRequest::UniquePtr req,
    [[maybe_unused]] int32_t protoSeqId,
    apache::thrift::ContextStack* ctx,
    folly::exception_wrapper ew,
    apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  {
    apache::thrift::detail::ap::process_throw_wrapped_handler_error<
        ProtocolOut_>(ew, std::move(req), reqCtx, ctx, "response");
    return;
  }
}
//
// End of Method 'response'
//

//
// End of Service Methods
//

} // namespace cpp2
