/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/runtime-annotations/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/runtime-annotations/gen-cpp2/module_types.tcc"
#include "thrift/compiler/test/fixtures/runtime-annotations/gen-cpp2/module_constants.h"
#include "thrift/compiler/test/fixtures/runtime-annotations/gen-cpp2/module_data.h"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

[[maybe_unused]] static constexpr std::string_view kModuleName = "module";


namespace apache { namespace thrift {

const std::string_view TEnumTraits<::facebook::thrift::test::MyEnum>::__fbthrift_module_name_internal_do_not_use = kModuleName;
folly::Range<::facebook::thrift::test::MyEnum const*> const TEnumTraits<::facebook::thrift::test::MyEnum>::values = folly::range(TEnumDataStorage<::facebook::thrift::test::MyEnum>::values);
folly::Range<std::string_view const*> const TEnumTraits<::facebook::thrift::test::MyEnum>::names = folly::range(TEnumDataStorage<::facebook::thrift::test::MyEnum>::names);

bool TEnumTraits<::facebook::thrift::test::MyEnum>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::facebook::thrift::test::MyEnum>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

}} // apache::thrift



namespace facebook::thrift::test {

std::string_view MyAnnotation::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/MyAnnotation";
}

std::string_view MyAnnotation::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyAnnotation>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view MyAnnotation::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyAnnotation>::name;
}


MyAnnotation::MyAnnotation(apache::thrift::FragileConstructor) {}

void MyAnnotation::__fbthrift_clear() {
  // clear all fields
}

void MyAnnotation::__fbthrift_clear_terse_fields() {
}

bool MyAnnotation::__fbthrift_is_empty() const {
  return true;
}

bool MyAnnotation::operator==([[maybe_unused]] const MyAnnotation& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyAnnotation::operator<([[maybe_unused]] const MyAnnotation& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] MyAnnotation& a, [[maybe_unused]] MyAnnotation& b) {
  using ::std::swap;
}


} // namespace facebook::thrift::test


namespace facebook::thrift::test {

std::string_view MyStruct::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/MyStruct";
}

std::string_view MyStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStruct>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view MyStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStruct>::name;
}


MyStruct::MyStruct(apache::thrift::FragileConstructor, ::std::int32_t field__arg) :
    __fbthrift_field_field(std::move(field__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
}

void MyStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_field = ::std::int32_t();
  __isset = {};
}

void MyStruct::__fbthrift_clear_terse_fields() {
}

bool MyStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyStruct::operator==([[maybe_unused]] const MyStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyStruct::operator<([[maybe_unused]] const MyStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int32_t MyStruct::get_field() const {
  return __fbthrift_field_field;
}

::std::int32_t& MyStruct::set_field(::std::int32_t field_) {
  field_ref() = field_;
  return __fbthrift_field_field;
}

void swap([[maybe_unused]] MyStruct& a, [[maybe_unused]] MyStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_field, b.__fbthrift_field_field);
  swap(a.__isset, b.__isset);
}


} // namespace facebook::thrift::test


namespace facebook::thrift::test {

std::string_view MyUnion::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/MyUnion";
}

std::string_view MyUnion::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyUnion>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view MyUnion::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyUnion>::name;
}


MyUnion::MyUnion(apache::thrift::FragileConstructor, ::std::int32_t field__arg) :
    __fbthrift_field_field(std::move(field__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
}

void MyUnion::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_field = ::std::int32_t();
  __isset = {};
}

void MyUnion::__fbthrift_clear_terse_fields() {
}

bool MyUnion::__fbthrift_is_empty() const {
  return false;
}

bool MyUnion::operator==([[maybe_unused]] const MyUnion& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyUnion::operator<([[maybe_unused]] const MyUnion& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int32_t MyUnion::get_field() const {
  return __fbthrift_field_field;
}

::std::int32_t& MyUnion::set_field(::std::int32_t field_) {
  field_ref() = field_;
  return __fbthrift_field_field;
}

void swap([[maybe_unused]] MyUnion& a, [[maybe_unused]] MyUnion& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_field, b.__fbthrift_field_field);
  swap(a.__isset, b.__isset);
}


} // namespace facebook::thrift::test


namespace facebook::thrift::test {

std::string_view MyException::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/MyException";
}

std::string_view MyException::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyException>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view MyException::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyException>::name;
}

MyException::MyException(const MyException&) = default;
MyException& MyException::operator=(const MyException&) = default;
MyException::MyException() :
    __fbthrift_field_field() {
}


MyException::~MyException() {}

MyException::MyException([[maybe_unused]] MyException&& other) noexcept :
    __fbthrift_field_field(std::move(other.__fbthrift_field_field)),
    __isset(other.__isset) {
}

MyException& MyException::operator=([[maybe_unused]] MyException&& other) noexcept {
    this->__fbthrift_field_field = std::move(other.__fbthrift_field_field);
    __isset = other.__isset;
    return *this;
}


MyException::MyException(apache::thrift::FragileConstructor, ::std::int32_t field__arg) :
    __fbthrift_field_field(std::move(field__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
}

void MyException::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_field = ::std::int32_t();
  __isset = {};
}

void MyException::__fbthrift_clear_terse_fields() {
}

bool MyException::__fbthrift_is_empty() const {
  return false;
}

bool MyException::operator==([[maybe_unused]] const MyException& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyException::operator<([[maybe_unused]] const MyException& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int32_t MyException::get_field() const {
  return __fbthrift_field_field;
}

::std::int32_t& MyException::set_field(::std::int32_t field_) {
  field_ref() = field_;
  return __fbthrift_field_field;
}

void swap([[maybe_unused]] MyException& a, [[maybe_unused]] MyException& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_field, b.__fbthrift_field_field);
  swap(a.__isset, b.__isset);
}


} // namespace facebook::thrift::test

namespace facebook::thrift::test { namespace {
[[maybe_unused]] FOLLY_ERASE void validateAdapters() {
}
}} // namespace facebook::thrift::test
namespace apache::thrift::detail::annotation {
template<> const std::vector<std::any>& field_annotation_values<::facebook::thrift::test::MyStruct>(FieldId id) {
  switch (static_cast<int16_t>(id)) {
  case 1: {
    static const folly::Indestructible<std::vector<std::any>> ret = [] {
      std::vector<std::any> values;
      values.emplace_back(::apache::thrift::detail::make_structured_constant<::facebook::thrift::test::MyAnnotation>());
      return values;
    }();
    return *ret;
  }
  };

  folly::assume_unreachable();
}
template<> const std::vector<std::any>& struct_annotation_values<::facebook::thrift::test::MyStruct>() {
  static const folly::Indestructible<std::vector<std::any>> ret = [] {
    std::vector<std::any> values;
    values.emplace_back(::apache::thrift::detail::make_structured_constant<::facebook::thrift::test::MyAnnotation>());
    return values;
  }();
  return *ret;
}
template<> const std::vector<std::any>& field_annotation_values<::facebook::thrift::test::MyUnion>(FieldId id) {
  switch (static_cast<int16_t>(id)) {
  case 1: {
    static const folly::Indestructible<std::vector<std::any>> ret = [] {
      std::vector<std::any> values;
      values.emplace_back(::apache::thrift::detail::make_structured_constant<::facebook::thrift::test::MyAnnotation>());
      return values;
    }();
    return *ret;
  }
  };

  folly::assume_unreachable();
}
template<> const std::vector<std::any>& struct_annotation_values<::facebook::thrift::test::MyUnion>() {
  static const folly::Indestructible<std::vector<std::any>> ret = [] {
    std::vector<std::any> values;
    values.emplace_back(::apache::thrift::detail::make_structured_constant<::facebook::thrift::test::MyAnnotation>());
    return values;
  }();
  return *ret;
}
template<> const std::vector<std::any>& field_annotation_values<::facebook::thrift::test::MyException>(FieldId id) {
  switch (static_cast<int16_t>(id)) {
  case 1: {
    static const folly::Indestructible<std::vector<std::any>> ret = [] {
      std::vector<std::any> values;
      values.emplace_back(::apache::thrift::detail::make_structured_constant<::facebook::thrift::test::MyAnnotation>());
      return values;
    }();
    return *ret;
  }
  };

  folly::assume_unreachable();
}
template<> const std::vector<std::any>& struct_annotation_values<::facebook::thrift::test::MyException>() {
  static const folly::Indestructible<std::vector<std::any>> ret = [] {
    std::vector<std::any> values;
    values.emplace_back(::apache::thrift::detail::make_structured_constant<::facebook::thrift::test::MyAnnotation>());
    return values;
  }();
  return *ret;
}
}
