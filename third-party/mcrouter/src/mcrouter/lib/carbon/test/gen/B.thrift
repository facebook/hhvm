/*
 *  Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 *  This source code is licensed under the MIT license found in the LICENSE
 *  file in the root directory of this source tree.
 *
 */

/*
 *  THIS FILE IS AUTOGENERATED. DO NOT MODIFY IT; ALL CHANGES WILL BE LOST IN
 *  VAIN.
 *
 *  @generated
 */
include "mcrouter/lib/carbon/carbon.thrift"
include "mcrouter/lib/carbon/carbon_result.thrift"
include "thrift/annotation/cpp.thrift"
include "thrift/annotation/thrift.thrift"
include "mcrouter/lib/network/gen/Common.thrift"
include "graphene/ticket/if/ticket_rep.thrift"

cpp_include "<mcrouter/lib/carbon/CarbonProtocolReader.h>"

cpp_include "<mcrouter/lib/carbon/facebook/ThriftWrapper.h>"

namespace cpp2 carbon.test.B.thrift
namespace py3 carbon.test.B.thrift

@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct TestBRequest {
  1: carbon.IOBufKey key
  2: bool dummy2
  3: optional ticket_rep_TicketRep ticket
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct TestBReply {
  1: carbon_result.Result result
  2: i32 valInt32
}

@cpp.Type{name = "carbon::util::ThriftWrapperStruct<graphene::ticket::cpp2::TicketRep>"}
typedef ticket_rep.TicketRep ticket_rep_TicketRep