#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#

from __future__ import annotations

import __static__
import builtins


import typing as _typing
import types as _py_types

import apache.thrift.metadata.thrift_types as _fbthrift_metadata
import folly.iobuf as _fbthrift_iobuf
from fbcode.thrift.python.client import (
    AsyncClient as _fbthrift_python_AsyncClient,
    SyncClient as _fbthrift_python_SyncClient,
    Client as _fbthrift_python_Client,
)
from fbcode.thrift.python.client.omni_client import InteractionMethodPosition as _fbthrift_InteractionMethodPosition, FunctionQualifier as _fbthrift_FunctionQualifier
from fbcode.thrift.python.common import RpcOptions
import fbcode.thrift.python.mutable_containers as _fbthrift_python_mutable_containers
import fbcode.thrift.python.mutable_exceptions as _fbthrift_python_mutable_exceptions
import fbcode.thrift.python.mutable_types as _fbthrift_python_mutable_types
import fbcode.thrift.python.exceptions as _fbthrift_python_exceptions
import fbcode.thrift.python.types as _fbthrift_python_types
import module.thrift_mutable_types as _fbthrift__module__thrift_mutable_types
import module.thrift_metadata as _fbthrift__module__thrift_metadata

class SimpleService(_fbthrift_python_Client["SimpleService.Async", "SimpleService.Sync"]):
    annotations = _py_types.MappingProxyType({
    })
    @staticmethod
    def __get_thrift_name__() -> str:
        return "module.SimpleService"
    
    @staticmethod
    def __get_thrift_uri__() -> _typing.Optional[str]:
        return None
    
    @staticmethod
    def __get_thrift_unstructured_annotations_DEPRECATED__() -> _typing.Mapping[str, str]:
        return {
        }
    
    @staticmethod
    def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
        return _fbthrift__module__thrift_metadata.gen_metadata_service_SimpleService()
    
    class Async(_fbthrift_python_AsyncClient):
        @staticmethod
        def __get_thrift_name__() -> str:
            return "module.SimpleService"
    
        @staticmethod
        def __get_thrift_uri__() -> _typing.Optional[str]:
            return None
    
        @staticmethod
        def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
            return _fbthrift__module__thrift_metadata.gen_metadata_service_SimpleService()
    
        async def get_five(
            self,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "get_five",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_five_args(),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_five_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def add_five(
            self,
            num: builtins.int,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "add_five",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_add_five_args(
                    num=num,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_add_five_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def do_nothing(
            self,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> None:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "do_nothing",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_do_nothing_args(),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_do_nothing_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
    
        async def concat(
            self,
            first: builtins.str,
            second: builtins.str,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.str:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "concat",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_concat_args(
                    first=first,
                    second=second,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_concat_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def get_value(
            self,
            simple_struct: _fbthrift__module__thrift_mutable_types.SimpleStruct,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "get_value",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_value_args(
                    simple_struct=simple_struct,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_value_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def negate(
            self,
            input: builtins.bool,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.bool:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "negate",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_negate_args(
                    input=input,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_negate_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def tiny(
            self,
            input: builtins.int,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "tiny",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_tiny_args(
                    input=input,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_tiny_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def small(
            self,
            input: builtins.int,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "small",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_small_args(
                    input=input,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_small_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def big(
            self,
            input: builtins.int,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "big",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_big_args(
                    input=input,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_big_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def two(
            self,
            input: builtins.float,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.float:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "two",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_two_args(
                    input=input,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_two_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def expected_exception(
            self,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> None:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "expected_exception",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_expected_exception_args(),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_expected_exception_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # pyre-ignore[16]: `type(_fbthrift_resp)` has no attribute `_ex0__se`
            if (_fbthrift_ex := _fbthrift_resp._ex0__se) is not None:
                raise _fbthrift_ex
    
        async def unexpected_exception(
            self,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "unexpected_exception",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_unexpected_exception_args(),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_unexpected_exception_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def sum_i16_list(
            self,
            numbers: _fbthrift_python_mutable_containers.MutableList[builtins.int] | _fbthrift_python_mutable_types._ThriftListWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "sum_i16_list",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_sum_i16_list_args(
                    numbers=numbers,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_sum_i16_list_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def sum_i32_list(
            self,
            numbers: _fbthrift_python_mutable_containers.MutableList[builtins.int] | _fbthrift_python_mutable_types._ThriftListWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "sum_i32_list",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_sum_i32_list_args(
                    numbers=numbers,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_sum_i32_list_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def sum_i64_list(
            self,
            numbers: _fbthrift_python_mutable_containers.MutableList[builtins.int] | _fbthrift_python_mutable_types._ThriftListWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "sum_i64_list",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_sum_i64_list_args(
                    numbers=numbers,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_sum_i64_list_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def concat_many(
            self,
            words: _fbthrift_python_mutable_containers.MutableList[builtins.str] | _fbthrift_python_mutable_types._ThriftListWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.str:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "concat_many",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_concat_many_args(
                    words=words,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_concat_many_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def count_structs(
            self,
            items: _fbthrift_python_mutable_containers.MutableList[_fbthrift__module__thrift_mutable_types.SimpleStruct] | _fbthrift_python_mutable_types._ThriftListWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "count_structs",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_count_structs_args(
                    items=items,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_count_structs_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def sum_set(
            self,
            numbers: _fbthrift_python_mutable_containers.MutableSet[builtins.int] | _fbthrift_python_mutable_types._ThriftSetWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "sum_set",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_sum_set_args(
                    numbers=numbers,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_sum_set_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def contains_word(
            self,
            words: _fbthrift_python_mutable_containers.MutableSet[builtins.str] | _fbthrift_python_mutable_types._ThriftSetWrapper,
            word: builtins.str,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.bool:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "contains_word",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_contains_word_args(
                    words=words,
                    word=word,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_contains_word_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def get_map_value(
            self,
            words: _fbthrift_python_mutable_containers.MutableMap[builtins.str, builtins.str] | _fbthrift_python_mutable_types._ThriftMapWrapper,
            key: builtins.str,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.str:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "get_map_value",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_map_value_args(
                    words=words,
                    key=key,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_map_value_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def map_length(
            self,
            items: _fbthrift_python_mutable_containers.MutableMap[builtins.str, _fbthrift__module__thrift_mutable_types.SimpleStruct] | _fbthrift_python_mutable_types._ThriftMapWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "map_length",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_map_length_args(
                    items=items,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_map_length_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def sum_map_values(
            self,
            items: _fbthrift_python_mutable_containers.MutableMap[builtins.str, builtins.int] | _fbthrift_python_mutable_types._ThriftMapWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "sum_map_values",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_sum_map_values_args(
                    items=items,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_sum_map_values_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def complex_sum_i32(
            self,
            counter: _fbthrift__module__thrift_mutable_types.ComplexStruct,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "complex_sum_i32",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_complex_sum_i32_args(
                    counter=counter,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_complex_sum_i32_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def repeat_name(
            self,
            counter: _fbthrift__module__thrift_mutable_types.ComplexStruct,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.str:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "repeat_name",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_repeat_name_args(
                    counter=counter,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_repeat_name_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def get_struct(
            self,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift__module__thrift_mutable_types.SimpleStruct:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "get_struct",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_struct_args(),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_struct_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def fib(
            self,
            n: builtins.int,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift_python_mutable_containers.MutableList[builtins.int]:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "fib",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_fib_args(
                    n=n,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_fib_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def unique_words(
            self,
            words: _fbthrift_python_mutable_containers.MutableList[builtins.str] | _fbthrift_python_mutable_types._ThriftListWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift_python_mutable_containers.MutableSet[builtins.str]:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "unique_words",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_unique_words_args(
                    words=words,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_unique_words_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def words_count(
            self,
            words: _fbthrift_python_mutable_containers.MutableList[builtins.str] | _fbthrift_python_mutable_types._ThriftListWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift_python_mutable_containers.MutableMap[builtins.str, builtins.int]:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "words_count",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_words_count_args(
                    words=words,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_words_count_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def set_enum(
            self,
            in_enum: _fbthrift__module__thrift_mutable_types.AnEnum,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift__module__thrift_mutable_types.AnEnum:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "set_enum",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_set_enum_args(
                    in_enum=in_enum,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_set_enum_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def list_of_lists(
            self,
            num_lists: builtins.int,
            num_items: builtins.int,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift_python_mutable_containers.MutableList[_fbthrift_python_mutable_containers.MutableList[builtins.int]]:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "list_of_lists",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_list_of_lists_args(
                    num_lists=num_lists,
                    num_items=num_items,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_list_of_lists_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def word_character_frequency(
            self,
            sentence: builtins.str,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift_python_mutable_containers.MutableMap[builtins.str, _fbthrift_python_mutable_containers.MutableMap[builtins.str, builtins.int]]:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "word_character_frequency",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_word_character_frequency_args(
                    sentence=sentence,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_word_character_frequency_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def list_of_sets(
            self,
            some_words: builtins.str,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift_python_mutable_containers.MutableList[_fbthrift_python_mutable_containers.MutableSet[builtins.str]]:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "list_of_sets",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_list_of_sets_args(
                    some_words=some_words,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_list_of_sets_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def nested_map_argument(
            self,
            struct_map: _fbthrift_python_mutable_containers.MutableMap[builtins.str, _fbthrift_python_mutable_containers.MutableList[_fbthrift__module__thrift_mutable_types.SimpleStruct]] | _fbthrift_python_mutable_types._ThriftMapWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "nested_map_argument",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_nested_map_argument_args(
                    struct_map=struct_map,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_nested_map_argument_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def make_sentence(
            self,
            word_chars: _fbthrift_python_mutable_containers.MutableList[_fbthrift_python_mutable_containers.MutableList[builtins.str]] | _fbthrift_python_mutable_types._ThriftListWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.str:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "make_sentence",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_make_sentence_args(
                    word_chars=word_chars,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_make_sentence_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def get_union(
            self,
            sets: _fbthrift_python_mutable_containers.MutableList[_fbthrift_python_mutable_containers.MutableSet[builtins.int]] | _fbthrift_python_mutable_types._ThriftListWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift_python_mutable_containers.MutableSet[builtins.int]:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "get_union",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_union_args(
                    sets=sets,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_union_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def get_keys(
            self,
            string_map: _fbthrift_python_mutable_containers.MutableList[_fbthrift_python_mutable_containers.MutableMap[builtins.str, builtins.str]] | _fbthrift_python_mutable_types._ThriftListWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift_python_mutable_containers.MutableSet[builtins.str]:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "get_keys",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_keys_args(
                    string_map=string_map,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_keys_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def lookup_double(
            self,
            key: builtins.int,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.float:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "lookup_double",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_lookup_double_args(
                    key=key,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_lookup_double_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def retrieve_binary(
            self,
            something: builtins.bytes,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.bytes:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "retrieve_binary",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_retrieve_binary_args(
                    something=something,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_retrieve_binary_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def contain_binary(
            self,
            binaries: _fbthrift_python_mutable_containers.MutableList[builtins.bytes] | _fbthrift_python_mutable_types._ThriftListWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift_python_mutable_containers.MutableSet[builtins.bytes]:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "contain_binary",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_contain_binary_args(
                    binaries=binaries,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_contain_binary_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def contain_enum(
            self,
            the_enum: _fbthrift_python_mutable_containers.MutableList[_fbthrift__module__thrift_mutable_types.AnEnum] | _fbthrift_python_mutable_types._ThriftListWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift_python_mutable_containers.MutableList[_fbthrift__module__thrift_mutable_types.AnEnum]:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "contain_enum",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_contain_enum_args(
                    the_enum=the_enum,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_contain_enum_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def get_binary_union_struct(
            self,
            u: _fbthrift__module__thrift_mutable_types.BinaryUnion,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift__module__thrift_mutable_types.BinaryUnionStruct:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "get_binary_union_struct",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_binary_union_struct_args(
                    u=u,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_binary_union_struct_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def get_struct_hidden(
            self,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift__module__thrift_mutable_types.SimpleStruct:
            _fbthrift_resp = await self._send_request(
                "SimpleService",
                "get_struct_hidden",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_struct_hidden_args(),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_struct_hidden_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
    
    # pyre-ignore[4]: Missing annotation.
    get_five = Async.get_five
    # pyre-ignore[4]: Missing annotation.
    add_five = Async.add_five
    # pyre-ignore[4]: Missing annotation.
    do_nothing = Async.do_nothing
    # pyre-ignore[4]: Missing annotation.
    concat = Async.concat
    # pyre-ignore[4]: Missing annotation.
    get_value = Async.get_value
    # pyre-ignore[4]: Missing annotation.
    negate = Async.negate
    # pyre-ignore[4]: Missing annotation.
    tiny = Async.tiny
    # pyre-ignore[4]: Missing annotation.
    small = Async.small
    # pyre-ignore[4]: Missing annotation.
    big = Async.big
    # pyre-ignore[4]: Missing annotation.
    two = Async.two
    # pyre-ignore[4]: Missing annotation.
    expected_exception = Async.expected_exception
    # pyre-ignore[4]: Missing annotation.
    unexpected_exception = Async.unexpected_exception
    # pyre-ignore[4]: Missing annotation.
    sum_i16_list = Async.sum_i16_list
    # pyre-ignore[4]: Missing annotation.
    sum_i32_list = Async.sum_i32_list
    # pyre-ignore[4]: Missing annotation.
    sum_i64_list = Async.sum_i64_list
    # pyre-ignore[4]: Missing annotation.
    concat_many = Async.concat_many
    # pyre-ignore[4]: Missing annotation.
    count_structs = Async.count_structs
    # pyre-ignore[4]: Missing annotation.
    sum_set = Async.sum_set
    # pyre-ignore[4]: Missing annotation.
    contains_word = Async.contains_word
    # pyre-ignore[4]: Missing annotation.
    get_map_value = Async.get_map_value
    # pyre-ignore[4]: Missing annotation.
    map_length = Async.map_length
    # pyre-ignore[4]: Missing annotation.
    sum_map_values = Async.sum_map_values
    # pyre-ignore[4]: Missing annotation.
    complex_sum_i32 = Async.complex_sum_i32
    # pyre-ignore[4]: Missing annotation.
    repeat_name = Async.repeat_name
    # pyre-ignore[4]: Missing annotation.
    get_struct = Async.get_struct
    # pyre-ignore[4]: Missing annotation.
    fib = Async.fib
    # pyre-ignore[4]: Missing annotation.
    unique_words = Async.unique_words
    # pyre-ignore[4]: Missing annotation.
    words_count = Async.words_count
    # pyre-ignore[4]: Missing annotation.
    set_enum = Async.set_enum
    # pyre-ignore[4]: Missing annotation.
    list_of_lists = Async.list_of_lists
    # pyre-ignore[4]: Missing annotation.
    word_character_frequency = Async.word_character_frequency
    # pyre-ignore[4]: Missing annotation.
    list_of_sets = Async.list_of_sets
    # pyre-ignore[4]: Missing annotation.
    nested_map_argument = Async.nested_map_argument
    # pyre-ignore[4]: Missing annotation.
    make_sentence = Async.make_sentence
    # pyre-ignore[4]: Missing annotation.
    get_union = Async.get_union
    # pyre-ignore[4]: Missing annotation.
    get_keys = Async.get_keys
    # pyre-ignore[4]: Missing annotation.
    lookup_double = Async.lookup_double
    # pyre-ignore[4]: Missing annotation.
    retrieve_binary = Async.retrieve_binary
    # pyre-ignore[4]: Missing annotation.
    contain_binary = Async.contain_binary
    # pyre-ignore[4]: Missing annotation.
    contain_enum = Async.contain_enum
    # pyre-ignore[4]: Missing annotation.
    get_binary_union_struct = Async.get_binary_union_struct
    # pyre-ignore[4]: Missing annotation.
    get_struct_hidden = Async.get_struct_hidden
    async def __aenter__(self) -> "SimpleService.Async":
        raise RuntimeError("Do not use __aenter__ directly on client, use get_client instead.")
    async def __aexit__(self) -> None:
        raise RuntimeError("Do not use __aexit__ directly on client, use get_client instead.")
    
    class Sync(_fbthrift_python_SyncClient):
        @staticmethod
        def __get_thrift_name__() -> str:
            return "module.SimpleService"
    
        @staticmethod
        def __get_thrift_uri__() -> _typing.Optional[str]:
            return None
    
        @staticmethod
        def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
            return _fbthrift__module__thrift_metadata.gen_metadata_service_SimpleService()
    
        def get_five(
            self,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "get_five",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_five_args(),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_five_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def add_five(
            self,
            num: builtins.int,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "add_five",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_add_five_args(
                    num=num,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_add_five_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def do_nothing(
            self,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> None:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "do_nothing",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_do_nothing_args(),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_do_nothing_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
    
        def concat(
            self,
            first: builtins.str,
            second: builtins.str,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.str:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "concat",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_concat_args(
                    first=first,
                    second=second,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_concat_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def get_value(
            self,
            simple_struct: _fbthrift__module__thrift_mutable_types.SimpleStruct,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "get_value",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_value_args(
                    simple_struct=simple_struct,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_value_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def negate(
            self,
            input: builtins.bool,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.bool:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "negate",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_negate_args(
                    input=input,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_negate_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def tiny(
            self,
            input: builtins.int,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "tiny",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_tiny_args(
                    input=input,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_tiny_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def small(
            self,
            input: builtins.int,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "small",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_small_args(
                    input=input,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_small_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def big(
            self,
            input: builtins.int,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "big",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_big_args(
                    input=input,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_big_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def two(
            self,
            input: builtins.float,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.float:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "two",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_two_args(
                    input=input,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_two_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def expected_exception(
            self,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> None:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "expected_exception",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_expected_exception_args(),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_expected_exception_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # pyre-ignore[16]: `type(_fbthrift_resp)` has no attribute `_ex0__se`
            if (_fbthrift_ex := _fbthrift_resp._ex0__se) is not None:
                raise _fbthrift_ex
    
        def unexpected_exception(
            self,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "unexpected_exception",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_unexpected_exception_args(),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_unexpected_exception_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def sum_i16_list(
            self,
            numbers: _fbthrift_python_mutable_containers.MutableList[builtins.int] | _fbthrift_python_mutable_types._ThriftListWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "sum_i16_list",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_sum_i16_list_args(
                    numbers=numbers,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_sum_i16_list_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def sum_i32_list(
            self,
            numbers: _fbthrift_python_mutable_containers.MutableList[builtins.int] | _fbthrift_python_mutable_types._ThriftListWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "sum_i32_list",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_sum_i32_list_args(
                    numbers=numbers,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_sum_i32_list_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def sum_i64_list(
            self,
            numbers: _fbthrift_python_mutable_containers.MutableList[builtins.int] | _fbthrift_python_mutable_types._ThriftListWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "sum_i64_list",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_sum_i64_list_args(
                    numbers=numbers,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_sum_i64_list_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def concat_many(
            self,
            words: _fbthrift_python_mutable_containers.MutableList[builtins.str] | _fbthrift_python_mutable_types._ThriftListWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.str:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "concat_many",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_concat_many_args(
                    words=words,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_concat_many_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def count_structs(
            self,
            items: _fbthrift_python_mutable_containers.MutableList[_fbthrift__module__thrift_mutable_types.SimpleStruct] | _fbthrift_python_mutable_types._ThriftListWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "count_structs",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_count_structs_args(
                    items=items,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_count_structs_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def sum_set(
            self,
            numbers: _fbthrift_python_mutable_containers.MutableSet[builtins.int] | _fbthrift_python_mutable_types._ThriftSetWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "sum_set",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_sum_set_args(
                    numbers=numbers,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_sum_set_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def contains_word(
            self,
            words: _fbthrift_python_mutable_containers.MutableSet[builtins.str] | _fbthrift_python_mutable_types._ThriftSetWrapper,
            word: builtins.str,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.bool:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "contains_word",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_contains_word_args(
                    words=words,
                    word=word,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_contains_word_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def get_map_value(
            self,
            words: _fbthrift_python_mutable_containers.MutableMap[builtins.str, builtins.str] | _fbthrift_python_mutable_types._ThriftMapWrapper,
            key: builtins.str,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.str:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "get_map_value",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_map_value_args(
                    words=words,
                    key=key,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_map_value_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def map_length(
            self,
            items: _fbthrift_python_mutable_containers.MutableMap[builtins.str, _fbthrift__module__thrift_mutable_types.SimpleStruct] | _fbthrift_python_mutable_types._ThriftMapWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "map_length",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_map_length_args(
                    items=items,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_map_length_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def sum_map_values(
            self,
            items: _fbthrift_python_mutable_containers.MutableMap[builtins.str, builtins.int] | _fbthrift_python_mutable_types._ThriftMapWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "sum_map_values",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_sum_map_values_args(
                    items=items,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_sum_map_values_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def complex_sum_i32(
            self,
            counter: _fbthrift__module__thrift_mutable_types.ComplexStruct,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "complex_sum_i32",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_complex_sum_i32_args(
                    counter=counter,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_complex_sum_i32_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def repeat_name(
            self,
            counter: _fbthrift__module__thrift_mutable_types.ComplexStruct,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.str:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "repeat_name",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_repeat_name_args(
                    counter=counter,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_repeat_name_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def get_struct(
            self,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift__module__thrift_mutable_types.SimpleStruct:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "get_struct",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_struct_args(),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_struct_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def fib(
            self,
            n: builtins.int,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift_python_mutable_containers.MutableList[builtins.int]:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "fib",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_fib_args(
                    n=n,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_fib_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def unique_words(
            self,
            words: _fbthrift_python_mutable_containers.MutableList[builtins.str] | _fbthrift_python_mutable_types._ThriftListWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift_python_mutable_containers.MutableSet[builtins.str]:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "unique_words",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_unique_words_args(
                    words=words,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_unique_words_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def words_count(
            self,
            words: _fbthrift_python_mutable_containers.MutableList[builtins.str] | _fbthrift_python_mutable_types._ThriftListWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift_python_mutable_containers.MutableMap[builtins.str, builtins.int]:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "words_count",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_words_count_args(
                    words=words,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_words_count_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def set_enum(
            self,
            in_enum: _fbthrift__module__thrift_mutable_types.AnEnum,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift__module__thrift_mutable_types.AnEnum:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "set_enum",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_set_enum_args(
                    in_enum=in_enum,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_set_enum_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def list_of_lists(
            self,
            num_lists: builtins.int,
            num_items: builtins.int,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift_python_mutable_containers.MutableList[_fbthrift_python_mutable_containers.MutableList[builtins.int]]:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "list_of_lists",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_list_of_lists_args(
                    num_lists=num_lists,
                    num_items=num_items,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_list_of_lists_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def word_character_frequency(
            self,
            sentence: builtins.str,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift_python_mutable_containers.MutableMap[builtins.str, _fbthrift_python_mutable_containers.MutableMap[builtins.str, builtins.int]]:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "word_character_frequency",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_word_character_frequency_args(
                    sentence=sentence,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_word_character_frequency_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def list_of_sets(
            self,
            some_words: builtins.str,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift_python_mutable_containers.MutableList[_fbthrift_python_mutable_containers.MutableSet[builtins.str]]:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "list_of_sets",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_list_of_sets_args(
                    some_words=some_words,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_list_of_sets_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def nested_map_argument(
            self,
            struct_map: _fbthrift_python_mutable_containers.MutableMap[builtins.str, _fbthrift_python_mutable_containers.MutableList[_fbthrift__module__thrift_mutable_types.SimpleStruct]] | _fbthrift_python_mutable_types._ThriftMapWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "nested_map_argument",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_nested_map_argument_args(
                    struct_map=struct_map,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_nested_map_argument_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def make_sentence(
            self,
            word_chars: _fbthrift_python_mutable_containers.MutableList[_fbthrift_python_mutable_containers.MutableList[builtins.str]] | _fbthrift_python_mutable_types._ThriftListWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.str:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "make_sentence",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_make_sentence_args(
                    word_chars=word_chars,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_make_sentence_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def get_union(
            self,
            sets: _fbthrift_python_mutable_containers.MutableList[_fbthrift_python_mutable_containers.MutableSet[builtins.int]] | _fbthrift_python_mutable_types._ThriftListWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift_python_mutable_containers.MutableSet[builtins.int]:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "get_union",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_union_args(
                    sets=sets,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_union_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def get_keys(
            self,
            string_map: _fbthrift_python_mutable_containers.MutableList[_fbthrift_python_mutable_containers.MutableMap[builtins.str, builtins.str]] | _fbthrift_python_mutable_types._ThriftListWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift_python_mutable_containers.MutableSet[builtins.str]:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "get_keys",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_keys_args(
                    string_map=string_map,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_keys_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def lookup_double(
            self,
            key: builtins.int,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.float:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "lookup_double",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_lookup_double_args(
                    key=key,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_lookup_double_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def retrieve_binary(
            self,
            something: builtins.bytes,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.bytes:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "retrieve_binary",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_retrieve_binary_args(
                    something=something,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_retrieve_binary_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def contain_binary(
            self,
            binaries: _fbthrift_python_mutable_containers.MutableList[builtins.bytes] | _fbthrift_python_mutable_types._ThriftListWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift_python_mutable_containers.MutableSet[builtins.bytes]:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "contain_binary",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_contain_binary_args(
                    binaries=binaries,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_contain_binary_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def contain_enum(
            self,
            the_enum: _fbthrift_python_mutable_containers.MutableList[_fbthrift__module__thrift_mutable_types.AnEnum] | _fbthrift_python_mutable_types._ThriftListWrapper,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift_python_mutable_containers.MutableList[_fbthrift__module__thrift_mutable_types.AnEnum]:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "contain_enum",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_contain_enum_args(
                    the_enum=the_enum,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_contain_enum_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def get_binary_union_struct(
            self,
            u: _fbthrift__module__thrift_mutable_types.BinaryUnion,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift__module__thrift_mutable_types.BinaryUnionStruct:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "get_binary_union_struct",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_binary_union_struct_args(
                    u=u,),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_binary_union_struct_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        def get_struct_hidden(
            self,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift__module__thrift_mutable_types.SimpleStruct:
            _fbthrift_resp = self._send_request(
                "SimpleService",
                "get_struct_hidden",
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_struct_hidden_args(),
                _fbthrift__module__thrift_mutable_types._fbthrift_SimpleService_get_struct_hidden_result,
                uri_or_name="SimpleService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )


class DerivedService(_fbthrift_python_Client["DerivedService.Async", "DerivedService.Sync"]):
    annotations = _py_types.MappingProxyType({
            """bar""": """1""",
            """foo""": """\"\"\"""",
    })
    @staticmethod
    def __get_thrift_name__() -> str:
        return "module.DerivedService"
    
    @staticmethod
    def __get_thrift_uri__() -> _typing.Optional[str]:
        return None
    
    @staticmethod
    def __get_thrift_unstructured_annotations_DEPRECATED__() -> _typing.Mapping[str, str]:
        return {
            """bar""": """1""",
            """foo""": """\"\"\"""",
        }
    
    @staticmethod
    def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
        return _fbthrift__module__thrift_metadata.gen_metadata_service_DerivedService()
    
    class Async(SimpleService.Async):
        @staticmethod
        def __get_thrift_name__() -> str:
            return "module.DerivedService"
    
        @staticmethod
        def __get_thrift_uri__() -> _typing.Optional[str]:
            return None
    
        @staticmethod
        def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
            return _fbthrift__module__thrift_metadata.gen_metadata_service_DerivedService()
    
        async def get_six(
            self,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = await self._send_request(
                "DerivedService",
                "get_six",
                _fbthrift__module__thrift_mutable_types._fbthrift_DerivedService_get_six_args(),
                _fbthrift__module__thrift_mutable_types._fbthrift_DerivedService_get_six_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="DerivedService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
    
    # pyre-ignore[4]: Missing annotation.
    get_six = Async.get_six
    async def __aenter__(self) -> "DerivedService.Async":
        raise RuntimeError("Do not use __aenter__ directly on client, use get_client instead.")
    async def __aexit__(self) -> None:
        raise RuntimeError("Do not use __aexit__ directly on client, use get_client instead.")
    
    class Sync(SimpleService.Sync):
        @staticmethod
        def __get_thrift_name__() -> str:
            return "module.DerivedService"
    
        @staticmethod
        def __get_thrift_uri__() -> _typing.Optional[str]:
            return None
    
        @staticmethod
        def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
            return _fbthrift__module__thrift_metadata.gen_metadata_service_DerivedService()
    
        def get_six(
            self,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = self._send_request(
                "DerivedService",
                "get_six",
                _fbthrift__module__thrift_mutable_types._fbthrift_DerivedService_get_six_args(),
                _fbthrift__module__thrift_mutable_types._fbthrift_DerivedService_get_six_result,
                uri_or_name="DerivedService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )


class RederivedService(_fbthrift_python_Client["RederivedService.Async", "RederivedService.Sync"]):
    annotations = _py_types.MappingProxyType({
    })
    @staticmethod
    def __get_thrift_name__() -> str:
        return "module.RederivedService"
    
    @staticmethod
    def __get_thrift_uri__() -> _typing.Optional[str]:
        return None
    
    @staticmethod
    def __get_thrift_unstructured_annotations_DEPRECATED__() -> _typing.Mapping[str, str]:
        return {
        }
    
    @staticmethod
    def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
        return _fbthrift__module__thrift_metadata.gen_metadata_service_RederivedService()
    
    class Async(DerivedService.Async):
        @staticmethod
        def __get_thrift_name__() -> str:
            return "module.RederivedService"
    
        @staticmethod
        def __get_thrift_uri__() -> _typing.Optional[str]:
            return None
    
        @staticmethod
        def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
            return _fbthrift__module__thrift_metadata.gen_metadata_service_RederivedService()
    
        async def get_seven(
            self,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = await self._send_request(
                "RederivedService",
                "get_seven",
                _fbthrift__module__thrift_mutable_types._fbthrift_RederivedService_get_seven_args(),
                _fbthrift__module__thrift_mutable_types._fbthrift_RederivedService_get_seven_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="RederivedService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
    
    # pyre-ignore[4]: Missing annotation.
    get_seven = Async.get_seven
    async def __aenter__(self) -> "RederivedService.Async":
        raise RuntimeError("Do not use __aenter__ directly on client, use get_client instead.")
    async def __aexit__(self) -> None:
        raise RuntimeError("Do not use __aexit__ directly on client, use get_client instead.")
    
    class Sync(DerivedService.Sync):
        @staticmethod
        def __get_thrift_name__() -> str:
            return "module.RederivedService"
    
        @staticmethod
        def __get_thrift_uri__() -> _typing.Optional[str]:
            return None
    
        @staticmethod
        def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
            return _fbthrift__module__thrift_metadata.gen_metadata_service_RederivedService()
    
        def get_seven(
            self,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> builtins.int:
            _fbthrift_resp = self._send_request(
                "RederivedService",
                "get_seven",
                _fbthrift__module__thrift_mutable_types._fbthrift_RederivedService_get_seven_args(),
                _fbthrift__module__thrift_mutable_types._fbthrift_RederivedService_get_seven_result,
                uri_or_name="RederivedService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )

