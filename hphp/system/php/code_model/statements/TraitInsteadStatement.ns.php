<?php
// Copyright 2004-present Facebook. All Rights Reserved.
// This file is @generated by
// fbcode/hphp/facebook/tools/code_model/Generate.sh

namespace HH\CodeModel {

/**
 *  traitName::methodName instead otherTraitNames;
 */
class TraitInsteadStatement /*implements ITraitInsteadStatement*/ {
  use Statement;
  use Node;

  private /*?string*/ $traitName;
  private /*?string*/ $methodName;
  private /*?Vector<string>*/ $otherTraitNames;

  /**
   *  traitName::methodName instead otherTraitNames;
   */
  public function getTraitName() /*: string*/ {
    if ($this->traitName === null) {
      throw new \Exception("TraitName is not initialized");
    }
    return $this->traitName;
  }
  /**
   *  traitName::methodName instead otherTraitNames;
   */
  public function setTraitName(/*string*/ $value) /*: this*/ {
    $this->traitName = $value;
    return $this;
  }

  /**
   *  traitName::methodName instead otherTraitNames;
   */
  public function getMethodName() /*: string*/ {
    if ($this->methodName === null) {
      throw new \Exception("MethodName is not initialized");
    }
    return $this->methodName;
  }
  /**
   *  traitName::methodName instead otherTraitNames;
   */
  public function setMethodName(/*string*/ $value) /*: this*/ {
    $this->methodName = $value;
    return $this;
  }

  /**
   *  traitName::methodName instead otherTraitNames;
   */
  public function getOtherTraitNames() /*: Vector<string>*/ {
    if ($this->otherTraitNames === null) {
      $this->otherTraitNames = Vector {};
    }
    return $this->otherTraitNames;
  }
  /**
   *  traitName::methodName instead otherTraitNames;
   */
  public function setOtherTraitNames(/*Vector<string>*/ $value) /*: this*/ {
    $this->otherTraitNames = $value;
    return $this;
  }

  /**
   * Returns $visitor->visitTraitInsteadStatement($this) if
   * such a method exists on $visitor.
   * Otherwise returns $visitor->visitStatement($this) if
   * such a method exists on $visitor.
   * Otherwise returns $visitor->visitNode($this) if
   */
  public function accept(/*mixed*/ $visitor) /*: mixed*/ {
    if (method_exists($visitor, "visitTraitInsteadStatement")) {
      // UNSAFE
      return $visitor->visitTraitInsteadStatement($this);
    } else if (method_exists($visitor, "visitStatement")) {
      // UNSAFE
      return $visitor->visitStatement($this);
    } else {
      return $visitor->visitNode($this);
    }
  }

  /**
   * Yields a list of nodes that are children of this node.
   * A node has exactly one parent, so doing a depth
   * first traversal of a node graph using getChildren will
   * traverse a spanning tree.
   */
  public function getChildren() /*: Continuation<INode>*/ {
    // UNSAFE
    yield break;
  }
}
}
