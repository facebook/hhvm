.hh_file 1;
.main {
  NullUninit
  NullUninit
  NullUninit
  FPushFuncD 0 "main"
  FCall <> 0 1 "" - "" ""
  PopC

  String "DONE\n"
  Print
  RetC
}

.class [unique final persistent] Cls1 {
  .default_ctor;
  .method [public unique] foobaz($a, $b, $c, $d, $e) {
    CGetL $c
    RetC
  }
}

.class [unique final persistent] Cls2 {
  .default_ctor;
  .method [public unique] foobaz($a, $b, $c, $d, $e) {
    CGetL $b
    RetC
  }
}

.function test($obj, $type, $x) {
  CGetL $type
  JmpZ cls2

  CGetL $obj
  AssertRATStk 0 Obj=Cls1
  NullUninit
  NullUninit
  CGetL $x
  CGetL $x
  CGetL $x
  CGetL $x
  CGetL $x
  FCallObjMethodD <> 5 1 "" - "Cls1" NullThrows "foobaz"
  Jmp end

cls2:
  CGetL $obj
  AssertRATStk 0 Obj=Cls2
  NullUninit
  NullUninit
  CGetL $x
  CGetL $x
  CGetL $x
  CGetL $x
  CGetL $x
  FCallObjMethodD <> 5 1 "" - "Cls2" NullThrows "foobaz"
  Jmp end

end:
  RetC
}

.function test_outer($type, $x) {
  CGetL $type
  JmpZ cls2

  NewObjD "Cls1"
  Dup
  NullUninit
  NullUninit
  FCallCtor <> 0 1 "" - ""
  PopC
  LockObj
  SetL $obj
  PopC
  NullUninit
  NullUninit
  NullUninit
  CGetL $obj
  CGetL $type
  CGetL $x
  FPushFuncD 3 "test"
  FCall <> 3 1 "" - "" ""
  RetC

cls2:
  NewObjD "Cls2"
  Dup
  NullUninit
  NullUninit
  FCallCtor <> 0 1 "" - ""
  PopC
  LockObj
  SetL $obj
  PopC
  NullUninit
  NullUninit
  NullUninit
  CGetL $obj
  CGetL $type
  CGetL $x
  FPushFuncD 3 "test"
  FCall <> 3 1 "" - "" ""
  RetC
}

.function loop($type, $total) {
  Int 0
  SetL $count
  PopC

header:
  CGetL $count
  CGetL $total
  Lt
  JmpZ end

  NullUninit
  NullUninit
  NullUninit
  CGetL $type
  Int 1
  FPushFuncD 2 "test_outer"
  FCall <> 2 1 "" - "" ""
  PopC

  IncDecL $count PreInc
  PopC
  Jmp header

end:
  True
  RetC
}

.function main() {
  NullUninit
  NullUninit
  NullUninit
  False
  Int 40
  FPushFuncD 2 "loop"
  FCall <> 2 1 "" - "" ""
  PopC

  NullUninit
  NullUninit
  NullUninit
  True
  Int 100
  FPushFuncD 2 "loop"
  FCall <> 2 1 "" - "" ""
  RetC
}
