/**
 * Autogenerated by Thrift for 
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/client_h.h>

#include "thrift/compiler/test/fixtures/method_decorators/gen-cpp2/module_types.h"





namespace apache { namespace thrift {
  class Cpp2RequestContext;
  namespace detail { namespace ac { struct ClientRequestContext; }}
  namespace transport { class THeader; }
}}

namespace cpp2 {
class DecoratedService;
} // namespace cpp2
namespace apache::thrift {

namespace detail {

template<>
struct ServiceMethodTypesFootprint<::cpp2::DecoratedService> {
  // The types that appear in the definitions of service methods.
  // e.g. if it appears as a type of an input, output, exception sink or stream
  // parameter of a client stub, it appears here,
  using TypesInMethods = folly::tag_t<
  void,
  ::std::string,
  ::std::int64_t,
  ::std::vector<::std::int64_t>,
  ::cpp2::Request,
  ::cpp2::Response>;
};
} // namespace detail

template <>
class Client<::cpp2::DecoratedService> : public apache::thrift::GeneratedAsyncClient {
  static_assert(!folly::is_detected_v<::apache::thrift::detail::st::detect_complete, ::cpp2::DecoratedService>, "Definition collision with service tag. Either rename the Thrift service using @cpp.Name annotation or rename the conflicting C++ type.");
 public:
  using apache::thrift::GeneratedAsyncClient::GeneratedAsyncClient;

  std::string_view getServiceName() const noexcept override {
    return "DecoratedService";
  }


  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "noop"} */
  virtual void noop(std::unique_ptr<apache::thrift::RequestCallback> callback);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "noop"} */
  virtual void noop(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
 protected:
  void fbthrift_serialize_and_send_noop(apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::ContextStack* contextStack, apache::thrift::RequestClientCallback::Ptr callback, bool stealRpcOptions = false);
 public:

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "noop"} */
  virtual void sync_noop();
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "noop"} */
  virtual void sync_noop(apache::thrift::RpcOptions& rpcOptions);

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "noop"} */
  virtual folly::Future<folly::Unit> future_noop();
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "noop"} */
  virtual folly::SemiFuture<folly::Unit> semifuture_noop();
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "noop"} */
  virtual folly::Future<folly::Unit> future_noop(apache::thrift::RpcOptions& rpcOptions);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "noop"} */
  virtual folly::SemiFuture<folly::Unit> semifuture_noop(apache::thrift::RpcOptions& rpcOptions);

#if FOLLY_HAS_COROUTINES
#if __clang__
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "noop"} */
  template <int = 0>
  folly::coro::Task<void> co_noop() {
    return co_noop<false>(nullptr);
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "noop"} */
  template <int = 0>
  folly::coro::Task<void> co_noop(apache::thrift::RpcOptions& rpcOptions) {
    return co_noop<true>(&rpcOptions);
  }
#else
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "noop"} */
  folly::coro::Task<void> co_noop() {
    co_await folly::coro::detachOnCancel(semifuture_noop());
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "noop"} */
  folly::coro::Task<void> co_noop(apache::thrift::RpcOptions& rpcOptions) {
    co_await folly::coro::detachOnCancel(semifuture_noop(rpcOptions));
  }
#endif
 private:
  template <bool hasRpcOptions>
  folly::coro::Task<void> co_noop(apache::thrift::RpcOptions* rpcOptions) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientCoroCallback<false> callback(&returnState, co_await folly::coro::co_current_executor);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto [ctx, header] = noopCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static apache::thrift::RpcOptions* defaultRpcOptions = new apache::thrift::RpcOptions();
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if (ctx != nullptr) {
      auto argsAsRefs = std::tie();
      ctx->processClientInterceptorsOnRequest(apache::thrift::ClientInterceptorOnRequestArguments(argsAsRefs), header.get(), hasRpcOptions ? *rpcOptions : *defaultRpcOptions).throwUnlessValue();
    }
    if constexpr (hasRpcOptions) {
      fbthrift_serialize_and_send_noop(*rpcOptions, header, ctx.get(), std::move(wrappedCallback));
    } else {
      fbthrift_serialize_and_send_noop(*defaultRpcOptions, header, ctx.get(), std::move(wrappedCallback));
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (ctx != nullptr) {
      ctx->processClientInterceptorsOnResponse(returnState.header()).throwUnlessValue();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::move(ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header()) {
        auto* rheader = returnState.header();
        if (!rheader->getHeaders().empty()) {
          rpcOptions->setReadHeaders(rheader->releaseHeaders());
        }
        rpcOptions->setRoutingData(rheader->releaseRoutingData());
      }
    };
    if (auto ew = recv_wrapped_noop(returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "noop"} */
  virtual void noop(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback);


  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "noop"} */
  static folly::exception_wrapper recv_wrapped_noop(::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "noop"} */
  static void recv_noop(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "noop"} */
  virtual void recv_instance_noop(::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "noop"} */
  virtual folly::exception_wrapper recv_instance_wrapped_noop(::apache::thrift::ClientReceiveState& state);
 private:
  apache::thrift::SerializedRequest fbthrift_serialize_noop(const RpcOptions& rpcOptions, apache::thrift::transport::THeader& header, apache::thrift::ContextStack* contextStack);
  template <typename RpcOptions>
  void fbthrift_send_noop(apache::thrift::SerializedRequest&& request, RpcOptions&& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::RequestClientCallback::Ptr callback, std::unique_ptr<folly::IOBuf> interceptorFrameworkMetadata);
  std::pair<::apache::thrift::ContextStack::UniquePtr, std::shared_ptr<::apache::thrift::transport::THeader>> noopCtx(apache::thrift::RpcOptions* rpcOptions);
  template <typename CallbackType>
  folly::SemiFuture<folly::Unit> fbthrift_semifuture_noop(apache::thrift::RpcOptions& rpcOptions);
 public:
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "echo"} */
  virtual void echo(std::unique_ptr<apache::thrift::RequestCallback> callback, const ::std::string& p_text);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "echo"} */
  virtual void echo(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const ::std::string& p_text);
 protected:
  void fbthrift_serialize_and_send_echo(apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::ContextStack* contextStack, apache::thrift::RequestClientCallback::Ptr callback, const ::std::string& p_text, bool stealRpcOptions = false);
 public:

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "echo"} */
  virtual void sync_echo(::std::string& _return, const ::std::string& p_text);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "echo"} */
  virtual void sync_echo(apache::thrift::RpcOptions& rpcOptions, ::std::string& _return, const ::std::string& p_text);

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "echo"} */
  virtual folly::Future<::std::string> future_echo(const ::std::string& p_text);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "echo"} */
  virtual folly::SemiFuture<::std::string> semifuture_echo(const ::std::string& p_text);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "echo"} */
  virtual folly::Future<::std::string> future_echo(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_text);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "echo"} */
  virtual folly::SemiFuture<::std::string> semifuture_echo(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_text);

#if FOLLY_HAS_COROUTINES
#if __clang__
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "echo"} */
  template <int = 0>
  folly::coro::Task<::std::string> co_echo(const ::std::string& p_text) {
    return co_echo<false>(nullptr, p_text);
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "echo"} */
  template <int = 0>
  folly::coro::Task<::std::string> co_echo(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_text) {
    return co_echo<true>(&rpcOptions, p_text);
  }
#else
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "echo"} */
  folly::coro::Task<::std::string> co_echo(const ::std::string& p_text) {
    co_return co_await folly::coro::detachOnCancel(semifuture_echo(p_text));
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "echo"} */
  folly::coro::Task<::std::string> co_echo(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_text) {
    co_return co_await folly::coro::detachOnCancel(semifuture_echo(rpcOptions, p_text));
  }
#endif
 private:
  template <bool hasRpcOptions>
  folly::coro::Task<::std::string> co_echo(apache::thrift::RpcOptions* rpcOptions, const ::std::string& p_text) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientCoroCallback<false> callback(&returnState, co_await folly::coro::co_current_executor);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto [ctx, header] = echoCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static apache::thrift::RpcOptions* defaultRpcOptions = new apache::thrift::RpcOptions();
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if (ctx != nullptr) {
      auto argsAsRefs = std::tie(p_text);
      ctx->processClientInterceptorsOnRequest(apache::thrift::ClientInterceptorOnRequestArguments(argsAsRefs), header.get(), hasRpcOptions ? *rpcOptions : *defaultRpcOptions).throwUnlessValue();
    }
    if constexpr (hasRpcOptions) {
      fbthrift_serialize_and_send_echo(*rpcOptions, header, ctx.get(), std::move(wrappedCallback), p_text);
    } else {
      fbthrift_serialize_and_send_echo(*defaultRpcOptions, header, ctx.get(), std::move(wrappedCallback), p_text);
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (ctx != nullptr) {
      ctx->processClientInterceptorsOnResponse(returnState.header()).throwUnlessValue();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::move(ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header()) {
        auto* rheader = returnState.header();
        if (!rheader->getHeaders().empty()) {
          rpcOptions->setReadHeaders(rheader->releaseHeaders());
        }
        rpcOptions->setRoutingData(rheader->releaseRoutingData());
      }
    };
    ::std::string _return;
    if (auto ew = recv_wrapped_echo(_return, returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
    co_return _return;
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "echo"} */
  virtual void echo(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const ::std::string& p_text);


  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "echo"} */
  static folly::exception_wrapper recv_wrapped_echo(::std::string& _return, ::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "echo"} */
  static void recv_echo(::std::string& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "echo"} */
  virtual void recv_instance_echo(::std::string& _return, ::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "echo"} */
  virtual folly::exception_wrapper recv_instance_wrapped_echo(::std::string& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  apache::thrift::SerializedRequest fbthrift_serialize_echo(const RpcOptions& rpcOptions, apache::thrift::transport::THeader& header, apache::thrift::ContextStack* contextStack, const ::std::string& p_text);
  template <typename RpcOptions>
  void fbthrift_send_echo(apache::thrift::SerializedRequest&& request, RpcOptions&& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::RequestClientCallback::Ptr callback, std::unique_ptr<folly::IOBuf> interceptorFrameworkMetadata);
  std::pair<::apache::thrift::ContextStack::UniquePtr, std::shared_ptr<::apache::thrift::transport::THeader>> echoCtx(apache::thrift::RpcOptions* rpcOptions);
  template <typename CallbackType>
  folly::SemiFuture<::std::string> fbthrift_semifuture_echo(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_text);
 public:
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "increment"} */
  virtual void increment(std::unique_ptr<apache::thrift::RequestCallback> callback, ::std::int64_t p_num);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "increment"} */
  virtual void increment(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, ::std::int64_t p_num);
 protected:
  void fbthrift_serialize_and_send_increment(apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::ContextStack* contextStack, apache::thrift::RequestClientCallback::Ptr callback, ::std::int64_t p_num, bool stealRpcOptions = false);
 public:

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "increment"} */
  virtual ::std::int64_t sync_increment(::std::int64_t p_num);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "increment"} */
  virtual ::std::int64_t sync_increment(apache::thrift::RpcOptions& rpcOptions, ::std::int64_t p_num);

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "increment"} */
  virtual folly::Future<::std::int64_t> future_increment(::std::int64_t p_num);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "increment"} */
  virtual folly::SemiFuture<::std::int64_t> semifuture_increment(::std::int64_t p_num);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "increment"} */
  virtual folly::Future<::std::int64_t> future_increment(apache::thrift::RpcOptions& rpcOptions, ::std::int64_t p_num);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "increment"} */
  virtual folly::SemiFuture<::std::int64_t> semifuture_increment(apache::thrift::RpcOptions& rpcOptions, ::std::int64_t p_num);

#if FOLLY_HAS_COROUTINES
#if __clang__
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "increment"} */
  template <int = 0>
  folly::coro::Task<::std::int64_t> co_increment(::std::int64_t p_num) {
    return co_increment<false>(nullptr, p_num);
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "increment"} */
  template <int = 0>
  folly::coro::Task<::std::int64_t> co_increment(apache::thrift::RpcOptions& rpcOptions, ::std::int64_t p_num) {
    return co_increment<true>(&rpcOptions, p_num);
  }
#else
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "increment"} */
  folly::coro::Task<::std::int64_t> co_increment(::std::int64_t p_num) {
    co_return co_await folly::coro::detachOnCancel(semifuture_increment(p_num));
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "increment"} */
  folly::coro::Task<::std::int64_t> co_increment(apache::thrift::RpcOptions& rpcOptions, ::std::int64_t p_num) {
    co_return co_await folly::coro::detachOnCancel(semifuture_increment(rpcOptions, p_num));
  }
#endif
 private:
  template <bool hasRpcOptions>
  folly::coro::Task<::std::int64_t> co_increment(apache::thrift::RpcOptions* rpcOptions, ::std::int64_t p_num) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientCoroCallback<false> callback(&returnState, co_await folly::coro::co_current_executor);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto [ctx, header] = incrementCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static apache::thrift::RpcOptions* defaultRpcOptions = new apache::thrift::RpcOptions();
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if (ctx != nullptr) {
      auto argsAsRefs = std::tie(p_num);
      ctx->processClientInterceptorsOnRequest(apache::thrift::ClientInterceptorOnRequestArguments(argsAsRefs), header.get(), hasRpcOptions ? *rpcOptions : *defaultRpcOptions).throwUnlessValue();
    }
    if constexpr (hasRpcOptions) {
      fbthrift_serialize_and_send_increment(*rpcOptions, header, ctx.get(), std::move(wrappedCallback), p_num);
    } else {
      fbthrift_serialize_and_send_increment(*defaultRpcOptions, header, ctx.get(), std::move(wrappedCallback), p_num);
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (ctx != nullptr) {
      ctx->processClientInterceptorsOnResponse(returnState.header()).throwUnlessValue();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::move(ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header()) {
        auto* rheader = returnState.header();
        if (!rheader->getHeaders().empty()) {
          rpcOptions->setReadHeaders(rheader->releaseHeaders());
        }
        rpcOptions->setRoutingData(rheader->releaseRoutingData());
      }
    };
    ::std::int64_t _return;
    if (auto ew = recv_wrapped_increment(_return, returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
    co_return _return;
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "increment"} */
  virtual void increment(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, ::std::int64_t p_num);


  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "increment"} */
  static folly::exception_wrapper recv_wrapped_increment(::std::int64_t& _return, ::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "increment"} */
  static ::std::int64_t recv_increment(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "increment"} */
  virtual ::std::int64_t recv_instance_increment(::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "increment"} */
  virtual folly::exception_wrapper recv_instance_wrapped_increment(::std::int64_t& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  apache::thrift::SerializedRequest fbthrift_serialize_increment(const RpcOptions& rpcOptions, apache::thrift::transport::THeader& header, apache::thrift::ContextStack* contextStack, ::std::int64_t p_num);
  template <typename RpcOptions>
  void fbthrift_send_increment(apache::thrift::SerializedRequest&& request, RpcOptions&& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::RequestClientCallback::Ptr callback, std::unique_ptr<folly::IOBuf> interceptorFrameworkMetadata);
  std::pair<::apache::thrift::ContextStack::UniquePtr, std::shared_ptr<::apache::thrift::transport::THeader>> incrementCtx(apache::thrift::RpcOptions* rpcOptions);
  template <typename CallbackType>
  folly::SemiFuture<::std::int64_t> fbthrift_semifuture_increment(apache::thrift::RpcOptions& rpcOptions, ::std::int64_t p_num);
 public:
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "sum"} */
  virtual void sum(std::unique_ptr<apache::thrift::RequestCallback> callback, const ::std::vector<::std::int64_t>& p_nums);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "sum"} */
  virtual void sum(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const ::std::vector<::std::int64_t>& p_nums);
 protected:
  void fbthrift_serialize_and_send_sum(apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::ContextStack* contextStack, apache::thrift::RequestClientCallback::Ptr callback, const ::std::vector<::std::int64_t>& p_nums, bool stealRpcOptions = false);
 public:

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "sum"} */
  virtual ::std::int64_t sync_sum(const ::std::vector<::std::int64_t>& p_nums);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "sum"} */
  virtual ::std::int64_t sync_sum(apache::thrift::RpcOptions& rpcOptions, const ::std::vector<::std::int64_t>& p_nums);

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "sum"} */
  virtual folly::Future<::std::int64_t> future_sum(const ::std::vector<::std::int64_t>& p_nums);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "sum"} */
  virtual folly::SemiFuture<::std::int64_t> semifuture_sum(const ::std::vector<::std::int64_t>& p_nums);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "sum"} */
  virtual folly::Future<::std::int64_t> future_sum(apache::thrift::RpcOptions& rpcOptions, const ::std::vector<::std::int64_t>& p_nums);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "sum"} */
  virtual folly::SemiFuture<::std::int64_t> semifuture_sum(apache::thrift::RpcOptions& rpcOptions, const ::std::vector<::std::int64_t>& p_nums);

#if FOLLY_HAS_COROUTINES
#if __clang__
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "sum"} */
  template <int = 0>
  folly::coro::Task<::std::int64_t> co_sum(const ::std::vector<::std::int64_t>& p_nums) {
    return co_sum<false>(nullptr, p_nums);
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "sum"} */
  template <int = 0>
  folly::coro::Task<::std::int64_t> co_sum(apache::thrift::RpcOptions& rpcOptions, const ::std::vector<::std::int64_t>& p_nums) {
    return co_sum<true>(&rpcOptions, p_nums);
  }
#else
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "sum"} */
  folly::coro::Task<::std::int64_t> co_sum(const ::std::vector<::std::int64_t>& p_nums) {
    co_return co_await folly::coro::detachOnCancel(semifuture_sum(p_nums));
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "sum"} */
  folly::coro::Task<::std::int64_t> co_sum(apache::thrift::RpcOptions& rpcOptions, const ::std::vector<::std::int64_t>& p_nums) {
    co_return co_await folly::coro::detachOnCancel(semifuture_sum(rpcOptions, p_nums));
  }
#endif
 private:
  template <bool hasRpcOptions>
  folly::coro::Task<::std::int64_t> co_sum(apache::thrift::RpcOptions* rpcOptions, const ::std::vector<::std::int64_t>& p_nums) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientCoroCallback<false> callback(&returnState, co_await folly::coro::co_current_executor);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto [ctx, header] = sumCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static apache::thrift::RpcOptions* defaultRpcOptions = new apache::thrift::RpcOptions();
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if (ctx != nullptr) {
      auto argsAsRefs = std::tie(p_nums);
      ctx->processClientInterceptorsOnRequest(apache::thrift::ClientInterceptorOnRequestArguments(argsAsRefs), header.get(), hasRpcOptions ? *rpcOptions : *defaultRpcOptions).throwUnlessValue();
    }
    if constexpr (hasRpcOptions) {
      fbthrift_serialize_and_send_sum(*rpcOptions, header, ctx.get(), std::move(wrappedCallback), p_nums);
    } else {
      fbthrift_serialize_and_send_sum(*defaultRpcOptions, header, ctx.get(), std::move(wrappedCallback), p_nums);
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (ctx != nullptr) {
      ctx->processClientInterceptorsOnResponse(returnState.header()).throwUnlessValue();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::move(ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header()) {
        auto* rheader = returnState.header();
        if (!rheader->getHeaders().empty()) {
          rpcOptions->setReadHeaders(rheader->releaseHeaders());
        }
        rpcOptions->setRoutingData(rheader->releaseRoutingData());
      }
    };
    ::std::int64_t _return;
    if (auto ew = recv_wrapped_sum(_return, returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
    co_return _return;
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "sum"} */
  virtual void sum(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const ::std::vector<::std::int64_t>& p_nums);


  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "sum"} */
  static folly::exception_wrapper recv_wrapped_sum(::std::int64_t& _return, ::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "sum"} */
  static ::std::int64_t recv_sum(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "sum"} */
  virtual ::std::int64_t recv_instance_sum(::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "sum"} */
  virtual folly::exception_wrapper recv_instance_wrapped_sum(::std::int64_t& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  apache::thrift::SerializedRequest fbthrift_serialize_sum(const RpcOptions& rpcOptions, apache::thrift::transport::THeader& header, apache::thrift::ContextStack* contextStack, const ::std::vector<::std::int64_t>& p_nums);
  template <typename RpcOptions>
  void fbthrift_send_sum(apache::thrift::SerializedRequest&& request, RpcOptions&& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::RequestClientCallback::Ptr callback, std::unique_ptr<folly::IOBuf> interceptorFrameworkMetadata);
  std::pair<::apache::thrift::ContextStack::UniquePtr, std::shared_ptr<::apache::thrift::transport::THeader>> sumCtx(apache::thrift::RpcOptions* rpcOptions);
  template <typename CallbackType>
  folly::SemiFuture<::std::int64_t> fbthrift_semifuture_sum(apache::thrift::RpcOptions& rpcOptions, const ::std::vector<::std::int64_t>& p_nums);
 public:
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "withStruct"} */
  virtual void withStruct(std::unique_ptr<apache::thrift::RequestCallback> callback, const ::cpp2::Request& p_request);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "withStruct"} */
  virtual void withStruct(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const ::cpp2::Request& p_request);
 protected:
  void fbthrift_serialize_and_send_withStruct(apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::ContextStack* contextStack, apache::thrift::RequestClientCallback::Ptr callback, const ::cpp2::Request& p_request, bool stealRpcOptions = false);
 public:

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "withStruct"} */
  virtual void sync_withStruct(::cpp2::Response& _return, const ::cpp2::Request& p_request);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "withStruct"} */
  virtual void sync_withStruct(apache::thrift::RpcOptions& rpcOptions, ::cpp2::Response& _return, const ::cpp2::Request& p_request);

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "withStruct"} */
  virtual folly::Future<::cpp2::Response> future_withStruct(const ::cpp2::Request& p_request);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "withStruct"} */
  virtual folly::SemiFuture<::cpp2::Response> semifuture_withStruct(const ::cpp2::Request& p_request);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "withStruct"} */
  virtual folly::Future<::cpp2::Response> future_withStruct(apache::thrift::RpcOptions& rpcOptions, const ::cpp2::Request& p_request);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "withStruct"} */
  virtual folly::SemiFuture<::cpp2::Response> semifuture_withStruct(apache::thrift::RpcOptions& rpcOptions, const ::cpp2::Request& p_request);

#if FOLLY_HAS_COROUTINES
#if __clang__
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "withStruct"} */
  template <int = 0>
  folly::coro::Task<::cpp2::Response> co_withStruct(const ::cpp2::Request& p_request) {
    return co_withStruct<false>(nullptr, p_request);
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "withStruct"} */
  template <int = 0>
  folly::coro::Task<::cpp2::Response> co_withStruct(apache::thrift::RpcOptions& rpcOptions, const ::cpp2::Request& p_request) {
    return co_withStruct<true>(&rpcOptions, p_request);
  }
#else
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "withStruct"} */
  folly::coro::Task<::cpp2::Response> co_withStruct(const ::cpp2::Request& p_request) {
    co_return co_await folly::coro::detachOnCancel(semifuture_withStruct(p_request));
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "withStruct"} */
  folly::coro::Task<::cpp2::Response> co_withStruct(apache::thrift::RpcOptions& rpcOptions, const ::cpp2::Request& p_request) {
    co_return co_await folly::coro::detachOnCancel(semifuture_withStruct(rpcOptions, p_request));
  }
#endif
 private:
  template <bool hasRpcOptions>
  folly::coro::Task<::cpp2::Response> co_withStruct(apache::thrift::RpcOptions* rpcOptions, const ::cpp2::Request& p_request) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientCoroCallback<false> callback(&returnState, co_await folly::coro::co_current_executor);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto [ctx, header] = withStructCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static apache::thrift::RpcOptions* defaultRpcOptions = new apache::thrift::RpcOptions();
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if (ctx != nullptr) {
      auto argsAsRefs = std::tie(p_request);
      ctx->processClientInterceptorsOnRequest(apache::thrift::ClientInterceptorOnRequestArguments(argsAsRefs), header.get(), hasRpcOptions ? *rpcOptions : *defaultRpcOptions).throwUnlessValue();
    }
    if constexpr (hasRpcOptions) {
      fbthrift_serialize_and_send_withStruct(*rpcOptions, header, ctx.get(), std::move(wrappedCallback), p_request);
    } else {
      fbthrift_serialize_and_send_withStruct(*defaultRpcOptions, header, ctx.get(), std::move(wrappedCallback), p_request);
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (ctx != nullptr) {
      ctx->processClientInterceptorsOnResponse(returnState.header()).throwUnlessValue();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::move(ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header()) {
        auto* rheader = returnState.header();
        if (!rheader->getHeaders().empty()) {
          rpcOptions->setReadHeaders(rheader->releaseHeaders());
        }
        rpcOptions->setRoutingData(rheader->releaseRoutingData());
      }
    };
    ::cpp2::Response _return;
    if (auto ew = recv_wrapped_withStruct(_return, returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
    co_return _return;
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "withStruct"} */
  virtual void withStruct(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const ::cpp2::Request& p_request);


  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "withStruct"} */
  static folly::exception_wrapper recv_wrapped_withStruct(::cpp2::Response& _return, ::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "withStruct"} */
  static void recv_withStruct(::cpp2::Response& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "withStruct"} */
  virtual void recv_instance_withStruct(::cpp2::Response& _return, ::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "withStruct"} */
  virtual folly::exception_wrapper recv_instance_wrapped_withStruct(::cpp2::Response& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  apache::thrift::SerializedRequest fbthrift_serialize_withStruct(const RpcOptions& rpcOptions, apache::thrift::transport::THeader& header, apache::thrift::ContextStack* contextStack, const ::cpp2::Request& p_request);
  template <typename RpcOptions>
  void fbthrift_send_withStruct(apache::thrift::SerializedRequest&& request, RpcOptions&& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::RequestClientCallback::Ptr callback, std::unique_ptr<folly::IOBuf> interceptorFrameworkMetadata);
  std::pair<::apache::thrift::ContextStack::UniquePtr, std::shared_ptr<::apache::thrift::transport::THeader>> withStructCtx(apache::thrift::RpcOptions* rpcOptions);
  template <typename CallbackType>
  folly::SemiFuture<::cpp2::Response> fbthrift_semifuture_withStruct(apache::thrift::RpcOptions& rpcOptions, const ::cpp2::Request& p_request);
 public:
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "multiParam"} */
  virtual void multiParam(std::unique_ptr<apache::thrift::RequestCallback> callback, const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "multiParam"} */
  virtual void multiParam(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request);
 protected:
  void fbthrift_serialize_and_send_multiParam(apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::ContextStack* contextStack, apache::thrift::RequestClientCallback::Ptr callback, const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request, bool stealRpcOptions = false);
 public:

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "multiParam"} */
  virtual void sync_multiParam(::cpp2::Response& _return, const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "multiParam"} */
  virtual void sync_multiParam(apache::thrift::RpcOptions& rpcOptions, ::cpp2::Response& _return, const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request);

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "multiParam"} */
  virtual folly::Future<::cpp2::Response> future_multiParam(const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "multiParam"} */
  virtual folly::SemiFuture<::cpp2::Response> semifuture_multiParam(const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "multiParam"} */
  virtual folly::Future<::cpp2::Response> future_multiParam(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "multiParam"} */
  virtual folly::SemiFuture<::cpp2::Response> semifuture_multiParam(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request);

#if FOLLY_HAS_COROUTINES
#if __clang__
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "multiParam"} */
  template <int = 0>
  folly::coro::Task<::cpp2::Response> co_multiParam(const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request) {
    return co_multiParam<false>(nullptr, p_text, p_num, p_request);
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "multiParam"} */
  template <int = 0>
  folly::coro::Task<::cpp2::Response> co_multiParam(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request) {
    return co_multiParam<true>(&rpcOptions, p_text, p_num, p_request);
  }
#else
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "multiParam"} */
  folly::coro::Task<::cpp2::Response> co_multiParam(const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request) {
    co_return co_await folly::coro::detachOnCancel(semifuture_multiParam(p_text, p_num, p_request));
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "multiParam"} */
  folly::coro::Task<::cpp2::Response> co_multiParam(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request) {
    co_return co_await folly::coro::detachOnCancel(semifuture_multiParam(rpcOptions, p_text, p_num, p_request));
  }
#endif
 private:
  template <bool hasRpcOptions>
  folly::coro::Task<::cpp2::Response> co_multiParam(apache::thrift::RpcOptions* rpcOptions, const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientCoroCallback<false> callback(&returnState, co_await folly::coro::co_current_executor);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto [ctx, header] = multiParamCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static apache::thrift::RpcOptions* defaultRpcOptions = new apache::thrift::RpcOptions();
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if (ctx != nullptr) {
      auto argsAsRefs = std::tie(p_text, p_num, p_request);
      ctx->processClientInterceptorsOnRequest(apache::thrift::ClientInterceptorOnRequestArguments(argsAsRefs), header.get(), hasRpcOptions ? *rpcOptions : *defaultRpcOptions).throwUnlessValue();
    }
    if constexpr (hasRpcOptions) {
      fbthrift_serialize_and_send_multiParam(*rpcOptions, header, ctx.get(), std::move(wrappedCallback), p_text, p_num, p_request);
    } else {
      fbthrift_serialize_and_send_multiParam(*defaultRpcOptions, header, ctx.get(), std::move(wrappedCallback), p_text, p_num, p_request);
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (ctx != nullptr) {
      ctx->processClientInterceptorsOnResponse(returnState.header()).throwUnlessValue();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::move(ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header()) {
        auto* rheader = returnState.header();
        if (!rheader->getHeaders().empty()) {
          rpcOptions->setReadHeaders(rheader->releaseHeaders());
        }
        rpcOptions->setRoutingData(rheader->releaseRoutingData());
      }
    };
    ::cpp2::Response _return;
    if (auto ew = recv_wrapped_multiParam(_return, returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
    co_return _return;
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "multiParam"} */
  virtual void multiParam(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request);


  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "multiParam"} */
  static folly::exception_wrapper recv_wrapped_multiParam(::cpp2::Response& _return, ::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "multiParam"} */
  static void recv_multiParam(::cpp2::Response& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "multiParam"} */
  virtual void recv_instance_multiParam(::cpp2::Response& _return, ::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService", "function": "multiParam"} */
  virtual folly::exception_wrapper recv_instance_wrapped_multiParam(::cpp2::Response& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  apache::thrift::SerializedRequest fbthrift_serialize_multiParam(const RpcOptions& rpcOptions, apache::thrift::transport::THeader& header, apache::thrift::ContextStack* contextStack, const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request);
  template <typename RpcOptions>
  void fbthrift_send_multiParam(apache::thrift::SerializedRequest&& request, RpcOptions&& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::RequestClientCallback::Ptr callback, std::unique_ptr<folly::IOBuf> interceptorFrameworkMetadata);
  std::pair<::apache::thrift::ContextStack::UniquePtr, std::shared_ptr<::apache::thrift::transport::THeader>> multiParamCtx(apache::thrift::RpcOptions* rpcOptions);
  template <typename CallbackType>
  folly::SemiFuture<::cpp2::Response> fbthrift_semifuture_multiParam(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request);
 public:
};

} // namespace apache::thrift

namespace cpp2 {
using DecoratedServiceAsyncClient [[deprecated("Use apache::thrift::Client<DecoratedService> instead")]] = ::apache::thrift::Client<DecoratedService>;
} // namespace cpp2

namespace cpp2 {
class UndecoratedService;
} // namespace cpp2
namespace apache::thrift {

namespace detail {

template<>
struct ServiceMethodTypesFootprint<::cpp2::UndecoratedService> {
  // The types that appear in the definitions of service methods.
  // e.g. if it appears as a type of an input, output, exception sink or stream
  // parameter of a client stub, it appears here,
  using TypesInMethods = folly::tag_t<
  void,
  ::std::string,
  ::std::int64_t,
  ::std::vector<::std::int64_t>,
  ::cpp2::Request,
  ::cpp2::Response>;
};
} // namespace detail

template <>
class Client<::cpp2::UndecoratedService> : public apache::thrift::GeneratedAsyncClient {
  static_assert(!folly::is_detected_v<::apache::thrift::detail::st::detect_complete, ::cpp2::UndecoratedService>, "Definition collision with service tag. Either rename the Thrift service using @cpp.Name annotation or rename the conflicting C++ type.");
 public:
  using apache::thrift::GeneratedAsyncClient::GeneratedAsyncClient;

  std::string_view getServiceName() const noexcept override {
    return "UndecoratedService";
  }


  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "noop"} */
  virtual void noop(std::unique_ptr<apache::thrift::RequestCallback> callback);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "noop"} */
  virtual void noop(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
 protected:
  void fbthrift_serialize_and_send_noop(apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::ContextStack* contextStack, apache::thrift::RequestClientCallback::Ptr callback, bool stealRpcOptions = false);
 public:

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "noop"} */
  virtual void sync_noop();
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "noop"} */
  virtual void sync_noop(apache::thrift::RpcOptions& rpcOptions);

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "noop"} */
  virtual folly::Future<folly::Unit> future_noop();
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "noop"} */
  virtual folly::SemiFuture<folly::Unit> semifuture_noop();
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "noop"} */
  virtual folly::Future<folly::Unit> future_noop(apache::thrift::RpcOptions& rpcOptions);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "noop"} */
  virtual folly::SemiFuture<folly::Unit> semifuture_noop(apache::thrift::RpcOptions& rpcOptions);

#if FOLLY_HAS_COROUTINES
#if __clang__
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "noop"} */
  template <int = 0>
  folly::coro::Task<void> co_noop() {
    return co_noop<false>(nullptr);
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "noop"} */
  template <int = 0>
  folly::coro::Task<void> co_noop(apache::thrift::RpcOptions& rpcOptions) {
    return co_noop<true>(&rpcOptions);
  }
#else
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "noop"} */
  folly::coro::Task<void> co_noop() {
    co_await folly::coro::detachOnCancel(semifuture_noop());
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "noop"} */
  folly::coro::Task<void> co_noop(apache::thrift::RpcOptions& rpcOptions) {
    co_await folly::coro::detachOnCancel(semifuture_noop(rpcOptions));
  }
#endif
 private:
  template <bool hasRpcOptions>
  folly::coro::Task<void> co_noop(apache::thrift::RpcOptions* rpcOptions) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientCoroCallback<false> callback(&returnState, co_await folly::coro::co_current_executor);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto [ctx, header] = noopCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static apache::thrift::RpcOptions* defaultRpcOptions = new apache::thrift::RpcOptions();
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if (ctx != nullptr) {
      auto argsAsRefs = std::tie();
      ctx->processClientInterceptorsOnRequest(apache::thrift::ClientInterceptorOnRequestArguments(argsAsRefs), header.get(), hasRpcOptions ? *rpcOptions : *defaultRpcOptions).throwUnlessValue();
    }
    if constexpr (hasRpcOptions) {
      fbthrift_serialize_and_send_noop(*rpcOptions, header, ctx.get(), std::move(wrappedCallback));
    } else {
      fbthrift_serialize_and_send_noop(*defaultRpcOptions, header, ctx.get(), std::move(wrappedCallback));
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (ctx != nullptr) {
      ctx->processClientInterceptorsOnResponse(returnState.header()).throwUnlessValue();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::move(ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header()) {
        auto* rheader = returnState.header();
        if (!rheader->getHeaders().empty()) {
          rpcOptions->setReadHeaders(rheader->releaseHeaders());
        }
        rpcOptions->setRoutingData(rheader->releaseRoutingData());
      }
    };
    if (auto ew = recv_wrapped_noop(returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "noop"} */
  virtual void noop(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback);


  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "noop"} */
  static folly::exception_wrapper recv_wrapped_noop(::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "noop"} */
  static void recv_noop(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "noop"} */
  virtual void recv_instance_noop(::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "noop"} */
  virtual folly::exception_wrapper recv_instance_wrapped_noop(::apache::thrift::ClientReceiveState& state);
 private:
  apache::thrift::SerializedRequest fbthrift_serialize_noop(const RpcOptions& rpcOptions, apache::thrift::transport::THeader& header, apache::thrift::ContextStack* contextStack);
  template <typename RpcOptions>
  void fbthrift_send_noop(apache::thrift::SerializedRequest&& request, RpcOptions&& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::RequestClientCallback::Ptr callback, std::unique_ptr<folly::IOBuf> interceptorFrameworkMetadata);
  std::pair<::apache::thrift::ContextStack::UniquePtr, std::shared_ptr<::apache::thrift::transport::THeader>> noopCtx(apache::thrift::RpcOptions* rpcOptions);
  template <typename CallbackType>
  folly::SemiFuture<folly::Unit> fbthrift_semifuture_noop(apache::thrift::RpcOptions& rpcOptions);
 public:
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "echo"} */
  virtual void echo(std::unique_ptr<apache::thrift::RequestCallback> callback, const ::std::string& p_text);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "echo"} */
  virtual void echo(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const ::std::string& p_text);
 protected:
  void fbthrift_serialize_and_send_echo(apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::ContextStack* contextStack, apache::thrift::RequestClientCallback::Ptr callback, const ::std::string& p_text, bool stealRpcOptions = false);
 public:

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "echo"} */
  virtual void sync_echo(::std::string& _return, const ::std::string& p_text);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "echo"} */
  virtual void sync_echo(apache::thrift::RpcOptions& rpcOptions, ::std::string& _return, const ::std::string& p_text);

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "echo"} */
  virtual folly::Future<::std::string> future_echo(const ::std::string& p_text);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "echo"} */
  virtual folly::SemiFuture<::std::string> semifuture_echo(const ::std::string& p_text);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "echo"} */
  virtual folly::Future<::std::string> future_echo(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_text);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "echo"} */
  virtual folly::SemiFuture<::std::string> semifuture_echo(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_text);

#if FOLLY_HAS_COROUTINES
#if __clang__
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "echo"} */
  template <int = 0>
  folly::coro::Task<::std::string> co_echo(const ::std::string& p_text) {
    return co_echo<false>(nullptr, p_text);
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "echo"} */
  template <int = 0>
  folly::coro::Task<::std::string> co_echo(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_text) {
    return co_echo<true>(&rpcOptions, p_text);
  }
#else
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "echo"} */
  folly::coro::Task<::std::string> co_echo(const ::std::string& p_text) {
    co_return co_await folly::coro::detachOnCancel(semifuture_echo(p_text));
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "echo"} */
  folly::coro::Task<::std::string> co_echo(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_text) {
    co_return co_await folly::coro::detachOnCancel(semifuture_echo(rpcOptions, p_text));
  }
#endif
 private:
  template <bool hasRpcOptions>
  folly::coro::Task<::std::string> co_echo(apache::thrift::RpcOptions* rpcOptions, const ::std::string& p_text) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientCoroCallback<false> callback(&returnState, co_await folly::coro::co_current_executor);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto [ctx, header] = echoCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static apache::thrift::RpcOptions* defaultRpcOptions = new apache::thrift::RpcOptions();
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if (ctx != nullptr) {
      auto argsAsRefs = std::tie(p_text);
      ctx->processClientInterceptorsOnRequest(apache::thrift::ClientInterceptorOnRequestArguments(argsAsRefs), header.get(), hasRpcOptions ? *rpcOptions : *defaultRpcOptions).throwUnlessValue();
    }
    if constexpr (hasRpcOptions) {
      fbthrift_serialize_and_send_echo(*rpcOptions, header, ctx.get(), std::move(wrappedCallback), p_text);
    } else {
      fbthrift_serialize_and_send_echo(*defaultRpcOptions, header, ctx.get(), std::move(wrappedCallback), p_text);
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (ctx != nullptr) {
      ctx->processClientInterceptorsOnResponse(returnState.header()).throwUnlessValue();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::move(ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header()) {
        auto* rheader = returnState.header();
        if (!rheader->getHeaders().empty()) {
          rpcOptions->setReadHeaders(rheader->releaseHeaders());
        }
        rpcOptions->setRoutingData(rheader->releaseRoutingData());
      }
    };
    ::std::string _return;
    if (auto ew = recv_wrapped_echo(_return, returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
    co_return _return;
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "echo"} */
  virtual void echo(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const ::std::string& p_text);


  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "echo"} */
  static folly::exception_wrapper recv_wrapped_echo(::std::string& _return, ::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "echo"} */
  static void recv_echo(::std::string& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "echo"} */
  virtual void recv_instance_echo(::std::string& _return, ::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "echo"} */
  virtual folly::exception_wrapper recv_instance_wrapped_echo(::std::string& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  apache::thrift::SerializedRequest fbthrift_serialize_echo(const RpcOptions& rpcOptions, apache::thrift::transport::THeader& header, apache::thrift::ContextStack* contextStack, const ::std::string& p_text);
  template <typename RpcOptions>
  void fbthrift_send_echo(apache::thrift::SerializedRequest&& request, RpcOptions&& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::RequestClientCallback::Ptr callback, std::unique_ptr<folly::IOBuf> interceptorFrameworkMetadata);
  std::pair<::apache::thrift::ContextStack::UniquePtr, std::shared_ptr<::apache::thrift::transport::THeader>> echoCtx(apache::thrift::RpcOptions* rpcOptions);
  template <typename CallbackType>
  folly::SemiFuture<::std::string> fbthrift_semifuture_echo(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_text);
 public:
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "increment"} */
  virtual void increment(std::unique_ptr<apache::thrift::RequestCallback> callback, ::std::int64_t p_num);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "increment"} */
  virtual void increment(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, ::std::int64_t p_num);
 protected:
  void fbthrift_serialize_and_send_increment(apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::ContextStack* contextStack, apache::thrift::RequestClientCallback::Ptr callback, ::std::int64_t p_num, bool stealRpcOptions = false);
 public:

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "increment"} */
  virtual ::std::int64_t sync_increment(::std::int64_t p_num);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "increment"} */
  virtual ::std::int64_t sync_increment(apache::thrift::RpcOptions& rpcOptions, ::std::int64_t p_num);

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "increment"} */
  virtual folly::Future<::std::int64_t> future_increment(::std::int64_t p_num);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "increment"} */
  virtual folly::SemiFuture<::std::int64_t> semifuture_increment(::std::int64_t p_num);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "increment"} */
  virtual folly::Future<::std::int64_t> future_increment(apache::thrift::RpcOptions& rpcOptions, ::std::int64_t p_num);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "increment"} */
  virtual folly::SemiFuture<::std::int64_t> semifuture_increment(apache::thrift::RpcOptions& rpcOptions, ::std::int64_t p_num);

#if FOLLY_HAS_COROUTINES
#if __clang__
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "increment"} */
  template <int = 0>
  folly::coro::Task<::std::int64_t> co_increment(::std::int64_t p_num) {
    return co_increment<false>(nullptr, p_num);
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "increment"} */
  template <int = 0>
  folly::coro::Task<::std::int64_t> co_increment(apache::thrift::RpcOptions& rpcOptions, ::std::int64_t p_num) {
    return co_increment<true>(&rpcOptions, p_num);
  }
#else
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "increment"} */
  folly::coro::Task<::std::int64_t> co_increment(::std::int64_t p_num) {
    co_return co_await folly::coro::detachOnCancel(semifuture_increment(p_num));
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "increment"} */
  folly::coro::Task<::std::int64_t> co_increment(apache::thrift::RpcOptions& rpcOptions, ::std::int64_t p_num) {
    co_return co_await folly::coro::detachOnCancel(semifuture_increment(rpcOptions, p_num));
  }
#endif
 private:
  template <bool hasRpcOptions>
  folly::coro::Task<::std::int64_t> co_increment(apache::thrift::RpcOptions* rpcOptions, ::std::int64_t p_num) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientCoroCallback<false> callback(&returnState, co_await folly::coro::co_current_executor);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto [ctx, header] = incrementCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static apache::thrift::RpcOptions* defaultRpcOptions = new apache::thrift::RpcOptions();
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if (ctx != nullptr) {
      auto argsAsRefs = std::tie(p_num);
      ctx->processClientInterceptorsOnRequest(apache::thrift::ClientInterceptorOnRequestArguments(argsAsRefs), header.get(), hasRpcOptions ? *rpcOptions : *defaultRpcOptions).throwUnlessValue();
    }
    if constexpr (hasRpcOptions) {
      fbthrift_serialize_and_send_increment(*rpcOptions, header, ctx.get(), std::move(wrappedCallback), p_num);
    } else {
      fbthrift_serialize_and_send_increment(*defaultRpcOptions, header, ctx.get(), std::move(wrappedCallback), p_num);
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (ctx != nullptr) {
      ctx->processClientInterceptorsOnResponse(returnState.header()).throwUnlessValue();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::move(ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header()) {
        auto* rheader = returnState.header();
        if (!rheader->getHeaders().empty()) {
          rpcOptions->setReadHeaders(rheader->releaseHeaders());
        }
        rpcOptions->setRoutingData(rheader->releaseRoutingData());
      }
    };
    ::std::int64_t _return;
    if (auto ew = recv_wrapped_increment(_return, returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
    co_return _return;
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "increment"} */
  virtual void increment(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, ::std::int64_t p_num);


  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "increment"} */
  static folly::exception_wrapper recv_wrapped_increment(::std::int64_t& _return, ::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "increment"} */
  static ::std::int64_t recv_increment(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "increment"} */
  virtual ::std::int64_t recv_instance_increment(::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "increment"} */
  virtual folly::exception_wrapper recv_instance_wrapped_increment(::std::int64_t& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  apache::thrift::SerializedRequest fbthrift_serialize_increment(const RpcOptions& rpcOptions, apache::thrift::transport::THeader& header, apache::thrift::ContextStack* contextStack, ::std::int64_t p_num);
  template <typename RpcOptions>
  void fbthrift_send_increment(apache::thrift::SerializedRequest&& request, RpcOptions&& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::RequestClientCallback::Ptr callback, std::unique_ptr<folly::IOBuf> interceptorFrameworkMetadata);
  std::pair<::apache::thrift::ContextStack::UniquePtr, std::shared_ptr<::apache::thrift::transport::THeader>> incrementCtx(apache::thrift::RpcOptions* rpcOptions);
  template <typename CallbackType>
  folly::SemiFuture<::std::int64_t> fbthrift_semifuture_increment(apache::thrift::RpcOptions& rpcOptions, ::std::int64_t p_num);
 public:
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "sum"} */
  virtual void sum(std::unique_ptr<apache::thrift::RequestCallback> callback, const ::std::vector<::std::int64_t>& p_nums);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "sum"} */
  virtual void sum(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const ::std::vector<::std::int64_t>& p_nums);
 protected:
  void fbthrift_serialize_and_send_sum(apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::ContextStack* contextStack, apache::thrift::RequestClientCallback::Ptr callback, const ::std::vector<::std::int64_t>& p_nums, bool stealRpcOptions = false);
 public:

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "sum"} */
  virtual ::std::int64_t sync_sum(const ::std::vector<::std::int64_t>& p_nums);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "sum"} */
  virtual ::std::int64_t sync_sum(apache::thrift::RpcOptions& rpcOptions, const ::std::vector<::std::int64_t>& p_nums);

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "sum"} */
  virtual folly::Future<::std::int64_t> future_sum(const ::std::vector<::std::int64_t>& p_nums);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "sum"} */
  virtual folly::SemiFuture<::std::int64_t> semifuture_sum(const ::std::vector<::std::int64_t>& p_nums);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "sum"} */
  virtual folly::Future<::std::int64_t> future_sum(apache::thrift::RpcOptions& rpcOptions, const ::std::vector<::std::int64_t>& p_nums);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "sum"} */
  virtual folly::SemiFuture<::std::int64_t> semifuture_sum(apache::thrift::RpcOptions& rpcOptions, const ::std::vector<::std::int64_t>& p_nums);

#if FOLLY_HAS_COROUTINES
#if __clang__
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "sum"} */
  template <int = 0>
  folly::coro::Task<::std::int64_t> co_sum(const ::std::vector<::std::int64_t>& p_nums) {
    return co_sum<false>(nullptr, p_nums);
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "sum"} */
  template <int = 0>
  folly::coro::Task<::std::int64_t> co_sum(apache::thrift::RpcOptions& rpcOptions, const ::std::vector<::std::int64_t>& p_nums) {
    return co_sum<true>(&rpcOptions, p_nums);
  }
#else
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "sum"} */
  folly::coro::Task<::std::int64_t> co_sum(const ::std::vector<::std::int64_t>& p_nums) {
    co_return co_await folly::coro::detachOnCancel(semifuture_sum(p_nums));
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "sum"} */
  folly::coro::Task<::std::int64_t> co_sum(apache::thrift::RpcOptions& rpcOptions, const ::std::vector<::std::int64_t>& p_nums) {
    co_return co_await folly::coro::detachOnCancel(semifuture_sum(rpcOptions, p_nums));
  }
#endif
 private:
  template <bool hasRpcOptions>
  folly::coro::Task<::std::int64_t> co_sum(apache::thrift::RpcOptions* rpcOptions, const ::std::vector<::std::int64_t>& p_nums) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientCoroCallback<false> callback(&returnState, co_await folly::coro::co_current_executor);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto [ctx, header] = sumCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static apache::thrift::RpcOptions* defaultRpcOptions = new apache::thrift::RpcOptions();
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if (ctx != nullptr) {
      auto argsAsRefs = std::tie(p_nums);
      ctx->processClientInterceptorsOnRequest(apache::thrift::ClientInterceptorOnRequestArguments(argsAsRefs), header.get(), hasRpcOptions ? *rpcOptions : *defaultRpcOptions).throwUnlessValue();
    }
    if constexpr (hasRpcOptions) {
      fbthrift_serialize_and_send_sum(*rpcOptions, header, ctx.get(), std::move(wrappedCallback), p_nums);
    } else {
      fbthrift_serialize_and_send_sum(*defaultRpcOptions, header, ctx.get(), std::move(wrappedCallback), p_nums);
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (ctx != nullptr) {
      ctx->processClientInterceptorsOnResponse(returnState.header()).throwUnlessValue();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::move(ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header()) {
        auto* rheader = returnState.header();
        if (!rheader->getHeaders().empty()) {
          rpcOptions->setReadHeaders(rheader->releaseHeaders());
        }
        rpcOptions->setRoutingData(rheader->releaseRoutingData());
      }
    };
    ::std::int64_t _return;
    if (auto ew = recv_wrapped_sum(_return, returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
    co_return _return;
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "sum"} */
  virtual void sum(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const ::std::vector<::std::int64_t>& p_nums);


  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "sum"} */
  static folly::exception_wrapper recv_wrapped_sum(::std::int64_t& _return, ::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "sum"} */
  static ::std::int64_t recv_sum(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "sum"} */
  virtual ::std::int64_t recv_instance_sum(::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "sum"} */
  virtual folly::exception_wrapper recv_instance_wrapped_sum(::std::int64_t& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  apache::thrift::SerializedRequest fbthrift_serialize_sum(const RpcOptions& rpcOptions, apache::thrift::transport::THeader& header, apache::thrift::ContextStack* contextStack, const ::std::vector<::std::int64_t>& p_nums);
  template <typename RpcOptions>
  void fbthrift_send_sum(apache::thrift::SerializedRequest&& request, RpcOptions&& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::RequestClientCallback::Ptr callback, std::unique_ptr<folly::IOBuf> interceptorFrameworkMetadata);
  std::pair<::apache::thrift::ContextStack::UniquePtr, std::shared_ptr<::apache::thrift::transport::THeader>> sumCtx(apache::thrift::RpcOptions* rpcOptions);
  template <typename CallbackType>
  folly::SemiFuture<::std::int64_t> fbthrift_semifuture_sum(apache::thrift::RpcOptions& rpcOptions, const ::std::vector<::std::int64_t>& p_nums);
 public:
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "withStruct"} */
  virtual void withStruct(std::unique_ptr<apache::thrift::RequestCallback> callback, const ::cpp2::Request& p_request);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "withStruct"} */
  virtual void withStruct(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const ::cpp2::Request& p_request);
 protected:
  void fbthrift_serialize_and_send_withStruct(apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::ContextStack* contextStack, apache::thrift::RequestClientCallback::Ptr callback, const ::cpp2::Request& p_request, bool stealRpcOptions = false);
 public:

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "withStruct"} */
  virtual void sync_withStruct(::cpp2::Response& _return, const ::cpp2::Request& p_request);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "withStruct"} */
  virtual void sync_withStruct(apache::thrift::RpcOptions& rpcOptions, ::cpp2::Response& _return, const ::cpp2::Request& p_request);

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "withStruct"} */
  virtual folly::Future<::cpp2::Response> future_withStruct(const ::cpp2::Request& p_request);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "withStruct"} */
  virtual folly::SemiFuture<::cpp2::Response> semifuture_withStruct(const ::cpp2::Request& p_request);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "withStruct"} */
  virtual folly::Future<::cpp2::Response> future_withStruct(apache::thrift::RpcOptions& rpcOptions, const ::cpp2::Request& p_request);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "withStruct"} */
  virtual folly::SemiFuture<::cpp2::Response> semifuture_withStruct(apache::thrift::RpcOptions& rpcOptions, const ::cpp2::Request& p_request);

#if FOLLY_HAS_COROUTINES
#if __clang__
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "withStruct"} */
  template <int = 0>
  folly::coro::Task<::cpp2::Response> co_withStruct(const ::cpp2::Request& p_request) {
    return co_withStruct<false>(nullptr, p_request);
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "withStruct"} */
  template <int = 0>
  folly::coro::Task<::cpp2::Response> co_withStruct(apache::thrift::RpcOptions& rpcOptions, const ::cpp2::Request& p_request) {
    return co_withStruct<true>(&rpcOptions, p_request);
  }
#else
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "withStruct"} */
  folly::coro::Task<::cpp2::Response> co_withStruct(const ::cpp2::Request& p_request) {
    co_return co_await folly::coro::detachOnCancel(semifuture_withStruct(p_request));
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "withStruct"} */
  folly::coro::Task<::cpp2::Response> co_withStruct(apache::thrift::RpcOptions& rpcOptions, const ::cpp2::Request& p_request) {
    co_return co_await folly::coro::detachOnCancel(semifuture_withStruct(rpcOptions, p_request));
  }
#endif
 private:
  template <bool hasRpcOptions>
  folly::coro::Task<::cpp2::Response> co_withStruct(apache::thrift::RpcOptions* rpcOptions, const ::cpp2::Request& p_request) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientCoroCallback<false> callback(&returnState, co_await folly::coro::co_current_executor);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto [ctx, header] = withStructCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static apache::thrift::RpcOptions* defaultRpcOptions = new apache::thrift::RpcOptions();
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if (ctx != nullptr) {
      auto argsAsRefs = std::tie(p_request);
      ctx->processClientInterceptorsOnRequest(apache::thrift::ClientInterceptorOnRequestArguments(argsAsRefs), header.get(), hasRpcOptions ? *rpcOptions : *defaultRpcOptions).throwUnlessValue();
    }
    if constexpr (hasRpcOptions) {
      fbthrift_serialize_and_send_withStruct(*rpcOptions, header, ctx.get(), std::move(wrappedCallback), p_request);
    } else {
      fbthrift_serialize_and_send_withStruct(*defaultRpcOptions, header, ctx.get(), std::move(wrappedCallback), p_request);
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (ctx != nullptr) {
      ctx->processClientInterceptorsOnResponse(returnState.header()).throwUnlessValue();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::move(ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header()) {
        auto* rheader = returnState.header();
        if (!rheader->getHeaders().empty()) {
          rpcOptions->setReadHeaders(rheader->releaseHeaders());
        }
        rpcOptions->setRoutingData(rheader->releaseRoutingData());
      }
    };
    ::cpp2::Response _return;
    if (auto ew = recv_wrapped_withStruct(_return, returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
    co_return _return;
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "withStruct"} */
  virtual void withStruct(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const ::cpp2::Request& p_request);


  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "withStruct"} */
  static folly::exception_wrapper recv_wrapped_withStruct(::cpp2::Response& _return, ::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "withStruct"} */
  static void recv_withStruct(::cpp2::Response& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "withStruct"} */
  virtual void recv_instance_withStruct(::cpp2::Response& _return, ::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "withStruct"} */
  virtual folly::exception_wrapper recv_instance_wrapped_withStruct(::cpp2::Response& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  apache::thrift::SerializedRequest fbthrift_serialize_withStruct(const RpcOptions& rpcOptions, apache::thrift::transport::THeader& header, apache::thrift::ContextStack* contextStack, const ::cpp2::Request& p_request);
  template <typename RpcOptions>
  void fbthrift_send_withStruct(apache::thrift::SerializedRequest&& request, RpcOptions&& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::RequestClientCallback::Ptr callback, std::unique_ptr<folly::IOBuf> interceptorFrameworkMetadata);
  std::pair<::apache::thrift::ContextStack::UniquePtr, std::shared_ptr<::apache::thrift::transport::THeader>> withStructCtx(apache::thrift::RpcOptions* rpcOptions);
  template <typename CallbackType>
  folly::SemiFuture<::cpp2::Response> fbthrift_semifuture_withStruct(apache::thrift::RpcOptions& rpcOptions, const ::cpp2::Request& p_request);
 public:
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "multiParam"} */
  virtual void multiParam(std::unique_ptr<apache::thrift::RequestCallback> callback, const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "multiParam"} */
  virtual void multiParam(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request);
 protected:
  void fbthrift_serialize_and_send_multiParam(apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::ContextStack* contextStack, apache::thrift::RequestClientCallback::Ptr callback, const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request, bool stealRpcOptions = false);
 public:

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "multiParam"} */
  virtual void sync_multiParam(::cpp2::Response& _return, const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "multiParam"} */
  virtual void sync_multiParam(apache::thrift::RpcOptions& rpcOptions, ::cpp2::Response& _return, const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request);

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "multiParam"} */
  virtual folly::Future<::cpp2::Response> future_multiParam(const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "multiParam"} */
  virtual folly::SemiFuture<::cpp2::Response> semifuture_multiParam(const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "multiParam"} */
  virtual folly::Future<::cpp2::Response> future_multiParam(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "multiParam"} */
  virtual folly::SemiFuture<::cpp2::Response> semifuture_multiParam(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request);

#if FOLLY_HAS_COROUTINES
#if __clang__
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "multiParam"} */
  template <int = 0>
  folly::coro::Task<::cpp2::Response> co_multiParam(const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request) {
    return co_multiParam<false>(nullptr, p_text, p_num, p_request);
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "multiParam"} */
  template <int = 0>
  folly::coro::Task<::cpp2::Response> co_multiParam(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request) {
    return co_multiParam<true>(&rpcOptions, p_text, p_num, p_request);
  }
#else
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "multiParam"} */
  folly::coro::Task<::cpp2::Response> co_multiParam(const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request) {
    co_return co_await folly::coro::detachOnCancel(semifuture_multiParam(p_text, p_num, p_request));
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "multiParam"} */
  folly::coro::Task<::cpp2::Response> co_multiParam(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request) {
    co_return co_await folly::coro::detachOnCancel(semifuture_multiParam(rpcOptions, p_text, p_num, p_request));
  }
#endif
 private:
  template <bool hasRpcOptions>
  folly::coro::Task<::cpp2::Response> co_multiParam(apache::thrift::RpcOptions* rpcOptions, const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientCoroCallback<false> callback(&returnState, co_await folly::coro::co_current_executor);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto [ctx, header] = multiParamCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static apache::thrift::RpcOptions* defaultRpcOptions = new apache::thrift::RpcOptions();
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if (ctx != nullptr) {
      auto argsAsRefs = std::tie(p_text, p_num, p_request);
      ctx->processClientInterceptorsOnRequest(apache::thrift::ClientInterceptorOnRequestArguments(argsAsRefs), header.get(), hasRpcOptions ? *rpcOptions : *defaultRpcOptions).throwUnlessValue();
    }
    if constexpr (hasRpcOptions) {
      fbthrift_serialize_and_send_multiParam(*rpcOptions, header, ctx.get(), std::move(wrappedCallback), p_text, p_num, p_request);
    } else {
      fbthrift_serialize_and_send_multiParam(*defaultRpcOptions, header, ctx.get(), std::move(wrappedCallback), p_text, p_num, p_request);
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (ctx != nullptr) {
      ctx->processClientInterceptorsOnResponse(returnState.header()).throwUnlessValue();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::move(ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header()) {
        auto* rheader = returnState.header();
        if (!rheader->getHeaders().empty()) {
          rpcOptions->setReadHeaders(rheader->releaseHeaders());
        }
        rpcOptions->setRoutingData(rheader->releaseRoutingData());
      }
    };
    ::cpp2::Response _return;
    if (auto ew = recv_wrapped_multiParam(_return, returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
    co_return _return;
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "multiParam"} */
  virtual void multiParam(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request);


  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "multiParam"} */
  static folly::exception_wrapper recv_wrapped_multiParam(::cpp2::Response& _return, ::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "multiParam"} */
  static void recv_multiParam(::cpp2::Response& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "multiParam"} */
  virtual void recv_instance_multiParam(::cpp2::Response& _return, ::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService", "function": "multiParam"} */
  virtual folly::exception_wrapper recv_instance_wrapped_multiParam(::cpp2::Response& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  apache::thrift::SerializedRequest fbthrift_serialize_multiParam(const RpcOptions& rpcOptions, apache::thrift::transport::THeader& header, apache::thrift::ContextStack* contextStack, const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request);
  template <typename RpcOptions>
  void fbthrift_send_multiParam(apache::thrift::SerializedRequest&& request, RpcOptions&& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::RequestClientCallback::Ptr callback, std::unique_ptr<folly::IOBuf> interceptorFrameworkMetadata);
  std::pair<::apache::thrift::ContextStack::UniquePtr, std::shared_ptr<::apache::thrift::transport::THeader>> multiParamCtx(apache::thrift::RpcOptions* rpcOptions);
  template <typename CallbackType>
  folly::SemiFuture<::cpp2::Response> fbthrift_semifuture_multiParam(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_text, ::std::int64_t p_num, const ::cpp2::Request& p_request);
 public:
};

} // namespace apache::thrift

namespace cpp2 {
using UndecoratedServiceAsyncClient [[deprecated("Use apache::thrift::Client<UndecoratedService> instead")]] = ::apache::thrift::Client<UndecoratedService>;
} // namespace cpp2

namespace cpp2 {
class DecoratedService_ExtendsUndecoratedService;
} // namespace cpp2
namespace apache::thrift {

namespace detail {

template<>
struct ServiceMethodTypesFootprint<::cpp2::DecoratedService_ExtendsUndecoratedService> {
  // The types that appear in the definitions of service methods.
  // e.g. if it appears as a type of an input, output, exception sink or stream
  // parameter of a client stub, it appears here,
  using TypesInMethods = folly::tag_t<
  void>;
};
} // namespace detail

template <>
class Client<::cpp2::DecoratedService_ExtendsUndecoratedService> : public ::cpp2::UndecoratedServiceAsyncClient {
  static_assert(!folly::is_detected_v<::apache::thrift::detail::st::detect_complete, ::cpp2::DecoratedService_ExtendsUndecoratedService>, "Definition collision with service tag. Either rename the Thrift service using @cpp.Name annotation or rename the conflicting C++ type.");
 public:
  using ::cpp2::UndecoratedServiceAsyncClient::UndecoratedServiceAsyncClient;

  std::string_view getServiceName() const noexcept override {
    return "DecoratedService_ExtendsUndecoratedService";
  }


  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService", "function": "extension"} */
  virtual void extension(std::unique_ptr<apache::thrift::RequestCallback> callback);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService", "function": "extension"} */
  virtual void extension(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
 protected:
  void fbthrift_serialize_and_send_extension(apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::ContextStack* contextStack, apache::thrift::RequestClientCallback::Ptr callback, bool stealRpcOptions = false);
 public:

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService", "function": "extension"} */
  virtual void sync_extension();
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService", "function": "extension"} */
  virtual void sync_extension(apache::thrift::RpcOptions& rpcOptions);

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService", "function": "extension"} */
  virtual folly::Future<folly::Unit> future_extension();
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService", "function": "extension"} */
  virtual folly::SemiFuture<folly::Unit> semifuture_extension();
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService", "function": "extension"} */
  virtual folly::Future<folly::Unit> future_extension(apache::thrift::RpcOptions& rpcOptions);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService", "function": "extension"} */
  virtual folly::SemiFuture<folly::Unit> semifuture_extension(apache::thrift::RpcOptions& rpcOptions);

#if FOLLY_HAS_COROUTINES
#if __clang__
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService", "function": "extension"} */
  template <int = 0>
  folly::coro::Task<void> co_extension() {
    return co_extension<false>(nullptr);
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService", "function": "extension"} */
  template <int = 0>
  folly::coro::Task<void> co_extension(apache::thrift::RpcOptions& rpcOptions) {
    return co_extension<true>(&rpcOptions);
  }
#else
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService", "function": "extension"} */
  folly::coro::Task<void> co_extension() {
    co_await folly::coro::detachOnCancel(semifuture_extension());
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService", "function": "extension"} */
  folly::coro::Task<void> co_extension(apache::thrift::RpcOptions& rpcOptions) {
    co_await folly::coro::detachOnCancel(semifuture_extension(rpcOptions));
  }
#endif
 private:
  template <bool hasRpcOptions>
  folly::coro::Task<void> co_extension(apache::thrift::RpcOptions* rpcOptions) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientCoroCallback<false> callback(&returnState, co_await folly::coro::co_current_executor);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto [ctx, header] = extensionCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static apache::thrift::RpcOptions* defaultRpcOptions = new apache::thrift::RpcOptions();
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if (ctx != nullptr) {
      auto argsAsRefs = std::tie();
      ctx->processClientInterceptorsOnRequest(apache::thrift::ClientInterceptorOnRequestArguments(argsAsRefs), header.get(), hasRpcOptions ? *rpcOptions : *defaultRpcOptions).throwUnlessValue();
    }
    if constexpr (hasRpcOptions) {
      fbthrift_serialize_and_send_extension(*rpcOptions, header, ctx.get(), std::move(wrappedCallback));
    } else {
      fbthrift_serialize_and_send_extension(*defaultRpcOptions, header, ctx.get(), std::move(wrappedCallback));
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (ctx != nullptr) {
      ctx->processClientInterceptorsOnResponse(returnState.header()).throwUnlessValue();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::move(ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header()) {
        auto* rheader = returnState.header();
        if (!rheader->getHeaders().empty()) {
          rpcOptions->setReadHeaders(rheader->releaseHeaders());
        }
        rpcOptions->setRoutingData(rheader->releaseRoutingData());
      }
    };
    if (auto ew = recv_wrapped_extension(returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService", "function": "extension"} */
  virtual void extension(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback);


  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService", "function": "extension"} */
  static folly::exception_wrapper recv_wrapped_extension(::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService", "function": "extension"} */
  static void recv_extension(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService", "function": "extension"} */
  virtual void recv_instance_extension(::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService", "function": "extension"} */
  virtual folly::exception_wrapper recv_instance_wrapped_extension(::apache::thrift::ClientReceiveState& state);
 private:
  apache::thrift::SerializedRequest fbthrift_serialize_extension(const RpcOptions& rpcOptions, apache::thrift::transport::THeader& header, apache::thrift::ContextStack* contextStack);
  template <typename RpcOptions>
  void fbthrift_send_extension(apache::thrift::SerializedRequest&& request, RpcOptions&& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::RequestClientCallback::Ptr callback, std::unique_ptr<folly::IOBuf> interceptorFrameworkMetadata);
  std::pair<::apache::thrift::ContextStack::UniquePtr, std::shared_ptr<::apache::thrift::transport::THeader>> extensionCtx(apache::thrift::RpcOptions* rpcOptions);
  template <typename CallbackType>
  folly::SemiFuture<folly::Unit> fbthrift_semifuture_extension(apache::thrift::RpcOptions& rpcOptions);
 public:
};

} // namespace apache::thrift

namespace cpp2 {
using DecoratedService_ExtendsUndecoratedServiceAsyncClient [[deprecated("Use apache::thrift::Client<DecoratedService_ExtendsUndecoratedService> instead")]] = ::apache::thrift::Client<DecoratedService_ExtendsUndecoratedService>;
} // namespace cpp2

namespace cpp2 {
class DecoratedService_ExtendsDecoratedService;
} // namespace cpp2
namespace apache::thrift {

namespace detail {

template<>
struct ServiceMethodTypesFootprint<::cpp2::DecoratedService_ExtendsDecoratedService> {
  // The types that appear in the definitions of service methods.
  // e.g. if it appears as a type of an input, output, exception sink or stream
  // parameter of a client stub, it appears here,
  using TypesInMethods = folly::tag_t<
  void>;
};
} // namespace detail

template <>
class Client<::cpp2::DecoratedService_ExtendsDecoratedService> : public ::cpp2::DecoratedServiceAsyncClient {
  static_assert(!folly::is_detected_v<::apache::thrift::detail::st::detect_complete, ::cpp2::DecoratedService_ExtendsDecoratedService>, "Definition collision with service tag. Either rename the Thrift service using @cpp.Name annotation or rename the conflicting C++ type.");
 public:
  using ::cpp2::DecoratedServiceAsyncClient::DecoratedServiceAsyncClient;

  std::string_view getServiceName() const noexcept override {
    return "DecoratedService_ExtendsDecoratedService";
  }


  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsDecoratedService", "function": "extension"} */
  virtual void extension(std::unique_ptr<apache::thrift::RequestCallback> callback);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsDecoratedService", "function": "extension"} */
  virtual void extension(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
 protected:
  void fbthrift_serialize_and_send_extension(apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::ContextStack* contextStack, apache::thrift::RequestClientCallback::Ptr callback, bool stealRpcOptions = false);
 public:

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsDecoratedService", "function": "extension"} */
  virtual void sync_extension();
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsDecoratedService", "function": "extension"} */
  virtual void sync_extension(apache::thrift::RpcOptions& rpcOptions);

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsDecoratedService", "function": "extension"} */
  virtual folly::Future<folly::Unit> future_extension();
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsDecoratedService", "function": "extension"} */
  virtual folly::SemiFuture<folly::Unit> semifuture_extension();
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsDecoratedService", "function": "extension"} */
  virtual folly::Future<folly::Unit> future_extension(apache::thrift::RpcOptions& rpcOptions);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsDecoratedService", "function": "extension"} */
  virtual folly::SemiFuture<folly::Unit> semifuture_extension(apache::thrift::RpcOptions& rpcOptions);

#if FOLLY_HAS_COROUTINES
#if __clang__
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsDecoratedService", "function": "extension"} */
  template <int = 0>
  folly::coro::Task<void> co_extension() {
    return co_extension<false>(nullptr);
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsDecoratedService", "function": "extension"} */
  template <int = 0>
  folly::coro::Task<void> co_extension(apache::thrift::RpcOptions& rpcOptions) {
    return co_extension<true>(&rpcOptions);
  }
#else
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsDecoratedService", "function": "extension"} */
  folly::coro::Task<void> co_extension() {
    co_await folly::coro::detachOnCancel(semifuture_extension());
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsDecoratedService", "function": "extension"} */
  folly::coro::Task<void> co_extension(apache::thrift::RpcOptions& rpcOptions) {
    co_await folly::coro::detachOnCancel(semifuture_extension(rpcOptions));
  }
#endif
 private:
  template <bool hasRpcOptions>
  folly::coro::Task<void> co_extension(apache::thrift::RpcOptions* rpcOptions) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientCoroCallback<false> callback(&returnState, co_await folly::coro::co_current_executor);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto [ctx, header] = extensionCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static apache::thrift::RpcOptions* defaultRpcOptions = new apache::thrift::RpcOptions();
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if (ctx != nullptr) {
      auto argsAsRefs = std::tie();
      ctx->processClientInterceptorsOnRequest(apache::thrift::ClientInterceptorOnRequestArguments(argsAsRefs), header.get(), hasRpcOptions ? *rpcOptions : *defaultRpcOptions).throwUnlessValue();
    }
    if constexpr (hasRpcOptions) {
      fbthrift_serialize_and_send_extension(*rpcOptions, header, ctx.get(), std::move(wrappedCallback));
    } else {
      fbthrift_serialize_and_send_extension(*defaultRpcOptions, header, ctx.get(), std::move(wrappedCallback));
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (ctx != nullptr) {
      ctx->processClientInterceptorsOnResponse(returnState.header()).throwUnlessValue();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::move(ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header()) {
        auto* rheader = returnState.header();
        if (!rheader->getHeaders().empty()) {
          rpcOptions->setReadHeaders(rheader->releaseHeaders());
        }
        rpcOptions->setRoutingData(rheader->releaseRoutingData());
      }
    };
    if (auto ew = recv_wrapped_extension(returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsDecoratedService", "function": "extension"} */
  virtual void extension(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback);


  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsDecoratedService", "function": "extension"} */
  static folly::exception_wrapper recv_wrapped_extension(::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsDecoratedService", "function": "extension"} */
  static void recv_extension(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsDecoratedService", "function": "extension"} */
  virtual void recv_instance_extension(::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsDecoratedService", "function": "extension"} */
  virtual folly::exception_wrapper recv_instance_wrapped_extension(::apache::thrift::ClientReceiveState& state);
 private:
  apache::thrift::SerializedRequest fbthrift_serialize_extension(const RpcOptions& rpcOptions, apache::thrift::transport::THeader& header, apache::thrift::ContextStack* contextStack);
  template <typename RpcOptions>
  void fbthrift_send_extension(apache::thrift::SerializedRequest&& request, RpcOptions&& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::RequestClientCallback::Ptr callback, std::unique_ptr<folly::IOBuf> interceptorFrameworkMetadata);
  std::pair<::apache::thrift::ContextStack::UniquePtr, std::shared_ptr<::apache::thrift::transport::THeader>> extensionCtx(apache::thrift::RpcOptions* rpcOptions);
  template <typename CallbackType>
  folly::SemiFuture<folly::Unit> fbthrift_semifuture_extension(apache::thrift::RpcOptions& rpcOptions);
 public:
};

} // namespace apache::thrift

namespace cpp2 {
using DecoratedService_ExtendsDecoratedServiceAsyncClient [[deprecated("Use apache::thrift::Client<DecoratedService_ExtendsDecoratedService> instead")]] = ::apache::thrift::Client<DecoratedService_ExtendsDecoratedService>;
} // namespace cpp2

namespace cpp2 {
class UndecoratedService_ExtendsDecoratedService;
} // namespace cpp2
namespace apache::thrift {

namespace detail {

template<>
struct ServiceMethodTypesFootprint<::cpp2::UndecoratedService_ExtendsDecoratedService> {
  // The types that appear in the definitions of service methods.
  // e.g. if it appears as a type of an input, output, exception sink or stream
  // parameter of a client stub, it appears here,
  using TypesInMethods = folly::tag_t<
  void>;
};
} // namespace detail

template <>
class Client<::cpp2::UndecoratedService_ExtendsDecoratedService> : public ::cpp2::DecoratedServiceAsyncClient {
  static_assert(!folly::is_detected_v<::apache::thrift::detail::st::detect_complete, ::cpp2::UndecoratedService_ExtendsDecoratedService>, "Definition collision with service tag. Either rename the Thrift service using @cpp.Name annotation or rename the conflicting C++ type.");
 public:
  using ::cpp2::DecoratedServiceAsyncClient::DecoratedServiceAsyncClient;

  std::string_view getServiceName() const noexcept override {
    return "UndecoratedService_ExtendsDecoratedService";
  }


  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService_ExtendsDecoratedService", "function": "extension"} */
  virtual void extension(std::unique_ptr<apache::thrift::RequestCallback> callback);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService_ExtendsDecoratedService", "function": "extension"} */
  virtual void extension(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
 protected:
  void fbthrift_serialize_and_send_extension(apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::ContextStack* contextStack, apache::thrift::RequestClientCallback::Ptr callback, bool stealRpcOptions = false);
 public:

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService_ExtendsDecoratedService", "function": "extension"} */
  virtual void sync_extension();
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService_ExtendsDecoratedService", "function": "extension"} */
  virtual void sync_extension(apache::thrift::RpcOptions& rpcOptions);

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService_ExtendsDecoratedService", "function": "extension"} */
  virtual folly::Future<folly::Unit> future_extension();
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService_ExtendsDecoratedService", "function": "extension"} */
  virtual folly::SemiFuture<folly::Unit> semifuture_extension();
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService_ExtendsDecoratedService", "function": "extension"} */
  virtual folly::Future<folly::Unit> future_extension(apache::thrift::RpcOptions& rpcOptions);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService_ExtendsDecoratedService", "function": "extension"} */
  virtual folly::SemiFuture<folly::Unit> semifuture_extension(apache::thrift::RpcOptions& rpcOptions);

#if FOLLY_HAS_COROUTINES
#if __clang__
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService_ExtendsDecoratedService", "function": "extension"} */
  template <int = 0>
  folly::coro::Task<void> co_extension() {
    return co_extension<false>(nullptr);
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService_ExtendsDecoratedService", "function": "extension"} */
  template <int = 0>
  folly::coro::Task<void> co_extension(apache::thrift::RpcOptions& rpcOptions) {
    return co_extension<true>(&rpcOptions);
  }
#else
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService_ExtendsDecoratedService", "function": "extension"} */
  folly::coro::Task<void> co_extension() {
    co_await folly::coro::detachOnCancel(semifuture_extension());
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService_ExtendsDecoratedService", "function": "extension"} */
  folly::coro::Task<void> co_extension(apache::thrift::RpcOptions& rpcOptions) {
    co_await folly::coro::detachOnCancel(semifuture_extension(rpcOptions));
  }
#endif
 private:
  template <bool hasRpcOptions>
  folly::coro::Task<void> co_extension(apache::thrift::RpcOptions* rpcOptions) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientCoroCallback<false> callback(&returnState, co_await folly::coro::co_current_executor);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto [ctx, header] = extensionCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static apache::thrift::RpcOptions* defaultRpcOptions = new apache::thrift::RpcOptions();
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if (ctx != nullptr) {
      auto argsAsRefs = std::tie();
      ctx->processClientInterceptorsOnRequest(apache::thrift::ClientInterceptorOnRequestArguments(argsAsRefs), header.get(), hasRpcOptions ? *rpcOptions : *defaultRpcOptions).throwUnlessValue();
    }
    if constexpr (hasRpcOptions) {
      fbthrift_serialize_and_send_extension(*rpcOptions, header, ctx.get(), std::move(wrappedCallback));
    } else {
      fbthrift_serialize_and_send_extension(*defaultRpcOptions, header, ctx.get(), std::move(wrappedCallback));
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (ctx != nullptr) {
      ctx->processClientInterceptorsOnResponse(returnState.header()).throwUnlessValue();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::move(ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header()) {
        auto* rheader = returnState.header();
        if (!rheader->getHeaders().empty()) {
          rpcOptions->setReadHeaders(rheader->releaseHeaders());
        }
        rpcOptions->setRoutingData(rheader->releaseRoutingData());
      }
    };
    if (auto ew = recv_wrapped_extension(returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService_ExtendsDecoratedService", "function": "extension"} */
  virtual void extension(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback);


  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService_ExtendsDecoratedService", "function": "extension"} */
  static folly::exception_wrapper recv_wrapped_extension(::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService_ExtendsDecoratedService", "function": "extension"} */
  static void recv_extension(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService_ExtendsDecoratedService", "function": "extension"} */
  virtual void recv_instance_extension(::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "UndecoratedService_ExtendsDecoratedService", "function": "extension"} */
  virtual folly::exception_wrapper recv_instance_wrapped_extension(::apache::thrift::ClientReceiveState& state);
 private:
  apache::thrift::SerializedRequest fbthrift_serialize_extension(const RpcOptions& rpcOptions, apache::thrift::transport::THeader& header, apache::thrift::ContextStack* contextStack);
  template <typename RpcOptions>
  void fbthrift_send_extension(apache::thrift::SerializedRequest&& request, RpcOptions&& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::RequestClientCallback::Ptr callback, std::unique_ptr<folly::IOBuf> interceptorFrameworkMetadata);
  std::pair<::apache::thrift::ContextStack::UniquePtr, std::shared_ptr<::apache::thrift::transport::THeader>> extensionCtx(apache::thrift::RpcOptions* rpcOptions);
  template <typename CallbackType>
  folly::SemiFuture<folly::Unit> fbthrift_semifuture_extension(apache::thrift::RpcOptions& rpcOptions);
 public:
};

} // namespace apache::thrift

namespace cpp2 {
using UndecoratedService_ExtendsDecoratedServiceAsyncClient [[deprecated("Use apache::thrift::Client<UndecoratedService_ExtendsDecoratedService> instead")]] = ::apache::thrift::Client<UndecoratedService_ExtendsDecoratedService>;
} // namespace cpp2

namespace cpp2 {
class DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService;
} // namespace cpp2
namespace apache::thrift {

namespace detail {

template<>
struct ServiceMethodTypesFootprint<::cpp2::DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService> {
  // The types that appear in the definitions of service methods.
  // e.g. if it appears as a type of an input, output, exception sink or stream
  // parameter of a client stub, it appears here,
  using TypesInMethods = folly::tag_t<
  ::std::string>;
};
} // namespace detail

template <>
class Client<::cpp2::DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService> : public ::cpp2::UndecoratedService_ExtendsDecoratedServiceAsyncClient {
  static_assert(!folly::is_detected_v<::apache::thrift::detail::st::detect_complete, ::cpp2::DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService>, "Definition collision with service tag. Either rename the Thrift service using @cpp.Name annotation or rename the conflicting C++ type.");
 public:
  using ::cpp2::UndecoratedService_ExtendsDecoratedServiceAsyncClient::UndecoratedService_ExtendsDecoratedServiceAsyncClient;

  std::string_view getServiceName() const noexcept override {
    return "DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService";
  }


  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService", "function": "secondExtension"} */
  virtual void secondExtension(std::unique_ptr<apache::thrift::RequestCallback> callback, const ::std::string& p_input);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService", "function": "secondExtension"} */
  virtual void secondExtension(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const ::std::string& p_input);
 protected:
  void fbthrift_serialize_and_send_secondExtension(apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::ContextStack* contextStack, apache::thrift::RequestClientCallback::Ptr callback, const ::std::string& p_input, bool stealRpcOptions = false);
 public:

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService", "function": "secondExtension"} */
  virtual void sync_secondExtension(::std::string& _return, const ::std::string& p_input);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService", "function": "secondExtension"} */
  virtual void sync_secondExtension(apache::thrift::RpcOptions& rpcOptions, ::std::string& _return, const ::std::string& p_input);

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService", "function": "secondExtension"} */
  virtual folly::Future<::std::string> future_secondExtension(const ::std::string& p_input);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService", "function": "secondExtension"} */
  virtual folly::SemiFuture<::std::string> semifuture_secondExtension(const ::std::string& p_input);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService", "function": "secondExtension"} */
  virtual folly::Future<::std::string> future_secondExtension(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_input);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService", "function": "secondExtension"} */
  virtual folly::SemiFuture<::std::string> semifuture_secondExtension(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_input);

#if FOLLY_HAS_COROUTINES
#if __clang__
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService", "function": "secondExtension"} */
  template <int = 0>
  folly::coro::Task<::std::string> co_secondExtension(const ::std::string& p_input) {
    return co_secondExtension<false>(nullptr, p_input);
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService", "function": "secondExtension"} */
  template <int = 0>
  folly::coro::Task<::std::string> co_secondExtension(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_input) {
    return co_secondExtension<true>(&rpcOptions, p_input);
  }
#else
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService", "function": "secondExtension"} */
  folly::coro::Task<::std::string> co_secondExtension(const ::std::string& p_input) {
    co_return co_await folly::coro::detachOnCancel(semifuture_secondExtension(p_input));
  }
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService", "function": "secondExtension"} */
  folly::coro::Task<::std::string> co_secondExtension(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_input) {
    co_return co_await folly::coro::detachOnCancel(semifuture_secondExtension(rpcOptions, p_input));
  }
#endif
 private:
  template <bool hasRpcOptions>
  folly::coro::Task<::std::string> co_secondExtension(apache::thrift::RpcOptions* rpcOptions, const ::std::string& p_input) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientCoroCallback<false> callback(&returnState, co_await folly::coro::co_current_executor);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto [ctx, header] = secondExtensionCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static apache::thrift::RpcOptions* defaultRpcOptions = new apache::thrift::RpcOptions();
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if (ctx != nullptr) {
      auto argsAsRefs = std::tie(p_input);
      ctx->processClientInterceptorsOnRequest(apache::thrift::ClientInterceptorOnRequestArguments(argsAsRefs), header.get(), hasRpcOptions ? *rpcOptions : *defaultRpcOptions).throwUnlessValue();
    }
    if constexpr (hasRpcOptions) {
      fbthrift_serialize_and_send_secondExtension(*rpcOptions, header, ctx.get(), std::move(wrappedCallback), p_input);
    } else {
      fbthrift_serialize_and_send_secondExtension(*defaultRpcOptions, header, ctx.get(), std::move(wrappedCallback), p_input);
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (ctx != nullptr) {
      ctx->processClientInterceptorsOnResponse(returnState.header()).throwUnlessValue();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::move(ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header()) {
        auto* rheader = returnState.header();
        if (!rheader->getHeaders().empty()) {
          rpcOptions->setReadHeaders(rheader->releaseHeaders());
        }
        rpcOptions->setRoutingData(rheader->releaseRoutingData());
      }
    };
    ::std::string _return;
    if (auto ew = recv_wrapped_secondExtension(_return, returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
    co_return _return;
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService", "function": "secondExtension"} */
  virtual void secondExtension(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const ::std::string& p_input);


  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService", "function": "secondExtension"} */
  static folly::exception_wrapper recv_wrapped_secondExtension(::std::string& _return, ::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService", "function": "secondExtension"} */
  static void recv_secondExtension(::std::string& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService", "function": "secondExtension"} */
  virtual void recv_instance_secondExtension(::std::string& _return, ::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/method_decorators/src/module.thrift", "service": "DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService", "function": "secondExtension"} */
  virtual folly::exception_wrapper recv_instance_wrapped_secondExtension(::std::string& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  apache::thrift::SerializedRequest fbthrift_serialize_secondExtension(const RpcOptions& rpcOptions, apache::thrift::transport::THeader& header, apache::thrift::ContextStack* contextStack, const ::std::string& p_input);
  template <typename RpcOptions>
  void fbthrift_send_secondExtension(apache::thrift::SerializedRequest&& request, RpcOptions&& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::RequestClientCallback::Ptr callback, std::unique_ptr<folly::IOBuf> interceptorFrameworkMetadata);
  std::pair<::apache::thrift::ContextStack::UniquePtr, std::shared_ptr<::apache::thrift::transport::THeader>> secondExtensionCtx(apache::thrift::RpcOptions* rpcOptions);
  template <typename CallbackType>
  folly::SemiFuture<::std::string> fbthrift_semifuture_secondExtension(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_input);
 public:
};

} // namespace apache::thrift

namespace cpp2 {
using DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedServiceAsyncClient [[deprecated("Use apache::thrift::Client<DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService> instead")]] = ::apache::thrift::Client<DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService>;
} // namespace cpp2

