/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/interactions/src/shared.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/interactions/gen-cpp2/shared_types.tcc"
#include "thrift/compiler/test/fixtures/interactions/gen-cpp2/shared_constants.h"
#include "thrift/compiler/test/fixtures/interactions/gen-cpp2/shared_data.h"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

[[maybe_unused]] static constexpr std::string_view kModuleName = "shared";



namespace thrift::shared_interactions {

std::string_view DoSomethingResult::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<DoSomethingResult>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view DoSomethingResult::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<DoSomethingResult>::name;
}

DoSomethingResult::DoSomethingResult(const DoSomethingResult&) = default;
DoSomethingResult& DoSomethingResult::operator=(const DoSomethingResult&) = default;
DoSomethingResult::DoSomethingResult() :
    __fbthrift_field_i_res() {
}


DoSomethingResult::~DoSomethingResult() {}

DoSomethingResult::DoSomethingResult([[maybe_unused]] DoSomethingResult&& other) noexcept :
    __fbthrift_field_s_res(std::move(other.__fbthrift_field_s_res)),
    __fbthrift_field_i_res(std::move(other.__fbthrift_field_i_res)),
    __isset(other.__isset) {
}

DoSomethingResult& DoSomethingResult::operator=([[maybe_unused]] DoSomethingResult&& other) noexcept {
    this->__fbthrift_field_s_res = std::move(other.__fbthrift_field_s_res);
    this->__fbthrift_field_i_res = std::move(other.__fbthrift_field_i_res);
    __isset = other.__isset;
    return *this;
}


DoSomethingResult::DoSomethingResult(apache::thrift::FragileConstructor, ::std::string s_res__arg, ::std::int32_t i_res__arg) :
    __fbthrift_field_s_res(std::move(s_res__arg)),
    __fbthrift_field_i_res(std::move(i_res__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}

void DoSomethingResult::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_s_res = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_i_res = ::std::int32_t();
  __isset = {};
}

void DoSomethingResult::__fbthrift_clear_terse_fields() {
}

bool DoSomethingResult::__fbthrift_is_empty() const {
  return false;
}

bool DoSomethingResult::operator==([[maybe_unused]] const DoSomethingResult& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool DoSomethingResult::operator<([[maybe_unused]] const DoSomethingResult& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int32_t DoSomethingResult::get_i_res() const {
  return __fbthrift_field_i_res;
}

::std::int32_t& DoSomethingResult::set_i_res(::std::int32_t i_res_) {
  i_res_ref() = i_res_;
  return __fbthrift_field_i_res;
}

void swap([[maybe_unused]] DoSomethingResult& a, [[maybe_unused]] DoSomethingResult& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_s_res, b.__fbthrift_field_s_res);
  swap(a.__fbthrift_field_i_res, b.__fbthrift_field_i_res);
  swap(a.__isset, b.__isset);
}


} // namespace thrift::shared_interactions

namespace thrift::shared_interactions { namespace {
[[maybe_unused]] FOLLY_ERASE void validateAdapters() {
}
}} // namespace thrift::shared_interactions
namespace apache::thrift::detail::annotation {
}
