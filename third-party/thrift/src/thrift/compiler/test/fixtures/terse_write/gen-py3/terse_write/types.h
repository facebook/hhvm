/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#pragma once

#include <functional>
#include <folly/Range.h>

#include <thrift/lib/py3/enums.h>
#include "thrift/compiler/test/fixtures/terse_write/src/gen-cpp2/terse_write_data.h"
#include "thrift/compiler/test/fixtures/terse_write/src/gen-cpp2/terse_write_types.h"
#include "thrift/compiler/test/fixtures/terse_write/src/gen-cpp2/terse_write_metadata.h"
namespace thrift {
namespace py3 {


template<>
inline const std::vector<std::pair<std::string_view, std::string_view>>& PyEnumTraits<
    ::facebook::thrift::test::terse_write::MyEnum>::namesmap() {
  static const folly::Indestructible<NamesMap> pairs {
    {
    }
  };
  return *pairs;
}


template<>
inline const std::vector<std::pair<std::string_view, std::string_view>>& PyEnumTraits<
    ::facebook::thrift::test::terse_write::MyUnion::Type>::namesmap() {
  static const folly::Indestructible<NamesMap> pairs {
    {
    }
  };
  return *pairs;
}


template<>
inline void reset_field<::facebook::thrift::test::terse_write::MyStruct>(
    ::facebook::thrift::test::terse_write::MyStruct& obj, uint16_t index) {
  switch (index) {
  }
}

template<>
inline void reset_field<::facebook::thrift::test::terse_write::MyStructWithCustomDefault>(
    ::facebook::thrift::test::terse_write::MyStructWithCustomDefault& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.field1_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::MyStructWithCustomDefault>().field1_ref());
      return;
  }
}

template<>
inline void reset_field<::facebook::thrift::test::terse_write::StructLevelTerseStruct>(
    ::facebook::thrift::test::terse_write::StructLevelTerseStruct& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.bool_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::StructLevelTerseStruct>().bool_field_ref());
      return;
    case 1:
      obj.byte_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::StructLevelTerseStruct>().byte_field_ref());
      return;
    case 2:
      obj.short_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::StructLevelTerseStruct>().short_field_ref());
      return;
    case 3:
      obj.int_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::StructLevelTerseStruct>().int_field_ref());
      return;
    case 4:
      obj.long_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::StructLevelTerseStruct>().long_field_ref());
      return;
    case 5:
      obj.float_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::StructLevelTerseStruct>().float_field_ref());
      return;
    case 6:
      obj.double_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::StructLevelTerseStruct>().double_field_ref());
      return;
    case 7:
      obj.string_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::StructLevelTerseStruct>().string_field_ref());
      return;
    case 8:
      obj.binary_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::StructLevelTerseStruct>().binary_field_ref());
      return;
    case 9:
      obj.enum_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::StructLevelTerseStruct>().enum_field_ref());
      return;
    case 10:
      obj.list_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::StructLevelTerseStruct>().list_field_ref());
      return;
    case 11:
      obj.set_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::StructLevelTerseStruct>().set_field_ref());
      return;
    case 12:
      obj.map_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::StructLevelTerseStruct>().map_field_ref());
      return;
    case 13:
      obj.struct_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::StructLevelTerseStruct>().struct_field_ref());
      return;
    case 14:
      obj.union_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::StructLevelTerseStruct>().union_field_ref());
      return;
  }
}

template<>
inline void reset_field<::facebook::thrift::test::terse_write::FieldLevelTerseStruct>(
    ::facebook::thrift::test::terse_write::FieldLevelTerseStruct& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.terse_bool_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::FieldLevelTerseStruct>().terse_bool_field_ref());
      return;
    case 1:
      obj.terse_byte_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::FieldLevelTerseStruct>().terse_byte_field_ref());
      return;
    case 2:
      obj.terse_short_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::FieldLevelTerseStruct>().terse_short_field_ref());
      return;
    case 3:
      obj.terse_int_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::FieldLevelTerseStruct>().terse_int_field_ref());
      return;
    case 4:
      obj.terse_long_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::FieldLevelTerseStruct>().terse_long_field_ref());
      return;
    case 5:
      obj.terse_float_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::FieldLevelTerseStruct>().terse_float_field_ref());
      return;
    case 6:
      obj.terse_double_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::FieldLevelTerseStruct>().terse_double_field_ref());
      return;
    case 7:
      obj.terse_string_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::FieldLevelTerseStruct>().terse_string_field_ref());
      return;
    case 8:
      obj.terse_binary_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::FieldLevelTerseStruct>().terse_binary_field_ref());
      return;
    case 9:
      obj.terse_enum_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::FieldLevelTerseStruct>().terse_enum_field_ref());
      return;
    case 10:
      obj.terse_list_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::FieldLevelTerseStruct>().terse_list_field_ref());
      return;
    case 11:
      obj.terse_set_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::FieldLevelTerseStruct>().terse_set_field_ref());
      return;
    case 12:
      obj.terse_map_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::FieldLevelTerseStruct>().terse_map_field_ref());
      return;
    case 13:
      obj.terse_struct_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::FieldLevelTerseStruct>().terse_struct_field_ref());
      return;
    case 14:
      obj.terse_union_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::FieldLevelTerseStruct>().terse_union_field_ref());
      return;
    case 15:
      obj.bool_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::FieldLevelTerseStruct>().bool_field_ref());
      return;
    case 16:
      obj.byte_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::FieldLevelTerseStruct>().byte_field_ref());
      return;
    case 17:
      obj.short_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::FieldLevelTerseStruct>().short_field_ref());
      return;
    case 18:
      obj.int_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::FieldLevelTerseStruct>().int_field_ref());
      return;
    case 19:
      obj.long_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::FieldLevelTerseStruct>().long_field_ref());
      return;
    case 20:
      obj.float_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::FieldLevelTerseStruct>().float_field_ref());
      return;
    case 21:
      obj.double_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::FieldLevelTerseStruct>().double_field_ref());
      return;
    case 22:
      obj.string_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::FieldLevelTerseStruct>().string_field_ref());
      return;
    case 23:
      obj.binary_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::FieldLevelTerseStruct>().binary_field_ref());
      return;
    case 24:
      obj.enum_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::FieldLevelTerseStruct>().enum_field_ref());
      return;
    case 25:
      obj.list_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::FieldLevelTerseStruct>().list_field_ref());
      return;
    case 26:
      obj.set_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::FieldLevelTerseStruct>().set_field_ref());
      return;
    case 27:
      obj.map_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::FieldLevelTerseStruct>().map_field_ref());
      return;
    case 28:
      obj.struct_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::FieldLevelTerseStruct>().struct_field_ref());
      return;
    case 29:
      obj.union_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::FieldLevelTerseStruct>().union_field_ref());
      return;
  }
}

template<>
inline void reset_field<::facebook::thrift::test::terse_write::TerseStructWithCustomDefault>(
    ::facebook::thrift::test::terse_write::TerseStructWithCustomDefault& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.bool_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::TerseStructWithCustomDefault>().bool_field_ref());
      return;
    case 1:
      obj.byte_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::TerseStructWithCustomDefault>().byte_field_ref());
      return;
    case 2:
      obj.short_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::TerseStructWithCustomDefault>().short_field_ref());
      return;
    case 3:
      obj.int_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::TerseStructWithCustomDefault>().int_field_ref());
      return;
    case 4:
      obj.long_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::TerseStructWithCustomDefault>().long_field_ref());
      return;
    case 5:
      obj.float_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::TerseStructWithCustomDefault>().float_field_ref());
      return;
    case 6:
      obj.double_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::TerseStructWithCustomDefault>().double_field_ref());
      return;
    case 7:
      obj.string_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::TerseStructWithCustomDefault>().string_field_ref());
      return;
    case 8:
      obj.binary_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::TerseStructWithCustomDefault>().binary_field_ref());
      return;
    case 9:
      obj.enum_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::TerseStructWithCustomDefault>().enum_field_ref());
      return;
    case 10:
      obj.list_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::TerseStructWithCustomDefault>().list_field_ref());
      return;
    case 11:
      obj.set_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::TerseStructWithCustomDefault>().set_field_ref());
      return;
    case 12:
      obj.map_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::TerseStructWithCustomDefault>().map_field_ref());
      return;
    case 13:
      obj.struct_field_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::TerseStructWithCustomDefault>().struct_field_ref());
      return;
  }
}

template<>
inline void reset_field<::facebook::thrift::test::terse_write::AdaptedFields>(
    ::facebook::thrift::test::terse_write::AdaptedFields& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.field1_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::AdaptedFields>().field1_ref());
      return;
    case 1:
      obj.field2_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::AdaptedFields>().field2_ref());
      return;
    case 2:
      obj.field3_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::AdaptedFields>().field3_ref());
      return;
  }
}

template<>
inline void reset_field<::facebook::thrift::test::terse_write::WrappedFields>(
    ::facebook::thrift::test::terse_write::WrappedFields& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.field1_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::WrappedFields>().field1_ref());
      return;
  }
}

template<>
inline void reset_field<::facebook::thrift::test::terse_write::TerseException>(
    ::facebook::thrift::test::terse_write::TerseException& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.msg_ref().copy_from(default_inst<::facebook::thrift::test::terse_write::TerseException>().msg_ref());
      return;
  }
}

template<>
inline const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::facebook::thrift::test::terse_write::MyStruct>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
inline const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::facebook::thrift::test::terse_write::MyUnion>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
inline const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::facebook::thrift::test::terse_write::MyStructWithCustomDefault>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
inline const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::facebook::thrift::test::terse_write::StructLevelTerseStruct>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
inline const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::facebook::thrift::test::terse_write::FieldLevelTerseStruct>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
inline const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::facebook::thrift::test::terse_write::TerseStructWithCustomDefault>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
inline const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::facebook::thrift::test::terse_write::AdaptedFields>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
inline const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::facebook::thrift::test::terse_write::WrappedFields>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
inline const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::facebook::thrift::test::terse_write::TerseException>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}
} // namespace py3
} // namespace thrift
