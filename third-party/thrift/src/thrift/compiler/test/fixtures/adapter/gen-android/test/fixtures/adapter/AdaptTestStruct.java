/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package test.fixtures.adapter;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class AdaptTestStruct implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("AdaptTestStruct");
  private static final TField DELAY_FIELD_DESC = new TField("delay", TType.I64, (short)1);
  private static final TField CUSTOM_FIELD_DESC = new TField("custom", TType.STRING, (short)2);
  private static final TField TIMEOUT_FIELD_DESC = new TField("timeout", TType.I64, (short)3);
  private static final TField DATA_FIELD_DESC = new TField("data", TType.I64, (short)4);
  private static final TField META_FIELD_DESC = new TField("meta", TType.STRING, (short)5);
  private static final TField INDIRECTION_STRING_FIELD_DESC = new TField("indirectionString", TType.STRING, (short)6);
  private static final TField STRING_DATA_FIELD_DESC = new TField("string_data", TType.STRING, (short)7);
  private static final TField DOUBLE_WRAPPED_BOOL_FIELD_DESC = new TField("double_wrapped_bool", TType.BOOL, (short)8);
  private static final TField DOUBLE_WRAPPED_INTEGER_FIELD_DESC = new TField("double_wrapped_integer", TType.I32, (short)9);
  private static final TField BINARY_DATA_FIELD_DESC = new TField("binary_data", TType.STRING, (short)10);

  public final Long delay;
  public final byte[] custom;
  public final Long timeout;
  public final Long data;
  public final String meta;
  public final String indirectionString;
  public final String string_data;
  public final Boolean double_wrapped_bool;
  public final Integer double_wrapped_integer;
  public final byte[] binary_data;
  public static final int DELAY = 1;
  public static final int CUSTOM = 2;
  public static final int TIMEOUT = 3;
  public static final int DATA = 4;
  public static final int META = 5;
  public static final int INDIRECTIONSTRING = 6;
  public static final int STRING_DATA = 7;
  public static final int DOUBLE_WRAPPED_BOOL = 8;
  public static final int DOUBLE_WRAPPED_INTEGER = 9;
  public static final int BINARY_DATA = 10;

  public AdaptTestStruct(
      Long delay,
      byte[] custom,
      Long timeout,
      Long data,
      String meta,
      String indirectionString,
      String string_data,
      Boolean double_wrapped_bool,
      Integer double_wrapped_integer,
      byte[] binary_data) {
    this.delay = delay;
    this.custom = custom;
    this.timeout = timeout;
    this.data = data;
    this.meta = meta;
    this.indirectionString = indirectionString;
    this.string_data = string_data;
    this.double_wrapped_bool = double_wrapped_bool;
    this.double_wrapped_integer = double_wrapped_integer;
    this.binary_data = binary_data;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AdaptTestStruct(AdaptTestStruct other) {
    if (other.isSetDelay()) {
      this.delay = TBaseHelper.deepCopy(other.delay);
    } else {
      this.delay = null;
    }
    if (other.isSetCustom()) {
      this.custom = TBaseHelper.deepCopy(other.custom);
    } else {
      this.custom = null;
    }
    if (other.isSetTimeout()) {
      this.timeout = TBaseHelper.deepCopy(other.timeout);
    } else {
      this.timeout = null;
    }
    if (other.isSetData()) {
      this.data = TBaseHelper.deepCopy(other.data);
    } else {
      this.data = null;
    }
    if (other.isSetMeta()) {
      this.meta = TBaseHelper.deepCopy(other.meta);
    } else {
      this.meta = null;
    }
    if (other.isSetIndirectionString()) {
      this.indirectionString = TBaseHelper.deepCopy(other.indirectionString);
    } else {
      this.indirectionString = null;
    }
    if (other.isSetString_data()) {
      this.string_data = TBaseHelper.deepCopy(other.string_data);
    } else {
      this.string_data = null;
    }
    if (other.isSetDouble_wrapped_bool()) {
      this.double_wrapped_bool = TBaseHelper.deepCopy(other.double_wrapped_bool);
    } else {
      this.double_wrapped_bool = null;
    }
    if (other.isSetDouble_wrapped_integer()) {
      this.double_wrapped_integer = TBaseHelper.deepCopy(other.double_wrapped_integer);
    } else {
      this.double_wrapped_integer = null;
    }
    if (other.isSetBinary_data()) {
      this.binary_data = TBaseHelper.deepCopy(other.binary_data);
    } else {
      this.binary_data = null;
    }
  }

  public AdaptTestStruct deepCopy() {
    return new AdaptTestStruct(this);
  }

  public Long getDelay() {
    return this.delay;
  }

  // Returns true if field delay is set (has been assigned a value) and false otherwise
  public boolean isSetDelay() {
    return this.delay != null;
  }

  public byte[] getCustom() {
    return this.custom;
  }

  // Returns true if field custom is set (has been assigned a value) and false otherwise
  public boolean isSetCustom() {
    return this.custom != null;
  }

  public Long getTimeout() {
    return this.timeout;
  }

  // Returns true if field timeout is set (has been assigned a value) and false otherwise
  public boolean isSetTimeout() {
    return this.timeout != null;
  }

  public Long getData() {
    return this.data;
  }

  // Returns true if field data is set (has been assigned a value) and false otherwise
  public boolean isSetData() {
    return this.data != null;
  }

  public String getMeta() {
    return this.meta;
  }

  // Returns true if field meta is set (has been assigned a value) and false otherwise
  public boolean isSetMeta() {
    return this.meta != null;
  }

  public String getIndirectionString() {
    return this.indirectionString;
  }

  // Returns true if field indirectionString is set (has been assigned a value) and false otherwise
  public boolean isSetIndirectionString() {
    return this.indirectionString != null;
  }

  public String getString_data() {
    return this.string_data;
  }

  // Returns true if field string_data is set (has been assigned a value) and false otherwise
  public boolean isSetString_data() {
    return this.string_data != null;
  }

  public Boolean isDouble_wrapped_bool() {
    return this.double_wrapped_bool;
  }

  // Returns true if field double_wrapped_bool is set (has been assigned a value) and false otherwise
  public boolean isSetDouble_wrapped_bool() {
    return this.double_wrapped_bool != null;
  }

  public Integer getDouble_wrapped_integer() {
    return this.double_wrapped_integer;
  }

  // Returns true if field double_wrapped_integer is set (has been assigned a value) and false otherwise
  public boolean isSetDouble_wrapped_integer() {
    return this.double_wrapped_integer != null;
  }

  public byte[] getBinary_data() {
    return this.binary_data;
  }

  // Returns true if field binary_data is set (has been assigned a value) and false otherwise
  public boolean isSetBinary_data() {
    return this.binary_data != null;
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof AdaptTestStruct))
      return false;
    AdaptTestStruct that = (AdaptTestStruct)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetDelay(), that.isSetDelay(), this.delay, that.delay)) { return false; }

    if (!TBaseHelper.equalsSlow(this.isSetCustom(), that.isSetCustom(), this.custom, that.custom)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetTimeout(), that.isSetTimeout(), this.timeout, that.timeout)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetData(), that.isSetData(), this.data, that.data)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMeta(), that.isSetMeta(), this.meta, that.meta)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetIndirectionString(), that.isSetIndirectionString(), this.indirectionString, that.indirectionString)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetString_data(), that.isSetString_data(), this.string_data, that.string_data)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetDouble_wrapped_bool(), that.isSetDouble_wrapped_bool(), this.double_wrapped_bool, that.double_wrapped_bool)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetDouble_wrapped_integer(), that.isSetDouble_wrapped_integer(), this.double_wrapped_integer, that.double_wrapped_integer)) { return false; }

    if (!TBaseHelper.equalsSlow(this.isSetBinary_data(), that.isSetBinary_data(), this.binary_data, that.binary_data)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {delay, custom, timeout, data, meta, indirectionString, string_data, double_wrapped_bool, double_wrapped_integer, binary_data});
  }

  // This is required to satisfy the TBase interface, but can't be implemented on immutable struture.
  public void read(TProtocol iprot) throws TException {
    throw new TException("unimplemented in android immutable structure");
  }

  public static AdaptTestStruct deserialize(TProtocol iprot) throws TException {
    Long tmp_delay = null;
    byte[] tmp_custom = null;
    Long tmp_timeout = null;
    Long tmp_data = null;
    String tmp_meta = null;
    String tmp_indirectionString = null;
    String tmp_string_data = null;
    Boolean tmp_double_wrapped_bool = null;
    Integer tmp_double_wrapped_integer = null;
    byte[] tmp_binary_data = null;
    TField __field;
    iprot.readStructBegin();
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) {
        break;
      }
      switch (__field.id)
      {
        case DELAY:
          if (__field.type == TType.I64) {
            tmp_delay = iprot.readI64();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case CUSTOM:
          if (__field.type == TType.STRING) {
            tmp_custom = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case TIMEOUT:
          if (__field.type == TType.I64) {
            tmp_timeout = iprot.readI64();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case DATA:
          if (__field.type == TType.I64) {
            tmp_data = iprot.readI64();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case META:
          if (__field.type == TType.STRING) {
            tmp_meta = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case INDIRECTIONSTRING:
          if (__field.type == TType.STRING) {
            tmp_indirectionString = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case STRING_DATA:
          if (__field.type == TType.STRING) {
            tmp_string_data = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case DOUBLE_WRAPPED_BOOL:
          if (__field.type == TType.BOOL) {
            tmp_double_wrapped_bool = iprot.readBool();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case DOUBLE_WRAPPED_INTEGER:
          if (__field.type == TType.I32) {
            tmp_double_wrapped_integer = iprot.readI32();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case BINARY_DATA:
          if (__field.type == TType.STRING) {
            tmp_binary_data = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    AdaptTestStruct _that;
    _that = new AdaptTestStruct(
      tmp_delay
      ,tmp_custom
      ,tmp_timeout
      ,tmp_data
      ,tmp_meta
      ,tmp_indirectionString
      ,tmp_string_data
      ,tmp_double_wrapped_bool
      ,tmp_double_wrapped_integer
      ,tmp_binary_data
    );
    _that.validate();
    return _that;
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.delay != null) {
      oprot.writeFieldBegin(DELAY_FIELD_DESC);
      oprot.writeI64(this.delay);
      oprot.writeFieldEnd();
    }
    if (this.custom != null) {
      oprot.writeFieldBegin(CUSTOM_FIELD_DESC);
      oprot.writeBinary(this.custom);
      oprot.writeFieldEnd();
    }
    if (this.timeout != null) {
      oprot.writeFieldBegin(TIMEOUT_FIELD_DESC);
      oprot.writeI64(this.timeout);
      oprot.writeFieldEnd();
    }
    if (this.data != null) {
      oprot.writeFieldBegin(DATA_FIELD_DESC);
      oprot.writeI64(this.data);
      oprot.writeFieldEnd();
    }
    if (this.meta != null) {
      oprot.writeFieldBegin(META_FIELD_DESC);
      oprot.writeString(this.meta);
      oprot.writeFieldEnd();
    }
    if (this.indirectionString != null) {
      oprot.writeFieldBegin(INDIRECTION_STRING_FIELD_DESC);
      oprot.writeString(this.indirectionString);
      oprot.writeFieldEnd();
    }
    if (this.string_data != null) {
      oprot.writeFieldBegin(STRING_DATA_FIELD_DESC);
      oprot.writeString(this.string_data);
      oprot.writeFieldEnd();
    }
    if (this.double_wrapped_bool != null) {
      oprot.writeFieldBegin(DOUBLE_WRAPPED_BOOL_FIELD_DESC);
      oprot.writeBool(this.double_wrapped_bool);
      oprot.writeFieldEnd();
    }
    if (this.double_wrapped_integer != null) {
      oprot.writeFieldBegin(DOUBLE_WRAPPED_INTEGER_FIELD_DESC);
      oprot.writeI32(this.double_wrapped_integer);
      oprot.writeFieldEnd();
    }
    if (this.binary_data != null) {
      oprot.writeFieldBegin(BINARY_DATA_FIELD_DESC);
      oprot.writeBinary(this.binary_data);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    return TBaseHelper.toStringHelper(this, indent, prettyPrint);
  }

  public void validate() throws TException {
    // check for required fields
  }

}

