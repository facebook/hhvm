// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package terse_write

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	cpp0 "thrift/annotation/cpp"
	hack1 "thrift/annotation/hack"
	thrift2 "thrift/annotation/thrift"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var _ = cpp0.GoUnusedProtection__
var _ = hack1.GoUnusedProtection__
var _ = thrift2.GoUnusedProtection__
var GoUnusedProtection__ int;

type MyEnum int64
const (
  MyEnum_ME0 MyEnum = 0
  MyEnum_ME1 MyEnum = 1
)

var MyEnumToName = map[MyEnum]string {
  MyEnum_ME0: "ME0",
  MyEnum_ME1: "ME1",
}

var MyEnumToValue = map[string]MyEnum {
  "ME0": MyEnum_ME0,
  "ME1": MyEnum_ME1,
}

var MyEnumNames = []string {
  "ME0",
  "ME1",
}

var MyEnumValues = []MyEnum {
  MyEnum_ME0,
  MyEnum_ME1,
}

func (p MyEnum) String() string {
  if v, ok := MyEnumToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func MyEnumFromString(s string) (MyEnum, error) {
  if v, ok := MyEnumToValue[s]; ok {
    return v, nil
  }
  return MyEnum(0), fmt.Errorf("not a valid MyEnum string")
}

func MyEnumPtr(v MyEnum) *MyEnum { return &v }

type MyInteger = int32

func MyIntegerPtr(v MyInteger) *MyInteger { return &v }

type MyStruct struct {
}

func NewMyStruct() *MyStruct {
  return &MyStruct{}
}

type MyStructBuilder struct {
  obj *MyStruct
}

func NewMyStructBuilder() *MyStructBuilder{
  return &MyStructBuilder{
    obj: NewMyStruct(),
  }
}

func (p MyStructBuilder) Emit() *MyStruct{
  return &MyStruct{
  }
}

func (p *MyStruct) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStruct) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStruct) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("MyStruct({})")
}

// Attributes:
//  - Field1
type MyStructWithCustomDefault struct {
  Field1 int64 `thrift:"field1,1" db:"field1" json:"field1"`
}

func NewMyStructWithCustomDefault() *MyStructWithCustomDefault {
  return &MyStructWithCustomDefault{
    Field1: 1,
  }
}


func (p *MyStructWithCustomDefault) GetField1() int64 {
  return p.Field1
}
type MyStructWithCustomDefaultBuilder struct {
  obj *MyStructWithCustomDefault
}

func NewMyStructWithCustomDefaultBuilder() *MyStructWithCustomDefaultBuilder{
  return &MyStructWithCustomDefaultBuilder{
    obj: NewMyStructWithCustomDefault(),
  }
}

func (p MyStructWithCustomDefaultBuilder) Emit() *MyStructWithCustomDefault{
  return &MyStructWithCustomDefault{
    Field1: p.obj.Field1,
  }
}

func (m *MyStructWithCustomDefaultBuilder) Field1(field1 int64) *MyStructWithCustomDefaultBuilder {
  m.obj.Field1 = field1
  return m
}

func (m *MyStructWithCustomDefault) SetField1(field1 int64) *MyStructWithCustomDefault {
  m.Field1 = field1
  return m
}

func (p *MyStructWithCustomDefault) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStructWithCustomDefault)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Field1 = v
  }
  return nil
}

func (p *MyStructWithCustomDefault) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStructWithCustomDefault"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStructWithCustomDefault) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("field1", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:field1: ", p), err) }
  if err := oprot.WriteI64(int64(p.Field1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.field1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:field1: ", p), err) }
  return err
}

func (p *MyStructWithCustomDefault) String() string {
  if p == nil {
    return "<nil>"
  }

  field1Val := fmt.Sprintf("%v", p.Field1)
  return fmt.Sprintf("MyStructWithCustomDefault({Field1:%s})", field1Val)
}

// Attributes:
//  - BoolField
//  - ByteField
//  - ShortField
//  - IntField
//  - LongField
//  - FloatField
//  - DoubleField
//  - StringField
//  - BinaryField
//  - EnumField
//  - ListField
//  - SetField
//  - MapField
//  - StructField
type StructLevelTerseStruct struct {
  BoolField bool `thrift:"bool_field,1" db:"bool_field" json:"bool_field"`
  ByteField int8 `thrift:"byte_field,2" db:"byte_field" json:"byte_field"`
  ShortField int16 `thrift:"short_field,3" db:"short_field" json:"short_field"`
  IntField int32 `thrift:"int_field,4" db:"int_field" json:"int_field"`
  LongField int64 `thrift:"long_field,5" db:"long_field" json:"long_field"`
  FloatField float32 `thrift:"float_field,6" db:"float_field" json:"float_field"`
  DoubleField float64 `thrift:"double_field,7" db:"double_field" json:"double_field"`
  StringField string `thrift:"string_field,8" db:"string_field" json:"string_field"`
  BinaryField []byte `thrift:"binary_field,9" db:"binary_field" json:"binary_field"`
  EnumField MyEnum `thrift:"enum_field,10" db:"enum_field" json:"enum_field"`
  ListField []int16 `thrift:"list_field,11" db:"list_field" json:"list_field"`
  SetField []int16 `thrift:"set_field,12" db:"set_field" json:"set_field"`
  MapField map[int16]int16 `thrift:"map_field,13" db:"map_field" json:"map_field"`
  StructField *MyStruct `thrift:"struct_field,14" db:"struct_field" json:"struct_field"`
}

func NewStructLevelTerseStruct() *StructLevelTerseStruct {
  return &StructLevelTerseStruct{
    StructField: NewMyStruct(),
  }
}


func (p *StructLevelTerseStruct) GetBoolField() bool {
  return p.BoolField
}

func (p *StructLevelTerseStruct) GetByteField() int8 {
  return p.ByteField
}

func (p *StructLevelTerseStruct) GetShortField() int16 {
  return p.ShortField
}

func (p *StructLevelTerseStruct) GetIntField() int32 {
  return p.IntField
}

func (p *StructLevelTerseStruct) GetLongField() int64 {
  return p.LongField
}

func (p *StructLevelTerseStruct) GetFloatField() float32 {
  return p.FloatField
}

func (p *StructLevelTerseStruct) GetDoubleField() float64 {
  return p.DoubleField
}

func (p *StructLevelTerseStruct) GetStringField() string {
  return p.StringField
}

func (p *StructLevelTerseStruct) GetBinaryField() []byte {
  return p.BinaryField
}

func (p *StructLevelTerseStruct) GetEnumField() MyEnum {
  return p.EnumField
}

func (p *StructLevelTerseStruct) GetListField() []int16 {
  return p.ListField
}

func (p *StructLevelTerseStruct) GetSetField() []int16 {
  return p.SetField
}

func (p *StructLevelTerseStruct) GetMapField() map[int16]int16 {
  return p.MapField
}
var StructLevelTerseStruct_StructField_DEFAULT *MyStruct
func (p *StructLevelTerseStruct) GetStructField() *MyStruct {
  if !p.IsSetStructField() {
    return StructLevelTerseStruct_StructField_DEFAULT
  }
  return p.StructField
}
func (p *StructLevelTerseStruct) DefaultGetStructField() *MyStruct {
  if !p.IsSetStructField() {
    return NewMyStruct()
  }
  return p.StructField
}
func (p *StructLevelTerseStruct) IsSetStructField() bool {
  return p != nil && p.StructField != nil
}

type StructLevelTerseStructBuilder struct {
  obj *StructLevelTerseStruct
}

func NewStructLevelTerseStructBuilder() *StructLevelTerseStructBuilder{
  return &StructLevelTerseStructBuilder{
    obj: NewStructLevelTerseStruct(),
  }
}

func (p StructLevelTerseStructBuilder) Emit() *StructLevelTerseStruct{
  return &StructLevelTerseStruct{
    BoolField: p.obj.BoolField,
    ByteField: p.obj.ByteField,
    ShortField: p.obj.ShortField,
    IntField: p.obj.IntField,
    LongField: p.obj.LongField,
    FloatField: p.obj.FloatField,
    DoubleField: p.obj.DoubleField,
    StringField: p.obj.StringField,
    BinaryField: p.obj.BinaryField,
    EnumField: p.obj.EnumField,
    ListField: p.obj.ListField,
    SetField: p.obj.SetField,
    MapField: p.obj.MapField,
    StructField: p.obj.StructField,
  }
}

func (s *StructLevelTerseStructBuilder) BoolField(boolField bool) *StructLevelTerseStructBuilder {
  s.obj.BoolField = boolField
  return s
}

func (s *StructLevelTerseStructBuilder) ByteField(byteField int8) *StructLevelTerseStructBuilder {
  s.obj.ByteField = byteField
  return s
}

func (s *StructLevelTerseStructBuilder) ShortField(shortField int16) *StructLevelTerseStructBuilder {
  s.obj.ShortField = shortField
  return s
}

func (s *StructLevelTerseStructBuilder) IntField(intField int32) *StructLevelTerseStructBuilder {
  s.obj.IntField = intField
  return s
}

func (s *StructLevelTerseStructBuilder) LongField(longField int64) *StructLevelTerseStructBuilder {
  s.obj.LongField = longField
  return s
}

func (s *StructLevelTerseStructBuilder) FloatField(floatField float32) *StructLevelTerseStructBuilder {
  s.obj.FloatField = floatField
  return s
}

func (s *StructLevelTerseStructBuilder) DoubleField(doubleField float64) *StructLevelTerseStructBuilder {
  s.obj.DoubleField = doubleField
  return s
}

func (s *StructLevelTerseStructBuilder) StringField(stringField string) *StructLevelTerseStructBuilder {
  s.obj.StringField = stringField
  return s
}

func (s *StructLevelTerseStructBuilder) BinaryField(binaryField []byte) *StructLevelTerseStructBuilder {
  s.obj.BinaryField = binaryField
  return s
}

func (s *StructLevelTerseStructBuilder) EnumField(enumField MyEnum) *StructLevelTerseStructBuilder {
  s.obj.EnumField = enumField
  return s
}

func (s *StructLevelTerseStructBuilder) ListField(listField []int16) *StructLevelTerseStructBuilder {
  s.obj.ListField = listField
  return s
}

func (s *StructLevelTerseStructBuilder) SetField(setField []int16) *StructLevelTerseStructBuilder {
  s.obj.SetField = setField
  return s
}

func (s *StructLevelTerseStructBuilder) MapField(mapField map[int16]int16) *StructLevelTerseStructBuilder {
  s.obj.MapField = mapField
  return s
}

func (s *StructLevelTerseStructBuilder) StructField(structField *MyStruct) *StructLevelTerseStructBuilder {
  s.obj.StructField = structField
  return s
}

func (s *StructLevelTerseStruct) SetBoolField(boolField bool) *StructLevelTerseStruct {
  s.BoolField = boolField
  return s
}

func (s *StructLevelTerseStruct) SetByteField(byteField int8) *StructLevelTerseStruct {
  s.ByteField = byteField
  return s
}

func (s *StructLevelTerseStruct) SetShortField(shortField int16) *StructLevelTerseStruct {
  s.ShortField = shortField
  return s
}

func (s *StructLevelTerseStruct) SetIntField(intField int32) *StructLevelTerseStruct {
  s.IntField = intField
  return s
}

func (s *StructLevelTerseStruct) SetLongField(longField int64) *StructLevelTerseStruct {
  s.LongField = longField
  return s
}

func (s *StructLevelTerseStruct) SetFloatField(floatField float32) *StructLevelTerseStruct {
  s.FloatField = floatField
  return s
}

func (s *StructLevelTerseStruct) SetDoubleField(doubleField float64) *StructLevelTerseStruct {
  s.DoubleField = doubleField
  return s
}

func (s *StructLevelTerseStruct) SetStringField(stringField string) *StructLevelTerseStruct {
  s.StringField = stringField
  return s
}

func (s *StructLevelTerseStruct) SetBinaryField(binaryField []byte) *StructLevelTerseStruct {
  s.BinaryField = binaryField
  return s
}

func (s *StructLevelTerseStruct) SetEnumField(enumField MyEnum) *StructLevelTerseStruct {
  s.EnumField = enumField
  return s
}

func (s *StructLevelTerseStruct) SetListField(listField []int16) *StructLevelTerseStruct {
  s.ListField = listField
  return s
}

func (s *StructLevelTerseStruct) SetSetField(setField []int16) *StructLevelTerseStruct {
  s.SetField = setField
  return s
}

func (s *StructLevelTerseStruct) SetMapField(mapField map[int16]int16) *StructLevelTerseStruct {
  s.MapField = mapField
  return s
}

func (s *StructLevelTerseStruct) SetStructField(structField *MyStruct) *StructLevelTerseStruct {
  s.StructField = structField
  return s
}

func (p *StructLevelTerseStruct) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 13:
      if err := p.ReadField13(iprot); err != nil {
        return err
      }
    case 14:
      if err := p.ReadField14(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StructLevelTerseStruct)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.BoolField = v
  }
  return nil
}

func (p *StructLevelTerseStruct)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := int8(v)
    p.ByteField = temp
  }
  return nil
}

func (p *StructLevelTerseStruct)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.ShortField = v
  }
  return nil
}

func (p *StructLevelTerseStruct)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.IntField = v
  }
  return nil
}

func (p *StructLevelTerseStruct)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.LongField = v
  }
  return nil
}

func (p *StructLevelTerseStruct)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadFloat(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.FloatField = v
  }
  return nil
}

func (p *StructLevelTerseStruct)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 7: ", err)
  } else {
    p.DoubleField = v
  }
  return nil
}

func (p *StructLevelTerseStruct)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 8: ", err)
  } else {
    p.StringField = v
  }
  return nil
}

func (p *StructLevelTerseStruct)  ReadField9(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 9: ", err)
  } else {
    p.BinaryField = v
  }
  return nil
}

func (p *StructLevelTerseStruct)  ReadField10(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 10: ", err)
  } else {
    temp := MyEnum(v)
    p.EnumField = temp
  }
  return nil
}

func (p *StructLevelTerseStruct)  ReadField11(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int16, 0, size)
  p.ListField =  tSlice
  for i := 0; i < size; i ++ {
    var _elem3 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem3 = v
    }
    p.ListField = append(p.ListField, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *StructLevelTerseStruct)  ReadField12(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]int16, 0, size)
  p.SetField =  tSet
  for i := 0; i < size; i ++ {
    var _elem4 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem4 = v
    }
    p.SetField = append(p.SetField, _elem4)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *StructLevelTerseStruct)  ReadField13(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int16]int16, size)
  p.MapField =  tMap
  for i := 0; i < size; i ++ {
    var _key5 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key5 = v
    }
    var _val6 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val6 = v
    }
    p.MapField[_key5] = _val6
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *StructLevelTerseStruct)  ReadField14(iprot thrift.Protocol) error {
  p.StructField = NewMyStruct()
  if err := p.StructField.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StructField), err)
  }
  return nil
}

func (p *StructLevelTerseStruct) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("StructLevelTerseStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := p.writeField10(oprot); err != nil { return err }
  if err := p.writeField11(oprot); err != nil { return err }
  if err := p.writeField12(oprot); err != nil { return err }
  if err := p.writeField13(oprot); err != nil { return err }
  if err := p.writeField14(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StructLevelTerseStruct) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("bool_field", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bool_field: ", p), err) }
  if err := oprot.WriteBool(bool(p.BoolField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bool_field (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bool_field: ", p), err) }
  return err
}

func (p *StructLevelTerseStruct) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("byte_field", thrift.BYTE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:byte_field: ", p), err) }
  if err := oprot.WriteByte(byte(p.ByteField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.byte_field (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:byte_field: ", p), err) }
  return err
}

func (p *StructLevelTerseStruct) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("short_field", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:short_field: ", p), err) }
  if err := oprot.WriteI16(int16(p.ShortField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.short_field (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:short_field: ", p), err) }
  return err
}

func (p *StructLevelTerseStruct) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("int_field", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:int_field: ", p), err) }
  if err := oprot.WriteI32(int32(p.IntField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.int_field (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:int_field: ", p), err) }
  return err
}

func (p *StructLevelTerseStruct) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("long_field", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:long_field: ", p), err) }
  if err := oprot.WriteI64(int64(p.LongField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.long_field (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:long_field: ", p), err) }
  return err
}

func (p *StructLevelTerseStruct) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("float_field", thrift.FLOAT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:float_field: ", p), err) }
  if err := oprot.WriteFloat(float32(p.FloatField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.float_field (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:float_field: ", p), err) }
  return err
}

func (p *StructLevelTerseStruct) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("double_field", thrift.DOUBLE, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:double_field: ", p), err) }
  if err := oprot.WriteDouble(float64(p.DoubleField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.double_field (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:double_field: ", p), err) }
  return err
}

func (p *StructLevelTerseStruct) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("string_field", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:string_field: ", p), err) }
  if err := oprot.WriteString(string(p.StringField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.string_field (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:string_field: ", p), err) }
  return err
}

func (p *StructLevelTerseStruct) writeField9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("binary_field", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:binary_field: ", p), err) }
  if err := oprot.WriteBinary(p.BinaryField); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.binary_field (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:binary_field: ", p), err) }
  return err
}

func (p *StructLevelTerseStruct) writeField10(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("enum_field", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:enum_field: ", p), err) }
  if err := oprot.WriteI32(int32(p.EnumField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enum_field (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:enum_field: ", p), err) }
  return err
}

func (p *StructLevelTerseStruct) writeField11(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("list_field", thrift.LIST, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:list_field: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I16, len(p.ListField)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ListField {
    if err := oprot.WriteI16(int16(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:list_field: ", p), err) }
  return err
}

func (p *StructLevelTerseStruct) writeField12(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("set_field", thrift.SET, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:set_field: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.I16, len(p.SetField)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  set := make(map[int16]bool, len(p.SetField))
  for _, v := range p.SetField {
    if ok := set[v]; ok {
      return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
    }
    set[v] = true
  }
  for _, v := range p.SetField {
    if err := oprot.WriteI16(int16(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:set_field: ", p), err) }
  return err
}

func (p *StructLevelTerseStruct) writeField13(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("map_field", thrift.MAP, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:map_field: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I16, thrift.I16, len(p.MapField)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.MapField {
    if err := oprot.WriteI16(int16(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI16(int16(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:map_field: ", p), err) }
  return err
}

func (p *StructLevelTerseStruct) writeField14(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("struct_field", thrift.STRUCT, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:struct_field: ", p), err) }
  if err := p.StructField.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StructField), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:struct_field: ", p), err) }
  return err
}

func (p *StructLevelTerseStruct) String() string {
  if p == nil {
    return "<nil>"
  }

  boolFieldVal := fmt.Sprintf("%v", p.BoolField)
  byteFieldVal := fmt.Sprintf("%v", p.ByteField)
  shortFieldVal := fmt.Sprintf("%v", p.ShortField)
  intFieldVal := fmt.Sprintf("%v", p.IntField)
  longFieldVal := fmt.Sprintf("%v", p.LongField)
  floatFieldVal := fmt.Sprintf("%v", p.FloatField)
  doubleFieldVal := fmt.Sprintf("%v", p.DoubleField)
  stringFieldVal := fmt.Sprintf("%v", p.StringField)
  binaryFieldVal := fmt.Sprintf("%v", p.BinaryField)
  enumFieldVal := fmt.Sprintf("%v", p.EnumField)
  listFieldVal := fmt.Sprintf("%v", p.ListField)
  setFieldVal := fmt.Sprintf("%v", p.SetField)
  mapFieldVal := fmt.Sprintf("%v", p.MapField)
  var structFieldVal string
  if p.StructField == nil {
    structFieldVal = "<nil>"
  } else {
    structFieldVal = fmt.Sprintf("%v", p.StructField)
  }
  return fmt.Sprintf("StructLevelTerseStruct({BoolField:%s ByteField:%s ShortField:%s IntField:%s LongField:%s FloatField:%s DoubleField:%s StringField:%s BinaryField:%s EnumField:%s ListField:%s SetField:%s MapField:%s StructField:%s})", boolFieldVal, byteFieldVal, shortFieldVal, intFieldVal, longFieldVal, floatFieldVal, doubleFieldVal, stringFieldVal, binaryFieldVal, enumFieldVal, listFieldVal, setFieldVal, mapFieldVal, structFieldVal)
}

// Attributes:
//  - TerseBoolField
//  - TerseByteField
//  - TerseShortField
//  - TerseIntField
//  - TerseLongField
//  - TerseFloatField
//  - TerseDoubleField
//  - TerseStringField
//  - TerseBinaryField
//  - TerseEnumField
//  - TerseListField
//  - TerseSetField
//  - TerseMapField
//  - TerseStructField
//  - BoolField
//  - ByteField
//  - ShortField
//  - IntField
//  - LongField
//  - FloatField
//  - DoubleField
//  - StringField
//  - BinaryField
//  - EnumField
//  - ListField
//  - SetField
//  - MapField
//  - StructField
type FieldLevelTerseStruct struct {
  TerseBoolField bool `thrift:"terse_bool_field,1" db:"terse_bool_field" json:"terse_bool_field"`
  TerseByteField int8 `thrift:"terse_byte_field,2" db:"terse_byte_field" json:"terse_byte_field"`
  TerseShortField int16 `thrift:"terse_short_field,3" db:"terse_short_field" json:"terse_short_field"`
  TerseIntField int32 `thrift:"terse_int_field,4" db:"terse_int_field" json:"terse_int_field"`
  TerseLongField int64 `thrift:"terse_long_field,5" db:"terse_long_field" json:"terse_long_field"`
  TerseFloatField float32 `thrift:"terse_float_field,6" db:"terse_float_field" json:"terse_float_field"`
  TerseDoubleField float64 `thrift:"terse_double_field,7" db:"terse_double_field" json:"terse_double_field"`
  TerseStringField string `thrift:"terse_string_field,8" db:"terse_string_field" json:"terse_string_field"`
  TerseBinaryField []byte `thrift:"terse_binary_field,9" db:"terse_binary_field" json:"terse_binary_field"`
  TerseEnumField MyEnum `thrift:"terse_enum_field,10" db:"terse_enum_field" json:"terse_enum_field"`
  TerseListField []int16 `thrift:"terse_list_field,11" db:"terse_list_field" json:"terse_list_field"`
  TerseSetField []int16 `thrift:"terse_set_field,12" db:"terse_set_field" json:"terse_set_field"`
  TerseMapField map[int16]int16 `thrift:"terse_map_field,13" db:"terse_map_field" json:"terse_map_field"`
  TerseStructField *MyStruct `thrift:"terse_struct_field,14" db:"terse_struct_field" json:"terse_struct_field"`
  BoolField bool `thrift:"bool_field,15" db:"bool_field" json:"bool_field"`
  ByteField int8 `thrift:"byte_field,16" db:"byte_field" json:"byte_field"`
  ShortField int16 `thrift:"short_field,17" db:"short_field" json:"short_field"`
  IntField int32 `thrift:"int_field,18" db:"int_field" json:"int_field"`
  LongField int64 `thrift:"long_field,19" db:"long_field" json:"long_field"`
  FloatField float32 `thrift:"float_field,20" db:"float_field" json:"float_field"`
  DoubleField float64 `thrift:"double_field,21" db:"double_field" json:"double_field"`
  StringField string `thrift:"string_field,22" db:"string_field" json:"string_field"`
  BinaryField []byte `thrift:"binary_field,23" db:"binary_field" json:"binary_field"`
  EnumField MyEnum `thrift:"enum_field,24" db:"enum_field" json:"enum_field"`
  ListField []int16 `thrift:"list_field,25" db:"list_field" json:"list_field"`
  SetField []int16 `thrift:"set_field,26" db:"set_field" json:"set_field"`
  MapField map[int16]int16 `thrift:"map_field,27" db:"map_field" json:"map_field"`
  StructField *MyStruct `thrift:"struct_field,28" db:"struct_field" json:"struct_field"`
}

func NewFieldLevelTerseStruct() *FieldLevelTerseStruct {
  return &FieldLevelTerseStruct{
    TerseStructField: NewMyStruct(),
    StructField: NewMyStruct(),
  }
}


func (p *FieldLevelTerseStruct) GetTerseBoolField() bool {
  return p.TerseBoolField
}

func (p *FieldLevelTerseStruct) GetTerseByteField() int8 {
  return p.TerseByteField
}

func (p *FieldLevelTerseStruct) GetTerseShortField() int16 {
  return p.TerseShortField
}

func (p *FieldLevelTerseStruct) GetTerseIntField() int32 {
  return p.TerseIntField
}

func (p *FieldLevelTerseStruct) GetTerseLongField() int64 {
  return p.TerseLongField
}

func (p *FieldLevelTerseStruct) GetTerseFloatField() float32 {
  return p.TerseFloatField
}

func (p *FieldLevelTerseStruct) GetTerseDoubleField() float64 {
  return p.TerseDoubleField
}

func (p *FieldLevelTerseStruct) GetTerseStringField() string {
  return p.TerseStringField
}

func (p *FieldLevelTerseStruct) GetTerseBinaryField() []byte {
  return p.TerseBinaryField
}

func (p *FieldLevelTerseStruct) GetTerseEnumField() MyEnum {
  return p.TerseEnumField
}

func (p *FieldLevelTerseStruct) GetTerseListField() []int16 {
  return p.TerseListField
}

func (p *FieldLevelTerseStruct) GetTerseSetField() []int16 {
  return p.TerseSetField
}

func (p *FieldLevelTerseStruct) GetTerseMapField() map[int16]int16 {
  return p.TerseMapField
}
var FieldLevelTerseStruct_TerseStructField_DEFAULT *MyStruct
func (p *FieldLevelTerseStruct) GetTerseStructField() *MyStruct {
  if !p.IsSetTerseStructField() {
    return FieldLevelTerseStruct_TerseStructField_DEFAULT
  }
  return p.TerseStructField
}
func (p *FieldLevelTerseStruct) DefaultGetTerseStructField() *MyStruct {
  if !p.IsSetTerseStructField() {
    return NewMyStruct()
  }
  return p.TerseStructField
}

func (p *FieldLevelTerseStruct) GetBoolField() bool {
  return p.BoolField
}

func (p *FieldLevelTerseStruct) GetByteField() int8 {
  return p.ByteField
}

func (p *FieldLevelTerseStruct) GetShortField() int16 {
  return p.ShortField
}

func (p *FieldLevelTerseStruct) GetIntField() int32 {
  return p.IntField
}

func (p *FieldLevelTerseStruct) GetLongField() int64 {
  return p.LongField
}

func (p *FieldLevelTerseStruct) GetFloatField() float32 {
  return p.FloatField
}

func (p *FieldLevelTerseStruct) GetDoubleField() float64 {
  return p.DoubleField
}

func (p *FieldLevelTerseStruct) GetStringField() string {
  return p.StringField
}

func (p *FieldLevelTerseStruct) GetBinaryField() []byte {
  return p.BinaryField
}

func (p *FieldLevelTerseStruct) GetEnumField() MyEnum {
  return p.EnumField
}

func (p *FieldLevelTerseStruct) GetListField() []int16 {
  return p.ListField
}

func (p *FieldLevelTerseStruct) GetSetField() []int16 {
  return p.SetField
}

func (p *FieldLevelTerseStruct) GetMapField() map[int16]int16 {
  return p.MapField
}
var FieldLevelTerseStruct_StructField_DEFAULT *MyStruct
func (p *FieldLevelTerseStruct) GetStructField() *MyStruct {
  if !p.IsSetStructField() {
    return FieldLevelTerseStruct_StructField_DEFAULT
  }
  return p.StructField
}
func (p *FieldLevelTerseStruct) DefaultGetStructField() *MyStruct {
  if !p.IsSetStructField() {
    return NewMyStruct()
  }
  return p.StructField
}
func (p *FieldLevelTerseStruct) IsSetTerseStructField() bool {
  return p != nil && p.TerseStructField != nil
}

func (p *FieldLevelTerseStruct) IsSetStructField() bool {
  return p != nil && p.StructField != nil
}

type FieldLevelTerseStructBuilder struct {
  obj *FieldLevelTerseStruct
}

func NewFieldLevelTerseStructBuilder() *FieldLevelTerseStructBuilder{
  return &FieldLevelTerseStructBuilder{
    obj: NewFieldLevelTerseStruct(),
  }
}

func (p FieldLevelTerseStructBuilder) Emit() *FieldLevelTerseStruct{
  return &FieldLevelTerseStruct{
    TerseBoolField: p.obj.TerseBoolField,
    TerseByteField: p.obj.TerseByteField,
    TerseShortField: p.obj.TerseShortField,
    TerseIntField: p.obj.TerseIntField,
    TerseLongField: p.obj.TerseLongField,
    TerseFloatField: p.obj.TerseFloatField,
    TerseDoubleField: p.obj.TerseDoubleField,
    TerseStringField: p.obj.TerseStringField,
    TerseBinaryField: p.obj.TerseBinaryField,
    TerseEnumField: p.obj.TerseEnumField,
    TerseListField: p.obj.TerseListField,
    TerseSetField: p.obj.TerseSetField,
    TerseMapField: p.obj.TerseMapField,
    TerseStructField: p.obj.TerseStructField,
    BoolField: p.obj.BoolField,
    ByteField: p.obj.ByteField,
    ShortField: p.obj.ShortField,
    IntField: p.obj.IntField,
    LongField: p.obj.LongField,
    FloatField: p.obj.FloatField,
    DoubleField: p.obj.DoubleField,
    StringField: p.obj.StringField,
    BinaryField: p.obj.BinaryField,
    EnumField: p.obj.EnumField,
    ListField: p.obj.ListField,
    SetField: p.obj.SetField,
    MapField: p.obj.MapField,
    StructField: p.obj.StructField,
  }
}

func (f *FieldLevelTerseStructBuilder) TerseBoolField(terseBoolField bool) *FieldLevelTerseStructBuilder {
  f.obj.TerseBoolField = terseBoolField
  return f
}

func (f *FieldLevelTerseStructBuilder) TerseByteField(terseByteField int8) *FieldLevelTerseStructBuilder {
  f.obj.TerseByteField = terseByteField
  return f
}

func (f *FieldLevelTerseStructBuilder) TerseShortField(terseShortField int16) *FieldLevelTerseStructBuilder {
  f.obj.TerseShortField = terseShortField
  return f
}

func (f *FieldLevelTerseStructBuilder) TerseIntField(terseIntField int32) *FieldLevelTerseStructBuilder {
  f.obj.TerseIntField = terseIntField
  return f
}

func (f *FieldLevelTerseStructBuilder) TerseLongField(terseLongField int64) *FieldLevelTerseStructBuilder {
  f.obj.TerseLongField = terseLongField
  return f
}

func (f *FieldLevelTerseStructBuilder) TerseFloatField(terseFloatField float32) *FieldLevelTerseStructBuilder {
  f.obj.TerseFloatField = terseFloatField
  return f
}

func (f *FieldLevelTerseStructBuilder) TerseDoubleField(terseDoubleField float64) *FieldLevelTerseStructBuilder {
  f.obj.TerseDoubleField = terseDoubleField
  return f
}

func (f *FieldLevelTerseStructBuilder) TerseStringField(terseStringField string) *FieldLevelTerseStructBuilder {
  f.obj.TerseStringField = terseStringField
  return f
}

func (f *FieldLevelTerseStructBuilder) TerseBinaryField(terseBinaryField []byte) *FieldLevelTerseStructBuilder {
  f.obj.TerseBinaryField = terseBinaryField
  return f
}

func (f *FieldLevelTerseStructBuilder) TerseEnumField(terseEnumField MyEnum) *FieldLevelTerseStructBuilder {
  f.obj.TerseEnumField = terseEnumField
  return f
}

func (f *FieldLevelTerseStructBuilder) TerseListField(terseListField []int16) *FieldLevelTerseStructBuilder {
  f.obj.TerseListField = terseListField
  return f
}

func (f *FieldLevelTerseStructBuilder) TerseSetField(terseSetField []int16) *FieldLevelTerseStructBuilder {
  f.obj.TerseSetField = terseSetField
  return f
}

func (f *FieldLevelTerseStructBuilder) TerseMapField(terseMapField map[int16]int16) *FieldLevelTerseStructBuilder {
  f.obj.TerseMapField = terseMapField
  return f
}

func (f *FieldLevelTerseStructBuilder) TerseStructField(terseStructField *MyStruct) *FieldLevelTerseStructBuilder {
  f.obj.TerseStructField = terseStructField
  return f
}

func (f *FieldLevelTerseStructBuilder) BoolField(boolField bool) *FieldLevelTerseStructBuilder {
  f.obj.BoolField = boolField
  return f
}

func (f *FieldLevelTerseStructBuilder) ByteField(byteField int8) *FieldLevelTerseStructBuilder {
  f.obj.ByteField = byteField
  return f
}

func (f *FieldLevelTerseStructBuilder) ShortField(shortField int16) *FieldLevelTerseStructBuilder {
  f.obj.ShortField = shortField
  return f
}

func (f *FieldLevelTerseStructBuilder) IntField(intField int32) *FieldLevelTerseStructBuilder {
  f.obj.IntField = intField
  return f
}

func (f *FieldLevelTerseStructBuilder) LongField(longField int64) *FieldLevelTerseStructBuilder {
  f.obj.LongField = longField
  return f
}

func (f *FieldLevelTerseStructBuilder) FloatField(floatField float32) *FieldLevelTerseStructBuilder {
  f.obj.FloatField = floatField
  return f
}

func (f *FieldLevelTerseStructBuilder) DoubleField(doubleField float64) *FieldLevelTerseStructBuilder {
  f.obj.DoubleField = doubleField
  return f
}

func (f *FieldLevelTerseStructBuilder) StringField(stringField string) *FieldLevelTerseStructBuilder {
  f.obj.StringField = stringField
  return f
}

func (f *FieldLevelTerseStructBuilder) BinaryField(binaryField []byte) *FieldLevelTerseStructBuilder {
  f.obj.BinaryField = binaryField
  return f
}

func (f *FieldLevelTerseStructBuilder) EnumField(enumField MyEnum) *FieldLevelTerseStructBuilder {
  f.obj.EnumField = enumField
  return f
}

func (f *FieldLevelTerseStructBuilder) ListField(listField []int16) *FieldLevelTerseStructBuilder {
  f.obj.ListField = listField
  return f
}

func (f *FieldLevelTerseStructBuilder) SetField(setField []int16) *FieldLevelTerseStructBuilder {
  f.obj.SetField = setField
  return f
}

func (f *FieldLevelTerseStructBuilder) MapField(mapField map[int16]int16) *FieldLevelTerseStructBuilder {
  f.obj.MapField = mapField
  return f
}

func (f *FieldLevelTerseStructBuilder) StructField(structField *MyStruct) *FieldLevelTerseStructBuilder {
  f.obj.StructField = structField
  return f
}

func (f *FieldLevelTerseStruct) SetTerseBoolField(terseBoolField bool) *FieldLevelTerseStruct {
  f.TerseBoolField = terseBoolField
  return f
}

func (f *FieldLevelTerseStruct) SetTerseByteField(terseByteField int8) *FieldLevelTerseStruct {
  f.TerseByteField = terseByteField
  return f
}

func (f *FieldLevelTerseStruct) SetTerseShortField(terseShortField int16) *FieldLevelTerseStruct {
  f.TerseShortField = terseShortField
  return f
}

func (f *FieldLevelTerseStruct) SetTerseIntField(terseIntField int32) *FieldLevelTerseStruct {
  f.TerseIntField = terseIntField
  return f
}

func (f *FieldLevelTerseStruct) SetTerseLongField(terseLongField int64) *FieldLevelTerseStruct {
  f.TerseLongField = terseLongField
  return f
}

func (f *FieldLevelTerseStruct) SetTerseFloatField(terseFloatField float32) *FieldLevelTerseStruct {
  f.TerseFloatField = terseFloatField
  return f
}

func (f *FieldLevelTerseStruct) SetTerseDoubleField(terseDoubleField float64) *FieldLevelTerseStruct {
  f.TerseDoubleField = terseDoubleField
  return f
}

func (f *FieldLevelTerseStruct) SetTerseStringField(terseStringField string) *FieldLevelTerseStruct {
  f.TerseStringField = terseStringField
  return f
}

func (f *FieldLevelTerseStruct) SetTerseBinaryField(terseBinaryField []byte) *FieldLevelTerseStruct {
  f.TerseBinaryField = terseBinaryField
  return f
}

func (f *FieldLevelTerseStruct) SetTerseEnumField(terseEnumField MyEnum) *FieldLevelTerseStruct {
  f.TerseEnumField = terseEnumField
  return f
}

func (f *FieldLevelTerseStruct) SetTerseListField(terseListField []int16) *FieldLevelTerseStruct {
  f.TerseListField = terseListField
  return f
}

func (f *FieldLevelTerseStruct) SetTerseSetField(terseSetField []int16) *FieldLevelTerseStruct {
  f.TerseSetField = terseSetField
  return f
}

func (f *FieldLevelTerseStruct) SetTerseMapField(terseMapField map[int16]int16) *FieldLevelTerseStruct {
  f.TerseMapField = terseMapField
  return f
}

func (f *FieldLevelTerseStruct) SetTerseStructField(terseStructField *MyStruct) *FieldLevelTerseStruct {
  f.TerseStructField = terseStructField
  return f
}

func (f *FieldLevelTerseStruct) SetBoolField(boolField bool) *FieldLevelTerseStruct {
  f.BoolField = boolField
  return f
}

func (f *FieldLevelTerseStruct) SetByteField(byteField int8) *FieldLevelTerseStruct {
  f.ByteField = byteField
  return f
}

func (f *FieldLevelTerseStruct) SetShortField(shortField int16) *FieldLevelTerseStruct {
  f.ShortField = shortField
  return f
}

func (f *FieldLevelTerseStruct) SetIntField(intField int32) *FieldLevelTerseStruct {
  f.IntField = intField
  return f
}

func (f *FieldLevelTerseStruct) SetLongField(longField int64) *FieldLevelTerseStruct {
  f.LongField = longField
  return f
}

func (f *FieldLevelTerseStruct) SetFloatField(floatField float32) *FieldLevelTerseStruct {
  f.FloatField = floatField
  return f
}

func (f *FieldLevelTerseStruct) SetDoubleField(doubleField float64) *FieldLevelTerseStruct {
  f.DoubleField = doubleField
  return f
}

func (f *FieldLevelTerseStruct) SetStringField(stringField string) *FieldLevelTerseStruct {
  f.StringField = stringField
  return f
}

func (f *FieldLevelTerseStruct) SetBinaryField(binaryField []byte) *FieldLevelTerseStruct {
  f.BinaryField = binaryField
  return f
}

func (f *FieldLevelTerseStruct) SetEnumField(enumField MyEnum) *FieldLevelTerseStruct {
  f.EnumField = enumField
  return f
}

func (f *FieldLevelTerseStruct) SetListField(listField []int16) *FieldLevelTerseStruct {
  f.ListField = listField
  return f
}

func (f *FieldLevelTerseStruct) SetSetField(setField []int16) *FieldLevelTerseStruct {
  f.SetField = setField
  return f
}

func (f *FieldLevelTerseStruct) SetMapField(mapField map[int16]int16) *FieldLevelTerseStruct {
  f.MapField = mapField
  return f
}

func (f *FieldLevelTerseStruct) SetStructField(structField *MyStruct) *FieldLevelTerseStruct {
  f.StructField = structField
  return f
}

func (p *FieldLevelTerseStruct) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 13:
      if err := p.ReadField13(iprot); err != nil {
        return err
      }
    case 14:
      if err := p.ReadField14(iprot); err != nil {
        return err
      }
    case 15:
      if err := p.ReadField15(iprot); err != nil {
        return err
      }
    case 16:
      if err := p.ReadField16(iprot); err != nil {
        return err
      }
    case 17:
      if err := p.ReadField17(iprot); err != nil {
        return err
      }
    case 18:
      if err := p.ReadField18(iprot); err != nil {
        return err
      }
    case 19:
      if err := p.ReadField19(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 21:
      if err := p.ReadField21(iprot); err != nil {
        return err
      }
    case 22:
      if err := p.ReadField22(iprot); err != nil {
        return err
      }
    case 23:
      if err := p.ReadField23(iprot); err != nil {
        return err
      }
    case 24:
      if err := p.ReadField24(iprot); err != nil {
        return err
      }
    case 25:
      if err := p.ReadField25(iprot); err != nil {
        return err
      }
    case 26:
      if err := p.ReadField26(iprot); err != nil {
        return err
      }
    case 27:
      if err := p.ReadField27(iprot); err != nil {
        return err
      }
    case 28:
      if err := p.ReadField28(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FieldLevelTerseStruct)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.TerseBoolField = v
  }
  return nil
}

func (p *FieldLevelTerseStruct)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := int8(v)
    p.TerseByteField = temp
  }
  return nil
}

func (p *FieldLevelTerseStruct)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.TerseShortField = v
  }
  return nil
}

func (p *FieldLevelTerseStruct)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.TerseIntField = v
  }
  return nil
}

func (p *FieldLevelTerseStruct)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.TerseLongField = v
  }
  return nil
}

func (p *FieldLevelTerseStruct)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadFloat(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.TerseFloatField = v
  }
  return nil
}

func (p *FieldLevelTerseStruct)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 7: ", err)
  } else {
    p.TerseDoubleField = v
  }
  return nil
}

func (p *FieldLevelTerseStruct)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 8: ", err)
  } else {
    p.TerseStringField = v
  }
  return nil
}

func (p *FieldLevelTerseStruct)  ReadField9(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 9: ", err)
  } else {
    p.TerseBinaryField = v
  }
  return nil
}

func (p *FieldLevelTerseStruct)  ReadField10(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 10: ", err)
  } else {
    temp := MyEnum(v)
    p.TerseEnumField = temp
  }
  return nil
}

func (p *FieldLevelTerseStruct)  ReadField11(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int16, 0, size)
  p.TerseListField =  tSlice
  for i := 0; i < size; i ++ {
    var _elem7 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem7 = v
    }
    p.TerseListField = append(p.TerseListField, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FieldLevelTerseStruct)  ReadField12(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]int16, 0, size)
  p.TerseSetField =  tSet
  for i := 0; i < size; i ++ {
    var _elem8 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem8 = v
    }
    p.TerseSetField = append(p.TerseSetField, _elem8)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *FieldLevelTerseStruct)  ReadField13(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int16]int16, size)
  p.TerseMapField =  tMap
  for i := 0; i < size; i ++ {
    var _key9 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key9 = v
    }
    var _val10 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val10 = v
    }
    p.TerseMapField[_key9] = _val10
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *FieldLevelTerseStruct)  ReadField14(iprot thrift.Protocol) error {
  p.TerseStructField = NewMyStruct()
  if err := p.TerseStructField.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TerseStructField), err)
  }
  return nil
}

func (p *FieldLevelTerseStruct)  ReadField15(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 15: ", err)
  } else {
    p.BoolField = v
  }
  return nil
}

func (p *FieldLevelTerseStruct)  ReadField16(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
    return thrift.PrependError("error reading field 16: ", err)
  } else {
    temp := int8(v)
    p.ByteField = temp
  }
  return nil
}

func (p *FieldLevelTerseStruct)  ReadField17(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
    return thrift.PrependError("error reading field 17: ", err)
  } else {
    p.ShortField = v
  }
  return nil
}

func (p *FieldLevelTerseStruct)  ReadField18(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 18: ", err)
  } else {
    p.IntField = v
  }
  return nil
}

func (p *FieldLevelTerseStruct)  ReadField19(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 19: ", err)
  } else {
    p.LongField = v
  }
  return nil
}

func (p *FieldLevelTerseStruct)  ReadField20(iprot thrift.Protocol) error {
  if v, err := iprot.ReadFloat(); err != nil {
    return thrift.PrependError("error reading field 20: ", err)
  } else {
    p.FloatField = v
  }
  return nil
}

func (p *FieldLevelTerseStruct)  ReadField21(iprot thrift.Protocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 21: ", err)
  } else {
    p.DoubleField = v
  }
  return nil
}

func (p *FieldLevelTerseStruct)  ReadField22(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 22: ", err)
  } else {
    p.StringField = v
  }
  return nil
}

func (p *FieldLevelTerseStruct)  ReadField23(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 23: ", err)
  } else {
    p.BinaryField = v
  }
  return nil
}

func (p *FieldLevelTerseStruct)  ReadField24(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 24: ", err)
  } else {
    temp := MyEnum(v)
    p.EnumField = temp
  }
  return nil
}

func (p *FieldLevelTerseStruct)  ReadField25(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int16, 0, size)
  p.ListField =  tSlice
  for i := 0; i < size; i ++ {
    var _elem11 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem11 = v
    }
    p.ListField = append(p.ListField, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FieldLevelTerseStruct)  ReadField26(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]int16, 0, size)
  p.SetField =  tSet
  for i := 0; i < size; i ++ {
    var _elem12 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem12 = v
    }
    p.SetField = append(p.SetField, _elem12)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *FieldLevelTerseStruct)  ReadField27(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int16]int16, size)
  p.MapField =  tMap
  for i := 0; i < size; i ++ {
    var _key13 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key13 = v
    }
    var _val14 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val14 = v
    }
    p.MapField[_key13] = _val14
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *FieldLevelTerseStruct)  ReadField28(iprot thrift.Protocol) error {
  p.StructField = NewMyStruct()
  if err := p.StructField.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StructField), err)
  }
  return nil
}

func (p *FieldLevelTerseStruct) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("FieldLevelTerseStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := p.writeField10(oprot); err != nil { return err }
  if err := p.writeField11(oprot); err != nil { return err }
  if err := p.writeField12(oprot); err != nil { return err }
  if err := p.writeField13(oprot); err != nil { return err }
  if err := p.writeField14(oprot); err != nil { return err }
  if err := p.writeField15(oprot); err != nil { return err }
  if err := p.writeField16(oprot); err != nil { return err }
  if err := p.writeField17(oprot); err != nil { return err }
  if err := p.writeField18(oprot); err != nil { return err }
  if err := p.writeField19(oprot); err != nil { return err }
  if err := p.writeField20(oprot); err != nil { return err }
  if err := p.writeField21(oprot); err != nil { return err }
  if err := p.writeField22(oprot); err != nil { return err }
  if err := p.writeField23(oprot); err != nil { return err }
  if err := p.writeField24(oprot); err != nil { return err }
  if err := p.writeField25(oprot); err != nil { return err }
  if err := p.writeField26(oprot); err != nil { return err }
  if err := p.writeField27(oprot); err != nil { return err }
  if err := p.writeField28(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FieldLevelTerseStruct) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("terse_bool_field", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:terse_bool_field: ", p), err) }
  if err := oprot.WriteBool(bool(p.TerseBoolField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.terse_bool_field (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:terse_bool_field: ", p), err) }
  return err
}

func (p *FieldLevelTerseStruct) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("terse_byte_field", thrift.BYTE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:terse_byte_field: ", p), err) }
  if err := oprot.WriteByte(byte(p.TerseByteField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.terse_byte_field (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:terse_byte_field: ", p), err) }
  return err
}

func (p *FieldLevelTerseStruct) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("terse_short_field", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:terse_short_field: ", p), err) }
  if err := oprot.WriteI16(int16(p.TerseShortField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.terse_short_field (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:terse_short_field: ", p), err) }
  return err
}

func (p *FieldLevelTerseStruct) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("terse_int_field", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:terse_int_field: ", p), err) }
  if err := oprot.WriteI32(int32(p.TerseIntField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.terse_int_field (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:terse_int_field: ", p), err) }
  return err
}

func (p *FieldLevelTerseStruct) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("terse_long_field", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:terse_long_field: ", p), err) }
  if err := oprot.WriteI64(int64(p.TerseLongField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.terse_long_field (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:terse_long_field: ", p), err) }
  return err
}

func (p *FieldLevelTerseStruct) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("terse_float_field", thrift.FLOAT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:terse_float_field: ", p), err) }
  if err := oprot.WriteFloat(float32(p.TerseFloatField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.terse_float_field (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:terse_float_field: ", p), err) }
  return err
}

func (p *FieldLevelTerseStruct) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("terse_double_field", thrift.DOUBLE, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:terse_double_field: ", p), err) }
  if err := oprot.WriteDouble(float64(p.TerseDoubleField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.terse_double_field (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:terse_double_field: ", p), err) }
  return err
}

func (p *FieldLevelTerseStruct) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("terse_string_field", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:terse_string_field: ", p), err) }
  if err := oprot.WriteString(string(p.TerseStringField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.terse_string_field (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:terse_string_field: ", p), err) }
  return err
}

func (p *FieldLevelTerseStruct) writeField9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("terse_binary_field", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:terse_binary_field: ", p), err) }
  if err := oprot.WriteBinary(p.TerseBinaryField); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.terse_binary_field (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:terse_binary_field: ", p), err) }
  return err
}

func (p *FieldLevelTerseStruct) writeField10(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("terse_enum_field", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:terse_enum_field: ", p), err) }
  if err := oprot.WriteI32(int32(p.TerseEnumField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.terse_enum_field (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:terse_enum_field: ", p), err) }
  return err
}

func (p *FieldLevelTerseStruct) writeField11(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("terse_list_field", thrift.LIST, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:terse_list_field: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I16, len(p.TerseListField)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TerseListField {
    if err := oprot.WriteI16(int16(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:terse_list_field: ", p), err) }
  return err
}

func (p *FieldLevelTerseStruct) writeField12(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("terse_set_field", thrift.SET, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:terse_set_field: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.I16, len(p.TerseSetField)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  set := make(map[int16]bool, len(p.TerseSetField))
  for _, v := range p.TerseSetField {
    if ok := set[v]; ok {
      return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
    }
    set[v] = true
  }
  for _, v := range p.TerseSetField {
    if err := oprot.WriteI16(int16(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:terse_set_field: ", p), err) }
  return err
}

func (p *FieldLevelTerseStruct) writeField13(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("terse_map_field", thrift.MAP, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:terse_map_field: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I16, thrift.I16, len(p.TerseMapField)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.TerseMapField {
    if err := oprot.WriteI16(int16(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI16(int16(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:terse_map_field: ", p), err) }
  return err
}

func (p *FieldLevelTerseStruct) writeField14(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("terse_struct_field", thrift.STRUCT, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:terse_struct_field: ", p), err) }
  if err := p.TerseStructField.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TerseStructField), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:terse_struct_field: ", p), err) }
  return err
}

func (p *FieldLevelTerseStruct) writeField15(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("bool_field", thrift.BOOL, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:bool_field: ", p), err) }
  if err := oprot.WriteBool(bool(p.BoolField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bool_field (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:bool_field: ", p), err) }
  return err
}

func (p *FieldLevelTerseStruct) writeField16(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("byte_field", thrift.BYTE, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:byte_field: ", p), err) }
  if err := oprot.WriteByte(byte(p.ByteField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.byte_field (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:byte_field: ", p), err) }
  return err
}

func (p *FieldLevelTerseStruct) writeField17(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("short_field", thrift.I16, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:short_field: ", p), err) }
  if err := oprot.WriteI16(int16(p.ShortField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.short_field (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:short_field: ", p), err) }
  return err
}

func (p *FieldLevelTerseStruct) writeField18(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("int_field", thrift.I32, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:int_field: ", p), err) }
  if err := oprot.WriteI32(int32(p.IntField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.int_field (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:int_field: ", p), err) }
  return err
}

func (p *FieldLevelTerseStruct) writeField19(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("long_field", thrift.I64, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:long_field: ", p), err) }
  if err := oprot.WriteI64(int64(p.LongField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.long_field (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:long_field: ", p), err) }
  return err
}

func (p *FieldLevelTerseStruct) writeField20(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("float_field", thrift.FLOAT, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:float_field: ", p), err) }
  if err := oprot.WriteFloat(float32(p.FloatField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.float_field (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:float_field: ", p), err) }
  return err
}

func (p *FieldLevelTerseStruct) writeField21(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("double_field", thrift.DOUBLE, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:double_field: ", p), err) }
  if err := oprot.WriteDouble(float64(p.DoubleField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.double_field (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:double_field: ", p), err) }
  return err
}

func (p *FieldLevelTerseStruct) writeField22(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("string_field", thrift.STRING, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:string_field: ", p), err) }
  if err := oprot.WriteString(string(p.StringField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.string_field (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:string_field: ", p), err) }
  return err
}

func (p *FieldLevelTerseStruct) writeField23(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("binary_field", thrift.STRING, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:binary_field: ", p), err) }
  if err := oprot.WriteBinary(p.BinaryField); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.binary_field (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:binary_field: ", p), err) }
  return err
}

func (p *FieldLevelTerseStruct) writeField24(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("enum_field", thrift.I32, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:enum_field: ", p), err) }
  if err := oprot.WriteI32(int32(p.EnumField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enum_field (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:enum_field: ", p), err) }
  return err
}

func (p *FieldLevelTerseStruct) writeField25(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("list_field", thrift.LIST, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:list_field: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I16, len(p.ListField)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ListField {
    if err := oprot.WriteI16(int16(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:list_field: ", p), err) }
  return err
}

func (p *FieldLevelTerseStruct) writeField26(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("set_field", thrift.SET, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:set_field: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.I16, len(p.SetField)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  set := make(map[int16]bool, len(p.SetField))
  for _, v := range p.SetField {
    if ok := set[v]; ok {
      return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
    }
    set[v] = true
  }
  for _, v := range p.SetField {
    if err := oprot.WriteI16(int16(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:set_field: ", p), err) }
  return err
}

func (p *FieldLevelTerseStruct) writeField27(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("map_field", thrift.MAP, 27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:map_field: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I16, thrift.I16, len(p.MapField)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.MapField {
    if err := oprot.WriteI16(int16(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI16(int16(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 27:map_field: ", p), err) }
  return err
}

func (p *FieldLevelTerseStruct) writeField28(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("struct_field", thrift.STRUCT, 28); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:struct_field: ", p), err) }
  if err := p.StructField.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StructField), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 28:struct_field: ", p), err) }
  return err
}

func (p *FieldLevelTerseStruct) String() string {
  if p == nil {
    return "<nil>"
  }

  terseBoolFieldVal := fmt.Sprintf("%v", p.TerseBoolField)
  terseByteFieldVal := fmt.Sprintf("%v", p.TerseByteField)
  terseShortFieldVal := fmt.Sprintf("%v", p.TerseShortField)
  terseIntFieldVal := fmt.Sprintf("%v", p.TerseIntField)
  terseLongFieldVal := fmt.Sprintf("%v", p.TerseLongField)
  terseFloatFieldVal := fmt.Sprintf("%v", p.TerseFloatField)
  terseDoubleFieldVal := fmt.Sprintf("%v", p.TerseDoubleField)
  terseStringFieldVal := fmt.Sprintf("%v", p.TerseStringField)
  terseBinaryFieldVal := fmt.Sprintf("%v", p.TerseBinaryField)
  terseEnumFieldVal := fmt.Sprintf("%v", p.TerseEnumField)
  terseListFieldVal := fmt.Sprintf("%v", p.TerseListField)
  terseSetFieldVal := fmt.Sprintf("%v", p.TerseSetField)
  terseMapFieldVal := fmt.Sprintf("%v", p.TerseMapField)
  var terseStructFieldVal string
  if p.TerseStructField == nil {
    terseStructFieldVal = "<nil>"
  } else {
    terseStructFieldVal = fmt.Sprintf("%v", p.TerseStructField)
  }
  boolFieldVal := fmt.Sprintf("%v", p.BoolField)
  byteFieldVal := fmt.Sprintf("%v", p.ByteField)
  shortFieldVal := fmt.Sprintf("%v", p.ShortField)
  intFieldVal := fmt.Sprintf("%v", p.IntField)
  longFieldVal := fmt.Sprintf("%v", p.LongField)
  floatFieldVal := fmt.Sprintf("%v", p.FloatField)
  doubleFieldVal := fmt.Sprintf("%v", p.DoubleField)
  stringFieldVal := fmt.Sprintf("%v", p.StringField)
  binaryFieldVal := fmt.Sprintf("%v", p.BinaryField)
  enumFieldVal := fmt.Sprintf("%v", p.EnumField)
  listFieldVal := fmt.Sprintf("%v", p.ListField)
  setFieldVal := fmt.Sprintf("%v", p.SetField)
  mapFieldVal := fmt.Sprintf("%v", p.MapField)
  var structFieldVal string
  if p.StructField == nil {
    structFieldVal = "<nil>"
  } else {
    structFieldVal = fmt.Sprintf("%v", p.StructField)
  }
  return fmt.Sprintf("FieldLevelTerseStruct({TerseBoolField:%s TerseByteField:%s TerseShortField:%s TerseIntField:%s TerseLongField:%s TerseFloatField:%s TerseDoubleField:%s TerseStringField:%s TerseBinaryField:%s TerseEnumField:%s TerseListField:%s TerseSetField:%s TerseMapField:%s TerseStructField:%s BoolField:%s ByteField:%s ShortField:%s IntField:%s LongField:%s FloatField:%s DoubleField:%s StringField:%s BinaryField:%s EnumField:%s ListField:%s SetField:%s MapField:%s StructField:%s})", terseBoolFieldVal, terseByteFieldVal, terseShortFieldVal, terseIntFieldVal, terseLongFieldVal, terseFloatFieldVal, terseDoubleFieldVal, terseStringFieldVal, terseBinaryFieldVal, terseEnumFieldVal, terseListFieldVal, terseSetFieldVal, terseMapFieldVal, terseStructFieldVal, boolFieldVal, byteFieldVal, shortFieldVal, intFieldVal, longFieldVal, floatFieldVal, doubleFieldVal, stringFieldVal, binaryFieldVal, enumFieldVal, listFieldVal, setFieldVal, mapFieldVal, structFieldVal)
}

// Attributes:
//  - BoolField
//  - ByteField
//  - ShortField
//  - IntField
//  - LongField
//  - FloatField
//  - DoubleField
//  - StringField
//  - BinaryField
//  - EnumField
//  - ListField
//  - SetField
//  - MapField
//  - StructField
type TerseStructWithCustomDefault struct {
  BoolField bool `thrift:"bool_field,1" db:"bool_field" json:"bool_field"`
  ByteField int8 `thrift:"byte_field,2" db:"byte_field" json:"byte_field"`
  ShortField int16 `thrift:"short_field,3" db:"short_field" json:"short_field"`
  IntField int32 `thrift:"int_field,4" db:"int_field" json:"int_field"`
  LongField int64 `thrift:"long_field,5" db:"long_field" json:"long_field"`
  FloatField float32 `thrift:"float_field,6" db:"float_field" json:"float_field"`
  DoubleField float64 `thrift:"double_field,7" db:"double_field" json:"double_field"`
  StringField string `thrift:"string_field,8" db:"string_field" json:"string_field"`
  BinaryField []byte `thrift:"binary_field,9" db:"binary_field" json:"binary_field"`
  EnumField MyEnum `thrift:"enum_field,10" db:"enum_field" json:"enum_field"`
  ListField []int16 `thrift:"list_field,11" db:"list_field" json:"list_field"`
  SetField []int16 `thrift:"set_field,12" db:"set_field" json:"set_field"`
  MapField map[int16]int16 `thrift:"map_field,13" db:"map_field" json:"map_field"`
  StructField *MyStructWithCustomDefault `thrift:"struct_field,14" db:"struct_field" json:"struct_field"`
}

func NewTerseStructWithCustomDefault() *TerseStructWithCustomDefault {
  return &TerseStructWithCustomDefault{
    BoolField: true,
    ByteField: 1,
    ShortField: 2,
    IntField: 3,
    LongField: 4,
    FloatField: 5,
    DoubleField: 6,
    StringField: "7",
    BinaryField: []byte("8"),
    EnumField: 1,
    ListField: []int16{
      1,
    },
    SetField: []int16{
      1,     },
    MapField: map[int16]int16{
      1: 1,
    },
    StructField: NewMyStructWithCustomDefault(),
  }
}


func (p *TerseStructWithCustomDefault) GetBoolField() bool {
  return p.BoolField
}

func (p *TerseStructWithCustomDefault) GetByteField() int8 {
  return p.ByteField
}

func (p *TerseStructWithCustomDefault) GetShortField() int16 {
  return p.ShortField
}

func (p *TerseStructWithCustomDefault) GetIntField() int32 {
  return p.IntField
}

func (p *TerseStructWithCustomDefault) GetLongField() int64 {
  return p.LongField
}

func (p *TerseStructWithCustomDefault) GetFloatField() float32 {
  return p.FloatField
}

func (p *TerseStructWithCustomDefault) GetDoubleField() float64 {
  return p.DoubleField
}

func (p *TerseStructWithCustomDefault) GetStringField() string {
  return p.StringField
}

func (p *TerseStructWithCustomDefault) GetBinaryField() []byte {
  return p.BinaryField
}

func (p *TerseStructWithCustomDefault) GetEnumField() MyEnum {
  return p.EnumField
}

func (p *TerseStructWithCustomDefault) GetListField() []int16 {
  return p.ListField
}

func (p *TerseStructWithCustomDefault) GetSetField() []int16 {
  return p.SetField
}

func (p *TerseStructWithCustomDefault) GetMapField() map[int16]int16 {
  return p.MapField
}
var TerseStructWithCustomDefault_StructField_DEFAULT *MyStructWithCustomDefault
func (p *TerseStructWithCustomDefault) GetStructField() *MyStructWithCustomDefault {
  if !p.IsSetStructField() {
    return TerseStructWithCustomDefault_StructField_DEFAULT
  }
  return p.StructField
}
func (p *TerseStructWithCustomDefault) DefaultGetStructField() *MyStructWithCustomDefault {
  if !p.IsSetStructField() {
    return NewMyStructWithCustomDefault()
  }
  return p.StructField
}
func (p *TerseStructWithCustomDefault) IsSetStructField() bool {
  return p != nil && p.StructField != nil
}

type TerseStructWithCustomDefaultBuilder struct {
  obj *TerseStructWithCustomDefault
}

func NewTerseStructWithCustomDefaultBuilder() *TerseStructWithCustomDefaultBuilder{
  return &TerseStructWithCustomDefaultBuilder{
    obj: NewTerseStructWithCustomDefault(),
  }
}

func (p TerseStructWithCustomDefaultBuilder) Emit() *TerseStructWithCustomDefault{
  return &TerseStructWithCustomDefault{
    BoolField: p.obj.BoolField,
    ByteField: p.obj.ByteField,
    ShortField: p.obj.ShortField,
    IntField: p.obj.IntField,
    LongField: p.obj.LongField,
    FloatField: p.obj.FloatField,
    DoubleField: p.obj.DoubleField,
    StringField: p.obj.StringField,
    BinaryField: p.obj.BinaryField,
    EnumField: p.obj.EnumField,
    ListField: p.obj.ListField,
    SetField: p.obj.SetField,
    MapField: p.obj.MapField,
    StructField: p.obj.StructField,
  }
}

func (t *TerseStructWithCustomDefaultBuilder) BoolField(boolField bool) *TerseStructWithCustomDefaultBuilder {
  t.obj.BoolField = boolField
  return t
}

func (t *TerseStructWithCustomDefaultBuilder) ByteField(byteField int8) *TerseStructWithCustomDefaultBuilder {
  t.obj.ByteField = byteField
  return t
}

func (t *TerseStructWithCustomDefaultBuilder) ShortField(shortField int16) *TerseStructWithCustomDefaultBuilder {
  t.obj.ShortField = shortField
  return t
}

func (t *TerseStructWithCustomDefaultBuilder) IntField(intField int32) *TerseStructWithCustomDefaultBuilder {
  t.obj.IntField = intField
  return t
}

func (t *TerseStructWithCustomDefaultBuilder) LongField(longField int64) *TerseStructWithCustomDefaultBuilder {
  t.obj.LongField = longField
  return t
}

func (t *TerseStructWithCustomDefaultBuilder) FloatField(floatField float32) *TerseStructWithCustomDefaultBuilder {
  t.obj.FloatField = floatField
  return t
}

func (t *TerseStructWithCustomDefaultBuilder) DoubleField(doubleField float64) *TerseStructWithCustomDefaultBuilder {
  t.obj.DoubleField = doubleField
  return t
}

func (t *TerseStructWithCustomDefaultBuilder) StringField(stringField string) *TerseStructWithCustomDefaultBuilder {
  t.obj.StringField = stringField
  return t
}

func (t *TerseStructWithCustomDefaultBuilder) BinaryField(binaryField []byte) *TerseStructWithCustomDefaultBuilder {
  t.obj.BinaryField = binaryField
  return t
}

func (t *TerseStructWithCustomDefaultBuilder) EnumField(enumField MyEnum) *TerseStructWithCustomDefaultBuilder {
  t.obj.EnumField = enumField
  return t
}

func (t *TerseStructWithCustomDefaultBuilder) ListField(listField []int16) *TerseStructWithCustomDefaultBuilder {
  t.obj.ListField = listField
  return t
}

func (t *TerseStructWithCustomDefaultBuilder) SetField(setField []int16) *TerseStructWithCustomDefaultBuilder {
  t.obj.SetField = setField
  return t
}

func (t *TerseStructWithCustomDefaultBuilder) MapField(mapField map[int16]int16) *TerseStructWithCustomDefaultBuilder {
  t.obj.MapField = mapField
  return t
}

func (t *TerseStructWithCustomDefaultBuilder) StructField(structField *MyStructWithCustomDefault) *TerseStructWithCustomDefaultBuilder {
  t.obj.StructField = structField
  return t
}

func (t *TerseStructWithCustomDefault) SetBoolField(boolField bool) *TerseStructWithCustomDefault {
  t.BoolField = boolField
  return t
}

func (t *TerseStructWithCustomDefault) SetByteField(byteField int8) *TerseStructWithCustomDefault {
  t.ByteField = byteField
  return t
}

func (t *TerseStructWithCustomDefault) SetShortField(shortField int16) *TerseStructWithCustomDefault {
  t.ShortField = shortField
  return t
}

func (t *TerseStructWithCustomDefault) SetIntField(intField int32) *TerseStructWithCustomDefault {
  t.IntField = intField
  return t
}

func (t *TerseStructWithCustomDefault) SetLongField(longField int64) *TerseStructWithCustomDefault {
  t.LongField = longField
  return t
}

func (t *TerseStructWithCustomDefault) SetFloatField(floatField float32) *TerseStructWithCustomDefault {
  t.FloatField = floatField
  return t
}

func (t *TerseStructWithCustomDefault) SetDoubleField(doubleField float64) *TerseStructWithCustomDefault {
  t.DoubleField = doubleField
  return t
}

func (t *TerseStructWithCustomDefault) SetStringField(stringField string) *TerseStructWithCustomDefault {
  t.StringField = stringField
  return t
}

func (t *TerseStructWithCustomDefault) SetBinaryField(binaryField []byte) *TerseStructWithCustomDefault {
  t.BinaryField = binaryField
  return t
}

func (t *TerseStructWithCustomDefault) SetEnumField(enumField MyEnum) *TerseStructWithCustomDefault {
  t.EnumField = enumField
  return t
}

func (t *TerseStructWithCustomDefault) SetListField(listField []int16) *TerseStructWithCustomDefault {
  t.ListField = listField
  return t
}

func (t *TerseStructWithCustomDefault) SetSetField(setField []int16) *TerseStructWithCustomDefault {
  t.SetField = setField
  return t
}

func (t *TerseStructWithCustomDefault) SetMapField(mapField map[int16]int16) *TerseStructWithCustomDefault {
  t.MapField = mapField
  return t
}

func (t *TerseStructWithCustomDefault) SetStructField(structField *MyStructWithCustomDefault) *TerseStructWithCustomDefault {
  t.StructField = structField
  return t
}

func (p *TerseStructWithCustomDefault) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 13:
      if err := p.ReadField13(iprot); err != nil {
        return err
      }
    case 14:
      if err := p.ReadField14(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TerseStructWithCustomDefault)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.BoolField = v
  }
  return nil
}

func (p *TerseStructWithCustomDefault)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := int8(v)
    p.ByteField = temp
  }
  return nil
}

func (p *TerseStructWithCustomDefault)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.ShortField = v
  }
  return nil
}

func (p *TerseStructWithCustomDefault)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.IntField = v
  }
  return nil
}

func (p *TerseStructWithCustomDefault)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.LongField = v
  }
  return nil
}

func (p *TerseStructWithCustomDefault)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadFloat(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.FloatField = v
  }
  return nil
}

func (p *TerseStructWithCustomDefault)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 7: ", err)
  } else {
    p.DoubleField = v
  }
  return nil
}

func (p *TerseStructWithCustomDefault)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 8: ", err)
  } else {
    p.StringField = v
  }
  return nil
}

func (p *TerseStructWithCustomDefault)  ReadField9(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 9: ", err)
  } else {
    p.BinaryField = v
  }
  return nil
}

func (p *TerseStructWithCustomDefault)  ReadField10(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 10: ", err)
  } else {
    temp := MyEnum(v)
    p.EnumField = temp
  }
  return nil
}

func (p *TerseStructWithCustomDefault)  ReadField11(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int16, 0, size)
  p.ListField =  tSlice
  for i := 0; i < size; i ++ {
    var _elem15 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem15 = v
    }
    p.ListField = append(p.ListField, _elem15)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TerseStructWithCustomDefault)  ReadField12(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]int16, 0, size)
  p.SetField =  tSet
  for i := 0; i < size; i ++ {
    var _elem16 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem16 = v
    }
    p.SetField = append(p.SetField, _elem16)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TerseStructWithCustomDefault)  ReadField13(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int16]int16, size)
  p.MapField =  tMap
  for i := 0; i < size; i ++ {
    var _key17 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key17 = v
    }
    var _val18 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val18 = v
    }
    p.MapField[_key17] = _val18
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TerseStructWithCustomDefault)  ReadField14(iprot thrift.Protocol) error {
  p.StructField = NewMyStructWithCustomDefault()
  if err := p.StructField.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StructField), err)
  }
  return nil
}

func (p *TerseStructWithCustomDefault) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("TerseStructWithCustomDefault"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := p.writeField10(oprot); err != nil { return err }
  if err := p.writeField11(oprot); err != nil { return err }
  if err := p.writeField12(oprot); err != nil { return err }
  if err := p.writeField13(oprot); err != nil { return err }
  if err := p.writeField14(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TerseStructWithCustomDefault) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("bool_field", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bool_field: ", p), err) }
  if err := oprot.WriteBool(bool(p.BoolField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bool_field (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bool_field: ", p), err) }
  return err
}

func (p *TerseStructWithCustomDefault) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("byte_field", thrift.BYTE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:byte_field: ", p), err) }
  if err := oprot.WriteByte(byte(p.ByteField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.byte_field (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:byte_field: ", p), err) }
  return err
}

func (p *TerseStructWithCustomDefault) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("short_field", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:short_field: ", p), err) }
  if err := oprot.WriteI16(int16(p.ShortField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.short_field (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:short_field: ", p), err) }
  return err
}

func (p *TerseStructWithCustomDefault) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("int_field", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:int_field: ", p), err) }
  if err := oprot.WriteI32(int32(p.IntField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.int_field (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:int_field: ", p), err) }
  return err
}

func (p *TerseStructWithCustomDefault) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("long_field", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:long_field: ", p), err) }
  if err := oprot.WriteI64(int64(p.LongField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.long_field (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:long_field: ", p), err) }
  return err
}

func (p *TerseStructWithCustomDefault) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("float_field", thrift.FLOAT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:float_field: ", p), err) }
  if err := oprot.WriteFloat(float32(p.FloatField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.float_field (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:float_field: ", p), err) }
  return err
}

func (p *TerseStructWithCustomDefault) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("double_field", thrift.DOUBLE, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:double_field: ", p), err) }
  if err := oprot.WriteDouble(float64(p.DoubleField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.double_field (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:double_field: ", p), err) }
  return err
}

func (p *TerseStructWithCustomDefault) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("string_field", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:string_field: ", p), err) }
  if err := oprot.WriteString(string(p.StringField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.string_field (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:string_field: ", p), err) }
  return err
}

func (p *TerseStructWithCustomDefault) writeField9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("binary_field", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:binary_field: ", p), err) }
  if err := oprot.WriteBinary(p.BinaryField); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.binary_field (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:binary_field: ", p), err) }
  return err
}

func (p *TerseStructWithCustomDefault) writeField10(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("enum_field", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:enum_field: ", p), err) }
  if err := oprot.WriteI32(int32(p.EnumField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enum_field (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:enum_field: ", p), err) }
  return err
}

func (p *TerseStructWithCustomDefault) writeField11(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("list_field", thrift.LIST, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:list_field: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I16, len(p.ListField)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ListField {
    if err := oprot.WriteI16(int16(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:list_field: ", p), err) }
  return err
}

func (p *TerseStructWithCustomDefault) writeField12(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("set_field", thrift.SET, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:set_field: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.I16, len(p.SetField)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  set := make(map[int16]bool, len(p.SetField))
  for _, v := range p.SetField {
    if ok := set[v]; ok {
      return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
    }
    set[v] = true
  }
  for _, v := range p.SetField {
    if err := oprot.WriteI16(int16(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:set_field: ", p), err) }
  return err
}

func (p *TerseStructWithCustomDefault) writeField13(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("map_field", thrift.MAP, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:map_field: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I16, thrift.I16, len(p.MapField)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.MapField {
    if err := oprot.WriteI16(int16(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI16(int16(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:map_field: ", p), err) }
  return err
}

func (p *TerseStructWithCustomDefault) writeField14(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("struct_field", thrift.STRUCT, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:struct_field: ", p), err) }
  if err := p.StructField.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StructField), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:struct_field: ", p), err) }
  return err
}

func (p *TerseStructWithCustomDefault) String() string {
  if p == nil {
    return "<nil>"
  }

  boolFieldVal := fmt.Sprintf("%v", p.BoolField)
  byteFieldVal := fmt.Sprintf("%v", p.ByteField)
  shortFieldVal := fmt.Sprintf("%v", p.ShortField)
  intFieldVal := fmt.Sprintf("%v", p.IntField)
  longFieldVal := fmt.Sprintf("%v", p.LongField)
  floatFieldVal := fmt.Sprintf("%v", p.FloatField)
  doubleFieldVal := fmt.Sprintf("%v", p.DoubleField)
  stringFieldVal := fmt.Sprintf("%v", p.StringField)
  binaryFieldVal := fmt.Sprintf("%v", p.BinaryField)
  enumFieldVal := fmt.Sprintf("%v", p.EnumField)
  listFieldVal := fmt.Sprintf("%v", p.ListField)
  setFieldVal := fmt.Sprintf("%v", p.SetField)
  mapFieldVal := fmt.Sprintf("%v", p.MapField)
  var structFieldVal string
  if p.StructField == nil {
    structFieldVal = "<nil>"
  } else {
    structFieldVal = fmt.Sprintf("%v", p.StructField)
  }
  return fmt.Sprintf("TerseStructWithCustomDefault({BoolField:%s ByteField:%s ShortField:%s IntField:%s LongField:%s FloatField:%s DoubleField:%s StringField:%s BinaryField:%s EnumField:%s ListField:%s SetField:%s MapField:%s StructField:%s})", boolFieldVal, byteFieldVal, shortFieldVal, intFieldVal, longFieldVal, floatFieldVal, doubleFieldVal, stringFieldVal, binaryFieldVal, enumFieldVal, listFieldVal, setFieldVal, mapFieldVal, structFieldVal)
}

// Attributes:
//  - Field1
//  - Field2
//  - Field3
type AdaptedFields struct {
  Field1 MyInteger `thrift:"field1,1" db:"field1" json:"field1"`
  Field2 int32 `thrift:"field2,2" db:"field2" json:"field2"`
  Field3 MyInteger `thrift:"field3,3" db:"field3" json:"field3"`
}

func NewAdaptedFields() *AdaptedFields {
  return &AdaptedFields{}
}


func (p *AdaptedFields) GetField1() MyInteger {
  return p.Field1
}

func (p *AdaptedFields) GetField2() int32 {
  return p.Field2
}

func (p *AdaptedFields) GetField3() MyInteger {
  return p.Field3
}
type AdaptedFieldsBuilder struct {
  obj *AdaptedFields
}

func NewAdaptedFieldsBuilder() *AdaptedFieldsBuilder{
  return &AdaptedFieldsBuilder{
    obj: NewAdaptedFields(),
  }
}

func (p AdaptedFieldsBuilder) Emit() *AdaptedFields{
  return &AdaptedFields{
    Field1: p.obj.Field1,
    Field2: p.obj.Field2,
    Field3: p.obj.Field3,
  }
}

func (a *AdaptedFieldsBuilder) Field1(field1 MyInteger) *AdaptedFieldsBuilder {
  a.obj.Field1 = field1
  return a
}

func (a *AdaptedFieldsBuilder) Field2(field2 int32) *AdaptedFieldsBuilder {
  a.obj.Field2 = field2
  return a
}

func (a *AdaptedFieldsBuilder) Field3(field3 MyInteger) *AdaptedFieldsBuilder {
  a.obj.Field3 = field3
  return a
}

func (a *AdaptedFields) SetField1(field1 MyInteger) *AdaptedFields {
  a.Field1 = field1
  return a
}

func (a *AdaptedFields) SetField2(field2 int32) *AdaptedFields {
  a.Field2 = field2
  return a
}

func (a *AdaptedFields) SetField3(field3 MyInteger) *AdaptedFields {
  a.Field3 = field3
  return a
}

func (p *AdaptedFields) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdaptedFields)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := MyInteger(v)
    p.Field1 = temp
  }
  return nil
}

func (p *AdaptedFields)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Field2 = v
  }
  return nil
}

func (p *AdaptedFields)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := MyInteger(v)
    p.Field3 = temp
  }
  return nil
}

func (p *AdaptedFields) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AdaptedFields"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdaptedFields) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("field1", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:field1: ", p), err) }
  if err := oprot.WriteI32(int32(p.Field1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.field1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:field1: ", p), err) }
  return err
}

func (p *AdaptedFields) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("field2", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:field2: ", p), err) }
  if err := oprot.WriteI32(int32(p.Field2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.field2 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:field2: ", p), err) }
  return err
}

func (p *AdaptedFields) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("field3", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:field3: ", p), err) }
  if err := oprot.WriteI32(int32(p.Field3)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.field3 (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:field3: ", p), err) }
  return err
}

func (p *AdaptedFields) String() string {
  if p == nil {
    return "<nil>"
  }

  field1Val := fmt.Sprintf("%v", p.Field1)
  field2Val := fmt.Sprintf("%v", p.Field2)
  field3Val := fmt.Sprintf("%v", p.Field3)
  return fmt.Sprintf("AdaptedFields({Field1:%s Field2:%s Field3:%s})", field1Val, field2Val, field3Val)
}

// Attributes:
//  - Field1
type WrappedFields struct {
  Field1 int32 `thrift:"field1,1" db:"field1" json:"field1"`
}

func NewWrappedFields() *WrappedFields {
  return &WrappedFields{
    Field1: 7,
  }
}


func (p *WrappedFields) GetField1() int32 {
  return p.Field1
}
type WrappedFieldsBuilder struct {
  obj *WrappedFields
}

func NewWrappedFieldsBuilder() *WrappedFieldsBuilder{
  return &WrappedFieldsBuilder{
    obj: NewWrappedFields(),
  }
}

func (p WrappedFieldsBuilder) Emit() *WrappedFields{
  return &WrappedFields{
    Field1: p.obj.Field1,
  }
}

func (w *WrappedFieldsBuilder) Field1(field1 int32) *WrappedFieldsBuilder {
  w.obj.Field1 = field1
  return w
}

func (w *WrappedFields) SetField1(field1 int32) *WrappedFields {
  w.Field1 = field1
  return w
}

func (p *WrappedFields) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WrappedFields)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Field1 = v
  }
  return nil
}

func (p *WrappedFields) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("WrappedFields"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WrappedFields) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("field1", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:field1: ", p), err) }
  if err := oprot.WriteI32(int32(p.Field1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.field1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:field1: ", p), err) }
  return err
}

func (p *WrappedFields) String() string {
  if p == nil {
    return "<nil>"
  }

  field1Val := fmt.Sprintf("%v", p.Field1)
  return fmt.Sprintf("WrappedFields({Field1:%s})", field1Val)
}

// Attributes:
//  - Msg
type TerseException struct {
  Msg string `thrift:"msg,1" db:"msg" json:"msg"`
}

func NewTerseException() *TerseException {
  return &TerseException{}
}


func (p *TerseException) GetMsg() string {
  return p.Msg
}
type TerseExceptionBuilder struct {
  obj *TerseException
}

func NewTerseExceptionBuilder() *TerseExceptionBuilder{
  return &TerseExceptionBuilder{
    obj: NewTerseException(),
  }
}

func (p TerseExceptionBuilder) Emit() *TerseException{
  return &TerseException{
    Msg: p.obj.Msg,
  }
}

func (t *TerseExceptionBuilder) Msg(msg string) *TerseExceptionBuilder {
  t.obj.Msg = msg
  return t
}

func (t *TerseException) SetMsg(msg string) *TerseException {
  t.Msg = msg
  return t
}

func (p *TerseException) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TerseException)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Msg = v
  }
  return nil
}

func (p *TerseException) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("TerseException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TerseException) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("msg", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msg: ", p), err) }
  if err := oprot.WriteString(string(p.Msg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msg (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msg: ", p), err) }
  return err
}

func (p *TerseException) String() string {
  if p == nil {
    return "<nil>"
  }

  msgVal := fmt.Sprintf("%v", p.Msg)
  return fmt.Sprintf("TerseException({Msg:%s})", msgVal)
}

func (p *TerseException) Error() string {
  return p.String()
}

