/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/types/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>
#include "thrift/compiler/test/fixtures/types/gen-cpp2/included_types.h"

namespace apache::thrift {
namespace ident {
struct field;
struct fieldA;
struct fieldB;
struct fieldC;
struct fieldD;
struct fieldE;
struct fieldF;
struct fieldG;
struct fieldH;
struct fieldA;
struct MyIntField;
struct a;
struct b;
struct a;
struct b;
struct z;
struct n;
struct a;
struct b;
struct z;
struct n;
struct small;
struct big;
struct medium;
struct biggish;
struct tiny;
struct small;
struct biggish;
struct medium;
struct big;
struct tiny;
struct MyIntField;
struct MyStringField;
struct majorVer;
struct data;
struct bar;
struct binary_field;
struct list_field;
struct ForwardUsageStruct;
struct ForwardUsageByRef;
struct foo;
struct foo;
struct field;
struct field;
struct field;
struct field;
struct field;
struct field;
struct field;
struct field;
struct aa_list;
struct aa_set;
struct aa_map;
struct aa_string;
struct not_a_container;
struct aa_unique;
struct aa_shared;
struct not_a_container;
struct box_field;
struct i32_field;
struct IntTypedef_field;
struct UintTypedef_field;
struct __field;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_field
#define APACHE_THRIFT_ACCESSOR_field
APACHE_THRIFT_DEFINE_ACCESSOR(field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldA
#define APACHE_THRIFT_ACCESSOR_fieldA
APACHE_THRIFT_DEFINE_ACCESSOR(fieldA);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldB
#define APACHE_THRIFT_ACCESSOR_fieldB
APACHE_THRIFT_DEFINE_ACCESSOR(fieldB);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldC
#define APACHE_THRIFT_ACCESSOR_fieldC
APACHE_THRIFT_DEFINE_ACCESSOR(fieldC);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldD
#define APACHE_THRIFT_ACCESSOR_fieldD
APACHE_THRIFT_DEFINE_ACCESSOR(fieldD);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldE
#define APACHE_THRIFT_ACCESSOR_fieldE
APACHE_THRIFT_DEFINE_ACCESSOR(fieldE);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldF
#define APACHE_THRIFT_ACCESSOR_fieldF
APACHE_THRIFT_DEFINE_ACCESSOR(fieldF);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldG
#define APACHE_THRIFT_ACCESSOR_fieldG
APACHE_THRIFT_DEFINE_ACCESSOR(fieldG);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldH
#define APACHE_THRIFT_ACCESSOR_fieldH
APACHE_THRIFT_DEFINE_ACCESSOR(fieldH);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldA
#define APACHE_THRIFT_ACCESSOR_fieldA
APACHE_THRIFT_DEFINE_ACCESSOR(fieldA);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyIntField
#define APACHE_THRIFT_ACCESSOR_MyIntField
APACHE_THRIFT_DEFINE_ACCESSOR(MyIntField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_a
#define APACHE_THRIFT_ACCESSOR_a
APACHE_THRIFT_DEFINE_ACCESSOR(a);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_b
#define APACHE_THRIFT_ACCESSOR_b
APACHE_THRIFT_DEFINE_ACCESSOR(b);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_a
#define APACHE_THRIFT_ACCESSOR_a
APACHE_THRIFT_DEFINE_ACCESSOR(a);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_b
#define APACHE_THRIFT_ACCESSOR_b
APACHE_THRIFT_DEFINE_ACCESSOR(b);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_z
#define APACHE_THRIFT_ACCESSOR_z
APACHE_THRIFT_DEFINE_ACCESSOR(z);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_n
#define APACHE_THRIFT_ACCESSOR_n
APACHE_THRIFT_DEFINE_ACCESSOR(n);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_a
#define APACHE_THRIFT_ACCESSOR_a
APACHE_THRIFT_DEFINE_ACCESSOR(a);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_b
#define APACHE_THRIFT_ACCESSOR_b
APACHE_THRIFT_DEFINE_ACCESSOR(b);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_z
#define APACHE_THRIFT_ACCESSOR_z
APACHE_THRIFT_DEFINE_ACCESSOR(z);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_n
#define APACHE_THRIFT_ACCESSOR_n
APACHE_THRIFT_DEFINE_ACCESSOR(n);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_small
#define APACHE_THRIFT_ACCESSOR_small
APACHE_THRIFT_DEFINE_ACCESSOR(small);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_big
#define APACHE_THRIFT_ACCESSOR_big
APACHE_THRIFT_DEFINE_ACCESSOR(big);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_medium
#define APACHE_THRIFT_ACCESSOR_medium
APACHE_THRIFT_DEFINE_ACCESSOR(medium);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_biggish
#define APACHE_THRIFT_ACCESSOR_biggish
APACHE_THRIFT_DEFINE_ACCESSOR(biggish);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_tiny
#define APACHE_THRIFT_ACCESSOR_tiny
APACHE_THRIFT_DEFINE_ACCESSOR(tiny);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_small
#define APACHE_THRIFT_ACCESSOR_small
APACHE_THRIFT_DEFINE_ACCESSOR(small);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_biggish
#define APACHE_THRIFT_ACCESSOR_biggish
APACHE_THRIFT_DEFINE_ACCESSOR(biggish);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_medium
#define APACHE_THRIFT_ACCESSOR_medium
APACHE_THRIFT_DEFINE_ACCESSOR(medium);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_big
#define APACHE_THRIFT_ACCESSOR_big
APACHE_THRIFT_DEFINE_ACCESSOR(big);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_tiny
#define APACHE_THRIFT_ACCESSOR_tiny
APACHE_THRIFT_DEFINE_ACCESSOR(tiny);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyIntField
#define APACHE_THRIFT_ACCESSOR_MyIntField
APACHE_THRIFT_DEFINE_ACCESSOR(MyIntField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyStringField
#define APACHE_THRIFT_ACCESSOR_MyStringField
APACHE_THRIFT_DEFINE_ACCESSOR(MyStringField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_majorVer
#define APACHE_THRIFT_ACCESSOR_majorVer
APACHE_THRIFT_DEFINE_ACCESSOR(majorVer);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_data
#define APACHE_THRIFT_ACCESSOR_data
APACHE_THRIFT_DEFINE_ACCESSOR(data);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_bar
#define APACHE_THRIFT_ACCESSOR_bar
APACHE_THRIFT_DEFINE_ACCESSOR(bar);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binary_field
#define APACHE_THRIFT_ACCESSOR_binary_field
APACHE_THRIFT_DEFINE_ACCESSOR(binary_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_field
#define APACHE_THRIFT_ACCESSOR_list_field
APACHE_THRIFT_DEFINE_ACCESSOR(list_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ForwardUsageStruct
#define APACHE_THRIFT_ACCESSOR_ForwardUsageStruct
APACHE_THRIFT_DEFINE_ACCESSOR(ForwardUsageStruct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ForwardUsageByRef
#define APACHE_THRIFT_ACCESSOR_ForwardUsageByRef
APACHE_THRIFT_DEFINE_ACCESSOR(ForwardUsageByRef);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_foo
#define APACHE_THRIFT_ACCESSOR_foo
APACHE_THRIFT_DEFINE_ACCESSOR(foo);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_foo
#define APACHE_THRIFT_ACCESSOR_foo
APACHE_THRIFT_DEFINE_ACCESSOR(foo);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field
#define APACHE_THRIFT_ACCESSOR_field
APACHE_THRIFT_DEFINE_ACCESSOR(field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field
#define APACHE_THRIFT_ACCESSOR_field
APACHE_THRIFT_DEFINE_ACCESSOR(field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field
#define APACHE_THRIFT_ACCESSOR_field
APACHE_THRIFT_DEFINE_ACCESSOR(field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field
#define APACHE_THRIFT_ACCESSOR_field
APACHE_THRIFT_DEFINE_ACCESSOR(field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field
#define APACHE_THRIFT_ACCESSOR_field
APACHE_THRIFT_DEFINE_ACCESSOR(field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field
#define APACHE_THRIFT_ACCESSOR_field
APACHE_THRIFT_DEFINE_ACCESSOR(field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field
#define APACHE_THRIFT_ACCESSOR_field
APACHE_THRIFT_DEFINE_ACCESSOR(field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field
#define APACHE_THRIFT_ACCESSOR_field
APACHE_THRIFT_DEFINE_ACCESSOR(field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_aa_list
#define APACHE_THRIFT_ACCESSOR_aa_list
APACHE_THRIFT_DEFINE_ACCESSOR(aa_list);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_aa_set
#define APACHE_THRIFT_ACCESSOR_aa_set
APACHE_THRIFT_DEFINE_ACCESSOR(aa_set);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_aa_map
#define APACHE_THRIFT_ACCESSOR_aa_map
APACHE_THRIFT_DEFINE_ACCESSOR(aa_map);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_aa_string
#define APACHE_THRIFT_ACCESSOR_aa_string
APACHE_THRIFT_DEFINE_ACCESSOR(aa_string);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_not_a_container
#define APACHE_THRIFT_ACCESSOR_not_a_container
APACHE_THRIFT_DEFINE_ACCESSOR(not_a_container);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_aa_unique
#define APACHE_THRIFT_ACCESSOR_aa_unique
APACHE_THRIFT_DEFINE_ACCESSOR(aa_unique);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_aa_shared
#define APACHE_THRIFT_ACCESSOR_aa_shared
APACHE_THRIFT_DEFINE_ACCESSOR(aa_shared);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_not_a_container
#define APACHE_THRIFT_ACCESSOR_not_a_container
APACHE_THRIFT_DEFINE_ACCESSOR(not_a_container);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_box_field
#define APACHE_THRIFT_ACCESSOR_box_field
APACHE_THRIFT_DEFINE_ACCESSOR(box_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i32_field
#define APACHE_THRIFT_ACCESSOR_i32_field
APACHE_THRIFT_DEFINE_ACCESSOR(i32_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_IntTypedef_field
#define APACHE_THRIFT_ACCESSOR_IntTypedef_field
APACHE_THRIFT_DEFINE_ACCESSOR(IntTypedef_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_UintTypedef_field
#define APACHE_THRIFT_ACCESSOR_UintTypedef_field
APACHE_THRIFT_DEFINE_ACCESSOR(UintTypedef_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR___field
#define APACHE_THRIFT_ACCESSOR___field
APACHE_THRIFT_DEFINE_ACCESSOR(__field);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
namespace apache::thrift::fixtures::types {

/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "has_bitwise_ops", "kind": "enum" } */
enum class has_bitwise_ops {
  none = 0,
  zero = 1,
  one = 2,
  two = 4,
  three = 8,
};
inline constexpr has_bitwise_ops operator&(has_bitwise_ops a, has_bitwise_ops b) {
  using E = has_bitwise_ops;
  using U = std::underlying_type_t<E>;
  return static_cast<E>(static_cast<U>(a) & static_cast<U>(b));
}
inline constexpr has_bitwise_ops& operator&=(has_bitwise_ops& a, has_bitwise_ops b) {
  return a = a & b;
}

inline constexpr has_bitwise_ops operator|(has_bitwise_ops a, has_bitwise_ops b) {
  using E = has_bitwise_ops;
  using U = std::underlying_type_t<E>;
  return static_cast<E>(static_cast<U>(a) | static_cast<U>(b));
}
inline constexpr has_bitwise_ops& operator|=(has_bitwise_ops& a, has_bitwise_ops b) {
  return a = a | b;
}

inline constexpr has_bitwise_ops operator^(has_bitwise_ops a, has_bitwise_ops b) {
  using E = has_bitwise_ops;
  using U = std::underlying_type_t<E>;
  return static_cast<E>(static_cast<U>(a) ^ static_cast<U>(b));
}
inline constexpr has_bitwise_ops& operator^=(has_bitwise_ops& a, has_bitwise_ops b) {
  return a = a ^ b;
}

inline constexpr has_bitwise_ops operator~(has_bitwise_ops a) {
  using E = has_bitwise_ops;
  using U = std::underlying_type_t<E>;
  return static_cast<E>(~static_cast<U>(a));
}
/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "is_unscoped", "kind": "enum" } */
enum is_unscoped : int {
  hello = 0,
  world = 1,
};

/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "MyForwardRefEnum", "kind": "enum" } */
enum class MyForwardRefEnum {
  ZERO = 0,
  NONZERO = 12,
};

} // namespace apache::thrift::fixtures::types

template<> struct std::hash<::apache::thrift::fixtures::types::has_bitwise_ops> :
  ::apache::thrift::detail::enum_hash<::apache::thrift::fixtures::types::has_bitwise_ops> {};
template<> struct std::hash<::apache::thrift::fixtures::types::is_unscoped> :
  ::apache::thrift::detail::enum_hash<::apache::thrift::fixtures::types::is_unscoped> {};
template<> struct std::hash<::apache::thrift::fixtures::types::MyForwardRefEnum> :
  ::apache::thrift::detail::enum_hash<::apache::thrift::fixtures::types::MyForwardRefEnum> {};

namespace apache::thrift {

template <> struct TEnumTraits<::apache::thrift::fixtures::types::has_bitwise_ops> {
  using type = ::apache::thrift::fixtures::types::has_bitwise_ops;

  static constexpr std::size_t const size = 5;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "has_bitwise_ops";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "module";
  }

  FOLLY_ERASE static constexpr std::string_view __fbthrift_thrift_uri() noexcept {
    return "apache.org/thrift/fixtures/types/has_bitwise_ops";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::none; }
  static constexpr type max() { return type::three; }
};

template <> struct TEnumTraits<::apache::thrift::fixtures::types::is_unscoped> {
  using type = ::apache::thrift::fixtures::types::is_unscoped;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "is_unscoped";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "module";
  }

  FOLLY_ERASE static constexpr std::string_view __fbthrift_thrift_uri() noexcept {
    return "apache.org/thrift/fixtures/types/is_unscoped";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::hello; }
  static constexpr type max() { return type::world; }
};

template <> struct TEnumTraits<::apache::thrift::fixtures::types::MyForwardRefEnum> {
  using type = ::apache::thrift::fixtures::types::MyForwardRefEnum;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "MyForwardRefEnum";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "module";
  }

  FOLLY_ERASE static constexpr std::string_view __fbthrift_thrift_uri() noexcept {
    return "apache.org/thrift/fixtures/types/MyForwardRefEnum";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::ZERO; }
  static constexpr type max() { return type::NONZERO; }
};

} // namespace apache::thrift
// END declare_enums
// BEGIN forward_declare
namespace apache::thrift::fixtures::types {
class empty_struct;
class decorated_struct;
class ContainerStruct;
class CppTypeStruct;
class VirtualStruct;
class MyStructWithForwardRefEnum;
class TrivialNumeric;
class TrivialNestedWithDefault;
class ComplexString;
class ComplexNestedWithDefault;
class MinPadding;
class MinPaddingWithCustomType;
class MyStruct;
class MyDataItem;
class Renamed;
class AnnotatedTypes;
class ForwardUsageRoot;
class ForwardUsageStruct;
class ForwardUsageByRef;
class IncompleteMap;
class IncompleteMapDep;
class CompleteMap;
class CompleteMapDep;
class IncompleteList;
class IncompleteListDep;
class CompleteList;
class CompleteListDep;
class AdaptedList;
namespace detail {
class AdaptedListDep;
} // namespace detail
class DependentAdaptedList;
namespace detail {
class DependentAdaptedListDep;
} // namespace detail
class AllocatorAware;
class AllocatorAware2;
class TypedefStruct;
class StructWithDoubleUnderscores;
} // namespace apache::thrift::fixtures::types
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
template<>
struct is_cpp_ref_field_optional<::apache::thrift::fixtures::types::ForwardUsageRoot,::apache::thrift::type::field_id<2>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::apache::thrift::fixtures::types::ForwardUsageStruct,::apache::thrift::type::field_id<1>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::apache::thrift::fixtures::types::ForwardUsageByRef,::apache::thrift::type::field_id<1>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep,::apache::thrift::type::field_id<1>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::apache::thrift::fixtures::types::AllocatorAware2,::apache::thrift::type::field_id<2>> : std::true_type{};
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
namespace std {

template<> struct hash<typename ::apache::thrift::fixtures::types::decorated_struct> {
  size_t operator()(const ::apache::thrift::fixtures::types::decorated_struct&) const;
};
template<> struct equal_to<typename ::apache::thrift::fixtures::types::decorated_struct> {
  bool operator()(const ::apache::thrift::fixtures::types::decorated_struct&,const ::apache::thrift::fixtures::types::decorated_struct&) const;
};
} // std
// END hash_and_equal_to
namespace apache::thrift::fixtures::types {
using AdaptedListDep = detail::AdaptedListDep;
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "TBinary", "kind": "typedef" } */
using TBinary = ::std::string;
/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "IntTypedef", "kind": "typedef" } */
using IntTypedef = ::std::int32_t;
/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "UintTypedef", "kind": "typedef" } */
using UintTypedef = std::uint32_t;
/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "SomeListOfTypeMap_2468", "kind": "typedef" } */
using SomeListOfTypeMap_2468 = ::apache::thrift::fixtures::types::SomeListOfTypeMap;
/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "TBinary_8623", "kind": "typedef" } */
using TBinary_8623 = ::apache::thrift::fixtures::types::TBinary;
/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "i32_9314", "kind": "typedef" } */
using i32_9314 = ::std::int32_t;
/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "list_i32_9187", "kind": "typedef" } */
using list_i32_9187 = ::std::vector<::std::int32_t>;
/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "map_i32_i32_9565", "kind": "typedef" } */
using map_i32_i32_9565 = ::std::map<::std::int32_t, ::std::int32_t>;
/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "map_i32_string_1261", "kind": "typedef" } */
using map_i32_string_1261 = ::std::map<::std::int32_t, ::std::string>;
/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "set_i32_7070", "kind": "typedef" } */
using set_i32_7070 = ::std::set<::std::int32_t>;
/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "set_i32_7194", "kind": "typedef" } */
using set_i32_7194 = folly::sorted_vector_set<::std::int32_t>;
/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "string_5252", "kind": "typedef" } */
using string_5252 = ::std::string;

/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "empty_struct", "kind": "struct" } */
class empty_struct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = empty_struct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  empty_struct() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  empty_struct(apache::thrift::FragileConstructor);

  empty_struct(empty_struct&&) = default;

  empty_struct(const empty_struct&) = default;


  empty_struct& operator=(empty_struct&&) = default;

  empty_struct& operator=(const empty_struct&) = default;

 public:

  bool operator==(const empty_struct&) const;
  bool operator<(const empty_struct&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<empty_struct>;
  friend void swap(empty_struct& a, empty_struct& b);
};

template <class Protocol_>
unsigned long empty_struct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "decorated_struct", "kind": "struct" } */
class decorated_struct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = decorated_struct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  decorated_struct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  decorated_struct(apache::thrift::FragileConstructor, ::std::string field__arg);

  decorated_struct(decorated_struct&&) noexcept;

  decorated_struct(const decorated_struct& src);


  decorated_struct& operator=(decorated_struct&&) noexcept;
  decorated_struct& operator=(const decorated_struct& src);

  ~decorated_struct();

 private:
  ::std::string __fbthrift_field_field;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const decorated_struct&) const;
  bool operator<(const decorated_struct&) const;

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field_ref() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field_ref() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  [[deprecated("Use `FOO.field().value()` instead of `FOO.get_field()`")]]
  const ::std::string& get_field() const& {
    return __fbthrift_field_field;
  }

  /** Glean { "field": "field" } */
  [[deprecated("Use `FOO.field().value()` instead of `FOO.get_field()`")]]
  ::std::string get_field() && {
    return static_cast<::std::string&&>(__fbthrift_field_field);
  }

  /** Glean { "field": "field" } */
  template <typename T_decorated_struct_field_struct_setter = ::std::string>
  [[deprecated("Use `FOO.field() = BAR` instead of `FOO.set_field(BAR)`")]]
  ::std::string& set_field(T_decorated_struct_field_struct_setter&& field_) {
    field_ref() = std::forward<T_decorated_struct_field_struct_setter>(field_);
    return __fbthrift_field_field;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<decorated_struct>;
  friend void swap(decorated_struct& a, decorated_struct& b);
};

template <class Protocol_>
unsigned long decorated_struct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "ContainerStruct", "kind": "struct" } */
class ContainerStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 8;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,12,2,3,4,5,6,7,8};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::fieldA,
    ::apache::thrift::ident::fieldB,
    ::apache::thrift::ident::fieldC,
    ::apache::thrift::ident::fieldD,
    ::apache::thrift::ident::fieldE,
    ::apache::thrift::ident::fieldF,
    ::apache::thrift::ident::fieldG,
    ::apache::thrift::ident::fieldH
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::cpp_type<std::list<::std::int32_t>, ::apache::thrift::type::list<::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::cpp_type<std::deque<::std::int32_t>, ::apache::thrift::type::list<::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::cpp_type<folly::fbvector<::std::int32_t>, ::apache::thrift::type::list<::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::cpp_type<folly::small_vector<::std::int32_t>, ::apache::thrift::type::list<::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::cpp_type<folly::sorted_vector_set<::std::int32_t>, ::apache::thrift::type::set<::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::cpp_type<folly::sorted_vector_map<::std::int32_t, ::std::string>, ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::string_t>>,
    ::apache::thrift::type::cpp_type<std::unordered_map<::std::int32_t, ::std::string>, ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::string_t>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ContainerStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  ContainerStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ContainerStruct(apache::thrift::FragileConstructor, ::std::vector<::std::int32_t> fieldA__arg, std::list<::std::int32_t> fieldB__arg, std::deque<::std::int32_t> fieldC__arg, folly::fbvector<::std::int32_t> fieldD__arg, folly::small_vector<::std::int32_t> fieldE__arg, ::apache::thrift::fixtures::types::set_i32_7194 fieldF__arg, folly::sorted_vector_map<::std::int32_t, ::std::string> fieldG__arg, ::apache::thrift::fixtures::types::SomeMap fieldH__arg);

  ContainerStruct(ContainerStruct&&) noexcept;

  ContainerStruct(const ContainerStruct& src);


  ContainerStruct& operator=(ContainerStruct&&) noexcept;
  ContainerStruct& operator=(const ContainerStruct& src);

  ~ContainerStruct();

 private:
  ::std::vector<::std::int32_t> __fbthrift_field_fieldA;
 private:
  std::list<::std::int32_t> __fbthrift_field_fieldB;
 private:
  std::deque<::std::int32_t> __fbthrift_field_fieldC;
 private:
  folly::fbvector<::std::int32_t> __fbthrift_field_fieldD;
 private:
  folly::small_vector<::std::int32_t> __fbthrift_field_fieldE;
 private:
  ::apache::thrift::fixtures::types::set_i32_7194 __fbthrift_field_fieldF;
 private:
  folly::sorted_vector_map<::std::int32_t, ::std::string> __fbthrift_field_fieldG;
 private:
  ::apache::thrift::fixtures::types::SomeMap __fbthrift_field_fieldH;
 private:
  apache::thrift::detail::isset_bitset<8, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const ContainerStruct&) const;
  bool operator<(const ContainerStruct&) const;

  /** Glean { "field": "fieldA" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldA_ref() const& {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "fieldA" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldA_ref() & {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "fieldA" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldA_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldA), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "fieldA" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldA() const& {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "fieldA" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldA() & {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "fieldA" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldA() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldA), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "fieldB" } */
  template <typename..., typename fbthrift_T = std::list<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldB_ref() const& {
    return {this->__fbthrift_field_fieldB, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "fieldB" } */
  template <typename..., typename fbthrift_T = std::list<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldB_ref() & {
    return {this->__fbthrift_field_fieldB, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "fieldB" } */
  template <typename..., typename fbthrift_T = std::list<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldB_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldB), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "fieldB" } */
  template <typename..., typename fbthrift_T = std::list<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldB() const& {
    return {this->__fbthrift_field_fieldB, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "fieldB" } */
  template <typename..., typename fbthrift_T = std::list<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldB() & {
    return {this->__fbthrift_field_fieldB, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "fieldB" } */
  template <typename..., typename fbthrift_T = std::list<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldB() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldB), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "fieldC" } */
  template <typename..., typename fbthrift_T = std::deque<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldC_ref() const& {
    return {this->__fbthrift_field_fieldC, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "fieldC" } */
  template <typename..., typename fbthrift_T = std::deque<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldC_ref() & {
    return {this->__fbthrift_field_fieldC, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "fieldC" } */
  template <typename..., typename fbthrift_T = std::deque<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldC_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldC), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "fieldC" } */
  template <typename..., typename fbthrift_T = std::deque<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldC() const& {
    return {this->__fbthrift_field_fieldC, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "fieldC" } */
  template <typename..., typename fbthrift_T = std::deque<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldC() & {
    return {this->__fbthrift_field_fieldC, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "fieldC" } */
  template <typename..., typename fbthrift_T = std::deque<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldC() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldC), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "fieldD" } */
  template <typename..., typename fbthrift_T = folly::fbvector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldD_ref() const& {
    return {this->__fbthrift_field_fieldD, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "fieldD" } */
  template <typename..., typename fbthrift_T = folly::fbvector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldD_ref() & {
    return {this->__fbthrift_field_fieldD, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "fieldD" } */
  template <typename..., typename fbthrift_T = folly::fbvector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldD_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldD), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "fieldD" } */
  template <typename..., typename fbthrift_T = folly::fbvector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldD() const& {
    return {this->__fbthrift_field_fieldD, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "fieldD" } */
  template <typename..., typename fbthrift_T = folly::fbvector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldD() & {
    return {this->__fbthrift_field_fieldD, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "fieldD" } */
  template <typename..., typename fbthrift_T = folly::fbvector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldD() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldD), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "fieldE" } */
  template <typename..., typename fbthrift_T = folly::small_vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldE_ref() const& {
    return {this->__fbthrift_field_fieldE, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "fieldE" } */
  template <typename..., typename fbthrift_T = folly::small_vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldE_ref() & {
    return {this->__fbthrift_field_fieldE, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "fieldE" } */
  template <typename..., typename fbthrift_T = folly::small_vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldE_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldE), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "fieldE" } */
  template <typename..., typename fbthrift_T = folly::small_vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldE() const& {
    return {this->__fbthrift_field_fieldE, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "fieldE" } */
  template <typename..., typename fbthrift_T = folly::small_vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldE() & {
    return {this->__fbthrift_field_fieldE, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "fieldE" } */
  template <typename..., typename fbthrift_T = folly::small_vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldE() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldE), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "fieldF" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::set_i32_7194>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldF_ref() const& {
    return {this->__fbthrift_field_fieldF, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "fieldF" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::set_i32_7194>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldF_ref() & {
    return {this->__fbthrift_field_fieldF, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "fieldF" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::set_i32_7194>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldF_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldF), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "fieldF" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::set_i32_7194>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldF() const& {
    return {this->__fbthrift_field_fieldF, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "fieldF" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::set_i32_7194>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldF() & {
    return {this->__fbthrift_field_fieldF, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "fieldF" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::set_i32_7194>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldF() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldF), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "fieldG" } */
  template <typename..., typename fbthrift_T = folly::sorted_vector_map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldG_ref() const& {
    return {this->__fbthrift_field_fieldG, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "fieldG" } */
  template <typename..., typename fbthrift_T = folly::sorted_vector_map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldG_ref() & {
    return {this->__fbthrift_field_fieldG, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "fieldG" } */
  template <typename..., typename fbthrift_T = folly::sorted_vector_map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldG_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldG), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "fieldG" } */
  template <typename..., typename fbthrift_T = folly::sorted_vector_map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldG() const& {
    return {this->__fbthrift_field_fieldG, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "fieldG" } */
  template <typename..., typename fbthrift_T = folly::sorted_vector_map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldG() & {
    return {this->__fbthrift_field_fieldG, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "fieldG" } */
  template <typename..., typename fbthrift_T = folly::sorted_vector_map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldG() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldG), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "fieldH" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::SomeMap>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldH_ref() const& {
    return {this->__fbthrift_field_fieldH, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "fieldH" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::SomeMap>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldH_ref() & {
    return {this->__fbthrift_field_fieldH, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "fieldH" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::SomeMap>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldH_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldH), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "fieldH" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::SomeMap>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldH() const& {
    return {this->__fbthrift_field_fieldH, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "fieldH" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::SomeMap>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldH() & {
    return {this->__fbthrift_field_fieldH, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "fieldH" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::SomeMap>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldH() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldH), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "fieldA" } */
  [[deprecated("Use `FOO.fieldA().value()` instead of `FOO.get_fieldA()`")]]
  const ::std::vector<::std::int32_t>& get_fieldA() const&;

  /** Glean { "field": "fieldA" } */
  [[deprecated("Use `FOO.fieldA().value()` instead of `FOO.get_fieldA()`")]]
  ::std::vector<::std::int32_t> get_fieldA() &&;

  /** Glean { "field": "fieldA" } */
  template <typename T_ContainerStruct_fieldA_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.fieldA() = BAR` instead of `FOO.set_fieldA(BAR)`")]]
  ::std::vector<::std::int32_t>& set_fieldA(T_ContainerStruct_fieldA_struct_setter&& fieldA_) {
    fieldA_ref() = std::forward<T_ContainerStruct_fieldA_struct_setter>(fieldA_);
    return __fbthrift_field_fieldA;
  }

  /** Glean { "field": "fieldB" } */
  [[deprecated("Use `FOO.fieldB().value()` instead of `FOO.get_fieldB()`")]]
  const std::list<::std::int32_t>& get_fieldB() const&;

  /** Glean { "field": "fieldB" } */
  [[deprecated("Use `FOO.fieldB().value()` instead of `FOO.get_fieldB()`")]]
  std::list<::std::int32_t> get_fieldB() &&;

  /** Glean { "field": "fieldB" } */
  template <typename T_ContainerStruct_fieldB_struct_setter = std::list<::std::int32_t>>
  [[deprecated("Use `FOO.fieldB() = BAR` instead of `FOO.set_fieldB(BAR)`")]]
  std::list<::std::int32_t>& set_fieldB(T_ContainerStruct_fieldB_struct_setter&& fieldB_) {
    fieldB_ref() = std::forward<T_ContainerStruct_fieldB_struct_setter>(fieldB_);
    return __fbthrift_field_fieldB;
  }

  /** Glean { "field": "fieldC" } */
  [[deprecated("Use `FOO.fieldC().value()` instead of `FOO.get_fieldC()`")]]
  const std::deque<::std::int32_t>& get_fieldC() const&;

  /** Glean { "field": "fieldC" } */
  [[deprecated("Use `FOO.fieldC().value()` instead of `FOO.get_fieldC()`")]]
  std::deque<::std::int32_t> get_fieldC() &&;

  /** Glean { "field": "fieldC" } */
  template <typename T_ContainerStruct_fieldC_struct_setter = std::deque<::std::int32_t>>
  [[deprecated("Use `FOO.fieldC() = BAR` instead of `FOO.set_fieldC(BAR)`")]]
  std::deque<::std::int32_t>& set_fieldC(T_ContainerStruct_fieldC_struct_setter&& fieldC_) {
    fieldC_ref() = std::forward<T_ContainerStruct_fieldC_struct_setter>(fieldC_);
    return __fbthrift_field_fieldC;
  }

  /** Glean { "field": "fieldD" } */
  [[deprecated("Use `FOO.fieldD().value()` instead of `FOO.get_fieldD()`")]]
  const folly::fbvector<::std::int32_t>& get_fieldD() const&;

  /** Glean { "field": "fieldD" } */
  [[deprecated("Use `FOO.fieldD().value()` instead of `FOO.get_fieldD()`")]]
  folly::fbvector<::std::int32_t> get_fieldD() &&;

  /** Glean { "field": "fieldD" } */
  template <typename T_ContainerStruct_fieldD_struct_setter = folly::fbvector<::std::int32_t>>
  [[deprecated("Use `FOO.fieldD() = BAR` instead of `FOO.set_fieldD(BAR)`")]]
  folly::fbvector<::std::int32_t>& set_fieldD(T_ContainerStruct_fieldD_struct_setter&& fieldD_) {
    fieldD_ref() = std::forward<T_ContainerStruct_fieldD_struct_setter>(fieldD_);
    return __fbthrift_field_fieldD;
  }

  /** Glean { "field": "fieldE" } */
  [[deprecated("Use `FOO.fieldE().value()` instead of `FOO.get_fieldE()`")]]
  const folly::small_vector<::std::int32_t>& get_fieldE() const&;

  /** Glean { "field": "fieldE" } */
  [[deprecated("Use `FOO.fieldE().value()` instead of `FOO.get_fieldE()`")]]
  folly::small_vector<::std::int32_t> get_fieldE() &&;

  /** Glean { "field": "fieldE" } */
  template <typename T_ContainerStruct_fieldE_struct_setter = folly::small_vector<::std::int32_t>>
  [[deprecated("Use `FOO.fieldE() = BAR` instead of `FOO.set_fieldE(BAR)`")]]
  folly::small_vector<::std::int32_t>& set_fieldE(T_ContainerStruct_fieldE_struct_setter&& fieldE_) {
    fieldE_ref() = std::forward<T_ContainerStruct_fieldE_struct_setter>(fieldE_);
    return __fbthrift_field_fieldE;
  }

  /** Glean { "field": "fieldF" } */
  [[deprecated("Use `FOO.fieldF().value()` instead of `FOO.get_fieldF()`")]]
  const ::apache::thrift::fixtures::types::set_i32_7194& get_fieldF() const&;

  /** Glean { "field": "fieldF" } */
  [[deprecated("Use `FOO.fieldF().value()` instead of `FOO.get_fieldF()`")]]
  ::apache::thrift::fixtures::types::set_i32_7194 get_fieldF() &&;

  /** Glean { "field": "fieldF" } */
  template <typename T_ContainerStruct_fieldF_struct_setter = ::apache::thrift::fixtures::types::set_i32_7194>
  [[deprecated("Use `FOO.fieldF() = BAR` instead of `FOO.set_fieldF(BAR)`")]]
  ::apache::thrift::fixtures::types::set_i32_7194& set_fieldF(T_ContainerStruct_fieldF_struct_setter&& fieldF_) {
    fieldF_ref() = std::forward<T_ContainerStruct_fieldF_struct_setter>(fieldF_);
    return __fbthrift_field_fieldF;
  }

  /** Glean { "field": "fieldG" } */
  [[deprecated("Use `FOO.fieldG().value()` instead of `FOO.get_fieldG()`")]]
  const folly::sorted_vector_map<::std::int32_t, ::std::string>& get_fieldG() const&;

  /** Glean { "field": "fieldG" } */
  [[deprecated("Use `FOO.fieldG().value()` instead of `FOO.get_fieldG()`")]]
  folly::sorted_vector_map<::std::int32_t, ::std::string> get_fieldG() &&;

  /** Glean { "field": "fieldG" } */
  template <typename T_ContainerStruct_fieldG_struct_setter = folly::sorted_vector_map<::std::int32_t, ::std::string>>
  [[deprecated("Use `FOO.fieldG() = BAR` instead of `FOO.set_fieldG(BAR)`")]]
  folly::sorted_vector_map<::std::int32_t, ::std::string>& set_fieldG(T_ContainerStruct_fieldG_struct_setter&& fieldG_) {
    fieldG_ref() = std::forward<T_ContainerStruct_fieldG_struct_setter>(fieldG_);
    return __fbthrift_field_fieldG;
  }

  /** Glean { "field": "fieldH" } */
  [[deprecated("Use `FOO.fieldH().value()` instead of `FOO.get_fieldH()`")]]
  const ::apache::thrift::fixtures::types::SomeMap& get_fieldH() const&;

  /** Glean { "field": "fieldH" } */
  [[deprecated("Use `FOO.fieldH().value()` instead of `FOO.get_fieldH()`")]]
  ::apache::thrift::fixtures::types::SomeMap get_fieldH() &&;

  /** Glean { "field": "fieldH" } */
  template <typename T_ContainerStruct_fieldH_struct_setter = ::apache::thrift::fixtures::types::SomeMap>
  [[deprecated("Use `FOO.fieldH() = BAR` instead of `FOO.set_fieldH(BAR)`")]]
  ::apache::thrift::fixtures::types::SomeMap& set_fieldH(T_ContainerStruct_fieldH_struct_setter&& fieldH_) {
    fieldH_ref() = std::forward<T_ContainerStruct_fieldH_struct_setter>(fieldH_);
    return __fbthrift_field_fieldH;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ContainerStruct>;
  friend void swap(ContainerStruct& a, ContainerStruct& b);
};

template <class Protocol_>
unsigned long ContainerStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "CppTypeStruct", "kind": "struct" } */
class CppTypeStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::fieldA
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::cpp_type<std::list<int32_t>, ::apache::thrift::type::list<::apache::thrift::type::i32_t>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = CppTypeStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  CppTypeStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  CppTypeStruct(apache::thrift::FragileConstructor, std::list<int32_t> fieldA__arg);

  CppTypeStruct(CppTypeStruct&&) noexcept;

  CppTypeStruct(const CppTypeStruct& src);


  CppTypeStruct& operator=(CppTypeStruct&&) noexcept;
  CppTypeStruct& operator=(const CppTypeStruct& src);

  ~CppTypeStruct();

 private:
  std::list<int32_t> __fbthrift_field_fieldA;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const CppTypeStruct&) const;
  bool operator<(const CppTypeStruct&) const;

  /** Glean { "field": "fieldA" } */
  template <typename..., typename fbthrift_T = std::list<int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldA_ref() const& {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "fieldA" } */
  template <typename..., typename fbthrift_T = std::list<int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldA_ref() & {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "fieldA" } */
  template <typename..., typename fbthrift_T = std::list<int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldA_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldA), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "fieldA" } */
  template <typename..., typename fbthrift_T = std::list<int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldA() const& {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "fieldA" } */
  template <typename..., typename fbthrift_T = std::list<int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldA() & {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "fieldA" } */
  template <typename..., typename fbthrift_T = std::list<int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldA() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldA), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "fieldA" } */
  [[deprecated("Use `FOO.fieldA().value()` instead of `FOO.get_fieldA()`")]]
  const std::list<int32_t>& get_fieldA() const&;

  /** Glean { "field": "fieldA" } */
  [[deprecated("Use `FOO.fieldA().value()` instead of `FOO.get_fieldA()`")]]
  std::list<int32_t> get_fieldA() &&;

  /** Glean { "field": "fieldA" } */
  template <typename T_CppTypeStruct_fieldA_struct_setter = std::list<int32_t>>
  [[deprecated("Use `FOO.fieldA() = BAR` instead of `FOO.set_fieldA(BAR)`")]]
  std::list<int32_t>& set_fieldA(T_CppTypeStruct_fieldA_struct_setter&& fieldA_) {
    fieldA_ref() = std::forward<T_CppTypeStruct_fieldA_struct_setter>(fieldA_);
    return __fbthrift_field_fieldA;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<CppTypeStruct>;
  friend void swap(CppTypeStruct& a, CppTypeStruct& b);
};

template <class Protocol_>
unsigned long CppTypeStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "VirtualStruct", "kind": "struct" } */
class VirtualStruct  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::MyIntField
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = VirtualStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  VirtualStruct() :
      __fbthrift_field_MyIntField() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  VirtualStruct(apache::thrift::FragileConstructor, ::std::int64_t MyIntField__arg);

  VirtualStruct(VirtualStruct&&) noexcept;

  VirtualStruct(const VirtualStruct& src);


  VirtualStruct& operator=(VirtualStruct&&) noexcept;
  VirtualStruct& operator=(const VirtualStruct& src);

  virtual ~VirtualStruct() {}

 private:
  ::std::int64_t __fbthrift_field_MyIntField;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const VirtualStruct&) const;
  bool operator<(const VirtualStruct&) const;

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyIntField_ref() const& {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyIntField_ref() & {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyIntField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyIntField), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyIntField() const& {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyIntField() & {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyIntField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyIntField), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  [[deprecated("Use `FOO.MyIntField().value()` instead of `FOO.get_MyIntField()`")]]
  ::std::int64_t get_MyIntField() const;

  /** Glean { "field": "MyIntField" } */
  [[deprecated("Use `FOO.MyIntField() = BAR` instead of `FOO.set_MyIntField(BAR)`")]]
  ::std::int64_t& set_MyIntField(::std::int64_t MyIntField_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<VirtualStruct>;
  friend void swap(VirtualStruct& a, VirtualStruct& b);
};

template <class Protocol_>
unsigned long VirtualStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "MyStructWithForwardRefEnum", "kind": "struct" } */
class MyStructWithForwardRefEnum final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::a,
    ::apache::thrift::ident::b
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::enum_t<::apache::thrift::fixtures::types::MyForwardRefEnum>,
    ::apache::thrift::type::enum_t<::apache::thrift::fixtures::types::MyForwardRefEnum>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructWithForwardRefEnum;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  MyStructWithForwardRefEnum() :
      __fbthrift_field_a( ::apache::thrift::fixtures::types::MyForwardRefEnum::NONZERO),
      __fbthrift_field_b( ::apache::thrift::fixtures::types::MyForwardRefEnum::NONZERO) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructWithForwardRefEnum(apache::thrift::FragileConstructor, ::apache::thrift::fixtures::types::MyForwardRefEnum a__arg, ::apache::thrift::fixtures::types::MyForwardRefEnum b__arg);

  MyStructWithForwardRefEnum(MyStructWithForwardRefEnum&&) = default;

  MyStructWithForwardRefEnum(const MyStructWithForwardRefEnum&) = default;


  MyStructWithForwardRefEnum& operator=(MyStructWithForwardRefEnum&&) = default;

  MyStructWithForwardRefEnum& operator=(const MyStructWithForwardRefEnum&) = default;
 private:
  ::apache::thrift::fixtures::types::MyForwardRefEnum __fbthrift_field_a;
 private:
  ::apache::thrift::fixtures::types::MyForwardRefEnum __fbthrift_field_b;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructWithForwardRefEnum&) const;
  bool operator<(const MyStructWithForwardRefEnum&) const;

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::MyForwardRefEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> a_ref() const& {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::MyForwardRefEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> a_ref() & {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::MyForwardRefEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> a_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_a), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::MyForwardRefEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> a() const& {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::MyForwardRefEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> a() & {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::MyForwardRefEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> a() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_a), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::MyForwardRefEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> b_ref() const& {
    return {this->__fbthrift_field_b, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::MyForwardRefEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> b_ref() & {
    return {this->__fbthrift_field_b, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::MyForwardRefEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> b_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_b), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::MyForwardRefEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> b() const& {
    return {this->__fbthrift_field_b, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::MyForwardRefEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> b() & {
    return {this->__fbthrift_field_b, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::MyForwardRefEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> b() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_b), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "a" } */
  [[deprecated("Use `FOO.a().value()` instead of `FOO.get_a()`")]]
  ::apache::thrift::fixtures::types::MyForwardRefEnum get_a() const;

  /** Glean { "field": "a" } */
  [[deprecated("Use `FOO.a() = BAR` instead of `FOO.set_a(BAR)`")]]
  ::apache::thrift::fixtures::types::MyForwardRefEnum& set_a(::apache::thrift::fixtures::types::MyForwardRefEnum a_);

  /** Glean { "field": "b" } */
  [[deprecated("Use `FOO.b().value()` instead of `FOO.get_b()`")]]
  ::apache::thrift::fixtures::types::MyForwardRefEnum get_b() const;

  /** Glean { "field": "b" } */
  [[deprecated("Use `FOO.b() = BAR` instead of `FOO.set_b(BAR)`")]]
  ::apache::thrift::fixtures::types::MyForwardRefEnum& set_b(::apache::thrift::fixtures::types::MyForwardRefEnum b_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructWithForwardRefEnum>;
  friend void swap(MyStructWithForwardRefEnum& a, MyStructWithForwardRefEnum& b);
};

template <class Protocol_>
unsigned long MyStructWithForwardRefEnum::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "TrivialNumeric", "kind": "struct" } */
class TrivialNumeric final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::a,
    ::apache::thrift::ident::b
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::bool_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TrivialNumeric;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  TrivialNumeric() :
      __fbthrift_field_a(),
      __fbthrift_field_b() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TrivialNumeric(apache::thrift::FragileConstructor, ::std::int32_t a__arg, bool b__arg);

  TrivialNumeric(TrivialNumeric&&) = default;

  TrivialNumeric(const TrivialNumeric&) = default;


  TrivialNumeric& operator=(TrivialNumeric&&) = default;

  TrivialNumeric& operator=(const TrivialNumeric&) = default;
 private:
  ::std::int32_t __fbthrift_field_a;
 private:
  bool __fbthrift_field_b;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const TrivialNumeric&) const;
  bool operator<(const TrivialNumeric&) const;

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> a_ref() const& {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> a_ref() & {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> a_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_a), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> a() const& {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> a() & {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> a() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_a), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> b_ref() const& {
    return {this->__fbthrift_field_b, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> b_ref() & {
    return {this->__fbthrift_field_b, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> b_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_b), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> b() const& {
    return {this->__fbthrift_field_b, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> b() & {
    return {this->__fbthrift_field_b, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> b() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_b), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "a" } */
  [[deprecated("Use `FOO.a().value()` instead of `FOO.get_a()`")]]
  ::std::int32_t get_a() const;

  /** Glean { "field": "a" } */
  [[deprecated("Use `FOO.a() = BAR` instead of `FOO.set_a(BAR)`")]]
  ::std::int32_t& set_a(::std::int32_t a_);

  /** Glean { "field": "b" } */
  [[deprecated("Use `FOO.b().value()` instead of `FOO.get_b()`")]]
  bool get_b() const;

  /** Glean { "field": "b" } */
  [[deprecated("Use `FOO.b() = BAR` instead of `FOO.set_b(BAR)`")]]
  bool& set_b(bool b_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TrivialNumeric>;
  friend void swap(TrivialNumeric& a, TrivialNumeric& b);
};

template <class Protocol_>
unsigned long TrivialNumeric::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "TrivialNestedWithDefault", "kind": "struct" } */
class TrivialNestedWithDefault final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::z,
    ::apache::thrift::ident::n
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::struct_t<::apache::thrift::fixtures::types::TrivialNumeric>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TrivialNestedWithDefault;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  TrivialNestedWithDefault() :
      __fbthrift_field_z(static_cast<::std::int32_t>(4)),
      __fbthrift_field_n(::apache::thrift::detail::make_structured_constant<::apache::thrift::fixtures::types::TrivialNumeric>(::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::a>(static_cast<::std::int32_t>(3)), ::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::b>(true))) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TrivialNestedWithDefault(apache::thrift::FragileConstructor, ::std::int32_t z__arg, ::apache::thrift::fixtures::types::TrivialNumeric n__arg);

  TrivialNestedWithDefault(TrivialNestedWithDefault&&) = default;

  TrivialNestedWithDefault(const TrivialNestedWithDefault&) = default;


  TrivialNestedWithDefault& operator=(TrivialNestedWithDefault&&) = default;

  TrivialNestedWithDefault& operator=(const TrivialNestedWithDefault&) = default;
 private:
  ::std::int32_t __fbthrift_field_z;
 private:
  ::apache::thrift::fixtures::types::TrivialNumeric __fbthrift_field_n;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const TrivialNestedWithDefault&) const;
  bool operator<(const TrivialNestedWithDefault&) const;

  /** Glean { "field": "z" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> z_ref() const& {
    return {this->__fbthrift_field_z, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "z" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> z_ref() & {
    return {this->__fbthrift_field_z, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "z" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> z_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_z), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "z" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> z() const& {
    return {this->__fbthrift_field_z, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "z" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> z() & {
    return {this->__fbthrift_field_z, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "z" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> z() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_z), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "n" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::TrivialNumeric>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> n_ref() const& {
    return {this->__fbthrift_field_n, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "n" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::TrivialNumeric>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> n_ref() & {
    return {this->__fbthrift_field_n, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "n" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::TrivialNumeric>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> n_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_n), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "n" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::TrivialNumeric>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> n() const& {
    return {this->__fbthrift_field_n, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "n" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::TrivialNumeric>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> n() & {
    return {this->__fbthrift_field_n, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "n" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::TrivialNumeric>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> n() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_n), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "z" } */
  [[deprecated("Use `FOO.z().value()` instead of `FOO.get_z()`")]]
  ::std::int32_t get_z() const;

  /** Glean { "field": "z" } */
  [[deprecated("Use `FOO.z() = BAR` instead of `FOO.set_z(BAR)`")]]
  ::std::int32_t& set_z(::std::int32_t z_);

  /** Glean { "field": "n" } */
  [[deprecated("Use `FOO.n().value()` instead of `FOO.get_n()`")]]
  const ::apache::thrift::fixtures::types::TrivialNumeric& get_n() const&;

  /** Glean { "field": "n" } */
  [[deprecated("Use `FOO.n().value()` instead of `FOO.get_n()`")]]
  ::apache::thrift::fixtures::types::TrivialNumeric get_n() &&;

  /** Glean { "field": "n" } */
  template <typename T_TrivialNestedWithDefault_n_struct_setter = ::apache::thrift::fixtures::types::TrivialNumeric>
  [[deprecated("Use `FOO.n() = BAR` instead of `FOO.set_n(BAR)`")]]
  ::apache::thrift::fixtures::types::TrivialNumeric& set_n(T_TrivialNestedWithDefault_n_struct_setter&& n_) {
    n_ref() = std::forward<T_TrivialNestedWithDefault_n_struct_setter>(n_);
    return __fbthrift_field_n;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TrivialNestedWithDefault>;
  friend void swap(TrivialNestedWithDefault& a, TrivialNestedWithDefault& b);
};

template <class Protocol_>
unsigned long TrivialNestedWithDefault::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "ComplexString", "kind": "struct" } */
class ComplexString final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::a,
    ::apache::thrift::ident::b
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i32_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ComplexString;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  ComplexString();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ComplexString(apache::thrift::FragileConstructor, ::std::string a__arg, ::std::map<::std::string, ::std::int32_t> b__arg);

  ComplexString(ComplexString&&) noexcept;

  ComplexString(const ComplexString& src);


  ComplexString& operator=(ComplexString&&) noexcept;
  ComplexString& operator=(const ComplexString& src);

  ~ComplexString();

 private:
  ::std::string __fbthrift_field_a;
 private:
  ::std::map<::std::string, ::std::int32_t> __fbthrift_field_b;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const ComplexString&) const;
  bool operator<(const ComplexString&) const;

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> a_ref() const& {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> a_ref() & {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> a_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_a), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> a() const& {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> a() & {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> a() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_a), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> b_ref() const& {
    return {this->__fbthrift_field_b, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> b_ref() & {
    return {this->__fbthrift_field_b, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> b_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_b), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> b() const& {
    return {this->__fbthrift_field_b, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> b() & {
    return {this->__fbthrift_field_b, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> b() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_b), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "a" } */
  [[deprecated("Use `FOO.a().value()` instead of `FOO.get_a()`")]]
  const ::std::string& get_a() const& {
    return __fbthrift_field_a;
  }

  /** Glean { "field": "a" } */
  [[deprecated("Use `FOO.a().value()` instead of `FOO.get_a()`")]]
  ::std::string get_a() && {
    return static_cast<::std::string&&>(__fbthrift_field_a);
  }

  /** Glean { "field": "a" } */
  template <typename T_ComplexString_a_struct_setter = ::std::string>
  [[deprecated("Use `FOO.a() = BAR` instead of `FOO.set_a(BAR)`")]]
  ::std::string& set_a(T_ComplexString_a_struct_setter&& a_) {
    a_ref() = std::forward<T_ComplexString_a_struct_setter>(a_);
    return __fbthrift_field_a;
  }

  /** Glean { "field": "b" } */
  [[deprecated("Use `FOO.b().value()` instead of `FOO.get_b()`")]]
  const ::std::map<::std::string, ::std::int32_t>& get_b() const&;

  /** Glean { "field": "b" } */
  [[deprecated("Use `FOO.b().value()` instead of `FOO.get_b()`")]]
  ::std::map<::std::string, ::std::int32_t> get_b() &&;

  /** Glean { "field": "b" } */
  template <typename T_ComplexString_b_struct_setter = ::std::map<::std::string, ::std::int32_t>>
  [[deprecated("Use `FOO.b() = BAR` instead of `FOO.set_b(BAR)`")]]
  ::std::map<::std::string, ::std::int32_t>& set_b(T_ComplexString_b_struct_setter&& b_) {
    b_ref() = std::forward<T_ComplexString_b_struct_setter>(b_);
    return __fbthrift_field_b;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ComplexString>;
  friend void swap(ComplexString& a, ComplexString& b);
};

template <class Protocol_>
unsigned long ComplexString::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "ComplexNestedWithDefault", "kind": "struct" } */
class ComplexNestedWithDefault final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::z,
    ::apache::thrift::ident::n
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::struct_t<::apache::thrift::fixtures::types::ComplexString>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ComplexNestedWithDefault;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  ComplexNestedWithDefault();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ComplexNestedWithDefault(apache::thrift::FragileConstructor, ::std::string z__arg, ::apache::thrift::fixtures::types::ComplexString n__arg);

  ComplexNestedWithDefault(ComplexNestedWithDefault&&) noexcept;

  ComplexNestedWithDefault(const ComplexNestedWithDefault& src);


  ComplexNestedWithDefault& operator=(ComplexNestedWithDefault&&) noexcept;
  ComplexNestedWithDefault& operator=(const ComplexNestedWithDefault& src);

  ~ComplexNestedWithDefault();

 private:
  ::std::string __fbthrift_field_z;
 private:
  ::apache::thrift::fixtures::types::ComplexString __fbthrift_field_n;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const ComplexNestedWithDefault&) const;
  bool operator<(const ComplexNestedWithDefault&) const;

  /** Glean { "field": "z" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> z_ref() const& {
    return {this->__fbthrift_field_z, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "z" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> z_ref() & {
    return {this->__fbthrift_field_z, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "z" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> z_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_z), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "z" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> z() const& {
    return {this->__fbthrift_field_z, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "z" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> z() & {
    return {this->__fbthrift_field_z, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "z" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> z() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_z), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "n" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::ComplexString>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> n_ref() const& {
    return {this->__fbthrift_field_n, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "n" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::ComplexString>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> n_ref() & {
    return {this->__fbthrift_field_n, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "n" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::ComplexString>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> n_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_n), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "n" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::ComplexString>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> n() const& {
    return {this->__fbthrift_field_n, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "n" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::ComplexString>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> n() & {
    return {this->__fbthrift_field_n, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "n" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::ComplexString>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> n() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_n), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "z" } */
  [[deprecated("Use `FOO.z().value()` instead of `FOO.get_z()`")]]
  const ::std::string& get_z() const& {
    return __fbthrift_field_z;
  }

  /** Glean { "field": "z" } */
  [[deprecated("Use `FOO.z().value()` instead of `FOO.get_z()`")]]
  ::std::string get_z() && {
    return static_cast<::std::string&&>(__fbthrift_field_z);
  }

  /** Glean { "field": "z" } */
  template <typename T_ComplexNestedWithDefault_z_struct_setter = ::std::string>
  [[deprecated("Use `FOO.z() = BAR` instead of `FOO.set_z(BAR)`")]]
  ::std::string& set_z(T_ComplexNestedWithDefault_z_struct_setter&& z_) {
    z_ref() = std::forward<T_ComplexNestedWithDefault_z_struct_setter>(z_);
    return __fbthrift_field_z;
  }

  /** Glean { "field": "n" } */
  [[deprecated("Use `FOO.n().value()` instead of `FOO.get_n()`")]]
  const ::apache::thrift::fixtures::types::ComplexString& get_n() const&;

  /** Glean { "field": "n" } */
  [[deprecated("Use `FOO.n().value()` instead of `FOO.get_n()`")]]
  ::apache::thrift::fixtures::types::ComplexString get_n() &&;

  /** Glean { "field": "n" } */
  template <typename T_ComplexNestedWithDefault_n_struct_setter = ::apache::thrift::fixtures::types::ComplexString>
  [[deprecated("Use `FOO.n() = BAR` instead of `FOO.set_n(BAR)`")]]
  ::apache::thrift::fixtures::types::ComplexString& set_n(T_ComplexNestedWithDefault_n_struct_setter&& n_) {
    n_ref() = std::forward<T_ComplexNestedWithDefault_n_struct_setter>(n_);
    return __fbthrift_field_n;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ComplexNestedWithDefault>;
  friend void swap(ComplexNestedWithDefault& a, ComplexNestedWithDefault& b);
};

template <class Protocol_>
unsigned long ComplexNestedWithDefault::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "MinPadding", "kind": "struct" } */
class MinPadding final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 5;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::small,
    ::apache::thrift::ident::big,
    ::apache::thrift::ident::medium,
    ::apache::thrift::ident::biggish,
    ::apache::thrift::ident::tiny
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::byte_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i16_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::byte_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MinPadding;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  MinPadding() :
      __fbthrift_field_big(),
      __fbthrift_field_biggish(),
      __fbthrift_field_medium(),
      __fbthrift_field_small(),
      __fbthrift_field_tiny() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MinPadding(apache::thrift::FragileConstructor, ::std::int8_t small__arg, ::std::int64_t big__arg, ::std::int16_t medium__arg, ::std::int32_t biggish__arg, ::std::int8_t tiny__arg);

  MinPadding(MinPadding&&) noexcept;

  MinPadding(const MinPadding& src);


  MinPadding& operator=(MinPadding&&) noexcept;
  MinPadding& operator=(const MinPadding& src);
 private:
  ::std::int64_t __fbthrift_field_big;
 private:
  ::std::int32_t __fbthrift_field_biggish;
 private:
  ::std::int16_t __fbthrift_field_medium;
 private:
  ::std::int8_t __fbthrift_field_small;
 private:
  ::std::int8_t __fbthrift_field_tiny;

 public:

  bool operator==(const MinPadding&) const;
  bool operator<(const MinPadding&) const;

  /** Glean { "field": "small" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> small_ref() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_small};
  }

  /** Glean { "field": "small" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> small_ref() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_small};
  }

  /** Glean { "field": "small" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> small_ref() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_small)};
  }

  /** Glean { "field": "small" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> small() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_small};
  }

  /** Glean { "field": "small" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> small() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_small};
  }

  /** Glean { "field": "small" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> small() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_small)};
  }

  /** Glean { "field": "big" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> big_ref() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_big};
  }

  /** Glean { "field": "big" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> big_ref() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_big};
  }

  /** Glean { "field": "big" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> big_ref() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_big)};
  }

  /** Glean { "field": "big" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> big() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_big};
  }

  /** Glean { "field": "big" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> big() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_big};
  }

  /** Glean { "field": "big" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> big() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_big)};
  }

  /** Glean { "field": "medium" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> medium_ref() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_medium};
  }

  /** Glean { "field": "medium" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> medium_ref() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_medium};
  }

  /** Glean { "field": "medium" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> medium_ref() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_medium)};
  }

  /** Glean { "field": "medium" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> medium() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_medium};
  }

  /** Glean { "field": "medium" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> medium() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_medium};
  }

  /** Glean { "field": "medium" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> medium() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_medium)};
  }

  /** Glean { "field": "biggish" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> biggish_ref() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_biggish};
  }

  /** Glean { "field": "biggish" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> biggish_ref() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_biggish};
  }

  /** Glean { "field": "biggish" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> biggish_ref() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_biggish)};
  }

  /** Glean { "field": "biggish" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> biggish() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_biggish};
  }

  /** Glean { "field": "biggish" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> biggish() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_biggish};
  }

  /** Glean { "field": "biggish" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> biggish() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_biggish)};
  }

  /** Glean { "field": "tiny" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> tiny_ref() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_tiny};
  }

  /** Glean { "field": "tiny" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> tiny_ref() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_tiny};
  }

  /** Glean { "field": "tiny" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> tiny_ref() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_tiny)};
  }

  /** Glean { "field": "tiny" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> tiny() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_tiny};
  }

  /** Glean { "field": "tiny" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> tiny() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_tiny};
  }

  /** Glean { "field": "tiny" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> tiny() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_tiny)};
  }

  /** Glean { "field": "small" } */
  [[deprecated("Use `FOO.small().value()` instead of `FOO.get_small()`")]]
  ::std::int8_t get_small() const;

  /** Glean { "field": "small" } */
  [[deprecated("Use `FOO.small() = BAR` instead of `FOO.set_small(BAR)`")]]
  ::std::int8_t& set_small(::std::int8_t small_);

  /** Glean { "field": "big" } */
  [[deprecated("Use `FOO.big().value()` instead of `FOO.get_big()`")]]
  ::std::int64_t get_big() const;

  /** Glean { "field": "big" } */
  [[deprecated("Use `FOO.big() = BAR` instead of `FOO.set_big(BAR)`")]]
  ::std::int64_t& set_big(::std::int64_t big_);

  /** Glean { "field": "medium" } */
  [[deprecated("Use `FOO.medium().value()` instead of `FOO.get_medium()`")]]
  ::std::int16_t get_medium() const;

  /** Glean { "field": "medium" } */
  [[deprecated("Use `FOO.medium() = BAR` instead of `FOO.set_medium(BAR)`")]]
  ::std::int16_t& set_medium(::std::int16_t medium_);

  /** Glean { "field": "biggish" } */
  [[deprecated("Use `FOO.biggish().value()` instead of `FOO.get_biggish()`")]]
  ::std::int32_t get_biggish() const;

  /** Glean { "field": "biggish" } */
  [[deprecated("Use `FOO.biggish() = BAR` instead of `FOO.set_biggish(BAR)`")]]
  ::std::int32_t& set_biggish(::std::int32_t biggish_);

  /** Glean { "field": "tiny" } */
  [[deprecated("Use `FOO.tiny().value()` instead of `FOO.get_tiny()`")]]
  ::std::int8_t get_tiny() const;

  /** Glean { "field": "tiny" } */
  [[deprecated("Use `FOO.tiny() = BAR` instead of `FOO.set_tiny(BAR)`")]]
  ::std::int8_t& set_tiny(::std::int8_t tiny_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MinPadding>;
  friend void swap(MinPadding& a, MinPadding& b);
};

template <class Protocol_>
unsigned long MinPadding::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "MinPaddingWithCustomType", "kind": "struct" } */
class MinPaddingWithCustomType final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 5;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::small,
    ::apache::thrift::ident::biggish,
    ::apache::thrift::ident::medium,
    ::apache::thrift::ident::big,
    ::apache::thrift::ident::tiny
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::byte_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::adapted<::my::Adapter, ::apache::thrift::type::i16_t>,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::byte_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MinPaddingWithCustomType;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    true;


 public:

  MinPaddingWithCustomType() :
      __fbthrift_field_medium(),
      __fbthrift_field_big(),
      __fbthrift_field_biggish(),
      __fbthrift_field_small(),
      __fbthrift_field_tiny() {
    ::apache::thrift::adapt_detail::construct<::my::Adapter, 3>(__fbthrift_field_medium, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MinPaddingWithCustomType(apache::thrift::FragileConstructor, ::std::int8_t small__arg, ::std::int32_t biggish__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter, 3, ::std::int16_t, MinPaddingWithCustomType> medium__arg, ::std::int64_t big__arg, ::std::int8_t tiny__arg);

  MinPaddingWithCustomType(MinPaddingWithCustomType&&) noexcept;
  MinPaddingWithCustomType(const MinPaddingWithCustomType& src);


  MinPaddingWithCustomType& operator=(MinPaddingWithCustomType&&) noexcept;
  MinPaddingWithCustomType& operator=(const MinPaddingWithCustomType& src);
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter, 3, ::std::int16_t, MinPaddingWithCustomType> __fbthrift_field_medium;
 private:
  ::std::int64_t __fbthrift_field_big;
 private:
  ::std::int32_t __fbthrift_field_biggish;
 private:
  ::std::int8_t __fbthrift_field_small;
 private:
  ::std::int8_t __fbthrift_field_tiny;

 public:

  bool operator==(const MinPaddingWithCustomType&) const;
  bool operator<(const MinPaddingWithCustomType&) const;

  /** Glean { "field": "small" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> small_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_small};
  }

  /** Glean { "field": "small" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> small_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_small};
  }

  /** Glean { "field": "small" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> small_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_small)};
  }

  /** Glean { "field": "small" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> small() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_small};
  }

  /** Glean { "field": "small" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> small() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_small};
  }

  /** Glean { "field": "small" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> small() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_small)};
  }

  /** Glean { "field": "biggish" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> biggish_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_biggish};
  }

  /** Glean { "field": "biggish" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> biggish_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_biggish};
  }

  /** Glean { "field": "biggish" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> biggish_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_biggish)};
  }

  /** Glean { "field": "biggish" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> biggish() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_biggish};
  }

  /** Glean { "field": "biggish" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> biggish() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_biggish};
  }

  /** Glean { "field": "biggish" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> biggish() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_biggish)};
  }

  /** Glean { "field": "medium" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter, 3, ::std::int16_t, MinPaddingWithCustomType>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> medium_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_medium};
  }

  /** Glean { "field": "medium" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter, 3, ::std::int16_t, MinPaddingWithCustomType>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> medium_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_medium};
  }

  /** Glean { "field": "medium" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter, 3, ::std::int16_t, MinPaddingWithCustomType>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> medium_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_medium)};
  }

  /** Glean { "field": "medium" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter, 3, ::std::int16_t, MinPaddingWithCustomType>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> medium() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_medium};
  }

  /** Glean { "field": "medium" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter, 3, ::std::int16_t, MinPaddingWithCustomType>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> medium() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_medium};
  }

  /** Glean { "field": "medium" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter, 3, ::std::int16_t, MinPaddingWithCustomType>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> medium() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_medium)};
  }

  /** Glean { "field": "big" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> big_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_big};
  }

  /** Glean { "field": "big" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> big_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_big};
  }

  /** Glean { "field": "big" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> big_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_big)};
  }

  /** Glean { "field": "big" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> big() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_big};
  }

  /** Glean { "field": "big" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> big() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_big};
  }

  /** Glean { "field": "big" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> big() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_big)};
  }

  /** Glean { "field": "tiny" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> tiny_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_tiny};
  }

  /** Glean { "field": "tiny" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> tiny_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_tiny};
  }

  /** Glean { "field": "tiny" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> tiny_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_tiny)};
  }

  /** Glean { "field": "tiny" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> tiny() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_tiny};
  }

  /** Glean { "field": "tiny" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> tiny() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_tiny};
  }

  /** Glean { "field": "tiny" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> tiny() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_tiny)};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MinPaddingWithCustomType>;
  friend void swap(MinPaddingWithCustomType& a, MinPaddingWithCustomType& b);
};

template <class Protocol_>
unsigned long MinPaddingWithCustomType::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "MyDataItem", "kind": "struct" } */
class MyDataItem final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyDataItem;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  MyDataItem() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyDataItem(apache::thrift::FragileConstructor);

  MyDataItem(MyDataItem&&) = default;

  MyDataItem(const MyDataItem&) = default;


  MyDataItem& operator=(MyDataItem&&) = default;

  MyDataItem& operator=(const MyDataItem&) = default;

 public:

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyDataItem>;
  friend void swap(MyDataItem& a, MyDataItem& b);
};

template <class Protocol_>
unsigned long MyDataItem::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "MyStruct", "kind": "struct" } */
class MyStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 4;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::MyIntField,
    ::apache::thrift::ident::MyStringField,
    ::apache::thrift::ident::majorVer,
    ::apache::thrift::ident::data
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::struct_t<::apache::thrift::fixtures::types::MyDataItem>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  MyStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStruct(apache::thrift::FragileConstructor, ::std::int64_t MyIntField__arg, ::std::string MyStringField__arg, ::std::int64_t majorVer__arg, ::apache::thrift::fixtures::types::MyDataItem data__arg);

  MyStruct(MyStruct&&) noexcept;

  MyStruct(const MyStruct& src);


  MyStruct& operator=(MyStruct&&) noexcept;
  MyStruct& operator=(const MyStruct& src);

  ~MyStruct();

 private:
  ::std::int64_t __fbthrift_field_MyIntField;
 private:
  ::std::string __fbthrift_field_MyStringField;
 private:
  ::std::int64_t __fbthrift_field_majorVer;
 private:
  ::apache::thrift::fixtures::types::MyDataItem __fbthrift_field_data;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyIntField_ref() const& {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyIntField_ref() & {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyIntField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyIntField), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyIntField() const& {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyIntField() & {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyIntField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyIntField), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyStringField_ref() const& {
    return {this->__fbthrift_field_MyStringField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyStringField_ref() & {
    return {this->__fbthrift_field_MyStringField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyStringField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyStringField), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyStringField() const& {
    return {this->__fbthrift_field_MyStringField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyStringField() & {
    return {this->__fbthrift_field_MyStringField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyStringField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyStringField), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "majorVer" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> majorVer_ref() const& {
    return {this->__fbthrift_field_majorVer, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "majorVer" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> majorVer_ref() & {
    return {this->__fbthrift_field_majorVer, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "majorVer" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> majorVer_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_majorVer), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "majorVer" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> majorVer() const& {
    return {this->__fbthrift_field_majorVer, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "majorVer" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> majorVer() & {
    return {this->__fbthrift_field_majorVer, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "majorVer" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> majorVer() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_majorVer), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> data_ref() const& {
    return {this->__fbthrift_field_data, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> data_ref() & {
    return {this->__fbthrift_field_data, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> data_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_data), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> data() const& {
    return {this->__fbthrift_field_data, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> data() & {
    return {this->__fbthrift_field_data, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> data() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_data), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "MyIntField" } */
  [[deprecated("Use `FOO.MyIntField().value()` instead of `FOO.get_MyIntField()`")]]
  ::std::int64_t get_MyIntField() const;

  /** Glean { "field": "MyIntField" } */
  [[deprecated("Use `FOO.MyIntField() = BAR` instead of `FOO.set_MyIntField(BAR)`")]]
  ::std::int64_t& set_MyIntField(::std::int64_t MyIntField_);

  /** Glean { "field": "MyStringField" } */
  [[deprecated("Use `FOO.MyStringField().value()` instead of `FOO.get_MyStringField()`")]]
  const ::std::string& get_MyStringField() const& {
    return __fbthrift_field_MyStringField;
  }

  /** Glean { "field": "MyStringField" } */
  [[deprecated("Use `FOO.MyStringField().value()` instead of `FOO.get_MyStringField()`")]]
  ::std::string get_MyStringField() && {
    return static_cast<::std::string&&>(__fbthrift_field_MyStringField);
  }

  /** Glean { "field": "MyStringField" } */
  template <typename T_MyStruct_MyStringField_struct_setter = ::std::string>
  [[deprecated("Use `FOO.MyStringField() = BAR` instead of `FOO.set_MyStringField(BAR)`")]]
  ::std::string& set_MyStringField(T_MyStruct_MyStringField_struct_setter&& MyStringField_) {
    MyStringField_ref() = std::forward<T_MyStruct_MyStringField_struct_setter>(MyStringField_);
    return __fbthrift_field_MyStringField;
  }

  /** Glean { "field": "majorVer" } */
  [[deprecated("Use `FOO.majorVer().value()` instead of `FOO.get_majorVer()`")]]
  ::std::int64_t get_majorVer() const;

  /** Glean { "field": "majorVer" } */
  [[deprecated("Use `FOO.majorVer() = BAR` instead of `FOO.set_majorVer(BAR)`")]]
  ::std::int64_t& set_majorVer(::std::int64_t majorVer_);

  /** Glean { "field": "data" } */
  [[deprecated("Use `FOO.data().value()` instead of `FOO.get_data()`")]]
  const ::apache::thrift::fixtures::types::MyDataItem& get_data() const&;

  /** Glean { "field": "data" } */
  [[deprecated("Use `FOO.data().value()` instead of `FOO.get_data()`")]]
  ::apache::thrift::fixtures::types::MyDataItem get_data() &&;

  /** Glean { "field": "data" } */
  template <typename T_MyStruct_data_struct_setter = ::apache::thrift::fixtures::types::MyDataItem>
  [[deprecated("Use `FOO.data() = BAR` instead of `FOO.set_data(BAR)`")]]
  ::apache::thrift::fixtures::types::MyDataItem& set_data(T_MyStruct_data_struct_setter&& data_) {
    data_ref() = std::forward<T_MyStruct_data_struct_setter>(data_);
    return __fbthrift_field_data;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStruct>;
  friend void swap(MyStruct& a, MyStruct& b);
};

template <class Protocol_>
unsigned long MyStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "Renamed", "kind": "struct" } */
class Renamed final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::bar
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Renamed;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  Renamed() :
      __fbthrift_field_bar() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Renamed(apache::thrift::FragileConstructor, ::std::int64_t bar__arg);

  Renamed(Renamed&&) = default;

  Renamed(const Renamed&) = default;


  Renamed& operator=(Renamed&&) = default;

  Renamed& operator=(const Renamed&) = default;
 private:
  ::std::int64_t __fbthrift_field_bar;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const Renamed&) const;
  bool operator<(const Renamed&) const;

  /** Glean { "field": "bar" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bar_ref() const& {
    return {this->__fbthrift_field_bar, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bar" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bar_ref() & {
    return {this->__fbthrift_field_bar, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bar" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bar_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bar), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bar" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> bar() const& {
    return {this->__fbthrift_field_bar, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bar" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> bar() & {
    return {this->__fbthrift_field_bar, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bar" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> bar() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_bar), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "bar" } */
  [[deprecated("Use `FOO.bar().value()` instead of `FOO.get_bar()`")]]
  ::std::int64_t get_bar() const;

  /** Glean { "field": "bar" } */
  [[deprecated("Use `FOO.bar() = BAR` instead of `FOO.set_bar(BAR)`")]]
  ::std::int64_t& set_bar(::std::int64_t bar_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Renamed>;
  friend void swap(Renamed& a, Renamed& b);
};

template <class Protocol_>
unsigned long Renamed::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "AnnotatedTypes", "kind": "struct" } */
class AnnotatedTypes final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::binary_field,
    ::apache::thrift::ident::list_field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::binary_t,
    ::apache::thrift::type::list<::apache::thrift::type::cpp_type<std::unordered_map<::std::int32_t, ::std::string>, ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::string_t>>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = AnnotatedTypes;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  AnnotatedTypes();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  AnnotatedTypes(apache::thrift::FragileConstructor, ::apache::thrift::fixtures::types::TBinary_8623 binary_field__arg, ::apache::thrift::fixtures::types::SomeListOfTypeMap_2468 list_field__arg);

  AnnotatedTypes(AnnotatedTypes&&) noexcept;

  AnnotatedTypes(const AnnotatedTypes& src);


  AnnotatedTypes& operator=(AnnotatedTypes&&) noexcept;
  AnnotatedTypes& operator=(const AnnotatedTypes& src);

  ~AnnotatedTypes();

 private:
  ::apache::thrift::fixtures::types::TBinary_8623 __fbthrift_field_binary_field;
 private:
  ::apache::thrift::fixtures::types::SomeListOfTypeMap_2468 __fbthrift_field_list_field;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const AnnotatedTypes&) const;
  bool operator<(const AnnotatedTypes&) const;

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::TBinary_8623>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> binary_field_ref() const& {
    return {this->__fbthrift_field_binary_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::TBinary_8623>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> binary_field_ref() & {
    return {this->__fbthrift_field_binary_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::TBinary_8623>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> binary_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_binary_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::TBinary_8623>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> binary_field() const& {
    return {this->__fbthrift_field_binary_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::TBinary_8623>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> binary_field() & {
    return {this->__fbthrift_field_binary_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "binary_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::TBinary_8623>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> binary_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_binary_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::SomeListOfTypeMap_2468>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_field_ref() const& {
    return {this->__fbthrift_field_list_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::SomeListOfTypeMap_2468>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_field_ref() & {
    return {this->__fbthrift_field_list_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::SomeListOfTypeMap_2468>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_field), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::SomeListOfTypeMap_2468>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_field() const& {
    return {this->__fbthrift_field_list_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::SomeListOfTypeMap_2468>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_field() & {
    return {this->__fbthrift_field_list_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "list_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::SomeListOfTypeMap_2468>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_field), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "binary_field" } */
  [[deprecated("Use `FOO.binary_field().value()` instead of `FOO.get_binary_field()`")]]
  const ::apache::thrift::fixtures::types::TBinary_8623& get_binary_field() const& {
    return __fbthrift_field_binary_field;
  }

  /** Glean { "field": "binary_field" } */
  [[deprecated("Use `FOO.binary_field().value()` instead of `FOO.get_binary_field()`")]]
  ::apache::thrift::fixtures::types::TBinary_8623 get_binary_field() && {
    return static_cast<::apache::thrift::fixtures::types::TBinary_8623&&>(__fbthrift_field_binary_field);
  }

  /** Glean { "field": "binary_field" } */
  template <typename T_AnnotatedTypes_binary_field_struct_setter = ::apache::thrift::fixtures::types::TBinary_8623>
  [[deprecated("Use `FOO.binary_field() = BAR` instead of `FOO.set_binary_field(BAR)`")]]
  ::apache::thrift::fixtures::types::TBinary_8623& set_binary_field(T_AnnotatedTypes_binary_field_struct_setter&& binary_field_) {
    binary_field_ref() = std::forward<T_AnnotatedTypes_binary_field_struct_setter>(binary_field_);
    return __fbthrift_field_binary_field;
  }

  /** Glean { "field": "list_field" } */
  [[deprecated("Use `FOO.list_field().value()` instead of `FOO.get_list_field()`")]]
  const ::apache::thrift::fixtures::types::SomeListOfTypeMap_2468& get_list_field() const&;

  /** Glean { "field": "list_field" } */
  [[deprecated("Use `FOO.list_field().value()` instead of `FOO.get_list_field()`")]]
  ::apache::thrift::fixtures::types::SomeListOfTypeMap_2468 get_list_field() &&;

  /** Glean { "field": "list_field" } */
  template <typename T_AnnotatedTypes_list_field_struct_setter = ::apache::thrift::fixtures::types::SomeListOfTypeMap_2468>
  [[deprecated("Use `FOO.list_field() = BAR` instead of `FOO.set_list_field(BAR)`")]]
  ::apache::thrift::fixtures::types::SomeListOfTypeMap_2468& set_list_field(T_AnnotatedTypes_list_field_struct_setter&& list_field_) {
    list_field_ref() = std::forward<T_AnnotatedTypes_list_field_struct_setter>(list_field_);
    return __fbthrift_field_list_field;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<AnnotatedTypes>;
  friend void swap(AnnotatedTypes& a, AnnotatedTypes& b);
};

template <class Protocol_>
unsigned long AnnotatedTypes::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "ForwardUsageStruct", "kind": "struct" } */
class ForwardUsageStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::foo
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::apache::thrift::fixtures::types::ForwardUsageRoot>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ForwardUsageStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  ForwardUsageStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ForwardUsageStruct(apache::thrift::FragileConstructor, ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageRoot> foo__arg);

  ForwardUsageStruct(ForwardUsageStruct&&) noexcept;
  ForwardUsageStruct(const ForwardUsageStruct& src);


  ForwardUsageStruct& operator=(ForwardUsageStruct&&) noexcept;
  ForwardUsageStruct& operator=(const ForwardUsageStruct& src);

  ~ForwardUsageStruct();

 private:
  ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageRoot> __fbthrift_field_foo;

 public:

  bool operator==(const ForwardUsageStruct&) const;
  bool operator<(const ForwardUsageStruct&) const;
  /** Glean { "field": "foo" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageRoot>>
  FOLLY_ERASE fbthrift_T& foo_ref() & {
    return __fbthrift_field_foo;
  }

  /** Glean { "field": "foo" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageRoot>>
  FOLLY_ERASE const fbthrift_T& foo_ref() const& {
    return __fbthrift_field_foo;
  }

  /** Glean { "field": "foo" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageRoot>>
  FOLLY_ERASE fbthrift_T&& foo_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_foo);
  }

  /** Glean { "field": "foo" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageRoot>>
  FOLLY_ERASE const fbthrift_T&& foo_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_foo);
  }

  /** Glean { "field": "foo" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageRoot>>
  FOLLY_ERASE fbthrift_T& foo() & {
    return __fbthrift_field_foo;
  }

  /** Glean { "field": "foo" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageRoot>>
  FOLLY_ERASE const fbthrift_T& foo() const& {
    return __fbthrift_field_foo;
  }

  /** Glean { "field": "foo" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageRoot>>
  FOLLY_ERASE fbthrift_T&& foo() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_foo);
  }

  /** Glean { "field": "foo" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageRoot>>
  FOLLY_ERASE const fbthrift_T&& foo() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_foo);
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ForwardUsageStruct>;
  friend void swap(ForwardUsageStruct& a, ForwardUsageStruct& b);
};

template <class Protocol_>
unsigned long ForwardUsageStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "ForwardUsageRoot", "kind": "struct" } */
class ForwardUsageRoot final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::ForwardUsageStruct,
    ::apache::thrift::ident::ForwardUsageByRef
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::apache::thrift::fixtures::types::ForwardUsageStruct>,
    ::apache::thrift::type::struct_t<::apache::thrift::fixtures::types::ForwardUsageByRef>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ForwardUsageRoot;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  ForwardUsageRoot();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ForwardUsageRoot(apache::thrift::FragileConstructor, ::apache::thrift::fixtures::types::ForwardUsageStruct ForwardUsageStruct__arg, ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageByRef> ForwardUsageByRef__arg);

  ForwardUsageRoot(ForwardUsageRoot&&) noexcept;
  ForwardUsageRoot(const ForwardUsageRoot& src);


  ForwardUsageRoot& operator=(ForwardUsageRoot&&) noexcept;
  ForwardUsageRoot& operator=(const ForwardUsageRoot& src);

  ~ForwardUsageRoot();

 private:
  ::apache::thrift::fixtures::types::ForwardUsageStruct __fbthrift_field_ForwardUsageStruct;
 private:
  ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageByRef> __fbthrift_field_ForwardUsageByRef;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const ForwardUsageRoot&) const;
  bool operator<(const ForwardUsageRoot&) const;

  /** Glean { "field": "ForwardUsageStruct" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::ForwardUsageStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> ForwardUsageStruct_ref() const& {
    return {this->__fbthrift_field_ForwardUsageStruct, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "ForwardUsageStruct" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::ForwardUsageStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> ForwardUsageStruct_ref() & {
    return {this->__fbthrift_field_ForwardUsageStruct, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "ForwardUsageStruct" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::ForwardUsageStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> ForwardUsageStruct_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_ForwardUsageStruct), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "ForwardUsageStruct" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::ForwardUsageStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> ForwardUsageStruct() const& {
    return {this->__fbthrift_field_ForwardUsageStruct, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "ForwardUsageStruct" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::ForwardUsageStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> ForwardUsageStruct() & {
    return {this->__fbthrift_field_ForwardUsageStruct, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "ForwardUsageStruct" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::ForwardUsageStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> ForwardUsageStruct() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_ForwardUsageStruct), __isset.at(0), __isset.bit(0)};
  }
  /** Glean { "field": "ForwardUsageByRef" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageByRef>>
  FOLLY_ERASE fbthrift_T& ForwardUsageByRef_ref() & {
    return __fbthrift_field_ForwardUsageByRef;
  }

  /** Glean { "field": "ForwardUsageByRef" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageByRef>>
  FOLLY_ERASE const fbthrift_T& ForwardUsageByRef_ref() const& {
    return __fbthrift_field_ForwardUsageByRef;
  }

  /** Glean { "field": "ForwardUsageByRef" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageByRef>>
  FOLLY_ERASE fbthrift_T&& ForwardUsageByRef_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_ForwardUsageByRef);
  }

  /** Glean { "field": "ForwardUsageByRef" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageByRef>>
  FOLLY_ERASE const fbthrift_T&& ForwardUsageByRef_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_ForwardUsageByRef);
  }

  /** Glean { "field": "ForwardUsageByRef" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageByRef>>
  FOLLY_ERASE fbthrift_T& ForwardUsageByRef() & {
    return __fbthrift_field_ForwardUsageByRef;
  }

  /** Glean { "field": "ForwardUsageByRef" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageByRef>>
  FOLLY_ERASE const fbthrift_T& ForwardUsageByRef() const& {
    return __fbthrift_field_ForwardUsageByRef;
  }

  /** Glean { "field": "ForwardUsageByRef" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageByRef>>
  FOLLY_ERASE fbthrift_T&& ForwardUsageByRef() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_ForwardUsageByRef);
  }

  /** Glean { "field": "ForwardUsageByRef" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageByRef>>
  FOLLY_ERASE const fbthrift_T&& ForwardUsageByRef() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_ForwardUsageByRef);
  }

  /** Glean { "field": "ForwardUsageStruct" } */
  [[deprecated("Use `FOO.ForwardUsageStruct().value()` instead of `FOO.get_ForwardUsageStruct()`")]]
  const ::apache::thrift::fixtures::types::ForwardUsageStruct* get_ForwardUsageStruct() const&;

  /** Glean { "field": "ForwardUsageStruct" } */
  [[deprecated("Use `FOO.ForwardUsageStruct().value()` instead of `FOO.get_ForwardUsageStruct()`")]]
  ::apache::thrift::fixtures::types::ForwardUsageStruct* get_ForwardUsageStruct() &;

  ::apache::thrift::fixtures::types::ForwardUsageStruct* get_ForwardUsageStruct() && = delete;

  /** Glean { "field": "ForwardUsageStruct" } */
  template <typename T_ForwardUsageRoot_ForwardUsageStruct_struct_setter = ::apache::thrift::fixtures::types::ForwardUsageStruct>
  [[deprecated("Use `FOO.ForwardUsageStruct() = BAR` instead of `FOO.set_ForwardUsageStruct(BAR)`")]]
  ::apache::thrift::fixtures::types::ForwardUsageStruct& set_ForwardUsageStruct(T_ForwardUsageRoot_ForwardUsageStruct_struct_setter&& ForwardUsageStruct_) {
    ForwardUsageStruct_ref() = std::forward<T_ForwardUsageRoot_ForwardUsageStruct_struct_setter>(ForwardUsageStruct_);
    return __fbthrift_field_ForwardUsageStruct;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ForwardUsageRoot>;
  friend void swap(ForwardUsageRoot& a, ForwardUsageRoot& b);
};

template <class Protocol_>
unsigned long ForwardUsageRoot::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "ForwardUsageByRef", "kind": "struct" } */
class ForwardUsageByRef final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::foo
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::apache::thrift::fixtures::types::ForwardUsageRoot>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ForwardUsageByRef;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  ForwardUsageByRef();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ForwardUsageByRef(apache::thrift::FragileConstructor, ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageRoot> foo__arg);

  ForwardUsageByRef(ForwardUsageByRef&&) noexcept;
  ForwardUsageByRef(const ForwardUsageByRef& src);


  ForwardUsageByRef& operator=(ForwardUsageByRef&&) noexcept;
  ForwardUsageByRef& operator=(const ForwardUsageByRef& src);

  ~ForwardUsageByRef();

 private:
  ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageRoot> __fbthrift_field_foo;

 public:

  bool operator==(const ForwardUsageByRef&) const;
  bool operator<(const ForwardUsageByRef&) const;
  /** Glean { "field": "foo" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageRoot>>
  FOLLY_ERASE fbthrift_T& foo_ref() & {
    return __fbthrift_field_foo;
  }

  /** Glean { "field": "foo" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageRoot>>
  FOLLY_ERASE const fbthrift_T& foo_ref() const& {
    return __fbthrift_field_foo;
  }

  /** Glean { "field": "foo" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageRoot>>
  FOLLY_ERASE fbthrift_T&& foo_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_foo);
  }

  /** Glean { "field": "foo" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageRoot>>
  FOLLY_ERASE const fbthrift_T&& foo_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_foo);
  }

  /** Glean { "field": "foo" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageRoot>>
  FOLLY_ERASE fbthrift_T& foo() & {
    return __fbthrift_field_foo;
  }

  /** Glean { "field": "foo" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageRoot>>
  FOLLY_ERASE const fbthrift_T& foo() const& {
    return __fbthrift_field_foo;
  }

  /** Glean { "field": "foo" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageRoot>>
  FOLLY_ERASE fbthrift_T&& foo() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_foo);
  }

  /** Glean { "field": "foo" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageRoot>>
  FOLLY_ERASE const fbthrift_T&& foo() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_foo);
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ForwardUsageByRef>;
  friend void swap(ForwardUsageByRef& a, ForwardUsageByRef& b);
};

template <class Protocol_>
unsigned long ForwardUsageByRef::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "IncompleteMap", "kind": "struct" } */
class IncompleteMap final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::struct_t<::apache::thrift::fixtures::types::IncompleteMapDep>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = IncompleteMap;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  IncompleteMap();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  IncompleteMap(apache::thrift::FragileConstructor, ::std::map<::std::int32_t, ::apache::thrift::fixtures::types::IncompleteMapDep> field__arg);

  IncompleteMap(IncompleteMap&&) noexcept;

  IncompleteMap(const IncompleteMap& src);


  IncompleteMap& operator=(IncompleteMap&&) noexcept;
  IncompleteMap& operator=(const IncompleteMap& src);

  ~IncompleteMap();

 private:
  ::std::map<::std::int32_t, ::apache::thrift::fixtures::types::IncompleteMapDep> __fbthrift_field_field;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const IncompleteMap&) const;
  bool operator<(const IncompleteMap&) const;

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::apache::thrift::fixtures::types::IncompleteMapDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field_ref() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::apache::thrift::fixtures::types::IncompleteMapDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field_ref() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::apache::thrift::fixtures::types::IncompleteMapDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::apache::thrift::fixtures::types::IncompleteMapDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::apache::thrift::fixtures::types::IncompleteMapDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::apache::thrift::fixtures::types::IncompleteMapDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  [[deprecated("Use `FOO.field().value()` instead of `FOO.get_field()`")]]
  const ::std::map<::std::int32_t, ::apache::thrift::fixtures::types::IncompleteMapDep>* get_field() const&;

  /** Glean { "field": "field" } */
  [[deprecated("Use `FOO.field().value()` instead of `FOO.get_field()`")]]
  ::std::map<::std::int32_t, ::apache::thrift::fixtures::types::IncompleteMapDep>* get_field() &;

  ::std::map<::std::int32_t, ::apache::thrift::fixtures::types::IncompleteMapDep>* get_field() && = delete;

  /** Glean { "field": "field" } */
  template <typename T_IncompleteMap_field_struct_setter = ::std::map<::std::int32_t, ::apache::thrift::fixtures::types::IncompleteMapDep>>
  [[deprecated("Use `FOO.field() = BAR` instead of `FOO.set_field(BAR)`")]]
  ::std::map<::std::int32_t, ::apache::thrift::fixtures::types::IncompleteMapDep>& set_field(T_IncompleteMap_field_struct_setter&& field_) {
    field_ref() = std::forward<T_IncompleteMap_field_struct_setter>(field_);
    return __fbthrift_field_field;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<IncompleteMap>;
  friend void swap(IncompleteMap& a, IncompleteMap& b);
};

template <class Protocol_>
unsigned long IncompleteMap::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "IncompleteMapDep", "kind": "struct" } */
class IncompleteMapDep final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = IncompleteMapDep;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  IncompleteMapDep() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  IncompleteMapDep(apache::thrift::FragileConstructor);

  IncompleteMapDep(IncompleteMapDep&&) = default;

  IncompleteMapDep(const IncompleteMapDep&) = default;


  IncompleteMapDep& operator=(IncompleteMapDep&&) = default;

  IncompleteMapDep& operator=(const IncompleteMapDep&) = default;

 public:

  bool operator==(const IncompleteMapDep&) const;
  bool operator<(const IncompleteMapDep&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<IncompleteMapDep>;
  friend void swap(IncompleteMapDep& a, IncompleteMapDep& b);
};

template <class Protocol_>
unsigned long IncompleteMapDep::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "CompleteMapDep", "kind": "struct" } */
class CompleteMapDep final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = CompleteMapDep;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  CompleteMapDep() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  CompleteMapDep(apache::thrift::FragileConstructor);

  CompleteMapDep(CompleteMapDep&&) = default;

  CompleteMapDep(const CompleteMapDep&) = default;


  CompleteMapDep& operator=(CompleteMapDep&&) = default;

  CompleteMapDep& operator=(const CompleteMapDep&) = default;

 public:

  bool operator==(const CompleteMapDep&) const;
  bool operator<(const CompleteMapDep&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<CompleteMapDep>;
  friend void swap(CompleteMapDep& a, CompleteMapDep& b);
};

template <class Protocol_>
unsigned long CompleteMapDep::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "CompleteMap", "kind": "struct" } */
class CompleteMap final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::cpp_type<std::unordered_map<::std::int32_t, ::apache::thrift::fixtures::types::CompleteMapDep>, ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::struct_t<::apache::thrift::fixtures::types::CompleteMapDep>>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = CompleteMap;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  CompleteMap();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  CompleteMap(apache::thrift::FragileConstructor, std::unordered_map<::std::int32_t, ::apache::thrift::fixtures::types::CompleteMapDep> field__arg);

  CompleteMap(CompleteMap&&) noexcept;

  CompleteMap(const CompleteMap& src);


  CompleteMap& operator=(CompleteMap&&) noexcept;
  CompleteMap& operator=(const CompleteMap& src);

  ~CompleteMap();

 private:
  std::unordered_map<::std::int32_t, ::apache::thrift::fixtures::types::CompleteMapDep> __fbthrift_field_field;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const CompleteMap&) const;
  bool operator<(const CompleteMap&) const;

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = std::unordered_map<::std::int32_t, ::apache::thrift::fixtures::types::CompleteMapDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field_ref() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = std::unordered_map<::std::int32_t, ::apache::thrift::fixtures::types::CompleteMapDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field_ref() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = std::unordered_map<::std::int32_t, ::apache::thrift::fixtures::types::CompleteMapDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = std::unordered_map<::std::int32_t, ::apache::thrift::fixtures::types::CompleteMapDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = std::unordered_map<::std::int32_t, ::apache::thrift::fixtures::types::CompleteMapDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = std::unordered_map<::std::int32_t, ::apache::thrift::fixtures::types::CompleteMapDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  [[deprecated("Use `FOO.field().value()` instead of `FOO.get_field()`")]]
  const std::unordered_map<::std::int32_t, ::apache::thrift::fixtures::types::CompleteMapDep>* get_field() const&;

  /** Glean { "field": "field" } */
  [[deprecated("Use `FOO.field().value()` instead of `FOO.get_field()`")]]
  std::unordered_map<::std::int32_t, ::apache::thrift::fixtures::types::CompleteMapDep>* get_field() &;

  std::unordered_map<::std::int32_t, ::apache::thrift::fixtures::types::CompleteMapDep>* get_field() && = delete;

  /** Glean { "field": "field" } */
  template <typename T_CompleteMap_field_struct_setter = std::unordered_map<::std::int32_t, ::apache::thrift::fixtures::types::CompleteMapDep>>
  [[deprecated("Use `FOO.field() = BAR` instead of `FOO.set_field(BAR)`")]]
  std::unordered_map<::std::int32_t, ::apache::thrift::fixtures::types::CompleteMapDep>& set_field(T_CompleteMap_field_struct_setter&& field_) {
    field_ref() = std::forward<T_CompleteMap_field_struct_setter>(field_);
    return __fbthrift_field_field;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<CompleteMap>;
  friend void swap(CompleteMap& a, CompleteMap& b);
};

template <class Protocol_>
unsigned long CompleteMap::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "IncompleteList", "kind": "struct" } */
class IncompleteList final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::cpp_type<::std::list<::apache::thrift::fixtures::types::IncompleteListDep>, ::apache::thrift::type::list<::apache::thrift::type::struct_t<::apache::thrift::fixtures::types::IncompleteListDep>>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = IncompleteList;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  IncompleteList();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  IncompleteList(apache::thrift::FragileConstructor, ::std::list<::apache::thrift::fixtures::types::IncompleteListDep> field__arg);

  IncompleteList(IncompleteList&&) noexcept;

  IncompleteList(const IncompleteList& src);


  IncompleteList& operator=(IncompleteList&&) noexcept;
  IncompleteList& operator=(const IncompleteList& src);

  ~IncompleteList();

 private:
  ::std::list<::apache::thrift::fixtures::types::IncompleteListDep> __fbthrift_field_field;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const IncompleteList&) const;
  bool operator<(const IncompleteList&) const;

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::list<::apache::thrift::fixtures::types::IncompleteListDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field_ref() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::list<::apache::thrift::fixtures::types::IncompleteListDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field_ref() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::list<::apache::thrift::fixtures::types::IncompleteListDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::list<::apache::thrift::fixtures::types::IncompleteListDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::list<::apache::thrift::fixtures::types::IncompleteListDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::list<::apache::thrift::fixtures::types::IncompleteListDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  [[deprecated("Use `FOO.field().value()` instead of `FOO.get_field()`")]]
  const ::std::list<::apache::thrift::fixtures::types::IncompleteListDep>* get_field() const&;

  /** Glean { "field": "field" } */
  [[deprecated("Use `FOO.field().value()` instead of `FOO.get_field()`")]]
  ::std::list<::apache::thrift::fixtures::types::IncompleteListDep>* get_field() &;

  ::std::list<::apache::thrift::fixtures::types::IncompleteListDep>* get_field() && = delete;

  /** Glean { "field": "field" } */
  template <typename T_IncompleteList_field_struct_setter = ::std::list<::apache::thrift::fixtures::types::IncompleteListDep>>
  [[deprecated("Use `FOO.field() = BAR` instead of `FOO.set_field(BAR)`")]]
  ::std::list<::apache::thrift::fixtures::types::IncompleteListDep>& set_field(T_IncompleteList_field_struct_setter&& field_) {
    field_ref() = std::forward<T_IncompleteList_field_struct_setter>(field_);
    return __fbthrift_field_field;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<IncompleteList>;
  friend void swap(IncompleteList& a, IncompleteList& b);
};

template <class Protocol_>
unsigned long IncompleteList::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "IncompleteListDep", "kind": "struct" } */
class IncompleteListDep final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = IncompleteListDep;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  IncompleteListDep() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  IncompleteListDep(apache::thrift::FragileConstructor);

  IncompleteListDep(IncompleteListDep&&) = default;

  IncompleteListDep(const IncompleteListDep&) = default;


  IncompleteListDep& operator=(IncompleteListDep&&) = default;

  IncompleteListDep& operator=(const IncompleteListDep&) = default;

 public:

  bool operator==(const IncompleteListDep&) const;
  bool operator<(const IncompleteListDep&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<IncompleteListDep>;
  friend void swap(IncompleteListDep& a, IncompleteListDep& b);
};

template <class Protocol_>
unsigned long IncompleteListDep::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "CompleteListDep", "kind": "struct" } */
class CompleteListDep final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = CompleteListDep;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  CompleteListDep() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  CompleteListDep(apache::thrift::FragileConstructor);

  CompleteListDep(CompleteListDep&&) = default;

  CompleteListDep(const CompleteListDep&) = default;


  CompleteListDep& operator=(CompleteListDep&&) = default;

  CompleteListDep& operator=(const CompleteListDep&) = default;

 public:

  bool operator==(const CompleteListDep&) const;
  bool operator<(const CompleteListDep&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<CompleteListDep>;
  friend void swap(CompleteListDep& a, CompleteListDep& b);
};

template <class Protocol_>
unsigned long CompleteListDep::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "CompleteList", "kind": "struct" } */
class CompleteList final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::cpp_type<folly::small_vector<::apache::thrift::fixtures::types::CompleteListDep>, ::apache::thrift::type::list<::apache::thrift::type::struct_t<::apache::thrift::fixtures::types::CompleteListDep>>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = CompleteList;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  CompleteList();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  CompleteList(apache::thrift::FragileConstructor, folly::small_vector<::apache::thrift::fixtures::types::CompleteListDep> field__arg);

  CompleteList(CompleteList&&) noexcept;

  CompleteList(const CompleteList& src);


  CompleteList& operator=(CompleteList&&) noexcept;
  CompleteList& operator=(const CompleteList& src);

  ~CompleteList();

 private:
  folly::small_vector<::apache::thrift::fixtures::types::CompleteListDep> __fbthrift_field_field;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const CompleteList&) const;
  bool operator<(const CompleteList&) const;

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = folly::small_vector<::apache::thrift::fixtures::types::CompleteListDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field_ref() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = folly::small_vector<::apache::thrift::fixtures::types::CompleteListDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field_ref() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = folly::small_vector<::apache::thrift::fixtures::types::CompleteListDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = folly::small_vector<::apache::thrift::fixtures::types::CompleteListDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = folly::small_vector<::apache::thrift::fixtures::types::CompleteListDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = folly::small_vector<::apache::thrift::fixtures::types::CompleteListDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  [[deprecated("Use `FOO.field().value()` instead of `FOO.get_field()`")]]
  const folly::small_vector<::apache::thrift::fixtures::types::CompleteListDep>* get_field() const&;

  /** Glean { "field": "field" } */
  [[deprecated("Use `FOO.field().value()` instead of `FOO.get_field()`")]]
  folly::small_vector<::apache::thrift::fixtures::types::CompleteListDep>* get_field() &;

  folly::small_vector<::apache::thrift::fixtures::types::CompleteListDep>* get_field() && = delete;

  /** Glean { "field": "field" } */
  template <typename T_CompleteList_field_struct_setter = folly::small_vector<::apache::thrift::fixtures::types::CompleteListDep>>
  [[deprecated("Use `FOO.field() = BAR` instead of `FOO.set_field(BAR)`")]]
  folly::small_vector<::apache::thrift::fixtures::types::CompleteListDep>& set_field(T_CompleteList_field_struct_setter&& field_) {
    field_ref() = std::forward<T_CompleteList_field_struct_setter>(field_);
    return __fbthrift_field_field;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<CompleteList>;
  friend void swap(CompleteList& a, CompleteList& b);
};

template <class Protocol_>
unsigned long CompleteList::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "AdaptedList", "kind": "struct" } */
class AdaptedList final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::adapted<IdentityAdapter<detail::AdaptedListDep>, ::apache::thrift::type::struct_t<::apache::thrift::fixtures::types::detail::AdaptedListDep>>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = AdaptedList;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    true;


 public:

  AdaptedList();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  AdaptedList(apache::thrift::FragileConstructor, ::std::vector<::apache::thrift::fixtures::types::AdaptedListDep> field__arg);

  AdaptedList(AdaptedList&&) noexcept;

  AdaptedList(const AdaptedList& src);


  AdaptedList& operator=(AdaptedList&&) noexcept;
  AdaptedList& operator=(const AdaptedList& src);

  ~AdaptedList();

 private:
  ::std::vector<::apache::thrift::fixtures::types::AdaptedListDep> __fbthrift_field_field;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const AdaptedList&) const;
  bool operator<(const AdaptedList&) const;

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::apache::thrift::fixtures::types::AdaptedListDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field_ref() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::apache::thrift::fixtures::types::AdaptedListDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field_ref() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::apache::thrift::fixtures::types::AdaptedListDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::apache::thrift::fixtures::types::AdaptedListDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::apache::thrift::fixtures::types::AdaptedListDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::apache::thrift::fixtures::types::AdaptedListDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  [[deprecated("Use `FOO.field().value()` instead of `FOO.get_field()`")]]
  const ::std::vector<::apache::thrift::fixtures::types::AdaptedListDep>* get_field() const&;

  /** Glean { "field": "field" } */
  [[deprecated("Use `FOO.field().value()` instead of `FOO.get_field()`")]]
  ::std::vector<::apache::thrift::fixtures::types::AdaptedListDep>* get_field() &;

  ::std::vector<::apache::thrift::fixtures::types::AdaptedListDep>* get_field() && = delete;

  /** Glean { "field": "field" } */
  template <typename T_AdaptedList_field_struct_setter = ::std::vector<::apache::thrift::fixtures::types::AdaptedListDep>>
  [[deprecated("Use `FOO.field() = BAR` instead of `FOO.set_field(BAR)`")]]
  ::std::vector<::apache::thrift::fixtures::types::AdaptedListDep>& set_field(T_AdaptedList_field_struct_setter&& field_) {
    field_ref() = std::forward<T_AdaptedList_field_struct_setter>(field_);
    return __fbthrift_field_field;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<AdaptedList>;
  friend void swap(AdaptedList& a, AdaptedList& b);
};

template <class Protocol_>
unsigned long AdaptedList::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


namespace detail {
/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "AdaptedListDep", "kind": "struct" } */
class AdaptedListDep final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::apache::thrift::fixtures::types::AdaptedList>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = AdaptedListDep;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  AdaptedListDep() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  AdaptedListDep(apache::thrift::FragileConstructor, ::apache::thrift::fixtures::types::AdaptedList field__arg);

  AdaptedListDep(AdaptedListDep&&) noexcept;

  AdaptedListDep(const AdaptedListDep& src);


  AdaptedListDep& operator=(AdaptedListDep&&) noexcept;
  AdaptedListDep& operator=(const AdaptedListDep& src);
 private:
  ::apache::thrift::fixtures::types::AdaptedList __fbthrift_field_field;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const AdaptedListDep&) const;
  bool operator<(const AdaptedListDep&) const;

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::AdaptedList>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field_ref() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::AdaptedList>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field_ref() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::AdaptedList>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::AdaptedList>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::AdaptedList>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::AdaptedList>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  [[deprecated("Use `FOO.field().value()` instead of `FOO.get_field()`")]]
  const ::apache::thrift::fixtures::types::AdaptedList& get_field() const&;

  /** Glean { "field": "field" } */
  [[deprecated("Use `FOO.field().value()` instead of `FOO.get_field()`")]]
  ::apache::thrift::fixtures::types::AdaptedList get_field() &&;

  /** Glean { "field": "field" } */
  template <typename T_AdaptedListDep_field_struct_setter = ::apache::thrift::fixtures::types::AdaptedList>
  [[deprecated("Use `FOO.field() = BAR` instead of `FOO.set_field(BAR)`")]]
  ::apache::thrift::fixtures::types::AdaptedList& set_field(T_AdaptedListDep_field_struct_setter&& field_) {
    field_ref() = std::forward<T_AdaptedListDep_field_struct_setter>(field_);
    return __fbthrift_field_field;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<AdaptedListDep>;
  friend void swap(AdaptedListDep& a, AdaptedListDep& b);
};

template <class Protocol_>
unsigned long AdaptedListDep::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}
} // namespace detail


namespace detail {
/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "DependentAdaptedListDep", "kind": "struct" } */
class DependentAdaptedListDep final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i16_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = DependentAdaptedListDep;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  DependentAdaptedListDep();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  DependentAdaptedListDep(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::std::int16_t> field__arg);

  DependentAdaptedListDep(DependentAdaptedListDep&&) noexcept;

  DependentAdaptedListDep(const DependentAdaptedListDep& src);


  DependentAdaptedListDep& operator=(DependentAdaptedListDep&&) noexcept;
  DependentAdaptedListDep& operator=(const DependentAdaptedListDep& src);

  ~DependentAdaptedListDep();

 private:
  ::apache::thrift::detail::boxed_value_ptr<::std::int16_t> __fbthrift_field_field;

 public:

  bool operator==(const DependentAdaptedListDep&) const;
  bool operator<(const DependentAdaptedListDep&) const;

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> field_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_field};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> field_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_field};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> field_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_field)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> field() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_field};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> field() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_field};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> field() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_field)};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<DependentAdaptedListDep>;
  friend void swap(DependentAdaptedListDep& a, DependentAdaptedListDep& b);
};

template <class Protocol_>
unsigned long DependentAdaptedListDep::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}
} // namespace detail

using DependentAdaptedListDep = ::apache::thrift::adapt_detail::adapted_t<IdentityAdapter<detail::DependentAdaptedListDep>, ::apache::thrift::fixtures::types::detail::DependentAdaptedListDep>;


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "DependentAdaptedList", "kind": "struct" } */
class DependentAdaptedList final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::adapted<IdentityAdapter<detail::DependentAdaptedListDep>, ::apache::thrift::type::struct_t<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep>>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = DependentAdaptedList;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    true;


 public:

  DependentAdaptedList();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  DependentAdaptedList(apache::thrift::FragileConstructor, ::std::vector<::apache::thrift::fixtures::types::DependentAdaptedListDep> field__arg);

  DependentAdaptedList(DependentAdaptedList&&) noexcept;

  DependentAdaptedList(const DependentAdaptedList& src);


  DependentAdaptedList& operator=(DependentAdaptedList&&) noexcept;
  DependentAdaptedList& operator=(const DependentAdaptedList& src);

  ~DependentAdaptedList();

 private:
  ::std::vector<::apache::thrift::fixtures::types::DependentAdaptedListDep> __fbthrift_field_field;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const DependentAdaptedList&) const;
  bool operator<(const DependentAdaptedList&) const;

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::apache::thrift::fixtures::types::DependentAdaptedListDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field_ref() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::apache::thrift::fixtures::types::DependentAdaptedListDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field_ref() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::apache::thrift::fixtures::types::DependentAdaptedListDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::apache::thrift::fixtures::types::DependentAdaptedListDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::apache::thrift::fixtures::types::DependentAdaptedListDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::apache::thrift::fixtures::types::DependentAdaptedListDep>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  [[deprecated("Use `FOO.field().value()` instead of `FOO.get_field()`")]]
  const ::std::vector<::apache::thrift::fixtures::types::DependentAdaptedListDep>* get_field() const&;

  /** Glean { "field": "field" } */
  [[deprecated("Use `FOO.field().value()` instead of `FOO.get_field()`")]]
  ::std::vector<::apache::thrift::fixtures::types::DependentAdaptedListDep>* get_field() &;

  ::std::vector<::apache::thrift::fixtures::types::DependentAdaptedListDep>* get_field() && = delete;

  /** Glean { "field": "field" } */
  template <typename T_DependentAdaptedList_field_struct_setter = ::std::vector<::apache::thrift::fixtures::types::DependentAdaptedListDep>>
  [[deprecated("Use `FOO.field() = BAR` instead of `FOO.set_field(BAR)`")]]
  ::std::vector<::apache::thrift::fixtures::types::DependentAdaptedListDep>& set_field(T_DependentAdaptedList_field_struct_setter&& field_) {
    field_ref() = std::forward<T_DependentAdaptedList_field_struct_setter>(field_);
    return __fbthrift_field_field;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<DependentAdaptedList>;
  friend void swap(DependentAdaptedList& a, DependentAdaptedList& b);
};

template <class Protocol_>
unsigned long DependentAdaptedList::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "AllocatorAware", "kind": "struct" } */
class AllocatorAware final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 7;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::aa_list,
    ::apache::thrift::ident::aa_set,
    ::apache::thrift::ident::aa_map,
    ::apache::thrift::ident::aa_string,
    ::apache::thrift::ident::not_a_container,
    ::apache::thrift::ident::aa_unique,
    ::apache::thrift::ident::aa_shared
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::set<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::i32_t>,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = AllocatorAware;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;

 public:
  using allocator_type = some_allocator;
  allocator_type get_allocator() const {
    return __fbthrift_alloc;
  }
 private:
  [[FOLLY_ATTR_NO_UNIQUE_ADDRESS]] allocator_type __fbthrift_alloc;

 public:

  AllocatorAware();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  AllocatorAware(apache::thrift::FragileConstructor, ::apache::thrift::fixtures::types::list_i32_9187 aa_list__arg, ::apache::thrift::fixtures::types::set_i32_7070 aa_set__arg, ::apache::thrift::fixtures::types::map_i32_i32_9565 aa_map__arg, ::apache::thrift::fixtures::types::string_5252 aa_string__arg, ::std::int32_t not_a_container__arg, ::std::unique_ptr<::apache::thrift::fixtures::types::i32_9314> aa_unique__arg, ::std::shared_ptr<::apache::thrift::fixtures::types::i32_9314> aa_shared__arg);

  AllocatorAware(AllocatorAware&&) noexcept;
  AllocatorAware(const AllocatorAware& src);

  explicit AllocatorAware(const allocator_type& alloc) noexcept;
  explicit AllocatorAware(const AllocatorAware& other, const allocator_type& alloc);
  explicit AllocatorAware(AllocatorAware&& other, const allocator_type& alloc);
  AllocatorAware& operator=(AllocatorAware&&) noexcept;
  AllocatorAware& operator=(const AllocatorAware& src);

  ~AllocatorAware();

 private:
  ::apache::thrift::fixtures::types::list_i32_9187 __fbthrift_field_aa_list;
 private:
  ::apache::thrift::fixtures::types::set_i32_7070 __fbthrift_field_aa_set;
 private:
  ::apache::thrift::fixtures::types::map_i32_i32_9565 __fbthrift_field_aa_map;
 private:
  ::apache::thrift::fixtures::types::string_5252 __fbthrift_field_aa_string;
 private:
  ::std::int32_t __fbthrift_field_not_a_container;
 private:
  ::std::unique_ptr<::apache::thrift::fixtures::types::i32_9314> __fbthrift_field_aa_unique;
 private:
  ::std::shared_ptr<::apache::thrift::fixtures::types::i32_9314> __fbthrift_field_aa_shared;
 private:
  apache::thrift::detail::isset_bitset<5, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const AllocatorAware&) const;
  bool operator<(const AllocatorAware&) const;

  /** Glean { "field": "aa_list" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::list_i32_9187>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> aa_list_ref() const& {
    return {this->__fbthrift_field_aa_list, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "aa_list" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::list_i32_9187>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> aa_list_ref() & {
    return {this->__fbthrift_field_aa_list, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "aa_list" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::list_i32_9187>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> aa_list_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_aa_list), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "aa_list" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::list_i32_9187>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> aa_list() const& {
    return {this->__fbthrift_field_aa_list, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "aa_list" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::list_i32_9187>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> aa_list() & {
    return {this->__fbthrift_field_aa_list, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "aa_list" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::list_i32_9187>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> aa_list() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_aa_list), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "aa_set" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::set_i32_7070>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> aa_set_ref() const& {
    return {this->__fbthrift_field_aa_set, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "aa_set" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::set_i32_7070>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> aa_set_ref() & {
    return {this->__fbthrift_field_aa_set, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "aa_set" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::set_i32_7070>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> aa_set_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_aa_set), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "aa_set" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::set_i32_7070>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> aa_set() const& {
    return {this->__fbthrift_field_aa_set, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "aa_set" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::set_i32_7070>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> aa_set() & {
    return {this->__fbthrift_field_aa_set, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "aa_set" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::set_i32_7070>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> aa_set() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_aa_set), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "aa_map" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::map_i32_i32_9565>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> aa_map_ref() const& {
    return {this->__fbthrift_field_aa_map, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "aa_map" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::map_i32_i32_9565>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> aa_map_ref() & {
    return {this->__fbthrift_field_aa_map, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "aa_map" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::map_i32_i32_9565>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> aa_map_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_aa_map), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "aa_map" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::map_i32_i32_9565>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> aa_map() const& {
    return {this->__fbthrift_field_aa_map, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "aa_map" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::map_i32_i32_9565>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> aa_map() & {
    return {this->__fbthrift_field_aa_map, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "aa_map" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::map_i32_i32_9565>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> aa_map() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_aa_map), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "aa_string" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::string_5252>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> aa_string_ref() const& {
    return {this->__fbthrift_field_aa_string, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "aa_string" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::string_5252>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> aa_string_ref() & {
    return {this->__fbthrift_field_aa_string, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "aa_string" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::string_5252>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> aa_string_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_aa_string), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "aa_string" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::string_5252>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> aa_string() const& {
    return {this->__fbthrift_field_aa_string, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "aa_string" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::string_5252>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> aa_string() & {
    return {this->__fbthrift_field_aa_string, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "aa_string" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::string_5252>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> aa_string() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_aa_string), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "not_a_container" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> not_a_container_ref() const& {
    return {this->__fbthrift_field_not_a_container, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "not_a_container" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> not_a_container_ref() & {
    return {this->__fbthrift_field_not_a_container, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "not_a_container" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> not_a_container_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_not_a_container), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "not_a_container" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> not_a_container() const& {
    return {this->__fbthrift_field_not_a_container, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "not_a_container" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> not_a_container() & {
    return {this->__fbthrift_field_not_a_container, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "not_a_container" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> not_a_container() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_not_a_container), __isset.at(4), __isset.bit(4)};
  }
  /** Glean { "field": "aa_unique" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::i32_9314>>
  FOLLY_ERASE fbthrift_T& aa_unique_ref() & {
    return __fbthrift_field_aa_unique;
  }

  /** Glean { "field": "aa_unique" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::i32_9314>>
  FOLLY_ERASE const fbthrift_T& aa_unique_ref() const& {
    return __fbthrift_field_aa_unique;
  }

  /** Glean { "field": "aa_unique" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::i32_9314>>
  FOLLY_ERASE fbthrift_T&& aa_unique_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_aa_unique);
  }

  /** Glean { "field": "aa_unique" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::i32_9314>>
  FOLLY_ERASE const fbthrift_T&& aa_unique_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_aa_unique);
  }

  /** Glean { "field": "aa_unique" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::i32_9314>>
  FOLLY_ERASE fbthrift_T& aa_unique() & {
    return __fbthrift_field_aa_unique;
  }

  /** Glean { "field": "aa_unique" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::i32_9314>>
  FOLLY_ERASE const fbthrift_T& aa_unique() const& {
    return __fbthrift_field_aa_unique;
  }

  /** Glean { "field": "aa_unique" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::i32_9314>>
  FOLLY_ERASE fbthrift_T&& aa_unique() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_aa_unique);
  }

  /** Glean { "field": "aa_unique" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::apache::thrift::fixtures::types::i32_9314>>
  FOLLY_ERASE const fbthrift_T&& aa_unique() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_aa_unique);
  }
  /** Glean { "field": "aa_shared" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::apache::thrift::fixtures::types::i32_9314>>
  FOLLY_ERASE fbthrift_T& aa_shared_ref() & {
    return __fbthrift_field_aa_shared;
  }

  /** Glean { "field": "aa_shared" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::apache::thrift::fixtures::types::i32_9314>>
  FOLLY_ERASE const fbthrift_T& aa_shared_ref() const& {
    return __fbthrift_field_aa_shared;
  }

  /** Glean { "field": "aa_shared" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::apache::thrift::fixtures::types::i32_9314>>
  FOLLY_ERASE fbthrift_T&& aa_shared_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_aa_shared);
  }

  /** Glean { "field": "aa_shared" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::apache::thrift::fixtures::types::i32_9314>>
  FOLLY_ERASE const fbthrift_T&& aa_shared_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_aa_shared);
  }

  /** Glean { "field": "aa_shared" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::apache::thrift::fixtures::types::i32_9314>>
  FOLLY_ERASE fbthrift_T& aa_shared() & {
    return __fbthrift_field_aa_shared;
  }

  /** Glean { "field": "aa_shared" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::apache::thrift::fixtures::types::i32_9314>>
  FOLLY_ERASE const fbthrift_T& aa_shared() const& {
    return __fbthrift_field_aa_shared;
  }

  /** Glean { "field": "aa_shared" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::apache::thrift::fixtures::types::i32_9314>>
  FOLLY_ERASE fbthrift_T&& aa_shared() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_aa_shared);
  }

  /** Glean { "field": "aa_shared" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::apache::thrift::fixtures::types::i32_9314>>
  FOLLY_ERASE const fbthrift_T&& aa_shared() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_aa_shared);
  }

  /** Glean { "field": "aa_list" } */
  [[deprecated("Use `FOO.aa_list().value()` instead of `FOO.get_aa_list()`")]]
  const ::apache::thrift::fixtures::types::list_i32_9187& get_aa_list() const&;

  /** Glean { "field": "aa_list" } */
  [[deprecated("Use `FOO.aa_list().value()` instead of `FOO.get_aa_list()`")]]
  ::apache::thrift::fixtures::types::list_i32_9187 get_aa_list() &&;

  /** Glean { "field": "aa_list" } */
  template <typename T_AllocatorAware_aa_list_struct_setter = ::apache::thrift::fixtures::types::list_i32_9187>
  [[deprecated("Use `FOO.aa_list() = BAR` instead of `FOO.set_aa_list(BAR)`")]]
  ::apache::thrift::fixtures::types::list_i32_9187& set_aa_list(T_AllocatorAware_aa_list_struct_setter&& aa_list_) {
    aa_list_ref() = std::forward<T_AllocatorAware_aa_list_struct_setter>(aa_list_);
    return __fbthrift_field_aa_list;
  }

  /** Glean { "field": "aa_set" } */
  [[deprecated("Use `FOO.aa_set().value()` instead of `FOO.get_aa_set()`")]]
  const ::apache::thrift::fixtures::types::set_i32_7070& get_aa_set() const&;

  /** Glean { "field": "aa_set" } */
  [[deprecated("Use `FOO.aa_set().value()` instead of `FOO.get_aa_set()`")]]
  ::apache::thrift::fixtures::types::set_i32_7070 get_aa_set() &&;

  /** Glean { "field": "aa_set" } */
  template <typename T_AllocatorAware_aa_set_struct_setter = ::apache::thrift::fixtures::types::set_i32_7070>
  [[deprecated("Use `FOO.aa_set() = BAR` instead of `FOO.set_aa_set(BAR)`")]]
  ::apache::thrift::fixtures::types::set_i32_7070& set_aa_set(T_AllocatorAware_aa_set_struct_setter&& aa_set_) {
    aa_set_ref() = std::forward<T_AllocatorAware_aa_set_struct_setter>(aa_set_);
    return __fbthrift_field_aa_set;
  }

  /** Glean { "field": "aa_map" } */
  [[deprecated("Use `FOO.aa_map().value()` instead of `FOO.get_aa_map()`")]]
  const ::apache::thrift::fixtures::types::map_i32_i32_9565& get_aa_map() const&;

  /** Glean { "field": "aa_map" } */
  [[deprecated("Use `FOO.aa_map().value()` instead of `FOO.get_aa_map()`")]]
  ::apache::thrift::fixtures::types::map_i32_i32_9565 get_aa_map() &&;

  /** Glean { "field": "aa_map" } */
  template <typename T_AllocatorAware_aa_map_struct_setter = ::apache::thrift::fixtures::types::map_i32_i32_9565>
  [[deprecated("Use `FOO.aa_map() = BAR` instead of `FOO.set_aa_map(BAR)`")]]
  ::apache::thrift::fixtures::types::map_i32_i32_9565& set_aa_map(T_AllocatorAware_aa_map_struct_setter&& aa_map_) {
    aa_map_ref() = std::forward<T_AllocatorAware_aa_map_struct_setter>(aa_map_);
    return __fbthrift_field_aa_map;
  }

  /** Glean { "field": "aa_string" } */
  [[deprecated("Use `FOO.aa_string().value()` instead of `FOO.get_aa_string()`")]]
  const ::apache::thrift::fixtures::types::string_5252& get_aa_string() const& {
    return __fbthrift_field_aa_string;
  }

  /** Glean { "field": "aa_string" } */
  [[deprecated("Use `FOO.aa_string().value()` instead of `FOO.get_aa_string()`")]]
  ::apache::thrift::fixtures::types::string_5252 get_aa_string() && {
    return static_cast<::apache::thrift::fixtures::types::string_5252&&>(__fbthrift_field_aa_string);
  }

  /** Glean { "field": "aa_string" } */
  template <typename T_AllocatorAware_aa_string_struct_setter = ::apache::thrift::fixtures::types::string_5252>
  [[deprecated("Use `FOO.aa_string() = BAR` instead of `FOO.set_aa_string(BAR)`")]]
  ::apache::thrift::fixtures::types::string_5252& set_aa_string(T_AllocatorAware_aa_string_struct_setter&& aa_string_) {
    aa_string_ref() = std::forward<T_AllocatorAware_aa_string_struct_setter>(aa_string_);
    return __fbthrift_field_aa_string;
  }

  /** Glean { "field": "not_a_container" } */
  [[deprecated("Use `FOO.not_a_container().value()` instead of `FOO.get_not_a_container()`")]]
  ::std::int32_t get_not_a_container() const;

  /** Glean { "field": "not_a_container" } */
  [[deprecated("Use `FOO.not_a_container() = BAR` instead of `FOO.set_not_a_container(BAR)`")]]
  ::std::int32_t& set_not_a_container(::std::int32_t not_a_container_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<AllocatorAware>;
  friend void swap(AllocatorAware& a, AllocatorAware& b);
};

template <class Protocol_>
unsigned long AllocatorAware::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "AllocatorAware2", "kind": "struct" } */
class AllocatorAware2 final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::not_a_container,
    ::apache::thrift::ident::box_field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = AllocatorAware2;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;

 public:
  using allocator_type = some_allocator;
  allocator_type get_allocator() const {
    return __fbthrift_alloc;
  }
 private:
  [[FOLLY_ATTR_NO_UNIQUE_ADDRESS]] allocator_type __fbthrift_alloc;

 public:

  AllocatorAware2();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  AllocatorAware2(apache::thrift::FragileConstructor, ::std::int32_t not_a_container__arg, ::apache::thrift::detail::boxed_value_ptr<::std::int32_t> box_field__arg);

  AllocatorAware2(AllocatorAware2&&) noexcept;
  AllocatorAware2(const AllocatorAware2& src);

  explicit AllocatorAware2(const allocator_type& alloc) noexcept;
  explicit AllocatorAware2(const AllocatorAware2& other, const allocator_type& alloc);
  explicit AllocatorAware2(AllocatorAware2&& other, const allocator_type& alloc);
  AllocatorAware2& operator=(AllocatorAware2&&) noexcept;
  AllocatorAware2& operator=(const AllocatorAware2& src);

  ~AllocatorAware2();

 private:
  ::std::int32_t __fbthrift_field_not_a_container;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::std::int32_t> __fbthrift_field_box_field;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const AllocatorAware2&) const;
  bool operator<(const AllocatorAware2&) const;

  /** Glean { "field": "not_a_container" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> not_a_container_ref() const& {
    return {this->__fbthrift_field_not_a_container, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "not_a_container" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> not_a_container_ref() & {
    return {this->__fbthrift_field_not_a_container, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "not_a_container" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> not_a_container_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_not_a_container), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "not_a_container" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> not_a_container() const& {
    return {this->__fbthrift_field_not_a_container, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "not_a_container" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> not_a_container() & {
    return {this->__fbthrift_field_not_a_container, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "not_a_container" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> not_a_container() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_not_a_container), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "box_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> box_field_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_box_field};
  }

  /** Glean { "field": "box_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> box_field_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_box_field};
  }

  /** Glean { "field": "box_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> box_field_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_box_field)};
  }

  /** Glean { "field": "box_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> box_field() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_box_field};
  }

  /** Glean { "field": "box_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> box_field() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_box_field};
  }

  /** Glean { "field": "box_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> box_field() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_box_field)};
  }

  /** Glean { "field": "not_a_container" } */
  [[deprecated("Use `FOO.not_a_container().value()` instead of `FOO.get_not_a_container()`")]]
  ::std::int32_t get_not_a_container() const;

  /** Glean { "field": "not_a_container" } */
  [[deprecated("Use `FOO.not_a_container() = BAR` instead of `FOO.set_not_a_container(BAR)`")]]
  ::std::int32_t& set_not_a_container(::std::int32_t not_a_container_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<AllocatorAware2>;
  friend void swap(AllocatorAware2& a, AllocatorAware2& b);
};

template <class Protocol_>
unsigned long AllocatorAware2::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "TypedefStruct", "kind": "struct" } */
class TypedefStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 3;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::i32_field,
    ::apache::thrift::ident::IntTypedef_field,
    ::apache::thrift::ident::UintTypedef_field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::cpp_type<std::uint32_t, ::apache::thrift::type::i32_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TypedefStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  TypedefStruct() :
      __fbthrift_field_i32_field(),
      __fbthrift_field_IntTypedef_field(),
      __fbthrift_field_UintTypedef_field() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TypedefStruct(apache::thrift::FragileConstructor, ::std::int32_t i32_field__arg, ::apache::thrift::fixtures::types::IntTypedef IntTypedef_field__arg, ::apache::thrift::fixtures::types::UintTypedef UintTypedef_field__arg);

  TypedefStruct(TypedefStruct&&) noexcept;

  TypedefStruct(const TypedefStruct& src);


  TypedefStruct& operator=(TypedefStruct&&) noexcept;
  TypedefStruct& operator=(const TypedefStruct& src);
 private:
  ::std::int32_t __fbthrift_field_i32_field;
 private:
  ::apache::thrift::fixtures::types::IntTypedef __fbthrift_field_IntTypedef_field;
 private:
  ::apache::thrift::fixtures::types::UintTypedef __fbthrift_field_UintTypedef_field;
 private:
  apache::thrift::detail::isset_bitset<3, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const TypedefStruct&) const;
  bool operator<(const TypedefStruct&) const;

  /** Glean { "field": "i32_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> i32_field_ref() const& {
    return {this->__fbthrift_field_i32_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "i32_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> i32_field_ref() & {
    return {this->__fbthrift_field_i32_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "i32_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> i32_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_i32_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "i32_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> i32_field() const& {
    return {this->__fbthrift_field_i32_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "i32_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> i32_field() & {
    return {this->__fbthrift_field_i32_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "i32_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> i32_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_i32_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "IntTypedef_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::IntTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> IntTypedef_field_ref() const& {
    return {this->__fbthrift_field_IntTypedef_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "IntTypedef_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::IntTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> IntTypedef_field_ref() & {
    return {this->__fbthrift_field_IntTypedef_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "IntTypedef_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::IntTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> IntTypedef_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_IntTypedef_field), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "IntTypedef_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::IntTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> IntTypedef_field() const& {
    return {this->__fbthrift_field_IntTypedef_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "IntTypedef_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::IntTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> IntTypedef_field() & {
    return {this->__fbthrift_field_IntTypedef_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "IntTypedef_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::IntTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> IntTypedef_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_IntTypedef_field), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "UintTypedef_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::UintTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> UintTypedef_field_ref() const& {
    return {this->__fbthrift_field_UintTypedef_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "UintTypedef_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::UintTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> UintTypedef_field_ref() & {
    return {this->__fbthrift_field_UintTypedef_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "UintTypedef_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::UintTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> UintTypedef_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_UintTypedef_field), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "UintTypedef_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::UintTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> UintTypedef_field() const& {
    return {this->__fbthrift_field_UintTypedef_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "UintTypedef_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::UintTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> UintTypedef_field() & {
    return {this->__fbthrift_field_UintTypedef_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "UintTypedef_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::fixtures::types::UintTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> UintTypedef_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_UintTypedef_field), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "i32_field" } */
  [[deprecated("Use `FOO.i32_field().value()` instead of `FOO.get_i32_field()`")]]
  ::std::int32_t get_i32_field() const;

  /** Glean { "field": "i32_field" } */
  [[deprecated("Use `FOO.i32_field() = BAR` instead of `FOO.set_i32_field(BAR)`")]]
  ::std::int32_t& set_i32_field(::std::int32_t i32_field_);

  /** Glean { "field": "IntTypedef_field" } */
  [[deprecated("Use `FOO.IntTypedef_field().value()` instead of `FOO.get_IntTypedef_field()`")]]
  ::apache::thrift::fixtures::types::IntTypedef get_IntTypedef_field() const;

  /** Glean { "field": "IntTypedef_field" } */
  [[deprecated("Use `FOO.IntTypedef_field() = BAR` instead of `FOO.set_IntTypedef_field(BAR)`")]]
  ::apache::thrift::fixtures::types::IntTypedef& set_IntTypedef_field(::apache::thrift::fixtures::types::IntTypedef IntTypedef_field_);

  /** Glean { "field": "UintTypedef_field" } */
  [[deprecated("Use `FOO.UintTypedef_field().value()` instead of `FOO.get_UintTypedef_field()`")]]
  ::apache::thrift::fixtures::types::UintTypedef get_UintTypedef_field() const;

  /** Glean { "field": "UintTypedef_field" } */
  [[deprecated("Use `FOO.UintTypedef_field() = BAR` instead of `FOO.set_UintTypedef_field(BAR)`")]]
  ::apache::thrift::fixtures::types::UintTypedef& set_UintTypedef_field(::apache::thrift::fixtures::types::UintTypedef UintTypedef_field_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TypedefStruct>;
  friend void swap(TypedefStruct& a, TypedefStruct& b);
};

template <class Protocol_>
unsigned long TypedefStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/types/src/module.thrift", "name": "StructWithDoubleUnderscores", "kind": "struct" } */
class StructWithDoubleUnderscores final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::__field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StructWithDoubleUnderscores;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  StructWithDoubleUnderscores() :
      __fbthrift_field___field() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithDoubleUnderscores(apache::thrift::FragileConstructor, ::std::int32_t __field__arg);

  StructWithDoubleUnderscores(StructWithDoubleUnderscores&&) = default;

  StructWithDoubleUnderscores(const StructWithDoubleUnderscores&) = default;


  StructWithDoubleUnderscores& operator=(StructWithDoubleUnderscores&&) = default;

  StructWithDoubleUnderscores& operator=(const StructWithDoubleUnderscores&) = default;
 private:
  ::std::int32_t __fbthrift_field___field;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const StructWithDoubleUnderscores&) const;
  bool operator<(const StructWithDoubleUnderscores&) const;

  /** Glean { "field": "__field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> __field_ref() const& {
    return {this->__fbthrift_field___field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "__field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> __field_ref() & {
    return {this->__fbthrift_field___field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "__field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> __field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field___field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "__field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> __field() const& {
    return {this->__fbthrift_field___field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "__field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> __field() & {
    return {this->__fbthrift_field___field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "__field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> __field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field___field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "__field" } */
  [[deprecated("Use `FOO.__field().value()` instead of `FOO.get___field()`")]]
  ::std::int32_t get___field() const;

  /** Glean { "field": "__field" } */
  [[deprecated("Use `FOO.__field() = BAR` instead of `FOO.set___field(BAR)`")]]
  ::std::int32_t& set___field(::std::int32_t __field_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructWithDoubleUnderscores>;
  friend void swap(StructWithDoubleUnderscores& a, StructWithDoubleUnderscores& b);
};

template <class Protocol_>
unsigned long StructWithDoubleUnderscores::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace apache::thrift::fixtures::types

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::empty_struct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\x24\xd1\x61\x06\x23\x77\xd8\x71\x55\xdd\x05\x6b\x49\xd8\xaa\x72", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::decorated_struct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\x94\x74\x2f\x47\xd3\x62\x3b\x98\x70\xee\x04\x98\xe2\xc6\x08\x65", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::ContainerStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\x72\x68\xfe\x5a\xbb\xf7\x44\xc5\x53\x65\x9e\x77\x99\xd5\x75\x5b", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::CppTypeStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\xd8\xf4\x09\x3d\x4c\x8e\xe6\xd2\x2f\xe8\xff\x29\xe5\x30\x2a\x29", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::VirtualStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\x49\x00\xed\xe4\x62\x33\xaa\xae\xfb\x35\x40\x42\x35\xfd\x21\x64", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\x3b\x0a\x12\xe8\x51\x95\x78\x31\xf1\x90\xc0\x8f\xe2\xca\xbc\xd6", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::TrivialNumeric, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\xa0\x03\x3b\x5c\xa9\x9a\xa2\x18\x07\x2c\xcc\x10\x5e\xc3\xeb\x32", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::TrivialNestedWithDefault, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\x47\x86\x48\x73\xb5\xb3\x85\x80\x66\xed\xbb\x27\x6a\xee\x6b\x9a", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::ComplexString, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\x68\x25\x9b\x99\x0b\x08\xa2\x5f\x27\x16\xb2\x50\xa5\x61\x84\x3e", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::ComplexNestedWithDefault, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\xe8\x0c\x06\xb7\xa7\x97\xaf\xe9\x77\xc3\x04\x93\x94\x7c\xe9\x47", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::MinPadding, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\x60\xe4\xaa\xfc\x08\x5f\xf6\xf8\xb4\xf5\xba\xb1\x07\x92\x75\x99", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::MinPaddingWithCustomType, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\x05\x94\x88\x50\x40\x1b\x1c\xf1\x58\x08\x18\x95\x8b\xd9\x26\xa5", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::MyStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\x66\xd4\x14\xf6\x65\x01\xcb\x73\xf0\x91\xc6\xfb\x27\xd1\x85\xfe", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::MyDataItem, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\x51\xc1\x70\x90\xbf\xa7\x23\xb8\x3c\xdf\xdc\x41\x33\xa3\xf0\xb7", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::Renamed, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\x07\x62\x00\xc8\x87\xb4\xd4\xdd\x51\x86\x0e\x40\x9f\x9f\x78\x99", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::AnnotatedTypes, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\x9d\x5a\x5e\xeb\x95\xbf\x59\x51\x0b\xf2\x4c\xf7\xfb\x13\xba\x31", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::ForwardUsageRoot, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\x49\x11\xf3\xf4\x67\x18\xbd\xf3\xff\xa7\x52\x22\x08\x72\x9b\x82", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::ForwardUsageStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\x89\xe5\x55\xfa\x08\x00\xf9\xe8\x7a\x9c\xb2\x58\xef\xb9\xb2\x6d", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::ForwardUsageByRef, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\x00\x07\xd7\x80\x49\x91\x65\x8a\x93\x73\xfa\x70\x42\x61\x73\x75", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::IncompleteMap, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\xe5\xf1\x55\x53\x40\xb7\xdc\x3c\x5a\x39\xbd\x77\xd6\x58\xe3\x54", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::IncompleteMapDep, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\xda\x17\x79\x1c\x7a\x25\xa0\x24\x3c\x93\x64\xbf\x18\xaf\x75\x36", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::CompleteMap, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\xca\x4c\x85\x04\x48\x68\x5f\x1f\xfd\xee\xd8\xfd\x64\xb1\x38\xfb", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::CompleteMapDep, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\x7c\xce\x70\x2f\xd8\xe9\xa9\x53\x68\xcb\x79\x60\xa5\x44\x8a\x03", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::IncompleteList, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\x13\x1e\xad\xa4\x01\xc3\xa6\x43\xc1\xb8\x7f\xaa\x45\x9b\x29\xea", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::IncompleteListDep, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\x45\x53\x63\x23\xff\xf2\x40\xf3\x4e\x41\x90\x3d\x92\x5b\xc0\xd5", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::CompleteList, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\xaf\x0d\x7c\xd7\x06\x69\x60\x46\xdb\xaf\xc3\x6a\xa2\x45\x97\x1d", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::CompleteListDep, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\x8c\x33\xb6\x62\xa9\xd8\xec\x0f\xb7\xf5\xd4\x43\x8a\x13\x17\xff", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::AdaptedList, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\xef\xe5\x96\xfe\x1a\x08\x5a\x56\xf7\x22\x66\xfd\x24\x85\x40\x58", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::detail::AdaptedListDep, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\x50\xb3\xfa\x29\x43\x64\xd5\xac\x92\xda\x91\xba\x3c\xea\x4b\x0a", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::DependentAdaptedList, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\x27\x95\x00\x32\x9e\xc2\xfd\x6e\xf2\x36\x21\xf9\xa8\x0f\xf2\x78", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\x44\xb7\x46\x9b\xc6\xdb\x58\x33\x30\xf8\x78\x72\xc2\x3c\xb9\x60", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::AllocatorAware, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\x31\x19\xe6\x18\xf6\x7e\x66\xed\xa8\x6b\xde\x2b\x9f\xb5\x7e\x96", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::AllocatorAware2, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\x99\xbf\xaa\x06\x85\x89\x80\xc0\xe9\xa0\xaa\xfc\xa8\xd5\xf5\x98", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::TypedefStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\x6e\xab\x80\x93\x69\xfc\x06\x8b\x27\xd5\xc0\xcb\xce\x12\x9a\x36", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::StructWithDoubleUnderscores, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\x99\xb0\x87\x0a\x73\xe6\xb5\x59\x02\xa6\x48\x5d\x4d\x10\xd9\x3b", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::has_bitwise_ops, true> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\x28\xfe\x52\x85\x5c\x83\xb3\x5a\x71\xe2\x8f\xef\x9b\x98\x1f\xfb", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::is_unscoped, true> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\x24\x3c\x21\x47\x3d\x5c\x79\x43\x2e\xc8\x57\xe6\x41\xeb\xef\x63", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::MyForwardRefEnum, true> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -862582776043729022;
  static constexpr ::std::string_view definitionKey = {"\x9d\x0b\x12\x9c\x76\x39\xdd\xb9\x77\x2f\x71\x11\xe3\x89\x72\x72", 16};
};
} // namespace apache::thrift::detail
