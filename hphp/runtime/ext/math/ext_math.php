<?hh
// @generated by docskel.php

/**
 * Absolute value
 *
 * @param mixed $number - The numeric value to process
 *
 * @return number - The absolute value of number. If the argument number
 *   is of type float, the return type is also float, otherwise it is
 *   integer (as float usually has a bigger value range than integer).
 */
<<__Native>>
function abs(mixed $number): mixed;

/**
 * Arc cosine
 *
 * @param float $arg - The argument to process
 *
 * @return float - The arc cosine of arg in radians.
 */
<<__Native>>
function acos(float $arg): float;

/**
 * Inverse hyperbolic cosine
 *
 * @param float $arg - The value to process
 *
 * @return float - The inverse hyperbolic cosine of arg
 */
<<__Native>>
function acosh(float $arg): float;

/**
 * Arc sine
 *
 * @param float $arg - The argument to process
 *
 * @return float - The arc sine of arg in radians
 */
<<__Native>>
function asin(float $arg): float;

/**
 * Inverse hyperbolic sine
 *
 * @param float $arg - The argument to process
 *
 * @return float - The inverse hyperbolic sine of arg
 */
<<__Native>>
function asinh(float $arg): float;

/**
 * Arc tangent
 *
 * @param float $arg - The argument to process
 *
 * @return float - The arc tangent of arg in radians.
 */
<<__Native>>
function atan(float $arg): float;

/**
 * Arc tangent of two variables
 *
 * @param float $y - Dividend parameter
 * @param float $x - Divisor parameter
 *
 * @return float - The arc tangent of y/x in radians.
 */
<<__Native>>
function atan2(float $y,
               float $x): float;

/**
 * Inverse hyperbolic tangent
 *
 * @param float $arg - The argument to process
 *
 * @return float - Inverse hyperbolic tangent of arg
 */
<<__Native>>
function atanh(float $arg): float;

/**
 * Convert a number between arbitrary bases
 *
 * @param string $number - The number to convert
 * @param int $frombase - The base number is in
 * @param int $tobase - The base to convert number to
 *
 * @return string - number converted to base tobase
 */
<<__Native>>
function base_convert(mixed $number,
                      int $frombase,
                      int $tobase): mixed;

/**
 * Binary to decimal
 *
 * @param string $binary_string - The binary string to convert
 *
 * @return number - The decimal value of binary_string
 */
<<__Native>>
function bindec(mixed $binary_string): mixed;

/**
 * Round fractions up
 *
 * @param float $value - The value to round
 *
 * @return float - value rounded up to the next highest integer. The
 *   return value of ceil() is still of type float as the value range of
 *   float is usually bigger than that of integer.
 */
<<__Native>>
function ceil(mixed $value): mixed;

/**
 * Cosine
 *
 * @param float $arg - An angle in radians
 *
 * @return float - The cosine of arg
 */
<<__Native>>
function cos(float $arg): float;

/**
 * Hyperbolic cosine
 *
 * @param float $arg - The argument to process
 *
 * @return float - The hyperbolic cosine of arg
 */
<<__Native>>
function cosh(float $arg): float;

/**
 * Decimal to binary
 *
 * @param int $number - Decimal value to convert   Range of inputs on
 *   32-bit machines       positive number negative number return value   
 *   0  0   1  1   2  10   ... normal progression ...   2147483646
 *   1111111111111111111111111111110   2147483647 (largest signed integer)
 *   1111111111111111111111111111111 (31 1's)   2147483648 -2147483648
 *   10000000000000000000000000000000   ... normal progression ... 
 *   4294967294 -2 11111111111111111111111111111110   4294967295 (largest
 *   unsigned integer) -1 11111111111111111111111111111111 (32 1's)    
 *   Range of inputs on 64-bit machines       positive number negative
 *   number return value     0  0   1  1   2  10   ... normal progression
 *   ...   9223372036854775806
 *   111111111111111111111111111111111111111111111111111111111111110 
 *   9223372036854775807 (largest signed integer)
 *   111111111111111111111111111111111111111111111111111111111111111 (63
 *   1's)    -9223372036854775808
 *   1000000000000000000000000000000000000000000000000000000000000000   ...
 *   normal progression ...    -2
 *   1111111111111111111111111111111111111111111111111111111111111110    -1
 *   1111111111111111111111111111111111111111111111111111111111111111 (64
 *   1's)
 *
 * @return string - Binary string representation of number
 */
<<__Native>>
function decbin(int $number): string;

/**
 * Decimal to hexadecimal
 *
 * @param int $number - The decimal value to convert.   As PHP's integer
 *   type is signed, but dechex() deals with unsigned integers, negative
 *   integers will be treated as though they were unsigned.
 *
 * @return string - Hexadecimal string representation of number.
 */
<<__Native>>
function dechex(int $number): string;

/**
 * Decimal to octal
 *
 * @param int $number - Decimal value to convert
 *
 * @return string - Octal string representation of number
 */
<<__Native>>
function decoct(int $number): string;

/**
 * Converts the number in degrees to the radian equivalent
 *  
 *
 * @param float $number - Angular value in degrees
 *
 * @return float - The radian equivalent of number
 */
<<__Native>>
function deg2rad(float $number): float;

/**
 * Calculates the exponent of
 *
 * @param float $arg - The argument to process
 *
 * @return float - 'e' raised to the power of arg
 */
<<__Native>>
function exp(float $arg): float;

/**
 * Returns exp(number) - 1, computed in a way that is accurate even
 *    when the value of number is close to zero
 *  
 *
 * @param float $arg - The argument to process
 *
 * @return float - 'e' to the power of arg minus one
 */
<<__Native>>
function expm1(float $arg): float;

/**
 * Round fractions down
 *
 * @param float $value - The numeric value to round
 *
 * @return float - value rounded to the next lowest integer. The return
 *   value of floor() is still of type float because the value range of
 *   float is usually bigger than that of integer.
 */
<<__Native>>
function floor(mixed $value): mixed;

/**
 * Returns the floating point remainder (modulo) of the division
 *   of the arguments
 *
 * @param float $x - The dividend
 * @param float $y - The divisor
 *
 * @return float - The floating point remainder of x/y
 */
<<__Native>>
function fmod(float $x,
              float $y): float;

/**
 * Show largest possible random value
 *
 * @return int - The largest possible random value returned by rand()
 */
<<__Native>>
function getrandmax(): int;

/**
 * Hexadecimal to decimal
 *
 * @param string $hex_string - The hexadecimal string to convert
 *
 * @return number - The decimal representation of hex_string
 */
<<__Native>>
function hexdec(mixed $hex_string): mixed;

/**
 * Calculate the length of the hypotenuse of a right-angle triangle
 *  
 *
 * @param float $x - Length of first side
 * @param float $y - Length of second side
 *
 * @return float - Calculated length of the hypotenuse
 */
<<__Native>>
function hypot(float $x,
               float $y): float;

/**
 * Finds whether a value is a legal finite number
 *
 * @param float $val - The value to check
 *
 * @return bool - TRUE if val is a legal finite number within the allowed
 *   range for a PHP float on this platform, else FALSE.
 */
<<__Native>>
function is_finite(float $val): bool;

/**
 * Finds whether a value is infinite
 *
 * @param float $val - The value to check
 *
 * @return bool - TRUE if val is infinite, else FALSE.
 */
<<__Native>>
function is_infinite(float $val): bool;

/**
 * Finds whether a value is not a number
 *
 * @param float $val - The value to check
 *
 * @return bool - Returns TRUE if val is 'not a number', else FALSE.
 */
<<__Native>>
function is_nan(float $val): bool;

/**
 * Combined linear congruential generator
 *
 * @return float - A pseudo random float value in the range of (0, 1)
 */
<<__Native>>
function lcg_value(): float;

/**
 * Natural logarithm
 *
 * @param float $arg - The value to calculate the logarithm for
 * @param float $base - The optional logarithmic base to use (defaults to
 *   'e' and so to the natural logarithm).
 *
 * @return float - The logarithm of arg to base, if given, or the natural
 *   logarithm.
 */
<<__Native>>
function log(float $arg,
             float $base = M_E): float;

/**
 * Base-10 logarithm
 *
 * @param float $arg - The argument to process
 *
 * @return float - The base-10 logarithm of arg
 */
<<__Native>>
function log10(float $arg): float;

/**
 * Returns log(1 + number), computed in a way that is accurate even when
 *    the value of number is close to zero
 *  
 *
 * @param float $number - The argument to process
 *
 * @return float - log(1 + number)
 */
<<__Native>>
function log1p(float $number): float;

/**
 * Find highest value
 *
 * @param mixed $value1 - Any comparable value.
 * @param mixed $... - Any comparable value.
 *
 * @return mixed - max() returns the numerically highest of the parameter
 *   values. If multiple values can be considered of the same size, the one
 *   that is listed first will be returned.   When max() is given multiple
 *   arrays, the longest array is returned. If all the arrays have the same
 *   length, max() will use lexicographic ordering to find the return
 *   value.   When given a string it will be cast as an integer when
 *   comparing.
 */
<<__Native("ActRec")>>
function max(mixed $value1, ...): mixed;

/**
 * Find lowest value
 *
 * @param mixed $value1 - Any comparable value.
 * @param mixed $... - Any comparable value.
 *
 * @return mixed - min() returns the numerically lowest of the parameter
 *   values.
 */
<<__Native>>
function min(mixed $value1, ...): mixed;

/**
 * Show largest possible random value
 *
 * @return int - Returns the maximum random value returned by mt_rand()
 */
<<__Native>>
function mt_getrandmax(): int;

/**
 * Generate a better random value
 *
 * @param int $min - Optional lowest value to be returned (default: 0)
 * @param int $max - Optional highest value to be returned (default:
 *   mt_getrandmax())
 *
 * @return int - A random integer value between min (or 0) and max (or
 *   mt_getrandmax(), inclusive), or FALSE if max is less than min.
 */
<<__Native("ActRec")>>
function mt_rand(int $min, int $max): int;

/**
 * Seed the better random number generator
 *
 * @param int $seed - An optional seed value
 *
 * @return void -
 */
<<__Native>>
function mt_srand(?int $seed = null): void;

/**
 * Octal to decimal
 *
 * @param string $octal_string - The octal string to convert
 *
 * @return number - The decimal representation of octal_string
 */
<<__Native>>
function octdec(mixed $octal_string): mixed;

/**
 * Get value of pi
 *
 * @return float - The value of pi as float.
 */
<<__Native>>
function pi(): float;

/**
 * Exponential expression
 *
 * @param number $base - The base to use
 * @param number $exp - The exponent
 *
 * @return number - base raised to the power of exp. If both arguments
 *   are non-negative integers and the result can be represented as an
 *   integer, the result will be returned with integer type, otherwise it
 *   will be returned as a float.
 */
<<__Native>>
function pow(mixed $base,
             mixed $exp): mixed;

/**
 * Converts the radian number to the equivalent number in degrees
 *  
 *
 * @param float $number - A radian value
 *
 * @return float - The equivalent of number in degrees
 */
<<__Native>>
function rad2deg(float $number): float;

/**
 * Generate a random integer
 *
 * @param int $min - The lowest value to return (default: 0)
 * @param int $max - The highest value to return (default: getrandmax())
 *
 * @return int - A pseudo random value between min (or 0) and max (or
 *   getrandmax(), inclusive).
 */
<<__Native("ActRec")>>
function rand(int $min, int $max): int;

/**
 * Rounds a float
 *
 * @param float $val - The value to round
 * @param int $precision - The optional number of decimal digits to round
 *   to.
 * @param int $mode - Use one of the following constants to specify the
 *   mode in which rounding occurs.     Constant      PHP_ROUND_HALF_UP
 *   Round val up to precision decimal places away from zero, when it is
 *   half way there. Making 1.5 into 2 and -1.5 into -2.  
 *   PHP_ROUND_HALF_DOWN  Round val down to precision decimal places
 *   towards zero, when it is half way there. Making 1.5 into 1 and -1.5
 *   into -1.    PHP_ROUND_HALF_EVEN  Round val to precision decimal places
 *   towards the next even value.    PHP_ROUND_HALF_ODD  Round val to
 *   precision decimal places towards the next odd value.
 *
 * @return float - The rounded value
 */
<<__Native>>
function round(mixed $val,
               int $precision = 0,
               int $mode = PHP_ROUND_HALF_UP): mixed;

/**
 * Sine
 *
 * @param float $arg - A value in radians
 *
 * @return float - The sine of arg
 */
<<__Native>>
function sin(float $arg): float;

/**
 * Hyperbolic sine
 *
 * @param float $arg - The argument to process
 *
 * @return float - The hyperbolic sine of arg
 */
<<__Native>>
function sinh(float $arg): float;

/**
 * Square root
 *
 * @param float $arg - The argument to process
 *
 * @return float - The square root of arg or the special value NAN for
 *   negative numbers.
 */
<<__Native>>
function sqrt(float $arg): float;

/**
 * Seed the random number generator
 *
 * @param int $seed - Optional seed value
 *
 * @return void -
 */
<<__Native>>
function srand(?int $seed = null): void;

/**
 * Tangent
 *
 * @param float $arg - The argument to process in radians
 *
 * @return float - The tangent of arg
 */
<<__Native>>
function tan(float $arg): float;

/**
 * Hyperbolic tangent
 *
 * @param float $arg - The argument to process
 *
 * @return float - The hyperbolic tangent of arg
 */
<<__Native>>
function tanh(float $arg): float;

