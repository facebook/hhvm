{
    "preamble": "",
    "consts": [
    ],
    "funcs": [
        {
            "name": "ftok",
            "desc": "The function converts the pathname of an existing accessible file and a project identifier into an integer for use with for example shmop_open() and other System V IPC keys.",
            "flags": [
            ],
            "return": {
                "type": "Int64",
                "desc": "On success the return value will be the created key value, otherwise -1 is returned."
            },
            "args": [
                {
                    "name": "pathname",
                    "type": "String",
                    "desc": "Path to an accessible file."
                },
                {
                    "name": "proj",
                    "type": "String",
                    "desc": "Project identifier. This must be a one character string."
                }
            ]
        },
        {
            "name": "msg_get_queue",
            "desc": "msg_get_queue() returns an id that can be used to access the System V message queue with the given key. The first call creates the message queue with the optional perms. A second call to msg_get_queue() for the same key will return a different message queue identifier, but both identifiers access the same underlying message queue.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns a resource handle that can be used to access the System V message queue."
            },
            "args": [
                {
                    "name": "key",
                    "type": "Int64",
                    "desc": "Message queue numeric ID"
                },
                {
                    "name": "perms",
                    "type": "Int64",
                    "value": "0666",
                    "desc": "Queue permissions. Default to 0666. If the message queue already exists, the perms will be ignored."
                }
            ]
        },
        {
            "name": "msg_queue_exists",
            "desc": "msg_queue_exists() checks whether a message queue exists",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "key",
                    "type": "Int64",
                    "desc": "Queue key."
                }
            ]
        },
        {
            "name": "msg_send",
            "desc": "msg_send() sends a message of type msgtype (which MUST be greater than 0) to the message queue specified by queue.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure.\n\nUpon successful completion the message queue data structure is updated as follows: msg_lspid is set to the process-ID of the calling process, msg_qnum is incremented by 1 and msg_stime is set to the current time."
            },
            "args": [
                {
                    "name": "queue",
                    "type": "Resource"
                },
                {
                    "name": "msgtype",
                    "type": "Int64"
                },
                {
                    "name": "message",
                    "type": "Variant"
                },
                {
                    "name": "serialize",
                    "type": "Boolean",
                    "value": "true",
                    "desc": "The optional serialize controls how the message is sent. serialize defaults to TRUE which means that the message is serialized using the same mechanism as the session module before being sent to the queue. This allows complex arrays and objects to be sent to other PHP scripts, or if you are using the WDDX serializer, to any WDDX compatible client."
                },
                {
                    "name": "blocking",
                    "type": "Boolean",
                    "value": "true",
                    "desc": "If the message is too large to fit in the queue, your script will wait until another process reads messages from the queue and frees enough space for your message to be sent. This is called blocking; you can prevent blocking by setting the optional blocking parameter to FALSE, in which case msg_send() will immediately return FALSE if the message is too big for the queue, and set the optional errorcode to MSG_EAGAIN, indicating that you should try to send your message again a little later on."
                },
                {
                    "name": "errorcode",
                    "type": "Variant",
                    "value": "null",
                    "ref": true
                }
            ]
        },
        {
            "name": "msg_receive",
            "desc": "msg_receive() will receive the first message from the specified queue of the type specified by desiredmsgtype.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure.\n\nUpon successful completion the message queue data structure is updated as follows: msg_lrpid is set to the process-ID of the calling process, msg_qnum is decremented by 1 and msg_rtime is set to the current time."
            },
            "args": [
                {
                    "name": "queue",
                    "type": "Resource"
                },
                {
                    "name": "desiredmsgtype",
                    "type": "Int64",
                    "desc": "If desiredmsgtype is 0, the message from the front of the queue is returned. If desiredmsgtype is greater than 0, then the first message of that type is returned. If desiredmsgtype is less than 0, the first message on the queue with the lowest type less than or equal to the absolute value of desiredmsgtype will be read. If no messages match the criteria, your script will wait until a suitable message arrives on the queue. You can prevent the script from blocking by specifying MSG_IPC_NOWAIT in the flags parameter."
                },
                {
                    "name": "msgtype",
                    "type": "Variant",
                    "desc": "The type of the message that was received will be stored in this parameter.",
                    "ref": true
                },
                {
                    "name": "maxsize",
                    "type": "Int64",
                    "desc": "The maximum size of message to be accepted is specified by the maxsize; if the message in the queue is larger than this size the function will fail (unless you set flags as described below)."
                },
                {
                    "name": "message",
                    "type": "Variant",
                    "desc": "The received message will be stored in message, unless there were errors receiving the message.",
                    "ref": true
                },
                {
                    "name": "unserialize",
                    "type": "Boolean",
                    "value": "true",
                    "desc": "If set to TRUE, the message is treated as though it was serialized using the same mechanism as the session module. The message will be unserialized and then returned to your script. This allows you to easily receive arrays or complex object structures from other PHP scripts, or if you are using the WDDX serializer, from any WDDX compatible source.\n\nIf unserialize is FALSE, the message will be returned as a binary-safe string."
                },
                {
                    "name": "flags",
                    "type": "Int64",
                    "value": "0",
                    "desc": "The optional flags allows you to pass flags to the low-level msgrcv system call. It defaults to 0, but you may specify one or more of the following values (by adding or ORing them together). Flag values for msg_receive MSG_IPC_NOWAIT If there are no messages of the desiredmsgtype, return immediately and do not wait. The function will fail and return an integer value corresponding to MSG_ENOMSG. MSG_EXCEPT Using this flag in combination with a desiredmsgtype greater than 0 will cause the function to receive the first message that is not equal to desiredmsgtype. MSG_NOERROR If the message is longer than maxsize, setting this flag will truncate the message to maxsize and will not signal an error."
                },
                {
                    "name": "errorcode",
                    "type": "Variant",
                    "value": "null",
                    "desc": "If the function fails, the optional errorcode will be set to the value of the system errno variable.",
                    "ref": true
                }
            ]
        },
        {
            "name": "msg_remove_queue",
            "desc": "msg_remove_queue() destroys the message queue specified by the queue. Only use this function when all processes have finished working with the message queue and you need to release the system resources held by it.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "queue",
                    "type": "Resource",
                    "desc": "Message queue resource handle"
                }
            ]
        },
        {
            "name": "msg_set_queue",
            "desc": "msg_set_queue() allows you to change the values of the msg_perm.uid, msg_perm.gid, msg_perm.mode and msg_qbytes fields of the underlying message queue data structure.\n\nChanging the data structure will require that PHP be running as the same user that created the queue, owns the queue (as determined by the existing msg_perm.xxx fields), or be running with root privileges. root privileges are required to raise the msg_qbytes values above the system defined limit.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "queue",
                    "type": "Resource",
                    "desc": "Message queue resource handle"
                },
                {
                    "name": "data",
                    "type": "Int64Map",
                    "desc": "You specify the values you require by setting the value of the keys that you require in the data array."
                }
            ]
        },
        {
            "name": "msg_stat_queue",
            "desc": "msg_stat_queue() returns the message queue meta data for the message queue specified by the queue. This is useful, for example, to determine which process sent the message that was just received.",
            "flags": [
            ],
            "return": {
                "type": "Int64Map",
                "desc": "The return value is an array whose keys and values have the following meanings: Array structure for msg_stat_queue msg_perm.uid The uid of the owner of the queue. msg_perm.gid The gid of the owner of the queue. msg_perm.mode The file access mode of the queue. msg_stime The time that the last message was sent to the queue. msg_rtime The time that the last message was received from the queue. msg_ctime The time that the queue was last changed. msg_qnum The number of messages waiting to be read from the queue. msg_qbytes The maximum number of bytes allowed in one message queue. On Linux, this value may be read and modified via \/proc\/sys\/kernel\/msgmnb. msg_lspid The pid of the process that sent the last message to the queue. msg_lrpid The pid of the process that received the last message from the queue."
            },
            "args": [
                {
                    "name": "queue",
                    "type": "Resource",
                    "desc": "Message queue resource handle"
                }
            ]
        },
        {
            "name": "sem_acquire",
            "desc": "sem_acquire() blocks (if necessary) until the semaphore can be acquired. A process attempting to acquire a semaphore which it has already acquired will block forever if acquiring the semaphore would cause its maximum number of semaphore to be exceeded.\n\nAfter processing a request, any semaphores acquired by the process but not explicitly released will be released automatically and a warning will be generated.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "sem_identifier",
                    "type": "Resource",
                    "desc": "sem_identifier is a semaphore resource, obtained from sem_get()."
                }
            ]
        },
        {
            "name": "sem_get",
            "desc": "sem_get() returns an id that can be used to access the System V semaphore with the given key.\n\nA second call to sem_get() for the same key will return a different semaphore identifier, but both identifiers access the same underlying semaphore.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns a positive semaphore identifier on success, or FALSE on error."
            },
            "args": [
                {
                    "name": "key",
                    "type": "Int64"
                },
                {
                    "name": "max_acquire",
                    "type": "Int64",
                    "value": "1",
                    "desc": "The number of processes that can acquire the semaphore simultaneously is set to max_acquire."
                },
                {
                    "name": "perm",
                    "type": "Int64",
                    "value": "0666",
                    "desc": "The semaphore permissions. Actually this value is set only if the process finds it is the only process currently attached to the semaphore."
                },
                {
                    "name": "auto_release",
                    "type": "Boolean",
                    "value": "true",
                    "desc": "Specifies if the semaphore should be automatically released on request shutdown."
                }
            ]
        },
        {
            "name": "sem_release",
            "desc": "sem_release() releases the semaphore if it is currently acquired by the calling process, otherwise a warning is generated.\n\nAfter releasing the semaphore, sem_acquire() may be called to re-acquire it.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "sem_identifier",
                    "type": "Resource",
                    "desc": "A Semaphore resource handle as returned by sem_get()."
                }
            ]
        },
        {
            "name": "sem_remove",
            "desc": "sem_remove() removes the given semaphore.\n\nAfter removing the semaphore, it is no more accessible.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "sem_identifier",
                    "type": "Resource",
                    "desc": "A semaphore resource identifier as returned by sem_get()."
                }
            ]
        },
        {
            "name": "shm_attach",
            "desc": "shm_attach() returns an id that can be used to access the System V shared memory with the given key, the first call creates the shared memory segment with memsize and the optional perm-bits perm.\n\nA second call to shm_attach() for the same key will return a different shared memory identifier, but both identifiers access the same underlying shared memory. memsize and perm will be ignored.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns a shared memory segment identifier."
            },
            "args": [
                {
                    "name": "shm_key",
                    "type": "Int64",
                    "desc": "A numeric shared memory segment ID"
                },
                {
                    "name": "shm_size",
                    "type": "Int64",
                    "value": "10000",
                    "desc": "The memory size. If not provided, default to the sysvshm.init_mem in the php.ini, otherwise 10000 bytes."
                },
                {
                    "name": "shm_flag",
                    "type": "Int64",
                    "value": "0666",
                    "desc": "The optional permission bits. Default to 0666."
                }
            ]
        },
        {
            "name": "shm_detach",
            "desc": "shm_detach() disconnects from the shared memory given by the shm_identifier created by shm_attach(). Remember, that shared memory still exist in the Unix system and the data is still present.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "shm_detach() always returns TRUE."
            },
            "args": [
                {
                    "name": "shm_identifier",
                    "type": "Int64",
                    "desc": "A shared memory resource handle as returned by shm_attach()"
                }
            ]
        },
        {
            "name": "shm_remove",
            "desc": "shm_remove() removes the shared memory shm_identifier. All data will be destroyed.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "shm_identifier",
                    "type": "Int64",
                    "desc": "The shared memory identifier as returned by shm_attach()"
                }
            ]
        },
        {
            "name": "shm_get_var",
            "desc": "shm_get_var() returns the variable with a given variable_key, in the given shared memory segment. The variable is still present in the shared memory.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the variable with the given key."
            },
            "args": [
                {
                    "name": "shm_identifier",
                    "type": "Int64",
                    "desc": "Shared memory segment, obtained from shm_attach()."
                },
                {
                    "name": "variable_key",
                    "type": "Int64",
                    "desc": "The variable key."
                }
            ]
        },
        {
            "name": "shm_has_var",
            "desc": "shm_has_var() checks whether a specific key exists inside a shared memory segment.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE if the entry exists, otherwise FALSE"
            },
            "args": [
                {
                    "name": "shm_identifier",
                    "type": "Int64",
                    "desc": "Shared memory segment, obtained from shm_attach()."
                },
                {
                    "name": "variable_key",
                    "type": "Int64",
                    "desc": "The variable key."
                }
            ]
        },
        {
            "name": "shm_put_var",
            "desc": "shm_put_var() inserts or updates the variable with the given variable_key.\n\nWarnings (E_WARNING level) will be issued if shm_identifier is not a valid SysV shared memory index or if there was not enough shared memory remaining to complete your request.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "shm_identifier",
                    "type": "Int64",
                    "desc": "A shared memory resource handle as returned by shm_attach()"
                },
                {
                    "name": "variable_key",
                    "type": "Int64",
                    "desc": "The variable key."
                },
                {
                    "name": "variable",
                    "type": "Any",
                    "desc": "The variable. All variable-types are supported."
                }
            ]
        },
        {
            "name": "shm_remove_var",
            "desc": "Removes a variable with a given variable_key and frees the occupied memory.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "shm_identifier",
                    "type": "Int64",
                    "desc": "The shared memory identifier as returned by shm_attach()"
                },
                {
                    "name": "variable_key",
                    "type": "Int64",
                    "desc": "The variable key."
                }
            ]
        }
    ],
    "classes": [
    ]
}