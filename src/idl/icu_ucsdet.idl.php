<?php
/**
 * Automatically generated by running "php schema.php icu_ucsdet".
 *
 * You may modify the file, but re-running schema.php against this file will
 * standardize the format without losing your schema changes. It does lose
 * any changes that are not part of schema. Use "note" field to comment on
 * schema itself, and "note" fields are not used in any code generation but
 * only staying within this file.
 *
 * @nolint
 */
///////////////////////////////////////////////////////////////////////////////
// Preamble: C++ code inserted at beginning of ext_{name}.h

DefinePreamble(<<<CPP

// Avoid dragging in the icu namespace.
#ifndef U_USING_ICU_NAMESPACE
#define U_USING_ICU_NAMESPACE 0
#endif

#include <unicode/ucsdet.h>
#include <unicode/utypes.h>
CPP
);

///////////////////////////////////////////////////////////////////////////////
// Constants
//
// array (
//   'name' => name of the constant
//   'type' => type of the constant
//   'note' => additional note about this constant's schema
// )


///////////////////////////////////////////////////////////////////////////////
// Functions
//
// array (
//   'name'   => name of the function
//   'desc'   => description of the function's purpose
//   'flags'  => attributes of the function, see base.php for possible values
//   'opt'    => optimization callback function's name for compiler
//   'note'   => additional note about this function's schema
//   'return' =>
//      array (
//        'type'  => return type, use Reference for ref return
//        'desc'  => description of the return value
//      )
//   'args'   => arguments
//      array (
//        'name'  => name of the argument
//        'type'  => type of the argument, use Reference for output parameter
//        'value' => default value of the argument
//        'desc'  => description of the argument
//      )
//   'taint_observer' => taint propagation information
//     array (
//       'set_mask' => which bits to set automatically
//       'clear_mask' => which bits to clear automatically
//     )
// )


///////////////////////////////////////////////////////////////////////////////
// Classes
//
// BeginClass
// array (
//   'name'   => name of the class
//   'desc'   => description of the class's purpose
//   'flags'  => attributes of the class, see base.php for possible values
//   'note'   => additional note about this class's schema
//   'parent' => parent class name, if any
//   'ifaces' => array of interfaces tihs class implements
//   'bases'  => extra internal and special base classes this class requires
//   'footer' => extra C++ inserted at end of class declaration
// )
//
// DefineConstant(..)
// DefineConstant(..)
// ...
// DefineFunction(..)
// DefineFunction(..)
// ...
// DefineProperty
// DefineProperty
//
// array (
//   'name'  => name of the property
//   'type'  => type of the property
//   'flags' => attributes of the property
//   'desc'  => description of the property
//   'note'  => additional note about this property's schema
// )
//
// EndClass()

///////////////////////////////////////////////////////////////////////////////

BeginClass(
  array(
    'name'   => "EncodingDetector",
    'desc'   => "Guesses the encoding of an array of bytes in an unknown encoding (see http://icu-project.org/apiref/icu4c/ucsdet_8h.html)",
    'flags'  =>  HasDocComment,
    'footer' => <<<EOT

  private: UCharsetDetector *m_encoding_detector;
EOT
,
  ));

DefineFunction(
  array(
    'name'   => "__construct",
    'desc'   => "Creates an encoding detector.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => null,
    ),
  ));

DefineFunction(
  array(
    'name'   => "setText",
    'desc'   => "Sets the input byte array whose encoding is to be guessed.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "text",
        'type'   => String,
        'desc'   => "A byte array whose encoding is to be guessed.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "setDeclaredEncoding",
    'desc'   => "If the user provided an encoding in metadata (like an HTTP or XML declaration), this can be used as an additional hint to the detector.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "text",
        'type'   => String,
        'desc'   => "Possible encoding for the byte array obtained from associated metadata",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "detect",
    'desc'   => "Returns an EncodingMatch object containing the best guess for the encoding of the byte array",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Object,
      'desc'   => "EncodingMatch object for the best guess of the encoding of the byte array",
    ),
  ));

DefineFunction(
  array(
    'name'   => "detectAll",
    'desc'   => "Returns an array of EncodingMatch objects containing all guesses for the encoding of the byte array",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => VariantVec,
      'desc'   => "Array of EncodingMatch objects for all guesses of the encoding of the byte array",
    ),
  ));

DefineFunction(
  array(
    'name'   => "__destruct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
  ));

EndClass(
);

///////////////////////////////////////////////////////////////////////////////

BeginClass(
  array(
    'name'   => "EncodingMatch",
    'desc'   => "Result of detecting the encoding of an array of bytes",
    'flags'  =>  HasDocComment,
    'footer' => <<<EOT

  public: const UCharsetMatch *m_encoding_match;
  private: void validate();
EOT
,
  ));

DefineFunction(
  array(
    'name'   => "__construct",
    'desc'   => "Internal only: Creates an encoding match.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => null,
    ),
  ));

DefineFunction(
  array(
    'name'   => "isValid",
    'desc'   => "Checks if the encoding match succeeded.",
    'flags'  =>  HasDocComment,
    'return' => array(
        'type'   => Boolean,
        'desc'   => "true if the match succeeded, false otherwise",
      ),
    )
);

DefineFunction(
  array(
    'name'   => "getEncoding",
    'desc'   => "Gets the name of the detected encoding",
    'flags'  =>  HasDocComment,
    'return' => array(
        'type'   => String,
        'desc'   => "The name of the detected encoding",
      ),
    )
);

DefineFunction(
  array(
    'name'   => "getConfidence",
    'desc'   => "Gets the confidence number of the encoding match",
    'flags'  =>  HasDocComment,
    'return' => array(
        'type'   => Int32,
        'desc'   => "Confidence number from 0 (no confidence) to 100 (complete confidence)",
      ),
    )
);

DefineFunction(
  array(
    'name'   => "getLanguage",
    'desc'   => "Gets a rough guess at the language of the encoded bytes",
    'flags'  =>  HasDocComment,
    'return' => array(
        'type'   => String,
        'desc'   => "A rough guess at the language of the encoded bytes",
      ),
    )
);

DefineFunction(
  array(
    'name'   => "getUTF8",
    'desc'   => "Gets the UTF-8 encoded version of the encoded byte array",
    'flags'  =>  HasDocComment,
    'return' => array(
        'type'   => String,
        'desc'   => "The result of converting the bytes to UTF-8 with the detected encoding",
      ),
    )
);

DefineFunction(
  array(
    'name'   => "__destruct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
  ));

EndClass(
);

