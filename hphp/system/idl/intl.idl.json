{
    "preamble": "#include <runtime\/base\/zend\/zend-collator.h>\n#include <unicode\/ucol.h> \/\/ icu\nnamespace HPHP {\nextern const int64_t q_Collator$$SORT_REGULAR;\n}",
    "consts": [
    ],
    "funcs": [
    ],
    "classes": [
        {
            "name": "Normalizer",
            "bases": [
                "Sweepable"
            ],
            "desc": "Normalization is a process that involves transforming characters and sequences of characters into a formally-defined underlying representation. This process is most important when text needs to be compared for sorting and searching, but it is also used when storing text to ensure that the text is stored in a consistent representation.\n\nThe Unicode Consortium has defined a number of normalization forms reflecting the various needs of applications: Normalization Form D (NFD) - Canonical Decomposition Normalization Form C (NFC) - Canonical Decomposition followed by Canonical Composition Normalization Form KD (NFKD) - Compatibility Decomposition Normalization Form KC (NFKC) - Compatibility Decomposition followed by Canonical Composition The different forms are defined in terms of a set of transformations on the text, transformations that are expressed by both an algorithm and a set of data files.",
            "flags": [
            ],
            "funcs": [
                {
                    "name": "__construct",
                    "flags": [
                    ],
                    "return": {
                        "type": null
                    },
                    "args": [
                    ]
                },
                {
                    "name": "isnormalized",
                    "desc": "Procedural style bool normalizer_is_normalized ( string $input [, string $form = Normalizer::FORM_C ] ) Checks if the provided string is already in the specified normalization form.",
                    "flags": [
                        "IsStatic"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "TRUE if normalized, FALSE otherwise or if there an error"
                    },
                    "args": [
                        {
                            "name": "input",
                            "type": "String"
                        },
                        {
                            "name": "form",
                            "type": "Int64",
                            "value": "q_Normalizer$$FORM_C",
                            "desc": "One of the normalization forms."
                        }
                    ]
                },
                {
                    "name": "normalize",
                    "desc": "Procedural style string normalizer_normalize ( string $input [, string $form = Normalizer::FORM_C ] ) Normalizes the input provided and returns the normalized string",
                    "flags": [
                        "IsStatic"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "NULL if an error occurred."
                    },
                    "args": [
                        {
                            "name": "input",
                            "type": "String"
                        },
                        {
                            "name": "form",
                            "type": "Int64",
                            "value": "q_Normalizer$$FORM_C"
                        }
                    ]
                }
            ],
            "consts": [
                {
                    "name": "NONE",
                    "type": "Int64"
                },
                {
                    "name": "FORM_D",
                    "type": "Int64"
                },
                {
                    "name": "NFD",
                    "type": "Int64"
                },
                {
                    "name": "FORM_KD",
                    "type": "Int64"
                },
                {
                    "name": "NFKD",
                    "type": "Int64"
                },
                {
                    "name": "FORM_C",
                    "type": "Int64"
                },
                {
                    "name": "NFC",
                    "type": "Int64"
                },
                {
                    "name": "FORM_KC",
                    "type": "Int64"
                },
                {
                    "name": "NFKC",
                    "type": "Int64"
                }
            ]
        }
    ]
}
