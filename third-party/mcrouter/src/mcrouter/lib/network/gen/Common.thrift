/*
 *  Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 *  This source code is licensed under the MIT license found in the LICENSE
 *  file in the root directory of this source tree.
 *
 */

/*
 *  THIS FILE IS AUTOGENERATED. DO NOT MODIFY IT; ALL CHANGES WILL BE LOST IN
 *  VAIN.
 *
 *  @generated
 */
include "mcrouter/lib/carbon/carbon.thrift"
include "mcrouter/lib/carbon/carbon_result.thrift"
include "thrift/annotation/cpp.thrift"
include "thrift/annotation/thrift.thrift"

cpp_include "<mcrouter/lib/carbon/CarbonProtocolReader.h>"

namespace cpp2 facebook.memcache.thrift
namespace py3 facebook.memcache.thrift
namespace hack memcache

exception CarbonResultBusy {
  @thrift.ExceptionMessage
  1: string message
}

exception CarbonResultRemoteError {
  @thrift.ExceptionMessage
  1: string message
}

exception CarbonResultDeadlineExceeded {
  @thrift.ExceptionMessage
  1: string message
}

exception CarbonResultShutdown {
  @thrift.ExceptionMessage
  1: string message
}

exception CarbonResultTryAgain {
  @thrift.ExceptionMessage
  1: string message
}

exception CarbonResultInvalidRequest {
  @thrift.ExceptionMessage
  1: string message
}

@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McVersionRequest {
  1: carbon.IOBufKey key
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McVersionReply {
  1: carbon_result.Result result
  2: carbon.IOBuf value
  3: string message
  4: i16 appSpecificErrorCode
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McStatsRequest {
  1: carbon.IOBufKey key
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McStatsReply {
  1: carbon_result.Result result
  2: string message
  3: list<string> stats
  4: i16 appSpecificErrorCode
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McShutdownRequest {
  1: carbon.IOBufKey key
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McShutdownReply {
  1: carbon_result.Result result
  2: string message
  3: i16 appSpecificErrorCode
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McQuitRequest {
  1: carbon.IOBufKey key
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McQuitReply {
  1: carbon_result.Result result
  2: string message
  3: i16 appSpecificErrorCode
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McExecRequest {
  1: carbon.IOBufKey key
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct McExecReply {
  1: carbon_result.Result result
  2: string response
  3: string message
  4: i16 appSpecificErrorCode
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct GoAwayAcknowledgement {

}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

",
"cpp.virtual": "1"

  },
}
struct GoAwayRequest {
  1: carbon_result.Result result
  2: string reason
}

