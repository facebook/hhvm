[(Fun
    { fd_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
        ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
        ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
      fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([3:10-32], "\\compound_assign_rshift");
      fd_fun =
      { f_span = [3:1-6:2]; f_readonly_this = None; f_annotation = (); 
        f_readonly_ret = None; f_ret = ((void), (Some ([3:52-56], (Hprim Tvoid))));
        f_params =
        [{ param_annotation = (Vector<int>); param_type_hint = ((Vector<int>), (Some ([3:33-44], (Happly (([3:33-39], "\\HH\\Vector"), [([3:40-43], (Hprim Tint))]))))); 
           param_is_variadic = false; param_pos = [3:45-48]; param_name = "$xs"; 
           param_expr = None; param_readonly = None; param_callconv = Pnormal; 
           param_user_attributes = []; param_visibility = None }
          ];
        f_ctxs = None; f_unsafe_ctxs = None;
        f_body =
        { fb_ast =
          [([5:3-18],
            (Expr
               ((int), [5:3-17],
                (Binop
                   { bop = (Eq (Some Gtgt)); lhs = ((int), [5:3-9], (Array_get (((Vector<int>), [5:3-6], (Lvar ([5:3-6], $xs))), (Some ((int), [5:7-8], (Int "0"))))));
                     rhs = ((float), [5:14-17], (Hole (((float), [5:14-17], (Float "1.0")), (float), (int), Typing))) }))))
            ]
          };
        f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
        f_doc_comment = None };
      fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = [] })