/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/includes/src/includes.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>
#include "thrift/compiler/test/fixtures/includes/gen-cpp2/transitive_types.h"

namespace apache::thrift {
namespace ident {
struct MyIntField;
struct MyTransitiveField;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_MyIntField
#define APACHE_THRIFT_ACCESSOR_MyIntField
APACHE_THRIFT_DEFINE_ACCESSOR(MyIntField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyTransitiveField
#define APACHE_THRIFT_ACCESSOR_MyTransitiveField
APACHE_THRIFT_DEFINE_ACCESSOR(MyTransitiveField);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
// END declare_enums
// BEGIN forward_declare
namespace cpp2 {
class Included;
} // namespace cpp2
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

/** Glean {"file": "thrift/compiler/test/fixtures/includes/src/includes.thrift", "name": "IncludedInt64", "kind": "typedef" } */
using IncludedInt64 = ::std::int64_t;
/** Glean {"file": "thrift/compiler/test/fixtures/includes/src/includes.thrift", "name": "TransitiveFoo", "kind": "typedef" } */
using TransitiveFoo = ::cpp2::Foo;

/** Glean {"file": "thrift/compiler/test/fixtures/includes/src/includes.thrift", "name": "Included", "kind": "struct" } */
class Included final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "includes";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::MyIntField,
    ::apache::thrift::ident::MyTransitiveField
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::struct_t<::cpp2::Foo>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Included;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  Included() :
      __fbthrift_field_MyIntField(static_cast<::std::int64_t>(0)),
      __fbthrift_field_MyTransitiveField(::apache::thrift::detail::make_structured_constant<::cpp2::Foo>(::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::a>(static_cast<::std::int64_t>(2)))) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Included(apache::thrift::FragileConstructor, ::std::int64_t MyIntField__arg, ::cpp2::Foo MyTransitiveField__arg);

  Included(Included&&) = default;

  Included(const Included&) = default;


  Included& operator=(Included&&) = default;

  Included& operator=(const Included&) = default;
 private:
  ::std::int64_t __fbthrift_field_MyIntField;
 private:
  ::cpp2::Foo __fbthrift_field_MyTransitiveField;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const Included&) const;
  bool operator<(const Included&) const;

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyIntField_ref() const& {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyIntField_ref() & {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyIntField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyIntField), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyIntField() const& {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyIntField() & {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyIntField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyIntField), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyTransitiveField" } */
  template <typename..., typename fbthrift_T = ::cpp2::Foo>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyTransitiveField_ref() const& {
    return {this->__fbthrift_field_MyTransitiveField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyTransitiveField" } */
  template <typename..., typename fbthrift_T = ::cpp2::Foo>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyTransitiveField_ref() & {
    return {this->__fbthrift_field_MyTransitiveField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyTransitiveField" } */
  template <typename..., typename fbthrift_T = ::cpp2::Foo>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyTransitiveField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyTransitiveField), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyTransitiveField" } */
  template <typename..., typename fbthrift_T = ::cpp2::Foo>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyTransitiveField() const& {
    return {this->__fbthrift_field_MyTransitiveField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyTransitiveField" } */
  template <typename..., typename fbthrift_T = ::cpp2::Foo>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyTransitiveField() & {
    return {this->__fbthrift_field_MyTransitiveField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyTransitiveField" } */
  template <typename..., typename fbthrift_T = ::cpp2::Foo>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyTransitiveField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyTransitiveField), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyIntField" } */
  [[deprecated("Use `FOO.MyIntField().value()` instead of `FOO.get_MyIntField()`")]]
  ::std::int64_t get_MyIntField() const;

  /** Glean { "field": "MyIntField" } */
  [[deprecated("Use `FOO.MyIntField() = BAR` instead of `FOO.set_MyIntField(BAR)`")]]
  ::std::int64_t& set_MyIntField(::std::int64_t MyIntField_);

  /** Glean { "field": "MyTransitiveField" } */
  [[deprecated("Use `FOO.MyTransitiveField().value()` instead of `FOO.get_MyTransitiveField()`")]]
  const ::cpp2::Foo& get_MyTransitiveField() const&;

  /** Glean { "field": "MyTransitiveField" } */
  [[deprecated("Use `FOO.MyTransitiveField().value()` instead of `FOO.get_MyTransitiveField()`")]]
  ::cpp2::Foo get_MyTransitiveField() &&;

  /** Glean { "field": "MyTransitiveField" } */
  template <typename T_Included_MyTransitiveField_struct_setter = ::cpp2::Foo>
  [[deprecated("Use `FOO.MyTransitiveField() = BAR` instead of `FOO.set_MyTransitiveField(BAR)`")]]
  ::cpp2::Foo& set_MyTransitiveField(T_Included_MyTransitiveField_struct_setter&& MyTransitiveField_) {
    MyTransitiveField_ref() = std::forward<T_Included_MyTransitiveField_struct_setter>(MyTransitiveField_);
    return __fbthrift_field_MyTransitiveField;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Included>;
  friend void swap(Included& a, Included& b);
};

template <class Protocol_>
unsigned long Included::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace cpp2

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::cpp2::Included, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 8109910520001145353;
  static constexpr ::std::string_view definitionKey = {"\x49\xc5\x2f\x6e\x20\x39\xf3\xd0\xbc\xd1\x0c\x34\xf8\x13\xde\xa7", 16};
};
} // namespace apache::thrift::detail
