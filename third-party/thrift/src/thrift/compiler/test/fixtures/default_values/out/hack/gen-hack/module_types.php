<?hh
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

namespace facebook\thrift\compiler\test\fixtures\default_values;

/**
 * Original thrift struct:-
 * TrivialStruct
 */
<<\ThriftTypeInfo(shape('uri' => 'facebook.com/thrift/compiler/test/fixtures/default_values/TrivialStruct'))>>
class TrivialStruct implements \IThriftSyncStruct, \IThriftStructMetadata {
  use \ThriftSerializationTrait;

  const \ThriftStructTypes::TSpec SPEC = dict[
    1 => shape(
      'var' => 'int_value',
      'type' => \TType::I32,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'int_value' => 1,
  ];

  const type TConstructorShape = shape(
    ?'int_value' => ?int,
  );

  const int STRUCTURAL_ID = 7142053658162825934;
  /**
   * Original thrift field:-
   * 1: i32 int_value
   */
  public int $int_value;

  public function __construct(?int $int_value = null)[] {
    $this->int_value = $int_value ?? 0;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'int_value'),
    );
  }

  public function getName()[]: string {
    return 'TrivialStruct';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return \tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.TrivialStruct",
        "fields" => vec[
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "int_value",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

/**
 * Original thrift struct:-
 * StructWithNoCustomDefaultValues
 */
<<\ThriftTypeInfo(shape('uri' => 'facebook.com/thrift/compiler/test/fixtures/default_values/StructWithNoCustomDefaultValues'))>>
class StructWithNoCustomDefaultValues implements \IThriftSyncStruct, \IThriftStructMetadata {
  use \ThriftSerializationTrait;

  const \ThriftStructTypes::TSpec SPEC = dict[
    1 => shape(
      'var' => 'unqualified_integer',
      'type' => \TType::I32,
    ),
    2 => shape(
      'var' => 'optional_integer',
      'type' => \TType::I32,
    ),
    3 => shape(
      'var' => 'required_integer',
      'type' => \TType::I32,
    ),
    4 => shape(
      'var' => 'unqualified_struct',
      'type' => \TType::STRUCT,
      'class' => \facebook\thrift\compiler\test\fixtures\default_values\TrivialStruct::class,
    ),
    5 => shape(
      'var' => 'optional_struct',
      'type' => \TType::STRUCT,
      'class' => \facebook\thrift\compiler\test\fixtures\default_values\TrivialStruct::class,
    ),
    6 => shape(
      'var' => 'required_struct',
      'type' => \TType::STRUCT,
      'class' => \facebook\thrift\compiler\test\fixtures\default_values\TrivialStruct::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'unqualified_integer' => 1,
    'optional_integer' => 2,
    'required_integer' => 3,
    'unqualified_struct' => 4,
    'optional_struct' => 5,
    'required_struct' => 6,
  ];

  const type TConstructorShape = shape(
    ?'unqualified_integer' => ?int,
    ?'optional_integer' => ?int,
    ?'required_integer' => ?int,
    ?'unqualified_struct' => ?\facebook\thrift\compiler\test\fixtures\default_values\TrivialStruct,
    ?'optional_struct' => ?\facebook\thrift\compiler\test\fixtures\default_values\TrivialStruct,
    ?'required_struct' => ?\facebook\thrift\compiler\test\fixtures\default_values\TrivialStruct,
  );

  const int STRUCTURAL_ID = 1916556515070891094;
  /**
   * Original thrift field:-
   * 1: i32 unqualified_integer
   */
  public int $unqualified_integer;
  /**
   * Original thrift field:-
   * 2: i32 optional_integer
   */
  public ?int $optional_integer;
  /**
   * Original thrift field:-
   * 3: i32 required_integer
   */
  public int $required_integer;
  /**
   * Original thrift field:-
   * 4: module.TrivialStruct unqualified_struct
   */
  public ?\facebook\thrift\compiler\test\fixtures\default_values\TrivialStruct $unqualified_struct;
  /**
   * Original thrift field:-
   * 5: module.TrivialStruct optional_struct
   */
  public ?\facebook\thrift\compiler\test\fixtures\default_values\TrivialStruct $optional_struct;
  /**
   * Original thrift field:-
   * 6: module.TrivialStruct required_struct
   */
  public ?\facebook\thrift\compiler\test\fixtures\default_values\TrivialStruct $required_struct;

  public function __construct(?int $unqualified_integer = null, ?int $optional_integer = null, ?int $required_integer = null, ?\facebook\thrift\compiler\test\fixtures\default_values\TrivialStruct $unqualified_struct = null, ?\facebook\thrift\compiler\test\fixtures\default_values\TrivialStruct $optional_struct = null, ?\facebook\thrift\compiler\test\fixtures\default_values\TrivialStruct $required_struct = null)[] {
    $this->unqualified_integer = $unqualified_integer ?? 0;
    $this->optional_integer = $optional_integer;
    $this->required_integer = $required_integer ?? 0;
    $this->unqualified_struct = $unqualified_struct;
    $this->optional_struct = $optional_struct;
    $this->required_struct = $required_struct;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'unqualified_integer'),
      Shapes::idx($shape, 'optional_integer'),
      Shapes::idx($shape, 'required_integer'),
      Shapes::idx($shape, 'unqualified_struct'),
      Shapes::idx($shape, 'optional_struct'),
      Shapes::idx($shape, 'required_struct'),
    );
  }

  public function getName()[]: string {
    return 'StructWithNoCustomDefaultValues';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return \tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.StructWithNoCustomDefaultValues",
        "fields" => vec[
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "unqualified_integer",
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "optional_integer",
              "is_optional" => true,
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "required_integer",
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => \tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.TrivialStruct",
                    )
                  ),
                )
              ),
              "name" => "unqualified_struct",
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 5,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => \tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.TrivialStruct",
                    )
                  ),
                )
              ),
              "name" => "optional_struct",
              "is_optional" => true,
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 6,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => \tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.TrivialStruct",
                    )
                  ),
                )
              ),
              "name" => "required_struct",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

/**
 * Original thrift struct:-
 * StructWithCustomDefaultValues
 */
<<\ThriftTypeInfo(shape('uri' => 'facebook.com/thrift/compiler/test/fixtures/default_values/StructWithCustomDefaultValues'))>>
class StructWithCustomDefaultValues implements \IThriftSyncStruct, \IThriftStructMetadata {
  use \ThriftSerializationTrait;

  const \ThriftStructTypes::TSpec SPEC = dict[
    1 => shape(
      'var' => 'unqualified_integer',
      'type' => \TType::I32,
    ),
    2 => shape(
      'var' => 'optional_integer',
      'type' => \TType::I32,
    ),
    3 => shape(
      'var' => 'required_integer',
      'type' => \TType::I32,
    ),
    4 => shape(
      'var' => 'unqualified_struct',
      'type' => \TType::STRUCT,
      'class' => \facebook\thrift\compiler\test\fixtures\default_values\TrivialStruct::class,
    ),
    5 => shape(
      'var' => 'optional_struct',
      'type' => \TType::STRUCT,
      'class' => \facebook\thrift\compiler\test\fixtures\default_values\TrivialStruct::class,
    ),
    6 => shape(
      'var' => 'required_struct',
      'type' => \TType::STRUCT,
      'class' => \facebook\thrift\compiler\test\fixtures\default_values\TrivialStruct::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'unqualified_integer' => 1,
    'optional_integer' => 2,
    'required_integer' => 3,
    'unqualified_struct' => 4,
    'optional_struct' => 5,
    'required_struct' => 6,
  ];

  const type TConstructorShape = shape(
    ?'unqualified_integer' => ?int,
    ?'optional_integer' => ?int,
    ?'required_integer' => ?int,
    ?'unqualified_struct' => ?\facebook\thrift\compiler\test\fixtures\default_values\TrivialStruct,
    ?'optional_struct' => ?\facebook\thrift\compiler\test\fixtures\default_values\TrivialStruct,
    ?'required_struct' => ?\facebook\thrift\compiler\test\fixtures\default_values\TrivialStruct,
  );

  const int STRUCTURAL_ID = 1916556515070891094;
  /**
   * Original thrift field:-
   * 1: i32 unqualified_integer
   */
  public int $unqualified_integer;
  /**
   * Original thrift field:-
   * 2: i32 optional_integer
   */
  public int $optional_integer;
  /**
   * Original thrift field:-
   * 3: i32 required_integer
   */
  public int $required_integer;
  /**
   * Original thrift field:-
   * 4: module.TrivialStruct unqualified_struct
   */
  public ?\facebook\thrift\compiler\test\fixtures\default_values\TrivialStruct $unqualified_struct;
  /**
   * Original thrift field:-
   * 5: module.TrivialStruct optional_struct
   */
  public ?\facebook\thrift\compiler\test\fixtures\default_values\TrivialStruct $optional_struct;
  /**
   * Original thrift field:-
   * 6: module.TrivialStruct required_struct
   */
  public ?\facebook\thrift\compiler\test\fixtures\default_values\TrivialStruct $required_struct;

  public function __construct(?int $unqualified_integer = null, ?int $optional_integer = null, ?int $required_integer = null, ?\facebook\thrift\compiler\test\fixtures\default_values\TrivialStruct $unqualified_struct = null, ?\facebook\thrift\compiler\test\fixtures\default_values\TrivialStruct $optional_struct = null, ?\facebook\thrift\compiler\test\fixtures\default_values\TrivialStruct $required_struct = null)[] {
    $this->unqualified_integer = $unqualified_integer ?? 42;
    $this->optional_integer = $optional_integer ?? 43;
    $this->required_integer = $required_integer ?? 44;
    $this->unqualified_struct = $unqualified_struct;
    $this->optional_struct = $optional_struct;
    $this->required_struct = $required_struct;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'unqualified_integer'),
      Shapes::idx($shape, 'optional_integer'),
      Shapes::idx($shape, 'required_integer'),
      Shapes::idx($shape, 'unqualified_struct'),
      Shapes::idx($shape, 'optional_struct'),
      Shapes::idx($shape, 'required_struct'),
    );
  }

  public function getName()[]: string {
    return 'StructWithCustomDefaultValues';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return \tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.StructWithCustomDefaultValues",
        "fields" => vec[
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "unqualified_integer",
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "optional_integer",
              "is_optional" => true,
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "required_integer",
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => \tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.TrivialStruct",
                    )
                  ),
                )
              ),
              "name" => "unqualified_struct",
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 5,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => \tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.TrivialStruct",
                    )
                  ),
                )
              ),
              "name" => "optional_struct",
              "is_optional" => true,
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 6,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => \tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.TrivialStruct",
                    )
                  ),
                )
              ),
              "name" => "required_struct",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
        'optional_integer' => shape(
          'field' => dict[
            '\facebook\thrift\annotation\AllowUnsafeOptionalCustomDefaultValue' => \facebook\thrift\annotation\AllowUnsafeOptionalCustomDefaultValue::fromShape(
              shape(
              )
            ),
          ],
          'type' => dict[],
        ),
        'optional_struct' => shape(
          'field' => dict[
            '\facebook\thrift\annotation\AllowUnsafeOptionalCustomDefaultValue' => \facebook\thrift\annotation\AllowUnsafeOptionalCustomDefaultValue::fromShape(
              shape(
              )
            ),
          ],
          'type' => dict[],
        ),
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

