Parsed decls:

{ Direct_decl_parser.classes =
  { "\\C" ->
    { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
      sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cnormal;
      sc_name = ([3:7-8], "\\C"); sc_tparams = []; sc_where_constraints = [];
      sc_extends = []; sc_uses = []; sc_xhp_attr_uses = [];
      sc_req_extends = []; sc_req_implements = []; sc_implements = [];
      sc_consts =
      [{ Shallow_decl_defs.scc_abstract = false;
         scc_name = ([4:13-27], "MY_DECIMAL_INT");
         scc_type =
         (Rhint (root|class_const_int_literals.php line 4, characters 9-11),
          (Tprim Tint))
         };
        { Shallow_decl_defs.scc_abstract = false;
          scc_name = ([5:13-25], "MY_OCTAL_INT");
          scc_type =
          (Rhint (root|class_const_int_literals.php line 5, characters 9-11),
           (Tprim Tint))
          };
        { Shallow_decl_defs.scc_abstract = false;
          scc_name = ([6:13-23], "MY_HEX_INT");
          scc_type =
          (Rhint (root|class_const_int_literals.php line 6, characters 9-11),
           (Tprim Tint))
          };
        { Shallow_decl_defs.scc_abstract = false;
          scc_name = ([7:13-26], "MY_BINARY_INT");
          scc_type =
          (Rhint (root|class_const_int_literals.php line 7, characters 9-11),
           (Tprim Tint))
          }
        ];
      sc_typeconsts = []; sc_pu_enums = []; sc_props = []; sc_sprops = [];
      sc_constructor = None; sc_static_methods = []; sc_methods = [];
      sc_user_attributes = []; sc_enum_type = None; sc_decl_errors = <opaque>
      } };
  funs = {}; typedefs = {}; consts = {} }

They matched!
