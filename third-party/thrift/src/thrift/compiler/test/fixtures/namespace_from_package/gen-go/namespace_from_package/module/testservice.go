// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package module

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

type TestService interface {
  // Parameters:
  //  - Int1
  Init(int1 int64) (_r int64, err error)
}

type TestServiceClientInterface interface {
  thrift.ClientInterface
  // Parameters:
  //  - Int1
  Init(int1 int64) (_r int64, err error)
}

type TestServiceClient struct {
  TestServiceClientInterface
  CC thrift.ClientConn
}

func(client *TestServiceClient) Open() error {
  return client.CC.Open()
}

func(client *TestServiceClient) Close() error {
  return client.CC.Close()
}

func(client *TestServiceClient) IsOpen() bool {
  return client.CC.IsOpen()
}

func NewTestServiceClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *TestServiceClient {
  return &TestServiceClient{ CC: thrift.NewClientConn(t, f) }
}

func NewTestServiceClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *TestServiceClient {
  return &TestServiceClient{ CC: thrift.NewClientConnWithProtocols(t, iprot, oprot) }
}

func NewTestServiceClientProtocol(prot thrift.Protocol) *TestServiceClient {
  return NewTestServiceClient(prot.Transport(), prot, prot)
}

// Parameters:
//  - Int1
func (p *TestServiceClient) Init(int1 int64) (_r int64, err error) {
  args := TestServiceInitArgs{
    Int1 : int1,
  }
  err = p.CC.SendMsg("init", &args, thrift.CALL)
  if err != nil { return }
  return p.recvInit()
}


func (p *TestServiceClient) recvInit() (value int64, err error) {
  var __result TestServiceInitResult
  err = p.CC.RecvMsg("init", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}


type TestServiceThreadsafeClient struct {
  TestServiceClientInterface
  CC thrift.ClientConn
  Mu sync.Mutex
}

func(client *TestServiceThreadsafeClient) Open() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Open()
}

func(client *TestServiceThreadsafeClient) Close() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Close()
}

func(client *TestServiceThreadsafeClient) IsOpen() bool {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.IsOpen()
}

func NewTestServiceThreadsafeClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *TestServiceThreadsafeClient {
  return &TestServiceThreadsafeClient{ CC: thrift.NewClientConn(t, f) }
}

func NewTestServiceThreadsafeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *TestServiceThreadsafeClient {
  return &TestServiceThreadsafeClient{ CC: thrift.NewClientConnWithProtocols(t, iprot, oprot) }
}

func NewTestServiceThreadsafeClientProtocol(prot thrift.Protocol) *TestServiceThreadsafeClient {
  return NewTestServiceThreadsafeClient(prot.Transport(), prot, prot)
}

// Parameters:
//  - Int1
func (p *TestServiceThreadsafeClient) Init(int1 int64) (_r int64, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := TestServiceInitArgs{
    Int1 : int1,
  }
  err = p.CC.SendMsg("init", &args, thrift.CALL)
  if err != nil { return }
  return p.recvInit()
}


func (p *TestServiceThreadsafeClient) recvInit() (value int64, err error) {
  var __result TestServiceInitResult
  err = p.CC.RecvMsg("init", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}


type TestServiceChannelClient struct {
  RequestChannel thrift.RequestChannel
}

func (c *TestServiceChannelClient) Close() error {
  return c.RequestChannel.Close()
}

func (c *TestServiceChannelClient) IsOpen() bool {
  return c.RequestChannel.IsOpen()
}

func (c *TestServiceChannelClient) Open() error {
  return c.RequestChannel.Open()
}

func NewTestServiceChannelClient(channel thrift.RequestChannel) *TestServiceChannelClient {
  return &TestServiceChannelClient{RequestChannel: channel}
}

// Parameters:
//  - Int1
func (p *TestServiceChannelClient) Init(ctx context.Context, int1 int64) (_r int64, err error) {
  args := TestServiceInitArgs{
    Int1 : int1,
  }
  var __result TestServiceInitResult
  err = p.RequestChannel.Call(ctx, "init", &args, &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}


type TestServiceProcessor struct {
  processorMap map[string]thrift.ProcessorFunction
  functionServiceMap map[string]string
  handler TestService
}

func (p *TestServiceProcessor) AddToProcessorMap(key string, processor thrift.ProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TestServiceProcessor) AddToFunctionServiceMap(key, service string) {
  p.functionServiceMap[key] = service
}

func (p *TestServiceProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction, err error) {
  if processor, ok := p.processorMap[key]; ok {
    return processor, nil
  }
  return nil, nil // generic error message will be sent
}

func (p *TestServiceProcessor) ProcessorMap() map[string]thrift.ProcessorFunction {
  return p.processorMap
}

func (p *TestServiceProcessor) FunctionServiceMap() map[string]string {
  return p.functionServiceMap
}

func NewTestServiceProcessor(handler TestService) *TestServiceProcessor {
  self0 := &TestServiceProcessor{handler:handler, processorMap:make(map[string]thrift.ProcessorFunction), functionServiceMap:make(map[string]string)}
  self0.processorMap["init"] = &testServiceProcessorInit{handler:handler}
  self0.functionServiceMap["init"] = "TestService"
  return self0
}

type testServiceProcessorInit struct {
  handler TestService
}

func (p *TestServiceInitResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *testServiceProcessorInit) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := TestServiceInitArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *testServiceProcessorInit) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("init", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *testServiceProcessorInit) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*TestServiceInitArgs)
  var __result TestServiceInitResult
  if retval, err := p.handler.Init(args.Int1); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing init: " + err.Error(), err)
      return x, x
    }
  } else {
    __result.Success = &retval
  }
  return &__result, nil
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Int1
type TestServiceInitArgs struct {
  thrift.IRequest
  Int1 int64 `thrift:"int1,1" db:"int1" json:"int1"`
}

func NewTestServiceInitArgs() *TestServiceInitArgs {
  return &TestServiceInitArgs{}
}


func (p *TestServiceInitArgs) GetInt1() int64 {
  return p.Int1
}
type TestServiceInitArgsBuilder struct {
  obj *TestServiceInitArgs
}

func NewTestServiceInitArgsBuilder() *TestServiceInitArgsBuilder{
  return &TestServiceInitArgsBuilder{
    obj: NewTestServiceInitArgs(),
  }
}

func (p TestServiceInitArgsBuilder) Emit() *TestServiceInitArgs{
  return &TestServiceInitArgs{
    Int1: p.obj.Int1,
  }
}

func (t *TestServiceInitArgsBuilder) Int1(int1 int64) *TestServiceInitArgsBuilder {
  t.obj.Int1 = int1
  return t
}

func (t *TestServiceInitArgs) SetInt1(int1 int64) *TestServiceInitArgs {
  t.Int1 = int1
  return t
}

func (p *TestServiceInitArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TestServiceInitArgs)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Int1 = v
  }
  return nil
}

func (p *TestServiceInitArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("init_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TestServiceInitArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("int1", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:int1: ", p), err) }
  if err := oprot.WriteI64(int64(p.Int1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.int1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:int1: ", p), err) }
  return err
}

func (p *TestServiceInitArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  int1Val := fmt.Sprintf("%v", p.Int1)
  return fmt.Sprintf("TestServiceInitArgs({Int1:%s})", int1Val)
}

// Attributes:
//  - Success
type TestServiceInitResult struct {
  thrift.IResponse
  Success *int64 `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewTestServiceInitResult() *TestServiceInitResult {
  return &TestServiceInitResult{}
}

var TestServiceInitResult_Success_DEFAULT int64
func (p *TestServiceInitResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TestServiceInitResult_Success_DEFAULT
  }
  return *p.Success
}
func (p *TestServiceInitResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type TestServiceInitResultBuilder struct {
  obj *TestServiceInitResult
}

func NewTestServiceInitResultBuilder() *TestServiceInitResultBuilder{
  return &TestServiceInitResultBuilder{
    obj: NewTestServiceInitResult(),
  }
}

func (p TestServiceInitResultBuilder) Emit() *TestServiceInitResult{
  return &TestServiceInitResult{
    Success: p.obj.Success,
  }
}

func (t *TestServiceInitResultBuilder) Success(success *int64) *TestServiceInitResultBuilder {
  t.obj.Success = success
  return t
}

func (t *TestServiceInitResult) SetSuccess(success *int64) *TestServiceInitResult {
  t.Success = success
  return t
}

func (p *TestServiceInitResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TestServiceInitResult)  ReadField0(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
  } else {
    p.Success = &v
  }
  return nil
}

func (p *TestServiceInitResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("init_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TestServiceInitResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TestServiceInitResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", *p.Success)
  }
  return fmt.Sprintf("TestServiceInitResult({Success:%s})", successVal)
}


