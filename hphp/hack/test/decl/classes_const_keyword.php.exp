Parsed decls:

{ Direct_decl_parser.classes =
  { "\\AbstractConsts" ->
    { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
      sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cabstract;
      sc_name = ([12:16-30], "\\AbstractConsts"); sc_tparams = [];
      sc_where_constraints = []; sc_extends = []; sc_uses = [];
      sc_xhp_attr_uses = []; sc_req_extends = []; sc_req_implements = [];
      sc_implements = [];
      sc_consts =
      [{ Shallow_decl_defs.scc_abstract = true;
         scc_name = ([13:22-35], "CABSTRACT_INT");
         scc_type =
         (Rhint (root|classes_const_keyword.php line 13, characters 18-20),
          (Tprim Tint))
         }
        ];
      sc_typeconsts = []; sc_pu_enums = []; sc_props = []; sc_sprops = [];
      sc_constructor = None; sc_static_methods = []; sc_methods = [];
      sc_user_attributes = []; sc_enum_type = None; sc_decl_errors = <opaque>
      };
    "\\ArrayConsts" ->
    { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
      sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cnormal;
      sc_name = ([21:7-18], "\\ArrayConsts"); sc_tparams = [];
      sc_where_constraints = []; sc_extends = []; sc_uses = [];
      sc_xhp_attr_uses = []; sc_req_extends = []; sc_req_implements = [];
      sc_implements = [];
      sc_consts =
      [{ Shallow_decl_defs.scc_abstract = false;
         scc_name = ([22:29-36], "CDARRAY");
         scc_type =
         (Rhint (root|classes_const_keyword.php line 22, characters 9-27),
          (Tdarray (
             (Rhint (root|classes_const_keyword.php line 22, characters 16-21),
              (Tprim Tstring)),
             (Rhint (root|classes_const_keyword.php line 22, characters 24-26),
              (Tprim Tint))
             )))
         };
        { Shallow_decl_defs.scc_abstract = false;
          scc_name = ([23:24-31], "CKEYSET");
          scc_type =
          (Rhint (root|classes_const_keyword.php line 23, characters 9-22),
           (Tapply (([23:9-15], "\\HH\\keyset"),
              [(Rhint (root|classes_const_keyword.php line 23, characters 16-21),
                (Tprim Tstring))]
              )))
          };
        { Shallow_decl_defs.scc_abstract = false;
          scc_name = ([24:27-44], "CCLASSNAME_KEYSET");
          scc_type =
          (Rhint (root|classes_const_keyword.php line 24, characters 9-25),
           (Tapply (([24:9-15], "\\HH\\keyset"),
              [(Rhint (root|classes_const_keyword.php line 24, characters 16-24),
                (Tprim Tstring))]
              )))
          };
        { Shallow_decl_defs.scc_abstract = false;
          scc_name = ([25:24-31], "CVARRAY");
          scc_type =
          (Rhint (root|classes_const_keyword.php line 25, characters 9-22),
           (Tvarray
              (Rhint (root|classes_const_keyword.php line 25, characters 16-21),
               (Tprim Tstring))))
          }
        ];
      sc_typeconsts = []; sc_pu_enums = []; sc_props = []; sc_sprops = [];
      sc_constructor = None; sc_static_methods = []; sc_methods = [];
      sc_user_attributes = []; sc_enum_type = None; sc_decl_errors = <opaque>
      };
    "\\BinopConsts" ->
    { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
      sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cnormal;
      sc_name = ([28:7-18], "\\BinopConsts"); sc_tparams = [];
      sc_where_constraints = []; sc_extends = []; sc_uses = [];
      sc_xhp_attr_uses = []; sc_req_extends = []; sc_req_implements = [];
      sc_implements = [];
      sc_consts =
      [{ Shallow_decl_defs.scc_abstract = false;
         scc_name = ([29:13-17], "CINT");
         scc_type =
         (Rhint (root|classes_const_keyword.php line 29, characters 9-11),
          (Tprim Tint))
         };
        { Shallow_decl_defs.scc_abstract = false;
          scc_name = ([30:15-21], "CFLOAT");
          scc_type =
          (Rhint (root|classes_const_keyword.php line 30, characters 9-13),
           (Tprim Tfloat))
          };
        { Shallow_decl_defs.scc_abstract = false;
          scc_name = ([31:16-23], "CSTRING");
          scc_type =
          (Rhint (root|classes_const_keyword.php line 31, characters 9-14),
           (Tprim Tstring))
          };
        { Shallow_decl_defs.scc_abstract = false;
          scc_name = ([32:14-19], "CBOOL");
          scc_type =
          (Rhint (root|classes_const_keyword.php line 32, characters 9-12),
           (Tprim Tbool))
          }
        ];
      sc_typeconsts = []; sc_pu_enums = []; sc_props = []; sc_sprops = [];
      sc_constructor = None; sc_static_methods = []; sc_methods = [];
      sc_user_attributes = []; sc_enum_type = None; sc_decl_errors = <opaque>
      };
    "\\ClassnameConsts" ->
    { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
      sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cnormal;
      sc_name = ([44:7-22], "\\ClassnameConsts"); sc_tparams = [];
      sc_where_constraints = []; sc_extends = []; sc_uses = [];
      sc_xhp_attr_uses = []; sc_req_extends = []; sc_req_implements = [];
      sc_implements = [];
      sc_consts =
      [{ Shallow_decl_defs.scc_abstract = false;
         scc_name = ([45:32-42], "CCLASSNAME");
         scc_type =
         (Rhint (root|classes_const_keyword.php line 45, characters 9-30),
          (Tapply (([45:9-18], "\\HH\\classname"),
             [(Rhint (root|classes_const_keyword.php line 45, characters 19-29),
               (Tapply (([45:19-30], "\\TupleConsts"), [])))]
             )))
         };
        { Shallow_decl_defs.scc_abstract = false;
          scc_name = ([46:36-47], "CCLASSNAME2");
          scc_type =
          (Rhint (root|classes_const_keyword.php line 46, characters 9-34),
           (Tapply (([46:9-18], "\\HH\\classname"),
              [(Rhint (root|classes_const_keyword.php line 46, characters 19-33),
                (Tapply (([46:19-34], "\\ClassnameConsts"), [])))]
              )))
          }
        ];
      sc_typeconsts = []; sc_pu_enums = []; sc_props = []; sc_sprops = [];
      sc_constructor = None; sc_static_methods = []; sc_methods = [];
      sc_user_attributes = []; sc_enum_type = None; sc_decl_errors = <opaque>
      };
    "\\DictConsts" ->
    { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
      sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cnormal;
      sc_name = ([4:7-17], "\\DictConsts"); sc_tparams = [];
      sc_where_constraints = []; sc_extends = []; sc_uses = [];
      sc_xhp_attr_uses = []; sc_req_extends = []; sc_req_implements = [];
      sc_implements = [];
      sc_consts =
      [{ Shallow_decl_defs.scc_abstract = false;
         scc_name = ([5:27-32], "CDICT");
         scc_type =
         (Rhint (root|classes_const_keyword.php line 5, characters 9-25),
          (Tapply (([5:9-13], "\\HH\\dict"),
             [(Rhint (root|classes_const_keyword.php line 5, characters 14-16),
               (Tprim Tint));
               (Rhint (root|classes_const_keyword.php line 5, characters 19-24),
                (Tprim Tstring))
               ]
             )))
         };
        { Shallow_decl_defs.scc_abstract = false;
          scc_name = ([6:38-50], "CNESTED_DICT");
          scc_type =
          (Rhint (root|classes_const_keyword.php line 6, characters 9-36),
           (Tapply (([6:9-13], "\\HH\\dict"),
              [(Rhint (root|classes_const_keyword.php line 6, characters 14-16),
                (Tprim Tint));
                (Rhint (root|classes_const_keyword.php line 6, characters 19-35),
                 (Tapply (([6:19-23], "\\HH\\dict"),
                    [(Rhint (root|classes_const_keyword.php line 6, characters 24-26),
                      (Tprim Tint));
                      (Rhint (root|classes_const_keyword.php line 6, characters 29-34),
                       (Tprim Tstring))
                      ]
                    )))
                ]
              )))
          };
        { Shallow_decl_defs.scc_abstract = false;
          scc_name = ([8:37-55], "CNESTED_DICT_FLOAT");
          scc_type =
          (Rhint (root|classes_const_keyword.php line 8, characters 9-35),
           (Tapply (([8:9-13], "\\HH\\dict"),
              [(Rhint (root|classes_const_keyword.php line 8, characters 14-16),
                (Tprim Tint));
                (Rhint (root|classes_const_keyword.php line 8, characters 19-34),
                 (Tapply (([8:19-23], "\\HH\\dict"),
                    [(Rhint (root|classes_const_keyword.php line 8, characters 24-26),
                      (Tprim Tint));
                      (Rhint (root|classes_const_keyword.php line 8, characters 29-33),
                       (Tprim Tfloat))
                      ]
                    )))
                ]
              )))
          }
        ];
      sc_typeconsts = []; sc_pu_enums = []; sc_props = []; sc_sprops = [];
      sc_constructor = None; sc_static_methods = []; sc_methods = [];
      sc_user_attributes = []; sc_enum_type = None; sc_decl_errors = <opaque>
      };
    "\\ShapeConsts" ->
    { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
      sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cnormal;
      sc_name = ([35:7-18], "\\ShapeConsts"); sc_tparams = [];
      sc_where_constraints = []; sc_extends = []; sc_uses = [];
      sc_xhp_attr_uses = []; sc_req_extends = []; sc_req_implements = [];
      sc_implements = [];
      sc_consts =
      [{ Shallow_decl_defs.scc_abstract = false;
         scc_name = ([36:47-53], "CSHAPE");
         scc_type =
         (Rhint (root|classes_const_keyword.php line 36, characters 9-45),
          (Tshape (Open_shape,
             { (SFlit_str ([36:15-18], "a")) ->
               { sft_optional = false;
                 sft_ty =
                 (Rhint (root|classes_const_keyword.php line 36, characters 22-24),
                  (Tprim Tint))
                 };
               (SFlit_str ([36:27-30], "b")) ->
               { sft_optional = false;
                 sft_ty =
                 (Rhint (root|classes_const_keyword.php line 36, characters 34-39),
                  (Tprim Tstring))
                 } }
             )))
         }
        ];
      sc_typeconsts = []; sc_pu_enums = []; sc_props = []; sc_sprops = [];
      sc_constructor = None; sc_static_methods = []; sc_methods = [];
      sc_user_attributes = []; sc_enum_type = None; sc_decl_errors = <opaque>
      };
    "\\TupleConsts" ->
    { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
      sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cnormal;
      sc_name = ([40:7-18], "\\TupleConsts"); sc_tparams = [];
      sc_where_constraints = []; sc_extends = []; sc_uses = [];
      sc_xhp_attr_uses = []; sc_req_extends = []; sc_req_implements = [];
      sc_implements = [];
      sc_consts =
      [{ Shallow_decl_defs.scc_abstract = false;
         scc_name = ([41:33-40], "COPTION");
         scc_type =
         (Rhint (root|classes_const_keyword.php line 41, characters 9-31),
          (Ttuple
             [(Rhint (root|classes_const_keyword.php line 41, characters 10-12),
               (Tprim Tint));
               (Rhint (root|classes_const_keyword.php line 41, characters 15-30),
                (Toption
                   (Rhint (root|classes_const_keyword.php line 41, characters 16-30),
                    (Ttuple
                       [(Rhint (root|classes_const_keyword.php line 41, characters 17-22),
                         (Tprim Tstring));
                         (Rhint (root|classes_const_keyword.php line 41, characters 25-29),
                          (Tprim Tfloat))
                         ]))))
               ]))
         }
        ];
      sc_typeconsts = []; sc_pu_enums = []; sc_props = []; sc_sprops = [];
      sc_constructor = None; sc_static_methods = []; sc_methods = [];
      sc_user_attributes = []; sc_enum_type = None; sc_decl_errors = <opaque>
      };
    "\\VecConsts" ->
    { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
      sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cnormal;
      sc_name = ([16:7-16], "\\VecConsts"); sc_tparams = [];
      sc_where_constraints = []; sc_extends = []; sc_uses = [];
      sc_xhp_attr_uses = []; sc_req_extends = []; sc_req_implements = [];
      sc_implements = [];
      sc_consts =
      [{ Shallow_decl_defs.scc_abstract = false;
         scc_name = ([17:18-22], "CVEC");
         scc_type =
         (Rhint (root|classes_const_keyword.php line 17, characters 9-16),
          (Tapply (([17:9-12], "\\HH\\vec"),
             [(Rhint (root|classes_const_keyword.php line 17, characters 13-15),
               (Tprim Tint))]
             )))
         };
        { Shallow_decl_defs.scc_abstract = false;
          scc_name = ([18:23-34], "CNESTED_VEC");
          scc_type =
          (Rhint (root|classes_const_keyword.php line 18, characters 9-21),
           (Tapply (([18:9-12], "\\HH\\vec"),
              [(Rhint (root|classes_const_keyword.php line 18, characters 13-20),
                (Tapply (([18:13-16], "\\HH\\vec"),
                   [(Rhint (root|classes_const_keyword.php line 18, characters 17-19),
                     (Tprim Tint))]
                   )))
                ]
              )))
          }
        ];
      sc_typeconsts = []; sc_pu_enums = []; sc_props = []; sc_sprops = [];
      sc_constructor = None; sc_static_methods = []; sc_methods = [];
      sc_user_attributes = []; sc_enum_type = None; sc_decl_errors = <opaque>
      } };
  funs = {}; typedefs = {}; consts = {} }

They matched!
