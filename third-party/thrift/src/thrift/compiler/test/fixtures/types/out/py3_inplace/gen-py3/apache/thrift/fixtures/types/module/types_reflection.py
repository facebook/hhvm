#
# Autogenerated by Thrift for thrift/compiler/test/fixtures/types/src/module.thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#


import folly.iobuf as _fbthrift_iobuf

from thrift.py3.reflection import (
    NumberType as __NumberType,
    StructType as __StructType,
    Qualifier as __Qualifier,
    StructSpec as __StructSpec,
    ListSpec as __ListSpec,
    SetSpec as __SetSpec,
    MapSpec as __MapSpec,
    FieldSpec as __FieldSpec,
)

import apache.thrift.fixtures.types.included.types as _apache_thrift_fixtures_types_included_types

import apache.thrift.fixtures.types.module.types as _apache_thrift_fixtures_types_module_types



def get_reflection__empty_struct() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="empty_struct",
        kind=__StructType.STRUCT,
        annotations={
        },
    )
    return spec
def get_reflection__decorated_struct() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="decorated_struct",
        kind=__StructType.STRUCT,
        annotations={
            """cpp.declare_equal_to""": """1""",
            """cpp.declare_hash""": """1""",
        },
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=1,
            name="field",
            py_name="field",
            type=str,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    return spec
def get_reflection__ContainerStruct() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="ContainerStruct",
        kind=__StructType.STRUCT,
        annotations={
        },
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=12,
            name="fieldA",
            py_name="fieldA",
            type=_apache_thrift_fixtures_types_module_types.List__i32,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=2,
            name="fieldB",
            py_name="fieldB",
            type=_apache_thrift_fixtures_types_module_types.std_list__List__i32,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=3,
            name="fieldC",
            py_name="fieldC",
            type=_apache_thrift_fixtures_types_module_types.std_deque__List__i32,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=4,
            name="fieldD",
            py_name="fieldD",
            type=_apache_thrift_fixtures_types_module_types.folly_fbvector__List__i32,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=5,
            name="fieldE",
            py_name="fieldE",
            type=_apache_thrift_fixtures_types_module_types.folly_small_vector__List__i32,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=6,
            name="fieldF",
            py_name="fieldF",
            type=_apache_thrift_fixtures_types_module_types.folly_sorted_vector_set__Set__i32,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=7,
            name="fieldG",
            py_name="fieldG",
            type=_apache_thrift_fixtures_types_module_types.Map__i32_string,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=8,
            name="fieldH",
            py_name="fieldH",
            type=_apache_thrift_fixtures_types_module_types.std_unordered_map__Map__i32_string,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    return spec
def get_reflection__CppTypeStruct() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="CppTypeStruct",
        kind=__StructType.STRUCT,
        annotations={
        },
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=1,
            name="fieldA",
            py_name="fieldA",
            type=_apache_thrift_fixtures_types_module_types.std_list_int32_t__List__i32,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    return spec
def get_reflection__VirtualStruct() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="VirtualStruct",
        kind=__StructType.STRUCT,
        annotations={
            """cpp.virtual""": """1""",
        },
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=1,
            name="MyIntField",
            py_name="MyIntField",
            type=int,
            kind=__NumberType.I64,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    return spec
def get_reflection__MyStructWithForwardRefEnum() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="MyStructWithForwardRefEnum",
        kind=__StructType.STRUCT,
        annotations={
        },
    )
    defaults = _apache_thrift_fixtures_types_module_types.MyStructWithForwardRefEnum()
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=1,
            name="a",
            py_name="a",
            type=_apache_thrift_fixtures_types_module_types.MyForwardRefEnum,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.UNQUALIFIED,
            default=defaults.a,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=2,
            name="b",
            py_name="b",
            type=_apache_thrift_fixtures_types_module_types.MyForwardRefEnum,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.UNQUALIFIED,
            default=defaults.b,
            annotations={
            },
        ),
    )
    return spec
def get_reflection__TrivialNumeric() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="TrivialNumeric",
        kind=__StructType.STRUCT,
        annotations={
        },
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=1,
            name="a",
            py_name="a",
            type=int,
            kind=__NumberType.I32,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=2,
            name="b",
            py_name="b",
            type=bool,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    return spec
def get_reflection__TrivialNestedWithDefault() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="TrivialNestedWithDefault",
        kind=__StructType.STRUCT,
        annotations={
        },
    )
    defaults = _apache_thrift_fixtures_types_module_types.TrivialNestedWithDefault()
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=1,
            name="z",
            py_name="z",
            type=int,
            kind=__NumberType.I32,
            qualifier=__Qualifier.UNQUALIFIED,
            default=defaults.z,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=2,
            name="n",
            py_name="n",
            type=_apache_thrift_fixtures_types_module_types.TrivialNumeric,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.UNQUALIFIED,
            default=defaults.n,
            annotations={
            },
        ),
    )
    return spec
def get_reflection__ComplexString() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="ComplexString",
        kind=__StructType.STRUCT,
        annotations={
        },
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=1,
            name="a",
            py_name="a",
            type=str,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=2,
            name="b",
            py_name="b",
            type=_apache_thrift_fixtures_types_module_types.Map__string_i32,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    return spec
def get_reflection__ComplexNestedWithDefault() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="ComplexNestedWithDefault",
        kind=__StructType.STRUCT,
        annotations={
        },
    )
    defaults = _apache_thrift_fixtures_types_module_types.ComplexNestedWithDefault()
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=1,
            name="z",
            py_name="z",
            type=str,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.UNQUALIFIED,
            default=defaults.z,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=2,
            name="n",
            py_name="n",
            type=_apache_thrift_fixtures_types_module_types.ComplexString,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.UNQUALIFIED,
            default=defaults.n,
            annotations={
            },
        ),
    )
    return spec
def get_reflection__MinPadding() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="MinPadding",
        kind=__StructType.STRUCT,
        annotations={
        },
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=1,
            name="small",
            py_name="small",
            type=int,
            kind=__NumberType.BYTE,
            qualifier=__Qualifier.REQUIRED,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=2,
            name="big",
            py_name="big",
            type=int,
            kind=__NumberType.I64,
            qualifier=__Qualifier.REQUIRED,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=3,
            name="medium",
            py_name="medium",
            type=int,
            kind=__NumberType.I16,
            qualifier=__Qualifier.REQUIRED,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=4,
            name="biggish",
            py_name="biggish",
            type=int,
            kind=__NumberType.I32,
            qualifier=__Qualifier.REQUIRED,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=5,
            name="tiny",
            py_name="tiny",
            type=int,
            kind=__NumberType.BYTE,
            qualifier=__Qualifier.REQUIRED,
            default=None,
            annotations={
            },
        ),
    )
    return spec
def get_reflection__MinPaddingWithCustomType() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="MinPaddingWithCustomType",
        kind=__StructType.STRUCT,
        annotations={
        },
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=1,
            name="small",
            py_name="small",
            type=int,
            kind=__NumberType.BYTE,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=2,
            name="biggish",
            py_name="biggish",
            type=int,
            kind=__NumberType.I32,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=3,
            name="medium",
            py_name="medium",
            type=int,
            kind=__NumberType.I16,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=4,
            name="big",
            py_name="big",
            type=int,
            kind=__NumberType.I64,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=5,
            name="tiny",
            py_name="tiny",
            type=int,
            kind=__NumberType.BYTE,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    return spec
def get_reflection__MyStruct() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="MyStruct",
        kind=__StructType.STRUCT,
        annotations={
            """cpp.noncomparable""": """1""",
        },
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=1,
            name="MyIntField",
            py_name="MyIntField",
            type=int,
            kind=__NumberType.I64,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=2,
            name="MyStringField",
            py_name="MyStringField",
            type=str,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=3,
            name="majorVer",
            py_name="majorVer",
            type=int,
            kind=__NumberType.I64,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=4,
            name="data",
            py_name="data",
            type=_apache_thrift_fixtures_types_module_types.MyDataItem,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    return spec
def get_reflection__MyDataItem() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="MyDataItem",
        kind=__StructType.STRUCT,
        annotations={
            """cpp.noncomparable""": """1""",
        },
    )
    return spec
def get_reflection__Renaming() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="Renaming",
        kind=__StructType.STRUCT,
        annotations={
        },
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=1,
            name="foo",
            py_name="foo",
            type=int,
            kind=__NumberType.I64,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    return spec
def get_reflection__AnnotatedTypes() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="AnnotatedTypes",
        kind=__StructType.STRUCT,
        annotations={
        },
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=1,
            name="binary_field",
            py_name="binary_field",
            type=bytes,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=2,
            name="list_field",
            py_name="list_field",
            type=_apache_thrift_fixtures_types_module_types.List__std_unordered_map__Map__i32_string,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    return spec
def get_reflection__ForwardUsageRoot() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="ForwardUsageRoot",
        kind=__StructType.STRUCT,
        annotations={
        },
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=1,
            name="ForwardUsageStruct",
            py_name="ForwardUsageStruct",
            type=_apache_thrift_fixtures_types_module_types.ForwardUsageStruct,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.OPTIONAL,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=2,
            name="ForwardUsageByRef",
            py_name="ForwardUsageByRef",
            type=_apache_thrift_fixtures_types_module_types.ForwardUsageByRef,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.OPTIONAL,
            default=None,
            annotations={
            },
        ),
    )
    return spec
def get_reflection__ForwardUsageStruct() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="ForwardUsageStruct",
        kind=__StructType.STRUCT,
        annotations={
        },
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=1,
            name="foo",
            py_name="foo",
            type=_apache_thrift_fixtures_types_module_types.ForwardUsageRoot,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.OPTIONAL,
            default=None,
            annotations={
            },
        ),
    )
    return spec
def get_reflection__ForwardUsageByRef() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="ForwardUsageByRef",
        kind=__StructType.STRUCT,
        annotations={
        },
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=1,
            name="foo",
            py_name="foo",
            type=_apache_thrift_fixtures_types_module_types.ForwardUsageRoot,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.OPTIONAL,
            default=None,
            annotations={
            },
        ),
    )
    return spec
def get_reflection__IncompleteMap() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="IncompleteMap",
        kind=__StructType.STRUCT,
        annotations={
        },
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=1,
            name="field",
            py_name="field",
            type=_apache_thrift_fixtures_types_module_types.Map__i32_IncompleteMapDep,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.OPTIONAL,
            default=None,
            annotations={
            },
        ),
    )
    return spec
def get_reflection__IncompleteMapDep() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="IncompleteMapDep",
        kind=__StructType.STRUCT,
        annotations={
        },
    )
    return spec
def get_reflection__CompleteMap() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="CompleteMap",
        kind=__StructType.STRUCT,
        annotations={
        },
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=1,
            name="field",
            py_name="field",
            type=_apache_thrift_fixtures_types_module_types.std_unordered_map__Map__i32_CompleteMapDep,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.OPTIONAL,
            default=None,
            annotations={
            },
        ),
    )
    return spec
def get_reflection__CompleteMapDep() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="CompleteMapDep",
        kind=__StructType.STRUCT,
        annotations={
        },
    )
    return spec
def get_reflection__IncompleteList() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="IncompleteList",
        kind=__StructType.STRUCT,
        annotations={
        },
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=1,
            name="field",
            py_name="field",
            type=_apache_thrift_fixtures_types_module_types._std_list__List__IncompleteListDep,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.OPTIONAL,
            default=None,
            annotations={
            },
        ),
    )
    return spec
def get_reflection__IncompleteListDep() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="IncompleteListDep",
        kind=__StructType.STRUCT,
        annotations={
        },
    )
    return spec
def get_reflection__CompleteList() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="CompleteList",
        kind=__StructType.STRUCT,
        annotations={
        },
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=1,
            name="field",
            py_name="field",
            type=_apache_thrift_fixtures_types_module_types.folly_small_vector__List__CompleteListDep,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.OPTIONAL,
            default=None,
            annotations={
            },
        ),
    )
    return spec
def get_reflection__CompleteListDep() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="CompleteListDep",
        kind=__StructType.STRUCT,
        annotations={
        },
    )
    return spec
def get_reflection__AdaptedList() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="AdaptedList",
        kind=__StructType.STRUCT,
        annotations={
        },
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=1,
            name="field",
            py_name="field",
            type=_apache_thrift_fixtures_types_module_types.List__AdaptedListDep,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.OPTIONAL,
            default=None,
            annotations={
            },
        ),
    )
    return spec
def get_reflection__DependentAdaptedList() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="DependentAdaptedList",
        kind=__StructType.STRUCT,
        annotations={
        },
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=1,
            name="field",
            py_name="field",
            type=_apache_thrift_fixtures_types_module_types.List__DependentAdaptedListDep,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.OPTIONAL,
            default=None,
            annotations={
            },
        ),
    )
    return spec
def get_reflection__AllocatorAware() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="AllocatorAware",
        kind=__StructType.STRUCT,
        annotations={
            """cpp.allocator""": """some_allocator""",
        },
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=1,
            name="aa_list",
            py_name="aa_list",
            type=_apache_thrift_fixtures_types_module_types.List__i32,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=2,
            name="aa_set",
            py_name="aa_set",
            type=_apache_thrift_fixtures_types_module_types.Set__i32,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=3,
            name="aa_map",
            py_name="aa_map",
            type=_apache_thrift_fixtures_types_module_types.Map__i32_i32,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=4,
            name="aa_string",
            py_name="aa_string",
            type=str,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=5,
            name="not_a_container",
            py_name="not_a_container",
            type=int,
            kind=__NumberType.I32,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=6,
            name="aa_unique",
            py_name="aa_unique",
            type=int,
            kind=__NumberType.I32,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=7,
            name="aa_shared",
            py_name="aa_shared",
            type=int,
            kind=__NumberType.I32,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    return spec
def get_reflection__AllocatorAware2() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="AllocatorAware2",
        kind=__StructType.STRUCT,
        annotations={
            """cpp.allocator""": """some_allocator""",
        },
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=1,
            name="not_a_container",
            py_name="not_a_container",
            type=int,
            kind=__NumberType.I32,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=2,
            name="box_field",
            py_name="box_field",
            type=int,
            kind=__NumberType.I32,
            qualifier=__Qualifier.OPTIONAL,
            default=None,
            annotations={
            },
        ),
    )
    return spec
def get_reflection__TypedefStruct() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="TypedefStruct",
        kind=__StructType.STRUCT,
        annotations={
        },
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=1,
            name="i32_field",
            py_name="i32_field",
            type=int,
            kind=__NumberType.I32,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=2,
            name="IntTypedef_field",
            py_name="IntTypedef_field",
            type=int,
            kind=__NumberType.I32,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=3,
            name="UintTypedef_field",
            py_name="UintTypedef_field",
            type=int,
            kind=__NumberType.I32,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    return spec
def get_reflection__StructWithDoubleUnderscores() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="StructWithDoubleUnderscores",
        kind=__StructType.STRUCT,
        annotations={
        },
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=1,
            name="__field",
            py_name="__field",
            type=int,
            kind=__NumberType.I32,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    return spec
def get_reflection__std_unordered_map__Map__i32_string() -> __MapSpec:
    return __MapSpec._fbthrift_create(
        key=int,
        key_kind=__NumberType.I32,
        value=str,
        value_kind=__NumberType.NOT_A_NUMBER,
    )

def get_reflection__List__i64() -> __ListSpec :
    return __ListSpec._fbthrift_create(
        value=int,
        kind=__NumberType.I64,
    )

def get_reflection__Map__binary_i64() -> __MapSpec:
    return __MapSpec._fbthrift_create(
        key=bytes,
        key_kind=__NumberType.NOT_A_NUMBER,
        value=int,
        value_kind=__NumberType.I64,
    )

def get_reflection__List__i32() -> __ListSpec :
    return __ListSpec._fbthrift_create(
        value=int,
        kind=__NumberType.I32,
    )

def get_reflection__std_list__List__i32() -> __ListSpec :
    return __ListSpec._fbthrift_create(
        value=int,
        kind=__NumberType.I32,
    )

def get_reflection__std_deque__List__i32() -> __ListSpec :
    return __ListSpec._fbthrift_create(
        value=int,
        kind=__NumberType.I32,
    )

def get_reflection__folly_fbvector__List__i32() -> __ListSpec :
    return __ListSpec._fbthrift_create(
        value=int,
        kind=__NumberType.I32,
    )

def get_reflection__folly_small_vector__List__i32() -> __ListSpec :
    return __ListSpec._fbthrift_create(
        value=int,
        kind=__NumberType.I32,
    )

def get_reflection__folly_sorted_vector_set__Set__i32() -> __SetSpec:
    return __SetSpec._fbthrift_create(
        value=int,
        kind=__NumberType.I32,
     )

def get_reflection__Map__i32_string() -> __MapSpec:
    return __MapSpec._fbthrift_create(
        key=int,
        key_kind=__NumberType.I32,
        value=str,
        value_kind=__NumberType.NOT_A_NUMBER,
    )

def get_reflection__std_list_int32_t__List__i32() -> __ListSpec :
    return __ListSpec._fbthrift_create(
        value=int,
        kind=__NumberType.I32,
    )

def get_reflection__Map__string_i32() -> __MapSpec:
    return __MapSpec._fbthrift_create(
        key=str,
        key_kind=__NumberType.NOT_A_NUMBER,
        value=int,
        value_kind=__NumberType.I32,
    )

def get_reflection__List__std_unordered_map__Map__i32_string() -> __ListSpec :
    return __ListSpec._fbthrift_create(
        value=_apache_thrift_fixtures_types_module_types.std_unordered_map__Map__i32_string,
        kind=__NumberType.NOT_A_NUMBER,
    )

def get_reflection__Map__i32_IncompleteMapDep() -> __MapSpec:
    return __MapSpec._fbthrift_create(
        key=int,
        key_kind=__NumberType.I32,
        value=_apache_thrift_fixtures_types_module_types.IncompleteMapDep,
        value_kind=__NumberType.NOT_A_NUMBER,
    )

def get_reflection__std_unordered_map__Map__i32_CompleteMapDep() -> __MapSpec:
    return __MapSpec._fbthrift_create(
        key=int,
        key_kind=__NumberType.I32,
        value=_apache_thrift_fixtures_types_module_types.CompleteMapDep,
        value_kind=__NumberType.NOT_A_NUMBER,
    )

def get_reflection___std_list__List__IncompleteListDep() -> __ListSpec :
    return __ListSpec._fbthrift_create(
        value=_apache_thrift_fixtures_types_module_types.IncompleteListDep,
        kind=__NumberType.NOT_A_NUMBER,
    )

def get_reflection__folly_small_vector__List__CompleteListDep() -> __ListSpec :
    return __ListSpec._fbthrift_create(
        value=_apache_thrift_fixtures_types_module_types.CompleteListDep,
        kind=__NumberType.NOT_A_NUMBER,
    )

def get_reflection__List__AdaptedListDep() -> __ListSpec :
    return __ListSpec._fbthrift_create(
        value=_apache_thrift_fixtures_types_module_types.AdaptedListDep,
        kind=__NumberType.NOT_A_NUMBER,
    )

def get_reflection__List__DependentAdaptedListDep() -> __ListSpec :
    return __ListSpec._fbthrift_create(
        value=_apache_thrift_fixtures_types_module_types.DependentAdaptedListDep,
        kind=__NumberType.NOT_A_NUMBER,
    )

def get_reflection__Set__i32() -> __SetSpec:
    return __SetSpec._fbthrift_create(
        value=int,
        kind=__NumberType.I32,
     )

def get_reflection__Map__i32_i32() -> __MapSpec:
    return __MapSpec._fbthrift_create(
        key=int,
        key_kind=__NumberType.I32,
        value=int,
        value_kind=__NumberType.I32,
    )

