Parsed decls:

{ Direct_decl_parser.classes =
  { "\\C" ->
    { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
      sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cnormal;
      sc_name = ([6:7-8], "\\C"); sc_tparams = []; sc_where_constraints = [];
      sc_extends = []; sc_uses = []; sc_xhp_attr_uses = [];
      sc_req_extends = []; sc_req_implements = []; sc_implements = [];
      sc_consts = []; sc_typeconsts = []; sc_pu_enums = []; sc_props = [];
      sc_sprops = []; sc_constructor = None; sc_static_methods = [];
      sc_methods =
      [{ Shallow_decl_defs.sm_abstract = false; sm_final = false;
         sm_memoizelsb = false; sm_name = ([8:19-20], "f");
         sm_override = false; sm_dynamicallycallable = false;
         sm_reactivity = (Some (Decl_defs.Method_pure None));
         sm_type =
         (Rwitness (root|pure.php line 8, characters 19-19),
          (Tfun
             { ft_arity = (Fstandard ()); ft_tparams = [];
               ft_where_constraints = []; ft_params = [];
               ft_implicit_params =
               { capability =
                 (Rhint (root|pure.php line 8, characters 19-19), (Tunion []))
                 };
               ft_ret =
               { et_enforced = false;
                 et_type =
                 (Rhint (root|pure.php line 8, characters 24-27),
                  (Tprim Tvoid))
                 };
               ft_flags =
               (make_ft_flags sync none ~return_disposable:false
                 ~returns_mutable:false ~returns_void_to_rx:false);
               ft_reactive = Pure {} }));
         sm_visibility = Public; sm_deprecated = None }
        ];
      sc_user_attributes = []; sc_enum_type = None; sc_decl_errors = <opaque>
      } };
  funs =
  { "\\pure" ->
    { fe_pos = [4:10-14];
      fe_type =
      (Rwitness (root|pure.php line 4, characters 10-13),
       (Tfun
          { ft_arity = (Fstandard ()); ft_tparams = [];
            ft_where_constraints = []; ft_params = [];
            ft_implicit_params =
            { capability =
              (Rhint (root|pure.php line 4, characters 10-13), (Tunion [])) };
            ft_ret =
            { et_enforced = false;
              et_type =
              (Rhint (root|pure.php line 4, characters 18-21), (Tprim Tvoid))
              };
            ft_flags =
            (make_ft_flags sync none ~return_disposable:false
              ~returns_mutable:false ~returns_void_to_rx:false);
            ft_reactive = Pure {} }));
      fe_deprecated = None;  } };
  typedefs = {}; consts = {} }

They matched!
