/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/sync-methods-return-try/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>

namespace apache::thrift {
namespace ident {
struct content;
struct content;
struct content;
struct sink;
struct reason;
struct reason;
struct reason;
struct content;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_content
#define APACHE_THRIFT_ACCESSOR_content
APACHE_THRIFT_DEFINE_ACCESSOR(content);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_content
#define APACHE_THRIFT_ACCESSOR_content
APACHE_THRIFT_DEFINE_ACCESSOR(content);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_content
#define APACHE_THRIFT_ACCESSOR_content
APACHE_THRIFT_DEFINE_ACCESSOR(content);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_sink
#define APACHE_THRIFT_ACCESSOR_sink
APACHE_THRIFT_DEFINE_ACCESSOR(sink);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_reason
#define APACHE_THRIFT_ACCESSOR_reason
APACHE_THRIFT_DEFINE_ACCESSOR(reason);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_reason
#define APACHE_THRIFT_ACCESSOR_reason
APACHE_THRIFT_DEFINE_ACCESSOR(reason);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_reason
#define APACHE_THRIFT_ACCESSOR_reason
APACHE_THRIFT_DEFINE_ACCESSOR(reason);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_content
#define APACHE_THRIFT_ACCESSOR_content
APACHE_THRIFT_DEFINE_ACCESSOR(content);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
// END declare_enums
// BEGIN forward_declare
namespace cpp2 {
class FooStreamEx;
class FooEx;
class FooEx2;
class InitialResponse;
class FinalResponse;
class SinkPayload;
class CompatibleWithKeywordSink;
class InitialException;
class SinkException1;
class SinkException2;
class StreamItem;
} // namespace cpp2
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;


/** Glean {"file": "thrift/compiler/test/fixtures/sync-methods-return-try/src/module.thrift", "name": "FooStreamEx", "kind": "exception" } */
class FOLLY_EXPORT FooStreamEx : public virtual apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::SAFE;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::SERVER;

 public:
  using __fbthrift_cpp2_type = FooStreamEx;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  FooStreamEx();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  FooStreamEx(apache::thrift::FragileConstructor);

  FooStreamEx(FooStreamEx&&) noexcept;

  FooStreamEx(const FooStreamEx& src);


  FooStreamEx& operator=(FooStreamEx&&) noexcept;
  FooStreamEx& operator=(const FooStreamEx& src);

  ~FooStreamEx() override;


 public:

  bool operator==(const FooStreamEx&) const;
  bool operator<(const FooStreamEx&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return "::cpp2::FooStreamEx";
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<FooStreamEx>;
  friend void swap(FooStreamEx& a, FooStreamEx& b);
};

template <class Protocol_>
unsigned long FooStreamEx::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/sync-methods-return-try/src/module.thrift", "name": "FooEx", "kind": "exception" } */
class FOLLY_EXPORT FooEx : public virtual apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::SAFE;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::SERVER;

 public:
  using __fbthrift_cpp2_type = FooEx;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  FooEx();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  FooEx(apache::thrift::FragileConstructor);

  FooEx(FooEx&&) noexcept;

  FooEx(const FooEx& src);


  FooEx& operator=(FooEx&&) noexcept;
  FooEx& operator=(const FooEx& src);

  ~FooEx() override;


 public:

  bool operator==(const FooEx&) const;
  bool operator<(const FooEx&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return "::cpp2::FooEx";
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<FooEx>;
  friend void swap(FooEx& a, FooEx& b);
};

template <class Protocol_>
unsigned long FooEx::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/sync-methods-return-try/src/module.thrift", "name": "FooEx2", "kind": "exception" } */
class FOLLY_EXPORT FooEx2 : public virtual apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::SAFE;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::SERVER;

 public:
  using __fbthrift_cpp2_type = FooEx2;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  FooEx2();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  FooEx2(apache::thrift::FragileConstructor);

  FooEx2(FooEx2&&) noexcept;

  FooEx2(const FooEx2& src);


  FooEx2& operator=(FooEx2&&) noexcept;
  FooEx2& operator=(const FooEx2& src);

  ~FooEx2() override;


 public:

  bool operator==(const FooEx2&) const;
  bool operator<(const FooEx2&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return "::cpp2::FooEx2";
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<FooEx2>;
  friend void swap(FooEx2& a, FooEx2& b);
};

template <class Protocol_>
unsigned long FooEx2::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/sync-methods-return-try/src/module.thrift", "name": "InitialResponse", "kind": "struct" } */
class InitialResponse final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::content
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = InitialResponse;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  InitialResponse();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  InitialResponse(apache::thrift::FragileConstructor, ::std::string content__arg);

  InitialResponse(InitialResponse&&) noexcept;

  InitialResponse(const InitialResponse& src);


  InitialResponse& operator=(InitialResponse&&) noexcept;
  InitialResponse& operator=(const InitialResponse& src);

  ~InitialResponse();

 private:
  ::std::string __fbthrift_field_content;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const InitialResponse&) const;
  bool operator<(const InitialResponse&) const;

  /** Glean { "field": "content" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> content_ref() const& {
    return {this->__fbthrift_field_content, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "content" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> content_ref() & {
    return {this->__fbthrift_field_content, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "content" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> content_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_content), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "content" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> content() const& {
    return {this->__fbthrift_field_content, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "content" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> content() & {
    return {this->__fbthrift_field_content, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "content" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> content() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_content), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "content" } */
  [[deprecated("Use `FOO.content().value()` instead of `FOO.get_content()`")]]
  const ::std::string& get_content() const& {
    return __fbthrift_field_content;
  }

  /** Glean { "field": "content" } */
  [[deprecated("Use `FOO.content().value()` instead of `FOO.get_content()`")]]
  ::std::string get_content() && {
    return static_cast<::std::string&&>(__fbthrift_field_content);
  }

  /** Glean { "field": "content" } */
  template <typename T_InitialResponse_content_struct_setter = ::std::string>
  [[deprecated("Use `FOO.content() = BAR` instead of `FOO.set_content(BAR)`")]]
  ::std::string& set_content(T_InitialResponse_content_struct_setter&& content_) {
    content_ref() = std::forward<T_InitialResponse_content_struct_setter>(content_);
    return __fbthrift_field_content;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<InitialResponse>;
  friend void swap(InitialResponse& a, InitialResponse& b);
};

template <class Protocol_>
unsigned long InitialResponse::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/sync-methods-return-try/src/module.thrift", "name": "FinalResponse", "kind": "struct" } */
class FinalResponse final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::content
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = FinalResponse;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  FinalResponse();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  FinalResponse(apache::thrift::FragileConstructor, ::std::string content__arg);

  FinalResponse(FinalResponse&&) noexcept;

  FinalResponse(const FinalResponse& src);


  FinalResponse& operator=(FinalResponse&&) noexcept;
  FinalResponse& operator=(const FinalResponse& src);

  ~FinalResponse();

 private:
  ::std::string __fbthrift_field_content;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const FinalResponse&) const;
  bool operator<(const FinalResponse&) const;

  /** Glean { "field": "content" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> content_ref() const& {
    return {this->__fbthrift_field_content, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "content" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> content_ref() & {
    return {this->__fbthrift_field_content, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "content" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> content_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_content), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "content" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> content() const& {
    return {this->__fbthrift_field_content, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "content" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> content() & {
    return {this->__fbthrift_field_content, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "content" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> content() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_content), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "content" } */
  [[deprecated("Use `FOO.content().value()` instead of `FOO.get_content()`")]]
  const ::std::string& get_content() const& {
    return __fbthrift_field_content;
  }

  /** Glean { "field": "content" } */
  [[deprecated("Use `FOO.content().value()` instead of `FOO.get_content()`")]]
  ::std::string get_content() && {
    return static_cast<::std::string&&>(__fbthrift_field_content);
  }

  /** Glean { "field": "content" } */
  template <typename T_FinalResponse_content_struct_setter = ::std::string>
  [[deprecated("Use `FOO.content() = BAR` instead of `FOO.set_content(BAR)`")]]
  ::std::string& set_content(T_FinalResponse_content_struct_setter&& content_) {
    content_ref() = std::forward<T_FinalResponse_content_struct_setter>(content_);
    return __fbthrift_field_content;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<FinalResponse>;
  friend void swap(FinalResponse& a, FinalResponse& b);
};

template <class Protocol_>
unsigned long FinalResponse::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/sync-methods-return-try/src/module.thrift", "name": "SinkPayload", "kind": "struct" } */
class SinkPayload final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::content
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = SinkPayload;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  SinkPayload();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  SinkPayload(apache::thrift::FragileConstructor, ::std::string content__arg);

  SinkPayload(SinkPayload&&) noexcept;

  SinkPayload(const SinkPayload& src);


  SinkPayload& operator=(SinkPayload&&) noexcept;
  SinkPayload& operator=(const SinkPayload& src);

  ~SinkPayload();

 private:
  ::std::string __fbthrift_field_content;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const SinkPayload&) const;
  bool operator<(const SinkPayload&) const;

  /** Glean { "field": "content" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> content_ref() const& {
    return {this->__fbthrift_field_content, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "content" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> content_ref() & {
    return {this->__fbthrift_field_content, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "content" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> content_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_content), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "content" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> content() const& {
    return {this->__fbthrift_field_content, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "content" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> content() & {
    return {this->__fbthrift_field_content, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "content" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> content() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_content), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "content" } */
  [[deprecated("Use `FOO.content().value()` instead of `FOO.get_content()`")]]
  const ::std::string& get_content() const& {
    return __fbthrift_field_content;
  }

  /** Glean { "field": "content" } */
  [[deprecated("Use `FOO.content().value()` instead of `FOO.get_content()`")]]
  ::std::string get_content() && {
    return static_cast<::std::string&&>(__fbthrift_field_content);
  }

  /** Glean { "field": "content" } */
  template <typename T_SinkPayload_content_struct_setter = ::std::string>
  [[deprecated("Use `FOO.content() = BAR` instead of `FOO.set_content(BAR)`")]]
  ::std::string& set_content(T_SinkPayload_content_struct_setter&& content_) {
    content_ref() = std::forward<T_SinkPayload_content_struct_setter>(content_);
    return __fbthrift_field_content;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<SinkPayload>;
  friend void swap(SinkPayload& a, SinkPayload& b);
};

template <class Protocol_>
unsigned long SinkPayload::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/sync-methods-return-try/src/module.thrift", "name": "CompatibleWithKeywordSink", "kind": "struct" } */
class CompatibleWithKeywordSink final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::sink
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = CompatibleWithKeywordSink;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  CompatibleWithKeywordSink();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  CompatibleWithKeywordSink(apache::thrift::FragileConstructor, ::std::string sink__arg);

  CompatibleWithKeywordSink(CompatibleWithKeywordSink&&) noexcept;

  CompatibleWithKeywordSink(const CompatibleWithKeywordSink& src);


  CompatibleWithKeywordSink& operator=(CompatibleWithKeywordSink&&) noexcept;
  CompatibleWithKeywordSink& operator=(const CompatibleWithKeywordSink& src);

  ~CompatibleWithKeywordSink();

 private:
  ::std::string __fbthrift_field_sink;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const CompatibleWithKeywordSink&) const;
  bool operator<(const CompatibleWithKeywordSink&) const;

  /** Glean { "field": "sink" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> sink_ref() const& {
    return {this->__fbthrift_field_sink, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "sink" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> sink_ref() & {
    return {this->__fbthrift_field_sink, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "sink" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> sink_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sink), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "sink" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> sink() const& {
    return {this->__fbthrift_field_sink, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "sink" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> sink() & {
    return {this->__fbthrift_field_sink, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "sink" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> sink() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sink), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "sink" } */
  [[deprecated("Use `FOO.sink().value()` instead of `FOO.get_sink()`")]]
  const ::std::string& get_sink() const& {
    return __fbthrift_field_sink;
  }

  /** Glean { "field": "sink" } */
  [[deprecated("Use `FOO.sink().value()` instead of `FOO.get_sink()`")]]
  ::std::string get_sink() && {
    return static_cast<::std::string&&>(__fbthrift_field_sink);
  }

  /** Glean { "field": "sink" } */
  template <typename T_CompatibleWithKeywordSink_sink_struct_setter = ::std::string>
  [[deprecated("Use `FOO.sink() = BAR` instead of `FOO.set_sink(BAR)`")]]
  ::std::string& set_sink(T_CompatibleWithKeywordSink_sink_struct_setter&& sink_) {
    sink_ref() = std::forward<T_CompatibleWithKeywordSink_sink_struct_setter>(sink_);
    return __fbthrift_field_sink;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<CompatibleWithKeywordSink>;
  friend void swap(CompatibleWithKeywordSink& a, CompatibleWithKeywordSink& b);
};

template <class Protocol_>
unsigned long CompatibleWithKeywordSink::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/sync-methods-return-try/src/module.thrift", "name": "InitialException", "kind": "exception" } */
class FOLLY_EXPORT InitialException : public virtual apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::reason
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::UNSPECIFIED;

 public:
  using __fbthrift_cpp2_type = InitialException;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  InitialException();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  InitialException(apache::thrift::FragileConstructor, ::std::string reason__arg);

  InitialException(InitialException&&) noexcept;

  InitialException(const InitialException& src);


  InitialException& operator=(InitialException&&) noexcept;
  InitialException& operator=(const InitialException& src);

  ~InitialException() override;

 private:
  ::std::string __fbthrift_field_reason;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const InitialException&) const;
  bool operator<(const InitialException&) const;

  /** Glean { "field": "reason" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> reason_ref() const& {
    return {this->__fbthrift_field_reason, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "reason" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> reason_ref() & {
    return {this->__fbthrift_field_reason, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "reason" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> reason_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_reason), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "reason" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> reason() const& {
    return {this->__fbthrift_field_reason, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "reason" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> reason() & {
    return {this->__fbthrift_field_reason, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "reason" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> reason() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_reason), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "reason" } */
  [[deprecated("Use `FOO.reason().value()` instead of `FOO.get_reason()`")]]
  const ::std::string& get_reason() const& {
    return __fbthrift_field_reason;
  }

  /** Glean { "field": "reason" } */
  [[deprecated("Use `FOO.reason().value()` instead of `FOO.get_reason()`")]]
  ::std::string get_reason() && {
    return static_cast<::std::string&&>(__fbthrift_field_reason);
  }

  /** Glean { "field": "reason" } */
  template <typename T_InitialException_reason_struct_setter = ::std::string>
  [[deprecated("Use `FOO.reason() = BAR` instead of `FOO.set_reason(BAR)`")]]
  ::std::string& set_reason(T_InitialException_reason_struct_setter&& reason_) {
    reason_ref() = std::forward<T_InitialException_reason_struct_setter>(reason_);
    return __fbthrift_field_reason;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return "::cpp2::InitialException";
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<InitialException>;
  friend void swap(InitialException& a, InitialException& b);
};

template <class Protocol_>
unsigned long InitialException::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/sync-methods-return-try/src/module.thrift", "name": "SinkException1", "kind": "exception" } */
class FOLLY_EXPORT SinkException1 : public virtual apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::reason
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::UNSPECIFIED;

 public:
  using __fbthrift_cpp2_type = SinkException1;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  SinkException1();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  SinkException1(apache::thrift::FragileConstructor, ::std::string reason__arg);

  SinkException1(SinkException1&&) noexcept;

  SinkException1(const SinkException1& src);


  SinkException1& operator=(SinkException1&&) noexcept;
  SinkException1& operator=(const SinkException1& src);

  ~SinkException1() override;

 private:
  ::std::string __fbthrift_field_reason;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const SinkException1&) const;
  bool operator<(const SinkException1&) const;

  /** Glean { "field": "reason" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> reason_ref() const& {
    return {this->__fbthrift_field_reason, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "reason" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> reason_ref() & {
    return {this->__fbthrift_field_reason, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "reason" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> reason_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_reason), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "reason" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> reason() const& {
    return {this->__fbthrift_field_reason, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "reason" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> reason() & {
    return {this->__fbthrift_field_reason, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "reason" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> reason() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_reason), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "reason" } */
  [[deprecated("Use `FOO.reason().value()` instead of `FOO.get_reason()`")]]
  const ::std::string& get_reason() const& {
    return __fbthrift_field_reason;
  }

  /** Glean { "field": "reason" } */
  [[deprecated("Use `FOO.reason().value()` instead of `FOO.get_reason()`")]]
  ::std::string get_reason() && {
    return static_cast<::std::string&&>(__fbthrift_field_reason);
  }

  /** Glean { "field": "reason" } */
  template <typename T_SinkException1_reason_struct_setter = ::std::string>
  [[deprecated("Use `FOO.reason() = BAR` instead of `FOO.set_reason(BAR)`")]]
  ::std::string& set_reason(T_SinkException1_reason_struct_setter&& reason_) {
    reason_ref() = std::forward<T_SinkException1_reason_struct_setter>(reason_);
    return __fbthrift_field_reason;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return "::cpp2::SinkException1";
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<SinkException1>;
  friend void swap(SinkException1& a, SinkException1& b);
};

template <class Protocol_>
unsigned long SinkException1::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/sync-methods-return-try/src/module.thrift", "name": "SinkException2", "kind": "exception" } */
class FOLLY_EXPORT SinkException2 : public virtual apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::reason
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::UNSPECIFIED;

 public:
  using __fbthrift_cpp2_type = SinkException2;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  SinkException2();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  SinkException2(apache::thrift::FragileConstructor, ::std::int64_t reason__arg);

  SinkException2(SinkException2&&) noexcept;

  SinkException2(const SinkException2& src);


  SinkException2& operator=(SinkException2&&) noexcept;
  SinkException2& operator=(const SinkException2& src);

  ~SinkException2() override;

 private:
  ::std::int64_t __fbthrift_field_reason;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const SinkException2&) const;
  bool operator<(const SinkException2&) const;

  /** Glean { "field": "reason" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> reason_ref() const& {
    return {this->__fbthrift_field_reason, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "reason" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> reason_ref() & {
    return {this->__fbthrift_field_reason, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "reason" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> reason_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_reason), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "reason" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> reason() const& {
    return {this->__fbthrift_field_reason, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "reason" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> reason() & {
    return {this->__fbthrift_field_reason, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "reason" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> reason() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_reason), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "reason" } */
  [[deprecated("Use `FOO.reason().value()` instead of `FOO.get_reason()`")]]
  ::std::int64_t get_reason() const;

  /** Glean { "field": "reason" } */
  [[deprecated("Use `FOO.reason() = BAR` instead of `FOO.set_reason(BAR)`")]]
  ::std::int64_t& set_reason(::std::int64_t reason_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return "::cpp2::SinkException2";
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<SinkException2>;
  friend void swap(SinkException2& a, SinkException2& b);
};

template <class Protocol_>
unsigned long SinkException2::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/sync-methods-return-try/src/module.thrift", "name": "StreamItem", "kind": "struct" } */
class StreamItem final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::content
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StreamItem;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  StreamItem();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StreamItem(apache::thrift::FragileConstructor, ::std::string content__arg);

  StreamItem(StreamItem&&) noexcept;

  StreamItem(const StreamItem& src);


  StreamItem& operator=(StreamItem&&) noexcept;
  StreamItem& operator=(const StreamItem& src);

  ~StreamItem();

 private:
  ::std::string __fbthrift_field_content;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const StreamItem&) const;
  bool operator<(const StreamItem&) const;

  /** Glean { "field": "content" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> content_ref() const& {
    return {this->__fbthrift_field_content, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "content" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> content_ref() & {
    return {this->__fbthrift_field_content, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "content" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> content_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_content), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "content" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> content() const& {
    return {this->__fbthrift_field_content, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "content" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> content() & {
    return {this->__fbthrift_field_content, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "content" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> content() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_content), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "content" } */
  [[deprecated("Use `FOO.content().value()` instead of `FOO.get_content()`")]]
  const ::std::string& get_content() const& {
    return __fbthrift_field_content;
  }

  /** Glean { "field": "content" } */
  [[deprecated("Use `FOO.content().value()` instead of `FOO.get_content()`")]]
  ::std::string get_content() && {
    return static_cast<::std::string&&>(__fbthrift_field_content);
  }

  /** Glean { "field": "content" } */
  template <typename T_StreamItem_content_struct_setter = ::std::string>
  [[deprecated("Use `FOO.content() = BAR` instead of `FOO.set_content(BAR)`")]]
  ::std::string& set_content(T_StreamItem_content_struct_setter&& content_) {
    content_ref() = std::forward<T_StreamItem_content_struct_setter>(content_);
    return __fbthrift_field_content;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StreamItem>;
  friend void swap(StreamItem& a, StreamItem& b);
};

template <class Protocol_>
unsigned long StreamItem::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace cpp2

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::cpp2::FooStreamEx, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 781496598431143912;
  static constexpr ::std::string_view definitionKey = {"\x7e\x6e\x3e\x9d\xb9\x30\x57\x7f\x6a\xd1\xf3\xe4\x59\x0e\x16\xef", 16};
};
template <> struct TSchemaAssociation<::cpp2::FooEx, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 781496598431143912;
  static constexpr ::std::string_view definitionKey = {"\x12\x42\xba\x15\x49\xfc\xee\xaa\x2e\x18\xac\xa4\x09\xe3\xca\x4b", 16};
};
template <> struct TSchemaAssociation<::cpp2::FooEx2, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 781496598431143912;
  static constexpr ::std::string_view definitionKey = {"\x85\x49\x07\xc9\xf1\xe3\x06\x5f\xde\x40\xd6\x04\xdb\x5c\x16\x2b", 16};
};
template <> struct TSchemaAssociation<::cpp2::InitialResponse, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 781496598431143912;
  static constexpr ::std::string_view definitionKey = {"\xee\x19\x81\xd9\xc8\xa7\x84\x96\x97\xdc\x4d\xa5\x3f\xef\xac\xe9", 16};
};
template <> struct TSchemaAssociation<::cpp2::FinalResponse, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 781496598431143912;
  static constexpr ::std::string_view definitionKey = {"\xd1\xdc\x81\x12\x8c\x5f\xe6\xfd\x53\x00\xb6\x11\x37\x0b\xab\x88", 16};
};
template <> struct TSchemaAssociation<::cpp2::SinkPayload, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 781496598431143912;
  static constexpr ::std::string_view definitionKey = {"\xbc\x61\x31\xd3\xea\xca\xde\x70\x52\xf0\x62\x3c\xb5\x35\xf9\x33", 16};
};
template <> struct TSchemaAssociation<::cpp2::CompatibleWithKeywordSink, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 781496598431143912;
  static constexpr ::std::string_view definitionKey = {"\x9d\x6d\x5b\x30\xd8\x33\x17\x68\x0d\x37\x6d\xb2\x72\xd0\x8c\xa1", 16};
};
template <> struct TSchemaAssociation<::cpp2::InitialException, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 781496598431143912;
  static constexpr ::std::string_view definitionKey = {"\xfb\x04\xca\xcc\xde\x2e\x27\x42\x70\xd7\x55\x03\xf4\x29\xf9\xf3", 16};
};
template <> struct TSchemaAssociation<::cpp2::SinkException1, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 781496598431143912;
  static constexpr ::std::string_view definitionKey = {"\x18\xc3\x6d\xbd\x86\x1a\x4e\xf7\xf6\x5e\x16\x77\x85\xf1\x21\x71", 16};
};
template <> struct TSchemaAssociation<::cpp2::SinkException2, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 781496598431143912;
  static constexpr ::std::string_view definitionKey = {"\x5e\xfe\x55\xea\x38\xcf\x16\x23\xfe\x09\x76\x61\x5a\x65\xc8\xca", 16};
};
template <> struct TSchemaAssociation<::cpp2::StreamItem, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 781496598431143912;
  static constexpr ::std::string_view definitionKey = {"\x1f\xaa\x83\xd7\xd1\xd6\x7f\x3d\x4c\x4b\x3a\x49\xd8\x67\xcc\xf5", 16};
};
} // namespace apache::thrift::detail
