Parsed decls:

{ Direct_decl_parser.classes =
  { "\\A" ->
    { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
      sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cnormal;
      sc_name = ([3:7-8], "\\A"); sc_tparams = []; sc_where_constraints = [];
      sc_extends = []; sc_uses = []; sc_xhp_attr_uses = [];
      sc_req_extends = []; sc_req_implements = []; sc_implements = [];
      sc_consts = []; sc_typeconsts = []; sc_pu_enums = []; sc_props = [];
      sc_sprops = []; sc_constructor = None; sc_static_methods = [];
      sc_methods = []; sc_user_attributes = []; sc_enum_type = None;
      sc_decl_errors = <opaque> } };
  funs =
  { "\\f" ->
    { fe_pos = [6:10-11];
      fe_type =
      (Rwitness (root|mutable.php line 6, characters 10-10),
       (Tfun
          { ft_arity = (Fstandard ()); ft_tparams = [];
            ft_where_constraints = [];
            ft_params =
            [{ fp_pos = [6:45-47]; fp_name = (Some "$a");
               fp_type =
               { et_enforced = false;
                 et_type =
                 (Rhint (root|mutable.php line 6, characters 12-43),
                  (Tfun
                     { ft_arity = (Fstandard ()); ft_tparams = [];
                       ft_where_constraints = [];
                       ft_params =
                       [{ fp_pos = [6:25-35]; fp_name = None;
                          fp_type =
                          { et_enforced = false;
                            et_type =
                            (Rhint (root|mutable.php line 6, characters 33-33),
                             (Tapply (([6:33-34], "\\A"), [])))
                            };
                          fp_flags =
                          (make_fp_flags ~mutability:mutable
                            ~accept_disposable:false ~has_default:false
                            ~mode:FPnormal);
                           }
                         ];
                       ft_implicit_params =
                       { capability =
                         (Rhint (root|mutable.php line 6, characters 15-42),
                          (Tunion []))
                         };
                       ft_ret =
                       { et_enforced = false;
                         et_type =
                         (Rhint (root|mutable.php line 6, characters 38-41),
                          (Tprim Tvoid))
                         };
                       ft_flags =
                       (make_ft_flags sync none ~return_disposable:false
                         ~returns_mutable:false ~returns_void_to_rx:false);
                       ft_reactive = Reactive {} }))
                 };
               fp_flags =
               (make_fp_flags ~mutability:none ~accept_disposable:false
                 ~has_default:false ~mode:FPnormal);
                }
              ];
            ft_implicit_params =
            { capability =
              (Rhint (root|mutable.php line 6, characters 10-10), (Tunion []))
              };
            ft_ret =
            { et_enforced = false;
              et_type =
              (Rhint (root|mutable.php line 6, characters 50-53),
               (Tprim Tvoid))
              };
            ft_flags =
            (make_ft_flags sync none ~return_disposable:false
              ~returns_mutable:false ~returns_void_to_rx:false);
            ft_reactive = Reactive {} }));
      fe_deprecated = None;  };
    "\\g" ->
    { fe_pos = [9:10-11];
      fe_type =
      (Rwitness (root|mutable.php line 9, characters 10-10),
       (Tfun
          { ft_arity = (Fstandard ()); ft_tparams = [];
            ft_where_constraints = [];
            ft_params =
            [{ fp_pos = [9:50-52]; fp_name = (Some "$a");
               fp_type =
               { et_enforced = false;
                 et_type =
                 (Rhint (root|mutable.php line 9, characters 12-48),
                  (Tfun
                     { ft_arity = (Fstandard ()); ft_tparams = [];
                       ft_where_constraints = [];
                       ft_params =
                       [{ fp_pos = [9:25-40]; fp_name = None;
                          fp_type =
                          { et_enforced = false;
                            et_type =
                            (Rhint (root|mutable.php line 9, characters 38-38),
                             (Tapply (([9:38-39], "\\A"), [])))
                            };
                          fp_flags =
                          (make_fp_flags ~mutability:maybe-mutable
                            ~accept_disposable:false ~has_default:false
                            ~mode:FPnormal);
                           }
                         ];
                       ft_implicit_params =
                       { capability =
                         (Rhint (root|mutable.php line 9, characters 15-47),
                          (Tunion []))
                         };
                       ft_ret =
                       { et_enforced = false;
                         et_type =
                         (Rhint (root|mutable.php line 9, characters 43-46),
                          (Tprim Tvoid))
                         };
                       ft_flags =
                       (make_ft_flags sync none ~return_disposable:false
                         ~returns_mutable:false ~returns_void_to_rx:false);
                       ft_reactive = Reactive {} }))
                 };
               fp_flags =
               (make_fp_flags ~mutability:none ~accept_disposable:false
                 ~has_default:false ~mode:FPnormal);
                }
              ];
            ft_implicit_params =
            { capability =
              (Rhint (root|mutable.php line 9, characters 10-10), (Tunion []))
              };
            ft_ret =
            { et_enforced = false;
              et_type =
              (Rhint (root|mutable.php line 9, characters 55-58),
               (Tprim Tvoid))
              };
            ft_flags =
            (make_ft_flags sync none ~return_disposable:false
              ~returns_mutable:false ~returns_void_to_rx:false);
            ft_reactive = Reactive {} }));
      fe_deprecated = None;  };
    "\\h" ->
    { fe_pos = [12:10-11];
      fe_type =
      (Rwitness (root|mutable.php line 12, characters 10-10),
       (Tfun
          { ft_arity = (Fstandard ()); ft_tparams = [];
            ft_where_constraints = [];
            ft_params =
            [{ fp_pos = [12:50-52]; fp_name = (Some "$a");
               fp_type =
               { et_enforced = false;
                 et_type =
                 (Rhint (root|mutable.php line 12, characters 12-48),
                  (Tfun
                     { ft_arity = (Fstandard ()); ft_tparams = [];
                       ft_where_constraints = [];
                       ft_params =
                       [{ fp_pos = [12:25-40]; fp_name = None;
                          fp_type =
                          { et_enforced = false;
                            et_type =
                            (Rhint (root|mutable.php line 12, characters 38-38),
                             (Tapply (([12:38-39], "\\A"), [])))
                            };
                          fp_flags =
                          (make_fp_flags ~mutability:owned mutable
                            ~accept_disposable:false ~has_default:false
                            ~mode:FPnormal);
                           }
                         ];
                       ft_implicit_params =
                       { capability =
                         (Rhint (root|mutable.php line 12, characters 15-47),
                          (Tunion []))
                         };
                       ft_ret =
                       { et_enforced = false;
                         et_type =
                         (Rhint (root|mutable.php line 12, characters 43-46),
                          (Tprim Tvoid))
                         };
                       ft_flags =
                       (make_ft_flags sync none ~return_disposable:false
                         ~returns_mutable:false ~returns_void_to_rx:false);
                       ft_reactive = Reactive {} }))
                 };
               fp_flags =
               (make_fp_flags ~mutability:none ~accept_disposable:false
                 ~has_default:false ~mode:FPnormal);
                }
              ];
            ft_implicit_params =
            { capability =
              (Rhint (root|mutable.php line 12, characters 10-10),
               (Tunion []))
              };
            ft_ret =
            { et_enforced = false;
              et_type =
              (Rhint (root|mutable.php line 12, characters 55-58),
               (Tprim Tvoid))
              };
            ft_flags =
            (make_ft_flags sync none ~return_disposable:false
              ~returns_mutable:false ~returns_void_to_rx:false);
            ft_reactive = Reactive {} }));
      fe_deprecated = None;  };
    "\\i" ->
    { fe_pos = [15:10-11];
      fe_type =
      (Rwitness (root|mutable.php line 15, characters 10-10),
       (Tfun
          { ft_arity = (Fstandard ()); ft_tparams = [];
            ft_where_constraints = [];
            ft_params =
            [{ fp_pos = [15:46-48]; fp_name = (Some "$a");
               fp_type =
               { et_enforced = false;
                 et_type =
                 (Rhint (root|mutable.php line 15, characters 12-44),
                  (Tfun
                     { ft_arity = (Fstandard ()); ft_tparams = [];
                       ft_where_constraints = []; ft_params = [];
                       ft_implicit_params =
                       { capability =
                         (Rhint (root|mutable.php line 15, characters 15-43),
                          (Tunion []))
                         };
                       ft_ret =
                       { et_enforced = false;
                         et_type =
                         (Rhint (root|mutable.php line 15, characters 41-41),
                          (Tapply (([15:41-42], "\\A"), [])))
                         };
                       ft_flags =
                       (make_ft_flags sync none ~return_disposable:false
                         ~returns_mutable:true ~returns_void_to_rx:false);
                       ft_reactive = Reactive {} }))
                 };
               fp_flags =
               (make_fp_flags ~mutability:none ~accept_disposable:false
                 ~has_default:false ~mode:FPnormal);
                }
              ];
            ft_implicit_params =
            { capability =
              (Rhint (root|mutable.php line 15, characters 10-10),
               (Tunion []))
              };
            ft_ret =
            { et_enforced = false;
              et_type =
              (Rhint (root|mutable.php line 15, characters 51-54),
               (Tprim Tvoid))
              };
            ft_flags =
            (make_ft_flags sync none ~return_disposable:false
              ~returns_mutable:false ~returns_void_to_rx:false);
            ft_reactive = Reactive {} }));
      fe_deprecated = None;  } };
  typedefs = {}; consts = {} }

They matched!
