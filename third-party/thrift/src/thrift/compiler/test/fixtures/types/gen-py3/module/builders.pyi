#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

import typing as _typing

import folly.iobuf as _fbthrift_iobuf
import thrift.py3.builder

import facebook.thrift.annotation.cpp.types as _facebook_thrift_annotation_cpp_types
import facebook.thrift.annotation.cpp.builders as _facebook_thrift_annotation_cpp_builders
import facebook.thrift.annotation.thrift.types as _facebook_thrift_annotation_thrift_types
import facebook.thrift.annotation.thrift.builders as _facebook_thrift_annotation_thrift_builders
import include.types as _include_types
import include.builders as _include_builders

import module.types as _module_types


class decorated_struct_Builder(thrift.py3.builder.StructBuilder):
    field: _typing.Optional[str]

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class ContainerStruct_Builder(thrift.py3.builder.StructBuilder):
    fieldA: _typing.Optional[list]
    fieldB: _typing.Optional[list]
    fieldC: _typing.Optional[list]
    fieldD: _typing.Optional[list]
    fieldE: _typing.Optional[list]
    fieldF: _typing.Optional[set]
    fieldG: _typing.Optional[dict]
    fieldH: _typing.Optional[dict]

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class CppTypeStruct_Builder(thrift.py3.builder.StructBuilder):
    fieldA: _typing.Optional[list]

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class VirtualStruct_Builder(thrift.py3.builder.StructBuilder):
    MyIntField: _typing.Optional[int]

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class MyStructWithForwardRefEnum_Builder(thrift.py3.builder.StructBuilder):
    a: _typing.Optional[_module_types.MyForwardRefEnum]
    b: _typing.Optional[_module_types.MyForwardRefEnum]

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class TrivialNumeric_Builder(thrift.py3.builder.StructBuilder):
    a: _typing.Optional[int]
    b: _typing.Optional[bool]

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class TrivialNestedWithDefault_Builder(thrift.py3.builder.StructBuilder):
    z: _typing.Optional[int]
    n: _typing.Any

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class ComplexString_Builder(thrift.py3.builder.StructBuilder):
    a: _typing.Optional[str]
    b: _typing.Optional[dict]

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class ComplexNestedWithDefault_Builder(thrift.py3.builder.StructBuilder):
    z: _typing.Optional[str]
    n: _typing.Any

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class MinPadding_Builder(thrift.py3.builder.StructBuilder):
    small: _typing.Optional[int]
    big: _typing.Optional[int]
    medium: _typing.Optional[int]
    biggish: _typing.Optional[int]
    tiny: _typing.Optional[int]

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class MinPaddingWithCustomType_Builder(thrift.py3.builder.StructBuilder):
    small: _typing.Optional[int]
    big: _typing.Optional[int]
    medium: _typing.Optional[int]
    biggish: _typing.Optional[int]
    tiny: _typing.Optional[int]

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class MyStruct_Builder(thrift.py3.builder.StructBuilder):
    MyIntField: _typing.Optional[int]
    MyStringField: _typing.Optional[str]
    majorVer: _typing.Optional[int]
    data: _typing.Any

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class MyDataItem_Builder(thrift.py3.builder.StructBuilder):

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class Renaming_Builder(thrift.py3.builder.StructBuilder):
    foo: _typing.Optional[int]

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class AnnotatedTypes_Builder(thrift.py3.builder.StructBuilder):
    binary_field: _typing.Optional[bytes]
    list_field: _typing.Optional[list]

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class ForwardUsageRoot_Builder(thrift.py3.builder.StructBuilder):
    ForwardUsageStruct: _typing.Any
    ForwardUsageByRef: _typing.Any

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class ForwardUsageStruct_Builder(thrift.py3.builder.StructBuilder):
    foo: _typing.Any

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class ForwardUsageByRef_Builder(thrift.py3.builder.StructBuilder):
    foo: _typing.Any

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class IncompleteMap_Builder(thrift.py3.builder.StructBuilder):
    field: _typing.Optional[dict]

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class IncompleteMapDep_Builder(thrift.py3.builder.StructBuilder):

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class CompleteMap_Builder(thrift.py3.builder.StructBuilder):
    field: _typing.Optional[dict]

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class CompleteMapDep_Builder(thrift.py3.builder.StructBuilder):

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class IncompleteList_Builder(thrift.py3.builder.StructBuilder):
    field: _typing.Optional[list]

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class IncompleteListDep_Builder(thrift.py3.builder.StructBuilder):

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class CompleteList_Builder(thrift.py3.builder.StructBuilder):
    field: _typing.Optional[list]

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class CompleteListDep_Builder(thrift.py3.builder.StructBuilder):

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class AdaptedList_Builder(thrift.py3.builder.StructBuilder):
    field: _typing.Optional[list]

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class DependentAdaptedList_Builder(thrift.py3.builder.StructBuilder):
    field: _typing.Optional[list]

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class AllocatorAware_Builder(thrift.py3.builder.StructBuilder):
    aa_list: _typing.Optional[list]
    aa_set: _typing.Optional[set]
    aa_map: _typing.Optional[dict]
    aa_string: _typing.Optional[str]
    not_a_container: _typing.Optional[int]
    aa_unique: _typing.Optional[int]
    aa_shared: _typing.Optional[int]

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class AllocatorAware2_Builder(thrift.py3.builder.StructBuilder):
    not_a_container: _typing.Optional[int]

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class TypedefStruct_Builder(thrift.py3.builder.StructBuilder):
    i32_field: _typing.Optional[int]
    IntTypedef_field: _typing.Optional[int]
    UintTypedef_field: _typing.Optional[int]

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class StructWithDoubleUnderscores_Builder(thrift.py3.builder.StructBuilder):
    __field: _typing.Optional[int]

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


