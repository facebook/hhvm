[(Fun
    { Aast.AnnotatedAST.f_annotation = (); f_mode = <opaque>;
      f_ret = (Some ([14:22-26], (Hprim Tvoid)));
      f_name = ([14:10-13], "\\foo"); f_tparams = [];
      f_where_constraints = []; f_variadic = FVnonVariadic;
      f_params =
      [{ Aast.AnnotatedAST.param_annotation = ([14:17-19], ?A);
         param_hint =
         (Some ([14:14-16],
                (Hoption ([14:15-16], (Happly (([14:15-16], "\\A"), []))))));
         param_is_reference = false; param_is_variadic = false;
         param_pos = [14:17-19]; param_name = "$x"; param_expr = None;
         param_callconv = None; param_user_attributes = [] }
        ];
      f_body =
      (NamedBody
         { Aast.AnnotatedAST.fnb_nast =
           [(Expr
               (([15:3-26], void),
                (Assert
                   (AE_assert
                      (([15:10-25], bool),
                       (InstanceOf (
                          (([15:10-12], ?A), (Lvar ([15:10-12], $x))),
                          (([15:24-25], A), (CI (([15:24-25], "\\A"), []))))))))))
             ];
           fnb_unsafe = false });
      f_fun_kind = FSync; f_user_attributes = []; f_ret_by_ref = false;
      f_external = false });
  (Class
     { Aast.AnnotatedAST.c_annotation = (); c_mode = <opaque>;
       c_final = false; c_is_xhp = false; c_kind = Cnormal;
       c_name = ([12:7-8], "\\A"); c_tparams = <opaque>; c_extends = [];
       c_uses = []; c_xhp_attr_uses = []; c_xhp_category = [];
       c_req_extends = []; c_req_implements = []; c_implements = [];
       c_consts = []; c_typeconsts = []; c_static_vars = []; c_vars = [];
       c_constructor = None; c_static_methods = []; c_methods = [];
       c_user_attributes = []; c_enum = None })
  ]
