{
    "preamble": "",
    "consts": [
    ],
    "funcs": [
        {
            "name": "hash",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns a string containing the calculated message digest as lowercase hexits unless raw_output is set to true in which case the raw binary representation of the message digest is returned."
            },
            "args": [
                {
                    "name": "algo",
                    "type": "String",
                    "desc": "Name of selected hashing algorithm (i.e. \"md5\", \"sha256\", \"haval160,4\", etc..)"
                },
                {
                    "name": "data",
                    "type": "String",
                    "desc": "Message to be hashed."
                },
                {
                    "name": "raw_output",
                    "type": "Boolean",
                    "value": "false",
                    "desc": "When set to TRUE, outputs raw binary data. FALSE outputs lowercase hexits."
                }
            ]
        },
        {
            "name": "hash_algos",
            "flags": [
            ],
            "return": {
                "type": "StringVec",
                "desc": "Returns a numerically indexed array containing the list of supported hashing algorithms."
            },
            "args": [
            ]
        },
        {
            "name": "hash_init",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns a Hashing Context resource for use with hash_update(), hash_update_stream(), hash_update_file(), and hash_final()."
            },
            "args": [
                {
                    "name": "algo",
                    "type": "String",
                    "desc": "Name of selected hashing algorithm (i.e. \"md5\", \"sha256\", \"haval160,4\", etc..)"
                },
                {
                    "name": "options",
                    "type": "Int32",
                    "value": "0",
                    "desc": "Optional settings for hash generation, currently supports only one option: HASH_HMAC. When specified, the key must be specified."
                },
                {
                    "name": "key",
                    "type": "String",
                    "value": "null_string",
                    "desc": "When HASH_HMAC is specified for options, a shared secret key to be used with the HMAC hashing method must be supplied in this parameter."
                }
            ]
        },
        {
            "name": "hash_file",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns a string containing the calculated message digest as lowercase hexits unless raw_output is set to true in which case the raw binary representation of the message digest is returned."
            },
            "args": [
                {
                    "name": "algo",
                    "type": "String",
                    "desc": "Name of selected hashing algorithm (i.e. \"md5\", \"sha256\", \"haval160,4\", etc..)"
                },
                {
                    "name": "filename",
                    "type": "String",
                    "desc": "URL describing location of file to be hashed; Supports fopen wrappers."
                },
                {
                    "name": "raw_output",
                    "type": "Boolean",
                    "value": "false",
                    "desc": "When set to TRUE, outputs raw binary data. FALSE outputs lowercase hexits."
                }
            ]
        },
        {
            "name": "hash_final",
            "flags": [
            ],
            "return": {
                "type": "String",
                "desc": "Returns a string containing the calculated message digest as lowercase hexits unless raw_output is set to true in which case the raw binary representation of the message digest is returned."
            },
            "args": [
                {
                    "name": "context",
                    "type": "Resource",
                    "desc": "Hashing context returned by hash_init()."
                },
                {
                    "name": "raw_output",
                    "type": "Boolean",
                    "value": "false",
                    "desc": "When set to TRUE, outputs raw binary data. FALSE outputs lowercase hexits."
                }
            ]
        },
        {
            "name": "hash_hmac_file",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns a string containing the calculated message digest as lowercase hexits unless raw_output is set to true in which case the raw binary representation of the message digest is returned."
            },
            "args": [
                {
                    "name": "algo",
                    "type": "String",
                    "desc": "Name of selected hashing algorithm (i.e. \"md5\", \"sha256\", \"haval160,4\", etc..) See hash_algos() for a list of supported algorithms."
                },
                {
                    "name": "filename",
                    "type": "String",
                    "desc": "URL describing location of file to be hashed; Supports fopen wrappers."
                },
                {
                    "name": "key",
                    "type": "String",
                    "desc": "Shared secret key used for generating the HMAC variant of the message digest."
                },
                {
                    "name": "raw_output",
                    "type": "Boolean",
                    "value": "false",
                    "desc": "When set to TRUE, outputs raw binary data. FALSE outputs lowercase hexits."
                }
            ]
        },
        {
            "name": "hash_hmac",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns a string containing the calculated message digest as lowercase hexits unless raw_output is set to true in which case the raw binary representation of the message digest is returned."
            },
            "args": [
                {
                    "name": "algo",
                    "type": "String",
                    "desc": "Name of selected hashing algorithm (i.e. \"md5\", \"sha256\", \"haval160,4\", etc..) See hash_algos() for a list of supported algorithms."
                },
                {
                    "name": "data",
                    "type": "String",
                    "desc": "Message to be hashed."
                },
                {
                    "name": "key",
                    "type": "String",
                    "desc": "Shared secret key used for generating the HMAC variant of the message digest."
                },
                {
                    "name": "raw_output",
                    "type": "Boolean",
                    "value": "false",
                    "desc": "When set to TRUE, outputs raw binary data. FALSE outputs lowercase hexits."
                }
            ]
        },
        {
            "name": "hash_update_file",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "init_context",
                    "type": "Resource",
                    "desc": "Hashing context returned by hash_init()."
                },
                {
                    "name": "filename",
                    "type": "String",
                    "desc": "URL describing location of file to be hashed; Supports fopen wrappers."
                },
                {
                    "name": "stream_context",
                    "type": "Resource",
                    "value": "null",
                    "desc": "Stream context as returned by stream_context_create()."
                }
            ]
        },
        {
            "name": "hash_update_stream",
            "flags": [
            ],
            "return": {
                "type": "Int64",
                "desc": "Actual number of bytes added to the hashing context from handle."
            },
            "args": [
                {
                    "name": "context",
                    "type": "Resource",
                    "desc": "Hashing context returned by hash_init()."
                },
                {
                    "name": "handle",
                    "type": "Resource",
                    "desc": "Open file handle as returned by any stream creation function."
                },
                {
                    "name": "length",
                    "type": "Int32",
                    "value": "-1",
                    "desc": "Maximum number of characters to copy from handle into the hashing context."
                }
            ]
        },
        {
            "name": "hash_update",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE."
            },
            "args": [
                {
                    "name": "context",
                    "type": "Resource",
                    "desc": "Hashing context returned by hash_init()."
                },
                {
                    "name": "data",
                    "type": "String",
                    "desc": "Message to be included in the hash digest."
                }
            ]
        },
        {
            "name": "furchash_hphp_ext",
            "flags": [
            ],
            "return": {
                "type": "Int64",
                "desc": "Returns a number in the range of 0-(nPart-1)"
            },
            "args": [
                {
                    "name": "key",
                    "type": "String",
                    "desc": "The key to hash"
                },
                {
                    "name": "len",
                    "type": "Int32",
                    "desc": "Number of bytes to use from the hash"
                },
                {
                    "name": "nPart",
                    "type": "Int32",
                    "desc": "The number of buckets"
                }
            ]
        },
        {
            "name": "furchash_hphp_ext_supported",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns whether furchash extension is supported"
            },
            "args": [
            ]
        },
        {
            "name": "hphp_murmurhash",
            "flags": [
            ],
            "return": {
                "type": "Int64",
                "desc": "Returns the Int64 hash of the first len input characters"
            },
            "args": [
                {
                    "name": "key",
                    "type": "String",
                    "desc": "The key to hash"
                },
                {
                    "name": "len",
                    "type": "Int32",
                    "desc": "Number of bytes to use from the hash"
                },
                {
                    "name": "seed",
                    "type": "Int32",
                    "desc": "The seed to use for hashing"
                }
            ]
        }
    ],
    "classes": [
    ]
}