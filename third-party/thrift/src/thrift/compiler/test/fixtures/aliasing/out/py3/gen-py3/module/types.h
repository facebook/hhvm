/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/aliasing/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#pragma once

#include <functional>
#include <folly/Range.h>

#include "thrift/compiler/test/fixtures/aliasing/gen-cpp2/module_data.h"
#include "thrift/compiler/test/fixtures/aliasing/gen-cpp2/module_types.h"
#include "thrift/compiler/test/fixtures/aliasing/gen-cpp2/module_metadata.h"
namespace thrift {
namespace py3 {



template<>
inline void reset_field<::facebook::thrift::compiler::test::fixtures::aliasing::Foo>(
    ::facebook::thrift::compiler::test::fixtures::aliasing::Foo& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.other_foo_ref().copy_from(default_inst<::facebook::thrift::compiler::test::fixtures::aliasing::Foo>().other_foo_ref());
      return;
    case 1:
      obj.yet_another_foo_ref().copy_from(default_inst<::facebook::thrift::compiler::test::fixtures::aliasing::Foo>().yet_another_foo_ref());
      return;
  }
}

template<>
inline const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::facebook::thrift::compiler::test::fixtures::aliasing::Foo>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}
} // namespace py3
} // namespace thrift
