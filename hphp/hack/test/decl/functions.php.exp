[("\\simple_function",
  (Shallow_decl_defs.Fun
     { Typing_defs.fe_deprecated = None; fe_module = None; fe_package = None;
       fe_internal = false;
       fe_type =
       (Rwitness_from_decl ([3:10-25]),
        (Tfun
           { ft_tparams = []; ft_where_constraints = []; ft_params = [];
             ft_implicit_params = { capability = (CapDefaults [3:10-25]) };
             ft_ret = (Rhint ([3:29-33]), (Tprim Tvoid));
             ft_flags =
             { Typing_defs_flags.Fun.return_disposable = false;
               async = false; generator = false; fun_kind = FSync;
               is_function_pointer = false; returns_readonly = false;
               readonly_this = false; support_dynamic_type = false;
               is_memoized = false; variadic = false };
             ft_cross_package = None; ft_instantiated = true }));
       fe_pos = [3:10-25]; fe_php_std_lib = false;
       fe_support_dynamic_type = false; fe_no_auto_dynamic = false;
       fe_no_auto_likes = false }));
  ("\\simple_int_function",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_package = None; fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([4:10-29]),
         (Tfun
            { ft_tparams = []; ft_where_constraints = []; ft_params = [];
              ft_implicit_params = { capability = (CapDefaults [4:10-29]) };
              ft_ret = (Rhint ([4:33-36]), (Tprim Tint));
              ft_flags =
              { Typing_defs_flags.Fun.return_disposable = false;
                async = false; generator = false; fun_kind = FSync;
                is_function_pointer = false; returns_readonly = false;
                readonly_this = false; support_dynamic_type = false;
                is_memoized = false; variadic = false };
              ft_cross_package = None; ft_instantiated = true }));
        fe_pos = [4:10-29]; fe_php_std_lib = false;
        fe_support_dynamic_type = false; fe_no_auto_dynamic = false;
        fe_no_auto_likes = false }));
  ("\\simple_function_with_body",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_package = None; fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([7:10-35]),
         (Tfun
            { ft_tparams = []; ft_where_constraints = []; ft_params = [];
              ft_implicit_params = { capability = (CapDefaults [7:10-35]) };
              ft_ret = (Rhint ([7:39-44]), (Tprim Tfloat));
              ft_flags =
              { Typing_defs_flags.Fun.return_disposable = false;
                async = false; generator = false; fun_kind = FSync;
                is_function_pointer = false; returns_readonly = false;
                readonly_this = false; support_dynamic_type = false;
                is_memoized = false; variadic = false };
              ft_cross_package = None; ft_instantiated = true }));
        fe_pos = [7:10-35]; fe_php_std_lib = false;
        fe_support_dynamic_type = false; fe_no_auto_dynamic = false;
        fe_no_auto_likes = false }));
  ("\\function_with_args",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_package = None; fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([11:10-28]),
         (Tfun
            { ft_tparams = []; ft_where_constraints = [];
              ft_params =
              [{ fp_pos = [11:33-38]; fp_name = (Some "$arg1");
                 fp_type = (Rhint ([11:29-32]), (Tprim Tint));
                 fp_flags =
                 { Typing_defs_flags.FunParam.accept_disposable = false;
                   inout = false; is_optional = false; readonly = false;
                   ignore_readonly_error = false; splat = false;
                   named = false };
                 fp_def_value = None };
                { fp_pos = [11:46-51]; fp_name = (Some "$arg2");
                  fp_type = (Rhint ([11:40-45]), (Tprim Tfloat));
                  fp_flags =
                  { Typing_defs_flags.FunParam.accept_disposable = false;
                    inout = false; is_optional = false; readonly = false;
                    ignore_readonly_error = false; splat = false;
                    named = false };
                  fp_def_value = None }
                ];
              ft_implicit_params = { capability = (CapDefaults [11:10-28]) };
              ft_ret = (Rhint ([11:54-58]), (Tprim Tvoid));
              ft_flags =
              { Typing_defs_flags.Fun.return_disposable = false;
                async = false; generator = false; fun_kind = FSync;
                is_function_pointer = false; returns_readonly = false;
                readonly_this = false; support_dynamic_type = false;
                is_memoized = false; variadic = false };
              ft_cross_package = None; ft_instantiated = true }));
        fe_pos = [11:10-28]; fe_php_std_lib = false;
        fe_support_dynamic_type = false; fe_no_auto_dynamic = false;
        fe_no_auto_likes = false }));
  ("\\Typedef",
   (Shallow_decl_defs.Typedef
      { Typing_defs.td_module = None; td_pos = [13:6-13]; td_tparams = [];
        td_as_constraint = None; td_super_constraint = None;
        td_type_assignment =
        (Typing_defs.SimpleTypeDef (Transparent,
           (Rhint ([13:16-22]), (Tprim Tstring))));
        td_is_ctx = false; td_attributes = []; td_internal = false;
        td_docs_url = None; td_package = None }));
  ("\\function_with_non_primitive_args",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_package = None; fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([14:10-42]),
         (Tfun
            { ft_tparams = []; ft_where_constraints = [];
              ft_params =
              [{ fp_pos = [14:51-56]; fp_name = (Some "$arg1");
                 fp_type =
                 (Rhint ([14:43-50]),
                  (Tapply (([14:43-50], "\\Typedef"), [])));
                 fp_flags =
                 { Typing_defs_flags.FunParam.accept_disposable = false;
                   inout = false; is_optional = false; readonly = false;
                   ignore_readonly_error = false; splat = false;
                   named = false };
                 fp_def_value = None }
                ];
              ft_implicit_params = { capability = (CapDefaults [14:10-42]) };
              ft_ret =
              (Rhint ([14:59-66]), (Tapply (([14:59-66], "\\Typedef"), [])));
              ft_flags =
              { Typing_defs_flags.Fun.return_disposable = false;
                async = false; generator = false; fun_kind = FSync;
                is_function_pointer = false; returns_readonly = false;
                readonly_this = false; support_dynamic_type = false;
                is_memoized = false; variadic = false };
              ft_cross_package = None; ft_instantiated = true }));
        fe_pos = [14:10-42]; fe_php_std_lib = false;
        fe_support_dynamic_type = false; fe_no_auto_dynamic = false;
        fe_no_auto_likes = false }));
  ("\\test_generic_fun",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_package = None; fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([18:10-26]),
         (Tfun
            { ft_tparams =
              [{ Typing_defs_core.tp_variance = Invariant;
                 tp_name = ([18:27-28], "T"); tp_constraints = [];
                 tp_reified = Erased; tp_user_attributes = [] }
                ];
              ft_where_constraints = [];
              ft_params =
              [{ fp_pos = [18:32-37]; fp_name = (Some "$arg1");
                 fp_type = (Rhint ([18:30-31]), (Tgeneric "T"));
                 fp_flags =
                 { Typing_defs_flags.FunParam.accept_disposable = false;
                   inout = false; is_optional = false; readonly = false;
                   ignore_readonly_error = false; splat = false;
                   named = false };
                 fp_def_value = None }
                ];
              ft_implicit_params = { capability = (CapDefaults [18:10-26]) };
              ft_ret = (Rhint ([18:40-41]), (Tgeneric "T"));
              ft_flags =
              { Typing_defs_flags.Fun.return_disposable = false;
                async = false; generator = false; fun_kind = FSync;
                is_function_pointer = false; returns_readonly = false;
                readonly_this = false; support_dynamic_type = false;
                is_memoized = false; variadic = false };
              ft_cross_package = None; ft_instantiated = true }));
        fe_pos = [18:10-26]; fe_php_std_lib = false;
        fe_support_dynamic_type = false; fe_no_auto_dynamic = false;
        fe_no_auto_likes = false }));
  ("\\test_constrained_generic_fun",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_package = None; fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([22:10-38]),
         (Tfun
            { ft_tparams =
              [{ Typing_defs_core.tp_variance = Invariant;
                 tp_name = ([22:39-41], "T1");
                 tp_constraints =
                 [(Constraint_super, (Rhint ([22:48-51]), (Tprim Tint)))];
                 tp_reified = Erased; tp_user_attributes = [] };
                { Typing_defs_core.tp_variance = Invariant;
                  tp_name = ([22:53-55], "T2");
                  tp_constraints =
                  [(Constraint_as, (Rhint ([22:59-65]), (Tprim Tstring)))];
                  tp_reified = Erased; tp_user_attributes = [] }
                ];
              ft_where_constraints = [];
              ft_params =
              [{ fp_pos = [23:6-11]; fp_name = (Some "$arg1");
                 fp_type = (Rhint ([23:3-5]), (Tgeneric "T1"));
                 fp_flags =
                 { Typing_defs_flags.FunParam.accept_disposable = false;
                   inout = false; is_optional = false; readonly = false;
                   ignore_readonly_error = false; splat = false;
                   named = false };
                 fp_def_value = None };
                { fp_pos = [24:6-11]; fp_name = (Some "$arg2");
                  fp_type = (Rhint ([24:3-5]), (Tgeneric "T2"));
                  fp_flags =
                  { Typing_defs_flags.FunParam.accept_disposable = false;
                    inout = false; is_optional = false; readonly = false;
                    ignore_readonly_error = false; splat = false;
                    named = false };
                  fp_def_value = None }
                ];
              ft_implicit_params = { capability = (CapDefaults [22:10-38]) };
              ft_ret = (Rhint ([25:4-6]), (Tgeneric "T1"));
              ft_flags =
              { Typing_defs_flags.Fun.return_disposable = false;
                async = false; generator = false; fun_kind = FSync;
                is_function_pointer = false; returns_readonly = false;
                readonly_this = false; support_dynamic_type = false;
                is_memoized = false; variadic = false };
              ft_cross_package = None; ft_instantiated = true }));
        fe_pos = [22:10-38]; fe_php_std_lib = false;
        fe_support_dynamic_type = false; fe_no_auto_dynamic = false;
        fe_no_auto_likes = false }));
  ("\\test_returns_generic",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_package = None; fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([29:10-30]),
         (Tfun
            { ft_tparams = []; ft_where_constraints = []; ft_params = [];
              ft_implicit_params = { capability = (CapDefaults [29:10-30]) };
              ft_ret =
              (Rhint ([29:34-53]),
               (Tapply (([29:34-48], "\\HH\\Traversable"),
                  [(Rhint ([29:49-52]), (Tprim Tint))])));
              ft_flags =
              { Typing_defs_flags.Fun.return_disposable = false;
                async = false; generator = false; fun_kind = FSync;
                is_function_pointer = false; returns_readonly = false;
                readonly_this = false; support_dynamic_type = false;
                is_memoized = false; variadic = false };
              ft_cross_package = None; ft_instantiated = true }));
        fe_pos = [29:10-30]; fe_php_std_lib = false;
        fe_support_dynamic_type = false; fe_no_auto_dynamic = false;
        fe_no_auto_likes = false }));
  ("\\takes_optional",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_package = None; fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([33:10-24]),
         (Tfun
            { ft_tparams = []; ft_where_constraints = [];
              ft_params =
              [{ fp_pos = [33:30-32]; fp_name = (Some "$x");
                 fp_type =
                 (Rhint ([33:25-29]),
                  (Toption (Rhint ([33:26-29]), (Tprim Tint))));
                 fp_flags =
                 { Typing_defs_flags.FunParam.accept_disposable = false;
                   inout = false; is_optional = false; readonly = false;
                   ignore_readonly_error = false; splat = false;
                   named = false };
                 fp_def_value = None }
                ];
              ft_implicit_params = { capability = (CapDefaults [33:10-24]) };
              ft_ret = (Rhint ([33:35-39]), (Tprim Tvoid));
              ft_flags =
              { Typing_defs_flags.Fun.return_disposable = false;
                async = false; generator = false; fun_kind = FSync;
                is_function_pointer = false; returns_readonly = false;
                readonly_this = false; support_dynamic_type = false;
                is_memoized = false; variadic = false };
              ft_cross_package = None; ft_instantiated = true }));
        fe_pos = [33:10-24]; fe_php_std_lib = false;
        fe_support_dynamic_type = false; fe_no_auto_dynamic = false;
        fe_no_auto_likes = false }));
  ("\\in_out",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_package = None; fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([35:10-16]),
         (Tfun
            { ft_tparams = []; ft_where_constraints = [];
              ft_params =
              [{ fp_pos = [35:27-29]; fp_name = (Some "$x");
                 fp_type = (Rhint ([35:23-26]), (Tprim Tint));
                 fp_flags =
                 { Typing_defs_flags.FunParam.accept_disposable = false;
                   inout = true; is_optional = false; readonly = false;
                   ignore_readonly_error = false; splat = false;
                   named = false };
                 fp_def_value = None }
                ];
              ft_implicit_params = { capability = (CapDefaults [35:10-16]) };
              ft_ret = (Rhint ([35:32-36]), (Tprim Tvoid));
              ft_flags =
              { Typing_defs_flags.Fun.return_disposable = false;
                async = false; generator = false; fun_kind = FSync;
                is_function_pointer = false; returns_readonly = false;
                readonly_this = false; support_dynamic_type = false;
                is_memoized = false; variadic = false };
              ft_cross_package = None; ft_instantiated = true }));
        fe_pos = [35:10-16]; fe_php_std_lib = false;
        fe_support_dynamic_type = false; fe_no_auto_dynamic = false;
        fe_no_auto_likes = false }));
  ("\\takes_returns_function_type",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_package = None; fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([37:10-37]),
         (Tfun
            { ft_tparams =
              [{ Typing_defs_core.tp_variance = Invariant;
                 tp_name = ([37:38-40], "Tu"); tp_constraints = [];
                 tp_reified = Erased; tp_user_attributes = [] }
                ];
              ft_where_constraints = [];
              ft_params =
              [{ fp_pos = [38:6-8]; fp_name = (Some "$x");
                 fp_type = (Rhint ([38:3-5]), (Tgeneric "Tu"));
                 fp_flags =
                 { Typing_defs_flags.FunParam.accept_disposable = false;
                   inout = false; is_optional = false; readonly = false;
                   ignore_readonly_error = false; splat = false;
                   named = false };
                 fp_def_value = None };
                { fp_pos = [39:24-31]; fp_name = (Some "$unused");
                  fp_type =
                  (Rhint ([39:3-23]),
                   (Tfun
                      { ft_tparams = []; ft_where_constraints = [];
                        ft_params =
                        [{ fp_pos = [39:13-15]; fp_name = None;
                           fp_type = (Rhint ([39:13-15]), (Tgeneric "Tu"));
                           fp_flags =
                           { Typing_defs_flags.FunParam.accept_disposable =
                             false; inout = false; is_optional = false;
                             readonly = false; ignore_readonly_error = false;
                             splat = false; named = false };
                           fp_def_value = None }
                          ];
                        ft_implicit_params =
                        { capability = (CapDefaults [39:3-23]) };
                        ft_ret = (Rhint ([39:18-22]), (Tprim Tvoid));
                        ft_flags =
                        { Typing_defs_flags.Fun.return_disposable = false;
                          async = false; generator = false; fun_kind = FSync;
                          is_function_pointer = false;
                          returns_readonly = false; readonly_this = false;
                          support_dynamic_type = false; is_memoized = false;
                          variadic = false };
                        ft_cross_package = None; ft_instantiated = true }));
                  fp_flags =
                  { Typing_defs_flags.FunParam.accept_disposable = false;
                    inout = false; is_optional = false; readonly = false;
                    ignore_readonly_error = false; splat = false;
                    named = false };
                  fp_def_value = None }
                ];
              ft_implicit_params = { capability = (CapDefaults [37:10-37]) };
              ft_ret =
              (Rhint ([40:4-42]),
               (Tfun
                  { ft_tparams = []; ft_where_constraints = [];
                    ft_params =
                    [{ fp_pos = [40:14-34]; fp_name = None;
                       fp_type =
                       (Rhint ([40:14-34]),
                        (Tfun
                           { ft_tparams = []; ft_where_constraints = [];
                             ft_params =
                             [{ fp_pos = [40:24-26]; fp_name = None;
                                fp_type =
                                (Rhint ([40:24-26]), (Tgeneric "Tu"));
                                fp_flags =
                                { Typing_defs_flags.FunParam.accept_disposable =
                                  false; inout = false; is_optional = false;
                                  readonly = false;
                                  ignore_readonly_error = false;
                                  splat = false; named = false };
                                fp_def_value = None }
                               ];
                             ft_implicit_params =
                             { capability = (CapDefaults [40:14-34]) };
                             ft_ret = (Rhint ([40:29-33]), (Tprim Tvoid));
                             ft_flags =
                             { Typing_defs_flags.Fun.return_disposable =
                               false; async = false; generator = false;
                               fun_kind = FSync; is_function_pointer = false;
                               returns_readonly = false;
                               readonly_this = false;
                               support_dynamic_type = false;
                               is_memoized = false; variadic = false };
                             ft_cross_package = None; ft_instantiated = true
                             }));
                       fp_flags =
                       { Typing_defs_flags.FunParam.accept_disposable = false;
                         inout = false; is_optional = false;
                         readonly = false; ignore_readonly_error = false;
                         splat = false; named = false };
                       fp_def_value = None }
                      ];
                    ft_implicit_params =
                    { capability = (CapDefaults [40:4-42]) };
                    ft_ret = (Rhint ([40:37-41]), (Tprim Tvoid));
                    ft_flags =
                    { Typing_defs_flags.Fun.return_disposable = false;
                      async = false; generator = false; fun_kind = FSync;
                      is_function_pointer = false; returns_readonly = false;
                      readonly_this = false; support_dynamic_type = false;
                      is_memoized = false; variadic = false };
                    ft_cross_package = None; ft_instantiated = true }));
              ft_flags =
              { Typing_defs_flags.Fun.return_disposable = false;
                async = false; generator = false; fun_kind = FSync;
                is_function_pointer = false; returns_readonly = false;
                readonly_this = false; support_dynamic_type = false;
                is_memoized = false; variadic = false };
              ft_cross_package = None; ft_instantiated = true }));
        fe_pos = [37:10-37]; fe_php_std_lib = false;
        fe_support_dynamic_type = false; fe_no_auto_dynamic = false;
        fe_no_auto_likes = false }));
  ("\\takes_returns_dict",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_package = None; fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([46:10-28]),
         (Tfun
            { ft_tparams = []; ft_where_constraints = [];
              ft_params =
              [{ fp_pos = [46:48-50]; fp_name = (Some "$m");
                 fp_type =
                 (Rhint ([46:29-47]),
                  (Tapply (([46:29-33], "\\HH\\dict"),
                     [(Rhint ([46:34-40]), (Tprim Tstring));
                       (Rhint ([46:42-46]), (Tprim Tbool))]
                     )));
                 fp_flags =
                 { Typing_defs_flags.FunParam.accept_disposable = false;
                   inout = false; is_optional = false; readonly = false;
                   ignore_readonly_error = false; splat = false;
                   named = false };
                 fp_def_value = None }
                ];
              ft_implicit_params = { capability = (CapDefaults [46:10-28]) };
              ft_ret =
              (Rhint ([46:53-71]),
               (Tapply (([46:53-57], "\\HH\\dict"),
                  [(Rhint ([46:58-64]), (Tprim Tstring));
                    (Rhint ([46:66-70]), (Tprim Tbool))]
                  )));
              ft_flags =
              { Typing_defs_flags.Fun.return_disposable = false;
                async = false; generator = false; fun_kind = FSync;
                is_function_pointer = false; returns_readonly = false;
                readonly_this = false; support_dynamic_type = false;
                is_memoized = false; variadic = false };
              ft_cross_package = None; ft_instantiated = true }));
        fe_pos = [46:10-28]; fe_php_std_lib = false;
        fe_support_dynamic_type = false; fe_no_auto_dynamic = false;
        fe_no_auto_likes = false }));
  ("\\C",
   (Shallow_decl_defs.Class
      { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
        sc_abstract = false; sc_is_xhp = false; sc_internal = false;
        sc_has_xhp_keyword = false; sc_kind = (Cclass Concrete);
        sc_module = None; sc_name = ([50:7-8], "\\C"); sc_tparams = [];
        sc_extends = []; sc_uses = []; sc_xhp_attr_uses = [];
        sc_xhp_enum_values = {}; sc_xhp_marked_empty = false;
        sc_req_extends = []; sc_req_implements = []; sc_req_constraints = [];
        sc_implements = []; sc_support_dynamic_type = false; sc_consts = [];
        sc_typeconsts = []; sc_props = []; sc_sprops = [];
        sc_constructor = None; sc_static_methods = []; sc_methods = [];
        sc_user_attributes = []; sc_enum_type = None; sc_docs_url = None;
        sc_package = None }));
  ("\\null_type_hint",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_package = None; fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([52:10-24]),
         (Tfun
            { ft_tparams =
              [{ Typing_defs_core.tp_variance = Invariant;
                 tp_name = ([52:25-26], "T");
                 tp_constraints =
                 [(Constraint_as, (Rhint ([52:30-37]), (Tunion [])))];
                 tp_reified = Erased; tp_user_attributes = [] }
                ];
              ft_where_constraints = [];
              ft_params =
              [{ fp_pos = [52:42-44]; fp_name = (Some "$x");
                 fp_type =
                 (Rhint ([52:39-41]),
                  (Toption (Rhint ([52:40-41]), (Tgeneric "T"))));
                 fp_flags =
                 { Typing_defs_flags.FunParam.accept_disposable = false;
                   inout = false; is_optional = false; readonly = false;
                   ignore_readonly_error = false; splat = false;
                   named = false };
                 fp_def_value = None }
                ];
              ft_implicit_params = { capability = (CapDefaults [52:10-24]) };
              ft_ret = (Rhint ([52:47-51]), (Tprim Tnull));
              ft_flags =
              { Typing_defs_flags.Fun.return_disposable = false;
                async = false; generator = false; fun_kind = FSync;
                is_function_pointer = false; returns_readonly = false;
                readonly_this = false; support_dynamic_type = false;
                is_memoized = false; variadic = false };
              ft_cross_package = None; ft_instantiated = true }));
        fe_pos = [52:10-24]; fe_php_std_lib = false;
        fe_support_dynamic_type = false; fe_no_auto_dynamic = false;
        fe_no_auto_likes = false }));
  ("\\resource_type_hint",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_package = None; fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([56:10-28]),
         (Tfun
            { ft_tparams = []; ft_where_constraints = [];
              ft_params =
              [{ fp_pos = [56:38-40]; fp_name = (Some "$i");
                 fp_type = (Rhint ([56:29-37]), (Tprim Tresource));
                 fp_flags =
                 { Typing_defs_flags.FunParam.accept_disposable = false;
                   inout = false; is_optional = false; readonly = false;
                   ignore_readonly_error = false; splat = false;
                   named = false };
                 fp_def_value = None }
                ];
              ft_implicit_params = { capability = (CapDefaults [56:10-28]) };
              ft_ret = (Rhint ([56:43-51]), (Tprim Tresource));
              ft_flags =
              { Typing_defs_flags.Fun.return_disposable = false;
                async = false; generator = false; fun_kind = FSync;
                is_function_pointer = false; returns_readonly = false;
                readonly_this = false; support_dynamic_type = false;
                is_memoized = false; variadic = false };
              ft_cross_package = None; ft_instantiated = true }));
        fe_pos = [56:10-28]; fe_php_std_lib = false;
        fe_support_dynamic_type = false; fe_no_auto_dynamic = false;
        fe_no_auto_likes = false }));
  ("\\noreturn_type_hint",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_package = None; fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([60:10-28]),
         (Tfun
            { ft_tparams = []; ft_where_constraints = []; ft_params = [];
              ft_implicit_params = { capability = (CapDefaults [60:10-28]) };
              ft_ret = (Rhint ([60:32-40]), (Tprim Tnoreturn));
              ft_flags =
              { Typing_defs_flags.Fun.return_disposable = false;
                async = false; generator = false; fun_kind = FSync;
                is_function_pointer = false; returns_readonly = false;
                readonly_this = false; support_dynamic_type = false;
                is_memoized = false; variadic = false };
              ft_cross_package = None; ft_instantiated = true }));
        fe_pos = [60:10-28]; fe_php_std_lib = false;
        fe_support_dynamic_type = false; fe_no_auto_dynamic = false;
        fe_no_auto_likes = false }));
  ("\\variadic_function",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_package = None; fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([65:10-27]),
         (Tfun
            { ft_tparams = []; ft_where_constraints = [];
              ft_params =
              [{ fp_pos = [65:37-42]; fp_name = (Some "$args");
                 fp_type = (Rvar_param_from_decl ([65:37-42]), Tmixed);
                 fp_flags =
                 { Typing_defs_flags.FunParam.accept_disposable = false;
                   inout = false; is_optional = false; readonly = false;
                   ignore_readonly_error = false; splat = false;
                   named = false };
                 fp_def_value = None }
                ];
              ft_implicit_params = { capability = (CapDefaults [65:10-27]) };
              ft_ret = (Rhint ([65:45-49]), (Tprim Tvoid));
              ft_flags =
              { Typing_defs_flags.Fun.return_disposable = false;
                async = false; generator = false; fun_kind = FSync;
                is_function_pointer = false; returns_readonly = false;
                readonly_this = false; support_dynamic_type = false;
                is_memoized = false; variadic = true };
              ft_cross_package = None; ft_instantiated = true }));
        fe_pos = [65:10-27]; fe_php_std_lib = false;
        fe_support_dynamic_type = false; fe_no_auto_dynamic = false;
        fe_no_auto_likes = false }))
  ]
