{
  "refid": "protocol_2Patch_8h",
  "kind": "file",
  "language": "C++",
  "compoundname_html": "Patch.h",
  "includes": [
    {
      "local": "no",
      "text_html": "folly/Portability.h"
    },
    {
      "local": "no",
      "text_html": "thrift/lib/cpp2/protocol/Object.h"
    },
    {
      "local": "no",
      "text_html": "thrift/lib/thrift/detail/protocol.h"
    },
    {
      "local": "no",
      "text_html": "thrift/lib/thrift/gen-cpp2/field_mask_types.h"
    }
  ],
  "innerclass": [
    {
      "refid": "structapache_1_1thrift_1_1protocol_1_1detail_1_1ApplyPatch",
      "prot": "public",
      "text_html": "apache::thrift::protocol::detail::ApplyPatch"
    },
    {
      "refid": "structapache_1_1thrift_1_1protocol_1_1ExtractedMasks",
      "prot": "public",
      "text_html": "apache::thrift::protocol::ExtractedMasks"
    }
  ],
  "innernamespace": [
    {
      "refid": "namespaceapache",
      "text_html": "apache"
    },
    {
      "refid": "namespaceapache_1_1thrift",
      "text_html": "apache::thrift"
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1protocol",
      "text_html": "apache::thrift::protocol"
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1protocol_1_1detail",
      "text_html": "apache::thrift::protocol::detail"
    }
  ],
  "file_location": {
    "file": "fbcode/thrift/lib/cpp2/protocol/Patch.h"
  },
  "filepath": "file/thrift/lib/cpp2/protocol/Patch.h",
  "href": "/ref/cpp/thrift/lib/cpp2/protocol/Patch.h",
  "free_vars": [
    {
      "refid": "namespaceapache_1_1thrift_1_1protocol_1a6fc3260a68f9fdbe44341b22e4fe2e4f",
      "prot": "public",
      "static": "no",
      "mutable": "no",
      "type_html": "FOLLY_INLINE_VARIABLE constexpr <a href=\"https://www.internalfb.com/intern/staticdocs/fbcref/ref/cpp/struct/apache/thrift/protocol/detail/ApplyPatch\">detail::ApplyPatch</a>",
      "definition_html": "FOLLY_INLINE_VARIABLE constexpr detail::ApplyPatch apache::thrift::protocol::applyPatch",
      "argsstring_html": "",
      "name_html": "applyPatch",
      "initializer_html": "{}",
      "location": {
        "file": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
        "line": "55",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
        "bodystart": "55",
        "bodyend": "-1"
      },
      "description": {
        "param": [
          {
            "names_html": [
              "patch"
            ],
            "description_html": "<p>Object </p>"
          },
          {
            "names_html": [
              "value"
            ],
            "description_html": "<p>to be patched </p>"
          }
        ],
        "detailed_html": "<p>Takes protocol Object and targer protocol Value. Makes sure that Object represents a Patch and tries to apply this patch to the target Value.</p><p>\n</p>"
      }
    }
  ],
  "free_functions": [
    {
      "refid": "namespaceapache_1_1thrift_1_1protocol_1abc5eb0c602568f2c57f357e87f7cce4a",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "<a href=\"https://www.internalfb.com/intern/staticdocs/fbcref/ref/cpp/struct/apache/thrift/protocol/ExtractedMasks\">ExtractedMasks</a>",
      "definition_html": "ExtractedMasks apache::thrift::protocol::extractMaskFromPatch",
      "argsstring_html": "(const protocol::Object &amp;patch)",
      "name_html": "extractMaskFromPatch",
      "param": [
        {
          "type_html": "const protocol::Object &amp;",
          "declname_html": "patch"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
        "line": "67",
        "column": "1"
      },
      "definition": {
        "simple_html": "ExtractedMasks extractMaskFromPatch(const protocol::Object&amp; patch)",
        "simple_raw": "ExtractedMasks extractMaskFromPatch(const protocol::Object& patch)",
        "detailed_html": "ExtractedMasks extractMaskFromPatch(const protocol::Object&amp; patch)",
        "detailed_raw": "ExtractedMasks extractMaskFromPatch(const protocol::Object& patch)",
        "original_definition_html": "ExtractedMasks apache::thrift::protocol::extractMaskFromPatch",
        "original_argsstring_html": "(const protocol::Object &amp;patch)"
      },
      "description": {
        "detailed_html": "<p>Constructs a Mask that only contains fields that are modified by the Patch. It will construct nested Mask for map and object patches. For map, it uses the address of Value key as the key for the mask. Note that Mask contains pointer to <code>protocol::Value</code> in patch, so caller needs to make sure Patch has longer lifetime than the mask. </p>"
      },
      "compoundname_html": "apache::thrift::protocol::extractMaskFromPatch",
      "namespace_html": "apache::thrift::protocol"
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1protocol_1a655a1b9a3c326e4aec80ffbbfbc6e50e",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "<a href=\"https://www.internalfb.com/intern/staticdocs/fbcref/ref/cpp/struct/apache/thrift/protocol/ExtractedMasks\">ExtractedMasks</a>",
      "definition_html": "ExtractedMasks apache::thrift::protocol::extractMaskFromPatch",
      "argsstring_html": "(Object &amp;&amp;patch)=delete",
      "name_html": "extractMaskFromPatch",
      "param": [
        {
          "type_html": "Object &amp;&amp;",
          "declname_html": "patch"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
        "line": "70",
        "column": "1"
      },
      "definition": {
        "simple_html": "ExtractedMasks extractMaskFromPatch(Object&amp;&amp; patch)",
        "simple_raw": "ExtractedMasks extractMaskFromPatch(Object&& patch)",
        "detailed_html": "ExtractedMasks extractMaskFromPatch(Object&amp;&amp; patch) = delete",
        "detailed_raw": "ExtractedMasks extractMaskFromPatch(Object&& patch) = delete",
        "original_definition_html": "ExtractedMasks apache::thrift::protocol::extractMaskFromPatch",
        "original_argsstring_html": "(Object &amp;&amp;patch)=delete"
      },
      "compoundname_html": "apache::thrift::protocol::extractMaskFromPatch",
      "namespace_html": "apache::thrift::protocol"
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1protocol_1aeb772a322907969f91a113868e4f1175",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "tparams": [
        {
          "type_html": "type::StandardProtocol",
          "declname_html": "Protocol",
          "defname_html": "Protocol"
        }
      ],
      "type_html": "std::unique_ptr&lt; folly::IOBuf &gt;",
      "definition_html": "std::unique_ptr&lt;folly::IOBuf&gt; apache::thrift::protocol::applyPatchToSerializedData",
      "argsstring_html": "(const protocol::Object &amp;patch, const folly::IOBuf &amp;buf)",
      "name_html": "applyPatchToSerializedData",
      "param": [
        {
          "type_html": "const protocol::Object &amp;",
          "declname_html": "patch"
        },
        {
          "type_html": "const folly::IOBuf &amp;",
          "declname_html": "buf"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
        "line": "73",
        "column": "1"
      },
      "definition": {
        "simple_html": "template &lt;type::StandardProtocol Protocol&gt;\nstd::unique_ptr&lt;folly::IOBuf&gt; applyPatchToSerializedData(\n    const protocol::Object&amp; patch, const folly::IOBuf&amp; buf)",
        "simple_raw": "template <type::StandardProtocol Protocol>\nstd::unique_ptr<folly::IOBuf> applyPatchToSerializedData(\n    const protocol::Object& patch, const folly::IOBuf& buf)",
        "detailed_html": "template &lt;type::StandardProtocol Protocol&gt;\nstd::unique_ptr&lt;folly::IOBuf&gt; applyPatchToSerializedData(\n    const protocol::Object&amp; patch, const folly::IOBuf&amp; buf)",
        "detailed_raw": "template <type::StandardProtocol Protocol>\nstd::unique_ptr<folly::IOBuf> applyPatchToSerializedData(\n    const protocol::Object& patch, const folly::IOBuf& buf)",
        "original_definition_html": "std::unique_ptr&lt;folly::IOBuf&gt; apache::thrift::protocol::applyPatchToSerializedData",
        "original_argsstring_html": "(const protocol::Object &amp;patch, const folly::IOBuf &amp;buf)"
      },
      "compoundname_html": "apache::thrift::protocol::applyPatchToSerializedData",
      "namespace_html": "apache::thrift::protocol"
    }
  ],
  "free_overloadgroups": [
    {
      "groupname_html": "",
      "overloadsets": [
        {
          "kind": "overloadset",
          "name_html": "extractMaskFromPatch",
          "compoundname_html": "apache::thrift::protocol::extractMaskFromPatch",
          "functions": [
            {
              "refid": "namespaceapache_1_1thrift_1_1protocol_1abc5eb0c602568f2c57f357e87f7cce4a",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "<a href=\"https://www.internalfb.com/intern/staticdocs/fbcref/ref/cpp/struct/apache/thrift/protocol/ExtractedMasks\">ExtractedMasks</a>",
              "definition_html": "ExtractedMasks apache::thrift::protocol::extractMaskFromPatch",
              "argsstring_html": "(const protocol::Object &amp;patch)",
              "name_html": "extractMaskFromPatch",
              "param": [
                {
                  "type_html": "const protocol::Object &amp;",
                  "declname_html": "patch"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
                "line": "67",
                "column": "1"
              },
              "definition": {
                "simple_html": "ExtractedMasks extractMaskFromPatch(const protocol::Object&amp; patch)",
                "simple_raw": "ExtractedMasks extractMaskFromPatch(const protocol::Object& patch)",
                "detailed_html": "ExtractedMasks extractMaskFromPatch(const protocol::Object&amp; patch)",
                "detailed_raw": "ExtractedMasks extractMaskFromPatch(const protocol::Object& patch)",
                "original_definition_html": "ExtractedMasks apache::thrift::protocol::extractMaskFromPatch",
                "original_argsstring_html": "(const protocol::Object &amp;patch)"
              },
              "description": {
                "detailed_html": "<p>Constructs a Mask that only contains fields that are modified by the Patch. It will construct nested Mask for map and object patches. For map, it uses the address of Value key as the key for the mask. Note that Mask contains pointer to <code>protocol::Value</code> in patch, so caller needs to make sure Patch has longer lifetime than the mask. </p>"
              },
              "compoundname_html": "apache::thrift::protocol::extractMaskFromPatch",
              "namespace_html": "apache::thrift::protocol"
            },
            {
              "refid": "namespaceapache_1_1thrift_1_1protocol_1a655a1b9a3c326e4aec80ffbbfbc6e50e",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "<a href=\"https://www.internalfb.com/intern/staticdocs/fbcref/ref/cpp/struct/apache/thrift/protocol/ExtractedMasks\">ExtractedMasks</a>",
              "definition_html": "ExtractedMasks apache::thrift::protocol::extractMaskFromPatch",
              "argsstring_html": "(Object &amp;&amp;patch)=delete",
              "name_html": "extractMaskFromPatch",
              "param": [
                {
                  "type_html": "Object &amp;&amp;",
                  "declname_html": "patch"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
                "line": "70",
                "column": "1"
              },
              "definition": {
                "simple_html": "ExtractedMasks extractMaskFromPatch(Object&amp;&amp; patch)",
                "simple_raw": "ExtractedMasks extractMaskFromPatch(Object&& patch)",
                "detailed_html": "ExtractedMasks extractMaskFromPatch(Object&amp;&amp; patch) = delete",
                "detailed_raw": "ExtractedMasks extractMaskFromPatch(Object&& patch) = delete",
                "original_definition_html": "ExtractedMasks apache::thrift::protocol::extractMaskFromPatch",
                "original_argsstring_html": "(Object &amp;&amp;patch)=delete"
              },
              "compoundname_html": "apache::thrift::protocol::extractMaskFromPatch",
              "namespace_html": "apache::thrift::protocol"
            }
          ],
          "filepath": "f/assoc/file/thrift/lib/cpp2/protocol/Patch.h/extractMaskFromPatch",
          "namespace_html": "apache::thrift::protocol",
          "minprot": "public",
          "displayname_html": "extractMaskFromPatch",
          "brief_html": "<p>Constructs a Mask that only contains fields that are modified by the Patch. It will construct nested Mask for map and object patches. For map, it uses the address of Value key as the key for the mask. Note that Mask contains pointer to <code>protocol::Value</code> in patch, so caller needs to make sure Patch has longer lifetime than the mask. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/protocol/Patch.h/extractMaskFromPatch",
          "refid": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/protocol/Patch.h/extractMaskFromPatch"
        },
        {
          "kind": "overloadset",
          "name_html": "applyPatchToSerializedData",
          "compoundname_html": "apache::thrift::protocol::applyPatchToSerializedData",
          "functions": [
            {
              "refid": "namespaceapache_1_1thrift_1_1protocol_1aeb772a322907969f91a113868e4f1175",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "tparams": [
                {
                  "type_html": "type::StandardProtocol",
                  "declname_html": "Protocol",
                  "defname_html": "Protocol"
                }
              ],
              "type_html": "std::unique_ptr&lt; folly::IOBuf &gt;",
              "definition_html": "std::unique_ptr&lt;folly::IOBuf&gt; apache::thrift::protocol::applyPatchToSerializedData",
              "argsstring_html": "(const protocol::Object &amp;patch, const folly::IOBuf &amp;buf)",
              "name_html": "applyPatchToSerializedData",
              "param": [
                {
                  "type_html": "const protocol::Object &amp;",
                  "declname_html": "patch"
                },
                {
                  "type_html": "const folly::IOBuf &amp;",
                  "declname_html": "buf"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
                "line": "73",
                "column": "1"
              },
              "definition": {
                "simple_html": "template &lt;type::StandardProtocol Protocol&gt;\nstd::unique_ptr&lt;folly::IOBuf&gt; applyPatchToSerializedData(\n    const protocol::Object&amp; patch, const folly::IOBuf&amp; buf)",
                "simple_raw": "template <type::StandardProtocol Protocol>\nstd::unique_ptr<folly::IOBuf> applyPatchToSerializedData(\n    const protocol::Object& patch, const folly::IOBuf& buf)",
                "detailed_html": "template &lt;type::StandardProtocol Protocol&gt;\nstd::unique_ptr&lt;folly::IOBuf&gt; applyPatchToSerializedData(\n    const protocol::Object&amp; patch, const folly::IOBuf&amp; buf)",
                "detailed_raw": "template <type::StandardProtocol Protocol>\nstd::unique_ptr<folly::IOBuf> applyPatchToSerializedData(\n    const protocol::Object& patch, const folly::IOBuf& buf)",
                "original_definition_html": "std::unique_ptr&lt;folly::IOBuf&gt; apache::thrift::protocol::applyPatchToSerializedData",
                "original_argsstring_html": "(const protocol::Object &amp;patch, const folly::IOBuf &amp;buf)"
              },
              "compoundname_html": "apache::thrift::protocol::applyPatchToSerializedData",
              "namespace_html": "apache::thrift::protocol"
            }
          ],
          "filepath": "f/assoc/file/thrift/lib/cpp2/protocol/Patch.h/applyPatchToSerializedData",
          "namespace_html": "apache::thrift::protocol",
          "minprot": "public",
          "displayname_html": "applyPatchToSerializedData",
          "brief_html": "",
          "groupname_html": "",
          "href": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/protocol/Patch.h/applyPatchToSerializedData",
          "refid": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/protocol/Patch.h/applyPatchToSerializedData"
        }
      ]
    }
  ]
}