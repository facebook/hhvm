/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/basic/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/basic/gen-cpp2/module_types.tcc"
#include "thrift/compiler/test/fixtures/basic/gen-cpp2/module_constants.h"
#include "thrift/compiler/test/fixtures/basic/gen-cpp2/module_data.h"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

[[maybe_unused]] static constexpr std::string_view kModuleName = "module";


namespace apache { namespace thrift {

const std::string_view TEnumTraits<::test::fixtures::basic::MyEnum>::__fbthrift_module_name_internal_do_not_use = kModuleName;
folly::Range<::test::fixtures::basic::MyEnum const*> const TEnumTraits<::test::fixtures::basic::MyEnum>::values = folly::range(TEnumDataStorage<::test::fixtures::basic::MyEnum>::values);
folly::Range<std::string_view const*> const TEnumTraits<::test::fixtures::basic::MyEnum>::names = folly::range(TEnumDataStorage<::test::fixtures::basic::MyEnum>::names);

bool TEnumTraits<::test::fixtures::basic::MyEnum>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::test::fixtures::basic::MyEnum>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

const std::vector<std::any>& TEnumTraits<::test::fixtures::basic::MyEnum>::annotations() noexcept {
  return ::apache::thrift::detail::annotation::empty_annotations();
}

}} // apache::thrift


namespace apache { namespace thrift {

const std::string_view TEnumTraits<::test::fixtures::basic::HackEnum>::__fbthrift_module_name_internal_do_not_use = kModuleName;
folly::Range<::test::fixtures::basic::HackEnum const*> const TEnumTraits<::test::fixtures::basic::HackEnum>::values = folly::range(TEnumDataStorage<::test::fixtures::basic::HackEnum>::values);
folly::Range<std::string_view const*> const TEnumTraits<::test::fixtures::basic::HackEnum>::names = folly::range(TEnumDataStorage<::test::fixtures::basic::HackEnum>::names);

bool TEnumTraits<::test::fixtures::basic::HackEnum>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::test::fixtures::basic::HackEnum>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

const std::vector<std::any>& TEnumTraits<::test::fixtures::basic::HackEnum>::annotations() noexcept {
  return ::apache::thrift::detail::annotation::empty_annotations();
}

}} // apache::thrift



namespace test::fixtures::basic {

std::string_view MyStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/basic/MyStruct";
}

std::string_view MyStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStruct>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view MyStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStruct>::name;
}

MyStruct::MyStruct(const MyStruct&) = default;
MyStruct& MyStruct::operator=(const MyStruct&) = default;
MyStruct::MyStruct() :
    __fbthrift_field_MyIntField(),
    __fbthrift_field_myEnum(),
    __fbthrift_field_oneway(),
    __fbthrift_field_readonly(),
    __fbthrift_field_idempotent() {
}


MyStruct::~MyStruct() {}

MyStruct::MyStruct([[maybe_unused]] MyStruct&& other) noexcept :
    __fbthrift_field_MyIntField(std::move(other.__fbthrift_field_MyIntField)),
    __fbthrift_field_MyStringField(std::move(other.__fbthrift_field_MyStringField)),
    __fbthrift_field_MyDataField(std::move(other.__fbthrift_field_MyDataField)),
    __fbthrift_field_myEnum(std::move(other.__fbthrift_field_myEnum)),
    __fbthrift_field_oneway(std::move(other.__fbthrift_field_oneway)),
    __fbthrift_field_readonly(std::move(other.__fbthrift_field_readonly)),
    __fbthrift_field_idempotent(std::move(other.__fbthrift_field_idempotent)),
    __fbthrift_field_floatSet(std::move(other.__fbthrift_field_floatSet)),
    __fbthrift_field_no_hack_codegen_field(std::move(other.__fbthrift_field_no_hack_codegen_field)),
    __isset(other.__isset) {
}

MyStruct& MyStruct::operator=([[maybe_unused]] MyStruct&& other) noexcept {
    this->__fbthrift_field_MyIntField = std::move(other.__fbthrift_field_MyIntField);
    this->__fbthrift_field_MyStringField = std::move(other.__fbthrift_field_MyStringField);
    this->__fbthrift_field_MyDataField = std::move(other.__fbthrift_field_MyDataField);
    this->__fbthrift_field_myEnum = std::move(other.__fbthrift_field_myEnum);
    this->__fbthrift_field_oneway = std::move(other.__fbthrift_field_oneway);
    this->__fbthrift_field_readonly = std::move(other.__fbthrift_field_readonly);
    this->__fbthrift_field_idempotent = std::move(other.__fbthrift_field_idempotent);
    this->__fbthrift_field_floatSet = std::move(other.__fbthrift_field_floatSet);
    this->__fbthrift_field_no_hack_codegen_field = std::move(other.__fbthrift_field_no_hack_codegen_field);
    __isset = other.__isset;
    return *this;
}


MyStruct::MyStruct(apache::thrift::FragileConstructor, ::std::int64_t MyIntField__arg, ::std::string MyStringField__arg, ::test::fixtures::basic::MyDataItemAlias MyDataField__arg, ::test::fixtures::basic::MyEnum myEnum__arg, bool oneway__arg, bool readonly__arg, bool idempotent__arg, ::std::set<float> floatSet__arg, ::std::string no_hack_codegen_field__arg) :
    __fbthrift_field_MyIntField(std::move(MyIntField__arg)),
    __fbthrift_field_MyStringField(std::move(MyStringField__arg)),
    __fbthrift_field_MyDataField(std::move(MyDataField__arg)),
    __fbthrift_field_myEnum(std::move(myEnum__arg)),
    __fbthrift_field_oneway(std::move(oneway__arg)),
    __fbthrift_field_readonly(std::move(readonly__arg)),
    __fbthrift_field_idempotent(std::move(idempotent__arg)),
    __fbthrift_field_floatSet(std::move(floatSet__arg)),
    __fbthrift_field_no_hack_codegen_field(std::move(no_hack_codegen_field__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
}

void MyStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_MyIntField = ::std::int64_t();
  this->__fbthrift_field_MyStringField = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_myEnum = ::test::fixtures::basic::MyEnum();
  this->__fbthrift_field_oneway = bool();
  this->__fbthrift_field_readonly = bool();
  this->__fbthrift_field_idempotent = bool();
  this->__fbthrift_field_floatSet.clear();
  this->__fbthrift_field_no_hack_codegen_field = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  __isset = {};
}

void MyStruct::__fbthrift_clear_terse_fields() {
}

bool MyStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyStruct::operator==([[maybe_unused]] const MyStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyStruct::operator<([[maybe_unused]] const MyStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int64_t MyStruct::get_MyIntField() const {
  return __fbthrift_field_MyIntField;
}

::std::int64_t& MyStruct::set_MyIntField(::std::int64_t MyIntField_) {
  MyIntField_ref() = MyIntField_;
  return __fbthrift_field_MyIntField;
}

const ::test::fixtures::basic::MyDataItemAlias& MyStruct::get_MyDataField() const& {
  return __fbthrift_field_MyDataField;
}

::test::fixtures::basic::MyDataItemAlias MyStruct::get_MyDataField() && {
  return static_cast<::test::fixtures::basic::MyDataItemAlias&&>(__fbthrift_field_MyDataField);
}

::test::fixtures::basic::MyEnum MyStruct::get_myEnum() const {
  return __fbthrift_field_myEnum;
}

::test::fixtures::basic::MyEnum& MyStruct::set_myEnum(::test::fixtures::basic::MyEnum myEnum_) {
  myEnum_ref() = myEnum_;
  return __fbthrift_field_myEnum;
}

bool MyStruct::get_oneway() const {
  return __fbthrift_field_oneway;
}

bool& MyStruct::set_oneway(bool oneway_) {
  oneway_ref() = oneway_;
  return __fbthrift_field_oneway;
}

bool MyStruct::get_readonly() const {
  return __fbthrift_field_readonly;
}

bool& MyStruct::set_readonly(bool readonly_) {
  readonly_ref() = readonly_;
  return __fbthrift_field_readonly;
}

bool MyStruct::get_idempotent() const {
  return __fbthrift_field_idempotent;
}

bool& MyStruct::set_idempotent(bool idempotent_) {
  idempotent_ref() = idempotent_;
  return __fbthrift_field_idempotent;
}

const ::std::set<float>& MyStruct::get_floatSet() const& {
  return __fbthrift_field_floatSet;
}

::std::set<float> MyStruct::get_floatSet() && {
  return static_cast<::std::set<float>&&>(__fbthrift_field_floatSet);
}

void swap([[maybe_unused]] MyStruct& a, [[maybe_unused]] MyStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_MyIntField, b.__fbthrift_field_MyIntField);
  swap(a.__fbthrift_field_MyStringField, b.__fbthrift_field_MyStringField);
  swap(a.__fbthrift_field_MyDataField, b.__fbthrift_field_MyDataField);
  swap(a.__fbthrift_field_myEnum, b.__fbthrift_field_myEnum);
  swap(a.__fbthrift_field_oneway, b.__fbthrift_field_oneway);
  swap(a.__fbthrift_field_readonly, b.__fbthrift_field_readonly);
  swap(a.__fbthrift_field_idempotent, b.__fbthrift_field_idempotent);
  swap(a.__fbthrift_field_floatSet, b.__fbthrift_field_floatSet);
  swap(a.__fbthrift_field_no_hack_codegen_field, b.__fbthrift_field_no_hack_codegen_field);
  swap(a.__isset, b.__isset);
}

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::basic::MyDataItemAlias>,
    "inconsistent use of json option");

} // namespace test::fixtures::basic


namespace test::fixtures::basic {

std::string_view Containers::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/basic/Containers";
}

std::string_view Containers::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Containers>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view Containers::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<Containers>::name;
}

Containers::Containers(const Containers&) = default;
Containers& Containers::operator=(const Containers&) = default;
Containers::Containers() {
}


Containers::~Containers() {}

Containers::Containers([[maybe_unused]] Containers&& other) noexcept :
    __fbthrift_field_I32List(std::move(other.__fbthrift_field_I32List)),
    __fbthrift_field_StringSet(std::move(other.__fbthrift_field_StringSet)),
    __fbthrift_field_StringToI64Map(std::move(other.__fbthrift_field_StringToI64Map)),
    __isset(other.__isset) {
}

Containers& Containers::operator=([[maybe_unused]] Containers&& other) noexcept {
    this->__fbthrift_field_I32List = std::move(other.__fbthrift_field_I32List);
    this->__fbthrift_field_StringSet = std::move(other.__fbthrift_field_StringSet);
    this->__fbthrift_field_StringToI64Map = std::move(other.__fbthrift_field_StringToI64Map);
    __isset = other.__isset;
    return *this;
}


Containers::Containers(apache::thrift::FragileConstructor, ::std::vector<::std::int32_t> I32List__arg, ::std::set<::std::string> StringSet__arg, ::std::map<::std::string, ::std::int64_t> StringToI64Map__arg) :
    __fbthrift_field_I32List(std::move(I32List__arg)),
    __fbthrift_field_StringSet(std::move(StringSet__arg)),
    __fbthrift_field_StringToI64Map(std::move(StringToI64Map__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
}

void Containers::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_I32List.clear();
  this->__fbthrift_field_StringSet.clear();
  this->__fbthrift_field_StringToI64Map.clear();
  __isset = {};
}

void Containers::__fbthrift_clear_terse_fields() {
}

bool Containers::__fbthrift_is_empty() const {
  return false;
}

bool Containers::operator==([[maybe_unused]] const Containers& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool Containers::operator<([[maybe_unused]] const Containers& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::std::vector<::std::int32_t>& Containers::get_I32List() const& {
  return __fbthrift_field_I32List;
}

::std::vector<::std::int32_t> Containers::get_I32List() && {
  return static_cast<::std::vector<::std::int32_t>&&>(__fbthrift_field_I32List);
}

const ::std::set<::std::string>& Containers::get_StringSet() const& {
  return __fbthrift_field_StringSet;
}

::std::set<::std::string> Containers::get_StringSet() && {
  return static_cast<::std::set<::std::string>&&>(__fbthrift_field_StringSet);
}

const ::std::map<::std::string, ::std::int64_t>& Containers::get_StringToI64Map() const& {
  return __fbthrift_field_StringToI64Map;
}

::std::map<::std::string, ::std::int64_t> Containers::get_StringToI64Map() && {
  return static_cast<::std::map<::std::string, ::std::int64_t>&&>(__fbthrift_field_StringToI64Map);
}

void swap([[maybe_unused]] Containers& a, [[maybe_unused]] Containers& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_I32List, b.__fbthrift_field_I32List);
  swap(a.__fbthrift_field_StringSet, b.__fbthrift_field_StringSet);
  swap(a.__fbthrift_field_StringToI64Map, b.__fbthrift_field_StringToI64Map);
  swap(a.__isset, b.__isset);
}


} // namespace test::fixtures::basic


namespace test::fixtures::basic {

std::string_view MyDataItem::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/basic/MyDataItem";
}

std::string_view MyDataItem::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyDataItem>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view MyDataItem::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyDataItem>::name;
}


MyDataItem::MyDataItem(apache::thrift::FragileConstructor) {}

void MyDataItem::__fbthrift_clear() {
  // clear all fields
}

void MyDataItem::__fbthrift_clear_terse_fields() {
}

bool MyDataItem::__fbthrift_is_empty() const {
  return true;
}

bool MyDataItem::operator==([[maybe_unused]] const MyDataItem& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyDataItem::operator<([[maybe_unused]] const MyDataItem& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] MyDataItem& a, [[maybe_unused]] MyDataItem& b) {
  using ::std::swap;
}


} // namespace test::fixtures::basic


namespace apache { namespace thrift {

folly::Range<::test::fixtures::basic::MyUnion::Type const*> const TEnumTraits<::test::fixtures::basic::MyUnion::Type>::values = folly::range(TEnumDataStorage<::test::fixtures::basic::MyUnion::Type>::values);
folly::Range<std::string_view const*> const TEnumTraits<::test::fixtures::basic::MyUnion::Type>::names = folly::range(TEnumDataStorage<::test::fixtures::basic::MyUnion::Type>::names);

bool TEnumTraits<::test::fixtures::basic::MyUnion::Type>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::test::fixtures::basic::MyUnion::Type>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace test::fixtures::basic {

std::string_view MyUnion::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/basic/MyUnion";
}

std::string_view MyUnion::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyUnion>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view MyUnion::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyUnion>::name;
}

void MyUnion::__fbthrift_destruct() {
  switch(getType()) {
    case Type::__EMPTY__:
      break;
    case Type::myEnum:
      ::std::destroy_at(::std::addressof(value_.myEnum));
      break;
    case Type::myStruct:
      ::std::destroy_at(::std::addressof(value_.myStruct));
      break;
    case Type::myDataItem:
      ::std::destroy_at(::std::addressof(value_.myDataItem));
      break;
    case Type::floatSet:
      ::std::destroy_at(::std::addressof(value_.floatSet));
      break;
    default:
      assert(false);
      break;
  }
}

void MyUnion::__fbthrift_clear() {
  __fbthrift_destruct();
  fbthrift_type_ = folly::to_underlying(Type::__EMPTY__);
}

  MyUnion::~MyUnion() {
    __fbthrift_destruct();
  }

bool MyUnion::__fbthrift_is_empty() const {
  return getType() == Type::__EMPTY__;
}
  MyUnion::MyUnion(const MyUnion& rhs)
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        return;
      case Type::myEnum:
        set_myEnum(rhs.value_.myEnum);
        break;
      case Type::myStruct:
        set_myStruct(rhs.value_.myStruct);
        break;
      case Type::myDataItem:
        set_myDataItem(rhs.value_.myDataItem);
        break;
      case Type::floatSet:
        set_floatSet(rhs.value_.floatSet);
        break;
      default:
        assert(false);
    }
  }

    MyUnion&MyUnion::operator=(const MyUnion& rhs) {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        __fbthrift_clear();
        return *this;
      case Type::myEnum:
        set_myEnum(rhs.value_.myEnum);
        break;
      case Type::myStruct:
        set_myStruct(rhs.value_.myStruct);
        break;
      case Type::myDataItem:
        set_myDataItem(rhs.value_.myDataItem);
        break;
      case Type::floatSet:
        set_floatSet(rhs.value_.floatSet);
        break;
      default:
        __fbthrift_clear();
        assert(false);
    }
    return *this;
  }


bool MyUnion::operator==(const MyUnion& rhs) const {
  return ::apache::thrift::op::detail::UnionEquality{}(*this, rhs);
}

bool MyUnion::operator<([[maybe_unused]] const MyUnion& rhs) const {
  return ::apache::thrift::op::detail::UnionLessThan{}(*this, rhs);
}

void swap(MyUnion& a, MyUnion& b) {
  MyUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnion,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::basic::MyStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnion,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::basic::MyDataItem>,
    "inconsistent use of json option");

} // namespace test::fixtures::basic


namespace test::fixtures::basic {

std::string_view MyException::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/basic/MyException";
}

std::string_view MyException::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyException>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view MyException::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyException>::name;
}

MyException::MyException(const MyException&) = default;
MyException& MyException::operator=(const MyException&) = default;
MyException::MyException() :
    __fbthrift_field_MyIntField() {
}


MyException::~MyException() {}

MyException::MyException([[maybe_unused]] MyException&& other) noexcept :
    __fbthrift_field_MyIntField(std::move(other.__fbthrift_field_MyIntField)),
    __fbthrift_field_MyStringField(std::move(other.__fbthrift_field_MyStringField)),
    __fbthrift_field_myStruct(std::move(other.__fbthrift_field_myStruct)),
    __fbthrift_field_myUnion(std::move(other.__fbthrift_field_myUnion)),
    __isset(other.__isset) {
}

MyException& MyException::operator=([[maybe_unused]] MyException&& other) noexcept {
    this->__fbthrift_field_MyIntField = std::move(other.__fbthrift_field_MyIntField);
    this->__fbthrift_field_MyStringField = std::move(other.__fbthrift_field_MyStringField);
    this->__fbthrift_field_myStruct = std::move(other.__fbthrift_field_myStruct);
    this->__fbthrift_field_myUnion = std::move(other.__fbthrift_field_myUnion);
    __isset = other.__isset;
    return *this;
}


MyException::MyException(apache::thrift::FragileConstructor, ::std::int64_t MyIntField__arg, ::std::string MyStringField__arg, ::test::fixtures::basic::MyStruct myStruct__arg, ::test::fixtures::basic::MyUnion myUnion__arg) :
    __fbthrift_field_MyIntField(std::move(MyIntField__arg)),
    __fbthrift_field_MyStringField(std::move(MyStringField__arg)),
    __fbthrift_field_myStruct(std::move(myStruct__arg)),
    __fbthrift_field_myUnion(std::move(myUnion__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}

void MyException::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_MyIntField = ::std::int64_t();
  this->__fbthrift_field_MyStringField = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  ::apache::thrift::clear(this->__fbthrift_field_myStruct);
  ::apache::thrift::clear(this->__fbthrift_field_myUnion);
  __isset = {};
}

void MyException::__fbthrift_clear_terse_fields() {
}

bool MyException::__fbthrift_is_empty() const {
  return false;
}

bool MyException::operator==([[maybe_unused]] const MyException& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyException::operator<([[maybe_unused]] const MyException& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int64_t MyException::get_MyIntField() const {
  return __fbthrift_field_MyIntField;
}

::std::int64_t& MyException::set_MyIntField(::std::int64_t MyIntField_) {
  MyIntField_ref() = MyIntField_;
  return __fbthrift_field_MyIntField;
}

const ::test::fixtures::basic::MyStruct& MyException::get_myStruct() const& {
  return __fbthrift_field_myStruct;
}

::test::fixtures::basic::MyStruct MyException::get_myStruct() && {
  return static_cast<::test::fixtures::basic::MyStruct&&>(__fbthrift_field_myStruct);
}

const ::test::fixtures::basic::MyUnion& MyException::get_myUnion() const& {
  return __fbthrift_field_myUnion;
}

::test::fixtures::basic::MyUnion MyException::get_myUnion() && {
  return static_cast<::test::fixtures::basic::MyUnion&&>(__fbthrift_field_myUnion);
}

void swap([[maybe_unused]] MyException& a, [[maybe_unused]] MyException& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_MyIntField, b.__fbthrift_field_MyIntField);
  swap(a.__fbthrift_field_MyStringField, b.__fbthrift_field_MyStringField);
  swap(a.__fbthrift_field_myStruct, b.__fbthrift_field_myStruct);
  swap(a.__fbthrift_field_myUnion, b.__fbthrift_field_myUnion);
  swap(a.__isset, b.__isset);
}

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyException,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::basic::MyStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyException,
        ::apache::thrift::type_class::variant,
        ::test::fixtures::basic::MyUnion>,
    "inconsistent use of json option");

} // namespace test::fixtures::basic


namespace test::fixtures::basic {

std::string_view MyExceptionWithMessage::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/basic/MyExceptionWithMessage";
}

std::string_view MyExceptionWithMessage::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyExceptionWithMessage>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view MyExceptionWithMessage::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyExceptionWithMessage>::name;
}

MyExceptionWithMessage::MyExceptionWithMessage(const MyExceptionWithMessage&) = default;
MyExceptionWithMessage& MyExceptionWithMessage::operator=(const MyExceptionWithMessage&) = default;
MyExceptionWithMessage::MyExceptionWithMessage() :
    __fbthrift_field_MyIntField() {
}

MyExceptionWithMessage::MyExceptionWithMessage(std::string __message) : MyExceptionWithMessage() {
  __fbthrift_field_MyStringField = std::move(__message);
}


MyExceptionWithMessage::~MyExceptionWithMessage() {}

MyExceptionWithMessage::MyExceptionWithMessage([[maybe_unused]] MyExceptionWithMessage&& other) noexcept :
    __fbthrift_field_MyIntField(std::move(other.__fbthrift_field_MyIntField)),
    __fbthrift_field_MyStringField(std::move(other.__fbthrift_field_MyStringField)),
    __fbthrift_field_myStruct(std::move(other.__fbthrift_field_myStruct)),
    __fbthrift_field_myUnion(std::move(other.__fbthrift_field_myUnion)),
    __isset(other.__isset) {
}

MyExceptionWithMessage& MyExceptionWithMessage::operator=([[maybe_unused]] MyExceptionWithMessage&& other) noexcept {
    this->__fbthrift_field_MyIntField = std::move(other.__fbthrift_field_MyIntField);
    this->__fbthrift_field_MyStringField = std::move(other.__fbthrift_field_MyStringField);
    this->__fbthrift_field_myStruct = std::move(other.__fbthrift_field_myStruct);
    this->__fbthrift_field_myUnion = std::move(other.__fbthrift_field_myUnion);
    __isset = other.__isset;
    return *this;
}


MyExceptionWithMessage::MyExceptionWithMessage(apache::thrift::FragileConstructor, ::std::int64_t MyIntField__arg, ::std::string MyStringField__arg, ::test::fixtures::basic::MyStruct myStruct__arg, ::test::fixtures::basic::MyUnion myUnion__arg) :
    __fbthrift_field_MyIntField(std::move(MyIntField__arg)),
    __fbthrift_field_MyStringField(std::move(MyStringField__arg)),
    __fbthrift_field_myStruct(std::move(myStruct__arg)),
    __fbthrift_field_myUnion(std::move(myUnion__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}

void MyExceptionWithMessage::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_MyIntField = ::std::int64_t();
  this->__fbthrift_field_MyStringField = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  ::apache::thrift::clear(this->__fbthrift_field_myStruct);
  ::apache::thrift::clear(this->__fbthrift_field_myUnion);
  __isset = {};
}

void MyExceptionWithMessage::__fbthrift_clear_terse_fields() {
}

bool MyExceptionWithMessage::__fbthrift_is_empty() const {
  return false;
}

bool MyExceptionWithMessage::operator==([[maybe_unused]] const MyExceptionWithMessage& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyExceptionWithMessage::operator<([[maybe_unused]] const MyExceptionWithMessage& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int64_t MyExceptionWithMessage::get_MyIntField() const {
  return __fbthrift_field_MyIntField;
}

::std::int64_t& MyExceptionWithMessage::set_MyIntField(::std::int64_t MyIntField_) {
  MyIntField_ref() = MyIntField_;
  return __fbthrift_field_MyIntField;
}

const ::test::fixtures::basic::MyStruct& MyExceptionWithMessage::get_myStruct() const& {
  return __fbthrift_field_myStruct;
}

::test::fixtures::basic::MyStruct MyExceptionWithMessage::get_myStruct() && {
  return static_cast<::test::fixtures::basic::MyStruct&&>(__fbthrift_field_myStruct);
}

const ::test::fixtures::basic::MyUnion& MyExceptionWithMessage::get_myUnion() const& {
  return __fbthrift_field_myUnion;
}

::test::fixtures::basic::MyUnion MyExceptionWithMessage::get_myUnion() && {
  return static_cast<::test::fixtures::basic::MyUnion&&>(__fbthrift_field_myUnion);
}

void swap([[maybe_unused]] MyExceptionWithMessage& a, [[maybe_unused]] MyExceptionWithMessage& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_MyIntField, b.__fbthrift_field_MyIntField);
  swap(a.__fbthrift_field_MyStringField, b.__fbthrift_field_MyStringField);
  swap(a.__fbthrift_field_myStruct, b.__fbthrift_field_myStruct);
  swap(a.__fbthrift_field_myUnion, b.__fbthrift_field_myUnion);
  swap(a.__isset, b.__isset);
}

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyExceptionWithMessage,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::basic::MyStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyExceptionWithMessage,
        ::apache::thrift::type_class::variant,
        ::test::fixtures::basic::MyUnion>,
    "inconsistent use of json option");

} // namespace test::fixtures::basic


namespace test::fixtures::basic {

std::string_view ReservedKeyword::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/basic/ReservedKeyword";
}

std::string_view ReservedKeyword::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<ReservedKeyword>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view ReservedKeyword::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<ReservedKeyword>::name;
}


ReservedKeyword::ReservedKeyword(apache::thrift::FragileConstructor, ::std::int32_t reserved_field__arg) :
    __fbthrift_field_reserved_field(std::move(reserved_field__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
}

void ReservedKeyword::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_reserved_field = ::std::int32_t();
  __isset = {};
}

void ReservedKeyword::__fbthrift_clear_terse_fields() {
}

bool ReservedKeyword::__fbthrift_is_empty() const {
  return false;
}

bool ReservedKeyword::operator==([[maybe_unused]] const ReservedKeyword& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool ReservedKeyword::operator<([[maybe_unused]] const ReservedKeyword& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int32_t ReservedKeyword::get_reserved_field() const {
  return __fbthrift_field_reserved_field;
}

::std::int32_t& ReservedKeyword::set_reserved_field(::std::int32_t reserved_field_) {
  reserved_field_ref() = reserved_field_;
  return __fbthrift_field_reserved_field;
}

void swap([[maybe_unused]] ReservedKeyword& a, [[maybe_unused]] ReservedKeyword& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_reserved_field, b.__fbthrift_field_reserved_field);
  swap(a.__isset, b.__isset);
}


} // namespace test::fixtures::basic


namespace apache { namespace thrift {

folly::Range<::test::fixtures::basic::UnionToBeRenamed::Type const*> const TEnumTraits<::test::fixtures::basic::UnionToBeRenamed::Type>::values = folly::range(TEnumDataStorage<::test::fixtures::basic::UnionToBeRenamed::Type>::values);
folly::Range<std::string_view const*> const TEnumTraits<::test::fixtures::basic::UnionToBeRenamed::Type>::names = folly::range(TEnumDataStorage<::test::fixtures::basic::UnionToBeRenamed::Type>::names);

bool TEnumTraits<::test::fixtures::basic::UnionToBeRenamed::Type>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::test::fixtures::basic::UnionToBeRenamed::Type>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace test::fixtures::basic {

std::string_view UnionToBeRenamed::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/basic/UnionToBeRenamed";
}

std::string_view UnionToBeRenamed::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<UnionToBeRenamed>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view UnionToBeRenamed::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<UnionToBeRenamed>::name;
}

void UnionToBeRenamed::__fbthrift_destruct() {
  switch(getType()) {
    case Type::__EMPTY__:
      break;
    case Type::reserved_field:
      ::std::destroy_at(::std::addressof(value_.reserved_field));
      break;
    default:
      assert(false);
      break;
  }
}

void UnionToBeRenamed::__fbthrift_clear() {
  __fbthrift_destruct();
  fbthrift_type_ = folly::to_underlying(Type::__EMPTY__);
}


bool UnionToBeRenamed::__fbthrift_is_empty() const {
  return getType() == Type::__EMPTY__;
}
  UnionToBeRenamed::UnionToBeRenamed(const UnionToBeRenamed& rhs)
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        return;
      case Type::reserved_field:
        set_reserved_field(rhs.value_.reserved_field);
        break;
      default:
        assert(false);
    }
  }

    UnionToBeRenamed&UnionToBeRenamed::operator=(const UnionToBeRenamed& rhs) {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        __fbthrift_clear();
        return *this;
      case Type::reserved_field:
        set_reserved_field(rhs.value_.reserved_field);
        break;
      default:
        __fbthrift_clear();
        assert(false);
    }
    return *this;
  }


bool UnionToBeRenamed::operator==(const UnionToBeRenamed& rhs) const {
  return ::apache::thrift::op::detail::UnionEquality{}(*this, rhs);
}

bool UnionToBeRenamed::operator<([[maybe_unused]] const UnionToBeRenamed& rhs) const {
  return ::apache::thrift::op::detail::UnionLessThan{}(*this, rhs);
}

void swap(UnionToBeRenamed& a, UnionToBeRenamed& b) {
  UnionToBeRenamed temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}


} // namespace test::fixtures::basic

namespace test::fixtures::basic { namespace {
[[maybe_unused]] FOLLY_ERASE void validateAdapters() {
}
}} // namespace test::fixtures::basic
namespace apache::thrift::detail::annotation {
}
