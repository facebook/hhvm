[(Fun
    { fd_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
        ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
        ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
      fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([3:10-41], "\\array_access_write_union_vector");
      fd_fun =
      { f_span = [3:1-7:2]; f_readonly_this = None; f_annotation = (); 
        f_readonly_ret = None; f_ret = ((void), (Some ([3:72-76], (Hprim Tvoid))));
        f_params =
        [{ param_annotation = ((bool | Vector<string>));
           param_type_hint =
           (((bool | Vector<string>)), (Some ([3:42-65], (Hunion [([3:43-47], (Hprim Tbool)); ([3:50-64], (Happly (([3:50-56], "\\HH\\Vector"), [([3:57-63], (Hprim Tstring))])))]))));
           param_is_variadic = false; param_pos = [3:66-69]; param_name = "$xs"; 
           param_expr = None; param_readonly = None; param_callconv = Pnormal; 
           param_user_attributes = []; param_visibility = None }
          ];
        f_ctxs = None; f_unsafe_ctxs = None;
        f_body =
        { fb_ast =
          [([6:3-16],
            (Expr
               ((int), [6:3-15],
                (Binop
                   { bop = (Eq None);
                     lhs =
                     ((int), [6:3-11],
                      (Array_get ((((bool | Vector<string>)), [6:4-7], (Hole ((((bool | Vector<string>)), [6:4-7], (Lvar ([6:4-7], $xs))), ((bool | Vector<string>)), (Vector<string>), Typing))),
                         (Some ((int), [6:9-10], (Int "0"))))));
                     rhs = ((int), [6:14-15], (Hole (((int), [6:14-15], (Int "1")), (int), (string), Typing))) }))))
            ]
          };
        f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
        f_doc_comment = None };
      fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = [] });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([9:10-38], "\\array_access_write_union_vec");
       fd_fun =
       { f_span = [9:1-13:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_ret = ((void), (Some ([9:66-70], (Hprim Tvoid))));
         f_params =
         [{ param_annotation = ((bool | vec<string>));
            param_type_hint = (((bool | vec<string>)), (Some ([9:39-59], (Hunion [([9:40-44], (Hprim Tbool)); ([9:47-58], (Happly (([9:47-50], "\\HH\\vec"), [([9:51-57], (Hprim Tstring))])))]))));
            param_is_variadic = false; param_pos = [9:60-63]; param_name = "$xs"; 
            param_expr = None; param_readonly = None; param_callconv = Pnormal; 
            param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([12:3-14],
             (Expr
                ((int), [12:3-13],
                 (Binop
                    { bop = (Eq None);
                      lhs =
                      ((int), [12:3-9],
                       (Array_get (
                          (((bool | vec<(int | string)>)), [12:3-6],
                           (Hole ((((bool | vec<(int | string)>)), [12:3-6], (Lvar ([12:3-6], $xs))), ((bool | vec<(int | string)>)), (vec<(int | string)>), Typing))),
                          (Some ((int), [12:7-8], (Int "0"))))));
                      rhs = ((int), [12:12-13], (Int "1")) }))))
             ]
           };
         f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
         f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = [] })