Index: out/CMake/folly-deps.cmake
===================================================================
--- out.orig/CMake/folly-deps.cmake
+++ out/CMake/folly-deps.cmake
@@ -164,11 +164,14 @@ if (PYTHON_EXTENSIONS)
   find_package(Cython 0.26 REQUIRED)
 endif ()
 
-find_package(LibUnwind)
-list(APPEND FOLLY_LINK_LIBRARIES ${LIBUNWIND_LIBRARIES})
-list(APPEND FOLLY_INCLUDE_DIRECTORIES ${LIBUNWIND_INCLUDE_DIRS})
-if (LIBUNWIND_FOUND)
-  set(FOLLY_HAVE_LIBUNWIND ON)
+option(WITHOUT_LIBUNWIND "Disable libunwind support" OFF)
+if (NOT WITHOUT_LIBUNWIND)
+  find_package(LibUnwind)
+  list(APPEND FOLLY_LINK_LIBRARIES ${LIBUNWIND_LIBRARIES})
+  list(APPEND FOLLY_INCLUDE_DIRECTORIES ${LIBUNWIND_INCLUDE_DIRS})
+  if (LIBUNWIND_FOUND)
+    set(FOLLY_HAVE_LIBUNWIND ON)
+  endif()
 endif()
 
 cmake_push_check_state()
@@ -176,15 +179,19 @@ set(CMAKE_REQUIRED_DEFINITIONS -D_XOPEN_
 check_cxx_symbol_exists(swapcontext ucontext.h FOLLY_HAVE_SWAPCONTEXT)
 cmake_pop_check_state()
 
-set(FOLLY_USE_SYMBOLIZER OFF)
+if (UNIX AND NOT APPLE)
+  set(FOLLY_USE_SYMBOLIZER_DEFAULT ON)
+else ()
+  set(FOLLY_USE_SYMBOLIZER_DEFAULT OFF)
+endif ()
+
+option(FOLLY_USE_SYMBOLIZER "Enable symbolizer" ${FOLLY_USE_SYMBOLIZER_DEFAULT})
 CHECK_INCLUDE_FILE_CXX(elf.h FOLLY_HAVE_ELF)
 find_package(Backtrace)
 
 set(FOLLY_HAVE_BACKTRACE ${Backtrace_FOUND})
 set(FOLLY_HAVE_DWARF ${LIBDWARF_FOUND})
-if (UNIX AND NOT APPLE)
-  set(FOLLY_USE_SYMBOLIZER ON)
-endif()
+
 if (NOT FOLLY_HAVE_ELF)
   # Empty is falsey here, but ends up truthy in folly-config.h.cmake
   set(FOLLY_HAVE_ELF OFF)
