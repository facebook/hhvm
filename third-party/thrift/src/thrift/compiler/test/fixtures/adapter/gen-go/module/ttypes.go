// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package module

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	cpp0 "thrift/annotation/cpp"
	python1 "thrift/annotation/python"
	thrift2 "thrift/annotation/thrift"
	scope3 "thrift/annotation/scope"
	hack4 "thrift/annotation/hack"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var _ = cpp0.GoUnusedProtection__
var _ = python1.GoUnusedProtection__
var _ = thrift2.GoUnusedProtection__
var _ = scope3.GoUnusedProtection__
var _ = hack4.GoUnusedProtection__
var GoUnusedProtection__ int;

type SetWithAdapter = []string

func SetWithAdapterPtr(v SetWithAdapter) *SetWithAdapter { return &v }

type StringWithAdapter = string

func StringWithAdapterPtr(v StringWithAdapter) *StringWithAdapter { return &v }

type ListWithElemAdapter = []StringWithAdapter

func ListWithElemAdapterPtr(v ListWithElemAdapter) *ListWithElemAdapter { return &v }

type ListWithElemAdapterWithAdapter = ListWithElemAdapter

func ListWithElemAdapterWithAdapterPtr(v ListWithElemAdapterWithAdapter) *ListWithElemAdapterWithAdapter { return &v }

type MyI64 = int64

func MyI64Ptr(v MyI64) *MyI64 { return &v }

type DoubleTypedefI64 = MyI64

func DoubleTypedefI64Ptr(v DoubleTypedefI64) *DoubleTypedefI64 { return &v }

type MyI32 = int32

func MyI32Ptr(v MyI32) *MyI32 { return &v }

type FooWithAdapter = Foo

func FooWithAdapterPtr(v FooWithAdapter) *FooWithAdapter { return &v }

func NewFooWithAdapter() *FooWithAdapter { return NewFoo() }

type StructWithAdapter = *Bar

func StructWithAdapterPtr(v StructWithAdapter) *StructWithAdapter { return &v }

func NewStructWithAdapter() StructWithAdapter { return NewBar() }

type UnionWithAdapter = *Baz

func UnionWithAdapterPtr(v UnionWithAdapter) *UnionWithAdapter { return &v }

func NewUnionWithAdapter() UnionWithAdapter { return NewBaz() }

type AdaptedA = A

func AdaptedAPtr(v AdaptedA) *AdaptedA { return &v }

func NewAdaptedA() *AdaptedA { return NewA() }

// Attributes:
//  - IntField
//  - OptionalIntField
//  - IntFieldWithDefault
//  - SetField
//  - OptionalSetField
//  - MapField
//  - OptionalMapField
//  - BinaryField
//  - LongField
//  - AdaptedLongField
//  - DoubleAdaptedField
type Foo struct {
  IntField int32 `thrift:"intField,1" db:"intField" json:"intField"`
  OptionalIntField *int32 `thrift:"optionalIntField,2,optional" db:"optionalIntField" json:"optionalIntField,omitempty"`
  IntFieldWithDefault int32 `thrift:"intFieldWithDefault,3" db:"intFieldWithDefault" json:"intFieldWithDefault"`
  SetField SetWithAdapter `thrift:"setField,4" db:"setField" json:"setField"`
  OptionalSetField SetWithAdapter `thrift:"optionalSetField,5,optional" db:"optionalSetField" json:"optionalSetField,omitempty"`
  MapField map[string]ListWithElemAdapterWithAdapter `thrift:"mapField,6" db:"mapField" json:"mapField"`
  OptionalMapField map[string]ListWithElemAdapterWithAdapter `thrift:"optionalMapField,7,optional" db:"optionalMapField" json:"optionalMapField,omitempty"`
  BinaryField []byte `thrift:"binaryField,8" db:"binaryField" json:"binaryField"`
  LongField MyI64 `thrift:"longField,9" db:"longField" json:"longField"`
  AdaptedLongField MyI64 `thrift:"adaptedLongField,10" db:"adaptedLongField" json:"adaptedLongField"`
  DoubleAdaptedField DoubleTypedefI64 `thrift:"doubleAdaptedField,11" db:"doubleAdaptedField" json:"doubleAdaptedField"`
}

func NewFoo() *Foo {
  return &Foo{
    IntFieldWithDefault: 13,
  }
}


func (p *Foo) GetIntField() int32 {
  return p.IntField
}
var Foo_OptionalIntField_DEFAULT int32
func (p *Foo) GetOptionalIntField() int32 {
  if !p.IsSetOptionalIntField() {
    return Foo_OptionalIntField_DEFAULT
  }
return *p.OptionalIntField
}

func (p *Foo) GetIntFieldWithDefault() int32 {
  return p.IntFieldWithDefault
}

func (p *Foo) GetSetField() SetWithAdapter {
  return p.SetField
}
var Foo_OptionalSetField_DEFAULT SetWithAdapter

func (p *Foo) GetOptionalSetField() SetWithAdapter {
  return p.OptionalSetField
}

func (p *Foo) GetMapField() map[string]ListWithElemAdapterWithAdapter {
  return p.MapField
}
var Foo_OptionalMapField_DEFAULT map[string]ListWithElemAdapterWithAdapter

func (p *Foo) GetOptionalMapField() map[string]ListWithElemAdapterWithAdapter {
  return p.OptionalMapField
}

func (p *Foo) GetBinaryField() []byte {
  return p.BinaryField
}

func (p *Foo) GetLongField() MyI64 {
  return p.LongField
}

func (p *Foo) GetAdaptedLongField() MyI64 {
  return p.AdaptedLongField
}

func (p *Foo) GetDoubleAdaptedField() DoubleTypedefI64 {
  return p.DoubleAdaptedField
}
func (p *Foo) IsSetOptionalIntField() bool {
  return p != nil && p.OptionalIntField != nil
}

func (p *Foo) IsSetOptionalSetField() bool {
  return p != nil && p.OptionalSetField != nil
}

func (p *Foo) IsSetOptionalMapField() bool {
  return p != nil && p.OptionalMapField != nil
}

type FooBuilder struct {
  obj *Foo
}

func NewFooBuilder() *FooBuilder{
  return &FooBuilder{
    obj: NewFoo(),
  }
}

func (p FooBuilder) Emit() *Foo{
  return &Foo{
    IntField: p.obj.IntField,
    OptionalIntField: p.obj.OptionalIntField,
    IntFieldWithDefault: p.obj.IntFieldWithDefault,
    SetField: p.obj.SetField,
    OptionalSetField: p.obj.OptionalSetField,
    MapField: p.obj.MapField,
    OptionalMapField: p.obj.OptionalMapField,
    BinaryField: p.obj.BinaryField,
    LongField: p.obj.LongField,
    AdaptedLongField: p.obj.AdaptedLongField,
    DoubleAdaptedField: p.obj.DoubleAdaptedField,
  }
}

func (f *FooBuilder) IntField(intField int32) *FooBuilder {
  f.obj.IntField = intField
  return f
}

func (f *FooBuilder) OptionalIntField(optionalIntField *int32) *FooBuilder {
  f.obj.OptionalIntField = optionalIntField
  return f
}

func (f *FooBuilder) IntFieldWithDefault(intFieldWithDefault int32) *FooBuilder {
  f.obj.IntFieldWithDefault = intFieldWithDefault
  return f
}

func (f *FooBuilder) SetField(setField SetWithAdapter) *FooBuilder {
  f.obj.SetField = setField
  return f
}

func (f *FooBuilder) OptionalSetField(optionalSetField SetWithAdapter) *FooBuilder {
  f.obj.OptionalSetField = optionalSetField
  return f
}

func (f *FooBuilder) MapField(mapField map[string]ListWithElemAdapterWithAdapter) *FooBuilder {
  f.obj.MapField = mapField
  return f
}

func (f *FooBuilder) OptionalMapField(optionalMapField map[string]ListWithElemAdapterWithAdapter) *FooBuilder {
  f.obj.OptionalMapField = optionalMapField
  return f
}

func (f *FooBuilder) BinaryField(binaryField []byte) *FooBuilder {
  f.obj.BinaryField = binaryField
  return f
}

func (f *FooBuilder) LongField(longField MyI64) *FooBuilder {
  f.obj.LongField = longField
  return f
}

func (f *FooBuilder) AdaptedLongField(adaptedLongField MyI64) *FooBuilder {
  f.obj.AdaptedLongField = adaptedLongField
  return f
}

func (f *FooBuilder) DoubleAdaptedField(doubleAdaptedField DoubleTypedefI64) *FooBuilder {
  f.obj.DoubleAdaptedField = doubleAdaptedField
  return f
}

func (f *Foo) SetIntField(intField int32) *Foo {
  f.IntField = intField
  return f
}

func (f *Foo) SetOptionalIntField(optionalIntField *int32) *Foo {
  f.OptionalIntField = optionalIntField
  return f
}

func (f *Foo) SetIntFieldWithDefault(intFieldWithDefault int32) *Foo {
  f.IntFieldWithDefault = intFieldWithDefault
  return f
}

func (f *Foo) SetSetField(setField SetWithAdapter) *Foo {
  f.SetField = setField
  return f
}

func (f *Foo) SetOptionalSetField(optionalSetField SetWithAdapter) *Foo {
  f.OptionalSetField = optionalSetField
  return f
}

func (f *Foo) SetMapField(mapField map[string]ListWithElemAdapterWithAdapter) *Foo {
  f.MapField = mapField
  return f
}

func (f *Foo) SetOptionalMapField(optionalMapField map[string]ListWithElemAdapterWithAdapter) *Foo {
  f.OptionalMapField = optionalMapField
  return f
}

func (f *Foo) SetBinaryField(binaryField []byte) *Foo {
  f.BinaryField = binaryField
  return f
}

func (f *Foo) SetLongField(longField MyI64) *Foo {
  f.LongField = longField
  return f
}

func (f *Foo) SetAdaptedLongField(adaptedLongField MyI64) *Foo {
  f.AdaptedLongField = adaptedLongField
  return f
}

func (f *Foo) SetDoubleAdaptedField(doubleAdaptedField DoubleTypedefI64) *Foo {
  f.DoubleAdaptedField = doubleAdaptedField
  return f
}

func (p *Foo) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Foo)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.IntField = v
  }
  return nil
}

func (p *Foo)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.OptionalIntField = &v
  }
  return nil
}

func (p *Foo)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.IntFieldWithDefault = v
  }
  return nil
}

func (p *Foo)  ReadField4(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make(SetWithAdapter, 0, size)
  p.SetField =  tSet
  for i := 0; i < size; i ++ {
    var _elem5 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem5 = v
    }
    p.SetField = append(p.SetField, _elem5)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *Foo)  ReadField5(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make(SetWithAdapter, 0, size)
  p.OptionalSetField =  tSet
  for i := 0; i < size; i ++ {
    var _elem6 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem6 = v
    }
    p.OptionalSetField = append(p.OptionalSetField, _elem6)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *Foo)  ReadField6(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]ListWithElemAdapterWithAdapter, size)
  p.MapField =  tMap
  for i := 0; i < size; i ++ {
    var _key7 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key7 = v
    }
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make(ListWithElemAdapterWithAdapter, 0, size)
    _val8 :=  tSlice
    for i := 0; i < size; i ++ {
      var _elem9 StringWithAdapter
      if v, err := iprot.ReadString(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        temp := StringWithAdapter(v)
        _elem9 = temp
      }
      _val8 = append(_val8, _elem9)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.MapField[_key7] = _val8
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Foo)  ReadField7(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]ListWithElemAdapterWithAdapter, size)
  p.OptionalMapField =  tMap
  for i := 0; i < size; i ++ {
    var _key10 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key10 = v
    }
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make(ListWithElemAdapterWithAdapter, 0, size)
    _val11 :=  tSlice
    for i := 0; i < size; i ++ {
      var _elem12 StringWithAdapter
      if v, err := iprot.ReadString(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        temp := StringWithAdapter(v)
        _elem12 = temp
      }
      _val11 = append(_val11, _elem12)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.OptionalMapField[_key10] = _val11
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Foo)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 8: ", err)
  } else {
    p.BinaryField = v
  }
  return nil
}

func (p *Foo)  ReadField9(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 9: ", err)
  } else {
    temp := MyI64(v)
    p.LongField = temp
  }
  return nil
}

func (p *Foo)  ReadField10(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 10: ", err)
  } else {
    temp := MyI64(v)
    p.AdaptedLongField = temp
  }
  return nil
}

func (p *Foo)  ReadField11(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 11: ", err)
  } else {
    temp := DoubleTypedefI64(v)
    p.DoubleAdaptedField = temp
  }
  return nil
}

func (p *Foo) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Foo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := p.writeField10(oprot); err != nil { return err }
  if err := p.writeField11(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Foo) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("intField", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:intField: ", p), err) }
  if err := oprot.WriteI32(int32(p.IntField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.intField (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:intField: ", p), err) }
  return err
}

func (p *Foo) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetOptionalIntField() {
    if err := oprot.WriteFieldBegin("optionalIntField", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:optionalIntField: ", p), err) }
    if err := oprot.WriteI32(int32(*p.OptionalIntField)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optionalIntField (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:optionalIntField: ", p), err) }
  }
  return err
}

func (p *Foo) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("intFieldWithDefault", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:intFieldWithDefault: ", p), err) }
  if err := oprot.WriteI32(int32(p.IntFieldWithDefault)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.intFieldWithDefault (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:intFieldWithDefault: ", p), err) }
  return err
}

func (p *Foo) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("setField", thrift.SET, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:setField: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.SetField)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  set := make(map[string]bool, len(p.SetField))
  for _, v := range p.SetField {
    if ok := set[v]; ok {
      return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
    }
    set[v] = true
  }
  for _, v := range p.SetField {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:setField: ", p), err) }
  return err
}

func (p *Foo) writeField5(oprot thrift.Protocol) (err error) {
  if p.IsSetOptionalSetField() {
    if err := oprot.WriteFieldBegin("optionalSetField", thrift.SET, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:optionalSetField: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.STRING, len(p.OptionalSetField)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    set := make(map[string]bool, len(p.OptionalSetField))
    for _, v := range p.OptionalSetField {
      if ok := set[v]; ok {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
      }
      set[v] = true
    }
    for _, v := range p.OptionalSetField {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:optionalSetField: ", p), err) }
  }
  return err
}

func (p *Foo) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("mapField", thrift.MAP, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:mapField: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.MapField)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.MapField {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:mapField: ", p), err) }
  return err
}

func (p *Foo) writeField7(oprot thrift.Protocol) (err error) {
  if p.IsSetOptionalMapField() {
    if err := oprot.WriteFieldBegin("optionalMapField", thrift.MAP, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:optionalMapField: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.OptionalMapField)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.OptionalMapField {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
        return thrift.PrependError("error writing list begin: ", err)
      }
      for _, v := range v {
        if err := oprot.WriteString(string(v)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      }
      if err := oprot.WriteListEnd(); err != nil {
        return thrift.PrependError("error writing list end: ", err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:optionalMapField: ", p), err) }
  }
  return err
}

func (p *Foo) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("binaryField", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:binaryField: ", p), err) }
  if err := oprot.WriteBinary(p.BinaryField); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.binaryField (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:binaryField: ", p), err) }
  return err
}

func (p *Foo) writeField9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("longField", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:longField: ", p), err) }
  if err := oprot.WriteI64(int64(p.LongField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.longField (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:longField: ", p), err) }
  return err
}

func (p *Foo) writeField10(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("adaptedLongField", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:adaptedLongField: ", p), err) }
  if err := oprot.WriteI64(int64(p.AdaptedLongField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.adaptedLongField (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:adaptedLongField: ", p), err) }
  return err
}

func (p *Foo) writeField11(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("doubleAdaptedField", thrift.I64, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:doubleAdaptedField: ", p), err) }
  if err := oprot.WriteI64(int64(p.DoubleAdaptedField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.doubleAdaptedField (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:doubleAdaptedField: ", p), err) }
  return err
}

func (p *Foo) String() string {
  if p == nil {
    return "<nil>"
  }

  intFieldVal := fmt.Sprintf("%v", p.IntField)
  var optionalIntFieldVal string
  if p.OptionalIntField == nil {
    optionalIntFieldVal = "<nil>"
  } else {
    optionalIntFieldVal = fmt.Sprintf("%v", *p.OptionalIntField)
  }
  intFieldWithDefaultVal := fmt.Sprintf("%v", p.IntFieldWithDefault)
  setFieldVal := fmt.Sprintf("%v", p.SetField)
  optionalSetFieldVal := fmt.Sprintf("%v", p.OptionalSetField)
  mapFieldVal := fmt.Sprintf("%v", p.MapField)
  optionalMapFieldVal := fmt.Sprintf("%v", p.OptionalMapField)
  binaryFieldVal := fmt.Sprintf("%v", p.BinaryField)
  longFieldVal := fmt.Sprintf("%v", p.LongField)
  adaptedLongFieldVal := fmt.Sprintf("%v", p.AdaptedLongField)
  doubleAdaptedFieldVal := fmt.Sprintf("%v", p.DoubleAdaptedField)
  return fmt.Sprintf("Foo({IntField:%s OptionalIntField:%s IntFieldWithDefault:%s SetField:%s OptionalSetField:%s MapField:%s OptionalMapField:%s BinaryField:%s LongField:%s AdaptedLongField:%s DoubleAdaptedField:%s})", intFieldVal, optionalIntFieldVal, intFieldWithDefaultVal, setFieldVal, optionalSetFieldVal, mapFieldVal, optionalMapFieldVal, binaryFieldVal, longFieldVal, adaptedLongFieldVal, doubleAdaptedFieldVal)
}

// Attributes:
//  - IntField
//  - SetField
//  - MapField
//  - BinaryField
//  - LongField
type Baz struct {
  IntField *int32 `thrift:"intField,1,optional" db:"intField" json:"intField,omitempty"`
  // unused fields # 2 to 3
  SetField SetWithAdapter `thrift:"setField,4,optional" db:"setField" json:"setField,omitempty"`
  // unused field # 5
  MapField map[string]ListWithElemAdapterWithAdapter `thrift:"mapField,6,optional" db:"mapField" json:"mapField,omitempty"`
  // unused field # 7
  BinaryField []byte `thrift:"binaryField,8,optional" db:"binaryField" json:"binaryField,omitempty"`
  LongField *MyI64 `thrift:"longField,9,optional" db:"longField" json:"longField,omitempty"`
}

func NewBaz() *Baz {
  return &Baz{}
}

var Baz_IntField_DEFAULT int32
func (p *Baz) GetIntField() int32 {
  if !p.IsSetIntField() {
    return Baz_IntField_DEFAULT
  }
return *p.IntField
}
var Baz_SetField_DEFAULT SetWithAdapter

func (p *Baz) GetSetField() SetWithAdapter {
  return p.SetField
}
var Baz_MapField_DEFAULT map[string]ListWithElemAdapterWithAdapter

func (p *Baz) GetMapField() map[string]ListWithElemAdapterWithAdapter {
  return p.MapField
}
var Baz_BinaryField_DEFAULT []byte

func (p *Baz) GetBinaryField() []byte {
  return p.BinaryField
}
var Baz_LongField_DEFAULT MyI64
func (p *Baz) GetLongField() MyI64 {
  if !p.IsSetLongField() {
    return Baz_LongField_DEFAULT
  }
return *p.LongField
}
func (p *Baz) CountSetFieldsBaz() int {
  count := 0
  if (p.IsSetIntField()) {
    count++
  }
  if (p.IsSetSetField()) {
    count++
  }
  if (p.IsSetMapField()) {
    count++
  }
  if (p.IsSetBinaryField()) {
    count++
  }
  if (p.IsSetLongField()) {
    count++
  }
  return count

}

func (p *Baz) IsSetIntField() bool {
  return p != nil && p.IntField != nil
}

func (p *Baz) IsSetSetField() bool {
  return p != nil && p.SetField != nil
}

func (p *Baz) IsSetMapField() bool {
  return p != nil && p.MapField != nil
}

func (p *Baz) IsSetBinaryField() bool {
  return p != nil && p.BinaryField != nil
}

func (p *Baz) IsSetLongField() bool {
  return p != nil && p.LongField != nil
}

type BazBuilder struct {
  obj *Baz
}

func NewBazBuilder() *BazBuilder{
  return &BazBuilder{
    obj: NewBaz(),
  }
}

func (p BazBuilder) Emit() *Baz{
  return &Baz{
    IntField: p.obj.IntField,
    SetField: p.obj.SetField,
    MapField: p.obj.MapField,
    BinaryField: p.obj.BinaryField,
    LongField: p.obj.LongField,
  }
}

func (b *BazBuilder) IntField(intField *int32) *BazBuilder {
  b.obj.IntField = intField
  return b
}

func (b *BazBuilder) SetField(setField SetWithAdapter) *BazBuilder {
  b.obj.SetField = setField
  return b
}

func (b *BazBuilder) MapField(mapField map[string]ListWithElemAdapterWithAdapter) *BazBuilder {
  b.obj.MapField = mapField
  return b
}

func (b *BazBuilder) BinaryField(binaryField []byte) *BazBuilder {
  b.obj.BinaryField = binaryField
  return b
}

func (b *BazBuilder) LongField(longField *MyI64) *BazBuilder {
  b.obj.LongField = longField
  return b
}

func (b *Baz) SetIntField(intField *int32) *Baz {
  b.IntField = intField
  return b
}

func (b *Baz) SetSetField(setField SetWithAdapter) *Baz {
  b.SetField = setField
  return b
}

func (b *Baz) SetMapField(mapField map[string]ListWithElemAdapterWithAdapter) *Baz {
  b.MapField = mapField
  return b
}

func (b *Baz) SetBinaryField(binaryField []byte) *Baz {
  b.BinaryField = binaryField
  return b
}

func (b *Baz) SetLongField(longField *MyI64) *Baz {
  b.LongField = longField
  return b
}

func (p *Baz) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Baz)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.IntField = &v
  }
  return nil
}

func (p *Baz)  ReadField4(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make(SetWithAdapter, 0, size)
  p.SetField =  tSet
  for i := 0; i < size; i ++ {
    var _elem13 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem13 = v
    }
    p.SetField = append(p.SetField, _elem13)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *Baz)  ReadField6(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]ListWithElemAdapterWithAdapter, size)
  p.MapField =  tMap
  for i := 0; i < size; i ++ {
    var _key14 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key14 = v
    }
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make(ListWithElemAdapterWithAdapter, 0, size)
    _val15 :=  tSlice
    for i := 0; i < size; i ++ {
      var _elem16 StringWithAdapter
      if v, err := iprot.ReadString(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        temp := StringWithAdapter(v)
        _elem16 = temp
      }
      _val15 = append(_val15, _elem16)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.MapField[_key14] = _val15
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Baz)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 8: ", err)
  } else {
    p.BinaryField = v
  }
  return nil
}

func (p *Baz)  ReadField9(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 9: ", err)
  } else {
    temp := MyI64(v)
    p.LongField = &temp
  }
  return nil
}

func (p *Baz) Write(oprot thrift.Protocol) error {
  if c := p.CountSetFieldsBaz(); c > 1 {
    return fmt.Errorf("%T write union: no more than one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin("Baz"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Baz) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetIntField() {
    if err := oprot.WriteFieldBegin("intField", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:intField: ", p), err) }
    if err := oprot.WriteI32(int32(*p.IntField)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.intField (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:intField: ", p), err) }
  }
  return err
}

func (p *Baz) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetSetField() {
    if err := oprot.WriteFieldBegin("setField", thrift.SET, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:setField: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.STRING, len(p.SetField)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    set := make(map[string]bool, len(p.SetField))
    for _, v := range p.SetField {
      if ok := set[v]; ok {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
      }
      set[v] = true
    }
    for _, v := range p.SetField {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:setField: ", p), err) }
  }
  return err
}

func (p *Baz) writeField6(oprot thrift.Protocol) (err error) {
  if p.IsSetMapField() {
    if err := oprot.WriteFieldBegin("mapField", thrift.MAP, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:mapField: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.MapField)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.MapField {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
        return thrift.PrependError("error writing list begin: ", err)
      }
      for _, v := range v {
        if err := oprot.WriteString(string(v)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      }
      if err := oprot.WriteListEnd(); err != nil {
        return thrift.PrependError("error writing list end: ", err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:mapField: ", p), err) }
  }
  return err
}

func (p *Baz) writeField8(oprot thrift.Protocol) (err error) {
  if p.IsSetBinaryField() {
    if err := oprot.WriteFieldBegin("binaryField", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:binaryField: ", p), err) }
    if err := oprot.WriteBinary(p.BinaryField); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.binaryField (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:binaryField: ", p), err) }
  }
  return err
}

func (p *Baz) writeField9(oprot thrift.Protocol) (err error) {
  if p.IsSetLongField() {
    if err := oprot.WriteFieldBegin("longField", thrift.I64, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:longField: ", p), err) }
    if err := oprot.WriteI64(int64(*p.LongField)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.longField (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:longField: ", p), err) }
  }
  return err
}

func (p *Baz) String() string {
  if p == nil {
    return "<nil>"
  }

  var intFieldVal string
  if p.IntField == nil {
    intFieldVal = "<nil>"
  } else {
    intFieldVal = fmt.Sprintf("%v", *p.IntField)
  }
  setFieldVal := fmt.Sprintf("%v", p.SetField)
  mapFieldVal := fmt.Sprintf("%v", p.MapField)
  binaryFieldVal := fmt.Sprintf("%v", p.BinaryField)
  var longFieldVal string
  if p.LongField == nil {
    longFieldVal = "<nil>"
  } else {
    longFieldVal = fmt.Sprintf("%v", *p.LongField)
  }
  return fmt.Sprintf("Baz({IntField:%s SetField:%s MapField:%s BinaryField:%s LongField:%s})", intFieldVal, setFieldVal, mapFieldVal, binaryFieldVal, longFieldVal)
}

// Attributes:
//  - StructField
//  - OptionalStructField
//  - StructListField
//  - OptionalStructListField
//  - UnionField
//  - OptionalUnionField
//  - AdaptedStructField
type Bar struct {
  StructField *Foo `thrift:"structField,1" db:"structField" json:"structField"`
  OptionalStructField *Foo `thrift:"optionalStructField,2,optional" db:"optionalStructField" json:"optionalStructField,omitempty"`
  StructListField []*FooWithAdapter `thrift:"structListField,3" db:"structListField" json:"structListField"`
  OptionalStructListField []*FooWithAdapter `thrift:"optionalStructListField,4,optional" db:"optionalStructListField" json:"optionalStructListField,omitempty"`
  UnionField *Baz `thrift:"unionField,5" db:"unionField" json:"unionField"`
  OptionalUnionField *Baz `thrift:"optionalUnionField,6,optional" db:"optionalUnionField" json:"optionalUnionField,omitempty"`
  AdaptedStructField *DirectlyAdapted `thrift:"adaptedStructField,7" db:"adaptedStructField" json:"adaptedStructField"`
}

func NewBar() *Bar {
  return &Bar{
    StructField: NewFoo(),
    AdaptedStructField: NewDirectlyAdapted(),
  }
}

var Bar_StructField_DEFAULT *Foo
func (p *Bar) GetStructField() *Foo {
  if !p.IsSetStructField() {
    return Bar_StructField_DEFAULT
  }
return p.StructField
}
var Bar_OptionalStructField_DEFAULT *Foo
func (p *Bar) GetOptionalStructField() *Foo {
  if !p.IsSetOptionalStructField() {
    return Bar_OptionalStructField_DEFAULT
  }
return p.OptionalStructField
}

func (p *Bar) GetStructListField() []*FooWithAdapter {
  return p.StructListField
}
var Bar_OptionalStructListField_DEFAULT []*FooWithAdapter

func (p *Bar) GetOptionalStructListField() []*FooWithAdapter {
  return p.OptionalStructListField
}
var Bar_UnionField_DEFAULT *Baz
func (p *Bar) GetUnionField() *Baz {
  if !p.IsSetUnionField() {
    return Bar_UnionField_DEFAULT
  }
return p.UnionField
}
var Bar_OptionalUnionField_DEFAULT *Baz
func (p *Bar) GetOptionalUnionField() *Baz {
  if !p.IsSetOptionalUnionField() {
    return Bar_OptionalUnionField_DEFAULT
  }
return p.OptionalUnionField
}
var Bar_AdaptedStructField_DEFAULT *DirectlyAdapted
func (p *Bar) GetAdaptedStructField() *DirectlyAdapted {
  if !p.IsSetAdaptedStructField() {
    return Bar_AdaptedStructField_DEFAULT
  }
return p.AdaptedStructField
}
func (p *Bar) IsSetStructField() bool {
  return p != nil && p.StructField != nil
}

func (p *Bar) IsSetOptionalStructField() bool {
  return p != nil && p.OptionalStructField != nil
}

func (p *Bar) IsSetOptionalStructListField() bool {
  return p != nil && p.OptionalStructListField != nil
}

func (p *Bar) IsSetUnionField() bool {
  return p != nil && p.UnionField != nil
}

func (p *Bar) IsSetOptionalUnionField() bool {
  return p != nil && p.OptionalUnionField != nil
}

func (p *Bar) IsSetAdaptedStructField() bool {
  return p != nil && p.AdaptedStructField != nil
}

type BarBuilder struct {
  obj *Bar
}

func NewBarBuilder() *BarBuilder{
  return &BarBuilder{
    obj: NewBar(),
  }
}

func (p BarBuilder) Emit() *Bar{
  return &Bar{
    StructField: p.obj.StructField,
    OptionalStructField: p.obj.OptionalStructField,
    StructListField: p.obj.StructListField,
    OptionalStructListField: p.obj.OptionalStructListField,
    UnionField: p.obj.UnionField,
    OptionalUnionField: p.obj.OptionalUnionField,
    AdaptedStructField: p.obj.AdaptedStructField,
  }
}

func (b *BarBuilder) StructField(structField *Foo) *BarBuilder {
  b.obj.StructField = structField
  return b
}

func (b *BarBuilder) OptionalStructField(optionalStructField *Foo) *BarBuilder {
  b.obj.OptionalStructField = optionalStructField
  return b
}

func (b *BarBuilder) StructListField(structListField []*FooWithAdapter) *BarBuilder {
  b.obj.StructListField = structListField
  return b
}

func (b *BarBuilder) OptionalStructListField(optionalStructListField []*FooWithAdapter) *BarBuilder {
  b.obj.OptionalStructListField = optionalStructListField
  return b
}

func (b *BarBuilder) UnionField(unionField *Baz) *BarBuilder {
  b.obj.UnionField = unionField
  return b
}

func (b *BarBuilder) OptionalUnionField(optionalUnionField *Baz) *BarBuilder {
  b.obj.OptionalUnionField = optionalUnionField
  return b
}

func (b *BarBuilder) AdaptedStructField(adaptedStructField *DirectlyAdapted) *BarBuilder {
  b.obj.AdaptedStructField = adaptedStructField
  return b
}

func (b *Bar) SetStructField(structField *Foo) *Bar {
  b.StructField = structField
  return b
}

func (b *Bar) SetOptionalStructField(optionalStructField *Foo) *Bar {
  b.OptionalStructField = optionalStructField
  return b
}

func (b *Bar) SetStructListField(structListField []*FooWithAdapter) *Bar {
  b.StructListField = structListField
  return b
}

func (b *Bar) SetOptionalStructListField(optionalStructListField []*FooWithAdapter) *Bar {
  b.OptionalStructListField = optionalStructListField
  return b
}

func (b *Bar) SetUnionField(unionField *Baz) *Bar {
  b.UnionField = unionField
  return b
}

func (b *Bar) SetOptionalUnionField(optionalUnionField *Baz) *Bar {
  b.OptionalUnionField = optionalUnionField
  return b
}

func (b *Bar) SetAdaptedStructField(adaptedStructField *DirectlyAdapted) *Bar {
  b.AdaptedStructField = adaptedStructField
  return b
}

func (p *Bar) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Bar)  ReadField1(iprot thrift.Protocol) error {
  p.StructField = NewFoo()
  if err := p.StructField.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StructField), err)
  }
  return nil
}

func (p *Bar)  ReadField2(iprot thrift.Protocol) error {
  p.OptionalStructField = NewFoo()
  if err := p.OptionalStructField.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptionalStructField), err)
  }
  return nil
}

func (p *Bar)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FooWithAdapter, 0, size)
  p.StructListField =  tSlice
  for i := 0; i < size; i ++ {
    _elem17 := NewFooWithAdapter()
    if err := _elem17.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem17), err)
    }
    p.StructListField = append(p.StructListField, _elem17)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Bar)  ReadField4(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FooWithAdapter, 0, size)
  p.OptionalStructListField =  tSlice
  for i := 0; i < size; i ++ {
    _elem18 := NewFooWithAdapter()
    if err := _elem18.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem18), err)
    }
    p.OptionalStructListField = append(p.OptionalStructListField, _elem18)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Bar)  ReadField5(iprot thrift.Protocol) error {
  p.UnionField = NewBaz()
  if err := p.UnionField.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnionField), err)
  }
  return nil
}

func (p *Bar)  ReadField6(iprot thrift.Protocol) error {
  p.OptionalUnionField = NewBaz()
  if err := p.OptionalUnionField.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptionalUnionField), err)
  }
  return nil
}

func (p *Bar)  ReadField7(iprot thrift.Protocol) error {
  p.AdaptedStructField = NewDirectlyAdapted()
  if err := p.AdaptedStructField.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AdaptedStructField), err)
  }
  return nil
}

func (p *Bar) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Bar"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Bar) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("structField", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:structField: ", p), err) }
  if err := p.StructField.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StructField), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:structField: ", p), err) }
  return err
}

func (p *Bar) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetOptionalStructField() {
    if err := oprot.WriteFieldBegin("optionalStructField", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:optionalStructField: ", p), err) }
    if err := p.OptionalStructField.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptionalStructField), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:optionalStructField: ", p), err) }
  }
  return err
}

func (p *Bar) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("structListField", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:structListField: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.StructListField)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.StructListField {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:structListField: ", p), err) }
  return err
}

func (p *Bar) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetOptionalStructListField() {
    if err := oprot.WriteFieldBegin("optionalStructListField", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:optionalStructListField: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OptionalStructListField)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.OptionalStructListField {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:optionalStructListField: ", p), err) }
  }
  return err
}

func (p *Bar) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("unionField", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:unionField: ", p), err) }
  if err := p.UnionField.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnionField), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:unionField: ", p), err) }
  return err
}

func (p *Bar) writeField6(oprot thrift.Protocol) (err error) {
  if p.IsSetOptionalUnionField() {
    if err := oprot.WriteFieldBegin("optionalUnionField", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:optionalUnionField: ", p), err) }
    if err := p.OptionalUnionField.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptionalUnionField), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:optionalUnionField: ", p), err) }
  }
  return err
}

func (p *Bar) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("adaptedStructField", thrift.STRUCT, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:adaptedStructField: ", p), err) }
  if err := p.AdaptedStructField.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AdaptedStructField), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:adaptedStructField: ", p), err) }
  return err
}

func (p *Bar) String() string {
  if p == nil {
    return "<nil>"
  }

  var structFieldVal string
  if p.StructField == nil {
    structFieldVal = "<nil>"
  } else {
    structFieldVal = fmt.Sprintf("%v", p.StructField)
  }
  var optionalStructFieldVal string
  if p.OptionalStructField == nil {
    optionalStructFieldVal = "<nil>"
  } else {
    optionalStructFieldVal = fmt.Sprintf("%v", p.OptionalStructField)
  }
  structListFieldVal := fmt.Sprintf("%v", p.StructListField)
  optionalStructListFieldVal := fmt.Sprintf("%v", p.OptionalStructListField)
  var unionFieldVal string
  if p.UnionField == nil {
    unionFieldVal = "<nil>"
  } else {
    unionFieldVal = fmt.Sprintf("%v", p.UnionField)
  }
  var optionalUnionFieldVal string
  if p.OptionalUnionField == nil {
    optionalUnionFieldVal = "<nil>"
  } else {
    optionalUnionFieldVal = fmt.Sprintf("%v", p.OptionalUnionField)
  }
  var adaptedStructFieldVal string
  if p.AdaptedStructField == nil {
    adaptedStructFieldVal = "<nil>"
  } else {
    adaptedStructFieldVal = fmt.Sprintf("%v", p.AdaptedStructField)
  }
  return fmt.Sprintf("Bar({StructField:%s OptionalStructField:%s StructListField:%s OptionalStructListField:%s UnionField:%s OptionalUnionField:%s AdaptedStructField:%s})", structFieldVal, optionalStructFieldVal, structListFieldVal, optionalStructListFieldVal, unionFieldVal, optionalUnionFieldVal, adaptedStructFieldVal)
}

// Attributes:
//  - Field
type DirectlyAdapted struct {
  Field int32 `thrift:"field,1" db:"field" json:"field"`
}

func NewDirectlyAdapted() *DirectlyAdapted {
  return &DirectlyAdapted{}
}


func (p *DirectlyAdapted) GetField() int32 {
  return p.Field
}
type DirectlyAdaptedBuilder struct {
  obj *DirectlyAdapted
}

func NewDirectlyAdaptedBuilder() *DirectlyAdaptedBuilder{
  return &DirectlyAdaptedBuilder{
    obj: NewDirectlyAdapted(),
  }
}

func (p DirectlyAdaptedBuilder) Emit() *DirectlyAdapted{
  return &DirectlyAdapted{
    Field: p.obj.Field,
  }
}

func (d *DirectlyAdaptedBuilder) Field(field int32) *DirectlyAdaptedBuilder {
  d.obj.Field = field
  return d
}

func (d *DirectlyAdapted) SetField(field int32) *DirectlyAdapted {
  d.Field = field
  return d
}

func (p *DirectlyAdapted) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DirectlyAdapted)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Field = v
  }
  return nil
}

func (p *DirectlyAdapted) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DirectlyAdapted"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DirectlyAdapted) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("field", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:field: ", p), err) }
  if err := oprot.WriteI32(int32(p.Field)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.field (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:field: ", p), err) }
  return err
}

func (p *DirectlyAdapted) String() string {
  if p == nil {
    return "<nil>"
  }

  fieldVal := fmt.Sprintf("%v", p.Field)
  return fmt.Sprintf("DirectlyAdapted({Field:%s})", fieldVal)
}

// Attributes:
//  - Field
//  - SharedField
//  - OptSharedField
//  - OptBoxedField
type StructWithFieldAdapter struct {
  Field int32 `thrift:"field,1" db:"field" json:"field"`
  SharedField int32 `thrift:"shared_field,2" db:"shared_field" json:"shared_field"`
  OptSharedField *int32 `thrift:"opt_shared_field,3,optional" db:"opt_shared_field" json:"opt_shared_field,omitempty"`
  OptBoxedField *int32 `thrift:"opt_boxed_field,4,optional" db:"opt_boxed_field" json:"opt_boxed_field,omitempty"`
}

func NewStructWithFieldAdapter() *StructWithFieldAdapter {
  return &StructWithFieldAdapter{}
}


func (p *StructWithFieldAdapter) GetField() int32 {
  return p.Field
}

func (p *StructWithFieldAdapter) GetSharedField() int32 {
  return p.SharedField
}
var StructWithFieldAdapter_OptSharedField_DEFAULT int32
func (p *StructWithFieldAdapter) GetOptSharedField() int32 {
  if !p.IsSetOptSharedField() {
    return StructWithFieldAdapter_OptSharedField_DEFAULT
  }
return *p.OptSharedField
}
var StructWithFieldAdapter_OptBoxedField_DEFAULT int32
func (p *StructWithFieldAdapter) GetOptBoxedField() int32 {
  if !p.IsSetOptBoxedField() {
    return StructWithFieldAdapter_OptBoxedField_DEFAULT
  }
return *p.OptBoxedField
}
func (p *StructWithFieldAdapter) IsSetOptSharedField() bool {
  return p != nil && p.OptSharedField != nil
}

func (p *StructWithFieldAdapter) IsSetOptBoxedField() bool {
  return p != nil && p.OptBoxedField != nil
}

type StructWithFieldAdapterBuilder struct {
  obj *StructWithFieldAdapter
}

func NewStructWithFieldAdapterBuilder() *StructWithFieldAdapterBuilder{
  return &StructWithFieldAdapterBuilder{
    obj: NewStructWithFieldAdapter(),
  }
}

func (p StructWithFieldAdapterBuilder) Emit() *StructWithFieldAdapter{
  return &StructWithFieldAdapter{
    Field: p.obj.Field,
    SharedField: p.obj.SharedField,
    OptSharedField: p.obj.OptSharedField,
    OptBoxedField: p.obj.OptBoxedField,
  }
}

func (s *StructWithFieldAdapterBuilder) Field(field int32) *StructWithFieldAdapterBuilder {
  s.obj.Field = field
  return s
}

func (s *StructWithFieldAdapterBuilder) SharedField(sharedField int32) *StructWithFieldAdapterBuilder {
  s.obj.SharedField = sharedField
  return s
}

func (s *StructWithFieldAdapterBuilder) OptSharedField(optSharedField *int32) *StructWithFieldAdapterBuilder {
  s.obj.OptSharedField = optSharedField
  return s
}

func (s *StructWithFieldAdapterBuilder) OptBoxedField(optBoxedField *int32) *StructWithFieldAdapterBuilder {
  s.obj.OptBoxedField = optBoxedField
  return s
}

func (s *StructWithFieldAdapter) SetField(field int32) *StructWithFieldAdapter {
  s.Field = field
  return s
}

func (s *StructWithFieldAdapter) SetSharedField(sharedField int32) *StructWithFieldAdapter {
  s.SharedField = sharedField
  return s
}

func (s *StructWithFieldAdapter) SetOptSharedField(optSharedField *int32) *StructWithFieldAdapter {
  s.OptSharedField = optSharedField
  return s
}

func (s *StructWithFieldAdapter) SetOptBoxedField(optBoxedField *int32) *StructWithFieldAdapter {
  s.OptBoxedField = optBoxedField
  return s
}

func (p *StructWithFieldAdapter) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StructWithFieldAdapter)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Field = v
  }
  return nil
}

func (p *StructWithFieldAdapter)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.SharedField = v
  }
  return nil
}

func (p *StructWithFieldAdapter)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.OptSharedField = &v
  }
  return nil
}

func (p *StructWithFieldAdapter)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.OptBoxedField = &v
  }
  return nil
}

func (p *StructWithFieldAdapter) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("StructWithFieldAdapter"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StructWithFieldAdapter) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("field", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:field: ", p), err) }
  if err := oprot.WriteI32(int32(p.Field)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.field (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:field: ", p), err) }
  return err
}

func (p *StructWithFieldAdapter) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("shared_field", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:shared_field: ", p), err) }
  if err := oprot.WriteI32(int32(p.SharedField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.shared_field (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:shared_field: ", p), err) }
  return err
}

func (p *StructWithFieldAdapter) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetOptSharedField() {
    if err := oprot.WriteFieldBegin("opt_shared_field", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:opt_shared_field: ", p), err) }
    if err := oprot.WriteI32(int32(*p.OptSharedField)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.opt_shared_field (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:opt_shared_field: ", p), err) }
  }
  return err
}

func (p *StructWithFieldAdapter) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetOptBoxedField() {
    if err := oprot.WriteFieldBegin("opt_boxed_field", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:opt_boxed_field: ", p), err) }
    if err := oprot.WriteI32(int32(*p.OptBoxedField)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.opt_boxed_field (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:opt_boxed_field: ", p), err) }
  }
  return err
}

func (p *StructWithFieldAdapter) String() string {
  if p == nil {
    return "<nil>"
  }

  fieldVal := fmt.Sprintf("%v", p.Field)
  sharedFieldVal := fmt.Sprintf("%v", p.SharedField)
  var optSharedFieldVal string
  if p.OptSharedField == nil {
    optSharedFieldVal = "<nil>"
  } else {
    optSharedFieldVal = fmt.Sprintf("%v", *p.OptSharedField)
  }
  var optBoxedFieldVal string
  if p.OptBoxedField == nil {
    optBoxedFieldVal = "<nil>"
  } else {
    optBoxedFieldVal = fmt.Sprintf("%v", *p.OptBoxedField)
  }
  return fmt.Sprintf("StructWithFieldAdapter({Field:%s SharedField:%s OptSharedField:%s OptBoxedField:%s})", fieldVal, sharedFieldVal, optSharedFieldVal, optBoxedFieldVal)
}

// Attributes:
//  - IntField
//  - StringField
//  - SetField
type TerseAdaptedFields struct {
  IntField int32 `thrift:"int_field,1" db:"int_field" json:"int_field"`
  StringField string `thrift:"string_field,2" db:"string_field" json:"string_field"`
  SetField []int32 `thrift:"set_field,3" db:"set_field" json:"set_field"`
}

func NewTerseAdaptedFields() *TerseAdaptedFields {
  return &TerseAdaptedFields{}
}


func (p *TerseAdaptedFields) GetIntField() int32 {
  return p.IntField
}

func (p *TerseAdaptedFields) GetStringField() string {
  return p.StringField
}

func (p *TerseAdaptedFields) GetSetField() []int32 {
  return p.SetField
}
type TerseAdaptedFieldsBuilder struct {
  obj *TerseAdaptedFields
}

func NewTerseAdaptedFieldsBuilder() *TerseAdaptedFieldsBuilder{
  return &TerseAdaptedFieldsBuilder{
    obj: NewTerseAdaptedFields(),
  }
}

func (p TerseAdaptedFieldsBuilder) Emit() *TerseAdaptedFields{
  return &TerseAdaptedFields{
    IntField: p.obj.IntField,
    StringField: p.obj.StringField,
    SetField: p.obj.SetField,
  }
}

func (t *TerseAdaptedFieldsBuilder) IntField(intField int32) *TerseAdaptedFieldsBuilder {
  t.obj.IntField = intField
  return t
}

func (t *TerseAdaptedFieldsBuilder) StringField(stringField string) *TerseAdaptedFieldsBuilder {
  t.obj.StringField = stringField
  return t
}

func (t *TerseAdaptedFieldsBuilder) SetField(setField []int32) *TerseAdaptedFieldsBuilder {
  t.obj.SetField = setField
  return t
}

func (t *TerseAdaptedFields) SetIntField(intField int32) *TerseAdaptedFields {
  t.IntField = intField
  return t
}

func (t *TerseAdaptedFields) SetStringField(stringField string) *TerseAdaptedFields {
  t.StringField = stringField
  return t
}

func (t *TerseAdaptedFields) SetSetField(setField []int32) *TerseAdaptedFields {
  t.SetField = setField
  return t
}

func (p *TerseAdaptedFields) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TerseAdaptedFields)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.IntField = v
  }
  return nil
}

func (p *TerseAdaptedFields)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.StringField = v
  }
  return nil
}

func (p *TerseAdaptedFields)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]int32, 0, size)
  p.SetField =  tSet
  for i := 0; i < size; i ++ {
    var _elem19 int32
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem19 = v
    }
    p.SetField = append(p.SetField, _elem19)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TerseAdaptedFields) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("TerseAdaptedFields"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TerseAdaptedFields) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("int_field", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:int_field: ", p), err) }
  if err := oprot.WriteI32(int32(p.IntField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.int_field (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:int_field: ", p), err) }
  return err
}

func (p *TerseAdaptedFields) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("string_field", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:string_field: ", p), err) }
  if err := oprot.WriteString(string(p.StringField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.string_field (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:string_field: ", p), err) }
  return err
}

func (p *TerseAdaptedFields) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("set_field", thrift.SET, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:set_field: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.I32, len(p.SetField)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  set := make(map[int32]bool, len(p.SetField))
  for _, v := range p.SetField {
    if ok := set[v]; ok {
      return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
    }
    set[v] = true
  }
  for _, v := range p.SetField {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:set_field: ", p), err) }
  return err
}

func (p *TerseAdaptedFields) String() string {
  if p == nil {
    return "<nil>"
  }

  intFieldVal := fmt.Sprintf("%v", p.IntField)
  stringFieldVal := fmt.Sprintf("%v", p.StringField)
  setFieldVal := fmt.Sprintf("%v", p.SetField)
  return fmt.Sprintf("TerseAdaptedFields({IntField:%s StringField:%s SetField:%s})", intFieldVal, stringFieldVal, setFieldVal)
}

// Attributes:
//  - A
type B struct {
  A *A `thrift:"a,1" db:"a" json:"a"`
}

func NewB() *B {
  return &B{
    A: NewAdaptedA(),
  }
}

var B_A_DEFAULT *A
func (p *B) GetA() *A {
  if !p.IsSetA() {
    return B_A_DEFAULT
  }
return p.A
}
func (p *B) IsSetA() bool {
  return p != nil && p.A != nil
}

type BBuilder struct {
  obj *B
}

func NewBBuilder() *BBuilder{
  return &BBuilder{
    obj: NewB(),
  }
}

func (p BBuilder) Emit() *B{
  return &B{
    A: p.obj.A,
  }
}

func (b *BBuilder) A(a *A) *BBuilder {
  b.obj.A = a
  return b
}

func (b *B) SetA(a *A) *B {
  b.A = a
  return b
}

func (p *B) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *B)  ReadField1(iprot thrift.Protocol) error {
  p.A = NewAdaptedA()
  if err := p.A.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.A), err)
  }
  return nil
}

func (p *B) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("B"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *B) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("a", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:a: ", p), err) }
  if err := p.A.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.A), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:a: ", p), err) }
  return err
}

func (p *B) String() string {
  if p == nil {
    return "<nil>"
  }

  var aVal string
  if p.A == nil {
    aVal = "<nil>"
  } else {
    aVal = fmt.Sprintf("%v", p.A)
  }
  return fmt.Sprintf("B({A:%s})", aVal)
}

type A struct {
}

func NewA() *A {
  return &A{}
}

type ABuilder struct {
  obj *A
}

func NewABuilder() *ABuilder{
  return &ABuilder{
    obj: NewA(),
  }
}

func (p ABuilder) Emit() *A{
  return &A{
  }
}

func (p *A) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *A) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("A"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *A) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("A({})")
}

// Attributes:
//  - Path
type Config struct {
  Path string `thrift:"path,1" db:"path" json:"path"`
}

func NewConfig() *Config {
  return &Config{}
}


func (p *Config) GetPath() string {
  return p.Path
}
type ConfigBuilder struct {
  obj *Config
}

func NewConfigBuilder() *ConfigBuilder{
  return &ConfigBuilder{
    obj: NewConfig(),
  }
}

func (p ConfigBuilder) Emit() *Config{
  return &Config{
    Path: p.obj.Path,
  }
}

func (c *ConfigBuilder) Path(path string) *ConfigBuilder {
  c.obj.Path = path
  return c
}

func (c *Config) SetPath(path string) *Config {
  c.Path = path
  return c
}

func (p *Config) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Config)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Path = v
  }
  return nil
}

func (p *Config) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Config"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Config) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err) }
  if err := oprot.WriteString(string(p.Path)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err) }
  return err
}

func (p *Config) String() string {
  if p == nil {
    return "<nil>"
  }

  pathVal := fmt.Sprintf("%v", p.Path)
  return fmt.Sprintf("Config({Path:%s})", pathVal)
}

// Attributes:
//  - Field
//  - SetString
type MyStruct struct {
  Field int32 `thrift:"field,1" db:"field" json:"field"`
  SetString SetWithAdapter `thrift:"set_string,2" db:"set_string" json:"set_string"`
}

func NewMyStruct() *MyStruct {
  return &MyStruct{}
}


func (p *MyStruct) GetField() int32 {
  return p.Field
}

func (p *MyStruct) GetSetString() SetWithAdapter {
  return p.SetString
}
type MyStructBuilder struct {
  obj *MyStruct
}

func NewMyStructBuilder() *MyStructBuilder{
  return &MyStructBuilder{
    obj: NewMyStruct(),
  }
}

func (p MyStructBuilder) Emit() *MyStruct{
  return &MyStruct{
    Field: p.obj.Field,
    SetString: p.obj.SetString,
  }
}

func (m *MyStructBuilder) Field(field int32) *MyStructBuilder {
  m.obj.Field = field
  return m
}

func (m *MyStructBuilder) SetString(setString SetWithAdapter) *MyStructBuilder {
  m.obj.SetString = setString
  return m
}

func (m *MyStruct) SetField(field int32) *MyStruct {
  m.Field = field
  return m
}

func (m *MyStruct) SetSetString(setString SetWithAdapter) *MyStruct {
  m.SetString = setString
  return m
}

func (p *MyStruct) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStruct)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Field = v
  }
  return nil
}

func (p *MyStruct)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make(SetWithAdapter, 0, size)
  p.SetString =  tSet
  for i := 0; i < size; i ++ {
    var _elem20 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem20 = v
    }
    p.SetString = append(p.SetString, _elem20)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *MyStruct) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStruct) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("field", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:field: ", p), err) }
  if err := oprot.WriteI32(int32(p.Field)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.field (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:field: ", p), err) }
  return err
}

func (p *MyStruct) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("set_string", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:set_string: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.SetString)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  set := make(map[string]bool, len(p.SetString))
  for _, v := range p.SetString {
    if ok := set[v]; ok {
      return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
    }
    set[v] = true
  }
  for _, v := range p.SetString {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:set_string: ", p), err) }
  return err
}

func (p *MyStruct) String() string {
  if p == nil {
    return "<nil>"
  }

  fieldVal := fmt.Sprintf("%v", p.Field)
  setStringVal := fmt.Sprintf("%v", p.SetString)
  return fmt.Sprintf("MyStruct({Field:%s SetString:%s})", fieldVal, setStringVal)
}

