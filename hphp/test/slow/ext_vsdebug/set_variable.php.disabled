<?hh
require(__DIR__ . '/common.inc');

$breakpoints = [
  array(
    "path" => __FILE__ . ".test",
    "breakpoints" => [
      array("line" => 5, "calibratedLine" => 5, "condition" => ""),
    ])
  ];

$path = __FILE__ . ".test";
$testProcess = vsDebugLaunch($path, true, $breakpoints);

// Verify we hit breakpoint 1.
verifyBpHit($breakpoints[0]{'path'}, $breakpoints[0]{'breakpoints'}[0]);

$seq = sendVsCommand(array(
  "command" => "stackTrace",
  "type" => "request",
  "arguments" => array(
    "threadId" => 1
  )));

$msg = json_decode(getNextVsDebugMessage(), true);
checkObjEqualRecursively($msg, array(
  "type" => "response",
  "command" => "stackTrace",
  "request_seq" => $seq,
  "success" => true,
  "body" => array(
      "totalFrames" => 1,
      "stackFrames" => [
        array(
          "source" => array("path" => $path, "name" => $path),
          "id" => 1,
          "line" => 5,
          "name" => "{main}"
        )
      ]
    )
  ));

// Get scopes.
$seq = sendVsCommand(array(
  "command" => "scopes",
  "type" => "request",
  "arguments" => array("frameId" => 1)));
$msg = json_decode(getNextVsDebugMessage(), true);
checkObjEqualRecursively($msg, array(
  "type" => "response",
  "command" => "scopes",
  "request_seq" => $seq,
  "success" => true,
  "body" => [
    "scopes" => [
      array(
        "namedVariables" => 6,
        "name" => "Locals",
        "variablesReference" => 2
      ),
  ]]));

// Get locals
$seq = sendVsCommand(array(
  "command" => "variables",
  "type" => "request",
  "arguments" => array("variablesReference" => 2)));
$msg = json_decode(getNextVsDebugMessage(), true);
checkObjEqualRecursively($msg, array(
  "type" => "response",
  "command" => "variables",
  "request_seq" => $seq,
  "success" => true,
  "body" => [
    "variables" => [
      array(
        "name" => "\$argc",
      ),
      array(
        "name" => "\$argv",
      ),
      array(
        "name" => "\$HTTP_RAW_POST_DATA",
      ),
      array(
        "type" => "string",
        "name" => "\$str",
        "value" => "hey",
      ),
      array(
        "type" => "int",
        "name" => "\$x",
        "value" => "1",
      ),
      array(
        "type" => "int",
        "name" => "\$y",
        "value" => "2",
      ),
  ]]
  ));

if (count($msg{"body"}{"variables"}) != 6) {
  throw new UnexpectedValueException("Unexpected variable count");
}

// Set variable.
$seq = sendVsCommand(array(
  "command" => "setVariable",
  "type" => "request",
  "arguments" => array(
    "variablesReference" => 2,
    "name" => "\$x",
    "value" => "2"
  )));
$msg = json_decode(getNextVsDebugMessage(), true);
checkObjEqualRecursively($msg, array(
  "type" => "response",
  "command" => "setVariable",
  "request_seq" => $seq,
  "success" => true,
  "body" => array(
    "value" => "2",
    "type" => "int"
  )));

$seq = sendVsCommand(array(
  "command" => "variables",
  "type" => "request",
  "arguments" => array("variablesReference" => 2)));
$msg = json_decode(getNextVsDebugMessage(), true);
checkObjEqualRecursively($msg, array(
  "type" => "response",
  "command" => "variables",
  "request_seq" => $seq,
  "success" => true,
  "body" => [
    "variables" => [
      array(
        "name" => "\$argc",
      ),
      array(
        "name" => "\$argv",
      ),
      array(
        "name" => "\$HTTP_RAW_POST_DATA",
      ),
      array(
        "type" => "string",
        "name" => "\$str",
        "value" => "hey",
      ),
      array(
        "type" => "int",
        "name" => "\$x",
        "value" => "2",
      ),
      array(
        "type" => "int",
        "name" => "\$y",
        "value" => "2",
      ),
  ]]
  ));

if (count($msg{"body"}{"variables"}) != 6) {
  throw new UnexpectedValueException("Unexpected variable count");
}

// Try to set the variable $y to a string, changing its type.
$seq = sendVsCommand(array(
  "command" => "setVariable",
  "type" => "request",
  "arguments" => array(
    "variablesReference" => 2,
    "name" => "\$y",
    "value" => "hello world"
  )));
$msg = json_decode(getNextVsDebugMessage(), true);
checkObjEqualRecursively($msg, array(
  "type" => "event",
  "event" => "output",
  "body" => array(
    "category" => "stderr",
    "output" => "Invalid value specified.",
  )));
$msg = json_decode(getNextVsDebugMessage(), true);
checkObjEqualRecursively($msg, array(
  "type" => "response",
  "command" => "setVariable",
  "request_seq" => $seq,
  "success" => false,));


$seq = sendVsCommand(array(
  "command" => "variables",
  "type" => "request",
  "arguments" => array("variablesReference" => 2)));
$msg = json_decode(getNextVsDebugMessage(), true);

checkObjEqualRecursively($msg, array(
  "type" => "event",
  "event" => "output",
  "body" => array("category" => "stderr",
    "output" => "Invalid value specified.")
));

$msg = json_decode(getNextVsDebugMessage(), true);
checkObjEqualRecursively($msg, array(
  "type" => "response",
  "command" => "variables",
  "request_seq" => $seq,
  "success" => true,
  "body" => [
    "variables" => [
      array(
        "name" => "\$argc",
      ),
      array(
        "name" => "\$argv",
      ),
      array(
        "name" => "\$HTTP_RAW_POST_DATA",
      ),
      array(
        "type" => "string",
        "name" => "\$str",
        "value" => "hey",
      ),
      array(
        "type" => "int",
        "name" => "\$x",
        "value" => "2",
      ),
      array(
        "type" => "int",
        "name" => "\$y",
        "value" => "2",
      ),
  ]]
  ));

if (count($msg{"body"}{"variables"}) != 6) {
  throw new UnexpectedValueException("Unexpected variable count");
}

// Set value of a string.
$seq = sendVsCommand(array(
  "command" => "setVariable",
  "type" => "request",
  "arguments" => array(
    "variablesReference" => 2,
    "name" => "\$str",
    "value" => "there"
  )));
$msg = json_decode(getNextVsDebugMessage(), true);
checkObjEqualRecursively($msg, array(
  "type" => "response",
  "command" => "setVariable",
  "request_seq" => $seq,
  "success" => true,
  "body" => array(
    "value" => "there",
    "type" => "string"
  )));

$seq = sendVsCommand(array(
  "command" => "variables",
  "type" => "request",
  "arguments" => array("variablesReference" => 2)));
$msg = json_decode(getNextVsDebugMessage(), true);
checkObjEqualRecursively($msg, array(
  "type" => "response",
  "command" => "variables",
  "request_seq" => $seq,
  "success" => true,
  "body" => [
    "variables" => [
      array(
        "name" => "\$argc",
      ),
      array(
        "name" => "\$argv",
      ),
      array(
        "name" => "\$HTTP_RAW_POST_DATA",
      ),
      array(
        "type" => "string",
        "name" => "\$str",
        "value" => "there",
      ),
      array(
        "type" => "int",
        "name" => "\$x",
        "value" => "2",
      ),
      array(
        "type" => "int",
        "name" => "\$y",
        "value" => "2",
      ),
  ]]
  ));

if (count($msg{"body"}{"variables"}) != 6) {
  throw new UnexpectedValueException("Unexpected variable count");
}

$breakpoints = [
  array(
    "path" => __FILE__ . ".test",
    "breakpoints" => [
      array("line" => 7, "calibratedLine" => 7, "condition" => ""),
    ])
  ];

setBreakpoints($breakpoints);
resumeTarget();

checkForOutput($testProcess, "hello world\n", "stdout");

// Hit breakpoint 2.
verifyBpHit($breakpoints[0]{'path'}, $breakpoints[0]{'breakpoints'}[0]);

$seq = sendVsCommand(array(
  "command" => "stackTrace",
  "type" => "request",
  "arguments" => array(
    "threadId" => 1
  )));

$msg = json_decode(getNextVsDebugMessage(), true);
checkObjEqualRecursively($msg, array(
  "type" => "response",
  "command" => "stackTrace",
  "request_seq" => $seq,
  "success" => true,
  "body" => array(
      "totalFrames" => 1,
      "stackFrames" => [
        array(
          "source" => array("path" => $path, "name" => $path),
          "id" => 11,
          "line" => 7,
          "name" => "{main}"
        )
      ]
    )
  ));

// Get scopes.
$seq = sendVsCommand(array(
  "command" => "scopes",
  "type" => "request",
  "arguments" => array("frameId" => 11)));
$msg = json_decode(getNextVsDebugMessage(), true);
checkObjEqualRecursively($msg, array(
  "type" => "response",
  "command" => "scopes",
  "request_seq" => $seq,
  "success" => true,
  "body" => [
    "scopes" => [
      array(
        "namedVariables" => 7,
        "name" => "Locals",
        "variablesReference" => 12
      ),
  ]]));

$seq = sendVsCommand(array(
  "command" => "variables",
  "type" => "request",
  "arguments" => array("variablesReference" => 12)));
$msg = json_decode(getNextVsDebugMessage(), true);
checkObjEqualRecursively($msg, array(
  "type" => "response",
  "command" => "variables",
  "request_seq" => $seq,
  "success" => true,
  "body" => [
    "variables" => [
      array(
        "type" => "array",
        "name" => "\$a",
        "value" => "array[3]",
        "indexedVariables" => 3,
        "variablesReference" => 17
      ),
      array(
        "name" => "\$argc",
      ),
      array(
        "name" => "\$argv",
      ),
      array(
        "name" => "\$HTTP_RAW_POST_DATA",
      ),
      array(
        "type" => "string",
        "name" => "\$str",
        "value" => "there",
      ),
      array(
        "type" => "int",
        "name" => "\$x",
        "value" => "2",
      ),
      array(
        "type" => "int",
        "name" => "\$y",
        "value" => "2",
      ),
  ]]
  ));

$seq = sendVsCommand(array(
  "command" => "variables",
  "type" => "request",
  "arguments" => array("variablesReference" => 17)));
$msg = json_decode(getNextVsDebugMessage(), true);
checkObjEqualRecursively($msg, array(
  "type" => "response",
  "command" => "variables",
  "request_seq" => $seq,
  "success" => true,
  "body" => [
    "variables" => [
      array(
        "type" => "int",
        "name" => "0",
        "value" => "1"
      ),
      array(
        "type" => "int",
        "name" => "1",
        "value" => "2"
      ),
      array(
        "type" => "int",
        "name" => "2",
        "value" => "3"
      ),
    ]
  ]));

$seq = sendVsCommand(array(
  "command" => "setVariable",
  "type" => "request",
  "arguments" => array(
    "variablesReference" => 17,
    "name" => "1",
    "value" => "10"
  )));
$msg = json_decode(getNextVsDebugMessage(), true);
checkObjEqualRecursively($msg, array(
  "type" => "response",
  "command" => "setVariable",
  "request_seq" => $seq,
  "success" => true,
  "body" => array(
    "value" => "10",
    "type" => "int"
  )));

// Evaluation requests.

// Simple expression
$seq = sendVsCommand(array(
  "command" => "evaluate",
  "type" => "request",
  "arguments" =>
  array("frameId" => 11, "expression" => "1 + 1")));

$msg = json_decode(getNextVsDebugMessage(), true);
checkObjEqualRecursively($msg, array(
  "type" => "response",
  "command" => "evaluate",
  "request_seq" => $seq,
  "success" => true,
  "body" => [
    "result" => "2",
    "type" => "int"
  ]));

// Expression referencing local scope
$seq = sendVsCommand(array(
  "command" => "evaluate",
  "type" => "request",
  "arguments" =>
  array("frameId" => 11, "expression" => "\$x + 1")));

$msg = json_decode(getNextVsDebugMessage(), true);
checkObjEqualRecursively($msg, array(
  "type" => "response",
  "command" => "evaluate",
  "request_seq" => $seq,
  "success" => true,
  "body" => [
    "result" => "3",
    "type" => "int"
  ]));

// Expression that runs in the dummy context due to invalid frameId
$seq = sendVsCommand(array(
  "command" => "evaluate",
  "type" => "request",
  "seq" => $seq,
  "arguments" =>
  array("frameId" => 5, "expression" => "\$x + 1")));

// Dummy thread start event.
$msg = json_decode(getNextVsDebugMessage(), true);

// Dummy thread exit event.
$msg = json_decode(getNextVsDebugMessage(), true);

$msg = json_decode(getNextVsDebugMessage(), true);
checkObjEqualRecursively($msg, array(
  "type" => "response",
  "command" => "evaluate",
  "request_seq" => $seq,
  "success" => true,
  "body" => [
    "result" => "1",
    "type" => "int"
  ]));

// Expression with side effects.
$seq = sendVsCommand(array(
  "command" => "evaluate",
  "type" => "request",
  "arguments" =>
  array("frameId" => 11, "expression" => "\$x++")));

$msg = json_decode(getNextVsDebugMessage(), true);
checkObjEqualRecursively($msg, array(
  "type" => "response",
  "command" => "evaluate",
  "request_seq" => $seq,
  "success" => true,
  "body" => [
    "result" => "2",
    "type" => "int"
  ]));

$seq = sendVsCommand(array(
  "command" => "evaluate",
  "type" => "request",
  "arguments" =>
  array("frameId" => 11, "expression" => "\$x")));

$msg = json_decode(getNextVsDebugMessage(), true);
checkObjEqualRecursively($msg, array(
  "type" => "response",
  "command" => "evaluate",
  "request_seq" => $seq,
  "success" => true,
  "body" => [
    "result" => "3",
    "type" => "int"
  ]));

// Expression that invokes a function.
$seq = sendVsCommand(array(
  "command" => "evaluate",
  "type" => "request",
  "arguments" =>
  array("frameId" => 11, "expression" => "foo()")));

$msg = json_decode(getNextVsDebugMessage(), true);
checkObjEqualRecursively($msg, array(
  "type" => "response",
  "command" => "evaluate",
  "request_seq" => $seq,
  "success" => true,
  "body" => [
    "result" => "1",
    "type" => "int"
  ]));

// Expression that invokes a function with a breakpoint in it hits bp.
$breakpoints = [
  array(
    "path" => __FILE__ . ".test",
    "breakpoints" => [
      array("line" => 10, "calibratedLine" => 10, "condition" => ""),
      array("line" => 19, "calibratedLine" => 19, "condition" => ""),
    ])
  ];

setBreakpoints($breakpoints);
resumeTarget();

checkForOutput($testProcess, "hello world 10\n", "stdout");

// Bp hit event
verifyBpHit($breakpoints[0]{'path'}, $breakpoints[0]{'breakpoints'}[1]);

// Need to fetch new frame IDs at the new stop location.
$seq = sendVsCommand(array(
  "command" => "stackTrace",
  "type" => "request",
  "arguments" => array(
    "threadId" => 1
  )));

$msg = json_decode(getNextVsDebugMessage(), true);
checkObjEqualRecursively($msg, array(
  "type" => "response",
  "command" => "stackTrace",
  "request_seq" => $seq,
  "success" => true,
  "body" => [
    "totalFrames" => 1,
    "stackFrames" => [
      array(
          "id" => 19,
          "line" => 19,
          "column" => 0,
      )]]));

$evalSeq = sendVsCommand(array(
  "command" => "evaluate",
  "type" => "request",
  "arguments" =>
  array("frameId" => 19, "expression" => "foo()")));

// Bp hit event
verifyBpHit($breakpoints[0]{'path'}, $breakpoints[0]{'breakpoints'}[0]);

// Resume from inner bp.
resumeTarget();

// Stopped at outer bp again.
$msg = json_decode(getNextVsDebugMessage(), true);
checkObjEqualRecursively($msg, array(
  "type" => "event",
  "event" => "stopped",
  "body" => array(
      "reason" => "breakpoint",
      "description" => "Evaluation returned",
      "threadId" => 1,
      "preserveFocusHint" => false,
      )));

$msg = json_decode(getNextVsDebugMessage(), true);
checkObjEqualRecursively($msg, array(
  "type" => "response",
  "command" => "evaluate",
  "request_seq" => $evalSeq,
  "success" => true,
  "body" => [
    "result" => "1",
    "type" => "int"
  ]));

// Set a proprety on an object $obj from line 19.
// We need to refetch stack and scopes so we can get a server ID
// assigned to $obj.
$seq = sendVsCommand(array(
  "command" => "stackTrace",
  "type" => "request",
  "arguments" => array(
    "threadId" => 1
  )));
$msg = json_decode(getNextVsDebugMessage(), true);
$seq = sendVsCommand(array(
  "command" => "scopes",
  "type" => "request",
  "arguments" => array("frameId" => 20)));

$msg = json_decode(getNextVsDebugMessage(), true);
$seq = sendVsCommand(array(
  "command" => "variables",
  "type" => "request",
  "arguments" => array("variablesReference" => 21)));

  $msg = json_decode(getNextVsDebugMessage(), true);
  $seq = sendVsCommand(array(
    "command" => "threads",
    "type" => "request",
));

$msg = json_decode(getNextVsDebugMessage(), true);
$seq = sendVsCommand(array(
  "command" => "setVariable",
  "type" => "request",
  "arguments" => array(
    "variablesReference" => 26,
    "name" => "\$A",
    "value" => "1000"
  )));

$msg = json_decode(getNextVsDebugMessage(), true);
checkObjEqualRecursively($msg, array(
  "type" => "response",
  "command" => "setVariable",
  "request_seq" => $seq,
  "success" => true,
  "body" => array(
    "value" => "1000",
    "type" => "int"
  )));

resumeTarget();
checkForOutput($testProcess, "1000\n", "stdout");
vsDebugCleanup($testProcess);

echo "OK!\n";
