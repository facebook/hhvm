/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/adapter/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/adapter/gen-cpp2/module_types.h"
#include "thrift/compiler/test/fixtures/adapter/gen-cpp2/module_types.tcc"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "thrift/compiler/test/fixtures/adapter/gen-cpp2/module_data.h"


namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::facebook::thrift::test::Color>::size;
folly::Range<::facebook::thrift::test::Color const*> const TEnumTraits<::facebook::thrift::test::Color>::values = folly::range(TEnumDataStorage<::facebook::thrift::test::Color>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::facebook::thrift::test::Color>::names = folly::range(TEnumDataStorage<::facebook::thrift::test::Color>::names);

bool TEnumTraits<::facebook::thrift::test::Color>::findName(type value, folly::StringPiece* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::facebook::thrift::test::Color>::findValue(folly::StringPiece name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

}} // apache::thrift

namespace facebook { namespace thrift { namespace test {
#ifndef ANDROID
FOLLY_PUSH_WARNING
FOLLY_GNU_DISABLE_WARNING("-Wdeprecated-declarations")
const _Color_EnumMapFactory::ValuesToNamesMapType _Color_VALUES_TO_NAMES = _Color_EnumMapFactory::makeValuesToNamesMap();
FOLLY_POP_WARNING
#endif
}}} // facebook::thrift::test

namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::facebook::thrift::test::ThriftAdaptedEnum>::size;
folly::Range<::facebook::thrift::test::ThriftAdaptedEnum const*> const TEnumTraits<::facebook::thrift::test::ThriftAdaptedEnum>::values = folly::range(TEnumDataStorage<::facebook::thrift::test::ThriftAdaptedEnum>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::facebook::thrift::test::ThriftAdaptedEnum>::names = folly::range(TEnumDataStorage<::facebook::thrift::test::ThriftAdaptedEnum>::names);

bool TEnumTraits<::facebook::thrift::test::ThriftAdaptedEnum>::findName(type value, folly::StringPiece* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::facebook::thrift::test::ThriftAdaptedEnum>::findValue(folly::StringPiece name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

}} // apache::thrift

namespace facebook { namespace thrift { namespace test {
#ifndef ANDROID
FOLLY_PUSH_WARNING
FOLLY_GNU_DISABLE_WARNING("-Wdeprecated-declarations")
const _ThriftAdaptedEnum_EnumMapFactory::ValuesToNamesMapType _ThriftAdaptedEnum_VALUES_TO_NAMES = _ThriftAdaptedEnum_EnumMapFactory::makeValuesToNamesMap();
FOLLY_POP_WARNING
#endif
}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::MyAnnotation>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::MyAnnotation>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace thrift { namespace test {

const char* MyAnnotation::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/MyAnnotation";
}

const folly::StringPiece MyAnnotation::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyAnnotation>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyAnnotation::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyAnnotation>::name;
}

MyAnnotation::MyAnnotation(const MyAnnotation&) = default;
MyAnnotation& MyAnnotation::operator=(const MyAnnotation&) = default;
MyAnnotation::MyAnnotation(FOLLY_MAYBE_UNUSED MyAnnotation&& other) noexcept :
    __fbthrift_field_signature(std::move(other.__fbthrift_field_signature)),
    __fbthrift_field_color(std::move(other.__fbthrift_field_color)),
    __isset(other.__isset) {
}

MyAnnotation& MyAnnotation::operator=(FOLLY_MAYBE_UNUSED MyAnnotation&& other) noexcept {
    this->__fbthrift_field_signature = std::move(other.__fbthrift_field_signature);
    this->__fbthrift_field_color = std::move(other.__fbthrift_field_color);
    __isset = other.__isset;
    return *this;
}


MyAnnotation::MyAnnotation(apache::thrift::FragileConstructor, ::std::string signature__arg, ::facebook::thrift::test::Color color__arg) :
    __fbthrift_field_signature(std::move(signature__arg)),
    __fbthrift_field_color(std::move(color__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}


void MyAnnotation::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_signature = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_color = ::facebook::thrift::test::Color();
  __isset = {};
}

void MyAnnotation::__fbthrift_clear_terse_fields() {
}

bool MyAnnotation::__fbthrift_is_empty() const {
  return false;
}

bool MyAnnotation::operator==(FOLLY_MAYBE_UNUSED const MyAnnotation& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.signature_ref() == rhs.signature_ref())) {
    return false;
  }
  if (!(lhs.color_ref() == rhs.color_ref())) {
    return false;
  }
  return true;
}

bool MyAnnotation::operator<(FOLLY_MAYBE_UNUSED const MyAnnotation& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED MyAnnotation& a, FOLLY_MAYBE_UNUSED MyAnnotation& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_signature, b.__fbthrift_field_signature);
  swap(a.__fbthrift_field_color, b.__fbthrift_field_color);
  swap(a.__isset, b.__isset);
}

template void MyAnnotation::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyAnnotation::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyAnnotation::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyAnnotation::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyAnnotation::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyAnnotation::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyAnnotation::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyAnnotation::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::Foo>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::Foo>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace thrift { namespace test {

const char* Foo::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/compiler/test/fixtures/adapter/src/module/Foo";
}

const folly::StringPiece Foo::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Foo>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece Foo::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<Foo>::name;
}

Foo::Foo(const Foo& srcObj) :
    __fbthrift_field_intField(srcObj.__fbthrift_field_intField),
    __fbthrift_field_optionalIntField(srcObj.__fbthrift_field_optionalIntField),
    __fbthrift_field_intFieldWithDefault(srcObj.__fbthrift_field_intFieldWithDefault),
    __fbthrift_field_setField(srcObj.__fbthrift_field_setField),
    __fbthrift_field_optionalSetField(srcObj.__fbthrift_field_optionalSetField),
    __fbthrift_field_mapField(srcObj.__fbthrift_field_mapField),
    __fbthrift_field_optionalMapField(srcObj.__fbthrift_field_optionalMapField),
    __fbthrift_field_binaryField(srcObj.__fbthrift_field_binaryField),
    __fbthrift_field_longField(srcObj.__fbthrift_field_longField),
    __fbthrift_field_adaptedLongField(srcObj.__fbthrift_field_adaptedLongField),
    __fbthrift_field_doubleAdaptedField(srcObj.__fbthrift_field_doubleAdaptedField),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 1>(__fbthrift_field_intField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 2>(__fbthrift_field_optionalIntField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 3>(__fbthrift_field_intFieldWithDefault, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter2, 4>(__fbthrift_field_setField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter2, 5>(__fbthrift_field_optionalSetField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter3, 6>(__fbthrift_field_mapField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter3, 7>(__fbthrift_field_optionalMapField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter3, 8>(__fbthrift_field_binaryField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 9>(__fbthrift_field_longField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter2, 10>(__fbthrift_field_adaptedLongField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 11>(__fbthrift_field_doubleAdaptedField, *this);
}

Foo& Foo::operator=(const Foo& other) {
  Foo tmp(other);
  swap(*this, tmp);
  return *this;
}

Foo::Foo() :
      __fbthrift_field_intField(),
      __fbthrift_field_optionalIntField(),
      __fbthrift_field_intFieldWithDefault(::apache::thrift::adapt_detail::fromThriftField<::my::Adapter1, 3>(::std::int32_t(static_cast<::std::int32_t>(13)), *this)),
      __fbthrift_field_longField(),
      __fbthrift_field_adaptedLongField(),
      __fbthrift_field_doubleAdaptedField() {
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 1>(__fbthrift_field_intField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 2>(__fbthrift_field_optionalIntField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 3>(__fbthrift_field_intFieldWithDefault, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter2, 4>(__fbthrift_field_setField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter2, 5>(__fbthrift_field_optionalSetField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter3, 6>(__fbthrift_field_mapField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter3, 7>(__fbthrift_field_optionalMapField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter3, 8>(__fbthrift_field_binaryField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 9>(__fbthrift_field_longField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter2, 10>(__fbthrift_field_adaptedLongField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 11>(__fbthrift_field_doubleAdaptedField, *this);
}


Foo::~Foo() {}

Foo::Foo(FOLLY_MAYBE_UNUSED Foo&& other) noexcept :
    __fbthrift_field_intField(std::move(other.__fbthrift_field_intField)),
    __fbthrift_field_optionalIntField(std::move(other.__fbthrift_field_optionalIntField)),
    __fbthrift_field_intFieldWithDefault(std::move(other.__fbthrift_field_intFieldWithDefault)),
    __fbthrift_field_setField(std::move(other.__fbthrift_field_setField)),
    __fbthrift_field_optionalSetField(std::move(other.__fbthrift_field_optionalSetField)),
    __fbthrift_field_mapField(std::move(other.__fbthrift_field_mapField)),
    __fbthrift_field_optionalMapField(std::move(other.__fbthrift_field_optionalMapField)),
    __fbthrift_field_binaryField(std::move(other.__fbthrift_field_binaryField)),
    __fbthrift_field_longField(std::move(other.__fbthrift_field_longField)),
    __fbthrift_field_adaptedLongField(std::move(other.__fbthrift_field_adaptedLongField)),
    __fbthrift_field_doubleAdaptedField(std::move(other.__fbthrift_field_doubleAdaptedField)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 1>(__fbthrift_field_intField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 2>(__fbthrift_field_optionalIntField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 3>(__fbthrift_field_intFieldWithDefault, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter2, 4>(__fbthrift_field_setField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter2, 5>(__fbthrift_field_optionalSetField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter3, 6>(__fbthrift_field_mapField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter3, 7>(__fbthrift_field_optionalMapField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter3, 8>(__fbthrift_field_binaryField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 9>(__fbthrift_field_longField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter2, 10>(__fbthrift_field_adaptedLongField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 11>(__fbthrift_field_doubleAdaptedField, *this);
}

Foo& Foo::operator=(FOLLY_MAYBE_UNUSED Foo&& other) noexcept {
    this->__fbthrift_field_intField = std::move(other.__fbthrift_field_intField);
    this->__fbthrift_field_optionalIntField = std::move(other.__fbthrift_field_optionalIntField);
    this->__fbthrift_field_intFieldWithDefault = std::move(other.__fbthrift_field_intFieldWithDefault);
    this->__fbthrift_field_setField = std::move(other.__fbthrift_field_setField);
    this->__fbthrift_field_optionalSetField = std::move(other.__fbthrift_field_optionalSetField);
    this->__fbthrift_field_mapField = std::move(other.__fbthrift_field_mapField);
    this->__fbthrift_field_optionalMapField = std::move(other.__fbthrift_field_optionalMapField);
    this->__fbthrift_field_binaryField = std::move(other.__fbthrift_field_binaryField);
    this->__fbthrift_field_longField = std::move(other.__fbthrift_field_longField);
    this->__fbthrift_field_adaptedLongField = std::move(other.__fbthrift_field_adaptedLongField);
    this->__fbthrift_field_doubleAdaptedField = std::move(other.__fbthrift_field_doubleAdaptedField);
    __isset = other.__isset;
    return *this;
}


Foo::Foo(apache::thrift::FragileConstructor, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, Foo> intField__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, Foo> optionalIntField__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, Foo> intFieldWithDefault__arg, ::facebook::thrift::test::SetWithAdapter setField__arg, ::facebook::thrift::test::SetWithAdapter optionalSetField__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>, Foo> mapField__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 7, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>, Foo> optionalMapField__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 8, ::std::string, Foo> binaryField__arg, ::facebook::thrift::test::MyI64 longField__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter2, 10, ::facebook::thrift::test::MyI64, Foo> adaptedLongField__arg, ::facebook::thrift::test::DoubleTypedefI64 doubleAdaptedField__arg) :
    __fbthrift_field_intField(std::move(intField__arg)),
    __fbthrift_field_optionalIntField(std::move(optionalIntField__arg)),
    __fbthrift_field_intFieldWithDefault(std::move(intFieldWithDefault__arg)),
    __fbthrift_field_setField(std::move(setField__arg)),
    __fbthrift_field_optionalSetField(std::move(optionalSetField__arg)),
    __fbthrift_field_mapField(std::move(mapField__arg)),
    __fbthrift_field_optionalMapField(std::move(optionalMapField__arg)),
    __fbthrift_field_binaryField(std::move(binaryField__arg)),
    __fbthrift_field_longField(std::move(longField__arg)),
    __fbthrift_field_adaptedLongField(std::move(adaptedLongField__arg)),
    __fbthrift_field_doubleAdaptedField(std::move(doubleAdaptedField__arg)) {
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 1>(__fbthrift_field_intField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 2>(__fbthrift_field_optionalIntField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 3>(__fbthrift_field_intFieldWithDefault, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter2, 4>(__fbthrift_field_setField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter2, 5>(__fbthrift_field_optionalSetField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter3, 6>(__fbthrift_field_mapField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter3, 7>(__fbthrift_field_optionalMapField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter3, 8>(__fbthrift_field_binaryField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 9>(__fbthrift_field_longField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter2, 10>(__fbthrift_field_adaptedLongField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 11>(__fbthrift_field_doubleAdaptedField, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
}


void Foo::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<::my::Adapter1, 1>(__fbthrift_field_intField, *this);
  ::apache::thrift::adapt_detail::clear<::my::Adapter1, 2>(__fbthrift_field_optionalIntField, *this);
  ::apache::thrift::adapt_detail::clear<::my::Adapter1, 3>(__fbthrift_field_intFieldWithDefault, *this);
  ::apache::thrift::adapt_detail::clear<::my::Adapter2, 4>(__fbthrift_field_setField, *this);
  ::apache::thrift::adapt_detail::clear<::my::Adapter2, 5>(__fbthrift_field_optionalSetField, *this);
  ::apache::thrift::adapt_detail::clear<::my::Adapter3, 6>(__fbthrift_field_mapField, *this);
  ::apache::thrift::adapt_detail::clear<::my::Adapter3, 7>(__fbthrift_field_optionalMapField, *this);
  ::apache::thrift::adapt_detail::clear<::my::Adapter3, 8>(__fbthrift_field_binaryField, *this);
  ::apache::thrift::adapt_detail::clear<::my::Adapter1, 9>(__fbthrift_field_longField, *this);
  ::apache::thrift::adapt_detail::clear<::my::Adapter2, 10>(__fbthrift_field_adaptedLongField, *this);
  ::apache::thrift::adapt_detail::clear<::my::Adapter1, 11>(__fbthrift_field_doubleAdaptedField, *this);
  __isset = {};
}

void Foo::__fbthrift_clear_terse_fields() {
}

bool Foo::__fbthrift_is_empty() const {
  return false;
}

bool Foo::operator==(FOLLY_MAYBE_UNUSED const Foo& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::my::Adapter1>(lhs.__fbthrift_field_intField, rhs.__fbthrift_field_intField)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal_opt<::my::Adapter1>(lhs.optionalIntField_ref(), rhs.optionalIntField_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::my::Adapter1>(lhs.__fbthrift_field_intFieldWithDefault, rhs.__fbthrift_field_intFieldWithDefault)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::my::Adapter2>(lhs.__fbthrift_field_setField, rhs.__fbthrift_field_setField)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal_opt<::my::Adapter2>(lhs.optionalSetField_ref(), rhs.optionalSetField_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::my::Adapter3>(lhs.__fbthrift_field_mapField, rhs.__fbthrift_field_mapField)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal_opt<::my::Adapter3>(lhs.optionalMapField_ref(), rhs.optionalMapField_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::my::Adapter3>(lhs.__fbthrift_field_binaryField, rhs.__fbthrift_field_binaryField)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::my::Adapter1>(lhs.__fbthrift_field_longField, rhs.__fbthrift_field_longField)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::my::Adapter2>(lhs.__fbthrift_field_adaptedLongField, rhs.__fbthrift_field_adaptedLongField)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::my::Adapter1>(lhs.__fbthrift_field_doubleAdaptedField, rhs.__fbthrift_field_doubleAdaptedField)) {
    return false;
  }
  return true;
}

bool Foo::operator<(FOLLY_MAYBE_UNUSED const Foo& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED Foo& a, FOLLY_MAYBE_UNUSED Foo& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_intField, b.__fbthrift_field_intField);
  swap(a.__fbthrift_field_optionalIntField, b.__fbthrift_field_optionalIntField);
  swap(a.__fbthrift_field_intFieldWithDefault, b.__fbthrift_field_intFieldWithDefault);
  swap(a.__fbthrift_field_setField, b.__fbthrift_field_setField);
  swap(a.__fbthrift_field_optionalSetField, b.__fbthrift_field_optionalSetField);
  swap(a.__fbthrift_field_mapField, b.__fbthrift_field_mapField);
  swap(a.__fbthrift_field_optionalMapField, b.__fbthrift_field_optionalMapField);
  swap(a.__fbthrift_field_binaryField, b.__fbthrift_field_binaryField);
  swap(a.__fbthrift_field_longField, b.__fbthrift_field_longField);
  swap(a.__fbthrift_field_adaptedLongField, b.__fbthrift_field_adaptedLongField);
  swap(a.__fbthrift_field_doubleAdaptedField, b.__fbthrift_field_doubleAdaptedField);
  swap(a.__isset, b.__isset);
}

template void Foo::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Foo::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Foo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Foo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void Foo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Foo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Foo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Foo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::Baz>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::Baz>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::facebook::thrift::test::Baz::Type>::size;
folly::Range<::facebook::thrift::test::Baz::Type const*> const TEnumTraits<::facebook::thrift::test::Baz::Type>::values = folly::range(TEnumDataStorage<::facebook::thrift::test::Baz::Type>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::facebook::thrift::test::Baz::Type>::names = folly::range(TEnumDataStorage<::facebook::thrift::test::Baz::Type>::names);

bool TEnumTraits<::facebook::thrift::test::Baz::Type>::findName(type value, folly::StringPiece* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::facebook::thrift::test::Baz::Type>::findValue(folly::StringPiece name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace facebook { namespace thrift { namespace test {

const char* Baz::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/Baz";
}

const folly::StringPiece Baz::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Baz>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece Baz::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<Baz>::name;
}

void Baz::__fbthrift_clear() {
  // clear all fields
  if (getType() == Type::__EMPTY__) { return; }
  switch(getType()) {
    case Type::intField:
      destruct(value_.intField);
      break;
    case Type::setField:
      destruct(value_.setField);
      break;
    case Type::mapField:
      destruct(value_.mapField);
      break;
    case Type::binaryField:
      destruct(value_.binaryField);
      break;
    case Type::longField:
      destruct(value_.longField);
      break;
    default:
      assert(false);
      break;
  }
  type_ = folly::to_underlying(Type::__EMPTY__);
}

bool Baz::__fbthrift_is_empty() const {
  return getType() == Type::__EMPTY__;
}

bool Baz::operator==(const Baz& rhs) const {
  if (getType() != rhs.getType()) { return false; }
  switch(getType()) {
    case Type::intField:
      return value_.intField == rhs.value_.intField;
    case Type::setField:
      return value_.setField == rhs.value_.setField;
    case Type::mapField:
      return value_.mapField == rhs.value_.mapField;
    case Type::binaryField:
      return value_.binaryField == rhs.value_.binaryField;
    case Type::longField:
      return value_.longField == rhs.value_.longField;
    default:
      return true;
  }
}

bool Baz::operator<(FOLLY_MAYBE_UNUSED const Baz& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

void swap(Baz& a, Baz& b) {
  Baz temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

template void Baz::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Baz::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Baz::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Baz::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void Baz::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Baz::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Baz::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Baz::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::Bar>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::Bar>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace thrift { namespace test {

const char* Bar::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/Bar";
}

const folly::StringPiece Bar::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Bar>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece Bar::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<Bar>::name;
}

Bar::Bar(const Bar& srcObj) :
    __fbthrift_field_structField(srcObj.__fbthrift_field_structField),
    __fbthrift_field_optionalStructField(srcObj.__fbthrift_field_optionalStructField),
    __fbthrift_field_structListField(srcObj.__fbthrift_field_structListField),
    __fbthrift_field_optionalStructListField(srcObj.__fbthrift_field_optionalStructListField),
    __fbthrift_field_unionField(srcObj.__fbthrift_field_unionField),
    __fbthrift_field_optionalUnionField(srcObj.__fbthrift_field_optionalUnionField),
    __fbthrift_field_adaptedStructField(srcObj.__fbthrift_field_adaptedStructField),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 1>(__fbthrift_field_structField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 2>(__fbthrift_field_optionalStructField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 5>(__fbthrift_field_unionField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 6>(__fbthrift_field_optionalUnionField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter, 7>(__fbthrift_field_adaptedStructField, *this);
}

Bar& Bar::operator=(const Bar& other) {
  Bar tmp(other);
  swap(*this, tmp);
  return *this;
}

Bar::Bar() {
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 1>(__fbthrift_field_structField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 2>(__fbthrift_field_optionalStructField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 5>(__fbthrift_field_unionField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 6>(__fbthrift_field_optionalUnionField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter, 7>(__fbthrift_field_adaptedStructField, *this);
}


Bar::~Bar() {}

Bar::Bar(FOLLY_MAYBE_UNUSED Bar&& other) noexcept :
    __fbthrift_field_structField(std::move(other.__fbthrift_field_structField)),
    __fbthrift_field_optionalStructField(std::move(other.__fbthrift_field_optionalStructField)),
    __fbthrift_field_structListField(std::move(other.__fbthrift_field_structListField)),
    __fbthrift_field_optionalStructListField(std::move(other.__fbthrift_field_optionalStructListField)),
    __fbthrift_field_unionField(std::move(other.__fbthrift_field_unionField)),
    __fbthrift_field_optionalUnionField(std::move(other.__fbthrift_field_optionalUnionField)),
    __fbthrift_field_adaptedStructField(std::move(other.__fbthrift_field_adaptedStructField)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 1>(__fbthrift_field_structField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 2>(__fbthrift_field_optionalStructField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 5>(__fbthrift_field_unionField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 6>(__fbthrift_field_optionalUnionField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter, 7>(__fbthrift_field_adaptedStructField, *this);
}

Bar& Bar::operator=(FOLLY_MAYBE_UNUSED Bar&& other) noexcept {
    this->__fbthrift_field_structField = std::move(other.__fbthrift_field_structField);
    this->__fbthrift_field_optionalStructField = std::move(other.__fbthrift_field_optionalStructField);
    this->__fbthrift_field_structListField = std::move(other.__fbthrift_field_structListField);
    this->__fbthrift_field_optionalStructListField = std::move(other.__fbthrift_field_optionalStructListField);
    this->__fbthrift_field_unionField = std::move(other.__fbthrift_field_unionField);
    this->__fbthrift_field_optionalUnionField = std::move(other.__fbthrift_field_optionalUnionField);
    this->__fbthrift_field_adaptedStructField = std::move(other.__fbthrift_field_adaptedStructField);
    __isset = other.__isset;
    return *this;
}


Bar::Bar(apache::thrift::FragileConstructor, ::my::Cpp::Type1 structField__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::facebook::thrift::test::Foo, Bar> optionalStructField__arg, ::std::vector<::facebook::thrift::test::FooWithAdapter> structListField__arg, ::std::vector<::facebook::thrift::test::FooWithAdapter> optionalStructListField__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 5, ::facebook::thrift::test::Baz, Bar> unionField__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 6, ::facebook::thrift::test::Baz, Bar> optionalUnionField__arg, ::facebook::thrift::test::DirectlyAdapted adaptedStructField__arg) :
    __fbthrift_field_structField(std::move(structField__arg)),
    __fbthrift_field_optionalStructField(std::move(optionalStructField__arg)),
    __fbthrift_field_structListField(std::move(structListField__arg)),
    __fbthrift_field_optionalStructListField(std::move(optionalStructListField__arg)),
    __fbthrift_field_unionField(std::move(unionField__arg)),
    __fbthrift_field_optionalUnionField(std::move(optionalUnionField__arg)),
    __fbthrift_field_adaptedStructField(std::move(adaptedStructField__arg)) {
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 1>(__fbthrift_field_structField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 2>(__fbthrift_field_optionalStructField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 5>(__fbthrift_field_unionField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 6>(__fbthrift_field_optionalUnionField, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter, 7>(__fbthrift_field_adaptedStructField, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
}


void Bar::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<::my::Adapter1, 1>(__fbthrift_field_structField, *this);
  ::apache::thrift::adapt_detail::clear<::my::Adapter1, 2>(__fbthrift_field_optionalStructField, *this);
  this->__fbthrift_field_structListField.clear();
  this->__fbthrift_field_optionalStructListField.clear();
  ::apache::thrift::adapt_detail::clear<::my::Adapter1, 5>(__fbthrift_field_unionField, *this);
  ::apache::thrift::adapt_detail::clear<::my::Adapter1, 6>(__fbthrift_field_optionalUnionField, *this);
  ::apache::thrift::adapt_detail::clear<::my::Adapter, 7>(__fbthrift_field_adaptedStructField, *this);
  __isset = {};
}

void Bar::__fbthrift_clear_terse_fields() {
}

bool Bar::__fbthrift_is_empty() const {
  return false;
}

bool Bar::operator==(FOLLY_MAYBE_UNUSED const Bar& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::my::Adapter1>(lhs.__fbthrift_field_structField, rhs.__fbthrift_field_structField)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal_opt<::my::Adapter1>(lhs.optionalStructField_ref(), rhs.optionalStructField_ref())) {
    return false;
  }
  if (!(lhs.structListField_ref() == rhs.structListField_ref())) {
    return false;
  }
  if (!(lhs.optionalStructListField_ref() == rhs.optionalStructListField_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::my::Adapter1>(lhs.__fbthrift_field_unionField, rhs.__fbthrift_field_unionField)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal_opt<::my::Adapter1>(lhs.optionalUnionField_ref(), rhs.optionalUnionField_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::my::Adapter>(lhs.__fbthrift_field_adaptedStructField, rhs.__fbthrift_field_adaptedStructField)) {
    return false;
  }
  return true;
}

bool Bar::operator<(FOLLY_MAYBE_UNUSED const Bar& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::std::vector<::facebook::thrift::test::FooWithAdapter>& Bar::get_structListField() const& {
  return __fbthrift_field_structListField;
}

::std::vector<::facebook::thrift::test::FooWithAdapter> Bar::get_structListField() && {
  return std::move(__fbthrift_field_structListField);
}

const ::std::vector<::facebook::thrift::test::FooWithAdapter>* Bar::get_optionalStructListField() const& {
  return optionalStructListField_ref().has_value() ? std::addressof(__fbthrift_field_optionalStructListField) : nullptr;
}

::std::vector<::facebook::thrift::test::FooWithAdapter>* Bar::get_optionalStructListField() & {
  return optionalStructListField_ref().has_value() ? std::addressof(__fbthrift_field_optionalStructListField) : nullptr;
}


void swap(FOLLY_MAYBE_UNUSED Bar& a, FOLLY_MAYBE_UNUSED Bar& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_structField, b.__fbthrift_field_structField);
  swap(a.__fbthrift_field_optionalStructField, b.__fbthrift_field_optionalStructField);
  swap(a.__fbthrift_field_structListField, b.__fbthrift_field_structListField);
  swap(a.__fbthrift_field_optionalStructListField, b.__fbthrift_field_optionalStructListField);
  swap(a.__fbthrift_field_unionField, b.__fbthrift_field_unionField);
  swap(a.__fbthrift_field_optionalUnionField, b.__fbthrift_field_optionalUnionField);
  swap(a.__fbthrift_field_adaptedStructField, b.__fbthrift_field_adaptedStructField);
  swap(a.__isset, b.__isset);
}

template void Bar::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Bar::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Bar::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Bar::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void Bar::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Bar::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Bar::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Bar::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Bar,
        ::apache::thrift::type_class::structure,
        ::facebook::thrift::test::Foo>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Bar,
        ::apache::thrift::type_class::structure,
        ::facebook::thrift::test::Foo>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Bar,
        ::apache::thrift::type_class::variant,
        ::facebook::thrift::test::Baz>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Bar,
        ::apache::thrift::type_class::variant,
        ::facebook::thrift::test::Baz>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Bar,
        ::apache::thrift::type_class::structure,
        ::facebook::thrift::test::DirectlyAdapted>,
    "inconsistent use of json option");

}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::detail::DirectlyAdapted>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::detail::DirectlyAdapted>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace thrift { namespace test {namespace detail {


const char* DirectlyAdapted::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/DirectlyAdapted";
}

const folly::StringPiece DirectlyAdapted::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<DirectlyAdapted>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece DirectlyAdapted::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<DirectlyAdapted>::name;
}


DirectlyAdapted::DirectlyAdapted(apache::thrift::FragileConstructor, ::std::int32_t field__arg) :
    __fbthrift_field_field(std::move(field__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void DirectlyAdapted::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_field = ::std::int32_t();
  __isset = {};
}

void DirectlyAdapted::__fbthrift_clear_terse_fields() {
}

bool DirectlyAdapted::__fbthrift_is_empty() const {
  return false;
}

bool DirectlyAdapted::operator==(FOLLY_MAYBE_UNUSED const DirectlyAdapted& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.field_ref() == rhs.field_ref())) {
    return false;
  }
  return true;
}

bool DirectlyAdapted::operator<(FOLLY_MAYBE_UNUSED const DirectlyAdapted& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED DirectlyAdapted& a, FOLLY_MAYBE_UNUSED DirectlyAdapted& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_field, b.__fbthrift_field_field);
  swap(a.__isset, b.__isset);
}

template void DirectlyAdapted::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t DirectlyAdapted::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t DirectlyAdapted::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t DirectlyAdapted::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void DirectlyAdapted::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t DirectlyAdapted::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t DirectlyAdapted::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t DirectlyAdapted::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


} // namespace detail
}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::detail::IndependentDirectlyAdapted>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::detail::IndependentDirectlyAdapted>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace thrift { namespace test {namespace detail {


const char* IndependentDirectlyAdapted::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/IndependentDirectlyAdapted";
}

const folly::StringPiece IndependentDirectlyAdapted::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<IndependentDirectlyAdapted>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece IndependentDirectlyAdapted::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<IndependentDirectlyAdapted>::name;
}


IndependentDirectlyAdapted::IndependentDirectlyAdapted(apache::thrift::FragileConstructor, ::std::int32_t field__arg) :
    __fbthrift_field_field(std::move(field__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void IndependentDirectlyAdapted::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_field = ::std::int32_t();
  __isset = {};
}

void IndependentDirectlyAdapted::__fbthrift_clear_terse_fields() {
}

bool IndependentDirectlyAdapted::__fbthrift_is_empty() const {
  return false;
}

bool IndependentDirectlyAdapted::operator==(FOLLY_MAYBE_UNUSED const IndependentDirectlyAdapted& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.field_ref() == rhs.field_ref())) {
    return false;
  }
  return true;
}

bool IndependentDirectlyAdapted::operator<(FOLLY_MAYBE_UNUSED const IndependentDirectlyAdapted& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED IndependentDirectlyAdapted& a, FOLLY_MAYBE_UNUSED IndependentDirectlyAdapted& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_field, b.__fbthrift_field_field);
  swap(a.__isset, b.__isset);
}

template void IndependentDirectlyAdapted::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t IndependentDirectlyAdapted::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t IndependentDirectlyAdapted::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t IndependentDirectlyAdapted::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void IndependentDirectlyAdapted::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t IndependentDirectlyAdapted::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t IndependentDirectlyAdapted::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t IndependentDirectlyAdapted::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


} // namespace detail
}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::StructWithFieldAdapter>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::StructWithFieldAdapter>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace thrift { namespace test {

const char* StructWithFieldAdapter::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/StructWithFieldAdapter";
}

const folly::StringPiece StructWithFieldAdapter::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<StructWithFieldAdapter>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece StructWithFieldAdapter::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<StructWithFieldAdapter>::name;
}

StructWithFieldAdapter::StructWithFieldAdapter(const StructWithFieldAdapter& srcObj) :
    __fbthrift_field_field(srcObj.__fbthrift_field_field),
    __fbthrift_field_shared_field(srcObj.__fbthrift_field_shared_field),
    __fbthrift_field_opt_shared_field(srcObj.__fbthrift_field_opt_shared_field),
    __fbthrift_field_opt_boxed_field(srcObj.__fbthrift_field_opt_boxed_field),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 1>(__fbthrift_field_field, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 2>(*__fbthrift_field_shared_field, *this);
  if (__fbthrift_field_opt_shared_field) ::apache::thrift::adapt_detail::construct<::my::Adapter1, 3>(*__fbthrift_field_opt_shared_field, *this);
  if (__fbthrift_field_opt_boxed_field) ::apache::thrift::adapt_detail::construct<::my::Adapter1, 4>(*__fbthrift_field_opt_boxed_field, *this);
}

StructWithFieldAdapter& StructWithFieldAdapter::operator=(const StructWithFieldAdapter& other) {
  StructWithFieldAdapter tmp(other);
  swap(*this, tmp);
  return *this;
}

StructWithFieldAdapter::StructWithFieldAdapter(FOLLY_MAYBE_UNUSED StructWithFieldAdapter&& other) noexcept :
    __fbthrift_field_field(std::move(other.__fbthrift_field_field)),
    __fbthrift_field_shared_field(std::move(other.__fbthrift_field_shared_field)),
    __fbthrift_field_opt_shared_field(std::move(other.__fbthrift_field_opt_shared_field)),
    __fbthrift_field_opt_boxed_field(std::move(other.__fbthrift_field_opt_boxed_field)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 1>(__fbthrift_field_field, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 2>(*__fbthrift_field_shared_field, *this);
  if (__fbthrift_field_opt_shared_field) ::apache::thrift::adapt_detail::construct<::my::Adapter1, 3>(*__fbthrift_field_opt_shared_field, *this);
  if (__fbthrift_field_opt_boxed_field) ::apache::thrift::adapt_detail::construct<::my::Adapter1, 4>(*__fbthrift_field_opt_boxed_field, *this);
}

StructWithFieldAdapter& StructWithFieldAdapter::operator=(FOLLY_MAYBE_UNUSED StructWithFieldAdapter&& other) noexcept {
    this->__fbthrift_field_field = std::move(other.__fbthrift_field_field);
    this->__fbthrift_field_shared_field = std::move(other.__fbthrift_field_shared_field);
    this->__fbthrift_field_opt_shared_field = std::move(other.__fbthrift_field_opt_shared_field);
    this->__fbthrift_field_opt_boxed_field = std::move(other.__fbthrift_field_opt_boxed_field);
    __isset = other.__isset;
    return *this;
}


StructWithFieldAdapter::StructWithFieldAdapter(apache::thrift::FragileConstructor, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, StructWithFieldAdapter> field__arg, ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, StructWithFieldAdapter>> shared_field__arg, ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, StructWithFieldAdapter>> opt_shared_field__arg, ::apache::thrift::detail::boxed_value_ptr<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 4, ::std::int32_t, StructWithFieldAdapter>> opt_boxed_field__arg) :
    __fbthrift_field_field(std::move(field__arg)),
    __fbthrift_field_shared_field(std::move(shared_field__arg)),
    __fbthrift_field_opt_shared_field(std::move(opt_shared_field__arg)),
    __fbthrift_field_opt_boxed_field(std::move(opt_boxed_field__arg)) {
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 1>(__fbthrift_field_field, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 2>(*__fbthrift_field_shared_field, *this);
  if (__fbthrift_field_opt_shared_field) ::apache::thrift::adapt_detail::construct<::my::Adapter1, 3>(*__fbthrift_field_opt_shared_field, *this);
  if (__fbthrift_field_opt_boxed_field) ::apache::thrift::adapt_detail::construct<::my::Adapter1, 4>(*__fbthrift_field_opt_boxed_field, *this);
  __isset.set(folly::index_constant<0>(), true);
}


void StructWithFieldAdapter::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<::my::Adapter1, 1>(__fbthrift_field_field, *this);
  this->__fbthrift_field_shared_field = ::apache::thrift::detail::make_mutable_smart_ptr<::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, StructWithFieldAdapter>>>();
  this->__fbthrift_field_opt_shared_field.reset();
  this->__fbthrift_field_opt_boxed_field.reset();
  __isset = {};
}

void StructWithFieldAdapter::__fbthrift_clear_terse_fields() {
}

bool StructWithFieldAdapter::__fbthrift_is_empty() const {
  return false;
}

bool StructWithFieldAdapter::operator==(FOLLY_MAYBE_UNUSED const StructWithFieldAdapter& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::my::Adapter1>(lhs.__fbthrift_field_field, rhs.__fbthrift_field_field)) {
    return false;
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.shared_field_ref(), rhs.shared_field_ref()))) {
    return false;
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.opt_shared_field_ref(), rhs.opt_shared_field_ref()))) {
    return false;
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.opt_boxed_field_ref(), rhs.opt_boxed_field_ref()))) {
    return false;
  }
  return true;
}

bool StructWithFieldAdapter::operator<(FOLLY_MAYBE_UNUSED const StructWithFieldAdapter& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED StructWithFieldAdapter& a, FOLLY_MAYBE_UNUSED StructWithFieldAdapter& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_field, b.__fbthrift_field_field);
  swap(a.__fbthrift_field_shared_field, b.__fbthrift_field_shared_field);
  swap(a.__fbthrift_field_opt_shared_field, b.__fbthrift_field_opt_shared_field);
  swap(a.__fbthrift_field_opt_boxed_field, b.__fbthrift_field_opt_boxed_field);
  swap(a.__isset, b.__isset);
}

template void StructWithFieldAdapter::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t StructWithFieldAdapter::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t StructWithFieldAdapter::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t StructWithFieldAdapter::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void StructWithFieldAdapter::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t StructWithFieldAdapter::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t StructWithFieldAdapter::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t StructWithFieldAdapter::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::TerseAdaptedFields>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::TerseAdaptedFields>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace thrift { namespace test {

const char* TerseAdaptedFields::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/TerseAdaptedFields";
}

const folly::StringPiece TerseAdaptedFields::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<TerseAdaptedFields>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece TerseAdaptedFields::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<TerseAdaptedFields>::name;
}

TerseAdaptedFields::TerseAdaptedFields(const TerseAdaptedFields& srcObj) :
    __fbthrift_field_int_field(srcObj.__fbthrift_field_int_field),
    __fbthrift_field_string_field(srcObj.__fbthrift_field_string_field),
    __fbthrift_field_set_field(srcObj.__fbthrift_field_set_field) {
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 1>(__fbthrift_field_int_field, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 2>(__fbthrift_field_string_field, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 3>(__fbthrift_field_set_field, *this);
}

TerseAdaptedFields& TerseAdaptedFields::operator=(const TerseAdaptedFields& other) {
  TerseAdaptedFields tmp(other);
  swap(*this, tmp);
  return *this;
}

TerseAdaptedFields::TerseAdaptedFields(FOLLY_MAYBE_UNUSED TerseAdaptedFields&& other) noexcept :
    __fbthrift_field_int_field(std::move(other.__fbthrift_field_int_field)),
    __fbthrift_field_string_field(std::move(other.__fbthrift_field_string_field)),
    __fbthrift_field_set_field(std::move(other.__fbthrift_field_set_field)) {
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 1>(__fbthrift_field_int_field, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 2>(__fbthrift_field_string_field, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 3>(__fbthrift_field_set_field, *this);
}

TerseAdaptedFields& TerseAdaptedFields::operator=(FOLLY_MAYBE_UNUSED TerseAdaptedFields&& other) noexcept {
    this->__fbthrift_field_int_field = std::move(other.__fbthrift_field_int_field);
    this->__fbthrift_field_string_field = std::move(other.__fbthrift_field_string_field);
    this->__fbthrift_field_set_field = std::move(other.__fbthrift_field_set_field);
    return *this;
}


TerseAdaptedFields::TerseAdaptedFields(apache::thrift::FragileConstructor, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, TerseAdaptedFields> int_field__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::string, TerseAdaptedFields> string_field__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::set<::std::int32_t>, TerseAdaptedFields> set_field__arg) :
    __fbthrift_field_int_field(std::move(int_field__arg)),
    __fbthrift_field_string_field(std::move(string_field__arg)),
    __fbthrift_field_set_field(std::move(set_field__arg)) {
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 1>(__fbthrift_field_int_field, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 2>(__fbthrift_field_string_field, *this);
  ::apache::thrift::adapt_detail::construct<::my::Adapter1, 3>(__fbthrift_field_set_field, *this);
}


void TerseAdaptedFields::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<::my::Adapter1, 1>(__fbthrift_field_int_field, *this);
  ::apache::thrift::adapt_detail::clear<::my::Adapter1, 2>(__fbthrift_field_string_field, *this);
  ::apache::thrift::adapt_detail::clear<::my::Adapter1, 3>(__fbthrift_field_set_field, *this);
}

void TerseAdaptedFields::__fbthrift_clear_terse_fields() {
  ::apache::thrift::adapt_detail::clear<::my::Adapter1, 1>(__fbthrift_field_int_field, *this);
  ::apache::thrift::adapt_detail::clear<::my::Adapter1, 2>(__fbthrift_field_string_field, *this);
  ::apache::thrift::adapt_detail::clear<::my::Adapter1, 3>(__fbthrift_field_set_field, *this);
}

bool TerseAdaptedFields::__fbthrift_is_empty() const {
  return ::apache::thrift::op::isEmpty<::apache::thrift::op::get_field_tag<TerseAdaptedFields, ::apache::thrift::field_id<1>>>(this->__fbthrift_field_int_field) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::op::get_field_tag<TerseAdaptedFields, ::apache::thrift::field_id<2>>>(this->__fbthrift_field_string_field) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::op::get_field_tag<TerseAdaptedFields, ::apache::thrift::field_id<3>>>(this->__fbthrift_field_set_field);
}

bool TerseAdaptedFields::operator==(FOLLY_MAYBE_UNUSED const TerseAdaptedFields& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::my::Adapter1>(lhs.__fbthrift_field_int_field, rhs.__fbthrift_field_int_field)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::my::Adapter1>(lhs.__fbthrift_field_string_field, rhs.__fbthrift_field_string_field)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::my::Adapter1>(lhs.__fbthrift_field_set_field, rhs.__fbthrift_field_set_field)) {
    return false;
  }
  return true;
}

bool TerseAdaptedFields::operator<(FOLLY_MAYBE_UNUSED const TerseAdaptedFields& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED TerseAdaptedFields& a, FOLLY_MAYBE_UNUSED TerseAdaptedFields& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_int_field, b.__fbthrift_field_int_field);
  swap(a.__fbthrift_field_string_field, b.__fbthrift_field_string_field);
  swap(a.__fbthrift_field_set_field, b.__fbthrift_field_set_field);
}

template void TerseAdaptedFields::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t TerseAdaptedFields::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t TerseAdaptedFields::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t TerseAdaptedFields::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void TerseAdaptedFields::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t TerseAdaptedFields::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t TerseAdaptedFields::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t TerseAdaptedFields::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::B>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::B>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace thrift { namespace test {

const char* B::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/B";
}

const folly::StringPiece B::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<B>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece B::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<B>::name;
}

B::B(const B& srcObj) :
    __fbthrift_field_a(srcObj.__fbthrift_field_a),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::my::Adapter, 1>(__fbthrift_field_a, *this);
}

B& B::operator=(const B& other) {
  B tmp(other);
  swap(*this, tmp);
  return *this;
}

B::B(FOLLY_MAYBE_UNUSED B&& other) noexcept :
    __fbthrift_field_a(std::move(other.__fbthrift_field_a)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::my::Adapter, 1>(__fbthrift_field_a, *this);
}

B& B::operator=(FOLLY_MAYBE_UNUSED B&& other) noexcept {
    this->__fbthrift_field_a = std::move(other.__fbthrift_field_a);
    __isset = other.__isset;
    return *this;
}


B::B(apache::thrift::FragileConstructor, ::facebook::thrift::test::AdaptedA a__arg) :
    __fbthrift_field_a(std::move(a__arg)) {
  ::apache::thrift::adapt_detail::construct<::my::Adapter, 1>(__fbthrift_field_a, *this);
  __isset.set(folly::index_constant<0>(), true);
}


void B::__fbthrift_clear() {
  // clear all fields
  __isset = {};
}

void B::__fbthrift_clear_terse_fields() {
}

bool B::__fbthrift_is_empty() const {
  return false;
}

bool B::operator==(FOLLY_MAYBE_UNUSED const B& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::my::Adapter>(lhs.__fbthrift_field_a, rhs.__fbthrift_field_a)) {
    return false;
  }
  return true;
}

bool B::operator<(FOLLY_MAYBE_UNUSED const B& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED B& a, FOLLY_MAYBE_UNUSED B& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_a, b.__fbthrift_field_a);
  swap(a.__isset, b.__isset);
}

template void B::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t B::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t B::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t B::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void B::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t B::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t B::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t B::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        B,
        ::apache::thrift::type_class::structure,
        ::facebook::thrift::test::AdaptedA>,
    "inconsistent use of json option");

}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::A>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::A>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace thrift { namespace test {

const char* A::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/A";
}

const folly::StringPiece A::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<A>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece A::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<A>::name;
}


A::A(apache::thrift::FragileConstructor) {}


void A::__fbthrift_clear() {
  // clear all fields
}

void A::__fbthrift_clear_terse_fields() {
}

bool A::__fbthrift_is_empty() const {
  return true;
}

bool A::operator==(FOLLY_MAYBE_UNUSED const A& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  return true;
}

bool A::operator<(FOLLY_MAYBE_UNUSED const A& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED A& a, FOLLY_MAYBE_UNUSED A& b) {
  using ::std::swap;
}

template void A::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t A::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t A::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t A::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void A::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t A::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t A::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t A::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::Config>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::Config>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace thrift { namespace test {

const char* Config::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/Config";
}

const folly::StringPiece Config::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Config>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece Config::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<Config>::name;
}

Config::Config(const Config&) = default;
Config& Config::operator=(const Config&) = default;
Config::Config(FOLLY_MAYBE_UNUSED Config&& other) noexcept :
    __fbthrift_field_path(std::move(other.__fbthrift_field_path)),
    __isset(other.__isset) {
}

Config& Config::operator=(FOLLY_MAYBE_UNUSED Config&& other) noexcept {
    this->__fbthrift_field_path = std::move(other.__fbthrift_field_path);
    __isset = other.__isset;
    return *this;
}


Config::Config(apache::thrift::FragileConstructor, ::std::string path__arg) :
    __fbthrift_field_path(std::move(path__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void Config::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_path = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  __isset = {};
}

void Config::__fbthrift_clear_terse_fields() {
}

bool Config::__fbthrift_is_empty() const {
  return false;
}

bool Config::operator==(FOLLY_MAYBE_UNUSED const Config& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.path_ref() == rhs.path_ref())) {
    return false;
  }
  return true;
}

bool Config::operator<(FOLLY_MAYBE_UNUSED const Config& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED Config& a, FOLLY_MAYBE_UNUSED Config& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_path, b.__fbthrift_field_path);
  swap(a.__isset, b.__isset);
}

template void Config::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Config::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Config::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Config::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void Config::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Config::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Config::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Config::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::MyStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::MyStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace thrift { namespace test {

const char* MyStruct::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/MyStruct";
}

const folly::StringPiece MyStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStruct>::name;
}

MyStruct::MyStruct(const MyStruct& srcObj) :
    __fbthrift_field_field(srcObj.__fbthrift_field_field),
    __fbthrift_field_set_string(srcObj.__fbthrift_field_set_string),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::my::Adapter2, 2>(__fbthrift_field_set_string, *this);
}

MyStruct& MyStruct::operator=(const MyStruct& other) {
  MyStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

MyStruct::MyStruct(FOLLY_MAYBE_UNUSED MyStruct&& other) noexcept :
    __fbthrift_field_field(std::move(other.__fbthrift_field_field)),
    __fbthrift_field_set_string(std::move(other.__fbthrift_field_set_string)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::my::Adapter2, 2>(__fbthrift_field_set_string, *this);
}

MyStruct& MyStruct::operator=(FOLLY_MAYBE_UNUSED MyStruct&& other) noexcept {
    this->__fbthrift_field_field = std::move(other.__fbthrift_field_field);
    this->__fbthrift_field_set_string = std::move(other.__fbthrift_field_set_string);
    __isset = other.__isset;
    return *this;
}


MyStruct::MyStruct(apache::thrift::FragileConstructor, ::std::int32_t field__arg, ::facebook::thrift::test::SetWithAdapter set_string__arg) :
    __fbthrift_field_field(std::move(field__arg)),
    __fbthrift_field_set_string(std::move(set_string__arg)) {
  ::apache::thrift::adapt_detail::construct<::my::Adapter2, 2>(__fbthrift_field_set_string, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}


void MyStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_field = ::std::int32_t();
  ::apache::thrift::adapt_detail::clear<::my::Adapter2, 2>(__fbthrift_field_set_string, *this);
  __isset = {};
}

void MyStruct::__fbthrift_clear_terse_fields() {
}

bool MyStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyStruct::operator==(FOLLY_MAYBE_UNUSED const MyStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.field_ref() == rhs.field_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::my::Adapter2>(lhs.__fbthrift_field_set_string, rhs.__fbthrift_field_set_string)) {
    return false;
  }
  return true;
}

bool MyStruct::operator<(FOLLY_MAYBE_UNUSED const MyStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED MyStruct& a, FOLLY_MAYBE_UNUSED MyStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_field, b.__fbthrift_field_field);
  swap(a.__fbthrift_field_set_string, b.__fbthrift_field_set_string);
  swap(a.__isset, b.__isset);
}

template void MyStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::AdaptTestStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::AdaptTestStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace thrift { namespace test {

const char* AdaptTestStruct::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/AdaptTestStruct";
}

const folly::StringPiece AdaptTestStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<AdaptTestStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece AdaptTestStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<AdaptTestStruct>::name;
}

AdaptTestStruct::AdaptTestStruct(const AdaptTestStruct& srcObj) :
    __fbthrift_field_delay(srcObj.__fbthrift_field_delay),
    __fbthrift_field_custom(srcObj.__fbthrift_field_custom),
    __fbthrift_field_timeout(srcObj.__fbthrift_field_timeout),
    __fbthrift_field_data(srcObj.__fbthrift_field_data),
    __fbthrift_field_meta(srcObj.__fbthrift_field_meta),
    __fbthrift_field_indirectionString(srcObj.__fbthrift_field_indirectionString),
    __fbthrift_field_string_data(srcObj.__fbthrift_field_string_data),
    __fbthrift_field_double_wrapped_bool(srcObj.__fbthrift_field_double_wrapped_bool),
    __fbthrift_field_double_wrapped_integer(srcObj.__fbthrift_field_double_wrapped_integer),
    __fbthrift_field_binary_data(srcObj.__fbthrift_field_binary_data),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::AdaptTestMsAdapter, 1>(__fbthrift_field_delay, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::CustomProtocolAdapter, 2>(__fbthrift_field_custom, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::AdaptTestMsAdapter, 3>(__fbthrift_field_timeout, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::AdapterWithContext, 4>(__fbthrift_field_data, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::IndirectionAdapter<::apache::thrift::test::IndirectionString>, 6>(__fbthrift_field_indirectionString, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::AdapterWithContext, 7>(__fbthrift_field_string_data, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 8>(__fbthrift_field_double_wrapped_bool, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::AdapterWithContext, 9>(__fbthrift_field_double_wrapped_integer, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::AdapterWithContext, 10>(__fbthrift_field_binary_data, *this);
}

AdaptTestStruct& AdaptTestStruct::operator=(const AdaptTestStruct& other) {
  AdaptTestStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

AdaptTestStruct::AdaptTestStruct() :
      __fbthrift_field_delay(),
      __fbthrift_field_timeout(),
      __fbthrift_field_data(),
      __fbthrift_field_double_wrapped_bool(),
      __fbthrift_field_double_wrapped_integer() {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::AdaptTestMsAdapter, 1>(__fbthrift_field_delay, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::CustomProtocolAdapter, 2>(__fbthrift_field_custom, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::AdaptTestMsAdapter, 3>(__fbthrift_field_timeout, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::AdapterWithContext, 4>(__fbthrift_field_data, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::IndirectionAdapter<::apache::thrift::test::IndirectionString>, 6>(__fbthrift_field_indirectionString, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::AdapterWithContext, 7>(__fbthrift_field_string_data, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 8>(__fbthrift_field_double_wrapped_bool, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::AdapterWithContext, 9>(__fbthrift_field_double_wrapped_integer, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::AdapterWithContext, 10>(__fbthrift_field_binary_data, *this);
}


AdaptTestStruct::~AdaptTestStruct() {}

AdaptTestStruct::AdaptTestStruct(FOLLY_MAYBE_UNUSED AdaptTestStruct&& other) noexcept :
    __fbthrift_field_delay(std::move(other.__fbthrift_field_delay)),
    __fbthrift_field_custom(std::move(other.__fbthrift_field_custom)),
    __fbthrift_field_timeout(std::move(other.__fbthrift_field_timeout)),
    __fbthrift_field_data(std::move(other.__fbthrift_field_data)),
    __fbthrift_field_meta(std::move(other.__fbthrift_field_meta)),
    __fbthrift_field_indirectionString(std::move(other.__fbthrift_field_indirectionString)),
    __fbthrift_field_string_data(std::move(other.__fbthrift_field_string_data)),
    __fbthrift_field_double_wrapped_bool(std::move(other.__fbthrift_field_double_wrapped_bool)),
    __fbthrift_field_double_wrapped_integer(std::move(other.__fbthrift_field_double_wrapped_integer)),
    __fbthrift_field_binary_data(std::move(other.__fbthrift_field_binary_data)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::AdaptTestMsAdapter, 1>(__fbthrift_field_delay, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::CustomProtocolAdapter, 2>(__fbthrift_field_custom, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::AdaptTestMsAdapter, 3>(__fbthrift_field_timeout, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::AdapterWithContext, 4>(__fbthrift_field_data, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::IndirectionAdapter<::apache::thrift::test::IndirectionString>, 6>(__fbthrift_field_indirectionString, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::AdapterWithContext, 7>(__fbthrift_field_string_data, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 8>(__fbthrift_field_double_wrapped_bool, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::AdapterWithContext, 9>(__fbthrift_field_double_wrapped_integer, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::AdapterWithContext, 10>(__fbthrift_field_binary_data, *this);
}

AdaptTestStruct& AdaptTestStruct::operator=(FOLLY_MAYBE_UNUSED AdaptTestStruct&& other) noexcept {
    this->__fbthrift_field_delay = std::move(other.__fbthrift_field_delay);
    this->__fbthrift_field_custom = std::move(other.__fbthrift_field_custom);
    this->__fbthrift_field_timeout = std::move(other.__fbthrift_field_timeout);
    this->__fbthrift_field_data = std::move(other.__fbthrift_field_data);
    this->__fbthrift_field_meta = std::move(other.__fbthrift_field_meta);
    this->__fbthrift_field_indirectionString = std::move(other.__fbthrift_field_indirectionString);
    this->__fbthrift_field_string_data = std::move(other.__fbthrift_field_string_data);
    this->__fbthrift_field_double_wrapped_bool = std::move(other.__fbthrift_field_double_wrapped_bool);
    this->__fbthrift_field_double_wrapped_integer = std::move(other.__fbthrift_field_double_wrapped_integer);
    this->__fbthrift_field_binary_data = std::move(other.__fbthrift_field_binary_data);
    __isset = other.__isset;
    return *this;
}


AdaptTestStruct::AdaptTestStruct(apache::thrift::FragileConstructor, ::facebook::thrift::test::DurationMs delay__arg, ::facebook::thrift::test::CustomProtocolType custom__arg, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdaptTestMsAdapter, 3, ::std::int64_t, AdaptTestStruct> timeout__arg, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 4, ::std::int64_t, AdaptTestStruct> data__arg, ::std::string meta__arg, ::facebook::thrift::test::IndirectionString indirectionString__arg, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 7, ::std::string, AdaptTestStruct> string_data__arg, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 8, ::facebook::thrift::test::AdaptedBool, AdaptTestStruct> double_wrapped_bool__arg, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 9, ::facebook::thrift::test::AdaptedInteger, AdaptTestStruct> double_wrapped_integer__arg, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 10, ::std::string, AdaptTestStruct> binary_data__arg) :
    __fbthrift_field_delay(std::move(delay__arg)),
    __fbthrift_field_custom(std::move(custom__arg)),
    __fbthrift_field_timeout(std::move(timeout__arg)),
    __fbthrift_field_data(std::move(data__arg)),
    __fbthrift_field_meta(std::move(meta__arg)),
    __fbthrift_field_indirectionString(std::move(indirectionString__arg)),
    __fbthrift_field_string_data(std::move(string_data__arg)),
    __fbthrift_field_double_wrapped_bool(std::move(double_wrapped_bool__arg)),
    __fbthrift_field_double_wrapped_integer(std::move(double_wrapped_integer__arg)),
    __fbthrift_field_binary_data(std::move(binary_data__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::AdaptTestMsAdapter, 1>(__fbthrift_field_delay, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::CustomProtocolAdapter, 2>(__fbthrift_field_custom, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::AdaptTestMsAdapter, 3>(__fbthrift_field_timeout, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::AdapterWithContext, 4>(__fbthrift_field_data, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::IndirectionAdapter<::apache::thrift::test::IndirectionString>, 6>(__fbthrift_field_indirectionString, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::AdapterWithContext, 7>(__fbthrift_field_string_data, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 8>(__fbthrift_field_double_wrapped_bool, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::AdapterWithContext, 9>(__fbthrift_field_double_wrapped_integer, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::AdapterWithContext, 10>(__fbthrift_field_binary_data, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
}


void AdaptTestStruct::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::AdaptTestMsAdapter, 1>(__fbthrift_field_delay, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::CustomProtocolAdapter, 2>(__fbthrift_field_custom, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::AdaptTestMsAdapter, 3>(__fbthrift_field_timeout, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::AdapterWithContext, 4>(__fbthrift_field_data, *this);
  this->__fbthrift_field_meta = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  ::apache::thrift::adapt_detail::clear<::apache::thrift::IndirectionAdapter<::apache::thrift::test::IndirectionString>, 6>(__fbthrift_field_indirectionString, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::AdapterWithContext, 7>(__fbthrift_field_string_data, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::TemplatedTestAdapter, 8>(__fbthrift_field_double_wrapped_bool, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::AdapterWithContext, 9>(__fbthrift_field_double_wrapped_integer, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::AdapterWithContext, 10>(__fbthrift_field_binary_data, *this);
  __isset = {};
}

void AdaptTestStruct::__fbthrift_clear_terse_fields() {
}

bool AdaptTestStruct::__fbthrift_is_empty() const {
  return false;
}

bool AdaptTestStruct::operator==(FOLLY_MAYBE_UNUSED const AdaptTestStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::AdaptTestMsAdapter>(lhs.__fbthrift_field_delay, rhs.__fbthrift_field_delay)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::CustomProtocolAdapter>(lhs.__fbthrift_field_custom, rhs.__fbthrift_field_custom)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::AdaptTestMsAdapter>(lhs.__fbthrift_field_timeout, rhs.__fbthrift_field_timeout)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::AdapterWithContext>(lhs.__fbthrift_field_data, rhs.__fbthrift_field_data)) {
    return false;
  }
  if (!(lhs.meta_ref() == rhs.meta_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::IndirectionAdapter<::apache::thrift::test::IndirectionString>>(lhs.__fbthrift_field_indirectionString, rhs.__fbthrift_field_indirectionString)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::AdapterWithContext>(lhs.__fbthrift_field_string_data, rhs.__fbthrift_field_string_data)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::TemplatedTestAdapter>(lhs.__fbthrift_field_double_wrapped_bool, rhs.__fbthrift_field_double_wrapped_bool)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::AdapterWithContext>(lhs.__fbthrift_field_double_wrapped_integer, rhs.__fbthrift_field_double_wrapped_integer)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::AdapterWithContext>(lhs.__fbthrift_field_binary_data, rhs.__fbthrift_field_binary_data)) {
    return false;
  }
  return true;
}

bool AdaptTestStruct::operator<(FOLLY_MAYBE_UNUSED const AdaptTestStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED AdaptTestStruct& a, FOLLY_MAYBE_UNUSED AdaptTestStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_delay, b.__fbthrift_field_delay);
  swap(a.__fbthrift_field_custom, b.__fbthrift_field_custom);
  swap(a.__fbthrift_field_timeout, b.__fbthrift_field_timeout);
  swap(a.__fbthrift_field_data, b.__fbthrift_field_data);
  swap(a.__fbthrift_field_meta, b.__fbthrift_field_meta);
  swap(a.__fbthrift_field_indirectionString, b.__fbthrift_field_indirectionString);
  swap(a.__fbthrift_field_string_data, b.__fbthrift_field_string_data);
  swap(a.__fbthrift_field_double_wrapped_bool, b.__fbthrift_field_double_wrapped_bool);
  swap(a.__fbthrift_field_double_wrapped_integer, b.__fbthrift_field_double_wrapped_integer);
  swap(a.__fbthrift_field_binary_data, b.__fbthrift_field_binary_data);
  swap(a.__isset, b.__isset);
}

template void AdaptTestStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t AdaptTestStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t AdaptTestStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t AdaptTestStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void AdaptTestStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t AdaptTestStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AdaptTestStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t AdaptTestStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::AdaptTemplatedTestStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::AdaptTemplatedTestStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace thrift { namespace test {

const char* AdaptTemplatedTestStruct::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/AdaptTemplatedTestStruct";
}

const folly::StringPiece AdaptTemplatedTestStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<AdaptTemplatedTestStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece AdaptTemplatedTestStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<AdaptTemplatedTestStruct>::name;
}

AdaptTemplatedTestStruct::AdaptTemplatedTestStruct(const AdaptTemplatedTestStruct& srcObj) :
    __fbthrift_field_adaptedBool(srcObj.__fbthrift_field_adaptedBool),
    __fbthrift_field_adaptedByte(srcObj.__fbthrift_field_adaptedByte),
    __fbthrift_field_adaptedShort(srcObj.__fbthrift_field_adaptedShort),
    __fbthrift_field_adaptedInteger(srcObj.__fbthrift_field_adaptedInteger),
    __fbthrift_field_adaptedLong(srcObj.__fbthrift_field_adaptedLong),
    __fbthrift_field_adaptedDouble(srcObj.__fbthrift_field_adaptedDouble),
    __fbthrift_field_adaptedString(srcObj.__fbthrift_field_adaptedString),
    __fbthrift_field_adaptedList(srcObj.__fbthrift_field_adaptedList),
    __fbthrift_field_adaptedSet(srcObj.__fbthrift_field_adaptedSet),
    __fbthrift_field_adaptedMap(srcObj.__fbthrift_field_adaptedMap),
    __fbthrift_field_adaptedBoolDefault(srcObj.__fbthrift_field_adaptedBoolDefault),
    __fbthrift_field_adaptedByteDefault(srcObj.__fbthrift_field_adaptedByteDefault),
    __fbthrift_field_adaptedShortDefault(srcObj.__fbthrift_field_adaptedShortDefault),
    __fbthrift_field_adaptedIntegerDefault(srcObj.__fbthrift_field_adaptedIntegerDefault),
    __fbthrift_field_adaptedLongDefault(srcObj.__fbthrift_field_adaptedLongDefault),
    __fbthrift_field_adaptedDoubleDefault(srcObj.__fbthrift_field_adaptedDoubleDefault),
    __fbthrift_field_adaptedStringDefault(srcObj.__fbthrift_field_adaptedStringDefault),
    __fbthrift_field_adaptedEnum(srcObj.__fbthrift_field_adaptedEnum),
    __fbthrift_field_adaptedListDefault(srcObj.__fbthrift_field_adaptedListDefault),
    __fbthrift_field_adaptedSetDefault(srcObj.__fbthrift_field_adaptedSetDefault),
    __fbthrift_field_adaptedMapDefault(srcObj.__fbthrift_field_adaptedMapDefault),
    __fbthrift_field_doubleTypedefBool(srcObj.__fbthrift_field_doubleTypedefBool),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 1>(__fbthrift_field_adaptedBool, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 2>(__fbthrift_field_adaptedByte, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 3>(__fbthrift_field_adaptedShort, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 4>(__fbthrift_field_adaptedInteger, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 5>(__fbthrift_field_adaptedLong, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 6>(__fbthrift_field_adaptedDouble, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 7>(__fbthrift_field_adaptedString, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 8>(__fbthrift_field_adaptedList, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 9>(__fbthrift_field_adaptedSet, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 10>(__fbthrift_field_adaptedMap, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 11>(__fbthrift_field_adaptedBoolDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 12>(__fbthrift_field_adaptedByteDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 13>(__fbthrift_field_adaptedShortDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 14>(__fbthrift_field_adaptedIntegerDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 15>(__fbthrift_field_adaptedLongDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 16>(__fbthrift_field_adaptedDoubleDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 17>(__fbthrift_field_adaptedStringDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::StaticCastAdapter<::apache::thrift::test::basic::AdaptedEnum, ::apache::thrift::test::basic::ThriftAdaptedEnum>, 18>(__fbthrift_field_adaptedEnum, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 19>(__fbthrift_field_adaptedListDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 20>(__fbthrift_field_adaptedSetDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 21>(__fbthrift_field_adaptedMapDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 22>(__fbthrift_field_doubleTypedefBool, *this);
}

AdaptTemplatedTestStruct& AdaptTemplatedTestStruct::operator=(const AdaptTemplatedTestStruct& other) {
  AdaptTemplatedTestStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

AdaptTemplatedTestStruct::AdaptTemplatedTestStruct() :
      __fbthrift_field_adaptedBool(),
      __fbthrift_field_adaptedByte(),
      __fbthrift_field_adaptedShort(),
      __fbthrift_field_adaptedInteger(),
      __fbthrift_field_adaptedLong(),
      __fbthrift_field_adaptedDouble(),
      __fbthrift_field_adaptedBoolDefault(::apache::thrift::adapt_detail::fromThriftField<::apache::thrift::test::TemplatedTestAdapter, 11>(bool(true), *this)),
      __fbthrift_field_adaptedByteDefault(::apache::thrift::adapt_detail::fromThriftField<::apache::thrift::test::TemplatedTestAdapter, 12>(::std::int8_t(static_cast<::std::int8_t>(1)), *this)),
      __fbthrift_field_adaptedShortDefault(::apache::thrift::adapt_detail::fromThriftField<::apache::thrift::test::TemplatedTestAdapter, 13>(::std::int16_t(static_cast<::std::int16_t>(2)), *this)),
      __fbthrift_field_adaptedIntegerDefault(::apache::thrift::adapt_detail::fromThriftField<::apache::thrift::test::TemplatedTestAdapter, 14>(::std::int32_t(static_cast<::std::int32_t>(3)), *this)),
      __fbthrift_field_adaptedLongDefault(::apache::thrift::adapt_detail::fromThriftField<::apache::thrift::test::TemplatedTestAdapter, 15>(::std::int64_t(static_cast<::std::int64_t>(4)), *this)),
      __fbthrift_field_adaptedDoubleDefault(::apache::thrift::adapt_detail::fromThriftField<::apache::thrift::test::TemplatedTestAdapter, 16>(double(static_cast<double>(5)), *this)),
      __fbthrift_field_adaptedStringDefault(::apache::thrift::adapt_detail::fromThriftField<::apache::thrift::test::TemplatedTestAdapter, 17>(::std::string(apache::thrift::StringTraits<std::string>::fromStringLiteral("6")), *this)),
      __fbthrift_field_adaptedEnum(::apache::thrift::adapt_detail::fromThriftField<::apache::thrift::StaticCastAdapter<::apache::thrift::test::basic::AdaptedEnum, ::apache::thrift::test::basic::ThriftAdaptedEnum>, 18>(::facebook::thrift::test::ThriftAdaptedEnum( ::facebook::thrift::test::AdaptedEnum::One), *this)),
      __fbthrift_field_adaptedListDefault(::apache::thrift::adapt_detail::fromThriftField<::apache::thrift::test::TemplatedTestAdapter, 19>(::std::vector<::std::int64_t>(std::initializer_list<::std::int64_t>{static_cast<::std::int64_t>(1)}), *this)),
      __fbthrift_field_adaptedSetDefault(::apache::thrift::adapt_detail::fromThriftField<::apache::thrift::test::TemplatedTestAdapter, 20>(::std::set<::std::int64_t>(std::initializer_list<::std::int64_t>{static_cast<::std::int64_t>(1)}), *this)),
      __fbthrift_field_adaptedMapDefault(::apache::thrift::adapt_detail::fromThriftField<::apache::thrift::test::TemplatedTestAdapter, 21>(::std::map<::std::int64_t, ::std::int64_t>(std::initializer_list<std::pair<const ::std::int64_t, ::std::int64_t>>{{static_cast<::std::int64_t>(1), static_cast<::std::int64_t>(1)}}), *this)),
      __fbthrift_field_doubleTypedefBool() {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 1>(__fbthrift_field_adaptedBool, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 2>(__fbthrift_field_adaptedByte, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 3>(__fbthrift_field_adaptedShort, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 4>(__fbthrift_field_adaptedInteger, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 5>(__fbthrift_field_adaptedLong, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 6>(__fbthrift_field_adaptedDouble, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 7>(__fbthrift_field_adaptedString, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 8>(__fbthrift_field_adaptedList, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 9>(__fbthrift_field_adaptedSet, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 10>(__fbthrift_field_adaptedMap, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 11>(__fbthrift_field_adaptedBoolDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 12>(__fbthrift_field_adaptedByteDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 13>(__fbthrift_field_adaptedShortDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 14>(__fbthrift_field_adaptedIntegerDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 15>(__fbthrift_field_adaptedLongDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 16>(__fbthrift_field_adaptedDoubleDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 17>(__fbthrift_field_adaptedStringDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::StaticCastAdapter<::apache::thrift::test::basic::AdaptedEnum, ::apache::thrift::test::basic::ThriftAdaptedEnum>, 18>(__fbthrift_field_adaptedEnum, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 19>(__fbthrift_field_adaptedListDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 20>(__fbthrift_field_adaptedSetDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 21>(__fbthrift_field_adaptedMapDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 22>(__fbthrift_field_doubleTypedefBool, *this);
}


AdaptTemplatedTestStruct::~AdaptTemplatedTestStruct() {}

AdaptTemplatedTestStruct::AdaptTemplatedTestStruct(FOLLY_MAYBE_UNUSED AdaptTemplatedTestStruct&& other) noexcept :
    __fbthrift_field_adaptedBool(std::move(other.__fbthrift_field_adaptedBool)),
    __fbthrift_field_adaptedByte(std::move(other.__fbthrift_field_adaptedByte)),
    __fbthrift_field_adaptedShort(std::move(other.__fbthrift_field_adaptedShort)),
    __fbthrift_field_adaptedInteger(std::move(other.__fbthrift_field_adaptedInteger)),
    __fbthrift_field_adaptedLong(std::move(other.__fbthrift_field_adaptedLong)),
    __fbthrift_field_adaptedDouble(std::move(other.__fbthrift_field_adaptedDouble)),
    __fbthrift_field_adaptedString(std::move(other.__fbthrift_field_adaptedString)),
    __fbthrift_field_adaptedList(std::move(other.__fbthrift_field_adaptedList)),
    __fbthrift_field_adaptedSet(std::move(other.__fbthrift_field_adaptedSet)),
    __fbthrift_field_adaptedMap(std::move(other.__fbthrift_field_adaptedMap)),
    __fbthrift_field_adaptedBoolDefault(std::move(other.__fbthrift_field_adaptedBoolDefault)),
    __fbthrift_field_adaptedByteDefault(std::move(other.__fbthrift_field_adaptedByteDefault)),
    __fbthrift_field_adaptedShortDefault(std::move(other.__fbthrift_field_adaptedShortDefault)),
    __fbthrift_field_adaptedIntegerDefault(std::move(other.__fbthrift_field_adaptedIntegerDefault)),
    __fbthrift_field_adaptedLongDefault(std::move(other.__fbthrift_field_adaptedLongDefault)),
    __fbthrift_field_adaptedDoubleDefault(std::move(other.__fbthrift_field_adaptedDoubleDefault)),
    __fbthrift_field_adaptedStringDefault(std::move(other.__fbthrift_field_adaptedStringDefault)),
    __fbthrift_field_adaptedEnum(std::move(other.__fbthrift_field_adaptedEnum)),
    __fbthrift_field_adaptedListDefault(std::move(other.__fbthrift_field_adaptedListDefault)),
    __fbthrift_field_adaptedSetDefault(std::move(other.__fbthrift_field_adaptedSetDefault)),
    __fbthrift_field_adaptedMapDefault(std::move(other.__fbthrift_field_adaptedMapDefault)),
    __fbthrift_field_doubleTypedefBool(std::move(other.__fbthrift_field_doubleTypedefBool)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 1>(__fbthrift_field_adaptedBool, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 2>(__fbthrift_field_adaptedByte, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 3>(__fbthrift_field_adaptedShort, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 4>(__fbthrift_field_adaptedInteger, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 5>(__fbthrift_field_adaptedLong, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 6>(__fbthrift_field_adaptedDouble, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 7>(__fbthrift_field_adaptedString, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 8>(__fbthrift_field_adaptedList, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 9>(__fbthrift_field_adaptedSet, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 10>(__fbthrift_field_adaptedMap, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 11>(__fbthrift_field_adaptedBoolDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 12>(__fbthrift_field_adaptedByteDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 13>(__fbthrift_field_adaptedShortDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 14>(__fbthrift_field_adaptedIntegerDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 15>(__fbthrift_field_adaptedLongDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 16>(__fbthrift_field_adaptedDoubleDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 17>(__fbthrift_field_adaptedStringDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::StaticCastAdapter<::apache::thrift::test::basic::AdaptedEnum, ::apache::thrift::test::basic::ThriftAdaptedEnum>, 18>(__fbthrift_field_adaptedEnum, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 19>(__fbthrift_field_adaptedListDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 20>(__fbthrift_field_adaptedSetDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 21>(__fbthrift_field_adaptedMapDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 22>(__fbthrift_field_doubleTypedefBool, *this);
}

AdaptTemplatedTestStruct& AdaptTemplatedTestStruct::operator=(FOLLY_MAYBE_UNUSED AdaptTemplatedTestStruct&& other) noexcept {
    this->__fbthrift_field_adaptedBool = std::move(other.__fbthrift_field_adaptedBool);
    this->__fbthrift_field_adaptedByte = std::move(other.__fbthrift_field_adaptedByte);
    this->__fbthrift_field_adaptedShort = std::move(other.__fbthrift_field_adaptedShort);
    this->__fbthrift_field_adaptedInteger = std::move(other.__fbthrift_field_adaptedInteger);
    this->__fbthrift_field_adaptedLong = std::move(other.__fbthrift_field_adaptedLong);
    this->__fbthrift_field_adaptedDouble = std::move(other.__fbthrift_field_adaptedDouble);
    this->__fbthrift_field_adaptedString = std::move(other.__fbthrift_field_adaptedString);
    this->__fbthrift_field_adaptedList = std::move(other.__fbthrift_field_adaptedList);
    this->__fbthrift_field_adaptedSet = std::move(other.__fbthrift_field_adaptedSet);
    this->__fbthrift_field_adaptedMap = std::move(other.__fbthrift_field_adaptedMap);
    this->__fbthrift_field_adaptedBoolDefault = std::move(other.__fbthrift_field_adaptedBoolDefault);
    this->__fbthrift_field_adaptedByteDefault = std::move(other.__fbthrift_field_adaptedByteDefault);
    this->__fbthrift_field_adaptedShortDefault = std::move(other.__fbthrift_field_adaptedShortDefault);
    this->__fbthrift_field_adaptedIntegerDefault = std::move(other.__fbthrift_field_adaptedIntegerDefault);
    this->__fbthrift_field_adaptedLongDefault = std::move(other.__fbthrift_field_adaptedLongDefault);
    this->__fbthrift_field_adaptedDoubleDefault = std::move(other.__fbthrift_field_adaptedDoubleDefault);
    this->__fbthrift_field_adaptedStringDefault = std::move(other.__fbthrift_field_adaptedStringDefault);
    this->__fbthrift_field_adaptedEnum = std::move(other.__fbthrift_field_adaptedEnum);
    this->__fbthrift_field_adaptedListDefault = std::move(other.__fbthrift_field_adaptedListDefault);
    this->__fbthrift_field_adaptedSetDefault = std::move(other.__fbthrift_field_adaptedSetDefault);
    this->__fbthrift_field_adaptedMapDefault = std::move(other.__fbthrift_field_adaptedMapDefault);
    this->__fbthrift_field_doubleTypedefBool = std::move(other.__fbthrift_field_doubleTypedefBool);
    __isset = other.__isset;
    return *this;
}


AdaptTemplatedTestStruct::AdaptTemplatedTestStruct(apache::thrift::FragileConstructor, ::facebook::thrift::test::AdaptedBool adaptedBool__arg, ::facebook::thrift::test::AdaptedByte adaptedByte__arg, ::facebook::thrift::test::AdaptedShort adaptedShort__arg, ::facebook::thrift::test::AdaptedInteger adaptedInteger__arg, ::facebook::thrift::test::AdaptedLong adaptedLong__arg, ::facebook::thrift::test::AdaptedDouble adaptedDouble__arg, ::facebook::thrift::test::AdaptedString adaptedString__arg, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 8, ::std::vector<::std::int64_t>, AdaptTemplatedTestStruct> adaptedList__arg, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 9, ::std::set<::std::int64_t>, AdaptTemplatedTestStruct> adaptedSet__arg, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 10, ::std::map<::std::int64_t, ::std::int64_t>, AdaptTemplatedTestStruct> adaptedMap__arg, ::facebook::thrift::test::AdaptedBool adaptedBoolDefault__arg, ::facebook::thrift::test::AdaptedByte adaptedByteDefault__arg, ::facebook::thrift::test::AdaptedShort adaptedShortDefault__arg, ::facebook::thrift::test::AdaptedInteger adaptedIntegerDefault__arg, ::facebook::thrift::test::AdaptedLong adaptedLongDefault__arg, ::facebook::thrift::test::AdaptedDouble adaptedDoubleDefault__arg, ::facebook::thrift::test::AdaptedString adaptedStringDefault__arg, ::facebook::thrift::test::AdaptedEnum adaptedEnum__arg, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 19, ::std::vector<::std::int64_t>, AdaptTemplatedTestStruct> adaptedListDefault__arg, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 20, ::std::set<::std::int64_t>, AdaptTemplatedTestStruct> adaptedSetDefault__arg, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 21, ::std::map<::std::int64_t, ::std::int64_t>, AdaptTemplatedTestStruct> adaptedMapDefault__arg, ::facebook::thrift::test::DoubleTypedefBool doubleTypedefBool__arg) :
    __fbthrift_field_adaptedBool(std::move(adaptedBool__arg)),
    __fbthrift_field_adaptedByte(std::move(adaptedByte__arg)),
    __fbthrift_field_adaptedShort(std::move(adaptedShort__arg)),
    __fbthrift_field_adaptedInteger(std::move(adaptedInteger__arg)),
    __fbthrift_field_adaptedLong(std::move(adaptedLong__arg)),
    __fbthrift_field_adaptedDouble(std::move(adaptedDouble__arg)),
    __fbthrift_field_adaptedString(std::move(adaptedString__arg)),
    __fbthrift_field_adaptedList(std::move(adaptedList__arg)),
    __fbthrift_field_adaptedSet(std::move(adaptedSet__arg)),
    __fbthrift_field_adaptedMap(std::move(adaptedMap__arg)),
    __fbthrift_field_adaptedBoolDefault(std::move(adaptedBoolDefault__arg)),
    __fbthrift_field_adaptedByteDefault(std::move(adaptedByteDefault__arg)),
    __fbthrift_field_adaptedShortDefault(std::move(adaptedShortDefault__arg)),
    __fbthrift_field_adaptedIntegerDefault(std::move(adaptedIntegerDefault__arg)),
    __fbthrift_field_adaptedLongDefault(std::move(adaptedLongDefault__arg)),
    __fbthrift_field_adaptedDoubleDefault(std::move(adaptedDoubleDefault__arg)),
    __fbthrift_field_adaptedStringDefault(std::move(adaptedStringDefault__arg)),
    __fbthrift_field_adaptedEnum(std::move(adaptedEnum__arg)),
    __fbthrift_field_adaptedListDefault(std::move(adaptedListDefault__arg)),
    __fbthrift_field_adaptedSetDefault(std::move(adaptedSetDefault__arg)),
    __fbthrift_field_adaptedMapDefault(std::move(adaptedMapDefault__arg)),
    __fbthrift_field_doubleTypedefBool(std::move(doubleTypedefBool__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 1>(__fbthrift_field_adaptedBool, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 2>(__fbthrift_field_adaptedByte, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 3>(__fbthrift_field_adaptedShort, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 4>(__fbthrift_field_adaptedInteger, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 5>(__fbthrift_field_adaptedLong, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 6>(__fbthrift_field_adaptedDouble, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 7>(__fbthrift_field_adaptedString, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 8>(__fbthrift_field_adaptedList, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 9>(__fbthrift_field_adaptedSet, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 10>(__fbthrift_field_adaptedMap, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 11>(__fbthrift_field_adaptedBoolDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 12>(__fbthrift_field_adaptedByteDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 13>(__fbthrift_field_adaptedShortDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 14>(__fbthrift_field_adaptedIntegerDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 15>(__fbthrift_field_adaptedLongDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 16>(__fbthrift_field_adaptedDoubleDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 17>(__fbthrift_field_adaptedStringDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::StaticCastAdapter<::apache::thrift::test::basic::AdaptedEnum, ::apache::thrift::test::basic::ThriftAdaptedEnum>, 18>(__fbthrift_field_adaptedEnum, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 19>(__fbthrift_field_adaptedListDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 20>(__fbthrift_field_adaptedSetDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 21>(__fbthrift_field_adaptedMapDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 22>(__fbthrift_field_doubleTypedefBool, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
  __isset.set(folly::index_constant<11>(), true);
  __isset.set(folly::index_constant<12>(), true);
  __isset.set(folly::index_constant<13>(), true);
  __isset.set(folly::index_constant<14>(), true);
  __isset.set(folly::index_constant<15>(), true);
  __isset.set(folly::index_constant<16>(), true);
  __isset.set(folly::index_constant<17>(), true);
  __isset.set(folly::index_constant<18>(), true);
  __isset.set(folly::index_constant<19>(), true);
  __isset.set(folly::index_constant<20>(), true);
  __isset.set(folly::index_constant<21>(), true);
}


void AdaptTemplatedTestStruct::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::TemplatedTestAdapter, 1>(__fbthrift_field_adaptedBool, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::TemplatedTestAdapter, 2>(__fbthrift_field_adaptedByte, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::TemplatedTestAdapter, 3>(__fbthrift_field_adaptedShort, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::TemplatedTestAdapter, 4>(__fbthrift_field_adaptedInteger, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::TemplatedTestAdapter, 5>(__fbthrift_field_adaptedLong, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::TemplatedTestAdapter, 6>(__fbthrift_field_adaptedDouble, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::TemplatedTestAdapter, 7>(__fbthrift_field_adaptedString, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::TemplatedTestAdapter, 8>(__fbthrift_field_adaptedList, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::TemplatedTestAdapter, 9>(__fbthrift_field_adaptedSet, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::TemplatedTestAdapter, 10>(__fbthrift_field_adaptedMap, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::TemplatedTestAdapter, 11>(__fbthrift_field_adaptedBoolDefault, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::TemplatedTestAdapter, 12>(__fbthrift_field_adaptedByteDefault, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::TemplatedTestAdapter, 13>(__fbthrift_field_adaptedShortDefault, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::TemplatedTestAdapter, 14>(__fbthrift_field_adaptedIntegerDefault, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::TemplatedTestAdapter, 15>(__fbthrift_field_adaptedLongDefault, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::TemplatedTestAdapter, 16>(__fbthrift_field_adaptedDoubleDefault, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::TemplatedTestAdapter, 17>(__fbthrift_field_adaptedStringDefault, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::StaticCastAdapter<::apache::thrift::test::basic::AdaptedEnum, ::apache::thrift::test::basic::ThriftAdaptedEnum>, 18>(__fbthrift_field_adaptedEnum, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::TemplatedTestAdapter, 19>(__fbthrift_field_adaptedListDefault, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::TemplatedTestAdapter, 20>(__fbthrift_field_adaptedSetDefault, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::TemplatedTestAdapter, 21>(__fbthrift_field_adaptedMapDefault, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::TemplatedTestAdapter, 22>(__fbthrift_field_doubleTypedefBool, *this);
  __isset = {};
}

void AdaptTemplatedTestStruct::__fbthrift_clear_terse_fields() {
}

bool AdaptTemplatedTestStruct::__fbthrift_is_empty() const {
  return false;
}

bool AdaptTemplatedTestStruct::operator==(FOLLY_MAYBE_UNUSED const AdaptTemplatedTestStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::TemplatedTestAdapter>(lhs.__fbthrift_field_adaptedBool, rhs.__fbthrift_field_adaptedBool)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::TemplatedTestAdapter>(lhs.__fbthrift_field_adaptedByte, rhs.__fbthrift_field_adaptedByte)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::TemplatedTestAdapter>(lhs.__fbthrift_field_adaptedShort, rhs.__fbthrift_field_adaptedShort)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::TemplatedTestAdapter>(lhs.__fbthrift_field_adaptedInteger, rhs.__fbthrift_field_adaptedInteger)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::TemplatedTestAdapter>(lhs.__fbthrift_field_adaptedLong, rhs.__fbthrift_field_adaptedLong)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::TemplatedTestAdapter>(lhs.__fbthrift_field_adaptedDouble, rhs.__fbthrift_field_adaptedDouble)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::TemplatedTestAdapter>(lhs.__fbthrift_field_adaptedString, rhs.__fbthrift_field_adaptedString)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::TemplatedTestAdapter>(lhs.__fbthrift_field_adaptedList, rhs.__fbthrift_field_adaptedList)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::TemplatedTestAdapter>(lhs.__fbthrift_field_adaptedSet, rhs.__fbthrift_field_adaptedSet)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::TemplatedTestAdapter>(lhs.__fbthrift_field_adaptedMap, rhs.__fbthrift_field_adaptedMap)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::TemplatedTestAdapter>(lhs.__fbthrift_field_adaptedBoolDefault, rhs.__fbthrift_field_adaptedBoolDefault)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::TemplatedTestAdapter>(lhs.__fbthrift_field_adaptedByteDefault, rhs.__fbthrift_field_adaptedByteDefault)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::TemplatedTestAdapter>(lhs.__fbthrift_field_adaptedShortDefault, rhs.__fbthrift_field_adaptedShortDefault)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::TemplatedTestAdapter>(lhs.__fbthrift_field_adaptedIntegerDefault, rhs.__fbthrift_field_adaptedIntegerDefault)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::TemplatedTestAdapter>(lhs.__fbthrift_field_adaptedLongDefault, rhs.__fbthrift_field_adaptedLongDefault)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::TemplatedTestAdapter>(lhs.__fbthrift_field_adaptedDoubleDefault, rhs.__fbthrift_field_adaptedDoubleDefault)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::TemplatedTestAdapter>(lhs.__fbthrift_field_adaptedStringDefault, rhs.__fbthrift_field_adaptedStringDefault)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::StaticCastAdapter<::apache::thrift::test::basic::AdaptedEnum, ::apache::thrift::test::basic::ThriftAdaptedEnum>>(lhs.__fbthrift_field_adaptedEnum, rhs.__fbthrift_field_adaptedEnum)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::TemplatedTestAdapter>(lhs.__fbthrift_field_adaptedListDefault, rhs.__fbthrift_field_adaptedListDefault)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::TemplatedTestAdapter>(lhs.__fbthrift_field_adaptedSetDefault, rhs.__fbthrift_field_adaptedSetDefault)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::TemplatedTestAdapter>(lhs.__fbthrift_field_adaptedMapDefault, rhs.__fbthrift_field_adaptedMapDefault)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::TemplatedTestAdapter>(lhs.__fbthrift_field_doubleTypedefBool, rhs.__fbthrift_field_doubleTypedefBool)) {
    return false;
  }
  return true;
}

bool AdaptTemplatedTestStruct::operator<(FOLLY_MAYBE_UNUSED const AdaptTemplatedTestStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED AdaptTemplatedTestStruct& a, FOLLY_MAYBE_UNUSED AdaptTemplatedTestStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_adaptedBool, b.__fbthrift_field_adaptedBool);
  swap(a.__fbthrift_field_adaptedByte, b.__fbthrift_field_adaptedByte);
  swap(a.__fbthrift_field_adaptedShort, b.__fbthrift_field_adaptedShort);
  swap(a.__fbthrift_field_adaptedInteger, b.__fbthrift_field_adaptedInteger);
  swap(a.__fbthrift_field_adaptedLong, b.__fbthrift_field_adaptedLong);
  swap(a.__fbthrift_field_adaptedDouble, b.__fbthrift_field_adaptedDouble);
  swap(a.__fbthrift_field_adaptedString, b.__fbthrift_field_adaptedString);
  swap(a.__fbthrift_field_adaptedList, b.__fbthrift_field_adaptedList);
  swap(a.__fbthrift_field_adaptedSet, b.__fbthrift_field_adaptedSet);
  swap(a.__fbthrift_field_adaptedMap, b.__fbthrift_field_adaptedMap);
  swap(a.__fbthrift_field_adaptedBoolDefault, b.__fbthrift_field_adaptedBoolDefault);
  swap(a.__fbthrift_field_adaptedByteDefault, b.__fbthrift_field_adaptedByteDefault);
  swap(a.__fbthrift_field_adaptedShortDefault, b.__fbthrift_field_adaptedShortDefault);
  swap(a.__fbthrift_field_adaptedIntegerDefault, b.__fbthrift_field_adaptedIntegerDefault);
  swap(a.__fbthrift_field_adaptedLongDefault, b.__fbthrift_field_adaptedLongDefault);
  swap(a.__fbthrift_field_adaptedDoubleDefault, b.__fbthrift_field_adaptedDoubleDefault);
  swap(a.__fbthrift_field_adaptedStringDefault, b.__fbthrift_field_adaptedStringDefault);
  swap(a.__fbthrift_field_adaptedEnum, b.__fbthrift_field_adaptedEnum);
  swap(a.__fbthrift_field_adaptedListDefault, b.__fbthrift_field_adaptedListDefault);
  swap(a.__fbthrift_field_adaptedSetDefault, b.__fbthrift_field_adaptedSetDefault);
  swap(a.__fbthrift_field_adaptedMapDefault, b.__fbthrift_field_adaptedMapDefault);
  swap(a.__fbthrift_field_doubleTypedefBool, b.__fbthrift_field_doubleTypedefBool);
  swap(a.__isset, b.__isset);
}

template void AdaptTemplatedTestStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t AdaptTemplatedTestStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t AdaptTemplatedTestStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t AdaptTemplatedTestStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void AdaptTemplatedTestStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t AdaptTemplatedTestStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AdaptTemplatedTestStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t AdaptTemplatedTestStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::AdaptTemplatedNestedTestStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::AdaptTemplatedNestedTestStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace thrift { namespace test {

const char* AdaptTemplatedNestedTestStruct::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/AdaptTemplatedNestedTestStruct";
}

const folly::StringPiece AdaptTemplatedNestedTestStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<AdaptTemplatedNestedTestStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece AdaptTemplatedNestedTestStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<AdaptTemplatedNestedTestStruct>::name;
}

AdaptTemplatedNestedTestStruct::AdaptTemplatedNestedTestStruct(const AdaptTemplatedNestedTestStruct&) = default;
AdaptTemplatedNestedTestStruct& AdaptTemplatedNestedTestStruct::operator=(const AdaptTemplatedNestedTestStruct&) = default;
AdaptTemplatedNestedTestStruct::AdaptTemplatedNestedTestStruct(FOLLY_MAYBE_UNUSED AdaptTemplatedNestedTestStruct&& other) noexcept :
    __fbthrift_field_adaptedStruct(std::move(other.__fbthrift_field_adaptedStruct)),
    __isset(other.__isset) {
}

AdaptTemplatedNestedTestStruct& AdaptTemplatedNestedTestStruct::operator=(FOLLY_MAYBE_UNUSED AdaptTemplatedNestedTestStruct&& other) noexcept {
    this->__fbthrift_field_adaptedStruct = std::move(other.__fbthrift_field_adaptedStruct);
    __isset = other.__isset;
    return *this;
}


AdaptTemplatedNestedTestStruct::AdaptTemplatedNestedTestStruct(apache::thrift::FragileConstructor, ::facebook::thrift::test::AdaptTemplatedTestStruct adaptedStruct__arg) :
    __fbthrift_field_adaptedStruct(std::move(adaptedStruct__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void AdaptTemplatedNestedTestStruct::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::clear(this->__fbthrift_field_adaptedStruct);
  __isset = {};
}

void AdaptTemplatedNestedTestStruct::__fbthrift_clear_terse_fields() {
}

bool AdaptTemplatedNestedTestStruct::__fbthrift_is_empty() const {
  return false;
}

bool AdaptTemplatedNestedTestStruct::operator==(FOLLY_MAYBE_UNUSED const AdaptTemplatedNestedTestStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.adaptedStruct_ref() == rhs.adaptedStruct_ref())) {
    return false;
  }
  return true;
}

bool AdaptTemplatedNestedTestStruct::operator<(FOLLY_MAYBE_UNUSED const AdaptTemplatedNestedTestStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::facebook::thrift::test::AdaptTemplatedTestStruct& AdaptTemplatedNestedTestStruct::get_adaptedStruct() const& {
  return __fbthrift_field_adaptedStruct;
}

::facebook::thrift::test::AdaptTemplatedTestStruct AdaptTemplatedNestedTestStruct::get_adaptedStruct() && {
  return std::move(__fbthrift_field_adaptedStruct);
}


void swap(FOLLY_MAYBE_UNUSED AdaptTemplatedNestedTestStruct& a, FOLLY_MAYBE_UNUSED AdaptTemplatedNestedTestStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_adaptedStruct, b.__fbthrift_field_adaptedStruct);
  swap(a.__isset, b.__isset);
}

template void AdaptTemplatedNestedTestStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t AdaptTemplatedNestedTestStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t AdaptTemplatedNestedTestStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t AdaptTemplatedNestedTestStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void AdaptTemplatedNestedTestStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t AdaptTemplatedNestedTestStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AdaptTemplatedNestedTestStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t AdaptTemplatedNestedTestStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        AdaptTemplatedNestedTestStruct,
        ::apache::thrift::type_class::structure,
        ::facebook::thrift::test::AdaptTemplatedTestStruct>,
    "inconsistent use of json option");

}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::ThriftAdaptTestUnion>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::ThriftAdaptTestUnion>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::facebook::thrift::test::ThriftAdaptTestUnion::Type>::size;
folly::Range<::facebook::thrift::test::ThriftAdaptTestUnion::Type const*> const TEnumTraits<::facebook::thrift::test::ThriftAdaptTestUnion::Type>::values = folly::range(TEnumDataStorage<::facebook::thrift::test::ThriftAdaptTestUnion::Type>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::facebook::thrift::test::ThriftAdaptTestUnion::Type>::names = folly::range(TEnumDataStorage<::facebook::thrift::test::ThriftAdaptTestUnion::Type>::names);

bool TEnumTraits<::facebook::thrift::test::ThriftAdaptTestUnion::Type>::findName(type value, folly::StringPiece* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::facebook::thrift::test::ThriftAdaptTestUnion::Type>::findValue(folly::StringPiece name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace facebook { namespace thrift { namespace test {

const char* ThriftAdaptTestUnion::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/AdaptTestUnion";
}

const folly::StringPiece ThriftAdaptTestUnion::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<ThriftAdaptTestUnion>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece ThriftAdaptTestUnion::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<ThriftAdaptTestUnion>::name;
}

void ThriftAdaptTestUnion::__fbthrift_clear() {
  // clear all fields
  if (getType() == Type::__EMPTY__) { return; }
  switch(getType()) {
    case Type::delay:
      destruct(value_.delay);
      break;
    case Type::custom:
      destruct(value_.custom);
      break;
    default:
      assert(false);
      break;
  }
  type_ = folly::to_underlying(Type::__EMPTY__);
}

bool ThriftAdaptTestUnion::__fbthrift_is_empty() const {
  return getType() == Type::__EMPTY__;
}

bool ThriftAdaptTestUnion::operator==(const ThriftAdaptTestUnion& rhs) const {
  if (getType() != rhs.getType()) { return false; }
  switch(getType()) {
    case Type::delay:
      return value_.delay == rhs.value_.delay;
    case Type::custom:
      return value_.custom == rhs.value_.custom;
    default:
      return true;
  }
}

bool ThriftAdaptTestUnion::operator<(FOLLY_MAYBE_UNUSED const ThriftAdaptTestUnion& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

void swap(ThriftAdaptTestUnion& a, ThriftAdaptTestUnion& b) {
  ThriftAdaptTestUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

template void ThriftAdaptTestUnion::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ThriftAdaptTestUnion::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ThriftAdaptTestUnion::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ThriftAdaptTestUnion::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ThriftAdaptTestUnion::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ThriftAdaptTestUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ThriftAdaptTestUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ThriftAdaptTestUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::ThriftAdaptedStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::ThriftAdaptedStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace thrift { namespace test {

const char* ThriftAdaptedStruct::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/AdaptedStruct";
}

const folly::StringPiece ThriftAdaptedStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<ThriftAdaptedStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece ThriftAdaptedStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<ThriftAdaptedStruct>::name;
}


ThriftAdaptedStruct::ThriftAdaptedStruct(apache::thrift::FragileConstructor, ::std::int64_t data__arg) :
    __fbthrift_field_data(std::move(data__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void ThriftAdaptedStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_data = ::std::int64_t();
  __isset = {};
}

void ThriftAdaptedStruct::__fbthrift_clear_terse_fields() {
}

bool ThriftAdaptedStruct::__fbthrift_is_empty() const {
  return false;
}

bool ThriftAdaptedStruct::operator==(FOLLY_MAYBE_UNUSED const ThriftAdaptedStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.data_ref() == rhs.data_ref())) {
    return false;
  }
  return true;
}

bool ThriftAdaptedStruct::operator<(FOLLY_MAYBE_UNUSED const ThriftAdaptedStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED ThriftAdaptedStruct& a, FOLLY_MAYBE_UNUSED ThriftAdaptedStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_data, b.__fbthrift_field_data);
  swap(a.__isset, b.__isset);
}

template void ThriftAdaptedStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ThriftAdaptedStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ThriftAdaptedStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ThriftAdaptedStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ThriftAdaptedStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ThriftAdaptedStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ThriftAdaptedStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ThriftAdaptedStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::detail::DirectlyAdaptedStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::detail::DirectlyAdaptedStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace thrift { namespace test {namespace detail {


const char* DirectlyAdaptedStruct::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/DirectlyAdaptedStruct";
}

const folly::StringPiece DirectlyAdaptedStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<DirectlyAdaptedStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece DirectlyAdaptedStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<DirectlyAdaptedStruct>::name;
}


DirectlyAdaptedStruct::DirectlyAdaptedStruct(apache::thrift::FragileConstructor, ::std::int64_t data__arg) :
    __fbthrift_field_data(std::move(data__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void DirectlyAdaptedStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_data = ::std::int64_t();
  __isset = {};
}

void DirectlyAdaptedStruct::__fbthrift_clear_terse_fields() {
}

bool DirectlyAdaptedStruct::__fbthrift_is_empty() const {
  return false;
}

bool DirectlyAdaptedStruct::operator==(FOLLY_MAYBE_UNUSED const DirectlyAdaptedStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.data_ref() == rhs.data_ref())) {
    return false;
  }
  return true;
}

bool DirectlyAdaptedStruct::operator<(FOLLY_MAYBE_UNUSED const DirectlyAdaptedStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED DirectlyAdaptedStruct& a, FOLLY_MAYBE_UNUSED DirectlyAdaptedStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_data, b.__fbthrift_field_data);
  swap(a.__isset, b.__isset);
}

template void DirectlyAdaptedStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t DirectlyAdaptedStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t DirectlyAdaptedStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t DirectlyAdaptedStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void DirectlyAdaptedStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t DirectlyAdaptedStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t DirectlyAdaptedStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t DirectlyAdaptedStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


} // namespace detail
}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::StructFieldAdaptedStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::StructFieldAdaptedStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace thrift { namespace test {

const char* StructFieldAdaptedStruct::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/StructFieldAdaptedStruct";
}

const folly::StringPiece StructFieldAdaptedStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<StructFieldAdaptedStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece StructFieldAdaptedStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<StructFieldAdaptedStruct>::name;
}

StructFieldAdaptedStruct::StructFieldAdaptedStruct(const StructFieldAdaptedStruct& srcObj) :
    __fbthrift_field_adaptedStruct(srcObj.__fbthrift_field_adaptedStruct),
    __fbthrift_field_adaptedTypedef(srcObj.__fbthrift_field_adaptedTypedef),
    __fbthrift_field_directlyAdapted(srcObj.__fbthrift_field_directlyAdapted),
    __fbthrift_field_typedefOfAdapted(srcObj.__fbthrift_field_typedefOfAdapted),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 1>(__fbthrift_field_adaptedStruct, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 2>(__fbthrift_field_adaptedTypedef, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 3>(__fbthrift_field_directlyAdapted, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 4>(__fbthrift_field_typedefOfAdapted, *this);
}

StructFieldAdaptedStruct& StructFieldAdaptedStruct::operator=(const StructFieldAdaptedStruct& other) {
  StructFieldAdaptedStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

StructFieldAdaptedStruct::StructFieldAdaptedStruct(FOLLY_MAYBE_UNUSED StructFieldAdaptedStruct&& other) noexcept :
    __fbthrift_field_adaptedStruct(std::move(other.__fbthrift_field_adaptedStruct)),
    __fbthrift_field_adaptedTypedef(std::move(other.__fbthrift_field_adaptedTypedef)),
    __fbthrift_field_directlyAdapted(std::move(other.__fbthrift_field_directlyAdapted)),
    __fbthrift_field_typedefOfAdapted(std::move(other.__fbthrift_field_typedefOfAdapted)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 1>(__fbthrift_field_adaptedStruct, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 2>(__fbthrift_field_adaptedTypedef, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 3>(__fbthrift_field_directlyAdapted, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 4>(__fbthrift_field_typedefOfAdapted, *this);
}

StructFieldAdaptedStruct& StructFieldAdaptedStruct::operator=(FOLLY_MAYBE_UNUSED StructFieldAdaptedStruct&& other) noexcept {
    this->__fbthrift_field_adaptedStruct = std::move(other.__fbthrift_field_adaptedStruct);
    this->__fbthrift_field_adaptedTypedef = std::move(other.__fbthrift_field_adaptedTypedef);
    this->__fbthrift_field_directlyAdapted = std::move(other.__fbthrift_field_directlyAdapted);
    this->__fbthrift_field_typedefOfAdapted = std::move(other.__fbthrift_field_typedefOfAdapted);
    __isset = other.__isset;
    return *this;
}


StructFieldAdaptedStruct::StructFieldAdaptedStruct(apache::thrift::FragileConstructor, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 1, ::facebook::thrift::test::ThriftAdaptedStruct, StructFieldAdaptedStruct> adaptedStruct__arg, ::facebook::thrift::test::AdaptedTypedef adaptedTypedef__arg, ::facebook::thrift::test::DirectlyAdaptedStruct directlyAdapted__arg, ::facebook::thrift::test::TypedefOfDirect typedefOfAdapted__arg) :
    __fbthrift_field_adaptedStruct(std::move(adaptedStruct__arg)),
    __fbthrift_field_adaptedTypedef(std::move(adaptedTypedef__arg)),
    __fbthrift_field_directlyAdapted(std::move(directlyAdapted__arg)),
    __fbthrift_field_typedefOfAdapted(std::move(typedefOfAdapted__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 1>(__fbthrift_field_adaptedStruct, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 2>(__fbthrift_field_adaptedTypedef, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 3>(__fbthrift_field_directlyAdapted, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 4>(__fbthrift_field_typedefOfAdapted, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void StructFieldAdaptedStruct::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::TemplatedTestAdapter, 1>(__fbthrift_field_adaptedStruct, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::TemplatedTestAdapter, 2>(__fbthrift_field_adaptedTypedef, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::TemplatedTestAdapter, 3>(__fbthrift_field_directlyAdapted, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::TemplatedTestAdapter, 4>(__fbthrift_field_typedefOfAdapted, *this);
  __isset = {};
}

void StructFieldAdaptedStruct::__fbthrift_clear_terse_fields() {
}

bool StructFieldAdaptedStruct::__fbthrift_is_empty() const {
  return false;
}

bool StructFieldAdaptedStruct::operator==(FOLLY_MAYBE_UNUSED const StructFieldAdaptedStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::TemplatedTestAdapter>(lhs.__fbthrift_field_adaptedStruct, rhs.__fbthrift_field_adaptedStruct)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::TemplatedTestAdapter>(lhs.__fbthrift_field_adaptedTypedef, rhs.__fbthrift_field_adaptedTypedef)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::TemplatedTestAdapter>(lhs.__fbthrift_field_directlyAdapted, rhs.__fbthrift_field_directlyAdapted)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::TemplatedTestAdapter>(lhs.__fbthrift_field_typedefOfAdapted, rhs.__fbthrift_field_typedefOfAdapted)) {
    return false;
  }
  return true;
}

bool StructFieldAdaptedStruct::operator<(FOLLY_MAYBE_UNUSED const StructFieldAdaptedStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED StructFieldAdaptedStruct& a, FOLLY_MAYBE_UNUSED StructFieldAdaptedStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_adaptedStruct, b.__fbthrift_field_adaptedStruct);
  swap(a.__fbthrift_field_adaptedTypedef, b.__fbthrift_field_adaptedTypedef);
  swap(a.__fbthrift_field_directlyAdapted, b.__fbthrift_field_directlyAdapted);
  swap(a.__fbthrift_field_typedefOfAdapted, b.__fbthrift_field_typedefOfAdapted);
  swap(a.__isset, b.__isset);
}

template void StructFieldAdaptedStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t StructFieldAdaptedStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t StructFieldAdaptedStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t StructFieldAdaptedStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void StructFieldAdaptedStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t StructFieldAdaptedStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t StructFieldAdaptedStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t StructFieldAdaptedStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        StructFieldAdaptedStruct,
        ::apache::thrift::type_class::structure,
        ::facebook::thrift::test::ThriftAdaptedStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        StructFieldAdaptedStruct,
        ::apache::thrift::type_class::structure,
        ::facebook::thrift::test::AdaptedTypedef>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        StructFieldAdaptedStruct,
        ::apache::thrift::type_class::structure,
        ::facebook::thrift::test::DirectlyAdaptedStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        StructFieldAdaptedStruct,
        ::apache::thrift::type_class::structure,
        ::facebook::thrift::test::TypedefOfDirect>,
    "inconsistent use of json option");

}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::CircularAdaptee>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::CircularAdaptee>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace thrift { namespace test {

const char* CircularAdaptee::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/CircularAdaptee";
}

const folly::StringPiece CircularAdaptee::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<CircularAdaptee>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece CircularAdaptee::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<CircularAdaptee>::name;
}

CircularAdaptee::CircularAdaptee(const CircularAdaptee&) = default;
CircularAdaptee& CircularAdaptee::operator=(const CircularAdaptee&) = default;
CircularAdaptee::CircularAdaptee(FOLLY_MAYBE_UNUSED CircularAdaptee&& other) noexcept :
    __fbthrift_field_field(std::move(other.__fbthrift_field_field)),
    __isset(other.__isset) {
}

CircularAdaptee& CircularAdaptee::operator=(FOLLY_MAYBE_UNUSED CircularAdaptee&& other) noexcept {
    this->__fbthrift_field_field = std::move(other.__fbthrift_field_field);
    __isset = other.__isset;
    return *this;
}


CircularAdaptee::CircularAdaptee(apache::thrift::FragileConstructor, ::facebook::thrift::test::CircularStruct field__arg) :
    __fbthrift_field_field(std::move(field__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void CircularAdaptee::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::clear(this->__fbthrift_field_field);
  __isset = {};
}

void CircularAdaptee::__fbthrift_clear_terse_fields() {
}

bool CircularAdaptee::__fbthrift_is_empty() const {
  return false;
}

bool CircularAdaptee::operator==(FOLLY_MAYBE_UNUSED const CircularAdaptee& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.field_ref() == rhs.field_ref())) {
    return false;
  }
  return true;
}

bool CircularAdaptee::operator<(FOLLY_MAYBE_UNUSED const CircularAdaptee& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::facebook::thrift::test::CircularStruct& CircularAdaptee::get_field() const& {
  return __fbthrift_field_field;
}

::facebook::thrift::test::CircularStruct CircularAdaptee::get_field() && {
  return std::move(__fbthrift_field_field);
}


void swap(FOLLY_MAYBE_UNUSED CircularAdaptee& a, FOLLY_MAYBE_UNUSED CircularAdaptee& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_field, b.__fbthrift_field_field);
  swap(a.__isset, b.__isset);
}

template void CircularAdaptee::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t CircularAdaptee::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t CircularAdaptee::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t CircularAdaptee::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void CircularAdaptee::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t CircularAdaptee::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t CircularAdaptee::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t CircularAdaptee::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        CircularAdaptee,
        ::apache::thrift::type_class::structure,
        ::facebook::thrift::test::CircularStruct>,
    "inconsistent use of json option");

}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::CircularStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::CircularStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace thrift { namespace test {

const char* CircularStruct::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/CircularStruct";
}

const folly::StringPiece CircularStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<CircularStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece CircularStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<CircularStruct>::name;
}

CircularStruct::CircularStruct(const CircularStruct& srcObj) :
    __fbthrift_field_field(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::structure>(srcObj.__fbthrift_field_field)) {
  if (__fbthrift_field_field) ::apache::thrift::adapt_detail::construct<::apache::thrift::test::MemberAccessAdapter, 1>(*__fbthrift_field_field, *this);
}

CircularStruct& CircularStruct::operator=(const CircularStruct& other) {
  CircularStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

CircularStruct::CircularStruct(FOLLY_MAYBE_UNUSED CircularStruct&& other) noexcept :
    __fbthrift_field_field(std::move(other.__fbthrift_field_field)) {
  if (__fbthrift_field_field) ::apache::thrift::adapt_detail::construct<::apache::thrift::test::MemberAccessAdapter, 1>(*__fbthrift_field_field, *this);
}

CircularStruct& CircularStruct::operator=(FOLLY_MAYBE_UNUSED CircularStruct&& other) noexcept {
    this->__fbthrift_field_field = std::move(other.__fbthrift_field_field);
    return *this;
}


CircularStruct::CircularStruct(apache::thrift::FragileConstructor, ::std::unique_ptr<::facebook::thrift::test::AdaptedCircularAdaptee> field__arg) :
    __fbthrift_field_field(std::move(field__arg)) {
  if (__fbthrift_field_field) ::apache::thrift::adapt_detail::construct<::apache::thrift::test::MemberAccessAdapter, 1>(*__fbthrift_field_field, *this);
}


void CircularStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_field.reset();
}

void CircularStruct::__fbthrift_clear_terse_fields() {
}

bool CircularStruct::__fbthrift_is_empty() const {
  return !(this->__fbthrift_field_field);
}

bool CircularStruct::operator==(FOLLY_MAYBE_UNUSED const CircularStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if ((!::apache::thrift::detail::pointer_equal(lhs.field_ref(), rhs.field_ref()))) {
    return false;
  }
  return true;
}

bool CircularStruct::operator<(FOLLY_MAYBE_UNUSED const CircularStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED CircularStruct& a, FOLLY_MAYBE_UNUSED CircularStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_field, b.__fbthrift_field_field);
}

template void CircularStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t CircularStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t CircularStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t CircularStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void CircularStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t CircularStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t CircularStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t CircularStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        CircularStruct,
        ::apache::thrift::type_class::structure,
        ::facebook::thrift::test::AdaptedCircularAdaptee>,
    "inconsistent use of json option");

}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::ReorderedStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::ReorderedStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace thrift { namespace test {

const char* ReorderedStruct::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/ReorderedStruct";
}

const folly::StringPiece ReorderedStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<ReorderedStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece ReorderedStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<ReorderedStruct>::name;
}

ReorderedStruct::ReorderedStruct(const ReorderedStruct& srcObj) :
    __fbthrift_field_reordered_dependent_adapted(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::structure>(srcObj.__fbthrift_field_reordered_dependent_adapted)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::IdentityAdapter<detail::DeclaredAfterStruct>, 1>(*__fbthrift_field_reordered_dependent_adapted, *this);
}

ReorderedStruct& ReorderedStruct::operator=(const ReorderedStruct& other) {
  ReorderedStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

ReorderedStruct::ReorderedStruct(FOLLY_MAYBE_UNUSED ReorderedStruct&& other) noexcept :
    __fbthrift_field_reordered_dependent_adapted(std::move(other.__fbthrift_field_reordered_dependent_adapted)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::IdentityAdapter<detail::DeclaredAfterStruct>, 1>(*__fbthrift_field_reordered_dependent_adapted, *this);
}

ReorderedStruct& ReorderedStruct::operator=(FOLLY_MAYBE_UNUSED ReorderedStruct&& other) noexcept {
    this->__fbthrift_field_reordered_dependent_adapted = std::move(other.__fbthrift_field_reordered_dependent_adapted);
    return *this;
}


ReorderedStruct::ReorderedStruct(apache::thrift::FragileConstructor, ::std::unique_ptr<::facebook::thrift::test::DeclaredAfterStruct> reordered_dependent_adapted__arg) :
    __fbthrift_field_reordered_dependent_adapted(std::move(reordered_dependent_adapted__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::IdentityAdapter<detail::DeclaredAfterStruct>, 1>(*__fbthrift_field_reordered_dependent_adapted, *this);
}


void ReorderedStruct::__fbthrift_clear() {
  // clear all fields
}

void ReorderedStruct::__fbthrift_clear_terse_fields() {
}

bool ReorderedStruct::__fbthrift_is_empty() const {
  return false;
}

bool ReorderedStruct::operator==(FOLLY_MAYBE_UNUSED const ReorderedStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if ((!::apache::thrift::detail::pointer_equal(lhs.reordered_dependent_adapted_ref(), rhs.reordered_dependent_adapted_ref()))) {
    return false;
  }
  return true;
}

bool ReorderedStruct::operator<(FOLLY_MAYBE_UNUSED const ReorderedStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED ReorderedStruct& a, FOLLY_MAYBE_UNUSED ReorderedStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_reordered_dependent_adapted, b.__fbthrift_field_reordered_dependent_adapted);
}

template void ReorderedStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ReorderedStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ReorderedStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ReorderedStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ReorderedStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ReorderedStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ReorderedStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ReorderedStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ReorderedStruct,
        ::apache::thrift::type_class::structure,
        ::facebook::thrift::test::DeclaredAfterStruct>,
    "inconsistent use of json option");

}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::detail::DeclaredAfterStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::detail::DeclaredAfterStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace thrift { namespace test {namespace detail {


const char* DeclaredAfterStruct::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/DeclaredAfterStruct";
}

const folly::StringPiece DeclaredAfterStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<DeclaredAfterStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece DeclaredAfterStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<DeclaredAfterStruct>::name;
}


DeclaredAfterStruct::DeclaredAfterStruct(apache::thrift::FragileConstructor) {}


void DeclaredAfterStruct::__fbthrift_clear() {
  // clear all fields
}

void DeclaredAfterStruct::__fbthrift_clear_terse_fields() {
}

bool DeclaredAfterStruct::__fbthrift_is_empty() const {
  return true;
}

bool DeclaredAfterStruct::operator==(FOLLY_MAYBE_UNUSED const DeclaredAfterStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  return true;
}

bool DeclaredAfterStruct::operator<(FOLLY_MAYBE_UNUSED const DeclaredAfterStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED DeclaredAfterStruct& a, FOLLY_MAYBE_UNUSED DeclaredAfterStruct& b) {
  using ::std::swap;
}

template void DeclaredAfterStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t DeclaredAfterStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t DeclaredAfterStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t DeclaredAfterStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void DeclaredAfterStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t DeclaredAfterStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t DeclaredAfterStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t DeclaredAfterStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


} // namespace detail
}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::UnderlyingRenamedStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::UnderlyingRenamedStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace thrift { namespace test {

const char* UnderlyingRenamedStruct::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/RenamedStruct";
}

const folly::StringPiece UnderlyingRenamedStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<UnderlyingRenamedStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece UnderlyingRenamedStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<UnderlyingRenamedStruct>::name;
}


UnderlyingRenamedStruct::UnderlyingRenamedStruct(apache::thrift::FragileConstructor, ::std::int64_t data__arg) :
    __fbthrift_field_data(std::move(data__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void UnderlyingRenamedStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_data = ::std::int64_t();
  __isset = {};
}

void UnderlyingRenamedStruct::__fbthrift_clear_terse_fields() {
}

bool UnderlyingRenamedStruct::__fbthrift_is_empty() const {
  return false;
}

bool UnderlyingRenamedStruct::operator==(FOLLY_MAYBE_UNUSED const UnderlyingRenamedStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.data_ref() == rhs.data_ref())) {
    return false;
  }
  return true;
}

bool UnderlyingRenamedStruct::operator<(FOLLY_MAYBE_UNUSED const UnderlyingRenamedStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED UnderlyingRenamedStruct& a, FOLLY_MAYBE_UNUSED UnderlyingRenamedStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_data, b.__fbthrift_field_data);
  swap(a.__isset, b.__isset);
}

template void UnderlyingRenamedStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t UnderlyingRenamedStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t UnderlyingRenamedStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t UnderlyingRenamedStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void UnderlyingRenamedStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t UnderlyingRenamedStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t UnderlyingRenamedStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t UnderlyingRenamedStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::UnderlyingSameNamespaceStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::UnderlyingSameNamespaceStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace thrift { namespace test {

const char* UnderlyingSameNamespaceStruct::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/SameNamespaceStruct";
}

const folly::StringPiece UnderlyingSameNamespaceStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<UnderlyingSameNamespaceStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece UnderlyingSameNamespaceStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<UnderlyingSameNamespaceStruct>::name;
}


UnderlyingSameNamespaceStruct::UnderlyingSameNamespaceStruct(apache::thrift::FragileConstructor, ::std::int64_t data__arg) :
    __fbthrift_field_data(std::move(data__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void UnderlyingSameNamespaceStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_data = ::std::int64_t();
  __isset = {};
}

void UnderlyingSameNamespaceStruct::__fbthrift_clear_terse_fields() {
}

bool UnderlyingSameNamespaceStruct::__fbthrift_is_empty() const {
  return false;
}

bool UnderlyingSameNamespaceStruct::operator==(FOLLY_MAYBE_UNUSED const UnderlyingSameNamespaceStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.data_ref() == rhs.data_ref())) {
    return false;
  }
  return true;
}

bool UnderlyingSameNamespaceStruct::operator<(FOLLY_MAYBE_UNUSED const UnderlyingSameNamespaceStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED UnderlyingSameNamespaceStruct& a, FOLLY_MAYBE_UNUSED UnderlyingSameNamespaceStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_data, b.__fbthrift_field_data);
  swap(a.__isset, b.__isset);
}

template void UnderlyingSameNamespaceStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t UnderlyingSameNamespaceStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t UnderlyingSameNamespaceStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t UnderlyingSameNamespaceStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void UnderlyingSameNamespaceStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t UnderlyingSameNamespaceStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t UnderlyingSameNamespaceStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t UnderlyingSameNamespaceStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::detail::HeapAllocated>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::detail::HeapAllocated>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace thrift { namespace test {namespace detail {


const char* HeapAllocated::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/HeapAllocated";
}

const folly::StringPiece HeapAllocated::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<HeapAllocated>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece HeapAllocated::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<HeapAllocated>::name;
}


HeapAllocated::HeapAllocated(apache::thrift::FragileConstructor) {}


void HeapAllocated::__fbthrift_clear() {
  // clear all fields
}

void HeapAllocated::__fbthrift_clear_terse_fields() {
}

bool HeapAllocated::__fbthrift_is_empty() const {
  return true;
}

bool HeapAllocated::operator==(FOLLY_MAYBE_UNUSED const HeapAllocated& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  return true;
}

bool HeapAllocated::operator<(FOLLY_MAYBE_UNUSED const HeapAllocated& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED HeapAllocated& a, FOLLY_MAYBE_UNUSED HeapAllocated& b) {
  using ::std::swap;
}

template void HeapAllocated::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t HeapAllocated::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t HeapAllocated::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t HeapAllocated::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void HeapAllocated::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t HeapAllocated::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t HeapAllocated::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t HeapAllocated::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


} // namespace detail
}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::MoveOnly>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::MoveOnly>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace thrift { namespace test {

const char* MoveOnly::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/MoveOnly";
}

const folly::StringPiece MoveOnly::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MoveOnly>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MoveOnly::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MoveOnly>::name;
}


MoveOnly::MoveOnly(apache::thrift::FragileConstructor, ::facebook::thrift::test::HeapAllocated ptr__arg) :
    __fbthrift_field_ptr(std::move(ptr__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::MoveOnlyAdapter, 1>(__fbthrift_field_ptr, *this);
  __isset.set(folly::index_constant<0>(), true);
}


void MoveOnly::__fbthrift_clear() {
  // clear all fields
  __isset = {};
}

void MoveOnly::__fbthrift_clear_terse_fields() {
}

bool MoveOnly::__fbthrift_is_empty() const {
  return false;
}

bool MoveOnly::operator==(FOLLY_MAYBE_UNUSED const MoveOnly& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::MoveOnlyAdapter>(lhs.__fbthrift_field_ptr, rhs.__fbthrift_field_ptr)) {
    return false;
  }
  return true;
}

bool MoveOnly::operator<(FOLLY_MAYBE_UNUSED const MoveOnly& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED MoveOnly& a, FOLLY_MAYBE_UNUSED MoveOnly& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_ptr, b.__fbthrift_field_ptr);
  swap(a.__isset, b.__isset);
}

template void MoveOnly::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MoveOnly::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MoveOnly::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MoveOnly::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MoveOnly::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MoveOnly::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MoveOnly::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MoveOnly::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MoveOnly,
        ::apache::thrift::type_class::structure,
        ::facebook::thrift::test::HeapAllocated>,
    "inconsistent use of json option");

}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::AlsoMoveOnly>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::AlsoMoveOnly>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace thrift { namespace test {

const char* AlsoMoveOnly::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/AlsoMoveOnly";
}

const folly::StringPiece AlsoMoveOnly::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<AlsoMoveOnly>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece AlsoMoveOnly::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<AlsoMoveOnly>::name;
}


AlsoMoveOnly::AlsoMoveOnly(apache::thrift::FragileConstructor, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::MoveOnlyAdapter, 1, ::std::int64_t, AlsoMoveOnly> ptr__arg) :
    __fbthrift_field_ptr(std::move(ptr__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::MoveOnlyAdapter, 1>(__fbthrift_field_ptr, *this);
  __isset.set(folly::index_constant<0>(), true);
}


void AlsoMoveOnly::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::MoveOnlyAdapter, 1>(__fbthrift_field_ptr, *this);
  __isset = {};
}

void AlsoMoveOnly::__fbthrift_clear_terse_fields() {
}

bool AlsoMoveOnly::__fbthrift_is_empty() const {
  return false;
}

bool AlsoMoveOnly::operator==(FOLLY_MAYBE_UNUSED const AlsoMoveOnly& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::test::MoveOnlyAdapter>(lhs.__fbthrift_field_ptr, rhs.__fbthrift_field_ptr)) {
    return false;
  }
  return true;
}

bool AlsoMoveOnly::operator<(FOLLY_MAYBE_UNUSED const AlsoMoveOnly& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED AlsoMoveOnly& a, FOLLY_MAYBE_UNUSED AlsoMoveOnly& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_ptr, b.__fbthrift_field_ptr);
  swap(a.__isset, b.__isset);
}

template void AlsoMoveOnly::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t AlsoMoveOnly::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t AlsoMoveOnly::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t AlsoMoveOnly::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void AlsoMoveOnly::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t AlsoMoveOnly::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AlsoMoveOnly::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t AlsoMoveOnly::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::ApplyAdapter>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::ApplyAdapter>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace thrift { namespace test {

const char* ApplyAdapter::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/ApplyAdapter";
}

const folly::StringPiece ApplyAdapter::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<ApplyAdapter>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece ApplyAdapter::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<ApplyAdapter>::name;
}


ApplyAdapter::ApplyAdapter(apache::thrift::FragileConstructor) {}


void ApplyAdapter::__fbthrift_clear() {
  // clear all fields
}

void ApplyAdapter::__fbthrift_clear_terse_fields() {
}

bool ApplyAdapter::__fbthrift_is_empty() const {
  return true;
}

bool ApplyAdapter::operator==(FOLLY_MAYBE_UNUSED const ApplyAdapter& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  return true;
}

bool ApplyAdapter::operator<(FOLLY_MAYBE_UNUSED const ApplyAdapter& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED ApplyAdapter& a, FOLLY_MAYBE_UNUSED ApplyAdapter& b) {
  using ::std::swap;
}

template void ApplyAdapter::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ApplyAdapter::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ApplyAdapter::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ApplyAdapter::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ApplyAdapter::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ApplyAdapter::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ApplyAdapter::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ApplyAdapter::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::detail::TransitiveAdapted>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::detail::TransitiveAdapted>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace thrift { namespace test {namespace detail {


const char* TransitiveAdapted::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/TransitiveAdapted";
}

const folly::StringPiece TransitiveAdapted::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<TransitiveAdapted>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece TransitiveAdapted::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<TransitiveAdapted>::name;
}


TransitiveAdapted::TransitiveAdapted(apache::thrift::FragileConstructor) {}


void TransitiveAdapted::__fbthrift_clear() {
  // clear all fields
}

void TransitiveAdapted::__fbthrift_clear_terse_fields() {
}

bool TransitiveAdapted::__fbthrift_is_empty() const {
  return true;
}

bool TransitiveAdapted::operator==(FOLLY_MAYBE_UNUSED const TransitiveAdapted& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  return true;
}

bool TransitiveAdapted::operator<(FOLLY_MAYBE_UNUSED const TransitiveAdapted& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED TransitiveAdapted& a, FOLLY_MAYBE_UNUSED TransitiveAdapted& b) {
  using ::std::swap;
}

template void TransitiveAdapted::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t TransitiveAdapted::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t TransitiveAdapted::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t TransitiveAdapted::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void TransitiveAdapted::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t TransitiveAdapted::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t TransitiveAdapted::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t TransitiveAdapted::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


} // namespace detail
}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::CountingStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::CountingStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace thrift { namespace test {

const char* CountingStruct::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/CountingStruct";
}

const folly::StringPiece CountingStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<CountingStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece CountingStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<CountingStruct>::name;
}

CountingStruct::CountingStruct(const CountingStruct& srcObj) :
    __fbthrift_field_regularInt(srcObj.__fbthrift_field_regularInt),
    __fbthrift_field_countingInt(srcObj.__fbthrift_field_countingInt),
    __fbthrift_field_regularString(srcObj.__fbthrift_field_regularString),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::CountingAdapter<false, int>, 1>(__fbthrift_field_regularInt, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::CountingAdapter<true, int>, 2>(__fbthrift_field_countingInt, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::CountingAdapter<false, std::string>, 3>(__fbthrift_field_regularString, *this);
}

CountingStruct& CountingStruct::operator=(const CountingStruct& other) {
  CountingStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

CountingStruct::CountingStruct(FOLLY_MAYBE_UNUSED CountingStruct&& other) noexcept :
    __fbthrift_field_regularInt(std::move(other.__fbthrift_field_regularInt)),
    __fbthrift_field_countingInt(std::move(other.__fbthrift_field_countingInt)),
    __fbthrift_field_regularString(std::move(other.__fbthrift_field_regularString)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::CountingAdapter<false, int>, 1>(__fbthrift_field_regularInt, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::CountingAdapter<true, int>, 2>(__fbthrift_field_countingInt, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::CountingAdapter<false, std::string>, 3>(__fbthrift_field_regularString, *this);
}

CountingStruct& CountingStruct::operator=(FOLLY_MAYBE_UNUSED CountingStruct&& other) noexcept {
    this->__fbthrift_field_regularInt = std::move(other.__fbthrift_field_regularInt);
    this->__fbthrift_field_countingInt = std::move(other.__fbthrift_field_countingInt);
    this->__fbthrift_field_regularString = std::move(other.__fbthrift_field_regularString);
    __isset = other.__isset;
    return *this;
}


CountingStruct::CountingStruct(apache::thrift::FragileConstructor, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::CountingAdapter<false, int>, 1, ::std::int64_t, CountingStruct> regularInt__arg, ::facebook::thrift::test::CountingInt countingInt__arg, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::CountingAdapter<false, std::string>, 3, ::std::string, CountingStruct> regularString__arg) :
    __fbthrift_field_regularInt(std::move(regularInt__arg)),
    __fbthrift_field_countingInt(std::move(countingInt__arg)),
    __fbthrift_field_regularString(std::move(regularString__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::CountingAdapter<false, int>, 1>(__fbthrift_field_regularInt, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::CountingAdapter<true, int>, 2>(__fbthrift_field_countingInt, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::test::CountingAdapter<false, std::string>, 3>(__fbthrift_field_regularString, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
}


void CountingStruct::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::CountingAdapter<false, int>, 1>(__fbthrift_field_regularInt, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::CountingAdapter<true, int>, 2>(__fbthrift_field_countingInt, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::test::CountingAdapter<false, std::string>, 3>(__fbthrift_field_regularString, *this);
  __isset = {};
}

void CountingStruct::__fbthrift_clear_terse_fields() {
}

bool CountingStruct::__fbthrift_is_empty() const {
  return !(this->__isset.get(0)) &&
 !(this->__isset.get(1)) &&
 !(this->__isset.get(2));
}

bool CountingStruct::operator==(FOLLY_MAYBE_UNUSED const CountingStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal_opt<::apache::thrift::test::CountingAdapter<false, int>>(lhs.regularInt_ref(), rhs.regularInt_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal_opt<::apache::thrift::test::CountingAdapter<true, int>>(lhs.countingInt_ref(), rhs.countingInt_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal_opt<::apache::thrift::test::CountingAdapter<false, std::string>>(lhs.regularString_ref(), rhs.regularString_ref())) {
    return false;
  }
  return true;
}

bool CountingStruct::operator<(FOLLY_MAYBE_UNUSED const CountingStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED CountingStruct& a, FOLLY_MAYBE_UNUSED CountingStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_regularInt, b.__fbthrift_field_regularInt);
  swap(a.__fbthrift_field_countingInt, b.__fbthrift_field_countingInt);
  swap(a.__fbthrift_field_regularString, b.__fbthrift_field_regularString);
  swap(a.__isset, b.__isset);
}

template void CountingStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t CountingStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t CountingStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t CountingStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void CountingStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t CountingStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t CountingStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t CountingStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::Person>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::Person>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace thrift { namespace test {

const char* Person::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/Person";
}

const folly::StringPiece Person::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Person>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece Person::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<Person>::name;
}

Person::Person(const Person&) = default;
Person& Person::operator=(const Person&) = default;
Person::Person(FOLLY_MAYBE_UNUSED Person&& other) noexcept :
    __fbthrift_field_name(std::move(other.__fbthrift_field_name)),
    __isset(other.__isset) {
}

Person& Person::operator=(FOLLY_MAYBE_UNUSED Person&& other) noexcept {
    this->__fbthrift_field_name = std::move(other.__fbthrift_field_name);
    __isset = other.__isset;
    return *this;
}


Person::Person(apache::thrift::FragileConstructor, ::std::string name__arg) :
    __fbthrift_field_name(std::move(name__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void Person::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_name = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  __isset = {};
}

void Person::__fbthrift_clear_terse_fields() {
}

bool Person::__fbthrift_is_empty() const {
  return false;
}

bool Person::operator==(FOLLY_MAYBE_UNUSED const Person& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.name_ref() == rhs.name_ref())) {
    return false;
  }
  return true;
}

bool Person::operator<(FOLLY_MAYBE_UNUSED const Person& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED Person& a, FOLLY_MAYBE_UNUSED Person& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_name, b.__fbthrift_field_name);
  swap(a.__isset, b.__isset);
}

template void Person::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Person::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Person::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Person::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void Person::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Person::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Person::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Person::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // facebook::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::Person2>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::Person2>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace thrift { namespace test {

const char* Person2::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/Person2";
}

const folly::StringPiece Person2::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Person2>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece Person2::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<Person2>::name;
}

Person2::Person2(const Person2&) = default;
Person2& Person2::operator=(const Person2&) = default;
Person2::Person2(FOLLY_MAYBE_UNUSED Person2&& other) noexcept :
    __fbthrift_field_name(std::move(other.__fbthrift_field_name)),
    __isset(other.__isset) {
}

Person2& Person2::operator=(FOLLY_MAYBE_UNUSED Person2&& other) noexcept {
    this->__fbthrift_field_name = std::move(other.__fbthrift_field_name);
    __isset = other.__isset;
    return *this;
}


Person2::Person2(apache::thrift::FragileConstructor, ::std::string name__arg) :
    __fbthrift_field_name(std::move(name__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void Person2::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_name = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  __isset = {};
}

void Person2::__fbthrift_clear_terse_fields() {
}

bool Person2::__fbthrift_is_empty() const {
  return false;
}

bool Person2::operator==(FOLLY_MAYBE_UNUSED const Person2& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.name_ref() == rhs.name_ref())) {
    return false;
  }
  return true;
}

bool Person2::operator<(FOLLY_MAYBE_UNUSED const Person2& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED Person2& a, FOLLY_MAYBE_UNUSED Person2& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_name, b.__fbthrift_field_name);
  swap(a.__isset, b.__isset);
}

template void Person2::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Person2::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Person2::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Person2::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void Person2::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Person2::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Person2::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Person2::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // facebook::thrift::test

namespace facebook { namespace thrift { namespace test { namespace {
FOLLY_MAYBE_UNUSED FOLLY_ERASE void validateAdapters() {
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter1, 1, ::std::int32_t, ::facebook::thrift::test::Foo>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter1, 2, ::std::int32_t, ::facebook::thrift::test::Foo>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter1, 3, ::std::int32_t, ::facebook::thrift::test::Foo>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter2, 4, ::std::set<::std::string>, ::facebook::thrift::test::Foo>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter2, 5, ::std::set<::std::string>, ::facebook::thrift::test::Foo>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter3, 6, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter>, ::facebook::thrift::test::Foo>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter3, 7, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter>, ::facebook::thrift::test::Foo>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter3, 8, ::std::string, ::facebook::thrift::test::Foo>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter1, 9, ::std::int64_t, ::facebook::thrift::test::Foo>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter2, 10, ::std::int64_t, ::facebook::thrift::test::Foo>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter1, 11, ::std::int64_t, ::facebook::thrift::test::Foo>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter1, 1, ::std::int32_t, ::facebook::thrift::test::Baz>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter2, 4, ::std::set<::std::string>, ::facebook::thrift::test::Baz>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter3, 6, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter>, ::facebook::thrift::test::Baz>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter1, 8, ::std::string, ::facebook::thrift::test::Baz>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter1, 9, ::std::int64_t, ::facebook::thrift::test::Baz>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter1, 1, ::facebook::thrift::test::Foo, ::facebook::thrift::test::Bar>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter1, 2, ::facebook::thrift::test::Foo, ::facebook::thrift::test::Bar>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter1, 5, ::facebook::thrift::test::Baz, ::facebook::thrift::test::Bar>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter1, 6, ::facebook::thrift::test::Baz, ::facebook::thrift::test::Bar>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter, 7, ::facebook::thrift::test::detail::DirectlyAdapted, ::facebook::thrift::test::Bar>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter1, 1, ::std::int32_t, ::facebook::thrift::test::StructWithFieldAdapter>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter1, 2, ::std::int32_t, ::facebook::thrift::test::StructWithFieldAdapter>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter1, 3, ::std::int32_t, ::facebook::thrift::test::StructWithFieldAdapter>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter1, 4, ::std::int32_t, ::facebook::thrift::test::StructWithFieldAdapter>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter1, 1, ::std::int32_t, ::facebook::thrift::test::TerseAdaptedFields>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter1, 2, ::std::string, ::facebook::thrift::test::TerseAdaptedFields>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter1, 3, ::std::set<::std::int32_t>, ::facebook::thrift::test::TerseAdaptedFields>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter, 1, ::facebook::thrift::test::A, ::facebook::thrift::test::B>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter2, 2, ::std::set<::std::string>, ::facebook::thrift::test::MyStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::AdaptTestMsAdapter, 1, ::std::int64_t, ::facebook::thrift::test::AdaptTestStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::CustomProtocolAdapter, 2, ::folly::IOBuf, ::facebook::thrift::test::AdaptTestStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::AdaptTestMsAdapter, 3, ::std::int64_t, ::facebook::thrift::test::AdaptTestStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::AdapterWithContext, 4, ::std::int64_t, ::facebook::thrift::test::AdaptTestStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::IndirectionAdapter<::apache::thrift::test::IndirectionString>, 6, ::std::string, ::facebook::thrift::test::AdaptTestStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::AdapterWithContext, 7, ::std::string, ::facebook::thrift::test::AdaptTestStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::TemplatedTestAdapter, 8, bool, ::facebook::thrift::test::AdaptTestStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::AdapterWithContext, 9, ::std::int32_t, ::facebook::thrift::test::AdaptTestStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::AdapterWithContext, 10, ::std::string, ::facebook::thrift::test::AdaptTestStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::TemplatedTestAdapter, 1, bool, ::facebook::thrift::test::AdaptTemplatedTestStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::TemplatedTestAdapter, 2, ::std::int8_t, ::facebook::thrift::test::AdaptTemplatedTestStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::TemplatedTestAdapter, 3, ::std::int16_t, ::facebook::thrift::test::AdaptTemplatedTestStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::TemplatedTestAdapter, 4, ::std::int32_t, ::facebook::thrift::test::AdaptTemplatedTestStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::TemplatedTestAdapter, 5, ::std::int64_t, ::facebook::thrift::test::AdaptTemplatedTestStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::TemplatedTestAdapter, 6, double, ::facebook::thrift::test::AdaptTemplatedTestStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::TemplatedTestAdapter, 7, ::std::string, ::facebook::thrift::test::AdaptTemplatedTestStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::TemplatedTestAdapter, 8, ::std::vector<::std::int64_t>, ::facebook::thrift::test::AdaptTemplatedTestStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::TemplatedTestAdapter, 9, ::std::set<::std::int64_t>, ::facebook::thrift::test::AdaptTemplatedTestStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::TemplatedTestAdapter, 10, ::std::map<::std::int64_t, ::std::int64_t>, ::facebook::thrift::test::AdaptTemplatedTestStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::TemplatedTestAdapter, 11, bool, ::facebook::thrift::test::AdaptTemplatedTestStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::TemplatedTestAdapter, 12, ::std::int8_t, ::facebook::thrift::test::AdaptTemplatedTestStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::TemplatedTestAdapter, 13, ::std::int16_t, ::facebook::thrift::test::AdaptTemplatedTestStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::TemplatedTestAdapter, 14, ::std::int32_t, ::facebook::thrift::test::AdaptTemplatedTestStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::TemplatedTestAdapter, 15, ::std::int64_t, ::facebook::thrift::test::AdaptTemplatedTestStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::TemplatedTestAdapter, 16, double, ::facebook::thrift::test::AdaptTemplatedTestStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::TemplatedTestAdapter, 17, ::std::string, ::facebook::thrift::test::AdaptTemplatedTestStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::StaticCastAdapter<::apache::thrift::test::basic::AdaptedEnum, ::apache::thrift::test::basic::ThriftAdaptedEnum>, 18, ::facebook::thrift::test::ThriftAdaptedEnum, ::facebook::thrift::test::AdaptTemplatedTestStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::TemplatedTestAdapter, 19, ::std::vector<::std::int64_t>, ::facebook::thrift::test::AdaptTemplatedTestStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::TemplatedTestAdapter, 20, ::std::set<::std::int64_t>, ::facebook::thrift::test::AdaptTemplatedTestStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::TemplatedTestAdapter, 21, ::std::map<::std::int64_t, ::std::int64_t>, ::facebook::thrift::test::AdaptTemplatedTestStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::TemplatedTestAdapter, 22, bool, ::facebook::thrift::test::AdaptTemplatedTestStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::AdaptTestMsAdapter, 1, ::std::int64_t, ::facebook::thrift::test::ThriftAdaptTestUnion>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::CustomProtocolAdapter, 2, ::folly::IOBuf, ::facebook::thrift::test::ThriftAdaptTestUnion>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::TemplatedTestAdapter, 1, ::facebook::thrift::test::ThriftAdaptedStruct, ::facebook::thrift::test::StructFieldAdaptedStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::TemplatedTestAdapter, 2, ::facebook::thrift::test::ThriftAdaptedStruct, ::facebook::thrift::test::StructFieldAdaptedStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::TemplatedTestAdapter, 3, ::facebook::thrift::test::detail::DirectlyAdaptedStruct, ::facebook::thrift::test::StructFieldAdaptedStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::TemplatedTestAdapter, 4, ::facebook::thrift::test::detail::DirectlyAdaptedStruct, ::facebook::thrift::test::StructFieldAdaptedStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::MemberAccessAdapter, 1, ::facebook::thrift::test::CircularAdaptee, ::facebook::thrift::test::CircularStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::IdentityAdapter<detail::DeclaredAfterStruct>, 1, ::facebook::thrift::test::detail::DeclaredAfterStruct, ::facebook::thrift::test::ReorderedStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::MoveOnlyAdapter, 1, ::facebook::thrift::test::detail::HeapAllocated, ::facebook::thrift::test::MoveOnly>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::MoveOnlyAdapter, 1, ::std::int64_t, ::facebook::thrift::test::AlsoMoveOnly>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::CountingAdapter<false, int>, 1, ::std::int64_t, ::facebook::thrift::test::CountingStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::CountingAdapter<true, int>, 2, ::std::int64_t, ::facebook::thrift::test::CountingStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::test::CountingAdapter<false, std::string>, 3, ::std::string, ::facebook::thrift::test::CountingStruct>();
  ::apache::thrift::adapt_detail::validateAdapter<::my::Adapter1, ::std::int64_t>();
  ::apache::thrift::adapt_detail::validateAdapter<::apache::thrift::test::TemplatedTestAdapter, bool>();
  ::apache::thrift::adapt_detail::validateAdapter<::apache::thrift::test::TemplatedTestAdapter, ::facebook::thrift::test::detail::DirectlyAdaptedStruct>();
}
}}}} // facebook::thrift::test
