/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/complex-union/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/visitation/visit_by_thrift_field_metadata.h>
#include "thrift/compiler/test/fixtures/complex-union/gen-cpp2/module_metadata.h"

namespace apache {
namespace thrift {
namespace detail {

template <>
struct VisitByFieldId<::cpp2::ComplexUnion> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).intValue_ref());
    case 5:
      return f(1, static_cast<T&&>(t).stringValue_ref());
    case 2:
      return f(2, static_cast<T&&>(t).intListValue_ref());
    case 3:
      return f(3, static_cast<T&&>(t).stringListValue_ref());
    case 9:
      return f(4, static_cast<T&&>(t).typedefValue_ref());
    case 14:
      return f(5, static_cast<T&&>(t).stringRef_ref());
    default:
      throwInvalidThriftId(fieldId, "::cpp2::ComplexUnion");
    }
  }
};

template <>
struct VisitByFieldId<::cpp2::ListUnion> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 2:
      return f(0, static_cast<T&&>(t).intListValue_ref());
    case 3:
      return f(1, static_cast<T&&>(t).stringListValue_ref());
    default:
      throwInvalidThriftId(fieldId, "::cpp2::ListUnion");
    }
  }
};

template <>
struct VisitByFieldId<::cpp2::DataUnion> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).binaryData_ref());
    case 2:
      return f(1, static_cast<T&&>(t).stringData_ref());
    default:
      throwInvalidThriftId(fieldId, "::cpp2::DataUnion");
    }
  }
};

template <>
struct VisitByFieldId<::cpp2::Val> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).strVal_ref());
    case 2:
      return f(1, static_cast<T&&>(t).intVal_ref());
    case 9:
      return f(2, static_cast<T&&>(t).typedefValue_ref());
    default:
      throwInvalidThriftId(fieldId, "::cpp2::Val");
    }
  }
};

template <>
struct VisitByFieldId<::cpp2::ValUnion> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).v1_ref());
    case 2:
      return f(1, static_cast<T&&>(t).v2_ref());
    default:
      throwInvalidThriftId(fieldId, "::cpp2::ValUnion");
    }
  }
};

template <>
struct VisitByFieldId<::cpp2::VirtualComplexUnion> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).thingOne_ref());
    case 2:
      return f(1, static_cast<T&&>(t).thingTwo_ref());
    default:
      throwInvalidThriftId(fieldId, "::cpp2::VirtualComplexUnion");
    }
  }
};

template <>
struct VisitByFieldId<::cpp2::NonCopyableStruct> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).num_ref());
    default:
      throwInvalidThriftId(fieldId, "::cpp2::NonCopyableStruct");
    }
  }
};

template <>
struct VisitByFieldId<::cpp2::NonCopyableUnion> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).s_ref());
    default:
      throwInvalidThriftId(fieldId, "::cpp2::NonCopyableUnion");
    }
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
