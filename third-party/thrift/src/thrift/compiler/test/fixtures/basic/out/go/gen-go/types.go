// Autogenerated by Thrift for thrift/compiler/test/fixtures/basic/src/module.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package module

import (
    "fmt"
    "reflect"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
    metadata "github.com/facebook/fbthrift/thrift/lib/thrift/metadata"
)

// (needed to ensure safety because of naive import list construction)
var _ = fmt.Printf
var _ = reflect.Ptr
var _ = thrift.VOID
var _ = metadata.GoUnusedProtection__

type MyEnumAlias = MyEnum

const (
    MyEnumAlias_MyValue1 MyEnumAlias = MyEnum_MyValue1
    MyEnumAlias_MyValue2 MyEnumAlias = MyEnum_MyValue2
)

// Enum value maps for MyEnum
var (
    MyEnumAliasToName  = MyEnumToName
    MyEnumAliasToValue = MyEnumToValue
)

// Deprecated: Use MyEnumAliasToValue instead (e.g. `x, ok := MyEnumAliasToValue["name"]`).
func MyEnumAliasFromString(s string) (MyEnumAlias, error) {
    return MyEnumFromString(s)
}

func NewMyEnumAlias() MyEnumAlias {
    return 0
}

func WriteMyEnumAlias(item MyEnumAlias, p thrift.Encoder) error {
    if err := p.WriteI32(int32(item)); err != nil {
        return err
    }
    return nil
}

func ReadMyEnumAlias(p thrift.Decoder) (MyEnumAlias, error) {
    var decodeResult MyEnumAlias
    decodeErr := func() error {
        enumResult, err := p.ReadI32()
        if err != nil {
            return err
        }
        result := MyEnum(enumResult)
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type MyDataItemAlias = MyDataItem

func NewMyDataItemAlias() *MyDataItemAlias {
    return NewMyDataItem()
}

func WriteMyDataItemAlias(item *MyDataItemAlias, p thrift.Encoder) error {
    if err := item.Write(p); err != nil {
        return err
    }
    return nil
}

func ReadMyDataItemAlias(p thrift.Decoder) (*MyDataItemAlias, error) {
    var decodeResult *MyDataItemAlias
    decodeErr := func() error {
        result := NewMyDataItem()
        err := result.Read(p)
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type MyEnum int32

const (
    MyEnum_MyValue1 MyEnum = 0
    MyEnum_MyValue2 MyEnum = 1
)

// Enum value maps for MyEnum
var (
    MyEnumToName = map[MyEnum]string {
        MyEnum_MyValue1: "MyValue1",
        MyEnum_MyValue2: "MyValue2",
    }

    MyEnumToValue = map[string]MyEnum {
        "MyValue1": MyEnum_MyValue1,
        "MyValue2": MyEnum_MyValue2,
    }
)

func (x MyEnum) String() string {
    if v, ok := MyEnumToName[x]; ok {
        return v
    }
    return "<UNSET>"
}

// Deprecated: Use MyEnumToValue instead (e.g. `x, ok := MyEnumToValue["name"]`).
func MyEnumFromString(s string) (MyEnum, error) {
    if v, ok := MyEnumToValue[s]; ok {
        return v, nil
    }
    return MyEnum(0), fmt.Errorf("not a valid MyEnum string")
}

type HackEnum int32

const (
    HackEnum_Value1 HackEnum = 0
    HackEnum_Value2 HackEnum = 1
)

// Enum value maps for HackEnum
var (
    HackEnumToName = map[HackEnum]string {
        HackEnum_Value1: "Value1",
        HackEnum_Value2: "Value2",
    }

    HackEnumToValue = map[string]HackEnum {
        "Value1": HackEnum_Value1,
        "Value2": HackEnum_Value2,
    }
)

func (x HackEnum) String() string {
    if v, ok := HackEnumToName[x]; ok {
        return v
    }
    return "<UNSET>"
}

// Deprecated: Use HackEnumToValue instead (e.g. `x, ok := HackEnumToValue["name"]`).
func HackEnumFromString(s string) (HackEnum, error) {
    if v, ok := HackEnumToValue[s]; ok {
        return v, nil
    }
    return HackEnum(0), fmt.Errorf("not a valid HackEnum string")
}

type MyStruct struct {
    MyIntField int64 `thrift:"MyIntField,1" json:"MyIntField" db:"MyIntField"`
    MyStringField string `thrift:"MyStringField,2" json:"MyStringField" db:"MyStringField"`
    MyDataField *MyDataItemAlias `thrift:"MyDataField,3" json:"MyDataField" db:"MyDataField"`
    MyEnum MyEnum `thrift:"myEnum,4" json:"myEnum" db:"myEnum"`
    Oneway bool `thrift:"oneway,5" json:"oneway" db:"oneway"`
    Readonly bool `thrift:"readonly,6" json:"readonly" db:"readonly"`
    Idempotent bool `thrift:"idempotent,7" json:"idempotent" db:"idempotent"`
    FloatSet []float32 `thrift:"floatSet,8" json:"floatSet" db:"floatSet"`
    NoHackCodegenField string `thrift:"no_hack_codegen_field,9" json:"no_hack_codegen_field" db:"no_hack_codegen_field"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyStruct)(nil)

func NewMyStruct() *MyStruct {
    return (&MyStruct{}).setDefaults()
}

func (x *MyStruct) GetMyIntField() int64 {
    return x.MyIntField
}

func (x *MyStruct) GetMyStringField() string {
    return x.MyStringField
}

func (x *MyStruct) GetMyDataField() *MyDataItemAlias {
    if !x.IsSetMyDataField() {
        return nil
    }
    return x.MyDataField
}

func (x *MyStruct) GetMyEnum() MyEnum {
    return x.MyEnum
}

func (x *MyStruct) GetOneway() bool {
    return x.Oneway
}

func (x *MyStruct) GetReadonly() bool {
    return x.Readonly
}

func (x *MyStruct) GetIdempotent() bool {
    return x.Idempotent
}

func (x *MyStruct) GetFloatSet() []float32 {
    if !x.IsSetFloatSet() {
        return make([]float32, 0)
    }
    return x.FloatSet
}

func (x *MyStruct) GetNoHackCodegenField() string {
    return x.NoHackCodegenField
}

func (x *MyStruct) SetMyIntFieldNonCompat(value int64) *MyStruct {
    x.MyIntField = value
    return x
}

func (x *MyStruct) SetMyIntField(value int64) *MyStruct {
    x.MyIntField = value
    return x
}

func (x *MyStruct) SetMyStringFieldNonCompat(value string) *MyStruct {
    x.MyStringField = value
    return x
}

func (x *MyStruct) SetMyStringField(value string) *MyStruct {
    x.MyStringField = value
    return x
}

func (x *MyStruct) SetMyDataFieldNonCompat(value *MyDataItemAlias) *MyStruct {
    x.MyDataField = value
    return x
}

func (x *MyStruct) SetMyDataField(value *MyDataItemAlias) *MyStruct {
    x.MyDataField = value
    return x
}

func (x *MyStruct) SetMyEnumNonCompat(value MyEnum) *MyStruct {
    x.MyEnum = value
    return x
}

func (x *MyStruct) SetMyEnum(value MyEnum) *MyStruct {
    x.MyEnum = value
    return x
}

func (x *MyStruct) SetOnewayNonCompat(value bool) *MyStruct {
    x.Oneway = value
    return x
}

func (x *MyStruct) SetOneway(value bool) *MyStruct {
    x.Oneway = value
    return x
}

func (x *MyStruct) SetReadonlyNonCompat(value bool) *MyStruct {
    x.Readonly = value
    return x
}

func (x *MyStruct) SetReadonly(value bool) *MyStruct {
    x.Readonly = value
    return x
}

func (x *MyStruct) SetIdempotentNonCompat(value bool) *MyStruct {
    x.Idempotent = value
    return x
}

func (x *MyStruct) SetIdempotent(value bool) *MyStruct {
    x.Idempotent = value
    return x
}

func (x *MyStruct) SetFloatSetNonCompat(value []float32) *MyStruct {
    x.FloatSet = value
    return x
}

func (x *MyStruct) SetFloatSet(value []float32) *MyStruct {
    x.FloatSet = value
    return x
}

func (x *MyStruct) SetNoHackCodegenFieldNonCompat(value string) *MyStruct {
    x.NoHackCodegenField = value
    return x
}

func (x *MyStruct) SetNoHackCodegenField(value string) *MyStruct {
    x.NoHackCodegenField = value
    return x
}

func (x *MyStruct) IsSetMyDataField() bool {
    return x != nil && x.MyDataField != nil
}

func (x *MyStruct) IsSetFloatSet() bool {
    return x != nil && x.FloatSet != nil
}

func (x *MyStruct) writeField1(p thrift.Encoder) error {  // MyIntField
    if err := p.WriteFieldBegin("MyIntField", thrift.I64, 1); err != nil {
        return thrift.PrependError("MyStruct write field begin error: ", err)
    }

    item := x.MyIntField
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyStruct write field end error: ", err)
    }
    return nil
}

func (x *MyStruct) writeField2(p thrift.Encoder) error {  // MyStringField
    if err := p.WriteFieldBegin("MyStringField", thrift.STRING, 2); err != nil {
        return thrift.PrependError("MyStruct write field begin error: ", err)
    }

    item := x.MyStringField
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyStruct write field end error: ", err)
    }
    return nil
}

func (x *MyStruct) writeField3(p thrift.Encoder) error {  // MyDataField
    if !x.IsSetMyDataField() {
        return nil
    }

    if err := p.WriteFieldBegin("MyDataField", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError("MyStruct write field begin error: ", err)
    }

    item := x.MyDataField
    err := WriteMyDataItemAlias(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyStruct write field end error: ", err)
    }
    return nil
}

func (x *MyStruct) writeField4(p thrift.Encoder) error {  // MyEnum
    if err := p.WriteFieldBegin("myEnum", thrift.I32, 4); err != nil {
        return thrift.PrependError("MyStruct write field begin error: ", err)
    }

    item := x.MyEnum
    if err := p.WriteI32(int32(item)); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyStruct write field end error: ", err)
    }
    return nil
}

func (x *MyStruct) writeField5(p thrift.Encoder) error {  // Oneway
    if err := p.WriteFieldBegin("oneway", thrift.BOOL, 5); err != nil {
        return thrift.PrependError("MyStruct write field begin error: ", err)
    }

    item := x.Oneway
    if err := p.WriteBool(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyStruct write field end error: ", err)
    }
    return nil
}

func (x *MyStruct) writeField6(p thrift.Encoder) error {  // Readonly
    if err := p.WriteFieldBegin("readonly", thrift.BOOL, 6); err != nil {
        return thrift.PrependError("MyStruct write field begin error: ", err)
    }

    item := x.Readonly
    if err := p.WriteBool(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyStruct write field end error: ", err)
    }
    return nil
}

func (x *MyStruct) writeField7(p thrift.Encoder) error {  // Idempotent
    if err := p.WriteFieldBegin("idempotent", thrift.BOOL, 7); err != nil {
        return thrift.PrependError("MyStruct write field begin error: ", err)
    }

    item := x.Idempotent
    if err := p.WriteBool(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyStruct write field end error: ", err)
    }
    return nil
}

func (x *MyStruct) writeField8(p thrift.Encoder) error {  // FloatSet
    if err := p.WriteFieldBegin("floatSet", thrift.SET, 8); err != nil {
        return thrift.PrependError("MyStruct write field begin error: ", err)
    }

    item := x.FloatSet
    if err := p.WriteSetBegin(thrift.FLOAT, len(item)); err != nil {
        return thrift.PrependError("error writing set begin: ", err)
    }
    for _, v := range item {
        {
            item := v
            if err := p.WriteFloat(item); err != nil {
                return err
            }
        }
    }
    if err := p.WriteSetEnd(); err != nil {
        return thrift.PrependError("error writing set end: ", err)
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyStruct write field end error: ", err)
    }
    return nil
}

func (x *MyStruct) writeField9(p thrift.Encoder) error {  // NoHackCodegenField
    if err := p.WriteFieldBegin("no_hack_codegen_field", thrift.STRING, 9); err != nil {
        return thrift.PrependError("MyStruct write field begin error: ", err)
    }

    item := x.NoHackCodegenField
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyStruct write field end error: ", err)
    }
    return nil
}

func (x *MyStruct) readField1(p thrift.Decoder) error {  // MyIntField
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.MyIntField = result
    return nil
}

func (x *MyStruct) readField2(p thrift.Decoder) error {  // MyStringField
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.MyStringField = result
    return nil
}

func (x *MyStruct) readField3(p thrift.Decoder) error {  // MyDataField
    result, err := ReadMyDataItemAlias(p)
    if err != nil {
        return err
    }

    x.MyDataField = result
    return nil
}

func (x *MyStruct) readField4(p thrift.Decoder) error {  // MyEnum
    enumResult, err := p.ReadI32()
    if err != nil {
        return err
    }
    result := MyEnum(enumResult)

    x.MyEnum = result
    return nil
}

func (x *MyStruct) readField5(p thrift.Decoder) error {  // Oneway
    result, err := p.ReadBool()
    if err != nil {
        return err
    }

    x.Oneway = result
    return nil
}

func (x *MyStruct) readField6(p thrift.Decoder) error {  // Readonly
    result, err := p.ReadBool()
    if err != nil {
        return err
    }

    x.Readonly = result
    return nil
}

func (x *MyStruct) readField7(p thrift.Decoder) error {  // Idempotent
    result, err := p.ReadBool()
    if err != nil {
        return err
    }

    x.Idempotent = result
    return nil
}

func (x *MyStruct) readField8(p thrift.Decoder) error {  // FloatSet
    _ /* elemType */, size, err := p.ReadSetBegin()
    if err != nil {
        return thrift.PrependError("error reading set begin: ", err)
    }
    
    setResult := make([]float32, 0, size)
    for i := 0; i < size; i++ {
        var elem float32
        {
            result, err := p.ReadFloat()
            if err != nil {
                return err
            }
            elem = result
        }
        setResult = append(setResult, elem)
    }
    
    if err := p.ReadSetEnd(); err != nil {
        return thrift.PrependError("error reading set end: ", err)
    }
    result := setResult

    x.FloatSet = result
    return nil
}

func (x *MyStruct) readField9(p thrift.Decoder) error {  // NoHackCodegenField
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.NoHackCodegenField = result
    return nil
}




func (x *MyStruct) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("MyStruct"); err != nil {
        return thrift.PrependError("MyStruct write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }
    if err := x.writeField3(p); err != nil {
        return err
    }
    if err := x.writeField4(p); err != nil {
        return err
    }
    if err := x.writeField5(p); err != nil {
        return err
    }
    if err := x.writeField6(p); err != nil {
        return err
    }
    if err := x.writeField7(p); err != nil {
        return err
    }
    if err := x.writeField8(p); err != nil {
        return err
    }
    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("MyStruct write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("MyStruct write struct end error: ", err)
    }
    return nil
}

func (x *MyStruct) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("MyStruct read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("MyStruct field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "MyIntField")):  // MyIntField
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "MyStringField")):  // MyStringField
            fieldReadErr = x.readField2(p)
        case ((id == 3 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "MyDataField")):  // MyDataField
            fieldReadErr = x.readField3(p)
        case ((id == 4 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "myEnum")):  // myEnum
            fieldReadErr = x.readField4(p)
        case ((id == 5 && wireType == thrift.BOOL) || (id == thrift.NO_FIELD_ID && fieldName == "oneway")):  // oneway
            fieldReadErr = x.readField5(p)
        case ((id == 6 && wireType == thrift.BOOL) || (id == thrift.NO_FIELD_ID && fieldName == "readonly")):  // readonly
            fieldReadErr = x.readField6(p)
        case ((id == 7 && wireType == thrift.BOOL) || (id == thrift.NO_FIELD_ID && fieldName == "idempotent")):  // idempotent
            fieldReadErr = x.readField7(p)
        case ((id == 8 && wireType == thrift.SET) || (id == thrift.NO_FIELD_ID && fieldName == "floatSet")):  // floatSet
            fieldReadErr = x.readField8(p)
        case ((id == 9 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "no_hack_codegen_field")):  // no_hack_codegen_field
            fieldReadErr = x.readField9(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("MyStruct read struct end error: ", err)
    }

    return nil
}

func (x *MyStruct) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *MyStruct) setDefaults() *MyStruct {
    return x.
        SetMyIntFieldNonCompat(0).
        SetMyStringFieldNonCompat("").
        SetMyDataFieldNonCompat(NewMyDataItemAlias()).
        SetMyEnumNonCompat(0).
        SetOnewayNonCompat(false).
        SetReadonlyNonCompat(false).
        SetIdempotentNonCompat(false).
        SetFloatSetNonCompat(make([]float32, 0)).
        SetNoHackCodegenFieldNonCompat("")
}

func (x *MyStruct) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_MyStruct
}

type Containers struct {
    I32List []int32 `thrift:"I32List,1" json:"I32List" db:"I32List"`
    StringSet []string `thrift:"StringSet,2" json:"StringSet" db:"StringSet"`
    StringToI64Map map[string]int64 `thrift:"StringToI64Map,3" json:"StringToI64Map" db:"StringToI64Map"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*Containers)(nil)

func NewContainers() *Containers {
    return (&Containers{}).setDefaults()
}

func (x *Containers) GetI32List() []int32 {
    if !x.IsSetI32List() {
        return make([]int32, 0)
    }
    return x.I32List
}

func (x *Containers) GetStringSet() []string {
    if !x.IsSetStringSet() {
        return make([]string, 0)
    }
    return x.StringSet
}

func (x *Containers) GetStringToI64Map() map[string]int64 {
    if !x.IsSetStringToI64Map() {
        return make(map[string]int64)
    }
    return x.StringToI64Map
}

func (x *Containers) SetI32ListNonCompat(value []int32) *Containers {
    x.I32List = value
    return x
}

func (x *Containers) SetI32List(value []int32) *Containers {
    x.I32List = value
    return x
}

func (x *Containers) SetStringSetNonCompat(value []string) *Containers {
    x.StringSet = value
    return x
}

func (x *Containers) SetStringSet(value []string) *Containers {
    x.StringSet = value
    return x
}

func (x *Containers) SetStringToI64MapNonCompat(value map[string]int64) *Containers {
    x.StringToI64Map = value
    return x
}

func (x *Containers) SetStringToI64Map(value map[string]int64) *Containers {
    x.StringToI64Map = value
    return x
}

func (x *Containers) IsSetI32List() bool {
    return x != nil && x.I32List != nil
}

func (x *Containers) IsSetStringSet() bool {
    return x != nil && x.StringSet != nil
}

func (x *Containers) IsSetStringToI64Map() bool {
    return x != nil && x.StringToI64Map != nil
}

func (x *Containers) writeField1(p thrift.Encoder) error {  // I32List
    if err := p.WriteFieldBegin("I32List", thrift.LIST, 1); err != nil {
        return thrift.PrependError("Containers write field begin error: ", err)
    }

    item := x.I32List
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
        return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range item {
        {
            item := v
            if err := p.WriteI32(item); err != nil {
                return err
            }
        }
    }
    if err := p.WriteListEnd(); err != nil {
        return thrift.PrependError("error writing list end: ", err)
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Containers write field end error: ", err)
    }
    return nil
}

func (x *Containers) writeField2(p thrift.Encoder) error {  // StringSet
    if err := p.WriteFieldBegin("StringSet", thrift.SET, 2); err != nil {
        return thrift.PrependError("Containers write field begin error: ", err)
    }

    item := x.StringSet
    if err := p.WriteSetBegin(thrift.STRING, len(item)); err != nil {
        return thrift.PrependError("error writing set begin: ", err)
    }
    for _, v := range item {
        {
            item := v
            if err := p.WriteString(item); err != nil {
                return err
            }
        }
    }
    if err := p.WriteSetEnd(); err != nil {
        return thrift.PrependError("error writing set end: ", err)
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Containers write field end error: ", err)
    }
    return nil
}

func (x *Containers) writeField3(p thrift.Encoder) error {  // StringToI64Map
    if err := p.WriteFieldBegin("StringToI64Map", thrift.MAP, 3); err != nil {
        return thrift.PrependError("Containers write field begin error: ", err)
    }

    item := x.StringToI64Map
    if err := p.WriteMapBegin(thrift.STRING, thrift.I64, len(item)); err != nil {
        return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range item {
        {
            item := k
            if err := p.WriteString(item); err != nil {
                return err
            }
        }
    
        {
            item := v
            if err := p.WriteI64(item); err != nil {
                return err
            }
        }
    }
    if err := p.WriteMapEnd(); err != nil {
        return thrift.PrependError("error writing map end: ", err)
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Containers write field end error: ", err)
    }
    return nil
}

func (x *Containers) readField1(p thrift.Decoder) error {  // I32List
    _ /* elemType */, size, err := p.ReadListBegin()
    if err != nil {
        return thrift.PrependError("error reading list begin: ", err)
    }
    
    listResult := make([]int32, 0, size)
    for i := 0; i < size; i++ {
        var elem int32
        {
            result, err := p.ReadI32()
            if err != nil {
                return err
            }
            elem = result
        }
        listResult = append(listResult, elem)
    }
    
    if err := p.ReadListEnd(); err != nil {
        return thrift.PrependError("error reading list end: ", err)
    }
    result := listResult

    x.I32List = result
    return nil
}

func (x *Containers) readField2(p thrift.Decoder) error {  // StringSet
    _ /* elemType */, size, err := p.ReadSetBegin()
    if err != nil {
        return thrift.PrependError("error reading set begin: ", err)
    }
    
    setResult := make([]string, 0, size)
    for i := 0; i < size; i++ {
        var elem string
        {
            result, err := p.ReadString()
            if err != nil {
                return err
            }
            elem = result
        }
        setResult = append(setResult, elem)
    }
    
    if err := p.ReadSetEnd(); err != nil {
        return thrift.PrependError("error reading set end: ", err)
    }
    result := setResult

    x.StringSet = result
    return nil
}

func (x *Containers) readField3(p thrift.Decoder) error {  // StringToI64Map
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
    if err != nil {
        return thrift.PrependError("error reading map begin: ", err)
    }
    
    mapResult := make(map[string]int64, size)
    for i := 0; i < size; i++ {
        var key string
        {
            result, err := p.ReadString()
            if err != nil {
                return err
            }
            key = result
        }
    
        var value int64
        {
            result, err := p.ReadI64()
            if err != nil {
                return err
            }
            value = result
        }
    
        mapResult[key] = value
    }
    
    if err := p.ReadMapEnd(); err != nil {
        return thrift.PrependError("error reading map end: ", err)
    }
    result := mapResult

    x.StringToI64Map = result
    return nil
}



func (x *Containers) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("Containers"); err != nil {
        return thrift.PrependError("Containers write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }
    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("Containers write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("Containers write struct end error: ", err)
    }
    return nil
}

func (x *Containers) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("Containers read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("Containers field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.LIST) || (id == thrift.NO_FIELD_ID && fieldName == "I32List")):  // I32List
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.SET) || (id == thrift.NO_FIELD_ID && fieldName == "StringSet")):  // StringSet
            fieldReadErr = x.readField2(p)
        case ((id == 3 && wireType == thrift.MAP) || (id == thrift.NO_FIELD_ID && fieldName == "StringToI64Map")):  // StringToI64Map
            fieldReadErr = x.readField3(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("Containers read struct end error: ", err)
    }

    return nil
}

func (x *Containers) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *Containers) setDefaults() *Containers {
    return x.
        SetI32ListNonCompat(make([]int32, 0)).
        SetStringSetNonCompat(make([]string, 0)).
        SetStringToI64MapNonCompat(make(map[string]int64))
}

func (x *Containers) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_Containers
}

type MyDataItem struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyDataItem)(nil)

func NewMyDataItem() *MyDataItem {
    return (&MyDataItem{}).setDefaults()
}



func (x *MyDataItem) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("MyDataItem"); err != nil {
        return thrift.PrependError("MyDataItem write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("MyDataItem write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("MyDataItem write struct end error: ", err)
    }
    return nil
}

func (x *MyDataItem) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("MyDataItem read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("MyDataItem field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("MyDataItem read struct end error: ", err)
    }

    return nil
}

func (x *MyDataItem) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *MyDataItem) setDefaults() *MyDataItem {
    return x
}

func (x *MyDataItem) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_MyDataItem
}

type MyUnion struct {
    MyEnum *MyEnumAlias `thrift:"myEnum,1" json:"myEnum,omitempty" db:"myEnum"`
    MyStruct *MyStruct `thrift:"myStruct,2" json:"myStruct,omitempty" db:"myStruct"`
    MyDataItem *MyDataItem `thrift:"myDataItem,3" json:"myDataItem,omitempty" db:"myDataItem"`
    FloatSet []float32 `thrift:"floatSet,4" json:"floatSet,omitempty" db:"floatSet"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyUnion)(nil)

func NewMyUnion() *MyUnion {
    return (&MyUnion{}).setDefaults()
}

func (x *MyUnion) GetMyEnum() MyEnumAlias {
    if !x.IsSetMyEnum() {
        return NewMyEnumAlias()
    }
    return *x.MyEnum
}

func (x *MyUnion) GetMyStruct() *MyStruct {
    if !x.IsSetMyStruct() {
        return nil
    }
    return x.MyStruct
}

func (x *MyUnion) GetMyDataItem() *MyDataItem {
    if !x.IsSetMyDataItem() {
        return nil
    }
    return x.MyDataItem
}

func (x *MyUnion) GetFloatSet() []float32 {
    if !x.IsSetFloatSet() {
        return make([]float32, 0)
    }
    return x.FloatSet
}

func (x *MyUnion) SetMyEnumNonCompat(value MyEnumAlias) *MyUnion {
    x.MyEnum = &value
    return x
}

func (x *MyUnion) SetMyEnum(value *MyEnumAlias) *MyUnion {
    x.MyEnum = value
    return x
}

func (x *MyUnion) SetMyStructNonCompat(value *MyStruct) *MyUnion {
    x.MyStruct = value
    return x
}

func (x *MyUnion) SetMyStruct(value *MyStruct) *MyUnion {
    x.MyStruct = value
    return x
}

func (x *MyUnion) SetMyDataItemNonCompat(value *MyDataItem) *MyUnion {
    x.MyDataItem = value
    return x
}

func (x *MyUnion) SetMyDataItem(value *MyDataItem) *MyUnion {
    x.MyDataItem = value
    return x
}

func (x *MyUnion) SetFloatSetNonCompat(value []float32) *MyUnion {
    x.FloatSet = value
    return x
}

func (x *MyUnion) SetFloatSet(value []float32) *MyUnion {
    x.FloatSet = value
    return x
}

func (x *MyUnion) IsSetMyEnum() bool {
    return x != nil && x.MyEnum != nil
}

func (x *MyUnion) IsSetMyStruct() bool {
    return x != nil && x.MyStruct != nil
}

func (x *MyUnion) IsSetMyDataItem() bool {
    return x != nil && x.MyDataItem != nil
}

func (x *MyUnion) IsSetFloatSet() bool {
    return x != nil && x.FloatSet != nil
}

func (x *MyUnion) writeField1(p thrift.Encoder) error {  // MyEnum
    if !x.IsSetMyEnum() {
        return nil
    }

    if err := p.WriteFieldBegin("myEnum", thrift.I32, 1); err != nil {
        return thrift.PrependError("MyUnion write field begin error: ", err)
    }

    item := *x.MyEnum
    err := WriteMyEnumAlias(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyUnion write field end error: ", err)
    }
    return nil
}

func (x *MyUnion) writeField2(p thrift.Encoder) error {  // MyStruct
    if !x.IsSetMyStruct() {
        return nil
    }

    if err := p.WriteFieldBegin("myStruct", thrift.STRUCT, 2); err != nil {
        return thrift.PrependError("MyUnion write field begin error: ", err)
    }

    item := x.MyStruct
    if err := item.Write(p); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyUnion write field end error: ", err)
    }
    return nil
}

func (x *MyUnion) writeField3(p thrift.Encoder) error {  // MyDataItem
    if !x.IsSetMyDataItem() {
        return nil
    }

    if err := p.WriteFieldBegin("myDataItem", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError("MyUnion write field begin error: ", err)
    }

    item := x.MyDataItem
    if err := item.Write(p); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyUnion write field end error: ", err)
    }
    return nil
}

func (x *MyUnion) writeField4(p thrift.Encoder) error {  // FloatSet
    if !x.IsSetFloatSet() {
        return nil
    }

    if err := p.WriteFieldBegin("floatSet", thrift.SET, 4); err != nil {
        return thrift.PrependError("MyUnion write field begin error: ", err)
    }

    item := x.FloatSet
    if err := p.WriteSetBegin(thrift.FLOAT, len(item)); err != nil {
        return thrift.PrependError("error writing set begin: ", err)
    }
    for _, v := range item {
        {
            item := v
            if err := p.WriteFloat(item); err != nil {
                return err
            }
        }
    }
    if err := p.WriteSetEnd(); err != nil {
        return thrift.PrependError("error writing set end: ", err)
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyUnion write field end error: ", err)
    }
    return nil
}

func (x *MyUnion) readField1(p thrift.Decoder) error {  // MyEnum
    result, err := ReadMyEnumAlias(p)
    if err != nil {
        return err
    }

    x.MyEnum = &result
    return nil
}

func (x *MyUnion) readField2(p thrift.Decoder) error {  // MyStruct
    result := NewMyStruct()
    err := result.Read(p)
    if err != nil {
        return err
    }

    x.MyStruct = result
    return nil
}

func (x *MyUnion) readField3(p thrift.Decoder) error {  // MyDataItem
    result := NewMyDataItem()
    err := result.Read(p)
    if err != nil {
        return err
    }

    x.MyDataItem = result
    return nil
}

func (x *MyUnion) readField4(p thrift.Decoder) error {  // FloatSet
    _ /* elemType */, size, err := p.ReadSetBegin()
    if err != nil {
        return thrift.PrependError("error reading set begin: ", err)
    }
    
    setResult := make([]float32, 0, size)
    for i := 0; i < size; i++ {
        var elem float32
        {
            result, err := p.ReadFloat()
            if err != nil {
                return err
            }
            elem = result
        }
        setResult = append(setResult, elem)
    }
    
    if err := p.ReadSetEnd(); err != nil {
        return thrift.PrependError("error reading set end: ", err)
    }
    result := setResult

    x.FloatSet = result
    return nil
}




func (x *MyUnion) countSetFields() int {
    count := int(0)
    if (x.IsSetMyEnum()) {
        count++
    }
    if (x.IsSetMyStruct()) {
        count++
    }
    if (x.IsSetMyDataItem()) {
        count++
    }
    if (x.IsSetFloatSet()) {
        count++
    }
    return count
}

func (x *MyUnion) CountSetFieldsMyUnion() int {
    return x.countSetFields()
}



func (x *MyUnion) Write(p thrift.Encoder) error {
    if countSet := x.countSetFields(); countSet > 1 {
        return fmt.Errorf("MyUnion write union: no more than one field must be set (%d set).", countSet)
    }
    if err := p.WriteStructBegin("MyUnion"); err != nil {
        return thrift.PrependError("MyUnion write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }
    if err := x.writeField3(p); err != nil {
        return err
    }
    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("MyUnion write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("MyUnion write struct end error: ", err)
    }
    return nil
}

func (x *MyUnion) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("MyUnion read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("MyUnion field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "myEnum")):  // myEnum
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "myStruct")):  // myStruct
            fieldReadErr = x.readField2(p)
        case ((id == 3 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "myDataItem")):  // myDataItem
            fieldReadErr = x.readField3(p)
        case ((id == 4 && wireType == thrift.SET) || (id == thrift.NO_FIELD_ID && fieldName == "floatSet")):  // floatSet
            fieldReadErr = x.readField4(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("MyUnion read struct end error: ", err)
    }

    return nil
}

func (x *MyUnion) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *MyUnion) setDefaults() *MyUnion {
    return x
}

func (x *MyUnion) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_MyUnion
}

type MyException struct {
    MyIntField int64 `thrift:"MyIntField,1" json:"MyIntField" db:"MyIntField"`
    MyStringField string `thrift:"MyStringField,2" json:"MyStringField" db:"MyStringField"`
    MyStruct *MyStruct `thrift:"myStruct,3" json:"myStruct" db:"myStruct"`
    MyUnion *MyUnion `thrift:"myUnion,4" json:"myUnion" db:"myUnion"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyException)(nil)

func NewMyException() *MyException {
    return (&MyException{}).setDefaults()
}

func (x *MyException) GetMyIntField() int64 {
    return x.MyIntField
}

func (x *MyException) GetMyStringField() string {
    return x.MyStringField
}

func (x *MyException) GetMyStruct() *MyStruct {
    if !x.IsSetMyStruct() {
        return nil
    }
    return x.MyStruct
}

func (x *MyException) GetMyUnion() *MyUnion {
    if !x.IsSetMyUnion() {
        return nil
    }
    return x.MyUnion
}

func (x *MyException) SetMyIntFieldNonCompat(value int64) *MyException {
    x.MyIntField = value
    return x
}

func (x *MyException) SetMyIntField(value int64) *MyException {
    x.MyIntField = value
    return x
}

func (x *MyException) SetMyStringFieldNonCompat(value string) *MyException {
    x.MyStringField = value
    return x
}

func (x *MyException) SetMyStringField(value string) *MyException {
    x.MyStringField = value
    return x
}

func (x *MyException) SetMyStructNonCompat(value *MyStruct) *MyException {
    x.MyStruct = value
    return x
}

func (x *MyException) SetMyStruct(value *MyStruct) *MyException {
    x.MyStruct = value
    return x
}

func (x *MyException) SetMyUnionNonCompat(value *MyUnion) *MyException {
    x.MyUnion = value
    return x
}

func (x *MyException) SetMyUnion(value *MyUnion) *MyException {
    x.MyUnion = value
    return x
}

func (x *MyException) IsSetMyStruct() bool {
    return x != nil && x.MyStruct != nil
}

func (x *MyException) IsSetMyUnion() bool {
    return x != nil && x.MyUnion != nil
}

func (x *MyException) writeField1(p thrift.Encoder) error {  // MyIntField
    if err := p.WriteFieldBegin("MyIntField", thrift.I64, 1); err != nil {
        return thrift.PrependError("MyException write field begin error: ", err)
    }

    item := x.MyIntField
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyException write field end error: ", err)
    }
    return nil
}

func (x *MyException) writeField2(p thrift.Encoder) error {  // MyStringField
    if err := p.WriteFieldBegin("MyStringField", thrift.STRING, 2); err != nil {
        return thrift.PrependError("MyException write field begin error: ", err)
    }

    item := x.MyStringField
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyException write field end error: ", err)
    }
    return nil
}

func (x *MyException) writeField3(p thrift.Encoder) error {  // MyStruct
    if !x.IsSetMyStruct() {
        return nil
    }

    if err := p.WriteFieldBegin("myStruct", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError("MyException write field begin error: ", err)
    }

    item := x.MyStruct
    if err := item.Write(p); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyException write field end error: ", err)
    }
    return nil
}

func (x *MyException) writeField4(p thrift.Encoder) error {  // MyUnion
    if !x.IsSetMyUnion() {
        return nil
    }

    if err := p.WriteFieldBegin("myUnion", thrift.STRUCT, 4); err != nil {
        return thrift.PrependError("MyException write field begin error: ", err)
    }

    item := x.MyUnion
    if err := item.Write(p); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyException write field end error: ", err)
    }
    return nil
}

func (x *MyException) readField1(p thrift.Decoder) error {  // MyIntField
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.MyIntField = result
    return nil
}

func (x *MyException) readField2(p thrift.Decoder) error {  // MyStringField
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.MyStringField = result
    return nil
}

func (x *MyException) readField3(p thrift.Decoder) error {  // MyStruct
    result := NewMyStruct()
    err := result.Read(p)
    if err != nil {
        return err
    }

    x.MyStruct = result
    return nil
}

func (x *MyException) readField4(p thrift.Decoder) error {  // MyUnion
    result := NewMyUnion()
    err := result.Read(p)
    if err != nil {
        return err
    }

    x.MyUnion = result
    return nil
}





func (x *MyException) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("MyException"); err != nil {
        return thrift.PrependError("MyException write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }
    if err := x.writeField3(p); err != nil {
        return err
    }
    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("MyException write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("MyException write struct end error: ", err)
    }
    return nil
}

func (x *MyException) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("MyException read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("MyException field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "MyIntField")):  // MyIntField
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "MyStringField")):  // MyStringField
            fieldReadErr = x.readField2(p)
        case ((id == 3 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "myStruct")):  // myStruct
            fieldReadErr = x.readField3(p)
        case ((id == 4 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "myUnion")):  // myUnion
            fieldReadErr = x.readField4(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("MyException read struct end error: ", err)
    }

    return nil
}

func (x *MyException) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *MyException) setDefaults() *MyException {
    return x.
        SetMyIntFieldNonCompat(0).
        SetMyStringFieldNonCompat("").
        SetMyStructNonCompat(NewMyStruct()).
        SetMyUnionNonCompat(NewMyUnion())
}

func (x *MyException) GetThriftStructMetadata() *metadata.ThriftException {
    return premadeStructMetadata_MyException
}

func (x *MyException) Error() string {
    return x.String()
}
type MyExceptionWithMessage struct {
    MyIntField int64 `thrift:"MyIntField,1" json:"MyIntField" db:"MyIntField"`
    MyStringField string `thrift:"MyStringField,2" json:"MyStringField" db:"MyStringField"`
    MyStruct *MyStruct `thrift:"myStruct,3" json:"myStruct" db:"myStruct"`
    MyUnion *MyUnion `thrift:"myUnion,4" json:"myUnion" db:"myUnion"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyExceptionWithMessage)(nil)

func NewMyExceptionWithMessage() *MyExceptionWithMessage {
    return (&MyExceptionWithMessage{}).setDefaults()
}

func (x *MyExceptionWithMessage) GetMyIntField() int64 {
    return x.MyIntField
}

func (x *MyExceptionWithMessage) GetMyStringField() string {
    return x.MyStringField
}

func (x *MyExceptionWithMessage) GetMyStruct() *MyStruct {
    if !x.IsSetMyStruct() {
        return nil
    }
    return x.MyStruct
}

func (x *MyExceptionWithMessage) GetMyUnion() *MyUnion {
    if !x.IsSetMyUnion() {
        return nil
    }
    return x.MyUnion
}

func (x *MyExceptionWithMessage) SetMyIntFieldNonCompat(value int64) *MyExceptionWithMessage {
    x.MyIntField = value
    return x
}

func (x *MyExceptionWithMessage) SetMyIntField(value int64) *MyExceptionWithMessage {
    x.MyIntField = value
    return x
}

func (x *MyExceptionWithMessage) SetMyStringFieldNonCompat(value string) *MyExceptionWithMessage {
    x.MyStringField = value
    return x
}

func (x *MyExceptionWithMessage) SetMyStringField(value string) *MyExceptionWithMessage {
    x.MyStringField = value
    return x
}

func (x *MyExceptionWithMessage) SetMyStructNonCompat(value *MyStruct) *MyExceptionWithMessage {
    x.MyStruct = value
    return x
}

func (x *MyExceptionWithMessage) SetMyStruct(value *MyStruct) *MyExceptionWithMessage {
    x.MyStruct = value
    return x
}

func (x *MyExceptionWithMessage) SetMyUnionNonCompat(value *MyUnion) *MyExceptionWithMessage {
    x.MyUnion = value
    return x
}

func (x *MyExceptionWithMessage) SetMyUnion(value *MyUnion) *MyExceptionWithMessage {
    x.MyUnion = value
    return x
}

func (x *MyExceptionWithMessage) IsSetMyStruct() bool {
    return x != nil && x.MyStruct != nil
}

func (x *MyExceptionWithMessage) IsSetMyUnion() bool {
    return x != nil && x.MyUnion != nil
}

func (x *MyExceptionWithMessage) writeField1(p thrift.Encoder) error {  // MyIntField
    if err := p.WriteFieldBegin("MyIntField", thrift.I64, 1); err != nil {
        return thrift.PrependError("MyExceptionWithMessage write field begin error: ", err)
    }

    item := x.MyIntField
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyExceptionWithMessage write field end error: ", err)
    }
    return nil
}

func (x *MyExceptionWithMessage) writeField2(p thrift.Encoder) error {  // MyStringField
    if err := p.WriteFieldBegin("MyStringField", thrift.STRING, 2); err != nil {
        return thrift.PrependError("MyExceptionWithMessage write field begin error: ", err)
    }

    item := x.MyStringField
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyExceptionWithMessage write field end error: ", err)
    }
    return nil
}

func (x *MyExceptionWithMessage) writeField3(p thrift.Encoder) error {  // MyStruct
    if !x.IsSetMyStruct() {
        return nil
    }

    if err := p.WriteFieldBegin("myStruct", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError("MyExceptionWithMessage write field begin error: ", err)
    }

    item := x.MyStruct
    if err := item.Write(p); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyExceptionWithMessage write field end error: ", err)
    }
    return nil
}

func (x *MyExceptionWithMessage) writeField4(p thrift.Encoder) error {  // MyUnion
    if !x.IsSetMyUnion() {
        return nil
    }

    if err := p.WriteFieldBegin("myUnion", thrift.STRUCT, 4); err != nil {
        return thrift.PrependError("MyExceptionWithMessage write field begin error: ", err)
    }

    item := x.MyUnion
    if err := item.Write(p); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyExceptionWithMessage write field end error: ", err)
    }
    return nil
}

func (x *MyExceptionWithMessage) readField1(p thrift.Decoder) error {  // MyIntField
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.MyIntField = result
    return nil
}

func (x *MyExceptionWithMessage) readField2(p thrift.Decoder) error {  // MyStringField
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.MyStringField = result
    return nil
}

func (x *MyExceptionWithMessage) readField3(p thrift.Decoder) error {  // MyStruct
    result := NewMyStruct()
    err := result.Read(p)
    if err != nil {
        return err
    }

    x.MyStruct = result
    return nil
}

func (x *MyExceptionWithMessage) readField4(p thrift.Decoder) error {  // MyUnion
    result := NewMyUnion()
    err := result.Read(p)
    if err != nil {
        return err
    }

    x.MyUnion = result
    return nil
}





func (x *MyExceptionWithMessage) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("MyExceptionWithMessage"); err != nil {
        return thrift.PrependError("MyExceptionWithMessage write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }
    if err := x.writeField3(p); err != nil {
        return err
    }
    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("MyExceptionWithMessage write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("MyExceptionWithMessage write struct end error: ", err)
    }
    return nil
}

func (x *MyExceptionWithMessage) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("MyExceptionWithMessage read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("MyExceptionWithMessage field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "MyIntField")):  // MyIntField
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "MyStringField")):  // MyStringField
            fieldReadErr = x.readField2(p)
        case ((id == 3 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "myStruct")):  // myStruct
            fieldReadErr = x.readField3(p)
        case ((id == 4 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "myUnion")):  // myUnion
            fieldReadErr = x.readField4(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("MyExceptionWithMessage read struct end error: ", err)
    }

    return nil
}

func (x *MyExceptionWithMessage) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *MyExceptionWithMessage) setDefaults() *MyExceptionWithMessage {
    return x.
        SetMyIntFieldNonCompat(0).
        SetMyStringFieldNonCompat("").
        SetMyStructNonCompat(NewMyStruct()).
        SetMyUnionNonCompat(NewMyUnion())
}

func (x *MyExceptionWithMessage) GetThriftStructMetadata() *metadata.ThriftException {
    return premadeStructMetadata_MyExceptionWithMessage
}

func (x *MyExceptionWithMessage) Error() string {
    return x.String()
}
type ReservedKeyword struct {
    ReservedField int32 `thrift:"reserved_field,1" json:"reserved_field" db:"reserved_field"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*ReservedKeyword)(nil)

func NewReservedKeyword() *ReservedKeyword {
    return (&ReservedKeyword{}).setDefaults()
}

func (x *ReservedKeyword) GetReservedField() int32 {
    return x.ReservedField
}

func (x *ReservedKeyword) SetReservedFieldNonCompat(value int32) *ReservedKeyword {
    x.ReservedField = value
    return x
}

func (x *ReservedKeyword) SetReservedField(value int32) *ReservedKeyword {
    x.ReservedField = value
    return x
}

func (x *ReservedKeyword) writeField1(p thrift.Encoder) error {  // ReservedField
    if err := p.WriteFieldBegin("reserved_field", thrift.I32, 1); err != nil {
        return thrift.PrependError("ReservedKeyword write field begin error: ", err)
    }

    item := x.ReservedField
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("ReservedKeyword write field end error: ", err)
    }
    return nil
}

func (x *ReservedKeyword) readField1(p thrift.Decoder) error {  // ReservedField
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.ReservedField = result
    return nil
}



func (x *ReservedKeyword) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("ReservedKeyword"); err != nil {
        return thrift.PrependError("ReservedKeyword write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("ReservedKeyword write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("ReservedKeyword write struct end error: ", err)
    }
    return nil
}

func (x *ReservedKeyword) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("ReservedKeyword read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("ReservedKeyword field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "reserved_field")):  // reserved_field
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("ReservedKeyword read struct end error: ", err)
    }

    return nil
}

func (x *ReservedKeyword) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *ReservedKeyword) setDefaults() *ReservedKeyword {
    return x.
        SetReservedFieldNonCompat(0)
}

func (x *ReservedKeyword) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_ReservedKeyword
}

type UnionToBeRenamed struct {
    ReservedField *int32 `thrift:"reserved_field,1" json:"reserved_field,omitempty" db:"reserved_field"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*UnionToBeRenamed)(nil)

func NewUnionToBeRenamed() *UnionToBeRenamed {
    return (&UnionToBeRenamed{}).setDefaults()
}

func (x *UnionToBeRenamed) GetReservedField() int32 {
    if !x.IsSetReservedField() {
        return 0
    }
    return *x.ReservedField
}

func (x *UnionToBeRenamed) SetReservedFieldNonCompat(value int32) *UnionToBeRenamed {
    x.ReservedField = &value
    return x
}

func (x *UnionToBeRenamed) SetReservedField(value *int32) *UnionToBeRenamed {
    x.ReservedField = value
    return x
}

func (x *UnionToBeRenamed) IsSetReservedField() bool {
    return x != nil && x.ReservedField != nil
}

func (x *UnionToBeRenamed) writeField1(p thrift.Encoder) error {  // ReservedField
    if !x.IsSetReservedField() {
        return nil
    }

    if err := p.WriteFieldBegin("reserved_field", thrift.I32, 1); err != nil {
        return thrift.PrependError("UnionToBeRenamed write field begin error: ", err)
    }

    item := *x.ReservedField
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("UnionToBeRenamed write field end error: ", err)
    }
    return nil
}

func (x *UnionToBeRenamed) readField1(p thrift.Decoder) error {  // ReservedField
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.ReservedField = &result
    return nil
}


func (x *UnionToBeRenamed) countSetFields() int {
    count := int(0)
    if (x.IsSetReservedField()) {
        count++
    }
    return count
}

func (x *UnionToBeRenamed) CountSetFieldsUnionToBeRenamed() int {
    return x.countSetFields()
}



func (x *UnionToBeRenamed) Write(p thrift.Encoder) error {
    if countSet := x.countSetFields(); countSet > 1 {
        return fmt.Errorf("UnionToBeRenamed write union: no more than one field must be set (%d set).", countSet)
    }
    if err := p.WriteStructBegin("UnionToBeRenamed"); err != nil {
        return thrift.PrependError("UnionToBeRenamed write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("UnionToBeRenamed write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("UnionToBeRenamed write struct end error: ", err)
    }
    return nil
}

func (x *UnionToBeRenamed) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("UnionToBeRenamed read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("UnionToBeRenamed field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "reserved_field")):  // reserved_field
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("UnionToBeRenamed read struct end error: ", err)
    }

    return nil
}

func (x *UnionToBeRenamed) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *UnionToBeRenamed) setDefaults() *UnionToBeRenamed {
    return x
}

func (x *UnionToBeRenamed) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_UnionToBeRenamed
}

type reqFooServiceSimpleRPC struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqFooServiceSimpleRPC)(nil)

// Deprecated: FooServiceSimpleRPCArgsDeprecated is deprecated, since it is supposed to be internal.
type FooServiceSimpleRPCArgsDeprecated = reqFooServiceSimpleRPC

func newReqFooServiceSimpleRPC() *reqFooServiceSimpleRPC {
    return (&reqFooServiceSimpleRPC{}).setDefaults()
}



func (x *reqFooServiceSimpleRPC) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqFooServiceSimpleRPC"); err != nil {
        return thrift.PrependError("reqFooServiceSimpleRPC write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqFooServiceSimpleRPC write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqFooServiceSimpleRPC write struct end error: ", err)
    }
    return nil
}

func (x *reqFooServiceSimpleRPC) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqFooServiceSimpleRPC read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqFooServiceSimpleRPC field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqFooServiceSimpleRPC read struct end error: ", err)
    }

    return nil
}

func (x *reqFooServiceSimpleRPC) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqFooServiceSimpleRPC) setDefaults() *reqFooServiceSimpleRPC {
    return x
}

type respFooServiceSimpleRPC struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*respFooServiceSimpleRPC)(nil)
var _ thrift.WritableResult = (*respFooServiceSimpleRPC)(nil)

// Deprecated: FooServiceSimpleRPCResultDeprecated is deprecated, since it is supposed to be internal.
type FooServiceSimpleRPCResultDeprecated = respFooServiceSimpleRPC

func newRespFooServiceSimpleRPC() *respFooServiceSimpleRPC {
    return (&respFooServiceSimpleRPC{}).setDefaults()
}



func (x *respFooServiceSimpleRPC) Exception() thrift.WritableException {
    return nil
}

func (x *respFooServiceSimpleRPC) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respFooServiceSimpleRPC"); err != nil {
        return thrift.PrependError("respFooServiceSimpleRPC write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respFooServiceSimpleRPC write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respFooServiceSimpleRPC write struct end error: ", err)
    }
    return nil
}

func (x *respFooServiceSimpleRPC) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respFooServiceSimpleRPC read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respFooServiceSimpleRPC field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respFooServiceSimpleRPC read struct end error: ", err)
    }

    return nil
}

func (x *respFooServiceSimpleRPC) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respFooServiceSimpleRPC) setDefaults() *respFooServiceSimpleRPC {
    return x
}

type reqFB303ServiceSimpleRPC struct {
    IntParameter int32 `thrift:"int_parameter,1" json:"int_parameter" db:"int_parameter"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqFB303ServiceSimpleRPC)(nil)

// Deprecated: FB303ServiceSimpleRPCArgsDeprecated is deprecated, since it is supposed to be internal.
type FB303ServiceSimpleRPCArgsDeprecated = reqFB303ServiceSimpleRPC

func newReqFB303ServiceSimpleRPC() *reqFB303ServiceSimpleRPC {
    return (&reqFB303ServiceSimpleRPC{}).setDefaults()
}

func (x *reqFB303ServiceSimpleRPC) GetIntParameter() int32 {
    return x.IntParameter
}

func (x *reqFB303ServiceSimpleRPC) SetIntParameterNonCompat(value int32) *reqFB303ServiceSimpleRPC {
    x.IntParameter = value
    return x
}

func (x *reqFB303ServiceSimpleRPC) SetIntParameter(value int32) *reqFB303ServiceSimpleRPC {
    x.IntParameter = value
    return x
}

func (x *reqFB303ServiceSimpleRPC) writeField1(p thrift.Encoder) error {  // IntParameter
    if err := p.WriteFieldBegin("int_parameter", thrift.I32, 1); err != nil {
        return thrift.PrependError("reqFB303ServiceSimpleRPC write field begin error: ", err)
    }

    item := x.IntParameter
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqFB303ServiceSimpleRPC write field end error: ", err)
    }
    return nil
}

func (x *reqFB303ServiceSimpleRPC) readField1(p thrift.Decoder) error {  // IntParameter
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.IntParameter = result
    return nil
}



func (x *reqFB303ServiceSimpleRPC) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqFB303ServiceSimpleRPC"); err != nil {
        return thrift.PrependError("reqFB303ServiceSimpleRPC write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqFB303ServiceSimpleRPC write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqFB303ServiceSimpleRPC write struct end error: ", err)
    }
    return nil
}

func (x *reqFB303ServiceSimpleRPC) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqFB303ServiceSimpleRPC read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqFB303ServiceSimpleRPC field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "int_parameter")):  // int_parameter
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqFB303ServiceSimpleRPC read struct end error: ", err)
    }

    return nil
}

func (x *reqFB303ServiceSimpleRPC) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqFB303ServiceSimpleRPC) setDefaults() *reqFB303ServiceSimpleRPC {
    return x.
        SetIntParameterNonCompat(0)
}

type respFB303ServiceSimpleRPC struct {
    Success *ReservedKeyword `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respFB303ServiceSimpleRPC)(nil)
var _ thrift.WritableResult = (*respFB303ServiceSimpleRPC)(nil)

// Deprecated: FB303ServiceSimpleRPCResultDeprecated is deprecated, since it is supposed to be internal.
type FB303ServiceSimpleRPCResultDeprecated = respFB303ServiceSimpleRPC

func newRespFB303ServiceSimpleRPC() *respFB303ServiceSimpleRPC {
    return (&respFB303ServiceSimpleRPC{}).setDefaults()
}

func (x *respFB303ServiceSimpleRPC) GetSuccess() *ReservedKeyword {
    if !x.IsSetSuccess() {
        return nil
    }
    return x.Success
}

func (x *respFB303ServiceSimpleRPC) SetSuccessNonCompat(value *ReservedKeyword) *respFB303ServiceSimpleRPC {
    x.Success = value
    return x
}

func (x *respFB303ServiceSimpleRPC) SetSuccess(value *ReservedKeyword) *respFB303ServiceSimpleRPC {
    x.Success = value
    return x
}

func (x *respFB303ServiceSimpleRPC) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respFB303ServiceSimpleRPC) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
        return thrift.PrependError("respFB303ServiceSimpleRPC write field begin error: ", err)
    }

    item := x.Success
    if err := item.Write(p); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respFB303ServiceSimpleRPC write field end error: ", err)
    }
    return nil
}

func (x *respFB303ServiceSimpleRPC) readField0(p thrift.Decoder) error {  // Success
    result := NewReservedKeyword()
    err := result.Read(p)
    if err != nil {
        return err
    }

    x.Success = result
    return nil
}




func (x *respFB303ServiceSimpleRPC) Exception() thrift.WritableException {
    return nil
}

func (x *respFB303ServiceSimpleRPC) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respFB303ServiceSimpleRPC"); err != nil {
        return thrift.PrependError("respFB303ServiceSimpleRPC write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respFB303ServiceSimpleRPC write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respFB303ServiceSimpleRPC write struct end error: ", err)
    }
    return nil
}

func (x *respFB303ServiceSimpleRPC) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respFB303ServiceSimpleRPC read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respFB303ServiceSimpleRPC field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respFB303ServiceSimpleRPC read struct end error: ", err)
    }

    return nil
}

func (x *respFB303ServiceSimpleRPC) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respFB303ServiceSimpleRPC) setDefaults() *respFB303ServiceSimpleRPC {
    return x
}

type reqMyServicePing struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqMyServicePing)(nil)

// Deprecated: MyServicePingArgsDeprecated is deprecated, since it is supposed to be internal.
type MyServicePingArgsDeprecated = reqMyServicePing

func newReqMyServicePing() *reqMyServicePing {
    return (&reqMyServicePing{}).setDefaults()
}



func (x *reqMyServicePing) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqMyServicePing"); err != nil {
        return thrift.PrependError("reqMyServicePing write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqMyServicePing write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqMyServicePing write struct end error: ", err)
    }
    return nil
}

func (x *reqMyServicePing) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqMyServicePing read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqMyServicePing field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqMyServicePing read struct end error: ", err)
    }

    return nil
}

func (x *reqMyServicePing) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqMyServicePing) setDefaults() *reqMyServicePing {
    return x
}

type respMyServicePing struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*respMyServicePing)(nil)
var _ thrift.WritableResult = (*respMyServicePing)(nil)

// Deprecated: MyServicePingResultDeprecated is deprecated, since it is supposed to be internal.
type MyServicePingResultDeprecated = respMyServicePing

func newRespMyServicePing() *respMyServicePing {
    return (&respMyServicePing{}).setDefaults()
}



func (x *respMyServicePing) Exception() thrift.WritableException {
    return nil
}

func (x *respMyServicePing) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respMyServicePing"); err != nil {
        return thrift.PrependError("respMyServicePing write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respMyServicePing write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respMyServicePing write struct end error: ", err)
    }
    return nil
}

func (x *respMyServicePing) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respMyServicePing read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respMyServicePing field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respMyServicePing read struct end error: ", err)
    }

    return nil
}

func (x *respMyServicePing) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respMyServicePing) setDefaults() *respMyServicePing {
    return x
}

type reqMyServiceGetRandomData struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqMyServiceGetRandomData)(nil)

// Deprecated: MyServiceGetRandomDataArgsDeprecated is deprecated, since it is supposed to be internal.
type MyServiceGetRandomDataArgsDeprecated = reqMyServiceGetRandomData

func newReqMyServiceGetRandomData() *reqMyServiceGetRandomData {
    return (&reqMyServiceGetRandomData{}).setDefaults()
}



func (x *reqMyServiceGetRandomData) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqMyServiceGetRandomData"); err != nil {
        return thrift.PrependError("reqMyServiceGetRandomData write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqMyServiceGetRandomData write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqMyServiceGetRandomData write struct end error: ", err)
    }
    return nil
}

func (x *reqMyServiceGetRandomData) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqMyServiceGetRandomData read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqMyServiceGetRandomData field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqMyServiceGetRandomData read struct end error: ", err)
    }

    return nil
}

func (x *reqMyServiceGetRandomData) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqMyServiceGetRandomData) setDefaults() *reqMyServiceGetRandomData {
    return x
}

type respMyServiceGetRandomData struct {
    Success *string `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respMyServiceGetRandomData)(nil)
var _ thrift.WritableResult = (*respMyServiceGetRandomData)(nil)

// Deprecated: MyServiceGetRandomDataResultDeprecated is deprecated, since it is supposed to be internal.
type MyServiceGetRandomDataResultDeprecated = respMyServiceGetRandomData

func newRespMyServiceGetRandomData() *respMyServiceGetRandomData {
    return (&respMyServiceGetRandomData{}).setDefaults()
}

func (x *respMyServiceGetRandomData) GetSuccess() string {
    if !x.IsSetSuccess() {
        return ""
    }
    return *x.Success
}

func (x *respMyServiceGetRandomData) SetSuccessNonCompat(value string) *respMyServiceGetRandomData {
    x.Success = &value
    return x
}

func (x *respMyServiceGetRandomData) SetSuccess(value *string) *respMyServiceGetRandomData {
    x.Success = value
    return x
}

func (x *respMyServiceGetRandomData) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respMyServiceGetRandomData) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
        return thrift.PrependError("respMyServiceGetRandomData write field begin error: ", err)
    }

    item := *x.Success
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respMyServiceGetRandomData write field end error: ", err)
    }
    return nil
}

func (x *respMyServiceGetRandomData) readField0(p thrift.Decoder) error {  // Success
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.Success = &result
    return nil
}




func (x *respMyServiceGetRandomData) Exception() thrift.WritableException {
    return nil
}

func (x *respMyServiceGetRandomData) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respMyServiceGetRandomData"); err != nil {
        return thrift.PrependError("respMyServiceGetRandomData write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respMyServiceGetRandomData write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respMyServiceGetRandomData write struct end error: ", err)
    }
    return nil
}

func (x *respMyServiceGetRandomData) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respMyServiceGetRandomData read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respMyServiceGetRandomData field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respMyServiceGetRandomData read struct end error: ", err)
    }

    return nil
}

func (x *respMyServiceGetRandomData) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respMyServiceGetRandomData) setDefaults() *respMyServiceGetRandomData {
    return x
}

type reqMyServiceSink struct {
    Sink int64 `thrift:"sink,1" json:"sink" db:"sink"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqMyServiceSink)(nil)

// Deprecated: MyServiceSinkArgsDeprecated is deprecated, since it is supposed to be internal.
type MyServiceSinkArgsDeprecated = reqMyServiceSink

func newReqMyServiceSink() *reqMyServiceSink {
    return (&reqMyServiceSink{}).setDefaults()
}

func (x *reqMyServiceSink) GetSink() int64 {
    return x.Sink
}

func (x *reqMyServiceSink) SetSinkNonCompat(value int64) *reqMyServiceSink {
    x.Sink = value
    return x
}

func (x *reqMyServiceSink) SetSink(value int64) *reqMyServiceSink {
    x.Sink = value
    return x
}

func (x *reqMyServiceSink) writeField1(p thrift.Encoder) error {  // Sink
    if err := p.WriteFieldBegin("sink", thrift.I64, 1); err != nil {
        return thrift.PrependError("reqMyServiceSink write field begin error: ", err)
    }

    item := x.Sink
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqMyServiceSink write field end error: ", err)
    }
    return nil
}

func (x *reqMyServiceSink) readField1(p thrift.Decoder) error {  // Sink
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Sink = result
    return nil
}



func (x *reqMyServiceSink) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqMyServiceSink"); err != nil {
        return thrift.PrependError("reqMyServiceSink write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqMyServiceSink write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqMyServiceSink write struct end error: ", err)
    }
    return nil
}

func (x *reqMyServiceSink) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqMyServiceSink read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqMyServiceSink field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "sink")):  // sink
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqMyServiceSink read struct end error: ", err)
    }

    return nil
}

func (x *reqMyServiceSink) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqMyServiceSink) setDefaults() *reqMyServiceSink {
    return x.
        SetSinkNonCompat(0)
}

type respMyServiceSink struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*respMyServiceSink)(nil)
var _ thrift.WritableResult = (*respMyServiceSink)(nil)

// Deprecated: MyServiceSinkResultDeprecated is deprecated, since it is supposed to be internal.
type MyServiceSinkResultDeprecated = respMyServiceSink

func newRespMyServiceSink() *respMyServiceSink {
    return (&respMyServiceSink{}).setDefaults()
}



func (x *respMyServiceSink) Exception() thrift.WritableException {
    return nil
}

func (x *respMyServiceSink) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respMyServiceSink"); err != nil {
        return thrift.PrependError("respMyServiceSink write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respMyServiceSink write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respMyServiceSink write struct end error: ", err)
    }
    return nil
}

func (x *respMyServiceSink) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respMyServiceSink read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respMyServiceSink field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respMyServiceSink read struct end error: ", err)
    }

    return nil
}

func (x *respMyServiceSink) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respMyServiceSink) setDefaults() *respMyServiceSink {
    return x
}

type reqMyServicePutDataById struct {
    Id int64 `thrift:"id,1" json:"id" db:"id"`
    Data string `thrift:"data,2" json:"data" db:"data"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqMyServicePutDataById)(nil)

// Deprecated: MyServicePutDataByIdArgsDeprecated is deprecated, since it is supposed to be internal.
type MyServicePutDataByIdArgsDeprecated = reqMyServicePutDataById

func newReqMyServicePutDataById() *reqMyServicePutDataById {
    return (&reqMyServicePutDataById{}).setDefaults()
}

func (x *reqMyServicePutDataById) GetId() int64 {
    return x.Id
}

func (x *reqMyServicePutDataById) GetData() string {
    return x.Data
}

func (x *reqMyServicePutDataById) SetIdNonCompat(value int64) *reqMyServicePutDataById {
    x.Id = value
    return x
}

func (x *reqMyServicePutDataById) SetId(value int64) *reqMyServicePutDataById {
    x.Id = value
    return x
}

func (x *reqMyServicePutDataById) SetDataNonCompat(value string) *reqMyServicePutDataById {
    x.Data = value
    return x
}

func (x *reqMyServicePutDataById) SetData(value string) *reqMyServicePutDataById {
    x.Data = value
    return x
}

func (x *reqMyServicePutDataById) writeField1(p thrift.Encoder) error {  // Id
    if err := p.WriteFieldBegin("id", thrift.I64, 1); err != nil {
        return thrift.PrependError("reqMyServicePutDataById write field begin error: ", err)
    }

    item := x.Id
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqMyServicePutDataById write field end error: ", err)
    }
    return nil
}

func (x *reqMyServicePutDataById) writeField2(p thrift.Encoder) error {  // Data
    if err := p.WriteFieldBegin("data", thrift.STRING, 2); err != nil {
        return thrift.PrependError("reqMyServicePutDataById write field begin error: ", err)
    }

    item := x.Data
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqMyServicePutDataById write field end error: ", err)
    }
    return nil
}

func (x *reqMyServicePutDataById) readField1(p thrift.Decoder) error {  // Id
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Id = result
    return nil
}

func (x *reqMyServicePutDataById) readField2(p thrift.Decoder) error {  // Data
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.Data = result
    return nil
}



func (x *reqMyServicePutDataById) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqMyServicePutDataById"); err != nil {
        return thrift.PrependError("reqMyServicePutDataById write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqMyServicePutDataById write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqMyServicePutDataById write struct end error: ", err)
    }
    return nil
}

func (x *reqMyServicePutDataById) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqMyServicePutDataById read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqMyServicePutDataById field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "id")):  // id
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "data")):  // data
            fieldReadErr = x.readField2(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqMyServicePutDataById read struct end error: ", err)
    }

    return nil
}

func (x *reqMyServicePutDataById) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqMyServicePutDataById) setDefaults() *reqMyServicePutDataById {
    return x.
        SetIdNonCompat(0).
        SetDataNonCompat("")
}

type respMyServicePutDataById struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*respMyServicePutDataById)(nil)
var _ thrift.WritableResult = (*respMyServicePutDataById)(nil)

// Deprecated: MyServicePutDataByIdResultDeprecated is deprecated, since it is supposed to be internal.
type MyServicePutDataByIdResultDeprecated = respMyServicePutDataById

func newRespMyServicePutDataById() *respMyServicePutDataById {
    return (&respMyServicePutDataById{}).setDefaults()
}



func (x *respMyServicePutDataById) Exception() thrift.WritableException {
    return nil
}

func (x *respMyServicePutDataById) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respMyServicePutDataById"); err != nil {
        return thrift.PrependError("respMyServicePutDataById write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respMyServicePutDataById write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respMyServicePutDataById write struct end error: ", err)
    }
    return nil
}

func (x *respMyServicePutDataById) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respMyServicePutDataById read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respMyServicePutDataById field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respMyServicePutDataById read struct end error: ", err)
    }

    return nil
}

func (x *respMyServicePutDataById) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respMyServicePutDataById) setDefaults() *respMyServicePutDataById {
    return x
}

type reqMyServiceHasDataById struct {
    Id int64 `thrift:"id,1" json:"id" db:"id"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqMyServiceHasDataById)(nil)

// Deprecated: MyServiceHasDataByIdArgsDeprecated is deprecated, since it is supposed to be internal.
type MyServiceHasDataByIdArgsDeprecated = reqMyServiceHasDataById

func newReqMyServiceHasDataById() *reqMyServiceHasDataById {
    return (&reqMyServiceHasDataById{}).setDefaults()
}

func (x *reqMyServiceHasDataById) GetId() int64 {
    return x.Id
}

func (x *reqMyServiceHasDataById) SetIdNonCompat(value int64) *reqMyServiceHasDataById {
    x.Id = value
    return x
}

func (x *reqMyServiceHasDataById) SetId(value int64) *reqMyServiceHasDataById {
    x.Id = value
    return x
}

func (x *reqMyServiceHasDataById) writeField1(p thrift.Encoder) error {  // Id
    if err := p.WriteFieldBegin("id", thrift.I64, 1); err != nil {
        return thrift.PrependError("reqMyServiceHasDataById write field begin error: ", err)
    }

    item := x.Id
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqMyServiceHasDataById write field end error: ", err)
    }
    return nil
}

func (x *reqMyServiceHasDataById) readField1(p thrift.Decoder) error {  // Id
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Id = result
    return nil
}



func (x *reqMyServiceHasDataById) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqMyServiceHasDataById"); err != nil {
        return thrift.PrependError("reqMyServiceHasDataById write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqMyServiceHasDataById write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqMyServiceHasDataById write struct end error: ", err)
    }
    return nil
}

func (x *reqMyServiceHasDataById) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqMyServiceHasDataById read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqMyServiceHasDataById field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "id")):  // id
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqMyServiceHasDataById read struct end error: ", err)
    }

    return nil
}

func (x *reqMyServiceHasDataById) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqMyServiceHasDataById) setDefaults() *reqMyServiceHasDataById {
    return x.
        SetIdNonCompat(0)
}

type respMyServiceHasDataById struct {
    Success *bool `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respMyServiceHasDataById)(nil)
var _ thrift.WritableResult = (*respMyServiceHasDataById)(nil)

// Deprecated: MyServiceHasDataByIdResultDeprecated is deprecated, since it is supposed to be internal.
type MyServiceHasDataByIdResultDeprecated = respMyServiceHasDataById

func newRespMyServiceHasDataById() *respMyServiceHasDataById {
    return (&respMyServiceHasDataById{}).setDefaults()
}

func (x *respMyServiceHasDataById) GetSuccess() bool {
    if !x.IsSetSuccess() {
        return false
    }
    return *x.Success
}

func (x *respMyServiceHasDataById) SetSuccessNonCompat(value bool) *respMyServiceHasDataById {
    x.Success = &value
    return x
}

func (x *respMyServiceHasDataById) SetSuccess(value *bool) *respMyServiceHasDataById {
    x.Success = value
    return x
}

func (x *respMyServiceHasDataById) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respMyServiceHasDataById) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
        return thrift.PrependError("respMyServiceHasDataById write field begin error: ", err)
    }

    item := *x.Success
    if err := p.WriteBool(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respMyServiceHasDataById write field end error: ", err)
    }
    return nil
}

func (x *respMyServiceHasDataById) readField0(p thrift.Decoder) error {  // Success
    result, err := p.ReadBool()
    if err != nil {
        return err
    }

    x.Success = &result
    return nil
}




func (x *respMyServiceHasDataById) Exception() thrift.WritableException {
    return nil
}

func (x *respMyServiceHasDataById) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respMyServiceHasDataById"); err != nil {
        return thrift.PrependError("respMyServiceHasDataById write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respMyServiceHasDataById write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respMyServiceHasDataById write struct end error: ", err)
    }
    return nil
}

func (x *respMyServiceHasDataById) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respMyServiceHasDataById read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respMyServiceHasDataById field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.BOOL) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respMyServiceHasDataById read struct end error: ", err)
    }

    return nil
}

func (x *respMyServiceHasDataById) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respMyServiceHasDataById) setDefaults() *respMyServiceHasDataById {
    return x
}

type reqMyServiceGetDataById struct {
    Id int64 `thrift:"id,1" json:"id" db:"id"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqMyServiceGetDataById)(nil)

// Deprecated: MyServiceGetDataByIdArgsDeprecated is deprecated, since it is supposed to be internal.
type MyServiceGetDataByIdArgsDeprecated = reqMyServiceGetDataById

func newReqMyServiceGetDataById() *reqMyServiceGetDataById {
    return (&reqMyServiceGetDataById{}).setDefaults()
}

func (x *reqMyServiceGetDataById) GetId() int64 {
    return x.Id
}

func (x *reqMyServiceGetDataById) SetIdNonCompat(value int64) *reqMyServiceGetDataById {
    x.Id = value
    return x
}

func (x *reqMyServiceGetDataById) SetId(value int64) *reqMyServiceGetDataById {
    x.Id = value
    return x
}

func (x *reqMyServiceGetDataById) writeField1(p thrift.Encoder) error {  // Id
    if err := p.WriteFieldBegin("id", thrift.I64, 1); err != nil {
        return thrift.PrependError("reqMyServiceGetDataById write field begin error: ", err)
    }

    item := x.Id
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqMyServiceGetDataById write field end error: ", err)
    }
    return nil
}

func (x *reqMyServiceGetDataById) readField1(p thrift.Decoder) error {  // Id
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Id = result
    return nil
}



func (x *reqMyServiceGetDataById) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqMyServiceGetDataById"); err != nil {
        return thrift.PrependError("reqMyServiceGetDataById write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqMyServiceGetDataById write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqMyServiceGetDataById write struct end error: ", err)
    }
    return nil
}

func (x *reqMyServiceGetDataById) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqMyServiceGetDataById read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqMyServiceGetDataById field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "id")):  // id
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqMyServiceGetDataById read struct end error: ", err)
    }

    return nil
}

func (x *reqMyServiceGetDataById) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqMyServiceGetDataById) setDefaults() *reqMyServiceGetDataById {
    return x.
        SetIdNonCompat(0)
}

type respMyServiceGetDataById struct {
    Success *string `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respMyServiceGetDataById)(nil)
var _ thrift.WritableResult = (*respMyServiceGetDataById)(nil)

// Deprecated: MyServiceGetDataByIdResultDeprecated is deprecated, since it is supposed to be internal.
type MyServiceGetDataByIdResultDeprecated = respMyServiceGetDataById

func newRespMyServiceGetDataById() *respMyServiceGetDataById {
    return (&respMyServiceGetDataById{}).setDefaults()
}

func (x *respMyServiceGetDataById) GetSuccess() string {
    if !x.IsSetSuccess() {
        return ""
    }
    return *x.Success
}

func (x *respMyServiceGetDataById) SetSuccessNonCompat(value string) *respMyServiceGetDataById {
    x.Success = &value
    return x
}

func (x *respMyServiceGetDataById) SetSuccess(value *string) *respMyServiceGetDataById {
    x.Success = value
    return x
}

func (x *respMyServiceGetDataById) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respMyServiceGetDataById) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
        return thrift.PrependError("respMyServiceGetDataById write field begin error: ", err)
    }

    item := *x.Success
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respMyServiceGetDataById write field end error: ", err)
    }
    return nil
}

func (x *respMyServiceGetDataById) readField0(p thrift.Decoder) error {  // Success
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.Success = &result
    return nil
}




func (x *respMyServiceGetDataById) Exception() thrift.WritableException {
    return nil
}

func (x *respMyServiceGetDataById) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respMyServiceGetDataById"); err != nil {
        return thrift.PrependError("respMyServiceGetDataById write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respMyServiceGetDataById write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respMyServiceGetDataById write struct end error: ", err)
    }
    return nil
}

func (x *respMyServiceGetDataById) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respMyServiceGetDataById read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respMyServiceGetDataById field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respMyServiceGetDataById read struct end error: ", err)
    }

    return nil
}

func (x *respMyServiceGetDataById) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respMyServiceGetDataById) setDefaults() *respMyServiceGetDataById {
    return x
}

type reqMyServiceDeleteDataById struct {
    Id int64 `thrift:"id,1" json:"id" db:"id"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqMyServiceDeleteDataById)(nil)

// Deprecated: MyServiceDeleteDataByIdArgsDeprecated is deprecated, since it is supposed to be internal.
type MyServiceDeleteDataByIdArgsDeprecated = reqMyServiceDeleteDataById

func newReqMyServiceDeleteDataById() *reqMyServiceDeleteDataById {
    return (&reqMyServiceDeleteDataById{}).setDefaults()
}

func (x *reqMyServiceDeleteDataById) GetId() int64 {
    return x.Id
}

func (x *reqMyServiceDeleteDataById) SetIdNonCompat(value int64) *reqMyServiceDeleteDataById {
    x.Id = value
    return x
}

func (x *reqMyServiceDeleteDataById) SetId(value int64) *reqMyServiceDeleteDataById {
    x.Id = value
    return x
}

func (x *reqMyServiceDeleteDataById) writeField1(p thrift.Encoder) error {  // Id
    if err := p.WriteFieldBegin("id", thrift.I64, 1); err != nil {
        return thrift.PrependError("reqMyServiceDeleteDataById write field begin error: ", err)
    }

    item := x.Id
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqMyServiceDeleteDataById write field end error: ", err)
    }
    return nil
}

func (x *reqMyServiceDeleteDataById) readField1(p thrift.Decoder) error {  // Id
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Id = result
    return nil
}



func (x *reqMyServiceDeleteDataById) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqMyServiceDeleteDataById"); err != nil {
        return thrift.PrependError("reqMyServiceDeleteDataById write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqMyServiceDeleteDataById write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqMyServiceDeleteDataById write struct end error: ", err)
    }
    return nil
}

func (x *reqMyServiceDeleteDataById) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqMyServiceDeleteDataById read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqMyServiceDeleteDataById field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "id")):  // id
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqMyServiceDeleteDataById read struct end error: ", err)
    }

    return nil
}

func (x *reqMyServiceDeleteDataById) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqMyServiceDeleteDataById) setDefaults() *reqMyServiceDeleteDataById {
    return x.
        SetIdNonCompat(0)
}

type respMyServiceDeleteDataById struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*respMyServiceDeleteDataById)(nil)
var _ thrift.WritableResult = (*respMyServiceDeleteDataById)(nil)

// Deprecated: MyServiceDeleteDataByIdResultDeprecated is deprecated, since it is supposed to be internal.
type MyServiceDeleteDataByIdResultDeprecated = respMyServiceDeleteDataById

func newRespMyServiceDeleteDataById() *respMyServiceDeleteDataById {
    return (&respMyServiceDeleteDataById{}).setDefaults()
}



func (x *respMyServiceDeleteDataById) Exception() thrift.WritableException {
    return nil
}

func (x *respMyServiceDeleteDataById) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respMyServiceDeleteDataById"); err != nil {
        return thrift.PrependError("respMyServiceDeleteDataById write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respMyServiceDeleteDataById write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respMyServiceDeleteDataById write struct end error: ", err)
    }
    return nil
}

func (x *respMyServiceDeleteDataById) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respMyServiceDeleteDataById read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respMyServiceDeleteDataById field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respMyServiceDeleteDataById read struct end error: ", err)
    }

    return nil
}

func (x *respMyServiceDeleteDataById) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respMyServiceDeleteDataById) setDefaults() *respMyServiceDeleteDataById {
    return x
}

type reqMyServiceLobDataById struct {
    Id int64 `thrift:"id,1" json:"id" db:"id"`
    Data string `thrift:"data,2" json:"data" db:"data"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqMyServiceLobDataById)(nil)

// Deprecated: MyServiceLobDataByIdArgsDeprecated is deprecated, since it is supposed to be internal.
type MyServiceLobDataByIdArgsDeprecated = reqMyServiceLobDataById

func newReqMyServiceLobDataById() *reqMyServiceLobDataById {
    return (&reqMyServiceLobDataById{}).setDefaults()
}

func (x *reqMyServiceLobDataById) GetId() int64 {
    return x.Id
}

func (x *reqMyServiceLobDataById) GetData() string {
    return x.Data
}

func (x *reqMyServiceLobDataById) SetIdNonCompat(value int64) *reqMyServiceLobDataById {
    x.Id = value
    return x
}

func (x *reqMyServiceLobDataById) SetId(value int64) *reqMyServiceLobDataById {
    x.Id = value
    return x
}

func (x *reqMyServiceLobDataById) SetDataNonCompat(value string) *reqMyServiceLobDataById {
    x.Data = value
    return x
}

func (x *reqMyServiceLobDataById) SetData(value string) *reqMyServiceLobDataById {
    x.Data = value
    return x
}

func (x *reqMyServiceLobDataById) writeField1(p thrift.Encoder) error {  // Id
    if err := p.WriteFieldBegin("id", thrift.I64, 1); err != nil {
        return thrift.PrependError("reqMyServiceLobDataById write field begin error: ", err)
    }

    item := x.Id
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqMyServiceLobDataById write field end error: ", err)
    }
    return nil
}

func (x *reqMyServiceLobDataById) writeField2(p thrift.Encoder) error {  // Data
    if err := p.WriteFieldBegin("data", thrift.STRING, 2); err != nil {
        return thrift.PrependError("reqMyServiceLobDataById write field begin error: ", err)
    }

    item := x.Data
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqMyServiceLobDataById write field end error: ", err)
    }
    return nil
}

func (x *reqMyServiceLobDataById) readField1(p thrift.Decoder) error {  // Id
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Id = result
    return nil
}

func (x *reqMyServiceLobDataById) readField2(p thrift.Decoder) error {  // Data
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.Data = result
    return nil
}



func (x *reqMyServiceLobDataById) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqMyServiceLobDataById"); err != nil {
        return thrift.PrependError("reqMyServiceLobDataById write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqMyServiceLobDataById write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqMyServiceLobDataById write struct end error: ", err)
    }
    return nil
}

func (x *reqMyServiceLobDataById) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqMyServiceLobDataById read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqMyServiceLobDataById field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "id")):  // id
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "data")):  // data
            fieldReadErr = x.readField2(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqMyServiceLobDataById read struct end error: ", err)
    }

    return nil
}

func (x *reqMyServiceLobDataById) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqMyServiceLobDataById) setDefaults() *reqMyServiceLobDataById {
    return x.
        SetIdNonCompat(0).
        SetDataNonCompat("")
}

type respMyServiceLobDataById struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*respMyServiceLobDataById)(nil)
var _ thrift.WritableResult = (*respMyServiceLobDataById)(nil)

// Deprecated: MyServiceLobDataByIdResultDeprecated is deprecated, since it is supposed to be internal.
type MyServiceLobDataByIdResultDeprecated = respMyServiceLobDataById

func newRespMyServiceLobDataById() *respMyServiceLobDataById {
    return (&respMyServiceLobDataById{}).setDefaults()
}



func (x *respMyServiceLobDataById) Exception() thrift.WritableException {
    return nil
}

func (x *respMyServiceLobDataById) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respMyServiceLobDataById"); err != nil {
        return thrift.PrependError("respMyServiceLobDataById write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respMyServiceLobDataById write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respMyServiceLobDataById write struct end error: ", err)
    }
    return nil
}

func (x *respMyServiceLobDataById) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respMyServiceLobDataById read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respMyServiceLobDataById field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respMyServiceLobDataById read struct end error: ", err)
    }

    return nil
}

func (x *respMyServiceLobDataById) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respMyServiceLobDataById) setDefaults() *respMyServiceLobDataById {
    return x
}

type reqMyServiceInvalidReturnForHack struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqMyServiceInvalidReturnForHack)(nil)

// Deprecated: MyServiceInvalidReturnForHackArgsDeprecated is deprecated, since it is supposed to be internal.
type MyServiceInvalidReturnForHackArgsDeprecated = reqMyServiceInvalidReturnForHack

func newReqMyServiceInvalidReturnForHack() *reqMyServiceInvalidReturnForHack {
    return (&reqMyServiceInvalidReturnForHack{}).setDefaults()
}



func (x *reqMyServiceInvalidReturnForHack) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqMyServiceInvalidReturnForHack"); err != nil {
        return thrift.PrependError("reqMyServiceInvalidReturnForHack write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqMyServiceInvalidReturnForHack write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqMyServiceInvalidReturnForHack write struct end error: ", err)
    }
    return nil
}

func (x *reqMyServiceInvalidReturnForHack) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqMyServiceInvalidReturnForHack read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqMyServiceInvalidReturnForHack field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqMyServiceInvalidReturnForHack read struct end error: ", err)
    }

    return nil
}

func (x *reqMyServiceInvalidReturnForHack) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqMyServiceInvalidReturnForHack) setDefaults() *reqMyServiceInvalidReturnForHack {
    return x
}

type respMyServiceInvalidReturnForHack struct {
    Success []float32 `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respMyServiceInvalidReturnForHack)(nil)
var _ thrift.WritableResult = (*respMyServiceInvalidReturnForHack)(nil)

// Deprecated: MyServiceInvalidReturnForHackResultDeprecated is deprecated, since it is supposed to be internal.
type MyServiceInvalidReturnForHackResultDeprecated = respMyServiceInvalidReturnForHack

func newRespMyServiceInvalidReturnForHack() *respMyServiceInvalidReturnForHack {
    return (&respMyServiceInvalidReturnForHack{}).setDefaults()
}

func (x *respMyServiceInvalidReturnForHack) GetSuccess() []float32 {
    if !x.IsSetSuccess() {
        return make([]float32, 0)
    }
    return x.Success
}

func (x *respMyServiceInvalidReturnForHack) SetSuccessNonCompat(value []float32) *respMyServiceInvalidReturnForHack {
    x.Success = value
    return x
}

func (x *respMyServiceInvalidReturnForHack) SetSuccess(value []float32) *respMyServiceInvalidReturnForHack {
    x.Success = value
    return x
}

func (x *respMyServiceInvalidReturnForHack) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respMyServiceInvalidReturnForHack) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.SET, 0); err != nil {
        return thrift.PrependError("respMyServiceInvalidReturnForHack write field begin error: ", err)
    }

    item := x.Success
    if err := p.WriteSetBegin(thrift.FLOAT, len(item)); err != nil {
        return thrift.PrependError("error writing set begin: ", err)
    }
    for _, v := range item {
        {
            item := v
            if err := p.WriteFloat(item); err != nil {
                return err
            }
        }
    }
    if err := p.WriteSetEnd(); err != nil {
        return thrift.PrependError("error writing set end: ", err)
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respMyServiceInvalidReturnForHack write field end error: ", err)
    }
    return nil
}

func (x *respMyServiceInvalidReturnForHack) readField0(p thrift.Decoder) error {  // Success
    _ /* elemType */, size, err := p.ReadSetBegin()
    if err != nil {
        return thrift.PrependError("error reading set begin: ", err)
    }
    
    setResult := make([]float32, 0, size)
    for i := 0; i < size; i++ {
        var elem float32
        {
            result, err := p.ReadFloat()
            if err != nil {
                return err
            }
            elem = result
        }
        setResult = append(setResult, elem)
    }
    
    if err := p.ReadSetEnd(); err != nil {
        return thrift.PrependError("error reading set end: ", err)
    }
    result := setResult

    x.Success = result
    return nil
}



func (x *respMyServiceInvalidReturnForHack) Exception() thrift.WritableException {
    return nil
}

func (x *respMyServiceInvalidReturnForHack) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respMyServiceInvalidReturnForHack"); err != nil {
        return thrift.PrependError("respMyServiceInvalidReturnForHack write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respMyServiceInvalidReturnForHack write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respMyServiceInvalidReturnForHack write struct end error: ", err)
    }
    return nil
}

func (x *respMyServiceInvalidReturnForHack) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respMyServiceInvalidReturnForHack read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respMyServiceInvalidReturnForHack field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.SET) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respMyServiceInvalidReturnForHack read struct end error: ", err)
    }

    return nil
}

func (x *respMyServiceInvalidReturnForHack) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respMyServiceInvalidReturnForHack) setDefaults() *respMyServiceInvalidReturnForHack {
    return x
}

type reqMyServiceRpcSkippedCodegen struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqMyServiceRpcSkippedCodegen)(nil)

// Deprecated: MyServiceRpcSkippedCodegenArgsDeprecated is deprecated, since it is supposed to be internal.
type MyServiceRpcSkippedCodegenArgsDeprecated = reqMyServiceRpcSkippedCodegen

func newReqMyServiceRpcSkippedCodegen() *reqMyServiceRpcSkippedCodegen {
    return (&reqMyServiceRpcSkippedCodegen{}).setDefaults()
}



func (x *reqMyServiceRpcSkippedCodegen) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqMyServiceRpcSkippedCodegen"); err != nil {
        return thrift.PrependError("reqMyServiceRpcSkippedCodegen write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqMyServiceRpcSkippedCodegen write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqMyServiceRpcSkippedCodegen write struct end error: ", err)
    }
    return nil
}

func (x *reqMyServiceRpcSkippedCodegen) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqMyServiceRpcSkippedCodegen read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqMyServiceRpcSkippedCodegen field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqMyServiceRpcSkippedCodegen read struct end error: ", err)
    }

    return nil
}

func (x *reqMyServiceRpcSkippedCodegen) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqMyServiceRpcSkippedCodegen) setDefaults() *reqMyServiceRpcSkippedCodegen {
    return x
}

type respMyServiceRpcSkippedCodegen struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*respMyServiceRpcSkippedCodegen)(nil)
var _ thrift.WritableResult = (*respMyServiceRpcSkippedCodegen)(nil)

// Deprecated: MyServiceRpcSkippedCodegenResultDeprecated is deprecated, since it is supposed to be internal.
type MyServiceRpcSkippedCodegenResultDeprecated = respMyServiceRpcSkippedCodegen

func newRespMyServiceRpcSkippedCodegen() *respMyServiceRpcSkippedCodegen {
    return (&respMyServiceRpcSkippedCodegen{}).setDefaults()
}



func (x *respMyServiceRpcSkippedCodegen) Exception() thrift.WritableException {
    return nil
}

func (x *respMyServiceRpcSkippedCodegen) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respMyServiceRpcSkippedCodegen"); err != nil {
        return thrift.PrependError("respMyServiceRpcSkippedCodegen write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respMyServiceRpcSkippedCodegen write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respMyServiceRpcSkippedCodegen write struct end error: ", err)
    }
    return nil
}

func (x *respMyServiceRpcSkippedCodegen) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respMyServiceRpcSkippedCodegen read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respMyServiceRpcSkippedCodegen field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respMyServiceRpcSkippedCodegen read struct end error: ", err)
    }

    return nil
}

func (x *respMyServiceRpcSkippedCodegen) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respMyServiceRpcSkippedCodegen) setDefaults() *respMyServiceRpcSkippedCodegen {
    return x
}

type reqDbMixedStackArgumentsGetDataByKey0 struct {
    Key string `thrift:"key,1" json:"key" db:"key"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqDbMixedStackArgumentsGetDataByKey0)(nil)

// Deprecated: DbMixedStackArgumentsGetDataByKey0ArgsDeprecated is deprecated, since it is supposed to be internal.
type DbMixedStackArgumentsGetDataByKey0ArgsDeprecated = reqDbMixedStackArgumentsGetDataByKey0

func newReqDbMixedStackArgumentsGetDataByKey0() *reqDbMixedStackArgumentsGetDataByKey0 {
    return (&reqDbMixedStackArgumentsGetDataByKey0{}).setDefaults()
}

func (x *reqDbMixedStackArgumentsGetDataByKey0) GetKey() string {
    return x.Key
}

func (x *reqDbMixedStackArgumentsGetDataByKey0) SetKeyNonCompat(value string) *reqDbMixedStackArgumentsGetDataByKey0 {
    x.Key = value
    return x
}

func (x *reqDbMixedStackArgumentsGetDataByKey0) SetKey(value string) *reqDbMixedStackArgumentsGetDataByKey0 {
    x.Key = value
    return x
}

func (x *reqDbMixedStackArgumentsGetDataByKey0) writeField1(p thrift.Encoder) error {  // Key
    if err := p.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
        return thrift.PrependError("reqDbMixedStackArgumentsGetDataByKey0 write field begin error: ", err)
    }

    item := x.Key
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqDbMixedStackArgumentsGetDataByKey0 write field end error: ", err)
    }
    return nil
}

func (x *reqDbMixedStackArgumentsGetDataByKey0) readField1(p thrift.Decoder) error {  // Key
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.Key = result
    return nil
}



func (x *reqDbMixedStackArgumentsGetDataByKey0) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqDbMixedStackArgumentsGetDataByKey0"); err != nil {
        return thrift.PrependError("reqDbMixedStackArgumentsGetDataByKey0 write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqDbMixedStackArgumentsGetDataByKey0 write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqDbMixedStackArgumentsGetDataByKey0 write struct end error: ", err)
    }
    return nil
}

func (x *reqDbMixedStackArgumentsGetDataByKey0) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqDbMixedStackArgumentsGetDataByKey0 read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqDbMixedStackArgumentsGetDataByKey0 field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "key")):  // key
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqDbMixedStackArgumentsGetDataByKey0 read struct end error: ", err)
    }

    return nil
}

func (x *reqDbMixedStackArgumentsGetDataByKey0) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqDbMixedStackArgumentsGetDataByKey0) setDefaults() *reqDbMixedStackArgumentsGetDataByKey0 {
    return x.
        SetKeyNonCompat("")
}

type respDbMixedStackArgumentsGetDataByKey0 struct {
    Success []byte `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respDbMixedStackArgumentsGetDataByKey0)(nil)
var _ thrift.WritableResult = (*respDbMixedStackArgumentsGetDataByKey0)(nil)

// Deprecated: DbMixedStackArgumentsGetDataByKey0ResultDeprecated is deprecated, since it is supposed to be internal.
type DbMixedStackArgumentsGetDataByKey0ResultDeprecated = respDbMixedStackArgumentsGetDataByKey0

func newRespDbMixedStackArgumentsGetDataByKey0() *respDbMixedStackArgumentsGetDataByKey0 {
    return (&respDbMixedStackArgumentsGetDataByKey0{}).setDefaults()
}

func (x *respDbMixedStackArgumentsGetDataByKey0) GetSuccess() []byte {
    if !x.IsSetSuccess() {
        return []byte("")
    }
    return x.Success
}

func (x *respDbMixedStackArgumentsGetDataByKey0) SetSuccessNonCompat(value []byte) *respDbMixedStackArgumentsGetDataByKey0 {
    x.Success = value
    return x
}

func (x *respDbMixedStackArgumentsGetDataByKey0) SetSuccess(value []byte) *respDbMixedStackArgumentsGetDataByKey0 {
    x.Success = value
    return x
}

func (x *respDbMixedStackArgumentsGetDataByKey0) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respDbMixedStackArgumentsGetDataByKey0) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
        return thrift.PrependError("respDbMixedStackArgumentsGetDataByKey0 write field begin error: ", err)
    }

    item := x.Success
    if err := p.WriteBinary(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respDbMixedStackArgumentsGetDataByKey0 write field end error: ", err)
    }
    return nil
}

func (x *respDbMixedStackArgumentsGetDataByKey0) readField0(p thrift.Decoder) error {  // Success
    result, err := p.ReadBinary()
    if err != nil {
        return err
    }

    x.Success = result
    return nil
}



func (x *respDbMixedStackArgumentsGetDataByKey0) Exception() thrift.WritableException {
    return nil
}

func (x *respDbMixedStackArgumentsGetDataByKey0) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respDbMixedStackArgumentsGetDataByKey0"); err != nil {
        return thrift.PrependError("respDbMixedStackArgumentsGetDataByKey0 write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respDbMixedStackArgumentsGetDataByKey0 write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respDbMixedStackArgumentsGetDataByKey0 write struct end error: ", err)
    }
    return nil
}

func (x *respDbMixedStackArgumentsGetDataByKey0) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respDbMixedStackArgumentsGetDataByKey0 read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respDbMixedStackArgumentsGetDataByKey0 field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respDbMixedStackArgumentsGetDataByKey0 read struct end error: ", err)
    }

    return nil
}

func (x *respDbMixedStackArgumentsGetDataByKey0) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respDbMixedStackArgumentsGetDataByKey0) setDefaults() *respDbMixedStackArgumentsGetDataByKey0 {
    return x
}

type reqDbMixedStackArgumentsGetDataByKey1 struct {
    Key string `thrift:"key,1" json:"key" db:"key"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqDbMixedStackArgumentsGetDataByKey1)(nil)

// Deprecated: DbMixedStackArgumentsGetDataByKey1ArgsDeprecated is deprecated, since it is supposed to be internal.
type DbMixedStackArgumentsGetDataByKey1ArgsDeprecated = reqDbMixedStackArgumentsGetDataByKey1

func newReqDbMixedStackArgumentsGetDataByKey1() *reqDbMixedStackArgumentsGetDataByKey1 {
    return (&reqDbMixedStackArgumentsGetDataByKey1{}).setDefaults()
}

func (x *reqDbMixedStackArgumentsGetDataByKey1) GetKey() string {
    return x.Key
}

func (x *reqDbMixedStackArgumentsGetDataByKey1) SetKeyNonCompat(value string) *reqDbMixedStackArgumentsGetDataByKey1 {
    x.Key = value
    return x
}

func (x *reqDbMixedStackArgumentsGetDataByKey1) SetKey(value string) *reqDbMixedStackArgumentsGetDataByKey1 {
    x.Key = value
    return x
}

func (x *reqDbMixedStackArgumentsGetDataByKey1) writeField1(p thrift.Encoder) error {  // Key
    if err := p.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
        return thrift.PrependError("reqDbMixedStackArgumentsGetDataByKey1 write field begin error: ", err)
    }

    item := x.Key
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqDbMixedStackArgumentsGetDataByKey1 write field end error: ", err)
    }
    return nil
}

func (x *reqDbMixedStackArgumentsGetDataByKey1) readField1(p thrift.Decoder) error {  // Key
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.Key = result
    return nil
}



func (x *reqDbMixedStackArgumentsGetDataByKey1) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqDbMixedStackArgumentsGetDataByKey1"); err != nil {
        return thrift.PrependError("reqDbMixedStackArgumentsGetDataByKey1 write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqDbMixedStackArgumentsGetDataByKey1 write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqDbMixedStackArgumentsGetDataByKey1 write struct end error: ", err)
    }
    return nil
}

func (x *reqDbMixedStackArgumentsGetDataByKey1) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqDbMixedStackArgumentsGetDataByKey1 read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqDbMixedStackArgumentsGetDataByKey1 field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "key")):  // key
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqDbMixedStackArgumentsGetDataByKey1 read struct end error: ", err)
    }

    return nil
}

func (x *reqDbMixedStackArgumentsGetDataByKey1) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqDbMixedStackArgumentsGetDataByKey1) setDefaults() *reqDbMixedStackArgumentsGetDataByKey1 {
    return x.
        SetKeyNonCompat("")
}

type respDbMixedStackArgumentsGetDataByKey1 struct {
    Success []byte `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respDbMixedStackArgumentsGetDataByKey1)(nil)
var _ thrift.WritableResult = (*respDbMixedStackArgumentsGetDataByKey1)(nil)

// Deprecated: DbMixedStackArgumentsGetDataByKey1ResultDeprecated is deprecated, since it is supposed to be internal.
type DbMixedStackArgumentsGetDataByKey1ResultDeprecated = respDbMixedStackArgumentsGetDataByKey1

func newRespDbMixedStackArgumentsGetDataByKey1() *respDbMixedStackArgumentsGetDataByKey1 {
    return (&respDbMixedStackArgumentsGetDataByKey1{}).setDefaults()
}

func (x *respDbMixedStackArgumentsGetDataByKey1) GetSuccess() []byte {
    if !x.IsSetSuccess() {
        return []byte("")
    }
    return x.Success
}

func (x *respDbMixedStackArgumentsGetDataByKey1) SetSuccessNonCompat(value []byte) *respDbMixedStackArgumentsGetDataByKey1 {
    x.Success = value
    return x
}

func (x *respDbMixedStackArgumentsGetDataByKey1) SetSuccess(value []byte) *respDbMixedStackArgumentsGetDataByKey1 {
    x.Success = value
    return x
}

func (x *respDbMixedStackArgumentsGetDataByKey1) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respDbMixedStackArgumentsGetDataByKey1) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
        return thrift.PrependError("respDbMixedStackArgumentsGetDataByKey1 write field begin error: ", err)
    }

    item := x.Success
    if err := p.WriteBinary(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respDbMixedStackArgumentsGetDataByKey1 write field end error: ", err)
    }
    return nil
}

func (x *respDbMixedStackArgumentsGetDataByKey1) readField0(p thrift.Decoder) error {  // Success
    result, err := p.ReadBinary()
    if err != nil {
        return err
    }

    x.Success = result
    return nil
}



func (x *respDbMixedStackArgumentsGetDataByKey1) Exception() thrift.WritableException {
    return nil
}

func (x *respDbMixedStackArgumentsGetDataByKey1) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respDbMixedStackArgumentsGetDataByKey1"); err != nil {
        return thrift.PrependError("respDbMixedStackArgumentsGetDataByKey1 write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respDbMixedStackArgumentsGetDataByKey1 write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respDbMixedStackArgumentsGetDataByKey1 write struct end error: ", err)
    }
    return nil
}

func (x *respDbMixedStackArgumentsGetDataByKey1) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respDbMixedStackArgumentsGetDataByKey1 read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respDbMixedStackArgumentsGetDataByKey1 field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respDbMixedStackArgumentsGetDataByKey1 read struct end error: ", err)
    }

    return nil
}

func (x *respDbMixedStackArgumentsGetDataByKey1) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respDbMixedStackArgumentsGetDataByKey1) setDefaults() *respDbMixedStackArgumentsGetDataByKey1 {
    return x
}


// RegisterTypes registers types found in this file that have a thrift_uri with the passed in registry.
func RegisterTypes(registry interface {
  RegisterType(name string, initializer func() any)
}) {
    registry.RegisterType("test.dev/fixtures/basic/MyStruct", func() any { return NewMyStruct() })
    registry.RegisterType("test.dev/fixtures/basic/Containers", func() any { return NewContainers() })
    registry.RegisterType("test.dev/fixtures/basic/MyDataItem", func() any { return NewMyDataItem() })
    registry.RegisterType("test.dev/fixtures/basic/MyUnion", func() any { return NewMyUnion() })
    registry.RegisterType("test.dev/fixtures/basic/MyException", func() any { return NewMyException() })
    registry.RegisterType("test.dev/fixtures/basic/MyExceptionWithMessage", func() any { return NewMyExceptionWithMessage() })
    registry.RegisterType("test.dev/fixtures/basic/ReservedKeyword", func() any { return NewReservedKeyword() })
    registry.RegisterType("test.dev/fixtures/basic/UnionToBeRenamed", func() any { return NewUnionToBeRenamed() })

    registry.RegisterType("test.dev/fixtures/basic/MyEnum", func() any { return MyEnum(0) })
    registry.RegisterType("test.dev/fixtures/basic/HackEnum", func() any { return HackEnum(0) })
}
