/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/python_capi/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/python_capi/gen-cpp2/module_types.tcc"
#include "thrift/compiler/test/fixtures/python_capi/gen-cpp2/module_constants.h"
#include "thrift/compiler/test/fixtures/python_capi/gen-cpp2/module_data.h"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

[[maybe_unused]] static constexpr std::string_view kModuleName = "module";


namespace apache { namespace thrift {

const std::string_view TEnumTraits<::test::fixtures::python_capi::MyEnum>::__fbthrift_module_name_internal_do_not_use = kModuleName;
folly::Range<::test::fixtures::python_capi::MyEnum const*> const TEnumTraits<::test::fixtures::python_capi::MyEnum>::values = folly::range(TEnumDataStorage<::test::fixtures::python_capi::MyEnum>::values);
folly::Range<std::string_view const*> const TEnumTraits<::test::fixtures::python_capi::MyEnum>::names = folly::range(TEnumDataStorage<::test::fixtures::python_capi::MyEnum>::names);

bool TEnumTraits<::test::fixtures::python_capi::MyEnum>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::test::fixtures::python_capi::MyEnum>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

const std::vector<std::any>& TEnumTraits<::test::fixtures::python_capi::MyEnum>::annotations() noexcept {
  return ::apache::thrift::detail::annotation::empty_annotations();
}

}} // apache::thrift


namespace apache { namespace thrift {

const std::string_view TEnumTraits<::test::fixtures::python_capi::NormalDecentEnum>::__fbthrift_module_name_internal_do_not_use = kModuleName;
folly::Range<::test::fixtures::python_capi::NormalDecentEnum const*> const TEnumTraits<::test::fixtures::python_capi::NormalDecentEnum>::values = folly::range(TEnumDataStorage<::test::fixtures::python_capi::NormalDecentEnum>::values);
folly::Range<std::string_view const*> const TEnumTraits<::test::fixtures::python_capi::NormalDecentEnum>::names = folly::range(TEnumDataStorage<::test::fixtures::python_capi::NormalDecentEnum>::names);

bool TEnumTraits<::test::fixtures::python_capi::NormalDecentEnum>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::test::fixtures::python_capi::NormalDecentEnum>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

const std::vector<std::any>& TEnumTraits<::test::fixtures::python_capi::NormalDecentEnum>::annotations() noexcept {
  return ::apache::thrift::detail::annotation::empty_annotations();
}

}} // apache::thrift



namespace test::fixtures::python_capi {

std::string_view MyStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/MyStruct";
}

std::string_view MyStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStruct>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view MyStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStruct>::name;
}

MyStruct::MyStruct(const MyStruct&) = default;
MyStruct& MyStruct::operator=(const MyStruct&) = default;
MyStruct::MyStruct() :
    __fbthrift_field_inty(),
    __fbthrift_field_myEnumy(),
    __fbthrift_field_boulet() {
}


MyStruct::~MyStruct() {}

MyStruct::MyStruct([[maybe_unused]] MyStruct&& other) noexcept :
    __fbthrift_field_inty(std::move(other.__fbthrift_field_inty)),
    __fbthrift_field_stringy(std::move(other.__fbthrift_field_stringy)),
    __fbthrift_field_myItemy(std::move(other.__fbthrift_field_myItemy)),
    __fbthrift_field_myEnumy(std::move(other.__fbthrift_field_myEnumy)),
    __fbthrift_field_boulet(std::move(other.__fbthrift_field_boulet)),
    __fbthrift_field_floatListy(std::move(other.__fbthrift_field_floatListy)),
    __fbthrift_field_strMappy(std::move(other.__fbthrift_field_strMappy)),
    __fbthrift_field_intSetty(std::move(other.__fbthrift_field_intSetty)),
    __isset(other.__isset) {
}

MyStruct& MyStruct::operator=([[maybe_unused]] MyStruct&& other) noexcept {
    this->__fbthrift_field_inty = std::move(other.__fbthrift_field_inty);
    this->__fbthrift_field_stringy = std::move(other.__fbthrift_field_stringy);
    this->__fbthrift_field_myItemy = std::move(other.__fbthrift_field_myItemy);
    this->__fbthrift_field_myEnumy = std::move(other.__fbthrift_field_myEnumy);
    this->__fbthrift_field_boulet = std::move(other.__fbthrift_field_boulet);
    this->__fbthrift_field_floatListy = std::move(other.__fbthrift_field_floatListy);
    this->__fbthrift_field_strMappy = std::move(other.__fbthrift_field_strMappy);
    this->__fbthrift_field_intSetty = std::move(other.__fbthrift_field_intSetty);
    __isset = other.__isset;
    return *this;
}


MyStruct::MyStruct(apache::thrift::FragileConstructor, ::std::int64_t inty__arg, ::std::string stringy__arg, ::test::fixtures::python_capi::MyDataItem myItemy__arg, ::test::fixtures::python_capi::MyEnum myEnumy__arg, bool boulet__arg, ::std::vector<float> floatListy__arg, ::std::map<::std::string, ::std::string> strMappy__arg, ::std::set<::std::int32_t> intSetty__arg) :
    __fbthrift_field_inty(std::move(inty__arg)),
    __fbthrift_field_stringy(std::move(stringy__arg)),
    __fbthrift_field_myItemy(std::move(myItemy__arg)),
    __fbthrift_field_myEnumy(std::move(myEnumy__arg)),
    __fbthrift_field_boulet(std::move(boulet__arg)),
    __fbthrift_field_floatListy(std::move(floatListy__arg)),
    __fbthrift_field_strMappy(std::move(strMappy__arg)),
    __fbthrift_field_intSetty(std::move(intSetty__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
}

void MyStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_inty = ::std::int64_t();
  this->__fbthrift_field_stringy = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  ::apache::thrift::clear(this->__fbthrift_field_myItemy);
  this->__fbthrift_field_myEnumy = ::test::fixtures::python_capi::MyEnum();
  this->__fbthrift_field_boulet = bool();
  this->__fbthrift_field_floatListy.clear();
  this->__fbthrift_field_strMappy.clear();
  this->__fbthrift_field_intSetty.clear();
  __isset = {};
}

void MyStruct::__fbthrift_clear_terse_fields() {
}

bool MyStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyStruct::operator==([[maybe_unused]] const MyStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyStruct::operator<([[maybe_unused]] const MyStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int64_t MyStruct::get_inty() const {
  return __fbthrift_field_inty;
}

::std::int64_t& MyStruct::set_inty(::std::int64_t inty_) {
  inty_ref() = inty_;
  return __fbthrift_field_inty;
}

const ::test::fixtures::python_capi::MyDataItem& MyStruct::get_myItemy() const& {
  return __fbthrift_field_myItemy;
}

::test::fixtures::python_capi::MyDataItem MyStruct::get_myItemy() && {
  return static_cast<::test::fixtures::python_capi::MyDataItem&&>(__fbthrift_field_myItemy);
}

::test::fixtures::python_capi::MyEnum MyStruct::get_myEnumy() const {
  return __fbthrift_field_myEnumy;
}

::test::fixtures::python_capi::MyEnum& MyStruct::set_myEnumy(::test::fixtures::python_capi::MyEnum myEnumy_) {
  myEnumy_ref() = myEnumy_;
  return __fbthrift_field_myEnumy;
}

bool MyStruct::get_boulet() const {
  return __fbthrift_field_boulet;
}

bool& MyStruct::set_boulet(bool boulet_) {
  boulet_ref() = boulet_;
  return __fbthrift_field_boulet;
}

const ::std::vector<float>& MyStruct::get_floatListy() const& {
  return __fbthrift_field_floatListy;
}

::std::vector<float> MyStruct::get_floatListy() && {
  return static_cast<::std::vector<float>&&>(__fbthrift_field_floatListy);
}

const ::std::map<::std::string, ::std::string>& MyStruct::get_strMappy() const& {
  return __fbthrift_field_strMappy;
}

::std::map<::std::string, ::std::string> MyStruct::get_strMappy() && {
  return static_cast<::std::map<::std::string, ::std::string>&&>(__fbthrift_field_strMappy);
}

const ::std::set<::std::int32_t>& MyStruct::get_intSetty() const& {
  return __fbthrift_field_intSetty;
}

::std::set<::std::int32_t> MyStruct::get_intSetty() && {
  return static_cast<::std::set<::std::int32_t>&&>(__fbthrift_field_intSetty);
}

void swap([[maybe_unused]] MyStruct& a, [[maybe_unused]] MyStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_inty, b.__fbthrift_field_inty);
  swap(a.__fbthrift_field_stringy, b.__fbthrift_field_stringy);
  swap(a.__fbthrift_field_myItemy, b.__fbthrift_field_myItemy);
  swap(a.__fbthrift_field_myEnumy, b.__fbthrift_field_myEnumy);
  swap(a.__fbthrift_field_boulet, b.__fbthrift_field_boulet);
  swap(a.__fbthrift_field_floatListy, b.__fbthrift_field_floatListy);
  swap(a.__fbthrift_field_strMappy, b.__fbthrift_field_strMappy);
  swap(a.__fbthrift_field_intSetty, b.__fbthrift_field_intSetty);
  swap(a.__isset, b.__isset);
}

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::python_capi::MyDataItem>,
    "inconsistent use of json option");

} // namespace test::fixtures::python_capi


namespace test::fixtures::python_capi {

std::string_view MyDataItem::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/MyDataItem";
}

std::string_view MyDataItem::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyDataItem>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view MyDataItem::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyDataItem>::name;
}

MyDataItem::MyDataItem(const MyDataItem&) = default;
MyDataItem& MyDataItem::operator=(const MyDataItem&) = default;
MyDataItem::MyDataItem() {
}


MyDataItem::~MyDataItem() {}

MyDataItem::MyDataItem([[maybe_unused]] MyDataItem&& other) noexcept :
    __fbthrift_field_s(std::move(other.__fbthrift_field_s)),
    __isset(other.__isset) {
}

MyDataItem& MyDataItem::operator=([[maybe_unused]] MyDataItem&& other) noexcept {
    this->__fbthrift_field_s = std::move(other.__fbthrift_field_s);
    __isset = other.__isset;
    return *this;
}


MyDataItem::MyDataItem(apache::thrift::FragileConstructor, ::std::string s__arg) :
    __fbthrift_field_s(std::move(s__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
}

void MyDataItem::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_s = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  __isset = {};
}

void MyDataItem::__fbthrift_clear_terse_fields() {
}

bool MyDataItem::__fbthrift_is_empty() const {
  return false;
}

bool MyDataItem::operator==([[maybe_unused]] const MyDataItem& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyDataItem::operator<([[maybe_unused]] const MyDataItem& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] MyDataItem& a, [[maybe_unused]] MyDataItem& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_s, b.__fbthrift_field_s);
  swap(a.__isset, b.__isset);
}


} // namespace test::fixtures::python_capi


namespace test::fixtures::python_capi {

std::string_view TransitiveDoubler::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/TransitiveDoubler";
}

std::string_view TransitiveDoubler::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<TransitiveDoubler>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view TransitiveDoubler::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<TransitiveDoubler>::name;
}


TransitiveDoubler::TransitiveDoubler(apache::thrift::FragileConstructor) {}

void TransitiveDoubler::__fbthrift_clear() {
  // clear all fields
}

void TransitiveDoubler::__fbthrift_clear_terse_fields() {
}

bool TransitiveDoubler::__fbthrift_is_empty() const {
  return true;
}

bool TransitiveDoubler::operator==([[maybe_unused]] const TransitiveDoubler& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool TransitiveDoubler::operator<([[maybe_unused]] const TransitiveDoubler& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] TransitiveDoubler& a, [[maybe_unused]] TransitiveDoubler& b) {
  using ::std::swap;
}


} // namespace test::fixtures::python_capi


namespace test::fixtures::python_capi {
namespace detail {

std::string_view DoubledPair::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/DoubledPair";
}

std::string_view DoubledPair::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<DoubledPair>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view DoubledPair::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<DoubledPair>::name;
}

DoubledPair::DoubledPair(const DoubledPair&) = default;
DoubledPair& DoubledPair::operator=(const DoubledPair&) = default;
DoubledPair::DoubledPair() :
    __fbthrift_field_x() {
}


DoubledPair::~DoubledPair() {}

DoubledPair::DoubledPair([[maybe_unused]] DoubledPair&& other) noexcept :
    __fbthrift_field_s(std::move(other.__fbthrift_field_s)),
    __fbthrift_field_x(std::move(other.__fbthrift_field_x)),
    __isset(other.__isset) {
}

DoubledPair& DoubledPair::operator=([[maybe_unused]] DoubledPair&& other) noexcept {
    this->__fbthrift_field_s = std::move(other.__fbthrift_field_s);
    this->__fbthrift_field_x = std::move(other.__fbthrift_field_x);
    __isset = other.__isset;
    return *this;
}


DoubledPair::DoubledPair(apache::thrift::FragileConstructor, ::std::string s__arg, ::std::int32_t x__arg) :
    __fbthrift_field_s(std::move(s__arg)),
    __fbthrift_field_x(std::move(x__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}

void DoubledPair::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_s = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_x = ::std::int32_t();
  __isset = {};
}

void DoubledPair::__fbthrift_clear_terse_fields() {
}

bool DoubledPair::__fbthrift_is_empty() const {
  return false;
}

bool DoubledPair::operator==([[maybe_unused]] const DoubledPair& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool DoubledPair::operator<([[maybe_unused]] const DoubledPair& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int32_t DoubledPair::get_x() const {
  return __fbthrift_field_x;
}

::std::int32_t& DoubledPair::set_x(::std::int32_t x_) {
  x_ref() = x_;
  return __fbthrift_field_x;
}

void swap([[maybe_unused]] DoubledPair& a, [[maybe_unused]] DoubledPair& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_s, b.__fbthrift_field_s);
  swap(a.__fbthrift_field_x, b.__fbthrift_field_x);
  swap(a.__isset, b.__isset);
}


} // namespace detail
} // namespace test::fixtures::python_capi


namespace test::fixtures::python_capi {

std::string_view StringPair::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/StringPair";
}

std::string_view StringPair::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<StringPair>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view StringPair::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<StringPair>::name;
}

StringPair::StringPair(const StringPair& srcObj) :
    __fbthrift_field_normal(srcObj.__fbthrift_field_normal),
    __fbthrift_field_doubled(srcObj.__fbthrift_field_doubled),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::thrift::test::lib::StringDoubler, 2>(__fbthrift_field_doubled, *this);
}

static void __fbthrift_swap(StringPair& lhs, StringPair& rhs) { swap(lhs, rhs); }
StringPair& StringPair::operator=(const StringPair& other) {
  StringPair tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

StringPair::StringPair() {
  ::apache::thrift::adapt_detail::construct<::thrift::test::lib::StringDoubler, 2>(__fbthrift_field_doubled, *this);
}


StringPair::~StringPair() {}

StringPair::StringPair([[maybe_unused]] StringPair&& other) noexcept :
    __fbthrift_field_normal(std::move(other.__fbthrift_field_normal)),
    __fbthrift_field_doubled(std::move(other.__fbthrift_field_doubled)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::thrift::test::lib::StringDoubler, 2>(__fbthrift_field_doubled, *this);
}

StringPair& StringPair::operator=([[maybe_unused]] StringPair&& other) noexcept {
    this->__fbthrift_field_normal = std::move(other.__fbthrift_field_normal);
    this->__fbthrift_field_doubled = std::move(other.__fbthrift_field_doubled);
    __isset = other.__isset;
    return *this;
}


StringPair::StringPair(apache::thrift::FragileConstructor, ::std::string normal__arg, ::apache::thrift::adapt_detail::adapted_field_t<::thrift::test::lib::StringDoubler, 2, ::std::string, StringPair> doubled__arg) :
    __fbthrift_field_normal(std::move(normal__arg)),
    __fbthrift_field_doubled(std::move(doubled__arg)) { 
  ::apache::thrift::adapt_detail::construct<::thrift::test::lib::StringDoubler, 2>(__fbthrift_field_doubled, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}

void StringPair::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_normal = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  ::apache::thrift::adapt_detail::clear<::thrift::test::lib::StringDoubler, 2>(__fbthrift_field_doubled, *this);
  __isset = {};
}

void StringPair::__fbthrift_clear_terse_fields() {
}

bool StringPair::__fbthrift_is_empty() const {
  return false;
}

bool StringPair::operator==([[maybe_unused]] const StringPair& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool StringPair::operator<([[maybe_unused]] const StringPair& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] StringPair& a, [[maybe_unused]] StringPair& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_normal, b.__fbthrift_field_normal);
  swap(a.__fbthrift_field_doubled, b.__fbthrift_field_doubled);
  swap(a.__isset, b.__isset);
}


} // namespace test::fixtures::python_capi


namespace test::fixtures::python_capi {

std::string_view VapidStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/EmptyStruct";
}

std::string_view VapidStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<VapidStruct>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view VapidStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<VapidStruct>::name;
}


VapidStruct::VapidStruct(apache::thrift::FragileConstructor) {}

void VapidStruct::__fbthrift_clear() {
  // clear all fields
}

void VapidStruct::__fbthrift_clear_terse_fields() {
}

bool VapidStruct::__fbthrift_is_empty() const {
  return true;
}

bool VapidStruct::operator==([[maybe_unused]] const VapidStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool VapidStruct::operator<([[maybe_unused]] const VapidStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] VapidStruct& a, [[maybe_unused]] VapidStruct& b) {
  using ::std::swap;
}


} // namespace test::fixtures::python_capi


namespace test::fixtures::python_capi {

std::string_view PrimitiveStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/PrimitiveStruct";
}

std::string_view PrimitiveStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<PrimitiveStruct>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view PrimitiveStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<PrimitiveStruct>::name;
}

PrimitiveStruct::PrimitiveStruct(const PrimitiveStruct& srcObj) :
    __fbthrift_field_booly(srcObj.__fbthrift_field_booly),
    __fbthrift_field_charry(srcObj.__fbthrift_field_charry),
    __fbthrift_field_shortay(srcObj.__fbthrift_field_shortay),
    __fbthrift_field_inty(srcObj.__fbthrift_field_inty),
    __fbthrift_field_longy(srcObj.__fbthrift_field_longy),
    __fbthrift_field_floaty(srcObj.__fbthrift_field_floaty),
    __fbthrift_field_dubby(srcObj.__fbthrift_field_dubby),
    __fbthrift_field_stringy(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::string>(srcObj.__fbthrift_field_stringy)),
    __fbthrift_field_bytey(srcObj.__fbthrift_field_bytey),
    __fbthrift_field_buffy(srcObj.__fbthrift_field_buffy),
    __fbthrift_field_pointbuffy(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::binary>(srcObj.__fbthrift_field_pointbuffy)),
    __fbthrift_field_patched_struct(srcObj.__fbthrift_field_patched_struct),
    __fbthrift_field_empty_struct(srcObj.__fbthrift_field_empty_struct),
    __fbthrift_field_fbstring(srcObj.__fbthrift_field_fbstring),
    __fbthrift_field_managed_string_view(srcObj.__fbthrift_field_managed_string_view),
    __fbthrift_field_some_error(srcObj.__fbthrift_field_some_error),
    __isset(srcObj.__isset) {
}

static void __fbthrift_swap(PrimitiveStruct& lhs, PrimitiveStruct& rhs) { swap(lhs, rhs); }
PrimitiveStruct& PrimitiveStruct::operator=(const PrimitiveStruct& other) {
  PrimitiveStruct tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

PrimitiveStruct::PrimitiveStruct() :
    __fbthrift_field_booly(),
    __fbthrift_field_charry(),
    __fbthrift_field_shortay(),
    __fbthrift_field_inty(),
    __fbthrift_field_longy(),
    __fbthrift_field_floaty() {
}


PrimitiveStruct::~PrimitiveStruct() {}

PrimitiveStruct::PrimitiveStruct([[maybe_unused]] PrimitiveStruct&& other) noexcept :
    __fbthrift_field_booly(std::move(other.__fbthrift_field_booly)),
    __fbthrift_field_charry(std::move(other.__fbthrift_field_charry)),
    __fbthrift_field_shortay(std::move(other.__fbthrift_field_shortay)),
    __fbthrift_field_inty(std::move(other.__fbthrift_field_inty)),
    __fbthrift_field_longy(std::move(other.__fbthrift_field_longy)),
    __fbthrift_field_floaty(std::move(other.__fbthrift_field_floaty)),
    __fbthrift_field_dubby(std::move(other.__fbthrift_field_dubby)),
    __fbthrift_field_stringy(std::move(other.__fbthrift_field_stringy)),
    __fbthrift_field_bytey(std::move(other.__fbthrift_field_bytey)),
    __fbthrift_field_buffy(std::move(other.__fbthrift_field_buffy)),
    __fbthrift_field_pointbuffy(std::move(other.__fbthrift_field_pointbuffy)),
    __fbthrift_field_patched_struct(std::move(other.__fbthrift_field_patched_struct)),
    __fbthrift_field_empty_struct(std::move(other.__fbthrift_field_empty_struct)),
    __fbthrift_field_fbstring(std::move(other.__fbthrift_field_fbstring)),
    __fbthrift_field_managed_string_view(std::move(other.__fbthrift_field_managed_string_view)),
    __fbthrift_field_some_error(std::move(other.__fbthrift_field_some_error)),
    __isset(other.__isset) {
}

PrimitiveStruct& PrimitiveStruct::operator=([[maybe_unused]] PrimitiveStruct&& other) noexcept {
    this->__fbthrift_field_booly = std::move(other.__fbthrift_field_booly);
    this->__fbthrift_field_charry = std::move(other.__fbthrift_field_charry);
    this->__fbthrift_field_shortay = std::move(other.__fbthrift_field_shortay);
    this->__fbthrift_field_inty = std::move(other.__fbthrift_field_inty);
    this->__fbthrift_field_longy = std::move(other.__fbthrift_field_longy);
    this->__fbthrift_field_floaty = std::move(other.__fbthrift_field_floaty);
    this->__fbthrift_field_dubby = std::move(other.__fbthrift_field_dubby);
    this->__fbthrift_field_stringy = std::move(other.__fbthrift_field_stringy);
    this->__fbthrift_field_bytey = std::move(other.__fbthrift_field_bytey);
    this->__fbthrift_field_buffy = std::move(other.__fbthrift_field_buffy);
    this->__fbthrift_field_pointbuffy = std::move(other.__fbthrift_field_pointbuffy);
    this->__fbthrift_field_patched_struct = std::move(other.__fbthrift_field_patched_struct);
    this->__fbthrift_field_empty_struct = std::move(other.__fbthrift_field_empty_struct);
    this->__fbthrift_field_fbstring = std::move(other.__fbthrift_field_fbstring);
    this->__fbthrift_field_managed_string_view = std::move(other.__fbthrift_field_managed_string_view);
    this->__fbthrift_field_some_error = std::move(other.__fbthrift_field_some_error);
    __isset = other.__isset;
    return *this;
}


PrimitiveStruct::PrimitiveStruct(apache::thrift::FragileConstructor, bool booly__arg, ::test::fixtures::python_capi::signed_byte charry__arg, uint16_t shortay__arg, ::std::int32_t inty__arg, uint64_t longy__arg, float floaty__arg, ::apache::thrift::detail::boxed_value_ptr<double> dubby__arg, ::std::unique_ptr<::std::string> stringy__arg, ::std::shared_ptr<const ::std::string> bytey__arg, ::test::fixtures::python_capi::IOBuf buffy__arg, ::test::fixtures::python_capi::IOBufPtr pointbuffy__arg, ::test::fixtures::python_capi::MyStruct patched_struct__arg, ::test::fixtures::python_capi::VapidStruct empty_struct__arg, folly::fbstring fbstring__arg, ::apache::thrift::ManagedStringViewWithConversions managed_string_view__arg, ::test::fixtures::python_capi::SomeError some_error__arg) :
    __fbthrift_field_booly(std::move(booly__arg)),
    __fbthrift_field_charry(std::move(charry__arg)),
    __fbthrift_field_shortay(std::move(shortay__arg)),
    __fbthrift_field_inty(std::move(inty__arg)),
    __fbthrift_field_longy(std::move(longy__arg)),
    __fbthrift_field_floaty(std::move(floaty__arg)),
    __fbthrift_field_dubby(std::move(dubby__arg)),
    __fbthrift_field_stringy(std::move(stringy__arg)),
    __fbthrift_field_bytey(std::move(bytey__arg)),
    __fbthrift_field_buffy(std::move(buffy__arg)),
    __fbthrift_field_pointbuffy(std::move(pointbuffy__arg)),
    __fbthrift_field_patched_struct(std::move(patched_struct__arg)),
    __fbthrift_field_empty_struct(std::move(empty_struct__arg)),
    __fbthrift_field_fbstring(std::move(fbstring__arg)),
    __fbthrift_field_managed_string_view(std::move(managed_string_view__arg)),
    __fbthrift_field_some_error(std::move(some_error__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
  __isset.set(folly::index_constant<11>(), true);
  __isset.set(folly::index_constant<12>(), true);
}

void PrimitiveStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_booly = bool();
  this->__fbthrift_field_charry = ::test::fixtures::python_capi::signed_byte();
  this->__fbthrift_field_shortay = uint16_t();
  this->__fbthrift_field_inty = ::std::int32_t();
  this->__fbthrift_field_longy = uint64_t();
  this->__fbthrift_field_floaty = float();
  this->__fbthrift_field_dubby.reset();
  this->__fbthrift_field_stringy.reset();
  this->__fbthrift_field_bytey.reset();
  this->__fbthrift_field_buffy = apache::thrift::StringTraits<::test::fixtures::python_capi::IOBuf>::fromStringLiteral("");
  this->__fbthrift_field_pointbuffy = apache::thrift::StringTraits<::test::fixtures::python_capi::IOBufPtr>::fromStringLiteral("");
  ::apache::thrift::clear(this->__fbthrift_field_patched_struct);
  this->__fbthrift_field_fbstring = apache::thrift::StringTraits<folly::fbstring>::fromStringLiteral("");
  this->__fbthrift_field_managed_string_view = apache::thrift::StringTraits<::apache::thrift::ManagedStringViewWithConversions>::fromStringLiteral("");
  ::apache::thrift::clear(this->__fbthrift_field_some_error);
  __isset = {};
}

void PrimitiveStruct::__fbthrift_clear_terse_fields() {
}

bool PrimitiveStruct::__fbthrift_is_empty() const {
  return false;
}

bool PrimitiveStruct::operator==([[maybe_unused]] const PrimitiveStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool PrimitiveStruct::operator<([[maybe_unused]] const PrimitiveStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


bool PrimitiveStruct::get_booly() const {
  return __fbthrift_field_booly;
}

bool& PrimitiveStruct::set_booly(bool booly_) {
  booly_ref() = booly_;
  return __fbthrift_field_booly;
}

::test::fixtures::python_capi::signed_byte PrimitiveStruct::get_charry() const {
  return __fbthrift_field_charry;
}

::test::fixtures::python_capi::signed_byte& PrimitiveStruct::set_charry(::test::fixtures::python_capi::signed_byte charry_) {
  charry_ref() = charry_;
  return __fbthrift_field_charry;
}

uint16_t PrimitiveStruct::get_shortay() const {
  return __fbthrift_field_shortay;
}

uint16_t& PrimitiveStruct::set_shortay(uint16_t shortay_) {
  shortay_ref() = shortay_;
  return __fbthrift_field_shortay;
}

::std::int32_t PrimitiveStruct::get_inty() const {
  return __fbthrift_field_inty;
}

::std::int32_t& PrimitiveStruct::set_inty(::std::int32_t inty_) {
  inty_ref() = inty_;
  return __fbthrift_field_inty;
}

uint64_t PrimitiveStruct::get_longy() const {
  return __fbthrift_field_longy;
}

uint64_t& PrimitiveStruct::set_longy(uint64_t longy_) {
  longy_ref() = longy_;
  return __fbthrift_field_longy;
}

const float* PrimitiveStruct::get_floaty() const& {
  return floaty_ref().has_value() ? std::addressof(__fbthrift_field_floaty) : nullptr;
}

float* PrimitiveStruct::get_floaty() & {
  return floaty_ref().has_value() ? std::addressof(__fbthrift_field_floaty) : nullptr;
}

float& PrimitiveStruct::set_floaty(float floaty_) {
  floaty_ref() = floaty_;
  return __fbthrift_field_floaty;
}

const ::test::fixtures::python_capi::MyStruct& PrimitiveStruct::get_patched_struct() const& {
  return __fbthrift_field_patched_struct;
}

::test::fixtures::python_capi::MyStruct PrimitiveStruct::get_patched_struct() && {
  return static_cast<::test::fixtures::python_capi::MyStruct&&>(__fbthrift_field_patched_struct);
}

const ::test::fixtures::python_capi::VapidStruct& PrimitiveStruct::get_empty_struct() const& {
  return __fbthrift_field_empty_struct;
}

::test::fixtures::python_capi::VapidStruct PrimitiveStruct::get_empty_struct() && {
  return static_cast<::test::fixtures::python_capi::VapidStruct&&>(__fbthrift_field_empty_struct);
}

const ::test::fixtures::python_capi::SomeError& PrimitiveStruct::get_some_error() const& {
  return __fbthrift_field_some_error;
}

::test::fixtures::python_capi::SomeError PrimitiveStruct::get_some_error() && {
  return static_cast<::test::fixtures::python_capi::SomeError&&>(__fbthrift_field_some_error);
}

void swap([[maybe_unused]] PrimitiveStruct& a, [[maybe_unused]] PrimitiveStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_booly, b.__fbthrift_field_booly);
  swap(a.__fbthrift_field_charry, b.__fbthrift_field_charry);
  swap(a.__fbthrift_field_shortay, b.__fbthrift_field_shortay);
  swap(a.__fbthrift_field_inty, b.__fbthrift_field_inty);
  swap(a.__fbthrift_field_longy, b.__fbthrift_field_longy);
  swap(a.__fbthrift_field_floaty, b.__fbthrift_field_floaty);
  swap(a.__fbthrift_field_dubby, b.__fbthrift_field_dubby);
  swap(a.__fbthrift_field_stringy, b.__fbthrift_field_stringy);
  swap(a.__fbthrift_field_bytey, b.__fbthrift_field_bytey);
  swap(a.__fbthrift_field_buffy, b.__fbthrift_field_buffy);
  swap(a.__fbthrift_field_pointbuffy, b.__fbthrift_field_pointbuffy);
  swap(a.__fbthrift_field_patched_struct, b.__fbthrift_field_patched_struct);
  swap(a.__fbthrift_field_empty_struct, b.__fbthrift_field_empty_struct);
  swap(a.__fbthrift_field_fbstring, b.__fbthrift_field_fbstring);
  swap(a.__fbthrift_field_managed_string_view, b.__fbthrift_field_managed_string_view);
  swap(a.__fbthrift_field_some_error, b.__fbthrift_field_some_error);
  swap(a.__isset, b.__isset);
}

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        PrimitiveStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::python_capi::MyStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        PrimitiveStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::python_capi::VapidStruct>,
    "inconsistent use of json option");

} // namespace test::fixtures::python_capi


namespace test::fixtures::python_capi {

std::string_view AdaptedFields::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/AdaptedFields";
}

std::string_view AdaptedFields::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<AdaptedFields>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view AdaptedFields::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<AdaptedFields>::name;
}

AdaptedFields::AdaptedFields(const AdaptedFields& srcObj) :
    __fbthrift_field_adapted_int(srcObj.__fbthrift_field_adapted_int),
    __fbthrift_field_list_adapted_int(srcObj.__fbthrift_field_list_adapted_int),
    __fbthrift_field_set_adapted_int(srcObj.__fbthrift_field_set_adapted_int),
    __fbthrift_field_inline_adapted_int(srcObj.__fbthrift_field_inline_adapted_int),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ProtocolId>, 1>(__fbthrift_field_adapted_int, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4>(__fbthrift_field_inline_adapted_int, *this);
}

static void __fbthrift_swap(AdaptedFields& lhs, AdaptedFields& rhs) { swap(lhs, rhs); }
AdaptedFields& AdaptedFields::operator=(const AdaptedFields& other) {
  AdaptedFields tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

AdaptedFields::AdaptedFields() :
    __fbthrift_field_adapted_int(),
    __fbthrift_field_inline_adapted_int() {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ProtocolId>, 1>(__fbthrift_field_adapted_int, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4>(__fbthrift_field_inline_adapted_int, *this);
}


AdaptedFields::~AdaptedFields() {}

AdaptedFields::AdaptedFields([[maybe_unused]] AdaptedFields&& other) noexcept :
    __fbthrift_field_adapted_int(std::move(other.__fbthrift_field_adapted_int)),
    __fbthrift_field_list_adapted_int(std::move(other.__fbthrift_field_list_adapted_int)),
    __fbthrift_field_set_adapted_int(std::move(other.__fbthrift_field_set_adapted_int)),
    __fbthrift_field_inline_adapted_int(std::move(other.__fbthrift_field_inline_adapted_int)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ProtocolId>, 1>(__fbthrift_field_adapted_int, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4>(__fbthrift_field_inline_adapted_int, *this);
}

AdaptedFields& AdaptedFields::operator=([[maybe_unused]] AdaptedFields&& other) noexcept {
    this->__fbthrift_field_adapted_int = std::move(other.__fbthrift_field_adapted_int);
    this->__fbthrift_field_list_adapted_int = std::move(other.__fbthrift_field_list_adapted_int);
    this->__fbthrift_field_set_adapted_int = std::move(other.__fbthrift_field_set_adapted_int);
    this->__fbthrift_field_inline_adapted_int = std::move(other.__fbthrift_field_inline_adapted_int);
    __isset = other.__isset;
    return *this;
}


AdaptedFields::AdaptedFields(apache::thrift::FragileConstructor, ::apache::thrift::type::ProtocolId adapted_int__arg, ::std::vector<::apache::thrift::type::FieldId> list_adapted_int__arg, ::apache::thrift::type::AnnotationIds set_adapted_int__arg, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4, ::apache::thrift::type::ExternId, AdaptedFields> inline_adapted_int__arg) :
    __fbthrift_field_adapted_int(std::move(adapted_int__arg)),
    __fbthrift_field_list_adapted_int(std::move(list_adapted_int__arg)),
    __fbthrift_field_set_adapted_int(std::move(set_adapted_int__arg)),
    __fbthrift_field_inline_adapted_int(std::move(inline_adapted_int__arg)) { 
  ::apache::thrift::adapt_detail::construct<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ProtocolId>, 1>(__fbthrift_field_adapted_int, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4>(__fbthrift_field_inline_adapted_int, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}

void AdaptedFields::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ProtocolId>, 1>(__fbthrift_field_adapted_int, *this);
  this->__fbthrift_field_list_adapted_int.clear();
  this->__fbthrift_field_set_adapted_int.clear();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4>(__fbthrift_field_inline_adapted_int, *this);
  __isset = {};
}

void AdaptedFields::__fbthrift_clear_terse_fields() {
}

bool AdaptedFields::__fbthrift_is_empty() const {
  return false;
}

bool AdaptedFields::operator==([[maybe_unused]] const AdaptedFields& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool AdaptedFields::operator<([[maybe_unused]] const AdaptedFields& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::std::vector<::apache::thrift::type::FieldId>& AdaptedFields::get_list_adapted_int() const& {
  return __fbthrift_field_list_adapted_int;
}

::std::vector<::apache::thrift::type::FieldId> AdaptedFields::get_list_adapted_int() && {
  return static_cast<::std::vector<::apache::thrift::type::FieldId>&&>(__fbthrift_field_list_adapted_int);
}

const ::apache::thrift::type::AnnotationIds& AdaptedFields::get_set_adapted_int() const& {
  return __fbthrift_field_set_adapted_int;
}

::apache::thrift::type::AnnotationIds AdaptedFields::get_set_adapted_int() && {
  return static_cast<::apache::thrift::type::AnnotationIds&&>(__fbthrift_field_set_adapted_int);
}

void swap([[maybe_unused]] AdaptedFields& a, [[maybe_unused]] AdaptedFields& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_adapted_int, b.__fbthrift_field_adapted_int);
  swap(a.__fbthrift_field_list_adapted_int, b.__fbthrift_field_list_adapted_int);
  swap(a.__fbthrift_field_set_adapted_int, b.__fbthrift_field_set_adapted_int);
  swap(a.__fbthrift_field_inline_adapted_int, b.__fbthrift_field_inline_adapted_int);
  swap(a.__isset, b.__isset);
}


} // namespace test::fixtures::python_capi


namespace test::fixtures::python_capi {

std::string_view ListStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/ListStruct";
}

std::string_view ListStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<ListStruct>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view ListStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<ListStruct>::name;
}

ListStruct::ListStruct() {
}


ListStruct::~ListStruct() {}

ListStruct::ListStruct([[maybe_unused]] ListStruct&& other) noexcept :
    __fbthrift_field_boolz(std::move(other.__fbthrift_field_boolz)),
    __fbthrift_field_intz(std::move(other.__fbthrift_field_intz)),
    __fbthrift_field_stringz(std::move(other.__fbthrift_field_stringz)),
    __fbthrift_field_encoded(std::move(other.__fbthrift_field_encoded)),
    __fbthrift_field_uidz(std::move(other.__fbthrift_field_uidz)),
    __fbthrift_field_matrix(std::move(other.__fbthrift_field_matrix)),
    __fbthrift_field_ucharz(std::move(other.__fbthrift_field_ucharz)),
    __fbthrift_field_voxels(std::move(other.__fbthrift_field_voxels)),
    __fbthrift_field_buf_ptrs(std::move(other.__fbthrift_field_buf_ptrs)),
    __isset(other.__isset) {
}

ListStruct& ListStruct::operator=([[maybe_unused]] ListStruct&& other) noexcept {
    this->__fbthrift_field_boolz = std::move(other.__fbthrift_field_boolz);
    this->__fbthrift_field_intz = std::move(other.__fbthrift_field_intz);
    this->__fbthrift_field_stringz = std::move(other.__fbthrift_field_stringz);
    this->__fbthrift_field_encoded = std::move(other.__fbthrift_field_encoded);
    this->__fbthrift_field_uidz = std::move(other.__fbthrift_field_uidz);
    this->__fbthrift_field_matrix = std::move(other.__fbthrift_field_matrix);
    this->__fbthrift_field_ucharz = std::move(other.__fbthrift_field_ucharz);
    this->__fbthrift_field_voxels = std::move(other.__fbthrift_field_voxels);
    this->__fbthrift_field_buf_ptrs = std::move(other.__fbthrift_field_buf_ptrs);
    __isset = other.__isset;
    return *this;
}


ListStruct::ListStruct(apache::thrift::FragileConstructor, ::std::vector<bool> boolz__arg, ::std::vector<::std::int64_t> intz__arg, ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::string>> stringz__arg, std::deque<::std::string> encoded__arg, std::deque<uint64_t> uidz__arg, ::std::vector<::std::vector<double>> matrix__arg, folly::small_vector<folly::small_vector<uint8_t>> ucharz__arg, folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>> voxels__arg, ::std::vector<::test::fixtures::python_capi::IOBufPtr> buf_ptrs__arg) :
    __fbthrift_field_boolz(std::move(boolz__arg)),
    __fbthrift_field_intz(std::move(intz__arg)),
    __fbthrift_field_stringz(std::move(stringz__arg)),
    __fbthrift_field_encoded(std::move(encoded__arg)),
    __fbthrift_field_uidz(std::move(uidz__arg)),
    __fbthrift_field_matrix(std::move(matrix__arg)),
    __fbthrift_field_ucharz(std::move(ucharz__arg)),
    __fbthrift_field_voxels(std::move(voxels__arg)),
    __fbthrift_field_buf_ptrs(std::move(buf_ptrs__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
}

void ListStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_boolz.clear();
  this->__fbthrift_field_intz.clear();
  this->__fbthrift_field_stringz.reset();
  this->__fbthrift_field_encoded.clear();
  this->__fbthrift_field_uidz.clear();
  this->__fbthrift_field_matrix.clear();
  this->__fbthrift_field_ucharz.clear();
  this->__fbthrift_field_voxels.clear();
  this->__fbthrift_field_buf_ptrs.clear();
  __isset = {};
}

void ListStruct::__fbthrift_clear_terse_fields() {
}

bool ListStruct::__fbthrift_is_empty() const {
  return false;
}

bool ListStruct::operator==([[maybe_unused]] const ListStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool ListStruct::operator<([[maybe_unused]] const ListStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::std::vector<bool>& ListStruct::get_boolz() const& {
  return __fbthrift_field_boolz;
}

::std::vector<bool> ListStruct::get_boolz() && {
  return static_cast<::std::vector<bool>&&>(__fbthrift_field_boolz);
}

const ::std::vector<::std::int64_t>* ListStruct::get_intz() const& {
  return intz_ref().has_value() ? std::addressof(__fbthrift_field_intz) : nullptr;
}

::std::vector<::std::int64_t>* ListStruct::get_intz() & {
  return intz_ref().has_value() ? std::addressof(__fbthrift_field_intz) : nullptr;
}

const std::deque<::std::string>& ListStruct::get_encoded() const& {
  return __fbthrift_field_encoded;
}

std::deque<::std::string> ListStruct::get_encoded() && {
  return static_cast<std::deque<::std::string>&&>(__fbthrift_field_encoded);
}

const std::deque<uint64_t>& ListStruct::get_uidz() const& {
  return __fbthrift_field_uidz;
}

std::deque<uint64_t> ListStruct::get_uidz() && {
  return static_cast<std::deque<uint64_t>&&>(__fbthrift_field_uidz);
}

const ::std::vector<::std::vector<double>>& ListStruct::get_matrix() const& {
  return __fbthrift_field_matrix;
}

::std::vector<::std::vector<double>> ListStruct::get_matrix() && {
  return static_cast<::std::vector<::std::vector<double>>&&>(__fbthrift_field_matrix);
}

const folly::small_vector<folly::small_vector<uint8_t>>& ListStruct::get_ucharz() const& {
  return __fbthrift_field_ucharz;
}

folly::small_vector<folly::small_vector<uint8_t>> ListStruct::get_ucharz() && {
  return static_cast<folly::small_vector<folly::small_vector<uint8_t>>&&>(__fbthrift_field_ucharz);
}

const folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>& ListStruct::get_voxels() const& {
  return __fbthrift_field_voxels;
}

folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>> ListStruct::get_voxels() && {
  return static_cast<folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>&&>(__fbthrift_field_voxels);
}

const ::std::vector<::test::fixtures::python_capi::IOBufPtr>& ListStruct::get_buf_ptrs() const& {
  return __fbthrift_field_buf_ptrs;
}

::std::vector<::test::fixtures::python_capi::IOBufPtr> ListStruct::get_buf_ptrs() && {
  return static_cast<::std::vector<::test::fixtures::python_capi::IOBufPtr>&&>(__fbthrift_field_buf_ptrs);
}

void swap([[maybe_unused]] ListStruct& a, [[maybe_unused]] ListStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_boolz, b.__fbthrift_field_boolz);
  swap(a.__fbthrift_field_intz, b.__fbthrift_field_intz);
  swap(a.__fbthrift_field_stringz, b.__fbthrift_field_stringz);
  swap(a.__fbthrift_field_encoded, b.__fbthrift_field_encoded);
  swap(a.__fbthrift_field_uidz, b.__fbthrift_field_uidz);
  swap(a.__fbthrift_field_matrix, b.__fbthrift_field_matrix);
  swap(a.__fbthrift_field_ucharz, b.__fbthrift_field_ucharz);
  swap(a.__fbthrift_field_voxels, b.__fbthrift_field_voxels);
  swap(a.__fbthrift_field_buf_ptrs, b.__fbthrift_field_buf_ptrs);
  swap(a.__isset, b.__isset);
}


} // namespace test::fixtures::python_capi


namespace test::fixtures::python_capi {

std::string_view SetStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/SetStruct";
}

std::string_view SetStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<SetStruct>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view SetStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<SetStruct>::name;
}

SetStruct::SetStruct(const SetStruct&) = default;
SetStruct& SetStruct::operator=(const SetStruct&) = default;
SetStruct::SetStruct() {
}


SetStruct::~SetStruct() {}

SetStruct::SetStruct([[maybe_unused]] SetStruct&& other) noexcept :
    __fbthrift_field_enumz(std::move(other.__fbthrift_field_enumz)),
    __fbthrift_field_intz(std::move(other.__fbthrift_field_intz)),
    __fbthrift_field_binnaz(std::move(other.__fbthrift_field_binnaz)),
    __fbthrift_field_encoded(std::move(other.__fbthrift_field_encoded)),
    __fbthrift_field_uidz(std::move(other.__fbthrift_field_uidz)),
    __fbthrift_field_charz(std::move(other.__fbthrift_field_charz)),
    __fbthrift_field_setz(std::move(other.__fbthrift_field_setz)),
    __isset(other.__isset) {
}

SetStruct& SetStruct::operator=([[maybe_unused]] SetStruct&& other) noexcept {
    this->__fbthrift_field_enumz = std::move(other.__fbthrift_field_enumz);
    this->__fbthrift_field_intz = std::move(other.__fbthrift_field_intz);
    this->__fbthrift_field_binnaz = std::move(other.__fbthrift_field_binnaz);
    this->__fbthrift_field_encoded = std::move(other.__fbthrift_field_encoded);
    this->__fbthrift_field_uidz = std::move(other.__fbthrift_field_uidz);
    this->__fbthrift_field_charz = std::move(other.__fbthrift_field_charz);
    this->__fbthrift_field_setz = std::move(other.__fbthrift_field_setz);
    __isset = other.__isset;
    return *this;
}


SetStruct::SetStruct(apache::thrift::FragileConstructor, ::std::set<::test::fixtures::python_capi::MyEnum> enumz__arg, ::std::set<::std::int32_t> intz__arg, ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::string>> binnaz__arg, std::unordered_set<::std::string> encoded__arg, std::unordered_set<uint64_t> uidz__arg, folly::F14FastSet<uint8_t> charz__arg, ::std::vector<::std::set<::std::int64_t>> setz__arg) :
    __fbthrift_field_enumz(std::move(enumz__arg)),
    __fbthrift_field_intz(std::move(intz__arg)),
    __fbthrift_field_binnaz(std::move(binnaz__arg)),
    __fbthrift_field_encoded(std::move(encoded__arg)),
    __fbthrift_field_uidz(std::move(uidz__arg)),
    __fbthrift_field_charz(std::move(charz__arg)),
    __fbthrift_field_setz(std::move(setz__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
}

void SetStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_enumz.clear();
  this->__fbthrift_field_intz.clear();
  this->__fbthrift_field_binnaz.reset();
  this->__fbthrift_field_encoded.clear();
  this->__fbthrift_field_uidz.clear();
  this->__fbthrift_field_charz.clear();
  this->__fbthrift_field_setz.clear();
  __isset = {};
}

void SetStruct::__fbthrift_clear_terse_fields() {
}

bool SetStruct::__fbthrift_is_empty() const {
  return false;
}

bool SetStruct::operator==([[maybe_unused]] const SetStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool SetStruct::operator<([[maybe_unused]] const SetStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::std::set<::test::fixtures::python_capi::MyEnum>& SetStruct::get_enumz() const& {
  return __fbthrift_field_enumz;
}

::std::set<::test::fixtures::python_capi::MyEnum> SetStruct::get_enumz() && {
  return static_cast<::std::set<::test::fixtures::python_capi::MyEnum>&&>(__fbthrift_field_enumz);
}

const ::std::set<::std::int32_t>* SetStruct::get_intz() const& {
  return intz_ref().has_value() ? std::addressof(__fbthrift_field_intz) : nullptr;
}

::std::set<::std::int32_t>* SetStruct::get_intz() & {
  return intz_ref().has_value() ? std::addressof(__fbthrift_field_intz) : nullptr;
}

const std::unordered_set<::std::string>& SetStruct::get_encoded() const& {
  return __fbthrift_field_encoded;
}

std::unordered_set<::std::string> SetStruct::get_encoded() && {
  return static_cast<std::unordered_set<::std::string>&&>(__fbthrift_field_encoded);
}

const std::unordered_set<uint64_t>& SetStruct::get_uidz() const& {
  return __fbthrift_field_uidz;
}

std::unordered_set<uint64_t> SetStruct::get_uidz() && {
  return static_cast<std::unordered_set<uint64_t>&&>(__fbthrift_field_uidz);
}

const folly::F14FastSet<uint8_t>& SetStruct::get_charz() const& {
  return __fbthrift_field_charz;
}

folly::F14FastSet<uint8_t> SetStruct::get_charz() && {
  return static_cast<folly::F14FastSet<uint8_t>&&>(__fbthrift_field_charz);
}

const ::std::vector<::std::set<::std::int64_t>>& SetStruct::get_setz() const& {
  return __fbthrift_field_setz;
}

::std::vector<::std::set<::std::int64_t>> SetStruct::get_setz() && {
  return static_cast<::std::vector<::std::set<::std::int64_t>>&&>(__fbthrift_field_setz);
}

void swap([[maybe_unused]] SetStruct& a, [[maybe_unused]] SetStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_enumz, b.__fbthrift_field_enumz);
  swap(a.__fbthrift_field_intz, b.__fbthrift_field_intz);
  swap(a.__fbthrift_field_binnaz, b.__fbthrift_field_binnaz);
  swap(a.__fbthrift_field_encoded, b.__fbthrift_field_encoded);
  swap(a.__fbthrift_field_uidz, b.__fbthrift_field_uidz);
  swap(a.__fbthrift_field_charz, b.__fbthrift_field_charz);
  swap(a.__fbthrift_field_setz, b.__fbthrift_field_setz);
  swap(a.__isset, b.__isset);
}


} // namespace test::fixtures::python_capi


namespace test::fixtures::python_capi {

std::string_view MapStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/MapStruct";
}

std::string_view MapStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MapStruct>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view MapStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MapStruct>::name;
}

MapStruct::MapStruct(const MapStruct& srcObj) :
    __fbthrift_field_enumz(srcObj.__fbthrift_field_enumz),
    __fbthrift_field_intz(srcObj.__fbthrift_field_intz),
    __fbthrift_field_binnaz(srcObj.__fbthrift_field_binnaz),
    __fbthrift_field_encoded(srcObj.__fbthrift_field_encoded),
    __fbthrift_field_flotz(srcObj.__fbthrift_field_flotz),
    __fbthrift_field_map_list(srcObj.__fbthrift_field_map_list),
    __fbthrift_field_list_map(srcObj.__fbthrift_field_list_map),
    __fbthrift_field_fast_list_map(srcObj.__fbthrift_field_fast_list_map),
    __fbthrift_field_buf_map(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>>(srcObj.__fbthrift_field_buf_map)),
    __fbthrift_field_unsigned_list_map(srcObj.__fbthrift_field_unsigned_list_map),
    __isset(srcObj.__isset) {
}

static void __fbthrift_swap(MapStruct& lhs, MapStruct& rhs) { swap(lhs, rhs); }
MapStruct& MapStruct::operator=(const MapStruct& other) {
  MapStruct tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

MapStruct::MapStruct() {
}


MapStruct::~MapStruct() {}

MapStruct::MapStruct([[maybe_unused]] MapStruct&& other) noexcept :
    __fbthrift_field_enumz(std::move(other.__fbthrift_field_enumz)),
    __fbthrift_field_intz(std::move(other.__fbthrift_field_intz)),
    __fbthrift_field_binnaz(std::move(other.__fbthrift_field_binnaz)),
    __fbthrift_field_encoded(std::move(other.__fbthrift_field_encoded)),
    __fbthrift_field_flotz(std::move(other.__fbthrift_field_flotz)),
    __fbthrift_field_map_list(std::move(other.__fbthrift_field_map_list)),
    __fbthrift_field_list_map(std::move(other.__fbthrift_field_list_map)),
    __fbthrift_field_fast_list_map(std::move(other.__fbthrift_field_fast_list_map)),
    __fbthrift_field_buf_map(std::move(other.__fbthrift_field_buf_map)),
    __fbthrift_field_unsigned_list_map(std::move(other.__fbthrift_field_unsigned_list_map)),
    __isset(other.__isset) {
}

MapStruct& MapStruct::operator=([[maybe_unused]] MapStruct&& other) noexcept {
    this->__fbthrift_field_enumz = std::move(other.__fbthrift_field_enumz);
    this->__fbthrift_field_intz = std::move(other.__fbthrift_field_intz);
    this->__fbthrift_field_binnaz = std::move(other.__fbthrift_field_binnaz);
    this->__fbthrift_field_encoded = std::move(other.__fbthrift_field_encoded);
    this->__fbthrift_field_flotz = std::move(other.__fbthrift_field_flotz);
    this->__fbthrift_field_map_list = std::move(other.__fbthrift_field_map_list);
    this->__fbthrift_field_list_map = std::move(other.__fbthrift_field_list_map);
    this->__fbthrift_field_fast_list_map = std::move(other.__fbthrift_field_fast_list_map);
    this->__fbthrift_field_buf_map = std::move(other.__fbthrift_field_buf_map);
    this->__fbthrift_field_unsigned_list_map = std::move(other.__fbthrift_field_unsigned_list_map);
    __isset = other.__isset;
    return *this;
}


MapStruct::MapStruct(apache::thrift::FragileConstructor, ::std::map<::test::fixtures::python_capi::MyEnum, ::std::string> enumz__arg, ::std::map<::std::int32_t, ::std::string> intz__arg, ::apache::thrift::detail::boxed_value_ptr<::std::map<::std::string, ::test::fixtures::python_capi::PrimitiveStruct>> binnaz__arg, std::unordered_map<::std::string, double> encoded__arg, std::unordered_map<uint64_t, float> flotz__arg, ::std::vector<::std::map<::std::int32_t, ::std::int64_t>> map_list__arg, ::std::map<::std::int32_t, ::std::vector<::std::int64_t>> list_map__arg, folly::F14FastMap<int, folly::fbvector<double>> fast_list_map__arg, ::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr> buf_map__arg, ::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>> unsigned_list_map__arg) :
    __fbthrift_field_enumz(std::move(enumz__arg)),
    __fbthrift_field_intz(std::move(intz__arg)),
    __fbthrift_field_binnaz(std::move(binnaz__arg)),
    __fbthrift_field_encoded(std::move(encoded__arg)),
    __fbthrift_field_flotz(std::move(flotz__arg)),
    __fbthrift_field_map_list(std::move(map_list__arg)),
    __fbthrift_field_list_map(std::move(list_map__arg)),
    __fbthrift_field_fast_list_map(std::move(fast_list_map__arg)),
    __fbthrift_field_buf_map(std::move(buf_map__arg)),
    __fbthrift_field_unsigned_list_map(std::move(unsigned_list_map__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
}

void MapStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_enumz.clear();
  this->__fbthrift_field_intz.clear();
  this->__fbthrift_field_binnaz.reset();
  this->__fbthrift_field_encoded.clear();
  this->__fbthrift_field_flotz.clear();
  this->__fbthrift_field_map_list.clear();
  this->__fbthrift_field_list_map.clear();
  this->__fbthrift_field_fast_list_map.clear();
  this->__fbthrift_field_buf_map.clear();
  this->__fbthrift_field_unsigned_list_map.clear();
  __isset = {};
}

void MapStruct::__fbthrift_clear_terse_fields() {
}

bool MapStruct::__fbthrift_is_empty() const {
  return false;
}

bool MapStruct::operator==([[maybe_unused]] const MapStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MapStruct::operator<([[maybe_unused]] const MapStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::std::map<::test::fixtures::python_capi::MyEnum, ::std::string>& MapStruct::get_enumz() const& {
  return __fbthrift_field_enumz;
}

::std::map<::test::fixtures::python_capi::MyEnum, ::std::string> MapStruct::get_enumz() && {
  return static_cast<::std::map<::test::fixtures::python_capi::MyEnum, ::std::string>&&>(__fbthrift_field_enumz);
}

const ::std::map<::std::int32_t, ::std::string>* MapStruct::get_intz() const& {
  return intz_ref().has_value() ? std::addressof(__fbthrift_field_intz) : nullptr;
}

::std::map<::std::int32_t, ::std::string>* MapStruct::get_intz() & {
  return intz_ref().has_value() ? std::addressof(__fbthrift_field_intz) : nullptr;
}

const std::unordered_map<::std::string, double>& MapStruct::get_encoded() const& {
  return __fbthrift_field_encoded;
}

std::unordered_map<::std::string, double> MapStruct::get_encoded() && {
  return static_cast<std::unordered_map<::std::string, double>&&>(__fbthrift_field_encoded);
}

const std::unordered_map<uint64_t, float>& MapStruct::get_flotz() const& {
  return __fbthrift_field_flotz;
}

std::unordered_map<uint64_t, float> MapStruct::get_flotz() && {
  return static_cast<std::unordered_map<uint64_t, float>&&>(__fbthrift_field_flotz);
}

const ::std::vector<::std::map<::std::int32_t, ::std::int64_t>>& MapStruct::get_map_list() const& {
  return __fbthrift_field_map_list;
}

::std::vector<::std::map<::std::int32_t, ::std::int64_t>> MapStruct::get_map_list() && {
  return static_cast<::std::vector<::std::map<::std::int32_t, ::std::int64_t>>&&>(__fbthrift_field_map_list);
}

const ::std::map<::std::int32_t, ::std::vector<::std::int64_t>>& MapStruct::get_list_map() const& {
  return __fbthrift_field_list_map;
}

::std::map<::std::int32_t, ::std::vector<::std::int64_t>> MapStruct::get_list_map() && {
  return static_cast<::std::map<::std::int32_t, ::std::vector<::std::int64_t>>&&>(__fbthrift_field_list_map);
}

const folly::F14FastMap<int, folly::fbvector<double>>& MapStruct::get_fast_list_map() const& {
  return __fbthrift_field_fast_list_map;
}

folly::F14FastMap<int, folly::fbvector<double>> MapStruct::get_fast_list_map() && {
  return static_cast<folly::F14FastMap<int, folly::fbvector<double>>&&>(__fbthrift_field_fast_list_map);
}

const ::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr>& MapStruct::get_buf_map() const& {
  return __fbthrift_field_buf_map;
}

::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr> MapStruct::get_buf_map() && {
  return static_cast<::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr>&&>(__fbthrift_field_buf_map);
}

const ::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>>& MapStruct::get_unsigned_list_map() const& {
  return __fbthrift_field_unsigned_list_map;
}

::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>> MapStruct::get_unsigned_list_map() && {
  return static_cast<::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>>&&>(__fbthrift_field_unsigned_list_map);
}

void swap([[maybe_unused]] MapStruct& a, [[maybe_unused]] MapStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_enumz, b.__fbthrift_field_enumz);
  swap(a.__fbthrift_field_intz, b.__fbthrift_field_intz);
  swap(a.__fbthrift_field_binnaz, b.__fbthrift_field_binnaz);
  swap(a.__fbthrift_field_encoded, b.__fbthrift_field_encoded);
  swap(a.__fbthrift_field_flotz, b.__fbthrift_field_flotz);
  swap(a.__fbthrift_field_map_list, b.__fbthrift_field_map_list);
  swap(a.__fbthrift_field_list_map, b.__fbthrift_field_list_map);
  swap(a.__fbthrift_field_fast_list_map, b.__fbthrift_field_fast_list_map);
  swap(a.__fbthrift_field_buf_map, b.__fbthrift_field_buf_map);
  swap(a.__fbthrift_field_unsigned_list_map, b.__fbthrift_field_unsigned_list_map);
  swap(a.__isset, b.__isset);
}

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MapStruct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::structure>,
        ::std::map<::std::string, ::test::fixtures::python_capi::PrimitiveStruct>>,
    "inconsistent use of json option");

} // namespace test::fixtures::python_capi


namespace test::fixtures::python_capi {

std::string_view ComposeStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/ComposeStruct";
}

std::string_view ComposeStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<ComposeStruct>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view ComposeStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<ComposeStruct>::name;
}

ComposeStruct::ComposeStruct() :
    __fbthrift_field_enum_(),
    __fbthrift_field_renamed_(),
    __fbthrift_field_aliased(std::make_shared<::test::fixtures::python_capi::ListAlias>()),
    __fbthrift_field_xenum() {
}


ComposeStruct::~ComposeStruct() {}

ComposeStruct::ComposeStruct([[maybe_unused]] ComposeStruct&& other) noexcept :
    __fbthrift_field_enum_(std::move(other.__fbthrift_field_enum_)),
    __fbthrift_field_renamed_(std::move(other.__fbthrift_field_renamed_)),
    __fbthrift_field_primitive(std::move(other.__fbthrift_field_primitive)),
    __fbthrift_field_aliased(std::move(other.__fbthrift_field_aliased)),
    __fbthrift_field_xstruct(std::move(other.__fbthrift_field_xstruct)),
    __fbthrift_field_xenum(std::move(other.__fbthrift_field_xenum)),
    __fbthrift_field_serial_struct(std::move(other.__fbthrift_field_serial_struct)),
    __fbthrift_field_friends(std::move(other.__fbthrift_field_friends)),
    __fbthrift_field_serial_union(std::move(other.__fbthrift_field_serial_union)),
    __fbthrift_field_serial_error(std::move(other.__fbthrift_field_serial_error)),
    __isset(other.__isset) {
}

ComposeStruct& ComposeStruct::operator=([[maybe_unused]] ComposeStruct&& other) noexcept {
    this->__fbthrift_field_enum_ = std::move(other.__fbthrift_field_enum_);
    this->__fbthrift_field_renamed_ = std::move(other.__fbthrift_field_renamed_);
    this->__fbthrift_field_primitive = std::move(other.__fbthrift_field_primitive);
    this->__fbthrift_field_aliased = std::move(other.__fbthrift_field_aliased);
    this->__fbthrift_field_xstruct = std::move(other.__fbthrift_field_xstruct);
    this->__fbthrift_field_xenum = std::move(other.__fbthrift_field_xenum);
    this->__fbthrift_field_serial_struct = std::move(other.__fbthrift_field_serial_struct);
    this->__fbthrift_field_friends = std::move(other.__fbthrift_field_friends);
    this->__fbthrift_field_serial_union = std::move(other.__fbthrift_field_serial_union);
    this->__fbthrift_field_serial_error = std::move(other.__fbthrift_field_serial_error);
    __isset = other.__isset;
    return *this;
}


ComposeStruct::ComposeStruct(apache::thrift::FragileConstructor, ::test::fixtures::python_capi::MyEnum enum___arg, ::test::fixtures::python_capi::NormalDecentEnum renamed___arg, ::test::fixtures::python_capi::PrimitiveStruct primitive__arg, ::std::shared_ptr<const ::test::fixtures::python_capi::ListAlias> aliased__arg, ::test::fixtures::python_capi::DepStruct xstruct__arg, ::test::fixtures::python_capi::DepEnum xenum__arg, ::test::fixtures::python_capi::SerializedStruct serial_struct__arg, ::std::vector<::test::fixtures::python_capi::DepStruct> friends__arg, ::test::fixtures::python_capi::SerializedUnion serial_union__arg, ::test::fixtures::python_capi::SerializedError serial_error__arg) :
    __fbthrift_field_enum_(std::move(enum___arg)),
    __fbthrift_field_renamed_(std::move(renamed___arg)),
    __fbthrift_field_primitive(std::move(primitive__arg)),
    __fbthrift_field_aliased(std::move(aliased__arg)),
    __fbthrift_field_xstruct(std::move(xstruct__arg)),
    __fbthrift_field_xenum(std::move(xenum__arg)),
    __fbthrift_field_serial_struct(std::move(serial_struct__arg)),
    __fbthrift_field_friends(std::move(friends__arg)),
    __fbthrift_field_serial_union(std::move(serial_union__arg)),
    __fbthrift_field_serial_error(std::move(serial_error__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
}

void ComposeStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_enum_ = ::test::fixtures::python_capi::MyEnum();
  this->__fbthrift_field_renamed_ = ::test::fixtures::python_capi::NormalDecentEnum();
  ::apache::thrift::clear(this->__fbthrift_field_primitive);
  if (this->__fbthrift_field_aliased) this->__fbthrift_field_aliased = ::apache::thrift::detail::make_mutable_smart_ptr<::std::shared_ptr<const ::test::fixtures::python_capi::ListAlias>>();
  ::apache::thrift::clear(this->__fbthrift_field_xstruct);
  this->__fbthrift_field_xenum = ::test::fixtures::python_capi::DepEnum();
  ::apache::thrift::clear(this->__fbthrift_field_serial_struct);
  this->__fbthrift_field_friends.clear();
  ::apache::thrift::clear(this->__fbthrift_field_serial_union);
  ::apache::thrift::clear(this->__fbthrift_field_serial_error);
  __isset = {};
}

void ComposeStruct::__fbthrift_clear_terse_fields() {
}

bool ComposeStruct::__fbthrift_is_empty() const {
  return false;
}

bool ComposeStruct::operator==([[maybe_unused]] const ComposeStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool ComposeStruct::operator<([[maybe_unused]] const ComposeStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::test::fixtures::python_capi::MyEnum ComposeStruct::get_enum_() const {
  return __fbthrift_field_enum_;
}

::test::fixtures::python_capi::MyEnum& ComposeStruct::set_enum_(::test::fixtures::python_capi::MyEnum enum__) {
  enum__ref() = enum__;
  return __fbthrift_field_enum_;
}

::test::fixtures::python_capi::NormalDecentEnum ComposeStruct::get_renamed_() const {
  return __fbthrift_field_renamed_;
}

::test::fixtures::python_capi::NormalDecentEnum& ComposeStruct::set_renamed_(::test::fixtures::python_capi::NormalDecentEnum renamed__) {
  renamed__ref() = renamed__;
  return __fbthrift_field_renamed_;
}

const ::test::fixtures::python_capi::PrimitiveStruct& ComposeStruct::get_primitive() const& {
  return __fbthrift_field_primitive;
}

::test::fixtures::python_capi::PrimitiveStruct ComposeStruct::get_primitive() && {
  return static_cast<::test::fixtures::python_capi::PrimitiveStruct&&>(__fbthrift_field_primitive);
}

const ::test::fixtures::python_capi::DepStruct& ComposeStruct::get_xstruct() const& {
  return __fbthrift_field_xstruct;
}

::test::fixtures::python_capi::DepStruct ComposeStruct::get_xstruct() && {
  return static_cast<::test::fixtures::python_capi::DepStruct&&>(__fbthrift_field_xstruct);
}

::test::fixtures::python_capi::DepEnum ComposeStruct::get_xenum() const {
  return __fbthrift_field_xenum;
}

::test::fixtures::python_capi::DepEnum& ComposeStruct::set_xenum(::test::fixtures::python_capi::DepEnum xenum_) {
  xenum_ref() = xenum_;
  return __fbthrift_field_xenum;
}

const ::test::fixtures::python_capi::SerializedStruct& ComposeStruct::get_serial_struct() const& {
  return __fbthrift_field_serial_struct;
}

::test::fixtures::python_capi::SerializedStruct ComposeStruct::get_serial_struct() && {
  return static_cast<::test::fixtures::python_capi::SerializedStruct&&>(__fbthrift_field_serial_struct);
}

const ::std::vector<::test::fixtures::python_capi::DepStruct>& ComposeStruct::get_friends() const& {
  return __fbthrift_field_friends;
}

::std::vector<::test::fixtures::python_capi::DepStruct> ComposeStruct::get_friends() && {
  return static_cast<::std::vector<::test::fixtures::python_capi::DepStruct>&&>(__fbthrift_field_friends);
}

const ::test::fixtures::python_capi::SerializedUnion& ComposeStruct::get_serial_union() const& {
  return __fbthrift_field_serial_union;
}

::test::fixtures::python_capi::SerializedUnion ComposeStruct::get_serial_union() && {
  return static_cast<::test::fixtures::python_capi::SerializedUnion&&>(__fbthrift_field_serial_union);
}

const ::test::fixtures::python_capi::SerializedError& ComposeStruct::get_serial_error() const& {
  return __fbthrift_field_serial_error;
}

::test::fixtures::python_capi::SerializedError ComposeStruct::get_serial_error() && {
  return static_cast<::test::fixtures::python_capi::SerializedError&&>(__fbthrift_field_serial_error);
}

void swap([[maybe_unused]] ComposeStruct& a, [[maybe_unused]] ComposeStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_enum_, b.__fbthrift_field_enum_);
  swap(a.__fbthrift_field_renamed_, b.__fbthrift_field_renamed_);
  swap(a.__fbthrift_field_primitive, b.__fbthrift_field_primitive);
  swap(a.__fbthrift_field_aliased, b.__fbthrift_field_aliased);
  swap(a.__fbthrift_field_xstruct, b.__fbthrift_field_xstruct);
  swap(a.__fbthrift_field_xenum, b.__fbthrift_field_xenum);
  swap(a.__fbthrift_field_serial_struct, b.__fbthrift_field_serial_struct);
  swap(a.__fbthrift_field_friends, b.__fbthrift_field_friends);
  swap(a.__fbthrift_field_serial_union, b.__fbthrift_field_serial_union);
  swap(a.__fbthrift_field_serial_error, b.__fbthrift_field_serial_error);
  swap(a.__isset, b.__isset);
}

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComposeStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::python_capi::PrimitiveStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComposeStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::python_capi::ListAlias>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComposeStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::python_capi::DepStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComposeStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::python_capi::SerializedStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComposeStruct,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector<::test::fixtures::python_capi::DepStruct>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComposeStruct,
        ::apache::thrift::type_class::variant,
        ::test::fixtures::python_capi::SerializedUnion>,
    "inconsistent use of json option");

} // namespace test::fixtures::python_capi


namespace apache { namespace thrift {

folly::Range<::test::fixtures::python_capi::Shallot::Type const*> const TEnumTraits<::test::fixtures::python_capi::Shallot::Type>::values = folly::range(TEnumDataStorage<::test::fixtures::python_capi::Shallot::Type>::values);
folly::Range<std::string_view const*> const TEnumTraits<::test::fixtures::python_capi::Shallot::Type>::names = folly::range(TEnumDataStorage<::test::fixtures::python_capi::Shallot::Type>::names);

bool TEnumTraits<::test::fixtures::python_capi::Shallot::Type>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::test::fixtures::python_capi::Shallot::Type>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace test::fixtures::python_capi {

std::string_view Shallot::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/Onion";
}

std::string_view Shallot::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Shallot>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view Shallot::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<Shallot>::name;
}

void Shallot::__fbthrift_destruct() {
  switch(getType()) {
    case Type::__EMPTY__:
      break;
    case Type::myEnum:
      ::std::destroy_at(::std::addressof(value_.myEnum));
      break;
    case Type::myStruct:
      ::std::destroy_at(::std::addressof(value_.myStruct));
      break;
    case Type::intSet:
      ::std::destroy_at(::std::addressof(value_.intSet));
      break;
    case Type::myString:
      ::std::destroy_at(::std::addressof(value_.myString));
      break;
    case Type::doubleList:
      ::std::destroy_at(::std::addressof(value_.doubleList));
      break;
    case Type::strMap:
      ::std::destroy_at(::std::addressof(value_.strMap));
      break;
    case Type::adapted_int:
      ::std::destroy_at(::std::addressof(value_.adapted_int));
      break;
    default:
      assert(false);
      break;
  }
}

void Shallot::__fbthrift_clear() {
  __fbthrift_destruct();
  fbthrift_type_ = folly::to_underlying(Type::__EMPTY__);
}

  Shallot::~Shallot() {
    __fbthrift_destruct();
  }

bool Shallot::__fbthrift_is_empty() const {
  return getType() == Type::__EMPTY__;
}
  Shallot::Shallot(const Shallot& rhs)
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        return;
      case Type::myEnum:
        set_myEnum(rhs.value_.myEnum);
        break;
      case Type::myStruct:
        set_myStruct(rhs.value_.myStruct);
        break;
      case Type::intSet:
        set_intSet(*rhs.value_.intSet);
        break;
      case Type::myString:
        set_myString(rhs.value_.myString);
        break;
      case Type::doubleList:
        set_doubleList(*rhs.value_.doubleList);
        break;
      case Type::strMap:
        set_strMap(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::string>>(rhs.value_.strMap));
        break;
      case Type::adapted_int:
        set_adapted_int(rhs.value_.adapted_int);
        break;
      default:
        assert(false);
    }
  }

    Shallot&Shallot::operator=(const Shallot& rhs) {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        __fbthrift_clear();
        return *this;
      case Type::myEnum:
        set_myEnum(rhs.value_.myEnum);
        break;
      case Type::myStruct:
        set_myStruct(rhs.value_.myStruct);
        break;
      case Type::intSet:
        set_intSet(*rhs.value_.intSet);
        break;
      case Type::myString:
        set_myString(rhs.value_.myString);
        break;
      case Type::doubleList:
        set_doubleList(*rhs.value_.doubleList);
        break;
      case Type::strMap:
        set_strMap(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::string>>(rhs.value_.strMap));
        break;
      case Type::adapted_int:
        set_adapted_int(rhs.value_.adapted_int);
        break;
      default:
        __fbthrift_clear();
        assert(false);
    }
    return *this;
  }


bool Shallot::operator==(const Shallot& rhs) const {
  return ::apache::thrift::op::detail::UnionEquality{}(*this, rhs);
}

bool Shallot::operator<([[maybe_unused]] const Shallot& rhs) const {
  return ::apache::thrift::op::detail::UnionLessThan{}(*this, rhs);
}

::apache::thrift::detail::boxed_value_ptr<::std::set<::std::int64_t>>& Shallot::set_intSet(::apache::thrift::detail::boxed_value_ptr<::std::set<::std::int64_t>> t) {
  __fbthrift_destruct();
  fbthrift_type_ = folly::to_underlying(Type::intSet);
  ::new (std::addressof(value_.intSet)) ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::int64_t>>(std::move(t));
  return value_.intSet;
}

::apache::thrift::detail::boxed_value_ptr<::std::set<::std::int64_t>>& Shallot::set_intSet(::std::set<::std::int64_t> const &t) {
  return set_intSet(::apache::thrift::detail::boxed_value_ptr<::std::set<::std::int64_t>>(::apache::thrift::detail::boxed_value_ptr<::std::set<::std::int64_t>>::element_type(t)));
}

::apache::thrift::detail::boxed_value_ptr<::std::set<::std::int64_t>>& Shallot::set_intSet(::std::set<::std::int64_t>&& t) {
  return set_intSet(::apache::thrift::detail::boxed_value_ptr<::std::set<::std::int64_t>>(::apache::thrift::detail::boxed_value_ptr<::std::set<::std::int64_t>>::element_type(std::move(t))));
}

::std::shared_ptr<const ::std::vector<double>>& Shallot::set_doubleList(::std::shared_ptr<const ::std::vector<double>> t) {
  __fbthrift_destruct();
  fbthrift_type_ = folly::to_underlying(Type::doubleList);
  ::new (std::addressof(value_.doubleList)) ::std::shared_ptr<const ::std::vector<double>>(std::move(t));
  return value_.doubleList;
}

::std::shared_ptr<const ::std::vector<double>>& Shallot::set_doubleList(::std::vector<double> const &t) {
  return set_doubleList(::std::shared_ptr<const ::std::vector<double>>(new ::std::shared_ptr<const ::std::vector<double>>::element_type(t)));
}

::std::shared_ptr<const ::std::vector<double>>& Shallot::set_doubleList(::std::vector<double>&& t) {
  return set_doubleList(::std::shared_ptr<const ::std::vector<double>>(new ::std::shared_ptr<const ::std::vector<double>>::element_type(std::move(t))));
}

::std::unique_ptr<::std::map<::std::string, ::std::string>>& Shallot::set_strMap(::std::unique_ptr<::std::map<::std::string, ::std::string>> t) {
  __fbthrift_destruct();
  fbthrift_type_ = folly::to_underlying(Type::strMap);
  ::new (std::addressof(value_.strMap)) ::std::unique_ptr<::std::map<::std::string, ::std::string>>(std::move(t));
  return value_.strMap;
}

::std::unique_ptr<::std::map<::std::string, ::std::string>>& Shallot::set_strMap(::std::map<::std::string, ::std::string> const &t) {
  return set_strMap(::std::unique_ptr<::std::map<::std::string, ::std::string>>(new ::std::unique_ptr<::std::map<::std::string, ::std::string>>::element_type(t)));
}

::std::unique_ptr<::std::map<::std::string, ::std::string>>& Shallot::set_strMap(::std::map<::std::string, ::std::string>&& t) {
  return set_strMap(::std::unique_ptr<::std::map<::std::string, ::std::string>>(new ::std::unique_ptr<::std::map<::std::string, ::std::string>>::element_type(std::move(t))));
}

void swap(Shallot& a, Shallot& b) {
  Shallot temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Shallot,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::python_capi::PrimitiveStruct>,
    "inconsistent use of json option");

} // namespace test::fixtures::python_capi


namespace apache { namespace thrift {

folly::Range<::test::fixtures::python_capi::SomeBinary::Type const*> const TEnumTraits<::test::fixtures::python_capi::SomeBinary::Type>::values = folly::range(TEnumDataStorage<::test::fixtures::python_capi::SomeBinary::Type>::values);
folly::Range<std::string_view const*> const TEnumTraits<::test::fixtures::python_capi::SomeBinary::Type>::names = folly::range(TEnumDataStorage<::test::fixtures::python_capi::SomeBinary::Type>::names);

bool TEnumTraits<::test::fixtures::python_capi::SomeBinary::Type>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::test::fixtures::python_capi::SomeBinary::Type>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace test::fixtures::python_capi {

std::string_view SomeBinary::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/SomeBinary";
}

std::string_view SomeBinary::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<SomeBinary>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view SomeBinary::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<SomeBinary>::name;
}

void SomeBinary::__fbthrift_destruct() {
  switch(getType()) {
    case Type::__EMPTY__:
      break;
    case Type::iobuf:
      ::std::destroy_at(::std::addressof(value_.iobuf));
      break;
    case Type::iobuf_ptr:
      ::std::destroy_at(::std::addressof(value_.iobuf_ptr));
      break;
    case Type::iobufRef:
      ::std::destroy_at(::std::addressof(value_.iobufRef));
      break;
    default:
      assert(false);
      break;
  }
}

void SomeBinary::__fbthrift_clear() {
  __fbthrift_destruct();
  fbthrift_type_ = folly::to_underlying(Type::__EMPTY__);
}

  SomeBinary::~SomeBinary() {
    __fbthrift_destruct();
  }

bool SomeBinary::__fbthrift_is_empty() const {
  return getType() == Type::__EMPTY__;
}
  SomeBinary::SomeBinary(const SomeBinary& rhs)
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        return;
      case Type::iobuf:
        set_iobuf(rhs.value_.iobuf);
        break;
      case Type::iobuf_ptr:
        set_iobuf_ptr(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::binary>(rhs.value_.iobuf_ptr));
        break;
      case Type::iobufRef:
        set_iobufRef(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::binary>(rhs.value_.iobufRef));
        break;
      default:
        assert(false);
    }
  }

    SomeBinary&SomeBinary::operator=(const SomeBinary& rhs) {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        __fbthrift_clear();
        return *this;
      case Type::iobuf:
        set_iobuf(rhs.value_.iobuf);
        break;
      case Type::iobuf_ptr:
        set_iobuf_ptr(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::binary>(rhs.value_.iobuf_ptr));
        break;
      case Type::iobufRef:
        set_iobufRef(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::binary>(rhs.value_.iobufRef));
        break;
      default:
        __fbthrift_clear();
        assert(false);
    }
    return *this;
  }


bool SomeBinary::operator==(const SomeBinary& rhs) const {
  return ::apache::thrift::op::detail::UnionEquality{}(*this, rhs);
}

bool SomeBinary::operator<([[maybe_unused]] const SomeBinary& rhs) const {
  return ::apache::thrift::op::detail::UnionLessThan{}(*this, rhs);
}

void swap(SomeBinary& a, SomeBinary& b) {
  SomeBinary temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}


} // namespace test::fixtures::python_capi

namespace test::fixtures::python_capi { namespace {
[[maybe_unused]] FOLLY_ERASE void validateAdapters() {
  ::apache::thrift::adapt_detail::validateFieldAdapter<::thrift::test::lib::StringDoubler, 2, ::std::string, ::test::fixtures::python_capi::StringPair>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ProtocolId>, 1, ::apache::thrift::type::ExternId, ::test::fixtures::python_capi::AdaptedFields>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4, ::apache::thrift::type::ExternId, ::test::fixtures::python_capi::AdaptedFields>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ProtocolId>, 10, ::apache::thrift::type::ExternId, ::test::fixtures::python_capi::Shallot>();
}
}} // namespace test::fixtures::python_capi
namespace apache::thrift::detail::annotation {
}
