[("\\P",
  (Shallow_decl_defs.Class
     { Shallow_decl_defs.sc_mode = Mstrict; sc_final = true;
       sc_abstract = false; sc_is_xhp = false; sc_internal = false;
       sc_has_xhp_keyword = false; sc_kind = (Cclass Concrete);
       sc_module = None; sc_name = ([3:13-14], "\\P"); sc_tparams = [];
       sc_where_constraints = []; sc_extends = []; sc_uses = [];
       sc_xhp_attr_uses = []; sc_xhp_enum_values = {};
       sc_xhp_marked_empty = false; sc_req_extends = [];
       sc_req_implements = []; sc_req_class = []; sc_implements = [];
       sc_support_dynamic_type = false; sc_consts = [];
       sc_typeconsts =
       [{ Shallow_decl_defs.stc_name = ([4:13-14], "C");
          stc_kind =
          (Typing_defs.TCConcrete
             { Typing_defs.tc_type = (Rhint ([4:17-19]), (Tintersection []))
               });
          stc_enforceable = ([Pos.none], false); stc_reifiable = None;
          stc_is_ctx = true }
         ];
       sc_props = []; sc_sprops = []; sc_constructor = None;
       sc_static_methods = []; sc_methods = []; sc_user_attributes = [];
       sc_enum_type = None; sc_docs_url = None }));
  ("\\f",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([7:10-11]),
         (Tfun
            { ft_tparams =
              [{ Typing_defs_core.tp_variance = Invariant;
                 tp_name = ([8:16-17], "T/[ctx $f]"); tp_tparams = [];
                 tp_constraints = []; tp_reified = Erased;
                 tp_user_attributes = [] };
                { Typing_defs_core.tp_variance = Invariant;
                  tp_name = ([9:5-7], "T/$v"); tp_tparams = [];
                  tp_constraints =
                  [(Constraint_as,
                    (Rhint ([9:3-4]), (Tapply (([9:3-4], "\\P"), []))))];
                  tp_reified = Erased; tp_user_attributes = [] };
                { Typing_defs_core.tp_variance = Invariant;
                  tp_name = ([10:11-16], "T/[$v::C]"); tp_tparams = [];
                  tp_constraints = []; tp_reified = Erased;
                  tp_user_attributes = [] }
                ];
              ft_where_constraints =
              [((Rhint ([10:11-16]), (Tgeneric ("T/[$v::C]", []))),
                Constraint_eq,
                (Rhint ([10:11-16]),
                 (Taccess
                    ((Rhint ([10:11-16]), (Tgeneric ("T/$v", []))),
                     [([10:15-16], "C")]))))
                ];
              ft_params =
              [{ fp_pos = [8:26-28]; fp_name = (Some "$f");
                 fp_type =
                 { et_enforced = Typing_defs_core.Unenforced;
                   et_type =
                   (Rhint ([8:3-25]),
                    (Tfun
                       { ft_tparams = []; ft_where_constraints = [];
                         ft_params = [];
                         ft_implicit_params =
                         { capability =
                           (CapTy (Rhint ([8:16-17]),
                                   (Tgeneric ("T/[ctx $f]", []))))
                           };
                         ft_ret =
                         { et_enforced = Typing_defs_core.Unenforced;
                           et_type = (Rhint ([8:20-24]), (Tprim Tvoid)) };
                         ft_flags =
                         (make_ft_flags FSync ~return_disposable:false
                           ~returns_readonly:false
                           ~support_dynamic_type:false ~readonly_this:false
                           ~is_memoized:false ~variadic:false);
                         ft_ifc_decl = FDPolicied {PUBLIC}ft_cross_package =
                                                          None
                         }))
                   };
                 fp_flags =
                 (make_fp_flags ~accept_disposable:false ~has_default:false
                   ~mode:Typing_defs_core.FPnormal ~ifc_external:false
                   ~ifc_can_call:false ~readonly:false);
                  };
                { fp_pos = [9:5-7]; fp_name = (Some "$v");
                  fp_type =
                  { et_enforced = Typing_defs_core.Unenforced;
                    et_type = (Rhint ([9:5-7]), (Tgeneric ("T/$v", []))) };
                  fp_flags =
                  (make_fp_flags ~accept_disposable:false ~has_default:false
                    ~mode:Typing_defs_core.FPnormal ~ifc_external:false
                    ~ifc_can_call:false ~readonly:false);
                   }
                ];
              ft_implicit_params =
              { capability =
                (CapTy (Rhint ([10:2-17]),
                        (Tintersection
                           [(Rhint ([10:3-9]), (Tgeneric ("T/[ctx $f]", [])));
                             (Rhint ([10:11-16]),
                              (Tgeneric ("T/[$v::C]", [])))
                             ])))
                };
              ft_ret =
              { et_enforced = Typing_defs_core.Unenforced;
                et_type = (Rhint ([10:19-23]), (Tprim Tvoid)) };
              ft_flags =
              (make_ft_flags FSync ~return_disposable:false
                ~returns_readonly:false ~support_dynamic_type:false
                ~readonly_this:false ~is_memoized:false ~variadic:false);
              ft_ifc_decl = FDPolicied {PUBLIC}ft_cross_package = None }));
        fe_pos = [7:10-11]; fe_php_std_lib = false;
        fe_support_dynamic_type = false; fe_no_auto_dynamic = false }));
  ("\\g",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([14:10-11]),
         (Tfun
            { ft_tparams =
              [{ Typing_defs_core.tp_variance = Invariant;
                 tp_name = ([14:14-16], "T/$v"); tp_tparams = [];
                 tp_constraints =
                 [(Constraint_as,
                   (Rhint ([14:12-13]), (Tapply (([14:12-13], "\\P"), []))))];
                 tp_reified = Erased; tp_user_attributes = [] };
                { Typing_defs_core.tp_variance = Invariant;
                  tp_name = ([14:18-23], "T/[$v::C]"); tp_tparams = [];
                  tp_constraints = []; tp_reified = Erased;
                  tp_user_attributes = [] }
                ];
              ft_where_constraints =
              [((Rhint ([14:18-23]), (Tgeneric ("T/[$v::C]", []))),
                Constraint_eq,
                (Rhint ([14:18-23]),
                 (Taccess
                    ((Rhint ([14:18-23]), (Tgeneric ("T/$v", []))),
                     [([14:22-23], "C")]))))
                ];
              ft_params =
              [{ fp_pos = [14:14-16]; fp_name = (Some "$v");
                 fp_type =
                 { et_enforced = Typing_defs_core.Unenforced;
                   et_type = (Rhint ([14:14-16]), (Tgeneric ("T/$v", []))) };
                 fp_flags =
                 (make_fp_flags ~accept_disposable:false ~has_default:false
                   ~mode:Typing_defs_core.FPnormal ~ifc_external:false
                   ~ifc_can_call:false ~readonly:false);
                  }
                ];
              ft_implicit_params =
              { capability =
                (CapTy (Rhint ([14:18-23]), (Tgeneric ("T/[$v::C]", [])))) };
              ft_ret =
              { et_enforced = Typing_defs_core.Unenforced;
                et_type = (Rhint ([14:26-29]), (Tprim Tint)) };
              ft_flags =
              (make_ft_flags FSync ~return_disposable:false
                ~returns_readonly:false ~support_dynamic_type:false
                ~readonly_this:false ~is_memoized:false ~variadic:false);
              ft_ifc_decl = FDPolicied {PUBLIC}ft_cross_package = None }));
        fe_pos = [14:10-11]; fe_php_std_lib = false;
        fe_support_dynamic_type = false; fe_no_auto_dynamic = false }));
  ("\\h",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([18:10-11]),
         (Tfun
            { ft_tparams =
              [{ Typing_defs_core.tp_variance = Invariant;
                 tp_name = ([19:17-18], "T/[ctx $f]"); tp_tparams = [];
                 tp_constraints = []; tp_reified = Erased;
                 tp_user_attributes = [] };
                { Typing_defs_core.tp_variance = Invariant;
                  tp_name = ([20:6-8], "T/$v"); tp_tparams = [];
                  tp_constraints =
                  [(Constraint_as,
                    (Rhint ([20:4-5]), (Tapply (([20:4-5], "\\P"), []))))];
                  tp_reified = Erased; tp_user_attributes = [] };
                { Typing_defs_core.tp_variance = Invariant;
                  tp_name = ([21:11-16], "T/[$v::C]"); tp_tparams = [];
                  tp_constraints = []; tp_reified = Erased;
                  tp_user_attributes = [] }
                ];
              ft_where_constraints =
              [((Rhint ([21:11-16]), (Tgeneric ("T/[$v::C]", []))),
                Constraint_eq,
                (Rhint ([21:11-16]),
                 (Taccess
                    ((Rhint ([21:11-16]), (Tgeneric ("T/$v", []))),
                     [([21:15-16], "C")]))))
                ];
              ft_params =
              [{ fp_pos = [19:27-29]; fp_name = (Some "$f");
                 fp_type =
                 { et_enforced = Typing_defs_core.Unenforced;
                   et_type =
                   (Rhint ([19:3-26]),
                    (Toption
                       (Rhint ([19:4-26]),
                        (Tfun
                           { ft_tparams = []; ft_where_constraints = [];
                             ft_params = [];
                             ft_implicit_params =
                             { capability =
                               (CapTy (Rhint ([19:17-18]),
                                       (Tgeneric ("T/[ctx $f]", []))))
                               };
                             ft_ret =
                             { et_enforced = Typing_defs_core.Unenforced;
                               et_type = (Rhint ([19:21-25]), (Tprim Tvoid))
                               };
                             ft_flags =
                             (make_ft_flags FSync ~return_disposable:false
                               ~returns_readonly:false
                               ~support_dynamic_type:false
                               ~readonly_this:false ~is_memoized:false
                               ~variadic:false);
                             ft_ifc_decl = FDPolicied {PUBLIC}ft_cross_package =
                                                              None
                             }))))
                   };
                 fp_flags =
                 (make_fp_flags ~accept_disposable:false ~has_default:false
                   ~mode:Typing_defs_core.FPnormal ~ifc_external:false
                   ~ifc_can_call:false ~readonly:false);
                  };
                { fp_pos = [20:6-8]; fp_name = (Some "$v");
                  fp_type =
                  { et_enforced = Typing_defs_core.Unenforced;
                    et_type =
                    (Rhint ([20:3-5]),
                     (Toption (Rhint ([20:6-8]), (Tgeneric ("T/$v", [])))))
                    };
                  fp_flags =
                  (make_fp_flags ~accept_disposable:false ~has_default:false
                    ~mode:Typing_defs_core.FPnormal ~ifc_external:false
                    ~ifc_can_call:false ~readonly:false);
                   }
                ];
              ft_implicit_params =
              { capability =
                (CapTy (Rhint ([21:2-17]),
                        (Tintersection
                           [(Rhint ([21:3-9]), (Tgeneric ("T/[ctx $f]", [])));
                             (Rhint ([21:11-16]),
                              (Tgeneric ("T/[$v::C]", [])))
                             ])))
                };
              ft_ret =
              { et_enforced = Typing_defs_core.Unenforced;
                et_type = (Rhint ([21:19-23]), (Tprim Tvoid)) };
              ft_flags =
              (make_ft_flags FSync ~return_disposable:false
                ~returns_readonly:false ~support_dynamic_type:false
                ~readonly_this:false ~is_memoized:false ~variadic:false);
              ft_ifc_decl = FDPolicied {PUBLIC}ft_cross_package = None }));
        fe_pos = [18:10-11]; fe_php_std_lib = false;
        fe_support_dynamic_type = false; fe_no_auto_dynamic = false }))
  ]
