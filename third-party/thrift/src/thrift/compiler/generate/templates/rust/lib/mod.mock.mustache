{{!

  Copyright (c) Meta Platforms, Inc. and its affiliates.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

}}{{#program:services}}

    pub struct {{service:name}}<'mock> {{>lib/block}}
        {{#service:extends}}
        pub parent: {{service:package}}::mock::{{service:name}}<'mock>,
        {{/service:extends}}
        {{#service:rustFunctions}}
        {{^function:starts_interaction?}}
        pub {{function:rust_name}}: r#impl::{{service:snake}}::{{function:rust_name}}<'mock>,
        {{/function:starts_interaction?}}
        {{/service:rustFunctions}}
        _marker: ::std::marker::PhantomData<&'mock ()>,
    }

    impl dyn super::client::{{service:name}} {
        pub fn mock<'mock>() -> {{service:name}}<'mock> {
            {{service:name}} {
                {{#service:extends}}
                parent: <dyn {{service:package}}::client::{{service:name}}>::mock(),
                {{/service:extends}}
                {{#service:rustFunctions}}
                {{^function:starts_interaction?}}
                {{function:rust_name}}: {{!
                    }}r#impl::{{service:snake}}::{{function:rust_name}}::unimplemented(),
                {{/function:starts_interaction?}}
                {{/service:rustFunctions}}
                _marker: ::std::marker::PhantomData,
            }
        }
    }

    impl<'mock> super::client::{{service:name}} for {{service:name}}<'mock> {{>lib/block}}{{!
        }}{{#service:rustFunctions}}
        {{^function:starts_interaction?}}{{^function:creates_interaction?}}
        fn {{function:rust_name}}(
            &self,{{!
            }}{{#function:args}}
            arg_{{field:name}}: {{>lib/arg}},{{!
            }}{{/function:args}}
        ) -> {{>lib/client_return_type}} {
            let mut closure = self.{{function:rust_name}}.closure.lock().unwrap();
            let closure: &mut dyn ::std::ops::FnMut({{!
                }}{{#function:args}}{{!
                }}{{#field:type}}{{>lib/type}}{{/field:type}}{{!
                }}{{^last?}}, {{/last?}}{{!
                }}{{/function:args}}{{!
            }}) -> _ = &mut **closure;
            ::std::boxed::Box::pin(::futures::future::ready(closure({{!
                }}{{#function:args}}{{!
                }}arg_{{field:name}}{{#field:type}}{{!
                    }}{{#type:string?}}.to_owned(){{/type:string?}}{{!
                    }}{{#type:list?}}.to_owned(){{/type:list?}}{{!
                    }}{{^type:string?}}{{^type:list?}}{{!
                        }}.clone(){{!
                    }}{{/type:list?}}{{/type:string?}}{{!
                }}{{/field:type}}{{!
                }}{{^last?}}, {{/last?}}{{!
                }}{{/function:args}}{{!
            }})))
        }{{!
        }}{{/function:creates_interaction?}}{{#function:creates_interaction?}}
        fn {{function:rust_name}}(
            &self,{{!
            }}{{#function:args}}
            _arg_{{field:name}}: {{>lib/arg}},{{!
            }}{{/function:args}}
        ) -> {{>lib/client_return_type}} {
            unimplemented!("Mocking interactions is not yet implemented");
        }{{!
        }}{{/function:creates_interaction?}}{{/function:starts_interaction?}}{{#function:starts_interaction?}}
        fn {{function:rust_name}}(
            &self,
        ) -> ::std::result::Result<{{!
        }}{{service:package}}::client::{{function:interaction_name}}Client, {{!
        }}::anyhow::Error> {
            unimplemented!("Mocking interactions is not yet implemented");
        }{{!
        }}{{/function:starts_interaction?}}{{/service:rustFunctions}}
    }

    {{#service:extendedServices}}
    #[::async_trait::async_trait]
    impl<'mock> {{!
        }}{{#extendedService:service}}{{!
        }}::std::convert::AsRef<dyn {{extendedService:packagePrefix}}::client::{{service:name}} + 'mock> {{!
        }}{{/extendedService:service}}{{!
        }}for {{service:name}}<'mock>
    {
        {{#extendedService:service}}
        fn as_ref(&self) -> &(dyn {{extendedService:packagePrefix}}::client::{{service:name}} + 'mock) {
            &self.parent
        }
        {{/extendedService:service}}
    }

    {{/service:extendedServices}}{{!
    }}{{/program:services}}
    mod r#impl {{>lib/block}}{{!
    }}{{#program:services}}
        pub mod {{service:snake}} {{>lib/block}}{{!

            }}{{#service:rustFunctions}}
            {{^function:starts_interaction?}}

            pub struct {{function:rust_name}}<'mock> {
                pub(crate) closure: ::std::sync::Mutex<::std::boxed::Box<
                    dyn ::std::ops::FnMut({{!
                        }}{{#function:args}}{{!
                        }}{{#field:type}}{{>lib/type}}{{/field:type}}{{!
                        }}{{^last?}}, {{/last?}}{{!
                        }}{{/function:args}}{{!
                    }}) -> ::std::result::Result<
                        {{#function:return_type}}{{>lib/type}}{{/function:return_type}},
                        {{program:crate}}::errors::{{service:snake}}::{{function:upcamel}}Error,
                    > + ::std::marker::Send + ::std::marker::Sync + 'mock,
                >>,
            }

            #[allow(clippy::redundant_closure)]
            impl<'mock> {{function:rust_name}}<'mock> {
                pub fn unimplemented() -> Self {
                    Self {
                        closure: ::std::sync::Mutex::new(::std::boxed::Box::new(|{{!
                            }}{{#function:args}}{{!
                            }}_: {{#field:type}}{{>lib/type}}{{/field:type}}{{!
                            }}{{^last?}}, {{/last?}}{{!
                            }}{{/function:args}}{{!
                        }}| panic!(
                            "{}::{} is not mocked",
                            "{{service:name}}",
                            "{{function:name}}",
                        ))),
                    }
                }

                pub fn ret({{!
                    }}&self, {{!
                    }}{{#function:returns_stream?}}_{{/function:returns_stream?}}value: {{#function:return_type}}{{>lib/type}}{{/function:return_type}}{{!
                }}) {
                    {{#function:returns_stream?}}
                    unimplemented!("Mocking streams is not yet implemented, as value isn't cloneable")
                    {{/function:returns_stream?}}{{^function:returns_stream?}}
                    self.mock(move |{{!
                        }}{{#function:args}}{{!
                        }}_: {{#field:type}}{{>lib/type}}{{/field:type}}{{!
                        }}{{^last?}}, {{/last?}}{{!
                        }}{{/function:args}}{{!
                    }}| value.clone());
                    {{/function:returns_stream?}}
                }

                pub fn mock(&self, mut mock: impl ::std::ops::FnMut({{!
                    }}{{#function:args}}{{!
                    }}{{#field:type}}{{>lib/type}}{{/field:type}}{{!
                    }}{{^last?}}, {{/last?}}{{!
                    }}{{/function:args}}{{!
                }}) -> {{#function:return_type}}{{>lib/type}}{{/function:return_type}}{{!
                    }} + ::std::marker::Send + ::std::marker::Sync + 'mock) {{!
                }}{
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move |{{!
                        }}{{#function:args}}{{!
                        }}{{field:rust_name}}{{!
                        }}{{^last?}}, {{/last?}}{{!
                        }}{{/function:args}}{{!
                    }}| ::std::result::Result::Ok(mock({{!
                        }}{{#function:args}}{{!
                        }}{{field:rust_name}}{{!
                        }}{{^last?}}, {{/last?}}{{!
                        }}{{/function:args}}{{!
                    }})));
                }

                pub fn mock_result(&self, mut mock: impl ::std::ops::FnMut({{!
                    }}{{#function:args}}{{!
                    }}{{#field:type}}{{>lib/type}}{{/field:type}}{{!
                    }}{{^last?}}, {{/last?}}{{!
                    }}{{/function:args}}{{!
                }}) -> ::std::result::Result<{{!
                        }}{{#function:return_type}}{{>lib/type}}{{/function:return_type}}, {{!
                        }}{{program:crate}}::errors::{{service:snake}}::{{function:upcamel}}Error>{{!
                    }} + ::std::marker::Send + ::std::marker::Sync + 'mock) {{!
                }}{
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move |{{!
                        }}{{#function:args}}{{!
                        }}{{field:rust_name}}{{!
                        }}{{^last?}}, {{/last?}}{{!
                        }}{{/function:args}}{{!
                    }}| mock({{!
                        }}{{#function:args}}{{!
                        }}{{field:rust_name}}{{!
                        }}{{^last?}}, {{/last?}}{{!
                        }}{{/function:args}}{{!
                    }}));
                }

                pub fn throw<E>(&self, exception: E)
                where
                    E: ::std::convert::Into<{{program:crate}}::errors::{{service:snake}}::{{function:upcamel}}Error>,
                    E: ::std::clone::Clone + ::std::marker::Send + ::std::marker::Sync + 'mock,
                {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move |{{!
                        }}{{#function:args}}{{!
                        }}_: {{#field:type}}{{>lib/type}}{{/field:type}}{{!
                        }}{{^last?}}, {{/last?}}{{!
                        }}{{/function:args}}{{!
                    }}| ::std::result::Result::Err(exception.clone().into()));
                }
            }{{!
            }}{{/function:starts_interaction?}}{{!
            }}{{/service:rustFunctions}}
        }{{!
    }}{{/program:services}}
    }
{{!newline}}
