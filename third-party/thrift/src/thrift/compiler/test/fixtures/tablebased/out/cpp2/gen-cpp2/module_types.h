/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/tablebased/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>

namespace apache::thrift {
namespace ident {
struct fieldA;
struct fieldB;
struct fieldC;
struct fieldD;
struct fieldE;
struct fieldA;
struct fieldB;
struct fieldC;
struct fieldD;
struct fieldE;
struct fieldF;
struct fieldG;
struct fieldH;
struct fieldA;
struct fieldB;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_fieldA
#define APACHE_THRIFT_ACCESSOR_fieldA
APACHE_THRIFT_DEFINE_ACCESSOR(fieldA);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldB
#define APACHE_THRIFT_ACCESSOR_fieldB
APACHE_THRIFT_DEFINE_ACCESSOR(fieldB);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldC
#define APACHE_THRIFT_ACCESSOR_fieldC
APACHE_THRIFT_DEFINE_ACCESSOR(fieldC);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldD
#define APACHE_THRIFT_ACCESSOR_fieldD
APACHE_THRIFT_DEFINE_ACCESSOR(fieldD);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldE
#define APACHE_THRIFT_ACCESSOR_fieldE
APACHE_THRIFT_DEFINE_ACCESSOR(fieldE);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldA
#define APACHE_THRIFT_ACCESSOR_fieldA
APACHE_THRIFT_DEFINE_ACCESSOR(fieldA);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldB
#define APACHE_THRIFT_ACCESSOR_fieldB
APACHE_THRIFT_DEFINE_ACCESSOR(fieldB);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldC
#define APACHE_THRIFT_ACCESSOR_fieldC
APACHE_THRIFT_DEFINE_ACCESSOR(fieldC);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldD
#define APACHE_THRIFT_ACCESSOR_fieldD
APACHE_THRIFT_DEFINE_ACCESSOR(fieldD);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldE
#define APACHE_THRIFT_ACCESSOR_fieldE
APACHE_THRIFT_DEFINE_ACCESSOR(fieldE);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldF
#define APACHE_THRIFT_ACCESSOR_fieldF
APACHE_THRIFT_DEFINE_ACCESSOR(fieldF);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldG
#define APACHE_THRIFT_ACCESSOR_fieldG
APACHE_THRIFT_DEFINE_ACCESSOR(fieldG);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldH
#define APACHE_THRIFT_ACCESSOR_fieldH
APACHE_THRIFT_DEFINE_ACCESSOR(fieldH);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldA
#define APACHE_THRIFT_ACCESSOR_fieldA
APACHE_THRIFT_DEFINE_ACCESSOR(fieldA);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldB
#define APACHE_THRIFT_ACCESSOR_fieldB
APACHE_THRIFT_DEFINE_ACCESSOR(fieldB);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
namespace test::fixtures::tablebased {

/** Glean {"file": "thrift/compiler/test/fixtures/tablebased/src/module.thrift", "name": "ExampleEnum", "kind": "enum" } */
enum class ExampleEnum {
  ZERO = 0,
  NONZERO = 123,
};

} // namespace test::fixtures::tablebased

template<> struct std::hash<::test::fixtures::tablebased::ExampleEnum> :
  ::apache::thrift::detail::enum_hash<::test::fixtures::tablebased::ExampleEnum> {};

namespace apache::thrift {

template <> struct TEnumTraits<::test::fixtures::tablebased::ExampleEnum> {
  using type = ::test::fixtures::tablebased::ExampleEnum;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "ExampleEnum";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "module";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::ZERO; }
  static constexpr type max() { return type::NONZERO; }
};

} // namespace apache::thrift
// END declare_enums
// BEGIN forward_declare
namespace test::fixtures::tablebased {
class TrivialTypesStruct;
class ContainerStruct;
class ExampleUnion;
} // namespace test::fixtures::tablebased
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace test::fixtures::tablebased {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

/** Glean {"file": "thrift/compiler/test/fixtures/tablebased/src/module.thrift", "name": "IOBufPtr", "kind": "typedef" } */
using IOBufPtr = std::unique_ptr<folly::IOBuf>;

/** Glean {"file": "thrift/compiler/test/fixtures/tablebased/src/module.thrift", "name": "TrivialTypesStruct", "kind": "struct" } */
class TrivialTypesStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = true;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 5;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::fieldA,
    ::apache::thrift::ident::fieldB,
    ::apache::thrift::ident::fieldC,
    ::apache::thrift::ident::fieldD,
    ::apache::thrift::ident::fieldE
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::binary_t,
    ::apache::thrift::type::cpp_type<std::unique_ptr<folly::IOBuf>, ::apache::thrift::type::binary_t>,
    ::apache::thrift::type::enum_t<::test::fixtures::tablebased::ExampleEnum>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TrivialTypesStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  TrivialTypesStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TrivialTypesStruct(apache::thrift::FragileConstructor, ::std::int32_t fieldA__arg, ::std::string fieldB__arg, ::std::string fieldC__arg, ::test::fixtures::tablebased::IOBufPtr fieldD__arg, ::test::fixtures::tablebased::ExampleEnum fieldE__arg);

  TrivialTypesStruct(TrivialTypesStruct&&) noexcept;
  TrivialTypesStruct(const TrivialTypesStruct& src);


  TrivialTypesStruct& operator=(TrivialTypesStruct&&) noexcept;
  TrivialTypesStruct& operator=(const TrivialTypesStruct& src);

  ~TrivialTypesStruct();

 private:
  ::std::int32_t __fbthrift_field_fieldA;
 private:
  ::std::string __fbthrift_field_fieldB;
 private:
  ::std::string __fbthrift_field_fieldC;
 private:
  ::test::fixtures::tablebased::IOBufPtr __fbthrift_field_fieldD;
 private:
  ::test::fixtures::tablebased::ExampleEnum __fbthrift_field_fieldE;
 private:
  apache::thrift::detail::isset_bitset<5, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const TrivialTypesStruct&) const;
  bool operator<(const TrivialTypesStruct&) const;

  /** Glean { "field": "fieldA" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> fieldA_ref() const& {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "fieldA" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> fieldA_ref() & {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "fieldA" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> fieldA_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldA), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "fieldA" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> fieldA() const& {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "fieldA" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> fieldA() & {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "fieldA" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> fieldA() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldA), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "fieldB" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> fieldB_ref() const& {
    return {this->__fbthrift_field_fieldB, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "fieldB" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> fieldB_ref() & {
    return {this->__fbthrift_field_fieldB, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "fieldB" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> fieldB_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldB), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "fieldB" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> fieldB() const& {
    return {this->__fbthrift_field_fieldB, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "fieldB" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> fieldB() & {
    return {this->__fbthrift_field_fieldB, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "fieldB" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> fieldB() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldB), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "fieldC" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> fieldC_ref() const& {
    return {this->__fbthrift_field_fieldC, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "fieldC" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> fieldC_ref() & {
    return {this->__fbthrift_field_fieldC, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "fieldC" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> fieldC_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldC), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "fieldC" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> fieldC() const& {
    return {this->__fbthrift_field_fieldC, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "fieldC" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> fieldC() & {
    return {this->__fbthrift_field_fieldC, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "fieldC" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> fieldC() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldC), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "fieldD" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::tablebased::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> fieldD_ref() const& {
    return {this->__fbthrift_field_fieldD, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "fieldD" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::tablebased::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> fieldD_ref() & {
    return {this->__fbthrift_field_fieldD, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "fieldD" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::tablebased::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> fieldD_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldD), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "fieldD" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::tablebased::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> fieldD() const& {
    return {this->__fbthrift_field_fieldD, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "fieldD" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::tablebased::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> fieldD() & {
    return {this->__fbthrift_field_fieldD, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "fieldD" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::tablebased::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> fieldD() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldD), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "fieldE" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::tablebased::ExampleEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldE_ref() const& {
    return {this->__fbthrift_field_fieldE, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "fieldE" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::tablebased::ExampleEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldE_ref() & {
    return {this->__fbthrift_field_fieldE, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "fieldE" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::tablebased::ExampleEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldE_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldE), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "fieldE" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::tablebased::ExampleEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldE() const& {
    return {this->__fbthrift_field_fieldE, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "fieldE" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::tablebased::ExampleEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldE() & {
    return {this->__fbthrift_field_fieldE, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "fieldE" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::tablebased::ExampleEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldE() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldE), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "fieldA" } */
  [[deprecated("Use `FOO.fieldA().value()` instead of `FOO.get_fieldA()`")]]
  const ::std::int32_t* get_fieldA() const&;

  /** Glean { "field": "fieldA" } */
  [[deprecated("Use `FOO.fieldA().value()` instead of `FOO.get_fieldA()`")]]
  ::std::int32_t* get_fieldA() &;

  ::std::int32_t* get_fieldA() && = delete;

  /** Glean { "field": "fieldA" } */
  [[deprecated("Use `FOO.fieldA() = BAR` instead of `FOO.set_fieldA(BAR)`")]]
  ::std::int32_t& set_fieldA(::std::int32_t fieldA_);

  /** Glean { "field": "fieldB" } */
  [[deprecated("Use `FOO.fieldB().value()` instead of `FOO.get_fieldB()`")]]
  const ::std::string* get_fieldB() const&;

  /** Glean { "field": "fieldB" } */
  [[deprecated("Use `FOO.fieldB().value()` instead of `FOO.get_fieldB()`")]]
  ::std::string* get_fieldB() &;

  ::std::string* get_fieldB() && = delete;

  /** Glean { "field": "fieldB" } */
  template <typename T_TrivialTypesStruct_fieldB_struct_setter = ::std::string>
  [[deprecated("Use `FOO.fieldB() = BAR` instead of `FOO.set_fieldB(BAR)`")]]
  ::std::string& set_fieldB(T_TrivialTypesStruct_fieldB_struct_setter&& fieldB_) {
    fieldB_ref() = std::forward<T_TrivialTypesStruct_fieldB_struct_setter>(fieldB_);
    return __fbthrift_field_fieldB;
  }

  /** Glean { "field": "fieldC" } */
  [[deprecated("Use `FOO.fieldC().value()` instead of `FOO.get_fieldC()`")]]
  const ::std::string* get_fieldC() const&;

  /** Glean { "field": "fieldC" } */
  [[deprecated("Use `FOO.fieldC().value()` instead of `FOO.get_fieldC()`")]]
  ::std::string* get_fieldC() &;

  ::std::string* get_fieldC() && = delete;

  /** Glean { "field": "fieldC" } */
  template <typename T_TrivialTypesStruct_fieldC_struct_setter = ::std::string>
  [[deprecated("Use `FOO.fieldC() = BAR` instead of `FOO.set_fieldC(BAR)`")]]
  ::std::string& set_fieldC(T_TrivialTypesStruct_fieldC_struct_setter&& fieldC_) {
    fieldC_ref() = std::forward<T_TrivialTypesStruct_fieldC_struct_setter>(fieldC_);
    return __fbthrift_field_fieldC;
  }

  /** Glean { "field": "fieldD" } */
  [[deprecated("Use `FOO.fieldD().value()` instead of `FOO.get_fieldD()`")]]
  const ::test::fixtures::tablebased::IOBufPtr* get_fieldD() const&;

  /** Glean { "field": "fieldD" } */
  [[deprecated("Use `FOO.fieldD().value()` instead of `FOO.get_fieldD()`")]]
  ::test::fixtures::tablebased::IOBufPtr* get_fieldD() &;

  ::test::fixtures::tablebased::IOBufPtr* get_fieldD() && = delete;

  /** Glean { "field": "fieldD" } */
  template <typename T_TrivialTypesStruct_fieldD_struct_setter = ::test::fixtures::tablebased::IOBufPtr>
  [[deprecated("Use `FOO.fieldD() = BAR` instead of `FOO.set_fieldD(BAR)`")]]
  ::test::fixtures::tablebased::IOBufPtr& set_fieldD(T_TrivialTypesStruct_fieldD_struct_setter&& fieldD_) {
    fieldD_ref() = std::forward<T_TrivialTypesStruct_fieldD_struct_setter>(fieldD_);
    return __fbthrift_field_fieldD;
  }

  /** Glean { "field": "fieldE" } */
  [[deprecated("Use `FOO.fieldE().value()` instead of `FOO.get_fieldE()`")]]
  ::test::fixtures::tablebased::ExampleEnum get_fieldE() const;

  /** Glean { "field": "fieldE" } */
  [[deprecated("Use `FOO.fieldE() = BAR` instead of `FOO.set_fieldE(BAR)`")]]
  ::test::fixtures::tablebased::ExampleEnum& set_fieldE(::test::fixtures::tablebased::ExampleEnum fieldE_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TrivialTypesStruct>;
  friend void swap(TrivialTypesStruct& a, TrivialTypesStruct& b);
  friend constexpr ptrdiff_t (::apache::thrift::detail::fieldOffset<TrivialTypesStruct>)(std::int16_t fieldIndex);
  friend constexpr ptrdiff_t (::apache::thrift::detail::issetOffset<TrivialTypesStruct>)(std::int16_t fieldIndex);
};

template <class Protocol_>
unsigned long TrivialTypesStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/tablebased/src/module.thrift", "name": "ContainerStruct", "kind": "struct" } */
class ContainerStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = true;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 8;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,12,2,3,4,5,6,7,8};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::fieldA,
    ::apache::thrift::ident::fieldB,
    ::apache::thrift::ident::fieldC,
    ::apache::thrift::ident::fieldD,
    ::apache::thrift::ident::fieldE,
    ::apache::thrift::ident::fieldF,
    ::apache::thrift::ident::fieldG,
    ::apache::thrift::ident::fieldH
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::cpp_type<std::list<::std::int32_t>, ::apache::thrift::type::list<::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::cpp_type<std::deque<::std::int32_t>, ::apache::thrift::type::list<::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::cpp_type<folly::fbvector<::std::int32_t>, ::apache::thrift::type::list<::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::cpp_type<folly::small_vector<::std::int32_t>, ::apache::thrift::type::list<::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::cpp_type<folly::sorted_vector_set<::std::int32_t>, ::apache::thrift::type::set<::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::cpp_type<folly::sorted_vector_map<::std::int32_t, ::std::string>, ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::string_t>>,
    ::apache::thrift::type::list<::apache::thrift::type::struct_t<::test::fixtures::tablebased::TrivialTypesStruct>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ContainerStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  ContainerStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ContainerStruct(apache::thrift::FragileConstructor, ::std::vector<::std::int32_t> fieldA__arg, std::list<::std::int32_t> fieldB__arg, std::deque<::std::int32_t> fieldC__arg, folly::fbvector<::std::int32_t> fieldD__arg, folly::small_vector<::std::int32_t> fieldE__arg, folly::sorted_vector_set<::std::int32_t> fieldF__arg, folly::sorted_vector_map<::std::int32_t, ::std::string> fieldG__arg, ::std::vector<::test::fixtures::tablebased::TrivialTypesStruct> fieldH__arg);

  ContainerStruct(ContainerStruct&&) noexcept;

  ContainerStruct(const ContainerStruct& src);


  ContainerStruct& operator=(ContainerStruct&&) noexcept;
  ContainerStruct& operator=(const ContainerStruct& src);

  ~ContainerStruct();

 private:
  ::std::vector<::std::int32_t> __fbthrift_field_fieldA;
 private:
  std::list<::std::int32_t> __fbthrift_field_fieldB;
 private:
  std::deque<::std::int32_t> __fbthrift_field_fieldC;
 private:
  folly::fbvector<::std::int32_t> __fbthrift_field_fieldD;
 private:
  folly::small_vector<::std::int32_t> __fbthrift_field_fieldE;
 private:
  folly::sorted_vector_set<::std::int32_t> __fbthrift_field_fieldF;
 private:
  folly::sorted_vector_map<::std::int32_t, ::std::string> __fbthrift_field_fieldG;
 private:
  ::std::vector<::test::fixtures::tablebased::TrivialTypesStruct> __fbthrift_field_fieldH;
 private:
  apache::thrift::detail::isset_bitset<8, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const ContainerStruct&) const;
  bool operator<(const ContainerStruct&) const;

  /** Glean { "field": "fieldA" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldA_ref() const& {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "fieldA" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldA_ref() & {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "fieldA" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldA_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldA), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "fieldA" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldA() const& {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "fieldA" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldA() & {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "fieldA" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldA() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldA), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "fieldB" } */
  template <typename..., typename fbthrift_T = std::list<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldB_ref() const& {
    return {this->__fbthrift_field_fieldB, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "fieldB" } */
  template <typename..., typename fbthrift_T = std::list<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldB_ref() & {
    return {this->__fbthrift_field_fieldB, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "fieldB" } */
  template <typename..., typename fbthrift_T = std::list<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldB_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldB), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "fieldB" } */
  template <typename..., typename fbthrift_T = std::list<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldB() const& {
    return {this->__fbthrift_field_fieldB, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "fieldB" } */
  template <typename..., typename fbthrift_T = std::list<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldB() & {
    return {this->__fbthrift_field_fieldB, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "fieldB" } */
  template <typename..., typename fbthrift_T = std::list<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldB() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldB), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "fieldC" } */
  template <typename..., typename fbthrift_T = std::deque<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldC_ref() const& {
    return {this->__fbthrift_field_fieldC, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "fieldC" } */
  template <typename..., typename fbthrift_T = std::deque<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldC_ref() & {
    return {this->__fbthrift_field_fieldC, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "fieldC" } */
  template <typename..., typename fbthrift_T = std::deque<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldC_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldC), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "fieldC" } */
  template <typename..., typename fbthrift_T = std::deque<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldC() const& {
    return {this->__fbthrift_field_fieldC, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "fieldC" } */
  template <typename..., typename fbthrift_T = std::deque<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldC() & {
    return {this->__fbthrift_field_fieldC, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "fieldC" } */
  template <typename..., typename fbthrift_T = std::deque<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldC() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldC), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "fieldD" } */
  template <typename..., typename fbthrift_T = folly::fbvector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldD_ref() const& {
    return {this->__fbthrift_field_fieldD, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "fieldD" } */
  template <typename..., typename fbthrift_T = folly::fbvector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldD_ref() & {
    return {this->__fbthrift_field_fieldD, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "fieldD" } */
  template <typename..., typename fbthrift_T = folly::fbvector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldD_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldD), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "fieldD" } */
  template <typename..., typename fbthrift_T = folly::fbvector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldD() const& {
    return {this->__fbthrift_field_fieldD, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "fieldD" } */
  template <typename..., typename fbthrift_T = folly::fbvector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldD() & {
    return {this->__fbthrift_field_fieldD, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "fieldD" } */
  template <typename..., typename fbthrift_T = folly::fbvector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldD() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldD), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "fieldE" } */
  template <typename..., typename fbthrift_T = folly::small_vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldE_ref() const& {
    return {this->__fbthrift_field_fieldE, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "fieldE" } */
  template <typename..., typename fbthrift_T = folly::small_vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldE_ref() & {
    return {this->__fbthrift_field_fieldE, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "fieldE" } */
  template <typename..., typename fbthrift_T = folly::small_vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldE_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldE), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "fieldE" } */
  template <typename..., typename fbthrift_T = folly::small_vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldE() const& {
    return {this->__fbthrift_field_fieldE, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "fieldE" } */
  template <typename..., typename fbthrift_T = folly::small_vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldE() & {
    return {this->__fbthrift_field_fieldE, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "fieldE" } */
  template <typename..., typename fbthrift_T = folly::small_vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldE() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldE), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "fieldF" } */
  template <typename..., typename fbthrift_T = folly::sorted_vector_set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldF_ref() const& {
    return {this->__fbthrift_field_fieldF, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "fieldF" } */
  template <typename..., typename fbthrift_T = folly::sorted_vector_set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldF_ref() & {
    return {this->__fbthrift_field_fieldF, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "fieldF" } */
  template <typename..., typename fbthrift_T = folly::sorted_vector_set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldF_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldF), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "fieldF" } */
  template <typename..., typename fbthrift_T = folly::sorted_vector_set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldF() const& {
    return {this->__fbthrift_field_fieldF, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "fieldF" } */
  template <typename..., typename fbthrift_T = folly::sorted_vector_set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldF() & {
    return {this->__fbthrift_field_fieldF, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "fieldF" } */
  template <typename..., typename fbthrift_T = folly::sorted_vector_set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldF() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldF), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "fieldG" } */
  template <typename..., typename fbthrift_T = folly::sorted_vector_map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldG_ref() const& {
    return {this->__fbthrift_field_fieldG, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "fieldG" } */
  template <typename..., typename fbthrift_T = folly::sorted_vector_map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldG_ref() & {
    return {this->__fbthrift_field_fieldG, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "fieldG" } */
  template <typename..., typename fbthrift_T = folly::sorted_vector_map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldG_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldG), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "fieldG" } */
  template <typename..., typename fbthrift_T = folly::sorted_vector_map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldG() const& {
    return {this->__fbthrift_field_fieldG, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "fieldG" } */
  template <typename..., typename fbthrift_T = folly::sorted_vector_map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldG() & {
    return {this->__fbthrift_field_fieldG, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "fieldG" } */
  template <typename..., typename fbthrift_T = folly::sorted_vector_map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldG() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldG), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "fieldH" } */
  template <typename..., typename fbthrift_T = ::std::vector<::test::fixtures::tablebased::TrivialTypesStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldH_ref() const& {
    return {this->__fbthrift_field_fieldH, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "fieldH" } */
  template <typename..., typename fbthrift_T = ::std::vector<::test::fixtures::tablebased::TrivialTypesStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldH_ref() & {
    return {this->__fbthrift_field_fieldH, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "fieldH" } */
  template <typename..., typename fbthrift_T = ::std::vector<::test::fixtures::tablebased::TrivialTypesStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldH_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldH), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "fieldH" } */
  template <typename..., typename fbthrift_T = ::std::vector<::test::fixtures::tablebased::TrivialTypesStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fieldH() const& {
    return {this->__fbthrift_field_fieldH, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "fieldH" } */
  template <typename..., typename fbthrift_T = ::std::vector<::test::fixtures::tablebased::TrivialTypesStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fieldH() & {
    return {this->__fbthrift_field_fieldH, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "fieldH" } */
  template <typename..., typename fbthrift_T = ::std::vector<::test::fixtures::tablebased::TrivialTypesStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fieldH() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fieldH), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "fieldA" } */
  [[deprecated("Use `FOO.fieldA().value()` instead of `FOO.get_fieldA()`")]]
  const ::std::vector<::std::int32_t>& get_fieldA() const&;

  /** Glean { "field": "fieldA" } */
  [[deprecated("Use `FOO.fieldA().value()` instead of `FOO.get_fieldA()`")]]
  ::std::vector<::std::int32_t> get_fieldA() &&;

  /** Glean { "field": "fieldA" } */
  template <typename T_ContainerStruct_fieldA_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.fieldA() = BAR` instead of `FOO.set_fieldA(BAR)`")]]
  ::std::vector<::std::int32_t>& set_fieldA(T_ContainerStruct_fieldA_struct_setter&& fieldA_) {
    fieldA_ref() = std::forward<T_ContainerStruct_fieldA_struct_setter>(fieldA_);
    return __fbthrift_field_fieldA;
  }

  /** Glean { "field": "fieldB" } */
  [[deprecated("Use `FOO.fieldB().value()` instead of `FOO.get_fieldB()`")]]
  const std::list<::std::int32_t>& get_fieldB() const&;

  /** Glean { "field": "fieldB" } */
  [[deprecated("Use `FOO.fieldB().value()` instead of `FOO.get_fieldB()`")]]
  std::list<::std::int32_t> get_fieldB() &&;

  /** Glean { "field": "fieldB" } */
  template <typename T_ContainerStruct_fieldB_struct_setter = std::list<::std::int32_t>>
  [[deprecated("Use `FOO.fieldB() = BAR` instead of `FOO.set_fieldB(BAR)`")]]
  std::list<::std::int32_t>& set_fieldB(T_ContainerStruct_fieldB_struct_setter&& fieldB_) {
    fieldB_ref() = std::forward<T_ContainerStruct_fieldB_struct_setter>(fieldB_);
    return __fbthrift_field_fieldB;
  }

  /** Glean { "field": "fieldC" } */
  [[deprecated("Use `FOO.fieldC().value()` instead of `FOO.get_fieldC()`")]]
  const std::deque<::std::int32_t>& get_fieldC() const&;

  /** Glean { "field": "fieldC" } */
  [[deprecated("Use `FOO.fieldC().value()` instead of `FOO.get_fieldC()`")]]
  std::deque<::std::int32_t> get_fieldC() &&;

  /** Glean { "field": "fieldC" } */
  template <typename T_ContainerStruct_fieldC_struct_setter = std::deque<::std::int32_t>>
  [[deprecated("Use `FOO.fieldC() = BAR` instead of `FOO.set_fieldC(BAR)`")]]
  std::deque<::std::int32_t>& set_fieldC(T_ContainerStruct_fieldC_struct_setter&& fieldC_) {
    fieldC_ref() = std::forward<T_ContainerStruct_fieldC_struct_setter>(fieldC_);
    return __fbthrift_field_fieldC;
  }

  /** Glean { "field": "fieldD" } */
  [[deprecated("Use `FOO.fieldD().value()` instead of `FOO.get_fieldD()`")]]
  const folly::fbvector<::std::int32_t>& get_fieldD() const&;

  /** Glean { "field": "fieldD" } */
  [[deprecated("Use `FOO.fieldD().value()` instead of `FOO.get_fieldD()`")]]
  folly::fbvector<::std::int32_t> get_fieldD() &&;

  /** Glean { "field": "fieldD" } */
  template <typename T_ContainerStruct_fieldD_struct_setter = folly::fbvector<::std::int32_t>>
  [[deprecated("Use `FOO.fieldD() = BAR` instead of `FOO.set_fieldD(BAR)`")]]
  folly::fbvector<::std::int32_t>& set_fieldD(T_ContainerStruct_fieldD_struct_setter&& fieldD_) {
    fieldD_ref() = std::forward<T_ContainerStruct_fieldD_struct_setter>(fieldD_);
    return __fbthrift_field_fieldD;
  }

  /** Glean { "field": "fieldE" } */
  [[deprecated("Use `FOO.fieldE().value()` instead of `FOO.get_fieldE()`")]]
  const folly::small_vector<::std::int32_t>& get_fieldE() const&;

  /** Glean { "field": "fieldE" } */
  [[deprecated("Use `FOO.fieldE().value()` instead of `FOO.get_fieldE()`")]]
  folly::small_vector<::std::int32_t> get_fieldE() &&;

  /** Glean { "field": "fieldE" } */
  template <typename T_ContainerStruct_fieldE_struct_setter = folly::small_vector<::std::int32_t>>
  [[deprecated("Use `FOO.fieldE() = BAR` instead of `FOO.set_fieldE(BAR)`")]]
  folly::small_vector<::std::int32_t>& set_fieldE(T_ContainerStruct_fieldE_struct_setter&& fieldE_) {
    fieldE_ref() = std::forward<T_ContainerStruct_fieldE_struct_setter>(fieldE_);
    return __fbthrift_field_fieldE;
  }

  /** Glean { "field": "fieldF" } */
  [[deprecated("Use `FOO.fieldF().value()` instead of `FOO.get_fieldF()`")]]
  const folly::sorted_vector_set<::std::int32_t>& get_fieldF() const&;

  /** Glean { "field": "fieldF" } */
  [[deprecated("Use `FOO.fieldF().value()` instead of `FOO.get_fieldF()`")]]
  folly::sorted_vector_set<::std::int32_t> get_fieldF() &&;

  /** Glean { "field": "fieldF" } */
  template <typename T_ContainerStruct_fieldF_struct_setter = folly::sorted_vector_set<::std::int32_t>>
  [[deprecated("Use `FOO.fieldF() = BAR` instead of `FOO.set_fieldF(BAR)`")]]
  folly::sorted_vector_set<::std::int32_t>& set_fieldF(T_ContainerStruct_fieldF_struct_setter&& fieldF_) {
    fieldF_ref() = std::forward<T_ContainerStruct_fieldF_struct_setter>(fieldF_);
    return __fbthrift_field_fieldF;
  }

  /** Glean { "field": "fieldG" } */
  [[deprecated("Use `FOO.fieldG().value()` instead of `FOO.get_fieldG()`")]]
  const folly::sorted_vector_map<::std::int32_t, ::std::string>& get_fieldG() const&;

  /** Glean { "field": "fieldG" } */
  [[deprecated("Use `FOO.fieldG().value()` instead of `FOO.get_fieldG()`")]]
  folly::sorted_vector_map<::std::int32_t, ::std::string> get_fieldG() &&;

  /** Glean { "field": "fieldG" } */
  template <typename T_ContainerStruct_fieldG_struct_setter = folly::sorted_vector_map<::std::int32_t, ::std::string>>
  [[deprecated("Use `FOO.fieldG() = BAR` instead of `FOO.set_fieldG(BAR)`")]]
  folly::sorted_vector_map<::std::int32_t, ::std::string>& set_fieldG(T_ContainerStruct_fieldG_struct_setter&& fieldG_) {
    fieldG_ref() = std::forward<T_ContainerStruct_fieldG_struct_setter>(fieldG_);
    return __fbthrift_field_fieldG;
  }

  /** Glean { "field": "fieldH" } */
  [[deprecated("Use `FOO.fieldH().value()` instead of `FOO.get_fieldH()`")]]
  const ::std::vector<::test::fixtures::tablebased::TrivialTypesStruct>& get_fieldH() const&;

  /** Glean { "field": "fieldH" } */
  [[deprecated("Use `FOO.fieldH().value()` instead of `FOO.get_fieldH()`")]]
  ::std::vector<::test::fixtures::tablebased::TrivialTypesStruct> get_fieldH() &&;

  /** Glean { "field": "fieldH" } */
  template <typename T_ContainerStruct_fieldH_struct_setter = ::std::vector<::test::fixtures::tablebased::TrivialTypesStruct>>
  [[deprecated("Use `FOO.fieldH() = BAR` instead of `FOO.set_fieldH(BAR)`")]]
  ::std::vector<::test::fixtures::tablebased::TrivialTypesStruct>& set_fieldH(T_ContainerStruct_fieldH_struct_setter&& fieldH_) {
    fieldH_ref() = std::forward<T_ContainerStruct_fieldH_struct_setter>(fieldH_);
    return __fbthrift_field_fieldH;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ContainerStruct>;
  friend void swap(ContainerStruct& a, ContainerStruct& b);
  friend constexpr ptrdiff_t (::apache::thrift::detail::fieldOffset<ContainerStruct>)(std::int16_t fieldIndex);
  friend constexpr ptrdiff_t (::apache::thrift::detail::issetOffset<ContainerStruct>)(std::int16_t fieldIndex);
};

template <class Protocol_>
unsigned long ContainerStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/tablebased/src/module.thrift", "name": "ExampleUnion", "kind": "union" } */
class ExampleUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = true;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::fieldA,
    ::apache::thrift::ident::fieldB
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::test::fixtures::tablebased::ContainerStruct>,
    ::apache::thrift::type::struct_t<::test::fixtures::tablebased::TrivialTypesStruct>
  >;
  void __fbthrift_clear();
  void __fbthrift_destruct();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ExampleUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:
  enum class Type : int {
    __EMPTY__ = 0,
    fieldA = 1,
    fieldB = 2,
  } ;

  ExampleUnion()
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {}

  ExampleUnion(ExampleUnion&& rhs) noexcept
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::fieldA:
      {
        set_fieldA(std::move(rhs.value_.fieldA));
        break;
      }
      case Type::fieldB:
      {
        set_fieldB(std::move(rhs.value_.fieldB));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  ExampleUnion(const ExampleUnion& rhs);

  ExampleUnion& operator=(ExampleUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        __fbthrift_clear();
        return *this;
      }
      case Type::fieldA:
      {
        set_fieldA(std::move(rhs.value_.fieldA));
        break;
      }
      case Type::fieldB:
      {
        set_fieldB(std::move(rhs.value_.fieldB));
        break;
      }
      default:
      {
        assert(false);
        __fbthrift_clear();
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  ExampleUnion& operator=(const ExampleUnion& rhs);

  ~ExampleUnion();

  union storage_type {
    ::test::fixtures::tablebased::ContainerStruct fieldA;
    ::test::fixtures::tablebased::TrivialTypesStruct fieldB;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const ExampleUnion&) const;
  bool operator<(const ExampleUnion&) const;

  /** Glean { "field": "fieldA" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::test::fixtures::tablebased::ContainerStruct& set_fieldA(::test::fixtures::tablebased::ContainerStruct const &t) {
    using T0 = ::test::fixtures::tablebased::ContainerStruct;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::fieldA);
    ::new (std::addressof(value_.fieldA)) T(t);
    return value_.fieldA;
  }

  /** Glean { "field": "fieldA" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::test::fixtures::tablebased::ContainerStruct& set_fieldA(::test::fixtures::tablebased::ContainerStruct&& t) {
    using T0 = ::test::fixtures::tablebased::ContainerStruct;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::fieldA);
    ::new (std::addressof(value_.fieldA)) T(std::move(t));
    return value_.fieldA;
  }

  /** Glean { "field": "fieldA" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::test::fixtures::tablebased::ContainerStruct, T...>> ::test::fixtures::tablebased::ContainerStruct& set_fieldA(T&&... t) {
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::fieldA);
    ::new (std::addressof(value_.fieldA)) ::test::fixtures::tablebased::ContainerStruct(std::forward<T>(t)...);
    return value_.fieldA;
  }

  /** Glean { "field": "fieldB" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::test::fixtures::tablebased::TrivialTypesStruct& set_fieldB(::test::fixtures::tablebased::TrivialTypesStruct const &t) {
    using T0 = ::test::fixtures::tablebased::TrivialTypesStruct;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::fieldB);
    ::new (std::addressof(value_.fieldB)) T(t);
    return value_.fieldB;
  }

  /** Glean { "field": "fieldB" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::test::fixtures::tablebased::TrivialTypesStruct& set_fieldB(::test::fixtures::tablebased::TrivialTypesStruct&& t) {
    using T0 = ::test::fixtures::tablebased::TrivialTypesStruct;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::fieldB);
    ::new (std::addressof(value_.fieldB)) T(std::move(t));
    return value_.fieldB;
  }

  /** Glean { "field": "fieldB" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::test::fixtures::tablebased::TrivialTypesStruct, T...>> ::test::fixtures::tablebased::TrivialTypesStruct& set_fieldB(T&&... t) {
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::fieldB);
    ::new (std::addressof(value_.fieldB)) ::test::fixtures::tablebased::TrivialTypesStruct(std::forward<T>(t)...);
    return value_.fieldB;
  }

  /** Glean { "field": "fieldA" } */
  ::test::fixtures::tablebased::ContainerStruct const& get_fieldA() const {
    if (getType() != Type::fieldA) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.fieldA;
  }

  /** Glean { "field": "fieldB" } */
  ::test::fixtures::tablebased::TrivialTypesStruct const& get_fieldB() const {
    if (getType() != Type::fieldB) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.fieldB;
  }

  ::test::fixtures::tablebased::ContainerStruct& mutable_fieldA() {
    assert(getType() == Type::fieldA);
    return value_.fieldA;
  }

  ::test::fixtures::tablebased::TrivialTypesStruct& mutable_fieldB() {
    assert(getType() == Type::fieldB);
    return value_.fieldB;
  }

  template <typename..., typename T = ::test::fixtures::tablebased::ContainerStruct>
  T move_fieldA() {
    assert(getType() == Type::fieldA);
    return std::move(value_.fieldA);
  }

  template <typename..., typename T = ::test::fixtures::tablebased::TrivialTypesStruct>
  T move_fieldB() {
    assert(getType() == Type::fieldB);
    return std::move(value_.fieldB);
  }

  /** Glean { "field": "fieldA" } */
  template <typename..., typename T = ::test::fixtures::tablebased::ContainerStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> fieldA_ref() const& {
    return {value_.fieldA, fbthrift_type_, folly::to_underlying(Type::fieldA), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "fieldA" } */
  template <typename..., typename T = ::test::fixtures::tablebased::ContainerStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> fieldA_ref() & {
    return {value_.fieldA, fbthrift_type_, folly::to_underlying(Type::fieldA), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "fieldA" } */
  template <typename..., typename T = ::test::fixtures::tablebased::ContainerStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> fieldA_ref() && {
    return {std::move(value_.fieldA), fbthrift_type_, folly::to_underlying(Type::fieldA), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "fieldA" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::test::fixtures::tablebased::ContainerStruct&> fieldA() const& {
    return {value_.fieldA, fbthrift_type_, folly::to_underlying(Type::fieldA), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "fieldA" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::test::fixtures::tablebased::ContainerStruct&> fieldA() & {
    return {value_.fieldA, fbthrift_type_, folly::to_underlying(Type::fieldA), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "fieldA" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::test::fixtures::tablebased::ContainerStruct&&> fieldA() && {
    return {std::move(value_.fieldA), fbthrift_type_, folly::to_underlying(Type::fieldA), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "fieldB" } */
  template <typename..., typename T = ::test::fixtures::tablebased::TrivialTypesStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> fieldB_ref() const& {
    return {value_.fieldB, fbthrift_type_, folly::to_underlying(Type::fieldB), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "fieldB" } */
  template <typename..., typename T = ::test::fixtures::tablebased::TrivialTypesStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> fieldB_ref() & {
    return {value_.fieldB, fbthrift_type_, folly::to_underlying(Type::fieldB), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "fieldB" } */
  template <typename..., typename T = ::test::fixtures::tablebased::TrivialTypesStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> fieldB_ref() && {
    return {std::move(value_.fieldB), fbthrift_type_, folly::to_underlying(Type::fieldB), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "fieldB" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::test::fixtures::tablebased::TrivialTypesStruct&> fieldB() const& {
    return {value_.fieldB, fbthrift_type_, folly::to_underlying(Type::fieldB), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "fieldB" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::test::fixtures::tablebased::TrivialTypesStruct&> fieldB() & {
    return {value_.fieldB, fbthrift_type_, folly::to_underlying(Type::fieldB), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "fieldB" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::test::fixtures::tablebased::TrivialTypesStruct&&> fieldB() && {
    return {std::move(value_.fieldB), fbthrift_type_, folly::to_underlying(Type::fieldB), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(fbthrift_type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  storage_type value_;
  std::underlying_type_t<Type> fbthrift_type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ExampleUnion>;
  friend void swap(ExampleUnion& a, ExampleUnion& b);
  friend constexpr ptrdiff_t (::apache::thrift::detail::unionTypeOffset<ExampleUnion>)();
};

template <class Protocol_>
unsigned long ExampleUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace test::fixtures::tablebased

namespace apache::thrift {

template <> struct TEnumDataStorage<::test::fixtures::tablebased::ExampleUnion::Type>;

template <> struct TEnumTraits<::test::fixtures::tablebased::ExampleUnion::Type> {
  using type = ::test::fixtures::tablebased::ExampleUnion::Type;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }

  static constexpr type min() { return type::fieldA; }
  static constexpr type max() { return type::fieldB; }
};
} // namespace apache::thrift

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::test::fixtures::tablebased::TrivialTypesStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -8238059385462733232;
  static constexpr ::std::string_view definitionKey = {"\x33\x7f\xf2\x7c\xbd\xcb\xe7\x9a\xbe\x45\x2d\x0c\xd9\xb6\x0a\x37", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::tablebased::ContainerStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -8238059385462733232;
  static constexpr ::std::string_view definitionKey = {"\x81\xaf\x65\x36\x88\xb1\xa8\x3c\x8f\xaa\xdb\xfb\xe0\xda\xd7\x5c", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::tablebased::ExampleUnion, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -8238059385462733232;
  static constexpr ::std::string_view definitionKey = {"\x97\x17\x60\xd7\x00\x62\x1c\x7d\x98\x42\xa3\xaa\x53\x3a\xa6\xbf", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::tablebased::ExampleEnum, true> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -8238059385462733232;
  static constexpr ::std::string_view definitionKey = {"\x53\x45\xcc\x5e\xff\xb2\xbb\x13\x70\x19\xa8\x45\x5a\x16\xc1\x11", 16};
};
} // namespace apache::thrift::detail

namespace apache::thrift::detail {
template <>
struct TypeToInfo<
    ::apache::thrift::type_class::structure,
    ::test::fixtures::tablebased::TrivialTypesStruct> {
  static const ::apache::thrift::detail::TypeInfo typeInfo;
};
template <>
struct TypeToInfo<
    ::apache::thrift::type_class::structure,
    ::test::fixtures::tablebased::ContainerStruct> {
  static const ::apache::thrift::detail::TypeInfo typeInfo;
};
template <>
struct TypeToInfo<
    ::apache::thrift::type_class::variant,
    ::test::fixtures::tablebased::ExampleUnion> {
  static const ::apache::thrift::detail::TypeInfo typeInfo;
};
  template <>
    struct TypeToInfo<
        ::apache::thrift::type_class::enumeration,
        ::test::fixtures::tablebased::ExampleEnum> {
    static const ::apache::thrift::detail::TypeInfo typeInfo;
  };
} // namespace apache::thrift::detail
