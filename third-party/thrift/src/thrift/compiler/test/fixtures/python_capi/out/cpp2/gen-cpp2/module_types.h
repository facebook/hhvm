/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/python_capi/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>
#include "thrift/compiler/test/fixtures/python_capi/src/gen-cpp2/thrift_dep_types.h"
#include "thrift/compiler/test/fixtures/python_capi/src/gen-cpp2/serialized_dep_types.h"
#include "thrift/lib/thrift/gen-cpp2/id_types.h"
#include "thrift/lib/thrift/gen-cpp2/schema_types.h"
#include <deque>
#include <unordered_map>
#include <unordered_set>
#include <folly/container/F14Set.h>
#include <folly/FBString.h>
#include <folly/container/F14Map.h>
#include <folly/small_vector.h>
#include "thrift/test/python_capi/adapter.h"
#include "thrift/lib/cpp2/util/ManagedStringView.h"

namespace apache::thrift {
namespace ident {
struct inty;
struct stringy;
struct myItemy;
struct myEnumy;
struct boulet;
struct floatListy;
struct strMappy;
struct intSetty;
struct s;
struct s;
struct x;
struct normal;
struct doubled;
struct booly;
struct charry;
struct shortay;
struct inty;
struct longy;
struct floaty;
struct dubby;
struct stringy;
struct bytey;
struct buffy;
struct pointbuffy;
struct patched_struct;
struct empty_struct;
struct fbstring;
struct managed_string_view;
struct some_error;
struct adapted_int;
struct list_adapted_int;
struct set_adapted_int;
struct inline_adapted_int;
struct boolz;
struct intz;
struct stringz;
struct encoded;
struct uidz;
struct matrix;
struct ucharz;
struct voxels;
struct buf_ptrs;
struct enumz;
struct intz;
struct binnaz;
struct encoded;
struct uidz;
struct charz;
struct setz;
struct enumz;
struct intz;
struct binnaz;
struct encoded;
struct flotz;
struct map_list;
struct list_map;
struct fast_list_map;
struct buf_map;
struct unsigned_list_map;
struct enum_;
struct renamed_;
struct primitive;
struct aliased;
struct xstruct;
struct xenum;
struct serial_struct;
struct friends;
struct serial_union;
struct serial_error;
struct myEnum;
struct myStruct;
struct intSet;
struct myString;
struct doubleList;
struct strMap;
struct adapted_int;
struct iobuf;
struct iobuf_ptr;
struct iobufRef;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_inty
#define APACHE_THRIFT_ACCESSOR_inty
APACHE_THRIFT_DEFINE_ACCESSOR(inty);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_stringy
#define APACHE_THRIFT_ACCESSOR_stringy
APACHE_THRIFT_DEFINE_ACCESSOR(stringy);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myItemy
#define APACHE_THRIFT_ACCESSOR_myItemy
APACHE_THRIFT_DEFINE_ACCESSOR(myItemy);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myEnumy
#define APACHE_THRIFT_ACCESSOR_myEnumy
APACHE_THRIFT_DEFINE_ACCESSOR(myEnumy);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_boulet
#define APACHE_THRIFT_ACCESSOR_boulet
APACHE_THRIFT_DEFINE_ACCESSOR(boulet);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_floatListy
#define APACHE_THRIFT_ACCESSOR_floatListy
APACHE_THRIFT_DEFINE_ACCESSOR(floatListy);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_strMappy
#define APACHE_THRIFT_ACCESSOR_strMappy
APACHE_THRIFT_DEFINE_ACCESSOR(strMappy);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_intSetty
#define APACHE_THRIFT_ACCESSOR_intSetty
APACHE_THRIFT_DEFINE_ACCESSOR(intSetty);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_s
#define APACHE_THRIFT_ACCESSOR_s
APACHE_THRIFT_DEFINE_ACCESSOR(s);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_s
#define APACHE_THRIFT_ACCESSOR_s
APACHE_THRIFT_DEFINE_ACCESSOR(s);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_x
#define APACHE_THRIFT_ACCESSOR_x
APACHE_THRIFT_DEFINE_ACCESSOR(x);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_normal
#define APACHE_THRIFT_ACCESSOR_normal
APACHE_THRIFT_DEFINE_ACCESSOR(normal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_doubled
#define APACHE_THRIFT_ACCESSOR_doubled
APACHE_THRIFT_DEFINE_ACCESSOR(doubled);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_booly
#define APACHE_THRIFT_ACCESSOR_booly
APACHE_THRIFT_DEFINE_ACCESSOR(booly);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_charry
#define APACHE_THRIFT_ACCESSOR_charry
APACHE_THRIFT_DEFINE_ACCESSOR(charry);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_shortay
#define APACHE_THRIFT_ACCESSOR_shortay
APACHE_THRIFT_DEFINE_ACCESSOR(shortay);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_inty
#define APACHE_THRIFT_ACCESSOR_inty
APACHE_THRIFT_DEFINE_ACCESSOR(inty);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_longy
#define APACHE_THRIFT_ACCESSOR_longy
APACHE_THRIFT_DEFINE_ACCESSOR(longy);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_floaty
#define APACHE_THRIFT_ACCESSOR_floaty
APACHE_THRIFT_DEFINE_ACCESSOR(floaty);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_dubby
#define APACHE_THRIFT_ACCESSOR_dubby
APACHE_THRIFT_DEFINE_ACCESSOR(dubby);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_stringy
#define APACHE_THRIFT_ACCESSOR_stringy
APACHE_THRIFT_DEFINE_ACCESSOR(stringy);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_bytey
#define APACHE_THRIFT_ACCESSOR_bytey
APACHE_THRIFT_DEFINE_ACCESSOR(bytey);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_buffy
#define APACHE_THRIFT_ACCESSOR_buffy
APACHE_THRIFT_DEFINE_ACCESSOR(buffy);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_pointbuffy
#define APACHE_THRIFT_ACCESSOR_pointbuffy
APACHE_THRIFT_DEFINE_ACCESSOR(pointbuffy);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patched_struct
#define APACHE_THRIFT_ACCESSOR_patched_struct
APACHE_THRIFT_DEFINE_ACCESSOR(patched_struct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_empty_struct
#define APACHE_THRIFT_ACCESSOR_empty_struct
APACHE_THRIFT_DEFINE_ACCESSOR(empty_struct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fbstring
#define APACHE_THRIFT_ACCESSOR_fbstring
APACHE_THRIFT_DEFINE_ACCESSOR(fbstring);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_managed_string_view
#define APACHE_THRIFT_ACCESSOR_managed_string_view
APACHE_THRIFT_DEFINE_ACCESSOR(managed_string_view);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_some_error
#define APACHE_THRIFT_ACCESSOR_some_error
APACHE_THRIFT_DEFINE_ACCESSOR(some_error);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adapted_int
#define APACHE_THRIFT_ACCESSOR_adapted_int
APACHE_THRIFT_DEFINE_ACCESSOR(adapted_int);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_adapted_int
#define APACHE_THRIFT_ACCESSOR_list_adapted_int
APACHE_THRIFT_DEFINE_ACCESSOR(list_adapted_int);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_set_adapted_int
#define APACHE_THRIFT_ACCESSOR_set_adapted_int
APACHE_THRIFT_DEFINE_ACCESSOR(set_adapted_int);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_inline_adapted_int
#define APACHE_THRIFT_ACCESSOR_inline_adapted_int
APACHE_THRIFT_DEFINE_ACCESSOR(inline_adapted_int);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_boolz
#define APACHE_THRIFT_ACCESSOR_boolz
APACHE_THRIFT_DEFINE_ACCESSOR(boolz);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_intz
#define APACHE_THRIFT_ACCESSOR_intz
APACHE_THRIFT_DEFINE_ACCESSOR(intz);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_stringz
#define APACHE_THRIFT_ACCESSOR_stringz
APACHE_THRIFT_DEFINE_ACCESSOR(stringz);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_encoded
#define APACHE_THRIFT_ACCESSOR_encoded
APACHE_THRIFT_DEFINE_ACCESSOR(encoded);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_uidz
#define APACHE_THRIFT_ACCESSOR_uidz
APACHE_THRIFT_DEFINE_ACCESSOR(uidz);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_matrix
#define APACHE_THRIFT_ACCESSOR_matrix
APACHE_THRIFT_DEFINE_ACCESSOR(matrix);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ucharz
#define APACHE_THRIFT_ACCESSOR_ucharz
APACHE_THRIFT_DEFINE_ACCESSOR(ucharz);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_voxels
#define APACHE_THRIFT_ACCESSOR_voxels
APACHE_THRIFT_DEFINE_ACCESSOR(voxels);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_buf_ptrs
#define APACHE_THRIFT_ACCESSOR_buf_ptrs
APACHE_THRIFT_DEFINE_ACCESSOR(buf_ptrs);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_enumz
#define APACHE_THRIFT_ACCESSOR_enumz
APACHE_THRIFT_DEFINE_ACCESSOR(enumz);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_intz
#define APACHE_THRIFT_ACCESSOR_intz
APACHE_THRIFT_DEFINE_ACCESSOR(intz);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binnaz
#define APACHE_THRIFT_ACCESSOR_binnaz
APACHE_THRIFT_DEFINE_ACCESSOR(binnaz);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_encoded
#define APACHE_THRIFT_ACCESSOR_encoded
APACHE_THRIFT_DEFINE_ACCESSOR(encoded);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_uidz
#define APACHE_THRIFT_ACCESSOR_uidz
APACHE_THRIFT_DEFINE_ACCESSOR(uidz);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_charz
#define APACHE_THRIFT_ACCESSOR_charz
APACHE_THRIFT_DEFINE_ACCESSOR(charz);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_setz
#define APACHE_THRIFT_ACCESSOR_setz
APACHE_THRIFT_DEFINE_ACCESSOR(setz);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_enumz
#define APACHE_THRIFT_ACCESSOR_enumz
APACHE_THRIFT_DEFINE_ACCESSOR(enumz);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_intz
#define APACHE_THRIFT_ACCESSOR_intz
APACHE_THRIFT_DEFINE_ACCESSOR(intz);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binnaz
#define APACHE_THRIFT_ACCESSOR_binnaz
APACHE_THRIFT_DEFINE_ACCESSOR(binnaz);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_encoded
#define APACHE_THRIFT_ACCESSOR_encoded
APACHE_THRIFT_DEFINE_ACCESSOR(encoded);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_flotz
#define APACHE_THRIFT_ACCESSOR_flotz
APACHE_THRIFT_DEFINE_ACCESSOR(flotz);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_map_list
#define APACHE_THRIFT_ACCESSOR_map_list
APACHE_THRIFT_DEFINE_ACCESSOR(map_list);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_map
#define APACHE_THRIFT_ACCESSOR_list_map
APACHE_THRIFT_DEFINE_ACCESSOR(list_map);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fast_list_map
#define APACHE_THRIFT_ACCESSOR_fast_list_map
APACHE_THRIFT_DEFINE_ACCESSOR(fast_list_map);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_buf_map
#define APACHE_THRIFT_ACCESSOR_buf_map
APACHE_THRIFT_DEFINE_ACCESSOR(buf_map);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_unsigned_list_map
#define APACHE_THRIFT_ACCESSOR_unsigned_list_map
APACHE_THRIFT_DEFINE_ACCESSOR(unsigned_list_map);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_enum_
#define APACHE_THRIFT_ACCESSOR_enum_
APACHE_THRIFT_DEFINE_ACCESSOR(enum_);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_renamed_
#define APACHE_THRIFT_ACCESSOR_renamed_
APACHE_THRIFT_DEFINE_ACCESSOR(renamed_);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_primitive
#define APACHE_THRIFT_ACCESSOR_primitive
APACHE_THRIFT_DEFINE_ACCESSOR(primitive);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_aliased
#define APACHE_THRIFT_ACCESSOR_aliased
APACHE_THRIFT_DEFINE_ACCESSOR(aliased);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_xstruct
#define APACHE_THRIFT_ACCESSOR_xstruct
APACHE_THRIFT_DEFINE_ACCESSOR(xstruct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_xenum
#define APACHE_THRIFT_ACCESSOR_xenum
APACHE_THRIFT_DEFINE_ACCESSOR(xenum);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_serial_struct
#define APACHE_THRIFT_ACCESSOR_serial_struct
APACHE_THRIFT_DEFINE_ACCESSOR(serial_struct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_friends
#define APACHE_THRIFT_ACCESSOR_friends
APACHE_THRIFT_DEFINE_ACCESSOR(friends);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_serial_union
#define APACHE_THRIFT_ACCESSOR_serial_union
APACHE_THRIFT_DEFINE_ACCESSOR(serial_union);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_serial_error
#define APACHE_THRIFT_ACCESSOR_serial_error
APACHE_THRIFT_DEFINE_ACCESSOR(serial_error);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myEnum
#define APACHE_THRIFT_ACCESSOR_myEnum
APACHE_THRIFT_DEFINE_ACCESSOR(myEnum);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myStruct
#define APACHE_THRIFT_ACCESSOR_myStruct
APACHE_THRIFT_DEFINE_ACCESSOR(myStruct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_intSet
#define APACHE_THRIFT_ACCESSOR_intSet
APACHE_THRIFT_DEFINE_ACCESSOR(intSet);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myString
#define APACHE_THRIFT_ACCESSOR_myString
APACHE_THRIFT_DEFINE_ACCESSOR(myString);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_doubleList
#define APACHE_THRIFT_ACCESSOR_doubleList
APACHE_THRIFT_DEFINE_ACCESSOR(doubleList);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_strMap
#define APACHE_THRIFT_ACCESSOR_strMap
APACHE_THRIFT_DEFINE_ACCESSOR(strMap);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adapted_int
#define APACHE_THRIFT_ACCESSOR_adapted_int
APACHE_THRIFT_DEFINE_ACCESSOR(adapted_int);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_iobuf
#define APACHE_THRIFT_ACCESSOR_iobuf
APACHE_THRIFT_DEFINE_ACCESSOR(iobuf);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_iobuf_ptr
#define APACHE_THRIFT_ACCESSOR_iobuf_ptr
APACHE_THRIFT_DEFINE_ACCESSOR(iobuf_ptr);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_iobufRef
#define APACHE_THRIFT_ACCESSOR_iobufRef
APACHE_THRIFT_DEFINE_ACCESSOR(iobufRef);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
namespace test::fixtures::python_capi {

/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/module.thrift", "name": "MyEnum", "kind": "enum" } */
enum class MyEnum {
  MyValue1 = 0,
  MyValue2 = 1,
};

/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/module.thrift", "name": "NormalDecentEnum", "kind": "enum" } */
enum class NormalDecentEnum {
  l0O1 = 1,
  FuBaR = 2,
};

} // namespace test::fixtures::python_capi

template<> struct std::hash<::test::fixtures::python_capi::MyEnum> :
  ::apache::thrift::detail::enum_hash<::test::fixtures::python_capi::MyEnum> {};
template<> struct std::hash<::test::fixtures::python_capi::NormalDecentEnum> :
  ::apache::thrift::detail::enum_hash<::test::fixtures::python_capi::NormalDecentEnum> {};

namespace apache::thrift {

template <> struct TEnumTraits<::test::fixtures::python_capi::MyEnum> {
  using type = ::test::fixtures::python_capi::MyEnum;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "MyEnum";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "module";
  }

  FOLLY_ERASE static constexpr std::string_view __fbthrift_thrift_uri() noexcept {
    return "test.dev/fixtures/python_capi/MyEnum";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::MyValue1; }
  static constexpr type max() { return type::MyValue2; }
};

template <> struct TEnumTraits<::test::fixtures::python_capi::NormalDecentEnum> {
  using type = ::test::fixtures::python_capi::NormalDecentEnum;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "AnnoyingEnum";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "module";
  }

  FOLLY_ERASE static constexpr std::string_view __fbthrift_thrift_uri() noexcept {
    return "test.dev/fixtures/python_capi/AnnoyingEnum";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::l0O1; }
  static constexpr type max() { return type::FuBaR; }
};

} // namespace apache::thrift
// END declare_enums
// BEGIN forward_declare
namespace test::fixtures::python_capi {
class MyStruct;
class MyDataItem;
class TransitiveDoubler;
namespace detail {
class DoubledPair;
} // namespace detail
class StringPair;
class VapidStruct;
class PrimitiveStruct;
class AdaptedFields;
class ListStruct;
class SetStruct;
class MapStruct;
class ComposeStruct;
class Shallot;
class SomeBinary;
} // namespace test::fixtures::python_capi
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
template<>
struct is_cpp_ref_field_optional<::test::fixtures::python_capi::PrimitiveStruct,::apache::thrift::type::field_id<9>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::test::fixtures::python_capi::PrimitiveStruct,::apache::thrift::type::field_id<12>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::test::fixtures::python_capi::PrimitiveStruct,::apache::thrift::type::field_id<13>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::test::fixtures::python_capi::ListStruct,::apache::thrift::type::field_id<3>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::test::fixtures::python_capi::SetStruct,::apache::thrift::type::field_id<3>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::test::fixtures::python_capi::MapStruct,::apache::thrift::type::field_id<3>> : std::true_type{};
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace test::fixtures::python_capi {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/module.thrift", "name": "uint64", "kind": "typedef" } */
using uint64 = uint64_t;
/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/module.thrift", "name": "ui64", "kind": "typedef" } */
using ui64 = ::test::fixtures::python_capi::uint64;
/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/module.thrift", "name": "signed_byte", "kind": "typedef" } */
using signed_byte = ::std::int8_t;
/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/module.thrift", "name": "IOBuf", "kind": "typedef" } */
using IOBuf = folly::IOBuf;
/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/module.thrift", "name": "IOBufPtr", "kind": "typedef" } */
using IOBufPtr = std::unique_ptr<folly::IOBuf>;
/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/module.thrift", "name": "ListAlias", "kind": "typedef" } */
using ListAlias = ::test::fixtures::python_capi::ListStruct;

/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/module.thrift", "name": "MyDataItem", "kind": "struct" } */
class MyDataItem final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::s
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyDataItem;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  MyDataItem();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyDataItem(apache::thrift::FragileConstructor, ::std::string s__arg);

  MyDataItem(MyDataItem&&) noexcept;

  MyDataItem(const MyDataItem& src);


  MyDataItem& operator=(MyDataItem&&) noexcept;
  MyDataItem& operator=(const MyDataItem& src);

  ~MyDataItem();

 private:
  ::std::string __fbthrift_field_s;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyDataItem&) const;
  bool operator<(const MyDataItem&) const;

  /** Glean { "field": "s" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> s_ref() const& {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "s" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> s_ref() & {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "s" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> s_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_s), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "s" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> s() const& {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "s" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> s() & {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "s" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> s() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_s), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "s" } */
  [[deprecated("Use `FOO.s().value()` instead of `FOO.get_s()`")]]
  const ::std::string& get_s() const& {
    return __fbthrift_field_s;
  }

  /** Glean { "field": "s" } */
  [[deprecated("Use `FOO.s().value()` instead of `FOO.get_s()`")]]
  ::std::string get_s() && {
    return static_cast<::std::string&&>(__fbthrift_field_s);
  }

  /** Glean { "field": "s" } */
  template <typename T_MyDataItem_s_struct_setter = ::std::string>
  [[deprecated("Use `FOO.s() = BAR` instead of `FOO.set_s(BAR)`")]]
  ::std::string& set_s(T_MyDataItem_s_struct_setter&& s_) {
    s_ref() = std::forward<T_MyDataItem_s_struct_setter>(s_);
    return __fbthrift_field_s;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyDataItem>;
  friend void swap(MyDataItem& a, MyDataItem& b);
};

template <class Protocol_>
unsigned long MyDataItem::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/module.thrift", "name": "MyStruct", "kind": "struct" } */
class MyStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 8;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::inty,
    ::apache::thrift::ident::stringy,
    ::apache::thrift::ident::myItemy,
    ::apache::thrift::ident::myEnumy,
    ::apache::thrift::ident::boulet,
    ::apache::thrift::ident::floatListy,
    ::apache::thrift::ident::strMappy,
    ::apache::thrift::ident::intSetty
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyDataItem>,
    ::apache::thrift::type::enum_t<::test::fixtures::python_capi::MyEnum>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::list<::apache::thrift::type::float_t>,
    ::apache::thrift::type::map<::apache::thrift::type::binary_t, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::set<::apache::thrift::type::i32_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  MyStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStruct(apache::thrift::FragileConstructor, ::std::int64_t inty__arg, ::std::string stringy__arg, ::test::fixtures::python_capi::MyDataItem myItemy__arg, ::test::fixtures::python_capi::MyEnum myEnumy__arg, bool boulet__arg, ::std::vector<float> floatListy__arg, ::std::map<::std::string, ::std::string> strMappy__arg, ::std::set<::std::int32_t> intSetty__arg);

  MyStruct(MyStruct&&) noexcept;

  MyStruct(const MyStruct& src);


  MyStruct& operator=(MyStruct&&) noexcept;
  MyStruct& operator=(const MyStruct& src);

  ~MyStruct();

 private:
  ::std::int64_t __fbthrift_field_inty;
 private:
  ::std::string __fbthrift_field_stringy;
 private:
  ::test::fixtures::python_capi::MyDataItem __fbthrift_field_myItemy;
 private:
  ::test::fixtures::python_capi::MyEnum __fbthrift_field_myEnumy;
 private:
  bool __fbthrift_field_boulet;
 private:
  ::std::vector<float> __fbthrift_field_floatListy;
 private:
  ::std::map<::std::string, ::std::string> __fbthrift_field_strMappy;
 private:
  ::std::set<::std::int32_t> __fbthrift_field_intSetty;
 private:
  apache::thrift::detail::isset_bitset<8, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStruct&) const;
  bool operator<(const MyStruct&) const;

  /** Glean { "field": "inty" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> inty_ref() const& {
    return {this->__fbthrift_field_inty, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "inty" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> inty_ref() & {
    return {this->__fbthrift_field_inty, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "inty" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> inty_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_inty), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "inty" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> inty() const& {
    return {this->__fbthrift_field_inty, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "inty" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> inty() & {
    return {this->__fbthrift_field_inty, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "inty" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> inty() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_inty), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "stringy" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> stringy_ref() const& {
    return {this->__fbthrift_field_stringy, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "stringy" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> stringy_ref() & {
    return {this->__fbthrift_field_stringy, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "stringy" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> stringy_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_stringy), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "stringy" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> stringy() const& {
    return {this->__fbthrift_field_stringy, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "stringy" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> stringy() & {
    return {this->__fbthrift_field_stringy, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "stringy" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> stringy() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_stringy), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "myItemy" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myItemy_ref() const& {
    return {this->__fbthrift_field_myItemy, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myItemy" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myItemy_ref() & {
    return {this->__fbthrift_field_myItemy, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myItemy" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myItemy_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myItemy), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myItemy" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myItemy() const& {
    return {this->__fbthrift_field_myItemy, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myItemy" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myItemy() & {
    return {this->__fbthrift_field_myItemy, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myItemy" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myItemy() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myItemy), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myEnumy" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myEnumy_ref() const& {
    return {this->__fbthrift_field_myEnumy, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myEnumy" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myEnumy_ref() & {
    return {this->__fbthrift_field_myEnumy, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myEnumy" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myEnumy_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myEnumy), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myEnumy" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myEnumy() const& {
    return {this->__fbthrift_field_myEnumy, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myEnumy" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myEnumy() & {
    return {this->__fbthrift_field_myEnumy, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myEnumy" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myEnumy() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myEnumy), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "boulet" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> boulet_ref() const& {
    return {this->__fbthrift_field_boulet, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "boulet" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> boulet_ref() & {
    return {this->__fbthrift_field_boulet, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "boulet" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> boulet_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_boulet), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "boulet" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> boulet() const& {
    return {this->__fbthrift_field_boulet, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "boulet" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> boulet() & {
    return {this->__fbthrift_field_boulet, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "boulet" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> boulet() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_boulet), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "floatListy" } */
  template <typename..., typename fbthrift_T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> floatListy_ref() const& {
    return {this->__fbthrift_field_floatListy, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "floatListy" } */
  template <typename..., typename fbthrift_T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> floatListy_ref() & {
    return {this->__fbthrift_field_floatListy, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "floatListy" } */
  template <typename..., typename fbthrift_T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> floatListy_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_floatListy), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "floatListy" } */
  template <typename..., typename fbthrift_T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> floatListy() const& {
    return {this->__fbthrift_field_floatListy, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "floatListy" } */
  template <typename..., typename fbthrift_T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> floatListy() & {
    return {this->__fbthrift_field_floatListy, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "floatListy" } */
  template <typename..., typename fbthrift_T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> floatListy() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_floatListy), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "strMappy" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> strMappy_ref() const& {
    return {this->__fbthrift_field_strMappy, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "strMappy" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> strMappy_ref() & {
    return {this->__fbthrift_field_strMappy, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "strMappy" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> strMappy_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_strMappy), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "strMappy" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> strMappy() const& {
    return {this->__fbthrift_field_strMappy, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "strMappy" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> strMappy() & {
    return {this->__fbthrift_field_strMappy, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "strMappy" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> strMappy() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_strMappy), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "intSetty" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> intSetty_ref() const& {
    return {this->__fbthrift_field_intSetty, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "intSetty" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> intSetty_ref() & {
    return {this->__fbthrift_field_intSetty, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "intSetty" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> intSetty_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_intSetty), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "intSetty" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> intSetty() const& {
    return {this->__fbthrift_field_intSetty, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "intSetty" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> intSetty() & {
    return {this->__fbthrift_field_intSetty, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "intSetty" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> intSetty() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_intSetty), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "inty" } */
  [[deprecated("Use `FOO.inty().value()` instead of `FOO.get_inty()`")]]
  ::std::int64_t get_inty() const;

  /** Glean { "field": "inty" } */
  [[deprecated("Use `FOO.inty() = BAR` instead of `FOO.set_inty(BAR)`")]]
  ::std::int64_t& set_inty(::std::int64_t inty_);

  /** Glean { "field": "stringy" } */
  [[deprecated("Use `FOO.stringy().value()` instead of `FOO.get_stringy()`")]]
  const ::std::string& get_stringy() const& {
    return __fbthrift_field_stringy;
  }

  /** Glean { "field": "stringy" } */
  [[deprecated("Use `FOO.stringy().value()` instead of `FOO.get_stringy()`")]]
  ::std::string get_stringy() && {
    return static_cast<::std::string&&>(__fbthrift_field_stringy);
  }

  /** Glean { "field": "stringy" } */
  template <typename T_MyStruct_stringy_struct_setter = ::std::string>
  [[deprecated("Use `FOO.stringy() = BAR` instead of `FOO.set_stringy(BAR)`")]]
  ::std::string& set_stringy(T_MyStruct_stringy_struct_setter&& stringy_) {
    stringy_ref() = std::forward<T_MyStruct_stringy_struct_setter>(stringy_);
    return __fbthrift_field_stringy;
  }

  /** Glean { "field": "myItemy" } */
  [[deprecated("Use `FOO.myItemy().value()` instead of `FOO.get_myItemy()`")]]
  const ::test::fixtures::python_capi::MyDataItem& get_myItemy() const&;

  /** Glean { "field": "myItemy" } */
  [[deprecated("Use `FOO.myItemy().value()` instead of `FOO.get_myItemy()`")]]
  ::test::fixtures::python_capi::MyDataItem get_myItemy() &&;

  /** Glean { "field": "myItemy" } */
  template <typename T_MyStruct_myItemy_struct_setter = ::test::fixtures::python_capi::MyDataItem>
  [[deprecated("Use `FOO.myItemy() = BAR` instead of `FOO.set_myItemy(BAR)`")]]
  ::test::fixtures::python_capi::MyDataItem& set_myItemy(T_MyStruct_myItemy_struct_setter&& myItemy_) {
    myItemy_ref() = std::forward<T_MyStruct_myItemy_struct_setter>(myItemy_);
    return __fbthrift_field_myItemy;
  }

  /** Glean { "field": "myEnumy" } */
  [[deprecated("Use `FOO.myEnumy().value()` instead of `FOO.get_myEnumy()`")]]
  ::test::fixtures::python_capi::MyEnum get_myEnumy() const;

  /** Glean { "field": "myEnumy" } */
  [[deprecated("Use `FOO.myEnumy() = BAR` instead of `FOO.set_myEnumy(BAR)`")]]
  ::test::fixtures::python_capi::MyEnum& set_myEnumy(::test::fixtures::python_capi::MyEnum myEnumy_);

  /** Glean { "field": "boulet" } */
  [[deprecated("Use `FOO.boulet().value()` instead of `FOO.get_boulet()`")]]
  bool get_boulet() const;

  /** Glean { "field": "boulet" } */
  [[deprecated("Use `FOO.boulet() = BAR` instead of `FOO.set_boulet(BAR)`")]]
  bool& set_boulet(bool boulet_);

  /** Glean { "field": "floatListy" } */
  [[deprecated("Use `FOO.floatListy().value()` instead of `FOO.get_floatListy()`")]]
  const ::std::vector<float>& get_floatListy() const&;

  /** Glean { "field": "floatListy" } */
  [[deprecated("Use `FOO.floatListy().value()` instead of `FOO.get_floatListy()`")]]
  ::std::vector<float> get_floatListy() &&;

  /** Glean { "field": "floatListy" } */
  template <typename T_MyStruct_floatListy_struct_setter = ::std::vector<float>>
  [[deprecated("Use `FOO.floatListy() = BAR` instead of `FOO.set_floatListy(BAR)`")]]
  ::std::vector<float>& set_floatListy(T_MyStruct_floatListy_struct_setter&& floatListy_) {
    floatListy_ref() = std::forward<T_MyStruct_floatListy_struct_setter>(floatListy_);
    return __fbthrift_field_floatListy;
  }

  /** Glean { "field": "strMappy" } */
  [[deprecated("Use `FOO.strMappy().value()` instead of `FOO.get_strMappy()`")]]
  const ::std::map<::std::string, ::std::string>& get_strMappy() const&;

  /** Glean { "field": "strMappy" } */
  [[deprecated("Use `FOO.strMappy().value()` instead of `FOO.get_strMappy()`")]]
  ::std::map<::std::string, ::std::string> get_strMappy() &&;

  /** Glean { "field": "strMappy" } */
  template <typename T_MyStruct_strMappy_struct_setter = ::std::map<::std::string, ::std::string>>
  [[deprecated("Use `FOO.strMappy() = BAR` instead of `FOO.set_strMappy(BAR)`")]]
  ::std::map<::std::string, ::std::string>& set_strMappy(T_MyStruct_strMappy_struct_setter&& strMappy_) {
    strMappy_ref() = std::forward<T_MyStruct_strMappy_struct_setter>(strMappy_);
    return __fbthrift_field_strMappy;
  }

  /** Glean { "field": "intSetty" } */
  [[deprecated("Use `FOO.intSetty().value()` instead of `FOO.get_intSetty()`")]]
  const ::std::set<::std::int32_t>& get_intSetty() const&;

  /** Glean { "field": "intSetty" } */
  [[deprecated("Use `FOO.intSetty().value()` instead of `FOO.get_intSetty()`")]]
  ::std::set<::std::int32_t> get_intSetty() &&;

  /** Glean { "field": "intSetty" } */
  template <typename T_MyStruct_intSetty_struct_setter = ::std::set<::std::int32_t>>
  [[deprecated("Use `FOO.intSetty() = BAR` instead of `FOO.set_intSetty(BAR)`")]]
  ::std::set<::std::int32_t>& set_intSetty(T_MyStruct_intSetty_struct_setter&& intSetty_) {
    intSetty_ref() = std::forward<T_MyStruct_intSetty_struct_setter>(intSetty_);
    return __fbthrift_field_intSetty;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStruct>;
  friend void swap(MyStruct& a, MyStruct& b);
};

template <class Protocol_>
unsigned long MyStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/module.thrift", "name": "TransitiveDoubler", "kind": "struct" } */
class TransitiveDoubler final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TransitiveDoubler;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  TransitiveDoubler() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TransitiveDoubler(apache::thrift::FragileConstructor);

  TransitiveDoubler(TransitiveDoubler&&) = default;

  TransitiveDoubler(const TransitiveDoubler&) = default;


  TransitiveDoubler& operator=(TransitiveDoubler&&) = default;

  TransitiveDoubler& operator=(const TransitiveDoubler&) = default;

 public:

  bool operator==(const TransitiveDoubler&) const;
  bool operator<(const TransitiveDoubler&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TransitiveDoubler>;
  friend void swap(TransitiveDoubler& a, TransitiveDoubler& b);
};

template <class Protocol_>
unsigned long TransitiveDoubler::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


namespace detail {
/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/module.thrift", "name": "DoubledPair", "kind": "struct" } */
class DoubledPair final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::s,
    ::apache::thrift::ident::x
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::i32_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = DoubledPair;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  DoubledPair();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  DoubledPair(apache::thrift::FragileConstructor, ::std::string s__arg, ::std::int32_t x__arg);

  DoubledPair(DoubledPair&&) noexcept;

  DoubledPair(const DoubledPair& src);


  DoubledPair& operator=(DoubledPair&&) noexcept;
  DoubledPair& operator=(const DoubledPair& src);

  ~DoubledPair();

 private:
  ::std::string __fbthrift_field_s;
 private:
  ::std::int32_t __fbthrift_field_x;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const DoubledPair&) const;
  bool operator<(const DoubledPair&) const;

  /** Glean { "field": "s" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> s_ref() const& {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "s" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> s_ref() & {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "s" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> s_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_s), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "s" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> s() const& {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "s" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> s() & {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "s" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> s() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_s), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "x" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> x_ref() const& {
    return {this->__fbthrift_field_x, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "x" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> x_ref() & {
    return {this->__fbthrift_field_x, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "x" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> x_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_x), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "x" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> x() const& {
    return {this->__fbthrift_field_x, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "x" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> x() & {
    return {this->__fbthrift_field_x, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "x" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> x() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_x), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "s" } */
  [[deprecated("Use `FOO.s().value()` instead of `FOO.get_s()`")]]
  const ::std::string& get_s() const& {
    return __fbthrift_field_s;
  }

  /** Glean { "field": "s" } */
  [[deprecated("Use `FOO.s().value()` instead of `FOO.get_s()`")]]
  ::std::string get_s() && {
    return static_cast<::std::string&&>(__fbthrift_field_s);
  }

  /** Glean { "field": "s" } */
  template <typename T_DoubledPair_s_struct_setter = ::std::string>
  [[deprecated("Use `FOO.s() = BAR` instead of `FOO.set_s(BAR)`")]]
  ::std::string& set_s(T_DoubledPair_s_struct_setter&& s_) {
    s_ref() = std::forward<T_DoubledPair_s_struct_setter>(s_);
    return __fbthrift_field_s;
  }

  /** Glean { "field": "x" } */
  [[deprecated("Use `FOO.x().value()` instead of `FOO.get_x()`")]]
  ::std::int32_t get_x() const;

  /** Glean { "field": "x" } */
  [[deprecated("Use `FOO.x() = BAR` instead of `FOO.set_x(BAR)`")]]
  ::std::int32_t& set_x(::std::int32_t x_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<DoubledPair>;
  friend void swap(DoubledPair& a, DoubledPair& b);
};

template <class Protocol_>
unsigned long DoubledPair::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}
} // namespace detail

using DoubledPair = ::apache::thrift::adapt_detail::adapted_t<::thrift::test::lib::StructDoubler, ::test::fixtures::python_capi::detail::DoubledPair>;


/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/module.thrift", "name": "StringPair", "kind": "struct" } */
class StringPair final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::normal,
    ::apache::thrift::ident::doubled
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::adapted<::thrift::test::lib::StringDoubler, ::apache::thrift::type::string_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StringPair;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    true;


 public:

  StringPair();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StringPair(apache::thrift::FragileConstructor, ::std::string normal__arg, ::apache::thrift::adapt_detail::adapted_field_t<::thrift::test::lib::StringDoubler, 2, ::std::string, StringPair> doubled__arg);

  StringPair(StringPair&&) noexcept;
  StringPair(const StringPair& src);


  StringPair& operator=(StringPair&&) noexcept;
  StringPair& operator=(const StringPair& src);

  ~StringPair();

 private:
  ::std::string __fbthrift_field_normal;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::thrift::test::lib::StringDoubler, 2, ::std::string, StringPair> __fbthrift_field_doubled;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const StringPair&) const;
  bool operator<(const StringPair&) const;

  /** Glean { "field": "normal" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> normal_ref() const& {
    return {this->__fbthrift_field_normal, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "normal" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> normal_ref() & {
    return {this->__fbthrift_field_normal, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "normal" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> normal_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_normal), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "normal" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> normal() const& {
    return {this->__fbthrift_field_normal, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "normal" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> normal() & {
    return {this->__fbthrift_field_normal, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "normal" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> normal() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_normal), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "doubled" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::thrift::test::lib::StringDoubler, 2, ::std::string, StringPair>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> doubled_ref() const& {
    return {this->__fbthrift_field_doubled, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "doubled" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::thrift::test::lib::StringDoubler, 2, ::std::string, StringPair>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> doubled_ref() & {
    return {this->__fbthrift_field_doubled, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "doubled" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::thrift::test::lib::StringDoubler, 2, ::std::string, StringPair>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> doubled_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_doubled), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "doubled" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::thrift::test::lib::StringDoubler, 2, ::std::string, StringPair>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> doubled() const& {
    return {this->__fbthrift_field_doubled, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "doubled" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::thrift::test::lib::StringDoubler, 2, ::std::string, StringPair>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> doubled() & {
    return {this->__fbthrift_field_doubled, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "doubled" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::thrift::test::lib::StringDoubler, 2, ::std::string, StringPair>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> doubled() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_doubled), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "normal" } */
  [[deprecated("Use `FOO.normal().value()` instead of `FOO.get_normal()`")]]
  const ::std::string& get_normal() const& {
    return __fbthrift_field_normal;
  }

  /** Glean { "field": "normal" } */
  [[deprecated("Use `FOO.normal().value()` instead of `FOO.get_normal()`")]]
  ::std::string get_normal() && {
    return static_cast<::std::string&&>(__fbthrift_field_normal);
  }

  /** Glean { "field": "normal" } */
  template <typename T_StringPair_normal_struct_setter = ::std::string>
  [[deprecated("Use `FOO.normal() = BAR` instead of `FOO.set_normal(BAR)`")]]
  ::std::string& set_normal(T_StringPair_normal_struct_setter&& normal_) {
    normal_ref() = std::forward<T_StringPair_normal_struct_setter>(normal_);
    return __fbthrift_field_normal;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StringPair>;
  friend void swap(StringPair& a, StringPair& b);
};

template <class Protocol_>
unsigned long StringPair::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/module.thrift", "name": "VapidStruct", "kind": "struct" } */
class VapidStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = VapidStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  VapidStruct() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  VapidStruct(apache::thrift::FragileConstructor);

  VapidStruct(VapidStruct&&) = default;

  VapidStruct(const VapidStruct&) = default;


  VapidStruct& operator=(VapidStruct&&) = default;

  VapidStruct& operator=(const VapidStruct&) = default;

 public:

  bool operator==(const VapidStruct&) const;
  bool operator<(const VapidStruct&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<VapidStruct>;
  friend void swap(VapidStruct& a, VapidStruct& b);
};

template <class Protocol_>
unsigned long VapidStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/module.thrift", "name": "PrimitiveStruct", "kind": "struct" } */
class PrimitiveStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 16;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,5,7,8,9,12,13,14,15,18,19,20,21,22};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::booly,
    ::apache::thrift::ident::charry,
    ::apache::thrift::ident::shortay,
    ::apache::thrift::ident::inty,
    ::apache::thrift::ident::longy,
    ::apache::thrift::ident::floaty,
    ::apache::thrift::ident::dubby,
    ::apache::thrift::ident::stringy,
    ::apache::thrift::ident::bytey,
    ::apache::thrift::ident::buffy,
    ::apache::thrift::ident::pointbuffy,
    ::apache::thrift::ident::patched_struct,
    ::apache::thrift::ident::empty_struct,
    ::apache::thrift::ident::fbstring,
    ::apache::thrift::ident::managed_string_view,
    ::apache::thrift::ident::some_error
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::byte_t,
    ::apache::thrift::type::cpp_type<uint16_t, ::apache::thrift::type::i16_t>,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::cpp_type<uint64_t, ::apache::thrift::type::i64_t>,
    ::apache::thrift::type::float_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::binary_t,
    ::apache::thrift::type::cpp_type<folly::IOBuf, ::apache::thrift::type::binary_t>,
    ::apache::thrift::type::cpp_type<std::unique_ptr<folly::IOBuf>, ::apache::thrift::type::binary_t>,
    ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStruct>,
    ::apache::thrift::type::struct_t<::test::fixtures::python_capi::VapidStruct>,
    ::apache::thrift::type::cpp_type<folly::fbstring, ::apache::thrift::type::binary_t>,
    ::apache::thrift::type::cpp_type<::apache::thrift::ManagedStringViewWithConversions, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::exception_t<::test::fixtures::python_capi::SomeError>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = PrimitiveStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  PrimitiveStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  PrimitiveStruct(apache::thrift::FragileConstructor, bool booly__arg, ::test::fixtures::python_capi::signed_byte charry__arg, uint16_t shortay__arg, ::std::int32_t inty__arg, uint64_t longy__arg, float floaty__arg, ::apache::thrift::detail::boxed_value_ptr<double> dubby__arg, ::std::unique_ptr<::std::string> stringy__arg, ::std::shared_ptr<const ::std::string> bytey__arg, ::test::fixtures::python_capi::IOBuf buffy__arg, ::test::fixtures::python_capi::IOBufPtr pointbuffy__arg, ::test::fixtures::python_capi::MyStruct patched_struct__arg, ::test::fixtures::python_capi::VapidStruct empty_struct__arg, folly::fbstring fbstring__arg, ::apache::thrift::ManagedStringViewWithConversions managed_string_view__arg, ::test::fixtures::python_capi::SomeError some_error__arg);

  PrimitiveStruct(PrimitiveStruct&&) noexcept;
  PrimitiveStruct(const PrimitiveStruct& src);


  PrimitiveStruct& operator=(PrimitiveStruct&&) noexcept;
  PrimitiveStruct& operator=(const PrimitiveStruct& src);

  ~PrimitiveStruct();

 private:
  bool __fbthrift_field_booly;
 private:
  ::test::fixtures::python_capi::signed_byte __fbthrift_field_charry;
 private:
  uint16_t __fbthrift_field_shortay;
 private:
  ::std::int32_t __fbthrift_field_inty;
 private:
  uint64_t __fbthrift_field_longy;
 private:
  float __fbthrift_field_floaty;
 private:
  ::apache::thrift::detail::boxed_value_ptr<double> __fbthrift_field_dubby;
 private:
  ::std::unique_ptr<::std::string> __fbthrift_field_stringy;
 private:
  ::std::shared_ptr<const ::std::string> __fbthrift_field_bytey;
 private:
  ::test::fixtures::python_capi::IOBuf __fbthrift_field_buffy;
 private:
  ::test::fixtures::python_capi::IOBufPtr __fbthrift_field_pointbuffy;
 private:
  ::test::fixtures::python_capi::MyStruct __fbthrift_field_patched_struct;
 private:
  ::test::fixtures::python_capi::VapidStruct __fbthrift_field_empty_struct;
 private:
  folly::fbstring __fbthrift_field_fbstring;
 private:
  ::apache::thrift::ManagedStringViewWithConversions __fbthrift_field_managed_string_view;
 private:
  ::test::fixtures::python_capi::SomeError __fbthrift_field_some_error;
 private:
  apache::thrift::detail::isset_bitset<13, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const PrimitiveStruct&) const;
  bool operator<(const PrimitiveStruct&) const;

  /** Glean { "field": "booly" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> booly_ref() const& {
    return {this->__fbthrift_field_booly, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "booly" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> booly_ref() & {
    return {this->__fbthrift_field_booly, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "booly" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> booly_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_booly), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "booly" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> booly() const& {
    return {this->__fbthrift_field_booly, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "booly" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> booly() & {
    return {this->__fbthrift_field_booly, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "booly" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> booly() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_booly), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "charry" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::signed_byte>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> charry_ref() const& {
    return {this->__fbthrift_field_charry, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "charry" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::signed_byte>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> charry_ref() & {
    return {this->__fbthrift_field_charry, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "charry" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::signed_byte>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> charry_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_charry), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "charry" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::signed_byte>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> charry() const& {
    return {this->__fbthrift_field_charry, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "charry" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::signed_byte>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> charry() & {
    return {this->__fbthrift_field_charry, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "charry" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::signed_byte>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> charry() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_charry), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "shortay" } */
  template <typename..., typename fbthrift_T = uint16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> shortay_ref() const& {
    return {this->__fbthrift_field_shortay, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "shortay" } */
  template <typename..., typename fbthrift_T = uint16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> shortay_ref() & {
    return {this->__fbthrift_field_shortay, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "shortay" } */
  template <typename..., typename fbthrift_T = uint16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> shortay_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_shortay), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "shortay" } */
  template <typename..., typename fbthrift_T = uint16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> shortay() const& {
    return {this->__fbthrift_field_shortay, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "shortay" } */
  template <typename..., typename fbthrift_T = uint16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> shortay() & {
    return {this->__fbthrift_field_shortay, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "shortay" } */
  template <typename..., typename fbthrift_T = uint16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> shortay() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_shortay), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "inty" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> inty_ref() const& {
    return {this->__fbthrift_field_inty, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "inty" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> inty_ref() & {
    return {this->__fbthrift_field_inty, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "inty" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> inty_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_inty), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "inty" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> inty() const& {
    return {this->__fbthrift_field_inty, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "inty" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> inty() & {
    return {this->__fbthrift_field_inty, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "inty" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> inty() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_inty), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "longy" } */
  template <typename..., typename fbthrift_T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> longy_ref() const& {
    return {this->__fbthrift_field_longy, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "longy" } */
  template <typename..., typename fbthrift_T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> longy_ref() & {
    return {this->__fbthrift_field_longy, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "longy" } */
  template <typename..., typename fbthrift_T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> longy_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_longy), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "longy" } */
  template <typename..., typename fbthrift_T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> longy() const& {
    return {this->__fbthrift_field_longy, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "longy" } */
  template <typename..., typename fbthrift_T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> longy() & {
    return {this->__fbthrift_field_longy, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "longy" } */
  template <typename..., typename fbthrift_T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> longy() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_longy), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "floaty" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> floaty_ref() const& {
    return {this->__fbthrift_field_floaty, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "floaty" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> floaty_ref() & {
    return {this->__fbthrift_field_floaty, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "floaty" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> floaty_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_floaty), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "floaty" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> floaty() const& {
    return {this->__fbthrift_field_floaty, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "floaty" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> floaty() & {
    return {this->__fbthrift_field_floaty, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "floaty" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> floaty() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_floaty), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "dubby" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<double>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> dubby_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_dubby};
  }

  /** Glean { "field": "dubby" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<double>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> dubby_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_dubby};
  }

  /** Glean { "field": "dubby" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<double>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> dubby_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_dubby)};
  }

  /** Glean { "field": "dubby" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<double>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> dubby() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_dubby};
  }

  /** Glean { "field": "dubby" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<double>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> dubby() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_dubby};
  }

  /** Glean { "field": "dubby" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<double>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> dubby() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_dubby)};
  }
  /** Glean { "field": "stringy" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T& stringy_ref() & {
    return __fbthrift_field_stringy;
  }

  /** Glean { "field": "stringy" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T& stringy_ref() const& {
    return __fbthrift_field_stringy;
  }

  /** Glean { "field": "stringy" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T&& stringy_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_stringy);
  }

  /** Glean { "field": "stringy" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T&& stringy_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_stringy);
  }

  /** Glean { "field": "stringy" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T& stringy() & {
    return __fbthrift_field_stringy;
  }

  /** Glean { "field": "stringy" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T& stringy() const& {
    return __fbthrift_field_stringy;
  }

  /** Glean { "field": "stringy" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE fbthrift_T&& stringy() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_stringy);
  }

  /** Glean { "field": "stringy" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const fbthrift_T&& stringy() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_stringy);
  }
  /** Glean { "field": "bytey" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::string>>
  FOLLY_ERASE fbthrift_T& bytey_ref() & {
    return __fbthrift_field_bytey;
  }

  /** Glean { "field": "bytey" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::string>>
  FOLLY_ERASE const fbthrift_T& bytey_ref() const& {
    return __fbthrift_field_bytey;
  }

  /** Glean { "field": "bytey" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::string>>
  FOLLY_ERASE fbthrift_T&& bytey_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_bytey);
  }

  /** Glean { "field": "bytey" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::string>>
  FOLLY_ERASE const fbthrift_T&& bytey_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_bytey);
  }

  /** Glean { "field": "bytey" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::string>>
  FOLLY_ERASE fbthrift_T& bytey() & {
    return __fbthrift_field_bytey;
  }

  /** Glean { "field": "bytey" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::string>>
  FOLLY_ERASE const fbthrift_T& bytey() const& {
    return __fbthrift_field_bytey;
  }

  /** Glean { "field": "bytey" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::string>>
  FOLLY_ERASE fbthrift_T&& bytey() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_bytey);
  }

  /** Glean { "field": "bytey" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::string>>
  FOLLY_ERASE const fbthrift_T&& bytey() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_bytey);
  }

  /** Glean { "field": "buffy" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> buffy_ref() const& {
    return {this->__fbthrift_field_buffy, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "buffy" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> buffy_ref() & {
    return {this->__fbthrift_field_buffy, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "buffy" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> buffy_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_buffy), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "buffy" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> buffy() const& {
    return {this->__fbthrift_field_buffy, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "buffy" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> buffy() & {
    return {this->__fbthrift_field_buffy, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "buffy" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> buffy() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_buffy), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "pointbuffy" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> pointbuffy_ref() const& {
    return {this->__fbthrift_field_pointbuffy, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "pointbuffy" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> pointbuffy_ref() & {
    return {this->__fbthrift_field_pointbuffy, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "pointbuffy" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> pointbuffy_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_pointbuffy), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "pointbuffy" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> pointbuffy() const& {
    return {this->__fbthrift_field_pointbuffy, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "pointbuffy" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> pointbuffy() & {
    return {this->__fbthrift_field_pointbuffy, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "pointbuffy" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> pointbuffy() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_pointbuffy), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "patched_struct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> patched_struct_ref() const& {
    return {this->__fbthrift_field_patched_struct, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "patched_struct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> patched_struct_ref() & {
    return {this->__fbthrift_field_patched_struct, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "patched_struct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> patched_struct_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_patched_struct), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "patched_struct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> patched_struct() const& {
    return {this->__fbthrift_field_patched_struct, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "patched_struct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> patched_struct() & {
    return {this->__fbthrift_field_patched_struct, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "patched_struct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> patched_struct() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_patched_struct), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "empty_struct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::VapidStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> empty_struct_ref() const& {
    return {this->__fbthrift_field_empty_struct, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "empty_struct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::VapidStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> empty_struct_ref() & {
    return {this->__fbthrift_field_empty_struct, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "empty_struct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::VapidStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> empty_struct_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_empty_struct), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "empty_struct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::VapidStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> empty_struct() const& {
    return {this->__fbthrift_field_empty_struct, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "empty_struct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::VapidStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> empty_struct() & {
    return {this->__fbthrift_field_empty_struct, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "empty_struct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::VapidStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> empty_struct() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_empty_struct), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "fbstring" } */
  template <typename..., typename fbthrift_T = folly::fbstring>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fbstring_ref() const& {
    return {this->__fbthrift_field_fbstring, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "fbstring" } */
  template <typename..., typename fbthrift_T = folly::fbstring>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fbstring_ref() & {
    return {this->__fbthrift_field_fbstring, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "fbstring" } */
  template <typename..., typename fbthrift_T = folly::fbstring>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fbstring_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fbstring), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "fbstring" } */
  template <typename..., typename fbthrift_T = folly::fbstring>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fbstring() const& {
    return {this->__fbthrift_field_fbstring, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "fbstring" } */
  template <typename..., typename fbthrift_T = folly::fbstring>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fbstring() & {
    return {this->__fbthrift_field_fbstring, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "fbstring" } */
  template <typename..., typename fbthrift_T = folly::fbstring>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fbstring() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fbstring), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "managed_string_view" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::ManagedStringViewWithConversions>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> managed_string_view_ref() const& {
    return {this->__fbthrift_field_managed_string_view, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "managed_string_view" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::ManagedStringViewWithConversions>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> managed_string_view_ref() & {
    return {this->__fbthrift_field_managed_string_view, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "managed_string_view" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::ManagedStringViewWithConversions>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> managed_string_view_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_managed_string_view), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "managed_string_view" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::ManagedStringViewWithConversions>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> managed_string_view() const& {
    return {this->__fbthrift_field_managed_string_view, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "managed_string_view" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::ManagedStringViewWithConversions>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> managed_string_view() & {
    return {this->__fbthrift_field_managed_string_view, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "managed_string_view" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::ManagedStringViewWithConversions>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> managed_string_view() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_managed_string_view), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "some_error" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::SomeError>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> some_error_ref() const& {
    return {this->__fbthrift_field_some_error, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "some_error" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::SomeError>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> some_error_ref() & {
    return {this->__fbthrift_field_some_error, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "some_error" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::SomeError>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> some_error_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_some_error), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "some_error" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::SomeError>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> some_error() const& {
    return {this->__fbthrift_field_some_error, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "some_error" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::SomeError>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> some_error() & {
    return {this->__fbthrift_field_some_error, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "some_error" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::SomeError>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> some_error() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_some_error), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "booly" } */
  [[deprecated("Use `FOO.booly().value()` instead of `FOO.get_booly()`")]]
  bool get_booly() const;

  /** Glean { "field": "booly" } */
  [[deprecated("Use `FOO.booly() = BAR` instead of `FOO.set_booly(BAR)`")]]
  bool& set_booly(bool booly_);

  /** Glean { "field": "charry" } */
  [[deprecated("Use `FOO.charry().value()` instead of `FOO.get_charry()`")]]
  ::test::fixtures::python_capi::signed_byte get_charry() const;

  /** Glean { "field": "charry" } */
  [[deprecated("Use `FOO.charry() = BAR` instead of `FOO.set_charry(BAR)`")]]
  ::test::fixtures::python_capi::signed_byte& set_charry(::test::fixtures::python_capi::signed_byte charry_);

  /** Glean { "field": "shortay" } */
  [[deprecated("Use `FOO.shortay().value()` instead of `FOO.get_shortay()`")]]
  uint16_t get_shortay() const;

  /** Glean { "field": "shortay" } */
  [[deprecated("Use `FOO.shortay() = BAR` instead of `FOO.set_shortay(BAR)`")]]
  uint16_t& set_shortay(uint16_t shortay_);

  /** Glean { "field": "inty" } */
  [[deprecated("Use `FOO.inty().value()` instead of `FOO.get_inty()`")]]
  ::std::int32_t get_inty() const;

  /** Glean { "field": "inty" } */
  [[deprecated("Use `FOO.inty() = BAR` instead of `FOO.set_inty(BAR)`")]]
  ::std::int32_t& set_inty(::std::int32_t inty_);

  /** Glean { "field": "longy" } */
  [[deprecated("Use `FOO.longy().value()` instead of `FOO.get_longy()`")]]
  uint64_t get_longy() const;

  /** Glean { "field": "longy" } */
  [[deprecated("Use `FOO.longy() = BAR` instead of `FOO.set_longy(BAR)`")]]
  uint64_t& set_longy(uint64_t longy_);

  /** Glean { "field": "floaty" } */
  [[deprecated("Use `FOO.floaty().value()` instead of `FOO.get_floaty()`")]]
  const float* get_floaty() const&;

  /** Glean { "field": "floaty" } */
  [[deprecated("Use `FOO.floaty().value()` instead of `FOO.get_floaty()`")]]
  float* get_floaty() &;

  float* get_floaty() && = delete;

  /** Glean { "field": "floaty" } */
  [[deprecated("Use `FOO.floaty() = BAR` instead of `FOO.set_floaty(BAR)`")]]
  float& set_floaty(float floaty_);

  /** Glean { "field": "buffy" } */
  [[deprecated("Use `FOO.buffy().value()` instead of `FOO.get_buffy()`")]]
  const ::test::fixtures::python_capi::IOBuf& get_buffy() const& {
    return __fbthrift_field_buffy;
  }

  /** Glean { "field": "buffy" } */
  [[deprecated("Use `FOO.buffy().value()` instead of `FOO.get_buffy()`")]]
  ::test::fixtures::python_capi::IOBuf get_buffy() && {
    return static_cast<::test::fixtures::python_capi::IOBuf&&>(__fbthrift_field_buffy);
  }

  /** Glean { "field": "buffy" } */
  template <typename T_PrimitiveStruct_buffy_struct_setter = ::test::fixtures::python_capi::IOBuf>
  [[deprecated("Use `FOO.buffy() = BAR` instead of `FOO.set_buffy(BAR)`")]]
  ::test::fixtures::python_capi::IOBuf& set_buffy(T_PrimitiveStruct_buffy_struct_setter&& buffy_) {
    buffy_ref() = std::forward<T_PrimitiveStruct_buffy_struct_setter>(buffy_);
    return __fbthrift_field_buffy;
  }

  /** Glean { "field": "pointbuffy" } */
  [[deprecated("Use `FOO.pointbuffy().value()` instead of `FOO.get_pointbuffy()`")]]
  const ::test::fixtures::python_capi::IOBufPtr& get_pointbuffy() const& {
    return __fbthrift_field_pointbuffy;
  }

  /** Glean { "field": "pointbuffy" } */
  [[deprecated("Use `FOO.pointbuffy().value()` instead of `FOO.get_pointbuffy()`")]]
  ::test::fixtures::python_capi::IOBufPtr get_pointbuffy() && {
    return static_cast<::test::fixtures::python_capi::IOBufPtr&&>(__fbthrift_field_pointbuffy);
  }

  /** Glean { "field": "pointbuffy" } */
  template <typename T_PrimitiveStruct_pointbuffy_struct_setter = ::test::fixtures::python_capi::IOBufPtr>
  [[deprecated("Use `FOO.pointbuffy() = BAR` instead of `FOO.set_pointbuffy(BAR)`")]]
  ::test::fixtures::python_capi::IOBufPtr& set_pointbuffy(T_PrimitiveStruct_pointbuffy_struct_setter&& pointbuffy_) {
    pointbuffy_ref() = std::forward<T_PrimitiveStruct_pointbuffy_struct_setter>(pointbuffy_);
    return __fbthrift_field_pointbuffy;
  }

  /** Glean { "field": "patched_struct" } */
  [[deprecated("Use `FOO.patched_struct().value()` instead of `FOO.get_patched_struct()`")]]
  const ::test::fixtures::python_capi::MyStruct& get_patched_struct() const&;

  /** Glean { "field": "patched_struct" } */
  [[deprecated("Use `FOO.patched_struct().value()` instead of `FOO.get_patched_struct()`")]]
  ::test::fixtures::python_capi::MyStruct get_patched_struct() &&;

  /** Glean { "field": "patched_struct" } */
  template <typename T_PrimitiveStruct_patched_struct_struct_setter = ::test::fixtures::python_capi::MyStruct>
  [[deprecated("Use `FOO.patched_struct() = BAR` instead of `FOO.set_patched_struct(BAR)`")]]
  ::test::fixtures::python_capi::MyStruct& set_patched_struct(T_PrimitiveStruct_patched_struct_struct_setter&& patched_struct_) {
    patched_struct_ref() = std::forward<T_PrimitiveStruct_patched_struct_struct_setter>(patched_struct_);
    return __fbthrift_field_patched_struct;
  }

  /** Glean { "field": "empty_struct" } */
  [[deprecated("Use `FOO.empty_struct().value()` instead of `FOO.get_empty_struct()`")]]
  const ::test::fixtures::python_capi::VapidStruct& get_empty_struct() const&;

  /** Glean { "field": "empty_struct" } */
  [[deprecated("Use `FOO.empty_struct().value()` instead of `FOO.get_empty_struct()`")]]
  ::test::fixtures::python_capi::VapidStruct get_empty_struct() &&;

  /** Glean { "field": "empty_struct" } */
  template <typename T_PrimitiveStruct_empty_struct_struct_setter = ::test::fixtures::python_capi::VapidStruct>
  [[deprecated("Use `FOO.empty_struct() = BAR` instead of `FOO.set_empty_struct(BAR)`")]]
  ::test::fixtures::python_capi::VapidStruct& set_empty_struct(T_PrimitiveStruct_empty_struct_struct_setter&& empty_struct_) {
    empty_struct_ref() = std::forward<T_PrimitiveStruct_empty_struct_struct_setter>(empty_struct_);
    return __fbthrift_field_empty_struct;
  }

  /** Glean { "field": "fbstring" } */
  [[deprecated("Use `FOO.fbstring().value()` instead of `FOO.get_fbstring()`")]]
  const folly::fbstring& get_fbstring() const& {
    return __fbthrift_field_fbstring;
  }

  /** Glean { "field": "fbstring" } */
  [[deprecated("Use `FOO.fbstring().value()` instead of `FOO.get_fbstring()`")]]
  folly::fbstring get_fbstring() && {
    return static_cast<folly::fbstring&&>(__fbthrift_field_fbstring);
  }

  /** Glean { "field": "fbstring" } */
  template <typename T_PrimitiveStruct_fbstring_struct_setter = folly::fbstring>
  [[deprecated("Use `FOO.fbstring() = BAR` instead of `FOO.set_fbstring(BAR)`")]]
  folly::fbstring& set_fbstring(T_PrimitiveStruct_fbstring_struct_setter&& fbstring_) {
    fbstring_ref() = std::forward<T_PrimitiveStruct_fbstring_struct_setter>(fbstring_);
    return __fbthrift_field_fbstring;
  }

  /** Glean { "field": "managed_string_view" } */
  [[deprecated("Use `FOO.managed_string_view().value()` instead of `FOO.get_managed_string_view()`")]]
  const ::apache::thrift::ManagedStringViewWithConversions& get_managed_string_view() const& {
    return __fbthrift_field_managed_string_view;
  }

  /** Glean { "field": "managed_string_view" } */
  [[deprecated("Use `FOO.managed_string_view().value()` instead of `FOO.get_managed_string_view()`")]]
  ::apache::thrift::ManagedStringViewWithConversions get_managed_string_view() && {
    return static_cast<::apache::thrift::ManagedStringViewWithConversions&&>(__fbthrift_field_managed_string_view);
  }

  /** Glean { "field": "managed_string_view" } */
  template <typename T_PrimitiveStruct_managed_string_view_struct_setter = ::apache::thrift::ManagedStringViewWithConversions>
  [[deprecated("Use `FOO.managed_string_view() = BAR` instead of `FOO.set_managed_string_view(BAR)`")]]
  ::apache::thrift::ManagedStringViewWithConversions& set_managed_string_view(T_PrimitiveStruct_managed_string_view_struct_setter&& managed_string_view_) {
    managed_string_view_ref() = std::forward<T_PrimitiveStruct_managed_string_view_struct_setter>(managed_string_view_);
    return __fbthrift_field_managed_string_view;
  }

  /** Glean { "field": "some_error" } */
  [[deprecated("Use `FOO.some_error().value()` instead of `FOO.get_some_error()`")]]
  const ::test::fixtures::python_capi::SomeError& get_some_error() const&;

  /** Glean { "field": "some_error" } */
  [[deprecated("Use `FOO.some_error().value()` instead of `FOO.get_some_error()`")]]
  ::test::fixtures::python_capi::SomeError get_some_error() &&;

  /** Glean { "field": "some_error" } */
  template <typename T_PrimitiveStruct_some_error_struct_setter = ::test::fixtures::python_capi::SomeError>
  [[deprecated("Use `FOO.some_error() = BAR` instead of `FOO.set_some_error(BAR)`")]]
  ::test::fixtures::python_capi::SomeError& set_some_error(T_PrimitiveStruct_some_error_struct_setter&& some_error_) {
    some_error_ref() = std::forward<T_PrimitiveStruct_some_error_struct_setter>(some_error_);
    return __fbthrift_field_some_error;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<PrimitiveStruct>;
  friend void swap(PrimitiveStruct& a, PrimitiveStruct& b);
};

template <class Protocol_>
unsigned long PrimitiveStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/module.thrift", "name": "AdaptedFields", "kind": "struct" } */
class AdaptedFields final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 4;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::adapted_int,
    ::apache::thrift::ident::list_adapted_int,
    ::apache::thrift::ident::set_adapted_int,
    ::apache::thrift::ident::inline_adapted_int
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::adapted<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ProtocolId>, ::apache::thrift::type::i64_t>,
    ::apache::thrift::type::list<::apache::thrift::type::adapted<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::FieldId>, ::apache::thrift::type::i16_t>>,
    ::apache::thrift::type::set<::apache::thrift::type::adapted<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, ::apache::thrift::type::i64_t>>,
    ::apache::thrift::type::adapted<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, ::apache::thrift::type::i64_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = AdaptedFields;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    true;


 public:

  AdaptedFields();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  AdaptedFields(apache::thrift::FragileConstructor, ::apache::thrift::type::ProtocolId adapted_int__arg, ::std::vector<::apache::thrift::type::FieldId> list_adapted_int__arg, ::apache::thrift::type::AnnotationIds set_adapted_int__arg, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4, ::apache::thrift::type::ExternId, AdaptedFields> inline_adapted_int__arg);

  AdaptedFields(AdaptedFields&&) noexcept;
  AdaptedFields(const AdaptedFields& src);


  AdaptedFields& operator=(AdaptedFields&&) noexcept;
  AdaptedFields& operator=(const AdaptedFields& src);

  ~AdaptedFields();

 private:
  ::apache::thrift::type::ProtocolId __fbthrift_field_adapted_int;
 private:
  ::std::vector<::apache::thrift::type::FieldId> __fbthrift_field_list_adapted_int;
 private:
  ::apache::thrift::type::AnnotationIds __fbthrift_field_set_adapted_int;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4, ::apache::thrift::type::ExternId, AdaptedFields> __fbthrift_field_inline_adapted_int;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const AdaptedFields&) const;
  bool operator<(const AdaptedFields&) const;

  /** Glean { "field": "adapted_int" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::type::ProtocolId>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adapted_int_ref() const& {
    return {this->__fbthrift_field_adapted_int, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "adapted_int" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::type::ProtocolId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adapted_int_ref() & {
    return {this->__fbthrift_field_adapted_int, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "adapted_int" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::type::ProtocolId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adapted_int_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adapted_int), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "adapted_int" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::type::ProtocolId>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adapted_int() const& {
    return {this->__fbthrift_field_adapted_int, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "adapted_int" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::type::ProtocolId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adapted_int() & {
    return {this->__fbthrift_field_adapted_int, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "adapted_int" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::type::ProtocolId>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adapted_int() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adapted_int), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "list_adapted_int" } */
  template <typename..., typename fbthrift_T = ::std::vector<::apache::thrift::type::FieldId>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_adapted_int_ref() const& {
    return {this->__fbthrift_field_list_adapted_int, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "list_adapted_int" } */
  template <typename..., typename fbthrift_T = ::std::vector<::apache::thrift::type::FieldId>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_adapted_int_ref() & {
    return {this->__fbthrift_field_list_adapted_int, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "list_adapted_int" } */
  template <typename..., typename fbthrift_T = ::std::vector<::apache::thrift::type::FieldId>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_adapted_int_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_adapted_int), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "list_adapted_int" } */
  template <typename..., typename fbthrift_T = ::std::vector<::apache::thrift::type::FieldId>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_adapted_int() const& {
    return {this->__fbthrift_field_list_adapted_int, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "list_adapted_int" } */
  template <typename..., typename fbthrift_T = ::std::vector<::apache::thrift::type::FieldId>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_adapted_int() & {
    return {this->__fbthrift_field_list_adapted_int, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "list_adapted_int" } */
  template <typename..., typename fbthrift_T = ::std::vector<::apache::thrift::type::FieldId>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_adapted_int() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_adapted_int), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "set_adapted_int" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::type::AnnotationIds>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_adapted_int_ref() const& {
    return {this->__fbthrift_field_set_adapted_int, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "set_adapted_int" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::type::AnnotationIds>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_adapted_int_ref() & {
    return {this->__fbthrift_field_set_adapted_int, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "set_adapted_int" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::type::AnnotationIds>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_adapted_int_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_adapted_int), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "set_adapted_int" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::type::AnnotationIds>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_adapted_int() const& {
    return {this->__fbthrift_field_set_adapted_int, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "set_adapted_int" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::type::AnnotationIds>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_adapted_int() & {
    return {this->__fbthrift_field_set_adapted_int, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "set_adapted_int" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::type::AnnotationIds>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_adapted_int() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_adapted_int), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "inline_adapted_int" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4, ::apache::thrift::type::ExternId, AdaptedFields>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> inline_adapted_int_ref() const& {
    return {this->__fbthrift_field_inline_adapted_int, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "inline_adapted_int" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4, ::apache::thrift::type::ExternId, AdaptedFields>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> inline_adapted_int_ref() & {
    return {this->__fbthrift_field_inline_adapted_int, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "inline_adapted_int" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4, ::apache::thrift::type::ExternId, AdaptedFields>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> inline_adapted_int_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_inline_adapted_int), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "inline_adapted_int" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4, ::apache::thrift::type::ExternId, AdaptedFields>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> inline_adapted_int() const& {
    return {this->__fbthrift_field_inline_adapted_int, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "inline_adapted_int" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4, ::apache::thrift::type::ExternId, AdaptedFields>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> inline_adapted_int() & {
    return {this->__fbthrift_field_inline_adapted_int, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "inline_adapted_int" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4, ::apache::thrift::type::ExternId, AdaptedFields>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> inline_adapted_int() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_inline_adapted_int), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "list_adapted_int" } */
  [[deprecated("Use `FOO.list_adapted_int().value()` instead of `FOO.get_list_adapted_int()`")]]
  const ::std::vector<::apache::thrift::type::FieldId>& get_list_adapted_int() const&;

  /** Glean { "field": "list_adapted_int" } */
  [[deprecated("Use `FOO.list_adapted_int().value()` instead of `FOO.get_list_adapted_int()`")]]
  ::std::vector<::apache::thrift::type::FieldId> get_list_adapted_int() &&;

  /** Glean { "field": "list_adapted_int" } */
  template <typename T_AdaptedFields_list_adapted_int_struct_setter = ::std::vector<::apache::thrift::type::FieldId>>
  [[deprecated("Use `FOO.list_adapted_int() = BAR` instead of `FOO.set_list_adapted_int(BAR)`")]]
  ::std::vector<::apache::thrift::type::FieldId>& set_list_adapted_int(T_AdaptedFields_list_adapted_int_struct_setter&& list_adapted_int_) {
    list_adapted_int_ref() = std::forward<T_AdaptedFields_list_adapted_int_struct_setter>(list_adapted_int_);
    return __fbthrift_field_list_adapted_int;
  }

  /** Glean { "field": "set_adapted_int" } */
  [[deprecated("Use `FOO.set_adapted_int().value()` instead of `FOO.get_set_adapted_int()`")]]
  const ::apache::thrift::type::AnnotationIds& get_set_adapted_int() const&;

  /** Glean { "field": "set_adapted_int" } */
  [[deprecated("Use `FOO.set_adapted_int().value()` instead of `FOO.get_set_adapted_int()`")]]
  ::apache::thrift::type::AnnotationIds get_set_adapted_int() &&;

  /** Glean { "field": "set_adapted_int" } */
  template <typename T_AdaptedFields_set_adapted_int_struct_setter = ::apache::thrift::type::AnnotationIds>
  [[deprecated("Use `FOO.set_adapted_int() = BAR` instead of `FOO.set_set_adapted_int(BAR)`")]]
  ::apache::thrift::type::AnnotationIds& set_set_adapted_int(T_AdaptedFields_set_adapted_int_struct_setter&& set_adapted_int_) {
    set_adapted_int_ref() = std::forward<T_AdaptedFields_set_adapted_int_struct_setter>(set_adapted_int_);
    return __fbthrift_field_set_adapted_int;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<AdaptedFields>;
  friend void swap(AdaptedFields& a, AdaptedFields& b);
};

template <class Protocol_>
unsigned long AdaptedFields::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/module.thrift", "name": "ListStruct", "kind": "struct" } */
class ListStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 9;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::boolz,
    ::apache::thrift::ident::intz,
    ::apache::thrift::ident::stringz,
    ::apache::thrift::ident::encoded,
    ::apache::thrift::ident::uidz,
    ::apache::thrift::ident::matrix,
    ::apache::thrift::ident::ucharz,
    ::apache::thrift::ident::voxels,
    ::apache::thrift::ident::buf_ptrs
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::bool_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i64_t>,
    ::apache::thrift::type::list<::apache::thrift::type::string_t>,
    ::apache::thrift::type::cpp_type<std::deque<::std::string>, ::apache::thrift::type::list<::apache::thrift::type::binary_t>>,
    ::apache::thrift::type::cpp_type<std::deque<uint64_t>, ::apache::thrift::type::list<::apache::thrift::type::i64_t>>,
    ::apache::thrift::type::list<::apache::thrift::type::list<::apache::thrift::type::double_t>>,
    ::apache::thrift::type::cpp_type<folly::small_vector<folly::small_vector<uint8_t>>, ::apache::thrift::type::list<::apache::thrift::type::list<::apache::thrift::type::byte_t>>>,
    ::apache::thrift::type::cpp_type<folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>, ::apache::thrift::type::list<::apache::thrift::type::list<::apache::thrift::type::list<::apache::thrift::type::byte_t>>>>,
    ::apache::thrift::type::list<::apache::thrift::type::cpp_type<std::unique_ptr<folly::IOBuf>, ::apache::thrift::type::binary_t>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ListStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  ListStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ListStruct(apache::thrift::FragileConstructor, ::std::vector<bool> boolz__arg, ::std::vector<::std::int64_t> intz__arg, ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::string>> stringz__arg, std::deque<::std::string> encoded__arg, std::deque<uint64_t> uidz__arg, ::std::vector<::std::vector<double>> matrix__arg, folly::small_vector<folly::small_vector<uint8_t>> ucharz__arg, folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>> voxels__arg, ::std::vector<::test::fixtures::python_capi::IOBufPtr> buf_ptrs__arg);

  ListStruct(ListStruct&&) noexcept;


  ListStruct& operator=(ListStruct&&) noexcept;

  ~ListStruct();

 private:
  ::std::vector<bool> __fbthrift_field_boolz;
 private:
  ::std::vector<::std::int64_t> __fbthrift_field_intz;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::string>> __fbthrift_field_stringz;
 private:
  std::deque<::std::string> __fbthrift_field_encoded;
 private:
  std::deque<uint64_t> __fbthrift_field_uidz;
 private:
  ::std::vector<::std::vector<double>> __fbthrift_field_matrix;
 private:
  folly::small_vector<folly::small_vector<uint8_t>> __fbthrift_field_ucharz;
 private:
  folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>> __fbthrift_field_voxels;
 private:
  ::std::vector<::test::fixtures::python_capi::IOBufPtr> __fbthrift_field_buf_ptrs;
 private:
  apache::thrift::detail::isset_bitset<8, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const ListStruct&) const;
  bool operator<(const ListStruct&) const;

  /** Glean { "field": "boolz" } */
  template <typename..., typename fbthrift_T = ::std::vector<bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> boolz_ref() const& {
    return {this->__fbthrift_field_boolz, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "boolz" } */
  template <typename..., typename fbthrift_T = ::std::vector<bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> boolz_ref() & {
    return {this->__fbthrift_field_boolz, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "boolz" } */
  template <typename..., typename fbthrift_T = ::std::vector<bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> boolz_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_boolz), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "boolz" } */
  template <typename..., typename fbthrift_T = ::std::vector<bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> boolz() const& {
    return {this->__fbthrift_field_boolz, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "boolz" } */
  template <typename..., typename fbthrift_T = ::std::vector<bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> boolz() & {
    return {this->__fbthrift_field_boolz, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "boolz" } */
  template <typename..., typename fbthrift_T = ::std::vector<bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> boolz() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_boolz), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "intz" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> intz_ref() const& {
    return {this->__fbthrift_field_intz, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "intz" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> intz_ref() & {
    return {this->__fbthrift_field_intz, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "intz" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> intz_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_intz), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "intz" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> intz() const& {
    return {this->__fbthrift_field_intz, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "intz" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> intz() & {
    return {this->__fbthrift_field_intz, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "intz" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> intz() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_intz), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "stringz" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::string>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> stringz_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_stringz};
  }

  /** Glean { "field": "stringz" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::string>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> stringz_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_stringz};
  }

  /** Glean { "field": "stringz" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::string>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> stringz_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_stringz)};
  }

  /** Glean { "field": "stringz" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::string>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> stringz() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_stringz};
  }

  /** Glean { "field": "stringz" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::string>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> stringz() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_stringz};
  }

  /** Glean { "field": "stringz" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::string>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> stringz() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_stringz)};
  }

  /** Glean { "field": "encoded" } */
  template <typename..., typename fbthrift_T = std::deque<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> encoded_ref() const& {
    return {this->__fbthrift_field_encoded, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "encoded" } */
  template <typename..., typename fbthrift_T = std::deque<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> encoded_ref() & {
    return {this->__fbthrift_field_encoded, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "encoded" } */
  template <typename..., typename fbthrift_T = std::deque<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> encoded_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_encoded), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "encoded" } */
  template <typename..., typename fbthrift_T = std::deque<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> encoded() const& {
    return {this->__fbthrift_field_encoded, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "encoded" } */
  template <typename..., typename fbthrift_T = std::deque<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> encoded() & {
    return {this->__fbthrift_field_encoded, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "encoded" } */
  template <typename..., typename fbthrift_T = std::deque<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> encoded() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_encoded), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "uidz" } */
  template <typename..., typename fbthrift_T = std::deque<uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> uidz_ref() const& {
    return {this->__fbthrift_field_uidz, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "uidz" } */
  template <typename..., typename fbthrift_T = std::deque<uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> uidz_ref() & {
    return {this->__fbthrift_field_uidz, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "uidz" } */
  template <typename..., typename fbthrift_T = std::deque<uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> uidz_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_uidz), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "uidz" } */
  template <typename..., typename fbthrift_T = std::deque<uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> uidz() const& {
    return {this->__fbthrift_field_uidz, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "uidz" } */
  template <typename..., typename fbthrift_T = std::deque<uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> uidz() & {
    return {this->__fbthrift_field_uidz, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "uidz" } */
  template <typename..., typename fbthrift_T = std::deque<uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> uidz() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_uidz), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "matrix" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<double>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> matrix_ref() const& {
    return {this->__fbthrift_field_matrix, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "matrix" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<double>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> matrix_ref() & {
    return {this->__fbthrift_field_matrix, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "matrix" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<double>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> matrix_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_matrix), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "matrix" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<double>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> matrix() const& {
    return {this->__fbthrift_field_matrix, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "matrix" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<double>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> matrix() & {
    return {this->__fbthrift_field_matrix, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "matrix" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<double>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> matrix() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_matrix), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "ucharz" } */
  template <typename..., typename fbthrift_T = folly::small_vector<folly::small_vector<uint8_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> ucharz_ref() const& {
    return {this->__fbthrift_field_ucharz, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "ucharz" } */
  template <typename..., typename fbthrift_T = folly::small_vector<folly::small_vector<uint8_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> ucharz_ref() & {
    return {this->__fbthrift_field_ucharz, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "ucharz" } */
  template <typename..., typename fbthrift_T = folly::small_vector<folly::small_vector<uint8_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> ucharz_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_ucharz), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "ucharz" } */
  template <typename..., typename fbthrift_T = folly::small_vector<folly::small_vector<uint8_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> ucharz() const& {
    return {this->__fbthrift_field_ucharz, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "ucharz" } */
  template <typename..., typename fbthrift_T = folly::small_vector<folly::small_vector<uint8_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> ucharz() & {
    return {this->__fbthrift_field_ucharz, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "ucharz" } */
  template <typename..., typename fbthrift_T = folly::small_vector<folly::small_vector<uint8_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> ucharz() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_ucharz), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "voxels" } */
  template <typename..., typename fbthrift_T = folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> voxels_ref() const& {
    return {this->__fbthrift_field_voxels, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "voxels" } */
  template <typename..., typename fbthrift_T = folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> voxels_ref() & {
    return {this->__fbthrift_field_voxels, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "voxels" } */
  template <typename..., typename fbthrift_T = folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> voxels_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_voxels), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "voxels" } */
  template <typename..., typename fbthrift_T = folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> voxels() const& {
    return {this->__fbthrift_field_voxels, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "voxels" } */
  template <typename..., typename fbthrift_T = folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> voxels() & {
    return {this->__fbthrift_field_voxels, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "voxels" } */
  template <typename..., typename fbthrift_T = folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> voxels() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_voxels), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "buf_ptrs" } */
  template <typename..., typename fbthrift_T = ::std::vector<::test::fixtures::python_capi::IOBufPtr>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> buf_ptrs_ref() const& {
    return {this->__fbthrift_field_buf_ptrs, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "buf_ptrs" } */
  template <typename..., typename fbthrift_T = ::std::vector<::test::fixtures::python_capi::IOBufPtr>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> buf_ptrs_ref() & {
    return {this->__fbthrift_field_buf_ptrs, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "buf_ptrs" } */
  template <typename..., typename fbthrift_T = ::std::vector<::test::fixtures::python_capi::IOBufPtr>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> buf_ptrs_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_buf_ptrs), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "buf_ptrs" } */
  template <typename..., typename fbthrift_T = ::std::vector<::test::fixtures::python_capi::IOBufPtr>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> buf_ptrs() const& {
    return {this->__fbthrift_field_buf_ptrs, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "buf_ptrs" } */
  template <typename..., typename fbthrift_T = ::std::vector<::test::fixtures::python_capi::IOBufPtr>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> buf_ptrs() & {
    return {this->__fbthrift_field_buf_ptrs, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "buf_ptrs" } */
  template <typename..., typename fbthrift_T = ::std::vector<::test::fixtures::python_capi::IOBufPtr>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> buf_ptrs() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_buf_ptrs), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "boolz" } */
  [[deprecated("Use `FOO.boolz().value()` instead of `FOO.get_boolz()`")]]
  const ::std::vector<bool>& get_boolz() const&;

  /** Glean { "field": "boolz" } */
  [[deprecated("Use `FOO.boolz().value()` instead of `FOO.get_boolz()`")]]
  ::std::vector<bool> get_boolz() &&;

  /** Glean { "field": "boolz" } */
  template <typename T_ListStruct_boolz_struct_setter = ::std::vector<bool>>
  [[deprecated("Use `FOO.boolz() = BAR` instead of `FOO.set_boolz(BAR)`")]]
  ::std::vector<bool>& set_boolz(T_ListStruct_boolz_struct_setter&& boolz_) {
    boolz_ref() = std::forward<T_ListStruct_boolz_struct_setter>(boolz_);
    return __fbthrift_field_boolz;
  }

  /** Glean { "field": "intz" } */
  [[deprecated("Use `FOO.intz().value()` instead of `FOO.get_intz()`")]]
  const ::std::vector<::std::int64_t>* get_intz() const&;

  /** Glean { "field": "intz" } */
  [[deprecated("Use `FOO.intz().value()` instead of `FOO.get_intz()`")]]
  ::std::vector<::std::int64_t>* get_intz() &;

  ::std::vector<::std::int64_t>* get_intz() && = delete;

  /** Glean { "field": "intz" } */
  template <typename T_ListStruct_intz_struct_setter = ::std::vector<::std::int64_t>>
  [[deprecated("Use `FOO.intz() = BAR` instead of `FOO.set_intz(BAR)`")]]
  ::std::vector<::std::int64_t>& set_intz(T_ListStruct_intz_struct_setter&& intz_) {
    intz_ref() = std::forward<T_ListStruct_intz_struct_setter>(intz_);
    return __fbthrift_field_intz;
  }

  /** Glean { "field": "encoded" } */
  [[deprecated("Use `FOO.encoded().value()` instead of `FOO.get_encoded()`")]]
  const std::deque<::std::string>& get_encoded() const&;

  /** Glean { "field": "encoded" } */
  [[deprecated("Use `FOO.encoded().value()` instead of `FOO.get_encoded()`")]]
  std::deque<::std::string> get_encoded() &&;

  /** Glean { "field": "encoded" } */
  template <typename T_ListStruct_encoded_struct_setter = std::deque<::std::string>>
  [[deprecated("Use `FOO.encoded() = BAR` instead of `FOO.set_encoded(BAR)`")]]
  std::deque<::std::string>& set_encoded(T_ListStruct_encoded_struct_setter&& encoded_) {
    encoded_ref() = std::forward<T_ListStruct_encoded_struct_setter>(encoded_);
    return __fbthrift_field_encoded;
  }

  /** Glean { "field": "uidz" } */
  [[deprecated("Use `FOO.uidz().value()` instead of `FOO.get_uidz()`")]]
  const std::deque<uint64_t>& get_uidz() const&;

  /** Glean { "field": "uidz" } */
  [[deprecated("Use `FOO.uidz().value()` instead of `FOO.get_uidz()`")]]
  std::deque<uint64_t> get_uidz() &&;

  /** Glean { "field": "uidz" } */
  template <typename T_ListStruct_uidz_struct_setter = std::deque<uint64_t>>
  [[deprecated("Use `FOO.uidz() = BAR` instead of `FOO.set_uidz(BAR)`")]]
  std::deque<uint64_t>& set_uidz(T_ListStruct_uidz_struct_setter&& uidz_) {
    uidz_ref() = std::forward<T_ListStruct_uidz_struct_setter>(uidz_);
    return __fbthrift_field_uidz;
  }

  /** Glean { "field": "matrix" } */
  [[deprecated("Use `FOO.matrix().value()` instead of `FOO.get_matrix()`")]]
  const ::std::vector<::std::vector<double>>& get_matrix() const&;

  /** Glean { "field": "matrix" } */
  [[deprecated("Use `FOO.matrix().value()` instead of `FOO.get_matrix()`")]]
  ::std::vector<::std::vector<double>> get_matrix() &&;

  /** Glean { "field": "matrix" } */
  template <typename T_ListStruct_matrix_struct_setter = ::std::vector<::std::vector<double>>>
  [[deprecated("Use `FOO.matrix() = BAR` instead of `FOO.set_matrix(BAR)`")]]
  ::std::vector<::std::vector<double>>& set_matrix(T_ListStruct_matrix_struct_setter&& matrix_) {
    matrix_ref() = std::forward<T_ListStruct_matrix_struct_setter>(matrix_);
    return __fbthrift_field_matrix;
  }

  /** Glean { "field": "ucharz" } */
  [[deprecated("Use `FOO.ucharz().value()` instead of `FOO.get_ucharz()`")]]
  const folly::small_vector<folly::small_vector<uint8_t>>& get_ucharz() const&;

  /** Glean { "field": "ucharz" } */
  [[deprecated("Use `FOO.ucharz().value()` instead of `FOO.get_ucharz()`")]]
  folly::small_vector<folly::small_vector<uint8_t>> get_ucharz() &&;

  /** Glean { "field": "ucharz" } */
  template <typename T_ListStruct_ucharz_struct_setter = folly::small_vector<folly::small_vector<uint8_t>>>
  [[deprecated("Use `FOO.ucharz() = BAR` instead of `FOO.set_ucharz(BAR)`")]]
  folly::small_vector<folly::small_vector<uint8_t>>& set_ucharz(T_ListStruct_ucharz_struct_setter&& ucharz_) {
    ucharz_ref() = std::forward<T_ListStruct_ucharz_struct_setter>(ucharz_);
    return __fbthrift_field_ucharz;
  }

  /** Glean { "field": "voxels" } */
  [[deprecated("Use `FOO.voxels().value()` instead of `FOO.get_voxels()`")]]
  const folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>& get_voxels() const&;

  /** Glean { "field": "voxels" } */
  [[deprecated("Use `FOO.voxels().value()` instead of `FOO.get_voxels()`")]]
  folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>> get_voxels() &&;

  /** Glean { "field": "voxels" } */
  template <typename T_ListStruct_voxels_struct_setter = folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>>
  [[deprecated("Use `FOO.voxels() = BAR` instead of `FOO.set_voxels(BAR)`")]]
  folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>& set_voxels(T_ListStruct_voxels_struct_setter&& voxels_) {
    voxels_ref() = std::forward<T_ListStruct_voxels_struct_setter>(voxels_);
    return __fbthrift_field_voxels;
  }

  /** Glean { "field": "buf_ptrs" } */
  [[deprecated("Use `FOO.buf_ptrs().value()` instead of `FOO.get_buf_ptrs()`")]]
  const ::std::vector<::test::fixtures::python_capi::IOBufPtr>& get_buf_ptrs() const&;

  /** Glean { "field": "buf_ptrs" } */
  [[deprecated("Use `FOO.buf_ptrs().value()` instead of `FOO.get_buf_ptrs()`")]]
  ::std::vector<::test::fixtures::python_capi::IOBufPtr> get_buf_ptrs() &&;

  /** Glean { "field": "buf_ptrs" } */
  template <typename T_ListStruct_buf_ptrs_struct_setter = ::std::vector<::test::fixtures::python_capi::IOBufPtr>>
  [[deprecated("Use `FOO.buf_ptrs() = BAR` instead of `FOO.set_buf_ptrs(BAR)`")]]
  ::std::vector<::test::fixtures::python_capi::IOBufPtr>& set_buf_ptrs(T_ListStruct_buf_ptrs_struct_setter&& buf_ptrs_) {
    buf_ptrs_ref() = std::forward<T_ListStruct_buf_ptrs_struct_setter>(buf_ptrs_);
    return __fbthrift_field_buf_ptrs;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ListStruct>;
  friend void swap(ListStruct& a, ListStruct& b);
};

template <class Protocol_>
unsigned long ListStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/module.thrift", "name": "SetStruct", "kind": "struct" } */
class SetStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 7;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::enumz,
    ::apache::thrift::ident::intz,
    ::apache::thrift::ident::binnaz,
    ::apache::thrift::ident::encoded,
    ::apache::thrift::ident::uidz,
    ::apache::thrift::ident::charz,
    ::apache::thrift::ident::setz
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::set<::apache::thrift::type::enum_t<::test::fixtures::python_capi::MyEnum>>,
    ::apache::thrift::type::set<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::set<::apache::thrift::type::binary_t>,
    ::apache::thrift::type::cpp_type<std::unordered_set<::std::string>, ::apache::thrift::type::set<::apache::thrift::type::binary_t>>,
    ::apache::thrift::type::cpp_type<std::unordered_set<uint64_t>, ::apache::thrift::type::set<::apache::thrift::type::i64_t>>,
    ::apache::thrift::type::cpp_type<folly::F14FastSet<uint8_t>, ::apache::thrift::type::set<::apache::thrift::type::byte_t>>,
    ::apache::thrift::type::list<::apache::thrift::type::set<::apache::thrift::type::i64_t>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = SetStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  SetStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  SetStruct(apache::thrift::FragileConstructor, ::std::set<::test::fixtures::python_capi::MyEnum> enumz__arg, ::std::set<::std::int32_t> intz__arg, ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::string>> binnaz__arg, std::unordered_set<::std::string> encoded__arg, std::unordered_set<uint64_t> uidz__arg, folly::F14FastSet<uint8_t> charz__arg, ::std::vector<::std::set<::std::int64_t>> setz__arg);

  SetStruct(SetStruct&&) noexcept;

  SetStruct(const SetStruct& src);


  SetStruct& operator=(SetStruct&&) noexcept;
  SetStruct& operator=(const SetStruct& src);

  ~SetStruct();

 private:
  ::std::set<::test::fixtures::python_capi::MyEnum> __fbthrift_field_enumz;
 private:
  ::std::set<::std::int32_t> __fbthrift_field_intz;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::string>> __fbthrift_field_binnaz;
 private:
  std::unordered_set<::std::string> __fbthrift_field_encoded;
 private:
  std::unordered_set<uint64_t> __fbthrift_field_uidz;
 private:
  folly::F14FastSet<uint8_t> __fbthrift_field_charz;
 private:
  ::std::vector<::std::set<::std::int64_t>> __fbthrift_field_setz;
 private:
  apache::thrift::detail::isset_bitset<6, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const SetStruct&) const;
  bool operator<(const SetStruct&) const;

  /** Glean { "field": "enumz" } */
  template <typename..., typename fbthrift_T = ::std::set<::test::fixtures::python_capi::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> enumz_ref() const& {
    return {this->__fbthrift_field_enumz, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "enumz" } */
  template <typename..., typename fbthrift_T = ::std::set<::test::fixtures::python_capi::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> enumz_ref() & {
    return {this->__fbthrift_field_enumz, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "enumz" } */
  template <typename..., typename fbthrift_T = ::std::set<::test::fixtures::python_capi::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> enumz_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_enumz), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "enumz" } */
  template <typename..., typename fbthrift_T = ::std::set<::test::fixtures::python_capi::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> enumz() const& {
    return {this->__fbthrift_field_enumz, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "enumz" } */
  template <typename..., typename fbthrift_T = ::std::set<::test::fixtures::python_capi::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> enumz() & {
    return {this->__fbthrift_field_enumz, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "enumz" } */
  template <typename..., typename fbthrift_T = ::std::set<::test::fixtures::python_capi::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> enumz() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_enumz), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "intz" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> intz_ref() const& {
    return {this->__fbthrift_field_intz, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "intz" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> intz_ref() & {
    return {this->__fbthrift_field_intz, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "intz" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> intz_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_intz), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "intz" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> intz() const& {
    return {this->__fbthrift_field_intz, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "intz" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> intz() & {
    return {this->__fbthrift_field_intz, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "intz" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> intz() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_intz), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "binnaz" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::string>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> binnaz_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_binnaz};
  }

  /** Glean { "field": "binnaz" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::string>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> binnaz_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_binnaz};
  }

  /** Glean { "field": "binnaz" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::string>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> binnaz_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_binnaz)};
  }

  /** Glean { "field": "binnaz" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::string>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> binnaz() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_binnaz};
  }

  /** Glean { "field": "binnaz" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::string>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> binnaz() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_binnaz};
  }

  /** Glean { "field": "binnaz" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::string>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> binnaz() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_binnaz)};
  }

  /** Glean { "field": "encoded" } */
  template <typename..., typename fbthrift_T = std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> encoded_ref() const& {
    return {this->__fbthrift_field_encoded, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "encoded" } */
  template <typename..., typename fbthrift_T = std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> encoded_ref() & {
    return {this->__fbthrift_field_encoded, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "encoded" } */
  template <typename..., typename fbthrift_T = std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> encoded_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_encoded), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "encoded" } */
  template <typename..., typename fbthrift_T = std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> encoded() const& {
    return {this->__fbthrift_field_encoded, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "encoded" } */
  template <typename..., typename fbthrift_T = std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> encoded() & {
    return {this->__fbthrift_field_encoded, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "encoded" } */
  template <typename..., typename fbthrift_T = std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> encoded() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_encoded), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "uidz" } */
  template <typename..., typename fbthrift_T = std::unordered_set<uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> uidz_ref() const& {
    return {this->__fbthrift_field_uidz, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "uidz" } */
  template <typename..., typename fbthrift_T = std::unordered_set<uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> uidz_ref() & {
    return {this->__fbthrift_field_uidz, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "uidz" } */
  template <typename..., typename fbthrift_T = std::unordered_set<uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> uidz_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_uidz), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "uidz" } */
  template <typename..., typename fbthrift_T = std::unordered_set<uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> uidz() const& {
    return {this->__fbthrift_field_uidz, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "uidz" } */
  template <typename..., typename fbthrift_T = std::unordered_set<uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> uidz() & {
    return {this->__fbthrift_field_uidz, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "uidz" } */
  template <typename..., typename fbthrift_T = std::unordered_set<uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> uidz() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_uidz), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "charz" } */
  template <typename..., typename fbthrift_T = folly::F14FastSet<uint8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> charz_ref() const& {
    return {this->__fbthrift_field_charz, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "charz" } */
  template <typename..., typename fbthrift_T = folly::F14FastSet<uint8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> charz_ref() & {
    return {this->__fbthrift_field_charz, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "charz" } */
  template <typename..., typename fbthrift_T = folly::F14FastSet<uint8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> charz_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_charz), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "charz" } */
  template <typename..., typename fbthrift_T = folly::F14FastSet<uint8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> charz() const& {
    return {this->__fbthrift_field_charz, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "charz" } */
  template <typename..., typename fbthrift_T = folly::F14FastSet<uint8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> charz() & {
    return {this->__fbthrift_field_charz, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "charz" } */
  template <typename..., typename fbthrift_T = folly::F14FastSet<uint8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> charz() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_charz), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "setz" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::set<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> setz_ref() const& {
    return {this->__fbthrift_field_setz, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "setz" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::set<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> setz_ref() & {
    return {this->__fbthrift_field_setz, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "setz" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::set<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> setz_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_setz), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "setz" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::set<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> setz() const& {
    return {this->__fbthrift_field_setz, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "setz" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::set<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> setz() & {
    return {this->__fbthrift_field_setz, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "setz" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::set<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> setz() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_setz), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "enumz" } */
  [[deprecated("Use `FOO.enumz().value()` instead of `FOO.get_enumz()`")]]
  const ::std::set<::test::fixtures::python_capi::MyEnum>& get_enumz() const&;

  /** Glean { "field": "enumz" } */
  [[deprecated("Use `FOO.enumz().value()` instead of `FOO.get_enumz()`")]]
  ::std::set<::test::fixtures::python_capi::MyEnum> get_enumz() &&;

  /** Glean { "field": "enumz" } */
  template <typename T_SetStruct_enumz_struct_setter = ::std::set<::test::fixtures::python_capi::MyEnum>>
  [[deprecated("Use `FOO.enumz() = BAR` instead of `FOO.set_enumz(BAR)`")]]
  ::std::set<::test::fixtures::python_capi::MyEnum>& set_enumz(T_SetStruct_enumz_struct_setter&& enumz_) {
    enumz_ref() = std::forward<T_SetStruct_enumz_struct_setter>(enumz_);
    return __fbthrift_field_enumz;
  }

  /** Glean { "field": "intz" } */
  [[deprecated("Use `FOO.intz().value()` instead of `FOO.get_intz()`")]]
  const ::std::set<::std::int32_t>* get_intz() const&;

  /** Glean { "field": "intz" } */
  [[deprecated("Use `FOO.intz().value()` instead of `FOO.get_intz()`")]]
  ::std::set<::std::int32_t>* get_intz() &;

  ::std::set<::std::int32_t>* get_intz() && = delete;

  /** Glean { "field": "intz" } */
  template <typename T_SetStruct_intz_struct_setter = ::std::set<::std::int32_t>>
  [[deprecated("Use `FOO.intz() = BAR` instead of `FOO.set_intz(BAR)`")]]
  ::std::set<::std::int32_t>& set_intz(T_SetStruct_intz_struct_setter&& intz_) {
    intz_ref() = std::forward<T_SetStruct_intz_struct_setter>(intz_);
    return __fbthrift_field_intz;
  }

  /** Glean { "field": "encoded" } */
  [[deprecated("Use `FOO.encoded().value()` instead of `FOO.get_encoded()`")]]
  const std::unordered_set<::std::string>& get_encoded() const&;

  /** Glean { "field": "encoded" } */
  [[deprecated("Use `FOO.encoded().value()` instead of `FOO.get_encoded()`")]]
  std::unordered_set<::std::string> get_encoded() &&;

  /** Glean { "field": "encoded" } */
  template <typename T_SetStruct_encoded_struct_setter = std::unordered_set<::std::string>>
  [[deprecated("Use `FOO.encoded() = BAR` instead of `FOO.set_encoded(BAR)`")]]
  std::unordered_set<::std::string>& set_encoded(T_SetStruct_encoded_struct_setter&& encoded_) {
    encoded_ref() = std::forward<T_SetStruct_encoded_struct_setter>(encoded_);
    return __fbthrift_field_encoded;
  }

  /** Glean { "field": "uidz" } */
  [[deprecated("Use `FOO.uidz().value()` instead of `FOO.get_uidz()`")]]
  const std::unordered_set<uint64_t>& get_uidz() const&;

  /** Glean { "field": "uidz" } */
  [[deprecated("Use `FOO.uidz().value()` instead of `FOO.get_uidz()`")]]
  std::unordered_set<uint64_t> get_uidz() &&;

  /** Glean { "field": "uidz" } */
  template <typename T_SetStruct_uidz_struct_setter = std::unordered_set<uint64_t>>
  [[deprecated("Use `FOO.uidz() = BAR` instead of `FOO.set_uidz(BAR)`")]]
  std::unordered_set<uint64_t>& set_uidz(T_SetStruct_uidz_struct_setter&& uidz_) {
    uidz_ref() = std::forward<T_SetStruct_uidz_struct_setter>(uidz_);
    return __fbthrift_field_uidz;
  }

  /** Glean { "field": "charz" } */
  [[deprecated("Use `FOO.charz().value()` instead of `FOO.get_charz()`")]]
  const folly::F14FastSet<uint8_t>& get_charz() const&;

  /** Glean { "field": "charz" } */
  [[deprecated("Use `FOO.charz().value()` instead of `FOO.get_charz()`")]]
  folly::F14FastSet<uint8_t> get_charz() &&;

  /** Glean { "field": "charz" } */
  template <typename T_SetStruct_charz_struct_setter = folly::F14FastSet<uint8_t>>
  [[deprecated("Use `FOO.charz() = BAR` instead of `FOO.set_charz(BAR)`")]]
  folly::F14FastSet<uint8_t>& set_charz(T_SetStruct_charz_struct_setter&& charz_) {
    charz_ref() = std::forward<T_SetStruct_charz_struct_setter>(charz_);
    return __fbthrift_field_charz;
  }

  /** Glean { "field": "setz" } */
  [[deprecated("Use `FOO.setz().value()` instead of `FOO.get_setz()`")]]
  const ::std::vector<::std::set<::std::int64_t>>& get_setz() const&;

  /** Glean { "field": "setz" } */
  [[deprecated("Use `FOO.setz().value()` instead of `FOO.get_setz()`")]]
  ::std::vector<::std::set<::std::int64_t>> get_setz() &&;

  /** Glean { "field": "setz" } */
  template <typename T_SetStruct_setz_struct_setter = ::std::vector<::std::set<::std::int64_t>>>
  [[deprecated("Use `FOO.setz() = BAR` instead of `FOO.set_setz(BAR)`")]]
  ::std::vector<::std::set<::std::int64_t>>& set_setz(T_SetStruct_setz_struct_setter&& setz_) {
    setz_ref() = std::forward<T_SetStruct_setz_struct_setter>(setz_);
    return __fbthrift_field_setz;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<SetStruct>;
  friend void swap(SetStruct& a, SetStruct& b);
};

template <class Protocol_>
unsigned long SetStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/module.thrift", "name": "MapStruct", "kind": "struct" } */
class MapStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 10;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9,10};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::enumz,
    ::apache::thrift::ident::intz,
    ::apache::thrift::ident::binnaz,
    ::apache::thrift::ident::encoded,
    ::apache::thrift::ident::flotz,
    ::apache::thrift::ident::map_list,
    ::apache::thrift::ident::list_map,
    ::apache::thrift::ident::fast_list_map,
    ::apache::thrift::ident::buf_map,
    ::apache::thrift::ident::unsigned_list_map
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::map<::apache::thrift::type::enum_t<::test::fixtures::python_capi::MyEnum>, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::map<::apache::thrift::type::binary_t, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::PrimitiveStruct>>,
    ::apache::thrift::type::cpp_type<std::unordered_map<::std::string, double>, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::double_t>>,
    ::apache::thrift::type::cpp_type<std::unordered_map<uint64_t, float>, ::apache::thrift::type::map<::apache::thrift::type::i64_t, ::apache::thrift::type::float_t>>,
    ::apache::thrift::type::list<::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::i64_t>>,
    ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::list<::apache::thrift::type::i64_t>>,
    ::apache::thrift::type::cpp_type<folly::F14FastMap<int, folly::fbvector<double>>, ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::list<::apache::thrift::type::double_t>>>,
    ::apache::thrift::type::map<::apache::thrift::type::binary_t, ::apache::thrift::type::cpp_type<std::unique_ptr<folly::IOBuf>, ::apache::thrift::type::binary_t>>,
    ::apache::thrift::type::map<::apache::thrift::type::cpp_type<uint64_t, ::apache::thrift::type::i64_t>, ::apache::thrift::type::list<::apache::thrift::type::cpp_type<uint64_t, ::apache::thrift::type::i64_t>>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MapStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  MapStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MapStruct(apache::thrift::FragileConstructor, ::std::map<::test::fixtures::python_capi::MyEnum, ::std::string> enumz__arg, ::std::map<::std::int32_t, ::std::string> intz__arg, ::apache::thrift::detail::boxed_value_ptr<::std::map<::std::string, ::test::fixtures::python_capi::PrimitiveStruct>> binnaz__arg, std::unordered_map<::std::string, double> encoded__arg, std::unordered_map<uint64_t, float> flotz__arg, ::std::vector<::std::map<::std::int32_t, ::std::int64_t>> map_list__arg, ::std::map<::std::int32_t, ::std::vector<::std::int64_t>> list_map__arg, folly::F14FastMap<int, folly::fbvector<double>> fast_list_map__arg, ::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr> buf_map__arg, ::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>> unsigned_list_map__arg);

  MapStruct(MapStruct&&) noexcept;
  MapStruct(const MapStruct& src);


  MapStruct& operator=(MapStruct&&) noexcept;
  MapStruct& operator=(const MapStruct& src);

  ~MapStruct();

 private:
  ::std::map<::test::fixtures::python_capi::MyEnum, ::std::string> __fbthrift_field_enumz;
 private:
  ::std::map<::std::int32_t, ::std::string> __fbthrift_field_intz;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::std::map<::std::string, ::test::fixtures::python_capi::PrimitiveStruct>> __fbthrift_field_binnaz;
 private:
  std::unordered_map<::std::string, double> __fbthrift_field_encoded;
 private:
  std::unordered_map<uint64_t, float> __fbthrift_field_flotz;
 private:
  ::std::vector<::std::map<::std::int32_t, ::std::int64_t>> __fbthrift_field_map_list;
 private:
  ::std::map<::std::int32_t, ::std::vector<::std::int64_t>> __fbthrift_field_list_map;
 private:
  folly::F14FastMap<int, folly::fbvector<double>> __fbthrift_field_fast_list_map;
 private:
  ::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr> __fbthrift_field_buf_map;
 private:
  ::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>> __fbthrift_field_unsigned_list_map;
 private:
  apache::thrift::detail::isset_bitset<9, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MapStruct&) const;
  bool operator<(const MapStruct&) const;

  /** Glean { "field": "enumz" } */
  template <typename..., typename fbthrift_T = ::std::map<::test::fixtures::python_capi::MyEnum, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> enumz_ref() const& {
    return {this->__fbthrift_field_enumz, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "enumz" } */
  template <typename..., typename fbthrift_T = ::std::map<::test::fixtures::python_capi::MyEnum, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> enumz_ref() & {
    return {this->__fbthrift_field_enumz, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "enumz" } */
  template <typename..., typename fbthrift_T = ::std::map<::test::fixtures::python_capi::MyEnum, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> enumz_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_enumz), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "enumz" } */
  template <typename..., typename fbthrift_T = ::std::map<::test::fixtures::python_capi::MyEnum, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> enumz() const& {
    return {this->__fbthrift_field_enumz, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "enumz" } */
  template <typename..., typename fbthrift_T = ::std::map<::test::fixtures::python_capi::MyEnum, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> enumz() & {
    return {this->__fbthrift_field_enumz, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "enumz" } */
  template <typename..., typename fbthrift_T = ::std::map<::test::fixtures::python_capi::MyEnum, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> enumz() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_enumz), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "intz" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> intz_ref() const& {
    return {this->__fbthrift_field_intz, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "intz" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> intz_ref() & {
    return {this->__fbthrift_field_intz, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "intz" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> intz_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_intz), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "intz" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> intz() const& {
    return {this->__fbthrift_field_intz, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "intz" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> intz() & {
    return {this->__fbthrift_field_intz, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "intz" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> intz() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_intz), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "binnaz" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::map<::std::string, ::test::fixtures::python_capi::PrimitiveStruct>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> binnaz_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_binnaz};
  }

  /** Glean { "field": "binnaz" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::map<::std::string, ::test::fixtures::python_capi::PrimitiveStruct>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> binnaz_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_binnaz};
  }

  /** Glean { "field": "binnaz" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::map<::std::string, ::test::fixtures::python_capi::PrimitiveStruct>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> binnaz_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_binnaz)};
  }

  /** Glean { "field": "binnaz" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::map<::std::string, ::test::fixtures::python_capi::PrimitiveStruct>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> binnaz() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_binnaz};
  }

  /** Glean { "field": "binnaz" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::map<::std::string, ::test::fixtures::python_capi::PrimitiveStruct>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> binnaz() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_binnaz};
  }

  /** Glean { "field": "binnaz" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::map<::std::string, ::test::fixtures::python_capi::PrimitiveStruct>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> binnaz() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_binnaz)};
  }

  /** Glean { "field": "encoded" } */
  template <typename..., typename fbthrift_T = std::unordered_map<::std::string, double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> encoded_ref() const& {
    return {this->__fbthrift_field_encoded, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "encoded" } */
  template <typename..., typename fbthrift_T = std::unordered_map<::std::string, double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> encoded_ref() & {
    return {this->__fbthrift_field_encoded, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "encoded" } */
  template <typename..., typename fbthrift_T = std::unordered_map<::std::string, double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> encoded_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_encoded), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "encoded" } */
  template <typename..., typename fbthrift_T = std::unordered_map<::std::string, double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> encoded() const& {
    return {this->__fbthrift_field_encoded, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "encoded" } */
  template <typename..., typename fbthrift_T = std::unordered_map<::std::string, double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> encoded() & {
    return {this->__fbthrift_field_encoded, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "encoded" } */
  template <typename..., typename fbthrift_T = std::unordered_map<::std::string, double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> encoded() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_encoded), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "flotz" } */
  template <typename..., typename fbthrift_T = std::unordered_map<uint64_t, float>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> flotz_ref() const& {
    return {this->__fbthrift_field_flotz, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "flotz" } */
  template <typename..., typename fbthrift_T = std::unordered_map<uint64_t, float>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> flotz_ref() & {
    return {this->__fbthrift_field_flotz, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "flotz" } */
  template <typename..., typename fbthrift_T = std::unordered_map<uint64_t, float>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> flotz_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_flotz), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "flotz" } */
  template <typename..., typename fbthrift_T = std::unordered_map<uint64_t, float>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> flotz() const& {
    return {this->__fbthrift_field_flotz, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "flotz" } */
  template <typename..., typename fbthrift_T = std::unordered_map<uint64_t, float>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> flotz() & {
    return {this->__fbthrift_field_flotz, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "flotz" } */
  template <typename..., typename fbthrift_T = std::unordered_map<uint64_t, float>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> flotz() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_flotz), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "map_list" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::std::int32_t, ::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> map_list_ref() const& {
    return {this->__fbthrift_field_map_list, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "map_list" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::std::int32_t, ::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> map_list_ref() & {
    return {this->__fbthrift_field_map_list, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "map_list" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::std::int32_t, ::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> map_list_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_map_list), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "map_list" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::std::int32_t, ::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> map_list() const& {
    return {this->__fbthrift_field_map_list, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "map_list" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::std::int32_t, ::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> map_list() & {
    return {this->__fbthrift_field_map_list, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "map_list" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::std::int32_t, ::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> map_list() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_map_list), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "list_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_map_ref() const& {
    return {this->__fbthrift_field_list_map, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "list_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_map_ref() & {
    return {this->__fbthrift_field_list_map, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "list_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_map_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_map), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "list_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_map() const& {
    return {this->__fbthrift_field_list_map, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "list_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_map() & {
    return {this->__fbthrift_field_list_map, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "list_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_map() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_map), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "fast_list_map" } */
  template <typename..., typename fbthrift_T = folly::F14FastMap<int, folly::fbvector<double>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fast_list_map_ref() const& {
    return {this->__fbthrift_field_fast_list_map, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "fast_list_map" } */
  template <typename..., typename fbthrift_T = folly::F14FastMap<int, folly::fbvector<double>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fast_list_map_ref() & {
    return {this->__fbthrift_field_fast_list_map, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "fast_list_map" } */
  template <typename..., typename fbthrift_T = folly::F14FastMap<int, folly::fbvector<double>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fast_list_map_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fast_list_map), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "fast_list_map" } */
  template <typename..., typename fbthrift_T = folly::F14FastMap<int, folly::fbvector<double>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> fast_list_map() const& {
    return {this->__fbthrift_field_fast_list_map, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "fast_list_map" } */
  template <typename..., typename fbthrift_T = folly::F14FastMap<int, folly::fbvector<double>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> fast_list_map() & {
    return {this->__fbthrift_field_fast_list_map, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "fast_list_map" } */
  template <typename..., typename fbthrift_T = folly::F14FastMap<int, folly::fbvector<double>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> fast_list_map() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_fast_list_map), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "buf_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> buf_map_ref() const& {
    return {this->__fbthrift_field_buf_map, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "buf_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> buf_map_ref() & {
    return {this->__fbthrift_field_buf_map, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "buf_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> buf_map_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_buf_map), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "buf_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> buf_map() const& {
    return {this->__fbthrift_field_buf_map, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "buf_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> buf_map() & {
    return {this->__fbthrift_field_buf_map, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "buf_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> buf_map() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_buf_map), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "unsigned_list_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> unsigned_list_map_ref() const& {
    return {this->__fbthrift_field_unsigned_list_map, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "unsigned_list_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> unsigned_list_map_ref() & {
    return {this->__fbthrift_field_unsigned_list_map, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "unsigned_list_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> unsigned_list_map_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_unsigned_list_map), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "unsigned_list_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> unsigned_list_map() const& {
    return {this->__fbthrift_field_unsigned_list_map, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "unsigned_list_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> unsigned_list_map() & {
    return {this->__fbthrift_field_unsigned_list_map, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "unsigned_list_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> unsigned_list_map() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_unsigned_list_map), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "enumz" } */
  [[deprecated("Use `FOO.enumz().value()` instead of `FOO.get_enumz()`")]]
  const ::std::map<::test::fixtures::python_capi::MyEnum, ::std::string>& get_enumz() const&;

  /** Glean { "field": "enumz" } */
  [[deprecated("Use `FOO.enumz().value()` instead of `FOO.get_enumz()`")]]
  ::std::map<::test::fixtures::python_capi::MyEnum, ::std::string> get_enumz() &&;

  /** Glean { "field": "enumz" } */
  template <typename T_MapStruct_enumz_struct_setter = ::std::map<::test::fixtures::python_capi::MyEnum, ::std::string>>
  [[deprecated("Use `FOO.enumz() = BAR` instead of `FOO.set_enumz(BAR)`")]]
  ::std::map<::test::fixtures::python_capi::MyEnum, ::std::string>& set_enumz(T_MapStruct_enumz_struct_setter&& enumz_) {
    enumz_ref() = std::forward<T_MapStruct_enumz_struct_setter>(enumz_);
    return __fbthrift_field_enumz;
  }

  /** Glean { "field": "intz" } */
  [[deprecated("Use `FOO.intz().value()` instead of `FOO.get_intz()`")]]
  const ::std::map<::std::int32_t, ::std::string>* get_intz() const&;

  /** Glean { "field": "intz" } */
  [[deprecated("Use `FOO.intz().value()` instead of `FOO.get_intz()`")]]
  ::std::map<::std::int32_t, ::std::string>* get_intz() &;

  ::std::map<::std::int32_t, ::std::string>* get_intz() && = delete;

  /** Glean { "field": "intz" } */
  template <typename T_MapStruct_intz_struct_setter = ::std::map<::std::int32_t, ::std::string>>
  [[deprecated("Use `FOO.intz() = BAR` instead of `FOO.set_intz(BAR)`")]]
  ::std::map<::std::int32_t, ::std::string>& set_intz(T_MapStruct_intz_struct_setter&& intz_) {
    intz_ref() = std::forward<T_MapStruct_intz_struct_setter>(intz_);
    return __fbthrift_field_intz;
  }

  /** Glean { "field": "encoded" } */
  [[deprecated("Use `FOO.encoded().value()` instead of `FOO.get_encoded()`")]]
  const std::unordered_map<::std::string, double>& get_encoded() const&;

  /** Glean { "field": "encoded" } */
  [[deprecated("Use `FOO.encoded().value()` instead of `FOO.get_encoded()`")]]
  std::unordered_map<::std::string, double> get_encoded() &&;

  /** Glean { "field": "encoded" } */
  template <typename T_MapStruct_encoded_struct_setter = std::unordered_map<::std::string, double>>
  [[deprecated("Use `FOO.encoded() = BAR` instead of `FOO.set_encoded(BAR)`")]]
  std::unordered_map<::std::string, double>& set_encoded(T_MapStruct_encoded_struct_setter&& encoded_) {
    encoded_ref() = std::forward<T_MapStruct_encoded_struct_setter>(encoded_);
    return __fbthrift_field_encoded;
  }

  /** Glean { "field": "flotz" } */
  [[deprecated("Use `FOO.flotz().value()` instead of `FOO.get_flotz()`")]]
  const std::unordered_map<uint64_t, float>& get_flotz() const&;

  /** Glean { "field": "flotz" } */
  [[deprecated("Use `FOO.flotz().value()` instead of `FOO.get_flotz()`")]]
  std::unordered_map<uint64_t, float> get_flotz() &&;

  /** Glean { "field": "flotz" } */
  template <typename T_MapStruct_flotz_struct_setter = std::unordered_map<uint64_t, float>>
  [[deprecated("Use `FOO.flotz() = BAR` instead of `FOO.set_flotz(BAR)`")]]
  std::unordered_map<uint64_t, float>& set_flotz(T_MapStruct_flotz_struct_setter&& flotz_) {
    flotz_ref() = std::forward<T_MapStruct_flotz_struct_setter>(flotz_);
    return __fbthrift_field_flotz;
  }

  /** Glean { "field": "map_list" } */
  [[deprecated("Use `FOO.map_list().value()` instead of `FOO.get_map_list()`")]]
  const ::std::vector<::std::map<::std::int32_t, ::std::int64_t>>& get_map_list() const&;

  /** Glean { "field": "map_list" } */
  [[deprecated("Use `FOO.map_list().value()` instead of `FOO.get_map_list()`")]]
  ::std::vector<::std::map<::std::int32_t, ::std::int64_t>> get_map_list() &&;

  /** Glean { "field": "map_list" } */
  template <typename T_MapStruct_map_list_struct_setter = ::std::vector<::std::map<::std::int32_t, ::std::int64_t>>>
  [[deprecated("Use `FOO.map_list() = BAR` instead of `FOO.set_map_list(BAR)`")]]
  ::std::vector<::std::map<::std::int32_t, ::std::int64_t>>& set_map_list(T_MapStruct_map_list_struct_setter&& map_list_) {
    map_list_ref() = std::forward<T_MapStruct_map_list_struct_setter>(map_list_);
    return __fbthrift_field_map_list;
  }

  /** Glean { "field": "list_map" } */
  [[deprecated("Use `FOO.list_map().value()` instead of `FOO.get_list_map()`")]]
  const ::std::map<::std::int32_t, ::std::vector<::std::int64_t>>& get_list_map() const&;

  /** Glean { "field": "list_map" } */
  [[deprecated("Use `FOO.list_map().value()` instead of `FOO.get_list_map()`")]]
  ::std::map<::std::int32_t, ::std::vector<::std::int64_t>> get_list_map() &&;

  /** Glean { "field": "list_map" } */
  template <typename T_MapStruct_list_map_struct_setter = ::std::map<::std::int32_t, ::std::vector<::std::int64_t>>>
  [[deprecated("Use `FOO.list_map() = BAR` instead of `FOO.set_list_map(BAR)`")]]
  ::std::map<::std::int32_t, ::std::vector<::std::int64_t>>& set_list_map(T_MapStruct_list_map_struct_setter&& list_map_) {
    list_map_ref() = std::forward<T_MapStruct_list_map_struct_setter>(list_map_);
    return __fbthrift_field_list_map;
  }

  /** Glean { "field": "fast_list_map" } */
  [[deprecated("Use `FOO.fast_list_map().value()` instead of `FOO.get_fast_list_map()`")]]
  const folly::F14FastMap<int, folly::fbvector<double>>& get_fast_list_map() const&;

  /** Glean { "field": "fast_list_map" } */
  [[deprecated("Use `FOO.fast_list_map().value()` instead of `FOO.get_fast_list_map()`")]]
  folly::F14FastMap<int, folly::fbvector<double>> get_fast_list_map() &&;

  /** Glean { "field": "fast_list_map" } */
  template <typename T_MapStruct_fast_list_map_struct_setter = folly::F14FastMap<int, folly::fbvector<double>>>
  [[deprecated("Use `FOO.fast_list_map() = BAR` instead of `FOO.set_fast_list_map(BAR)`")]]
  folly::F14FastMap<int, folly::fbvector<double>>& set_fast_list_map(T_MapStruct_fast_list_map_struct_setter&& fast_list_map_) {
    fast_list_map_ref() = std::forward<T_MapStruct_fast_list_map_struct_setter>(fast_list_map_);
    return __fbthrift_field_fast_list_map;
  }

  /** Glean { "field": "buf_map" } */
  [[deprecated("Use `FOO.buf_map().value()` instead of `FOO.get_buf_map()`")]]
  const ::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr>& get_buf_map() const&;

  /** Glean { "field": "buf_map" } */
  [[deprecated("Use `FOO.buf_map().value()` instead of `FOO.get_buf_map()`")]]
  ::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr> get_buf_map() &&;

  /** Glean { "field": "buf_map" } */
  template <typename T_MapStruct_buf_map_struct_setter = ::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr>>
  [[deprecated("Use `FOO.buf_map() = BAR` instead of `FOO.set_buf_map(BAR)`")]]
  ::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr>& set_buf_map(T_MapStruct_buf_map_struct_setter&& buf_map_) {
    buf_map_ref() = std::forward<T_MapStruct_buf_map_struct_setter>(buf_map_);
    return __fbthrift_field_buf_map;
  }

  /** Glean { "field": "unsigned_list_map" } */
  [[deprecated("Use `FOO.unsigned_list_map().value()` instead of `FOO.get_unsigned_list_map()`")]]
  const ::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>>& get_unsigned_list_map() const&;

  /** Glean { "field": "unsigned_list_map" } */
  [[deprecated("Use `FOO.unsigned_list_map().value()` instead of `FOO.get_unsigned_list_map()`")]]
  ::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>> get_unsigned_list_map() &&;

  /** Glean { "field": "unsigned_list_map" } */
  template <typename T_MapStruct_unsigned_list_map_struct_setter = ::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>>>
  [[deprecated("Use `FOO.unsigned_list_map() = BAR` instead of `FOO.set_unsigned_list_map(BAR)`")]]
  ::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>>& set_unsigned_list_map(T_MapStruct_unsigned_list_map_struct_setter&& unsigned_list_map_) {
    unsigned_list_map_ref() = std::forward<T_MapStruct_unsigned_list_map_struct_setter>(unsigned_list_map_);
    return __fbthrift_field_unsigned_list_map;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MapStruct>;
  friend void swap(MapStruct& a, MapStruct& b);
};

template <class Protocol_>
unsigned long MapStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/module.thrift", "name": "ComposeStruct", "kind": "struct" } */
class ComposeStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 10;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,6,5,8,7,9,10};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::enum_,
    ::apache::thrift::ident::renamed_,
    ::apache::thrift::ident::primitive,
    ::apache::thrift::ident::aliased,
    ::apache::thrift::ident::xstruct,
    ::apache::thrift::ident::xenum,
    ::apache::thrift::ident::serial_struct,
    ::apache::thrift::ident::friends,
    ::apache::thrift::ident::serial_union,
    ::apache::thrift::ident::serial_error
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::enum_t<::test::fixtures::python_capi::MyEnum>,
    ::apache::thrift::type::enum_t<::test::fixtures::python_capi::NormalDecentEnum>,
    ::apache::thrift::type::struct_t<::test::fixtures::python_capi::PrimitiveStruct>,
    ::apache::thrift::type::struct_t<::test::fixtures::python_capi::ListStruct>,
    ::apache::thrift::type::struct_t<::test::fixtures::python_capi::DepStruct>,
    ::apache::thrift::type::enum_t<::test::fixtures::python_capi::DepEnum>,
    ::apache::thrift::type::struct_t<::test::fixtures::python_capi::SerializedStruct>,
    ::apache::thrift::type::list<::apache::thrift::type::struct_t<::test::fixtures::python_capi::DepStruct>>,
    ::apache::thrift::type::union_t<::test::fixtures::python_capi::SerializedUnion>,
    ::apache::thrift::type::exception_t<::test::fixtures::python_capi::SerializedError>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ComposeStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  ComposeStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ComposeStruct(apache::thrift::FragileConstructor, ::test::fixtures::python_capi::MyEnum enum___arg, ::test::fixtures::python_capi::NormalDecentEnum renamed___arg, ::test::fixtures::python_capi::PrimitiveStruct primitive__arg, ::std::shared_ptr<const ::test::fixtures::python_capi::ListAlias> aliased__arg, ::test::fixtures::python_capi::DepStruct xstruct__arg, ::test::fixtures::python_capi::DepEnum xenum__arg, ::test::fixtures::python_capi::SerializedStruct serial_struct__arg, ::std::vector<::test::fixtures::python_capi::DepStruct> friends__arg, ::test::fixtures::python_capi::SerializedUnion serial_union__arg, ::test::fixtures::python_capi::SerializedError serial_error__arg);

  ComposeStruct(ComposeStruct&&) noexcept;


  ComposeStruct& operator=(ComposeStruct&&) noexcept;

  ~ComposeStruct();

 private:
  ::test::fixtures::python_capi::MyEnum __fbthrift_field_enum_;
 private:
  ::test::fixtures::python_capi::NormalDecentEnum __fbthrift_field_renamed_;
 private:
  ::test::fixtures::python_capi::PrimitiveStruct __fbthrift_field_primitive;
 private:
  ::std::shared_ptr<const ::test::fixtures::python_capi::ListAlias> __fbthrift_field_aliased;
 private:
  ::test::fixtures::python_capi::DepStruct __fbthrift_field_xstruct;
 private:
  ::test::fixtures::python_capi::DepEnum __fbthrift_field_xenum;
 private:
  ::test::fixtures::python_capi::SerializedStruct __fbthrift_field_serial_struct;
 private:
  ::std::vector<::test::fixtures::python_capi::DepStruct> __fbthrift_field_friends;
 private:
  ::test::fixtures::python_capi::SerializedUnion __fbthrift_field_serial_union;
 private:
  ::test::fixtures::python_capi::SerializedError __fbthrift_field_serial_error;
 private:
  apache::thrift::detail::isset_bitset<9, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const ComposeStruct&) const;
  bool operator<(const ComposeStruct&) const;

  /** Glean { "field": "enum_" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> enum__ref() const& {
    return {this->__fbthrift_field_enum_, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "enum_" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> enum__ref() & {
    return {this->__fbthrift_field_enum_, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "enum_" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> enum__ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_enum_), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "enum_" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> enum_() const& {
    return {this->__fbthrift_field_enum_, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "enum_" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> enum_() & {
    return {this->__fbthrift_field_enum_, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "enum_" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> enum_() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_enum_), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "renamed_" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::NormalDecentEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> renamed__ref() const& {
    return {this->__fbthrift_field_renamed_, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "renamed_" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::NormalDecentEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> renamed__ref() & {
    return {this->__fbthrift_field_renamed_, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "renamed_" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::NormalDecentEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> renamed__ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_renamed_), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "renamed_" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::NormalDecentEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> renamed_() const& {
    return {this->__fbthrift_field_renamed_, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "renamed_" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::NormalDecentEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> renamed_() & {
    return {this->__fbthrift_field_renamed_, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "renamed_" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::NormalDecentEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> renamed_() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_renamed_), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "primitive" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::PrimitiveStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> primitive_ref() const& {
    return {this->__fbthrift_field_primitive, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "primitive" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::PrimitiveStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> primitive_ref() & {
    return {this->__fbthrift_field_primitive, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "primitive" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::PrimitiveStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> primitive_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_primitive), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "primitive" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::PrimitiveStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> primitive() const& {
    return {this->__fbthrift_field_primitive, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "primitive" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::PrimitiveStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> primitive() & {
    return {this->__fbthrift_field_primitive, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "primitive" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::PrimitiveStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> primitive() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_primitive), __isset.at(2), __isset.bit(2)};
  }
  /** Glean { "field": "aliased" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::test::fixtures::python_capi::ListAlias>>
  FOLLY_ERASE fbthrift_T& aliased_ref() & {
    return __fbthrift_field_aliased;
  }

  /** Glean { "field": "aliased" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::test::fixtures::python_capi::ListAlias>>
  FOLLY_ERASE const fbthrift_T& aliased_ref() const& {
    return __fbthrift_field_aliased;
  }

  /** Glean { "field": "aliased" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::test::fixtures::python_capi::ListAlias>>
  FOLLY_ERASE fbthrift_T&& aliased_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_aliased);
  }

  /** Glean { "field": "aliased" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::test::fixtures::python_capi::ListAlias>>
  FOLLY_ERASE const fbthrift_T&& aliased_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_aliased);
  }

  /** Glean { "field": "aliased" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::test::fixtures::python_capi::ListAlias>>
  FOLLY_ERASE fbthrift_T& aliased() & {
    return __fbthrift_field_aliased;
  }

  /** Glean { "field": "aliased" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::test::fixtures::python_capi::ListAlias>>
  FOLLY_ERASE const fbthrift_T& aliased() const& {
    return __fbthrift_field_aliased;
  }

  /** Glean { "field": "aliased" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::test::fixtures::python_capi::ListAlias>>
  FOLLY_ERASE fbthrift_T&& aliased() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_aliased);
  }

  /** Glean { "field": "aliased" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::test::fixtures::python_capi::ListAlias>>
  FOLLY_ERASE const fbthrift_T&& aliased() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_aliased);
  }

  /** Glean { "field": "xstruct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::DepStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> xstruct_ref() const& {
    return {this->__fbthrift_field_xstruct, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "xstruct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::DepStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> xstruct_ref() & {
    return {this->__fbthrift_field_xstruct, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "xstruct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::DepStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> xstruct_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_xstruct), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "xstruct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::DepStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> xstruct() const& {
    return {this->__fbthrift_field_xstruct, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "xstruct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::DepStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> xstruct() & {
    return {this->__fbthrift_field_xstruct, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "xstruct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::DepStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> xstruct() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_xstruct), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "xenum" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::DepEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> xenum_ref() const& {
    return {this->__fbthrift_field_xenum, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "xenum" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::DepEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> xenum_ref() & {
    return {this->__fbthrift_field_xenum, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "xenum" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::DepEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> xenum_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_xenum), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "xenum" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::DepEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> xenum() const& {
    return {this->__fbthrift_field_xenum, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "xenum" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::DepEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> xenum() & {
    return {this->__fbthrift_field_xenum, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "xenum" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::DepEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> xenum() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_xenum), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "serial_struct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::SerializedStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> serial_struct_ref() const& {
    return {this->__fbthrift_field_serial_struct, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "serial_struct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::SerializedStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> serial_struct_ref() & {
    return {this->__fbthrift_field_serial_struct, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "serial_struct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::SerializedStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> serial_struct_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_serial_struct), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "serial_struct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::SerializedStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> serial_struct() const& {
    return {this->__fbthrift_field_serial_struct, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "serial_struct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::SerializedStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> serial_struct() & {
    return {this->__fbthrift_field_serial_struct, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "serial_struct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::SerializedStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> serial_struct() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_serial_struct), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "friends" } */
  template <typename..., typename fbthrift_T = ::std::vector<::test::fixtures::python_capi::DepStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> friends_ref() const& {
    return {this->__fbthrift_field_friends, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "friends" } */
  template <typename..., typename fbthrift_T = ::std::vector<::test::fixtures::python_capi::DepStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> friends_ref() & {
    return {this->__fbthrift_field_friends, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "friends" } */
  template <typename..., typename fbthrift_T = ::std::vector<::test::fixtures::python_capi::DepStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> friends_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_friends), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "friends" } */
  template <typename..., typename fbthrift_T = ::std::vector<::test::fixtures::python_capi::DepStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> friends() const& {
    return {this->__fbthrift_field_friends, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "friends" } */
  template <typename..., typename fbthrift_T = ::std::vector<::test::fixtures::python_capi::DepStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> friends() & {
    return {this->__fbthrift_field_friends, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "friends" } */
  template <typename..., typename fbthrift_T = ::std::vector<::test::fixtures::python_capi::DepStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> friends() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_friends), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "serial_union" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::SerializedUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> serial_union_ref() const& {
    return {this->__fbthrift_field_serial_union, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "serial_union" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::SerializedUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> serial_union_ref() & {
    return {this->__fbthrift_field_serial_union, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "serial_union" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::SerializedUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> serial_union_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_serial_union), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "serial_union" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::SerializedUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> serial_union() const& {
    return {this->__fbthrift_field_serial_union, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "serial_union" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::SerializedUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> serial_union() & {
    return {this->__fbthrift_field_serial_union, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "serial_union" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::SerializedUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> serial_union() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_serial_union), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "serial_error" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::SerializedError>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> serial_error_ref() const& {
    return {this->__fbthrift_field_serial_error, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "serial_error" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::SerializedError>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> serial_error_ref() & {
    return {this->__fbthrift_field_serial_error, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "serial_error" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::SerializedError>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> serial_error_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_serial_error), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "serial_error" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::SerializedError>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> serial_error() const& {
    return {this->__fbthrift_field_serial_error, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "serial_error" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::SerializedError>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> serial_error() & {
    return {this->__fbthrift_field_serial_error, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "serial_error" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::python_capi::SerializedError>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> serial_error() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_serial_error), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "enum_" } */
  [[deprecated("Use `FOO.enum_().value()` instead of `FOO.get_enum_()`")]]
  ::test::fixtures::python_capi::MyEnum get_enum_() const;

  /** Glean { "field": "enum_" } */
  [[deprecated("Use `FOO.enum_() = BAR` instead of `FOO.set_enum_(BAR)`")]]
  ::test::fixtures::python_capi::MyEnum& set_enum_(::test::fixtures::python_capi::MyEnum enum__);

  /** Glean { "field": "renamed_" } */
  [[deprecated("Use `FOO.renamed_().value()` instead of `FOO.get_renamed_()`")]]
  ::test::fixtures::python_capi::NormalDecentEnum get_renamed_() const;

  /** Glean { "field": "renamed_" } */
  [[deprecated("Use `FOO.renamed_() = BAR` instead of `FOO.set_renamed_(BAR)`")]]
  ::test::fixtures::python_capi::NormalDecentEnum& set_renamed_(::test::fixtures::python_capi::NormalDecentEnum renamed__);

  /** Glean { "field": "primitive" } */
  [[deprecated("Use `FOO.primitive().value()` instead of `FOO.get_primitive()`")]]
  const ::test::fixtures::python_capi::PrimitiveStruct& get_primitive() const&;

  /** Glean { "field": "primitive" } */
  [[deprecated("Use `FOO.primitive().value()` instead of `FOO.get_primitive()`")]]
  ::test::fixtures::python_capi::PrimitiveStruct get_primitive() &&;

  /** Glean { "field": "primitive" } */
  template <typename T_ComposeStruct_primitive_struct_setter = ::test::fixtures::python_capi::PrimitiveStruct>
  [[deprecated("Use `FOO.primitive() = BAR` instead of `FOO.set_primitive(BAR)`")]]
  ::test::fixtures::python_capi::PrimitiveStruct& set_primitive(T_ComposeStruct_primitive_struct_setter&& primitive_) {
    primitive_ref() = std::forward<T_ComposeStruct_primitive_struct_setter>(primitive_);
    return __fbthrift_field_primitive;
  }

  /** Glean { "field": "xstruct" } */
  [[deprecated("Use `FOO.xstruct().value()` instead of `FOO.get_xstruct()`")]]
  const ::test::fixtures::python_capi::DepStruct& get_xstruct() const&;

  /** Glean { "field": "xstruct" } */
  [[deprecated("Use `FOO.xstruct().value()` instead of `FOO.get_xstruct()`")]]
  ::test::fixtures::python_capi::DepStruct get_xstruct() &&;

  /** Glean { "field": "xstruct" } */
  template <typename T_ComposeStruct_xstruct_struct_setter = ::test::fixtures::python_capi::DepStruct>
  [[deprecated("Use `FOO.xstruct() = BAR` instead of `FOO.set_xstruct(BAR)`")]]
  ::test::fixtures::python_capi::DepStruct& set_xstruct(T_ComposeStruct_xstruct_struct_setter&& xstruct_) {
    xstruct_ref() = std::forward<T_ComposeStruct_xstruct_struct_setter>(xstruct_);
    return __fbthrift_field_xstruct;
  }

  /** Glean { "field": "xenum" } */
  [[deprecated("Use `FOO.xenum().value()` instead of `FOO.get_xenum()`")]]
  ::test::fixtures::python_capi::DepEnum get_xenum() const;

  /** Glean { "field": "xenum" } */
  [[deprecated("Use `FOO.xenum() = BAR` instead of `FOO.set_xenum(BAR)`")]]
  ::test::fixtures::python_capi::DepEnum& set_xenum(::test::fixtures::python_capi::DepEnum xenum_);

  /** Glean { "field": "serial_struct" } */
  [[deprecated("Use `FOO.serial_struct().value()` instead of `FOO.get_serial_struct()`")]]
  const ::test::fixtures::python_capi::SerializedStruct& get_serial_struct() const&;

  /** Glean { "field": "serial_struct" } */
  [[deprecated("Use `FOO.serial_struct().value()` instead of `FOO.get_serial_struct()`")]]
  ::test::fixtures::python_capi::SerializedStruct get_serial_struct() &&;

  /** Glean { "field": "serial_struct" } */
  template <typename T_ComposeStruct_serial_struct_struct_setter = ::test::fixtures::python_capi::SerializedStruct>
  [[deprecated("Use `FOO.serial_struct() = BAR` instead of `FOO.set_serial_struct(BAR)`")]]
  ::test::fixtures::python_capi::SerializedStruct& set_serial_struct(T_ComposeStruct_serial_struct_struct_setter&& serial_struct_) {
    serial_struct_ref() = std::forward<T_ComposeStruct_serial_struct_struct_setter>(serial_struct_);
    return __fbthrift_field_serial_struct;
  }

  /** Glean { "field": "friends" } */
  [[deprecated("Use `FOO.friends().value()` instead of `FOO.get_friends()`")]]
  const ::std::vector<::test::fixtures::python_capi::DepStruct>& get_friends() const&;

  /** Glean { "field": "friends" } */
  [[deprecated("Use `FOO.friends().value()` instead of `FOO.get_friends()`")]]
  ::std::vector<::test::fixtures::python_capi::DepStruct> get_friends() &&;

  /** Glean { "field": "friends" } */
  template <typename T_ComposeStruct_friends_struct_setter = ::std::vector<::test::fixtures::python_capi::DepStruct>>
  [[deprecated("Use `FOO.friends() = BAR` instead of `FOO.set_friends(BAR)`")]]
  ::std::vector<::test::fixtures::python_capi::DepStruct>& set_friends(T_ComposeStruct_friends_struct_setter&& friends_) {
    friends_ref() = std::forward<T_ComposeStruct_friends_struct_setter>(friends_);
    return __fbthrift_field_friends;
  }

  /** Glean { "field": "serial_union" } */
  [[deprecated("Use `FOO.serial_union().value()` instead of `FOO.get_serial_union()`")]]
  const ::test::fixtures::python_capi::SerializedUnion& get_serial_union() const&;

  /** Glean { "field": "serial_union" } */
  [[deprecated("Use `FOO.serial_union().value()` instead of `FOO.get_serial_union()`")]]
  ::test::fixtures::python_capi::SerializedUnion get_serial_union() &&;

  /** Glean { "field": "serial_union" } */
  template <typename T_ComposeStruct_serial_union_struct_setter = ::test::fixtures::python_capi::SerializedUnion>
  [[deprecated("Use `FOO.serial_union() = BAR` instead of `FOO.set_serial_union(BAR)`")]]
  ::test::fixtures::python_capi::SerializedUnion& set_serial_union(T_ComposeStruct_serial_union_struct_setter&& serial_union_) {
    serial_union_ref() = std::forward<T_ComposeStruct_serial_union_struct_setter>(serial_union_);
    return __fbthrift_field_serial_union;
  }

  /** Glean { "field": "serial_error" } */
  [[deprecated("Use `FOO.serial_error().value()` instead of `FOO.get_serial_error()`")]]
  const ::test::fixtures::python_capi::SerializedError& get_serial_error() const&;

  /** Glean { "field": "serial_error" } */
  [[deprecated("Use `FOO.serial_error().value()` instead of `FOO.get_serial_error()`")]]
  ::test::fixtures::python_capi::SerializedError get_serial_error() &&;

  /** Glean { "field": "serial_error" } */
  template <typename T_ComposeStruct_serial_error_struct_setter = ::test::fixtures::python_capi::SerializedError>
  [[deprecated("Use `FOO.serial_error() = BAR` instead of `FOO.set_serial_error(BAR)`")]]
  ::test::fixtures::python_capi::SerializedError& set_serial_error(T_ComposeStruct_serial_error_struct_setter&& serial_error_) {
    serial_error_ref() = std::forward<T_ComposeStruct_serial_error_struct_setter>(serial_error_);
    return __fbthrift_field_serial_error;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ComposeStruct>;
  friend void swap(ComposeStruct& a, ComposeStruct& b);
};

template <class Protocol_>
unsigned long ComposeStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/module.thrift", "name": "Shallot", "kind": "union" } */
class Shallot final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 7;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,6,4,8,9,10};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::myEnum,
    ::apache::thrift::ident::myStruct,
    ::apache::thrift::ident::intSet,
    ::apache::thrift::ident::myString,
    ::apache::thrift::ident::doubleList,
    ::apache::thrift::ident::strMap,
    ::apache::thrift::ident::adapted_int
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::enum_t<::test::fixtures::python_capi::MyEnum>,
    ::apache::thrift::type::struct_t<::test::fixtures::python_capi::PrimitiveStruct>,
    ::apache::thrift::type::set<::apache::thrift::type::i64_t>,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::map<::apache::thrift::type::binary_t, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::adapted<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ProtocolId>, ::apache::thrift::type::i64_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_destruct();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Shallot;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    true;


 public:
  enum class Type : int {
    __EMPTY__ = 0,
    myEnum = 1,
    myStruct = 2,
    intSet = 6,
    myString = 4,
    doubleList = 8,
    strMap = 9,
    adapted_int = 10,
  } ;

  Shallot()
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {}

  Shallot(Shallot&& rhs) noexcept
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::myEnum:
      {
        set_myEnum(std::move(rhs.value_.myEnum));
        break;
      }
      case Type::myStruct:
      {
        set_myStruct(std::move(rhs.value_.myStruct));
        break;
      }
      case Type::intSet:
      {
        set_intSet(std::move(*rhs.value_.intSet));
        break;
      }
      case Type::myString:
      {
        set_myString(std::move(rhs.value_.myString));
        break;
      }
      case Type::doubleList:
      {
        set_doubleList(std::move(*rhs.value_.doubleList));
        break;
      }
      case Type::strMap:
      {
        set_strMap(std::move(*rhs.value_.strMap));
        break;
      }
      case Type::adapted_int:
      {
        set_adapted_int(std::move(rhs.value_.adapted_int));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  Shallot(const Shallot& rhs);

  Shallot& operator=(Shallot&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        __fbthrift_clear();
        return *this;
      }
      case Type::myEnum:
      {
        set_myEnum(std::move(rhs.value_.myEnum));
        break;
      }
      case Type::myStruct:
      {
        set_myStruct(std::move(rhs.value_.myStruct));
        break;
      }
      case Type::intSet:
      {
        set_intSet(std::move(*rhs.value_.intSet));
        break;
      }
      case Type::myString:
      {
        set_myString(std::move(rhs.value_.myString));
        break;
      }
      case Type::doubleList:
      {
        set_doubleList(std::move(*rhs.value_.doubleList));
        break;
      }
      case Type::strMap:
      {
        set_strMap(std::move(*rhs.value_.strMap));
        break;
      }
      case Type::adapted_int:
      {
        set_adapted_int(std::move(rhs.value_.adapted_int));
        break;
      }
      default:
      {
        assert(false);
        __fbthrift_clear();
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  Shallot& operator=(const Shallot& rhs);

  ~Shallot();

  union storage_type {
    ::test::fixtures::python_capi::MyEnum myEnum;
    ::test::fixtures::python_capi::PrimitiveStruct myStruct;
    ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::int64_t>> intSet;
    ::std::string myString;
    ::std::shared_ptr<const ::std::vector<double>> doubleList;
    ::std::unique_ptr<::std::map<::std::string, ::std::string>> strMap;
    ::apache::thrift::type::ProtocolId adapted_int;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const Shallot&) const;
  bool operator<(const Shallot&) const;

  /** Glean { "field": "myEnum" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::python_capi::MyEnum& set_myEnum(::test::fixtures::python_capi::MyEnum t = ::test::fixtures::python_capi::MyEnum()) {
    using T0 = ::test::fixtures::python_capi::MyEnum;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::myEnum);
    ::new (std::addressof(value_.myEnum)) T(t);
    return value_.myEnum;
  }


  /** Glean { "field": "myStruct" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::python_capi::PrimitiveStruct& set_myStruct(::test::fixtures::python_capi::PrimitiveStruct const &t) {
    using T0 = ::test::fixtures::python_capi::PrimitiveStruct;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::myStruct);
    ::new (std::addressof(value_.myStruct)) T(t);
    return value_.myStruct;
  }

  /** Glean { "field": "myStruct" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::python_capi::PrimitiveStruct& set_myStruct(::test::fixtures::python_capi::PrimitiveStruct&& t) {
    using T0 = ::test::fixtures::python_capi::PrimitiveStruct;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::myStruct);
    ::new (std::addressof(value_.myStruct)) T(std::move(t));
    return value_.myStruct;
  }

  /** Glean { "field": "myStruct" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::test::fixtures::python_capi::PrimitiveStruct, T...>> ::test::fixtures::python_capi::PrimitiveStruct& set_myStruct(T&&... t) {
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::myStruct);
    ::new (std::addressof(value_.myStruct)) ::test::fixtures::python_capi::PrimitiveStruct(std::forward<T>(t)...);
    return value_.myStruct;
  }
 private:
  ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::int64_t>>& set_intSet(::apache::thrift::detail::boxed_value_ptr<::std::set<::std::int64_t>> t);
  ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::int64_t>>& set_intSet(::std::set<::std::int64_t> const &t);
  ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::int64_t>>& set_intSet(::std::set<::std::int64_t>&& t);
  /** Glean { "field": "intSet" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::set<::std::int64_t>, T...>> ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::int64_t>>& set_intSet(T&&... t) {
    // defer resolution of ref_ in case ref_::element_type would here be incomplete
    using ref_ = folly::conditional_t<(sizeof...(T) < size_t(-1)), ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::int64_t>>, void>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::intSet);
    ::new (std::addressof(value_.intSet)) ref_(typename ref_::element_type(std::forward<T>(t)...));
    return value_.intSet;
  }
 public:

  /** Glean { "field": "myString" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::string& set_myString(::std::string const &t) {
    using T0 = ::std::string;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::myString);
    ::new (std::addressof(value_.myString)) T(t);
    return value_.myString;
  }

  /** Glean { "field": "myString" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::string& set_myString(::std::string&& t) {
    using T0 = ::std::string;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::myString);
    ::new (std::addressof(value_.myString)) T(std::move(t));
    return value_.myString;
  }

  /** Glean { "field": "myString" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::string, T...>> ::std::string& set_myString(T&&... t) {
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::myString);
    ::new (std::addressof(value_.myString)) ::std::string(std::forward<T>(t)...);
    return value_.myString;
  }

  ::std::shared_ptr<const ::std::vector<double>>& set_doubleList(::std::shared_ptr<const ::std::vector<double>> t);
  ::std::shared_ptr<const ::std::vector<double>>& set_doubleList(::std::vector<double> const &t);
  ::std::shared_ptr<const ::std::vector<double>>& set_doubleList(::std::vector<double>&& t);
  /** Glean { "field": "doubleList" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::vector<double>, T...>> ::std::shared_ptr<const ::std::vector<double>>& set_doubleList(T&&... t) {
    // defer resolution of ref_ in case ref_::element_type would here be incomplete
    using ref_ = folly::conditional_t<(sizeof...(T) < size_t(-1)), ::std::shared_ptr<const ::std::vector<double>>, void>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::doubleList);
    ::new (std::addressof(value_.doubleList)) ref_(new typename ref_::element_type(std::forward<T>(t)...));
    return value_.doubleList;
  }
  ::std::unique_ptr<::std::map<::std::string, ::std::string>>& set_strMap(::std::unique_ptr<::std::map<::std::string, ::std::string>> t);
  ::std::unique_ptr<::std::map<::std::string, ::std::string>>& set_strMap(::std::map<::std::string, ::std::string> const &t);
  ::std::unique_ptr<::std::map<::std::string, ::std::string>>& set_strMap(::std::map<::std::string, ::std::string>&& t);
  /** Glean { "field": "strMap" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::map<::std::string, ::std::string>, T...>> ::std::unique_ptr<::std::map<::std::string, ::std::string>>& set_strMap(T&&... t) {
    // defer resolution of ref_ in case ref_::element_type would here be incomplete
    using ref_ = folly::conditional_t<(sizeof...(T) < size_t(-1)), ::std::unique_ptr<::std::map<::std::string, ::std::string>>, void>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::strMap);
    ::new (std::addressof(value_.strMap)) ref_(new typename ref_::element_type(std::forward<T>(t)...));
    return value_.strMap;
  }

  /** Glean { "field": "adapted_int" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::apache::thrift::type::ProtocolId& set_adapted_int(::apache::thrift::type::ProtocolId t = ::apache::thrift::type::ProtocolId()) {
    using T0 = ::apache::thrift::type::ProtocolId;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::adapted_int);
    ::new (std::addressof(value_.adapted_int)) T(t);
    return value_.adapted_int;
  }


  /** Glean { "field": "myEnum" } */
  ::test::fixtures::python_capi::MyEnum const& get_myEnum() const {
    if (getType() != Type::myEnum) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.myEnum;
  }

  /** Glean { "field": "myStruct" } */
  ::test::fixtures::python_capi::PrimitiveStruct const& get_myStruct() const {
    if (getType() != Type::myStruct) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.myStruct;
  }

  /** Glean { "field": "intSet" } */
  ::std::set<::std::int64_t> const& get_intSet() const {
    if (getType() != Type::intSet) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return *value_.intSet;
  }

  /** Glean { "field": "myString" } */
  ::std::string const& get_myString() const {
    if (getType() != Type::myString) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.myString;
  }

  /** Glean { "field": "doubleList" } */
  ::std::shared_ptr<const ::std::vector<double>> const& get_doubleList() const {
    if (getType() != Type::doubleList) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.doubleList;
  }

  /** Glean { "field": "strMap" } */
  ::std::unique_ptr<::std::map<::std::string, ::std::string>> const& get_strMap() const {
    if (getType() != Type::strMap) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.strMap;
  }

  /** Glean { "field": "adapted_int" } */
  ::apache::thrift::type::ProtocolId const& get_adapted_int() const {
    if (getType() != Type::adapted_int) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.adapted_int;
  }

  ::test::fixtures::python_capi::MyEnum& mutable_myEnum() {
    assert(getType() == Type::myEnum);
    return value_.myEnum;
  }

  ::test::fixtures::python_capi::PrimitiveStruct& mutable_myStruct() {
    assert(getType() == Type::myStruct);
    return value_.myStruct;
  }

  ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::int64_t>>& mutable_intSet() {
    assert(getType() == Type::intSet);
    return value_.intSet;
  }

  ::std::string& mutable_myString() {
    assert(getType() == Type::myString);
    return value_.myString;
  }

  ::std::shared_ptr<const ::std::vector<double>>& mutable_doubleList() {
    assert(getType() == Type::doubleList);
    return value_.doubleList;
  }

  ::std::unique_ptr<::std::map<::std::string, ::std::string>>& mutable_strMap() {
    assert(getType() == Type::strMap);
    return value_.strMap;
  }

  ::apache::thrift::type::ProtocolId& mutable_adapted_int() {
    assert(getType() == Type::adapted_int);
    return value_.adapted_int;
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  T move_myEnum() {
    assert(getType() == Type::myEnum);
    return std::move(value_.myEnum);
  }

  template <typename..., typename T = ::test::fixtures::python_capi::PrimitiveStruct>
  T move_myStruct() {
    assert(getType() == Type::myStruct);
    return std::move(value_.myStruct);
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::int64_t>>>
  T move_intSet() {
    assert(getType() == Type::intSet);
    return std::move(value_.intSet);
  }

  template <typename..., typename T = ::std::string>
  T move_myString() {
    assert(getType() == Type::myString);
    return std::move(value_.myString);
  }

  template <typename..., typename T = ::std::shared_ptr<const ::std::vector<double>>>
  T move_doubleList() {
    assert(getType() == Type::doubleList);
    return std::move(value_.doubleList);
  }

  template <typename..., typename T = ::std::unique_ptr<::std::map<::std::string, ::std::string>>>
  T move_strMap() {
    assert(getType() == Type::strMap);
    return std::move(value_.strMap);
  }

  template <typename..., typename T = ::apache::thrift::type::ProtocolId>
  T move_adapted_int() {
    assert(getType() == Type::adapted_int);
    return std::move(value_.adapted_int);
  }

  /** Glean { "field": "myEnum" } */
  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> myEnum_ref() const& {
    return {value_.myEnum, fbthrift_type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myEnum" } */
  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> myEnum_ref() & {
    return {value_.myEnum, fbthrift_type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myEnum" } */
  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> myEnum_ref() && {
    return {std::move(value_.myEnum), fbthrift_type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myEnum" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::test::fixtures::python_capi::MyEnum&> myEnum() const& {
    return {value_.myEnum, fbthrift_type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myEnum" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::test::fixtures::python_capi::MyEnum&> myEnum() & {
    return {value_.myEnum, fbthrift_type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myEnum" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::test::fixtures::python_capi::MyEnum&&> myEnum() && {
    return {std::move(value_.myEnum), fbthrift_type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "myStruct" } */
  template <typename..., typename T = ::test::fixtures::python_capi::PrimitiveStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> myStruct_ref() const& {
    return {value_.myStruct, fbthrift_type_, folly::to_underlying(Type::myStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myStruct" } */
  template <typename..., typename T = ::test::fixtures::python_capi::PrimitiveStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> myStruct_ref() & {
    return {value_.myStruct, fbthrift_type_, folly::to_underlying(Type::myStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myStruct" } */
  template <typename..., typename T = ::test::fixtures::python_capi::PrimitiveStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> myStruct_ref() && {
    return {std::move(value_.myStruct), fbthrift_type_, folly::to_underlying(Type::myStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myStruct" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::test::fixtures::python_capi::PrimitiveStruct&> myStruct() const& {
    return {value_.myStruct, fbthrift_type_, folly::to_underlying(Type::myStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myStruct" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::test::fixtures::python_capi::PrimitiveStruct&> myStruct() & {
    return {value_.myStruct, fbthrift_type_, folly::to_underlying(Type::myStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myStruct" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::test::fixtures::python_capi::PrimitiveStruct&&> myStruct() && {
    return {std::move(value_.myStruct), fbthrift_type_, folly::to_underlying(Type::myStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "intSet" } */
  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> intSet_ref() const& {
    return {value_.intSet, fbthrift_type_, folly::to_underlying(Type::intSet), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "intSet" } */
  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> intSet_ref() & {
    return {value_.intSet, fbthrift_type_, folly::to_underlying(Type::intSet), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "intSet" } */
  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> intSet_ref() && {
    return {std::move(value_.intSet), fbthrift_type_, folly::to_underlying(Type::intSet), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "intSet" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::int64_t>>&> intSet() const& {
    return {value_.intSet, fbthrift_type_, folly::to_underlying(Type::intSet), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "intSet" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::apache::thrift::detail::boxed_value_ptr<::std::set<::std::int64_t>>&> intSet() & {
    return {value_.intSet, fbthrift_type_, folly::to_underlying(Type::intSet), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "intSet" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::apache::thrift::detail::boxed_value_ptr<::std::set<::std::int64_t>>&&> intSet() && {
    return {std::move(value_.intSet), fbthrift_type_, folly::to_underlying(Type::intSet), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "myString" } */
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> myString_ref() const& {
    return {value_.myString, fbthrift_type_, folly::to_underlying(Type::myString), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myString" } */
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> myString_ref() & {
    return {value_.myString, fbthrift_type_, folly::to_underlying(Type::myString), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myString" } */
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> myString_ref() && {
    return {std::move(value_.myString), fbthrift_type_, folly::to_underlying(Type::myString), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myString" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::std::string&> myString() const& {
    return {value_.myString, fbthrift_type_, folly::to_underlying(Type::myString), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myString" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::string&> myString() & {
    return {value_.myString, fbthrift_type_, folly::to_underlying(Type::myString), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myString" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::string&&> myString() && {
    return {std::move(value_.myString), fbthrift_type_, folly::to_underlying(Type::myString), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "doubleList" } */
  template <typename..., typename T = ::std::shared_ptr<const ::std::vector<double>>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> doubleList_ref() const& {
    return {value_.doubleList, fbthrift_type_, folly::to_underlying(Type::doubleList), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "doubleList" } */
  template <typename..., typename T = ::std::shared_ptr<const ::std::vector<double>>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> doubleList_ref() & {
    return {value_.doubleList, fbthrift_type_, folly::to_underlying(Type::doubleList), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "doubleList" } */
  template <typename..., typename T = ::std::shared_ptr<const ::std::vector<double>>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> doubleList_ref() && {
    return {std::move(value_.doubleList), fbthrift_type_, folly::to_underlying(Type::doubleList), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "doubleList" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::std::shared_ptr<const ::std::vector<double>>&> doubleList() const& {
    return {value_.doubleList, fbthrift_type_, folly::to_underlying(Type::doubleList), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "doubleList" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::shared_ptr<const ::std::vector<double>>&> doubleList() & {
    return {value_.doubleList, fbthrift_type_, folly::to_underlying(Type::doubleList), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "doubleList" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::shared_ptr<const ::std::vector<double>>&&> doubleList() && {
    return {std::move(value_.doubleList), fbthrift_type_, folly::to_underlying(Type::doubleList), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "strMap" } */
  template <typename..., typename T = ::std::unique_ptr<::std::map<::std::string, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> strMap_ref() const& {
    return {value_.strMap, fbthrift_type_, folly::to_underlying(Type::strMap), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "strMap" } */
  template <typename..., typename T = ::std::unique_ptr<::std::map<::std::string, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> strMap_ref() & {
    return {value_.strMap, fbthrift_type_, folly::to_underlying(Type::strMap), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "strMap" } */
  template <typename..., typename T = ::std::unique_ptr<::std::map<::std::string, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> strMap_ref() && {
    return {std::move(value_.strMap), fbthrift_type_, folly::to_underlying(Type::strMap), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "strMap" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::std::unique_ptr<::std::map<::std::string, ::std::string>>&> strMap() const& {
    return {value_.strMap, fbthrift_type_, folly::to_underlying(Type::strMap), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "strMap" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::unique_ptr<::std::map<::std::string, ::std::string>>&> strMap() & {
    return {value_.strMap, fbthrift_type_, folly::to_underlying(Type::strMap), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "strMap" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::unique_ptr<::std::map<::std::string, ::std::string>>&&> strMap() && {
    return {std::move(value_.strMap), fbthrift_type_, folly::to_underlying(Type::strMap), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "adapted_int" } */
  template <typename..., typename T = ::apache::thrift::type::ProtocolId>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> adapted_int_ref() const& {
    return {value_.adapted_int, fbthrift_type_, folly::to_underlying(Type::adapted_int), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "adapted_int" } */
  template <typename..., typename T = ::apache::thrift::type::ProtocolId>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> adapted_int_ref() & {
    return {value_.adapted_int, fbthrift_type_, folly::to_underlying(Type::adapted_int), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "adapted_int" } */
  template <typename..., typename T = ::apache::thrift::type::ProtocolId>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> adapted_int_ref() && {
    return {std::move(value_.adapted_int), fbthrift_type_, folly::to_underlying(Type::adapted_int), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "adapted_int" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::apache::thrift::type::ProtocolId&> adapted_int() const& {
    return {value_.adapted_int, fbthrift_type_, folly::to_underlying(Type::adapted_int), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "adapted_int" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::apache::thrift::type::ProtocolId&> adapted_int() & {
    return {value_.adapted_int, fbthrift_type_, folly::to_underlying(Type::adapted_int), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "adapted_int" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::apache::thrift::type::ProtocolId&&> adapted_int() && {
    return {std::move(value_.adapted_int), fbthrift_type_, folly::to_underlying(Type::adapted_int), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(fbthrift_type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  storage_type value_;
  std::underlying_type_t<Type> fbthrift_type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Shallot>;
  friend void swap(Shallot& a, Shallot& b);
};

template <class Protocol_>
unsigned long Shallot::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/python_capi/src/module.thrift", "name": "SomeBinary", "kind": "union" } */
class SomeBinary final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 3;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::iobuf,
    ::apache::thrift::ident::iobuf_ptr,
    ::apache::thrift::ident::iobufRef
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::cpp_type<folly::IOBuf, ::apache::thrift::type::binary_t>,
    ::apache::thrift::type::cpp_type<std::unique_ptr<folly::IOBuf>, ::apache::thrift::type::binary_t>,
    ::apache::thrift::type::cpp_type<folly::IOBuf, ::apache::thrift::type::binary_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_destruct();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = SomeBinary;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:
  enum class Type : int {
    __EMPTY__ = 0,
    iobuf = 1,
    iobuf_ptr = 2,
    iobufRef = 3,
  } ;

  SomeBinary()
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {}

  SomeBinary(SomeBinary&& rhs) noexcept
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::iobuf:
      {
        set_iobuf(std::move(rhs.value_.iobuf));
        break;
      }
      case Type::iobuf_ptr:
      {
        set_iobuf_ptr(std::move(rhs.value_.iobuf_ptr));
        break;
      }
      case Type::iobufRef:
      {
        set_iobufRef(std::move(*rhs.value_.iobufRef));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  SomeBinary(const SomeBinary& rhs);

  SomeBinary& operator=(SomeBinary&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        __fbthrift_clear();
        return *this;
      }
      case Type::iobuf:
      {
        set_iobuf(std::move(rhs.value_.iobuf));
        break;
      }
      case Type::iobuf_ptr:
      {
        set_iobuf_ptr(std::move(rhs.value_.iobuf_ptr));
        break;
      }
      case Type::iobufRef:
      {
        set_iobufRef(std::move(*rhs.value_.iobufRef));
        break;
      }
      default:
      {
        assert(false);
        __fbthrift_clear();
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  SomeBinary& operator=(const SomeBinary& rhs);

  ~SomeBinary();

  union storage_type {
    ::test::fixtures::python_capi::IOBuf iobuf;
    ::test::fixtures::python_capi::IOBufPtr iobuf_ptr;
    ::std::unique_ptr<::test::fixtures::python_capi::IOBuf> iobufRef;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const SomeBinary&) const;
  bool operator<(const SomeBinary&) const;

  /** Glean { "field": "iobuf" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::python_capi::IOBuf& set_iobuf(::test::fixtures::python_capi::IOBuf const &t) {
    using T0 = ::test::fixtures::python_capi::IOBuf;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::iobuf);
    ::new (std::addressof(value_.iobuf)) T(t);
    return value_.iobuf;
  }

  /** Glean { "field": "iobuf" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::python_capi::IOBuf& set_iobuf(::test::fixtures::python_capi::IOBuf&& t) {
    using T0 = ::test::fixtures::python_capi::IOBuf;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::iobuf);
    ::new (std::addressof(value_.iobuf)) T(std::move(t));
    return value_.iobuf;
  }

  /** Glean { "field": "iobuf" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::test::fixtures::python_capi::IOBuf, T...>> ::test::fixtures::python_capi::IOBuf& set_iobuf(T&&... t) {
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::iobuf);
    ::new (std::addressof(value_.iobuf)) ::test::fixtures::python_capi::IOBuf(std::forward<T>(t)...);
    return value_.iobuf;
  }


  /** Glean { "field": "iobuf_ptr" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::python_capi::IOBufPtr& set_iobuf_ptr(::test::fixtures::python_capi::IOBufPtr const &t) {
    using T0 = ::test::fixtures::python_capi::IOBufPtr;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::iobuf_ptr);
    ::new (std::addressof(value_.iobuf_ptr)) T(t);
    return value_.iobuf_ptr;
  }

  /** Glean { "field": "iobuf_ptr" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::python_capi::IOBufPtr& set_iobuf_ptr(::test::fixtures::python_capi::IOBufPtr&& t) {
    using T0 = ::test::fixtures::python_capi::IOBufPtr;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::iobuf_ptr);
    ::new (std::addressof(value_.iobuf_ptr)) T(std::move(t));
    return value_.iobuf_ptr;
  }

  /** Glean { "field": "iobuf_ptr" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::test::fixtures::python_capi::IOBufPtr, T...>> ::test::fixtures::python_capi::IOBufPtr& set_iobuf_ptr(T&&... t) {
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::iobuf_ptr);
    ::new (std::addressof(value_.iobuf_ptr)) ::test::fixtures::python_capi::IOBufPtr(std::forward<T>(t)...);
    return value_.iobuf_ptr;
  }


  /** Glean { "field": "iobufRef" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::unique_ptr<::test::fixtures::python_capi::IOBuf>& set_iobufRef(::test::fixtures::python_capi::IOBuf const &t) {
    using T0 = ::std::unique_ptr<::test::fixtures::python_capi::IOBuf>;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::iobufRef);
    ::new (std::addressof(value_.iobufRef)) T(new typename T::element_type(t));
    return value_.iobufRef;
  }

  /** Glean { "field": "iobufRef" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::unique_ptr<::test::fixtures::python_capi::IOBuf>& set_iobufRef(::test::fixtures::python_capi::IOBuf&& t) {
    using T0 = ::std::unique_ptr<::test::fixtures::python_capi::IOBuf>;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::iobufRef);
    ::new (std::addressof(value_.iobufRef)) T(new typename T::element_type(std::move(t)));
    return value_.iobufRef;
  }

  /** Glean { "field": "iobufRef" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::test::fixtures::python_capi::IOBuf, T...>> ::std::unique_ptr<::test::fixtures::python_capi::IOBuf>& set_iobufRef(T&&... t) {
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::iobufRef);
    ::new (std::addressof(value_.iobufRef)) ::std::unique_ptr<::test::fixtures::python_capi::IOBuf>(new ::std::unique_ptr<::test::fixtures::python_capi::IOBuf>::element_type(std::forward<T>(t)...));
    return value_.iobufRef;
  }

  /** Glean { "field": "iobufRef" } */
  ::std::unique_ptr<::test::fixtures::python_capi::IOBuf>& set_iobufRef(::std::unique_ptr<::test::fixtures::python_capi::IOBuf> t) {
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::iobufRef);
    ::new (std::addressof(value_.iobufRef)) ::std::unique_ptr<::test::fixtures::python_capi::IOBuf>(std::move(t));
    return value_.iobufRef;
  }

  /** Glean { "field": "iobuf" } */
  ::test::fixtures::python_capi::IOBuf const& get_iobuf() const {
    if (getType() != Type::iobuf) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.iobuf;
  }

  /** Glean { "field": "iobuf_ptr" } */
  ::test::fixtures::python_capi::IOBufPtr const& get_iobuf_ptr() const {
    if (getType() != Type::iobuf_ptr) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.iobuf_ptr;
  }

  /** Glean { "field": "iobufRef" } */
  ::std::unique_ptr<::test::fixtures::python_capi::IOBuf> const& get_iobufRef() const {
    if (getType() != Type::iobufRef) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.iobufRef;
  }

  ::test::fixtures::python_capi::IOBuf& mutable_iobuf() {
    assert(getType() == Type::iobuf);
    return value_.iobuf;
  }

  ::test::fixtures::python_capi::IOBufPtr& mutable_iobuf_ptr() {
    assert(getType() == Type::iobuf_ptr);
    return value_.iobuf_ptr;
  }

  ::std::unique_ptr<::test::fixtures::python_capi::IOBuf>& mutable_iobufRef() {
    assert(getType() == Type::iobufRef);
    return value_.iobufRef;
  }

  template <typename..., typename T = ::test::fixtures::python_capi::IOBuf>
  T move_iobuf() {
    assert(getType() == Type::iobuf);
    return std::move(value_.iobuf);
  }

  template <typename..., typename T = ::test::fixtures::python_capi::IOBufPtr>
  T move_iobuf_ptr() {
    assert(getType() == Type::iobuf_ptr);
    return std::move(value_.iobuf_ptr);
  }

  template <typename..., typename T = ::std::unique_ptr<::test::fixtures::python_capi::IOBuf>>
  T move_iobufRef() {
    assert(getType() == Type::iobufRef);
    return std::move(value_.iobufRef);
  }

  /** Glean { "field": "iobuf" } */
  template <typename..., typename T = ::test::fixtures::python_capi::IOBuf>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> iobuf_ref() const& {
    return {value_.iobuf, fbthrift_type_, folly::to_underlying(Type::iobuf), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "iobuf" } */
  template <typename..., typename T = ::test::fixtures::python_capi::IOBuf>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> iobuf_ref() & {
    return {value_.iobuf, fbthrift_type_, folly::to_underlying(Type::iobuf), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "iobuf" } */
  template <typename..., typename T = ::test::fixtures::python_capi::IOBuf>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> iobuf_ref() && {
    return {std::move(value_.iobuf), fbthrift_type_, folly::to_underlying(Type::iobuf), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "iobuf" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::test::fixtures::python_capi::IOBuf&> iobuf() const& {
    return {value_.iobuf, fbthrift_type_, folly::to_underlying(Type::iobuf), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "iobuf" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::test::fixtures::python_capi::IOBuf&> iobuf() & {
    return {value_.iobuf, fbthrift_type_, folly::to_underlying(Type::iobuf), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "iobuf" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::test::fixtures::python_capi::IOBuf&&> iobuf() && {
    return {std::move(value_.iobuf), fbthrift_type_, folly::to_underlying(Type::iobuf), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "iobuf_ptr" } */
  template <typename..., typename T = ::test::fixtures::python_capi::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> iobuf_ptr_ref() const& {
    return {value_.iobuf_ptr, fbthrift_type_, folly::to_underlying(Type::iobuf_ptr), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "iobuf_ptr" } */
  template <typename..., typename T = ::test::fixtures::python_capi::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> iobuf_ptr_ref() & {
    return {value_.iobuf_ptr, fbthrift_type_, folly::to_underlying(Type::iobuf_ptr), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "iobuf_ptr" } */
  template <typename..., typename T = ::test::fixtures::python_capi::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> iobuf_ptr_ref() && {
    return {std::move(value_.iobuf_ptr), fbthrift_type_, folly::to_underlying(Type::iobuf_ptr), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "iobuf_ptr" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::test::fixtures::python_capi::IOBufPtr&> iobuf_ptr() const& {
    return {value_.iobuf_ptr, fbthrift_type_, folly::to_underlying(Type::iobuf_ptr), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "iobuf_ptr" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::test::fixtures::python_capi::IOBufPtr&> iobuf_ptr() & {
    return {value_.iobuf_ptr, fbthrift_type_, folly::to_underlying(Type::iobuf_ptr), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "iobuf_ptr" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::test::fixtures::python_capi::IOBufPtr&&> iobuf_ptr() && {
    return {std::move(value_.iobuf_ptr), fbthrift_type_, folly::to_underlying(Type::iobuf_ptr), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "iobufRef" } */
  template <typename..., typename T = ::std::unique_ptr<::test::fixtures::python_capi::IOBuf>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> iobufRef_ref() const& {
    return {value_.iobufRef, fbthrift_type_, folly::to_underlying(Type::iobufRef), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "iobufRef" } */
  template <typename..., typename T = ::std::unique_ptr<::test::fixtures::python_capi::IOBuf>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> iobufRef_ref() & {
    return {value_.iobufRef, fbthrift_type_, folly::to_underlying(Type::iobufRef), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "iobufRef" } */
  template <typename..., typename T = ::std::unique_ptr<::test::fixtures::python_capi::IOBuf>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> iobufRef_ref() && {
    return {std::move(value_.iobufRef), fbthrift_type_, folly::to_underlying(Type::iobufRef), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "iobufRef" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::std::unique_ptr<::test::fixtures::python_capi::IOBuf>&> iobufRef() const& {
    return {value_.iobufRef, fbthrift_type_, folly::to_underlying(Type::iobufRef), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "iobufRef" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::unique_ptr<::test::fixtures::python_capi::IOBuf>&> iobufRef() & {
    return {value_.iobufRef, fbthrift_type_, folly::to_underlying(Type::iobufRef), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "iobufRef" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::unique_ptr<::test::fixtures::python_capi::IOBuf>&&> iobufRef() && {
    return {std::move(value_.iobufRef), fbthrift_type_, folly::to_underlying(Type::iobufRef), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(fbthrift_type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  storage_type value_;
  std::underlying_type_t<Type> fbthrift_type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<SomeBinary>;
  friend void swap(SomeBinary& a, SomeBinary& b);
};

template <class Protocol_>
unsigned long SomeBinary::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace test::fixtures::python_capi

namespace apache::thrift {

template <> struct TEnumDataStorage<::test::fixtures::python_capi::Shallot::Type>;

template <> struct TEnumTraits<::test::fixtures::python_capi::Shallot::Type> {
  using type = ::test::fixtures::python_capi::Shallot::Type;

  static constexpr std::size_t const size = 7;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }

  static constexpr type min() { return type::myEnum; }
  static constexpr type max() { return type::adapted_int; }
};

template <> struct TEnumDataStorage<::test::fixtures::python_capi::SomeBinary::Type>;

template <> struct TEnumTraits<::test::fixtures::python_capi::SomeBinary::Type> {
  using type = ::test::fixtures::python_capi::SomeBinary::Type;

  static constexpr std::size_t const size = 3;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }

  static constexpr type min() { return type::iobuf; }
  static constexpr type max() { return type::iobufRef; }
};
} // namespace apache::thrift

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::test::fixtures::python_capi::MyStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -5728893688937422040;
  static constexpr ::std::string_view definitionKey = {"\xe0\xb0\x79\x8b\x86\x7e\x56\x2c\x54\xa6\xf4\x8c\xb0\x48\x22\x7b", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::python_capi::MyDataItem, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -5728893688937422040;
  static constexpr ::std::string_view definitionKey = {"\xdc\x01\xa2\x5c\x60\x5b\x28\x00\x3a\x99\x5c\x34\xfc\x26\x9c\xd5", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::python_capi::TransitiveDoubler, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -5728893688937422040;
  static constexpr ::std::string_view definitionKey = {"\x41\x8b\xc2\x05\x62\xdb\xfc\xf4\xf2\x19\xab\xce\x0b\x6d\x5d\x21", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::python_capi::detail::DoubledPair, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -5728893688937422040;
  static constexpr ::std::string_view definitionKey = {"\x78\x16\x44\x63\x20\x5b\x22\xa8\x6f\x58\xc5\xc5\x1d\x50\xda\x41", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::python_capi::StringPair, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -5728893688937422040;
  static constexpr ::std::string_view definitionKey = {"\x66\xb7\x8e\x4d\x86\x69\x94\x65\xbc\xb1\x4c\x2f\x70\xa9\xf7\x59", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::python_capi::VapidStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -5728893688937422040;
  static constexpr ::std::string_view definitionKey = {"\x14\xb7\x5c\x51\x21\x13\xf7\xd5\x08\x34\xe1\xd6\x30\x09\x78\x2d", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::python_capi::PrimitiveStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -5728893688937422040;
  static constexpr ::std::string_view definitionKey = {"\xf1\xb4\x0c\x18\x10\x6c\x21\x38\x94\xda\x0b\xd7\x56\x83\xe5\xd6", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::python_capi::AdaptedFields, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -5728893688937422040;
  static constexpr ::std::string_view definitionKey = {"\xa2\xc3\x70\xdd\xa5\x03\xd4\x6f\x30\xfc\xb9\xb7\x63\x47\xd1\xfa", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::python_capi::ListStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -5728893688937422040;
  static constexpr ::std::string_view definitionKey = {"\xe3\x55\xfd\x38\xb1\xe6\x7d\x71\x1d\x68\x2a\x55\xce\x35\xc1\x00", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::python_capi::SetStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -5728893688937422040;
  static constexpr ::std::string_view definitionKey = {"\x82\x29\xe7\x57\xa0\x7a\x79\x0b\x61\xa1\x3e\x91\xcd\xf2\x0e\x16", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::python_capi::MapStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -5728893688937422040;
  static constexpr ::std::string_view definitionKey = {"\xa1\x52\xeb\x32\xdc\xcb\x11\xf7\x1a\x33\x49\xce\x40\x84\x26\x34", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::python_capi::ComposeStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -5728893688937422040;
  static constexpr ::std::string_view definitionKey = {"\x64\x7c\x29\x67\x20\xee\x91\x2c\xf7\x99\xd9\x5f\xf3\x49\x1d\xd2", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::python_capi::Shallot, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -5728893688937422040;
  static constexpr ::std::string_view definitionKey = {"\xb9\x18\x3d\xc4\x97\x4b\x32\x24\x56\xc4\x35\xc7\xaf\x3f\x74\x24", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::python_capi::SomeBinary, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -5728893688937422040;
  static constexpr ::std::string_view definitionKey = {"\xf7\x52\x4d\xc9\xce\x31\x41\x1a\x15\x99\x47\xf5\xe2\x41\x6a\x4d", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::python_capi::MyEnum, true> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -5728893688937422040;
  static constexpr ::std::string_view definitionKey = {"\x0d\xd7\x0c\xe2\x75\x70\xb5\xf7\x93\xe5\x57\x5a\x57\x7f\x2c\x7b", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::python_capi::NormalDecentEnum, true> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -5728893688937422040;
  static constexpr ::std::string_view definitionKey = {"\x61\x63\xd5\xd4\x80\x02\x94\x12\xfa\x47\xf2\x73\x0f\x7b\x96\x9f", 16};
};
} // namespace apache::thrift::detail
