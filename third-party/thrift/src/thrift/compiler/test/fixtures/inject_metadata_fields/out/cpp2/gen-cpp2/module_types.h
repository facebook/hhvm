/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/inject_metadata_fields/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>
#include "thrift/compiler/test/fixtures/inject_metadata_fields/gen-cpp2/foo_types.h"

namespace apache::thrift {
namespace ident {
struct injected_field;
struct injected_field;
struct string_field;
struct injected_field;
struct string_field;
struct injected_field;
struct injected_structured_annotation_field;
struct injected_unstructured_annotation_field;
struct string_field;
struct injected_field;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_injected_field
#define APACHE_THRIFT_ACCESSOR_injected_field
APACHE_THRIFT_DEFINE_ACCESSOR(injected_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_injected_field
#define APACHE_THRIFT_ACCESSOR_injected_field
APACHE_THRIFT_DEFINE_ACCESSOR(injected_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_string_field
#define APACHE_THRIFT_ACCESSOR_string_field
APACHE_THRIFT_DEFINE_ACCESSOR(string_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_injected_field
#define APACHE_THRIFT_ACCESSOR_injected_field
APACHE_THRIFT_DEFINE_ACCESSOR(injected_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_string_field
#define APACHE_THRIFT_ACCESSOR_string_field
APACHE_THRIFT_DEFINE_ACCESSOR(string_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_injected_field
#define APACHE_THRIFT_ACCESSOR_injected_field
APACHE_THRIFT_DEFINE_ACCESSOR(injected_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_injected_structured_annotation_field
#define APACHE_THRIFT_ACCESSOR_injected_structured_annotation_field
APACHE_THRIFT_DEFINE_ACCESSOR(injected_structured_annotation_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_injected_unstructured_annotation_field
#define APACHE_THRIFT_ACCESSOR_injected_unstructured_annotation_field
APACHE_THRIFT_DEFINE_ACCESSOR(injected_unstructured_annotation_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_string_field
#define APACHE_THRIFT_ACCESSOR_string_field
APACHE_THRIFT_DEFINE_ACCESSOR(string_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_injected_field
#define APACHE_THRIFT_ACCESSOR_injected_field
APACHE_THRIFT_DEFINE_ACCESSOR(injected_field);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
// END declare_enums
// BEGIN forward_declare
namespace cpp2 {
class Fields;
class FieldsInjectedToEmptyStruct;
class FieldsInjectedToStruct;
class FieldsInjectedWithIncludedStruct;
class FieldsInjectedWithFieldsWithIncludedStruct;
} // namespace cpp2
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
template<>
struct is_cpp_ref_field_optional<::cpp2::FieldsInjectedWithIncludedStruct,::apache::thrift::type::field_id<-1101>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::cpp2::FieldsInjectedWithIncludedStruct,::apache::thrift::type::field_id<-1102>> : std::true_type{};
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;


/** Glean {"file": "thrift/compiler/test/fixtures/inject_metadata_fields/src/module.thrift", "name": "Fields", "kind": "struct" } */
class Fields final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,100};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::injected_field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Fields;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  Fields();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Fields(apache::thrift::FragileConstructor, ::std::string injected_field__arg);

  Fields(Fields&&) noexcept;

  Fields(const Fields& src);


  Fields& operator=(Fields&&) noexcept;
  Fields& operator=(const Fields& src);

  ~Fields();

 private:
  ::std::string __fbthrift_field_injected_field;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const Fields&) const;
  bool operator<(const Fields&) const;

  /** Glean { "field": "injected_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> injected_field_ref() const& {
    return {this->__fbthrift_field_injected_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "injected_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> injected_field_ref() & {
    return {this->__fbthrift_field_injected_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "injected_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> injected_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_injected_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "injected_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> injected_field() const& {
    return {this->__fbthrift_field_injected_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "injected_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> injected_field() & {
    return {this->__fbthrift_field_injected_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "injected_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> injected_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_injected_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "injected_field" } */
  [[deprecated("Use `FOO.injected_field().value()` instead of `FOO.get_injected_field()`")]]
  const ::std::string& get_injected_field() const& {
    return __fbthrift_field_injected_field;
  }

  /** Glean { "field": "injected_field" } */
  [[deprecated("Use `FOO.injected_field().value()` instead of `FOO.get_injected_field()`")]]
  ::std::string get_injected_field() && {
    return static_cast<::std::string&&>(__fbthrift_field_injected_field);
  }

  /** Glean { "field": "injected_field" } */
  template <typename T_Fields_injected_field_struct_setter = ::std::string>
  [[deprecated("Use `FOO.injected_field() = BAR` instead of `FOO.set_injected_field(BAR)`")]]
  ::std::string& set_injected_field(T_Fields_injected_field_struct_setter&& injected_field_) {
    injected_field_ref() = std::forward<T_Fields_injected_field_struct_setter>(injected_field_);
    return __fbthrift_field_injected_field;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Fields>;
  friend void swap(Fields& a, Fields& b);
};

template <class Protocol_>
unsigned long Fields::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/inject_metadata_fields/src/module.thrift", "name": "FieldsInjectedToEmptyStruct", "kind": "struct" } */
class FieldsInjectedToEmptyStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,-1100};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::injected_field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = FieldsInjectedToEmptyStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  FieldsInjectedToEmptyStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  FieldsInjectedToEmptyStruct(apache::thrift::FragileConstructor, ::std::string injected_field__arg);

  FieldsInjectedToEmptyStruct(FieldsInjectedToEmptyStruct&&) noexcept;

  FieldsInjectedToEmptyStruct(const FieldsInjectedToEmptyStruct& src);


  FieldsInjectedToEmptyStruct& operator=(FieldsInjectedToEmptyStruct&&) noexcept;
  FieldsInjectedToEmptyStruct& operator=(const FieldsInjectedToEmptyStruct& src);

  ~FieldsInjectedToEmptyStruct();

 private:
  ::std::string __fbthrift_field_injected_field;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const FieldsInjectedToEmptyStruct&) const;
  bool operator<(const FieldsInjectedToEmptyStruct&) const;

  /** Glean { "field": "injected_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> injected_field_ref() const& {
    return {this->__fbthrift_field_injected_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "injected_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> injected_field_ref() & {
    return {this->__fbthrift_field_injected_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "injected_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> injected_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_injected_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "injected_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> injected_field() const& {
    return {this->__fbthrift_field_injected_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "injected_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> injected_field() & {
    return {this->__fbthrift_field_injected_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "injected_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> injected_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_injected_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "injected_field" } */
  [[deprecated("Use `FOO.injected_field().value()` instead of `FOO.get_injected_field()`")]]
  const ::std::string& get_injected_field() const& {
    return __fbthrift_field_injected_field;
  }

  /** Glean { "field": "injected_field" } */
  [[deprecated("Use `FOO.injected_field().value()` instead of `FOO.get_injected_field()`")]]
  ::std::string get_injected_field() && {
    return static_cast<::std::string&&>(__fbthrift_field_injected_field);
  }

  /** Glean { "field": "injected_field" } */
  template <typename T_FieldsInjectedToEmptyStruct_injected_field_struct_setter = ::std::string>
  [[deprecated("Use `FOO.injected_field() = BAR` instead of `FOO.set_injected_field(BAR)`")]]
  ::std::string& set_injected_field(T_FieldsInjectedToEmptyStruct_injected_field_struct_setter&& injected_field_) {
    injected_field_ref() = std::forward<T_FieldsInjectedToEmptyStruct_injected_field_struct_setter>(injected_field_);
    return __fbthrift_field_injected_field;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<FieldsInjectedToEmptyStruct>;
  friend void swap(FieldsInjectedToEmptyStruct& a, FieldsInjectedToEmptyStruct& b);
};

template <class Protocol_>
unsigned long FieldsInjectedToEmptyStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/inject_metadata_fields/src/module.thrift", "name": "FieldsInjectedToStruct", "kind": "struct" } */
class FieldsInjectedToStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,-1100};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::string_field,
    ::apache::thrift::ident::injected_field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = FieldsInjectedToStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  FieldsInjectedToStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  FieldsInjectedToStruct(apache::thrift::FragileConstructor, ::std::string string_field__arg, ::std::string injected_field__arg);

  FieldsInjectedToStruct(FieldsInjectedToStruct&&) noexcept;

  FieldsInjectedToStruct(const FieldsInjectedToStruct& src);


  FieldsInjectedToStruct& operator=(FieldsInjectedToStruct&&) noexcept;
  FieldsInjectedToStruct& operator=(const FieldsInjectedToStruct& src);

  ~FieldsInjectedToStruct();

 private:
  ::std::string __fbthrift_field_string_field;
 private:
  ::std::string __fbthrift_field_injected_field;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const FieldsInjectedToStruct&) const;
  bool operator<(const FieldsInjectedToStruct&) const;

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> string_field_ref() const& {
    return {this->__fbthrift_field_string_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> string_field_ref() & {
    return {this->__fbthrift_field_string_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> string_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_string_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> string_field() const& {
    return {this->__fbthrift_field_string_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> string_field() & {
    return {this->__fbthrift_field_string_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> string_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_string_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "injected_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> injected_field_ref() const& {
    return {this->__fbthrift_field_injected_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "injected_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> injected_field_ref() & {
    return {this->__fbthrift_field_injected_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "injected_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> injected_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_injected_field), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "injected_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> injected_field() const& {
    return {this->__fbthrift_field_injected_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "injected_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> injected_field() & {
    return {this->__fbthrift_field_injected_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "injected_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> injected_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_injected_field), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "string_field" } */
  [[deprecated("Use `FOO.string_field().value()` instead of `FOO.get_string_field()`")]]
  const ::std::string& get_string_field() const& {
    return __fbthrift_field_string_field;
  }

  /** Glean { "field": "string_field" } */
  [[deprecated("Use `FOO.string_field().value()` instead of `FOO.get_string_field()`")]]
  ::std::string get_string_field() && {
    return static_cast<::std::string&&>(__fbthrift_field_string_field);
  }

  /** Glean { "field": "string_field" } */
  template <typename T_FieldsInjectedToStruct_string_field_struct_setter = ::std::string>
  [[deprecated("Use `FOO.string_field() = BAR` instead of `FOO.set_string_field(BAR)`")]]
  ::std::string& set_string_field(T_FieldsInjectedToStruct_string_field_struct_setter&& string_field_) {
    string_field_ref() = std::forward<T_FieldsInjectedToStruct_string_field_struct_setter>(string_field_);
    return __fbthrift_field_string_field;
  }

  /** Glean { "field": "injected_field" } */
  [[deprecated("Use `FOO.injected_field().value()` instead of `FOO.get_injected_field()`")]]
  const ::std::string& get_injected_field() const& {
    return __fbthrift_field_injected_field;
  }

  /** Glean { "field": "injected_field" } */
  [[deprecated("Use `FOO.injected_field().value()` instead of `FOO.get_injected_field()`")]]
  ::std::string get_injected_field() && {
    return static_cast<::std::string&&>(__fbthrift_field_injected_field);
  }

  /** Glean { "field": "injected_field" } */
  template <typename T_FieldsInjectedToStruct_injected_field_struct_setter = ::std::string>
  [[deprecated("Use `FOO.injected_field() = BAR` instead of `FOO.set_injected_field(BAR)`")]]
  ::std::string& set_injected_field(T_FieldsInjectedToStruct_injected_field_struct_setter&& injected_field_) {
    injected_field_ref() = std::forward<T_FieldsInjectedToStruct_injected_field_struct_setter>(injected_field_);
    return __fbthrift_field_injected_field;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<FieldsInjectedToStruct>;
  friend void swap(FieldsInjectedToStruct& a, FieldsInjectedToStruct& b);
};

template <class Protocol_>
unsigned long FieldsInjectedToStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/inject_metadata_fields/src/module.thrift", "name": "FieldsInjectedWithIncludedStruct", "kind": "struct" } */
class FieldsInjectedWithIncludedStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 4;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,-1100,-1101,-1102};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::string_field,
    ::apache::thrift::ident::injected_field,
    ::apache::thrift::ident::injected_structured_annotation_field,
    ::apache::thrift::ident::injected_unstructured_annotation_field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = FieldsInjectedWithIncludedStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  FieldsInjectedWithIncludedStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  FieldsInjectedWithIncludedStruct(apache::thrift::FragileConstructor, ::std::string string_field__arg, ::std::string injected_field__arg, ::apache::thrift::detail::boxed_value_ptr<::std::string> injected_structured_annotation_field__arg, ::apache::thrift::detail::boxed_value_ptr<::std::string> injected_unstructured_annotation_field__arg);

  FieldsInjectedWithIncludedStruct(FieldsInjectedWithIncludedStruct&&) noexcept;

  FieldsInjectedWithIncludedStruct(const FieldsInjectedWithIncludedStruct& src);


  FieldsInjectedWithIncludedStruct& operator=(FieldsInjectedWithIncludedStruct&&) noexcept;
  FieldsInjectedWithIncludedStruct& operator=(const FieldsInjectedWithIncludedStruct& src);

  ~FieldsInjectedWithIncludedStruct();

 private:
  ::std::string __fbthrift_field_string_field;
 private:
  ::std::string __fbthrift_field_injected_field;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::std::string> __fbthrift_field_injected_structured_annotation_field;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::std::string> __fbthrift_field_injected_unstructured_annotation_field;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const FieldsInjectedWithIncludedStruct&) const;
  bool operator<(const FieldsInjectedWithIncludedStruct&) const;

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> string_field_ref() const& {
    return {this->__fbthrift_field_string_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> string_field_ref() & {
    return {this->__fbthrift_field_string_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> string_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_string_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> string_field() const& {
    return {this->__fbthrift_field_string_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> string_field() & {
    return {this->__fbthrift_field_string_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> string_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_string_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "injected_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> injected_field_ref() const& {
    return {this->__fbthrift_field_injected_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "injected_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> injected_field_ref() & {
    return {this->__fbthrift_field_injected_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "injected_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> injected_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_injected_field), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "injected_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> injected_field() const& {
    return {this->__fbthrift_field_injected_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "injected_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> injected_field() & {
    return {this->__fbthrift_field_injected_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "injected_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> injected_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_injected_field), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "injected_structured_annotation_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> injected_structured_annotation_field_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_injected_structured_annotation_field};
  }

  /** Glean { "field": "injected_structured_annotation_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> injected_structured_annotation_field_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_injected_structured_annotation_field};
  }

  /** Glean { "field": "injected_structured_annotation_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> injected_structured_annotation_field_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_injected_structured_annotation_field)};
  }

  /** Glean { "field": "injected_structured_annotation_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> injected_structured_annotation_field() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_injected_structured_annotation_field};
  }

  /** Glean { "field": "injected_structured_annotation_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> injected_structured_annotation_field() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_injected_structured_annotation_field};
  }

  /** Glean { "field": "injected_structured_annotation_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> injected_structured_annotation_field() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_injected_structured_annotation_field)};
  }

  /** Glean { "field": "injected_unstructured_annotation_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> injected_unstructured_annotation_field_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_injected_unstructured_annotation_field};
  }

  /** Glean { "field": "injected_unstructured_annotation_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> injected_unstructured_annotation_field_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_injected_unstructured_annotation_field};
  }

  /** Glean { "field": "injected_unstructured_annotation_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> injected_unstructured_annotation_field_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_injected_unstructured_annotation_field)};
  }

  /** Glean { "field": "injected_unstructured_annotation_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> injected_unstructured_annotation_field() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_injected_unstructured_annotation_field};
  }

  /** Glean { "field": "injected_unstructured_annotation_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> injected_unstructured_annotation_field() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_injected_unstructured_annotation_field};
  }

  /** Glean { "field": "injected_unstructured_annotation_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> injected_unstructured_annotation_field() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_injected_unstructured_annotation_field)};
  }

  /** Glean { "field": "string_field" } */
  [[deprecated("Use `FOO.string_field().value()` instead of `FOO.get_string_field()`")]]
  const ::std::string& get_string_field() const& {
    return __fbthrift_field_string_field;
  }

  /** Glean { "field": "string_field" } */
  [[deprecated("Use `FOO.string_field().value()` instead of `FOO.get_string_field()`")]]
  ::std::string get_string_field() && {
    return static_cast<::std::string&&>(__fbthrift_field_string_field);
  }

  /** Glean { "field": "string_field" } */
  template <typename T_FieldsInjectedWithIncludedStruct_string_field_struct_setter = ::std::string>
  [[deprecated("Use `FOO.string_field() = BAR` instead of `FOO.set_string_field(BAR)`")]]
  ::std::string& set_string_field(T_FieldsInjectedWithIncludedStruct_string_field_struct_setter&& string_field_) {
    string_field_ref() = std::forward<T_FieldsInjectedWithIncludedStruct_string_field_struct_setter>(string_field_);
    return __fbthrift_field_string_field;
  }

  /** Glean { "field": "injected_field" } */
  [[deprecated("Use `FOO.injected_field().value()` instead of `FOO.get_injected_field()`")]]
  const ::std::string& get_injected_field() const& {
    return __fbthrift_field_injected_field;
  }

  /** Glean { "field": "injected_field" } */
  [[deprecated("Use `FOO.injected_field().value()` instead of `FOO.get_injected_field()`")]]
  ::std::string get_injected_field() && {
    return static_cast<::std::string&&>(__fbthrift_field_injected_field);
  }

  /** Glean { "field": "injected_field" } */
  template <typename T_FieldsInjectedWithIncludedStruct_injected_field_struct_setter = ::std::string>
  [[deprecated("Use `FOO.injected_field() = BAR` instead of `FOO.set_injected_field(BAR)`")]]
  ::std::string& set_injected_field(T_FieldsInjectedWithIncludedStruct_injected_field_struct_setter&& injected_field_) {
    injected_field_ref() = std::forward<T_FieldsInjectedWithIncludedStruct_injected_field_struct_setter>(injected_field_);
    return __fbthrift_field_injected_field;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<FieldsInjectedWithIncludedStruct>;
  friend void swap(FieldsInjectedWithIncludedStruct& a, FieldsInjectedWithIncludedStruct& b);
};

template <class Protocol_>
unsigned long FieldsInjectedWithIncludedStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/inject_metadata_fields/src/module.thrift", "name": "FieldsInjectedWithFieldsWithIncludedStruct", "kind": "struct" } */
class FieldsInjectedWithFieldsWithIncludedStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,-1001};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::string_field,
    ::apache::thrift::ident::injected_field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::struct_t<::cpp2::InjectedField>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = FieldsInjectedWithFieldsWithIncludedStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  FieldsInjectedWithFieldsWithIncludedStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  FieldsInjectedWithFieldsWithIncludedStruct(apache::thrift::FragileConstructor, ::std::string string_field__arg, ::cpp2::InjectedField injected_field__arg);

  FieldsInjectedWithFieldsWithIncludedStruct(FieldsInjectedWithFieldsWithIncludedStruct&&) noexcept;

  FieldsInjectedWithFieldsWithIncludedStruct(const FieldsInjectedWithFieldsWithIncludedStruct& src);


  FieldsInjectedWithFieldsWithIncludedStruct& operator=(FieldsInjectedWithFieldsWithIncludedStruct&&) noexcept;
  FieldsInjectedWithFieldsWithIncludedStruct& operator=(const FieldsInjectedWithFieldsWithIncludedStruct& src);

  ~FieldsInjectedWithFieldsWithIncludedStruct();

 private:
  ::std::string __fbthrift_field_string_field;
 private:
  ::cpp2::InjectedField __fbthrift_field_injected_field;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const FieldsInjectedWithFieldsWithIncludedStruct&) const;
  bool operator<(const FieldsInjectedWithFieldsWithIncludedStruct&) const;

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> string_field_ref() const& {
    return {this->__fbthrift_field_string_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> string_field_ref() & {
    return {this->__fbthrift_field_string_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> string_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_string_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> string_field() const& {
    return {this->__fbthrift_field_string_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> string_field() & {
    return {this->__fbthrift_field_string_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> string_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_string_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "injected_field" } */
  template <typename..., typename fbthrift_T = ::cpp2::InjectedField>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> injected_field_ref() const& {
    return {this->__fbthrift_field_injected_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "injected_field" } */
  template <typename..., typename fbthrift_T = ::cpp2::InjectedField>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> injected_field_ref() & {
    return {this->__fbthrift_field_injected_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "injected_field" } */
  template <typename..., typename fbthrift_T = ::cpp2::InjectedField>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> injected_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_injected_field), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "injected_field" } */
  template <typename..., typename fbthrift_T = ::cpp2::InjectedField>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> injected_field() const& {
    return {this->__fbthrift_field_injected_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "injected_field" } */
  template <typename..., typename fbthrift_T = ::cpp2::InjectedField>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> injected_field() & {
    return {this->__fbthrift_field_injected_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "injected_field" } */
  template <typename..., typename fbthrift_T = ::cpp2::InjectedField>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> injected_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_injected_field), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "string_field" } */
  [[deprecated("Use `FOO.string_field().value()` instead of `FOO.get_string_field()`")]]
  const ::std::string& get_string_field() const& {
    return __fbthrift_field_string_field;
  }

  /** Glean { "field": "string_field" } */
  [[deprecated("Use `FOO.string_field().value()` instead of `FOO.get_string_field()`")]]
  ::std::string get_string_field() && {
    return static_cast<::std::string&&>(__fbthrift_field_string_field);
  }

  /** Glean { "field": "string_field" } */
  template <typename T_FieldsInjectedWithFieldsWithIncludedStruct_string_field_struct_setter = ::std::string>
  [[deprecated("Use `FOO.string_field() = BAR` instead of `FOO.set_string_field(BAR)`")]]
  ::std::string& set_string_field(T_FieldsInjectedWithFieldsWithIncludedStruct_string_field_struct_setter&& string_field_) {
    string_field_ref() = std::forward<T_FieldsInjectedWithFieldsWithIncludedStruct_string_field_struct_setter>(string_field_);
    return __fbthrift_field_string_field;
  }

  /** Glean { "field": "injected_field" } */
  [[deprecated("Use `FOO.injected_field().value()` instead of `FOO.get_injected_field()`")]]
  const ::cpp2::InjectedField& get_injected_field() const&;

  /** Glean { "field": "injected_field" } */
  [[deprecated("Use `FOO.injected_field().value()` instead of `FOO.get_injected_field()`")]]
  ::cpp2::InjectedField get_injected_field() &&;

  /** Glean { "field": "injected_field" } */
  template <typename T_FieldsInjectedWithFieldsWithIncludedStruct_injected_field_struct_setter = ::cpp2::InjectedField>
  [[deprecated("Use `FOO.injected_field() = BAR` instead of `FOO.set_injected_field(BAR)`")]]
  ::cpp2::InjectedField& set_injected_field(T_FieldsInjectedWithFieldsWithIncludedStruct_injected_field_struct_setter&& injected_field_) {
    injected_field_ref() = std::forward<T_FieldsInjectedWithFieldsWithIncludedStruct_injected_field_struct_setter>(injected_field_);
    return __fbthrift_field_injected_field;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<FieldsInjectedWithFieldsWithIncludedStruct>;
  friend void swap(FieldsInjectedWithFieldsWithIncludedStruct& a, FieldsInjectedWithFieldsWithIncludedStruct& b);
};

template <class Protocol_>
unsigned long FieldsInjectedWithFieldsWithIncludedStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace cpp2

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::cpp2::Fields, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -3025931788156609158;
  static constexpr ::std::string_view definitionKey = {"\x86\xd9\x6e\x8e\x55\xcf\x44\x41\x30\x2b\x7a\x30\x74\x03\x16\xca", 16};
};
template <> struct TSchemaAssociation<::cpp2::FieldsInjectedToEmptyStruct, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -3025931788156609158;
  static constexpr ::std::string_view definitionKey = {"\x4f\xcd\x69\xfd\x67\xd3\xf0\x59\x2b\xc4\x43\x13\x1e\x7f\xec\xdf", 16};
};
template <> struct TSchemaAssociation<::cpp2::FieldsInjectedToStruct, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -3025931788156609158;
  static constexpr ::std::string_view definitionKey = {"\xa4\x8b\x01\xb0\x0d\x99\xc8\x41\x1a\xfd\x0e\x15\xd9\x44\xef\x41", 16};
};
template <> struct TSchemaAssociation<::cpp2::FieldsInjectedWithIncludedStruct, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -3025931788156609158;
  static constexpr ::std::string_view definitionKey = {"\x10\x23\x9f\xc4\xbe\x17\xdf\x16\xc3\xa8\xf0\x8c\xd4\x51\xec\x87", 16};
};
template <> struct TSchemaAssociation<::cpp2::FieldsInjectedWithFieldsWithIncludedStruct, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -3025931788156609158;
  static constexpr ::std::string_view definitionKey = {"\x55\xa7\x46\x7b\x3f\xba\x0b\xbc\xd5\xd4\xb4\x3e\x47\x5e\x7e\x2c", 16};
};
} // namespace apache::thrift::detail
