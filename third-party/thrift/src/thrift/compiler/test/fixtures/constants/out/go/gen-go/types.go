// Autogenerated by Thrift for thrift/compiler/test/fixtures/constants/src/module.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package module

import (
    "fmt"
    "reflect"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
)

// (needed to ensure safety because of naive import list construction)
var _ = fmt.Printf
var _ = reflect.Ptr
var _ = thrift.VOID


type MyCompany = Company

const (
    MyCompany_FACEBOOK MyCompany = Company_FACEBOOK
    MyCompany_WHATSAPP MyCompany = Company_WHATSAPP
    MyCompany_OCULUS MyCompany = Company_OCULUS
    MyCompany_INSTAGRAM MyCompany = Company_INSTAGRAM
    MyCompany___FRIEND__FEED MyCompany = Company___FRIEND__FEED
)

// Enum value maps for Company
var (
    MyCompanyToName  = CompanyToName
    MyCompanyToValue = CompanyToValue
)

// Deprecated: Use MyCompanyToValue instead (e.g. `x, ok := MyCompanyToValue["name"]`).
func MyCompanyFromString(s string) (MyCompany, error) {
    return CompanyFromString(s)
}

func NewMyCompany() MyCompany {
    return 0
}

func WriteMyCompany(item MyCompany, p thrift.Encoder) error {
    if err := p.WriteI32(int32(item)); err != nil {
        return err
    }
    return nil
}

func ReadMyCompany(p thrift.Decoder) (MyCompany, error) {
    var decodeResult MyCompany
    decodeErr := func() error {
        enumResult, err := p.ReadI32()
        if err != nil {
            return err
        }
        result := Company(enumResult)
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}


type MyStringIdentifier = string

func NewMyStringIdentifier() MyStringIdentifier {
    return ""
}

func WriteMyStringIdentifier(item MyStringIdentifier, p thrift.Encoder) error {
    if err := p.WriteString(item); err != nil {
        return err
    }
    return nil
}

func ReadMyStringIdentifier(p thrift.Decoder) (MyStringIdentifier, error) {
    var decodeResult MyStringIdentifier
    decodeErr := func() error {
        result, err := p.ReadString()
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}


type MyIntIdentifier = int32

func NewMyIntIdentifier() MyIntIdentifier {
    return 0
}

func WriteMyIntIdentifier(item MyIntIdentifier, p thrift.Encoder) error {
    if err := p.WriteI32(item); err != nil {
        return err
    }
    return nil
}

func ReadMyIntIdentifier(p thrift.Decoder) (MyIntIdentifier, error) {
    var decodeResult MyIntIdentifier
    decodeErr := func() error {
        result, err := p.ReadI32()
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}


type MyMapIdentifier = map[string]string

func NewMyMapIdentifier() MyMapIdentifier {
    return make(map[string]string)
}

func WriteMyMapIdentifier(item MyMapIdentifier, p thrift.Encoder) error {
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRING, len(item)); err != nil {
        return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range item {
        {
            item := k
            if err := p.WriteString(item); err != nil {
                return err
            }
        }
    
        {
            item := v
            if err := p.WriteString(item); err != nil {
                return err
            }
        }
    }
    if err := p.WriteMapEnd(); err != nil {
        return thrift.PrependError("error writing map end: ", err)
    }
    return nil
}

func ReadMyMapIdentifier(p thrift.Decoder) (MyMapIdentifier, error) {
    var decodeResult MyMapIdentifier
    decodeErr := func() error {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
        if err != nil {
            return thrift.PrependError("error reading map begin: ", err)
        }
        
        mapResult := make(map[string]string, size)
        for i := 0; i < size; i++ {
            var key string
            {
                result, err := p.ReadString()
                if err != nil {
                    return err
                }
                key = result
            }
        
            var value string
            {
                result, err := p.ReadString()
                if err != nil {
                    return err
                }
                value = result
            }
        
            mapResult[key] = value
        }
        
        if err := p.ReadMapEnd(); err != nil {
            return thrift.PrependError("error reading map end: ", err)
        }
        result := mapResult
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}


type EmptyEnum int32

const (
)

// Enum value maps for EmptyEnum
var (
    EmptyEnumToName = map[EmptyEnum]string {
    }

    EmptyEnumToValue = map[string]EmptyEnum {
    }
)

func (x EmptyEnum) String() string {
    if v, ok := EmptyEnumToName[x]; ok {
        return v
    }
    return "<UNSET>"
}

// Deprecated: Use EmptyEnumToValue instead (e.g. `x, ok := EmptyEnumToValue["name"]`).
func EmptyEnumFromString(s string) (EmptyEnum, error) {
    if v, ok := EmptyEnumToValue[s]; ok {
        return v, nil
    }
    return EmptyEnum(0), fmt.Errorf("not a valid EmptyEnum string")
}


type City int32

const (
    City_NYC City = 0
    City_MPK City = 1
    City_SEA City = 2
    City_LON City = 3
)

// Enum value maps for City
var (
    CityToName = map[City]string {
        City_NYC: "NYC",
        City_MPK: "MPK",
        City_SEA: "SEA",
        City_LON: "LON",
    }

    CityToValue = map[string]City {
        "NYC": City_NYC,
        "MPK": City_MPK,
        "SEA": City_SEA,
        "LON": City_LON,
    }
)

func (x City) String() string {
    if v, ok := CityToName[x]; ok {
        return v
    }
    return "<UNSET>"
}

// Deprecated: Use CityToValue instead (e.g. `x, ok := CityToValue["name"]`).
func CityFromString(s string) (City, error) {
    if v, ok := CityToValue[s]; ok {
        return v, nil
    }
    return City(0), fmt.Errorf("not a valid City string")
}


type Company int32

const (
    Company_FACEBOOK Company = 0
    Company_WHATSAPP Company = 1
    Company_OCULUS Company = 2
    Company_INSTAGRAM Company = 3
    Company___FRIEND__FEED Company = 4
)

// Enum value maps for Company
var (
    CompanyToName = map[Company]string {
        Company_FACEBOOK: "FACEBOOK",
        Company_WHATSAPP: "WHATSAPP",
        Company_OCULUS: "OCULUS",
        Company_INSTAGRAM: "INSTAGRAM",
        Company___FRIEND__FEED: "__FRIEND__FEED",
    }

    CompanyToValue = map[string]Company {
        "FACEBOOK": Company_FACEBOOK,
        "WHATSAPP": Company_WHATSAPP,
        "OCULUS": Company_OCULUS,
        "INSTAGRAM": Company_INSTAGRAM,
        "__FRIEND__FEED": Company___FRIEND__FEED,
    }
)

func (x Company) String() string {
    if v, ok := CompanyToName[x]; ok {
        return v
    }
    return "<UNSET>"
}

// Deprecated: Use CompanyToValue instead (e.g. `x, ok := CompanyToValue["name"]`).
func CompanyFromString(s string) (Company, error) {
    if v, ok := CompanyToValue[s]; ok {
        return v, nil
    }
    return Company(0), fmt.Errorf("not a valid Company string")
}

type Internship struct {
    Weeks int32 `thrift:"weeks,1,required" json:"weeks" db:"weeks"`
    Title string `thrift:"title,2" json:"title" db:"title"`
    Employer *Company `thrift:"employer,3,optional" json:"employer,omitempty" db:"employer"`
    Compensation *float64 `thrift:"compensation,4,optional" json:"compensation,omitempty" db:"compensation"`
    School *string `thrift:"school,5,optional" json:"school,omitempty" db:"school"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*Internship)(nil)

func NewInternship() *Internship {
    return (&Internship{}).setDefaults()
}

func (x *Internship) GetWeeks() int32 {
    return x.Weeks
}

func (x *Internship) GetTitle() string {
    return x.Title
}

func (x *Internship) GetEmployer() Company {
    if !x.IsSetEmployer() {
        return 0
    }
    return *x.Employer
}

func (x *Internship) GetCompensation() float64 {
    if !x.IsSetCompensation() {
        return 0.0
    }
    return *x.Compensation
}

func (x *Internship) GetSchool() string {
    if !x.IsSetSchool() {
        return ""
    }
    return *x.School
}

func (x *Internship) SetWeeksNonCompat(value int32) *Internship {
    x.Weeks = value
    return x
}

func (x *Internship) SetWeeks(value int32) *Internship {
    x.Weeks = value
    return x
}

func (x *Internship) SetTitleNonCompat(value string) *Internship {
    x.Title = value
    return x
}

func (x *Internship) SetTitle(value string) *Internship {
    x.Title = value
    return x
}

func (x *Internship) SetEmployerNonCompat(value Company) *Internship {
    x.Employer = &value
    return x
}

func (x *Internship) SetEmployer(value *Company) *Internship {
    x.Employer = value
    return x
}

func (x *Internship) SetCompensationNonCompat(value float64) *Internship {
    x.Compensation = &value
    return x
}

func (x *Internship) SetCompensation(value *float64) *Internship {
    x.Compensation = value
    return x
}

func (x *Internship) SetSchoolNonCompat(value string) *Internship {
    x.School = &value
    return x
}

func (x *Internship) SetSchool(value *string) *Internship {
    x.School = value
    return x
}

func (x *Internship) IsSetEmployer() bool {
    return x != nil && x.Employer != nil
}

func (x *Internship) IsSetCompensation() bool {
    return x != nil && x.Compensation != nil
}

func (x *Internship) IsSetSchool() bool {
    return x != nil && x.School != nil
}

func (x *Internship) writeField1(p thrift.Encoder) error {  // Weeks
    if err := p.WriteFieldBegin("weeks", thrift.I32, 1); err != nil {
        return thrift.PrependError("Internship write field begin error: ", err)
    }

    item := x.Weeks
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Internship write field end error: ", err)
    }
    return nil
}

func (x *Internship) writeField2(p thrift.Encoder) error {  // Title
    if err := p.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
        return thrift.PrependError("Internship write field begin error: ", err)
    }

    item := x.Title
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Internship write field end error: ", err)
    }
    return nil
}

func (x *Internship) writeField3(p thrift.Encoder) error {  // Employer
    if !x.IsSetEmployer() {
        return nil
    }

    if err := p.WriteFieldBegin("employer", thrift.I32, 3); err != nil {
        return thrift.PrependError("Internship write field begin error: ", err)
    }

    item := *x.Employer
    if err := p.WriteI32(int32(item)); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Internship write field end error: ", err)
    }
    return nil
}

func (x *Internship) writeField4(p thrift.Encoder) error {  // Compensation
    if !x.IsSetCompensation() {
        return nil
    }

    if err := p.WriteFieldBegin("compensation", thrift.DOUBLE, 4); err != nil {
        return thrift.PrependError("Internship write field begin error: ", err)
    }

    item := *x.Compensation
    if err := p.WriteDouble(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Internship write field end error: ", err)
    }
    return nil
}

func (x *Internship) writeField5(p thrift.Encoder) error {  // School
    if !x.IsSetSchool() {
        return nil
    }

    if err := p.WriteFieldBegin("school", thrift.STRING, 5); err != nil {
        return thrift.PrependError("Internship write field begin error: ", err)
    }

    item := *x.School
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Internship write field end error: ", err)
    }
    return nil
}

func (x *Internship) readField1(p thrift.Decoder) error {  // Weeks
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.Weeks = result
    return nil
}

func (x *Internship) readField2(p thrift.Decoder) error {  // Title
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.Title = result
    return nil
}

func (x *Internship) readField3(p thrift.Decoder) error {  // Employer
    enumResult, err := p.ReadI32()
    if err != nil {
        return err
    }
    result := Company(enumResult)

    x.Employer = &result
    return nil
}

func (x *Internship) readField4(p thrift.Decoder) error {  // Compensation
    result, err := p.ReadDouble()
    if err != nil {
        return err
    }

    x.Compensation = &result
    return nil
}

func (x *Internship) readField5(p thrift.Decoder) error {  // School
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.School = &result
    return nil
}






func (x *Internship) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("Internship"); err != nil {
        return thrift.PrependError("Internship write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }
    if err := x.writeField3(p); err != nil {
        return err
    }
    if err := x.writeField4(p); err != nil {
        return err
    }
    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("Internship write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("Internship write struct end error: ", err)
    }
    return nil
}

func (x *Internship) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("Internship read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("Internship field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "weeks")):  // weeks
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "title")):  // title
            fieldReadErr = x.readField2(p)
        case ((id == 3 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "employer")):  // employer
            fieldReadErr = x.readField3(p)
        case ((id == 4 && wireType == thrift.DOUBLE) || (id == thrift.NO_FIELD_ID && fieldName == "compensation")):  // compensation
            fieldReadErr = x.readField4(p)
        case ((id == 5 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "school")):  // school
            fieldReadErr = x.readField5(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("Internship read struct end error: ", err)
    }

    return nil
}

func (x *Internship) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *Internship) setDefaults() *Internship {
    return x.
        SetWeeksNonCompat(0).
        SetTitleNonCompat("")
}

type Range struct {
    Min int32 `thrift:"min,1,required" json:"min" db:"min"`
    Max int32 `thrift:"max,2,required" json:"max" db:"max"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*Range)(nil)

func NewRange() *Range {
    return (&Range{}).setDefaults()
}

func (x *Range) GetMin() int32 {
    return x.Min
}

func (x *Range) GetMax() int32 {
    return x.Max
}

func (x *Range) SetMinNonCompat(value int32) *Range {
    x.Min = value
    return x
}

func (x *Range) SetMin(value int32) *Range {
    x.Min = value
    return x
}

func (x *Range) SetMaxNonCompat(value int32) *Range {
    x.Max = value
    return x
}

func (x *Range) SetMax(value int32) *Range {
    x.Max = value
    return x
}

func (x *Range) writeField1(p thrift.Encoder) error {  // Min
    if err := p.WriteFieldBegin("min", thrift.I32, 1); err != nil {
        return thrift.PrependError("Range write field begin error: ", err)
    }

    item := x.Min
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Range write field end error: ", err)
    }
    return nil
}

func (x *Range) writeField2(p thrift.Encoder) error {  // Max
    if err := p.WriteFieldBegin("max", thrift.I32, 2); err != nil {
        return thrift.PrependError("Range write field begin error: ", err)
    }

    item := x.Max
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Range write field end error: ", err)
    }
    return nil
}

func (x *Range) readField1(p thrift.Decoder) error {  // Min
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.Min = result
    return nil
}

func (x *Range) readField2(p thrift.Decoder) error {  // Max
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.Max = result
    return nil
}



func (x *Range) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("Range"); err != nil {
        return thrift.PrependError("Range write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("Range write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("Range write struct end error: ", err)
    }
    return nil
}

func (x *Range) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("Range read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("Range field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "min")):  // min
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "max")):  // max
            fieldReadErr = x.readField2(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("Range read struct end error: ", err)
    }

    return nil
}

func (x *Range) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *Range) setDefaults() *Range {
    return x.
        SetMinNonCompat(0).
        SetMaxNonCompat(0)
}

type Struct1 struct {
    A int32 `thrift:"a,1" json:"a" db:"a"`
    B string `thrift:"b,2" json:"b" db:"b"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*Struct1)(nil)

func NewStruct1() *Struct1 {
    return (&Struct1{}).setDefaults()
}

func (x *Struct1) GetA() int32 {
    return x.A
}

func (x *Struct1) GetB() string {
    return x.B
}

func (x *Struct1) SetANonCompat(value int32) *Struct1 {
    x.A = value
    return x
}

func (x *Struct1) SetA(value int32) *Struct1 {
    x.A = value
    return x
}

func (x *Struct1) SetBNonCompat(value string) *Struct1 {
    x.B = value
    return x
}

func (x *Struct1) SetB(value string) *Struct1 {
    x.B = value
    return x
}

func (x *Struct1) writeField1(p thrift.Encoder) error {  // A
    if err := p.WriteFieldBegin("a", thrift.I32, 1); err != nil {
        return thrift.PrependError("Struct1 write field begin error: ", err)
    }

    item := x.A
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Struct1 write field end error: ", err)
    }
    return nil
}

func (x *Struct1) writeField2(p thrift.Encoder) error {  // B
    if err := p.WriteFieldBegin("b", thrift.STRING, 2); err != nil {
        return thrift.PrependError("Struct1 write field begin error: ", err)
    }

    item := x.B
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Struct1 write field end error: ", err)
    }
    return nil
}

func (x *Struct1) readField1(p thrift.Decoder) error {  // A
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.A = result
    return nil
}

func (x *Struct1) readField2(p thrift.Decoder) error {  // B
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.B = result
    return nil
}



func (x *Struct1) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("struct1"); err != nil {
        return thrift.PrependError("Struct1 write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("Struct1 write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("Struct1 write struct end error: ", err)
    }
    return nil
}

func (x *Struct1) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("Struct1 read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("Struct1 field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "a")):  // a
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "b")):  // b
            fieldReadErr = x.readField2(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("Struct1 read struct end error: ", err)
    }

    return nil
}

func (x *Struct1) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *Struct1) setDefaults() *Struct1 {
    return x.
        SetANonCompat(int32(1234567)).
        SetBNonCompat("<uninitialized>")
}

type Struct2 struct {
    A int32 `thrift:"a,1" json:"a" db:"a"`
    B string `thrift:"b,2" json:"b" db:"b"`
    C *Struct1 `thrift:"c,3" json:"c" db:"c"`
    D []int32 `thrift:"d,4" json:"d" db:"d"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*Struct2)(nil)

func NewStruct2() *Struct2 {
    return (&Struct2{}).setDefaults()
}

func (x *Struct2) GetA() int32 {
    return x.A
}

func (x *Struct2) GetB() string {
    return x.B
}

func (x *Struct2) GetC() *Struct1 {
    if !x.IsSetC() {
        return nil
    }
    return x.C
}

func (x *Struct2) GetD() []int32 {
    if !x.IsSetD() {
        return make([]int32, 0)
    }
    return x.D
}

func (x *Struct2) SetANonCompat(value int32) *Struct2 {
    x.A = value
    return x
}

func (x *Struct2) SetA(value int32) *Struct2 {
    x.A = value
    return x
}

func (x *Struct2) SetBNonCompat(value string) *Struct2 {
    x.B = value
    return x
}

func (x *Struct2) SetB(value string) *Struct2 {
    x.B = value
    return x
}

func (x *Struct2) SetCNonCompat(value *Struct1) *Struct2 {
    x.C = value
    return x
}

func (x *Struct2) SetC(value *Struct1) *Struct2 {
    x.C = value
    return x
}

func (x *Struct2) SetDNonCompat(value []int32) *Struct2 {
    x.D = value
    return x
}

func (x *Struct2) SetD(value []int32) *Struct2 {
    x.D = value
    return x
}

func (x *Struct2) IsSetC() bool {
    return x != nil && x.C != nil
}

func (x *Struct2) IsSetD() bool {
    return x != nil && x.D != nil
}

func (x *Struct2) writeField1(p thrift.Encoder) error {  // A
    if err := p.WriteFieldBegin("a", thrift.I32, 1); err != nil {
        return thrift.PrependError("Struct2 write field begin error: ", err)
    }

    item := x.A
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Struct2 write field end error: ", err)
    }
    return nil
}

func (x *Struct2) writeField2(p thrift.Encoder) error {  // B
    if err := p.WriteFieldBegin("b", thrift.STRING, 2); err != nil {
        return thrift.PrependError("Struct2 write field begin error: ", err)
    }

    item := x.B
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Struct2 write field end error: ", err)
    }
    return nil
}

func (x *Struct2) writeField3(p thrift.Encoder) error {  // C
    if !x.IsSetC() {
        return nil
    }

    if err := p.WriteFieldBegin("c", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError("Struct2 write field begin error: ", err)
    }

    item := x.C
    if err := item.Write(p); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Struct2 write field end error: ", err)
    }
    return nil
}

func (x *Struct2) writeField4(p thrift.Encoder) error {  // D
    if err := p.WriteFieldBegin("d", thrift.LIST, 4); err != nil {
        return thrift.PrependError("Struct2 write field begin error: ", err)
    }

    item := x.D
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
        return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range item {
        {
            item := v
            if err := p.WriteI32(item); err != nil {
                return err
            }
        }
    }
    if err := p.WriteListEnd(); err != nil {
        return thrift.PrependError("error writing list end: ", err)
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Struct2 write field end error: ", err)
    }
    return nil
}

func (x *Struct2) readField1(p thrift.Decoder) error {  // A
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.A = result
    return nil
}

func (x *Struct2) readField2(p thrift.Decoder) error {  // B
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.B = result
    return nil
}

func (x *Struct2) readField3(p thrift.Decoder) error {  // C
    result := NewStruct1()
    err := result.Read(p)
    if err != nil {
        return err
    }

    x.C = result
    return nil
}

func (x *Struct2) readField4(p thrift.Decoder) error {  // D
    _ /* elemType */, size, err := p.ReadListBegin()
    if err != nil {
        return thrift.PrependError("error reading list begin: ", err)
    }
    
    listResult := make([]int32, 0, size)
    for i := 0; i < size; i++ {
        var elem int32
        {
            result, err := p.ReadI32()
            if err != nil {
                return err
            }
            elem = result
        }
        listResult = append(listResult, elem)
    }
    
    if err := p.ReadListEnd(); err != nil {
        return thrift.PrependError("error reading list end: ", err)
    }
    result := listResult

    x.D = result
    return nil
}




func (x *Struct2) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("struct2"); err != nil {
        return thrift.PrependError("Struct2 write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }
    if err := x.writeField3(p); err != nil {
        return err
    }
    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("Struct2 write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("Struct2 write struct end error: ", err)
    }
    return nil
}

func (x *Struct2) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("Struct2 read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("Struct2 field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "a")):  // a
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "b")):  // b
            fieldReadErr = x.readField2(p)
        case ((id == 3 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "c")):  // c
            fieldReadErr = x.readField3(p)
        case ((id == 4 && wireType == thrift.LIST) || (id == thrift.NO_FIELD_ID && fieldName == "d")):  // d
            fieldReadErr = x.readField4(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("Struct2 read struct end error: ", err)
    }

    return nil
}

func (x *Struct2) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *Struct2) setDefaults() *Struct2 {
    return x.
        SetANonCompat(0).
        SetBNonCompat("").
        SetCNonCompat(NewStruct1()).
        SetDNonCompat(make([]int32, 0))
}

type Struct3 struct {
    A string `thrift:"a,1" json:"a" db:"a"`
    B int32 `thrift:"b,2" json:"b" db:"b"`
    C *Struct2 `thrift:"c,3" json:"c" db:"c"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*Struct3)(nil)

func NewStruct3() *Struct3 {
    return (&Struct3{}).setDefaults()
}

func (x *Struct3) GetA() string {
    return x.A
}

func (x *Struct3) GetB() int32 {
    return x.B
}

func (x *Struct3) GetC() *Struct2 {
    if !x.IsSetC() {
        return nil
    }
    return x.C
}

func (x *Struct3) SetANonCompat(value string) *Struct3 {
    x.A = value
    return x
}

func (x *Struct3) SetA(value string) *Struct3 {
    x.A = value
    return x
}

func (x *Struct3) SetBNonCompat(value int32) *Struct3 {
    x.B = value
    return x
}

func (x *Struct3) SetB(value int32) *Struct3 {
    x.B = value
    return x
}

func (x *Struct3) SetCNonCompat(value *Struct2) *Struct3 {
    x.C = value
    return x
}

func (x *Struct3) SetC(value *Struct2) *Struct3 {
    x.C = value
    return x
}

func (x *Struct3) IsSetC() bool {
    return x != nil && x.C != nil
}

func (x *Struct3) writeField1(p thrift.Encoder) error {  // A
    if err := p.WriteFieldBegin("a", thrift.STRING, 1); err != nil {
        return thrift.PrependError("Struct3 write field begin error: ", err)
    }

    item := x.A
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Struct3 write field end error: ", err)
    }
    return nil
}

func (x *Struct3) writeField2(p thrift.Encoder) error {  // B
    if err := p.WriteFieldBegin("b", thrift.I32, 2); err != nil {
        return thrift.PrependError("Struct3 write field begin error: ", err)
    }

    item := x.B
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Struct3 write field end error: ", err)
    }
    return nil
}

func (x *Struct3) writeField3(p thrift.Encoder) error {  // C
    if !x.IsSetC() {
        return nil
    }

    if err := p.WriteFieldBegin("c", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError("Struct3 write field begin error: ", err)
    }

    item := x.C
    if err := item.Write(p); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Struct3 write field end error: ", err)
    }
    return nil
}

func (x *Struct3) readField1(p thrift.Decoder) error {  // A
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.A = result
    return nil
}

func (x *Struct3) readField2(p thrift.Decoder) error {  // B
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.B = result
    return nil
}

func (x *Struct3) readField3(p thrift.Decoder) error {  // C
    result := NewStruct2()
    err := result.Read(p)
    if err != nil {
        return err
    }

    x.C = result
    return nil
}




func (x *Struct3) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("struct3"); err != nil {
        return thrift.PrependError("Struct3 write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }
    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("Struct3 write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("Struct3 write struct end error: ", err)
    }
    return nil
}

func (x *Struct3) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("Struct3 read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("Struct3 field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "a")):  // a
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "b")):  // b
            fieldReadErr = x.readField2(p)
        case ((id == 3 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "c")):  // c
            fieldReadErr = x.readField3(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("Struct3 read struct end error: ", err)
    }

    return nil
}

func (x *Struct3) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *Struct3) setDefaults() *Struct3 {
    return x.
        SetANonCompat("").
        SetBNonCompat(0).
        SetCNonCompat(NewStruct2())
}

type Struct4 struct {
    A int32 `thrift:"a,1" json:"a" db:"a"`
    B *float64 `thrift:"b,2,optional" json:"b,omitempty" db:"b"`
    C *int8 `thrift:"c,3,optional" json:"c,omitempty" db:"c"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*Struct4)(nil)

func NewStruct4() *Struct4 {
    return (&Struct4{}).setDefaults()
}

func (x *Struct4) GetA() int32 {
    return x.A
}

func (x *Struct4) GetB() float64 {
    if !x.IsSetB() {
        return 0.0
    }
    return *x.B
}

func (x *Struct4) GetC() int8 {
    if !x.IsSetC() {
        return 0
    }
    return *x.C
}

func (x *Struct4) SetANonCompat(value int32) *Struct4 {
    x.A = value
    return x
}

func (x *Struct4) SetA(value int32) *Struct4 {
    x.A = value
    return x
}

func (x *Struct4) SetBNonCompat(value float64) *Struct4 {
    x.B = &value
    return x
}

func (x *Struct4) SetB(value *float64) *Struct4 {
    x.B = value
    return x
}

func (x *Struct4) SetCNonCompat(value int8) *Struct4 {
    x.C = &value
    return x
}

func (x *Struct4) SetC(value *int8) *Struct4 {
    x.C = value
    return x
}

func (x *Struct4) IsSetB() bool {
    return x != nil && x.B != nil
}

func (x *Struct4) IsSetC() bool {
    return x != nil && x.C != nil
}

func (x *Struct4) writeField1(p thrift.Encoder) error {  // A
    if err := p.WriteFieldBegin("a", thrift.I32, 1); err != nil {
        return thrift.PrependError("Struct4 write field begin error: ", err)
    }

    item := x.A
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Struct4 write field end error: ", err)
    }
    return nil
}

func (x *Struct4) writeField2(p thrift.Encoder) error {  // B
    if !x.IsSetB() {
        return nil
    }

    if err := p.WriteFieldBegin("b", thrift.DOUBLE, 2); err != nil {
        return thrift.PrependError("Struct4 write field begin error: ", err)
    }

    item := *x.B
    if err := p.WriteDouble(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Struct4 write field end error: ", err)
    }
    return nil
}

func (x *Struct4) writeField3(p thrift.Encoder) error {  // C
    if !x.IsSetC() {
        return nil
    }

    if err := p.WriteFieldBegin("c", thrift.BYTE, 3); err != nil {
        return thrift.PrependError("Struct4 write field begin error: ", err)
    }

    item := *x.C
    if err := p.WriteByte(byte(item)); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Struct4 write field end error: ", err)
    }
    return nil
}

func (x *Struct4) readField1(p thrift.Decoder) error {  // A
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.A = result
    return nil
}

func (x *Struct4) readField2(p thrift.Decoder) error {  // B
    result, err := p.ReadDouble()
    if err != nil {
        return err
    }

    x.B = &result
    return nil
}

func (x *Struct4) readField3(p thrift.Decoder) error {  // C
    resultByte, err := p.ReadByte()
    result := int8(resultByte)
    if err != nil {
        return err
    }

    x.C = &result
    return nil
}





func (x *Struct4) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("struct4"); err != nil {
        return thrift.PrependError("Struct4 write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }
    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("Struct4 write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("Struct4 write struct end error: ", err)
    }
    return nil
}

func (x *Struct4) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("Struct4 read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("Struct4 field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "a")):  // a
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.DOUBLE) || (id == thrift.NO_FIELD_ID && fieldName == "b")):  // b
            fieldReadErr = x.readField2(p)
        case ((id == 3 && wireType == thrift.BYTE) || (id == thrift.NO_FIELD_ID && fieldName == "c")):  // c
            fieldReadErr = x.readField3(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("Struct4 read struct end error: ", err)
    }

    return nil
}

func (x *Struct4) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *Struct4) setDefaults() *Struct4 {
    return x.
        SetANonCompat(0)
}

type Union1 struct {
    I *int32 `thrift:"i,1" json:"i,omitempty" db:"i"`
    D *float64 `thrift:"d,2" json:"d,omitempty" db:"d"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*Union1)(nil)

func NewUnion1() *Union1 {
    return (&Union1{}).setDefaults()
}

func (x *Union1) GetI() int32 {
    if !x.IsSetI() {
        return 0
    }
    return *x.I
}

func (x *Union1) GetD() float64 {
    if !x.IsSetD() {
        return 0.0
    }
    return *x.D
}

func (x *Union1) SetINonCompat(value int32) *Union1 {
    x.I = &value
    return x
}

func (x *Union1) SetI(value *int32) *Union1 {
    x.I = value
    return x
}

func (x *Union1) SetDNonCompat(value float64) *Union1 {
    x.D = &value
    return x
}

func (x *Union1) SetD(value *float64) *Union1 {
    x.D = value
    return x
}

func (x *Union1) IsSetI() bool {
    return x != nil && x.I != nil
}

func (x *Union1) IsSetD() bool {
    return x != nil && x.D != nil
}

func (x *Union1) writeField1(p thrift.Encoder) error {  // I
    if !x.IsSetI() {
        return nil
    }

    if err := p.WriteFieldBegin("i", thrift.I32, 1); err != nil {
        return thrift.PrependError("Union1 write field begin error: ", err)
    }

    item := *x.I
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Union1 write field end error: ", err)
    }
    return nil
}

func (x *Union1) writeField2(p thrift.Encoder) error {  // D
    if !x.IsSetD() {
        return nil
    }

    if err := p.WriteFieldBegin("d", thrift.DOUBLE, 2); err != nil {
        return thrift.PrependError("Union1 write field begin error: ", err)
    }

    item := *x.D
    if err := p.WriteDouble(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Union1 write field end error: ", err)
    }
    return nil
}

func (x *Union1) readField1(p thrift.Decoder) error {  // I
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.I = &result
    return nil
}

func (x *Union1) readField2(p thrift.Decoder) error {  // D
    result, err := p.ReadDouble()
    if err != nil {
        return err
    }

    x.D = &result
    return nil
}



func (x *Union1) countSetFields() int {
    count := int(0)
    if (x.IsSetI()) {
        count++
    }
    if (x.IsSetD()) {
        count++
    }
    return count
}

func (x *Union1) CountSetFieldsUnion1() int {
    return x.countSetFields()
}



func (x *Union1) Write(p thrift.Encoder) error {
    if countSet := x.countSetFields(); countSet > 1 {
        return fmt.Errorf("Union1 write union: no more than one field must be set (%d set).", countSet)
    }
    if err := p.WriteStructBegin("union1"); err != nil {
        return thrift.PrependError("Union1 write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("Union1 write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("Union1 write struct end error: ", err)
    }
    return nil
}

func (x *Union1) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("Union1 read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("Union1 field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "i")):  // i
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.DOUBLE) || (id == thrift.NO_FIELD_ID && fieldName == "d")):  // d
            fieldReadErr = x.readField2(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("Union1 read struct end error: ", err)
    }

    return nil
}

func (x *Union1) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *Union1) setDefaults() *Union1 {
    return x
}

type Union2 struct {
    I *int32 `thrift:"i,1" json:"i,omitempty" db:"i"`
    D *float64 `thrift:"d,2" json:"d,omitempty" db:"d"`
    S *Struct1 `thrift:"s,3" json:"s,omitempty" db:"s"`
    U *Union1 `thrift:"u,4" json:"u,omitempty" db:"u"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*Union2)(nil)

func NewUnion2() *Union2 {
    return (&Union2{}).setDefaults()
}

func (x *Union2) GetI() int32 {
    if !x.IsSetI() {
        return 0
    }
    return *x.I
}

func (x *Union2) GetD() float64 {
    if !x.IsSetD() {
        return 0.0
    }
    return *x.D
}

func (x *Union2) GetS() *Struct1 {
    if !x.IsSetS() {
        return nil
    }
    return x.S
}

func (x *Union2) GetU() *Union1 {
    if !x.IsSetU() {
        return nil
    }
    return x.U
}

func (x *Union2) SetINonCompat(value int32) *Union2 {
    x.I = &value
    return x
}

func (x *Union2) SetI(value *int32) *Union2 {
    x.I = value
    return x
}

func (x *Union2) SetDNonCompat(value float64) *Union2 {
    x.D = &value
    return x
}

func (x *Union2) SetD(value *float64) *Union2 {
    x.D = value
    return x
}

func (x *Union2) SetSNonCompat(value *Struct1) *Union2 {
    x.S = value
    return x
}

func (x *Union2) SetS(value *Struct1) *Union2 {
    x.S = value
    return x
}

func (x *Union2) SetUNonCompat(value *Union1) *Union2 {
    x.U = value
    return x
}

func (x *Union2) SetU(value *Union1) *Union2 {
    x.U = value
    return x
}

func (x *Union2) IsSetI() bool {
    return x != nil && x.I != nil
}

func (x *Union2) IsSetD() bool {
    return x != nil && x.D != nil
}

func (x *Union2) IsSetS() bool {
    return x != nil && x.S != nil
}

func (x *Union2) IsSetU() bool {
    return x != nil && x.U != nil
}

func (x *Union2) writeField1(p thrift.Encoder) error {  // I
    if !x.IsSetI() {
        return nil
    }

    if err := p.WriteFieldBegin("i", thrift.I32, 1); err != nil {
        return thrift.PrependError("Union2 write field begin error: ", err)
    }

    item := *x.I
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Union2 write field end error: ", err)
    }
    return nil
}

func (x *Union2) writeField2(p thrift.Encoder) error {  // D
    if !x.IsSetD() {
        return nil
    }

    if err := p.WriteFieldBegin("d", thrift.DOUBLE, 2); err != nil {
        return thrift.PrependError("Union2 write field begin error: ", err)
    }

    item := *x.D
    if err := p.WriteDouble(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Union2 write field end error: ", err)
    }
    return nil
}

func (x *Union2) writeField3(p thrift.Encoder) error {  // S
    if !x.IsSetS() {
        return nil
    }

    if err := p.WriteFieldBegin("s", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError("Union2 write field begin error: ", err)
    }

    item := x.S
    if err := item.Write(p); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Union2 write field end error: ", err)
    }
    return nil
}

func (x *Union2) writeField4(p thrift.Encoder) error {  // U
    if !x.IsSetU() {
        return nil
    }

    if err := p.WriteFieldBegin("u", thrift.STRUCT, 4); err != nil {
        return thrift.PrependError("Union2 write field begin error: ", err)
    }

    item := x.U
    if err := item.Write(p); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Union2 write field end error: ", err)
    }
    return nil
}

func (x *Union2) readField1(p thrift.Decoder) error {  // I
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.I = &result
    return nil
}

func (x *Union2) readField2(p thrift.Decoder) error {  // D
    result, err := p.ReadDouble()
    if err != nil {
        return err
    }

    x.D = &result
    return nil
}

func (x *Union2) readField3(p thrift.Decoder) error {  // S
    result := NewStruct1()
    err := result.Read(p)
    if err != nil {
        return err
    }

    x.S = result
    return nil
}

func (x *Union2) readField4(p thrift.Decoder) error {  // U
    result := NewUnion1()
    err := result.Read(p)
    if err != nil {
        return err
    }

    x.U = result
    return nil
}





func (x *Union2) countSetFields() int {
    count := int(0)
    if (x.IsSetI()) {
        count++
    }
    if (x.IsSetD()) {
        count++
    }
    if (x.IsSetS()) {
        count++
    }
    if (x.IsSetU()) {
        count++
    }
    return count
}

func (x *Union2) CountSetFieldsUnion2() int {
    return x.countSetFields()
}



func (x *Union2) Write(p thrift.Encoder) error {
    if countSet := x.countSetFields(); countSet > 1 {
        return fmt.Errorf("Union2 write union: no more than one field must be set (%d set).", countSet)
    }
    if err := p.WriteStructBegin("union2"); err != nil {
        return thrift.PrependError("Union2 write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }
    if err := x.writeField3(p); err != nil {
        return err
    }
    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("Union2 write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("Union2 write struct end error: ", err)
    }
    return nil
}

func (x *Union2) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("Union2 read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("Union2 field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "i")):  // i
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.DOUBLE) || (id == thrift.NO_FIELD_ID && fieldName == "d")):  // d
            fieldReadErr = x.readField2(p)
        case ((id == 3 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "s")):  // s
            fieldReadErr = x.readField3(p)
        case ((id == 4 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "u")):  // u
            fieldReadErr = x.readField4(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("Union2 read struct end error: ", err)
    }

    return nil
}

func (x *Union2) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *Union2) setDefaults() *Union2 {
    return x
}



// RegisterTypes registers types found in this file that have a thrift_uri with the passed in registry.
func RegisterTypes(registry interface {
  RegisterType(name string, initializer func() any)
}) {

}
