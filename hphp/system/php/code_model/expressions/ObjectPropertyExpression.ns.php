<?php
// Copyright 2004-present Facebook. All Rights Reserved.
// This file is @generated by
// fbcode/hphp/facebook/tools/code_model/Generate.sh

namespace HH\CodeModel {

/**
 *  object->propertyName
 *  object->{propertyExpression}
 */
class ObjectPropertyExpression /*implements IObjectPropertyExpression*/ {
  use Expression;
  use TypedNode;
  use Node;

  private /*?IExpression*/ $object;
  private /*?string*/ $propertyName;
  private /*?IExpression*/ $propertyExpression;

  /**
   *  object->propertyName
   *  object->{propertyExpression}
   */
  public function getObject() /*: IExpression*/ {
    if ($this->object === null) {
      throw new \Exception("Object is not initialized");
    }
    return $this->object;
  }
  /**
   *  object->propertyName
   *  object->{propertyExpression}
   */
  public function setObject(/*IExpression*/ $value) /*: this*/ {
    $this->object = $value;
    return $this;
  }

  /**
   *  object->propertyName
   *  object->{propertyExpression}
   */
  public function getPropertyName() /*: ?string*/ {
    return $this->propertyName;
  }
  /**
   *  object->propertyName
   *  object->{propertyExpression}
   */
  public function setPropertyName(/*?string*/ $value) /*: this*/ {
    $this->propertyName = $value;
    return $this;
  }

  /**
   *  object->propertyName
   *  object->{propertyExpression}
   */
  public function getPropertyExpression() /*: ?IExpression*/ {
    return $this->propertyExpression;
  }
  /**
   *  object->propertyName
   *  object->{propertyExpression}
   */
  public function setPropertyExpression(/*?IExpression*/ $value) /*: this*/ {
    $this->propertyExpression = $value;
    return $this;
  }

  /**
   * Returns $visitor->visitObjectPropertyExpression($this) if
   * such a method exists on $visitor.
   * Otherwise returns $visitor->visitExpression($this) if
   * such a method exists on $visitor.
   * Otherwise returns $visitor->visitNode($this) if
   */
  public function accept(/*mixed*/ $visitor) /*: mixed*/ {
    if (method_exists($visitor, "visitObjectPropertyExpression")) {
      // UNSAFE
      return $visitor->visitObjectPropertyExpression($this);
    } else if (method_exists($visitor, "visitExpression")) {
      // UNSAFE
      return $visitor->visitExpression($this);
    } else {
      return $visitor->visitNode($this);
    }
  }

  /**
   * Yields a list of nodes that are children of this node.
   * A node has exactly one parent, so doing a depth
   * first traversal of a node graph using getChildren will
   * traverse a spanning tree.
   */
  public function getChildren() /*: Continuation<INode>*/ {
    if ($this->object !== null) {
      yield $this->object;
    }
    if ($this->propertyExpression !== null) {
      yield $this->propertyExpression;
    }
  }
}
}
