Errors:
  [5:1-12] Hack does not support top level statements. Use the `__EntryPoint` attribute on a function instead
  [9:1-7] Hack does not support top level statements. Use the `__EntryPoint` attribute on a function instead
  [11:1-9] Hack does not support top level statements. Use the `__EntryPoint` attribute on a function instead
  [13:1-23] Hack does not support top level statements. Use the `__EntryPoint` attribute on a function instead
  [15:1-12] Hack does not support top level statements. Use the `__EntryPoint` attribute on a function instead
[(Fun
    { fd_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
        ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
        ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
      fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([5:1-15:12], "");
      fd_fun =
      { f_span = [5:1-15:12]; f_readonly_this = None; f_annotation = (); 
        f_readonly_ret = None; f_tparams = []; f_ret = ((), (Some ([5:1-15:12], (Happly (([5:1-15:12], "\\HH\\Awaitable"), [([5:1-15:12], (Hprim Tvoid))]))))); 
        f_params = []; f_ctxs = None; f_unsafe_ctxs = None;
        f_body =
        { fb_ast =
          [([5:1-12], (Expr ((), [5:1-11], (Call { func = ((), [5:1-9], (Id ([5:1-9], "\\func_foo"))); targs = []; args = []; unpacked_arg = None }))));
            ([9:1-7], (Expr ((), [9:1-6], (Call { func = ((), [9:1-4], (Id ([9:1-4], "\\foo"))); targs = []; args = []; unpacked_arg = None }))));
            ([11:1-9],
             (Expr
                ((), [11:1-8],
                 (Binop { bop = Plus; lhs = ((), [11:1-2], (Int "1")); rhs = ((), [11:3-8], (Call { func = ((), [11:3-6], (Id ([11:3-6], "\\foo"))); targs = []; args = []; unpacked_arg = None })) }))));
            ([13:1-23],
             (Expr
                ((), [13:1-22],
                 (Assign (((), [13:1-3], (Lvar ([13:1-3], $x))), None,
                    ((), [13:6-22],
                     (Call
                        { func = ((), [13:6-15], (Id ([13:6-15], "\\Vec\\range"))); 
                          targs = []; args = [(Anormal ((), [13:16-17], (Int "1"))); (Anormal ((), [13:19-21], (Int "99")))]; 
                          unpacked_arg = None }))
                    )))));
            ([15:1-12], (Expr ((), [15:1-11], (Call { func = ((), [15:1-9], (Id ([15:1-9], "\\func_foo"))); targs = []; args = []; unpacked_arg = None }))))]
          };
        f_fun_kind = FAsync; f_user_attributes = [{ ua_name = ([5:1-15:12], "__SupportDynamicType"); ua_params = [] }]; 
        f_external = false; f_doc_comment = None };
      fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
      fd_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([17:10-18], "\\func_foo");
       fd_fun =
       { f_span = [17:1-23]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((), None); f_params = []; 
         f_ctxs = None; f_unsafe_ctxs = None; f_body = { fb_ast = [([Pos.none], Noop)] }; 
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([17:10-18], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
       fd_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([18:10-13], "\\foo");
       fd_fun =
       { f_span = [18:1-18]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((), None); f_params = []; 
         f_ctxs = None; f_unsafe_ctxs = None; f_body = { fb_ast = [([Pos.none], Noop)] }; 
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([18:10-13], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
       fd_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = (Some "My\\Full"); 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([22:12-20], "\\My\\Full\\func_foo");
       fd_fun =
       { f_span = [22:3-25]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((), None); f_params = []; 
         f_ctxs = None; f_unsafe_ctxs = None; f_body = { fb_ast = [([Pos.none], Noop)] }; 
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([22:12-20], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
       fd_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = (Some "HH\\Lib\\Vec"); 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([26:12-17], "\\HH\\Lib\\Vec\\range");
       fd_fun =
       { f_span = [26:3-28]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((), None);
         f_params =
         [{ param_annotation = (); param_type_hint = ((), None); param_pos = [26:18-20]; 
            param_name = "$_"; param_info = Param_required; param_readonly = None; 
            param_splat = None; param_callconv = Pnormal; param_named = None; 
            param_user_attributes = []; param_visibility = None };
           { param_annotation = (); param_type_hint = ((), None); param_pos = [26:22-24]; 
             param_name = "$_"; param_info = Param_required; param_readonly = None; 
             param_splat = None; param_callconv = Pnormal; param_named = None; 
             param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None; f_body = { fb_ast = [([Pos.none], Noop)] }; 
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([26:12-17], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
       fd_package = None })
  ]
