/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.exceptions;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.service.*;
import com.facebook.thrift.client.*;
import com.google.common.util.concurrent.ListenableFuture;
import java.io.*;
import java.util.*;
import reactor.core.publisher.Mono;

@SwiftGenerated
@com.facebook.swift.service.ThriftService("Raiser")
public interface Raiser extends java.io.Closeable, com.facebook.thrift.util.BlockingService {
    static com.facebook.thrift.server.RpcServerHandlerBuilder<Raiser> serverHandlerBuilder(Raiser _serverImpl) {
        return new com.facebook.thrift.server.RpcServerHandlerBuilder<Raiser>(_serverImpl) {
                @java.lang.Override
                public com.facebook.thrift.server.RpcServerHandler build() {
                return new RaiserRpcServerHandler(impl, eventHandlers);
            }
        };
    }

    static com.facebook.thrift.client.ClientBuilder<Raiser> clientBuilder() {
        return new ClientBuilder<Raiser>() {
            @java.lang.Override
            public Raiser build(Mono<RpcClient> rpcClientMono) {
                Raiser.Reactive _delegate =
                    new RaiserReactiveClient(protocolId, rpcClientMono, headers, persistentHeaders);
                return new RaiserReactiveBlockingWrapper(_delegate);
            }
        };
    }

    @com.facebook.swift.service.ThriftService("Raiser")
    public interface Async extends java.io.Closeable, com.facebook.thrift.util.AsyncService {
        static com.facebook.thrift.server.RpcServerHandlerBuilder<Raiser.Async> serverHandlerBuilder(Raiser.Async _serverImpl) {
            return new com.facebook.thrift.server.RpcServerHandlerBuilder<Raiser.Async>(_serverImpl) {
                @java.lang.Override
                public com.facebook.thrift.server.RpcServerHandler build() {
                    return new RaiserRpcServerHandler(impl, eventHandlers);
                }
            };
        }

        static com.facebook.thrift.client.ClientBuilder<Raiser.Async> clientBuilder() {
            return new ClientBuilder<Raiser.Async>() {
                @java.lang.Override
                public Raiser.Async build(Mono<RpcClient> rpcClientMono) {
                    Raiser.Reactive _delegate =
                        new RaiserReactiveClient(protocolId, rpcClientMono, headers, persistentHeaders);
                    return new RaiserReactiveAsyncWrapper(_delegate);
                }
            };
        }

        @java.lang.Override void close();

        @ThriftMethod(value = "doBland")
        ListenableFuture<Void> doBland();

        default ListenableFuture<Void> doBland(
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default ListenableFuture<ResponseWrapper<Void>> doBlandWrapper(
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        @ThriftMethod(value = "doRaise",
                      exception = { 
                          @ThriftException(type=test.fixtures.exceptions.Banal.class, id=1),
                          @ThriftException(type=test.fixtures.exceptions.Fiery.class, id=2),
                          @ThriftException(type=test.fixtures.exceptions.Serious.class, id=3)
                      })
        ListenableFuture<Void> doRaise();

        default ListenableFuture<Void> doRaise(
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default ListenableFuture<ResponseWrapper<Void>> doRaiseWrapper(
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        @ThriftMethod(value = "get200")
        ListenableFuture<String> get200();

        default ListenableFuture<String> get200(
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default ListenableFuture<ResponseWrapper<String>> get200Wrapper(
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        @ThriftMethod(value = "get500",
                      exception = { 
                          @ThriftException(type=test.fixtures.exceptions.Fiery.class, id=1),
                          @ThriftException(type=test.fixtures.exceptions.Banal.class, id=2),
                          @ThriftException(type=test.fixtures.exceptions.Serious.class, id=3)
                      })
        ListenableFuture<String> get500();

        default ListenableFuture<String> get500(
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default ListenableFuture<ResponseWrapper<String>> get500Wrapper(
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }
    }
    @java.lang.Override void close();

    @ThriftMethod(value = "doBland")
    void doBland() throws org.apache.thrift.TException;

    default void doBland(
        RpcOptions rpcOptions) throws org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    default ResponseWrapper<Void> doBlandWrapper(
        RpcOptions rpcOptions) throws org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    @ThriftMethod(value = "doRaise",
                  exception = { 
                      @ThriftException(type=test.fixtures.exceptions.Banal.class, id=1),
                      @ThriftException(type=test.fixtures.exceptions.Fiery.class, id=2),
                      @ThriftException(type=test.fixtures.exceptions.Serious.class, id=3)
                  })
    void doRaise() throws test.fixtures.exceptions.Banal, test.fixtures.exceptions.Fiery, test.fixtures.exceptions.Serious, org.apache.thrift.TException;

    default void doRaise(
        RpcOptions rpcOptions) throws test.fixtures.exceptions.Banal, test.fixtures.exceptions.Fiery, test.fixtures.exceptions.Serious, org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    default ResponseWrapper<Void> doRaiseWrapper(
        RpcOptions rpcOptions) throws test.fixtures.exceptions.Banal, test.fixtures.exceptions.Fiery, test.fixtures.exceptions.Serious, org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    @ThriftMethod(value = "get200")
    String get200() throws org.apache.thrift.TException;

    default String get200(
        RpcOptions rpcOptions) throws org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    default ResponseWrapper<String> get200Wrapper(
        RpcOptions rpcOptions) throws org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    @ThriftMethod(value = "get500",
                  exception = { 
                      @ThriftException(type=test.fixtures.exceptions.Fiery.class, id=1),
                      @ThriftException(type=test.fixtures.exceptions.Banal.class, id=2),
                      @ThriftException(type=test.fixtures.exceptions.Serious.class, id=3)
                  })
    String get500() throws test.fixtures.exceptions.Fiery, test.fixtures.exceptions.Banal, test.fixtures.exceptions.Serious, org.apache.thrift.TException;

    default String get500(
        RpcOptions rpcOptions) throws test.fixtures.exceptions.Fiery, test.fixtures.exceptions.Banal, test.fixtures.exceptions.Serious, org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    default ResponseWrapper<String> get500Wrapper(
        RpcOptions rpcOptions) throws test.fixtures.exceptions.Fiery, test.fixtures.exceptions.Banal, test.fixtures.exceptions.Serious, org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    @com.facebook.swift.service.ThriftService("Raiser")
    interface Reactive extends reactor.core.Disposable, com.facebook.thrift.util.ReactiveService {
        static com.facebook.thrift.server.RpcServerHandlerBuilder<Raiser.Reactive> serverHandlerBuilder(Raiser.Reactive _serverImpl) {
            return new com.facebook.thrift.server.RpcServerHandlerBuilder<Raiser.Reactive>(_serverImpl) {
                @java.lang.Override
                public com.facebook.thrift.server.RpcServerHandler build() {
                    return new RaiserRpcServerHandler(impl, eventHandlers);
                }
            };
        }

        static com.facebook.thrift.client.ClientBuilder<Raiser.Reactive> clientBuilder() {
            return new ClientBuilder<Raiser.Reactive>() {
                @java.lang.Override
                public Raiser.Reactive build(Mono<RpcClient> rpcClientMono) {
                    return new RaiserReactiveClient(protocolId, rpcClientMono, headers, persistentHeaders);
                }
            };
        }

        @ThriftMethod(value = "doBland")
        reactor.core.publisher.Mono<Void> doBland();

        default reactor.core.publisher.Mono<Void> doBland(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default reactor.core.publisher.Mono<ResponseWrapper<Void>> doBlandWrapper(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        @ThriftMethod(value = "doRaise",
                  exception = { 
                      @ThriftException(type=test.fixtures.exceptions.Banal.class, id=1),
                      @ThriftException(type=test.fixtures.exceptions.Fiery.class, id=2),
                      @ThriftException(type=test.fixtures.exceptions.Serious.class, id=3)
                  })
        reactor.core.publisher.Mono<Void> doRaise();

        default reactor.core.publisher.Mono<Void> doRaise(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default reactor.core.publisher.Mono<ResponseWrapper<Void>> doRaiseWrapper(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        @ThriftMethod(value = "get200")
        reactor.core.publisher.Mono<String> get200();

        default reactor.core.publisher.Mono<String> get200(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default reactor.core.publisher.Mono<ResponseWrapper<String>> get200Wrapper(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        @ThriftMethod(value = "get500",
                  exception = { 
                      @ThriftException(type=test.fixtures.exceptions.Fiery.class, id=1),
                      @ThriftException(type=test.fixtures.exceptions.Banal.class, id=2),
                      @ThriftException(type=test.fixtures.exceptions.Serious.class, id=3)
                  })
        reactor.core.publisher.Mono<String> get500();

        default reactor.core.publisher.Mono<String> get500(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default reactor.core.publisher.Mono<ResponseWrapper<String>> get500Wrapper(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

    }
}
