/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.adapter;

import com.facebook.thrift.client.*;
import java.util.*;

public class AdapterServiceBlockingReactiveWrapper 
    implements AdapterService.Reactive {
    private final AdapterService _delegate;

    public AdapterServiceBlockingReactiveWrapper(AdapterService _delegate) {
        
        this._delegate = _delegate;
    }

    @java.lang.Override
    public void dispose() {
        _delegate.close();
    }

    @java.lang.Override
    public reactor.core.publisher.Mono<test.fixtures.adapter.CountingStruct> count() {
        reactor.core.publisher.Mono<test.fixtures.adapter.CountingStruct> _m =  reactor.core.publisher.Mono.fromSupplier(() -> {
                try {
                    return _delegate.count();
                } catch (Throwable _e) {
                    throw reactor.core.Exceptions.propagate(_e);
                }
            });

        if (!com.facebook.thrift.util.resources.RpcResources.isForceExecutionOffEventLoop()) {
            _m = _m.subscribeOn(com.facebook.thrift.util.resources.RpcResources.getOffLoopScheduler());
        }

        return _m;
    }

    @java.lang.Override
    public reactor.core.publisher.Mono<test.fixtures.adapter.HeapAllocated> adaptedTypes(final test.fixtures.adapter.HeapAllocated arg) {
        reactor.core.publisher.Mono<test.fixtures.adapter.HeapAllocated> _m =  reactor.core.publisher.Mono.fromSupplier(() -> {
                try {
                    return _delegate.adaptedTypes(arg);
                } catch (Throwable _e) {
                    throw reactor.core.Exceptions.propagate(_e);
                }
            });

        if (!com.facebook.thrift.util.resources.RpcResources.isForceExecutionOffEventLoop()) {
            _m = _m.subscribeOn(com.facebook.thrift.util.resources.RpcResources.getOffLoopScheduler());
        }

        return _m;
    }

}
