// @generated by Thrift for [[[ program path ]]]
// This file is probably not the place you want to edit!

package module // [[[ program thrift source path ]]]

import (
    "fmt"

    includes "includes"
    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
)

var _ = includes.GoUnusedProtection__

// (needed to ensure safety because of naive import list construction)
var _ = fmt.Printf
var _ = thrift.ZERO


type MyStruct struct {
    MyIncludedField *includes.Included `thrift:"MyIncludedField,1" json:"MyIncludedField" db:"MyIncludedField"`
    MyOtherIncludedField *includes.Included `thrift:"MyOtherIncludedField,2" json:"MyOtherIncludedField" db:"MyOtherIncludedField"`
    MyIncludedInt includes.IncludedInt64 `thrift:"MyIncludedInt,3" json:"MyIncludedInt" db:"MyIncludedInt"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyStruct{}


func NewMyStruct() *MyStruct {
    return (&MyStruct{}).
        SetMyIncludedField(
            *includes.NewIncluded(),
        ).
        SetMyIncludedInt(42)
}

// Deprecated: Use NewMyStruct().MyIncludedField instead.
var MyStruct_MyIncludedField_DEFAULT = NewMyStruct().MyIncludedField

// Deprecated: Use NewMyStruct().MyOtherIncludedField instead.
var MyStruct_MyOtherIncludedField_DEFAULT = NewMyStruct().MyOtherIncludedField

func (x *MyStruct) GetMyIncludedFieldNonCompat() *includes.Included {
    return x.MyIncludedField
}

func (x *MyStruct) GetMyIncludedField() *includes.Included {
    if !x.IsSetMyIncludedField() {
      return includes.NewIncluded()
    }

    return x.MyIncludedField
}

func (x *MyStruct) GetMyOtherIncludedFieldNonCompat() *includes.Included {
    return x.MyOtherIncludedField
}

func (x *MyStruct) GetMyOtherIncludedField() *includes.Included {
    if !x.IsSetMyOtherIncludedField() {
      return includes.NewIncluded()
    }

    return x.MyOtherIncludedField
}

func (x *MyStruct) GetMyIncludedIntNonCompat() includes.IncludedInt64 {
    return x.MyIncludedInt
}

func (x *MyStruct) GetMyIncludedInt() includes.IncludedInt64 {
    return x.MyIncludedInt
}

func (x *MyStruct) SetMyIncludedField(value includes.Included) *MyStruct {
    x.MyIncludedField = &value
    return x
}

func (x *MyStruct) SetMyOtherIncludedField(value includes.Included) *MyStruct {
    x.MyOtherIncludedField = &value
    return x
}

func (x *MyStruct) SetMyIncludedInt(value includes.IncludedInt64) *MyStruct {
    x.MyIncludedInt = value
    return x
}

func (x *MyStruct) IsSetMyIncludedField() bool {
    return x.MyIncludedField != nil
}

func (x *MyStruct) IsSetMyOtherIncludedField() bool {
    return x.MyOtherIncludedField != nil
}


func (x *MyStruct) writeField1(p thrift.Protocol) error {  // MyIncludedField
    if !x.IsSetMyIncludedField() {
        return nil
    }

    if err := p.WriteFieldBegin("MyIncludedField", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetMyIncludedFieldNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField2(p thrift.Protocol) error {  // MyOtherIncludedField
    if !x.IsSetMyOtherIncludedField() {
        return nil
    }

    if err := p.WriteFieldBegin("MyOtherIncludedField", thrift.STRUCT, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetMyOtherIncludedFieldNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField3(p thrift.Protocol) error {  // MyIncludedInt
    if err := p.WriteFieldBegin("MyIncludedInt", thrift.I64, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetMyIncludedIntNonCompat()
    err := includes.WriteIncludedInt64(item, p)
if err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) readField1(p thrift.Protocol) error {  // MyIncludedField
    result := *includes.NewIncluded()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetMyIncludedField(result)
    return nil
}

func (x *MyStruct) readField2(p thrift.Protocol) error {  // MyOtherIncludedField
    result := *includes.NewIncluded()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetMyOtherIncludedField(result)
    return nil
}

func (x *MyStruct) readField3(p thrift.Protocol) error {  // MyIncludedInt
    result, err := includes.ReadIncludedInt64(p)
if err != nil {
    return err
}

    x.SetMyIncludedInt(result)
    return nil
}

func (x *MyStruct) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use MyStruct.Set* methods instead or set the fields directly.
type MyStructBuilder struct {
    obj *MyStruct
}

func NewMyStructBuilder() *MyStructBuilder {
    return &MyStructBuilder{
        obj: NewMyStruct(),
    }
}

func (x *MyStructBuilder) MyIncludedField(value *includes.Included) *MyStructBuilder {
    x.obj.MyIncludedField = value
    return x
}

func (x *MyStructBuilder) MyOtherIncludedField(value *includes.Included) *MyStructBuilder {
    x.obj.MyOtherIncludedField = value
    return x
}

func (x *MyStructBuilder) MyIncludedInt(value includes.IncludedInt64) *MyStructBuilder {
    x.obj.MyIncludedInt = value
    return x
}

func (x *MyStructBuilder) Emit() *MyStruct {
    var objCopy MyStruct = *x.obj
    return &objCopy
}

func (x *MyStruct) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // MyIncludedField
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // MyOtherIncludedField
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // MyIncludedInt
            if err := x.readField3(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

