/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/client-methods/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#include "thrift/compiler/test/fixtures/client-methods/gen-cpp2/HeaderClientMethodsAnnotationOnFunction.h"
#include "thrift/compiler/test/fixtures/client-methods/gen-cpp2/HeaderClientMethodsAnnotationOnFunction.tcc"
#include "thrift/compiler/test/fixtures/client-methods/gen-cpp2/module_metadata.h"
#include <thrift/lib/cpp2/gen/service_cpp.h>

std::unique_ptr<apache::thrift::AsyncProcessor> apache::thrift::ServiceHandler<::cpp2::HeaderClientMethodsAnnotationOnFunction>::getProcessor() {
  return std::make_unique<::cpp2::HeaderClientMethodsAnnotationOnFunctionAsyncProcessor>(this);
}

apache::thrift::ServiceHandler<::cpp2::HeaderClientMethodsAnnotationOnFunction>::CreateMethodMetadataResult apache::thrift::ServiceHandler<::cpp2::HeaderClientMethodsAnnotationOnFunction>::createMethodMetadata() {
  return ::apache::thrift::detail::ap::createMethodMetadataMap<::cpp2::HeaderClientMethodsAnnotationOnFunctionAsyncProcessor>(getServiceRequestInfoMap().value().get());
}


std::optional<std::reference_wrapper<apache::thrift::ServiceRequestInfoMap const>> apache::thrift::ServiceHandler<::cpp2::HeaderClientMethodsAnnotationOnFunction>::getServiceRequestInfoMap() const {
  return __fbthrift_serviceInfoHolder.requestInfoMap();
}

::cpp2::HeaderClientMethodsAnnotationOnFunctionServiceInfoHolder apache::thrift::ServiceHandler<::cpp2::HeaderClientMethodsAnnotationOnFunction>::__fbthrift_serviceInfoHolder;

//
// Service Methods
//

//
// Method 'echo'
//

void apache::thrift::ServiceHandler<::cpp2::HeaderClientMethodsAnnotationOnFunction>::echo(::cpp2::EchoResponse& /*_return*/, std::unique_ptr<::cpp2::EchoRequest> /*request*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("echo");
}

void apache::thrift::ServiceHandler<::cpp2::HeaderClientMethodsAnnotationOnFunction>::sync_echo(::cpp2::EchoResponse& _return, std::unique_ptr<::cpp2::EchoRequest> p_request) {
  return echo(_return, std::move(p_request));
}

folly::SemiFuture<std::unique_ptr<::cpp2::EchoResponse>>
apache::thrift::ServiceHandler<::cpp2::HeaderClientMethodsAnnotationOnFunction>::semifuture_echo(std::unique_ptr<::cpp2::EchoRequest> p_request) {
  auto expected{apache::thrift::detail::si::InvocationType::SemiFuture};
  __fbthrift_invocation_echo.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Sync,
      std::memory_order_relaxed);
  auto ret = std::make_unique<::cpp2::EchoResponse>();
  sync_echo(*ret, std::move(p_request));
  return folly::makeSemiFuture(std::move(ret));
}

folly::Future<std::unique_ptr<::cpp2::EchoResponse>>
apache::thrift::ServiceHandler<::cpp2::HeaderClientMethodsAnnotationOnFunction>::future_echo(std::unique_ptr<::cpp2::EchoRequest> p_request) {
  auto expected{apache::thrift::detail::si::InvocationType::Future};
  __fbthrift_invocation_echo.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::SemiFuture,
      std::memory_order_relaxed);
  return apache::thrift::detail::si::future(
      semifuture_echo(std::move(p_request)),
      getInternalKeepAlive());
}

#if FOLLY_HAS_COROUTINES
folly::coro::Task<std::unique_ptr<::cpp2::EchoResponse>>
apache::thrift::ServiceHandler<::cpp2::HeaderClientMethodsAnnotationOnFunction>::co_echo(std::unique_ptr<::cpp2::EchoRequest> p_request) {
  auto expected{apache::thrift::detail::si::InvocationType::Coro};
  __fbthrift_invocation_echo.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Future,
      std::memory_order_relaxed);
  folly::throw_exception(apache::thrift::detail::si::UnimplementedCoroMethod::
                             withCapturedArgs<std::unique_ptr<::cpp2::EchoRequest> /*request*/>(std::move(p_request)));
}

folly::coro::Task<std::unique_ptr<::cpp2::EchoResponse>> apache::thrift::ServiceHandler<::cpp2::HeaderClientMethodsAnnotationOnFunction>::co_echo(
    apache::thrift::RequestParams /* params */, std::unique_ptr<::cpp2::EchoRequest> p_request) {
  auto expected{apache::thrift::detail::si::InvocationType::CoroParam};
  __fbthrift_invocation_echo.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Coro,
      std::memory_order_relaxed);
  return co_echo(std::move(p_request));
}
#endif // FOLLY_HAS_COROUTINES

void apache::thrift::ServiceHandler<::cpp2::HeaderClientMethodsAnnotationOnFunction>::async_tm_echo(
    apache::thrift::HandlerCallbackPtr<std::unique_ptr<::cpp2::EchoResponse>> callback, std::unique_ptr<::cpp2::EchoRequest> p_request) {
  // It's possible the coroutine versions will delegate to a future-based
  // version. If that happens, we need the RequestParams arguments to be
  // available to the future through the thread-local backchannel, so we create
  // a RAII object that sets up RequestParams and clears them on destruction.
  apache::thrift::detail::si::AsyncTmPrep asyncTmPrep(this, callback.get());
#if FOLLY_HAS_COROUTINES
determineInvocationType:
#endif // FOLLY_HAS_COROUTINES
  auto invocationType =
      __fbthrift_invocation_echo.load(std::memory_order_relaxed);
  try {
    switch (invocationType) {
      case apache::thrift::detail::si::InvocationType::AsyncTm: {
#if FOLLY_HAS_COROUTINES
        __fbthrift_invocation_echo.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::CoroParam,
            std::memory_order_relaxed);
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_echo(params, std::move(p_request));
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
#else // FOLLY_HAS_COROUTINES
        __fbthrift_invocation_echo.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::Future,
            std::memory_order_relaxed);
        [[fallthrough]];
#endif // FOLLY_HAS_COROUTINES
      }
      case apache::thrift::detail::si::InvocationType::Future: {
        auto fut = future_echo(std::move(p_request));
        apache::thrift::detail::si::async_tm_future(
            std::move(callback), std::move(fut));
        return;
      }
      case apache::thrift::detail::si::InvocationType::SemiFuture: {
        auto fut = semifuture_echo(std::move(p_request));
        apache::thrift::detail::si::async_tm_semifuture(
            std::move(callback), std::move(fut));
        return;
      }
#if FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::CoroParam: {
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_echo(params, std::move(p_request));
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
      case apache::thrift::detail::si::InvocationType::Coro: {
        auto task = co_echo(std::move(p_request));
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
#endif // FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::Sync: {
        ::cpp2::EchoResponse _return;
        sync_echo(_return, std::move(p_request));
        callback->result(std::move(_return));
        return;
      }
      default: {
        folly::assume_unreachable();
      }
    }
#if FOLLY_HAS_COROUTINES
  } catch (apache::thrift::detail::si::UnimplementedCoroMethod& ex) {
    std::tie(p_request) = std::move(ex).restoreArgs<std::unique_ptr<::cpp2::EchoRequest> /*request*/>();
    goto determineInvocationType;
#endif // FOLLY_HAS_COROUTINES
  } catch (...) {
    callback->exception(std::current_exception());
  }
}
//
// End of Method 'echo'
//

//
// Method 'echo_2'
//

void apache::thrift::ServiceHandler<::cpp2::HeaderClientMethodsAnnotationOnFunction>::echo_2(::cpp2::EchoResponse& /*_return*/, std::unique_ptr<::cpp2::EchoRequest> /*request*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("echo_2");
}

void apache::thrift::ServiceHandler<::cpp2::HeaderClientMethodsAnnotationOnFunction>::sync_echo_2(::cpp2::EchoResponse& _return, std::unique_ptr<::cpp2::EchoRequest> p_request) {
  return echo_2(_return, std::move(p_request));
}

folly::SemiFuture<std::unique_ptr<::cpp2::EchoResponse>>
apache::thrift::ServiceHandler<::cpp2::HeaderClientMethodsAnnotationOnFunction>::semifuture_echo_2(std::unique_ptr<::cpp2::EchoRequest> p_request) {
  auto expected{apache::thrift::detail::si::InvocationType::SemiFuture};
  __fbthrift_invocation_echo_2.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Sync,
      std::memory_order_relaxed);
  auto ret = std::make_unique<::cpp2::EchoResponse>();
  sync_echo_2(*ret, std::move(p_request));
  return folly::makeSemiFuture(std::move(ret));
}

folly::Future<std::unique_ptr<::cpp2::EchoResponse>>
apache::thrift::ServiceHandler<::cpp2::HeaderClientMethodsAnnotationOnFunction>::future_echo_2(std::unique_ptr<::cpp2::EchoRequest> p_request) {
  auto expected{apache::thrift::detail::si::InvocationType::Future};
  __fbthrift_invocation_echo_2.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::SemiFuture,
      std::memory_order_relaxed);
  return apache::thrift::detail::si::future(
      semifuture_echo_2(std::move(p_request)),
      getInternalKeepAlive());
}

#if FOLLY_HAS_COROUTINES
folly::coro::Task<std::unique_ptr<::cpp2::EchoResponse>>
apache::thrift::ServiceHandler<::cpp2::HeaderClientMethodsAnnotationOnFunction>::co_echo_2(std::unique_ptr<::cpp2::EchoRequest> p_request) {
  auto expected{apache::thrift::detail::si::InvocationType::Coro};
  __fbthrift_invocation_echo_2.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Future,
      std::memory_order_relaxed);
  folly::throw_exception(apache::thrift::detail::si::UnimplementedCoroMethod::
                             withCapturedArgs<std::unique_ptr<::cpp2::EchoRequest> /*request*/>(std::move(p_request)));
}

folly::coro::Task<std::unique_ptr<::cpp2::EchoResponse>> apache::thrift::ServiceHandler<::cpp2::HeaderClientMethodsAnnotationOnFunction>::co_echo_2(
    apache::thrift::RequestParams /* params */, std::unique_ptr<::cpp2::EchoRequest> p_request) {
  auto expected{apache::thrift::detail::si::InvocationType::CoroParam};
  __fbthrift_invocation_echo_2.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Coro,
      std::memory_order_relaxed);
  return co_echo_2(std::move(p_request));
}
#endif // FOLLY_HAS_COROUTINES

void apache::thrift::ServiceHandler<::cpp2::HeaderClientMethodsAnnotationOnFunction>::async_tm_echo_2(
    apache::thrift::HandlerCallbackPtr<std::unique_ptr<::cpp2::EchoResponse>> callback, std::unique_ptr<::cpp2::EchoRequest> p_request) {
  // It's possible the coroutine versions will delegate to a future-based
  // version. If that happens, we need the RequestParams arguments to be
  // available to the future through the thread-local backchannel, so we create
  // a RAII object that sets up RequestParams and clears them on destruction.
  apache::thrift::detail::si::AsyncTmPrep asyncTmPrep(this, callback.get());
#if FOLLY_HAS_COROUTINES
determineInvocationType:
#endif // FOLLY_HAS_COROUTINES
  auto invocationType =
      __fbthrift_invocation_echo_2.load(std::memory_order_relaxed);
  try {
    switch (invocationType) {
      case apache::thrift::detail::si::InvocationType::AsyncTm: {
#if FOLLY_HAS_COROUTINES
        __fbthrift_invocation_echo_2.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::CoroParam,
            std::memory_order_relaxed);
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_echo_2(params, std::move(p_request));
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
#else // FOLLY_HAS_COROUTINES
        __fbthrift_invocation_echo_2.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::Future,
            std::memory_order_relaxed);
        [[fallthrough]];
#endif // FOLLY_HAS_COROUTINES
      }
      case apache::thrift::detail::si::InvocationType::Future: {
        auto fut = future_echo_2(std::move(p_request));
        apache::thrift::detail::si::async_tm_future(
            std::move(callback), std::move(fut));
        return;
      }
      case apache::thrift::detail::si::InvocationType::SemiFuture: {
        auto fut = semifuture_echo_2(std::move(p_request));
        apache::thrift::detail::si::async_tm_semifuture(
            std::move(callback), std::move(fut));
        return;
      }
#if FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::CoroParam: {
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_echo_2(params, std::move(p_request));
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
      case apache::thrift::detail::si::InvocationType::Coro: {
        auto task = co_echo_2(std::move(p_request));
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
#endif // FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::Sync: {
        ::cpp2::EchoResponse _return;
        sync_echo_2(_return, std::move(p_request));
        callback->result(std::move(_return));
        return;
      }
      default: {
        folly::assume_unreachable();
      }
    }
#if FOLLY_HAS_COROUTINES
  } catch (apache::thrift::detail::si::UnimplementedCoroMethod& ex) {
    std::tie(p_request) = std::move(ex).restoreArgs<std::unique_ptr<::cpp2::EchoRequest> /*request*/>();
    goto determineInvocationType;
#endif // FOLLY_HAS_COROUTINES
  } catch (...) {
    callback->exception(std::current_exception());
  }
}
//
// End of Method 'echo_2'
//

//
// End of Service Methods
//


namespace cpp2 {

void HeaderClientMethodsAnnotationOnFunctionSvNull::echo(::cpp2::EchoResponse& /*_return*/, std::unique_ptr<::cpp2::EchoRequest> /*request*/) {  }

void HeaderClientMethodsAnnotationOnFunctionSvNull::echo_2(::cpp2::EchoResponse& /*_return*/, std::unique_ptr<::cpp2::EchoRequest> /*request*/) {  }


std::string_view HeaderClientMethodsAnnotationOnFunctionAsyncProcessor::getServiceName() {
  return "HeaderClientMethodsAnnotationOnFunction";
}

void HeaderClientMethodsAnnotationOnFunctionAsyncProcessor::getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) {
  ::apache::thrift::detail::md::ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::HeaderClientMethodsAnnotationOnFunction>>::gen(response);
}

void HeaderClientMethodsAnnotationOnFunctionAsyncProcessor::processSerializedCompressedRequestWithMetadata(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  apache::thrift::detail::ap::process(this, iface_, std::move(req), std::move(serializedRequest), methodMetadata, protType, context, eb, tm);
}

void HeaderClientMethodsAnnotationOnFunctionAsyncProcessor::executeRequest(apache::thrift::ServerRequest&& request, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata) {
  apache::thrift::detail::ap::execute(this, std::move(request), apache::thrift::detail::ServerRequestHelper::protocol(request), methodMetadata);
}

const HeaderClientMethodsAnnotationOnFunctionAsyncProcessor::ProcessMap& HeaderClientMethodsAnnotationOnFunctionAsyncProcessor::getOwnProcessMap() {
  return kOwnProcessMap_;
}

const HeaderClientMethodsAnnotationOnFunctionAsyncProcessor::ProcessMap HeaderClientMethodsAnnotationOnFunctionAsyncProcessor::kOwnProcessMap_ {
  {"echo",
    {&HeaderClientMethodsAnnotationOnFunctionAsyncProcessor::setUpAndProcess_echo<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &HeaderClientMethodsAnnotationOnFunctionAsyncProcessor::setUpAndProcess_echo<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>,
     &HeaderClientMethodsAnnotationOnFunctionAsyncProcessor::executeRequest_echo<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &HeaderClientMethodsAnnotationOnFunctionAsyncProcessor::executeRequest_echo<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>}},
  {"echo_2",
    {&HeaderClientMethodsAnnotationOnFunctionAsyncProcessor::setUpAndProcess_echo_2<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &HeaderClientMethodsAnnotationOnFunctionAsyncProcessor::setUpAndProcess_echo_2<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>,
     &HeaderClientMethodsAnnotationOnFunctionAsyncProcessor::executeRequest_echo_2<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &HeaderClientMethodsAnnotationOnFunctionAsyncProcessor::executeRequest_echo_2<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>}},
};

apache::thrift::ServiceRequestInfoMap const& HeaderClientMethodsAnnotationOnFunctionServiceInfoHolder::requestInfoMap() const {
  static folly::Indestructible<apache::thrift::ServiceRequestInfoMap> requestInfoMap{staticRequestInfoMap()};
  return *requestInfoMap;
}

apache::thrift::ServiceRequestInfoMap HeaderClientMethodsAnnotationOnFunctionServiceInfoHolder::staticRequestInfoMap() {
  apache::thrift::ServiceRequestInfoMap requestInfoMap = {
  {"echo",
    { false,
     apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE,
     "HeaderClientMethodsAnnotationOnFunction.echo",
     std::nullopt,
     apache::thrift::concurrency::NORMAL,
     std::nullopt}},
  {"echo_2",
    { false,
     apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE,
     "HeaderClientMethodsAnnotationOnFunction.echo_2",
     std::nullopt,
     apache::thrift::concurrency::NORMAL,
     std::nullopt}},
  };

  return requestInfoMap;
}
} // namespace cpp2

namespace apache::thrift::detail {
::folly::Range<const ::std::string_view*>(*TSchemaAssociation<::cpp2::HeaderClientMethodsAnnotationOnFunction, false>::bundle)() =
    nullptr;
}
