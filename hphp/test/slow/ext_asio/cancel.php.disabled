<?hh // strict
// Copyright 2004-present Facebook. All Rights Reserved.

class OperationCanceledException extends Exception { }

class CatWrapper {
  private resource $proc;
  private array $pipes;

  public function __construct() {
    $descriptorspec = array(
      0 => array("pipe", "r"),
      1 => array("pipe", "w"),
    );
    $this->proc = proc_open("cat", $descriptorspec, $this->pipes);
    if (!is_resource($this->proc) ||
        !is_resource($this->pipes[0]) ||
        !is_resource($this->pipes[0])) {
      throw new Exception("proc_open failed!");
    }
  }

  public function close(): void {
    fclose($this->pipes[0]);
    fclose($this->pipes[1]);
    proc_close($this->proc);
  }

  public function complete(): void {
    fwrite($this->pipes[0], "done\n");
    fflush($this->pipes[0]);
  }

  public function runAsync(): Awaitable<int> {
    return stream_await($this->pipes[1], STREAM_AWAIT_READ, 10.0);
  }
}

function reschedule($priority = 0) {
  $queue = RescheduleWaitHandle::QUEUE_DEFAULT;
  return RescheduleWaitHandle::create($queue, $priority);
}

function testCancelInvalidAwaitables() {
  echo "=== testCancelInvalidAwaitables ===\n";
  try {
    // try canceling something, that is not Awaitable
    HH\Asio\cancel(HH\Asio\null(), new OperationCanceledException);
    echo "Fail\n";
  } catch(Exception $e) {
    echo "ok\n";
  }
  try {
    // try canceling StaticWaitHandle
    HH\Asio\cancel(HH\Asio\null(), new OperationCanceledException);
    echo "Fail\n";
  } catch(Exception $e) {
    echo "ok\n";
  }
}

async function testCancelExternalThreadEventBeforeAwait(): Awaitable<void> {
  echo "=== testCancelExternalThreadEventBeforeAwait ===\n";
  $cat = new CatWrapper();
  $wh = $cat->runAsync();
  var_dump(HH\Asio\cancel($wh, new OperationCanceledException) == true);
  $completion = async {
    await reschedule();
    $cat->complete();
  };

  echo "before await\n";
  $resv = await HH\Asio\vw(ImmVector {
      $wh,
      $completion,
  });
  echo "after await\n";

  try {
    $res = $resv[0]->getResult();
    echo "this should not happen!\n";
  } catch (OperationCanceledException $e) {
    echo "operation was canceled\n";
  }
  $cat->close();
}

async function testCancelExternalThreadEventAfterAwait(): Awaitable<void> {
  echo "=== testCancelExternalThreadEventAfterAwait ===\n";
  $cat = new CatWrapper();
  $wh = $cat->runAsync();
  $completion = async {
    await reschedule();
    $cat->complete();
  };

  echo "before await\n";
  $resv = await HH\Asio\vw(ImmVector {
      $wh,
      $completion,
  });

  $res = $resv[0]->getResult();
  echo "after await\n";
  var_dump($res == STREAM_AWAIT_READY);
  var_dump(HH\Asio\cancel($wh, new OperationCanceledException) == false);

  $res = await $wh;             // await again
  var_dump($res == STREAM_AWAIT_READY);

  $cat->close();
}

async function testCancelExternalThreadEventDuringAwait(): Awaitable<void> {
  echo "=== testCancelExternalThreadEventDuringAwait ===\n";
  $cat = new CatWrapper();
  $wh = $cat->runAsync();
  $completion = async {
    await reschedule(1);        // after $cancelation
    $cat->complete();
  };
  $cancelation = async {
    await reschedule(0);        // before $completion
    var_dump(HH\Asio\cancel($wh, new OperationCanceledException) == true);
  };
  echo "before await\n";
  $resv = await HH\Asio\vw(ImmVector {
      $wh,
      $completion,
      $cancelation,
  });
  echo "after await\n";

  try {
    $res = $resv[0]->getResult();
    echo "this should not happen\n";
  } catch (OperationCanceledException $e) {
    echo "operation was canceled\n";
  }
  $cat->close();
}

async function testCancelExternalThreadEventFromBeginIOWait(): Awaitable<void> {
  echo "=== testCancelExternalThreadEventFromBeginIOWait ===\n";
  $cat = new CatWrapper();
  $wh = $cat->runAsync();

  Awaitable::setOnIOWaitEnterCallback(function() use ($wh) {
      echo "io wait enter\n";
      var_dump(HH\Asio\cancel($wh, new OperationCanceledException) == true);
    });
  Awaitable::setOnIOWaitExitCallback(function() {
      echo "io wait exit\n";
    });

  echo "before await\n";
  try {
    $res = await $wh;
    echo "this should not happen!\n";
  } catch (OperationCanceledException $e) {
    echo "operation was canceled\n";
  }
  echo "after await\n";

  Awaitable::setOnIOWaitEnterCallback(null);
  Awaitable::setOnIOWaitExitCallback(null);
  // clean up to avoid leaking libevent watch
  // this is still wrong, since libevent 1.4 (used by hphp) does not support
  // multiple events for same FD. But it gets us to predictable state.
  $cat->complete();
  await $cat->runAsync();
  $cat->close();
}

async function testCancelSleepBeforeAwait(): Awaitable<void> {
  echo "=== testCancelSleepBeforeAwait ===\n";
  $wh = SleepWaitHandle::create(30000000);
  var_dump(HH\Asio\cancel($wh, new OperationCanceledException) == true);
  echo "before await\n";
  try {
    await $wh;
    echo "this should not happen!\n";
  } catch (OperationCanceledException $e) {
    echo "operation was canceled\n";
  }
  echo "after await\n";

}

async function testCancelSleepAfterAwait(): Awaitable<void> {
  echo "=== testCancelSleepAfterAwait ===\n";
  $wh = SleepWaitHandle::create(100);
  echo "before await\n";
  await $wh;
  echo "after await\n";
  var_dump(HH\Asio\cancel($wh, new OperationCanceledException) == false);
  var_dump(HH\Asio\has_finished($wh));
  await $wh;
}

async function testCancelSleepDuringAwait(): Awaitable<void> {
  echo "=== testCancelSleepDuringAwait ===\n";
  $wh = SleepWaitHandle::create(30000000);
  $cancelation = async {
    await reschedule(0);
    var_dump(HH\Asio\cancel($wh, new OperationCanceledException) == true);
  };
  echo "before await\n";
  $resv = await HH\Asio\vw(ImmVector {
      $wh,
      $cancelation,
  });
  echo "after await\n";

  try {
    $res = $resv[0]->getResult();
    echo "this should not happen\n";
  } catch (OperationCanceledException $e) {
    echo "operation was canceled\n";
  }
}

async function testCancelSleepFromBeginIOWait(): Awaitable<void> {
  echo "=== testCancelSleepFromBeginIOWait ===\n";
  $wh = SleepWaitHandle::create(30000000);

  Awaitable::setOnIOWaitEnterCallback(function() use ($wh) {
      echo "io wait enter\n";
      var_dump(HH\Asio\cancel($wh, new OperationCanceledException) == true);
    });
  Awaitable::setOnIOWaitExitCallback(function() {
      echo "io wait exit\n";
    });

  echo "before await\n";
  try {
    $res = await $wh;
    echo "this should not happen!\n";
  } catch (OperationCanceledException $e) {
    echo "operation was canceled\n";
  }
  echo "after await\n";

  Awaitable::setOnIOWaitEnterCallback(null);
  Awaitable::setOnIOWaitExitCallback(null);
}

function main() {
  testCancelInvalidAwaitables();

  HH\Asio\join(testCancelExternalThreadEventBeforeAwait());
  HH\Asio\join(testCancelExternalThreadEventAfterAwait());
  HH\Asio\join(testCancelExternalThreadEventDuringAwait());
  HH\Asio\join(testCancelExternalThreadEventFromBeginIOWait());

  HH\Asio\join(testCancelSleepBeforeAwait());
  HH\Asio\join(testCancelSleepAfterAwait());
  HH\Asio\join(testCancelSleepDuringAwait());
  HH\Asio\join(testCancelSleepFromBeginIOWait());
}

main();
