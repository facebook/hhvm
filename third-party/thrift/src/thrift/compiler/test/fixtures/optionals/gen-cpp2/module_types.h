/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/optionals/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>



namespace apache {
namespace thrift {
namespace ident {
struct red;
struct green;
struct blue;
struct alpha;
struct color;
struct licensePlate;
struct description;
struct name;
struct hasAC;
struct id;
struct name;
struct age;
struct address;
struct favoriteColor;
struct friends;
struct bestFriend;
struct petNames;
struct afraidOfAnimal;
struct vehicles;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_red
#define APACHE_THRIFT_ACCESSOR_red
APACHE_THRIFT_DEFINE_ACCESSOR(red);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_green
#define APACHE_THRIFT_ACCESSOR_green
APACHE_THRIFT_DEFINE_ACCESSOR(green);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_blue
#define APACHE_THRIFT_ACCESSOR_blue
APACHE_THRIFT_DEFINE_ACCESSOR(blue);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_alpha
#define APACHE_THRIFT_ACCESSOR_alpha
APACHE_THRIFT_DEFINE_ACCESSOR(alpha);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_color
#define APACHE_THRIFT_ACCESSOR_color
APACHE_THRIFT_DEFINE_ACCESSOR(color);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_licensePlate
#define APACHE_THRIFT_ACCESSOR_licensePlate
APACHE_THRIFT_DEFINE_ACCESSOR(licensePlate);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_description
#define APACHE_THRIFT_ACCESSOR_description
APACHE_THRIFT_DEFINE_ACCESSOR(description);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_name
#define APACHE_THRIFT_ACCESSOR_name
APACHE_THRIFT_DEFINE_ACCESSOR(name);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_hasAC
#define APACHE_THRIFT_ACCESSOR_hasAC
APACHE_THRIFT_DEFINE_ACCESSOR(hasAC);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_id
#define APACHE_THRIFT_ACCESSOR_id
APACHE_THRIFT_DEFINE_ACCESSOR(id);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_name
#define APACHE_THRIFT_ACCESSOR_name
APACHE_THRIFT_DEFINE_ACCESSOR(name);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_age
#define APACHE_THRIFT_ACCESSOR_age
APACHE_THRIFT_DEFINE_ACCESSOR(age);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_address
#define APACHE_THRIFT_ACCESSOR_address
APACHE_THRIFT_DEFINE_ACCESSOR(address);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_favoriteColor
#define APACHE_THRIFT_ACCESSOR_favoriteColor
APACHE_THRIFT_DEFINE_ACCESSOR(favoriteColor);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_friends
#define APACHE_THRIFT_ACCESSOR_friends
APACHE_THRIFT_DEFINE_ACCESSOR(friends);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_bestFriend
#define APACHE_THRIFT_ACCESSOR_bestFriend
APACHE_THRIFT_DEFINE_ACCESSOR(bestFriend);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_petNames
#define APACHE_THRIFT_ACCESSOR_petNames
APACHE_THRIFT_DEFINE_ACCESSOR(petNames);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_afraidOfAnimal
#define APACHE_THRIFT_ACCESSOR_afraidOfAnimal
APACHE_THRIFT_DEFINE_ACCESSOR(afraidOfAnimal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_vehicles
#define APACHE_THRIFT_ACCESSOR_vehicles
APACHE_THRIFT_DEFINE_ACCESSOR(vehicles);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums
namespace cpp2 {

enum class Animal {
  DOG = 1,
  CAT = 2,
  TARANTULA = 3,
};



} // cpp2

namespace std {
template<> struct hash<::cpp2::Animal> :
  ::apache::thrift::detail::enum_hash<::cpp2::Animal> {};
} // std

namespace apache { namespace thrift {


template <> struct TEnumDataStorage<::cpp2::Animal>;

template <> struct TEnumTraits<::cpp2::Animal> {
  using type = ::cpp2::Animal;

  static constexpr std::size_t const size = 3;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static bool findName(type value, folly::StringPiece* out) noexcept;
  static bool findValue(folly::StringPiece name, type* out) noexcept;

#if FOLLY_HAS_STRING_VIEW
  static bool findName(type value, std::string_view* out) noexcept {
    folly::StringPiece outp;
    return findName(value, &outp) && ((*out = outp), true);
  }
#endif
  static char const* findName(type value) noexcept {
    folly::StringPiece ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::DOG; }
  static constexpr type max() { return type::TARANTULA; }
};


}} // apache::thrift

namespace cpp2 {

using _Animal_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<Animal>;
#ifndef ANDROID
[[deprecated("use apache::thrift::util::enumNameSafe, apache::thrift::util::enumName, or apache::thrift::TEnumTraits")]]
extern const _Animal_EnumMapFactory::ValuesToNamesMapType _Animal_VALUES_TO_NAMES;
#endif
} // cpp2

// END declare_enums
// BEGIN forward_declare
namespace cpp2 {
class Color;
class Vehicle;
class Person;
} // cpp2
// END forward_declare
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

typedef ::std::int64_t PersonID;

class Color final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::red,
    ::apache::thrift::ident::green,
    ::apache::thrift::ident::blue,
    ::apache::thrift::ident::alpha
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::double_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 4;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Color;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  Color() :
      __fbthrift_field_red(),
      __fbthrift_field_green(),
      __fbthrift_field_blue(),
      __fbthrift_field_alpha() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Color(apache::thrift::FragileConstructor, double red__arg, double green__arg, double blue__arg, double alpha__arg);

  Color(Color&&) = default;

  Color(const Color&) = default;


  Color& operator=(Color&&) = default;

  Color& operator=(const Color&) = default;
 private:
  double __fbthrift_field_red;
 private:
  double __fbthrift_field_green;
 private:
  double __fbthrift_field_blue;
 private:
  double __fbthrift_field_alpha;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const Color&) const;
  bool operator<(const Color&) const;

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> red_ref() const& {
    return {this->__fbthrift_field_red, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> red_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_red), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> red_ref() & {
    return {this->__fbthrift_field_red, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> red_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_red), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> red() const& {
    return {this->__fbthrift_field_red, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> red() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_red), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> red() & {
    return {this->__fbthrift_field_red, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> red() && {
    return {static_cast<T&&>(this->__fbthrift_field_red), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> green_ref() const& {
    return {this->__fbthrift_field_green, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> green_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_green), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> green_ref() & {
    return {this->__fbthrift_field_green, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> green_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_green), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> green() const& {
    return {this->__fbthrift_field_green, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> green() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_green), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> green() & {
    return {this->__fbthrift_field_green, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> green() && {
    return {static_cast<T&&>(this->__fbthrift_field_green), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> blue_ref() const& {
    return {this->__fbthrift_field_blue, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> blue_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_blue), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> blue_ref() & {
    return {this->__fbthrift_field_blue, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> blue_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_blue), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> blue() const& {
    return {this->__fbthrift_field_blue, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> blue() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_blue), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> blue() & {
    return {this->__fbthrift_field_blue, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> blue() && {
    return {static_cast<T&&>(this->__fbthrift_field_blue), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> alpha_ref() const& {
    return {this->__fbthrift_field_alpha, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> alpha_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_alpha), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> alpha_ref() & {
    return {this->__fbthrift_field_alpha, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> alpha_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_alpha), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> alpha() const& {
    return {this->__fbthrift_field_alpha, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> alpha() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_alpha), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> alpha() & {
    return {this->__fbthrift_field_alpha, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> alpha() && {
    return {static_cast<T&&>(this->__fbthrift_field_alpha), __isset.at(3), __isset.bit(3)};
  }

  double get_red() const {
    return __fbthrift_field_red;
  }

  [[deprecated("Use `FOO.red_ref() = BAR;` instead of `FOO.set_red(BAR);`")]]
  double& set_red(double red_) {
    red_ref() = red_;
    return __fbthrift_field_red;
  }

  double get_green() const {
    return __fbthrift_field_green;
  }

  [[deprecated("Use `FOO.green_ref() = BAR;` instead of `FOO.set_green(BAR);`")]]
  double& set_green(double green_) {
    green_ref() = green_;
    return __fbthrift_field_green;
  }

  double get_blue() const {
    return __fbthrift_field_blue;
  }

  [[deprecated("Use `FOO.blue_ref() = BAR;` instead of `FOO.set_blue(BAR);`")]]
  double& set_blue(double blue_) {
    blue_ref() = blue_;
    return __fbthrift_field_blue;
  }

  double get_alpha() const {
    return __fbthrift_field_alpha;
  }

  [[deprecated("Use `FOO.alpha_ref() = BAR;` instead of `FOO.set_alpha(BAR);`")]]
  double& set_alpha(double alpha_) {
    alpha_ref() = alpha_;
    return __fbthrift_field_alpha;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Color>;
  friend void swap(Color& a, Color& b);
};

template <class Protocol_>
unsigned long Color::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class Vehicle final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::color,
    ::apache::thrift::ident::licensePlate,
    ::apache::thrift::ident::description,
    ::apache::thrift::ident::name,
    ::apache::thrift::ident::hasAC
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4,5};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::cpp2::Color>,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::bool_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 5;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Vehicle;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  Vehicle();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Vehicle(apache::thrift::FragileConstructor, ::cpp2::Color color__arg, ::std::string licensePlate__arg, ::std::string description__arg, ::std::string name__arg, bool hasAC__arg);

  Vehicle(Vehicle&&) noexcept;

  Vehicle(const Vehicle& src);


  Vehicle& operator=(Vehicle&&) noexcept;
  Vehicle& operator=(const Vehicle& src);

  ~Vehicle();

 private:
  ::cpp2::Color __fbthrift_field_color;
 private:
  ::std::string __fbthrift_field_licensePlate;
 private:
  ::std::string __fbthrift_field_description;
 private:
  ::std::string __fbthrift_field_name;
 private:
  bool __fbthrift_field_hasAC;
 private:
  apache::thrift::detail::isset_bitset<5, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const Vehicle&) const;
  bool operator<(const Vehicle&) const;

  template <typename..., typename T = ::cpp2::Color>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> color_ref() const& {
    return {this->__fbthrift_field_color, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::cpp2::Color>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> color_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_color), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::cpp2::Color>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> color_ref() & {
    return {this->__fbthrift_field_color, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::cpp2::Color>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> color_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_color), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::cpp2::Color>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> color() const& {
    return {this->__fbthrift_field_color, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::cpp2::Color>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> color() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_color), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::cpp2::Color>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> color() & {
    return {this->__fbthrift_field_color, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::cpp2::Color>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> color() && {
    return {static_cast<T&&>(this->__fbthrift_field_color), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> licensePlate_ref() const& {
    return {this->__fbthrift_field_licensePlate, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> licensePlate_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_licensePlate), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> licensePlate_ref() & {
    return {this->__fbthrift_field_licensePlate, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> licensePlate_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_licensePlate), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> licensePlate() const& {
    return {this->__fbthrift_field_licensePlate, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> licensePlate() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_licensePlate), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> licensePlate() & {
    return {this->__fbthrift_field_licensePlate, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> licensePlate() && {
    return {static_cast<T&&>(this->__fbthrift_field_licensePlate), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> description_ref() const& {
    return {this->__fbthrift_field_description, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> description_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_description), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> description_ref() & {
    return {this->__fbthrift_field_description, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> description_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_description), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> description() const& {
    return {this->__fbthrift_field_description, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> description() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_description), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> description() & {
    return {this->__fbthrift_field_description, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> description() && {
    return {static_cast<T&&>(this->__fbthrift_field_description), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> name_ref() const& {
    return {this->__fbthrift_field_name, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> name_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_name), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> name_ref() & {
    return {this->__fbthrift_field_name, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> name_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_name), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> name() const& {
    return {this->__fbthrift_field_name, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> name() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_name), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> name() & {
    return {this->__fbthrift_field_name, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> name() && {
    return {static_cast<T&&>(this->__fbthrift_field_name), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> hasAC_ref() const& {
    return {this->__fbthrift_field_hasAC, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> hasAC_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_hasAC), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> hasAC_ref() & {
    return {this->__fbthrift_field_hasAC, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> hasAC_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_hasAC), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> hasAC() const& {
    return {this->__fbthrift_field_hasAC, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> hasAC() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_hasAC), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> hasAC() & {
    return {this->__fbthrift_field_hasAC, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> hasAC() && {
    return {static_cast<T&&>(this->__fbthrift_field_hasAC), __isset.at(4), __isset.bit(4)};
  }
  const ::cpp2::Color& get_color() const&;
  ::cpp2::Color get_color() &&;

  template <typename T_Vehicle_color_struct_setter = ::cpp2::Color>
  [[deprecated("Use `FOO.color_ref() = BAR;` instead of `FOO.set_color(BAR);`")]]
  ::cpp2::Color& set_color(T_Vehicle_color_struct_setter&& color_) {
    color_ref() = std::forward<T_Vehicle_color_struct_setter>(color_);
    return __fbthrift_field_color;
  }

  const ::std::string* get_licensePlate() const& {
    return licensePlate_ref() ? std::addressof(__fbthrift_field_licensePlate) : nullptr;
  }

  ::std::string* get_licensePlate() & {
    return licensePlate_ref() ? std::addressof(__fbthrift_field_licensePlate) : nullptr;
  }
  ::std::string* get_licensePlate() && = delete;

  template <typename T_Vehicle_licensePlate_struct_setter = ::std::string>
  [[deprecated("Use `FOO.licensePlate_ref() = BAR;` instead of `FOO.set_licensePlate(BAR);`")]]
  ::std::string& set_licensePlate(T_Vehicle_licensePlate_struct_setter&& licensePlate_) {
    licensePlate_ref() = std::forward<T_Vehicle_licensePlate_struct_setter>(licensePlate_);
    return __fbthrift_field_licensePlate;
  }

  const ::std::string* get_description() const& {
    return description_ref() ? std::addressof(__fbthrift_field_description) : nullptr;
  }

  ::std::string* get_description() & {
    return description_ref() ? std::addressof(__fbthrift_field_description) : nullptr;
  }
  ::std::string* get_description() && = delete;

  template <typename T_Vehicle_description_struct_setter = ::std::string>
  [[deprecated("Use `FOO.description_ref() = BAR;` instead of `FOO.set_description(BAR);`")]]
  ::std::string& set_description(T_Vehicle_description_struct_setter&& description_) {
    description_ref() = std::forward<T_Vehicle_description_struct_setter>(description_);
    return __fbthrift_field_description;
  }

  const ::std::string* get_name() const& {
    return name_ref() ? std::addressof(__fbthrift_field_name) : nullptr;
  }

  ::std::string* get_name() & {
    return name_ref() ? std::addressof(__fbthrift_field_name) : nullptr;
  }
  ::std::string* get_name() && = delete;

  template <typename T_Vehicle_name_struct_setter = ::std::string>
  [[deprecated("Use `FOO.name_ref() = BAR;` instead of `FOO.set_name(BAR);`")]]
  ::std::string& set_name(T_Vehicle_name_struct_setter&& name_) {
    name_ref() = std::forward<T_Vehicle_name_struct_setter>(name_);
    return __fbthrift_field_name;
  }

  const bool* get_hasAC() const& {
    return hasAC_ref() ? std::addressof(__fbthrift_field_hasAC) : nullptr;
  }

  bool* get_hasAC() & {
    return hasAC_ref() ? std::addressof(__fbthrift_field_hasAC) : nullptr;
  }
  bool* get_hasAC() && = delete;

  [[deprecated("Use `FOO.hasAC_ref() = BAR;` instead of `FOO.set_hasAC(BAR);`")]]
  bool& set_hasAC(bool hasAC_) {
    hasAC_ref() = hasAC_;
    return __fbthrift_field_hasAC;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Vehicle>;
  friend void swap(Vehicle& a, Vehicle& b);
};

template <class Protocol_>
unsigned long Vehicle::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class Person final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::id,
    ::apache::thrift::ident::name,
    ::apache::thrift::ident::age,
    ::apache::thrift::ident::address,
    ::apache::thrift::ident::favoriteColor,
    ::apache::thrift::ident::friends,
    ::apache::thrift::ident::bestFriend,
    ::apache::thrift::ident::petNames,
    ::apache::thrift::ident::afraidOfAnimal,
    ::apache::thrift::ident::vehicles
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4,5,6,7,8,9,10};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::i16_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::struct_t<::cpp2::Color>,
    ::apache::thrift::type::set<::apache::thrift::type::i64_t>,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::map<::apache::thrift::type::enum_t<::cpp2::Animal>, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::enum_t<::cpp2::Animal>,
    ::apache::thrift::type::list<::apache::thrift::type::struct_t<::cpp2::Vehicle>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 10;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Person;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  Person();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Person(apache::thrift::FragileConstructor, ::cpp2::PersonID id__arg, ::std::string name__arg, ::std::int16_t age__arg, ::std::string address__arg, ::cpp2::Color favoriteColor__arg, ::std::set<::cpp2::PersonID> friends__arg, ::cpp2::PersonID bestFriend__arg, ::std::map<::cpp2::Animal, ::std::string> petNames__arg, ::cpp2::Animal afraidOfAnimal__arg, ::std::vector<::cpp2::Vehicle> vehicles__arg);

  Person(Person&&) noexcept;

  Person(const Person& src);


  Person& operator=(Person&&) noexcept;
  Person& operator=(const Person& src);

  ~Person();

 private:
  ::cpp2::PersonID __fbthrift_field_id;
 private:
  ::std::string __fbthrift_field_name;
 private:
  ::std::int16_t __fbthrift_field_age;
 private:
  ::std::string __fbthrift_field_address;
 private:
  ::cpp2::Color __fbthrift_field_favoriteColor;
 private:
  ::std::set<::cpp2::PersonID> __fbthrift_field_friends;
 private:
  ::cpp2::PersonID __fbthrift_field_bestFriend;
 private:
  ::std::map<::cpp2::Animal, ::std::string> __fbthrift_field_petNames;
 private:
  ::cpp2::Animal __fbthrift_field_afraidOfAnimal;
 private:
  ::std::vector<::cpp2::Vehicle> __fbthrift_field_vehicles;
 private:
  apache::thrift::detail::isset_bitset<10, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const Person&) const;
  bool operator<(const Person&) const;

  template <typename..., typename T = ::cpp2::PersonID>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> id_ref() const& {
    return {this->__fbthrift_field_id, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::cpp2::PersonID>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> id_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_id), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::cpp2::PersonID>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> id_ref() & {
    return {this->__fbthrift_field_id, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::cpp2::PersonID>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> id_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_id), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::cpp2::PersonID>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> id() const& {
    return {this->__fbthrift_field_id, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::cpp2::PersonID>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> id() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_id), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::cpp2::PersonID>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> id() & {
    return {this->__fbthrift_field_id, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::cpp2::PersonID>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> id() && {
    return {static_cast<T&&>(this->__fbthrift_field_id), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> name_ref() const& {
    return {this->__fbthrift_field_name, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> name_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_name), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> name_ref() & {
    return {this->__fbthrift_field_name, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> name_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_name), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> name() const& {
    return {this->__fbthrift_field_name, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> name() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_name), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> name() & {
    return {this->__fbthrift_field_name, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> name() && {
    return {static_cast<T&&>(this->__fbthrift_field_name), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> age_ref() const& {
    return {this->__fbthrift_field_age, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> age_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_age), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> age_ref() & {
    return {this->__fbthrift_field_age, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> age_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_age), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> age() const& {
    return {this->__fbthrift_field_age, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> age() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_age), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> age() & {
    return {this->__fbthrift_field_age, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> age() && {
    return {static_cast<T&&>(this->__fbthrift_field_age), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> address_ref() const& {
    return {this->__fbthrift_field_address, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> address_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_address), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> address_ref() & {
    return {this->__fbthrift_field_address, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> address_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_address), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> address() const& {
    return {this->__fbthrift_field_address, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> address() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_address), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> address() & {
    return {this->__fbthrift_field_address, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> address() && {
    return {static_cast<T&&>(this->__fbthrift_field_address), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::cpp2::Color>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> favoriteColor_ref() const& {
    return {this->__fbthrift_field_favoriteColor, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::cpp2::Color>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> favoriteColor_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_favoriteColor), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::cpp2::Color>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> favoriteColor_ref() & {
    return {this->__fbthrift_field_favoriteColor, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::cpp2::Color>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> favoriteColor_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_favoriteColor), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::cpp2::Color>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> favoriteColor() const& {
    return {this->__fbthrift_field_favoriteColor, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::cpp2::Color>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> favoriteColor() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_favoriteColor), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::cpp2::Color>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> favoriteColor() & {
    return {this->__fbthrift_field_favoriteColor, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::cpp2::Color>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> favoriteColor() && {
    return {static_cast<T&&>(this->__fbthrift_field_favoriteColor), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::set<::cpp2::PersonID>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> friends_ref() const& {
    return {this->__fbthrift_field_friends, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::set<::cpp2::PersonID>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> friends_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_friends), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::set<::cpp2::PersonID>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> friends_ref() & {
    return {this->__fbthrift_field_friends, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::set<::cpp2::PersonID>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> friends_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_friends), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::set<::cpp2::PersonID>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> friends() const& {
    return {this->__fbthrift_field_friends, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::set<::cpp2::PersonID>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> friends() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_friends), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::set<::cpp2::PersonID>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> friends() & {
    return {this->__fbthrift_field_friends, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::set<::cpp2::PersonID>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> friends() && {
    return {static_cast<T&&>(this->__fbthrift_field_friends), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::cpp2::PersonID>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> bestFriend_ref() const& {
    return {this->__fbthrift_field_bestFriend, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::cpp2::PersonID>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> bestFriend_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_bestFriend), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::cpp2::PersonID>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> bestFriend_ref() & {
    return {this->__fbthrift_field_bestFriend, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::cpp2::PersonID>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> bestFriend_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_bestFriend), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::cpp2::PersonID>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> bestFriend() const& {
    return {this->__fbthrift_field_bestFriend, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::cpp2::PersonID>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> bestFriend() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_bestFriend), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::cpp2::PersonID>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> bestFriend() & {
    return {this->__fbthrift_field_bestFriend, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::cpp2::PersonID>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> bestFriend() && {
    return {static_cast<T&&>(this->__fbthrift_field_bestFriend), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::map<::cpp2::Animal, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> petNames_ref() const& {
    return {this->__fbthrift_field_petNames, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::map<::cpp2::Animal, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> petNames_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_petNames), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::map<::cpp2::Animal, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> petNames_ref() & {
    return {this->__fbthrift_field_petNames, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::map<::cpp2::Animal, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> petNames_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_petNames), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::map<::cpp2::Animal, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> petNames() const& {
    return {this->__fbthrift_field_petNames, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::map<::cpp2::Animal, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> petNames() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_petNames), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::map<::cpp2::Animal, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> petNames() & {
    return {this->__fbthrift_field_petNames, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::map<::cpp2::Animal, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> petNames() && {
    return {static_cast<T&&>(this->__fbthrift_field_petNames), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::cpp2::Animal>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> afraidOfAnimal_ref() const& {
    return {this->__fbthrift_field_afraidOfAnimal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::cpp2::Animal>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> afraidOfAnimal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_afraidOfAnimal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::cpp2::Animal>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> afraidOfAnimal_ref() & {
    return {this->__fbthrift_field_afraidOfAnimal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::cpp2::Animal>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> afraidOfAnimal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_afraidOfAnimal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::cpp2::Animal>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> afraidOfAnimal() const& {
    return {this->__fbthrift_field_afraidOfAnimal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::cpp2::Animal>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> afraidOfAnimal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_afraidOfAnimal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::cpp2::Animal>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> afraidOfAnimal() & {
    return {this->__fbthrift_field_afraidOfAnimal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::cpp2::Animal>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> afraidOfAnimal() && {
    return {static_cast<T&&>(this->__fbthrift_field_afraidOfAnimal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::Vehicle>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> vehicles_ref() const& {
    return {this->__fbthrift_field_vehicles, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::Vehicle>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> vehicles_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_vehicles), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::Vehicle>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> vehicles_ref() & {
    return {this->__fbthrift_field_vehicles, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::Vehicle>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> vehicles_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_vehicles), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::Vehicle>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> vehicles() const& {
    return {this->__fbthrift_field_vehicles, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::Vehicle>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> vehicles() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_vehicles), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::Vehicle>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> vehicles() & {
    return {this->__fbthrift_field_vehicles, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::Vehicle>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> vehicles() && {
    return {static_cast<T&&>(this->__fbthrift_field_vehicles), __isset.at(9), __isset.bit(9)};
  }

  ::cpp2::PersonID get_id() const {
    return __fbthrift_field_id;
  }

  [[deprecated("Use `FOO.id_ref() = BAR;` instead of `FOO.set_id(BAR);`")]]
  ::cpp2::PersonID& set_id(::cpp2::PersonID id_) {
    id_ref() = id_;
    return __fbthrift_field_id;
  }

  const ::std::string& get_name() const& {
    return __fbthrift_field_name;
  }

  ::std::string get_name() && {
    return std::move(__fbthrift_field_name);
  }

  template <typename T_Person_name_struct_setter = ::std::string>
  [[deprecated("Use `FOO.name_ref() = BAR;` instead of `FOO.set_name(BAR);`")]]
  ::std::string& set_name(T_Person_name_struct_setter&& name_) {
    name_ref() = std::forward<T_Person_name_struct_setter>(name_);
    return __fbthrift_field_name;
  }

  const ::std::int16_t* get_age() const& {
    return age_ref() ? std::addressof(__fbthrift_field_age) : nullptr;
  }

  ::std::int16_t* get_age() & {
    return age_ref() ? std::addressof(__fbthrift_field_age) : nullptr;
  }
  ::std::int16_t* get_age() && = delete;

  [[deprecated("Use `FOO.age_ref() = BAR;` instead of `FOO.set_age(BAR);`")]]
  ::std::int16_t& set_age(::std::int16_t age_) {
    age_ref() = age_;
    return __fbthrift_field_age;
  }

  const ::std::string* get_address() const& {
    return address_ref() ? std::addressof(__fbthrift_field_address) : nullptr;
  }

  ::std::string* get_address() & {
    return address_ref() ? std::addressof(__fbthrift_field_address) : nullptr;
  }
  ::std::string* get_address() && = delete;

  template <typename T_Person_address_struct_setter = ::std::string>
  [[deprecated("Use `FOO.address_ref() = BAR;` instead of `FOO.set_address(BAR);`")]]
  ::std::string& set_address(T_Person_address_struct_setter&& address_) {
    address_ref() = std::forward<T_Person_address_struct_setter>(address_);
    return __fbthrift_field_address;
  }
  const ::cpp2::Color* get_favoriteColor() const&;
  ::cpp2::Color* get_favoriteColor() &;
  ::cpp2::Color* get_favoriteColor() && = delete;

  template <typename T_Person_favoriteColor_struct_setter = ::cpp2::Color>
  [[deprecated("Use `FOO.favoriteColor_ref() = BAR;` instead of `FOO.set_favoriteColor(BAR);`")]]
  ::cpp2::Color& set_favoriteColor(T_Person_favoriteColor_struct_setter&& favoriteColor_) {
    favoriteColor_ref() = std::forward<T_Person_favoriteColor_struct_setter>(favoriteColor_);
    return __fbthrift_field_favoriteColor;
  }
  const ::std::set<::cpp2::PersonID>* get_friends() const&;
  ::std::set<::cpp2::PersonID>* get_friends() &;
  ::std::set<::cpp2::PersonID>* get_friends() && = delete;

  template <typename T_Person_friends_struct_setter = ::std::set<::cpp2::PersonID>>
  [[deprecated("Use `FOO.friends_ref() = BAR;` instead of `FOO.set_friends(BAR);`")]]
  ::std::set<::cpp2::PersonID>& set_friends(T_Person_friends_struct_setter&& friends_) {
    friends_ref() = std::forward<T_Person_friends_struct_setter>(friends_);
    return __fbthrift_field_friends;
  }

  const ::cpp2::PersonID* get_bestFriend() const& {
    return bestFriend_ref() ? std::addressof(__fbthrift_field_bestFriend) : nullptr;
  }

  ::cpp2::PersonID* get_bestFriend() & {
    return bestFriend_ref() ? std::addressof(__fbthrift_field_bestFriend) : nullptr;
  }
  ::cpp2::PersonID* get_bestFriend() && = delete;

  [[deprecated("Use `FOO.bestFriend_ref() = BAR;` instead of `FOO.set_bestFriend(BAR);`")]]
  ::cpp2::PersonID& set_bestFriend(::cpp2::PersonID bestFriend_) {
    bestFriend_ref() = bestFriend_;
    return __fbthrift_field_bestFriend;
  }
  const ::std::map<::cpp2::Animal, ::std::string>* get_petNames() const&;
  ::std::map<::cpp2::Animal, ::std::string>* get_petNames() &;
  ::std::map<::cpp2::Animal, ::std::string>* get_petNames() && = delete;

  template <typename T_Person_petNames_struct_setter = ::std::map<::cpp2::Animal, ::std::string>>
  [[deprecated("Use `FOO.petNames_ref() = BAR;` instead of `FOO.set_petNames(BAR);`")]]
  ::std::map<::cpp2::Animal, ::std::string>& set_petNames(T_Person_petNames_struct_setter&& petNames_) {
    petNames_ref() = std::forward<T_Person_petNames_struct_setter>(petNames_);
    return __fbthrift_field_petNames;
  }

  const ::cpp2::Animal* get_afraidOfAnimal() const& {
    return afraidOfAnimal_ref() ? std::addressof(__fbthrift_field_afraidOfAnimal) : nullptr;
  }

  ::cpp2::Animal* get_afraidOfAnimal() & {
    return afraidOfAnimal_ref() ? std::addressof(__fbthrift_field_afraidOfAnimal) : nullptr;
  }
  ::cpp2::Animal* get_afraidOfAnimal() && = delete;

  [[deprecated("Use `FOO.afraidOfAnimal_ref() = BAR;` instead of `FOO.set_afraidOfAnimal(BAR);`")]]
  ::cpp2::Animal& set_afraidOfAnimal(::cpp2::Animal afraidOfAnimal_) {
    afraidOfAnimal_ref() = afraidOfAnimal_;
    return __fbthrift_field_afraidOfAnimal;
  }
  const ::std::vector<::cpp2::Vehicle>* get_vehicles() const&;
  ::std::vector<::cpp2::Vehicle>* get_vehicles() &;
  ::std::vector<::cpp2::Vehicle>* get_vehicles() && = delete;

  template <typename T_Person_vehicles_struct_setter = ::std::vector<::cpp2::Vehicle>>
  [[deprecated("Use `FOO.vehicles_ref() = BAR;` instead of `FOO.set_vehicles(BAR);`")]]
  ::std::vector<::cpp2::Vehicle>& set_vehicles(T_Person_vehicles_struct_setter&& vehicles_) {
    vehicles_ref() = std::forward<T_Person_vehicles_struct_setter>(vehicles_);
    return __fbthrift_field_vehicles;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Person>;
  friend void swap(Person& a, Person& b);
};

template <class Protocol_>
unsigned long Person::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // cpp2
