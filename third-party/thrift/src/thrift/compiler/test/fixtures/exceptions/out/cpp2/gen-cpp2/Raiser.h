/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/exceptions/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/service_h.h>

#include "thrift/compiler/test/fixtures/exceptions/gen-cpp2/RaiserAsyncClient.h"
#include "thrift/compiler/test/fixtures/exceptions/gen-cpp2/module_types.h"

namespace folly {
  class IOBuf;
  class IOBufQueue;
}
namespace apache { namespace thrift {
  class Cpp2RequestContext;
  class BinaryProtocolReader;
  class CompactProtocolReader;
  namespace transport { class THeader; }
}}

namespace cpp2 {
class Raiser;
class RaiserAsyncProcessor;

class RaiserServiceInfoHolder : public apache::thrift::ServiceInfoHolder {
  public:
   apache::thrift::ServiceRequestInfoMap const& requestInfoMap() const override;
   static apache::thrift::ServiceRequestInfoMap staticRequestInfoMap();
};
} // namespace cpp2

namespace apache::thrift {
template <>
class ServiceHandler<::cpp2::Raiser> : public apache::thrift::ServerInterface {
  static_assert(!folly::is_detected_v<::apache::thrift::detail::st::detect_complete, ::cpp2::Raiser>, "Definition collision with service tag. Either rename the Thrift service using @cpp.Name annotation or rename the conflicting C++ type.");

 public:
  std::string_view getGeneratedName() const override { return "Raiser"; }

  typedef ::cpp2::RaiserAsyncProcessor ProcessorType;
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override;
  CreateMethodMetadataResult createMethodMetadata() override;
  bool isThriftGenerated() const override final { return true; }
 private:
  std::optional<std::reference_wrapper<apache::thrift::ServiceRequestInfoMap const>> getServiceRequestInfoMap() const;
 public:

  virtual void sync_doBland();
  [[deprecated("Use sync_doBland instead")]] virtual void doBland();
  virtual folly::Future<folly::Unit> future_doBland();
  virtual folly::SemiFuture<folly::Unit> semifuture_doBland();
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<void> co_doBland();
  virtual folly::coro::Task<void> co_doBland(apache::thrift::RequestParams params);
#endif
  virtual void async_tm_doBland(apache::thrift::HandlerCallbackPtr<void> callback);
  virtual void sync_doRaise();
  [[deprecated("Use sync_doRaise instead")]] virtual void doRaise();
  virtual folly::Future<folly::Unit> future_doRaise();
  virtual folly::SemiFuture<folly::Unit> semifuture_doRaise();
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<void> co_doRaise();
  virtual folly::coro::Task<void> co_doRaise(apache::thrift::RequestParams params);
#endif
  virtual void async_tm_doRaise(apache::thrift::HandlerCallbackPtr<void> callback);
  virtual void sync_get200(::std::string& /*_return*/);
  [[deprecated("Use sync_get200 instead")]] virtual void get200(::std::string& /*_return*/);
  virtual folly::Future<std::unique_ptr<::std::string>> future_get200();
  virtual folly::SemiFuture<std::unique_ptr<::std::string>> semifuture_get200();
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::std::string>> co_get200();
  virtual folly::coro::Task<std::unique_ptr<::std::string>> co_get200(apache::thrift::RequestParams params);
#endif
  virtual void async_tm_get200(apache::thrift::HandlerCallbackPtr<std::unique_ptr<::std::string>> callback);
  virtual void sync_get500(::std::string& /*_return*/);
  [[deprecated("Use sync_get500 instead")]] virtual void get500(::std::string& /*_return*/);
  virtual folly::Future<std::unique_ptr<::std::string>> future_get500();
  virtual folly::SemiFuture<std::unique_ptr<::std::string>> semifuture_get500();
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::std::string>> co_get500();
  virtual folly::coro::Task<std::unique_ptr<::std::string>> co_get500(apache::thrift::RequestParams params);
#endif
  virtual void async_tm_get500(apache::thrift::HandlerCallbackPtr<std::unique_ptr<::std::string>> callback);
 private:
  static ::cpp2::RaiserServiceInfoHolder __fbthrift_serviceInfoHolder;
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_doBland{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_doRaise{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_get200{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_get500{apache::thrift::detail::si::InvocationType::AsyncTm};
 public:

  virtual void fbthrift_execute_decorators_before_doBland(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  virtual void fbthrift_execute_decorators_after_doBland(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  static void fbthrift_invoke_decorator_after_doBland(void* iface, apache::thrift::Cpp2RequestContext* ctx) {
    static_cast<ServiceHandler<::cpp2::Raiser>*>(iface)->fbthrift_execute_decorators_after_doBland(*ctx);
  }
  virtual void fbthrift_execute_decorators_before_doRaise(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  virtual void fbthrift_execute_decorators_after_doRaise(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  static void fbthrift_invoke_decorator_after_doRaise(void* iface, apache::thrift::Cpp2RequestContext* ctx) {
    static_cast<ServiceHandler<::cpp2::Raiser>*>(iface)->fbthrift_execute_decorators_after_doRaise(*ctx);
  }
  virtual void fbthrift_execute_decorators_before_get200(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  virtual void fbthrift_execute_decorators_after_get200(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorReturnType<::std::string>::type /*result*/) {}
  static void fbthrift_invoke_decorator_after_get200(void* iface, apache::thrift::Cpp2RequestContext* ctx, apache::thrift::detail::DecoratorReturnType<::std::string>::type result) {
    static_cast<ServiceHandler<::cpp2::Raiser>*>(iface)->fbthrift_execute_decorators_after_get200(*ctx, result);
  }
  virtual void fbthrift_execute_decorators_before_get500(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  virtual void fbthrift_execute_decorators_after_get500(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorReturnType<::std::string>::type /*result*/) {}
  static void fbthrift_invoke_decorator_after_get500(void* iface, apache::thrift::Cpp2RequestContext* ctx, apache::thrift::detail::DecoratorReturnType<::std::string>::type result) {
    static_cast<ServiceHandler<::cpp2::Raiser>*>(iface)->fbthrift_execute_decorators_after_get500(*ctx, result);
  }
};

namespace detail {
template <> struct TSchemaAssociation<::cpp2::Raiser, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -4294775116102366513;
  static constexpr ::std::string_view definitionKey = {"\x75\x1a\x2c\xda\xc4\xdb\xff\x78\x5d\xcd\xcc\x07\x4e\x97\x5c\x23", 16};
};
}
} // namespace apache::thrift

namespace cpp2 {
using RaiserSvIf [[deprecated("Use apache::thrift::ServiceHandler<Raiser> instead")]] = ::apache::thrift::ServiceHandler<Raiser>;
} // namespace cpp2

namespace cpp2 {
class RaiserSvNull : public ::apache::thrift::ServiceHandler<Raiser> {
 public:
  void doBland() override;
  void doRaise() override;
  void get200(::std::string& /*_return*/) override;
  void get500(::std::string& /*_return*/) override;
};

class RaiserAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessorBase {
 public:
  std::string_view getServiceName() override;
  void getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) override;
  using BaseAsyncProcessor = void;
 protected:
  ::apache::thrift::ServiceHandler<::cpp2::Raiser>* iface_;
 public:
  void processSerializedCompressedRequestWithMetadata(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) override;
  void executeRequest(apache::thrift::ServerRequest&& serverRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata) override;
 public:
  using ProcessFuncs = GeneratedAsyncProcessorBase::ProcessFuncs<RaiserAsyncProcessor>;
  using ProcessMap = GeneratedAsyncProcessorBase::ProcessMap<ProcessFuncs>;
  static const RaiserAsyncProcessor::ProcessMap& getOwnProcessMap();
 private:
  static const RaiserAsyncProcessor::ProcessMap kOwnProcessMap_;
 private:
  //
  // Service Methods
  //

  //
  // Method 'doBland'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_doBland(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_doBland(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_doBland(
      apache::thrift::ContextStack* ctx);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_doBland(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'doBland'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'doRaise'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_doRaise(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_doRaise(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_doRaise(
      apache::thrift::ContextStack* ctx);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_doRaise(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'doRaise'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'get200'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_get200(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_get200(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_get200(
      apache::thrift::ContextStack* ctx,
      ::std::string const& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_get200(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'get200'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'get500'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_get500(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_get500(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_get500(
      apache::thrift::ContextStack* ctx,
      ::std::string const& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_get500(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'get500'
  //

  //
  // End of Service Methods
  //
 public:
  RaiserAsyncProcessor(::apache::thrift::ServiceHandler<::cpp2::Raiser>* iface) :
      iface_(iface) {}
  ~RaiserAsyncProcessor() override {}
};

} // namespace cpp2
