Parsed decls:

{ Direct_decl_parser.classes =
  { "\\E" ->
    { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
      sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cenum;
      sc_name = ([4:6-7], "\\E"); sc_tparams = []; sc_where_constraints = [];
      sc_extends =
      [(Rhint (root|enum_user_attributes.php line 4, characters 6-6),
        (Tapply (([4:6-7], "\\HH\\BuiltinEnum"),
           [(Rhint (root|enum_user_attributes.php line 4, characters 6-6),
             (Tapply (([4:6-7], "\\E"), [])))]
           )))
        ];
      sc_uses = []; sc_xhp_attr_uses = []; sc_req_extends = [];
      sc_req_implements = []; sc_implements = [];
      sc_consts =
      [{ Shallow_decl_defs.scc_abstract = false; scc_name = ([5:3-4], "A");
         scc_type =
         (Rwitness (root|enum_user_attributes.php line 5, characters 7-9),
          (Tprim Tstring))
         };
        { Shallow_decl_defs.scc_abstract = false; scc_name = ([6:3-4], "B");
          scc_type =
          (Rwitness (root|enum_user_attributes.php line 6, characters 7-9),
           (Tprim Tstring))
          }
        ];
      sc_typeconsts = []; sc_pu_enums = []; sc_props = []; sc_sprops = [];
      sc_constructor = None; sc_static_methods = []; sc_methods = [];
      sc_user_attributes =
      [{ Typing_defs_core.ua_name = ([3:18-21], "\\Bar");
         ua_classname_params = [] };
        { Typing_defs_core.ua_name = ([3:3-6], "\\Foo");
          ua_classname_params = [] }
        ];
      sc_enum_type =
      (Some { te_base =
              (Rhint (root|enum_user_attributes.php line 4, characters 10-15),
               (Tprim Tstring));
              te_constraint = None });
      sc_decl_errors = <opaque> } };
  funs = {}; typedefs = {}; consts = {} }

They matched!
