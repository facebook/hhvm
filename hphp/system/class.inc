// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"get_declared_classes", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.get-declared-classes.php )\n *\n * Gets the declared classes.\n *\n * @return     map     Returns an array of the names of the declared\n *                     classes in the current script.\n *\n *                     Note that depending on what extensions you have\n *                     compiled or loaded into PHP, additional classes\n *                     could be present. This means that you will not be\n *                     able to define your own classes using these names.\n *                     There is a list of predefined classes in the\n *                     Predefined Classes section of the appendices.\n */", 
"get_declared_interfaces", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.get-declared-interfaces.php )\n *\n * Gets the declared interfaces.\n *\n * @return     map     Returns an array of the names of the declared\n *                     interfaces in the current script.\n */", 
"get_declared_traits", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.get-declared-traits.php\n * )\n *\n * Gets the declared traits.\n *\n * @return     map     Returns an array of the names of the declared traits\n *                     in the current script.\n */", 
"class_exists", T(Boolean), S(0), "class_name", T(String), NULL, S(0), NULL, S(0), "autoload", T(Boolean), "b:1;", S(4), "true", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.class-exists.php )\n *\n * This function checks whether or not the given class has been defined.\n *\n * @class_name string  The class name. The name is matched in a\n *                     case-insensitive manner.\n * @autoload   bool    Whether or not to call __autoload by default.\n *\n * @return     bool    Returns TRUE if class_name is a defined class, FALSE\n *                     otherwise.\n */", 
"interface_exists", T(Boolean), S(0), "interface_name", T(String), NULL, S(0), NULL, S(0), "autoload", T(Boolean), "b:1;", S(4), "true", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.interface-exists.php )\n *\n * Checks if the given interface has been defined.\n *\n * @interface_name\n *             string  The interface name\n * @autoload   bool    Whether to call __autoload or not by default.\n *\n * @return     bool    Returns TRUE if the interface given by\n *                     interface_name has been defined, FALSE otherwise.\n */", 
"trait_exists", T(Boolean), S(0), "trait_name", T(String), NULL, S(0), NULL, S(0), "autoload", T(Boolean), "b:1;", S(4), "true", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.trait-exists.php )\n *\n * Checks if the given trait has been defined.\n *\n * @trait_name string  The trait name\n * @autoload   bool    Whether to call __autoload or not by default.\n *\n * @return     bool    Returns TRUE if the trait given by trait_name has\n *                     been defined, FALSE otherwise.\n */", 
"get_class_methods", T(Array), S(0), "class_or_object", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.get-class-methods.php )\n *\n * Gets the class methods names.\n *\n * @class_or_object\n *             mixed   The class name or an object instance\n *\n * @return     map     Returns an array of method names defined for the\n *                     class specified by class_name. In case of an error,\n *                     it returns NULL.\n */", 
"get_class_vars", T(Array), S(0), "class_name", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.get-class-vars.php )\n *\n * Get the default properties of the given class.\n *\n * @class_name string  The class name\n *\n * @return     map     Returns an associative array of declared properties\n *                     visible from the current scope, with their default\n *                     value. The resulting array elements are in the form\n *                     of varname => value.\n */", 
"get_class_constants", T(Array), S(0), "class_name", T(String), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Get the constants of the given class.\n *\n * @class_name string  The class name\n *\n * @return     map     Returns an associative array of constants with their\n *                     values.\n */", 
"get_class", T(Variant), S(0), "object", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.get-class.php )\n *\n * Gets the name of the class of the given object.\n *\n * @object     mixed   The tested object. This parameter may be omitted\n *                     when inside a class.\n *\n * @return     mixed   Returns the name of the class of which object is an\n *                     instance. Returns FALSE if object is not an object.\n *\n *                     If object is omitted when inside a class, the name\n *                     of that class is returned.\n */", 
"get_parent_class", T(Variant), S(0), "object", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.get-parent-class.php )\n *\n * Retrieves the parent class name for object or class.\n *\n * @object     mixed   The tested object or class name\n *\n * @return     mixed   Returns the name of the parent class of the class of\n *                     which object is an instance or the name.\n *\n *                     If the object does not have a parent FALSE will be\n *                     returned.\n *\n *                     If called without parameter outside object, this\n *                     function returns FALSE.\n */", 
"is_a", T(Boolean), S(0), "class_or_object", T(Variant), NULL, S(0), NULL, S(0), "class_name", T(String), NULL, S(0), NULL, S(0), "allow_string", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.is-a.php )\n *\n * Checks if the given object is of this class or has this class as one of\n * its parents.\n *\n * @class_or_object\n *             mixed   The tested object\n * @class_name string  The class name\n * @allow_string\n *             bool    If this parameter set to false (default), string\n *                     class name as object is not allowed. This also\n *                     prevents from calling autoloader if the class\n *                     doesn't exist.\n *\n * @return     bool    Returns TRUE if the object is of this class or has\n *                     this class as one of its parents, FALSE otherwise.\n */", 
"is_subclass_of", T(Boolean), S(0), "class_or_object", T(Variant), NULL, S(0), NULL, S(0), "class_name", T(String), NULL, S(0), NULL, S(0), "allow_string", T(Boolean), "b:1;", S(4), "true", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.is-subclass-of.php )\n *\n * Checks if the given object has the class class_name as one of its\n * parents.\n *\n * @class_or_object\n *             mixed   A class name or an object instance\n * @class_name string  The class name\n * @allow_string\n *             bool    If this parameter set to false, string class name as\n *                     object is not allowed. This also prevents from\n *                     calling autoloader if the class doesn't exist.\n *\n * @return     bool    This function returns TRUE if the object object,\n *                     belongs to a class which is a subclass of\n *                     class_name, FALSE otherwise.\n */", 
"method_exists", T(Boolean), S(0), "class_or_object", T(Variant), NULL, S(0), NULL, S(0), "method_name", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.method-exists.php )\n *\n * Checks if the class method exists in the given object.\n *\n * @class_or_object\n *             mixed   An object instance or a class name\n * @method_name\n *             string  The method name\n *\n * @return     bool    Returns TRUE if the method given by method_name has\n *                     been defined for the given object, FALSE otherwise.\n */", 
"property_exists", T(Variant), S(0), "class_or_object", T(Variant), NULL, S(0), NULL, S(0), "property", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.property-exists.php )\n *\n * This function checks if the given property exists in the specified\n * class.\n *\n * As opposed with isset(), property_exists() returns TRUE even if the\n * property has the value NULL.\n *\n * @class_or_object\n *             mixed   The class name or an object of the class to test for\n * @property   string  The name of the property\n *\n * @return     mixed   Returns TRUE if the property exists, FALSE if it\n *                     doesn't exist or NULL in case of an error.\n */", 
"get_object_vars", T(Variant), S(0), "object", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.get-object-vars.php )\n *\n * Gets the accessible non-static properties of the given object according\n * to scope.\n *\n * @object     mixed   An object instance.\n *\n * @return     mixed   Returns an associative array of defined object\n *                     accessible non-static properties for the specified\n *                     object in scope. If a property have not been\n *                     assigned a value, it will be returned with a NULL\n *                     value.\n */", 
"call_user_method_array", T(Variant), S(0), "method_name", T(String), NULL, S(0), NULL, S(0), "obj", T(Variant), NULL, S(0), NULL, S(1), "paramarr", T(Array), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.call-user-method-array.php )\n *\n *\n * @method_name\n *             string  The method name being called.\n * @obj        mixed   The object that method_name is being called on.\n * @paramarr   vector  An array of parameters.\n *\n * @return     mixed\n */", 
"call_user_method", T(Variant), S(0), "method_name", T(String), NULL, S(0), NULL, S(0), "obj", T(Variant), NULL, S(0), NULL, S(1), NULL, S(147456), "/**\n * ( excerpt from http://php.net/manual/en/function.call-user-method.php )\n *\n *\n * @method_name\n *             string  The method name being called.\n * @obj        mixed   The object that method_name is being called on.\n *\n * @return     mixed\n */", 
"class_alias", T(Boolean), S(0), "original", T(String), NULL, S(0), NULL, S(0), "alias", T(String), NULL, S(0), NULL, S(0), "autoload", T(Boolean), "b:1;", S(4), "true", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.class-alias.php )\n *\n *\n * @original   string  The original class.\n * @alias      string  The alias name for the class.\n * @autoload   bool    Whether do autoload if the original class is not\n *                     found.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2

#endif
