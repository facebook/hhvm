// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.1

// <auto-generated>
//
// Generated from file `class_demo.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#include <class_demo.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

static const ::std::string __com__jd__CommontIceRpcService__getClassDemo_name = "getClassDemo";

static const ::std::string __com__jd__CommontIceRpcService__newClassDemo_name = "newClassDemo";

static const ::std::string __com__jd__CommontIceRpcService__getClassDemoS_name = "getClassDemoS";

static const ::std::string __com__jd__CommontIceRpcService__setClassDemos_name = "setClassDemos";

static const ::std::string __com__jd__CommontIceRpcService__getLongList_name = "getLongList";

static const ::std::string __com__jd__CommontIceRpcService__setLongList_name = "setLongList";

static const ::std::string __com__jd__CommontIceRpcService__getOtherCommentById_name = "getOtherCommentById";

::Ice::Object* IceInternal::upCast(::com::jd::A* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::com::jd::A* p) { return p; }

::Ice::Object* IceInternal::upCast(::com::jd::B* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::com::jd::B* p) { return p; }

::Ice::Object* IceInternal::upCast(::com::jd::ClassDemo* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::com::jd::ClassDemo* p) { return p; }

::Ice::Object* IceInternal::upCast(::com::jd::CommontIceRpcService* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::com::jd::CommontIceRpcService* p) { return p; }

void
com::jd::__read(::IceInternal::BasicStream* __is, ::com::jd::APrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::com::jd::A;
        v->__copyFrom(proxy);
    }
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
com::jd::ice_writeAPrx(const ::Ice::OutputStreamPtr& __outS, const ::com::jd::APrx& v)
{
    __outS->write(v);
}

void
com::jd::ice_readAPrx(const ::Ice::InputStreamPtr& __inS, ::com::jd::APrx& v)
{
    __inS->read(v);
}

void
com::jd::ice_writeA(const ::Ice::OutputStreamPtr& __outS, const ::com::jd::APtr& v)
{
    __outS->writeObject(v);
}

void
com::jd::ice_readA(const ::Ice::InputStreamPtr& __inS, ::com::jd::APtr& __v)
{
    __inS->read(__v);
}
#endif

void
com::jd::__read(::IceInternal::BasicStream* __is, ::com::jd::BPrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::com::jd::B;
        v->__copyFrom(proxy);
    }
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
com::jd::ice_writeBPrx(const ::Ice::OutputStreamPtr& __outS, const ::com::jd::BPrx& v)
{
    __outS->write(v);
}

void
com::jd::ice_readBPrx(const ::Ice::InputStreamPtr& __inS, ::com::jd::BPrx& v)
{
    __inS->read(v);
}

void
com::jd::ice_writeB(const ::Ice::OutputStreamPtr& __outS, const ::com::jd::BPtr& v)
{
    __outS->writeObject(v);
}

void
com::jd::ice_readB(const ::Ice::InputStreamPtr& __inS, ::com::jd::BPtr& __v)
{
    __inS->read(__v);
}
#endif

void
com::jd::__read(::IceInternal::BasicStream* __is, ::com::jd::ClassDemoPrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::com::jd::ClassDemo;
        v->__copyFrom(proxy);
    }
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
com::jd::ice_writeClassDemoPrx(const ::Ice::OutputStreamPtr& __outS, const ::com::jd::ClassDemoPrx& v)
{
    __outS->write(v);
}

void
com::jd::ice_readClassDemoPrx(const ::Ice::InputStreamPtr& __inS, ::com::jd::ClassDemoPrx& v)
{
    __inS->read(v);
}

void
com::jd::ice_writeClassDemo(const ::Ice::OutputStreamPtr& __outS, const ::com::jd::ClassDemoPtr& v)
{
    __outS->writeObject(v);
}

void
com::jd::ice_readClassDemo(const ::Ice::InputStreamPtr& __inS, ::com::jd::ClassDemoPtr& __v)
{
    __inS->read(__v);
}
#endif

void
com::jd::__read(::IceInternal::BasicStream* __is, ::com::jd::CommontIceRpcServicePrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::com::jd::CommontIceRpcService;
        v->__copyFrom(proxy);
    }
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
com::jd::ice_writeCommontIceRpcServicePrx(const ::Ice::OutputStreamPtr& __outS, const ::com::jd::CommontIceRpcServicePrx& v)
{
    __outS->write(v);
}

void
com::jd::ice_readCommontIceRpcServicePrx(const ::Ice::InputStreamPtr& __inS, ::com::jd::CommontIceRpcServicePrx& v)
{
    __inS->read(v);
}

void
com::jd::ice_writeCommontIceRpcService(const ::Ice::OutputStreamPtr& __outS, const ::com::jd::CommontIceRpcServicePtr& v)
{
    __outS->writeObject(v);
}

void
com::jd::ice_readCommontIceRpcService(const ::Ice::InputStreamPtr& __inS, ::com::jd::CommontIceRpcServicePtr& __v)
{
    __inS->read(__v);
}
#endif

void
com::jd::__writeClassDemoS(::IceInternal::BasicStream* __os, const ::com::jd::ClassDemoPtr* begin, const ::com::jd::ClassDemoPtr* end)
{
    ::Ice::Int size = static_cast< ::Ice::Int>(end - begin);
    __os->writeSize(size);
    for(int i = 0; i < size; ++i)
    {
        __os->write(::Ice::ObjectPtr(::IceInternal::upCast(begin[i].get())));
    }
}

void
com::jd::__readClassDemoS(::IceInternal::BasicStream* __is, ::com::jd::ClassDemoS& v)
{
    ::Ice::Int sz;
    __is->readAndCheckSeqSize(4, sz);
    v.resize(sz);
    for(int i = 0; i < sz; ++i)
    {
        __is->read(::com::jd::__patch__ClassDemoPtr, &v[i]);
    }
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
com::jd::ice_writeClassDemoS(const ::Ice::OutputStreamPtr& __outS, const ::com::jd::ClassDemoS& v)
{
    __outS->writeSize(::Ice::Int(v.size()));
    ::com::jd::ClassDemoS::const_iterator p;
    for(p = v.begin(); p != v.end(); ++p)
    {
        __outS->write((*p));
    }
}

void
com::jd::ice_readClassDemoS(const ::Ice::InputStreamPtr& __inS, ::com::jd::ClassDemoS& v)
{
    ::Ice::Int sz = __inS->readAndCheckSeqSize(4);
    v.resize(sz);
    for(int i = 0; i < sz; ++i)
    {
        __inS->read(v[i]);
    }
}
#endif

com::jd::RpcException::RpcException(::Ice::Int __ice_resultCode, const ::std::string& __ice_msg) :
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    UserException(),
#else
    ::Ice::UserException(),
#endif
    resultCode(__ice_resultCode),
    msg(__ice_msg)
{
}

com::jd::RpcException::~RpcException() throw()
{
}

static const char* __com__jd__RpcException_name = "com::jd::RpcException";

::std::string
com::jd::RpcException::ice_name() const
{
    return __com__jd__RpcException_name;
}

::Ice::Exception*
com::jd::RpcException::ice_clone() const
{
    return new RpcException(*this);
}

void
com::jd::RpcException::ice_throw() const
{
    throw *this;
}

void
com::jd::RpcException::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(::std::string("::com::jd::RpcException"), false);
    __os->startWriteSlice();
    __os->write(resultCode);
    __os->write(msg);
    __os->endWriteSlice();
}

void
com::jd::RpcException::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->read(myId, false);
    }
    __is->startReadSlice();
    __is->read(resultCode);
    __is->read(msg);
    __is->endReadSlice();
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
com::jd::RpcException::__write(const ::Ice::OutputStreamPtr& __outS) const
{
    __outS->write(::std::string("::com::jd::RpcException"));
    __outS->startSlice();
    __outS->write(resultCode);
    __outS->write(msg);
    __outS->endSlice();
}

void
com::jd::RpcException::__read(const ::Ice::InputStreamPtr& __inS, bool __rid)
{
    if(__rid)
    {
        std::string s;
        __inS->read(s);
    }
    __inS->startSlice();
    __inS->read(resultCode);
    __inS->read(msg);
    __inS->endSlice();
}
#endif

struct __F__com__jd__RpcException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow()
    {
        throw ::com::jd::RpcException();
    }
};

static ::IceInternal::UserExceptionFactoryPtr __F__com__jd__RpcException__Ptr = new __F__com__jd__RpcException;

const ::IceInternal::UserExceptionFactoryPtr&
com::jd::RpcException::ice_factory()
{
    return __F__com__jd__RpcException__Ptr;
}

class __F__com__jd__RpcException__Init
{
public:

    __F__com__jd__RpcException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::com::jd::RpcException", ::com::jd::RpcException::ice_factory());
    }

    ~__F__com__jd__RpcException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::com::jd::RpcException");
    }
};

static __F__com__jd__RpcException__Init __F__com__jd__RpcException__i;

#ifdef __APPLE__
extern "C" { void __F__com__jd__RpcException__initializer() {} }
#endif

const ::std::string&
IceProxy::com::jd::A::ice_staticId()
{
    return ::com::jd::A::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::com::jd::A::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::com::jd::A);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::com::jd::A::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::com::jd::A);
}

::IceProxy::Ice::Object*
IceProxy::com::jd::A::__newInstance() const
{
    return new A;
}

const ::std::string&
IceProxy::com::jd::B::ice_staticId()
{
    return ::com::jd::B::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::com::jd::B::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::com::jd::B);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::com::jd::B::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::com::jd::B);
}

::IceProxy::Ice::Object*
IceProxy::com::jd::B::__newInstance() const
{
    return new B;
}

const ::std::string&
IceProxy::com::jd::ClassDemo::ice_staticId()
{
    return ::com::jd::ClassDemo::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::com::jd::ClassDemo::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::com::jd::ClassDemo);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::com::jd::ClassDemo::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::com::jd::ClassDemo);
}

::IceProxy::Ice::Object*
IceProxy::com::jd::ClassDemo::__newInstance() const
{
    return new ClassDemo;
}

::com::jd::ClassDemoPtr
IceProxy::com::jd::CommontIceRpcService::getClassDemo(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__com__jd__CommontIceRpcService__getClassDemo_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::com::jd::CommontIceRpcService* __del = dynamic_cast< ::IceDelegate::com::jd::CommontIceRpcService*>(__delBase.get());
            return __del->getClassDemo(__ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::com::jd::CommontIceRpcService::begin_getClassDemo(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__com__jd__CommontIceRpcService__getClassDemo_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __com__jd__CommontIceRpcService__getClassDemo_name, __del, __cookie);
    try
    {
        __result->__prepare(__com__jd__CommontIceRpcService__getClassDemo_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::com::jd::ClassDemoPtr
IceProxy::com::jd::CommontIceRpcService::end_getClassDemo(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __com__jd__CommontIceRpcService__getClassDemo_name);
    ::com::jd::ClassDemoPtr __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(::com::jd::__patch__ClassDemoPtr, &__ret);
    __is->readPendingObjects();
    __is->endReadEncaps();
    return __ret;
}

::com::jd::ClassDemoPtr
IceProxy::com::jd::CommontIceRpcService::newClassDemo(const ::com::jd::ClassDemoPtr& cd, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__com__jd__CommontIceRpcService__newClassDemo_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::com::jd::CommontIceRpcService* __del = dynamic_cast< ::IceDelegate::com::jd::CommontIceRpcService*>(__delBase.get());
            return __del->newClassDemo(cd, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::com::jd::CommontIceRpcService::begin_newClassDemo(const ::com::jd::ClassDemoPtr& cd, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__com__jd__CommontIceRpcService__newClassDemo_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __com__jd__CommontIceRpcService__newClassDemo_name, __del, __cookie);
    try
    {
        __result->__prepare(__com__jd__CommontIceRpcService__newClassDemo_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(::Ice::ObjectPtr(::IceInternal::upCast(cd.get())));
        __os->writePendingObjects();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::com::jd::ClassDemoPtr
IceProxy::com::jd::CommontIceRpcService::end_newClassDemo(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __com__jd__CommontIceRpcService__newClassDemo_name);
    ::com::jd::ClassDemoPtr __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(::com::jd::__patch__ClassDemoPtr, &__ret);
    __is->readPendingObjects();
    __is->endReadEncaps();
    return __ret;
}

::com::jd::ClassDemoS
IceProxy::com::jd::CommontIceRpcService::getClassDemoS(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__com__jd__CommontIceRpcService__getClassDemoS_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::com::jd::CommontIceRpcService* __del = dynamic_cast< ::IceDelegate::com::jd::CommontIceRpcService*>(__delBase.get());
            return __del->getClassDemoS(__ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::com::jd::CommontIceRpcService::begin_getClassDemoS(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__com__jd__CommontIceRpcService__getClassDemoS_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __com__jd__CommontIceRpcService__getClassDemoS_name, __del, __cookie);
    try
    {
        __result->__prepare(__com__jd__CommontIceRpcService__getClassDemoS_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::com::jd::ClassDemoS
IceProxy::com::jd::CommontIceRpcService::end_getClassDemoS(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __com__jd__CommontIceRpcService__getClassDemoS_name);
    ::com::jd::ClassDemoS __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    ::com::jd::__readClassDemoS(__is, __ret);
    __is->readPendingObjects();
    __is->endReadEncaps();
    return __ret;
}

void
IceProxy::com::jd::CommontIceRpcService::setClassDemos(const ::com::jd::ClassDemoS& cds, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::com::jd::CommontIceRpcService* __del = dynamic_cast< ::IceDelegate::com::jd::CommontIceRpcService*>(__delBase.get());
            __del->setClassDemos(cds, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::com::jd::CommontIceRpcService::begin_setClassDemos(const ::com::jd::ClassDemoS& cds, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __com__jd__CommontIceRpcService__setClassDemos_name, __del, __cookie);
    try
    {
        __result->__prepare(__com__jd__CommontIceRpcService__setClassDemos_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        if(cds.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            ::com::jd::__writeClassDemoS(__os, &cds[0], &cds[0] + cds.size());
        }
        __os->writePendingObjects();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::com::jd::CommontIceRpcService::end_setClassDemos(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __com__jd__CommontIceRpcService__setClassDemos_name);
}

::com::jd::LongList
IceProxy::com::jd::CommontIceRpcService::getLongList(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__com__jd__CommontIceRpcService__getLongList_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::com::jd::CommontIceRpcService* __del = dynamic_cast< ::IceDelegate::com::jd::CommontIceRpcService*>(__delBase.get());
            return __del->getLongList(__ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::com::jd::CommontIceRpcService::begin_getLongList(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__com__jd__CommontIceRpcService__getLongList_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __com__jd__CommontIceRpcService__getLongList_name, __del, __cookie);
    try
    {
        __result->__prepare(__com__jd__CommontIceRpcService__getLongList_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::com::jd::LongList
IceProxy::com::jd::CommontIceRpcService::end_getLongList(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __com__jd__CommontIceRpcService__getLongList_name);
    ::com::jd::LongList __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::com::jd::LongList
IceProxy::com::jd::CommontIceRpcService::setLongList(const ::com::jd::LongList& ll, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__com__jd__CommontIceRpcService__setLongList_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::com::jd::CommontIceRpcService* __del = dynamic_cast< ::IceDelegate::com::jd::CommontIceRpcService*>(__delBase.get());
            return __del->setLongList(ll, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::com::jd::CommontIceRpcService::begin_setLongList(const ::com::jd::LongList& ll, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__com__jd__CommontIceRpcService__setLongList_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __com__jd__CommontIceRpcService__setLongList_name, __del, __cookie);
    try
    {
        __result->__prepare(__com__jd__CommontIceRpcService__setLongList_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        if(ll.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            __os->write(&ll[0], &ll[0] + ll.size());
        }
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::com::jd::LongList
IceProxy::com::jd::CommontIceRpcService::end_setLongList(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __com__jd__CommontIceRpcService__setLongList_name);
    ::com::jd::LongList __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::com::jd::CommontIceRpcService::getOtherCommentById(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__com__jd__CommontIceRpcService__getOtherCommentById_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::com::jd::CommontIceRpcService* __del = dynamic_cast< ::IceDelegate::com::jd::CommontIceRpcService*>(__delBase.get());
            return __del->getOtherCommentById(__ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::com::jd::CommontIceRpcService::begin_getOtherCommentById(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__com__jd__CommontIceRpcService__getOtherCommentById_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __com__jd__CommontIceRpcService__getOtherCommentById_name, __del, __cookie);
    try
    {
        __result->__prepare(__com__jd__CommontIceRpcService__getOtherCommentById_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::com::jd::CommontIceRpcService::end_getOtherCommentById(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __com__jd__CommontIceRpcService__getOtherCommentById_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::com::jd::RpcException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

const ::std::string&
IceProxy::com::jd::CommontIceRpcService::ice_staticId()
{
    return ::com::jd::CommontIceRpcService::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::com::jd::CommontIceRpcService::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::com::jd::CommontIceRpcService);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::com::jd::CommontIceRpcService::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::com::jd::CommontIceRpcService);
}

::IceProxy::Ice::Object*
IceProxy::com::jd::CommontIceRpcService::__newInstance() const
{
    return new CommontIceRpcService;
}

::com::jd::ClassDemoPtr
IceDelegateM::com::jd::CommontIceRpcService::getClassDemo(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __com__jd__CommontIceRpcService__getClassDemo_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    ::com::jd::ClassDemoPtr __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(::com::jd::__patch__ClassDemoPtr, &__ret);
        __is->readPendingObjects();
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::com::jd::ClassDemoPtr
IceDelegateM::com::jd::CommontIceRpcService::newClassDemo(const ::com::jd::ClassDemoPtr& cd, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __com__jd__CommontIceRpcService__newClassDemo_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(::Ice::ObjectPtr(::IceInternal::upCast(cd.get())));
        __os->writePendingObjects();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::com::jd::ClassDemoPtr __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(::com::jd::__patch__ClassDemoPtr, &__ret);
        __is->readPendingObjects();
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::com::jd::ClassDemoS
IceDelegateM::com::jd::CommontIceRpcService::getClassDemoS(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __com__jd__CommontIceRpcService__getClassDemoS_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    ::com::jd::ClassDemoS __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        ::com::jd::__readClassDemoS(__is, __ret);
        __is->readPendingObjects();
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::com::jd::CommontIceRpcService::setClassDemos(const ::com::jd::ClassDemoS& cds, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __com__jd__CommontIceRpcService__setClassDemos_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        if(cds.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            ::com::jd::__writeClassDemoS(__os, &cds[0], &cds[0] + cds.size());
        }
        __os->writePendingObjects();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::com::jd::LongList
IceDelegateM::com::jd::CommontIceRpcService::getLongList(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __com__jd__CommontIceRpcService__getLongList_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    ::com::jd::LongList __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::com::jd::LongList
IceDelegateM::com::jd::CommontIceRpcService::setLongList(const ::com::jd::LongList& ll, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __com__jd__CommontIceRpcService__setLongList_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        if(ll.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            __os->write(&ll[0], &ll[0] + ll.size());
        }
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::com::jd::LongList __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::com::jd::CommontIceRpcService::getOtherCommentById(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __com__jd__CommontIceRpcService__getOtherCommentById_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::com::jd::RpcException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::com::jd::ClassDemoPtr
IceDelegateD::com::jd::CommontIceRpcService::getClassDemo(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::com::jd::ClassDemoPtr& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::com::jd::CommontIceRpcService* servant = dynamic_cast< ::com::jd::CommontIceRpcService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getClassDemo(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::com::jd::ClassDemoPtr& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __com__jd__CommontIceRpcService__getClassDemo_name, ::Ice::Normal, __context);
    ::com::jd::ClassDemoPtr __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::com::jd::ClassDemoPtr
IceDelegateD::com::jd::CommontIceRpcService::newClassDemo(const ::com::jd::ClassDemoPtr& cd, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::com::jd::ClassDemoPtr& __result, const ::com::jd::ClassDemoPtr& cd, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_cd(cd)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::com::jd::CommontIceRpcService* servant = dynamic_cast< ::com::jd::CommontIceRpcService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->newClassDemo(_m_cd, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::com::jd::ClassDemoPtr& _result;
        const ::com::jd::ClassDemoPtr& _m_cd;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __com__jd__CommontIceRpcService__newClassDemo_name, ::Ice::Normal, __context);
    ::com::jd::ClassDemoPtr __result;
    try
    {
        _DirectI __direct(__result, cd, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::com::jd::ClassDemoS
IceDelegateD::com::jd::CommontIceRpcService::getClassDemoS(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::com::jd::ClassDemoS& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::com::jd::CommontIceRpcService* servant = dynamic_cast< ::com::jd::CommontIceRpcService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getClassDemoS(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::com::jd::ClassDemoS& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __com__jd__CommontIceRpcService__getClassDemoS_name, ::Ice::Normal, __context);
    ::com::jd::ClassDemoS __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::com::jd::CommontIceRpcService::setClassDemos(const ::com::jd::ClassDemoS& cds, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::com::jd::ClassDemoS& cds, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_cds(cds)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::com::jd::CommontIceRpcService* servant = dynamic_cast< ::com::jd::CommontIceRpcService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->setClassDemos(_m_cds, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::com::jd::ClassDemoS& _m_cds;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __com__jd__CommontIceRpcService__setClassDemos_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(cds, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::com::jd::LongList
IceDelegateD::com::jd::CommontIceRpcService::getLongList(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::com::jd::LongList& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::com::jd::CommontIceRpcService* servant = dynamic_cast< ::com::jd::CommontIceRpcService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getLongList(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::com::jd::LongList& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __com__jd__CommontIceRpcService__getLongList_name, ::Ice::Normal, __context);
    ::com::jd::LongList __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::com::jd::LongList
IceDelegateD::com::jd::CommontIceRpcService::setLongList(const ::com::jd::LongList& ll, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::com::jd::LongList& __result, const ::com::jd::LongList& ll, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_ll(ll)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::com::jd::CommontIceRpcService* servant = dynamic_cast< ::com::jd::CommontIceRpcService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->setLongList(_m_ll, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::com::jd::LongList& _result;
        const ::com::jd::LongList& _m_ll;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __com__jd__CommontIceRpcService__setLongList_name, ::Ice::Normal, __context);
    ::com::jd::LongList __result;
    try
    {
        _DirectI __direct(__result, ll, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::com::jd::CommontIceRpcService::getOtherCommentById(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::com::jd::CommontIceRpcService* servant = dynamic_cast< ::com::jd::CommontIceRpcService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->getOtherCommentById(_current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __com__jd__CommontIceRpcService__getOtherCommentById_name, ::Ice::Normal, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::com::jd::RpcException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

com::jd::A::A(const ::std::string& __ice_id, ::Ice::Int __ice_num) :
    id(__ice_id),
    num(__ice_num)
{
}

::Ice::ObjectPtr
com::jd::A::ice_clone() const
{
    ::com::jd::APtr __p = new ::com::jd::A(*this);
    return __p;
}

static const ::std::string __com__jd__A_ids[2] =
{
    "::Ice::Object",
    "::com::jd::A"
};

bool
com::jd::A::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__com__jd__A_ids, __com__jd__A_ids + 2, _s);
}

::std::vector< ::std::string>
com::jd::A::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__com__jd__A_ids[0], &__com__jd__A_ids[2]);
}

const ::std::string&
com::jd::A::ice_id(const ::Ice::Current&) const
{
    return __com__jd__A_ids[1];
}

const ::std::string&
com::jd::A::ice_staticId()
{
    return __com__jd__A_ids[1];
}

void
com::jd::A::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->write(id);
    __os->write(num);
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
com::jd::A::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->read(id);
    __is->read(num);
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
com::jd::A::__write(const ::Ice::OutputStreamPtr& __outS) const
{
    __outS->writeTypeId(ice_staticId());
    __outS->startSlice();
    __outS->write(id);
    __outS->write(num);
    __outS->endSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__outS);
#else
    ::Ice::Object::__write(__outS);
#endif
}

void
com::jd::A::__read(const ::Ice::InputStreamPtr& __inS, bool __rid)
{
    if(__rid)
    {
        __inS->readTypeId();
    }
    __inS->startSlice();
    __inS->read(id);
    __inS->read(num);
    __inS->endSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__inS, true);
#else
    ::Ice::Object::__read(__inS, true);
#endif
}
#endif

class __F__com__jd__A : public ::Ice::ObjectFactory
{
public:

    virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
    {
        assert(type == ::com::jd::A::ice_staticId());
        return new ::com::jd::A;
    }

    virtual void
    destroy()
    {
    }
};

static ::Ice::ObjectFactoryPtr __F__com__jd__A_Ptr = new __F__com__jd__A;

const ::Ice::ObjectFactoryPtr&
com::jd::A::ice_factory()
{
    return __F__com__jd__A_Ptr;
}

class __F__com__jd__A__Init
{
public:

    __F__com__jd__A__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::com::jd::A::ice_staticId(), ::com::jd::A::ice_factory());
    }

    ~__F__com__jd__A__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::com::jd::A::ice_staticId());
    }
};

static __F__com__jd__A__Init __F__com__jd__A__i;

#ifdef __APPLE__
extern "C" { void __F__com__jd__A__initializer() {} }
#endif

void 
com::jd::__patch__APtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::com::jd::APtr* p = static_cast< ::com::jd::APtr*>(__addr);
    assert(p);
    *p = ::com::jd::APtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::com::jd::A::ice_staticId(), v->ice_id());
    }
}

com::jd::B::B(const ::std::string& __ice_id, const ::std::string& __ice_name) :
    id(__ice_id),
    name(__ice_name)
{
}

::Ice::ObjectPtr
com::jd::B::ice_clone() const
{
    ::com::jd::BPtr __p = new ::com::jd::B(*this);
    return __p;
}

static const ::std::string __com__jd__B_ids[2] =
{
    "::Ice::Object",
    "::com::jd::B"
};

bool
com::jd::B::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__com__jd__B_ids, __com__jd__B_ids + 2, _s);
}

::std::vector< ::std::string>
com::jd::B::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__com__jd__B_ids[0], &__com__jd__B_ids[2]);
}

const ::std::string&
com::jd::B::ice_id(const ::Ice::Current&) const
{
    return __com__jd__B_ids[1];
}

const ::std::string&
com::jd::B::ice_staticId()
{
    return __com__jd__B_ids[1];
}

void
com::jd::B::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->write(id);
    __os->write(name);
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
com::jd::B::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->read(id);
    __is->read(name);
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
com::jd::B::__write(const ::Ice::OutputStreamPtr& __outS) const
{
    __outS->writeTypeId(ice_staticId());
    __outS->startSlice();
    __outS->write(id);
    __outS->write(name);
    __outS->endSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__outS);
#else
    ::Ice::Object::__write(__outS);
#endif
}

void
com::jd::B::__read(const ::Ice::InputStreamPtr& __inS, bool __rid)
{
    if(__rid)
    {
        __inS->readTypeId();
    }
    __inS->startSlice();
    __inS->read(id);
    __inS->read(name);
    __inS->endSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__inS, true);
#else
    ::Ice::Object::__read(__inS, true);
#endif
}
#endif

class __F__com__jd__B : public ::Ice::ObjectFactory
{
public:

    virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
    {
        assert(type == ::com::jd::B::ice_staticId());
        return new ::com::jd::B;
    }

    virtual void
    destroy()
    {
    }
};

static ::Ice::ObjectFactoryPtr __F__com__jd__B_Ptr = new __F__com__jd__B;

const ::Ice::ObjectFactoryPtr&
com::jd::B::ice_factory()
{
    return __F__com__jd__B_Ptr;
}

class __F__com__jd__B__Init
{
public:

    __F__com__jd__B__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::com::jd::B::ice_staticId(), ::com::jd::B::ice_factory());
    }

    ~__F__com__jd__B__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::com::jd::B::ice_staticId());
    }
};

static __F__com__jd__B__Init __F__com__jd__B__i;

#ifdef __APPLE__
extern "C" { void __F__com__jd__B__initializer() {} }
#endif

void 
com::jd::__patch__BPtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::com::jd::BPtr* p = static_cast< ::com::jd::BPtr*>(__addr);
    assert(p);
    *p = ::com::jd::BPtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::com::jd::B::ice_staticId(), v->ice_id());
    }
}

com::jd::ClassDemo::ClassDemo(const ::std::string& __ice_id, ::Ice::Int __ice_idlen, const ::com::jd::APtr& __ice_classA, const ::com::jd::BPtr& __ice_classB) :
    id(__ice_id),
    idlen(__ice_idlen),
    classA(__ice_classA),
    classB(__ice_classB)
{
}

::Ice::ObjectPtr
com::jd::ClassDemo::ice_clone() const
{
    ::com::jd::ClassDemoPtr __p = new ::com::jd::ClassDemo(*this);
    return __p;
}

static const ::std::string __com__jd__ClassDemo_ids[2] =
{
    "::Ice::Object",
    "::com::jd::ClassDemo"
};

bool
com::jd::ClassDemo::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__com__jd__ClassDemo_ids, __com__jd__ClassDemo_ids + 2, _s);
}

::std::vector< ::std::string>
com::jd::ClassDemo::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__com__jd__ClassDemo_ids[0], &__com__jd__ClassDemo_ids[2]);
}

const ::std::string&
com::jd::ClassDemo::ice_id(const ::Ice::Current&) const
{
    return __com__jd__ClassDemo_ids[1];
}

const ::std::string&
com::jd::ClassDemo::ice_staticId()
{
    return __com__jd__ClassDemo_ids[1];
}

void
com::jd::ClassDemo::__addObject(::IceInternal::GCCountMap& _c)
{
    ::IceInternal::GCCountMap::iterator pos = _c.find(this);
    if(pos == _c.end())
    {
        _c[this] = 1;
    }
    else
    {
        ++pos->second;
    }
}

bool
com::jd::ClassDemo::__usesClasses()
{
    return true;
}

void
com::jd::ClassDemo::__gcReachable(::IceInternal::GCCountMap& _c) const
{
    if(classA)
    {
        ::IceInternal::upCast(classA.get())->__addObject(_c);
    }
    if(classB)
    {
        ::IceInternal::upCast(classB.get())->__addObject(_c);
    }
}

void
com::jd::ClassDemo::__gcClear()
{
    if(classA)
    {
        if(::IceInternal::upCast(classA.get())->__usesClasses())
        {
            ::IceInternal::upCast(classA.get())->__decRefUnsafe();
            classA.__clearHandleUnsafe();
        }
        else
        {
            classA = 0;
        }
    }
    if(classB)
    {
        if(::IceInternal::upCast(classB.get())->__usesClasses())
        {
            ::IceInternal::upCast(classB.get())->__decRefUnsafe();
            classB.__clearHandleUnsafe();
        }
        else
        {
            classB = 0;
        }
    }
}

void
com::jd::ClassDemo::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->write(id);
    __os->write(idlen);
    __os->write(::Ice::ObjectPtr(::IceInternal::upCast(classA.get())));
    __os->write(::Ice::ObjectPtr(::IceInternal::upCast(classB.get())));
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
com::jd::ClassDemo::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->read(id);
    __is->read(idlen);
    __is->read(::com::jd::__patch__APtr, &classA);
    __is->read(::com::jd::__patch__BPtr, &classB);
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
com::jd::ClassDemo::__write(const ::Ice::OutputStreamPtr& __outS) const
{
    __outS->writeTypeId(ice_staticId());
    __outS->startSlice();
    __outS->write(id);
    __outS->write(idlen);
    __outS->write(classA);
    __outS->write(classB);
    __outS->endSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__outS);
#else
    ::Ice::Object::__write(__outS);
#endif
}

void
com::jd::ClassDemo::__read(const ::Ice::InputStreamPtr& __inS, bool __rid)
{
    if(__rid)
    {
        __inS->readTypeId();
    }
    __inS->startSlice();
    __inS->read(id);
    __inS->read(idlen);
    __inS->read(classA);
    __inS->read(classB);
    __inS->endSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__inS, true);
#else
    ::Ice::Object::__read(__inS, true);
#endif
}
#endif

class __F__com__jd__ClassDemo : public ::Ice::ObjectFactory
{
public:

    virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
    {
        assert(type == ::com::jd::ClassDemo::ice_staticId());
        return new ::com::jd::ClassDemo;
    }

    virtual void
    destroy()
    {
    }
};

static ::Ice::ObjectFactoryPtr __F__com__jd__ClassDemo_Ptr = new __F__com__jd__ClassDemo;

const ::Ice::ObjectFactoryPtr&
com::jd::ClassDemo::ice_factory()
{
    return __F__com__jd__ClassDemo_Ptr;
}

class __F__com__jd__ClassDemo__Init
{
public:

    __F__com__jd__ClassDemo__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::com::jd::ClassDemo::ice_staticId(), ::com::jd::ClassDemo::ice_factory());
    }

    ~__F__com__jd__ClassDemo__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::com::jd::ClassDemo::ice_staticId());
    }
};

static __F__com__jd__ClassDemo__Init __F__com__jd__ClassDemo__i;

#ifdef __APPLE__
extern "C" { void __F__com__jd__ClassDemo__initializer() {} }
#endif

void 
com::jd::__patch__ClassDemoPtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::com::jd::ClassDemoPtr* p = static_cast< ::com::jd::ClassDemoPtr*>(__addr);
    assert(p);
    *p = ::com::jd::ClassDemoPtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::com::jd::ClassDemo::ice_staticId(), v->ice_id());
    }
}

::Ice::ObjectPtr
com::jd::CommontIceRpcService::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

static const ::std::string __com__jd__CommontIceRpcService_ids[2] =
{
    "::Ice::Object",
    "::com::jd::CommontIceRpcService"
};

bool
com::jd::CommontIceRpcService::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__com__jd__CommontIceRpcService_ids, __com__jd__CommontIceRpcService_ids + 2, _s);
}

::std::vector< ::std::string>
com::jd::CommontIceRpcService::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__com__jd__CommontIceRpcService_ids[0], &__com__jd__CommontIceRpcService_ids[2]);
}

const ::std::string&
com::jd::CommontIceRpcService::ice_id(const ::Ice::Current&) const
{
    return __com__jd__CommontIceRpcService_ids[1];
}

const ::std::string&
com::jd::CommontIceRpcService::ice_staticId()
{
    return __com__jd__CommontIceRpcService_ids[1];
}

::Ice::DispatchStatus
com::jd::CommontIceRpcService::___getClassDemo(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::com::jd::ClassDemoPtr __ret = getClassDemo(__current);
    __os->write(::Ice::ObjectPtr(::IceInternal::upCast(__ret.get())));
    __os->writePendingObjects();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
com::jd::CommontIceRpcService::___newClassDemo(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::com::jd::ClassDemoPtr cd;
    __is->read(::com::jd::__patch__ClassDemoPtr, &cd);
    __is->readPendingObjects();
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::com::jd::ClassDemoPtr __ret = newClassDemo(cd, __current);
    __os->write(::Ice::ObjectPtr(::IceInternal::upCast(__ret.get())));
    __os->writePendingObjects();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
com::jd::CommontIceRpcService::___getClassDemoS(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::com::jd::ClassDemoS __ret = getClassDemoS(__current);
    if(__ret.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        ::com::jd::__writeClassDemoS(__os, &__ret[0], &__ret[0] + __ret.size());
    }
    __os->writePendingObjects();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
com::jd::CommontIceRpcService::___setClassDemos(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::com::jd::ClassDemoS cds;
    ::com::jd::__readClassDemoS(__is, cds);
    __is->readPendingObjects();
    __is->endReadEncaps();
    setClassDemos(cds, __current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
com::jd::CommontIceRpcService::___getLongList(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::com::jd::LongList __ret = getLongList(__current);
    if(__ret.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        __os->write(&__ret[0], &__ret[0] + __ret.size());
    }
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
com::jd::CommontIceRpcService::___setLongList(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::com::jd::LongList ll;
    __is->read(ll);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::com::jd::LongList __ret = setLongList(ll, __current);
    if(__ret.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        __os->write(&__ret[0], &__ret[0] + __ret.size());
    }
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
com::jd::CommontIceRpcService::___getOtherCommentById(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    try
    {
        ::Ice::Int __ret = getOtherCommentById(__current);
        __os->write(__ret);
    }
    catch(const ::com::jd::RpcException& __ex)
    {
        __os->write(__ex);
        return ::Ice::DispatchUserException;
    }
    return ::Ice::DispatchOK;
}

static ::std::string __com__jd__CommontIceRpcService_all[] =
{
    "getClassDemo",
    "getClassDemoS",
    "getLongList",
    "getOtherCommentById",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "newClassDemo",
    "setClassDemos",
    "setLongList"
};

::Ice::DispatchStatus
com::jd::CommontIceRpcService::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< ::std::string*, ::std::string*> r = ::std::equal_range(__com__jd__CommontIceRpcService_all, __com__jd__CommontIceRpcService_all + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __com__jd__CommontIceRpcService_all)
    {
        case 0:
        {
            return ___getClassDemo(in, current);
        }
        case 1:
        {
            return ___getClassDemoS(in, current);
        }
        case 2:
        {
            return ___getLongList(in, current);
        }
        case 3:
        {
            return ___getOtherCommentById(in, current);
        }
        case 4:
        {
            return ___ice_id(in, current);
        }
        case 5:
        {
            return ___ice_ids(in, current);
        }
        case 6:
        {
            return ___ice_isA(in, current);
        }
        case 7:
        {
            return ___ice_ping(in, current);
        }
        case 8:
        {
            return ___newClassDemo(in, current);
        }
        case 9:
        {
            return ___setClassDemos(in, current);
        }
        case 10:
        {
            return ___setLongList(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
com::jd::CommontIceRpcService::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
com::jd::CommontIceRpcService::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
com::jd::CommontIceRpcService::__write(const ::Ice::OutputStreamPtr& __outS) const
{
    __outS->writeTypeId(ice_staticId());
    __outS->startSlice();
    __outS->endSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__outS);
#else
    ::Ice::Object::__write(__outS);
#endif
}

void
com::jd::CommontIceRpcService::__read(const ::Ice::InputStreamPtr& __inS, bool __rid)
{
    if(__rid)
    {
        __inS->readTypeId();
    }
    __inS->startSlice();
    __inS->endSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__inS, true);
#else
    ::Ice::Object::__read(__inS, true);
#endif
}
#endif

void 
com::jd::__patch__CommontIceRpcServicePtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::com::jd::CommontIceRpcServicePtr* p = static_cast< ::com::jd::CommontIceRpcServicePtr*>(__addr);
    assert(p);
    *p = ::com::jd::CommontIceRpcServicePtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::com::jd::CommontIceRpcService::ice_staticId(), v->ice_id());
    }
}
