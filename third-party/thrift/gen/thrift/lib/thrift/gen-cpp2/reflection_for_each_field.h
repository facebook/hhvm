/**
 * Autogenerated by Thrift for /home/fbthrift/thrift/lib/thrift/reflection.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "thrift/lib/thrift/gen-cpp2/reflection_metadata.h"
#include <thrift/lib/cpp2/visitation/for_each.h>

namespace apache {
namespace thrift {
namespace detail {

template <>
struct ForEachField<::apache::thrift::reflection::StructField> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::apache::thrift::reflection::StructField>;

    f(get_metadata(0), static_cast<T&&>(t).isRequired_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).type_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).name_ref()...);
    f(get_metadata(3), static_cast<T&&>(t).annotations_ref()...);
    f(get_metadata(4), static_cast<T&&>(t).order_ref()...);
  }
};

template <>
struct ForEachField<::apache::thrift::reflection::DataType> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::apache::thrift::reflection::DataType>;

    f(get_metadata(0), static_cast<T&&>(t).name_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).fields_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).mapKeyType_ref()...);
    f(get_metadata(3), static_cast<T&&>(t).valueType_ref()...);
    f(get_metadata(4), static_cast<T&&>(t).enumValues_ref()...);
  }
};

template <>
struct ForEachField<::apache::thrift::reflection::Schema> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::apache::thrift::reflection::Schema>;

    f(get_metadata(0), static_cast<T&&>(t).dataTypes_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).names_ref()...);
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
