#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

import folly.iobuf as _fbthrift_iobuf
import thrift.py3.types
import thrift.py3.exceptions
from thrift.py3.types import __NotSet, NOTSET
import typing as _typing
from typing_extensions import Final

import sys
import itertools
import facebook.thrift.annotation.thrift.types as _facebook_thrift_annotation_thrift_types


__property__ = property


class TestEnum(thrift.py3.types.Enum):
    Value1: TestEnum = ...
    Value2: TestEnum = ...
    def _to_python(self) -> "test.fixtures.nolegacy.module.thrift_types.TestEnum": ...   # type: ignore
    def _to_py3(self) -> TestEnum: ...
    def _to_py_deprecated(self) -> int: ...


class TestError(thrift.py3.exceptions.GeneratedError, _typing.Hashable):
    class __fbthrift_IsSet:
        test_enum: bool
        code: bool
        pass

    test_enum: Final[TestEnum] = ...

    code: Final[int] = ...

    def __init__(
        self, *,
        test_enum: _typing.Optional[TestEnum]=None,
        code: _typing.Optional[int]=None
    ) -> None: ...

    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __lt__(self, other: 'TestError') -> bool: ...
    def __gt__(self, other: 'TestError') -> bool: ...
    def __le__(self, other: 'TestError') -> bool: ...
    def __ge__(self, other: 'TestError') -> bool: ...

    def _to_python(self) -> "test.fixtures.nolegacy.module.thrift_types.TestError": ...   # type: ignore
    def _to_py3(self) -> TestError: ...
    def _to_py_deprecated(self) -> "module.ttypes.TestError": ...   # type: ignore

class TestMixin(thrift.py3.types.Struct, _typing.Hashable):
    class __fbthrift_IsSet:
        field1: bool
        pass

    field1: Final[str] = ...

    def __init__(
        self, *,
        field1: _typing.Optional[str]=None
    ) -> None: ...

    def __call__(
        self, *,
        field1: _typing.Union[str, '__NotSet', None]=NOTSET
    ) -> TestMixin: ...

    def __reduce__(self) -> _typing.Tuple[_typing.Callable, _typing.Tuple[_typing.Type['TestMixin'], bytes]]: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __lt__(self, other: 'TestMixin') -> bool: ...
    def __gt__(self, other: 'TestMixin') -> bool: ...
    def __le__(self, other: 'TestMixin') -> bool: ...
    def __ge__(self, other: 'TestMixin') -> bool: ...

    def _to_python(self) -> "test.fixtures.nolegacy.module.thrift_types.TestMixin": ...   # type: ignore
    def _to_py3(self) -> TestMixin: ...
    def _to_py_deprecated(self) -> "module.ttypes.TestMixin": ...   # type: ignore

class TestStruct(thrift.py3.types.Struct, _typing.Hashable):
    class __fbthrift_IsSet:
        bar: bool
        baropt: bool
        test_error: bool
        test_mixin: bool
        pass

    bar: Final[str] = ...

    baropt: Final[_typing.Optional[str]] = ...

    test_error: Final[TestError] = ...

    test_mixin: Final[TestMixin] = ...

    field1: Final[str] = ...

    def __init__(
        self, *,
        bar: _typing.Optional[str]=None,
        baropt: _typing.Optional[str]=None,
        test_error: _typing.Optional[TestError]=None,
        test_mixin: _typing.Optional[TestMixin]=None
    ) -> None: ...

    def __call__(
        self, *,
        bar: _typing.Union[str, '__NotSet', None]=NOTSET,
        baropt: _typing.Union[str, '__NotSet', None]=NOTSET,
        test_error: _typing.Union[TestError, '__NotSet', None]=NOTSET,
        test_mixin: _typing.Union[TestMixin, '__NotSet', None]=NOTSET
    ) -> TestStruct: ...

    def __reduce__(self) -> _typing.Tuple[_typing.Callable, _typing.Tuple[_typing.Type['TestStruct'], bytes]]: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __lt__(self, other: 'TestStruct') -> bool: ...
    def __gt__(self, other: 'TestStruct') -> bool: ...
    def __le__(self, other: 'TestStruct') -> bool: ...
    def __ge__(self, other: 'TestStruct') -> bool: ...

    def _to_python(self) -> "test.fixtures.nolegacy.module.thrift_types.TestStruct": ...   # type: ignore
    def _to_py3(self) -> TestStruct: ...
    def _to_py_deprecated(self) -> "module.ttypes.TestStruct": ...   # type: ignore

_TestUnionValueType = _typing.Union[None, TestEnum, TestStruct]

class TestUnion(thrift.py3.types.Union, _typing.Hashable):
    class __fbthrift_IsSet:
        enumVal: bool
        structVal: bool
        pass

    enumVal: Final[TestEnum] = ...

    structVal: Final[TestStruct] = ...

    def __init__(
        self, *,
        enumVal: _typing.Optional[TestEnum]=None,
        structVal: _typing.Optional[TestStruct]=None
    ) -> None: ...

    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __lt__(self, other: 'TestUnion') -> bool: ...
    def __gt__(self, other: 'TestUnion') -> bool: ...
    def __le__(self, other: 'TestUnion') -> bool: ...
    def __ge__(self, other: 'TestUnion') -> bool: ...

    class Type(thrift.py3.types.Enum):
        EMPTY: TestUnion.Type = ...
        enumVal: TestUnion.Type = ...
        structVal: TestUnion.Type = ...

    @staticmethod
    def fromValue(value: _TestUnionValueType) -> TestUnion: ...
    @__property__
    def value(self) -> _TestUnionValueType: ...
    @__property__
    def type(self) -> "TestUnion.Type": ...

    def _to_python(self) -> "test.fixtures.nolegacy.module.thrift_types.TestUnion": ...   # type: ignore
    def _to_py3(self) -> TestUnion: ...
    def _to_py_deprecated(self) -> "module.ttypes.TestUnion": ...   # type: ignore

