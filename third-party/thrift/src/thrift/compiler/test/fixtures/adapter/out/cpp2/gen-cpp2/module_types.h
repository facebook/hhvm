/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/adapter/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>
#include "adapter_dependency.h"

namespace apache::thrift {
namespace ident {
struct signature;
struct color;
struct intField;
struct optionalIntField;
struct intFieldWithDefault;
struct setField;
struct optionalSetField;
struct mapField;
struct optionalMapField;
struct binaryField;
struct longField;
struct adaptedLongField;
struct doubleAdaptedField;
struct adapted_list;
struct adapted_set;
struct adapted_map;
struct adapted_list_nested;
struct intField;
struct setField;
struct mapField;
struct binaryField;
struct longField;
struct structField;
struct optionalStructField;
struct structListField;
struct optionalStructListField;
struct unionField;
struct optionalUnionField;
struct adaptedStructField;
struct field;
struct field;
struct field;
struct shared_field;
struct opt_shared_field;
struct opt_boxed_field;
struct int_field;
struct string_field;
struct set_field;
struct a;
struct path;
struct field;
struct set_string;
struct delay;
struct custom;
struct timeout;
struct data;
struct meta;
struct indirectionString;
struct string_data;
struct double_wrapped_bool;
struct double_wrapped_integer;
struct binary_data;
struct adaptedBool;
struct adaptedByte;
struct adaptedShort;
struct adaptedInteger;
struct adaptedLong;
struct adaptedDouble;
struct adaptedString;
struct adaptedList;
struct adaptedSet;
struct adaptedMap;
struct adaptedBoolDefault;
struct adaptedByteDefault;
struct adaptedShortDefault;
struct adaptedIntegerDefault;
struct adaptedLongDefault;
struct adaptedDoubleDefault;
struct adaptedStringDefault;
struct adaptedEnum;
struct adaptedListDefault;
struct adaptedSetDefault;
struct adaptedMapDefault;
struct doubleTypedefBool;
struct adaptedStruct;
struct delay;
struct custom;
struct data;
struct data;
struct adaptedStruct;
struct adaptedTypedef;
struct directlyAdapted;
struct typedefOfAdapted;
struct field;
struct field;
struct reordered_dependent_adapted;
struct data;
struct data;
struct ptr;
struct ptr;
struct regularInt;
struct countingInt;
struct regularString;
struct name;
struct name;
struct field;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_signature
#define APACHE_THRIFT_ACCESSOR_signature
APACHE_THRIFT_DEFINE_ACCESSOR(signature);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_color
#define APACHE_THRIFT_ACCESSOR_color
APACHE_THRIFT_DEFINE_ACCESSOR(color);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_intField
#define APACHE_THRIFT_ACCESSOR_intField
APACHE_THRIFT_DEFINE_ACCESSOR(intField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optionalIntField
#define APACHE_THRIFT_ACCESSOR_optionalIntField
APACHE_THRIFT_DEFINE_ACCESSOR(optionalIntField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_intFieldWithDefault
#define APACHE_THRIFT_ACCESSOR_intFieldWithDefault
APACHE_THRIFT_DEFINE_ACCESSOR(intFieldWithDefault);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_setField
#define APACHE_THRIFT_ACCESSOR_setField
APACHE_THRIFT_DEFINE_ACCESSOR(setField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optionalSetField
#define APACHE_THRIFT_ACCESSOR_optionalSetField
APACHE_THRIFT_DEFINE_ACCESSOR(optionalSetField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapField
#define APACHE_THRIFT_ACCESSOR_mapField
APACHE_THRIFT_DEFINE_ACCESSOR(mapField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optionalMapField
#define APACHE_THRIFT_ACCESSOR_optionalMapField
APACHE_THRIFT_DEFINE_ACCESSOR(optionalMapField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binaryField
#define APACHE_THRIFT_ACCESSOR_binaryField
APACHE_THRIFT_DEFINE_ACCESSOR(binaryField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_longField
#define APACHE_THRIFT_ACCESSOR_longField
APACHE_THRIFT_DEFINE_ACCESSOR(longField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adaptedLongField
#define APACHE_THRIFT_ACCESSOR_adaptedLongField
APACHE_THRIFT_DEFINE_ACCESSOR(adaptedLongField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_doubleAdaptedField
#define APACHE_THRIFT_ACCESSOR_doubleAdaptedField
APACHE_THRIFT_DEFINE_ACCESSOR(doubleAdaptedField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adapted_list
#define APACHE_THRIFT_ACCESSOR_adapted_list
APACHE_THRIFT_DEFINE_ACCESSOR(adapted_list);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adapted_set
#define APACHE_THRIFT_ACCESSOR_adapted_set
APACHE_THRIFT_DEFINE_ACCESSOR(adapted_set);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adapted_map
#define APACHE_THRIFT_ACCESSOR_adapted_map
APACHE_THRIFT_DEFINE_ACCESSOR(adapted_map);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adapted_list_nested
#define APACHE_THRIFT_ACCESSOR_adapted_list_nested
APACHE_THRIFT_DEFINE_ACCESSOR(adapted_list_nested);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_intField
#define APACHE_THRIFT_ACCESSOR_intField
APACHE_THRIFT_DEFINE_ACCESSOR(intField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_setField
#define APACHE_THRIFT_ACCESSOR_setField
APACHE_THRIFT_DEFINE_ACCESSOR(setField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapField
#define APACHE_THRIFT_ACCESSOR_mapField
APACHE_THRIFT_DEFINE_ACCESSOR(mapField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binaryField
#define APACHE_THRIFT_ACCESSOR_binaryField
APACHE_THRIFT_DEFINE_ACCESSOR(binaryField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_longField
#define APACHE_THRIFT_ACCESSOR_longField
APACHE_THRIFT_DEFINE_ACCESSOR(longField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_structField
#define APACHE_THRIFT_ACCESSOR_structField
APACHE_THRIFT_DEFINE_ACCESSOR(structField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optionalStructField
#define APACHE_THRIFT_ACCESSOR_optionalStructField
APACHE_THRIFT_DEFINE_ACCESSOR(optionalStructField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_structListField
#define APACHE_THRIFT_ACCESSOR_structListField
APACHE_THRIFT_DEFINE_ACCESSOR(structListField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optionalStructListField
#define APACHE_THRIFT_ACCESSOR_optionalStructListField
APACHE_THRIFT_DEFINE_ACCESSOR(optionalStructListField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_unionField
#define APACHE_THRIFT_ACCESSOR_unionField
APACHE_THRIFT_DEFINE_ACCESSOR(unionField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optionalUnionField
#define APACHE_THRIFT_ACCESSOR_optionalUnionField
APACHE_THRIFT_DEFINE_ACCESSOR(optionalUnionField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adaptedStructField
#define APACHE_THRIFT_ACCESSOR_adaptedStructField
APACHE_THRIFT_DEFINE_ACCESSOR(adaptedStructField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field
#define APACHE_THRIFT_ACCESSOR_field
APACHE_THRIFT_DEFINE_ACCESSOR(field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field
#define APACHE_THRIFT_ACCESSOR_field
APACHE_THRIFT_DEFINE_ACCESSOR(field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field
#define APACHE_THRIFT_ACCESSOR_field
APACHE_THRIFT_DEFINE_ACCESSOR(field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_shared_field
#define APACHE_THRIFT_ACCESSOR_shared_field
APACHE_THRIFT_DEFINE_ACCESSOR(shared_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_shared_field
#define APACHE_THRIFT_ACCESSOR_opt_shared_field
APACHE_THRIFT_DEFINE_ACCESSOR(opt_shared_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_boxed_field
#define APACHE_THRIFT_ACCESSOR_opt_boxed_field
APACHE_THRIFT_DEFINE_ACCESSOR(opt_boxed_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_int_field
#define APACHE_THRIFT_ACCESSOR_int_field
APACHE_THRIFT_DEFINE_ACCESSOR(int_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_string_field
#define APACHE_THRIFT_ACCESSOR_string_field
APACHE_THRIFT_DEFINE_ACCESSOR(string_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_set_field
#define APACHE_THRIFT_ACCESSOR_set_field
APACHE_THRIFT_DEFINE_ACCESSOR(set_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_a
#define APACHE_THRIFT_ACCESSOR_a
APACHE_THRIFT_DEFINE_ACCESSOR(a);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_path
#define APACHE_THRIFT_ACCESSOR_path
APACHE_THRIFT_DEFINE_ACCESSOR(path);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field
#define APACHE_THRIFT_ACCESSOR_field
APACHE_THRIFT_DEFINE_ACCESSOR(field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_set_string
#define APACHE_THRIFT_ACCESSOR_set_string
APACHE_THRIFT_DEFINE_ACCESSOR(set_string);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_delay
#define APACHE_THRIFT_ACCESSOR_delay
APACHE_THRIFT_DEFINE_ACCESSOR(delay);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_custom
#define APACHE_THRIFT_ACCESSOR_custom
APACHE_THRIFT_DEFINE_ACCESSOR(custom);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_timeout
#define APACHE_THRIFT_ACCESSOR_timeout
APACHE_THRIFT_DEFINE_ACCESSOR(timeout);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_data
#define APACHE_THRIFT_ACCESSOR_data
APACHE_THRIFT_DEFINE_ACCESSOR(data);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_meta
#define APACHE_THRIFT_ACCESSOR_meta
APACHE_THRIFT_DEFINE_ACCESSOR(meta);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_indirectionString
#define APACHE_THRIFT_ACCESSOR_indirectionString
APACHE_THRIFT_DEFINE_ACCESSOR(indirectionString);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_string_data
#define APACHE_THRIFT_ACCESSOR_string_data
APACHE_THRIFT_DEFINE_ACCESSOR(string_data);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_double_wrapped_bool
#define APACHE_THRIFT_ACCESSOR_double_wrapped_bool
APACHE_THRIFT_DEFINE_ACCESSOR(double_wrapped_bool);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_double_wrapped_integer
#define APACHE_THRIFT_ACCESSOR_double_wrapped_integer
APACHE_THRIFT_DEFINE_ACCESSOR(double_wrapped_integer);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binary_data
#define APACHE_THRIFT_ACCESSOR_binary_data
APACHE_THRIFT_DEFINE_ACCESSOR(binary_data);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adaptedBool
#define APACHE_THRIFT_ACCESSOR_adaptedBool
APACHE_THRIFT_DEFINE_ACCESSOR(adaptedBool);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adaptedByte
#define APACHE_THRIFT_ACCESSOR_adaptedByte
APACHE_THRIFT_DEFINE_ACCESSOR(adaptedByte);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adaptedShort
#define APACHE_THRIFT_ACCESSOR_adaptedShort
APACHE_THRIFT_DEFINE_ACCESSOR(adaptedShort);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adaptedInteger
#define APACHE_THRIFT_ACCESSOR_adaptedInteger
APACHE_THRIFT_DEFINE_ACCESSOR(adaptedInteger);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adaptedLong
#define APACHE_THRIFT_ACCESSOR_adaptedLong
APACHE_THRIFT_DEFINE_ACCESSOR(adaptedLong);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adaptedDouble
#define APACHE_THRIFT_ACCESSOR_adaptedDouble
APACHE_THRIFT_DEFINE_ACCESSOR(adaptedDouble);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adaptedString
#define APACHE_THRIFT_ACCESSOR_adaptedString
APACHE_THRIFT_DEFINE_ACCESSOR(adaptedString);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adaptedList
#define APACHE_THRIFT_ACCESSOR_adaptedList
APACHE_THRIFT_DEFINE_ACCESSOR(adaptedList);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adaptedSet
#define APACHE_THRIFT_ACCESSOR_adaptedSet
APACHE_THRIFT_DEFINE_ACCESSOR(adaptedSet);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adaptedMap
#define APACHE_THRIFT_ACCESSOR_adaptedMap
APACHE_THRIFT_DEFINE_ACCESSOR(adaptedMap);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adaptedBoolDefault
#define APACHE_THRIFT_ACCESSOR_adaptedBoolDefault
APACHE_THRIFT_DEFINE_ACCESSOR(adaptedBoolDefault);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adaptedByteDefault
#define APACHE_THRIFT_ACCESSOR_adaptedByteDefault
APACHE_THRIFT_DEFINE_ACCESSOR(adaptedByteDefault);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adaptedShortDefault
#define APACHE_THRIFT_ACCESSOR_adaptedShortDefault
APACHE_THRIFT_DEFINE_ACCESSOR(adaptedShortDefault);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adaptedIntegerDefault
#define APACHE_THRIFT_ACCESSOR_adaptedIntegerDefault
APACHE_THRIFT_DEFINE_ACCESSOR(adaptedIntegerDefault);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adaptedLongDefault
#define APACHE_THRIFT_ACCESSOR_adaptedLongDefault
APACHE_THRIFT_DEFINE_ACCESSOR(adaptedLongDefault);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adaptedDoubleDefault
#define APACHE_THRIFT_ACCESSOR_adaptedDoubleDefault
APACHE_THRIFT_DEFINE_ACCESSOR(adaptedDoubleDefault);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adaptedStringDefault
#define APACHE_THRIFT_ACCESSOR_adaptedStringDefault
APACHE_THRIFT_DEFINE_ACCESSOR(adaptedStringDefault);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adaptedEnum
#define APACHE_THRIFT_ACCESSOR_adaptedEnum
APACHE_THRIFT_DEFINE_ACCESSOR(adaptedEnum);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adaptedListDefault
#define APACHE_THRIFT_ACCESSOR_adaptedListDefault
APACHE_THRIFT_DEFINE_ACCESSOR(adaptedListDefault);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adaptedSetDefault
#define APACHE_THRIFT_ACCESSOR_adaptedSetDefault
APACHE_THRIFT_DEFINE_ACCESSOR(adaptedSetDefault);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adaptedMapDefault
#define APACHE_THRIFT_ACCESSOR_adaptedMapDefault
APACHE_THRIFT_DEFINE_ACCESSOR(adaptedMapDefault);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_doubleTypedefBool
#define APACHE_THRIFT_ACCESSOR_doubleTypedefBool
APACHE_THRIFT_DEFINE_ACCESSOR(doubleTypedefBool);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adaptedStruct
#define APACHE_THRIFT_ACCESSOR_adaptedStruct
APACHE_THRIFT_DEFINE_ACCESSOR(adaptedStruct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_delay
#define APACHE_THRIFT_ACCESSOR_delay
APACHE_THRIFT_DEFINE_ACCESSOR(delay);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_custom
#define APACHE_THRIFT_ACCESSOR_custom
APACHE_THRIFT_DEFINE_ACCESSOR(custom);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_data
#define APACHE_THRIFT_ACCESSOR_data
APACHE_THRIFT_DEFINE_ACCESSOR(data);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_data
#define APACHE_THRIFT_ACCESSOR_data
APACHE_THRIFT_DEFINE_ACCESSOR(data);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adaptedStruct
#define APACHE_THRIFT_ACCESSOR_adaptedStruct
APACHE_THRIFT_DEFINE_ACCESSOR(adaptedStruct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adaptedTypedef
#define APACHE_THRIFT_ACCESSOR_adaptedTypedef
APACHE_THRIFT_DEFINE_ACCESSOR(adaptedTypedef);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_directlyAdapted
#define APACHE_THRIFT_ACCESSOR_directlyAdapted
APACHE_THRIFT_DEFINE_ACCESSOR(directlyAdapted);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_typedefOfAdapted
#define APACHE_THRIFT_ACCESSOR_typedefOfAdapted
APACHE_THRIFT_DEFINE_ACCESSOR(typedefOfAdapted);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field
#define APACHE_THRIFT_ACCESSOR_field
APACHE_THRIFT_DEFINE_ACCESSOR(field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field
#define APACHE_THRIFT_ACCESSOR_field
APACHE_THRIFT_DEFINE_ACCESSOR(field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_reordered_dependent_adapted
#define APACHE_THRIFT_ACCESSOR_reordered_dependent_adapted
APACHE_THRIFT_DEFINE_ACCESSOR(reordered_dependent_adapted);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_data
#define APACHE_THRIFT_ACCESSOR_data
APACHE_THRIFT_DEFINE_ACCESSOR(data);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_data
#define APACHE_THRIFT_ACCESSOR_data
APACHE_THRIFT_DEFINE_ACCESSOR(data);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ptr
#define APACHE_THRIFT_ACCESSOR_ptr
APACHE_THRIFT_DEFINE_ACCESSOR(ptr);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ptr
#define APACHE_THRIFT_ACCESSOR_ptr
APACHE_THRIFT_DEFINE_ACCESSOR(ptr);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_regularInt
#define APACHE_THRIFT_ACCESSOR_regularInt
APACHE_THRIFT_DEFINE_ACCESSOR(regularInt);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_countingInt
#define APACHE_THRIFT_ACCESSOR_countingInt
APACHE_THRIFT_DEFINE_ACCESSOR(countingInt);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_regularString
#define APACHE_THRIFT_ACCESSOR_regularString
APACHE_THRIFT_DEFINE_ACCESSOR(regularString);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_name
#define APACHE_THRIFT_ACCESSOR_name
APACHE_THRIFT_DEFINE_ACCESSOR(name);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_name
#define APACHE_THRIFT_ACCESSOR_name
APACHE_THRIFT_DEFINE_ACCESSOR(name);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field
#define APACHE_THRIFT_ACCESSOR_field
APACHE_THRIFT_DEFINE_ACCESSOR(field);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
namespace facebook::thrift::test {

/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "Color", "kind": "enum" } */
enum class Color {
  UNKNOWN = 0,
  RED = 1,
  GREEN = 2,
  BLUE = 3,
};

/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "ThriftAdaptedEnum", "kind": "enum" } */
enum class ThriftAdaptedEnum {
  Zero = 0,
  One = 1,
};

} // namespace facebook::thrift::test

template<> struct std::hash<::facebook::thrift::test::Color> :
  ::apache::thrift::detail::enum_hash<::facebook::thrift::test::Color> {};
template<> struct std::hash<::facebook::thrift::test::ThriftAdaptedEnum> :
  ::apache::thrift::detail::enum_hash<::facebook::thrift::test::ThriftAdaptedEnum> {};

namespace apache::thrift {

template <> struct TEnumTraits<::facebook::thrift::test::Color> {
  using type = ::facebook::thrift::test::Color;

  static constexpr std::size_t const size = 4;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "Color";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "module";
  }

  FOLLY_ERASE static constexpr std::string_view __fbthrift_thrift_uri() noexcept {
    return "facebook.com/thrift/test/Color";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::UNKNOWN; }
  static constexpr type max() { return type::BLUE; }
};

template <> struct TEnumTraits<::facebook::thrift::test::ThriftAdaptedEnum> {
  using type = ::facebook::thrift::test::ThriftAdaptedEnum;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "ThriftAdaptedEnum";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "module";
  }

  FOLLY_ERASE static constexpr std::string_view __fbthrift_thrift_uri() noexcept {
    return "facebook.com/thrift/test/ThriftAdaptedEnum";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::Zero; }
  static constexpr type max() { return type::One; }
};

} // namespace apache::thrift
// END declare_enums
// BEGIN forward_declare
namespace facebook::thrift::test {
class MyAnnotation;
class Foo;
class Baz;
class Bar;
namespace detail {
class DirectlyAdapted;
} // namespace detail
namespace detail {
class IndependentDirectlyAdapted;
} // namespace detail
class StructWithFieldAdapter;
class TerseAdaptedFields;
class B;
class A;
class Config;
class MyStruct;
class AdaptTestStruct;
class AdaptTemplatedTestStruct;
class AdaptTemplatedNestedTestStruct;
class ThriftAdaptTestUnion;
class ThriftAdaptedStruct;
namespace detail {
class DirectlyAdaptedStruct;
} // namespace detail
class StructFieldAdaptedStruct;
class CircularAdaptee;
class CircularStruct;
class ReorderedStruct;
namespace detail {
class DeclaredAfterStruct;
} // namespace detail
class UnderlyingRenamedStruct;
class UnderlyingSameNamespaceStruct;
namespace detail {
class HeapAllocated;
} // namespace detail
class MoveOnly;
class AlsoMoveOnly;
class ApplyAdapter;
namespace detail {
class TransitiveAdapted;
} // namespace detail
class CountingStruct;
class Person;
class Person2;
class Renamed;
} // namespace facebook::thrift::test
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
template<>
struct is_cpp_ref_field_optional<::facebook::thrift::test::StructWithFieldAdapter,::apache::thrift::type::field_id<3>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::facebook::thrift::test::StructWithFieldAdapter,::apache::thrift::type::field_id<4>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::facebook::thrift::test::CircularStruct,::apache::thrift::type::field_id<1>> : std::true_type{};
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace facebook::thrift::test {
using IndependentDirectlyAdapted = ::my::Type;
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "SetWithAdapter", "kind": "typedef" } */
using SetWithAdapter = ::apache::thrift::adapt_detail::adapted_t<::my::Adapter2, ::std::set<::std::string>>;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "StringWithAdapter", "kind": "typedef" } */
using StringWithAdapter = ::apache::thrift::adapt_detail::adapted_t<::my::Adapter1, ::std::string>;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "ListWithElemAdapter", "kind": "typedef" } */
using ListWithElemAdapter = ::std::vector<::facebook::thrift::test::StringWithAdapter>;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "ListWithElemAdapter_withAdapter", "kind": "typedef" } */
using ListWithElemAdapter_withAdapter = ::apache::thrift::adapt_detail::adapted_t<::my::Adapter2, ::facebook::thrift::test::ListWithElemAdapter>;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "MyI64", "kind": "typedef" } */
using MyI64 = ::apache::thrift::adapt_detail::adapted_t<::my::Adapter1, ::std::int64_t>;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "DoubleTypedefI64", "kind": "typedef" } */
using DoubleTypedefI64 = ::facebook::thrift::test::MyI64;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "MyI32", "kind": "typedef" } */
using MyI32 = ::apache::thrift::adapt_detail::adapted_t<::my::Adapter1, ::std::int32_t>;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "ListWithElemAdapter_withAdapter_2312", "kind": "typedef" } */
using ListWithElemAdapter_withAdapter_2312 = ::facebook::thrift::test::ListWithElemAdapter_withAdapter;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "binary_5673", "kind": "typedef" } */
using binary_5673 = ::std::string;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "i32_5137", "kind": "typedef" } */
using i32_5137 = ::std::int32_t;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "map_string_ListWithElemAdapter_withAdapter_8454", "kind": "typedef" } */
using map_string_ListWithElemAdapter_withAdapter_8454 = ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter_2312>;

/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "Foo", "kind": "struct" } */
class Foo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 15;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::intField,
    ::apache::thrift::ident::optionalIntField,
    ::apache::thrift::ident::intFieldWithDefault,
    ::apache::thrift::ident::setField,
    ::apache::thrift::ident::optionalSetField,
    ::apache::thrift::ident::mapField,
    ::apache::thrift::ident::optionalMapField,
    ::apache::thrift::ident::binaryField,
    ::apache::thrift::ident::longField,
    ::apache::thrift::ident::adaptedLongField,
    ::apache::thrift::ident::doubleAdaptedField,
    ::apache::thrift::ident::adapted_list,
    ::apache::thrift::ident::adapted_set,
    ::apache::thrift::ident::adapted_map,
    ::apache::thrift::ident::adapted_list_nested
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i32_t>,
    ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i32_t>,
    ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i32_t>,
    ::apache::thrift::type::adapted<::my::Adapter2, ::apache::thrift::type::set<::apache::thrift::type::string_t>>,
    ::apache::thrift::type::adapted<::my::Adapter2, ::apache::thrift::type::set<::apache::thrift::type::string_t>>,
    ::apache::thrift::type::adapted<::my::Adapter3, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::adapted<::my::Adapter2, ::apache::thrift::type::list<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::string_t>>>>>,
    ::apache::thrift::type::adapted<::my::Adapter3, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::adapted<::my::Adapter2, ::apache::thrift::type::list<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::string_t>>>>>,
    ::apache::thrift::type::adapted<::my::Adapter3, ::apache::thrift::type::binary_t>,
    ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i64_t>,
    ::apache::thrift::type::adapted<::my::Adapter2, ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i64_t>>,
    ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i64_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::set<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i32_t>,
    ::apache::thrift::type::list<::apache::thrift::type::list<::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::i32_t>>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Foo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    true;


 public:

  Foo();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Foo(apache::thrift::FragileConstructor, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::facebook::thrift::test::i32_5137, Foo> intField__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::facebook::thrift::test::i32_5137, Foo> optionalIntField__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::facebook::thrift::test::i32_5137, Foo> intFieldWithDefault__arg, ::facebook::thrift::test::SetWithAdapter setField__arg, ::facebook::thrift::test::SetWithAdapter optionalSetField__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Foo> mapField__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 7, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Foo> optionalMapField__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 8, ::facebook::thrift::test::binary_5673, Foo> binaryField__arg, ::facebook::thrift::test::MyI64 longField__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter2, 10, ::facebook::thrift::test::MyI64, Foo> adaptedLongField__arg, ::facebook::thrift::test::DoubleTypedefI64 doubleAdaptedField__arg, ::std::vector<::std::int32_t> adapted_list__arg, ::std::set<::std::int32_t> adapted_set__arg, ::std::map<::std::string, ::std::int32_t> adapted_map__arg, ::std::vector<::std::vector<::std::map<::std::int32_t, ::std::int32_t>>> adapted_list_nested__arg);

  Foo(Foo&&) noexcept;
  Foo(const Foo& src);


  Foo& operator=(Foo&&) noexcept;
  Foo& operator=(const Foo& src);

  ~Foo();

 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::facebook::thrift::test::i32_5137, Foo> __fbthrift_field_intField;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::facebook::thrift::test::i32_5137, Foo> __fbthrift_field_optionalIntField;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::facebook::thrift::test::i32_5137, Foo> __fbthrift_field_intFieldWithDefault;
 private:
  ::facebook::thrift::test::SetWithAdapter __fbthrift_field_setField;
 private:
  ::facebook::thrift::test::SetWithAdapter __fbthrift_field_optionalSetField;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Foo> __fbthrift_field_mapField;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 7, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Foo> __fbthrift_field_optionalMapField;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 8, ::facebook::thrift::test::binary_5673, Foo> __fbthrift_field_binaryField;
 private:
  ::facebook::thrift::test::MyI64 __fbthrift_field_longField;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter2, 10, ::facebook::thrift::test::MyI64, Foo> __fbthrift_field_adaptedLongField;
 private:
  ::facebook::thrift::test::DoubleTypedefI64 __fbthrift_field_doubleAdaptedField;
 private:
  ::std::vector<::std::int32_t> __fbthrift_field_adapted_list;
 private:
  ::std::set<::std::int32_t> __fbthrift_field_adapted_set;
 private:
  ::std::map<::std::string, ::std::int32_t> __fbthrift_field_adapted_map;
 private:
  ::std::vector<::std::vector<::std::map<::std::int32_t, ::std::int32_t>>> __fbthrift_field_adapted_list_nested;
 private:
  apache::thrift::detail::isset_bitset<15, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const Foo&) const;
  bool operator<(const Foo&) const;

  /** Glean { "field": "intField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::facebook::thrift::test::i32_5137, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> intField_ref() const& {
    return {this->__fbthrift_field_intField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "intField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::facebook::thrift::test::i32_5137, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> intField_ref() & {
    return {this->__fbthrift_field_intField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "intField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::facebook::thrift::test::i32_5137, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> intField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_intField), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "intField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::facebook::thrift::test::i32_5137, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> intField() const& {
    return {this->__fbthrift_field_intField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "intField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::facebook::thrift::test::i32_5137, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> intField() & {
    return {this->__fbthrift_field_intField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "intField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::facebook::thrift::test::i32_5137, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> intField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_intField), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "optionalIntField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::facebook::thrift::test::i32_5137, Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> optionalIntField_ref() const& {
    return {this->__fbthrift_field_optionalIntField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "optionalIntField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::facebook::thrift::test::i32_5137, Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> optionalIntField_ref() & {
    return {this->__fbthrift_field_optionalIntField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "optionalIntField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::facebook::thrift::test::i32_5137, Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> optionalIntField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_optionalIntField), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "optionalIntField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::facebook::thrift::test::i32_5137, Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> optionalIntField() const& {
    return {this->__fbthrift_field_optionalIntField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "optionalIntField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::facebook::thrift::test::i32_5137, Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> optionalIntField() & {
    return {this->__fbthrift_field_optionalIntField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "optionalIntField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::facebook::thrift::test::i32_5137, Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> optionalIntField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_optionalIntField), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "intFieldWithDefault" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::facebook::thrift::test::i32_5137, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> intFieldWithDefault_ref() const& {
    return {this->__fbthrift_field_intFieldWithDefault, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "intFieldWithDefault" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::facebook::thrift::test::i32_5137, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> intFieldWithDefault_ref() & {
    return {this->__fbthrift_field_intFieldWithDefault, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "intFieldWithDefault" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::facebook::thrift::test::i32_5137, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> intFieldWithDefault_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_intFieldWithDefault), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "intFieldWithDefault" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::facebook::thrift::test::i32_5137, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> intFieldWithDefault() const& {
    return {this->__fbthrift_field_intFieldWithDefault, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "intFieldWithDefault" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::facebook::thrift::test::i32_5137, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> intFieldWithDefault() & {
    return {this->__fbthrift_field_intFieldWithDefault, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "intFieldWithDefault" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::facebook::thrift::test::i32_5137, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> intFieldWithDefault() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_intFieldWithDefault), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "setField" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> setField_ref() const& {
    return {this->__fbthrift_field_setField, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "setField" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> setField_ref() & {
    return {this->__fbthrift_field_setField, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "setField" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> setField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_setField), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "setField" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> setField() const& {
    return {this->__fbthrift_field_setField, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "setField" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> setField() & {
    return {this->__fbthrift_field_setField, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "setField" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> setField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_setField), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "optionalSetField" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> optionalSetField_ref() const& {
    return {this->__fbthrift_field_optionalSetField, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "optionalSetField" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> optionalSetField_ref() & {
    return {this->__fbthrift_field_optionalSetField, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "optionalSetField" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> optionalSetField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_optionalSetField), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "optionalSetField" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> optionalSetField() const& {
    return {this->__fbthrift_field_optionalSetField, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "optionalSetField" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> optionalSetField() & {
    return {this->__fbthrift_field_optionalSetField, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "optionalSetField" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> optionalSetField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_optionalSetField), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "mapField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mapField_ref() const& {
    return {this->__fbthrift_field_mapField, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "mapField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mapField_ref() & {
    return {this->__fbthrift_field_mapField, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "mapField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mapField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mapField), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "mapField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mapField() const& {
    return {this->__fbthrift_field_mapField, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "mapField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mapField() & {
    return {this->__fbthrift_field_mapField, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "mapField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mapField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mapField), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "optionalMapField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 7, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> optionalMapField_ref() const& {
    return {this->__fbthrift_field_optionalMapField, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "optionalMapField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 7, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> optionalMapField_ref() & {
    return {this->__fbthrift_field_optionalMapField, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "optionalMapField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 7, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> optionalMapField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_optionalMapField), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "optionalMapField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 7, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> optionalMapField() const& {
    return {this->__fbthrift_field_optionalMapField, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "optionalMapField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 7, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> optionalMapField() & {
    return {this->__fbthrift_field_optionalMapField, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "optionalMapField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 7, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> optionalMapField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_optionalMapField), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "binaryField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 8, ::facebook::thrift::test::binary_5673, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> binaryField_ref() const& {
    return {this->__fbthrift_field_binaryField, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "binaryField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 8, ::facebook::thrift::test::binary_5673, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> binaryField_ref() & {
    return {this->__fbthrift_field_binaryField, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "binaryField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 8, ::facebook::thrift::test::binary_5673, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> binaryField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_binaryField), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "binaryField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 8, ::facebook::thrift::test::binary_5673, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> binaryField() const& {
    return {this->__fbthrift_field_binaryField, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "binaryField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 8, ::facebook::thrift::test::binary_5673, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> binaryField() & {
    return {this->__fbthrift_field_binaryField, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "binaryField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 8, ::facebook::thrift::test::binary_5673, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> binaryField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_binaryField), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "longField" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::MyI64>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> longField_ref() const& {
    return {this->__fbthrift_field_longField, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "longField" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::MyI64>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> longField_ref() & {
    return {this->__fbthrift_field_longField, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "longField" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::MyI64>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> longField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_longField), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "longField" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::MyI64>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> longField() const& {
    return {this->__fbthrift_field_longField, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "longField" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::MyI64>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> longField() & {
    return {this->__fbthrift_field_longField, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "longField" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::MyI64>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> longField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_longField), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "adaptedLongField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter2, 10, ::facebook::thrift::test::MyI64, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedLongField_ref() const& {
    return {this->__fbthrift_field_adaptedLongField, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "adaptedLongField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter2, 10, ::facebook::thrift::test::MyI64, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedLongField_ref() & {
    return {this->__fbthrift_field_adaptedLongField, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "adaptedLongField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter2, 10, ::facebook::thrift::test::MyI64, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedLongField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedLongField), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "adaptedLongField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter2, 10, ::facebook::thrift::test::MyI64, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedLongField() const& {
    return {this->__fbthrift_field_adaptedLongField, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "adaptedLongField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter2, 10, ::facebook::thrift::test::MyI64, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedLongField() & {
    return {this->__fbthrift_field_adaptedLongField, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "adaptedLongField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter2, 10, ::facebook::thrift::test::MyI64, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedLongField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedLongField), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "doubleAdaptedField" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::DoubleTypedefI64>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> doubleAdaptedField_ref() const& {
    return {this->__fbthrift_field_doubleAdaptedField, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "doubleAdaptedField" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::DoubleTypedefI64>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> doubleAdaptedField_ref() & {
    return {this->__fbthrift_field_doubleAdaptedField, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "doubleAdaptedField" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::DoubleTypedefI64>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> doubleAdaptedField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_doubleAdaptedField), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "doubleAdaptedField" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::DoubleTypedefI64>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> doubleAdaptedField() const& {
    return {this->__fbthrift_field_doubleAdaptedField, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "doubleAdaptedField" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::DoubleTypedefI64>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> doubleAdaptedField() & {
    return {this->__fbthrift_field_doubleAdaptedField, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "doubleAdaptedField" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::DoubleTypedefI64>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> doubleAdaptedField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_doubleAdaptedField), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "adapted_list" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adapted_list_ref() const& {
    return {this->__fbthrift_field_adapted_list, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "adapted_list" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adapted_list_ref() & {
    return {this->__fbthrift_field_adapted_list, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "adapted_list" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adapted_list_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adapted_list), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "adapted_list" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adapted_list() const& {
    return {this->__fbthrift_field_adapted_list, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "adapted_list" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adapted_list() & {
    return {this->__fbthrift_field_adapted_list, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "adapted_list" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adapted_list() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adapted_list), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "adapted_set" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adapted_set_ref() const& {
    return {this->__fbthrift_field_adapted_set, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "adapted_set" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adapted_set_ref() & {
    return {this->__fbthrift_field_adapted_set, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "adapted_set" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adapted_set_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adapted_set), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "adapted_set" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adapted_set() const& {
    return {this->__fbthrift_field_adapted_set, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "adapted_set" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adapted_set() & {
    return {this->__fbthrift_field_adapted_set, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "adapted_set" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adapted_set() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adapted_set), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "adapted_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adapted_map_ref() const& {
    return {this->__fbthrift_field_adapted_map, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "adapted_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adapted_map_ref() & {
    return {this->__fbthrift_field_adapted_map, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "adapted_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adapted_map_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adapted_map), __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "adapted_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adapted_map() const& {
    return {this->__fbthrift_field_adapted_map, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "adapted_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adapted_map() & {
    return {this->__fbthrift_field_adapted_map, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "adapted_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adapted_map() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adapted_map), __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "adapted_list_nested" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adapted_list_nested_ref() const& {
    return {this->__fbthrift_field_adapted_list_nested, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "adapted_list_nested" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adapted_list_nested_ref() & {
    return {this->__fbthrift_field_adapted_list_nested, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "adapted_list_nested" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adapted_list_nested_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adapted_list_nested), __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "adapted_list_nested" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adapted_list_nested() const& {
    return {this->__fbthrift_field_adapted_list_nested, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "adapted_list_nested" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adapted_list_nested() & {
    return {this->__fbthrift_field_adapted_list_nested, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "adapted_list_nested" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adapted_list_nested() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adapted_list_nested), __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "adapted_list" } */
  [[deprecated("Use `FOO.adapted_list().value()` instead of `FOO.get_adapted_list()`")]]
  const ::std::vector<::std::int32_t>& get_adapted_list() const&;

  /** Glean { "field": "adapted_list" } */
  [[deprecated("Use `FOO.adapted_list().value()` instead of `FOO.get_adapted_list()`")]]
  ::std::vector<::std::int32_t> get_adapted_list() &&;

  /** Glean { "field": "adapted_list" } */
  template <typename T_Foo_adapted_list_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.adapted_list() = BAR` instead of `FOO.set_adapted_list(BAR)`")]]
  ::std::vector<::std::int32_t>& set_adapted_list(T_Foo_adapted_list_struct_setter&& adapted_list_) {
    adapted_list_ref() = std::forward<T_Foo_adapted_list_struct_setter>(adapted_list_);
    return __fbthrift_field_adapted_list;
  }

  /** Glean { "field": "adapted_set" } */
  [[deprecated("Use `FOO.adapted_set().value()` instead of `FOO.get_adapted_set()`")]]
  const ::std::set<::std::int32_t>& get_adapted_set() const&;

  /** Glean { "field": "adapted_set" } */
  [[deprecated("Use `FOO.adapted_set().value()` instead of `FOO.get_adapted_set()`")]]
  ::std::set<::std::int32_t> get_adapted_set() &&;

  /** Glean { "field": "adapted_set" } */
  template <typename T_Foo_adapted_set_struct_setter = ::std::set<::std::int32_t>>
  [[deprecated("Use `FOO.adapted_set() = BAR` instead of `FOO.set_adapted_set(BAR)`")]]
  ::std::set<::std::int32_t>& set_adapted_set(T_Foo_adapted_set_struct_setter&& adapted_set_) {
    adapted_set_ref() = std::forward<T_Foo_adapted_set_struct_setter>(adapted_set_);
    return __fbthrift_field_adapted_set;
  }

  /** Glean { "field": "adapted_map" } */
  [[deprecated("Use `FOO.adapted_map().value()` instead of `FOO.get_adapted_map()`")]]
  const ::std::map<::std::string, ::std::int32_t>& get_adapted_map() const&;

  /** Glean { "field": "adapted_map" } */
  [[deprecated("Use `FOO.adapted_map().value()` instead of `FOO.get_adapted_map()`")]]
  ::std::map<::std::string, ::std::int32_t> get_adapted_map() &&;

  /** Glean { "field": "adapted_map" } */
  template <typename T_Foo_adapted_map_struct_setter = ::std::map<::std::string, ::std::int32_t>>
  [[deprecated("Use `FOO.adapted_map() = BAR` instead of `FOO.set_adapted_map(BAR)`")]]
  ::std::map<::std::string, ::std::int32_t>& set_adapted_map(T_Foo_adapted_map_struct_setter&& adapted_map_) {
    adapted_map_ref() = std::forward<T_Foo_adapted_map_struct_setter>(adapted_map_);
    return __fbthrift_field_adapted_map;
  }

  /** Glean { "field": "adapted_list_nested" } */
  [[deprecated("Use `FOO.adapted_list_nested().value()` instead of `FOO.get_adapted_list_nested()`")]]
  const ::std::vector<::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>& get_adapted_list_nested() const&;

  /** Glean { "field": "adapted_list_nested" } */
  [[deprecated("Use `FOO.adapted_list_nested().value()` instead of `FOO.get_adapted_list_nested()`")]]
  ::std::vector<::std::vector<::std::map<::std::int32_t, ::std::int32_t>>> get_adapted_list_nested() &&;

  /** Glean { "field": "adapted_list_nested" } */
  template <typename T_Foo_adapted_list_nested_struct_setter = ::std::vector<::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>>
  [[deprecated("Use `FOO.adapted_list_nested() = BAR` instead of `FOO.set_adapted_list_nested(BAR)`")]]
  ::std::vector<::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>& set_adapted_list_nested(T_Foo_adapted_list_nested_struct_setter&& adapted_list_nested_) {
    adapted_list_nested_ref() = std::forward<T_Foo_adapted_list_nested_struct_setter>(adapted_list_nested_);
    return __fbthrift_field_adapted_list_nested;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Foo>;
  friend void swap(Foo& a, Foo& b);
};

template <class Protocol_>
unsigned long Foo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "FooWithAdapter", "kind": "typedef" } */
using FooWithAdapter = ::apache::thrift::adapt_detail::adapted_t<::my::Adapter1, ::facebook::thrift::test::Foo>;

/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "Baz", "kind": "union" } */
class Baz final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 5;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,4,6,8,9};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::intField,
    ::apache::thrift::ident::setField,
    ::apache::thrift::ident::mapField,
    ::apache::thrift::ident::binaryField,
    ::apache::thrift::ident::longField
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i32_t>,
    ::apache::thrift::type::adapted<::my::Adapter2, ::apache::thrift::type::set<::apache::thrift::type::string_t>>,
    ::apache::thrift::type::adapted<::my::Adapter3, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::adapted<::my::Adapter2, ::apache::thrift::type::list<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::string_t>>>>>,
    ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::binary_t>,
    ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i64_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_destruct();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Baz;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    true;


 public:
  enum class Type : int {
    __EMPTY__ = 0,
    intField = 1,
    setField = 4,
    mapField = 6,
    binaryField = 8,
    longField = 9,
  } ;

  Baz()
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {}

  Baz(Baz&& rhs) noexcept
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::intField:
      {
        set_intField(std::move(rhs.value_.intField));
        break;
      }
      case Type::setField:
      {
        set_setField(std::move(rhs.value_.setField));
        break;
      }
      case Type::mapField:
      {
        set_mapField(std::move(rhs.value_.mapField));
        break;
      }
      case Type::binaryField:
      {
        set_binaryField(std::move(rhs.value_.binaryField));
        break;
      }
      case Type::longField:
      {
        set_longField(std::move(rhs.value_.longField));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  Baz(const Baz& rhs);

  Baz& operator=(Baz&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        __fbthrift_clear();
        return *this;
      }
      case Type::intField:
      {
        set_intField(std::move(rhs.value_.intField));
        break;
      }
      case Type::setField:
      {
        set_setField(std::move(rhs.value_.setField));
        break;
      }
      case Type::mapField:
      {
        set_mapField(std::move(rhs.value_.mapField));
        break;
      }
      case Type::binaryField:
      {
        set_binaryField(std::move(rhs.value_.binaryField));
        break;
      }
      case Type::longField:
      {
        set_longField(std::move(rhs.value_.longField));
        break;
      }
      default:
      {
        assert(false);
        __fbthrift_clear();
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  Baz& operator=(const Baz& rhs);

  ~Baz();

  union storage_type {
    ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::facebook::thrift::test::i32_5137, Baz> intField;
    ::facebook::thrift::test::SetWithAdapter setField;
    ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Baz> mapField;
    ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 8, ::facebook::thrift::test::binary_5673, Baz> binaryField;
    ::facebook::thrift::test::MyI64 longField;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const Baz&) const;
  bool operator<(const Baz&) const;

  /** Glean { "field": "intField" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::facebook::thrift::test::i32_5137, Baz>& set_intField(::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::facebook::thrift::test::i32_5137, Baz> t = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::facebook::thrift::test::i32_5137, Baz>()) {
    using T0 = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::facebook::thrift::test::i32_5137, Baz>;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::intField);
    ::new (std::addressof(value_.intField)) T(t);
    return value_.intField;
  }


  /** Glean { "field": "setField" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::facebook::thrift::test::SetWithAdapter& set_setField(::facebook::thrift::test::SetWithAdapter const &t) {
    using T0 = ::facebook::thrift::test::SetWithAdapter;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::setField);
    ::new (std::addressof(value_.setField)) T(t);
    return value_.setField;
  }

  /** Glean { "field": "setField" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::facebook::thrift::test::SetWithAdapter& set_setField(::facebook::thrift::test::SetWithAdapter&& t) {
    using T0 = ::facebook::thrift::test::SetWithAdapter;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::setField);
    ::new (std::addressof(value_.setField)) T(std::move(t));
    return value_.setField;
  }

  /** Glean { "field": "setField" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::facebook::thrift::test::SetWithAdapter, T...>> ::facebook::thrift::test::SetWithAdapter& set_setField(T&&... t) {
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::setField);
    ::new (std::addressof(value_.setField)) ::facebook::thrift::test::SetWithAdapter(std::forward<T>(t)...);
    return value_.setField;
  }

  /** Glean { "field": "mapField" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Baz>& set_mapField(::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Baz> const &t) {
    using T0 = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Baz>;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::mapField);
    ::new (std::addressof(value_.mapField)) T(t);
    return value_.mapField;
  }

  /** Glean { "field": "mapField" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Baz>& set_mapField(::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Baz>&& t) {
    using T0 = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Baz>;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::mapField);
    ::new (std::addressof(value_.mapField)) T(std::move(t));
    return value_.mapField;
  }

  /** Glean { "field": "mapField" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Baz>, T...>> ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Baz>& set_mapField(T&&... t) {
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::mapField);
    ::new (std::addressof(value_.mapField)) ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Baz>(std::forward<T>(t)...);
    return value_.mapField;
  }

  /** Glean { "field": "binaryField" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 8, ::facebook::thrift::test::binary_5673, Baz>& set_binaryField(::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 8, ::facebook::thrift::test::binary_5673, Baz> const &t) {
    using T0 = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 8, ::facebook::thrift::test::binary_5673, Baz>;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::binaryField);
    ::new (std::addressof(value_.binaryField)) T(t);
    return value_.binaryField;
  }

  /** Glean { "field": "binaryField" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 8, ::facebook::thrift::test::binary_5673, Baz>& set_binaryField(::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 8, ::facebook::thrift::test::binary_5673, Baz>&& t) {
    using T0 = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 8, ::facebook::thrift::test::binary_5673, Baz>;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::binaryField);
    ::new (std::addressof(value_.binaryField)) T(std::move(t));
    return value_.binaryField;
  }

  /** Glean { "field": "binaryField" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 8, ::facebook::thrift::test::binary_5673, Baz>, T...>> ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 8, ::facebook::thrift::test::binary_5673, Baz>& set_binaryField(T&&... t) {
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::binaryField);
    ::new (std::addressof(value_.binaryField)) ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 8, ::facebook::thrift::test::binary_5673, Baz>(std::forward<T>(t)...);
    return value_.binaryField;
  }


  /** Glean { "field": "longField" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::facebook::thrift::test::MyI64& set_longField(::facebook::thrift::test::MyI64 t = ::facebook::thrift::test::MyI64()) {
    using T0 = ::facebook::thrift::test::MyI64;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::longField);
    ::new (std::addressof(value_.longField)) T(t);
    return value_.longField;
  }


  /** Glean { "field": "intField" } */
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::facebook::thrift::test::i32_5137, Baz> const& get_intField() const {
    if (getType() != Type::intField) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.intField;
  }

  /** Glean { "field": "setField" } */
  ::facebook::thrift::test::SetWithAdapter const& get_setField() const {
    if (getType() != Type::setField) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.setField;
  }

  /** Glean { "field": "mapField" } */
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Baz> const& get_mapField() const {
    if (getType() != Type::mapField) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.mapField;
  }

  /** Glean { "field": "binaryField" } */
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 8, ::facebook::thrift::test::binary_5673, Baz> const& get_binaryField() const {
    if (getType() != Type::binaryField) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.binaryField;
  }

  /** Glean { "field": "longField" } */
  ::facebook::thrift::test::MyI64 const& get_longField() const {
    if (getType() != Type::longField) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.longField;
  }

  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::facebook::thrift::test::i32_5137, Baz>& mutable_intField() {
    assert(getType() == Type::intField);
    return value_.intField;
  }

  ::facebook::thrift::test::SetWithAdapter& mutable_setField() {
    assert(getType() == Type::setField);
    return value_.setField;
  }

  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Baz>& mutable_mapField() {
    assert(getType() == Type::mapField);
    return value_.mapField;
  }

  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 8, ::facebook::thrift::test::binary_5673, Baz>& mutable_binaryField() {
    assert(getType() == Type::binaryField);
    return value_.binaryField;
  }

  ::facebook::thrift::test::MyI64& mutable_longField() {
    assert(getType() == Type::longField);
    return value_.longField;
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::facebook::thrift::test::i32_5137, Baz>>
  T move_intField() {
    assert(getType() == Type::intField);
    return std::move(value_.intField);
  }

  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  T move_setField() {
    assert(getType() == Type::setField);
    return std::move(value_.setField);
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Baz>>
  T move_mapField() {
    assert(getType() == Type::mapField);
    return std::move(value_.mapField);
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 8, ::facebook::thrift::test::binary_5673, Baz>>
  T move_binaryField() {
    assert(getType() == Type::binaryField);
    return std::move(value_.binaryField);
  }

  template <typename..., typename T = ::facebook::thrift::test::MyI64>
  T move_longField() {
    assert(getType() == Type::longField);
    return std::move(value_.longField);
  }

  /** Glean { "field": "intField" } */
  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::facebook::thrift::test::i32_5137, Baz>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> intField_ref() const& {
    return {value_.intField, fbthrift_type_, folly::to_underlying(Type::intField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "intField" } */
  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::facebook::thrift::test::i32_5137, Baz>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> intField_ref() & {
    return {value_.intField, fbthrift_type_, folly::to_underlying(Type::intField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "intField" } */
  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::facebook::thrift::test::i32_5137, Baz>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> intField_ref() && {
    return {std::move(value_.intField), fbthrift_type_, folly::to_underlying(Type::intField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "intField" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::facebook::thrift::test::i32_5137, Baz>&> intField() const& {
    return {value_.intField, fbthrift_type_, folly::to_underlying(Type::intField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "intField" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::facebook::thrift::test::i32_5137, Baz>&> intField() & {
    return {value_.intField, fbthrift_type_, folly::to_underlying(Type::intField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "intField" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::facebook::thrift::test::i32_5137, Baz>&&> intField() && {
    return {std::move(value_.intField), fbthrift_type_, folly::to_underlying(Type::intField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "setField" } */
  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> setField_ref() const& {
    return {value_.setField, fbthrift_type_, folly::to_underlying(Type::setField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "setField" } */
  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> setField_ref() & {
    return {value_.setField, fbthrift_type_, folly::to_underlying(Type::setField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "setField" } */
  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> setField_ref() && {
    return {std::move(value_.setField), fbthrift_type_, folly::to_underlying(Type::setField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "setField" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::facebook::thrift::test::SetWithAdapter&> setField() const& {
    return {value_.setField, fbthrift_type_, folly::to_underlying(Type::setField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "setField" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::facebook::thrift::test::SetWithAdapter&> setField() & {
    return {value_.setField, fbthrift_type_, folly::to_underlying(Type::setField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "setField" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::facebook::thrift::test::SetWithAdapter&&> setField() && {
    return {std::move(value_.setField), fbthrift_type_, folly::to_underlying(Type::setField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "mapField" } */
  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Baz>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> mapField_ref() const& {
    return {value_.mapField, fbthrift_type_, folly::to_underlying(Type::mapField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "mapField" } */
  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Baz>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> mapField_ref() & {
    return {value_.mapField, fbthrift_type_, folly::to_underlying(Type::mapField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "mapField" } */
  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Baz>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> mapField_ref() && {
    return {std::move(value_.mapField), fbthrift_type_, folly::to_underlying(Type::mapField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "mapField" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Baz>&> mapField() const& {
    return {value_.mapField, fbthrift_type_, folly::to_underlying(Type::mapField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "mapField" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Baz>&> mapField() & {
    return {value_.mapField, fbthrift_type_, folly::to_underlying(Type::mapField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "mapField" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::facebook::thrift::test::map_string_ListWithElemAdapter_withAdapter_8454, Baz>&&> mapField() && {
    return {std::move(value_.mapField), fbthrift_type_, folly::to_underlying(Type::mapField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "binaryField" } */
  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 8, ::facebook::thrift::test::binary_5673, Baz>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> binaryField_ref() const& {
    return {value_.binaryField, fbthrift_type_, folly::to_underlying(Type::binaryField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "binaryField" } */
  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 8, ::facebook::thrift::test::binary_5673, Baz>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> binaryField_ref() & {
    return {value_.binaryField, fbthrift_type_, folly::to_underlying(Type::binaryField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "binaryField" } */
  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 8, ::facebook::thrift::test::binary_5673, Baz>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> binaryField_ref() && {
    return {std::move(value_.binaryField), fbthrift_type_, folly::to_underlying(Type::binaryField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "binaryField" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 8, ::facebook::thrift::test::binary_5673, Baz>&> binaryField() const& {
    return {value_.binaryField, fbthrift_type_, folly::to_underlying(Type::binaryField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "binaryField" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 8, ::facebook::thrift::test::binary_5673, Baz>&> binaryField() & {
    return {value_.binaryField, fbthrift_type_, folly::to_underlying(Type::binaryField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "binaryField" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 8, ::facebook::thrift::test::binary_5673, Baz>&&> binaryField() && {
    return {std::move(value_.binaryField), fbthrift_type_, folly::to_underlying(Type::binaryField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "longField" } */
  template <typename..., typename T = ::facebook::thrift::test::MyI64>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> longField_ref() const& {
    return {value_.longField, fbthrift_type_, folly::to_underlying(Type::longField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "longField" } */
  template <typename..., typename T = ::facebook::thrift::test::MyI64>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> longField_ref() & {
    return {value_.longField, fbthrift_type_, folly::to_underlying(Type::longField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "longField" } */
  template <typename..., typename T = ::facebook::thrift::test::MyI64>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> longField_ref() && {
    return {std::move(value_.longField), fbthrift_type_, folly::to_underlying(Type::longField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "longField" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::facebook::thrift::test::MyI64&> longField() const& {
    return {value_.longField, fbthrift_type_, folly::to_underlying(Type::longField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "longField" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::facebook::thrift::test::MyI64&> longField() & {
    return {value_.longField, fbthrift_type_, folly::to_underlying(Type::longField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "longField" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::facebook::thrift::test::MyI64&&> longField() && {
    return {std::move(value_.longField), fbthrift_type_, folly::to_underlying(Type::longField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(fbthrift_type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  storage_type value_;
  std::underlying_type_t<Type> fbthrift_type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Baz>;
  friend void swap(Baz& a, Baz& b);
};

template <class Protocol_>
unsigned long Baz::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


namespace detail {
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "DirectlyAdapted", "kind": "struct" } */
class DirectlyAdapted final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = DirectlyAdapted;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  DirectlyAdapted() :
      __fbthrift_field_field() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  DirectlyAdapted(apache::thrift::FragileConstructor, ::std::int32_t field__arg);

  DirectlyAdapted(DirectlyAdapted&&) = default;

  DirectlyAdapted(const DirectlyAdapted&) = default;


  DirectlyAdapted& operator=(DirectlyAdapted&&) = default;

  DirectlyAdapted& operator=(const DirectlyAdapted&) = default;
 private:
  ::std::int32_t __fbthrift_field_field;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const DirectlyAdapted&) const;
  bool operator<(const DirectlyAdapted&) const;

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field_ref() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field_ref() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  [[deprecated("Use `FOO.field().value()` instead of `FOO.get_field()`")]]
  ::std::int32_t get_field() const;

  /** Glean { "field": "field" } */
  [[deprecated("Use `FOO.field() = BAR` instead of `FOO.set_field(BAR)`")]]
  ::std::int32_t& set_field(::std::int32_t field_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<DirectlyAdapted>;
  friend void swap(DirectlyAdapted& a, DirectlyAdapted& b);
};

template <class Protocol_>
unsigned long DirectlyAdapted::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}
} // namespace detail

using DirectlyAdapted = ::apache::thrift::adapt_detail::adapted_t<::my::Adapter, ::facebook::thrift::test::detail::DirectlyAdapted>;

/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "FooWithAdapter_9317", "kind": "typedef" } */
using FooWithAdapter_9317 = ::facebook::thrift::test::FooWithAdapter;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "Baz_7352", "kind": "typedef" } */
using Baz_7352 = ::facebook::thrift::test::Baz;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "Foo_3943", "kind": "typedef" } */
using Foo_3943 = ::facebook::thrift::test::Foo;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "Foo_6868", "kind": "typedef" } */
using Foo_6868 = ::facebook::thrift::test::Foo;

/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "Bar", "kind": "struct" } */
class Bar final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 7;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::structField,
    ::apache::thrift::ident::optionalStructField,
    ::apache::thrift::ident::structListField,
    ::apache::thrift::ident::optionalStructListField,
    ::apache::thrift::ident::unionField,
    ::apache::thrift::ident::optionalUnionField,
    ::apache::thrift::ident::adaptedStructField
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::struct_t<::facebook::thrift::test::Foo>>,
    ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::struct_t<::facebook::thrift::test::Foo>>,
    ::apache::thrift::type::list<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::struct_t<::facebook::thrift::test::Foo>>>,
    ::apache::thrift::type::list<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::struct_t<::facebook::thrift::test::Foo>>>,
    ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::union_t<::facebook::thrift::test::Baz>>,
    ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::union_t<::facebook::thrift::test::Baz>>,
    ::apache::thrift::type::adapted<::my::Adapter, ::apache::thrift::type::struct_t<::facebook::thrift::test::detail::DirectlyAdapted>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Bar;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    true;


 public:

  Bar();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Bar(apache::thrift::FragileConstructor, ::my::Cpp::Type1 structField__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::facebook::thrift::test::Foo_3943, Bar> optionalStructField__arg, ::std::vector<::facebook::thrift::test::FooWithAdapter_9317> structListField__arg, ::std::vector<::facebook::thrift::test::FooWithAdapter_9317> optionalStructListField__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 5, ::facebook::thrift::test::Baz_7352, Bar> unionField__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 6, ::facebook::thrift::test::Baz_7352, Bar> optionalUnionField__arg, ::facebook::thrift::test::DirectlyAdapted adaptedStructField__arg);

  Bar(Bar&&) noexcept;
  Bar(const Bar& src);


  Bar& operator=(Bar&&) noexcept;
  Bar& operator=(const Bar& src);

  ~Bar();

 private:
  ::my::Cpp::Type1 __fbthrift_field_structField;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::facebook::thrift::test::Foo_3943, Bar> __fbthrift_field_optionalStructField;
 private:
  ::std::vector<::facebook::thrift::test::FooWithAdapter_9317> __fbthrift_field_structListField;
 private:
  ::std::vector<::facebook::thrift::test::FooWithAdapter_9317> __fbthrift_field_optionalStructListField;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 5, ::facebook::thrift::test::Baz_7352, Bar> __fbthrift_field_unionField;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 6, ::facebook::thrift::test::Baz_7352, Bar> __fbthrift_field_optionalUnionField;
 private:
  ::facebook::thrift::test::DirectlyAdapted __fbthrift_field_adaptedStructField;
 private:
  apache::thrift::detail::isset_bitset<7, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const Bar&) const;
  bool operator<(const Bar&) const;

  /** Glean { "field": "structField" } */
  template <typename..., typename fbthrift_T = ::my::Cpp::Type1>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> structField_ref() const& {
    return {this->__fbthrift_field_structField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "structField" } */
  template <typename..., typename fbthrift_T = ::my::Cpp::Type1>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> structField_ref() & {
    return {this->__fbthrift_field_structField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "structField" } */
  template <typename..., typename fbthrift_T = ::my::Cpp::Type1>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> structField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_structField), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "structField" } */
  template <typename..., typename fbthrift_T = ::my::Cpp::Type1>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> structField() const& {
    return {this->__fbthrift_field_structField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "structField" } */
  template <typename..., typename fbthrift_T = ::my::Cpp::Type1>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> structField() & {
    return {this->__fbthrift_field_structField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "structField" } */
  template <typename..., typename fbthrift_T = ::my::Cpp::Type1>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> structField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_structField), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "optionalStructField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::facebook::thrift::test::Foo_3943, Bar>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> optionalStructField_ref() const& {
    return {this->__fbthrift_field_optionalStructField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "optionalStructField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::facebook::thrift::test::Foo_3943, Bar>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> optionalStructField_ref() & {
    return {this->__fbthrift_field_optionalStructField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "optionalStructField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::facebook::thrift::test::Foo_3943, Bar>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> optionalStructField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_optionalStructField), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "optionalStructField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::facebook::thrift::test::Foo_3943, Bar>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> optionalStructField() const& {
    return {this->__fbthrift_field_optionalStructField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "optionalStructField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::facebook::thrift::test::Foo_3943, Bar>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> optionalStructField() & {
    return {this->__fbthrift_field_optionalStructField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "optionalStructField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::facebook::thrift::test::Foo_3943, Bar>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> optionalStructField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_optionalStructField), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "structListField" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::thrift::test::FooWithAdapter_9317>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> structListField_ref() const& {
    return {this->__fbthrift_field_structListField, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "structListField" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::thrift::test::FooWithAdapter_9317>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> structListField_ref() & {
    return {this->__fbthrift_field_structListField, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "structListField" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::thrift::test::FooWithAdapter_9317>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> structListField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_structListField), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "structListField" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::thrift::test::FooWithAdapter_9317>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> structListField() const& {
    return {this->__fbthrift_field_structListField, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "structListField" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::thrift::test::FooWithAdapter_9317>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> structListField() & {
    return {this->__fbthrift_field_structListField, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "structListField" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::thrift::test::FooWithAdapter_9317>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> structListField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_structListField), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "optionalStructListField" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::thrift::test::FooWithAdapter_9317>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> optionalStructListField_ref() const& {
    return {this->__fbthrift_field_optionalStructListField, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "optionalStructListField" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::thrift::test::FooWithAdapter_9317>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> optionalStructListField_ref() & {
    return {this->__fbthrift_field_optionalStructListField, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "optionalStructListField" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::thrift::test::FooWithAdapter_9317>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> optionalStructListField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_optionalStructListField), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "optionalStructListField" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::thrift::test::FooWithAdapter_9317>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> optionalStructListField() const& {
    return {this->__fbthrift_field_optionalStructListField, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "optionalStructListField" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::thrift::test::FooWithAdapter_9317>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> optionalStructListField() & {
    return {this->__fbthrift_field_optionalStructListField, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "optionalStructListField" } */
  template <typename..., typename fbthrift_T = ::std::vector<::facebook::thrift::test::FooWithAdapter_9317>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> optionalStructListField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_optionalStructListField), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "unionField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 5, ::facebook::thrift::test::Baz_7352, Bar>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> unionField_ref() const& {
    return {this->__fbthrift_field_unionField, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "unionField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 5, ::facebook::thrift::test::Baz_7352, Bar>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> unionField_ref() & {
    return {this->__fbthrift_field_unionField, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "unionField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 5, ::facebook::thrift::test::Baz_7352, Bar>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> unionField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_unionField), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "unionField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 5, ::facebook::thrift::test::Baz_7352, Bar>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> unionField() const& {
    return {this->__fbthrift_field_unionField, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "unionField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 5, ::facebook::thrift::test::Baz_7352, Bar>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> unionField() & {
    return {this->__fbthrift_field_unionField, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "unionField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 5, ::facebook::thrift::test::Baz_7352, Bar>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> unionField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_unionField), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "optionalUnionField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 6, ::facebook::thrift::test::Baz_7352, Bar>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> optionalUnionField_ref() const& {
    return {this->__fbthrift_field_optionalUnionField, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "optionalUnionField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 6, ::facebook::thrift::test::Baz_7352, Bar>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> optionalUnionField_ref() & {
    return {this->__fbthrift_field_optionalUnionField, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "optionalUnionField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 6, ::facebook::thrift::test::Baz_7352, Bar>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> optionalUnionField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_optionalUnionField), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "optionalUnionField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 6, ::facebook::thrift::test::Baz_7352, Bar>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> optionalUnionField() const& {
    return {this->__fbthrift_field_optionalUnionField, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "optionalUnionField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 6, ::facebook::thrift::test::Baz_7352, Bar>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> optionalUnionField() & {
    return {this->__fbthrift_field_optionalUnionField, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "optionalUnionField" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 6, ::facebook::thrift::test::Baz_7352, Bar>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> optionalUnionField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_optionalUnionField), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "adaptedStructField" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::DirectlyAdapted>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedStructField_ref() const& {
    return {this->__fbthrift_field_adaptedStructField, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "adaptedStructField" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::DirectlyAdapted>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedStructField_ref() & {
    return {this->__fbthrift_field_adaptedStructField, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "adaptedStructField" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::DirectlyAdapted>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedStructField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedStructField), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "adaptedStructField" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::DirectlyAdapted>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedStructField() const& {
    return {this->__fbthrift_field_adaptedStructField, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "adaptedStructField" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::DirectlyAdapted>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedStructField() & {
    return {this->__fbthrift_field_adaptedStructField, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "adaptedStructField" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::DirectlyAdapted>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedStructField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedStructField), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "structListField" } */
  [[deprecated("Use `FOO.structListField().value()` instead of `FOO.get_structListField()`")]]
  const ::std::vector<::facebook::thrift::test::FooWithAdapter_9317>& get_structListField() const&;

  /** Glean { "field": "structListField" } */
  [[deprecated("Use `FOO.structListField().value()` instead of `FOO.get_structListField()`")]]
  ::std::vector<::facebook::thrift::test::FooWithAdapter_9317> get_structListField() &&;

  /** Glean { "field": "structListField" } */
  template <typename T_Bar_structListField_struct_setter = ::std::vector<::facebook::thrift::test::FooWithAdapter_9317>>
  [[deprecated("Use `FOO.structListField() = BAR` instead of `FOO.set_structListField(BAR)`")]]
  ::std::vector<::facebook::thrift::test::FooWithAdapter_9317>& set_structListField(T_Bar_structListField_struct_setter&& structListField_) {
    structListField_ref() = std::forward<T_Bar_structListField_struct_setter>(structListField_);
    return __fbthrift_field_structListField;
  }

  /** Glean { "field": "optionalStructListField" } */
  [[deprecated("Use `FOO.optionalStructListField().value()` instead of `FOO.get_optionalStructListField()`")]]
  const ::std::vector<::facebook::thrift::test::FooWithAdapter_9317>* get_optionalStructListField() const&;

  /** Glean { "field": "optionalStructListField" } */
  [[deprecated("Use `FOO.optionalStructListField().value()` instead of `FOO.get_optionalStructListField()`")]]
  ::std::vector<::facebook::thrift::test::FooWithAdapter_9317>* get_optionalStructListField() &;

  ::std::vector<::facebook::thrift::test::FooWithAdapter_9317>* get_optionalStructListField() && = delete;

  /** Glean { "field": "optionalStructListField" } */
  template <typename T_Bar_optionalStructListField_struct_setter = ::std::vector<::facebook::thrift::test::FooWithAdapter_9317>>
  [[deprecated("Use `FOO.optionalStructListField() = BAR` instead of `FOO.set_optionalStructListField(BAR)`")]]
  ::std::vector<::facebook::thrift::test::FooWithAdapter_9317>& set_optionalStructListField(T_Bar_optionalStructListField_struct_setter&& optionalStructListField_) {
    optionalStructListField_ref() = std::forward<T_Bar_optionalStructListField_struct_setter>(optionalStructListField_);
    return __fbthrift_field_optionalStructListField;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Bar>;
  friend void swap(Bar& a, Bar& b);
};

template <class Protocol_>
unsigned long Bar::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "StructWithAdapter", "kind": "typedef" } */
using StructWithAdapter = ::apache::thrift::adapt_detail::adapted_t<::my::Adapter2, ::facebook::thrift::test::Bar>;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "UnionWithAdapter", "kind": "typedef" } */
using UnionWithAdapter = ::apache::thrift::adapt_detail::adapted_t<::my::Adapter2, ::facebook::thrift::test::Baz>;

/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "A", "kind": "struct" } */
class A final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = A;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  A() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  A(apache::thrift::FragileConstructor);

  A(A&&) = default;

  A(const A&) = default;


  A& operator=(A&&) = default;

  A& operator=(const A&) = default;

 public:

  bool operator==(const A&) const;
  bool operator<(const A&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<A>;
  friend void swap(A& a, A& b);
};

template <class Protocol_>
unsigned long A::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "AdaptedA", "kind": "typedef" } */
using AdaptedA = ::apache::thrift::adapt_detail::adapted_t<::my::Adapter, ::facebook::thrift::test::A>;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "StringWithCppAdapter", "kind": "typedef" } */
using StringWithCppAdapter = ::apache::thrift::adapt_detail::adapted_t<::my::Adapter2, ::std::string>;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "DurationMs", "kind": "typedef" } */
using DurationMs = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::test::AdaptTestMsAdapter, ::std::int64_t>;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "AdaptedBool", "kind": "typedef" } */
using AdaptedBool = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::test::TemplatedTestAdapter, bool>;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "AdaptedByte", "kind": "typedef" } */
using AdaptedByte = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::test::TemplatedTestAdapter, ::std::int8_t>;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "AdaptedShort", "kind": "typedef" } */
using AdaptedShort = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::test::TemplatedTestAdapter, ::std::int16_t>;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "AdaptedInteger", "kind": "typedef" } */
using AdaptedInteger = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::test::TemplatedTestAdapter, ::std::int32_t>;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "AdaptedLong", "kind": "typedef" } */
using AdaptedLong = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::test::TemplatedTestAdapter, ::std::int64_t>;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "AdaptedDouble", "kind": "typedef" } */
using AdaptedDouble = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::test::TemplatedTestAdapter, double>;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "AdaptedString", "kind": "typedef" } */
using AdaptedString = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::test::TemplatedTestAdapter, ::std::string>;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "DoubleTypedefBool", "kind": "typedef" } */
using DoubleTypedefBool = ::facebook::thrift::test::AdaptedBool;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "IOBuf", "kind": "typedef" } */
using IOBuf = ::folly::IOBuf;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "CustomProtocolType", "kind": "typedef" } */
using CustomProtocolType = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::test::CustomProtocolAdapter, ::facebook::thrift::test::IOBuf>;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "IndirectionString", "kind": "typedef" } */
using IndirectionString = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::IndirectionAdapter<::apache::thrift::test::IndirectionString>, ::std::string>;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "AdaptedEnum", "kind": "typedef" } */
using AdaptedEnum = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::StaticCastAdapter<::apache::thrift::test::basic::AdaptedEnum, ::apache::thrift::test::basic::ThriftAdaptedEnum>, ::facebook::thrift::test::ThriftAdaptedEnum>;

/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "ThriftAdaptedStruct", "kind": "struct" } */
class ThriftAdaptedStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::data
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ThriftAdaptedStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  ThriftAdaptedStruct() :
      __fbthrift_field_data() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ThriftAdaptedStruct(apache::thrift::FragileConstructor, ::std::int64_t data__arg);

  ThriftAdaptedStruct(ThriftAdaptedStruct&&) = default;

  ThriftAdaptedStruct(const ThriftAdaptedStruct&) = default;


  ThriftAdaptedStruct& operator=(ThriftAdaptedStruct&&) = default;

  ThriftAdaptedStruct& operator=(const ThriftAdaptedStruct&) = default;
 private:
  ::std::int64_t __fbthrift_field_data;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const ThriftAdaptedStruct&) const;
  bool operator<(const ThriftAdaptedStruct&) const;

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> data_ref() const& {
    return {this->__fbthrift_field_data, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> data_ref() & {
    return {this->__fbthrift_field_data, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> data_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_data), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> data() const& {
    return {this->__fbthrift_field_data, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> data() & {
    return {this->__fbthrift_field_data, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> data() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_data), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "data" } */
  [[deprecated("Use `FOO.data().value()` instead of `FOO.get_data()`")]]
  ::std::int64_t get_data() const;

  /** Glean { "field": "data" } */
  [[deprecated("Use `FOO.data() = BAR` instead of `FOO.set_data(BAR)`")]]
  ::std::int64_t& set_data(::std::int64_t data_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ThriftAdaptedStruct>;
  friend void swap(ThriftAdaptedStruct& a, ThriftAdaptedStruct& b);
};

template <class Protocol_>
unsigned long ThriftAdaptedStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "AdaptedTypedef", "kind": "typedef" } */
using AdaptedTypedef = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::test::TemplatedTestAdapter, ::facebook::thrift::test::ThriftAdaptedStruct>;

namespace detail {
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "DirectlyAdaptedStruct", "kind": "struct" } */
class DirectlyAdaptedStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::data
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = DirectlyAdaptedStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  DirectlyAdaptedStruct() :
      __fbthrift_field_data() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  DirectlyAdaptedStruct(apache::thrift::FragileConstructor, ::std::int64_t data__arg);

  DirectlyAdaptedStruct(DirectlyAdaptedStruct&&) = default;

  DirectlyAdaptedStruct(const DirectlyAdaptedStruct&) = default;


  DirectlyAdaptedStruct& operator=(DirectlyAdaptedStruct&&) = default;

  DirectlyAdaptedStruct& operator=(const DirectlyAdaptedStruct&) = default;
 private:
  ::std::int64_t __fbthrift_field_data;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const DirectlyAdaptedStruct&) const;
  bool operator<(const DirectlyAdaptedStruct&) const;

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> data_ref() const& {
    return {this->__fbthrift_field_data, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> data_ref() & {
    return {this->__fbthrift_field_data, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> data_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_data), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> data() const& {
    return {this->__fbthrift_field_data, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> data() & {
    return {this->__fbthrift_field_data, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> data() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_data), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "data" } */
  [[deprecated("Use `FOO.data().value()` instead of `FOO.get_data()`")]]
  ::std::int64_t get_data() const;

  /** Glean { "field": "data" } */
  [[deprecated("Use `FOO.data() = BAR` instead of `FOO.set_data(BAR)`")]]
  ::std::int64_t& set_data(::std::int64_t data_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<DirectlyAdaptedStruct>;
  friend void swap(DirectlyAdaptedStruct& a, DirectlyAdaptedStruct& b);
};

template <class Protocol_>
unsigned long DirectlyAdaptedStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}
} // namespace detail

using DirectlyAdaptedStruct = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::test::TemplatedTestAdapter, ::facebook::thrift::test::detail::DirectlyAdaptedStruct>;

/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "TypedefOfDirect", "kind": "typedef" } */
using TypedefOfDirect = ::facebook::thrift::test::DirectlyAdaptedStruct;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "AdaptedCircularAdaptee", "kind": "typedef" } */
using AdaptedCircularAdaptee = ::apache::thrift::test::TaggedWrapper<CircularAdaptee, CircularStruct>;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "CountingInt", "kind": "typedef" } */
using CountingInt = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::test::CountingAdapter<true, int>, ::std::int64_t>;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "MyI32_4873", "kind": "typedef" } */
using MyI32_4873 = ::facebook::thrift::test::MyI32;
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "StringWithAdapter_7208", "kind": "typedef" } */
using StringWithAdapter_7208 = ::facebook::thrift::test::StringWithAdapter;

/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "MyAnnotation", "kind": "struct" } */
class MyAnnotation final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::signature,
    ::apache::thrift::ident::color
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::enum_t<::facebook::thrift::test::Color>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyAnnotation;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  MyAnnotation();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyAnnotation(apache::thrift::FragileConstructor, ::std::string signature__arg, ::facebook::thrift::test::Color color__arg);

  MyAnnotation(MyAnnotation&&) noexcept;

  MyAnnotation(const MyAnnotation& src);


  MyAnnotation& operator=(MyAnnotation&&) noexcept;
  MyAnnotation& operator=(const MyAnnotation& src);

  ~MyAnnotation();

 private:
  ::std::string __fbthrift_field_signature;
 private:
  ::facebook::thrift::test::Color __fbthrift_field_color;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyAnnotation&) const;
  bool operator<(const MyAnnotation&) const;

  /** Glean { "field": "signature" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> signature_ref() const& {
    return {this->__fbthrift_field_signature, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "signature" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> signature_ref() & {
    return {this->__fbthrift_field_signature, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "signature" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> signature_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_signature), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "signature" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> signature() const& {
    return {this->__fbthrift_field_signature, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "signature" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> signature() & {
    return {this->__fbthrift_field_signature, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "signature" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> signature() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_signature), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "color" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::Color>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> color_ref() const& {
    return {this->__fbthrift_field_color, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "color" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::Color>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> color_ref() & {
    return {this->__fbthrift_field_color, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "color" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::Color>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> color_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_color), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "color" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::Color>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> color() const& {
    return {this->__fbthrift_field_color, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "color" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::Color>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> color() & {
    return {this->__fbthrift_field_color, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "color" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::Color>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> color() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_color), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "signature" } */
  [[deprecated("Use `FOO.signature().value()` instead of `FOO.get_signature()`")]]
  const ::std::string& get_signature() const& {
    return __fbthrift_field_signature;
  }

  /** Glean { "field": "signature" } */
  [[deprecated("Use `FOO.signature().value()` instead of `FOO.get_signature()`")]]
  ::std::string get_signature() && {
    return static_cast<::std::string&&>(__fbthrift_field_signature);
  }

  /** Glean { "field": "signature" } */
  template <typename T_MyAnnotation_signature_struct_setter = ::std::string>
  [[deprecated("Use `FOO.signature() = BAR` instead of `FOO.set_signature(BAR)`")]]
  ::std::string& set_signature(T_MyAnnotation_signature_struct_setter&& signature_) {
    signature_ref() = std::forward<T_MyAnnotation_signature_struct_setter>(signature_);
    return __fbthrift_field_signature;
  }

  /** Glean { "field": "color" } */
  [[deprecated("Use `FOO.color().value()` instead of `FOO.get_color()`")]]
  ::facebook::thrift::test::Color get_color() const;

  /** Glean { "field": "color" } */
  [[deprecated("Use `FOO.color() = BAR` instead of `FOO.set_color(BAR)`")]]
  ::facebook::thrift::test::Color& set_color(::facebook::thrift::test::Color color_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyAnnotation>;
  friend void swap(MyAnnotation& a, MyAnnotation& b);
};

template <class Protocol_>
unsigned long MyAnnotation::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


namespace detail {
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "IndependentDirectlyAdapted", "kind": "struct" } */
class IndependentDirectlyAdapted final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = IndependentDirectlyAdapted;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  IndependentDirectlyAdapted() :
      __fbthrift_field_field() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  IndependentDirectlyAdapted(apache::thrift::FragileConstructor, ::std::int32_t field__arg);

  IndependentDirectlyAdapted(IndependentDirectlyAdapted&&) = default;

  IndependentDirectlyAdapted(const IndependentDirectlyAdapted&) = default;


  IndependentDirectlyAdapted& operator=(IndependentDirectlyAdapted&&) = default;

  IndependentDirectlyAdapted& operator=(const IndependentDirectlyAdapted&) = default;
 private:
  ::std::int32_t __fbthrift_field_field;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const IndependentDirectlyAdapted&) const;
  bool operator<(const IndependentDirectlyAdapted&) const;

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field_ref() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field_ref() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  [[deprecated("Use `FOO.field().value()` instead of `FOO.get_field()`")]]
  ::std::int32_t get_field() const;

  /** Glean { "field": "field" } */
  [[deprecated("Use `FOO.field() = BAR` instead of `FOO.set_field(BAR)`")]]
  ::std::int32_t& set_field(::std::int32_t field_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<IndependentDirectlyAdapted>;
  friend void swap(IndependentDirectlyAdapted& a, IndependentDirectlyAdapted& b);
};

template <class Protocol_>
unsigned long IndependentDirectlyAdapted::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}
} // namespace detail


/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "StructWithFieldAdapter", "kind": "struct" } */
class StructWithFieldAdapter final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 4;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field,
    ::apache::thrift::ident::shared_field,
    ::apache::thrift::ident::opt_shared_field,
    ::apache::thrift::ident::opt_boxed_field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i32_t>,
    ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i32_t>,
    ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i32_t>,
    ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i32_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StructWithFieldAdapter;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    true;


 public:

  StructWithFieldAdapter();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithFieldAdapter(apache::thrift::FragileConstructor, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, StructWithFieldAdapter> field__arg, ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, StructWithFieldAdapter>> shared_field__arg, ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, StructWithFieldAdapter>> opt_shared_field__arg, ::apache::thrift::detail::boxed_value_ptr<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 4, ::std::int32_t, StructWithFieldAdapter>> opt_boxed_field__arg);

  StructWithFieldAdapter(StructWithFieldAdapter&&) noexcept;
  StructWithFieldAdapter(const StructWithFieldAdapter& src);


  StructWithFieldAdapter& operator=(StructWithFieldAdapter&&) noexcept;
  StructWithFieldAdapter& operator=(const StructWithFieldAdapter& src);

  ~StructWithFieldAdapter();

 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, StructWithFieldAdapter> __fbthrift_field_field;
 private:
  ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, StructWithFieldAdapter>> __fbthrift_field_shared_field;
 private:
  ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, StructWithFieldAdapter>> __fbthrift_field_opt_shared_field;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 4, ::std::int32_t, StructWithFieldAdapter>> __fbthrift_field_opt_boxed_field;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const StructWithFieldAdapter&) const;
  bool operator<(const StructWithFieldAdapter&) const;

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, StructWithFieldAdapter>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field_ref() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, StructWithFieldAdapter>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field_ref() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, StructWithFieldAdapter>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, StructWithFieldAdapter>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, StructWithFieldAdapter>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, StructWithFieldAdapter>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }
  /** Glean { "field": "shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE fbthrift_T& shared_field_ref() & {
    return __fbthrift_field_shared_field;
  }

  /** Glean { "field": "shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE const fbthrift_T& shared_field_ref() const& {
    return __fbthrift_field_shared_field;
  }

  /** Glean { "field": "shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE fbthrift_T&& shared_field_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_shared_field);
  }

  /** Glean { "field": "shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE const fbthrift_T&& shared_field_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_shared_field);
  }

  /** Glean { "field": "shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE fbthrift_T& shared_field() & {
    return __fbthrift_field_shared_field;
  }

  /** Glean { "field": "shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE const fbthrift_T& shared_field() const& {
    return __fbthrift_field_shared_field;
  }

  /** Glean { "field": "shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE fbthrift_T&& shared_field() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_shared_field);
  }

  /** Glean { "field": "shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE const fbthrift_T&& shared_field() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_shared_field);
  }
  /** Glean { "field": "opt_shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE fbthrift_T& opt_shared_field_ref() & {
    return __fbthrift_field_opt_shared_field;
  }

  /** Glean { "field": "opt_shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE const fbthrift_T& opt_shared_field_ref() const& {
    return __fbthrift_field_opt_shared_field;
  }

  /** Glean { "field": "opt_shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE fbthrift_T&& opt_shared_field_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_opt_shared_field);
  }

  /** Glean { "field": "opt_shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE const fbthrift_T&& opt_shared_field_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_opt_shared_field);
  }

  /** Glean { "field": "opt_shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE fbthrift_T& opt_shared_field() & {
    return __fbthrift_field_opt_shared_field;
  }

  /** Glean { "field": "opt_shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE const fbthrift_T& opt_shared_field() const& {
    return __fbthrift_field_opt_shared_field;
  }

  /** Glean { "field": "opt_shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE fbthrift_T&& opt_shared_field() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_opt_shared_field);
  }

  /** Glean { "field": "opt_shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE const fbthrift_T&& opt_shared_field() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_opt_shared_field);
  }

  /** Glean { "field": "opt_boxed_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 4, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> opt_boxed_field_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_opt_boxed_field};
  }

  /** Glean { "field": "opt_boxed_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 4, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> opt_boxed_field_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_opt_boxed_field};
  }

  /** Glean { "field": "opt_boxed_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 4, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> opt_boxed_field_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_opt_boxed_field)};
  }

  /** Glean { "field": "opt_boxed_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 4, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> opt_boxed_field() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_opt_boxed_field};
  }

  /** Glean { "field": "opt_boxed_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 4, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> opt_boxed_field() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_opt_boxed_field};
  }

  /** Glean { "field": "opt_boxed_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 4, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> opt_boxed_field() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_opt_boxed_field)};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructWithFieldAdapter>;
  friend void swap(StructWithFieldAdapter& a, StructWithFieldAdapter& b);
};

template <class Protocol_>
unsigned long StructWithFieldAdapter::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "TerseAdaptedFields", "kind": "struct" } */
class TerseAdaptedFields final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 3;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::int_field,
    ::apache::thrift::ident::string_field,
    ::apache::thrift::ident::set_field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i32_t>,
    ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::set<::apache::thrift::type::i32_t>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TerseAdaptedFields;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    true;


 public:

  TerseAdaptedFields();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TerseAdaptedFields(apache::thrift::FragileConstructor, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, TerseAdaptedFields> int_field__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::string, TerseAdaptedFields> string_field__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::set<::std::int32_t>, TerseAdaptedFields> set_field__arg);

  TerseAdaptedFields(TerseAdaptedFields&&) noexcept;
  TerseAdaptedFields(const TerseAdaptedFields& src);


  TerseAdaptedFields& operator=(TerseAdaptedFields&&) noexcept;
  TerseAdaptedFields& operator=(const TerseAdaptedFields& src);

  ~TerseAdaptedFields();

 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, TerseAdaptedFields> __fbthrift_field_int_field;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::string, TerseAdaptedFields> __fbthrift_field_string_field;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::set<::std::int32_t>, TerseAdaptedFields> __fbthrift_field_set_field;

 public:

  bool operator==(const TerseAdaptedFields&) const;
  bool operator<(const TerseAdaptedFields&) const;

  /** Glean { "field": "int_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> int_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_int_field};
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> int_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_int_field};
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> int_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_int_field)};
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> int_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_int_field};
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> int_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_int_field};
  }

  /** Glean { "field": "int_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> int_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_int_field)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::string, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> string_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_string_field};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::string, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> string_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_string_field};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::string, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> string_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_string_field)};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::string, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> string_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_string_field};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::string, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> string_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_string_field};
  }

  /** Glean { "field": "string_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::string, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> string_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_string_field)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::set<::std::int32_t>, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> set_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_set_field};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::set<::std::int32_t>, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> set_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_set_field};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::set<::std::int32_t>, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> set_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_set_field)};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::set<::std::int32_t>, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> set_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_set_field};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::set<::std::int32_t>, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> set_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_set_field};
  }

  /** Glean { "field": "set_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::set<::std::int32_t>, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> set_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_set_field)};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TerseAdaptedFields>;
  friend void swap(TerseAdaptedFields& a, TerseAdaptedFields& b);
};

template <class Protocol_>
unsigned long TerseAdaptedFields::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "B", "kind": "struct" } */
class B final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::a
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::adapted<::my::Adapter, ::apache::thrift::type::struct_t<::facebook::thrift::test::A>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = B;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    true;


 public:

  B() {
    ::apache::thrift::adapt_detail::construct<::my::Adapter, 1>(__fbthrift_field_a, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  B(apache::thrift::FragileConstructor, ::facebook::thrift::test::AdaptedA a__arg);

  B(B&&) noexcept;
  B(const B& src);


  B& operator=(B&&) noexcept;
  B& operator=(const B& src);
 private:
  ::facebook::thrift::test::AdaptedA __fbthrift_field_a;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const B&) const;
  bool operator<(const B&) const;

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedA>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> a_ref() const& {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedA>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> a_ref() & {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedA>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> a_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_a), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedA>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> a() const& {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedA>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> a() & {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedA>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> a() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_a), __isset.at(0), __isset.bit(0)};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<B>;
  friend void swap(B& a, B& b);
};

template <class Protocol_>
unsigned long B::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "Config", "kind": "struct" } */
class Config final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::path
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Config;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  Config();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Config(apache::thrift::FragileConstructor, ::std::string path__arg);

  Config(Config&&) noexcept;

  Config(const Config& src);


  Config& operator=(Config&&) noexcept;
  Config& operator=(const Config& src);

  ~Config();

 private:
  ::std::string __fbthrift_field_path;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const Config&) const;
  bool operator<(const Config&) const;

  /** Glean { "field": "path" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> path_ref() const& {
    return {this->__fbthrift_field_path, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "path" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> path_ref() & {
    return {this->__fbthrift_field_path, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "path" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> path_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_path), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "path" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> path() const& {
    return {this->__fbthrift_field_path, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "path" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> path() & {
    return {this->__fbthrift_field_path, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "path" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> path() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_path), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "path" } */
  [[deprecated("Use `FOO.path().value()` instead of `FOO.get_path()`")]]
  const ::std::string& get_path() const& {
    return __fbthrift_field_path;
  }

  /** Glean { "field": "path" } */
  [[deprecated("Use `FOO.path().value()` instead of `FOO.get_path()`")]]
  ::std::string get_path() && {
    return static_cast<::std::string&&>(__fbthrift_field_path);
  }

  /** Glean { "field": "path" } */
  template <typename T_Config_path_struct_setter = ::std::string>
  [[deprecated("Use `FOO.path() = BAR` instead of `FOO.set_path(BAR)`")]]
  ::std::string& set_path(T_Config_path_struct_setter&& path_) {
    path_ref() = std::forward<T_Config_path_struct_setter>(path_);
    return __fbthrift_field_path;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Config>;
  friend void swap(Config& a, Config& b);
};

template <class Protocol_>
unsigned long Config::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "MyStruct", "kind": "struct" } */
class MyStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field,
    ::apache::thrift::ident::set_string
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::adapted<::my::Adapter2, ::apache::thrift::type::set<::apache::thrift::type::string_t>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    true;


 public:

  MyStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStruct(apache::thrift::FragileConstructor, ::std::int32_t field__arg, ::facebook::thrift::test::SetWithAdapter set_string__arg);

  MyStruct(MyStruct&&) noexcept;
  MyStruct(const MyStruct& src);


  MyStruct& operator=(MyStruct&&) noexcept;
  MyStruct& operator=(const MyStruct& src);

  ~MyStruct();

 private:
  ::std::int32_t __fbthrift_field_field;
 private:
  ::facebook::thrift::test::SetWithAdapter __fbthrift_field_set_string;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStruct&) const;
  bool operator<(const MyStruct&) const;

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field_ref() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field_ref() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "set_string" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_string_ref() const& {
    return {this->__fbthrift_field_set_string, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "set_string" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_string_ref() & {
    return {this->__fbthrift_field_set_string, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "set_string" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_string_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_string), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "set_string" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_string() const& {
    return {this->__fbthrift_field_set_string, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "set_string" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_string() & {
    return {this->__fbthrift_field_set_string, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "set_string" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_string() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_string), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field" } */
  [[deprecated("Use `FOO.field().value()` instead of `FOO.get_field()`")]]
  ::std::int32_t get_field() const;

  /** Glean { "field": "field" } */
  [[deprecated("Use `FOO.field() = BAR` instead of `FOO.set_field(BAR)`")]]
  ::std::int32_t& set_field(::std::int32_t field_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStruct>;
  friend void swap(MyStruct& a, MyStruct& b);
};

template <class Protocol_>
unsigned long MyStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "AdaptTestStruct", "kind": "struct" } */
class AdaptTestStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 10;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9,10};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::delay,
    ::apache::thrift::ident::custom,
    ::apache::thrift::ident::timeout,
    ::apache::thrift::ident::data,
    ::apache::thrift::ident::meta,
    ::apache::thrift::ident::indirectionString,
    ::apache::thrift::ident::string_data,
    ::apache::thrift::ident::double_wrapped_bool,
    ::apache::thrift::ident::double_wrapped_integer,
    ::apache::thrift::ident::binary_data
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::adapted<::apache::thrift::test::AdaptTestMsAdapter, ::apache::thrift::type::i64_t>,
    ::apache::thrift::type::adapted<::apache::thrift::test::CustomProtocolAdapter, ::apache::thrift::type::cpp_type<::folly::IOBuf, ::apache::thrift::type::binary_t>>,
    ::apache::thrift::type::adapted<::apache::thrift::test::AdaptTestMsAdapter, ::apache::thrift::type::i64_t>,
    ::apache::thrift::type::adapted<::apache::thrift::test::AdapterWithContext, ::apache::thrift::type::i64_t>,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::adapted<::apache::thrift::IndirectionAdapter<::apache::thrift::test::IndirectionString>, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::adapted<::apache::thrift::test::AdapterWithContext, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::adapted<::apache::thrift::test::TemplatedTestAdapter, ::apache::thrift::type::adapted<::apache::thrift::test::TemplatedTestAdapter, ::apache::thrift::type::bool_t>>,
    ::apache::thrift::type::adapted<::apache::thrift::test::AdapterWithContext, ::apache::thrift::type::adapted<::apache::thrift::test::TemplatedTestAdapter, ::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::adapted<::apache::thrift::test::AdapterWithContext, ::apache::thrift::type::binary_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = AdaptTestStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    true;


 public:

  AdaptTestStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  AdaptTestStruct(apache::thrift::FragileConstructor, ::facebook::thrift::test::DurationMs delay__arg, ::facebook::thrift::test::CustomProtocolType custom__arg, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdaptTestMsAdapter, 3, ::std::int64_t, AdaptTestStruct> timeout__arg, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 4, ::std::int64_t, AdaptTestStruct> data__arg, ::std::string meta__arg, ::facebook::thrift::test::IndirectionString indirectionString__arg, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 7, ::std::string, AdaptTestStruct> string_data__arg, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 8, ::facebook::thrift::test::AdaptedBool, AdaptTestStruct> double_wrapped_bool__arg, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 9, ::facebook::thrift::test::AdaptedInteger, AdaptTestStruct> double_wrapped_integer__arg, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 10, ::std::string, AdaptTestStruct> binary_data__arg);

  AdaptTestStruct(AdaptTestStruct&&) noexcept;
  AdaptTestStruct(const AdaptTestStruct& src);


  AdaptTestStruct& operator=(AdaptTestStruct&&) noexcept;
  AdaptTestStruct& operator=(const AdaptTestStruct& src);

  ~AdaptTestStruct();

 private:
  ::facebook::thrift::test::DurationMs __fbthrift_field_delay;
 private:
  ::facebook::thrift::test::CustomProtocolType __fbthrift_field_custom;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdaptTestMsAdapter, 3, ::std::int64_t, AdaptTestStruct> __fbthrift_field_timeout;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 4, ::std::int64_t, AdaptTestStruct> __fbthrift_field_data;
 private:
  ::std::string __fbthrift_field_meta;
 private:
  ::facebook::thrift::test::IndirectionString __fbthrift_field_indirectionString;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 7, ::std::string, AdaptTestStruct> __fbthrift_field_string_data;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 8, ::facebook::thrift::test::AdaptedBool, AdaptTestStruct> __fbthrift_field_double_wrapped_bool;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 9, ::facebook::thrift::test::AdaptedInteger, AdaptTestStruct> __fbthrift_field_double_wrapped_integer;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 10, ::std::string, AdaptTestStruct> __fbthrift_field_binary_data;
 private:
  apache::thrift::detail::isset_bitset<10, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const AdaptTestStruct&) const;
  bool operator<(const AdaptTestStruct&) const;

  /** Glean { "field": "delay" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::DurationMs>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> delay_ref() const& {
    return {this->__fbthrift_field_delay, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "delay" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::DurationMs>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> delay_ref() & {
    return {this->__fbthrift_field_delay, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "delay" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::DurationMs>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> delay_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_delay), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "delay" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::DurationMs>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> delay() const& {
    return {this->__fbthrift_field_delay, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "delay" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::DurationMs>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> delay() & {
    return {this->__fbthrift_field_delay, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "delay" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::DurationMs>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> delay() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_delay), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "custom" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::CustomProtocolType>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> custom_ref() const& {
    return {this->__fbthrift_field_custom, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "custom" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::CustomProtocolType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> custom_ref() & {
    return {this->__fbthrift_field_custom, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "custom" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::CustomProtocolType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> custom_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_custom), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "custom" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::CustomProtocolType>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> custom() const& {
    return {this->__fbthrift_field_custom, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "custom" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::CustomProtocolType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> custom() & {
    return {this->__fbthrift_field_custom, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "custom" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::CustomProtocolType>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> custom() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_custom), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "timeout" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdaptTestMsAdapter, 3, ::std::int64_t, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> timeout_ref() const& {
    return {this->__fbthrift_field_timeout, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "timeout" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdaptTestMsAdapter, 3, ::std::int64_t, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> timeout_ref() & {
    return {this->__fbthrift_field_timeout, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "timeout" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdaptTestMsAdapter, 3, ::std::int64_t, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> timeout_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_timeout), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "timeout" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdaptTestMsAdapter, 3, ::std::int64_t, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> timeout() const& {
    return {this->__fbthrift_field_timeout, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "timeout" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdaptTestMsAdapter, 3, ::std::int64_t, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> timeout() & {
    return {this->__fbthrift_field_timeout, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "timeout" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdaptTestMsAdapter, 3, ::std::int64_t, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> timeout() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_timeout), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 4, ::std::int64_t, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> data_ref() const& {
    return {this->__fbthrift_field_data, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 4, ::std::int64_t, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> data_ref() & {
    return {this->__fbthrift_field_data, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 4, ::std::int64_t, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> data_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_data), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 4, ::std::int64_t, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> data() const& {
    return {this->__fbthrift_field_data, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 4, ::std::int64_t, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> data() & {
    return {this->__fbthrift_field_data, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 4, ::std::int64_t, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> data() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_data), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "meta" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> meta_ref() const& {
    return {this->__fbthrift_field_meta, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "meta" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> meta_ref() & {
    return {this->__fbthrift_field_meta, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "meta" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> meta_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_meta), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "meta" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> meta() const& {
    return {this->__fbthrift_field_meta, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "meta" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> meta() & {
    return {this->__fbthrift_field_meta, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "meta" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> meta() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_meta), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "indirectionString" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::IndirectionString>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> indirectionString_ref() const& {
    return {this->__fbthrift_field_indirectionString, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "indirectionString" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::IndirectionString>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> indirectionString_ref() & {
    return {this->__fbthrift_field_indirectionString, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "indirectionString" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::IndirectionString>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> indirectionString_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_indirectionString), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "indirectionString" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::IndirectionString>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> indirectionString() const& {
    return {this->__fbthrift_field_indirectionString, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "indirectionString" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::IndirectionString>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> indirectionString() & {
    return {this->__fbthrift_field_indirectionString, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "indirectionString" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::IndirectionString>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> indirectionString() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_indirectionString), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "string_data" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 7, ::std::string, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> string_data_ref() const& {
    return {this->__fbthrift_field_string_data, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "string_data" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 7, ::std::string, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> string_data_ref() & {
    return {this->__fbthrift_field_string_data, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "string_data" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 7, ::std::string, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> string_data_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_string_data), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "string_data" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 7, ::std::string, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> string_data() const& {
    return {this->__fbthrift_field_string_data, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "string_data" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 7, ::std::string, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> string_data() & {
    return {this->__fbthrift_field_string_data, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "string_data" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 7, ::std::string, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> string_data() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_string_data), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "double_wrapped_bool" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 8, ::facebook::thrift::test::AdaptedBool, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> double_wrapped_bool_ref() const& {
    return {this->__fbthrift_field_double_wrapped_bool, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "double_wrapped_bool" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 8, ::facebook::thrift::test::AdaptedBool, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> double_wrapped_bool_ref() & {
    return {this->__fbthrift_field_double_wrapped_bool, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "double_wrapped_bool" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 8, ::facebook::thrift::test::AdaptedBool, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> double_wrapped_bool_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_double_wrapped_bool), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "double_wrapped_bool" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 8, ::facebook::thrift::test::AdaptedBool, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> double_wrapped_bool() const& {
    return {this->__fbthrift_field_double_wrapped_bool, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "double_wrapped_bool" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 8, ::facebook::thrift::test::AdaptedBool, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> double_wrapped_bool() & {
    return {this->__fbthrift_field_double_wrapped_bool, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "double_wrapped_bool" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 8, ::facebook::thrift::test::AdaptedBool, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> double_wrapped_bool() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_double_wrapped_bool), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "double_wrapped_integer" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 9, ::facebook::thrift::test::AdaptedInteger, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> double_wrapped_integer_ref() const& {
    return {this->__fbthrift_field_double_wrapped_integer, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "double_wrapped_integer" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 9, ::facebook::thrift::test::AdaptedInteger, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> double_wrapped_integer_ref() & {
    return {this->__fbthrift_field_double_wrapped_integer, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "double_wrapped_integer" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 9, ::facebook::thrift::test::AdaptedInteger, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> double_wrapped_integer_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_double_wrapped_integer), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "double_wrapped_integer" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 9, ::facebook::thrift::test::AdaptedInteger, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> double_wrapped_integer() const& {
    return {this->__fbthrift_field_double_wrapped_integer, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "double_wrapped_integer" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 9, ::facebook::thrift::test::AdaptedInteger, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> double_wrapped_integer() & {
    return {this->__fbthrift_field_double_wrapped_integer, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "double_wrapped_integer" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 9, ::facebook::thrift::test::AdaptedInteger, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> double_wrapped_integer() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_double_wrapped_integer), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "binary_data" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 10, ::std::string, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> binary_data_ref() const& {
    return {this->__fbthrift_field_binary_data, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "binary_data" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 10, ::std::string, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> binary_data_ref() & {
    return {this->__fbthrift_field_binary_data, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "binary_data" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 10, ::std::string, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> binary_data_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_binary_data), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "binary_data" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 10, ::std::string, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> binary_data() const& {
    return {this->__fbthrift_field_binary_data, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "binary_data" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 10, ::std::string, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> binary_data() & {
    return {this->__fbthrift_field_binary_data, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "binary_data" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::AdapterWithContext, 10, ::std::string, AdaptTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> binary_data() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_binary_data), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "meta" } */
  [[deprecated("Use `FOO.meta().value()` instead of `FOO.get_meta()`")]]
  const ::std::string& get_meta() const& {
    return __fbthrift_field_meta;
  }

  /** Glean { "field": "meta" } */
  [[deprecated("Use `FOO.meta().value()` instead of `FOO.get_meta()`")]]
  ::std::string get_meta() && {
    return static_cast<::std::string&&>(__fbthrift_field_meta);
  }

  /** Glean { "field": "meta" } */
  template <typename T_AdaptTestStruct_meta_struct_setter = ::std::string>
  [[deprecated("Use `FOO.meta() = BAR` instead of `FOO.set_meta(BAR)`")]]
  ::std::string& set_meta(T_AdaptTestStruct_meta_struct_setter&& meta_) {
    meta_ref() = std::forward<T_AdaptTestStruct_meta_struct_setter>(meta_);
    return __fbthrift_field_meta;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<AdaptTestStruct>;
  friend void swap(AdaptTestStruct& a, AdaptTestStruct& b);
};

template <class Protocol_>
unsigned long AdaptTestStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "AdaptTemplatedTestStruct", "kind": "struct" } */
class AdaptTemplatedTestStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 22;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::adaptedBool,
    ::apache::thrift::ident::adaptedByte,
    ::apache::thrift::ident::adaptedShort,
    ::apache::thrift::ident::adaptedInteger,
    ::apache::thrift::ident::adaptedLong,
    ::apache::thrift::ident::adaptedDouble,
    ::apache::thrift::ident::adaptedString,
    ::apache::thrift::ident::adaptedList,
    ::apache::thrift::ident::adaptedSet,
    ::apache::thrift::ident::adaptedMap,
    ::apache::thrift::ident::adaptedBoolDefault,
    ::apache::thrift::ident::adaptedByteDefault,
    ::apache::thrift::ident::adaptedShortDefault,
    ::apache::thrift::ident::adaptedIntegerDefault,
    ::apache::thrift::ident::adaptedLongDefault,
    ::apache::thrift::ident::adaptedDoubleDefault,
    ::apache::thrift::ident::adaptedStringDefault,
    ::apache::thrift::ident::adaptedEnum,
    ::apache::thrift::ident::adaptedListDefault,
    ::apache::thrift::ident::adaptedSetDefault,
    ::apache::thrift::ident::adaptedMapDefault,
    ::apache::thrift::ident::doubleTypedefBool
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::adapted<::apache::thrift::test::TemplatedTestAdapter, ::apache::thrift::type::bool_t>,
    ::apache::thrift::type::adapted<::apache::thrift::test::TemplatedTestAdapter, ::apache::thrift::type::byte_t>,
    ::apache::thrift::type::adapted<::apache::thrift::test::TemplatedTestAdapter, ::apache::thrift::type::i16_t>,
    ::apache::thrift::type::adapted<::apache::thrift::test::TemplatedTestAdapter, ::apache::thrift::type::i32_t>,
    ::apache::thrift::type::adapted<::apache::thrift::test::TemplatedTestAdapter, ::apache::thrift::type::i64_t>,
    ::apache::thrift::type::adapted<::apache::thrift::test::TemplatedTestAdapter, ::apache::thrift::type::double_t>,
    ::apache::thrift::type::adapted<::apache::thrift::test::TemplatedTestAdapter, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::adapted<::apache::thrift::test::TemplatedTestAdapter, ::apache::thrift::type::list<::apache::thrift::type::i64_t>>,
    ::apache::thrift::type::adapted<::apache::thrift::test::TemplatedTestAdapter, ::apache::thrift::type::set<::apache::thrift::type::i64_t>>,
    ::apache::thrift::type::adapted<::apache::thrift::test::TemplatedTestAdapter, ::apache::thrift::type::map<::apache::thrift::type::i64_t, ::apache::thrift::type::i64_t>>,
    ::apache::thrift::type::adapted<::apache::thrift::test::TemplatedTestAdapter, ::apache::thrift::type::bool_t>,
    ::apache::thrift::type::adapted<::apache::thrift::test::TemplatedTestAdapter, ::apache::thrift::type::byte_t>,
    ::apache::thrift::type::adapted<::apache::thrift::test::TemplatedTestAdapter, ::apache::thrift::type::i16_t>,
    ::apache::thrift::type::adapted<::apache::thrift::test::TemplatedTestAdapter, ::apache::thrift::type::i32_t>,
    ::apache::thrift::type::adapted<::apache::thrift::test::TemplatedTestAdapter, ::apache::thrift::type::i64_t>,
    ::apache::thrift::type::adapted<::apache::thrift::test::TemplatedTestAdapter, ::apache::thrift::type::double_t>,
    ::apache::thrift::type::adapted<::apache::thrift::test::TemplatedTestAdapter, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::adapted<::apache::thrift::StaticCastAdapter<::apache::thrift::test::basic::AdaptedEnum, ::apache::thrift::test::basic::ThriftAdaptedEnum>, ::apache::thrift::type::enum_t<::facebook::thrift::test::ThriftAdaptedEnum>>,
    ::apache::thrift::type::adapted<::apache::thrift::test::TemplatedTestAdapter, ::apache::thrift::type::list<::apache::thrift::type::i64_t>>,
    ::apache::thrift::type::adapted<::apache::thrift::test::TemplatedTestAdapter, ::apache::thrift::type::set<::apache::thrift::type::i64_t>>,
    ::apache::thrift::type::adapted<::apache::thrift::test::TemplatedTestAdapter, ::apache::thrift::type::map<::apache::thrift::type::i64_t, ::apache::thrift::type::i64_t>>,
    ::apache::thrift::type::adapted<::apache::thrift::test::TemplatedTestAdapter, ::apache::thrift::type::bool_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = AdaptTemplatedTestStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    true;


 public:

  AdaptTemplatedTestStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  AdaptTemplatedTestStruct(apache::thrift::FragileConstructor, ::facebook::thrift::test::AdaptedBool adaptedBool__arg, ::facebook::thrift::test::AdaptedByte adaptedByte__arg, ::facebook::thrift::test::AdaptedShort adaptedShort__arg, ::facebook::thrift::test::AdaptedInteger adaptedInteger__arg, ::facebook::thrift::test::AdaptedLong adaptedLong__arg, ::facebook::thrift::test::AdaptedDouble adaptedDouble__arg, ::facebook::thrift::test::AdaptedString adaptedString__arg, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 8, ::std::vector<::std::int64_t>, AdaptTemplatedTestStruct> adaptedList__arg, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 9, ::std::set<::std::int64_t>, AdaptTemplatedTestStruct> adaptedSet__arg, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 10, ::std::map<::std::int64_t, ::std::int64_t>, AdaptTemplatedTestStruct> adaptedMap__arg, ::facebook::thrift::test::AdaptedBool adaptedBoolDefault__arg, ::facebook::thrift::test::AdaptedByte adaptedByteDefault__arg, ::facebook::thrift::test::AdaptedShort adaptedShortDefault__arg, ::facebook::thrift::test::AdaptedInteger adaptedIntegerDefault__arg, ::facebook::thrift::test::AdaptedLong adaptedLongDefault__arg, ::facebook::thrift::test::AdaptedDouble adaptedDoubleDefault__arg, ::facebook::thrift::test::AdaptedString adaptedStringDefault__arg, ::facebook::thrift::test::AdaptedEnum adaptedEnum__arg, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 19, ::std::vector<::std::int64_t>, AdaptTemplatedTestStruct> adaptedListDefault__arg, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 20, ::std::set<::std::int64_t>, AdaptTemplatedTestStruct> adaptedSetDefault__arg, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 21, ::std::map<::std::int64_t, ::std::int64_t>, AdaptTemplatedTestStruct> adaptedMapDefault__arg, ::facebook::thrift::test::DoubleTypedefBool doubleTypedefBool__arg);

  AdaptTemplatedTestStruct(AdaptTemplatedTestStruct&&) noexcept;
  AdaptTemplatedTestStruct(const AdaptTemplatedTestStruct& src);


  AdaptTemplatedTestStruct& operator=(AdaptTemplatedTestStruct&&) noexcept;
  AdaptTemplatedTestStruct& operator=(const AdaptTemplatedTestStruct& src);

  ~AdaptTemplatedTestStruct();

 private:
  ::facebook::thrift::test::AdaptedBool __fbthrift_field_adaptedBool;
 private:
  ::facebook::thrift::test::AdaptedByte __fbthrift_field_adaptedByte;
 private:
  ::facebook::thrift::test::AdaptedShort __fbthrift_field_adaptedShort;
 private:
  ::facebook::thrift::test::AdaptedInteger __fbthrift_field_adaptedInteger;
 private:
  ::facebook::thrift::test::AdaptedLong __fbthrift_field_adaptedLong;
 private:
  ::facebook::thrift::test::AdaptedDouble __fbthrift_field_adaptedDouble;
 private:
  ::facebook::thrift::test::AdaptedString __fbthrift_field_adaptedString;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 8, ::std::vector<::std::int64_t>, AdaptTemplatedTestStruct> __fbthrift_field_adaptedList;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 9, ::std::set<::std::int64_t>, AdaptTemplatedTestStruct> __fbthrift_field_adaptedSet;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 10, ::std::map<::std::int64_t, ::std::int64_t>, AdaptTemplatedTestStruct> __fbthrift_field_adaptedMap;
 private:
  ::facebook::thrift::test::AdaptedBool __fbthrift_field_adaptedBoolDefault;
 private:
  ::facebook::thrift::test::AdaptedByte __fbthrift_field_adaptedByteDefault;
 private:
  ::facebook::thrift::test::AdaptedShort __fbthrift_field_adaptedShortDefault;
 private:
  ::facebook::thrift::test::AdaptedInteger __fbthrift_field_adaptedIntegerDefault;
 private:
  ::facebook::thrift::test::AdaptedLong __fbthrift_field_adaptedLongDefault;
 private:
  ::facebook::thrift::test::AdaptedDouble __fbthrift_field_adaptedDoubleDefault;
 private:
  ::facebook::thrift::test::AdaptedString __fbthrift_field_adaptedStringDefault;
 private:
  ::facebook::thrift::test::AdaptedEnum __fbthrift_field_adaptedEnum;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 19, ::std::vector<::std::int64_t>, AdaptTemplatedTestStruct> __fbthrift_field_adaptedListDefault;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 20, ::std::set<::std::int64_t>, AdaptTemplatedTestStruct> __fbthrift_field_adaptedSetDefault;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 21, ::std::map<::std::int64_t, ::std::int64_t>, AdaptTemplatedTestStruct> __fbthrift_field_adaptedMapDefault;
 private:
  ::facebook::thrift::test::DoubleTypedefBool __fbthrift_field_doubleTypedefBool;
 private:
  apache::thrift::detail::isset_bitset<22, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const AdaptTemplatedTestStruct&) const;
  bool operator<(const AdaptTemplatedTestStruct&) const;

  /** Glean { "field": "adaptedBool" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedBool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedBool_ref() const& {
    return {this->__fbthrift_field_adaptedBool, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "adaptedBool" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedBool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedBool_ref() & {
    return {this->__fbthrift_field_adaptedBool, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "adaptedBool" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedBool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedBool_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedBool), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "adaptedBool" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedBool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedBool() const& {
    return {this->__fbthrift_field_adaptedBool, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "adaptedBool" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedBool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedBool() & {
    return {this->__fbthrift_field_adaptedBool, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "adaptedBool" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedBool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedBool() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedBool), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "adaptedByte" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedByte>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedByte_ref() const& {
    return {this->__fbthrift_field_adaptedByte, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "adaptedByte" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedByte>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedByte_ref() & {
    return {this->__fbthrift_field_adaptedByte, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "adaptedByte" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedByte>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedByte_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedByte), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "adaptedByte" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedByte>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedByte() const& {
    return {this->__fbthrift_field_adaptedByte, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "adaptedByte" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedByte>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedByte() & {
    return {this->__fbthrift_field_adaptedByte, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "adaptedByte" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedByte>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedByte() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedByte), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "adaptedShort" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedShort>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedShort_ref() const& {
    return {this->__fbthrift_field_adaptedShort, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "adaptedShort" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedShort>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedShort_ref() & {
    return {this->__fbthrift_field_adaptedShort, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "adaptedShort" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedShort>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedShort_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedShort), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "adaptedShort" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedShort>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedShort() const& {
    return {this->__fbthrift_field_adaptedShort, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "adaptedShort" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedShort>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedShort() & {
    return {this->__fbthrift_field_adaptedShort, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "adaptedShort" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedShort>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedShort() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedShort), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "adaptedInteger" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedInteger>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedInteger_ref() const& {
    return {this->__fbthrift_field_adaptedInteger, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "adaptedInteger" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedInteger>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedInteger_ref() & {
    return {this->__fbthrift_field_adaptedInteger, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "adaptedInteger" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedInteger>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedInteger_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedInteger), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "adaptedInteger" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedInteger>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedInteger() const& {
    return {this->__fbthrift_field_adaptedInteger, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "adaptedInteger" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedInteger>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedInteger() & {
    return {this->__fbthrift_field_adaptedInteger, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "adaptedInteger" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedInteger>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedInteger() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedInteger), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "adaptedLong" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedLong>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedLong_ref() const& {
    return {this->__fbthrift_field_adaptedLong, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "adaptedLong" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedLong>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedLong_ref() & {
    return {this->__fbthrift_field_adaptedLong, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "adaptedLong" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedLong>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedLong_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedLong), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "adaptedLong" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedLong>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedLong() const& {
    return {this->__fbthrift_field_adaptedLong, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "adaptedLong" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedLong>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedLong() & {
    return {this->__fbthrift_field_adaptedLong, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "adaptedLong" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedLong>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedLong() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedLong), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "adaptedDouble" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedDouble>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedDouble_ref() const& {
    return {this->__fbthrift_field_adaptedDouble, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "adaptedDouble" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedDouble>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedDouble_ref() & {
    return {this->__fbthrift_field_adaptedDouble, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "adaptedDouble" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedDouble>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedDouble_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedDouble), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "adaptedDouble" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedDouble>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedDouble() const& {
    return {this->__fbthrift_field_adaptedDouble, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "adaptedDouble" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedDouble>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedDouble() & {
    return {this->__fbthrift_field_adaptedDouble, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "adaptedDouble" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedDouble>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedDouble() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedDouble), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "adaptedString" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedString>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedString_ref() const& {
    return {this->__fbthrift_field_adaptedString, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "adaptedString" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedString>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedString_ref() & {
    return {this->__fbthrift_field_adaptedString, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "adaptedString" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedString>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedString_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedString), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "adaptedString" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedString>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedString() const& {
    return {this->__fbthrift_field_adaptedString, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "adaptedString" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedString>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedString() & {
    return {this->__fbthrift_field_adaptedString, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "adaptedString" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedString>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedString() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedString), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "adaptedList" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 8, ::std::vector<::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedList_ref() const& {
    return {this->__fbthrift_field_adaptedList, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "adaptedList" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 8, ::std::vector<::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedList_ref() & {
    return {this->__fbthrift_field_adaptedList, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "adaptedList" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 8, ::std::vector<::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedList_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedList), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "adaptedList" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 8, ::std::vector<::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedList() const& {
    return {this->__fbthrift_field_adaptedList, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "adaptedList" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 8, ::std::vector<::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedList() & {
    return {this->__fbthrift_field_adaptedList, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "adaptedList" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 8, ::std::vector<::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedList() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedList), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "adaptedSet" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 9, ::std::set<::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedSet_ref() const& {
    return {this->__fbthrift_field_adaptedSet, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "adaptedSet" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 9, ::std::set<::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedSet_ref() & {
    return {this->__fbthrift_field_adaptedSet, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "adaptedSet" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 9, ::std::set<::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedSet_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedSet), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "adaptedSet" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 9, ::std::set<::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedSet() const& {
    return {this->__fbthrift_field_adaptedSet, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "adaptedSet" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 9, ::std::set<::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedSet() & {
    return {this->__fbthrift_field_adaptedSet, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "adaptedSet" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 9, ::std::set<::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedSet() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedSet), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "adaptedMap" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 10, ::std::map<::std::int64_t, ::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedMap_ref() const& {
    return {this->__fbthrift_field_adaptedMap, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "adaptedMap" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 10, ::std::map<::std::int64_t, ::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedMap_ref() & {
    return {this->__fbthrift_field_adaptedMap, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "adaptedMap" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 10, ::std::map<::std::int64_t, ::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedMap_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedMap), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "adaptedMap" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 10, ::std::map<::std::int64_t, ::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedMap() const& {
    return {this->__fbthrift_field_adaptedMap, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "adaptedMap" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 10, ::std::map<::std::int64_t, ::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedMap() & {
    return {this->__fbthrift_field_adaptedMap, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "adaptedMap" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 10, ::std::map<::std::int64_t, ::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedMap() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedMap), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "adaptedBoolDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedBool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedBoolDefault_ref() const& {
    return {this->__fbthrift_field_adaptedBoolDefault, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "adaptedBoolDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedBool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedBoolDefault_ref() & {
    return {this->__fbthrift_field_adaptedBoolDefault, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "adaptedBoolDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedBool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedBoolDefault_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedBoolDefault), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "adaptedBoolDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedBool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedBoolDefault() const& {
    return {this->__fbthrift_field_adaptedBoolDefault, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "adaptedBoolDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedBool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedBoolDefault() & {
    return {this->__fbthrift_field_adaptedBoolDefault, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "adaptedBoolDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedBool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedBoolDefault() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedBoolDefault), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "adaptedByteDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedByte>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedByteDefault_ref() const& {
    return {this->__fbthrift_field_adaptedByteDefault, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "adaptedByteDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedByte>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedByteDefault_ref() & {
    return {this->__fbthrift_field_adaptedByteDefault, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "adaptedByteDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedByte>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedByteDefault_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedByteDefault), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "adaptedByteDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedByte>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedByteDefault() const& {
    return {this->__fbthrift_field_adaptedByteDefault, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "adaptedByteDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedByte>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedByteDefault() & {
    return {this->__fbthrift_field_adaptedByteDefault, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "adaptedByteDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedByte>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedByteDefault() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedByteDefault), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "adaptedShortDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedShort>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedShortDefault_ref() const& {
    return {this->__fbthrift_field_adaptedShortDefault, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "adaptedShortDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedShort>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedShortDefault_ref() & {
    return {this->__fbthrift_field_adaptedShortDefault, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "adaptedShortDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedShort>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedShortDefault_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedShortDefault), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "adaptedShortDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedShort>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedShortDefault() const& {
    return {this->__fbthrift_field_adaptedShortDefault, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "adaptedShortDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedShort>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedShortDefault() & {
    return {this->__fbthrift_field_adaptedShortDefault, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "adaptedShortDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedShort>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedShortDefault() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedShortDefault), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "adaptedIntegerDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedInteger>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedIntegerDefault_ref() const& {
    return {this->__fbthrift_field_adaptedIntegerDefault, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "adaptedIntegerDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedInteger>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedIntegerDefault_ref() & {
    return {this->__fbthrift_field_adaptedIntegerDefault, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "adaptedIntegerDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedInteger>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedIntegerDefault_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedIntegerDefault), __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "adaptedIntegerDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedInteger>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedIntegerDefault() const& {
    return {this->__fbthrift_field_adaptedIntegerDefault, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "adaptedIntegerDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedInteger>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedIntegerDefault() & {
    return {this->__fbthrift_field_adaptedIntegerDefault, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "adaptedIntegerDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedInteger>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedIntegerDefault() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedIntegerDefault), __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "adaptedLongDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedLong>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedLongDefault_ref() const& {
    return {this->__fbthrift_field_adaptedLongDefault, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "adaptedLongDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedLong>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedLongDefault_ref() & {
    return {this->__fbthrift_field_adaptedLongDefault, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "adaptedLongDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedLong>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedLongDefault_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedLongDefault), __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "adaptedLongDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedLong>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedLongDefault() const& {
    return {this->__fbthrift_field_adaptedLongDefault, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "adaptedLongDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedLong>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedLongDefault() & {
    return {this->__fbthrift_field_adaptedLongDefault, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "adaptedLongDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedLong>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedLongDefault() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedLongDefault), __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "adaptedDoubleDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedDouble>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedDoubleDefault_ref() const& {
    return {this->__fbthrift_field_adaptedDoubleDefault, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "adaptedDoubleDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedDouble>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedDoubleDefault_ref() & {
    return {this->__fbthrift_field_adaptedDoubleDefault, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "adaptedDoubleDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedDouble>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedDoubleDefault_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedDoubleDefault), __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "adaptedDoubleDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedDouble>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedDoubleDefault() const& {
    return {this->__fbthrift_field_adaptedDoubleDefault, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "adaptedDoubleDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedDouble>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedDoubleDefault() & {
    return {this->__fbthrift_field_adaptedDoubleDefault, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "adaptedDoubleDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedDouble>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedDoubleDefault() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedDoubleDefault), __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "adaptedStringDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedString>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedStringDefault_ref() const& {
    return {this->__fbthrift_field_adaptedStringDefault, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "adaptedStringDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedString>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedStringDefault_ref() & {
    return {this->__fbthrift_field_adaptedStringDefault, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "adaptedStringDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedString>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedStringDefault_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedStringDefault), __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "adaptedStringDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedString>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedStringDefault() const& {
    return {this->__fbthrift_field_adaptedStringDefault, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "adaptedStringDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedString>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedStringDefault() & {
    return {this->__fbthrift_field_adaptedStringDefault, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "adaptedStringDefault" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedString>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedStringDefault() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedStringDefault), __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "adaptedEnum" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedEnum_ref() const& {
    return {this->__fbthrift_field_adaptedEnum, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "adaptedEnum" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedEnum_ref() & {
    return {this->__fbthrift_field_adaptedEnum, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "adaptedEnum" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedEnum_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedEnum), __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "adaptedEnum" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedEnum() const& {
    return {this->__fbthrift_field_adaptedEnum, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "adaptedEnum" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedEnum() & {
    return {this->__fbthrift_field_adaptedEnum, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "adaptedEnum" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedEnum() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedEnum), __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "adaptedListDefault" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 19, ::std::vector<::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedListDefault_ref() const& {
    return {this->__fbthrift_field_adaptedListDefault, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "adaptedListDefault" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 19, ::std::vector<::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedListDefault_ref() & {
    return {this->__fbthrift_field_adaptedListDefault, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "adaptedListDefault" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 19, ::std::vector<::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedListDefault_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedListDefault), __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "adaptedListDefault" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 19, ::std::vector<::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedListDefault() const& {
    return {this->__fbthrift_field_adaptedListDefault, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "adaptedListDefault" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 19, ::std::vector<::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedListDefault() & {
    return {this->__fbthrift_field_adaptedListDefault, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "adaptedListDefault" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 19, ::std::vector<::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedListDefault() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedListDefault), __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "adaptedSetDefault" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 20, ::std::set<::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedSetDefault_ref() const& {
    return {this->__fbthrift_field_adaptedSetDefault, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "adaptedSetDefault" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 20, ::std::set<::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedSetDefault_ref() & {
    return {this->__fbthrift_field_adaptedSetDefault, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "adaptedSetDefault" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 20, ::std::set<::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedSetDefault_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedSetDefault), __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "adaptedSetDefault" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 20, ::std::set<::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedSetDefault() const& {
    return {this->__fbthrift_field_adaptedSetDefault, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "adaptedSetDefault" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 20, ::std::set<::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedSetDefault() & {
    return {this->__fbthrift_field_adaptedSetDefault, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "adaptedSetDefault" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 20, ::std::set<::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedSetDefault() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedSetDefault), __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "adaptedMapDefault" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 21, ::std::map<::std::int64_t, ::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedMapDefault_ref() const& {
    return {this->__fbthrift_field_adaptedMapDefault, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "adaptedMapDefault" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 21, ::std::map<::std::int64_t, ::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedMapDefault_ref() & {
    return {this->__fbthrift_field_adaptedMapDefault, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "adaptedMapDefault" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 21, ::std::map<::std::int64_t, ::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedMapDefault_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedMapDefault), __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "adaptedMapDefault" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 21, ::std::map<::std::int64_t, ::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedMapDefault() const& {
    return {this->__fbthrift_field_adaptedMapDefault, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "adaptedMapDefault" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 21, ::std::map<::std::int64_t, ::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedMapDefault() & {
    return {this->__fbthrift_field_adaptedMapDefault, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "adaptedMapDefault" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 21, ::std::map<::std::int64_t, ::std::int64_t>, AdaptTemplatedTestStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedMapDefault() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedMapDefault), __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "doubleTypedefBool" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::DoubleTypedefBool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> doubleTypedefBool_ref() const& {
    return {this->__fbthrift_field_doubleTypedefBool, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "doubleTypedefBool" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::DoubleTypedefBool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> doubleTypedefBool_ref() & {
    return {this->__fbthrift_field_doubleTypedefBool, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "doubleTypedefBool" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::DoubleTypedefBool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> doubleTypedefBool_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_doubleTypedefBool), __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "doubleTypedefBool" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::DoubleTypedefBool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> doubleTypedefBool() const& {
    return {this->__fbthrift_field_doubleTypedefBool, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "doubleTypedefBool" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::DoubleTypedefBool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> doubleTypedefBool() & {
    return {this->__fbthrift_field_doubleTypedefBool, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "doubleTypedefBool" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::DoubleTypedefBool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> doubleTypedefBool() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_doubleTypedefBool), __isset.at(21), __isset.bit(21)};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<AdaptTemplatedTestStruct>;
  friend void swap(AdaptTemplatedTestStruct& a, AdaptTemplatedTestStruct& b);
};

template <class Protocol_>
unsigned long AdaptTemplatedTestStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "AdaptTemplatedNestedTestStruct", "kind": "struct" } */
class AdaptTemplatedNestedTestStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::adaptedStruct
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::facebook::thrift::test::AdaptTemplatedTestStruct>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = AdaptTemplatedNestedTestStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  AdaptTemplatedNestedTestStruct() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  AdaptTemplatedNestedTestStruct(apache::thrift::FragileConstructor, ::facebook::thrift::test::AdaptTemplatedTestStruct adaptedStruct__arg);

  AdaptTemplatedNestedTestStruct(AdaptTemplatedNestedTestStruct&&) noexcept;

  AdaptTemplatedNestedTestStruct(const AdaptTemplatedNestedTestStruct& src);


  AdaptTemplatedNestedTestStruct& operator=(AdaptTemplatedNestedTestStruct&&) noexcept;
  AdaptTemplatedNestedTestStruct& operator=(const AdaptTemplatedNestedTestStruct& src);
 private:
  ::facebook::thrift::test::AdaptTemplatedTestStruct __fbthrift_field_adaptedStruct;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const AdaptTemplatedNestedTestStruct&) const;
  bool operator<(const AdaptTemplatedNestedTestStruct&) const;

  /** Glean { "field": "adaptedStruct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptTemplatedTestStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedStruct_ref() const& {
    return {this->__fbthrift_field_adaptedStruct, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "adaptedStruct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptTemplatedTestStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedStruct_ref() & {
    return {this->__fbthrift_field_adaptedStruct, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "adaptedStruct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptTemplatedTestStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedStruct_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedStruct), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "adaptedStruct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptTemplatedTestStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedStruct() const& {
    return {this->__fbthrift_field_adaptedStruct, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "adaptedStruct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptTemplatedTestStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedStruct() & {
    return {this->__fbthrift_field_adaptedStruct, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "adaptedStruct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptTemplatedTestStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedStruct() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedStruct), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "adaptedStruct" } */
  [[deprecated("Use `FOO.adaptedStruct().value()` instead of `FOO.get_adaptedStruct()`")]]
  const ::facebook::thrift::test::AdaptTemplatedTestStruct& get_adaptedStruct() const&;

  /** Glean { "field": "adaptedStruct" } */
  [[deprecated("Use `FOO.adaptedStruct().value()` instead of `FOO.get_adaptedStruct()`")]]
  ::facebook::thrift::test::AdaptTemplatedTestStruct get_adaptedStruct() &&;

  /** Glean { "field": "adaptedStruct" } */
  template <typename T_AdaptTemplatedNestedTestStruct_adaptedStruct_struct_setter = ::facebook::thrift::test::AdaptTemplatedTestStruct>
  [[deprecated("Use `FOO.adaptedStruct() = BAR` instead of `FOO.set_adaptedStruct(BAR)`")]]
  ::facebook::thrift::test::AdaptTemplatedTestStruct& set_adaptedStruct(T_AdaptTemplatedNestedTestStruct_adaptedStruct_struct_setter&& adaptedStruct_) {
    adaptedStruct_ref() = std::forward<T_AdaptTemplatedNestedTestStruct_adaptedStruct_struct_setter>(adaptedStruct_);
    return __fbthrift_field_adaptedStruct;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<AdaptTemplatedNestedTestStruct>;
  friend void swap(AdaptTemplatedNestedTestStruct& a, AdaptTemplatedNestedTestStruct& b);
};

template <class Protocol_>
unsigned long AdaptTemplatedNestedTestStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "ThriftAdaptTestUnion", "kind": "union" } */
class ThriftAdaptTestUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::delay,
    ::apache::thrift::ident::custom
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::adapted<::apache::thrift::test::AdaptTestMsAdapter, ::apache::thrift::type::i64_t>,
    ::apache::thrift::type::adapted<::apache::thrift::test::CustomProtocolAdapter, ::apache::thrift::type::cpp_type<::folly::IOBuf, ::apache::thrift::type::binary_t>>
  >;
  void __fbthrift_clear();
  void __fbthrift_destruct();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ThriftAdaptTestUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    true;


 public:
  enum class Type : int {
    __EMPTY__ = 0,
    delay = 1,
    custom = 2,
  } ;

  ThriftAdaptTestUnion()
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {}

  ThriftAdaptTestUnion(ThriftAdaptTestUnion&& rhs) noexcept
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::delay:
      {
        set_delay(std::move(rhs.value_.delay));
        break;
      }
      case Type::custom:
      {
        set_custom(std::move(rhs.value_.custom));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  ThriftAdaptTestUnion(const ThriftAdaptTestUnion& rhs);

  ThriftAdaptTestUnion& operator=(ThriftAdaptTestUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        __fbthrift_clear();
        return *this;
      }
      case Type::delay:
      {
        set_delay(std::move(rhs.value_.delay));
        break;
      }
      case Type::custom:
      {
        set_custom(std::move(rhs.value_.custom));
        break;
      }
      default:
      {
        assert(false);
        __fbthrift_clear();
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  ThriftAdaptTestUnion& operator=(const ThriftAdaptTestUnion& rhs);

  ~ThriftAdaptTestUnion();

  union storage_type {
    ::facebook::thrift::test::DurationMs delay;
    ::facebook::thrift::test::CustomProtocolType custom;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const ThriftAdaptTestUnion&) const;
  bool operator<(const ThriftAdaptTestUnion&) const;

  /** Glean { "field": "delay" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::facebook::thrift::test::DurationMs& set_delay(::facebook::thrift::test::DurationMs t = ::facebook::thrift::test::DurationMs()) {
    using T0 = ::facebook::thrift::test::DurationMs;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::delay);
    ::new (std::addressof(value_.delay)) T(t);
    return value_.delay;
  }


  /** Glean { "field": "custom" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::facebook::thrift::test::CustomProtocolType& set_custom(::facebook::thrift::test::CustomProtocolType const &t) {
    using T0 = ::facebook::thrift::test::CustomProtocolType;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::custom);
    ::new (std::addressof(value_.custom)) T(t);
    return value_.custom;
  }

  /** Glean { "field": "custom" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::facebook::thrift::test::CustomProtocolType& set_custom(::facebook::thrift::test::CustomProtocolType&& t) {
    using T0 = ::facebook::thrift::test::CustomProtocolType;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::custom);
    ::new (std::addressof(value_.custom)) T(std::move(t));
    return value_.custom;
  }

  /** Glean { "field": "custom" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::facebook::thrift::test::CustomProtocolType, T...>> ::facebook::thrift::test::CustomProtocolType& set_custom(T&&... t) {
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::custom);
    ::new (std::addressof(value_.custom)) ::facebook::thrift::test::CustomProtocolType(std::forward<T>(t)...);
    return value_.custom;
  }


  /** Glean { "field": "delay" } */
  ::facebook::thrift::test::DurationMs const& get_delay() const {
    if (getType() != Type::delay) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.delay;
  }

  /** Glean { "field": "custom" } */
  ::facebook::thrift::test::CustomProtocolType const& get_custom() const {
    if (getType() != Type::custom) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.custom;
  }

  ::facebook::thrift::test::DurationMs& mutable_delay() {
    assert(getType() == Type::delay);
    return value_.delay;
  }

  ::facebook::thrift::test::CustomProtocolType& mutable_custom() {
    assert(getType() == Type::custom);
    return value_.custom;
  }

  template <typename..., typename T = ::facebook::thrift::test::DurationMs>
  T move_delay() {
    assert(getType() == Type::delay);
    return std::move(value_.delay);
  }

  template <typename..., typename T = ::facebook::thrift::test::CustomProtocolType>
  T move_custom() {
    assert(getType() == Type::custom);
    return std::move(value_.custom);
  }

  /** Glean { "field": "delay" } */
  template <typename..., typename T = ::facebook::thrift::test::DurationMs>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> delay_ref() const& {
    return {value_.delay, fbthrift_type_, folly::to_underlying(Type::delay), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "delay" } */
  template <typename..., typename T = ::facebook::thrift::test::DurationMs>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> delay_ref() & {
    return {value_.delay, fbthrift_type_, folly::to_underlying(Type::delay), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "delay" } */
  template <typename..., typename T = ::facebook::thrift::test::DurationMs>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> delay_ref() && {
    return {std::move(value_.delay), fbthrift_type_, folly::to_underlying(Type::delay), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "delay" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::facebook::thrift::test::DurationMs&> delay() const& {
    return {value_.delay, fbthrift_type_, folly::to_underlying(Type::delay), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "delay" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::facebook::thrift::test::DurationMs&> delay() & {
    return {value_.delay, fbthrift_type_, folly::to_underlying(Type::delay), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "delay" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::facebook::thrift::test::DurationMs&&> delay() && {
    return {std::move(value_.delay), fbthrift_type_, folly::to_underlying(Type::delay), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "custom" } */
  template <typename..., typename T = ::facebook::thrift::test::CustomProtocolType>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> custom_ref() const& {
    return {value_.custom, fbthrift_type_, folly::to_underlying(Type::custom), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "custom" } */
  template <typename..., typename T = ::facebook::thrift::test::CustomProtocolType>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> custom_ref() & {
    return {value_.custom, fbthrift_type_, folly::to_underlying(Type::custom), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "custom" } */
  template <typename..., typename T = ::facebook::thrift::test::CustomProtocolType>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> custom_ref() && {
    return {std::move(value_.custom), fbthrift_type_, folly::to_underlying(Type::custom), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "custom" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::facebook::thrift::test::CustomProtocolType&> custom() const& {
    return {value_.custom, fbthrift_type_, folly::to_underlying(Type::custom), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "custom" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::facebook::thrift::test::CustomProtocolType&> custom() & {
    return {value_.custom, fbthrift_type_, folly::to_underlying(Type::custom), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "custom" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::facebook::thrift::test::CustomProtocolType&&> custom() && {
    return {std::move(value_.custom), fbthrift_type_, folly::to_underlying(Type::custom), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(fbthrift_type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  storage_type value_;
  std::underlying_type_t<Type> fbthrift_type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ThriftAdaptTestUnion>;
  friend void swap(ThriftAdaptTestUnion& a, ThriftAdaptTestUnion& b);
};

template <class Protocol_>
unsigned long ThriftAdaptTestUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "StructFieldAdaptedStruct", "kind": "struct" } */
class StructFieldAdaptedStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 4;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::adaptedStruct,
    ::apache::thrift::ident::adaptedTypedef,
    ::apache::thrift::ident::directlyAdapted,
    ::apache::thrift::ident::typedefOfAdapted
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::adapted<::apache::thrift::test::TemplatedTestAdapter, ::apache::thrift::type::struct_t<::facebook::thrift::test::ThriftAdaptedStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::test::TemplatedTestAdapter, ::apache::thrift::type::struct_t<::facebook::thrift::test::ThriftAdaptedStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::test::TemplatedTestAdapter, ::apache::thrift::type::struct_t<::facebook::thrift::test::detail::DirectlyAdaptedStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::test::TemplatedTestAdapter, ::apache::thrift::type::struct_t<::facebook::thrift::test::detail::DirectlyAdaptedStruct>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StructFieldAdaptedStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    true;


 public:

  StructFieldAdaptedStruct() {
    ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 1>(__fbthrift_field_adaptedStruct, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 2>(__fbthrift_field_adaptedTypedef, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 3>(__fbthrift_field_directlyAdapted, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::test::TemplatedTestAdapter, 4>(__fbthrift_field_typedefOfAdapted, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructFieldAdaptedStruct(apache::thrift::FragileConstructor, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 1, ::facebook::thrift::test::ThriftAdaptedStruct, StructFieldAdaptedStruct> adaptedStruct__arg, ::facebook::thrift::test::AdaptedTypedef adaptedTypedef__arg, ::facebook::thrift::test::DirectlyAdaptedStruct directlyAdapted__arg, ::facebook::thrift::test::TypedefOfDirect typedefOfAdapted__arg);

  StructFieldAdaptedStruct(StructFieldAdaptedStruct&&) noexcept;
  StructFieldAdaptedStruct(const StructFieldAdaptedStruct& src);


  StructFieldAdaptedStruct& operator=(StructFieldAdaptedStruct&&) noexcept;
  StructFieldAdaptedStruct& operator=(const StructFieldAdaptedStruct& src);
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 1, ::facebook::thrift::test::ThriftAdaptedStruct, StructFieldAdaptedStruct> __fbthrift_field_adaptedStruct;
 private:
  ::facebook::thrift::test::AdaptedTypedef __fbthrift_field_adaptedTypedef;
 private:
  ::facebook::thrift::test::DirectlyAdaptedStruct __fbthrift_field_directlyAdapted;
 private:
  ::facebook::thrift::test::TypedefOfDirect __fbthrift_field_typedefOfAdapted;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const StructFieldAdaptedStruct&) const;
  bool operator<(const StructFieldAdaptedStruct&) const;

  /** Glean { "field": "adaptedStruct" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 1, ::facebook::thrift::test::ThriftAdaptedStruct, StructFieldAdaptedStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedStruct_ref() const& {
    return {this->__fbthrift_field_adaptedStruct, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "adaptedStruct" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 1, ::facebook::thrift::test::ThriftAdaptedStruct, StructFieldAdaptedStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedStruct_ref() & {
    return {this->__fbthrift_field_adaptedStruct, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "adaptedStruct" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 1, ::facebook::thrift::test::ThriftAdaptedStruct, StructFieldAdaptedStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedStruct_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedStruct), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "adaptedStruct" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 1, ::facebook::thrift::test::ThriftAdaptedStruct, StructFieldAdaptedStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedStruct() const& {
    return {this->__fbthrift_field_adaptedStruct, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "adaptedStruct" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 1, ::facebook::thrift::test::ThriftAdaptedStruct, StructFieldAdaptedStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedStruct() & {
    return {this->__fbthrift_field_adaptedStruct, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "adaptedStruct" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::TemplatedTestAdapter, 1, ::facebook::thrift::test::ThriftAdaptedStruct, StructFieldAdaptedStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedStruct() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedStruct), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "adaptedTypedef" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedTypedef_ref() const& {
    return {this->__fbthrift_field_adaptedTypedef, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "adaptedTypedef" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedTypedef_ref() & {
    return {this->__fbthrift_field_adaptedTypedef, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "adaptedTypedef" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedTypedef_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedTypedef), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "adaptedTypedef" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> adaptedTypedef() const& {
    return {this->__fbthrift_field_adaptedTypedef, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "adaptedTypedef" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> adaptedTypedef() & {
    return {this->__fbthrift_field_adaptedTypedef, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "adaptedTypedef" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::AdaptedTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> adaptedTypedef() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_adaptedTypedef), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "directlyAdapted" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::DirectlyAdaptedStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> directlyAdapted_ref() const& {
    return {this->__fbthrift_field_directlyAdapted, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "directlyAdapted" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::DirectlyAdaptedStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> directlyAdapted_ref() & {
    return {this->__fbthrift_field_directlyAdapted, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "directlyAdapted" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::DirectlyAdaptedStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> directlyAdapted_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_directlyAdapted), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "directlyAdapted" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::DirectlyAdaptedStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> directlyAdapted() const& {
    return {this->__fbthrift_field_directlyAdapted, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "directlyAdapted" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::DirectlyAdaptedStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> directlyAdapted() & {
    return {this->__fbthrift_field_directlyAdapted, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "directlyAdapted" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::DirectlyAdaptedStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> directlyAdapted() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_directlyAdapted), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "typedefOfAdapted" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::TypedefOfDirect>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> typedefOfAdapted_ref() const& {
    return {this->__fbthrift_field_typedefOfAdapted, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "typedefOfAdapted" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::TypedefOfDirect>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> typedefOfAdapted_ref() & {
    return {this->__fbthrift_field_typedefOfAdapted, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "typedefOfAdapted" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::TypedefOfDirect>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> typedefOfAdapted_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_typedefOfAdapted), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "typedefOfAdapted" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::TypedefOfDirect>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> typedefOfAdapted() const& {
    return {this->__fbthrift_field_typedefOfAdapted, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "typedefOfAdapted" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::TypedefOfDirect>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> typedefOfAdapted() & {
    return {this->__fbthrift_field_typedefOfAdapted, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "typedefOfAdapted" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::TypedefOfDirect>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> typedefOfAdapted() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_typedefOfAdapted), __isset.at(3), __isset.bit(3)};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructFieldAdaptedStruct>;
  friend void swap(StructFieldAdaptedStruct& a, StructFieldAdaptedStruct& b);
};

template <class Protocol_>
unsigned long StructFieldAdaptedStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "CircularStruct", "kind": "struct" } */
class CircularStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::adapted<::apache::thrift::test::MemberAccessAdapter, ::apache::thrift::type::struct_t<::facebook::thrift::test::CircularAdaptee>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = CircularStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    true;


 public:

  CircularStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  CircularStruct(apache::thrift::FragileConstructor, ::std::unique_ptr<::facebook::thrift::test::AdaptedCircularAdaptee> field__arg);

  CircularStruct(CircularStruct&&) noexcept;
  CircularStruct(const CircularStruct& src);


  CircularStruct& operator=(CircularStruct&&) noexcept;
  CircularStruct& operator=(const CircularStruct& src);

  ~CircularStruct();

 private:
  ::std::unique_ptr<::facebook::thrift::test::AdaptedCircularAdaptee> __fbthrift_field_field;

 public:

  bool operator==(const CircularStruct&) const;
  bool operator<(const CircularStruct&) const;
  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::facebook::thrift::test::AdaptedCircularAdaptee>>
  FOLLY_ERASE fbthrift_T& field_ref() & {
    return __fbthrift_field_field;
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::facebook::thrift::test::AdaptedCircularAdaptee>>
  FOLLY_ERASE const fbthrift_T& field_ref() const& {
    return __fbthrift_field_field;
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::facebook::thrift::test::AdaptedCircularAdaptee>>
  FOLLY_ERASE fbthrift_T&& field_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_field);
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::facebook::thrift::test::AdaptedCircularAdaptee>>
  FOLLY_ERASE const fbthrift_T&& field_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_field);
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::facebook::thrift::test::AdaptedCircularAdaptee>>
  FOLLY_ERASE fbthrift_T& field() & {
    return __fbthrift_field_field;
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::facebook::thrift::test::AdaptedCircularAdaptee>>
  FOLLY_ERASE const fbthrift_T& field() const& {
    return __fbthrift_field_field;
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::facebook::thrift::test::AdaptedCircularAdaptee>>
  FOLLY_ERASE fbthrift_T&& field() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_field);
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::facebook::thrift::test::AdaptedCircularAdaptee>>
  FOLLY_ERASE const fbthrift_T&& field() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_field);
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<CircularStruct>;
  friend void swap(CircularStruct& a, CircularStruct& b);
};

template <class Protocol_>
unsigned long CircularStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "CircularAdaptee", "kind": "struct" } */
class CircularAdaptee final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::facebook::thrift::test::CircularStruct>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = CircularAdaptee;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  CircularAdaptee() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  CircularAdaptee(apache::thrift::FragileConstructor, ::facebook::thrift::test::CircularStruct field__arg);

  CircularAdaptee(CircularAdaptee&&) noexcept;

  CircularAdaptee(const CircularAdaptee& src);


  CircularAdaptee& operator=(CircularAdaptee&&) noexcept;
  CircularAdaptee& operator=(const CircularAdaptee& src);
 private:
  ::facebook::thrift::test::CircularStruct __fbthrift_field_field;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const CircularAdaptee&) const;
  bool operator<(const CircularAdaptee&) const;

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::CircularStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field_ref() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::CircularStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field_ref() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::CircularStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::CircularStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::CircularStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::CircularStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  [[deprecated("Use `FOO.field().value()` instead of `FOO.get_field()`")]]
  const ::facebook::thrift::test::CircularStruct& get_field() const&;

  /** Glean { "field": "field" } */
  [[deprecated("Use `FOO.field().value()` instead of `FOO.get_field()`")]]
  ::facebook::thrift::test::CircularStruct get_field() &&;

  /** Glean { "field": "field" } */
  template <typename T_CircularAdaptee_field_struct_setter = ::facebook::thrift::test::CircularStruct>
  [[deprecated("Use `FOO.field() = BAR` instead of `FOO.set_field(BAR)`")]]
  ::facebook::thrift::test::CircularStruct& set_field(T_CircularAdaptee_field_struct_setter&& field_) {
    field_ref() = std::forward<T_CircularAdaptee_field_struct_setter>(field_);
    return __fbthrift_field_field;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<CircularAdaptee>;
  friend void swap(CircularAdaptee& a, CircularAdaptee& b);
};

template <class Protocol_>
unsigned long CircularAdaptee::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


namespace detail {
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "DeclaredAfterStruct", "kind": "struct" } */
class DeclaredAfterStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = DeclaredAfterStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  DeclaredAfterStruct() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  DeclaredAfterStruct(apache::thrift::FragileConstructor);

  DeclaredAfterStruct(DeclaredAfterStruct&&) = default;

  DeclaredAfterStruct(const DeclaredAfterStruct&) = default;


  DeclaredAfterStruct& operator=(DeclaredAfterStruct&&) = default;

  DeclaredAfterStruct& operator=(const DeclaredAfterStruct&) = default;

 public:

  bool operator==(const DeclaredAfterStruct&) const;
  bool operator<(const DeclaredAfterStruct&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<DeclaredAfterStruct>;
  friend void swap(DeclaredAfterStruct& a, DeclaredAfterStruct& b);
};

template <class Protocol_>
unsigned long DeclaredAfterStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}
} // namespace detail

using DeclaredAfterStruct = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::test::IdentityAdapter<detail::DeclaredAfterStruct>, ::facebook::thrift::test::detail::DeclaredAfterStruct>;


/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "ReorderedStruct", "kind": "struct" } */
class ReorderedStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::reordered_dependent_adapted
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::adapted<::apache::thrift::test::IdentityAdapter<detail::DeclaredAfterStruct>, ::apache::thrift::type::struct_t<::facebook::thrift::test::detail::DeclaredAfterStruct>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ReorderedStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    true;


 public:

  ReorderedStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ReorderedStruct(apache::thrift::FragileConstructor, ::std::unique_ptr<::facebook::thrift::test::DeclaredAfterStruct> reordered_dependent_adapted__arg);

  ReorderedStruct(ReorderedStruct&&) noexcept;
  ReorderedStruct(const ReorderedStruct& src);


  ReorderedStruct& operator=(ReorderedStruct&&) noexcept;
  ReorderedStruct& operator=(const ReorderedStruct& src);

  ~ReorderedStruct();

 private:
  ::std::unique_ptr<::facebook::thrift::test::DeclaredAfterStruct> __fbthrift_field_reordered_dependent_adapted;

 public:

  bool operator==(const ReorderedStruct&) const;
  bool operator<(const ReorderedStruct&) const;
  /** Glean { "field": "reordered_dependent_adapted" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::facebook::thrift::test::DeclaredAfterStruct>>
  FOLLY_ERASE fbthrift_T& reordered_dependent_adapted_ref() & {
    return __fbthrift_field_reordered_dependent_adapted;
  }

  /** Glean { "field": "reordered_dependent_adapted" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::facebook::thrift::test::DeclaredAfterStruct>>
  FOLLY_ERASE const fbthrift_T& reordered_dependent_adapted_ref() const& {
    return __fbthrift_field_reordered_dependent_adapted;
  }

  /** Glean { "field": "reordered_dependent_adapted" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::facebook::thrift::test::DeclaredAfterStruct>>
  FOLLY_ERASE fbthrift_T&& reordered_dependent_adapted_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_reordered_dependent_adapted);
  }

  /** Glean { "field": "reordered_dependent_adapted" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::facebook::thrift::test::DeclaredAfterStruct>>
  FOLLY_ERASE const fbthrift_T&& reordered_dependent_adapted_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_reordered_dependent_adapted);
  }

  /** Glean { "field": "reordered_dependent_adapted" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::facebook::thrift::test::DeclaredAfterStruct>>
  FOLLY_ERASE fbthrift_T& reordered_dependent_adapted() & {
    return __fbthrift_field_reordered_dependent_adapted;
  }

  /** Glean { "field": "reordered_dependent_adapted" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::facebook::thrift::test::DeclaredAfterStruct>>
  FOLLY_ERASE const fbthrift_T& reordered_dependent_adapted() const& {
    return __fbthrift_field_reordered_dependent_adapted;
  }

  /** Glean { "field": "reordered_dependent_adapted" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::facebook::thrift::test::DeclaredAfterStruct>>
  FOLLY_ERASE fbthrift_T&& reordered_dependent_adapted() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_reordered_dependent_adapted);
  }

  /** Glean { "field": "reordered_dependent_adapted" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::facebook::thrift::test::DeclaredAfterStruct>>
  FOLLY_ERASE const fbthrift_T&& reordered_dependent_adapted() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_reordered_dependent_adapted);
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ReorderedStruct>;
  friend void swap(ReorderedStruct& a, ReorderedStruct& b);
};

template <class Protocol_>
unsigned long ReorderedStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "UnderlyingRenamedStruct", "kind": "struct" } */
class UnderlyingRenamedStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::data
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = UnderlyingRenamedStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  UnderlyingRenamedStruct() :
      __fbthrift_field_data() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  UnderlyingRenamedStruct(apache::thrift::FragileConstructor, ::std::int64_t data__arg);

  UnderlyingRenamedStruct(UnderlyingRenamedStruct&&) = default;

  UnderlyingRenamedStruct(const UnderlyingRenamedStruct&) = default;


  UnderlyingRenamedStruct& operator=(UnderlyingRenamedStruct&&) = default;

  UnderlyingRenamedStruct& operator=(const UnderlyingRenamedStruct&) = default;
 private:
  ::std::int64_t __fbthrift_field_data;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const UnderlyingRenamedStruct&) const;
  bool operator<(const UnderlyingRenamedStruct&) const;

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> data_ref() const& {
    return {this->__fbthrift_field_data, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> data_ref() & {
    return {this->__fbthrift_field_data, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> data_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_data), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> data() const& {
    return {this->__fbthrift_field_data, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> data() & {
    return {this->__fbthrift_field_data, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> data() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_data), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "data" } */
  [[deprecated("Use `FOO.data().value()` instead of `FOO.get_data()`")]]
  ::std::int64_t get_data() const;

  /** Glean { "field": "data" } */
  [[deprecated("Use `FOO.data() = BAR` instead of `FOO.set_data(BAR)`")]]
  ::std::int64_t& set_data(::std::int64_t data_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<UnderlyingRenamedStruct>;
  friend void swap(UnderlyingRenamedStruct& a, UnderlyingRenamedStruct& b);
};

template <class Protocol_>
unsigned long UnderlyingRenamedStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using RenamedStruct = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::test::TemplatedTestAdapter, ::facebook::thrift::test::UnderlyingRenamedStruct>;


/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "UnderlyingSameNamespaceStruct", "kind": "struct" } */
class UnderlyingSameNamespaceStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::data
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = UnderlyingSameNamespaceStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  UnderlyingSameNamespaceStruct() :
      __fbthrift_field_data() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  UnderlyingSameNamespaceStruct(apache::thrift::FragileConstructor, ::std::int64_t data__arg);

  UnderlyingSameNamespaceStruct(UnderlyingSameNamespaceStruct&&) = default;

  UnderlyingSameNamespaceStruct(const UnderlyingSameNamespaceStruct&) = default;


  UnderlyingSameNamespaceStruct& operator=(UnderlyingSameNamespaceStruct&&) = default;

  UnderlyingSameNamespaceStruct& operator=(const UnderlyingSameNamespaceStruct&) = default;
 private:
  ::std::int64_t __fbthrift_field_data;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const UnderlyingSameNamespaceStruct&) const;
  bool operator<(const UnderlyingSameNamespaceStruct&) const;

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> data_ref() const& {
    return {this->__fbthrift_field_data, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> data_ref() & {
    return {this->__fbthrift_field_data, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> data_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_data), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> data() const& {
    return {this->__fbthrift_field_data, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> data() & {
    return {this->__fbthrift_field_data, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "data" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> data() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_data), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "data" } */
  [[deprecated("Use `FOO.data().value()` instead of `FOO.get_data()`")]]
  ::std::int64_t get_data() const;

  /** Glean { "field": "data" } */
  [[deprecated("Use `FOO.data() = BAR` instead of `FOO.set_data(BAR)`")]]
  ::std::int64_t& set_data(::std::int64_t data_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<UnderlyingSameNamespaceStruct>;
  friend void swap(UnderlyingSameNamespaceStruct& a, UnderlyingSameNamespaceStruct& b);
};

template <class Protocol_>
unsigned long UnderlyingSameNamespaceStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using SameNamespaceStruct = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::test::TemplatedTestAdapter, ::facebook::thrift::test::UnderlyingSameNamespaceStruct>;


namespace detail {
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "HeapAllocated", "kind": "struct" } */
class HeapAllocated final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = HeapAllocated;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  HeapAllocated() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  HeapAllocated(apache::thrift::FragileConstructor);

  HeapAllocated(HeapAllocated&&) = default;

  HeapAllocated(const HeapAllocated&) = default;


  HeapAllocated& operator=(HeapAllocated&&) = default;

  HeapAllocated& operator=(const HeapAllocated&) = default;

 public:

  bool operator==(const HeapAllocated&) const;
  bool operator<(const HeapAllocated&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<HeapAllocated>;
  friend void swap(HeapAllocated& a, HeapAllocated& b);
};

template <class Protocol_>
unsigned long HeapAllocated::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}
} // namespace detail

using HeapAllocated = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::test::MoveOnlyAdapter, ::facebook::thrift::test::detail::HeapAllocated>;


/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "MoveOnly", "kind": "struct" } */
class MoveOnly final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::ptr
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::adapted<::apache::thrift::test::MoveOnlyAdapter, ::apache::thrift::type::struct_t<::facebook::thrift::test::detail::HeapAllocated>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MoveOnly;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    true;


 public:

  MoveOnly() {
    ::apache::thrift::adapt_detail::construct<::apache::thrift::test::MoveOnlyAdapter, 1>(__fbthrift_field_ptr, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MoveOnly(apache::thrift::FragileConstructor, ::facebook::thrift::test::HeapAllocated ptr__arg);

  MoveOnly(MoveOnly&&) = default;
  MoveOnly(const MoveOnly& src);


  MoveOnly& operator=(MoveOnly&&) = default;
  MoveOnly& operator=(const MoveOnly& src);
 private:
  ::facebook::thrift::test::HeapAllocated __fbthrift_field_ptr;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MoveOnly&) const;
  bool operator<(const MoveOnly&) const;

  /** Glean { "field": "ptr" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::HeapAllocated>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> ptr_ref() const& {
    return {this->__fbthrift_field_ptr, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "ptr" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::HeapAllocated>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> ptr_ref() & {
    return {this->__fbthrift_field_ptr, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "ptr" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::HeapAllocated>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> ptr_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_ptr), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "ptr" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::HeapAllocated>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> ptr() const& {
    return {this->__fbthrift_field_ptr, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "ptr" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::HeapAllocated>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> ptr() & {
    return {this->__fbthrift_field_ptr, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "ptr" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::HeapAllocated>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> ptr() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_ptr), __isset.at(0), __isset.bit(0)};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MoveOnly>;
  friend void swap(MoveOnly& a, MoveOnly& b);
};

template <class Protocol_>
unsigned long MoveOnly::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "AlsoMoveOnly", "kind": "struct" } */
class AlsoMoveOnly final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::ptr
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::adapted<::apache::thrift::test::MoveOnlyAdapter, ::apache::thrift::type::i64_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = AlsoMoveOnly;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    true;


 public:

  AlsoMoveOnly() :
      __fbthrift_field_ptr() {
    ::apache::thrift::adapt_detail::construct<::apache::thrift::test::MoveOnlyAdapter, 1>(__fbthrift_field_ptr, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  AlsoMoveOnly(apache::thrift::FragileConstructor, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::MoveOnlyAdapter, 1, ::std::int64_t, AlsoMoveOnly> ptr__arg);

  AlsoMoveOnly(AlsoMoveOnly&&) = default;
  AlsoMoveOnly(const AlsoMoveOnly& src);


  AlsoMoveOnly& operator=(AlsoMoveOnly&&) = default;
  AlsoMoveOnly& operator=(const AlsoMoveOnly& src);
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::MoveOnlyAdapter, 1, ::std::int64_t, AlsoMoveOnly> __fbthrift_field_ptr;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const AlsoMoveOnly&) const;
  bool operator<(const AlsoMoveOnly&) const;

  /** Glean { "field": "ptr" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::MoveOnlyAdapter, 1, ::std::int64_t, AlsoMoveOnly>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> ptr_ref() const& {
    return {this->__fbthrift_field_ptr, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "ptr" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::MoveOnlyAdapter, 1, ::std::int64_t, AlsoMoveOnly>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> ptr_ref() & {
    return {this->__fbthrift_field_ptr, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "ptr" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::MoveOnlyAdapter, 1, ::std::int64_t, AlsoMoveOnly>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> ptr_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_ptr), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "ptr" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::MoveOnlyAdapter, 1, ::std::int64_t, AlsoMoveOnly>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> ptr() const& {
    return {this->__fbthrift_field_ptr, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "ptr" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::MoveOnlyAdapter, 1, ::std::int64_t, AlsoMoveOnly>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> ptr() & {
    return {this->__fbthrift_field_ptr, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "ptr" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::MoveOnlyAdapter, 1, ::std::int64_t, AlsoMoveOnly>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> ptr() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_ptr), __isset.at(0), __isset.bit(0)};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<AlsoMoveOnly>;
  friend void swap(AlsoMoveOnly& a, AlsoMoveOnly& b);
};

template <class Protocol_>
unsigned long AlsoMoveOnly::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "ApplyAdapter", "kind": "struct" } */
class ApplyAdapter final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ApplyAdapter;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  ApplyAdapter() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ApplyAdapter(apache::thrift::FragileConstructor);

  ApplyAdapter(ApplyAdapter&&) = default;

  ApplyAdapter(const ApplyAdapter&) = default;


  ApplyAdapter& operator=(ApplyAdapter&&) = default;

  ApplyAdapter& operator=(const ApplyAdapter&) = default;

 public:

  bool operator==(const ApplyAdapter&) const;
  bool operator<(const ApplyAdapter&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ApplyAdapter>;
  friend void swap(ApplyAdapter& a, ApplyAdapter& b);
};

template <class Protocol_>
unsigned long ApplyAdapter::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


namespace detail {
/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "TransitiveAdapted", "kind": "struct" } */
class TransitiveAdapted final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TransitiveAdapted;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  TransitiveAdapted() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TransitiveAdapted(apache::thrift::FragileConstructor);

  TransitiveAdapted(TransitiveAdapted&&) = default;

  TransitiveAdapted(const TransitiveAdapted&) = default;


  TransitiveAdapted& operator=(TransitiveAdapted&&) = default;

  TransitiveAdapted& operator=(const TransitiveAdapted&) = default;

 public:

  bool operator==(const TransitiveAdapted&) const;
  bool operator<(const TransitiveAdapted&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TransitiveAdapted>;
  friend void swap(TransitiveAdapted& a, TransitiveAdapted& b);
};

template <class Protocol_>
unsigned long TransitiveAdapted::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}
} // namespace detail

using TransitiveAdapted = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::test::TemplatedTestAdapter, ::facebook::thrift::test::detail::TransitiveAdapted>;


/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "CountingStruct", "kind": "struct" } */
class CountingStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 3;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::regularInt,
    ::apache::thrift::ident::countingInt,
    ::apache::thrift::ident::regularString
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::adapted<::apache::thrift::test::CountingAdapter<false, int>, ::apache::thrift::type::i64_t>,
    ::apache::thrift::type::adapted<::apache::thrift::test::CountingAdapter<true, int>, ::apache::thrift::type::i64_t>,
    ::apache::thrift::type::adapted<::apache::thrift::test::CountingAdapter<false, std::string>, ::apache::thrift::type::string_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = CountingStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    true;


 public:

  CountingStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  CountingStruct(apache::thrift::FragileConstructor, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::CountingAdapter<false, int>, 1, ::std::int64_t, CountingStruct> regularInt__arg, ::facebook::thrift::test::CountingInt countingInt__arg, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::CountingAdapter<false, std::string>, 3, ::std::string, CountingStruct> regularString__arg);

  CountingStruct(CountingStruct&&) noexcept;
  CountingStruct(const CountingStruct& src);


  CountingStruct& operator=(CountingStruct&&) noexcept;
  CountingStruct& operator=(const CountingStruct& src);

  ~CountingStruct();

 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::CountingAdapter<false, int>, 1, ::std::int64_t, CountingStruct> __fbthrift_field_regularInt;
 private:
  ::facebook::thrift::test::CountingInt __fbthrift_field_countingInt;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::CountingAdapter<false, std::string>, 3, ::std::string, CountingStruct> __fbthrift_field_regularString;
 private:
  apache::thrift::detail::isset_bitset<3, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const CountingStruct&) const;
  bool operator<(const CountingStruct&) const;

  /** Glean { "field": "regularInt" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::CountingAdapter<false, int>, 1, ::std::int64_t, CountingStruct>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> regularInt_ref() const& {
    return {this->__fbthrift_field_regularInt, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "regularInt" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::CountingAdapter<false, int>, 1, ::std::int64_t, CountingStruct>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> regularInt_ref() & {
    return {this->__fbthrift_field_regularInt, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "regularInt" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::CountingAdapter<false, int>, 1, ::std::int64_t, CountingStruct>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> regularInt_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_regularInt), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "regularInt" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::CountingAdapter<false, int>, 1, ::std::int64_t, CountingStruct>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> regularInt() const& {
    return {this->__fbthrift_field_regularInt, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "regularInt" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::CountingAdapter<false, int>, 1, ::std::int64_t, CountingStruct>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> regularInt() & {
    return {this->__fbthrift_field_regularInt, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "regularInt" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::CountingAdapter<false, int>, 1, ::std::int64_t, CountingStruct>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> regularInt() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_regularInt), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "countingInt" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::CountingInt>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> countingInt_ref() const& {
    return {this->__fbthrift_field_countingInt, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "countingInt" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::CountingInt>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> countingInt_ref() & {
    return {this->__fbthrift_field_countingInt, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "countingInt" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::CountingInt>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> countingInt_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_countingInt), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "countingInt" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::CountingInt>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> countingInt() const& {
    return {this->__fbthrift_field_countingInt, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "countingInt" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::CountingInt>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> countingInt() & {
    return {this->__fbthrift_field_countingInt, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "countingInt" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::CountingInt>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> countingInt() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_countingInt), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "regularString" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::CountingAdapter<false, std::string>, 3, ::std::string, CountingStruct>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> regularString_ref() const& {
    return {this->__fbthrift_field_regularString, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "regularString" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::CountingAdapter<false, std::string>, 3, ::std::string, CountingStruct>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> regularString_ref() & {
    return {this->__fbthrift_field_regularString, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "regularString" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::CountingAdapter<false, std::string>, 3, ::std::string, CountingStruct>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> regularString_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_regularString), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "regularString" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::CountingAdapter<false, std::string>, 3, ::std::string, CountingStruct>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> regularString() const& {
    return {this->__fbthrift_field_regularString, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "regularString" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::CountingAdapter<false, std::string>, 3, ::std::string, CountingStruct>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> regularString() & {
    return {this->__fbthrift_field_regularString, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "regularString" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::CountingAdapter<false, std::string>, 3, ::std::string, CountingStruct>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> regularString() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_regularString), __isset.at(2), __isset.bit(2)};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<CountingStruct>;
  friend void swap(CountingStruct& a, CountingStruct& b);
};

template <class Protocol_>
unsigned long CountingStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "Person", "kind": "struct" } */
class Person final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::name
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Person;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  Person();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Person(apache::thrift::FragileConstructor, ::std::string name__arg);

  Person(Person&&) noexcept;

  Person(const Person& src);


  Person& operator=(Person&&) noexcept;
  Person& operator=(const Person& src);

  ~Person();

 private:
  ::std::string __fbthrift_field_name;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const Person&) const;
  bool operator<(const Person&) const;

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name_ref() const& {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name_ref() & {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name() const& {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name() & {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  const ::std::string& get_name() const& {
    return __fbthrift_field_name;
  }

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  ::std::string get_name() && {
    return static_cast<::std::string&&>(__fbthrift_field_name);
  }

  /** Glean { "field": "name" } */
  template <typename T_Person_name_struct_setter = ::std::string>
  [[deprecated("Use `FOO.name() = BAR` instead of `FOO.set_name(BAR)`")]]
  ::std::string& set_name(T_Person_name_struct_setter&& name_) {
    name_ref() = std::forward<T_Person_name_struct_setter>(name_);
    return __fbthrift_field_name;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Person>;
  friend void swap(Person& a, Person& b);
};

template <class Protocol_>
unsigned long Person::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "Person2", "kind": "struct" } */
class Person2 final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::name
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Person2;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  Person2();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Person2(apache::thrift::FragileConstructor, ::std::string name__arg);

  Person2(Person2&&) noexcept;

  Person2(const Person2& src);


  Person2& operator=(Person2&&) noexcept;
  Person2& operator=(const Person2& src);

  ~Person2();

 private:
  ::std::string __fbthrift_field_name;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const Person2&) const;
  bool operator<(const Person2&) const;

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name_ref() const& {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name_ref() & {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name() const& {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name() & {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  const ::std::string& get_name() const& {
    return __fbthrift_field_name;
  }

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  ::std::string get_name() && {
    return static_cast<::std::string&&>(__fbthrift_field_name);
  }

  /** Glean { "field": "name" } */
  template <typename T_Person2_name_struct_setter = ::std::string>
  [[deprecated("Use `FOO.name() = BAR` instead of `FOO.set_name(BAR)`")]]
  ::std::string& set_name(T_Person2_name_struct_setter&& name_) {
    name_ref() = std::forward<T_Person2_name_struct_setter>(name_);
    return __fbthrift_field_name;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Person2>;
  friend void swap(Person2& a, Person2& b);
};

template <class Protocol_>
unsigned long Person2::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/adapter/src/module.thrift", "name": "Renamed", "kind": "struct" } */
class Renamed final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::adapted<::apache::thrift::test::FieldAdapter, ::apache::thrift::type::i32_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Renamed;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    true;


 public:

  Renamed() :
      __fbthrift_field_field() {
    ::apache::thrift::adapt_detail::construct<::apache::thrift::test::FieldAdapter, 1>(__fbthrift_field_field, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Renamed(apache::thrift::FragileConstructor, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::FieldAdapter, 1, ::std::int32_t, Renamed> field__arg);

  Renamed(Renamed&&) = default;
  Renamed(const Renamed& src);


  Renamed& operator=(Renamed&&) = default;
  Renamed& operator=(const Renamed& src);
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::FieldAdapter, 1, ::std::int32_t, Renamed> __fbthrift_field_field;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const Renamed&) const;
  bool operator<(const Renamed&) const;

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::FieldAdapter, 1, ::std::int32_t, Renamed>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field_ref() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::FieldAdapter, 1, ::std::int32_t, Renamed>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field_ref() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::FieldAdapter, 1, ::std::int32_t, Renamed>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::FieldAdapter, 1, ::std::int32_t, Renamed>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::FieldAdapter, 1, ::std::int32_t, Renamed>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::test::FieldAdapter, 1, ::std::int32_t, Renamed>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Renamed>;
  friend void swap(Renamed& a, Renamed& b);
};

template <class Protocol_>
unsigned long Renamed::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using RenamedStructWithStructAdapterAndFieldAdapter = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::test::StructAdapter, ::facebook::thrift::test::Renamed>;


} // namespace facebook::thrift::test

namespace apache::thrift {

template <> struct TEnumDataStorage<::facebook::thrift::test::Baz::Type>;

template <> struct TEnumTraits<::facebook::thrift::test::Baz::Type> {
  using type = ::facebook::thrift::test::Baz::Type;

  static constexpr std::size_t const size = 5;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }

  static constexpr type min() { return type::intField; }
  static constexpr type max() { return type::longField; }
};

template <> struct TEnumDataStorage<::facebook::thrift::test::ThriftAdaptTestUnion::Type>;

template <> struct TEnumTraits<::facebook::thrift::test::ThriftAdaptTestUnion::Type> {
  using type = ::facebook::thrift::test::ThriftAdaptTestUnion::Type;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }

  static constexpr type min() { return type::delay; }
  static constexpr type max() { return type::custom; }
};
} // namespace apache::thrift

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::facebook::thrift::test::MyAnnotation, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\x6a\x45\x56\x69\xb7\xf5\x58\x51\x28\xf6\xcd\xba\xea\x28\x3f\xfe", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::Foo, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\x95\xa5\x15\xf5\x30\xa5\xee\x56\x12\xdf\x70\x23\x6d\xef\xfc\xe9", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::Baz, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\x38\x5f\xd7\xa9\xfd\x13\x50\xd0\xd0\xe0\x18\xe2\x86\x9b\x88\xaa", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::Bar, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\xad\x64\x74\xc5\x13\xed\x51\x9d\x91\x04\x08\xd9\xd2\x06\x27\xf9", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::detail::DirectlyAdapted, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\xd5\x21\xf6\x76\x35\x82\xeb\x6b\x88\x94\x60\x95\xff\xa5\xb7\xa3", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::detail::IndependentDirectlyAdapted, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\x71\xf8\xc6\x43\x30\x23\xeb\xf1\x05\xda\x95\x5a\x89\x79\xb3\xc1", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::StructWithFieldAdapter, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\x9d\x3b\x3a\xcd\xb6\x60\xaf\x33\xe8\x21\x26\x9f\x9a\xe4\x38\x2c", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::TerseAdaptedFields, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\x2c\x79\xc3\xb4\x33\x65\xff\x9d\x97\x8d\x1e\x05\xd4\xdb\x47\x8d", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::B, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\x49\x81\x03\x7f\x93\xd7\x05\x9d\x79\x27\xaf\x06\x39\x6c\xd2\x8a", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::A, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\x86\x2b\xb5\xde\x76\x69\x66\x25\x66\x19\x1d\xa8\x93\x50\x7c\xf6", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::Config, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\x62\x7a\xcf\x61\x2f\xca\xf6\x27\x9c\xae\xa5\x90\x8b\x65\x11\x92", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::MyStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\x10\x0b\x2b\x86\xd1\xb9\x8d\x98\xdb\xf8\x3e\xb4\xd7\x4b\x73\x32", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::AdaptTestStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\xd4\x7b\x7d\x4e\xf5\x74\xc1\x0f\x45\xa2\x2d\xa8\x17\x63\xba\xe4", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::AdaptTemplatedTestStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\x0c\x48\x96\x57\x7d\x49\x9a\xfc\x1d\x32\x53\xc9\x94\x12\x88\xf5", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::AdaptTemplatedNestedTestStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\x77\x31\x3d\x86\xdd\x14\x08\x1d\x82\x82\x8a\x15\xfa\x60\xe1\x06", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::ThriftAdaptTestUnion, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\xb1\x4a\xfe\xee\x0b\xc8\x29\x5c\xdb\xc7\xf4\xa7\xc4\xcd\xea\x59", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::ThriftAdaptedStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\x22\xf9\x0f\xac\x86\x91\x4a\xff\x96\xce\xed\x39\xcc\x95\x9a\x51", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::detail::DirectlyAdaptedStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\xea\x43\x61\x88\xec\xaa\x43\x36\x81\xf3\x9b\x91\x03\xe0\x84\xa1", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::StructFieldAdaptedStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\x55\x42\xf4\x80\xcd\x0d\x59\x61\x75\x06\xda\xa8\x4c\xa8\xb6\x9a", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::CircularAdaptee, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\x33\x29\xce\x8a\x52\x63\x2e\xec\x13\x76\x70\x39\x2d\xae\x60\x8d", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::CircularStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\xf7\x0d\x2e\x03\x2a\x6d\x48\x6b\xe2\x53\xe3\x17\x8a\x4e\x74\x20", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::ReorderedStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\xaa\x93\x45\x76\x6d\x55\xa2\x03\xe3\xae\x01\xd4\xda\x2a\xee\x9c", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::detail::DeclaredAfterStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\x1e\xea\xf0\x47\xa8\x38\xb0\x09\xe7\x6e\xc9\xeb\xdf\x29\x41\xa9", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::UnderlyingRenamedStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\x63\x89\x38\x16\x73\x2f\x6f\xb1\x65\x33\x12\xee\x3a\x22\x90\x28", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::UnderlyingSameNamespaceStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\xf5\x14\x0b\xa9\xf5\x4f\x00\x3a\x4d\xfc\x19\x17\x29\xce\x70\x07", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::detail::HeapAllocated, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\xfe\x4c\xe1\xd6\x8c\x6c\x04\xd9\x17\x81\x28\x8b\xa5\x3e\x3d\xa1", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::MoveOnly, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\x60\x7f\x84\x19\x4c\x27\x87\x03\x04\x20\x4a\x32\x7d\xf2\xcb\xe4", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::AlsoMoveOnly, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\x08\x6e\x07\xee\x47\xcf\xdb\x76\xb5\x34\x27\x84\x64\x1b\x6e\xa2", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::ApplyAdapter, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\xb9\x9d\x3f\x66\x4d\x5d\xd2\xfa\xdd\xbe\x47\x89\xc1\x40\x5a\xed", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::detail::TransitiveAdapted, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\x1a\x6f\xfc\x92\x13\x2d\x52\x53\x82\xba\x50\x57\x8e\xd8\xd4\x1b", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::CountingStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\xb3\x10\x60\x5e\xc4\x63\x77\xa9\x35\xd5\xd8\x0c\x25\x83\x95\x0b", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::Person, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\x36\x30\x68\xfa\x30\x68\x67\xe1\x3b\x2c\x10\x5e\x05\x59\x83\x42", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::Person2, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\xe2\x3f\xf2\xdc\x6c\x34\x18\x66\xd0\x7d\x46\xc3\x03\xa4\x16\x89", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::Renamed, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\xa3\xfa\x7a\x98\x6d\xd5\xba\xbe\xdf\xa0\xed\xe5\x46\xb8\x37\xaa", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::Color, true> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\x47\xfc\x36\xd5\xef\xe2\x2e\xaa\xaf\x09\x12\x0d\xe3\x4b\xe7\x0e", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::ThriftAdaptedEnum, true> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7881541235899647069;
  static constexpr ::std::string_view definitionKey = {"\x0c\xdb\x4d\x0b\x20\xca\xce\xd0\xf0\x34\x99\x0b\x53\x01\xd8\xb3", 16};
};
} // namespace apache::thrift::detail
