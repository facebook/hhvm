[(Fun
    { fd_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
        ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
        ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
      fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([3:10-30], "\\expected_class_union");
      fd_fun =
      { f_span = [3:1-6:2]; f_readonly_this = None; f_annotation = (); 
        f_readonly_ret = None; f_ret = ((void), (Some ([3:61-65], (Hprim Tvoid))));
        f_params =
        [{ param_annotation = ((int | string)); param_type_hint = (((int | string)), (Some ([3:31-45], (Hunion [([3:32-38], (Hprim Tstring)); ([3:41-44], (Hprim Tint))]))));
           param_is_variadic = false; param_pos = [3:46-57]; param_name = "$class_name"; 
           param_expr = None; param_readonly = None; param_callconv = Pnormal; 
           param_user_attributes = []; param_visibility = None }
          ];
        f_ctxs = None; f_unsafe_ctxs = None;
        f_body =
        { fb_ast =
          [([5:2-25],
            (Expr
               ((nothing), [5:2-24],
                (Binop
                   { bop = (Eq None); lhs = ((nothing), [5:2-4], (Lvar ([5:2-4], $x)));
                     rhs =
                     ((nothing), [5:7-24],
                      (New (
                         ((nothing), [5:11-22],
                          (CIexpr (((int | string)), [5:11-22], (Hole ((((int | string)), [5:11-22], (Lvar ([5:11-22], $class_name))), ((int | string)), (classname<nothing>), Typing))))),
                         [], [], None, (nothing))))
                     }))))
            ]
          };
        f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
        f_doc_comment = None };
      fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = [] })