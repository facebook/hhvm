// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.1

// <auto-generated>
//
// Generated from file `class_demo.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#ifndef __class_demo_h__
#define __class_demo_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Stream.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace com
{

namespace jd
{

class A;

class B;

class ClassDemo;

class CommontIceRpcService;

}

}

}

namespace com
{

namespace jd
{

class A;
bool operator==(const A&, const A&);
bool operator<(const A&, const A&);

class B;
bool operator==(const B&, const B&);
bool operator<(const B&, const B&);

class ClassDemo;
bool operator==(const ClassDemo&, const ClassDemo&);
bool operator<(const ClassDemo&, const ClassDemo&);

class CommontIceRpcService;
bool operator==(const CommontIceRpcService&, const CommontIceRpcService&);
bool operator<(const CommontIceRpcService&, const CommontIceRpcService&);

}

}

namespace IceInternal
{

::Ice::Object* upCast(::com::jd::A*);
::IceProxy::Ice::Object* upCast(::IceProxy::com::jd::A*);

::Ice::Object* upCast(::com::jd::B*);
::IceProxy::Ice::Object* upCast(::IceProxy::com::jd::B*);

::Ice::Object* upCast(::com::jd::ClassDemo*);
::IceProxy::Ice::Object* upCast(::IceProxy::com::jd::ClassDemo*);

::Ice::Object* upCast(::com::jd::CommontIceRpcService*);
::IceProxy::Ice::Object* upCast(::IceProxy::com::jd::CommontIceRpcService*);

}

namespace com
{

namespace jd
{

typedef ::IceInternal::Handle< ::com::jd::A> APtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::com::jd::A> APrx;

void __read(::IceInternal::BasicStream*, APrx&);
void __patch__APtr(void*, ::Ice::ObjectPtr&);

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
ICE_DEPRECATED_API void ice_writeAPrx(const ::Ice::OutputStreamPtr&, const APrx&);
ICE_DEPRECATED_API void ice_readAPrx(const ::Ice::InputStreamPtr&, APrx&);
ICE_DEPRECATED_API void ice_writeA(const ::Ice::OutputStreamPtr&, const APtr&);
ICE_DEPRECATED_API void ice_readA(const ::Ice::InputStreamPtr&, APtr&);
#endif

typedef ::IceInternal::Handle< ::com::jd::B> BPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::com::jd::B> BPrx;

void __read(::IceInternal::BasicStream*, BPrx&);
void __patch__BPtr(void*, ::Ice::ObjectPtr&);

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
ICE_DEPRECATED_API void ice_writeBPrx(const ::Ice::OutputStreamPtr&, const BPrx&);
ICE_DEPRECATED_API void ice_readBPrx(const ::Ice::InputStreamPtr&, BPrx&);
ICE_DEPRECATED_API void ice_writeB(const ::Ice::OutputStreamPtr&, const BPtr&);
ICE_DEPRECATED_API void ice_readB(const ::Ice::InputStreamPtr&, BPtr&);
#endif

typedef ::IceInternal::Handle< ::com::jd::ClassDemo> ClassDemoPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::com::jd::ClassDemo> ClassDemoPrx;

void __read(::IceInternal::BasicStream*, ClassDemoPrx&);
void __patch__ClassDemoPtr(void*, ::Ice::ObjectPtr&);

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
ICE_DEPRECATED_API void ice_writeClassDemoPrx(const ::Ice::OutputStreamPtr&, const ClassDemoPrx&);
ICE_DEPRECATED_API void ice_readClassDemoPrx(const ::Ice::InputStreamPtr&, ClassDemoPrx&);
ICE_DEPRECATED_API void ice_writeClassDemo(const ::Ice::OutputStreamPtr&, const ClassDemoPtr&);
ICE_DEPRECATED_API void ice_readClassDemo(const ::Ice::InputStreamPtr&, ClassDemoPtr&);
#endif

typedef ::IceInternal::Handle< ::com::jd::CommontIceRpcService> CommontIceRpcServicePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::com::jd::CommontIceRpcService> CommontIceRpcServicePrx;

void __read(::IceInternal::BasicStream*, CommontIceRpcServicePrx&);
void __patch__CommontIceRpcServicePtr(void*, ::Ice::ObjectPtr&);

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
ICE_DEPRECATED_API void ice_writeCommontIceRpcServicePrx(const ::Ice::OutputStreamPtr&, const CommontIceRpcServicePrx&);
ICE_DEPRECATED_API void ice_readCommontIceRpcServicePrx(const ::Ice::InputStreamPtr&, CommontIceRpcServicePrx&);
ICE_DEPRECATED_API void ice_writeCommontIceRpcService(const ::Ice::OutputStreamPtr&, const CommontIceRpcServicePtr&);
ICE_DEPRECATED_API void ice_readCommontIceRpcService(const ::Ice::InputStreamPtr&, CommontIceRpcServicePtr&);
#endif

}

}

namespace com
{

namespace jd
{

typedef ::std::vector< ::com::jd::ClassDemoPtr> ClassDemoS;
void __writeClassDemoS(::IceInternal::BasicStream*, const ::com::jd::ClassDemoPtr*, const ::com::jd::ClassDemoPtr*);
void __readClassDemoS(::IceInternal::BasicStream*, ClassDemoS&);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
ICE_DEPRECATED_API void ice_writeClassDemoS(const ::Ice::OutputStreamPtr&, const ClassDemoS&);
ICE_DEPRECATED_API void ice_readClassDemoS(const ::Ice::InputStreamPtr&, ClassDemoS&);
#endif

typedef ::std::vector< ::Ice::Long> LongList;

class RpcException : public ::Ice::UserException
{
public:

    RpcException() {}
    RpcException(::Ice::Int, const ::std::string&);
    virtual ~RpcException() throw();

    virtual ::std::string ice_name() const;
    virtual ::Ice::Exception* ice_clone() const;
    virtual void ice_throw() const;

    static const ::IceInternal::UserExceptionFactoryPtr& ice_factory();

    ::Ice::Int resultCode;
    ::std::string msg;

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

static RpcException __RpcException_init;

}

}

namespace com
{

namespace jd
{

class Callback_CommontIceRpcService_getClassDemo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommontIceRpcService_getClassDemo_Base> Callback_CommontIceRpcService_getClassDemoPtr;

class Callback_CommontIceRpcService_newClassDemo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommontIceRpcService_newClassDemo_Base> Callback_CommontIceRpcService_newClassDemoPtr;

class Callback_CommontIceRpcService_getClassDemoS_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommontIceRpcService_getClassDemoS_Base> Callback_CommontIceRpcService_getClassDemoSPtr;

class Callback_CommontIceRpcService_setClassDemos_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommontIceRpcService_setClassDemos_Base> Callback_CommontIceRpcService_setClassDemosPtr;

class Callback_CommontIceRpcService_getLongList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommontIceRpcService_getLongList_Base> Callback_CommontIceRpcService_getLongListPtr;

class Callback_CommontIceRpcService_setLongList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommontIceRpcService_setLongList_Base> Callback_CommontIceRpcService_setLongListPtr;

class Callback_CommontIceRpcService_getOtherCommentById_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommontIceRpcService_getOtherCommentById_Base> Callback_CommontIceRpcService_getOtherCommentByIdPtr;

}

}

namespace IceProxy
{

namespace com
{

namespace jd
{

class A : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<A> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<A*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<A> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<A*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<A> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<A*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<A> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<A*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<A> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<A*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<A> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<A*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<A> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<A*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<A> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<A*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<A> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<A*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<A> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<A*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<A> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<A*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<A> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<A*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<A> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<A*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<A> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<A*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<A> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<A*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<A> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<A*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<A> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<A*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<A> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<A*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<A> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<A*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<A*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class B : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<B> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<B*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<B> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<B*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<B> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<B*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<B> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<B*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<B> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<B*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<B> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<B*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<B> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<B*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<B> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<B*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<B> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<B*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<B> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<B*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<B> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<B*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<B> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<B*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<B> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<B*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<B> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<B*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<B> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<B*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<B> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<B*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<B> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<B*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<B> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<B*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<B> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<B*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<B*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class ClassDemo : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<ClassDemo> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClassDemo*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<ClassDemo*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClassDemo> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClassDemo*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<ClassDemo*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClassDemo> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClassDemo*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<ClassDemo*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClassDemo> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClassDemo*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<ClassDemo*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClassDemo> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClassDemo*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<ClassDemo*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClassDemo> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClassDemo*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<ClassDemo*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClassDemo> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClassDemo*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<ClassDemo*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClassDemo> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClassDemo*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<ClassDemo*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClassDemo> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClassDemo*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<ClassDemo*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClassDemo> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClassDemo*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<ClassDemo*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClassDemo> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClassDemo*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<ClassDemo*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClassDemo> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClassDemo*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<ClassDemo*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClassDemo> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClassDemo*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<ClassDemo*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClassDemo> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClassDemo*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<ClassDemo*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClassDemo> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClassDemo*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<ClassDemo*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClassDemo> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClassDemo*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<ClassDemo*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClassDemo> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClassDemo*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<ClassDemo*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClassDemo> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClassDemo*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<ClassDemo*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClassDemo> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClassDemo*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<ClassDemo*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class CommontIceRpcService : virtual public ::IceProxy::Ice::Object
{
public:

    ::com::jd::ClassDemoPtr getClassDemo()
    {
        return getClassDemo(0);
    }
    ::com::jd::ClassDemoPtr getClassDemo(const ::Ice::Context& __ctx)
    {
        return getClassDemo(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getClassDemo()
    {
        return begin_getClassDemo(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getClassDemo(const ::Ice::Context& __ctx)
    {
        return begin_getClassDemo(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getClassDemo(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getClassDemo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getClassDemo(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getClassDemo(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getClassDemo(const ::com::jd::Callback_CommontIceRpcService_getClassDemoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getClassDemo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getClassDemo(const ::Ice::Context& __ctx, const ::com::jd::Callback_CommontIceRpcService_getClassDemoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getClassDemo(&__ctx, __del, __cookie);
    }

    ::com::jd::ClassDemoPtr end_getClassDemo(const ::Ice::AsyncResultPtr&);
    
private:

    ::com::jd::ClassDemoPtr getClassDemo(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getClassDemo(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::com::jd::ClassDemoPtr newClassDemo(const ::com::jd::ClassDemoPtr& cd)
    {
        return newClassDemo(cd, 0);
    }
    ::com::jd::ClassDemoPtr newClassDemo(const ::com::jd::ClassDemoPtr& cd, const ::Ice::Context& __ctx)
    {
        return newClassDemo(cd, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_newClassDemo(const ::com::jd::ClassDemoPtr& cd)
    {
        return begin_newClassDemo(cd, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_newClassDemo(const ::com::jd::ClassDemoPtr& cd, const ::Ice::Context& __ctx)
    {
        return begin_newClassDemo(cd, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_newClassDemo(const ::com::jd::ClassDemoPtr& cd, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_newClassDemo(cd, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_newClassDemo(const ::com::jd::ClassDemoPtr& cd, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_newClassDemo(cd, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_newClassDemo(const ::com::jd::ClassDemoPtr& cd, const ::com::jd::Callback_CommontIceRpcService_newClassDemoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_newClassDemo(cd, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_newClassDemo(const ::com::jd::ClassDemoPtr& cd, const ::Ice::Context& __ctx, const ::com::jd::Callback_CommontIceRpcService_newClassDemoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_newClassDemo(cd, &__ctx, __del, __cookie);
    }

    ::com::jd::ClassDemoPtr end_newClassDemo(const ::Ice::AsyncResultPtr&);
    
private:

    ::com::jd::ClassDemoPtr newClassDemo(const ::com::jd::ClassDemoPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_newClassDemo(const ::com::jd::ClassDemoPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::com::jd::ClassDemoS getClassDemoS()
    {
        return getClassDemoS(0);
    }
    ::com::jd::ClassDemoS getClassDemoS(const ::Ice::Context& __ctx)
    {
        return getClassDemoS(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getClassDemoS()
    {
        return begin_getClassDemoS(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getClassDemoS(const ::Ice::Context& __ctx)
    {
        return begin_getClassDemoS(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getClassDemoS(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getClassDemoS(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getClassDemoS(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getClassDemoS(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getClassDemoS(const ::com::jd::Callback_CommontIceRpcService_getClassDemoSPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getClassDemoS(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getClassDemoS(const ::Ice::Context& __ctx, const ::com::jd::Callback_CommontIceRpcService_getClassDemoSPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getClassDemoS(&__ctx, __del, __cookie);
    }

    ::com::jd::ClassDemoS end_getClassDemoS(const ::Ice::AsyncResultPtr&);
    
private:

    ::com::jd::ClassDemoS getClassDemoS(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getClassDemoS(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setClassDemos(const ::com::jd::ClassDemoS& cds)
    {
        setClassDemos(cds, 0);
    }
    void setClassDemos(const ::com::jd::ClassDemoS& cds, const ::Ice::Context& __ctx)
    {
        setClassDemos(cds, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setClassDemos(const ::com::jd::ClassDemoS& cds)
    {
        return begin_setClassDemos(cds, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setClassDemos(const ::com::jd::ClassDemoS& cds, const ::Ice::Context& __ctx)
    {
        return begin_setClassDemos(cds, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setClassDemos(const ::com::jd::ClassDemoS& cds, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setClassDemos(cds, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setClassDemos(const ::com::jd::ClassDemoS& cds, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setClassDemos(cds, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setClassDemos(const ::com::jd::ClassDemoS& cds, const ::com::jd::Callback_CommontIceRpcService_setClassDemosPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setClassDemos(cds, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setClassDemos(const ::com::jd::ClassDemoS& cds, const ::Ice::Context& __ctx, const ::com::jd::Callback_CommontIceRpcService_setClassDemosPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setClassDemos(cds, &__ctx, __del, __cookie);
    }

    void end_setClassDemos(const ::Ice::AsyncResultPtr&);
    
private:

    void setClassDemos(const ::com::jd::ClassDemoS&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setClassDemos(const ::com::jd::ClassDemoS&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::com::jd::LongList getLongList()
    {
        return getLongList(0);
    }
    ::com::jd::LongList getLongList(const ::Ice::Context& __ctx)
    {
        return getLongList(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getLongList()
    {
        return begin_getLongList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLongList(const ::Ice::Context& __ctx)
    {
        return begin_getLongList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLongList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLongList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLongList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLongList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLongList(const ::com::jd::Callback_CommontIceRpcService_getLongListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLongList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLongList(const ::Ice::Context& __ctx, const ::com::jd::Callback_CommontIceRpcService_getLongListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLongList(&__ctx, __del, __cookie);
    }

    ::com::jd::LongList end_getLongList(const ::Ice::AsyncResultPtr&);
    
private:

    ::com::jd::LongList getLongList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getLongList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::com::jd::LongList setLongList(const ::com::jd::LongList& ll)
    {
        return setLongList(ll, 0);
    }
    ::com::jd::LongList setLongList(const ::com::jd::LongList& ll, const ::Ice::Context& __ctx)
    {
        return setLongList(ll, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setLongList(const ::com::jd::LongList& ll)
    {
        return begin_setLongList(ll, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setLongList(const ::com::jd::LongList& ll, const ::Ice::Context& __ctx)
    {
        return begin_setLongList(ll, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setLongList(const ::com::jd::LongList& ll, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLongList(ll, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setLongList(const ::com::jd::LongList& ll, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLongList(ll, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setLongList(const ::com::jd::LongList& ll, const ::com::jd::Callback_CommontIceRpcService_setLongListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLongList(ll, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setLongList(const ::com::jd::LongList& ll, const ::Ice::Context& __ctx, const ::com::jd::Callback_CommontIceRpcService_setLongListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setLongList(ll, &__ctx, __del, __cookie);
    }

    ::com::jd::LongList end_setLongList(const ::Ice::AsyncResultPtr&);
    
private:

    ::com::jd::LongList setLongList(const ::com::jd::LongList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setLongList(const ::com::jd::LongList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int getOtherCommentById()
    {
        return getOtherCommentById(0);
    }
    ::Ice::Int getOtherCommentById(const ::Ice::Context& __ctx)
    {
        return getOtherCommentById(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getOtherCommentById()
    {
        return begin_getOtherCommentById(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOtherCommentById(const ::Ice::Context& __ctx)
    {
        return begin_getOtherCommentById(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOtherCommentById(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOtherCommentById(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOtherCommentById(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOtherCommentById(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOtherCommentById(const ::com::jd::Callback_CommontIceRpcService_getOtherCommentByIdPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOtherCommentById(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOtherCommentById(const ::Ice::Context& __ctx, const ::com::jd::Callback_CommontIceRpcService_getOtherCommentByIdPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOtherCommentById(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getOtherCommentById(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getOtherCommentById(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getOtherCommentById(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<CommontIceRpcService> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CommontIceRpcService*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<CommontIceRpcService*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CommontIceRpcService> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CommontIceRpcService*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<CommontIceRpcService*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CommontIceRpcService> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CommontIceRpcService*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<CommontIceRpcService*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CommontIceRpcService> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CommontIceRpcService*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<CommontIceRpcService*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CommontIceRpcService> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CommontIceRpcService*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<CommontIceRpcService*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CommontIceRpcService> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CommontIceRpcService*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<CommontIceRpcService*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CommontIceRpcService> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CommontIceRpcService*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<CommontIceRpcService*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CommontIceRpcService> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CommontIceRpcService*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<CommontIceRpcService*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CommontIceRpcService> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CommontIceRpcService*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<CommontIceRpcService*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CommontIceRpcService> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CommontIceRpcService*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<CommontIceRpcService*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CommontIceRpcService> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CommontIceRpcService*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<CommontIceRpcService*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CommontIceRpcService> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CommontIceRpcService*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<CommontIceRpcService*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CommontIceRpcService> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CommontIceRpcService*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<CommontIceRpcService*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CommontIceRpcService> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CommontIceRpcService*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<CommontIceRpcService*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CommontIceRpcService> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CommontIceRpcService*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<CommontIceRpcService*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CommontIceRpcService> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CommontIceRpcService*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<CommontIceRpcService*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CommontIceRpcService> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CommontIceRpcService*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<CommontIceRpcService*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CommontIceRpcService> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CommontIceRpcService*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<CommontIceRpcService*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CommontIceRpcService> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CommontIceRpcService*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<CommontIceRpcService*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace com
{

namespace jd
{

class A : virtual public ::IceDelegate::Ice::Object
{
public:
};

class B : virtual public ::IceDelegate::Ice::Object
{
public:
};

class ClassDemo : virtual public ::IceDelegate::Ice::Object
{
public:
};

class CommontIceRpcService : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::com::jd::ClassDemoPtr getClassDemo(const ::Ice::Context*) = 0;

    virtual ::com::jd::ClassDemoPtr newClassDemo(const ::com::jd::ClassDemoPtr&, const ::Ice::Context*) = 0;

    virtual ::com::jd::ClassDemoS getClassDemoS(const ::Ice::Context*) = 0;

    virtual void setClassDemos(const ::com::jd::ClassDemoS&, const ::Ice::Context*) = 0;

    virtual ::com::jd::LongList getLongList(const ::Ice::Context*) = 0;

    virtual ::com::jd::LongList setLongList(const ::com::jd::LongList&, const ::Ice::Context*) = 0;

    virtual ::Ice::Int getOtherCommentById(const ::Ice::Context*) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace com
{

namespace jd
{

class A : virtual public ::IceDelegate::com::jd::A,
          virtual public ::IceDelegateM::Ice::Object
{
public:
};

class B : virtual public ::IceDelegate::com::jd::B,
          virtual public ::IceDelegateM::Ice::Object
{
public:
};

class ClassDemo : virtual public ::IceDelegate::com::jd::ClassDemo,
                  virtual public ::IceDelegateM::Ice::Object
{
public:
};

class CommontIceRpcService : virtual public ::IceDelegate::com::jd::CommontIceRpcService,
                             virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::com::jd::ClassDemoPtr getClassDemo(const ::Ice::Context*);

    virtual ::com::jd::ClassDemoPtr newClassDemo(const ::com::jd::ClassDemoPtr&, const ::Ice::Context*);

    virtual ::com::jd::ClassDemoS getClassDemoS(const ::Ice::Context*);

    virtual void setClassDemos(const ::com::jd::ClassDemoS&, const ::Ice::Context*);

    virtual ::com::jd::LongList getLongList(const ::Ice::Context*);

    virtual ::com::jd::LongList setLongList(const ::com::jd::LongList&, const ::Ice::Context*);

    virtual ::Ice::Int getOtherCommentById(const ::Ice::Context*);
};

}

}

}

namespace IceDelegateD
{

namespace com
{

namespace jd
{

class A : virtual public ::IceDelegate::com::jd::A,
          virtual public ::IceDelegateD::Ice::Object
{
public:
};

class B : virtual public ::IceDelegate::com::jd::B,
          virtual public ::IceDelegateD::Ice::Object
{
public:
};

class ClassDemo : virtual public ::IceDelegate::com::jd::ClassDemo,
                  virtual public ::IceDelegateD::Ice::Object
{
public:
};

class CommontIceRpcService : virtual public ::IceDelegate::com::jd::CommontIceRpcService,
                             virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::com::jd::ClassDemoPtr getClassDemo(const ::Ice::Context*);

    virtual ::com::jd::ClassDemoPtr newClassDemo(const ::com::jd::ClassDemoPtr&, const ::Ice::Context*);

    virtual ::com::jd::ClassDemoS getClassDemoS(const ::Ice::Context*);

    virtual void setClassDemos(const ::com::jd::ClassDemoS&, const ::Ice::Context*);

    virtual ::com::jd::LongList getLongList(const ::Ice::Context*);

    virtual ::com::jd::LongList setLongList(const ::com::jd::LongList&, const ::Ice::Context*);

    virtual ::Ice::Int getOtherCommentById(const ::Ice::Context*);
};

}

}

}

namespace com
{

namespace jd
{

class A : virtual public ::Ice::Object
{
public:

    typedef APrx ProxyType;
    typedef APtr PointerType;
    
    A() {}
    A(const ::std::string&, ::Ice::Int);
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:

    virtual ~A() {}

    friend class A__staticInit;

public:

    ::std::string id;

    ::Ice::Int num;
};

class A__staticInit
{
public:

    ::com::jd::A _init;
};

static A__staticInit _A_init;

inline bool operator==(const A& l, const A& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const A& l, const A& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class B : virtual public ::Ice::Object
{
public:

    typedef BPrx ProxyType;
    typedef BPtr PointerType;
    
    B() {}
    B(const ::std::string&, const ::std::string&);
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:

    virtual ~B() {}

public:

    ::std::string id;

    ::std::string name;
};

inline bool operator==(const B& l, const B& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const B& l, const B& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ClassDemo : virtual public ::Ice::Object, private IceInternal::GCShared
{
public:

    typedef ClassDemoPrx ProxyType;
    typedef ClassDemoPtr PointerType;
    
    ClassDemo() {}
    ClassDemo(const ::std::string&, ::Ice::Int, const ::com::jd::APtr&, const ::com::jd::BPtr&);
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesClasses();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:

    virtual ~ClassDemo() {}

public:

    ::std::string id;

    ::Ice::Int idlen;

    ::com::jd::APtr classA;

    ::com::jd::BPtr classB;
};

inline bool operator==(const ClassDemo& l, const ClassDemo& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ClassDemo& l, const ClassDemo& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class CommontIceRpcService : virtual public ::Ice::Object
{
public:

    typedef CommontIceRpcServicePrx ProxyType;
    typedef CommontIceRpcServicePtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::com::jd::ClassDemoPtr getClassDemo(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getClassDemo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::com::jd::ClassDemoPtr newClassDemo(const ::com::jd::ClassDemoPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___newClassDemo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::com::jd::ClassDemoS getClassDemoS(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getClassDemoS(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setClassDemos(const ::com::jd::ClassDemoS&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setClassDemos(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::com::jd::LongList getLongList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getLongList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::com::jd::LongList setLongList(const ::com::jd::LongList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setLongList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int getOtherCommentById(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getOtherCommentById(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const CommontIceRpcService& l, const CommontIceRpcService& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const CommontIceRpcService& l, const CommontIceRpcService& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
#else
namespace Ice
{
template<>
struct StreamTrait< ::com::jd::RpcException>
{
    static const ::Ice::StreamTraitType type = ::Ice::StreamTraitTypeUserException;
};

}
#endif

namespace com
{

namespace jd
{

template<class T>
class CallbackNC_CommontIceRpcService_getClassDemo : public Callback_CommontIceRpcService_getClassDemo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::com::jd::ClassDemoPtr&);

    CallbackNC_CommontIceRpcService_getClassDemo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::com::jd::CommontIceRpcServicePrx __proxy = ::com::jd::CommontIceRpcServicePrx::uncheckedCast(__result->getProxy());
        ::com::jd::ClassDemoPtr __ret;
        try
        {
            __ret = __proxy->end_getClassDemo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_CommontIceRpcService_getClassDemoPtr
newCallback_CommontIceRpcService_getClassDemo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::com::jd::ClassDemoPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommontIceRpcService_getClassDemo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommontIceRpcService_getClassDemoPtr
newCallback_CommontIceRpcService_getClassDemo(T* instance, void (T::*cb)(const ::com::jd::ClassDemoPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommontIceRpcService_getClassDemo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommontIceRpcService_getClassDemo : public Callback_CommontIceRpcService_getClassDemo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::com::jd::ClassDemoPtr&, const CT&);

    Callback_CommontIceRpcService_getClassDemo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::com::jd::CommontIceRpcServicePrx __proxy = ::com::jd::CommontIceRpcServicePrx::uncheckedCast(__result->getProxy());
        ::com::jd::ClassDemoPtr __ret;
        try
        {
            __ret = __proxy->end_getClassDemo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CommontIceRpcService_getClassDemoPtr
newCallback_CommontIceRpcService_getClassDemo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::com::jd::ClassDemoPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommontIceRpcService_getClassDemo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommontIceRpcService_getClassDemoPtr
newCallback_CommontIceRpcService_getClassDemo(T* instance, void (T::*cb)(const ::com::jd::ClassDemoPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommontIceRpcService_getClassDemo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CommontIceRpcService_newClassDemo : public Callback_CommontIceRpcService_newClassDemo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::com::jd::ClassDemoPtr&);

    CallbackNC_CommontIceRpcService_newClassDemo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::com::jd::CommontIceRpcServicePrx __proxy = ::com::jd::CommontIceRpcServicePrx::uncheckedCast(__result->getProxy());
        ::com::jd::ClassDemoPtr __ret;
        try
        {
            __ret = __proxy->end_newClassDemo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_CommontIceRpcService_newClassDemoPtr
newCallback_CommontIceRpcService_newClassDemo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::com::jd::ClassDemoPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommontIceRpcService_newClassDemo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommontIceRpcService_newClassDemoPtr
newCallback_CommontIceRpcService_newClassDemo(T* instance, void (T::*cb)(const ::com::jd::ClassDemoPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommontIceRpcService_newClassDemo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommontIceRpcService_newClassDemo : public Callback_CommontIceRpcService_newClassDemo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::com::jd::ClassDemoPtr&, const CT&);

    Callback_CommontIceRpcService_newClassDemo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::com::jd::CommontIceRpcServicePrx __proxy = ::com::jd::CommontIceRpcServicePrx::uncheckedCast(__result->getProxy());
        ::com::jd::ClassDemoPtr __ret;
        try
        {
            __ret = __proxy->end_newClassDemo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CommontIceRpcService_newClassDemoPtr
newCallback_CommontIceRpcService_newClassDemo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::com::jd::ClassDemoPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommontIceRpcService_newClassDemo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommontIceRpcService_newClassDemoPtr
newCallback_CommontIceRpcService_newClassDemo(T* instance, void (T::*cb)(const ::com::jd::ClassDemoPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommontIceRpcService_newClassDemo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CommontIceRpcService_getClassDemoS : public Callback_CommontIceRpcService_getClassDemoS_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::com::jd::ClassDemoS&);

    CallbackNC_CommontIceRpcService_getClassDemoS(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::com::jd::CommontIceRpcServicePrx __proxy = ::com::jd::CommontIceRpcServicePrx::uncheckedCast(__result->getProxy());
        ::com::jd::ClassDemoS __ret;
        try
        {
            __ret = __proxy->end_getClassDemoS(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_CommontIceRpcService_getClassDemoSPtr
newCallback_CommontIceRpcService_getClassDemoS(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::com::jd::ClassDemoS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommontIceRpcService_getClassDemoS<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommontIceRpcService_getClassDemoSPtr
newCallback_CommontIceRpcService_getClassDemoS(T* instance, void (T::*cb)(const ::com::jd::ClassDemoS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommontIceRpcService_getClassDemoS<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommontIceRpcService_getClassDemoS : public Callback_CommontIceRpcService_getClassDemoS_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::com::jd::ClassDemoS&, const CT&);

    Callback_CommontIceRpcService_getClassDemoS(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::com::jd::CommontIceRpcServicePrx __proxy = ::com::jd::CommontIceRpcServicePrx::uncheckedCast(__result->getProxy());
        ::com::jd::ClassDemoS __ret;
        try
        {
            __ret = __proxy->end_getClassDemoS(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CommontIceRpcService_getClassDemoSPtr
newCallback_CommontIceRpcService_getClassDemoS(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::com::jd::ClassDemoS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommontIceRpcService_getClassDemoS<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommontIceRpcService_getClassDemoSPtr
newCallback_CommontIceRpcService_getClassDemoS(T* instance, void (T::*cb)(const ::com::jd::ClassDemoS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommontIceRpcService_getClassDemoS<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CommontIceRpcService_setClassDemos : public Callback_CommontIceRpcService_setClassDemos_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommontIceRpcService_setClassDemos(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_CommontIceRpcService_setClassDemosPtr
newCallback_CommontIceRpcService_setClassDemos(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommontIceRpcService_setClassDemos<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommontIceRpcService_setClassDemosPtr
newCallback_CommontIceRpcService_setClassDemos(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommontIceRpcService_setClassDemos<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CommontIceRpcService_setClassDemosPtr
newCallback_CommontIceRpcService_setClassDemos(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommontIceRpcService_setClassDemos<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommontIceRpcService_setClassDemosPtr
newCallback_CommontIceRpcService_setClassDemos(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommontIceRpcService_setClassDemos<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommontIceRpcService_setClassDemos : public Callback_CommontIceRpcService_setClassDemos_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommontIceRpcService_setClassDemos(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_CommontIceRpcService_setClassDemosPtr
newCallback_CommontIceRpcService_setClassDemos(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommontIceRpcService_setClassDemos<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommontIceRpcService_setClassDemosPtr
newCallback_CommontIceRpcService_setClassDemos(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommontIceRpcService_setClassDemos<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CommontIceRpcService_setClassDemosPtr
newCallback_CommontIceRpcService_setClassDemos(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommontIceRpcService_setClassDemos<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommontIceRpcService_setClassDemosPtr
newCallback_CommontIceRpcService_setClassDemos(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommontIceRpcService_setClassDemos<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CommontIceRpcService_getLongList : public Callback_CommontIceRpcService_getLongList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::com::jd::LongList&);

    CallbackNC_CommontIceRpcService_getLongList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::com::jd::CommontIceRpcServicePrx __proxy = ::com::jd::CommontIceRpcServicePrx::uncheckedCast(__result->getProxy());
        ::com::jd::LongList __ret;
        try
        {
            __ret = __proxy->end_getLongList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_CommontIceRpcService_getLongListPtr
newCallback_CommontIceRpcService_getLongList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::com::jd::LongList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommontIceRpcService_getLongList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommontIceRpcService_getLongListPtr
newCallback_CommontIceRpcService_getLongList(T* instance, void (T::*cb)(const ::com::jd::LongList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommontIceRpcService_getLongList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommontIceRpcService_getLongList : public Callback_CommontIceRpcService_getLongList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::com::jd::LongList&, const CT&);

    Callback_CommontIceRpcService_getLongList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::com::jd::CommontIceRpcServicePrx __proxy = ::com::jd::CommontIceRpcServicePrx::uncheckedCast(__result->getProxy());
        ::com::jd::LongList __ret;
        try
        {
            __ret = __proxy->end_getLongList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CommontIceRpcService_getLongListPtr
newCallback_CommontIceRpcService_getLongList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::com::jd::LongList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommontIceRpcService_getLongList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommontIceRpcService_getLongListPtr
newCallback_CommontIceRpcService_getLongList(T* instance, void (T::*cb)(const ::com::jd::LongList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommontIceRpcService_getLongList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CommontIceRpcService_setLongList : public Callback_CommontIceRpcService_setLongList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::com::jd::LongList&);

    CallbackNC_CommontIceRpcService_setLongList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::com::jd::CommontIceRpcServicePrx __proxy = ::com::jd::CommontIceRpcServicePrx::uncheckedCast(__result->getProxy());
        ::com::jd::LongList __ret;
        try
        {
            __ret = __proxy->end_setLongList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_CommontIceRpcService_setLongListPtr
newCallback_CommontIceRpcService_setLongList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::com::jd::LongList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommontIceRpcService_setLongList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommontIceRpcService_setLongListPtr
newCallback_CommontIceRpcService_setLongList(T* instance, void (T::*cb)(const ::com::jd::LongList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommontIceRpcService_setLongList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommontIceRpcService_setLongList : public Callback_CommontIceRpcService_setLongList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::com::jd::LongList&, const CT&);

    Callback_CommontIceRpcService_setLongList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::com::jd::CommontIceRpcServicePrx __proxy = ::com::jd::CommontIceRpcServicePrx::uncheckedCast(__result->getProxy());
        ::com::jd::LongList __ret;
        try
        {
            __ret = __proxy->end_setLongList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CommontIceRpcService_setLongListPtr
newCallback_CommontIceRpcService_setLongList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::com::jd::LongList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommontIceRpcService_setLongList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommontIceRpcService_setLongListPtr
newCallback_CommontIceRpcService_setLongList(T* instance, void (T::*cb)(const ::com::jd::LongList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommontIceRpcService_setLongList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CommontIceRpcService_getOtherCommentById : public Callback_CommontIceRpcService_getOtherCommentById_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_CommontIceRpcService_getOtherCommentById(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::com::jd::CommontIceRpcServicePrx __proxy = ::com::jd::CommontIceRpcServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getOtherCommentById(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_CommontIceRpcService_getOtherCommentByIdPtr
newCallback_CommontIceRpcService_getOtherCommentById(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommontIceRpcService_getOtherCommentById<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommontIceRpcService_getOtherCommentByIdPtr
newCallback_CommontIceRpcService_getOtherCommentById(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommontIceRpcService_getOtherCommentById<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommontIceRpcService_getOtherCommentById : public Callback_CommontIceRpcService_getOtherCommentById_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_CommontIceRpcService_getOtherCommentById(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::com::jd::CommontIceRpcServicePrx __proxy = ::com::jd::CommontIceRpcServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getOtherCommentById(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CommontIceRpcService_getOtherCommentByIdPtr
newCallback_CommontIceRpcService_getOtherCommentById(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommontIceRpcService_getOtherCommentById<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommontIceRpcService_getOtherCommentByIdPtr
newCallback_CommontIceRpcService_getOtherCommentById(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommontIceRpcService_getOtherCommentById<T, CT>(instance, cb, excb, sentcb);
}

}

}

#endif
