<?php
// Copyright 2004-present Facebook. All Rights Reserved.
// This file is @generated by
// fbcode/hphp/facebook/tools/code_model/Generate.sh

namespace HH\CodeModel {

/**
 *  (class|self|parent|static)::constantName
 */
class ClassConstantExpression /*implements IClassConstantExpression*/ {
  use Expression;
  use TypedNode;
  use Node;

  private /*?ITypeExpression*/ $class;
  private /*?string*/ $constantName;

  /**
   *  (class|self|parent|static)::constantName
   */
  public function getClass() /*: ITypeExpression*/ {
    if ($this->class === null) {
      throw new \Exception("Class is not initialized");
    }
    return $this->class;
  }
  /**
   *  (class|self|parent|static)::constantName
   */
  public function setClass(/*ITypeExpression*/ $value) /*: this*/ {
    $this->class = $value;
    return $this;
  }

  /**
   *  (class|self|parent|static)::constantName
   */
  public function getConstantName() /*: string*/ {
    if ($this->constantName === null) {
      throw new \Exception("ConstantName is not initialized");
    }
    return $this->constantName;
  }
  /**
   *  (class|self|parent|static)::constantName
   */
  public function setConstantName(/*string*/ $value) /*: this*/ {
    $this->constantName = $value;
    return $this;
  }

  /**
   * Returns $visitor->visitClassConstantExpression($this) if
   * such a method exists on $visitor.
   * Otherwise returns $visitor->visitExpression($this) if
   * such a method exists on $visitor.
   * Otherwise returns $visitor->visitNode($this) if
   */
  public function accept(/*mixed*/ $visitor) /*: mixed*/ {
    if (method_exists($visitor, "visitClassConstantExpression")) {
      // UNSAFE
      return $visitor->visitClassConstantExpression($this);
    } else if (method_exists($visitor, "visitExpression")) {
      // UNSAFE
      return $visitor->visitExpression($this);
    } else {
      return $visitor->visitNode($this);
    }
  }

  /**
   * Yields a list of nodes that are children of this node.
   * A node has exactly one parent, so doing a depth
   * first traversal of a node graph using getChildren will
   * traverse a spanning tree.
   */
  public function getChildren() /*: Continuation<INode>*/ {
    if ($this->class !== null) {
      yield $this->class;
    }
  }
}
}
