/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/use_op_encode/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>

namespace apache::thrift {
namespace ident {
struct def_field;
struct opt_field;
struct req_field;
struct terse_field;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_def_field
#define APACHE_THRIFT_ACCESSOR_def_field
APACHE_THRIFT_DEFINE_ACCESSOR(def_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_field
#define APACHE_THRIFT_ACCESSOR_opt_field
APACHE_THRIFT_DEFINE_ACCESSOR(opt_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_req_field
#define APACHE_THRIFT_ACCESSOR_req_field
APACHE_THRIFT_DEFINE_ACCESSOR(req_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_terse_field
#define APACHE_THRIFT_ACCESSOR_terse_field
APACHE_THRIFT_DEFINE_ACCESSOR(terse_field);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
// END declare_enums
// BEGIN forward_declare
namespace facebook::thrift::compiler::test {
class MyStruct;
} // namespace facebook::thrift::compiler::test
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace facebook::thrift::compiler::test {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;


/** Glean {"file": "thrift/compiler/test/fixtures/use_op_encode/src/module.thrift", "name": "MyStruct", "kind": "struct" } */
class MyStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 4;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::def_field,
    ::apache::thrift::ident::opt_field,
    ::apache::thrift::ident::req_field,
    ::apache::thrift::ident::terse_field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    true;


 public:

  MyStruct() :
      __fbthrift_field_def_field(),
      __fbthrift_field_opt_field(),
      __fbthrift_field_req_field(),
      __fbthrift_field_terse_field() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStruct(apache::thrift::FragileConstructor, ::std::int32_t def_field__arg, ::std::int32_t opt_field__arg, ::std::int32_t req_field__arg, ::std::int32_t terse_field__arg);

  MyStruct(MyStruct&&) = default;

  MyStruct(const MyStruct&) = default;


  MyStruct& operator=(MyStruct&&) = default;

  MyStruct& operator=(const MyStruct&) = default;
 private:
  ::std::int32_t __fbthrift_field_def_field;
 private:
  ::std::int32_t __fbthrift_field_opt_field;
 private:
  ::std::int32_t __fbthrift_field_req_field;
 private:
  ::std::int32_t __fbthrift_field_terse_field;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStruct&) const;
  bool operator<(const MyStruct&) const;

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> def_field_ref() const& {
    return {this->__fbthrift_field_def_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> def_field_ref() & {
    return {this->__fbthrift_field_def_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> def_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_def_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> def_field() const& {
    return {this->__fbthrift_field_def_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> def_field() & {
    return {this->__fbthrift_field_def_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "def_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> def_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_def_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> opt_field_ref() const& {
    return {this->__fbthrift_field_opt_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> opt_field_ref() & {
    return {this->__fbthrift_field_opt_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> opt_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_opt_field), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> opt_field() const& {
    return {this->__fbthrift_field_opt_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> opt_field() & {
    return {this->__fbthrift_field_opt_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "opt_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> opt_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_opt_field), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> req_field_ref() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_req_field};
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> req_field_ref() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_req_field};
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> req_field_ref() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_req_field)};
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> req_field() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_req_field};
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> req_field() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_req_field};
  }

  /** Glean { "field": "req_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> req_field() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_req_field)};
  }

  /** Glean { "field": "terse_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> terse_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_terse_field};
  }

  /** Glean { "field": "terse_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> terse_field_ref() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_terse_field};
  }

  /** Glean { "field": "terse_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> terse_field_ref() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_terse_field)};
  }

  /** Glean { "field": "terse_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const fbthrift_T&> terse_field() const& {
    return ::apache::thrift::terse_field_ref<const fbthrift_T&>{this->__fbthrift_field_terse_field};
  }

  /** Glean { "field": "terse_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&> terse_field() & {
    return ::apache::thrift::terse_field_ref<fbthrift_T&>{this->__fbthrift_field_terse_field};
  }

  /** Glean { "field": "terse_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<fbthrift_T&&> terse_field() && {
    return ::apache::thrift::terse_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_terse_field)};
  }

  /** Glean { "field": "def_field" } */
  [[deprecated("Use `FOO.def_field().value()` instead of `FOO.get_def_field()`")]]
  ::std::int32_t get_def_field() const;

  /** Glean { "field": "def_field" } */
  [[deprecated("Use `FOO.def_field() = BAR` instead of `FOO.set_def_field(BAR)`")]]
  ::std::int32_t& set_def_field(::std::int32_t def_field_);

  /** Glean { "field": "opt_field" } */
  [[deprecated("Use `FOO.opt_field().value()` instead of `FOO.get_opt_field()`")]]
  const ::std::int32_t* get_opt_field() const&;

  /** Glean { "field": "opt_field" } */
  [[deprecated("Use `FOO.opt_field().value()` instead of `FOO.get_opt_field()`")]]
  ::std::int32_t* get_opt_field() &;

  ::std::int32_t* get_opt_field() && = delete;

  /** Glean { "field": "opt_field" } */
  [[deprecated("Use `FOO.opt_field() = BAR` instead of `FOO.set_opt_field(BAR)`")]]
  ::std::int32_t& set_opt_field(::std::int32_t opt_field_);

  /** Glean { "field": "req_field" } */
  [[deprecated("Use `FOO.req_field().value()` instead of `FOO.get_req_field()`")]]
  ::std::int32_t get_req_field() const;

  /** Glean { "field": "req_field" } */
  [[deprecated("Use `FOO.req_field() = BAR` instead of `FOO.set_req_field(BAR)`")]]
  ::std::int32_t& set_req_field(::std::int32_t req_field_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStruct>;
  friend void swap(MyStruct& a, MyStruct& b);
};

template <class Protocol_>
unsigned long MyStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace facebook::thrift::compiler::test

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::facebook::thrift::compiler::test::MyStruct, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 2162972314762179418;
  static constexpr ::std::string_view definitionKey = {"\x88\x7d\xb7\xa6\x28\x05\xc5\x37\x1f\x55\x22\xb6\x1e\x96\x08\x2f", 16};
};
} // namespace apache::thrift::detail
