// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"curl_init", T(Variant), S(0), "url", T(String), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.curl-init.php )\n *\n * Initializes a new session and return a cURL handle for use with the\n * curl_setopt(), curl_exec(), and curl_close() functions.\n *\n * @url        string  If provided, the CURLOPT_URL option will be set to\n *                     its value. You can manually set this using the\n *                     curl_setopt() function.\n *\n * @return     mixed   Returns a cURL handle on success, FALSE on errors.\n */", 
"curl_copy_handle", T(Variant), S(0), "ch", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.curl-copy-handle.php )\n *\n * Copies a cURL handle keeping the same preferences.\n *\n * @ch         resource\n *                     A cURL handle returned by curl_init().\n *\n * @return     mixed   Returns a new cURL handle.\n */", 
"curl_version", T(Variant), S(0), "uversion", T(Int32), "i:2;", "CURLVERSION_NOW", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.curl-version.php )\n *\n * Returns information about the cURL version.\n *\n * @uversion   int\n *\n * @return     mixed   Returns an associative array with the following\n *                     elements: Indice Value description version_number\n *                     cURL 24 bit version number version cURL version\n *                     number, as a string ssl_version_number OpenSSL 24\n *                     bit version number ssl_version OpenSSL version\n *                     number, as a string libz_version zlib version\n *                     number, as a string host Information about the host\n *                     where cURL was built age \240 features A bitmask of the\n *                     CURL_VERSION_XXX constants protocols An array of\n *                     protocols names supported by cURL\n */", 
"curl_setopt", T(Boolean), S(0), "ch", T(Object), NULL, NULL, S(0), "option", T(Int32), NULL, NULL, S(0), "value", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.curl-setopt.php )\n *\n * Sets an option on the given cURL session handle.\n *\n * @ch         resource\n *\n * @option     int\n * @value      mixed\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"curl_setopt_array", T(Boolean), S(0), "ch", T(Object), NULL, NULL, S(0), "options", T(Array), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.curl-setopt-array.php )\n *\n * Sets multiple options for a cURL session. This function is useful for\n * setting a large amount of cURL options without repetitively calling\n * curl_setopt().\n *\n * @ch         resource\n *                     A cURL handle returned by curl_init().\n * @options    vector  An array specifying which options to set and their\n *                     values. The keys should be valid curl_setopt()\n *                     constants or their integer equivalents.\n *\n * @return     bool    Returns TRUE if all options were successfully set.\n *                     If an option could not be successfully set, FALSE is\n *                     immediately returned, ignoring any future options in\n *                     the options array.\n */", 
"fb_curl_getopt", T(Variant), S(0), "ch", T(Object), NULL, NULL, S(0), "opt", T(Int32), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.fb-curl-getopt.php )\n *\n * Gets options on the given cURL session handle.\n *\n * @ch         resource\n *                     A cURL handle returned by curl_init().\n * @opt        int     This should be one of the CURLOPT_* values.\n *\n * @return     mixed   If opt is given, returns its value. Otherwise,\n *                     returns an associative array.\n */", 
"curl_exec", T(Variant), S(0), "ch", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.curl-exec.php )\n *\n * Execute the given cURL session.\n *\n * This function should be called after initializing a cURL session and\n * all the options for the session are set.\n *\n * @ch         resource\n *                     A cURL handle returned by curl_init().\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n *                     However, if the CURLOPT_RETURNTRANSFER option is\n *                     set, it will return the result on success, FALSE on\n *                     failure.\n */", 
"curl_getinfo", T(Variant), S(0), "ch", T(Object), NULL, NULL, S(0), "opt", T(Int32), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.curl-getinfo.php )\n *\n * Gets information about the last transfer.\n *\n * @ch         resource\n *                     A cURL handle returned by curl_init().\n * @opt        int     This may be one of the following constants:\n *                     CURLINFO_EFFECTIVE_URL - Last effective URL\n *                     CURLINFO_HTTP_CODE - Last received HTTP code\n *                     CURLINFO_FILETIME - Remote time of the retrieved\n *                     document, if -1 is returned the time of the document\n *                     is unknown CURLINFO_TOTAL_TIME - Total transaction\n *                     time in seconds for last transfer\n *                     CURLINFO_NAMELOOKUP_TIME - Time in seconds until\n *                     name resolving was complete CURLINFO_CONNECT_TIME -\n *                     Time in seconds it took to establish the connection\n *                     CURLINFO_PRETRANSFER_TIME - Time in seconds from\n *                     start until just before file transfer begins\n *                     CURLINFO_STARTTRANSFER_TIME - Time in seconds until\n *                     the first byte is about to be transferred\n *                     CURLINFO_REDIRECT_TIME - Time in seconds of all\n *                     redirection steps before final transaction was\n *                     started CURLINFO_SIZE_UPLOAD - Total number of bytes\n *                     uploaded CURLINFO_SIZE_DOWNLOAD - Total number of\n *                     bytes downloaded CURLINFO_SPEED_DOWNLOAD - Average\n *                     download speed CURLINFO_SPEED_UPLOAD - Average\n *                     upload speed CURLINFO_HEADER_SIZE - Total size of\n *                     all headers received CURLINFO_HEADER_OUT - The\n *                     request string sent CURLINFO_REQUEST_SIZE - Total\n *                     size of issued requests, currently only for HTTP\n *                     requests CURLINFO_SSL_VERIFYRESULT - Result of SSL\n *                     certification verification requested by setting\n *                     CURLOPT_SSL_VERIFYPEER\n *                     CURLINFO_CONTENT_LENGTH_DOWNLOAD - content-length of\n *                     download, read from Content-Length: field\n *                     CURLINFO_CONTENT_LENGTH_UPLOAD - Specified size of\n *                     upload CURLINFO_CONTENT_TYPE - Content-Type: of\n *                     downloaded object, NULL indicates server did not\n *                     send valid Content-Type: header\n *\n * @return     mixed   If opt is given, returns its value as a string.\n *                     Otherwise, returns an associative array with the\n *                     following elements (which correspond to opt): \"url\"\n *                     \"content_type\" \"http_code\" \"header_size\"\n *                     \"request_size\" \"filetime\" \"ssl_verify_result\"\n *                     \"redirect_count\" \"total_time\" \"namelookup_time\"\n *                     \"connect_time\" \"pretransfer_time\" \"size_upload\"\n *                     \"size_download\" \"speed_download\" \"speed_upload\"\n *                     \"download_content_length\" \"upload_content_length\"\n *                     \"starttransfer_time\" \"redirect_time\"\n */", 
"curl_errno", T(Variant), S(0), "ch", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.curl-errno.php )\n *\n * Returns the error number for the last cURL operation.\n *\n * @ch         resource\n *                     A cURL handle returned by curl_init().\n *\n * @return     mixed   Returns the error number or 0 (zero) if no error\n *                     occurred.\n */", 
"curl_error", T(Variant), S(0), "ch", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.curl-error.php )\n *\n * Returns a clear text error message for the last cURL operation.\n *\n * @ch         resource\n *                     A cURL handle returned by curl_init().\n *\n * @return     mixed   Returns the error message or '' (the empty string)\n *                     if no error occurred.\n */", 
"curl_close", T(Variant), S(0), "ch", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.curl-close.php )\n *\n * Closes a cURL session and frees all resources. The cURL handle, ch, is\n * also deleted.\n *\n * @ch         resource\n *                     A cURL handle returned by curl_init().\n *\n * @return     mixed   No value is returned.\n */", 
"curl_multi_init", T(Object), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.curl-multi-init.php )\n *\n * Allows the processing of multiple cURL handles in parallel.\n *\n * @return     resource\n *                     Returns a cURL multi handle resource on success,\n *                     FALSE on failure.\n */", 
"curl_multi_add_handle", T(Variant), S(0), "mh", T(Object), NULL, NULL, S(0), "ch", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.curl-multi-add-handle.php )\n *\n * Adds the ch handle to the multi handle mh\n *\n * @mh         resource\n *                     A cURL multi handle returned by curl_multi_init().\n * @ch         resource\n *                     A cURL handle returned by curl_init().\n *\n * @return     mixed   Returns 0 on success, or one of the CURLM_XXX errors\n *                     code.\n */", 
"curl_multi_remove_handle", T(Variant), S(0), "mh", T(Object), NULL, NULL, S(0), "ch", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.curl-multi-remove-handle.php )\n *\n * Removes a given ch handle from the given mh handle. When the ch handle\n * has been removed, it is again perfectly legal to run curl_exec() on this\n * handle. Removing a handle while being used, will effectively halt all\n * transfers in progress.\n *\n * @mh         resource\n *                     A cURL multi handle returned by curl_multi_init().\n * @ch         resource\n *                     A cURL handle returned by curl_init().\n *\n * @return     mixed   On success, returns a cURL handle, FALSE on failure.\n */", 
"curl_multi_exec", T(Variant), S(0), "mh", T(Object), NULL, NULL, S(0), "still_running", T(Variant), NULL, NULL, S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.curl-multi-exec.php )\n *\n * Processes each of the handles in the stack. This method can be called\n * whether or not a handle needs to read or write data.\n *\n * @mh         resource\n *                     A cURL multi handle returned by curl_multi_init().\n * @still_running\n *             mixed   A reference to a flag to tell whether the operations\n *                     are still running.\n *\n * @return     mixed   A cURL code defined in the cURL Predefined\n *                     Constants.\n *\n *                     This only returns errors regarding the whole multi\n *                     stack. There might still have occurred problems on\n *                     individual transfers even when this function returns\n *                     CURLM_OK.\n */", 
"curl_multi_getcontent", T(Variant), S(0), "ch", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.curl-multi-getcontent.php )\n *\n * If CURLOPT_RETURNTRANSFER is an option that is set for a specific\n * handle, then this function will return the content of that cURL handle\n * in the form of a string.\n *\n * @ch         resource\n *                     A cURL handle returned by curl_init().\n *\n * @return     mixed   Return the content of a cURL handle if\n *                     CURLOPT_RETURNTRANSFER is set.\n */", 
"curl_multi_info_read", T(Variant), S(0), "mh", T(Object), NULL, NULL, S(0), "msgs_in_queue", T(Variant), "N;", "null", S(1), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.curl-multi-info-read.php )\n *\n * Ask the multi handle if there are any messages or information from the\n * individual transfers. Messages may include information such as an error\n * code from the transfer or just the fact that a transfer is completed.\n *\n * Repeated calls to this function will return a new result each time,\n * until a FALSE is returned as a signal that there is no more to get at\n * this point. The integer pointed to with msgs_in_queue will contain the\n * number of remaining messages after this function was called. Warning\n *\n * The data the returned resource points to will not survive calling\n * curl_multi_remove_handle().\n *\n * @mh         resource\n *                     A cURL multi handle returned by curl_multi_init().\n * @msgs_in_queue\n *             mixed   Number of messages that are still in the queue\n *\n * @return     mixed   On success, returns an associative array for the\n *                     message, FALSE on failure.\n *\n *                     Contents of the returned array Key: Value: msg The\n *                     CURLMSG_DONE constant. Other return values are\n *                     currently not available. result One of the CURLE_*\n *                     constants. If everything is OK, the CURLE_OK will be\n *                     the result. handle Resource of type curl indicates\n *                     the handle which it concerns.\n */", 
"curl_multi_close", T(Variant), S(0), "mh", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.curl-multi-close.php )\n *\n * Closes a set of cURL handles.\n *\n * @mh         resource\n *                     A cURL multi handle returned by curl_multi_init().\n *\n * @return     mixed   No value is returned.\n */", 
"evhttp_set_cache", T(Void), S(0), "address", T(String), NULL, NULL, S(0), "max_conn", T(Int32), NULL, NULL, S(0), "port", T(Int32), "i:80;", "80", S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Specifies how many persistent connections to maintain for an HTTP\n * server.\n *\n * @address    string  Domain name for an HTTP server. Connections to this\n *                     server, regardless of what server objects to fetch\n *                     (specified by a URL), will be cached as persistent\n *                     connections for re-use.\n * @max_conn   int     Maximum number of connections to keep.\n * @port       int     Port number of the HTTP server.\n */", 
"evhttp_get", T(Variant), S(0), "url", T(String), NULL, NULL, S(0), "headers", T(Array), "N;", "null", S(0), "timeout", T(Int32), "i:5;", "5", S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Synchronously HTTP GET a URL with libevent evhttp library.\n *\n * @url        string  The URL to fetch.\n * @headers    vector  HTTP headers.\n * @timeout    int     How many seconds to wait for response.\n *\n * @return     mixed   HTTP response. FALSE if any failure.\n */", 
"evhttp_post", T(Variant), S(0), "url", T(String), NULL, NULL, S(0), "data", T(String), NULL, NULL, S(0), "headers", T(Array), "N;", "null", S(0), "timeout", T(Int32), "i:5;", "5", S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Synchronously HTTP POST a URL with libevent evhttp library.\n *\n * @url        string  The URL to post to.\n * @data       string  POST data.\n * @headers    vector  HTTP headers.\n * @timeout    int     How many seconds to wait for response.\n *\n * @return     mixed   HTTP response. FALSE if any failure.\n */", 
"evhttp_async_get", T(Variant), S(0), "url", T(String), NULL, NULL, S(0), "headers", T(Array), "N;", "null", S(0), "timeout", T(Int32), "i:5;", "5", S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Asynchronously HTTP GET a URL with libevent evhttp library. This is a\n * non-blocking call, without waiting for HTTP server to respond.\n *\n * @url        string  The URL to fetch.\n * @headers    vector  HTTP headers.\n * @timeout    int     How many seconds to wait for response.\n *\n * @return     mixed   An object evhttp_recv() can use to eventually\n *                     retrieve HTTP response. FALSE if there was any\n *                     failure.\n */", 
"evhttp_async_post", T(Variant), S(0), "url", T(String), NULL, NULL, S(0), "data", T(String), NULL, NULL, S(0), "headers", T(Array), "N;", "null", S(0), "timeout", T(Int32), "i:5;", "5", S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Asynchronously HTTP POST a URL with libevent evhttp library. This is a\n * non-blocking call, without waiting for HTTP server to respond.\n *\n * @url        string  The URL to post to.\n * @data       string  POST data.\n * @headers    vector  HTTP headers.\n * @timeout    int     How many seconds to wait for response.\n *\n * @return     mixed   An object evhttp_recv() can use to eventually\n *                     retrieve HTTP response. FALSE if there was any\n *                     failure.\n */", 
"evhttp_recv", T(Variant), S(0), "handle", T(Object), NULL, NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Block and wait until HTTP response is ready.\n *\n * @handle     object  The object created by calling evhttp_async_get() or\n *                     evhttp_async_post().\n *\n * @return     mixed   HTTP response. FALSE if any failure.\n */", 

#elif EXT_TYPE == 1
"CURLINFO_LOCAL_PORT", T(Int64),
"CURLOPT_TIMEOUT_MS", T(Int64),
"CURLOPT_CONNECTTIMEOUT_MS", T(Int64),

#elif EXT_TYPE == 2

#elif EXT_TYPE == 3

#endif
