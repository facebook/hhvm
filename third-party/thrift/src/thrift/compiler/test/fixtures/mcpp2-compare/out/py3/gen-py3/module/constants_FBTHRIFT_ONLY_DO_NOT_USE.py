#
# Autogenerated by Thrift for thrift/compiler/test/fixtures/mcpp2-compare/src/module.thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#
import thrift.py3.types

import module.types
import includes.types

from module.containers_FBTHRIFT_ONLY_DO_NOT_USE import (
    Map__string_i64,
    Map__Empty_MyStruct,
    List__Map__Empty_MyStruct,
    List__List__Map__Empty_MyStruct,
    List__List__List__Map__Empty_MyStruct,
    List__MyEnumA,
    Set__MyStruct,
    List__ComplexUnion,
    List__string,
    Set__List__string,
    Set__List__List__Map__Empty_MyStruct,
    Map__i32_List__string,
    List__bool,
    List__i32,
    List__List__i32,
    List__List__List__i32,
    List__List__List__List__i32,
    Set__List__i32,
    Set__string,
    List__Set__string,
    Map__List__Set__string_string,
    Map__Set__List__i32_Map__List__Set__string_string,
    Set__i32,
    folly_small_vector_int64_t_8__List__i64,
    folly_sorted_vector_set_std_string__Set__string,
    FakeMap__Map__i64_double,
    std_unordered_map_std_string_containerStruct__Map__string_containerStruct,
    Map__i64_string,
    std_list__List__i32,
    std_deque__List__string,
    folly_sorted_vector_set__Set__string,
    folly_sorted_vector_map__Map__i64_string,
    List__binary,
    Map__MyEnumA_string,
    Set__i64,
    Map__string_i32,
    List__SimpleUnion,
    Set__SimpleUnion,
    List__Set__SimpleUnion,
    Map__string_bool,
    Map__string_Map__string_i32,
    Map__string_Map__string_Map__string_i32,
    List__Set__i32,
    Map__string_List__i32,
    Set__bool,
    Set__Set__bool,
    Set__Set__Set__bool,
    Map__string_folly_IOBuf__binary,
    Map__string_std_unique_ptr_folly_IOBuf__binary,
    Map__i32_string,
    List__Map__string_i32,
    Map__i16_string,
    List__Map__i16_string,
    List__MyStruct,
)

aBool = True
aByte = 1
a16BitInt = 12
a32BitInt = 123
a64BitInt = 1234
aFloat = 0.1
aDouble = 0.12
aString = "Joe Doe"
aList = List__bool((True, False, ))
anEmptyMap = Map__string_i32( {  })
aMap = Map__i32_string( { 1: "foo", 2: "bar" })
aSet = Set__string(("foo", "bar", ))
aListOfLists = List__List__i32((List__i32((1, 3, 5, 7, 9, )), List__i32((2, 4, 8, 10, 12, )), ))
states = List__Map__string_i32((Map__string_i32( { "San Diego": 3211000, "Sacramento": 479600, "SF": 837400 }), Map__string_i32( { "New York": 8406000, "Albany": 98400 }), ))
AConstList = List__MyEnumA((module.types.MyEnumA.fieldA, module.types.MyEnumA.fieldB, __BadEnum(module.types.MyEnumA, 3), ))
AnIntegerEnum2 = 2
ListOfIntsFromEnums = List__i32((2, 1, ))
constEnumA = module.types.MyEnumA.fieldB
constEnumB = __BadEnum(module.types.MyEnumA, 3)
