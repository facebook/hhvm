/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.patch;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import com.google.common.collect.*;
import java.util.*;
import javax.annotation.Nullable;
import org.apache.thrift.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;
import static com.google.common.base.MoreObjects.toStringHelper;
import static com.google.common.base.MoreObjects.ToStringHelper;

@SwiftGenerated
@com.facebook.swift.codec.ThriftStruct(value="Recursive", builder=Recursive.Builder.class)
public final class Recursive implements com.facebook.thrift.payload.ThriftSerializable {

    @ThriftConstructor
    public Recursive(
        @com.facebook.swift.codec.ThriftField(value=-1, name="nodes", isLegacyId=true, requiredness=Requiredness.TERSE) final Map<String, test.fixtures.patch.Recursive> nodes
    ) {
        this.nodes = nodes;
    }
    
    @ThriftConstructor
    protected Recursive() {
      this.nodes = com.facebook.thrift.util.IntrinsicDefaults.defaultMap();
    }
    
    public static class Builder {
    
        private Map<String, test.fixtures.patch.Recursive> nodes = com.facebook.thrift.util.IntrinsicDefaults.defaultMap();
    
        @com.facebook.swift.codec.ThriftField(value=-1, name="nodes", isLegacyId=true, requiredness=Requiredness.TERSE)
        public Builder setNodes(Map<String, test.fixtures.patch.Recursive> nodes) {
            this.nodes = nodes;
            return this;
        }
    
        public Map<String, test.fixtures.patch.Recursive> getNodes() { return nodes; }
    
        public Builder() { }
        public Builder(Recursive other) {
            this.nodes = other.nodes;
        }
    
        @ThriftConstructor
        public Recursive build() {
            Recursive result = new Recursive (
                this.nodes
            );
            return result;
        }
    }
        
    public static final Map<String, Integer> NAMES_TO_IDS = new HashMap();
    public static final Map<String, Integer> THRIFT_NAMES_TO_IDS = new HashMap();
    public static final Map<Integer, TField> FIELD_METADATA = new HashMap<>();
    private static final TStruct STRUCT_DESC = new TStruct("Recursive");
    private final Map<String, test.fixtures.patch.Recursive> nodes;
    public static final int _NODES = -1;
    private static final TField NODES_FIELD_DESC = new TField("nodes", TType.MAP, (short)-1);
    static {
      NAMES_TO_IDS.put("nodes", -1);
      THRIFT_NAMES_TO_IDS.put("nodes", -1);
      FIELD_METADATA.put(-1, NODES_FIELD_DESC);
      com.facebook.thrift.type.TypeRegistry.add(new com.facebook.thrift.type.Type(
        new com.facebook.thrift.type.UniversalName("test.dev/fixtures/patch/Recursive"), 
        Recursive.class, Recursive::read0));
    }
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=-1, name="nodes", isLegacyId=true, requiredness=Requiredness.TERSE)
    public Map<String, test.fixtures.patch.Recursive> getNodes() { return nodes; }
    
    @java.lang.Override
    public String toString() {
        ToStringHelper helper = toStringHelper(this);
        helper.add("nodes", nodes);
        return helper.toString();
    }
    
    @java.lang.Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        Recursive other = (Recursive)o;
    
        return
            Objects.equals(nodes, other.nodes) &&
            true;
    }
    
    @java.lang.Override
    public int hashCode() {
        return Arrays.deepHashCode(new java.lang.Object[] {
            nodes
        });
    }
    
    
    public static com.facebook.thrift.payload.Reader<Recursive> asReader() {
      return Recursive::read0;
    }
    
    public static Recursive read0(TProtocol oprot) throws TException {
      TField __field;
      oprot.readStructBegin(Recursive.NAMES_TO_IDS, Recursive.THRIFT_NAMES_TO_IDS, Recursive.FIELD_METADATA);
      Recursive.Builder builder = new Recursive.Builder();
      while (true) {
        __field = oprot.readFieldBegin();
        if (__field.type == TType.STOP) { break; }
        switch (__field.id) {
        case _NODES:
          if (__field.type == TType.MAP) {
            Map<String, test.fixtures.patch.Recursive> nodes;
            {
            TMap _map = oprot.readMapBegin();
            nodes = new HashMap<String, test.fixtures.patch.Recursive>(Math.max(0, _map.size));
            for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {
                
                String _key1 = oprot.readString();
                test.fixtures.patch.Recursive _value1 = test.fixtures.patch.Recursive.read0(oprot);
                nodes.put(_key1, _value1);
            }
            }
            oprot.readMapEnd();
            builder.setNodes(nodes);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(oprot, __field.type);
          break;
        }
        oprot.readFieldEnd();
      }
      oprot.readStructEnd();
      return builder.build();
    }
    
    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      int structStart = 0;
      int pos = 0;
      com.facebook.thrift.protocol.ByteBufTProtocol p = (com.facebook.thrift.protocol.ByteBufTProtocol) oprot;
      java.util.Objects.requireNonNull(nodes, "nodes must not be null");
      
      if (!com.facebook.thrift.util.IntrinsicDefaults.isDefault(nodes)) {
        oprot.writeFieldBegin(NODES_FIELD_DESC);
        Map<String, test.fixtures.patch.Recursive> _iter0 = nodes;
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, _iter0.size()));
        for (Map.Entry<String, test.fixtures.patch.Recursive> _iter1 : _iter0.entrySet()) {
          oprot.writeString(_iter1.getKey());
          _iter1.getValue().write0(oprot);
        }
        oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    private static class _RecursiveLazy {
        private static final Recursive _DEFAULT = new Recursive.Builder().build();
    }
    
    public static Recursive defaultInstance() {
        return  _RecursiveLazy._DEFAULT;
    }
}
