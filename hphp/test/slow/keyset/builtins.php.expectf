apc_add: bool(true)
apc_fetch: keyset(3) {
  int(1)
  int(2)
  int(3)
}
array_change_key_case: array(2) {
  ["foo"]=>
  string(3) "FOO"
  ["bar"]=>
  string(3) "Bar"
}
array_chunk 1: array(2) {
  [0]=>
  array(2) {
    [0]=>
    int(1)
    [1]=>
    int(2)
  }
  [1]=>
  array(1) {
    [0]=>
    int(3)
  }
}
array_chunk 2: array(2) {
  [0]=>
  array(2) {
    [1]=>
    int(1)
    [2]=>
    int(2)
  }
  [1]=>
  array(1) {
    [3]=>
    int(3)
  }
}
array_column 1: array(2) {
  [0]=>
  string(4) "bar1"
  [1]=>
  string(3) "foo"
}
array_column 2: array(2) {
  ["qux1"]=>
  string(4) "bar1"
  ["baz"]=>
  string(3) "foo"
}
---- running with_keyset with
keyset(6) {
  string(1) "q"
  string(1) "u"
  string(1) "e"
  string(1) "n"
  string(1) "t"
  string(1) "i"
}
array_diff_assoc: array(4) {
  ["u"]=>
  string(1) "u"
  ["e"]=>
  string(1) "e"
  ["t"]=>
  string(1) "t"
  ["i"]=>
  string(1) "i"
}
array_diff: array(4) {
  ["u"]=>
  string(1) "u"
  ["e"]=>
  string(1) "e"
  ["t"]=>
  string(1) "t"
  ["i"]=>
  string(1) "i"
}
array_diff_key: array(5) {
  ["u"]=>
  string(1) "u"
  ["e"]=>
  string(1) "e"
  ["n"]=>
  string(1) "n"
  ["t"]=>
  string(1) "t"
  ["i"]=>
  string(1) "i"
}
array_diff_uassoc: array(5) {
  ["u"]=>
  string(1) "u"
  ["e"]=>
  string(1) "e"
  ["n"]=>
  string(1) "n"
  ["t"]=>
  string(1) "t"
  ["i"]=>
  string(1) "i"
}
array_diff_ukey: array(4) {
  ["u"]=>
  string(1) "u"
  ["e"]=>
  string(1) "e"
  ["t"]=>
  string(1) "t"
  ["i"]=>
  string(1) "i"
}
array_udiff: array(4) {
  ["u"]=>
  string(1) "u"
  ["e"]=>
  string(1) "e"
  ["t"]=>
  string(1) "t"
  ["i"]=>
  string(1) "i"
}
array_udiff_assoc: array(5) {
  ["u"]=>
  string(1) "u"
  ["e"]=>
  string(1) "e"
  ["n"]=>
  string(1) "n"
  ["t"]=>
  string(1) "t"
  ["i"]=>
  string(1) "i"
}
array_udiff_uassoc: array(4) {
  ["u"]=>
  string(1) "u"
  ["e"]=>
  string(1) "e"
  ["t"]=>
  string(1) "t"
  ["i"]=>
  string(1) "i"
}
array_combine 1: 
Warning: array_combine(): Both parameters should have an equal number of elements in %s/builtins.php on line %d
bool(false)
array_combine 2: array(6) {
  ["q"]=>
  int(1)
  ["u"]=>
  int(2)
  ["e"]=>
  int(3)
  ["n"]=>
  int(4)
  ["t"]=>
  int(5)
  ["i"]=>
  int(6)
}
array_uintersect_assoc: array(1) {
  ["q"]=>
  string(1) "q"
}
array_uintersect_uassoc: array(2) {
  ["q"]=>
  string(1) "q"
  ["n"]=>
  string(1) "n"
}
array_intersect_assoc: array(2) {
  ["q"]=>
  string(1) "q"
  ["n"]=>
  string(1) "n"
}
array_intersect_key: array(2) {
  ["q"]=>
  string(1) "q"
  ["n"]=>
  string(1) "n"
}
array_intersect_uassoc: array(1) {
  ["q"]=>
  string(1) "q"
}
array_intersect_ukey: array(2) {
  ["q"]=>
  string(1) "q"
  ["n"]=>
  string(1) "n"
}
array_intersect: array(2) {
  ["q"]=>
  string(1) "q"
  ["n"]=>
  string(1) "n"
}
array_uintersect: array(2) {
  ["q"]=>
  string(1) "q"
  ["n"]=>
  string(1) "n"
}
array_filter: array(3) {
  ["u"]=>
  string(1) "u"
  ["e"]=>
  string(1) "e"
  ["i"]=>
  string(1) "i"
}
array_flip: array(6) {
  ["q"]=>
  string(1) "q"
  ["u"]=>
  string(1) "u"
  ["e"]=>
  string(1) "e"
  ["n"]=>
  string(1) "n"
  ["t"]=>
  string(1) "t"
  ["i"]=>
  string(1) "i"
}
array_map: array(3) {
  ["H"]=>
  string(1) "I"
  ["A"]=>
  string(1) "B"
  ["L"]=>
  string(1) "M"
}
array_merge: array(6) {
  [0]=>
  int(1)
  [1]=>
  int(2)
  [2]=>
  int(3)
  ["a"]=>
  string(1) "a"
  ["b"]=>
  string(1) "b"
  ["c"]=>
  string(1) "c"
}
array_reverse: array(6) {
  ["i"]=>
  string(1) "i"
  ["t"]=>
  string(1) "t"
  ["n"]=>
  string(1) "n"
  ["e"]=>
  string(1) "e"
  ["u"]=>
  string(1) "u"
  ["q"]=>
  string(1) "q"
}
array_slice: array(4) {
  ["e"]=>
  string(1) "e"
  ["n"]=>
  string(1) "n"
  ["t"]=>
  string(1) "t"
  ["i"]=>
  string(1) "i"
}
array_key_exists: array(2) {
  [0]=>
  bool(false)
  [1]=>
  bool(true)
}
array_keys: array(6) {
  [0]=>
  string(1) "q"
  [1]=>
  string(1) "u"
  [2]=>
  string(1) "e"
  [3]=>
  string(1) "n"
  [4]=>
  string(1) "t"
  [5]=>
  string(1) "i"
}
array_pop: string(1) "i"
keyset(5) {
  string(1) "q"
  string(1) "u"
  string(1) "e"
  string(1) "n"
  string(1) "t"
}
array_product: float(0)
array_rand: string(1) "i"
array_reduce: string(6) "quenti"
array_search 1: string(1) "n"
array_search 2: bool(false)
array_shift: string(1) "q"
keyset(4) {
  string(1) "u"
  string(1) "e"
  string(1) "n"
  string(1) "t"
}
array_sum: float(0)
current 1: string(1) "u"
each: array(4) {
  [1]=>
  string(1) "u"
  ["value"]=>
  string(1) "u"
  [0]=>
  string(1) "u"
  ["key"]=>
  string(1) "u"
}
current 2: string(1) "e"
end: string(1) "t"
extract: int(1)
string(14) "php_is_awesome"
in_array: array(2) {
  [0]=>
  bool(false)
  [1]=>
  bool(true)
}
key: string(1) "t"
next: bool(false)
prev 1: bool(false)
prev 2: string(1) "n"
reset: string(1) "u"
count: int(6)
array_pad 1: array(7) {
  ["q"]=>
  string(1) "q"
  ["u"]=>
  string(1) "u"
  ["e"]=>
  string(1) "e"
  ["n"]=>
  string(1) "n"
  ["t"]=>
  string(1) "t"
  ["i"]=>
  string(1) "i"
  [0]=>
  string(1) "n"
}
array_pad 2: array(6) {
  ["q"]=>
  string(1) "q"
  ["u"]=>
  string(1) "u"
  ["e"]=>
  string(1) "e"
  ["n"]=>
  string(1) "n"
  ["t"]=>
  string(1) "t"
  ["i"]=>
  string(1) "i"
}
array_replace: array(6) {
  ["q"]=>
  string(1) "r"
  ["u"]=>
  string(1) "u"
  ["e"]=>
  string(1) "e"
  ["n"]=>
  string(1) "n"
  ["t"]=>
  string(1) "t"
  ["i"]=>
  string(1) "i"
}
array_unique 1: array(6) {
  ["q"]=>
  string(1) "q"
  ["u"]=>
  string(1) "u"
  ["e"]=>
  string(1) "e"
  ["n"]=>
  string(1) "n"
  ["t"]=>
  string(1) "t"
  ["i"]=>
  string(1) "i"
}
array_unique 2: array(0) {
}
int(5)
int(6)
keyset(6) {
  string(1) "q"
  string(1) "u"
  string(1) "e"
  string(1) "n"
  string(1) "t"
  string(1) "i"
}
---- running with_keyset with
keyset(0) {
}
array_diff_assoc: array(0) {
}
array_diff: array(0) {
}
array_diff_key: array(0) {
}
array_diff_uassoc: array(0) {
}
array_diff_ukey: array(0) {
}
array_udiff: array(0) {
}
array_udiff_assoc: array(0) {
}
array_udiff_uassoc: array(0) {
}
array_combine 1: 
Warning: array_combine(): Both parameters should have an equal number of elements in %s/builtins.php on line %d
bool(false)
array_combine 2: 
Warning: array_combine(): Both parameters should have an equal number of elements in %s/builtins.php on line %d
bool(false)
array_uintersect_assoc: array(0) {
}
array_uintersect_uassoc: array(0) {
}
array_intersect_assoc: array(0) {
}
array_intersect_key: array(0) {
}
array_intersect_uassoc: array(0) {
}
array_intersect_ukey: array(0) {
}
array_intersect: array(0) {
}
array_uintersect: array(0) {
}
array_filter: array(0) {
}
array_flip: array(0) {
}
array_map: array(3) {
  ["H"]=>
  string(1) "I"
  ["A"]=>
  string(1) "B"
  ["L"]=>
  string(1) "M"
}
array_merge: array(6) {
  [0]=>
  int(1)
  [1]=>
  int(2)
  [2]=>
  int(3)
  ["a"]=>
  string(1) "a"
  ["b"]=>
  string(1) "b"
  ["c"]=>
  string(1) "c"
}
array_reverse: array(0) {
}
array_slice: array(0) {
}
array_key_exists: array(2) {
  [0]=>
  bool(false)
  [1]=>
  bool(false)
}
array_keys: array(0) {
}
array_pop: NULL
keyset(0) {
}
array_product: int(1)
array_rand: 
Warning: Second argument has to be between 1 and the number of elements in the array in %s/builtins.php on line %d
NULL
array_reduce: string(0) ""
array_search 1: bool(false)
array_search 2: bool(false)
array_shift: NULL
keyset(0) {
}
array_sum: int(0)
current 1: bool(false)
each: bool(false)
current 2: bool(false)
end: bool(false)
extract: int(1)
string(14) "php_is_awesome"
in_array: array(2) {
  [0]=>
  bool(false)
  [1]=>
  bool(false)
}
key: NULL
next: bool(false)
prev 1: bool(false)
prev 2: bool(false)
reset: bool(false)
count: int(0)
array_pad 1: array(7) {
  [0]=>
  string(1) "n"
  [1]=>
  string(1) "n"
  [2]=>
  string(1) "n"
  [3]=>
  string(1) "n"
  [4]=>
  string(1) "n"
  [5]=>
  string(1) "n"
  [6]=>
  string(1) "n"
}
array_pad 2: array(2) {
  [0]=>
  string(1) "x"
  [1]=>
  string(1) "x"
}
array_replace: array(1) {
  ["q"]=>
  string(1) "r"
}
array_unique 1: array(0) {
}
array_unique 2: array(0) {
}
int(1)
int(2)
keyset(2) {
  string(1) "q"
  string(1) "i"
}
array_merge_recursive: array(3) {
  ["colors"]=>
  array(3) {
    ["green"]=>
    array(2) {
      [0]=>
      string(5) "green"
      [1]=>
      string(5) "green"
    }
    ["red"]=>
    string(3) "red"
    ["blue"]=>
    string(4) "blue"
  }
  [0]=>
  int(5)
  [1]=>
  int(10)
}
array_replace_recursive 1: array(3) {
  ["colors"]=>
  keyset(2) {
    string(5) "green"
    string(3) "red"
  }
  [0]=>
  int(5)
  ["green"]=>
  string(4) "blue"
}
array_replace_recursive 2: array(2) {
  ["colors"]=>
  array(2) {
    ["green"]=>
    string(4) "blue"
    ["red"]=>
    string(3) "red"
  }
  [0]=>
  int(5)
}
array_splice: 
Warning: Invalid operand type was used: array_splice expects array(s) in %s/builtins.php on line %d
NULL
array_multisort: 
Warning: Invalid operand type was used: array_multisort expects array(s) in %s/builtins.php on line %d
bool(false)
array_walk: 
Warning: Invalid operand type was used: array_walk expects array(s) in %s/builtins.php on line %d
bool(false)
array_walk_recursive: 
Warning: Invalid operand type was used: array_walk_recursive expects array(s) in %s/builtins.php on line %d
bool(false)
array_fill_keys: array(2) {
  ["fizz"]=>
  int(42)
  ["buzz"]=>
  int(42)
}
array_fill: array(2) {
  [10]=>
  int(42)
  [11]=>
  int(42)
}
