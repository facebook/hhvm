[(Typedef
    { t_annotation = (); t_name = ([3:6-11], "\\Point"); t_tparams = []; 
      t_as_constraint = None; t_super_constraint = None;
      t_assignment =
      (SimpleTypeDef
         { tvh_vis = Transparent;
           tvh_hint =
           ([3:14-44],
            (Hshape
               { nsi_allows_unknown_fields = false;
                 nsi_field_map =
                 [{ sfi_optional = false; sfi_hint = ([3:27-30], (Hprim Tint)); sfi_name = (SFlit_str ([3:20-23], "x")) };
                   { sfi_optional = true; sfi_hint = ([3:40-43], (Hprim Tint)); sfi_name = (SFlit_str ([3:33-36], "y")) }]
                 }))
           });
      t_runtime_type =
      ([3:14-44],
       (Hshape
          { nsi_allows_unknown_fields = false;
            nsi_field_map =
            [{ sfi_optional = false; sfi_hint = ([3:27-30], (Hprim Tint)); sfi_name = (SFlit_str ([3:20-23], "x")) };
              { sfi_optional = true; sfi_hint = ([3:40-43], (Hprim Tint)); sfi_name = (SFlit_str ([3:33-36], "y")) }]
            }));
      t_user_attributes = []; t_file_attributes = []; t_mode = Mstrict;
      t_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
        ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
        ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
      t_span = [3:1-45]; t_emit_id = None; t_is_ctx = false; t_internal = false; 
      t_module = None; t_docs_url = None; t_doc_comment = None; t_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([5:10-14], "\\test");
       fd_fun =
       { f_span = [5:1-11:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((void), (Some ([5:26-30], (Hprim Tvoid))));
         f_params =
         [{ param_annotation = (shape('x' => int, ?'y' => int)); param_type_hint = ((shape('x' => int, ?'y' => int)), (Some ([5:15-20], (Happly (([5:15-20], "\\Point"), [])))));
            param_pos = [5:21-23]; param_name = "$p"; param_info = Param_required; 
            param_readonly = None; param_splat = None; param_callconv = Pnormal; 
            param_named = None; param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([6:3-24],
             (Expr
                ((?int), [6:3-23],
                 (Call
                    { func =
                      (((function<Tv>(?shape(?'x' => int, ...) $shape, arraykey $index)[]: ?int)), [6:3-14], (Class_const (((Shapes), [6:3-9], (CI ([6:3-9], "\\HH\\Shapes"))), ([6:11-14], "idx"))));
                      targs = [((int), ([6:11-14], Hwildcard))];
                      args = [(Anormal ((shape('x' => int, ?'y' => int)), [6:15-17], (Lvar ([6:15-17], $p)))); (Anormal ((string), [6:19-22], (String "x")))]; 
                      unpacked_arg = None }))));
             ([7:3-27],
              (Expr
                 ((int), [7:3-26],
                  (Call
                     { func =
                       (((function<Tv>(?shape(?'x' => int, ...) $shape, arraykey $index, optional int $default)[]: int)), [7:3-14],
                        (Class_const (((Shapes), [7:3-9], (CI ([7:3-9], "\\HH\\Shapes"))), ([7:11-14], "idx"))));
                       targs = [((int), ([7:11-14], Hwildcard))];
                       args = [(Anormal ((shape('x' => int, ?'y' => int)), [7:15-17], (Lvar ([7:15-17], $p)))); (Anormal ((string), [7:19-22], (String "x"))); (Anormal ((int), [7:24-25], (Int "3")))];
                       unpacked_arg = None }))));
             ([8:3-30],
              (Expr
                 ((bool), [8:3-29],
                  (Call
                     { func =
                       (((function(readonly shape(...) $shape, arraykey $index)[]: bool)), [8:3-20], (Class_const (((Shapes), [8:3-9], (CI ([8:3-9], "\\HH\\Shapes"))), ([8:11-20], "keyExists"))));
                       targs = []; args = [(Anormal ((shape('x' => int, ?'y' => int)), [8:21-23], (Lvar ([8:21-23], $p)))); (Anormal ((string), [8:25-28], (String "y")))]; 
                       unpacked_arg = None }))));
             ([9:3-36],
              (Expr
                 ((void), [9:3-35],
                  (Call
                     { func =
                       (((function<T as shape(...)>(inout shape('x' => int, ?'y' => int) $shape, arraykey $index)[]: void)), [9:3-20],
                        (Class_const (((Shapes), [9:3-9], (CI ([9:3-9], "\\HH\\Shapes"))), ([9:11-20], "removeKey"))));
                       targs = [((shape('x' => int, ?'y' => int)), ([9:11-20], Hwildcard))];
                       args = [(Ainout ([9:21-26], ((shape('x' => int, ?'y' => int)), [9:27-29], (Lvar ([9:27-29], $p))))); (Anormal ((string), [9:31-34], (String "y")))]; 
                       unpacked_arg = None }))));
             ([10:3-23],
              (Expr
                 ((dict<string, int>), [10:3-22],
                  (Call
                     { func = (((function(shape(...) $shape)[]: dict<arraykey, mixed>)), [10:3-18], (Class_const (((Shapes), [10:3-9], (CI ([10:3-9], "\\HH\\Shapes"))), ([10:11-18], "toArray"))));
                       targs = []; args = [(Anormal ((shape('x' => int)), [10:19-21], (Lvar ([10:19-21], $p))))]; 
                       unpacked_arg = None }))))
             ]
           };
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([5:10-14], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
       fd_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([5:10-14], "\\test");
       fd_fun =
       { f_span = [5:1-11:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((dynamic), (Some ([5:26-30], (Hprim Tvoid))));
         f_params =
         [{ param_annotation = (dynamic); param_type_hint = ((dynamic), (Some ([5:15-20], (Happly (([5:15-20], "\\Point"), []))))); 
            param_pos = [5:21-23]; param_name = "$p"; param_info = Param_required; 
            param_readonly = None; param_splat = None; param_callconv = Pnormal; 
            param_named = None; param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([6:3-24],
             (Expr
                ((~?nothing), [6:3-23],
                 (Call
                    { func =
                      (((function<Tv>(?shape(?'x' => nothing, ...) $shape, arraykey $index)[]: null)), [6:3-14],
                       (Class_const (((Shapes), [6:3-9], (CI ([6:3-9], "\\HH\\Shapes"))), ([6:11-14], "idx"))));
                      targs = [((nothing), ([6:11-14], Hwildcard))]; 
                      args = [(Anormal ((dynamic), [6:15-17], (Lvar ([6:15-17], $p)))); (Anormal ((string), [6:19-22], (String "x")))]; 
                      unpacked_arg = None }))));
             ([7:3-27],
              (Expr
                 ((~int), [7:3-26],
                  (Call
                     { func =
                       (((function<Tv>(?shape(?'x' => int, ...) $shape, arraykey $index, optional int $default)[]: int)), [7:3-14],
                        (Class_const (((Shapes), [7:3-9], (CI ([7:3-9], "\\HH\\Shapes"))), ([7:11-14], "idx"))));
                       targs = [((int), ([7:11-14], Hwildcard))];
                       args = [(Anormal ((dynamic), [7:15-17], (Lvar ([7:15-17], $p)))); (Anormal ((string), [7:19-22], (String "x"))); (Anormal ((int), [7:24-25], (Int "3")))]; 
                       unpacked_arg = None }))));
             ([8:3-30],
              (Expr
                 ((~bool), [8:3-29],
                  (Call
                     { func =
                       (((function(readonly shape(...) $shape, arraykey $index)[]: bool)), [8:3-20], (Class_const (((Shapes), [8:3-9], (CI ([8:3-9], "\\HH\\Shapes"))), ([8:11-20], "keyExists"))));
                       targs = []; args = [(Anormal ((dynamic), [8:21-23], (Lvar ([8:21-23], $p)))); (Anormal ((string), [8:25-28], (String "y")))]; 
                       unpacked_arg = None }))));
             ([9:3-36],
              (Expr
                 ((~void), [9:3-35],
                  (Call
                     { func =
                       (((function<T as shape(...)>(inout nothing $shape, arraykey $index)[]: void)), [9:3-20],
                        (Class_const (((Shapes), [9:3-9], (CI ([9:3-9], "\\HH\\Shapes"))), ([9:11-20], "removeKey"))));
                       targs = [((nothing), ([9:11-20], Hwildcard))]; 
                       args = [(Ainout ([9:21-26], ((dynamic), [9:27-29], (Lvar ([9:27-29], $p))))); (Anormal ((string), [9:31-34], (String "y")))]; 
                       unpacked_arg = None }))));
             ([10:3-23],
              (Expr
                 ((dynamic), [10:3-22],
                  (Call
                     { func = (((function(shape(...) $shape)[]: dict<arraykey, mixed>)), [10:3-18], (Class_const (((Shapes), [10:3-9], (CI ([10:3-9], "\\HH\\Shapes"))), ([10:11-18], "toArray"))));
                       targs = []; args = [(Anormal ((dynamic), [10:19-21], (Lvar ([10:19-21], $p))))]; 
                       unpacked_arg = None }))))
             ]
           };
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([5:10-14], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
       fd_package = None })