/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/complex-struct/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>

namespace apache::thrift {
namespace ident {
struct myLongField;
struct MyByteField;
struct myStringField;
struct myFloatField;
struct myLongField;
struct mapListOfFloats;
struct MyIntField;
struct MyStringField;
struct MyDataField;
struct myEnum;
struct MyBoolField;
struct MyByteField;
struct MyShortField;
struct MyLongField;
struct MyDoubleField;
struct lDouble;
struct lShort;
struct lInteger;
struct lLong;
struct lString;
struct lBool;
struct lByte;
struct mShortString;
struct mIntegerString;
struct mStringMyStruct;
struct mStringBool;
struct mIntegerInteger;
struct mIntegerBool;
struct sShort;
struct sMyStruct;
struct sLong;
struct sString;
struct sByte;
struct mListList;
struct age;
struct name;
struct myLongDFset;
struct myLongDF;
struct portDFset;
struct portNum;
struct myBinaryDFset;
struct myBinary;
struct myByteDFSet;
struct myByte;
struct myDoubleDFset;
struct myDoubleDFZero;
struct myDouble;
struct field3;
struct myList;
struct mySet;
struct simpleStruct;
struct listStructDFset;
struct myUnion;
struct listUnionDFset;
struct mapNestlistStructDfSet;
struct mapJavaTypeDFset;
struct emptyMap;
struct enumMapDFset;
struct myLongField;
struct myLongTypeDef;
struct myStringField;
struct myStringTypedef;
struct myMapField;
struct myMapTypedef;
struct myListField;
struct myListTypedef;
struct myMapListOfTypeDef;
struct myEnum;
struct myStruct;
struct myDataItem;
struct complexNestedStruct;
struct longValue;
struct intValue;
struct myEnum;
struct setFloat;
struct myDataItem;
struct complexNestedStruct;
struct setOfSetOfInt;
struct listofListOfListOfListOfEnum;
struct listOfListOfMyStruct;
struct setOfListOfListOfLong;
struct setOfSetOfsetOfLong;
struct mapStructListOfListOfLong;
struct mKeyStructValInt;
struct listOfMapKeyIntValInt;
struct listOfMapKeyStrValList;
struct mapKeySetValLong;
struct mapKeyListValLong;
struct mapKeyMapValMap;
struct mapKeySetValMap;
struct NestedMaps;
struct mapKeyIntValList;
struct mapKeyIntValSet;
struct mapKeySetValInt;
struct mapKeyListValSet;
struct lsMap;
struct ioMap;
struct BigInteger;
struct binaryTestBuffer;
struct message;
struct errorCode;
struct message;
struct errorCode;
struct message;
struct listStrings;
struct errorEnum;
struct unionError;
struct structError;
struct lsMap;
struct struct_list;
struct union_list;
struct enum_list;
struct struct_set;
struct union_set;
struct enum_set;
struct struct_map;
struct union_map;
struct enum_map;
struct struct_map_2;
struct union_map_2;
struct enum_map_2;
struct list_map;
struct list_map_2;
struct set_map;
struct set_map_2;
struct map_map;
struct map_map_2;
struct list_list_i32;
struct list_list_struct;
struct list_set_i32;
struct list_set_struct;
struct list_map_i32_i32;
struct list_map_i32_struct;
struct list_map_struct_i32;
struct set_list_i32;
struct set_list_struct;
struct set_set_i32;
struct set_set_struct;
struct set_map_i32_i32;
struct set_map_i32_struct;
struct set_map_struct_i32;
struct map_i32_map_i32_i32;
struct map_i32_map_struct_i32;
struct map_i32_map_i32_struct;
struct map_i32_map_list_i32_i32;
struct map_i32_map_list_struct_i32;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_myLongField
#define APACHE_THRIFT_ACCESSOR_myLongField
APACHE_THRIFT_DEFINE_ACCESSOR(myLongField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyByteField
#define APACHE_THRIFT_ACCESSOR_MyByteField
APACHE_THRIFT_DEFINE_ACCESSOR(MyByteField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myStringField
#define APACHE_THRIFT_ACCESSOR_myStringField
APACHE_THRIFT_DEFINE_ACCESSOR(myStringField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myFloatField
#define APACHE_THRIFT_ACCESSOR_myFloatField
APACHE_THRIFT_DEFINE_ACCESSOR(myFloatField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myLongField
#define APACHE_THRIFT_ACCESSOR_myLongField
APACHE_THRIFT_DEFINE_ACCESSOR(myLongField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapListOfFloats
#define APACHE_THRIFT_ACCESSOR_mapListOfFloats
APACHE_THRIFT_DEFINE_ACCESSOR(mapListOfFloats);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyIntField
#define APACHE_THRIFT_ACCESSOR_MyIntField
APACHE_THRIFT_DEFINE_ACCESSOR(MyIntField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyStringField
#define APACHE_THRIFT_ACCESSOR_MyStringField
APACHE_THRIFT_DEFINE_ACCESSOR(MyStringField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyDataField
#define APACHE_THRIFT_ACCESSOR_MyDataField
APACHE_THRIFT_DEFINE_ACCESSOR(MyDataField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myEnum
#define APACHE_THRIFT_ACCESSOR_myEnum
APACHE_THRIFT_DEFINE_ACCESSOR(myEnum);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyBoolField
#define APACHE_THRIFT_ACCESSOR_MyBoolField
APACHE_THRIFT_DEFINE_ACCESSOR(MyBoolField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyByteField
#define APACHE_THRIFT_ACCESSOR_MyByteField
APACHE_THRIFT_DEFINE_ACCESSOR(MyByteField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyShortField
#define APACHE_THRIFT_ACCESSOR_MyShortField
APACHE_THRIFT_DEFINE_ACCESSOR(MyShortField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyLongField
#define APACHE_THRIFT_ACCESSOR_MyLongField
APACHE_THRIFT_DEFINE_ACCESSOR(MyLongField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyDoubleField
#define APACHE_THRIFT_ACCESSOR_MyDoubleField
APACHE_THRIFT_DEFINE_ACCESSOR(MyDoubleField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lDouble
#define APACHE_THRIFT_ACCESSOR_lDouble
APACHE_THRIFT_DEFINE_ACCESSOR(lDouble);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lShort
#define APACHE_THRIFT_ACCESSOR_lShort
APACHE_THRIFT_DEFINE_ACCESSOR(lShort);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lInteger
#define APACHE_THRIFT_ACCESSOR_lInteger
APACHE_THRIFT_DEFINE_ACCESSOR(lInteger);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lLong
#define APACHE_THRIFT_ACCESSOR_lLong
APACHE_THRIFT_DEFINE_ACCESSOR(lLong);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lString
#define APACHE_THRIFT_ACCESSOR_lString
APACHE_THRIFT_DEFINE_ACCESSOR(lString);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lBool
#define APACHE_THRIFT_ACCESSOR_lBool
APACHE_THRIFT_DEFINE_ACCESSOR(lBool);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lByte
#define APACHE_THRIFT_ACCESSOR_lByte
APACHE_THRIFT_DEFINE_ACCESSOR(lByte);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mShortString
#define APACHE_THRIFT_ACCESSOR_mShortString
APACHE_THRIFT_DEFINE_ACCESSOR(mShortString);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mIntegerString
#define APACHE_THRIFT_ACCESSOR_mIntegerString
APACHE_THRIFT_DEFINE_ACCESSOR(mIntegerString);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mStringMyStruct
#define APACHE_THRIFT_ACCESSOR_mStringMyStruct
APACHE_THRIFT_DEFINE_ACCESSOR(mStringMyStruct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mStringBool
#define APACHE_THRIFT_ACCESSOR_mStringBool
APACHE_THRIFT_DEFINE_ACCESSOR(mStringBool);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mIntegerInteger
#define APACHE_THRIFT_ACCESSOR_mIntegerInteger
APACHE_THRIFT_DEFINE_ACCESSOR(mIntegerInteger);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mIntegerBool
#define APACHE_THRIFT_ACCESSOR_mIntegerBool
APACHE_THRIFT_DEFINE_ACCESSOR(mIntegerBool);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_sShort
#define APACHE_THRIFT_ACCESSOR_sShort
APACHE_THRIFT_DEFINE_ACCESSOR(sShort);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_sMyStruct
#define APACHE_THRIFT_ACCESSOR_sMyStruct
APACHE_THRIFT_DEFINE_ACCESSOR(sMyStruct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_sLong
#define APACHE_THRIFT_ACCESSOR_sLong
APACHE_THRIFT_DEFINE_ACCESSOR(sLong);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_sString
#define APACHE_THRIFT_ACCESSOR_sString
APACHE_THRIFT_DEFINE_ACCESSOR(sString);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_sByte
#define APACHE_THRIFT_ACCESSOR_sByte
APACHE_THRIFT_DEFINE_ACCESSOR(sByte);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mListList
#define APACHE_THRIFT_ACCESSOR_mListList
APACHE_THRIFT_DEFINE_ACCESSOR(mListList);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_age
#define APACHE_THRIFT_ACCESSOR_age
APACHE_THRIFT_DEFINE_ACCESSOR(age);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_name
#define APACHE_THRIFT_ACCESSOR_name
APACHE_THRIFT_DEFINE_ACCESSOR(name);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myLongDFset
#define APACHE_THRIFT_ACCESSOR_myLongDFset
APACHE_THRIFT_DEFINE_ACCESSOR(myLongDFset);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myLongDF
#define APACHE_THRIFT_ACCESSOR_myLongDF
APACHE_THRIFT_DEFINE_ACCESSOR(myLongDF);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_portDFset
#define APACHE_THRIFT_ACCESSOR_portDFset
APACHE_THRIFT_DEFINE_ACCESSOR(portDFset);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_portNum
#define APACHE_THRIFT_ACCESSOR_portNum
APACHE_THRIFT_DEFINE_ACCESSOR(portNum);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myBinaryDFset
#define APACHE_THRIFT_ACCESSOR_myBinaryDFset
APACHE_THRIFT_DEFINE_ACCESSOR(myBinaryDFset);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myBinary
#define APACHE_THRIFT_ACCESSOR_myBinary
APACHE_THRIFT_DEFINE_ACCESSOR(myBinary);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myByteDFSet
#define APACHE_THRIFT_ACCESSOR_myByteDFSet
APACHE_THRIFT_DEFINE_ACCESSOR(myByteDFSet);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myByte
#define APACHE_THRIFT_ACCESSOR_myByte
APACHE_THRIFT_DEFINE_ACCESSOR(myByte);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myDoubleDFset
#define APACHE_THRIFT_ACCESSOR_myDoubleDFset
APACHE_THRIFT_DEFINE_ACCESSOR(myDoubleDFset);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myDoubleDFZero
#define APACHE_THRIFT_ACCESSOR_myDoubleDFZero
APACHE_THRIFT_DEFINE_ACCESSOR(myDoubleDFZero);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myDouble
#define APACHE_THRIFT_ACCESSOR_myDouble
APACHE_THRIFT_DEFINE_ACCESSOR(myDouble);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field3
#define APACHE_THRIFT_ACCESSOR_field3
APACHE_THRIFT_DEFINE_ACCESSOR(field3);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myList
#define APACHE_THRIFT_ACCESSOR_myList
APACHE_THRIFT_DEFINE_ACCESSOR(myList);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mySet
#define APACHE_THRIFT_ACCESSOR_mySet
APACHE_THRIFT_DEFINE_ACCESSOR(mySet);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_simpleStruct
#define APACHE_THRIFT_ACCESSOR_simpleStruct
APACHE_THRIFT_DEFINE_ACCESSOR(simpleStruct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_listStructDFset
#define APACHE_THRIFT_ACCESSOR_listStructDFset
APACHE_THRIFT_DEFINE_ACCESSOR(listStructDFset);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myUnion
#define APACHE_THRIFT_ACCESSOR_myUnion
APACHE_THRIFT_DEFINE_ACCESSOR(myUnion);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_listUnionDFset
#define APACHE_THRIFT_ACCESSOR_listUnionDFset
APACHE_THRIFT_DEFINE_ACCESSOR(listUnionDFset);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapNestlistStructDfSet
#define APACHE_THRIFT_ACCESSOR_mapNestlistStructDfSet
APACHE_THRIFT_DEFINE_ACCESSOR(mapNestlistStructDfSet);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapJavaTypeDFset
#define APACHE_THRIFT_ACCESSOR_mapJavaTypeDFset
APACHE_THRIFT_DEFINE_ACCESSOR(mapJavaTypeDFset);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_emptyMap
#define APACHE_THRIFT_ACCESSOR_emptyMap
APACHE_THRIFT_DEFINE_ACCESSOR(emptyMap);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_enumMapDFset
#define APACHE_THRIFT_ACCESSOR_enumMapDFset
APACHE_THRIFT_DEFINE_ACCESSOR(enumMapDFset);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myLongField
#define APACHE_THRIFT_ACCESSOR_myLongField
APACHE_THRIFT_DEFINE_ACCESSOR(myLongField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myLongTypeDef
#define APACHE_THRIFT_ACCESSOR_myLongTypeDef
APACHE_THRIFT_DEFINE_ACCESSOR(myLongTypeDef);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myStringField
#define APACHE_THRIFT_ACCESSOR_myStringField
APACHE_THRIFT_DEFINE_ACCESSOR(myStringField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myStringTypedef
#define APACHE_THRIFT_ACCESSOR_myStringTypedef
APACHE_THRIFT_DEFINE_ACCESSOR(myStringTypedef);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myMapField
#define APACHE_THRIFT_ACCESSOR_myMapField
APACHE_THRIFT_DEFINE_ACCESSOR(myMapField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myMapTypedef
#define APACHE_THRIFT_ACCESSOR_myMapTypedef
APACHE_THRIFT_DEFINE_ACCESSOR(myMapTypedef);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myListField
#define APACHE_THRIFT_ACCESSOR_myListField
APACHE_THRIFT_DEFINE_ACCESSOR(myListField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myListTypedef
#define APACHE_THRIFT_ACCESSOR_myListTypedef
APACHE_THRIFT_DEFINE_ACCESSOR(myListTypedef);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myMapListOfTypeDef
#define APACHE_THRIFT_ACCESSOR_myMapListOfTypeDef
APACHE_THRIFT_DEFINE_ACCESSOR(myMapListOfTypeDef);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myEnum
#define APACHE_THRIFT_ACCESSOR_myEnum
APACHE_THRIFT_DEFINE_ACCESSOR(myEnum);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myStruct
#define APACHE_THRIFT_ACCESSOR_myStruct
APACHE_THRIFT_DEFINE_ACCESSOR(myStruct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myDataItem
#define APACHE_THRIFT_ACCESSOR_myDataItem
APACHE_THRIFT_DEFINE_ACCESSOR(myDataItem);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_complexNestedStruct
#define APACHE_THRIFT_ACCESSOR_complexNestedStruct
APACHE_THRIFT_DEFINE_ACCESSOR(complexNestedStruct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_longValue
#define APACHE_THRIFT_ACCESSOR_longValue
APACHE_THRIFT_DEFINE_ACCESSOR(longValue);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_intValue
#define APACHE_THRIFT_ACCESSOR_intValue
APACHE_THRIFT_DEFINE_ACCESSOR(intValue);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myEnum
#define APACHE_THRIFT_ACCESSOR_myEnum
APACHE_THRIFT_DEFINE_ACCESSOR(myEnum);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_setFloat
#define APACHE_THRIFT_ACCESSOR_setFloat
APACHE_THRIFT_DEFINE_ACCESSOR(setFloat);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myDataItem
#define APACHE_THRIFT_ACCESSOR_myDataItem
APACHE_THRIFT_DEFINE_ACCESSOR(myDataItem);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_complexNestedStruct
#define APACHE_THRIFT_ACCESSOR_complexNestedStruct
APACHE_THRIFT_DEFINE_ACCESSOR(complexNestedStruct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_setOfSetOfInt
#define APACHE_THRIFT_ACCESSOR_setOfSetOfInt
APACHE_THRIFT_DEFINE_ACCESSOR(setOfSetOfInt);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_listofListOfListOfListOfEnum
#define APACHE_THRIFT_ACCESSOR_listofListOfListOfListOfEnum
APACHE_THRIFT_DEFINE_ACCESSOR(listofListOfListOfListOfEnum);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_listOfListOfMyStruct
#define APACHE_THRIFT_ACCESSOR_listOfListOfMyStruct
APACHE_THRIFT_DEFINE_ACCESSOR(listOfListOfMyStruct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_setOfListOfListOfLong
#define APACHE_THRIFT_ACCESSOR_setOfListOfListOfLong
APACHE_THRIFT_DEFINE_ACCESSOR(setOfListOfListOfLong);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_setOfSetOfsetOfLong
#define APACHE_THRIFT_ACCESSOR_setOfSetOfsetOfLong
APACHE_THRIFT_DEFINE_ACCESSOR(setOfSetOfsetOfLong);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapStructListOfListOfLong
#define APACHE_THRIFT_ACCESSOR_mapStructListOfListOfLong
APACHE_THRIFT_DEFINE_ACCESSOR(mapStructListOfListOfLong);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mKeyStructValInt
#define APACHE_THRIFT_ACCESSOR_mKeyStructValInt
APACHE_THRIFT_DEFINE_ACCESSOR(mKeyStructValInt);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_listOfMapKeyIntValInt
#define APACHE_THRIFT_ACCESSOR_listOfMapKeyIntValInt
APACHE_THRIFT_DEFINE_ACCESSOR(listOfMapKeyIntValInt);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_listOfMapKeyStrValList
#define APACHE_THRIFT_ACCESSOR_listOfMapKeyStrValList
APACHE_THRIFT_DEFINE_ACCESSOR(listOfMapKeyStrValList);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapKeySetValLong
#define APACHE_THRIFT_ACCESSOR_mapKeySetValLong
APACHE_THRIFT_DEFINE_ACCESSOR(mapKeySetValLong);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapKeyListValLong
#define APACHE_THRIFT_ACCESSOR_mapKeyListValLong
APACHE_THRIFT_DEFINE_ACCESSOR(mapKeyListValLong);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapKeyMapValMap
#define APACHE_THRIFT_ACCESSOR_mapKeyMapValMap
APACHE_THRIFT_DEFINE_ACCESSOR(mapKeyMapValMap);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapKeySetValMap
#define APACHE_THRIFT_ACCESSOR_mapKeySetValMap
APACHE_THRIFT_DEFINE_ACCESSOR(mapKeySetValMap);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_NestedMaps
#define APACHE_THRIFT_ACCESSOR_NestedMaps
APACHE_THRIFT_DEFINE_ACCESSOR(NestedMaps);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapKeyIntValList
#define APACHE_THRIFT_ACCESSOR_mapKeyIntValList
APACHE_THRIFT_DEFINE_ACCESSOR(mapKeyIntValList);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapKeyIntValSet
#define APACHE_THRIFT_ACCESSOR_mapKeyIntValSet
APACHE_THRIFT_DEFINE_ACCESSOR(mapKeyIntValSet);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapKeySetValInt
#define APACHE_THRIFT_ACCESSOR_mapKeySetValInt
APACHE_THRIFT_DEFINE_ACCESSOR(mapKeySetValInt);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapKeyListValSet
#define APACHE_THRIFT_ACCESSOR_mapKeyListValSet
APACHE_THRIFT_DEFINE_ACCESSOR(mapKeyListValSet);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lsMap
#define APACHE_THRIFT_ACCESSOR_lsMap
APACHE_THRIFT_DEFINE_ACCESSOR(lsMap);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ioMap
#define APACHE_THRIFT_ACCESSOR_ioMap
APACHE_THRIFT_DEFINE_ACCESSOR(ioMap);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_BigInteger
#define APACHE_THRIFT_ACCESSOR_BigInteger
APACHE_THRIFT_DEFINE_ACCESSOR(BigInteger);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binaryTestBuffer
#define APACHE_THRIFT_ACCESSOR_binaryTestBuffer
APACHE_THRIFT_DEFINE_ACCESSOR(binaryTestBuffer);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_errorCode
#define APACHE_THRIFT_ACCESSOR_errorCode
APACHE_THRIFT_DEFINE_ACCESSOR(errorCode);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_errorCode
#define APACHE_THRIFT_ACCESSOR_errorCode
APACHE_THRIFT_DEFINE_ACCESSOR(errorCode);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_listStrings
#define APACHE_THRIFT_ACCESSOR_listStrings
APACHE_THRIFT_DEFINE_ACCESSOR(listStrings);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_errorEnum
#define APACHE_THRIFT_ACCESSOR_errorEnum
APACHE_THRIFT_DEFINE_ACCESSOR(errorEnum);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_unionError
#define APACHE_THRIFT_ACCESSOR_unionError
APACHE_THRIFT_DEFINE_ACCESSOR(unionError);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_structError
#define APACHE_THRIFT_ACCESSOR_structError
APACHE_THRIFT_DEFINE_ACCESSOR(structError);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lsMap
#define APACHE_THRIFT_ACCESSOR_lsMap
APACHE_THRIFT_DEFINE_ACCESSOR(lsMap);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_struct_list
#define APACHE_THRIFT_ACCESSOR_struct_list
APACHE_THRIFT_DEFINE_ACCESSOR(struct_list);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_union_list
#define APACHE_THRIFT_ACCESSOR_union_list
APACHE_THRIFT_DEFINE_ACCESSOR(union_list);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_enum_list
#define APACHE_THRIFT_ACCESSOR_enum_list
APACHE_THRIFT_DEFINE_ACCESSOR(enum_list);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_struct_set
#define APACHE_THRIFT_ACCESSOR_struct_set
APACHE_THRIFT_DEFINE_ACCESSOR(struct_set);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_union_set
#define APACHE_THRIFT_ACCESSOR_union_set
APACHE_THRIFT_DEFINE_ACCESSOR(union_set);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_enum_set
#define APACHE_THRIFT_ACCESSOR_enum_set
APACHE_THRIFT_DEFINE_ACCESSOR(enum_set);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_struct_map
#define APACHE_THRIFT_ACCESSOR_struct_map
APACHE_THRIFT_DEFINE_ACCESSOR(struct_map);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_union_map
#define APACHE_THRIFT_ACCESSOR_union_map
APACHE_THRIFT_DEFINE_ACCESSOR(union_map);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_enum_map
#define APACHE_THRIFT_ACCESSOR_enum_map
APACHE_THRIFT_DEFINE_ACCESSOR(enum_map);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_struct_map_2
#define APACHE_THRIFT_ACCESSOR_struct_map_2
APACHE_THRIFT_DEFINE_ACCESSOR(struct_map_2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_union_map_2
#define APACHE_THRIFT_ACCESSOR_union_map_2
APACHE_THRIFT_DEFINE_ACCESSOR(union_map_2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_enum_map_2
#define APACHE_THRIFT_ACCESSOR_enum_map_2
APACHE_THRIFT_DEFINE_ACCESSOR(enum_map_2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_map
#define APACHE_THRIFT_ACCESSOR_list_map
APACHE_THRIFT_DEFINE_ACCESSOR(list_map);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_map_2
#define APACHE_THRIFT_ACCESSOR_list_map_2
APACHE_THRIFT_DEFINE_ACCESSOR(list_map_2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_set_map
#define APACHE_THRIFT_ACCESSOR_set_map
APACHE_THRIFT_DEFINE_ACCESSOR(set_map);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_set_map_2
#define APACHE_THRIFT_ACCESSOR_set_map_2
APACHE_THRIFT_DEFINE_ACCESSOR(set_map_2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_map_map
#define APACHE_THRIFT_ACCESSOR_map_map
APACHE_THRIFT_DEFINE_ACCESSOR(map_map);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_map_map_2
#define APACHE_THRIFT_ACCESSOR_map_map_2
APACHE_THRIFT_DEFINE_ACCESSOR(map_map_2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_list_i32
#define APACHE_THRIFT_ACCESSOR_list_list_i32
APACHE_THRIFT_DEFINE_ACCESSOR(list_list_i32);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_list_struct
#define APACHE_THRIFT_ACCESSOR_list_list_struct
APACHE_THRIFT_DEFINE_ACCESSOR(list_list_struct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_set_i32
#define APACHE_THRIFT_ACCESSOR_list_set_i32
APACHE_THRIFT_DEFINE_ACCESSOR(list_set_i32);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_set_struct
#define APACHE_THRIFT_ACCESSOR_list_set_struct
APACHE_THRIFT_DEFINE_ACCESSOR(list_set_struct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_map_i32_i32
#define APACHE_THRIFT_ACCESSOR_list_map_i32_i32
APACHE_THRIFT_DEFINE_ACCESSOR(list_map_i32_i32);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_map_i32_struct
#define APACHE_THRIFT_ACCESSOR_list_map_i32_struct
APACHE_THRIFT_DEFINE_ACCESSOR(list_map_i32_struct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_map_struct_i32
#define APACHE_THRIFT_ACCESSOR_list_map_struct_i32
APACHE_THRIFT_DEFINE_ACCESSOR(list_map_struct_i32);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_set_list_i32
#define APACHE_THRIFT_ACCESSOR_set_list_i32
APACHE_THRIFT_DEFINE_ACCESSOR(set_list_i32);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_set_list_struct
#define APACHE_THRIFT_ACCESSOR_set_list_struct
APACHE_THRIFT_DEFINE_ACCESSOR(set_list_struct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_set_set_i32
#define APACHE_THRIFT_ACCESSOR_set_set_i32
APACHE_THRIFT_DEFINE_ACCESSOR(set_set_i32);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_set_set_struct
#define APACHE_THRIFT_ACCESSOR_set_set_struct
APACHE_THRIFT_DEFINE_ACCESSOR(set_set_struct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_set_map_i32_i32
#define APACHE_THRIFT_ACCESSOR_set_map_i32_i32
APACHE_THRIFT_DEFINE_ACCESSOR(set_map_i32_i32);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_set_map_i32_struct
#define APACHE_THRIFT_ACCESSOR_set_map_i32_struct
APACHE_THRIFT_DEFINE_ACCESSOR(set_map_i32_struct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_set_map_struct_i32
#define APACHE_THRIFT_ACCESSOR_set_map_struct_i32
APACHE_THRIFT_DEFINE_ACCESSOR(set_map_struct_i32);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_map_i32_map_i32_i32
#define APACHE_THRIFT_ACCESSOR_map_i32_map_i32_i32
APACHE_THRIFT_DEFINE_ACCESSOR(map_i32_map_i32_i32);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_map_i32_map_struct_i32
#define APACHE_THRIFT_ACCESSOR_map_i32_map_struct_i32
APACHE_THRIFT_DEFINE_ACCESSOR(map_i32_map_struct_i32);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_map_i32_map_i32_struct
#define APACHE_THRIFT_ACCESSOR_map_i32_map_i32_struct
APACHE_THRIFT_DEFINE_ACCESSOR(map_i32_map_i32_struct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_map_i32_map_list_i32_i32
#define APACHE_THRIFT_ACCESSOR_map_i32_map_list_i32_i32
APACHE_THRIFT_DEFINE_ACCESSOR(map_i32_map_list_i32_i32);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_map_i32_map_list_struct_i32
#define APACHE_THRIFT_ACCESSOR_map_i32_map_list_struct_i32
APACHE_THRIFT_DEFINE_ACCESSOR(map_i32_map_list_struct_i32);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
namespace cpp2 {

/** Glean {"file": "thrift/compiler/test/fixtures/complex-struct/src/module.thrift", "name": "MyEnum", "kind": "enum" } */
enum class MyEnum {
  MyValue1 = 0,
  MyValue2 = 1,
  MyValue3 = 3,
  MyValue4 = 4,
  MyValue5 = 5,
};

} // namespace cpp2

template<> struct std::hash<::cpp2::MyEnum> :
  ::apache::thrift::detail::enum_hash<::cpp2::MyEnum> {};

namespace apache::thrift {

template <> struct TEnumTraits<::cpp2::MyEnum> {
  using type = ::cpp2::MyEnum;

  static constexpr std::size_t const size = 5;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "MyEnum";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "module";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::MyValue1; }
  static constexpr type max() { return type::MyValue5; }

  static const std::vector<std::any>& annotations() noexcept;
  static const std::vector<std::any>& enumValueAnnotations(::cpp2::MyEnum) noexcept;
};

} // namespace apache::thrift
// END declare_enums
// BEGIN forward_declare
namespace cpp2 {
class MyStructFloatFieldThrowExp;
class MyStructMapFloatThrowExp;
class MyStruct;
class SimpleStruct;
class defaultStruct;
class MyStructTypeDef;
class MyDataItem;
class MyUnion;
class MyUnionFloatFieldThrowExp;
class ComplexNestedStruct;
class TypeRemapped;
class emptyXcep;
class reqXcep;
class optXcep;
class complexException;
class Containers;
} // namespace cpp2
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

/** Glean {"file": "thrift/compiler/test/fixtures/complex-struct/src/module.thrift", "name": "stringTypedef", "kind": "typedef" } */
using stringTypedef = ::std::string;
/** Glean {"file": "thrift/compiler/test/fixtures/complex-struct/src/module.thrift", "name": "longTypeDef", "kind": "typedef" } */
using longTypeDef = ::std::int64_t;
/** Glean {"file": "thrift/compiler/test/fixtures/complex-struct/src/module.thrift", "name": "mapTypedef", "kind": "typedef" } */
using mapTypedef = ::std::map<::std::int16_t, ::std::string>;
/** Glean {"file": "thrift/compiler/test/fixtures/complex-struct/src/module.thrift", "name": "listTypedef", "kind": "typedef" } */
using listTypedef = ::std::vector<double>;
/** Glean {"file": "thrift/compiler/test/fixtures/complex-struct/src/module.thrift", "name": "floatTypedef", "kind": "typedef" } */
using floatTypedef = float;
/** Glean {"file": "thrift/compiler/test/fixtures/complex-struct/src/module.thrift", "name": "FMap", "kind": "typedef" } */
using FMap = ::std::map<::std::int32_t, ::std::int64_t>;
/** Glean {"file": "thrift/compiler/test/fixtures/complex-struct/src/module.thrift", "name": "binary_4918", "kind": "typedef" } */
using binary_4918 = ::std::string;
/** Glean {"file": "thrift/compiler/test/fixtures/complex-struct/src/module.thrift", "name": "i32_1194", "kind": "typedef" } */
using i32_1194 = ::std::int32_t;
/** Glean {"file": "thrift/compiler/test/fixtures/complex-struct/src/module.thrift", "name": "map_i32_FMap_6797", "kind": "typedef" } */
using map_i32_FMap_6797 = ::std::map<::std::int32_t, ::cpp2::FMap>;
/** Glean {"file": "thrift/compiler/test/fixtures/complex-struct/src/module.thrift", "name": "map_i64_string_5732", "kind": "typedef" } */
using map_i64_string_5732 = ::std::map<::std::int64_t, ::std::string>;

/** Glean {"file": "thrift/compiler/test/fixtures/complex-struct/src/module.thrift", "name": "MyStructFloatFieldThrowExp", "kind": "struct" } */
class MyStructFloatFieldThrowExp final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 4;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::myLongField,
    ::apache::thrift::ident::MyByteField,
    ::apache::thrift::ident::myStringField,
    ::apache::thrift::ident::myFloatField
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::byte_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::float_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructFloatFieldThrowExp;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  MyStructFloatFieldThrowExp();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructFloatFieldThrowExp(apache::thrift::FragileConstructor, ::std::int64_t myLongField__arg, ::std::int8_t MyByteField__arg, ::std::string myStringField__arg, float myFloatField__arg);

  MyStructFloatFieldThrowExp(MyStructFloatFieldThrowExp&&) noexcept;

  MyStructFloatFieldThrowExp(const MyStructFloatFieldThrowExp& src);


  MyStructFloatFieldThrowExp& operator=(MyStructFloatFieldThrowExp&&) noexcept;
  MyStructFloatFieldThrowExp& operator=(const MyStructFloatFieldThrowExp& src);

  ~MyStructFloatFieldThrowExp();

 private:
  ::std::int64_t __fbthrift_field_myLongField;
 private:
  ::std::int8_t __fbthrift_field_MyByteField;
 private:
  ::std::string __fbthrift_field_myStringField;
 private:
  float __fbthrift_field_myFloatField;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructFloatFieldThrowExp&) const;
  bool operator<(const MyStructFloatFieldThrowExp&) const;

  /** Glean { "field": "myLongField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myLongField_ref() const& {
    return {this->__fbthrift_field_myLongField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "myLongField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myLongField_ref() & {
    return {this->__fbthrift_field_myLongField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "myLongField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myLongField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myLongField), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "myLongField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myLongField() const& {
    return {this->__fbthrift_field_myLongField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "myLongField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myLongField() & {
    return {this->__fbthrift_field_myLongField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "myLongField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myLongField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myLongField), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyByteField" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyByteField_ref() const& {
    return {this->__fbthrift_field_MyByteField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyByteField" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyByteField_ref() & {
    return {this->__fbthrift_field_MyByteField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyByteField" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyByteField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyByteField), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyByteField" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyByteField() const& {
    return {this->__fbthrift_field_MyByteField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyByteField" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyByteField() & {
    return {this->__fbthrift_field_MyByteField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyByteField" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyByteField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyByteField), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "myStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myStringField_ref() const& {
    return {this->__fbthrift_field_myStringField, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myStringField_ref() & {
    return {this->__fbthrift_field_myStringField, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myStringField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myStringField), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myStringField() const& {
    return {this->__fbthrift_field_myStringField, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myStringField() & {
    return {this->__fbthrift_field_myStringField, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myStringField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myStringField), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myFloatField" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myFloatField_ref() const& {
    return {this->__fbthrift_field_myFloatField, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myFloatField" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myFloatField_ref() & {
    return {this->__fbthrift_field_myFloatField, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myFloatField" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myFloatField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myFloatField), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myFloatField" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myFloatField() const& {
    return {this->__fbthrift_field_myFloatField, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myFloatField" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myFloatField() & {
    return {this->__fbthrift_field_myFloatField, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myFloatField" } */
  template <typename..., typename fbthrift_T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myFloatField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myFloatField), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myLongField" } */
  [[deprecated("Use `FOO.myLongField().value()` instead of `FOO.get_myLongField()`")]]
  ::std::int64_t get_myLongField() const;

  /** Glean { "field": "myLongField" } */
  [[deprecated("Use `FOO.myLongField() = BAR` instead of `FOO.set_myLongField(BAR)`")]]
  ::std::int64_t& set_myLongField(::std::int64_t myLongField_);

  /** Glean { "field": "MyByteField" } */
  [[deprecated("Use `FOO.MyByteField().value()` instead of `FOO.get_MyByteField()`")]]
  ::std::int8_t get_MyByteField() const;

  /** Glean { "field": "MyByteField" } */
  [[deprecated("Use `FOO.MyByteField() = BAR` instead of `FOO.set_MyByteField(BAR)`")]]
  ::std::int8_t& set_MyByteField(::std::int8_t MyByteField_);

  /** Glean { "field": "myStringField" } */
  [[deprecated("Use `FOO.myStringField().value()` instead of `FOO.get_myStringField()`")]]
  const ::std::string& get_myStringField() const& {
    return __fbthrift_field_myStringField;
  }

  /** Glean { "field": "myStringField" } */
  [[deprecated("Use `FOO.myStringField().value()` instead of `FOO.get_myStringField()`")]]
  ::std::string get_myStringField() && {
    return static_cast<::std::string&&>(__fbthrift_field_myStringField);
  }

  /** Glean { "field": "myStringField" } */
  template <typename T_MyStructFloatFieldThrowExp_myStringField_struct_setter = ::std::string>
  [[deprecated("Use `FOO.myStringField() = BAR` instead of `FOO.set_myStringField(BAR)`")]]
  ::std::string& set_myStringField(T_MyStructFloatFieldThrowExp_myStringField_struct_setter&& myStringField_) {
    myStringField_ref() = std::forward<T_MyStructFloatFieldThrowExp_myStringField_struct_setter>(myStringField_);
    return __fbthrift_field_myStringField;
  }

  /** Glean { "field": "myFloatField" } */
  [[deprecated("Use `FOO.myFloatField().value()` instead of `FOO.get_myFloatField()`")]]
  float get_myFloatField() const;

  /** Glean { "field": "myFloatField" } */
  [[deprecated("Use `FOO.myFloatField() = BAR` instead of `FOO.set_myFloatField(BAR)`")]]
  float& set_myFloatField(float myFloatField_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructFloatFieldThrowExp>;
  friend void swap(MyStructFloatFieldThrowExp& a, MyStructFloatFieldThrowExp& b);
};

template <class Protocol_>
unsigned long MyStructFloatFieldThrowExp::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/complex-struct/src/module.thrift", "name": "MyStructMapFloatThrowExp", "kind": "struct" } */
class MyStructMapFloatThrowExp final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::myLongField,
    ::apache::thrift::ident::mapListOfFloats
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::list<::apache::thrift::type::list<::apache::thrift::type::float_t>>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructMapFloatThrowExp;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  MyStructMapFloatThrowExp();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructMapFloatThrowExp(apache::thrift::FragileConstructor, ::std::int64_t myLongField__arg, ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::floatTypedef>>> mapListOfFloats__arg);

  MyStructMapFloatThrowExp(MyStructMapFloatThrowExp&&) noexcept;

  MyStructMapFloatThrowExp(const MyStructMapFloatThrowExp& src);


  MyStructMapFloatThrowExp& operator=(MyStructMapFloatThrowExp&&) noexcept;
  MyStructMapFloatThrowExp& operator=(const MyStructMapFloatThrowExp& src);

  ~MyStructMapFloatThrowExp();

 private:
  ::std::int64_t __fbthrift_field_myLongField;
 private:
  ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::floatTypedef>>> __fbthrift_field_mapListOfFloats;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructMapFloatThrowExp&) const;
  bool operator<(const MyStructMapFloatThrowExp&) const;

  /** Glean { "field": "myLongField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myLongField_ref() const& {
    return {this->__fbthrift_field_myLongField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "myLongField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myLongField_ref() & {
    return {this->__fbthrift_field_myLongField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "myLongField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myLongField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myLongField), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "myLongField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myLongField() const& {
    return {this->__fbthrift_field_myLongField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "myLongField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myLongField() & {
    return {this->__fbthrift_field_myLongField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "myLongField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myLongField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myLongField), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "mapListOfFloats" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::floatTypedef>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mapListOfFloats_ref() const& {
    return {this->__fbthrift_field_mapListOfFloats, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "mapListOfFloats" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::floatTypedef>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mapListOfFloats_ref() & {
    return {this->__fbthrift_field_mapListOfFloats, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "mapListOfFloats" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::floatTypedef>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mapListOfFloats_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mapListOfFloats), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "mapListOfFloats" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::floatTypedef>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mapListOfFloats() const& {
    return {this->__fbthrift_field_mapListOfFloats, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "mapListOfFloats" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::floatTypedef>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mapListOfFloats() & {
    return {this->__fbthrift_field_mapListOfFloats, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "mapListOfFloats" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::floatTypedef>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mapListOfFloats() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mapListOfFloats), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "myLongField" } */
  [[deprecated("Use `FOO.myLongField().value()` instead of `FOO.get_myLongField()`")]]
  ::std::int64_t get_myLongField() const;

  /** Glean { "field": "myLongField" } */
  [[deprecated("Use `FOO.myLongField() = BAR` instead of `FOO.set_myLongField(BAR)`")]]
  ::std::int64_t& set_myLongField(::std::int64_t myLongField_);

  /** Glean { "field": "mapListOfFloats" } */
  [[deprecated("Use `FOO.mapListOfFloats().value()` instead of `FOO.get_mapListOfFloats()`")]]
  const ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::floatTypedef>>>& get_mapListOfFloats() const&;

  /** Glean { "field": "mapListOfFloats" } */
  [[deprecated("Use `FOO.mapListOfFloats().value()` instead of `FOO.get_mapListOfFloats()`")]]
  ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::floatTypedef>>> get_mapListOfFloats() &&;

  /** Glean { "field": "mapListOfFloats" } */
  template <typename T_MyStructMapFloatThrowExp_mapListOfFloats_struct_setter = ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::floatTypedef>>>>
  [[deprecated("Use `FOO.mapListOfFloats() = BAR` instead of `FOO.set_mapListOfFloats(BAR)`")]]
  ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::floatTypedef>>>& set_mapListOfFloats(T_MyStructMapFloatThrowExp_mapListOfFloats_struct_setter&& mapListOfFloats_) {
    mapListOfFloats_ref() = std::forward<T_MyStructMapFloatThrowExp_mapListOfFloats_struct_setter>(mapListOfFloats_);
    return __fbthrift_field_mapListOfFloats;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructMapFloatThrowExp>;
  friend void swap(MyStructMapFloatThrowExp& a, MyStructMapFloatThrowExp& b);
};

template <class Protocol_>
unsigned long MyStructMapFloatThrowExp::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/complex-struct/src/module.thrift", "name": "MyDataItem", "kind": "struct" } */
class MyDataItem final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyDataItem;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  MyDataItem() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyDataItem(apache::thrift::FragileConstructor);

  MyDataItem(MyDataItem&&) = default;

  MyDataItem(const MyDataItem&) = default;


  MyDataItem& operator=(MyDataItem&&) = default;

  MyDataItem& operator=(const MyDataItem&) = default;

 public:

  bool operator==(const MyDataItem&) const;
  bool operator<(const MyDataItem&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyDataItem>;
  friend void swap(MyDataItem& a, MyDataItem& b);
};

template <class Protocol_>
unsigned long MyDataItem::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/complex-struct/src/module.thrift", "name": "MyStruct", "kind": "struct" } */
class MyStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 28;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::MyIntField,
    ::apache::thrift::ident::MyStringField,
    ::apache::thrift::ident::MyDataField,
    ::apache::thrift::ident::myEnum,
    ::apache::thrift::ident::MyBoolField,
    ::apache::thrift::ident::MyByteField,
    ::apache::thrift::ident::MyShortField,
    ::apache::thrift::ident::MyLongField,
    ::apache::thrift::ident::MyDoubleField,
    ::apache::thrift::ident::lDouble,
    ::apache::thrift::ident::lShort,
    ::apache::thrift::ident::lInteger,
    ::apache::thrift::ident::lLong,
    ::apache::thrift::ident::lString,
    ::apache::thrift::ident::lBool,
    ::apache::thrift::ident::lByte,
    ::apache::thrift::ident::mShortString,
    ::apache::thrift::ident::mIntegerString,
    ::apache::thrift::ident::mStringMyStruct,
    ::apache::thrift::ident::mStringBool,
    ::apache::thrift::ident::mIntegerInteger,
    ::apache::thrift::ident::mIntegerBool,
    ::apache::thrift::ident::sShort,
    ::apache::thrift::ident::sMyStruct,
    ::apache::thrift::ident::sLong,
    ::apache::thrift::ident::sString,
    ::apache::thrift::ident::sByte,
    ::apache::thrift::ident::mListList
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::struct_t<::cpp2::MyDataItem>,
    ::apache::thrift::type::enum_t<::cpp2::MyEnum>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::byte_t,
    ::apache::thrift::type::i16_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i16_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i64_t>,
    ::apache::thrift::type::list<::apache::thrift::type::string_t>,
    ::apache::thrift::type::list<::apache::thrift::type::bool_t>,
    ::apache::thrift::type::list<::apache::thrift::type::byte_t>,
    ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::cpp2::MyStruct>>,
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::bool_t>,
    ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::i32_t>,
    ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::bool_t>,
    ::apache::thrift::type::set<::apache::thrift::type::i16_t>,
    ::apache::thrift::type::set<::apache::thrift::type::struct_t<::cpp2::MyStruct>>,
    ::apache::thrift::type::set<::apache::thrift::type::i64_t>,
    ::apache::thrift::type::set<::apache::thrift::type::string_t>,
    ::apache::thrift::type::set<::apache::thrift::type::byte_t>,
    ::apache::thrift::type::map<::apache::thrift::type::list<::apache::thrift::type::i32_t>, ::apache::thrift::type::list<::apache::thrift::type::i32_t>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  MyStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStruct(apache::thrift::FragileConstructor, ::std::int64_t MyIntField__arg, ::std::string MyStringField__arg, ::cpp2::MyDataItem MyDataField__arg, ::cpp2::MyEnum myEnum__arg, bool MyBoolField__arg, ::std::int8_t MyByteField__arg, ::std::int16_t MyShortField__arg, ::std::int64_t MyLongField__arg, double MyDoubleField__arg, ::std::vector<double> lDouble__arg, ::std::vector<::std::int16_t> lShort__arg, ::std::vector<::std::int32_t> lInteger__arg, ::std::vector<::std::int64_t> lLong__arg, ::std::vector<::std::string> lString__arg, ::std::vector<bool> lBool__arg, ::std::vector<::std::int8_t> lByte__arg, ::std::map<::std::int16_t, ::std::string> mShortString__arg, ::std::map<::std::int32_t, ::std::string> mIntegerString__arg, ::std::map<::std::string, ::cpp2::MyStruct> mStringMyStruct__arg, ::std::map<::std::string, bool> mStringBool__arg, ::std::map<::std::int32_t, ::std::int32_t> mIntegerInteger__arg, ::std::map<::std::int32_t, bool> mIntegerBool__arg, ::std::set<::std::int16_t> sShort__arg, ::std::set<::cpp2::MyStruct> sMyStruct__arg, ::std::set<::std::int64_t> sLong__arg, ::std::set<::std::string> sString__arg, ::std::set<::std::int8_t> sByte__arg, ::std::map<::std::vector<::std::int32_t>, ::std::vector<::std::int32_t>> mListList__arg);

  MyStruct(MyStruct&&) noexcept;

  MyStruct(const MyStruct& src);


  MyStruct& operator=(MyStruct&&) noexcept;
  MyStruct& operator=(const MyStruct& src);

  ~MyStruct();

 private:
  ::std::int64_t __fbthrift_field_MyIntField;
 private:
  ::std::string __fbthrift_field_MyStringField;
 private:
  ::cpp2::MyDataItem __fbthrift_field_MyDataField;
 private:
  ::cpp2::MyEnum __fbthrift_field_myEnum;
 private:
  bool __fbthrift_field_MyBoolField;
 private:
  ::std::int8_t __fbthrift_field_MyByteField;
 private:
  ::std::int16_t __fbthrift_field_MyShortField;
 private:
  ::std::int64_t __fbthrift_field_MyLongField;
 private:
  double __fbthrift_field_MyDoubleField;
 private:
  ::std::vector<double> __fbthrift_field_lDouble;
 private:
  ::std::vector<::std::int16_t> __fbthrift_field_lShort;
 private:
  ::std::vector<::std::int32_t> __fbthrift_field_lInteger;
 private:
  ::std::vector<::std::int64_t> __fbthrift_field_lLong;
 private:
  ::std::vector<::std::string> __fbthrift_field_lString;
 private:
  ::std::vector<bool> __fbthrift_field_lBool;
 private:
  ::std::vector<::std::int8_t> __fbthrift_field_lByte;
 private:
  ::std::map<::std::int16_t, ::std::string> __fbthrift_field_mShortString;
 private:
  ::std::map<::std::int32_t, ::std::string> __fbthrift_field_mIntegerString;
 private:
  ::std::map<::std::string, ::cpp2::MyStruct> __fbthrift_field_mStringMyStruct;
 private:
  ::std::map<::std::string, bool> __fbthrift_field_mStringBool;
 private:
  ::std::map<::std::int32_t, ::std::int32_t> __fbthrift_field_mIntegerInteger;
 private:
  ::std::map<::std::int32_t, bool> __fbthrift_field_mIntegerBool;
 private:
  ::std::set<::std::int16_t> __fbthrift_field_sShort;
 private:
  ::std::set<::cpp2::MyStruct> __fbthrift_field_sMyStruct;
 private:
  ::std::set<::std::int64_t> __fbthrift_field_sLong;
 private:
  ::std::set<::std::string> __fbthrift_field_sString;
 private:
  ::std::set<::std::int8_t> __fbthrift_field_sByte;
 private:
  ::std::map<::std::vector<::std::int32_t>, ::std::vector<::std::int32_t>> __fbthrift_field_mListList;
 private:
  apache::thrift::detail::isset_bitset<28, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStruct&) const;
  bool operator<(const MyStruct&) const;

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyIntField_ref() const& {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyIntField_ref() & {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyIntField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyIntField), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyIntField() const& {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyIntField() & {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyIntField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyIntField), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyStringField_ref() const& {
    return {this->__fbthrift_field_MyStringField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyStringField_ref() & {
    return {this->__fbthrift_field_MyStringField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyStringField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyStringField), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyStringField() const& {
    return {this->__fbthrift_field_MyStringField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyStringField() & {
    return {this->__fbthrift_field_MyStringField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyStringField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyStringField), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyDataField" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyDataField_ref() const& {
    return {this->__fbthrift_field_MyDataField, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "MyDataField" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyDataField_ref() & {
    return {this->__fbthrift_field_MyDataField, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "MyDataField" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyDataField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyDataField), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "MyDataField" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyDataField() const& {
    return {this->__fbthrift_field_MyDataField, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "MyDataField" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyDataField() & {
    return {this->__fbthrift_field_MyDataField, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "MyDataField" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyDataField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyDataField), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myEnum" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myEnum_ref() const& {
    return {this->__fbthrift_field_myEnum, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myEnum" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myEnum_ref() & {
    return {this->__fbthrift_field_myEnum, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myEnum" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myEnum_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myEnum), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myEnum" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myEnum() const& {
    return {this->__fbthrift_field_myEnum, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myEnum" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myEnum() & {
    return {this->__fbthrift_field_myEnum, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myEnum" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myEnum() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myEnum), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "MyBoolField" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyBoolField_ref() const& {
    return {this->__fbthrift_field_MyBoolField, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "MyBoolField" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyBoolField_ref() & {
    return {this->__fbthrift_field_MyBoolField, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "MyBoolField" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyBoolField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyBoolField), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "MyBoolField" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyBoolField() const& {
    return {this->__fbthrift_field_MyBoolField, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "MyBoolField" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyBoolField() & {
    return {this->__fbthrift_field_MyBoolField, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "MyBoolField" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyBoolField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyBoolField), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "MyByteField" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyByteField_ref() const& {
    return {this->__fbthrift_field_MyByteField, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "MyByteField" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyByteField_ref() & {
    return {this->__fbthrift_field_MyByteField, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "MyByteField" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyByteField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyByteField), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "MyByteField" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyByteField() const& {
    return {this->__fbthrift_field_MyByteField, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "MyByteField" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyByteField() & {
    return {this->__fbthrift_field_MyByteField, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "MyByteField" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyByteField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyByteField), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "MyShortField" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyShortField_ref() const& {
    return {this->__fbthrift_field_MyShortField, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "MyShortField" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyShortField_ref() & {
    return {this->__fbthrift_field_MyShortField, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "MyShortField" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyShortField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyShortField), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "MyShortField" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyShortField() const& {
    return {this->__fbthrift_field_MyShortField, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "MyShortField" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyShortField() & {
    return {this->__fbthrift_field_MyShortField, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "MyShortField" } */
  template <typename..., typename fbthrift_T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyShortField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyShortField), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "MyLongField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyLongField_ref() const& {
    return {this->__fbthrift_field_MyLongField, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "MyLongField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyLongField_ref() & {
    return {this->__fbthrift_field_MyLongField, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "MyLongField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyLongField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyLongField), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "MyLongField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyLongField() const& {
    return {this->__fbthrift_field_MyLongField, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "MyLongField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyLongField() & {
    return {this->__fbthrift_field_MyLongField, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "MyLongField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyLongField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyLongField), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "MyDoubleField" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyDoubleField_ref() const& {
    return {this->__fbthrift_field_MyDoubleField, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "MyDoubleField" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyDoubleField_ref() & {
    return {this->__fbthrift_field_MyDoubleField, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "MyDoubleField" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyDoubleField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyDoubleField), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "MyDoubleField" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyDoubleField() const& {
    return {this->__fbthrift_field_MyDoubleField, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "MyDoubleField" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyDoubleField() & {
    return {this->__fbthrift_field_MyDoubleField, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "MyDoubleField" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyDoubleField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyDoubleField), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "lDouble" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lDouble_ref() const& {
    return {this->__fbthrift_field_lDouble, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "lDouble" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lDouble_ref() & {
    return {this->__fbthrift_field_lDouble, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "lDouble" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lDouble_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lDouble), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "lDouble" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lDouble() const& {
    return {this->__fbthrift_field_lDouble, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "lDouble" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lDouble() & {
    return {this->__fbthrift_field_lDouble, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "lDouble" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lDouble() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lDouble), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "lShort" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lShort_ref() const& {
    return {this->__fbthrift_field_lShort, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "lShort" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lShort_ref() & {
    return {this->__fbthrift_field_lShort, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "lShort" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lShort_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lShort), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "lShort" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lShort() const& {
    return {this->__fbthrift_field_lShort, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "lShort" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lShort() & {
    return {this->__fbthrift_field_lShort, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "lShort" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lShort() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lShort), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "lInteger" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lInteger_ref() const& {
    return {this->__fbthrift_field_lInteger, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "lInteger" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lInteger_ref() & {
    return {this->__fbthrift_field_lInteger, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "lInteger" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lInteger_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lInteger), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "lInteger" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lInteger() const& {
    return {this->__fbthrift_field_lInteger, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "lInteger" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lInteger() & {
    return {this->__fbthrift_field_lInteger, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "lInteger" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lInteger() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lInteger), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "lLong" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lLong_ref() const& {
    return {this->__fbthrift_field_lLong, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "lLong" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lLong_ref() & {
    return {this->__fbthrift_field_lLong, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "lLong" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lLong_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lLong), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "lLong" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lLong() const& {
    return {this->__fbthrift_field_lLong, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "lLong" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lLong() & {
    return {this->__fbthrift_field_lLong, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "lLong" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lLong() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lLong), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "lString" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lString_ref() const& {
    return {this->__fbthrift_field_lString, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "lString" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lString_ref() & {
    return {this->__fbthrift_field_lString, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "lString" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lString_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lString), __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "lString" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lString() const& {
    return {this->__fbthrift_field_lString, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "lString" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lString() & {
    return {this->__fbthrift_field_lString, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "lString" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lString() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lString), __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "lBool" } */
  template <typename..., typename fbthrift_T = ::std::vector<bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lBool_ref() const& {
    return {this->__fbthrift_field_lBool, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "lBool" } */
  template <typename..., typename fbthrift_T = ::std::vector<bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lBool_ref() & {
    return {this->__fbthrift_field_lBool, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "lBool" } */
  template <typename..., typename fbthrift_T = ::std::vector<bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lBool_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lBool), __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "lBool" } */
  template <typename..., typename fbthrift_T = ::std::vector<bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lBool() const& {
    return {this->__fbthrift_field_lBool, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "lBool" } */
  template <typename..., typename fbthrift_T = ::std::vector<bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lBool() & {
    return {this->__fbthrift_field_lBool, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "lBool" } */
  template <typename..., typename fbthrift_T = ::std::vector<bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lBool() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lBool), __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "lByte" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lByte_ref() const& {
    return {this->__fbthrift_field_lByte, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "lByte" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lByte_ref() & {
    return {this->__fbthrift_field_lByte, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "lByte" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lByte_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lByte), __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "lByte" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lByte() const& {
    return {this->__fbthrift_field_lByte, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "lByte" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lByte() & {
    return {this->__fbthrift_field_lByte, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "lByte" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lByte() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lByte), __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "mShortString" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mShortString_ref() const& {
    return {this->__fbthrift_field_mShortString, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "mShortString" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mShortString_ref() & {
    return {this->__fbthrift_field_mShortString, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "mShortString" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mShortString_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mShortString), __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "mShortString" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mShortString() const& {
    return {this->__fbthrift_field_mShortString, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "mShortString" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mShortString() & {
    return {this->__fbthrift_field_mShortString, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "mShortString" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mShortString() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mShortString), __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "mIntegerString" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mIntegerString_ref() const& {
    return {this->__fbthrift_field_mIntegerString, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "mIntegerString" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mIntegerString_ref() & {
    return {this->__fbthrift_field_mIntegerString, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "mIntegerString" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mIntegerString_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mIntegerString), __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "mIntegerString" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mIntegerString() const& {
    return {this->__fbthrift_field_mIntegerString, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "mIntegerString" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mIntegerString() & {
    return {this->__fbthrift_field_mIntegerString, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "mIntegerString" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mIntegerString() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mIntegerString), __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "mStringMyStruct" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mStringMyStruct_ref() const& {
    return {this->__fbthrift_field_mStringMyStruct, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "mStringMyStruct" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mStringMyStruct_ref() & {
    return {this->__fbthrift_field_mStringMyStruct, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "mStringMyStruct" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mStringMyStruct_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mStringMyStruct), __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "mStringMyStruct" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mStringMyStruct() const& {
    return {this->__fbthrift_field_mStringMyStruct, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "mStringMyStruct" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mStringMyStruct() & {
    return {this->__fbthrift_field_mStringMyStruct, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "mStringMyStruct" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mStringMyStruct() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mStringMyStruct), __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "mStringBool" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mStringBool_ref() const& {
    return {this->__fbthrift_field_mStringBool, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "mStringBool" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mStringBool_ref() & {
    return {this->__fbthrift_field_mStringBool, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "mStringBool" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mStringBool_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mStringBool), __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "mStringBool" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mStringBool() const& {
    return {this->__fbthrift_field_mStringBool, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "mStringBool" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mStringBool() & {
    return {this->__fbthrift_field_mStringBool, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "mStringBool" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mStringBool() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mStringBool), __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "mIntegerInteger" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mIntegerInteger_ref() const& {
    return {this->__fbthrift_field_mIntegerInteger, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "mIntegerInteger" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mIntegerInteger_ref() & {
    return {this->__fbthrift_field_mIntegerInteger, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "mIntegerInteger" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mIntegerInteger_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mIntegerInteger), __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "mIntegerInteger" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mIntegerInteger() const& {
    return {this->__fbthrift_field_mIntegerInteger, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "mIntegerInteger" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mIntegerInteger() & {
    return {this->__fbthrift_field_mIntegerInteger, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "mIntegerInteger" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mIntegerInteger() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mIntegerInteger), __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "mIntegerBool" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mIntegerBool_ref() const& {
    return {this->__fbthrift_field_mIntegerBool, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "mIntegerBool" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mIntegerBool_ref() & {
    return {this->__fbthrift_field_mIntegerBool, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "mIntegerBool" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mIntegerBool_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mIntegerBool), __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "mIntegerBool" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mIntegerBool() const& {
    return {this->__fbthrift_field_mIntegerBool, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "mIntegerBool" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mIntegerBool() & {
    return {this->__fbthrift_field_mIntegerBool, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "mIntegerBool" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mIntegerBool() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mIntegerBool), __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "sShort" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> sShort_ref() const& {
    return {this->__fbthrift_field_sShort, __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "sShort" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> sShort_ref() & {
    return {this->__fbthrift_field_sShort, __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "sShort" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> sShort_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sShort), __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "sShort" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> sShort() const& {
    return {this->__fbthrift_field_sShort, __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "sShort" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> sShort() & {
    return {this->__fbthrift_field_sShort, __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "sShort" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> sShort() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sShort), __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "sMyStruct" } */
  template <typename..., typename fbthrift_T = ::std::set<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> sMyStruct_ref() const& {
    return {this->__fbthrift_field_sMyStruct, __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "sMyStruct" } */
  template <typename..., typename fbthrift_T = ::std::set<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> sMyStruct_ref() & {
    return {this->__fbthrift_field_sMyStruct, __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "sMyStruct" } */
  template <typename..., typename fbthrift_T = ::std::set<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> sMyStruct_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sMyStruct), __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "sMyStruct" } */
  template <typename..., typename fbthrift_T = ::std::set<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> sMyStruct() const& {
    return {this->__fbthrift_field_sMyStruct, __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "sMyStruct" } */
  template <typename..., typename fbthrift_T = ::std::set<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> sMyStruct() & {
    return {this->__fbthrift_field_sMyStruct, __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "sMyStruct" } */
  template <typename..., typename fbthrift_T = ::std::set<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> sMyStruct() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sMyStruct), __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "sLong" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> sLong_ref() const& {
    return {this->__fbthrift_field_sLong, __isset.at(24), __isset.bit(24)};
  }

  /** Glean { "field": "sLong" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> sLong_ref() & {
    return {this->__fbthrift_field_sLong, __isset.at(24), __isset.bit(24)};
  }

  /** Glean { "field": "sLong" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> sLong_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sLong), __isset.at(24), __isset.bit(24)};
  }

  /** Glean { "field": "sLong" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> sLong() const& {
    return {this->__fbthrift_field_sLong, __isset.at(24), __isset.bit(24)};
  }

  /** Glean { "field": "sLong" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> sLong() & {
    return {this->__fbthrift_field_sLong, __isset.at(24), __isset.bit(24)};
  }

  /** Glean { "field": "sLong" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> sLong() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sLong), __isset.at(24), __isset.bit(24)};
  }

  /** Glean { "field": "sString" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> sString_ref() const& {
    return {this->__fbthrift_field_sString, __isset.at(25), __isset.bit(25)};
  }

  /** Glean { "field": "sString" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> sString_ref() & {
    return {this->__fbthrift_field_sString, __isset.at(25), __isset.bit(25)};
  }

  /** Glean { "field": "sString" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> sString_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sString), __isset.at(25), __isset.bit(25)};
  }

  /** Glean { "field": "sString" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> sString() const& {
    return {this->__fbthrift_field_sString, __isset.at(25), __isset.bit(25)};
  }

  /** Glean { "field": "sString" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> sString() & {
    return {this->__fbthrift_field_sString, __isset.at(25), __isset.bit(25)};
  }

  /** Glean { "field": "sString" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> sString() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sString), __isset.at(25), __isset.bit(25)};
  }

  /** Glean { "field": "sByte" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> sByte_ref() const& {
    return {this->__fbthrift_field_sByte, __isset.at(26), __isset.bit(26)};
  }

  /** Glean { "field": "sByte" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> sByte_ref() & {
    return {this->__fbthrift_field_sByte, __isset.at(26), __isset.bit(26)};
  }

  /** Glean { "field": "sByte" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> sByte_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sByte), __isset.at(26), __isset.bit(26)};
  }

  /** Glean { "field": "sByte" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> sByte() const& {
    return {this->__fbthrift_field_sByte, __isset.at(26), __isset.bit(26)};
  }

  /** Glean { "field": "sByte" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> sByte() & {
    return {this->__fbthrift_field_sByte, __isset.at(26), __isset.bit(26)};
  }

  /** Glean { "field": "sByte" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> sByte() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sByte), __isset.at(26), __isset.bit(26)};
  }

  /** Glean { "field": "mListList" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::vector<::std::int32_t>, ::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mListList_ref() const& {
    return {this->__fbthrift_field_mListList, __isset.at(27), __isset.bit(27)};
  }

  /** Glean { "field": "mListList" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::vector<::std::int32_t>, ::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mListList_ref() & {
    return {this->__fbthrift_field_mListList, __isset.at(27), __isset.bit(27)};
  }

  /** Glean { "field": "mListList" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::vector<::std::int32_t>, ::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mListList_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mListList), __isset.at(27), __isset.bit(27)};
  }

  /** Glean { "field": "mListList" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::vector<::std::int32_t>, ::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mListList() const& {
    return {this->__fbthrift_field_mListList, __isset.at(27), __isset.bit(27)};
  }

  /** Glean { "field": "mListList" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::vector<::std::int32_t>, ::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mListList() & {
    return {this->__fbthrift_field_mListList, __isset.at(27), __isset.bit(27)};
  }

  /** Glean { "field": "mListList" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::vector<::std::int32_t>, ::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mListList() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mListList), __isset.at(27), __isset.bit(27)};
  }

  /** Glean { "field": "MyIntField" } */
  [[deprecated("Use `FOO.MyIntField().value()` instead of `FOO.get_MyIntField()`")]]
  ::std::int64_t get_MyIntField() const;

  /** Glean { "field": "MyIntField" } */
  [[deprecated("Use `FOO.MyIntField() = BAR` instead of `FOO.set_MyIntField(BAR)`")]]
  ::std::int64_t& set_MyIntField(::std::int64_t MyIntField_);

  /** Glean { "field": "MyStringField" } */
  [[deprecated("Use `FOO.MyStringField().value()` instead of `FOO.get_MyStringField()`")]]
  const ::std::string& get_MyStringField() const& {
    return __fbthrift_field_MyStringField;
  }

  /** Glean { "field": "MyStringField" } */
  [[deprecated("Use `FOO.MyStringField().value()` instead of `FOO.get_MyStringField()`")]]
  ::std::string get_MyStringField() && {
    return static_cast<::std::string&&>(__fbthrift_field_MyStringField);
  }

  /** Glean { "field": "MyStringField" } */
  template <typename T_MyStruct_MyStringField_struct_setter = ::std::string>
  [[deprecated("Use `FOO.MyStringField() = BAR` instead of `FOO.set_MyStringField(BAR)`")]]
  ::std::string& set_MyStringField(T_MyStruct_MyStringField_struct_setter&& MyStringField_) {
    MyStringField_ref() = std::forward<T_MyStruct_MyStringField_struct_setter>(MyStringField_);
    return __fbthrift_field_MyStringField;
  }

  /** Glean { "field": "MyDataField" } */
  [[deprecated("Use `FOO.MyDataField().value()` instead of `FOO.get_MyDataField()`")]]
  const ::cpp2::MyDataItem& get_MyDataField() const&;

  /** Glean { "field": "MyDataField" } */
  [[deprecated("Use `FOO.MyDataField().value()` instead of `FOO.get_MyDataField()`")]]
  ::cpp2::MyDataItem get_MyDataField() &&;

  /** Glean { "field": "MyDataField" } */
  template <typename T_MyStruct_MyDataField_struct_setter = ::cpp2::MyDataItem>
  [[deprecated("Use `FOO.MyDataField() = BAR` instead of `FOO.set_MyDataField(BAR)`")]]
  ::cpp2::MyDataItem& set_MyDataField(T_MyStruct_MyDataField_struct_setter&& MyDataField_) {
    MyDataField_ref() = std::forward<T_MyStruct_MyDataField_struct_setter>(MyDataField_);
    return __fbthrift_field_MyDataField;
  }

  /** Glean { "field": "myEnum" } */
  [[deprecated("Use `FOO.myEnum().value()` instead of `FOO.get_myEnum()`")]]
  ::cpp2::MyEnum get_myEnum() const;

  /** Glean { "field": "myEnum" } */
  [[deprecated("Use `FOO.myEnum() = BAR` instead of `FOO.set_myEnum(BAR)`")]]
  ::cpp2::MyEnum& set_myEnum(::cpp2::MyEnum myEnum_);

  /** Glean { "field": "MyBoolField" } */
  [[deprecated("Use `FOO.MyBoolField().value()` instead of `FOO.get_MyBoolField()`")]]
  bool get_MyBoolField() const;

  /** Glean { "field": "MyBoolField" } */
  [[deprecated("Use `FOO.MyBoolField() = BAR` instead of `FOO.set_MyBoolField(BAR)`")]]
  bool& set_MyBoolField(bool MyBoolField_);

  /** Glean { "field": "MyByteField" } */
  [[deprecated("Use `FOO.MyByteField().value()` instead of `FOO.get_MyByteField()`")]]
  ::std::int8_t get_MyByteField() const;

  /** Glean { "field": "MyByteField" } */
  [[deprecated("Use `FOO.MyByteField() = BAR` instead of `FOO.set_MyByteField(BAR)`")]]
  ::std::int8_t& set_MyByteField(::std::int8_t MyByteField_);

  /** Glean { "field": "MyShortField" } */
  [[deprecated("Use `FOO.MyShortField().value()` instead of `FOO.get_MyShortField()`")]]
  ::std::int16_t get_MyShortField() const;

  /** Glean { "field": "MyShortField" } */
  [[deprecated("Use `FOO.MyShortField() = BAR` instead of `FOO.set_MyShortField(BAR)`")]]
  ::std::int16_t& set_MyShortField(::std::int16_t MyShortField_);

  /** Glean { "field": "MyLongField" } */
  [[deprecated("Use `FOO.MyLongField().value()` instead of `FOO.get_MyLongField()`")]]
  ::std::int64_t get_MyLongField() const;

  /** Glean { "field": "MyLongField" } */
  [[deprecated("Use `FOO.MyLongField() = BAR` instead of `FOO.set_MyLongField(BAR)`")]]
  ::std::int64_t& set_MyLongField(::std::int64_t MyLongField_);

  /** Glean { "field": "MyDoubleField" } */
  [[deprecated("Use `FOO.MyDoubleField().value()` instead of `FOO.get_MyDoubleField()`")]]
  double get_MyDoubleField() const;

  /** Glean { "field": "MyDoubleField" } */
  [[deprecated("Use `FOO.MyDoubleField() = BAR` instead of `FOO.set_MyDoubleField(BAR)`")]]
  double& set_MyDoubleField(double MyDoubleField_);

  /** Glean { "field": "lDouble" } */
  [[deprecated("Use `FOO.lDouble().value()` instead of `FOO.get_lDouble()`")]]
  const ::std::vector<double>& get_lDouble() const&;

  /** Glean { "field": "lDouble" } */
  [[deprecated("Use `FOO.lDouble().value()` instead of `FOO.get_lDouble()`")]]
  ::std::vector<double> get_lDouble() &&;

  /** Glean { "field": "lDouble" } */
  template <typename T_MyStruct_lDouble_struct_setter = ::std::vector<double>>
  [[deprecated("Use `FOO.lDouble() = BAR` instead of `FOO.set_lDouble(BAR)`")]]
  ::std::vector<double>& set_lDouble(T_MyStruct_lDouble_struct_setter&& lDouble_) {
    lDouble_ref() = std::forward<T_MyStruct_lDouble_struct_setter>(lDouble_);
    return __fbthrift_field_lDouble;
  }

  /** Glean { "field": "lShort" } */
  [[deprecated("Use `FOO.lShort().value()` instead of `FOO.get_lShort()`")]]
  const ::std::vector<::std::int16_t>& get_lShort() const&;

  /** Glean { "field": "lShort" } */
  [[deprecated("Use `FOO.lShort().value()` instead of `FOO.get_lShort()`")]]
  ::std::vector<::std::int16_t> get_lShort() &&;

  /** Glean { "field": "lShort" } */
  template <typename T_MyStruct_lShort_struct_setter = ::std::vector<::std::int16_t>>
  [[deprecated("Use `FOO.lShort() = BAR` instead of `FOO.set_lShort(BAR)`")]]
  ::std::vector<::std::int16_t>& set_lShort(T_MyStruct_lShort_struct_setter&& lShort_) {
    lShort_ref() = std::forward<T_MyStruct_lShort_struct_setter>(lShort_);
    return __fbthrift_field_lShort;
  }

  /** Glean { "field": "lInteger" } */
  [[deprecated("Use `FOO.lInteger().value()` instead of `FOO.get_lInteger()`")]]
  const ::std::vector<::std::int32_t>& get_lInteger() const&;

  /** Glean { "field": "lInteger" } */
  [[deprecated("Use `FOO.lInteger().value()` instead of `FOO.get_lInteger()`")]]
  ::std::vector<::std::int32_t> get_lInteger() &&;

  /** Glean { "field": "lInteger" } */
  template <typename T_MyStruct_lInteger_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.lInteger() = BAR` instead of `FOO.set_lInteger(BAR)`")]]
  ::std::vector<::std::int32_t>& set_lInteger(T_MyStruct_lInteger_struct_setter&& lInteger_) {
    lInteger_ref() = std::forward<T_MyStruct_lInteger_struct_setter>(lInteger_);
    return __fbthrift_field_lInteger;
  }

  /** Glean { "field": "lLong" } */
  [[deprecated("Use `FOO.lLong().value()` instead of `FOO.get_lLong()`")]]
  const ::std::vector<::std::int64_t>& get_lLong() const&;

  /** Glean { "field": "lLong" } */
  [[deprecated("Use `FOO.lLong().value()` instead of `FOO.get_lLong()`")]]
  ::std::vector<::std::int64_t> get_lLong() &&;

  /** Glean { "field": "lLong" } */
  template <typename T_MyStruct_lLong_struct_setter = ::std::vector<::std::int64_t>>
  [[deprecated("Use `FOO.lLong() = BAR` instead of `FOO.set_lLong(BAR)`")]]
  ::std::vector<::std::int64_t>& set_lLong(T_MyStruct_lLong_struct_setter&& lLong_) {
    lLong_ref() = std::forward<T_MyStruct_lLong_struct_setter>(lLong_);
    return __fbthrift_field_lLong;
  }

  /** Glean { "field": "lString" } */
  [[deprecated("Use `FOO.lString().value()` instead of `FOO.get_lString()`")]]
  const ::std::vector<::std::string>& get_lString() const&;

  /** Glean { "field": "lString" } */
  [[deprecated("Use `FOO.lString().value()` instead of `FOO.get_lString()`")]]
  ::std::vector<::std::string> get_lString() &&;

  /** Glean { "field": "lString" } */
  template <typename T_MyStruct_lString_struct_setter = ::std::vector<::std::string>>
  [[deprecated("Use `FOO.lString() = BAR` instead of `FOO.set_lString(BAR)`")]]
  ::std::vector<::std::string>& set_lString(T_MyStruct_lString_struct_setter&& lString_) {
    lString_ref() = std::forward<T_MyStruct_lString_struct_setter>(lString_);
    return __fbthrift_field_lString;
  }

  /** Glean { "field": "lBool" } */
  [[deprecated("Use `FOO.lBool().value()` instead of `FOO.get_lBool()`")]]
  const ::std::vector<bool>& get_lBool() const&;

  /** Glean { "field": "lBool" } */
  [[deprecated("Use `FOO.lBool().value()` instead of `FOO.get_lBool()`")]]
  ::std::vector<bool> get_lBool() &&;

  /** Glean { "field": "lBool" } */
  template <typename T_MyStruct_lBool_struct_setter = ::std::vector<bool>>
  [[deprecated("Use `FOO.lBool() = BAR` instead of `FOO.set_lBool(BAR)`")]]
  ::std::vector<bool>& set_lBool(T_MyStruct_lBool_struct_setter&& lBool_) {
    lBool_ref() = std::forward<T_MyStruct_lBool_struct_setter>(lBool_);
    return __fbthrift_field_lBool;
  }

  /** Glean { "field": "lByte" } */
  [[deprecated("Use `FOO.lByte().value()` instead of `FOO.get_lByte()`")]]
  const ::std::vector<::std::int8_t>& get_lByte() const&;

  /** Glean { "field": "lByte" } */
  [[deprecated("Use `FOO.lByte().value()` instead of `FOO.get_lByte()`")]]
  ::std::vector<::std::int8_t> get_lByte() &&;

  /** Glean { "field": "lByte" } */
  template <typename T_MyStruct_lByte_struct_setter = ::std::vector<::std::int8_t>>
  [[deprecated("Use `FOO.lByte() = BAR` instead of `FOO.set_lByte(BAR)`")]]
  ::std::vector<::std::int8_t>& set_lByte(T_MyStruct_lByte_struct_setter&& lByte_) {
    lByte_ref() = std::forward<T_MyStruct_lByte_struct_setter>(lByte_);
    return __fbthrift_field_lByte;
  }

  /** Glean { "field": "mShortString" } */
  [[deprecated("Use `FOO.mShortString().value()` instead of `FOO.get_mShortString()`")]]
  const ::std::map<::std::int16_t, ::std::string>& get_mShortString() const&;

  /** Glean { "field": "mShortString" } */
  [[deprecated("Use `FOO.mShortString().value()` instead of `FOO.get_mShortString()`")]]
  ::std::map<::std::int16_t, ::std::string> get_mShortString() &&;

  /** Glean { "field": "mShortString" } */
  template <typename T_MyStruct_mShortString_struct_setter = ::std::map<::std::int16_t, ::std::string>>
  [[deprecated("Use `FOO.mShortString() = BAR` instead of `FOO.set_mShortString(BAR)`")]]
  ::std::map<::std::int16_t, ::std::string>& set_mShortString(T_MyStruct_mShortString_struct_setter&& mShortString_) {
    mShortString_ref() = std::forward<T_MyStruct_mShortString_struct_setter>(mShortString_);
    return __fbthrift_field_mShortString;
  }

  /** Glean { "field": "mIntegerString" } */
  [[deprecated("Use `FOO.mIntegerString().value()` instead of `FOO.get_mIntegerString()`")]]
  const ::std::map<::std::int32_t, ::std::string>& get_mIntegerString() const&;

  /** Glean { "field": "mIntegerString" } */
  [[deprecated("Use `FOO.mIntegerString().value()` instead of `FOO.get_mIntegerString()`")]]
  ::std::map<::std::int32_t, ::std::string> get_mIntegerString() &&;

  /** Glean { "field": "mIntegerString" } */
  template <typename T_MyStruct_mIntegerString_struct_setter = ::std::map<::std::int32_t, ::std::string>>
  [[deprecated("Use `FOO.mIntegerString() = BAR` instead of `FOO.set_mIntegerString(BAR)`")]]
  ::std::map<::std::int32_t, ::std::string>& set_mIntegerString(T_MyStruct_mIntegerString_struct_setter&& mIntegerString_) {
    mIntegerString_ref() = std::forward<T_MyStruct_mIntegerString_struct_setter>(mIntegerString_);
    return __fbthrift_field_mIntegerString;
  }

  /** Glean { "field": "mStringMyStruct" } */
  [[deprecated("Use `FOO.mStringMyStruct().value()` instead of `FOO.get_mStringMyStruct()`")]]
  const ::std::map<::std::string, ::cpp2::MyStruct>& get_mStringMyStruct() const&;

  /** Glean { "field": "mStringMyStruct" } */
  [[deprecated("Use `FOO.mStringMyStruct().value()` instead of `FOO.get_mStringMyStruct()`")]]
  ::std::map<::std::string, ::cpp2::MyStruct> get_mStringMyStruct() &&;

  /** Glean { "field": "mStringMyStruct" } */
  template <typename T_MyStruct_mStringMyStruct_struct_setter = ::std::map<::std::string, ::cpp2::MyStruct>>
  [[deprecated("Use `FOO.mStringMyStruct() = BAR` instead of `FOO.set_mStringMyStruct(BAR)`")]]
  ::std::map<::std::string, ::cpp2::MyStruct>& set_mStringMyStruct(T_MyStruct_mStringMyStruct_struct_setter&& mStringMyStruct_) {
    mStringMyStruct_ref() = std::forward<T_MyStruct_mStringMyStruct_struct_setter>(mStringMyStruct_);
    return __fbthrift_field_mStringMyStruct;
  }

  /** Glean { "field": "mStringBool" } */
  [[deprecated("Use `FOO.mStringBool().value()` instead of `FOO.get_mStringBool()`")]]
  const ::std::map<::std::string, bool>& get_mStringBool() const&;

  /** Glean { "field": "mStringBool" } */
  [[deprecated("Use `FOO.mStringBool().value()` instead of `FOO.get_mStringBool()`")]]
  ::std::map<::std::string, bool> get_mStringBool() &&;

  /** Glean { "field": "mStringBool" } */
  template <typename T_MyStruct_mStringBool_struct_setter = ::std::map<::std::string, bool>>
  [[deprecated("Use `FOO.mStringBool() = BAR` instead of `FOO.set_mStringBool(BAR)`")]]
  ::std::map<::std::string, bool>& set_mStringBool(T_MyStruct_mStringBool_struct_setter&& mStringBool_) {
    mStringBool_ref() = std::forward<T_MyStruct_mStringBool_struct_setter>(mStringBool_);
    return __fbthrift_field_mStringBool;
  }

  /** Glean { "field": "mIntegerInteger" } */
  [[deprecated("Use `FOO.mIntegerInteger().value()` instead of `FOO.get_mIntegerInteger()`")]]
  const ::std::map<::std::int32_t, ::std::int32_t>& get_mIntegerInteger() const&;

  /** Glean { "field": "mIntegerInteger" } */
  [[deprecated("Use `FOO.mIntegerInteger().value()` instead of `FOO.get_mIntegerInteger()`")]]
  ::std::map<::std::int32_t, ::std::int32_t> get_mIntegerInteger() &&;

  /** Glean { "field": "mIntegerInteger" } */
  template <typename T_MyStruct_mIntegerInteger_struct_setter = ::std::map<::std::int32_t, ::std::int32_t>>
  [[deprecated("Use `FOO.mIntegerInteger() = BAR` instead of `FOO.set_mIntegerInteger(BAR)`")]]
  ::std::map<::std::int32_t, ::std::int32_t>& set_mIntegerInteger(T_MyStruct_mIntegerInteger_struct_setter&& mIntegerInteger_) {
    mIntegerInteger_ref() = std::forward<T_MyStruct_mIntegerInteger_struct_setter>(mIntegerInteger_);
    return __fbthrift_field_mIntegerInteger;
  }

  /** Glean { "field": "mIntegerBool" } */
  [[deprecated("Use `FOO.mIntegerBool().value()` instead of `FOO.get_mIntegerBool()`")]]
  const ::std::map<::std::int32_t, bool>& get_mIntegerBool() const&;

  /** Glean { "field": "mIntegerBool" } */
  [[deprecated("Use `FOO.mIntegerBool().value()` instead of `FOO.get_mIntegerBool()`")]]
  ::std::map<::std::int32_t, bool> get_mIntegerBool() &&;

  /** Glean { "field": "mIntegerBool" } */
  template <typename T_MyStruct_mIntegerBool_struct_setter = ::std::map<::std::int32_t, bool>>
  [[deprecated("Use `FOO.mIntegerBool() = BAR` instead of `FOO.set_mIntegerBool(BAR)`")]]
  ::std::map<::std::int32_t, bool>& set_mIntegerBool(T_MyStruct_mIntegerBool_struct_setter&& mIntegerBool_) {
    mIntegerBool_ref() = std::forward<T_MyStruct_mIntegerBool_struct_setter>(mIntegerBool_);
    return __fbthrift_field_mIntegerBool;
  }

  /** Glean { "field": "sShort" } */
  [[deprecated("Use `FOO.sShort().value()` instead of `FOO.get_sShort()`")]]
  const ::std::set<::std::int16_t>& get_sShort() const&;

  /** Glean { "field": "sShort" } */
  [[deprecated("Use `FOO.sShort().value()` instead of `FOO.get_sShort()`")]]
  ::std::set<::std::int16_t> get_sShort() &&;

  /** Glean { "field": "sShort" } */
  template <typename T_MyStruct_sShort_struct_setter = ::std::set<::std::int16_t>>
  [[deprecated("Use `FOO.sShort() = BAR` instead of `FOO.set_sShort(BAR)`")]]
  ::std::set<::std::int16_t>& set_sShort(T_MyStruct_sShort_struct_setter&& sShort_) {
    sShort_ref() = std::forward<T_MyStruct_sShort_struct_setter>(sShort_);
    return __fbthrift_field_sShort;
  }

  /** Glean { "field": "sMyStruct" } */
  [[deprecated("Use `FOO.sMyStruct().value()` instead of `FOO.get_sMyStruct()`")]]
  const ::std::set<::cpp2::MyStruct>& get_sMyStruct() const&;

  /** Glean { "field": "sMyStruct" } */
  [[deprecated("Use `FOO.sMyStruct().value()` instead of `FOO.get_sMyStruct()`")]]
  ::std::set<::cpp2::MyStruct> get_sMyStruct() &&;

  /** Glean { "field": "sMyStruct" } */
  template <typename T_MyStruct_sMyStruct_struct_setter = ::std::set<::cpp2::MyStruct>>
  [[deprecated("Use `FOO.sMyStruct() = BAR` instead of `FOO.set_sMyStruct(BAR)`")]]
  ::std::set<::cpp2::MyStruct>& set_sMyStruct(T_MyStruct_sMyStruct_struct_setter&& sMyStruct_) {
    sMyStruct_ref() = std::forward<T_MyStruct_sMyStruct_struct_setter>(sMyStruct_);
    return __fbthrift_field_sMyStruct;
  }

  /** Glean { "field": "sLong" } */
  [[deprecated("Use `FOO.sLong().value()` instead of `FOO.get_sLong()`")]]
  const ::std::set<::std::int64_t>& get_sLong() const&;

  /** Glean { "field": "sLong" } */
  [[deprecated("Use `FOO.sLong().value()` instead of `FOO.get_sLong()`")]]
  ::std::set<::std::int64_t> get_sLong() &&;

  /** Glean { "field": "sLong" } */
  template <typename T_MyStruct_sLong_struct_setter = ::std::set<::std::int64_t>>
  [[deprecated("Use `FOO.sLong() = BAR` instead of `FOO.set_sLong(BAR)`")]]
  ::std::set<::std::int64_t>& set_sLong(T_MyStruct_sLong_struct_setter&& sLong_) {
    sLong_ref() = std::forward<T_MyStruct_sLong_struct_setter>(sLong_);
    return __fbthrift_field_sLong;
  }

  /** Glean { "field": "sString" } */
  [[deprecated("Use `FOO.sString().value()` instead of `FOO.get_sString()`")]]
  const ::std::set<::std::string>& get_sString() const&;

  /** Glean { "field": "sString" } */
  [[deprecated("Use `FOO.sString().value()` instead of `FOO.get_sString()`")]]
  ::std::set<::std::string> get_sString() &&;

  /** Glean { "field": "sString" } */
  template <typename T_MyStruct_sString_struct_setter = ::std::set<::std::string>>
  [[deprecated("Use `FOO.sString() = BAR` instead of `FOO.set_sString(BAR)`")]]
  ::std::set<::std::string>& set_sString(T_MyStruct_sString_struct_setter&& sString_) {
    sString_ref() = std::forward<T_MyStruct_sString_struct_setter>(sString_);
    return __fbthrift_field_sString;
  }

  /** Glean { "field": "sByte" } */
  [[deprecated("Use `FOO.sByte().value()` instead of `FOO.get_sByte()`")]]
  const ::std::set<::std::int8_t>& get_sByte() const&;

  /** Glean { "field": "sByte" } */
  [[deprecated("Use `FOO.sByte().value()` instead of `FOO.get_sByte()`")]]
  ::std::set<::std::int8_t> get_sByte() &&;

  /** Glean { "field": "sByte" } */
  template <typename T_MyStruct_sByte_struct_setter = ::std::set<::std::int8_t>>
  [[deprecated("Use `FOO.sByte() = BAR` instead of `FOO.set_sByte(BAR)`")]]
  ::std::set<::std::int8_t>& set_sByte(T_MyStruct_sByte_struct_setter&& sByte_) {
    sByte_ref() = std::forward<T_MyStruct_sByte_struct_setter>(sByte_);
    return __fbthrift_field_sByte;
  }

  /** Glean { "field": "mListList" } */
  [[deprecated("Use `FOO.mListList().value()` instead of `FOO.get_mListList()`")]]
  const ::std::map<::std::vector<::std::int32_t>, ::std::vector<::std::int32_t>>& get_mListList() const&;

  /** Glean { "field": "mListList" } */
  [[deprecated("Use `FOO.mListList().value()` instead of `FOO.get_mListList()`")]]
  ::std::map<::std::vector<::std::int32_t>, ::std::vector<::std::int32_t>> get_mListList() &&;

  /** Glean { "field": "mListList" } */
  template <typename T_MyStruct_mListList_struct_setter = ::std::map<::std::vector<::std::int32_t>, ::std::vector<::std::int32_t>>>
  [[deprecated("Use `FOO.mListList() = BAR` instead of `FOO.set_mListList(BAR)`")]]
  ::std::map<::std::vector<::std::int32_t>, ::std::vector<::std::int32_t>>& set_mListList(T_MyStruct_mListList_struct_setter&& mListList_) {
    mListList_ref() = std::forward<T_MyStruct_mListList_struct_setter>(mListList_);
    return __fbthrift_field_mListList;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStruct>;
  friend void swap(MyStruct& a, MyStruct& b);
};

template <class Protocol_>
unsigned long MyStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/complex-struct/src/module.thrift", "name": "SimpleStruct", "kind": "struct" } */
class SimpleStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::age,
    ::apache::thrift::ident::name
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = SimpleStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  SimpleStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  SimpleStruct(apache::thrift::FragileConstructor, ::std::int64_t age__arg, ::std::string name__arg);

  SimpleStruct(SimpleStruct&&) noexcept;

  SimpleStruct(const SimpleStruct& src);


  SimpleStruct& operator=(SimpleStruct&&) noexcept;
  SimpleStruct& operator=(const SimpleStruct& src);

  ~SimpleStruct();

 private:
  ::std::int64_t __fbthrift_field_age;
 private:
  ::std::string __fbthrift_field_name;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const SimpleStruct&) const;
  bool operator<(const SimpleStruct&) const;

  /** Glean { "field": "age" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> age_ref() const& {
    return {this->__fbthrift_field_age, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "age" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> age_ref() & {
    return {this->__fbthrift_field_age, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "age" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> age_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_age), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "age" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> age() const& {
    return {this->__fbthrift_field_age, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "age" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> age() & {
    return {this->__fbthrift_field_age, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "age" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> age() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_age), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name_ref() const& {
    return {this->__fbthrift_field_name, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name_ref() & {
    return {this->__fbthrift_field_name, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name() const& {
    return {this->__fbthrift_field_name, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name() & {
    return {this->__fbthrift_field_name, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "age" } */
  [[deprecated("Use `FOO.age().value()` instead of `FOO.get_age()`")]]
  ::std::int64_t get_age() const;

  /** Glean { "field": "age" } */
  [[deprecated("Use `FOO.age() = BAR` instead of `FOO.set_age(BAR)`")]]
  ::std::int64_t& set_age(::std::int64_t age_);

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  const ::std::string& get_name() const& {
    return __fbthrift_field_name;
  }

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  ::std::string get_name() && {
    return static_cast<::std::string&&>(__fbthrift_field_name);
  }

  /** Glean { "field": "name" } */
  template <typename T_SimpleStruct_name_struct_setter = ::std::string>
  [[deprecated("Use `FOO.name() = BAR` instead of `FOO.set_name(BAR)`")]]
  ::std::string& set_name(T_SimpleStruct_name_struct_setter&& name_) {
    name_ref() = std::forward<T_SimpleStruct_name_struct_setter>(name_);
    return __fbthrift_field_name;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<SimpleStruct>;
  friend void swap(SimpleStruct& a, SimpleStruct& b);
};

template <class Protocol_>
unsigned long SimpleStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/complex-struct/src/module.thrift", "name": "ComplexNestedStruct", "kind": "struct" } */
class ComplexNestedStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 18;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::setOfSetOfInt,
    ::apache::thrift::ident::listofListOfListOfListOfEnum,
    ::apache::thrift::ident::listOfListOfMyStruct,
    ::apache::thrift::ident::setOfListOfListOfLong,
    ::apache::thrift::ident::setOfSetOfsetOfLong,
    ::apache::thrift::ident::mapStructListOfListOfLong,
    ::apache::thrift::ident::mKeyStructValInt,
    ::apache::thrift::ident::listOfMapKeyIntValInt,
    ::apache::thrift::ident::listOfMapKeyStrValList,
    ::apache::thrift::ident::mapKeySetValLong,
    ::apache::thrift::ident::mapKeyListValLong,
    ::apache::thrift::ident::mapKeyMapValMap,
    ::apache::thrift::ident::mapKeySetValMap,
    ::apache::thrift::ident::NestedMaps,
    ::apache::thrift::ident::mapKeyIntValList,
    ::apache::thrift::ident::mapKeyIntValSet,
    ::apache::thrift::ident::mapKeySetValInt,
    ::apache::thrift::ident::mapKeyListValSet
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::set<::apache::thrift::type::set<::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::list<::apache::thrift::type::list<::apache::thrift::type::list<::apache::thrift::type::list<::apache::thrift::type::enum_t<::cpp2::MyEnum>>>>>,
    ::apache::thrift::type::list<::apache::thrift::type::list<::apache::thrift::type::struct_t<::cpp2::MyStruct>>>,
    ::apache::thrift::type::set<::apache::thrift::type::list<::apache::thrift::type::list<::apache::thrift::type::i64_t>>>,
    ::apache::thrift::type::set<::apache::thrift::type::set<::apache::thrift::type::set<::apache::thrift::type::i64_t>>>,
    ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::list<::apache::thrift::type::list<::apache::thrift::type::struct_t<::cpp2::MyStruct>>>>,
    ::apache::thrift::type::map<::apache::thrift::type::struct_t<::cpp2::MyStruct>, ::apache::thrift::type::i32_t>,
    ::apache::thrift::type::list<::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::list<::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::list<::apache::thrift::type::struct_t<::cpp2::MyStruct>>>>,
    ::apache::thrift::type::map<::apache::thrift::type::set<::apache::thrift::type::i32_t>, ::apache::thrift::type::i64_t>,
    ::apache::thrift::type::map<::apache::thrift::type::list<::apache::thrift::type::string_t>, ::apache::thrift::type::i32_t>,
    ::apache::thrift::type::map<::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::string_t>, ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::string_t>>,
    ::apache::thrift::type::map<::apache::thrift::type::set<::apache::thrift::type::list<::apache::thrift::type::i32_t>>, ::apache::thrift::type::map<::apache::thrift::type::list<::apache::thrift::type::set<::apache::thrift::type::string_t>>, ::apache::thrift::type::string_t>>,
    ::apache::thrift::type::map<::apache::thrift::type::map<::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::string_t>, ::apache::thrift::type::string_t>, ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::string_t>>,
    ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::list<::apache::thrift::type::struct_t<::cpp2::MyStruct>>>,
    ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::set<::apache::thrift::type::bool_t>>,
    ::apache::thrift::type::map<::apache::thrift::type::set<::apache::thrift::type::bool_t>, ::apache::thrift::type::enum_t<::cpp2::MyEnum>>,
    ::apache::thrift::type::map<::apache::thrift::type::list<::apache::thrift::type::i32_t>, ::apache::thrift::type::set<::apache::thrift::type::map<::apache::thrift::type::double_t, ::apache::thrift::type::string_t>>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ComplexNestedStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  ComplexNestedStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ComplexNestedStruct(apache::thrift::FragileConstructor, ::std::set<::std::set<::std::int32_t>> setOfSetOfInt__arg, ::std::vector<::std::vector<::std::vector<::std::vector<::cpp2::MyEnum>>>> listofListOfListOfListOfEnum__arg, ::std::vector<::std::vector<::cpp2::MyStruct>> listOfListOfMyStruct__arg, ::std::set<::std::vector<::std::vector<::std::int64_t>>> setOfListOfListOfLong__arg, ::std::set<::std::set<::std::set<::std::int64_t>>> setOfSetOfsetOfLong__arg, ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::MyStruct>>> mapStructListOfListOfLong__arg, ::std::map<::cpp2::MyStruct, ::std::int32_t> mKeyStructValInt__arg, ::std::vector<::std::map<::std::int32_t, ::std::int32_t>> listOfMapKeyIntValInt__arg, ::std::vector<::std::map<::std::string, ::std::vector<::cpp2::MyStruct>>> listOfMapKeyStrValList__arg, ::std::map<::std::set<::std::int32_t>, ::std::int64_t> mapKeySetValLong__arg, ::std::map<::std::vector<::std::string>, ::std::int32_t> mapKeyListValLong__arg, ::std::map<::std::map<::std::int32_t, ::std::string>, ::std::map<::std::int32_t, ::std::string>> mapKeyMapValMap__arg, ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>> mapKeySetValMap__arg, ::std::map<::std::map<::std::map<::std::int32_t, ::std::string>, ::std::string>, ::std::map<::std::int32_t, ::std::string>> NestedMaps__arg, ::std::map<::std::int32_t, ::std::vector<::cpp2::MyStruct>> mapKeyIntValList__arg, ::std::map<::std::int32_t, ::std::set<bool>> mapKeyIntValSet__arg, ::std::map<::std::set<bool>, ::cpp2::MyEnum> mapKeySetValInt__arg, ::std::map<::std::vector<::std::int32_t>, ::std::set<::std::map<double, ::std::string>>> mapKeyListValSet__arg);

  ComplexNestedStruct(ComplexNestedStruct&&) noexcept;

  ComplexNestedStruct(const ComplexNestedStruct& src);


  ComplexNestedStruct& operator=(ComplexNestedStruct&&) noexcept;
  ComplexNestedStruct& operator=(const ComplexNestedStruct& src);

  ~ComplexNestedStruct();

 private:
  ::std::set<::std::set<::std::int32_t>> __fbthrift_field_setOfSetOfInt;
 private:
  ::std::vector<::std::vector<::std::vector<::std::vector<::cpp2::MyEnum>>>> __fbthrift_field_listofListOfListOfListOfEnum;
 private:
  ::std::vector<::std::vector<::cpp2::MyStruct>> __fbthrift_field_listOfListOfMyStruct;
 private:
  ::std::set<::std::vector<::std::vector<::std::int64_t>>> __fbthrift_field_setOfListOfListOfLong;
 private:
  ::std::set<::std::set<::std::set<::std::int64_t>>> __fbthrift_field_setOfSetOfsetOfLong;
 private:
  ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::MyStruct>>> __fbthrift_field_mapStructListOfListOfLong;
 private:
  ::std::map<::cpp2::MyStruct, ::std::int32_t> __fbthrift_field_mKeyStructValInt;
 private:
  ::std::vector<::std::map<::std::int32_t, ::std::int32_t>> __fbthrift_field_listOfMapKeyIntValInt;
 private:
  ::std::vector<::std::map<::std::string, ::std::vector<::cpp2::MyStruct>>> __fbthrift_field_listOfMapKeyStrValList;
 private:
  ::std::map<::std::set<::std::int32_t>, ::std::int64_t> __fbthrift_field_mapKeySetValLong;
 private:
  ::std::map<::std::vector<::std::string>, ::std::int32_t> __fbthrift_field_mapKeyListValLong;
 private:
  ::std::map<::std::map<::std::int32_t, ::std::string>, ::std::map<::std::int32_t, ::std::string>> __fbthrift_field_mapKeyMapValMap;
 private:
  ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>> __fbthrift_field_mapKeySetValMap;
 private:
  ::std::map<::std::map<::std::map<::std::int32_t, ::std::string>, ::std::string>, ::std::map<::std::int32_t, ::std::string>> __fbthrift_field_NestedMaps;
 private:
  ::std::map<::std::int32_t, ::std::vector<::cpp2::MyStruct>> __fbthrift_field_mapKeyIntValList;
 private:
  ::std::map<::std::int32_t, ::std::set<bool>> __fbthrift_field_mapKeyIntValSet;
 private:
  ::std::map<::std::set<bool>, ::cpp2::MyEnum> __fbthrift_field_mapKeySetValInt;
 private:
  ::std::map<::std::vector<::std::int32_t>, ::std::set<::std::map<double, ::std::string>>> __fbthrift_field_mapKeyListValSet;
 private:
  apache::thrift::detail::isset_bitset<18, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const ComplexNestedStruct&) const;
  bool operator<(const ComplexNestedStruct&) const;

  /** Glean { "field": "setOfSetOfInt" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> setOfSetOfInt_ref() const& {
    return {this->__fbthrift_field_setOfSetOfInt, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "setOfSetOfInt" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> setOfSetOfInt_ref() & {
    return {this->__fbthrift_field_setOfSetOfInt, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "setOfSetOfInt" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> setOfSetOfInt_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_setOfSetOfInt), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "setOfSetOfInt" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> setOfSetOfInt() const& {
    return {this->__fbthrift_field_setOfSetOfInt, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "setOfSetOfInt" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> setOfSetOfInt() & {
    return {this->__fbthrift_field_setOfSetOfInt, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "setOfSetOfInt" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> setOfSetOfInt() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_setOfSetOfInt), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "listofListOfListOfListOfEnum" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<::std::vector<::std::vector<::cpp2::MyEnum>>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> listofListOfListOfListOfEnum_ref() const& {
    return {this->__fbthrift_field_listofListOfListOfListOfEnum, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "listofListOfListOfListOfEnum" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<::std::vector<::std::vector<::cpp2::MyEnum>>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> listofListOfListOfListOfEnum_ref() & {
    return {this->__fbthrift_field_listofListOfListOfListOfEnum, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "listofListOfListOfListOfEnum" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<::std::vector<::std::vector<::cpp2::MyEnum>>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> listofListOfListOfListOfEnum_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_listofListOfListOfListOfEnum), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "listofListOfListOfListOfEnum" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<::std::vector<::std::vector<::cpp2::MyEnum>>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> listofListOfListOfListOfEnum() const& {
    return {this->__fbthrift_field_listofListOfListOfListOfEnum, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "listofListOfListOfListOfEnum" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<::std::vector<::std::vector<::cpp2::MyEnum>>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> listofListOfListOfListOfEnum() & {
    return {this->__fbthrift_field_listofListOfListOfListOfEnum, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "listofListOfListOfListOfEnum" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<::std::vector<::std::vector<::cpp2::MyEnum>>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> listofListOfListOfListOfEnum() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_listofListOfListOfListOfEnum), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "listOfListOfMyStruct" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> listOfListOfMyStruct_ref() const& {
    return {this->__fbthrift_field_listOfListOfMyStruct, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "listOfListOfMyStruct" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> listOfListOfMyStruct_ref() & {
    return {this->__fbthrift_field_listOfListOfMyStruct, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "listOfListOfMyStruct" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> listOfListOfMyStruct_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_listOfListOfMyStruct), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "listOfListOfMyStruct" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> listOfListOfMyStruct() const& {
    return {this->__fbthrift_field_listOfListOfMyStruct, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "listOfListOfMyStruct" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> listOfListOfMyStruct() & {
    return {this->__fbthrift_field_listOfListOfMyStruct, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "listOfListOfMyStruct" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> listOfListOfMyStruct() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_listOfListOfMyStruct), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "setOfListOfListOfLong" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::vector<::std::vector<::std::int64_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> setOfListOfListOfLong_ref() const& {
    return {this->__fbthrift_field_setOfListOfListOfLong, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "setOfListOfListOfLong" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::vector<::std::vector<::std::int64_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> setOfListOfListOfLong_ref() & {
    return {this->__fbthrift_field_setOfListOfListOfLong, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "setOfListOfListOfLong" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::vector<::std::vector<::std::int64_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> setOfListOfListOfLong_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_setOfListOfListOfLong), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "setOfListOfListOfLong" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::vector<::std::vector<::std::int64_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> setOfListOfListOfLong() const& {
    return {this->__fbthrift_field_setOfListOfListOfLong, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "setOfListOfListOfLong" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::vector<::std::vector<::std::int64_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> setOfListOfListOfLong() & {
    return {this->__fbthrift_field_setOfListOfListOfLong, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "setOfListOfListOfLong" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::vector<::std::vector<::std::int64_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> setOfListOfListOfLong() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_setOfListOfListOfLong), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "setOfSetOfsetOfLong" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::set<::std::set<::std::int64_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> setOfSetOfsetOfLong_ref() const& {
    return {this->__fbthrift_field_setOfSetOfsetOfLong, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "setOfSetOfsetOfLong" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::set<::std::set<::std::int64_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> setOfSetOfsetOfLong_ref() & {
    return {this->__fbthrift_field_setOfSetOfsetOfLong, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "setOfSetOfsetOfLong" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::set<::std::set<::std::int64_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> setOfSetOfsetOfLong_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_setOfSetOfsetOfLong), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "setOfSetOfsetOfLong" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::set<::std::set<::std::int64_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> setOfSetOfsetOfLong() const& {
    return {this->__fbthrift_field_setOfSetOfsetOfLong, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "setOfSetOfsetOfLong" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::set<::std::set<::std::int64_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> setOfSetOfsetOfLong() & {
    return {this->__fbthrift_field_setOfSetOfsetOfLong, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "setOfSetOfsetOfLong" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::set<::std::set<::std::int64_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> setOfSetOfsetOfLong() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_setOfSetOfsetOfLong), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "mapStructListOfListOfLong" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::MyStruct>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mapStructListOfListOfLong_ref() const& {
    return {this->__fbthrift_field_mapStructListOfListOfLong, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "mapStructListOfListOfLong" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::MyStruct>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mapStructListOfListOfLong_ref() & {
    return {this->__fbthrift_field_mapStructListOfListOfLong, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "mapStructListOfListOfLong" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::MyStruct>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mapStructListOfListOfLong_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mapStructListOfListOfLong), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "mapStructListOfListOfLong" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::MyStruct>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mapStructListOfListOfLong() const& {
    return {this->__fbthrift_field_mapStructListOfListOfLong, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "mapStructListOfListOfLong" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::MyStruct>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mapStructListOfListOfLong() & {
    return {this->__fbthrift_field_mapStructListOfListOfLong, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "mapStructListOfListOfLong" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::MyStruct>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mapStructListOfListOfLong() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mapStructListOfListOfLong), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "mKeyStructValInt" } */
  template <typename..., typename fbthrift_T = ::std::map<::cpp2::MyStruct, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mKeyStructValInt_ref() const& {
    return {this->__fbthrift_field_mKeyStructValInt, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "mKeyStructValInt" } */
  template <typename..., typename fbthrift_T = ::std::map<::cpp2::MyStruct, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mKeyStructValInt_ref() & {
    return {this->__fbthrift_field_mKeyStructValInt, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "mKeyStructValInt" } */
  template <typename..., typename fbthrift_T = ::std::map<::cpp2::MyStruct, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mKeyStructValInt_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mKeyStructValInt), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "mKeyStructValInt" } */
  template <typename..., typename fbthrift_T = ::std::map<::cpp2::MyStruct, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mKeyStructValInt() const& {
    return {this->__fbthrift_field_mKeyStructValInt, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "mKeyStructValInt" } */
  template <typename..., typename fbthrift_T = ::std::map<::cpp2::MyStruct, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mKeyStructValInt() & {
    return {this->__fbthrift_field_mKeyStructValInt, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "mKeyStructValInt" } */
  template <typename..., typename fbthrift_T = ::std::map<::cpp2::MyStruct, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mKeyStructValInt() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mKeyStructValInt), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "listOfMapKeyIntValInt" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> listOfMapKeyIntValInt_ref() const& {
    return {this->__fbthrift_field_listOfMapKeyIntValInt, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "listOfMapKeyIntValInt" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> listOfMapKeyIntValInt_ref() & {
    return {this->__fbthrift_field_listOfMapKeyIntValInt, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "listOfMapKeyIntValInt" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> listOfMapKeyIntValInt_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_listOfMapKeyIntValInt), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "listOfMapKeyIntValInt" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> listOfMapKeyIntValInt() const& {
    return {this->__fbthrift_field_listOfMapKeyIntValInt, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "listOfMapKeyIntValInt" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> listOfMapKeyIntValInt() & {
    return {this->__fbthrift_field_listOfMapKeyIntValInt, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "listOfMapKeyIntValInt" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> listOfMapKeyIntValInt() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_listOfMapKeyIntValInt), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "listOfMapKeyStrValList" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::std::string, ::std::vector<::cpp2::MyStruct>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> listOfMapKeyStrValList_ref() const& {
    return {this->__fbthrift_field_listOfMapKeyStrValList, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "listOfMapKeyStrValList" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::std::string, ::std::vector<::cpp2::MyStruct>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> listOfMapKeyStrValList_ref() & {
    return {this->__fbthrift_field_listOfMapKeyStrValList, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "listOfMapKeyStrValList" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::std::string, ::std::vector<::cpp2::MyStruct>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> listOfMapKeyStrValList_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_listOfMapKeyStrValList), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "listOfMapKeyStrValList" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::std::string, ::std::vector<::cpp2::MyStruct>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> listOfMapKeyStrValList() const& {
    return {this->__fbthrift_field_listOfMapKeyStrValList, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "listOfMapKeyStrValList" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::std::string, ::std::vector<::cpp2::MyStruct>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> listOfMapKeyStrValList() & {
    return {this->__fbthrift_field_listOfMapKeyStrValList, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "listOfMapKeyStrValList" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::std::string, ::std::vector<::cpp2::MyStruct>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> listOfMapKeyStrValList() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_listOfMapKeyStrValList), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "mapKeySetValLong" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::set<::std::int32_t>, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mapKeySetValLong_ref() const& {
    return {this->__fbthrift_field_mapKeySetValLong, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "mapKeySetValLong" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::set<::std::int32_t>, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mapKeySetValLong_ref() & {
    return {this->__fbthrift_field_mapKeySetValLong, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "mapKeySetValLong" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::set<::std::int32_t>, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mapKeySetValLong_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mapKeySetValLong), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "mapKeySetValLong" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::set<::std::int32_t>, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mapKeySetValLong() const& {
    return {this->__fbthrift_field_mapKeySetValLong, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "mapKeySetValLong" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::set<::std::int32_t>, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mapKeySetValLong() & {
    return {this->__fbthrift_field_mapKeySetValLong, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "mapKeySetValLong" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::set<::std::int32_t>, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mapKeySetValLong() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mapKeySetValLong), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "mapKeyListValLong" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::vector<::std::string>, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mapKeyListValLong_ref() const& {
    return {this->__fbthrift_field_mapKeyListValLong, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "mapKeyListValLong" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::vector<::std::string>, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mapKeyListValLong_ref() & {
    return {this->__fbthrift_field_mapKeyListValLong, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "mapKeyListValLong" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::vector<::std::string>, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mapKeyListValLong_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mapKeyListValLong), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "mapKeyListValLong" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::vector<::std::string>, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mapKeyListValLong() const& {
    return {this->__fbthrift_field_mapKeyListValLong, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "mapKeyListValLong" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::vector<::std::string>, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mapKeyListValLong() & {
    return {this->__fbthrift_field_mapKeyListValLong, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "mapKeyListValLong" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::vector<::std::string>, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mapKeyListValLong() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mapKeyListValLong), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "mapKeyMapValMap" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::map<::std::int32_t, ::std::string>, ::std::map<::std::int32_t, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mapKeyMapValMap_ref() const& {
    return {this->__fbthrift_field_mapKeyMapValMap, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "mapKeyMapValMap" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::map<::std::int32_t, ::std::string>, ::std::map<::std::int32_t, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mapKeyMapValMap_ref() & {
    return {this->__fbthrift_field_mapKeyMapValMap, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "mapKeyMapValMap" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::map<::std::int32_t, ::std::string>, ::std::map<::std::int32_t, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mapKeyMapValMap_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mapKeyMapValMap), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "mapKeyMapValMap" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::map<::std::int32_t, ::std::string>, ::std::map<::std::int32_t, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mapKeyMapValMap() const& {
    return {this->__fbthrift_field_mapKeyMapValMap, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "mapKeyMapValMap" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::map<::std::int32_t, ::std::string>, ::std::map<::std::int32_t, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mapKeyMapValMap() & {
    return {this->__fbthrift_field_mapKeyMapValMap, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "mapKeyMapValMap" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::map<::std::int32_t, ::std::string>, ::std::map<::std::int32_t, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mapKeyMapValMap() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mapKeyMapValMap), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "mapKeySetValMap" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mapKeySetValMap_ref() const& {
    return {this->__fbthrift_field_mapKeySetValMap, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "mapKeySetValMap" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mapKeySetValMap_ref() & {
    return {this->__fbthrift_field_mapKeySetValMap, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "mapKeySetValMap" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mapKeySetValMap_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mapKeySetValMap), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "mapKeySetValMap" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mapKeySetValMap() const& {
    return {this->__fbthrift_field_mapKeySetValMap, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "mapKeySetValMap" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mapKeySetValMap() & {
    return {this->__fbthrift_field_mapKeySetValMap, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "mapKeySetValMap" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mapKeySetValMap() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mapKeySetValMap), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "NestedMaps" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::map<::std::map<::std::int32_t, ::std::string>, ::std::string>, ::std::map<::std::int32_t, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> NestedMaps_ref() const& {
    return {this->__fbthrift_field_NestedMaps, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "NestedMaps" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::map<::std::map<::std::int32_t, ::std::string>, ::std::string>, ::std::map<::std::int32_t, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> NestedMaps_ref() & {
    return {this->__fbthrift_field_NestedMaps, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "NestedMaps" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::map<::std::map<::std::int32_t, ::std::string>, ::std::string>, ::std::map<::std::int32_t, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> NestedMaps_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_NestedMaps), __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "NestedMaps" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::map<::std::map<::std::int32_t, ::std::string>, ::std::string>, ::std::map<::std::int32_t, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> NestedMaps() const& {
    return {this->__fbthrift_field_NestedMaps, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "NestedMaps" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::map<::std::map<::std::int32_t, ::std::string>, ::std::string>, ::std::map<::std::int32_t, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> NestedMaps() & {
    return {this->__fbthrift_field_NestedMaps, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "NestedMaps" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::map<::std::map<::std::int32_t, ::std::string>, ::std::string>, ::std::map<::std::int32_t, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> NestedMaps() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_NestedMaps), __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "mapKeyIntValList" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mapKeyIntValList_ref() const& {
    return {this->__fbthrift_field_mapKeyIntValList, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "mapKeyIntValList" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mapKeyIntValList_ref() & {
    return {this->__fbthrift_field_mapKeyIntValList, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "mapKeyIntValList" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mapKeyIntValList_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mapKeyIntValList), __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "mapKeyIntValList" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mapKeyIntValList() const& {
    return {this->__fbthrift_field_mapKeyIntValList, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "mapKeyIntValList" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mapKeyIntValList() & {
    return {this->__fbthrift_field_mapKeyIntValList, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "mapKeyIntValList" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mapKeyIntValList() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mapKeyIntValList), __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "mapKeyIntValSet" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::set<bool>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mapKeyIntValSet_ref() const& {
    return {this->__fbthrift_field_mapKeyIntValSet, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "mapKeyIntValSet" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::set<bool>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mapKeyIntValSet_ref() & {
    return {this->__fbthrift_field_mapKeyIntValSet, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "mapKeyIntValSet" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::set<bool>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mapKeyIntValSet_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mapKeyIntValSet), __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "mapKeyIntValSet" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::set<bool>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mapKeyIntValSet() const& {
    return {this->__fbthrift_field_mapKeyIntValSet, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "mapKeyIntValSet" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::set<bool>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mapKeyIntValSet() & {
    return {this->__fbthrift_field_mapKeyIntValSet, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "mapKeyIntValSet" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::set<bool>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mapKeyIntValSet() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mapKeyIntValSet), __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "mapKeySetValInt" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::set<bool>, ::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mapKeySetValInt_ref() const& {
    return {this->__fbthrift_field_mapKeySetValInt, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "mapKeySetValInt" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::set<bool>, ::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mapKeySetValInt_ref() & {
    return {this->__fbthrift_field_mapKeySetValInt, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "mapKeySetValInt" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::set<bool>, ::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mapKeySetValInt_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mapKeySetValInt), __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "mapKeySetValInt" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::set<bool>, ::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mapKeySetValInt() const& {
    return {this->__fbthrift_field_mapKeySetValInt, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "mapKeySetValInt" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::set<bool>, ::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mapKeySetValInt() & {
    return {this->__fbthrift_field_mapKeySetValInt, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "mapKeySetValInt" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::set<bool>, ::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mapKeySetValInt() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mapKeySetValInt), __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "mapKeyListValSet" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::vector<::std::int32_t>, ::std::set<::std::map<double, ::std::string>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mapKeyListValSet_ref() const& {
    return {this->__fbthrift_field_mapKeyListValSet, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "mapKeyListValSet" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::vector<::std::int32_t>, ::std::set<::std::map<double, ::std::string>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mapKeyListValSet_ref() & {
    return {this->__fbthrift_field_mapKeyListValSet, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "mapKeyListValSet" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::vector<::std::int32_t>, ::std::set<::std::map<double, ::std::string>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mapKeyListValSet_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mapKeyListValSet), __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "mapKeyListValSet" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::vector<::std::int32_t>, ::std::set<::std::map<double, ::std::string>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mapKeyListValSet() const& {
    return {this->__fbthrift_field_mapKeyListValSet, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "mapKeyListValSet" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::vector<::std::int32_t>, ::std::set<::std::map<double, ::std::string>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mapKeyListValSet() & {
    return {this->__fbthrift_field_mapKeyListValSet, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "mapKeyListValSet" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::vector<::std::int32_t>, ::std::set<::std::map<double, ::std::string>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mapKeyListValSet() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mapKeyListValSet), __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "setOfSetOfInt" } */
  [[deprecated("Use `FOO.setOfSetOfInt().value()` instead of `FOO.get_setOfSetOfInt()`")]]
  const ::std::set<::std::set<::std::int32_t>>& get_setOfSetOfInt() const&;

  /** Glean { "field": "setOfSetOfInt" } */
  [[deprecated("Use `FOO.setOfSetOfInt().value()` instead of `FOO.get_setOfSetOfInt()`")]]
  ::std::set<::std::set<::std::int32_t>> get_setOfSetOfInt() &&;

  /** Glean { "field": "setOfSetOfInt" } */
  template <typename T_ComplexNestedStruct_setOfSetOfInt_struct_setter = ::std::set<::std::set<::std::int32_t>>>
  [[deprecated("Use `FOO.setOfSetOfInt() = BAR` instead of `FOO.set_setOfSetOfInt(BAR)`")]]
  ::std::set<::std::set<::std::int32_t>>& set_setOfSetOfInt(T_ComplexNestedStruct_setOfSetOfInt_struct_setter&& setOfSetOfInt_) {
    setOfSetOfInt_ref() = std::forward<T_ComplexNestedStruct_setOfSetOfInt_struct_setter>(setOfSetOfInt_);
    return __fbthrift_field_setOfSetOfInt;
  }

  /** Glean { "field": "listofListOfListOfListOfEnum" } */
  [[deprecated("Use `FOO.listofListOfListOfListOfEnum().value()` instead of `FOO.get_listofListOfListOfListOfEnum()`")]]
  const ::std::vector<::std::vector<::std::vector<::std::vector<::cpp2::MyEnum>>>>& get_listofListOfListOfListOfEnum() const&;

  /** Glean { "field": "listofListOfListOfListOfEnum" } */
  [[deprecated("Use `FOO.listofListOfListOfListOfEnum().value()` instead of `FOO.get_listofListOfListOfListOfEnum()`")]]
  ::std::vector<::std::vector<::std::vector<::std::vector<::cpp2::MyEnum>>>> get_listofListOfListOfListOfEnum() &&;

  /** Glean { "field": "listofListOfListOfListOfEnum" } */
  template <typename T_ComplexNestedStruct_listofListOfListOfListOfEnum_struct_setter = ::std::vector<::std::vector<::std::vector<::std::vector<::cpp2::MyEnum>>>>>
  [[deprecated("Use `FOO.listofListOfListOfListOfEnum() = BAR` instead of `FOO.set_listofListOfListOfListOfEnum(BAR)`")]]
  ::std::vector<::std::vector<::std::vector<::std::vector<::cpp2::MyEnum>>>>& set_listofListOfListOfListOfEnum(T_ComplexNestedStruct_listofListOfListOfListOfEnum_struct_setter&& listofListOfListOfListOfEnum_) {
    listofListOfListOfListOfEnum_ref() = std::forward<T_ComplexNestedStruct_listofListOfListOfListOfEnum_struct_setter>(listofListOfListOfListOfEnum_);
    return __fbthrift_field_listofListOfListOfListOfEnum;
  }

  /** Glean { "field": "listOfListOfMyStruct" } */
  [[deprecated("Use `FOO.listOfListOfMyStruct().value()` instead of `FOO.get_listOfListOfMyStruct()`")]]
  const ::std::vector<::std::vector<::cpp2::MyStruct>>& get_listOfListOfMyStruct() const&;

  /** Glean { "field": "listOfListOfMyStruct" } */
  [[deprecated("Use `FOO.listOfListOfMyStruct().value()` instead of `FOO.get_listOfListOfMyStruct()`")]]
  ::std::vector<::std::vector<::cpp2::MyStruct>> get_listOfListOfMyStruct() &&;

  /** Glean { "field": "listOfListOfMyStruct" } */
  template <typename T_ComplexNestedStruct_listOfListOfMyStruct_struct_setter = ::std::vector<::std::vector<::cpp2::MyStruct>>>
  [[deprecated("Use `FOO.listOfListOfMyStruct() = BAR` instead of `FOO.set_listOfListOfMyStruct(BAR)`")]]
  ::std::vector<::std::vector<::cpp2::MyStruct>>& set_listOfListOfMyStruct(T_ComplexNestedStruct_listOfListOfMyStruct_struct_setter&& listOfListOfMyStruct_) {
    listOfListOfMyStruct_ref() = std::forward<T_ComplexNestedStruct_listOfListOfMyStruct_struct_setter>(listOfListOfMyStruct_);
    return __fbthrift_field_listOfListOfMyStruct;
  }

  /** Glean { "field": "setOfListOfListOfLong" } */
  [[deprecated("Use `FOO.setOfListOfListOfLong().value()` instead of `FOO.get_setOfListOfListOfLong()`")]]
  const ::std::set<::std::vector<::std::vector<::std::int64_t>>>& get_setOfListOfListOfLong() const&;

  /** Glean { "field": "setOfListOfListOfLong" } */
  [[deprecated("Use `FOO.setOfListOfListOfLong().value()` instead of `FOO.get_setOfListOfListOfLong()`")]]
  ::std::set<::std::vector<::std::vector<::std::int64_t>>> get_setOfListOfListOfLong() &&;

  /** Glean { "field": "setOfListOfListOfLong" } */
  template <typename T_ComplexNestedStruct_setOfListOfListOfLong_struct_setter = ::std::set<::std::vector<::std::vector<::std::int64_t>>>>
  [[deprecated("Use `FOO.setOfListOfListOfLong() = BAR` instead of `FOO.set_setOfListOfListOfLong(BAR)`")]]
  ::std::set<::std::vector<::std::vector<::std::int64_t>>>& set_setOfListOfListOfLong(T_ComplexNestedStruct_setOfListOfListOfLong_struct_setter&& setOfListOfListOfLong_) {
    setOfListOfListOfLong_ref() = std::forward<T_ComplexNestedStruct_setOfListOfListOfLong_struct_setter>(setOfListOfListOfLong_);
    return __fbthrift_field_setOfListOfListOfLong;
  }

  /** Glean { "field": "setOfSetOfsetOfLong" } */
  [[deprecated("Use `FOO.setOfSetOfsetOfLong().value()` instead of `FOO.get_setOfSetOfsetOfLong()`")]]
  const ::std::set<::std::set<::std::set<::std::int64_t>>>& get_setOfSetOfsetOfLong() const&;

  /** Glean { "field": "setOfSetOfsetOfLong" } */
  [[deprecated("Use `FOO.setOfSetOfsetOfLong().value()` instead of `FOO.get_setOfSetOfsetOfLong()`")]]
  ::std::set<::std::set<::std::set<::std::int64_t>>> get_setOfSetOfsetOfLong() &&;

  /** Glean { "field": "setOfSetOfsetOfLong" } */
  template <typename T_ComplexNestedStruct_setOfSetOfsetOfLong_struct_setter = ::std::set<::std::set<::std::set<::std::int64_t>>>>
  [[deprecated("Use `FOO.setOfSetOfsetOfLong() = BAR` instead of `FOO.set_setOfSetOfsetOfLong(BAR)`")]]
  ::std::set<::std::set<::std::set<::std::int64_t>>>& set_setOfSetOfsetOfLong(T_ComplexNestedStruct_setOfSetOfsetOfLong_struct_setter&& setOfSetOfsetOfLong_) {
    setOfSetOfsetOfLong_ref() = std::forward<T_ComplexNestedStruct_setOfSetOfsetOfLong_struct_setter>(setOfSetOfsetOfLong_);
    return __fbthrift_field_setOfSetOfsetOfLong;
  }

  /** Glean { "field": "mapStructListOfListOfLong" } */
  [[deprecated("Use `FOO.mapStructListOfListOfLong().value()` instead of `FOO.get_mapStructListOfListOfLong()`")]]
  const ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::MyStruct>>>& get_mapStructListOfListOfLong() const&;

  /** Glean { "field": "mapStructListOfListOfLong" } */
  [[deprecated("Use `FOO.mapStructListOfListOfLong().value()` instead of `FOO.get_mapStructListOfListOfLong()`")]]
  ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::MyStruct>>> get_mapStructListOfListOfLong() &&;

  /** Glean { "field": "mapStructListOfListOfLong" } */
  template <typename T_ComplexNestedStruct_mapStructListOfListOfLong_struct_setter = ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::MyStruct>>>>
  [[deprecated("Use `FOO.mapStructListOfListOfLong() = BAR` instead of `FOO.set_mapStructListOfListOfLong(BAR)`")]]
  ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::MyStruct>>>& set_mapStructListOfListOfLong(T_ComplexNestedStruct_mapStructListOfListOfLong_struct_setter&& mapStructListOfListOfLong_) {
    mapStructListOfListOfLong_ref() = std::forward<T_ComplexNestedStruct_mapStructListOfListOfLong_struct_setter>(mapStructListOfListOfLong_);
    return __fbthrift_field_mapStructListOfListOfLong;
  }

  /** Glean { "field": "mKeyStructValInt" } */
  [[deprecated("Use `FOO.mKeyStructValInt().value()` instead of `FOO.get_mKeyStructValInt()`")]]
  const ::std::map<::cpp2::MyStruct, ::std::int32_t>& get_mKeyStructValInt() const&;

  /** Glean { "field": "mKeyStructValInt" } */
  [[deprecated("Use `FOO.mKeyStructValInt().value()` instead of `FOO.get_mKeyStructValInt()`")]]
  ::std::map<::cpp2::MyStruct, ::std::int32_t> get_mKeyStructValInt() &&;

  /** Glean { "field": "mKeyStructValInt" } */
  template <typename T_ComplexNestedStruct_mKeyStructValInt_struct_setter = ::std::map<::cpp2::MyStruct, ::std::int32_t>>
  [[deprecated("Use `FOO.mKeyStructValInt() = BAR` instead of `FOO.set_mKeyStructValInt(BAR)`")]]
  ::std::map<::cpp2::MyStruct, ::std::int32_t>& set_mKeyStructValInt(T_ComplexNestedStruct_mKeyStructValInt_struct_setter&& mKeyStructValInt_) {
    mKeyStructValInt_ref() = std::forward<T_ComplexNestedStruct_mKeyStructValInt_struct_setter>(mKeyStructValInt_);
    return __fbthrift_field_mKeyStructValInt;
  }

  /** Glean { "field": "listOfMapKeyIntValInt" } */
  [[deprecated("Use `FOO.listOfMapKeyIntValInt().value()` instead of `FOO.get_listOfMapKeyIntValInt()`")]]
  const ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>& get_listOfMapKeyIntValInt() const&;

  /** Glean { "field": "listOfMapKeyIntValInt" } */
  [[deprecated("Use `FOO.listOfMapKeyIntValInt().value()` instead of `FOO.get_listOfMapKeyIntValInt()`")]]
  ::std::vector<::std::map<::std::int32_t, ::std::int32_t>> get_listOfMapKeyIntValInt() &&;

  /** Glean { "field": "listOfMapKeyIntValInt" } */
  template <typename T_ComplexNestedStruct_listOfMapKeyIntValInt_struct_setter = ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>
  [[deprecated("Use `FOO.listOfMapKeyIntValInt() = BAR` instead of `FOO.set_listOfMapKeyIntValInt(BAR)`")]]
  ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>& set_listOfMapKeyIntValInt(T_ComplexNestedStruct_listOfMapKeyIntValInt_struct_setter&& listOfMapKeyIntValInt_) {
    listOfMapKeyIntValInt_ref() = std::forward<T_ComplexNestedStruct_listOfMapKeyIntValInt_struct_setter>(listOfMapKeyIntValInt_);
    return __fbthrift_field_listOfMapKeyIntValInt;
  }

  /** Glean { "field": "listOfMapKeyStrValList" } */
  [[deprecated("Use `FOO.listOfMapKeyStrValList().value()` instead of `FOO.get_listOfMapKeyStrValList()`")]]
  const ::std::vector<::std::map<::std::string, ::std::vector<::cpp2::MyStruct>>>& get_listOfMapKeyStrValList() const&;

  /** Glean { "field": "listOfMapKeyStrValList" } */
  [[deprecated("Use `FOO.listOfMapKeyStrValList().value()` instead of `FOO.get_listOfMapKeyStrValList()`")]]
  ::std::vector<::std::map<::std::string, ::std::vector<::cpp2::MyStruct>>> get_listOfMapKeyStrValList() &&;

  /** Glean { "field": "listOfMapKeyStrValList" } */
  template <typename T_ComplexNestedStruct_listOfMapKeyStrValList_struct_setter = ::std::vector<::std::map<::std::string, ::std::vector<::cpp2::MyStruct>>>>
  [[deprecated("Use `FOO.listOfMapKeyStrValList() = BAR` instead of `FOO.set_listOfMapKeyStrValList(BAR)`")]]
  ::std::vector<::std::map<::std::string, ::std::vector<::cpp2::MyStruct>>>& set_listOfMapKeyStrValList(T_ComplexNestedStruct_listOfMapKeyStrValList_struct_setter&& listOfMapKeyStrValList_) {
    listOfMapKeyStrValList_ref() = std::forward<T_ComplexNestedStruct_listOfMapKeyStrValList_struct_setter>(listOfMapKeyStrValList_);
    return __fbthrift_field_listOfMapKeyStrValList;
  }

  /** Glean { "field": "mapKeySetValLong" } */
  [[deprecated("Use `FOO.mapKeySetValLong().value()` instead of `FOO.get_mapKeySetValLong()`")]]
  const ::std::map<::std::set<::std::int32_t>, ::std::int64_t>& get_mapKeySetValLong() const&;

  /** Glean { "field": "mapKeySetValLong" } */
  [[deprecated("Use `FOO.mapKeySetValLong().value()` instead of `FOO.get_mapKeySetValLong()`")]]
  ::std::map<::std::set<::std::int32_t>, ::std::int64_t> get_mapKeySetValLong() &&;

  /** Glean { "field": "mapKeySetValLong" } */
  template <typename T_ComplexNestedStruct_mapKeySetValLong_struct_setter = ::std::map<::std::set<::std::int32_t>, ::std::int64_t>>
  [[deprecated("Use `FOO.mapKeySetValLong() = BAR` instead of `FOO.set_mapKeySetValLong(BAR)`")]]
  ::std::map<::std::set<::std::int32_t>, ::std::int64_t>& set_mapKeySetValLong(T_ComplexNestedStruct_mapKeySetValLong_struct_setter&& mapKeySetValLong_) {
    mapKeySetValLong_ref() = std::forward<T_ComplexNestedStruct_mapKeySetValLong_struct_setter>(mapKeySetValLong_);
    return __fbthrift_field_mapKeySetValLong;
  }

  /** Glean { "field": "mapKeyListValLong" } */
  [[deprecated("Use `FOO.mapKeyListValLong().value()` instead of `FOO.get_mapKeyListValLong()`")]]
  const ::std::map<::std::vector<::std::string>, ::std::int32_t>& get_mapKeyListValLong() const&;

  /** Glean { "field": "mapKeyListValLong" } */
  [[deprecated("Use `FOO.mapKeyListValLong().value()` instead of `FOO.get_mapKeyListValLong()`")]]
  ::std::map<::std::vector<::std::string>, ::std::int32_t> get_mapKeyListValLong() &&;

  /** Glean { "field": "mapKeyListValLong" } */
  template <typename T_ComplexNestedStruct_mapKeyListValLong_struct_setter = ::std::map<::std::vector<::std::string>, ::std::int32_t>>
  [[deprecated("Use `FOO.mapKeyListValLong() = BAR` instead of `FOO.set_mapKeyListValLong(BAR)`")]]
  ::std::map<::std::vector<::std::string>, ::std::int32_t>& set_mapKeyListValLong(T_ComplexNestedStruct_mapKeyListValLong_struct_setter&& mapKeyListValLong_) {
    mapKeyListValLong_ref() = std::forward<T_ComplexNestedStruct_mapKeyListValLong_struct_setter>(mapKeyListValLong_);
    return __fbthrift_field_mapKeyListValLong;
  }

  /** Glean { "field": "mapKeyMapValMap" } */
  [[deprecated("Use `FOO.mapKeyMapValMap().value()` instead of `FOO.get_mapKeyMapValMap()`")]]
  const ::std::map<::std::map<::std::int32_t, ::std::string>, ::std::map<::std::int32_t, ::std::string>>& get_mapKeyMapValMap() const&;

  /** Glean { "field": "mapKeyMapValMap" } */
  [[deprecated("Use `FOO.mapKeyMapValMap().value()` instead of `FOO.get_mapKeyMapValMap()`")]]
  ::std::map<::std::map<::std::int32_t, ::std::string>, ::std::map<::std::int32_t, ::std::string>> get_mapKeyMapValMap() &&;

  /** Glean { "field": "mapKeyMapValMap" } */
  template <typename T_ComplexNestedStruct_mapKeyMapValMap_struct_setter = ::std::map<::std::map<::std::int32_t, ::std::string>, ::std::map<::std::int32_t, ::std::string>>>
  [[deprecated("Use `FOO.mapKeyMapValMap() = BAR` instead of `FOO.set_mapKeyMapValMap(BAR)`")]]
  ::std::map<::std::map<::std::int32_t, ::std::string>, ::std::map<::std::int32_t, ::std::string>>& set_mapKeyMapValMap(T_ComplexNestedStruct_mapKeyMapValMap_struct_setter&& mapKeyMapValMap_) {
    mapKeyMapValMap_ref() = std::forward<T_ComplexNestedStruct_mapKeyMapValMap_struct_setter>(mapKeyMapValMap_);
    return __fbthrift_field_mapKeyMapValMap;
  }

  /** Glean { "field": "mapKeySetValMap" } */
  [[deprecated("Use `FOO.mapKeySetValMap().value()` instead of `FOO.get_mapKeySetValMap()`")]]
  const ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>& get_mapKeySetValMap() const&;

  /** Glean { "field": "mapKeySetValMap" } */
  [[deprecated("Use `FOO.mapKeySetValMap().value()` instead of `FOO.get_mapKeySetValMap()`")]]
  ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>> get_mapKeySetValMap() &&;

  /** Glean { "field": "mapKeySetValMap" } */
  template <typename T_ComplexNestedStruct_mapKeySetValMap_struct_setter = ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>>
  [[deprecated("Use `FOO.mapKeySetValMap() = BAR` instead of `FOO.set_mapKeySetValMap(BAR)`")]]
  ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>& set_mapKeySetValMap(T_ComplexNestedStruct_mapKeySetValMap_struct_setter&& mapKeySetValMap_) {
    mapKeySetValMap_ref() = std::forward<T_ComplexNestedStruct_mapKeySetValMap_struct_setter>(mapKeySetValMap_);
    return __fbthrift_field_mapKeySetValMap;
  }

  /** Glean { "field": "NestedMaps" } */
  [[deprecated("Use `FOO.NestedMaps().value()` instead of `FOO.get_NestedMaps()`")]]
  const ::std::map<::std::map<::std::map<::std::int32_t, ::std::string>, ::std::string>, ::std::map<::std::int32_t, ::std::string>>& get_NestedMaps() const&;

  /** Glean { "field": "NestedMaps" } */
  [[deprecated("Use `FOO.NestedMaps().value()` instead of `FOO.get_NestedMaps()`")]]
  ::std::map<::std::map<::std::map<::std::int32_t, ::std::string>, ::std::string>, ::std::map<::std::int32_t, ::std::string>> get_NestedMaps() &&;

  /** Glean { "field": "NestedMaps" } */
  template <typename T_ComplexNestedStruct_NestedMaps_struct_setter = ::std::map<::std::map<::std::map<::std::int32_t, ::std::string>, ::std::string>, ::std::map<::std::int32_t, ::std::string>>>
  [[deprecated("Use `FOO.NestedMaps() = BAR` instead of `FOO.set_NestedMaps(BAR)`")]]
  ::std::map<::std::map<::std::map<::std::int32_t, ::std::string>, ::std::string>, ::std::map<::std::int32_t, ::std::string>>& set_NestedMaps(T_ComplexNestedStruct_NestedMaps_struct_setter&& NestedMaps_) {
    NestedMaps_ref() = std::forward<T_ComplexNestedStruct_NestedMaps_struct_setter>(NestedMaps_);
    return __fbthrift_field_NestedMaps;
  }

  /** Glean { "field": "mapKeyIntValList" } */
  [[deprecated("Use `FOO.mapKeyIntValList().value()` instead of `FOO.get_mapKeyIntValList()`")]]
  const ::std::map<::std::int32_t, ::std::vector<::cpp2::MyStruct>>& get_mapKeyIntValList() const&;

  /** Glean { "field": "mapKeyIntValList" } */
  [[deprecated("Use `FOO.mapKeyIntValList().value()` instead of `FOO.get_mapKeyIntValList()`")]]
  ::std::map<::std::int32_t, ::std::vector<::cpp2::MyStruct>> get_mapKeyIntValList() &&;

  /** Glean { "field": "mapKeyIntValList" } */
  template <typename T_ComplexNestedStruct_mapKeyIntValList_struct_setter = ::std::map<::std::int32_t, ::std::vector<::cpp2::MyStruct>>>
  [[deprecated("Use `FOO.mapKeyIntValList() = BAR` instead of `FOO.set_mapKeyIntValList(BAR)`")]]
  ::std::map<::std::int32_t, ::std::vector<::cpp2::MyStruct>>& set_mapKeyIntValList(T_ComplexNestedStruct_mapKeyIntValList_struct_setter&& mapKeyIntValList_) {
    mapKeyIntValList_ref() = std::forward<T_ComplexNestedStruct_mapKeyIntValList_struct_setter>(mapKeyIntValList_);
    return __fbthrift_field_mapKeyIntValList;
  }

  /** Glean { "field": "mapKeyIntValSet" } */
  [[deprecated("Use `FOO.mapKeyIntValSet().value()` instead of `FOO.get_mapKeyIntValSet()`")]]
  const ::std::map<::std::int32_t, ::std::set<bool>>& get_mapKeyIntValSet() const&;

  /** Glean { "field": "mapKeyIntValSet" } */
  [[deprecated("Use `FOO.mapKeyIntValSet().value()` instead of `FOO.get_mapKeyIntValSet()`")]]
  ::std::map<::std::int32_t, ::std::set<bool>> get_mapKeyIntValSet() &&;

  /** Glean { "field": "mapKeyIntValSet" } */
  template <typename T_ComplexNestedStruct_mapKeyIntValSet_struct_setter = ::std::map<::std::int32_t, ::std::set<bool>>>
  [[deprecated("Use `FOO.mapKeyIntValSet() = BAR` instead of `FOO.set_mapKeyIntValSet(BAR)`")]]
  ::std::map<::std::int32_t, ::std::set<bool>>& set_mapKeyIntValSet(T_ComplexNestedStruct_mapKeyIntValSet_struct_setter&& mapKeyIntValSet_) {
    mapKeyIntValSet_ref() = std::forward<T_ComplexNestedStruct_mapKeyIntValSet_struct_setter>(mapKeyIntValSet_);
    return __fbthrift_field_mapKeyIntValSet;
  }

  /** Glean { "field": "mapKeySetValInt" } */
  [[deprecated("Use `FOO.mapKeySetValInt().value()` instead of `FOO.get_mapKeySetValInt()`")]]
  const ::std::map<::std::set<bool>, ::cpp2::MyEnum>& get_mapKeySetValInt() const&;

  /** Glean { "field": "mapKeySetValInt" } */
  [[deprecated("Use `FOO.mapKeySetValInt().value()` instead of `FOO.get_mapKeySetValInt()`")]]
  ::std::map<::std::set<bool>, ::cpp2::MyEnum> get_mapKeySetValInt() &&;

  /** Glean { "field": "mapKeySetValInt" } */
  template <typename T_ComplexNestedStruct_mapKeySetValInt_struct_setter = ::std::map<::std::set<bool>, ::cpp2::MyEnum>>
  [[deprecated("Use `FOO.mapKeySetValInt() = BAR` instead of `FOO.set_mapKeySetValInt(BAR)`")]]
  ::std::map<::std::set<bool>, ::cpp2::MyEnum>& set_mapKeySetValInt(T_ComplexNestedStruct_mapKeySetValInt_struct_setter&& mapKeySetValInt_) {
    mapKeySetValInt_ref() = std::forward<T_ComplexNestedStruct_mapKeySetValInt_struct_setter>(mapKeySetValInt_);
    return __fbthrift_field_mapKeySetValInt;
  }

  /** Glean { "field": "mapKeyListValSet" } */
  [[deprecated("Use `FOO.mapKeyListValSet().value()` instead of `FOO.get_mapKeyListValSet()`")]]
  const ::std::map<::std::vector<::std::int32_t>, ::std::set<::std::map<double, ::std::string>>>& get_mapKeyListValSet() const&;

  /** Glean { "field": "mapKeyListValSet" } */
  [[deprecated("Use `FOO.mapKeyListValSet().value()` instead of `FOO.get_mapKeyListValSet()`")]]
  ::std::map<::std::vector<::std::int32_t>, ::std::set<::std::map<double, ::std::string>>> get_mapKeyListValSet() &&;

  /** Glean { "field": "mapKeyListValSet" } */
  template <typename T_ComplexNestedStruct_mapKeyListValSet_struct_setter = ::std::map<::std::vector<::std::int32_t>, ::std::set<::std::map<double, ::std::string>>>>
  [[deprecated("Use `FOO.mapKeyListValSet() = BAR` instead of `FOO.set_mapKeyListValSet(BAR)`")]]
  ::std::map<::std::vector<::std::int32_t>, ::std::set<::std::map<double, ::std::string>>>& set_mapKeyListValSet(T_ComplexNestedStruct_mapKeyListValSet_struct_setter&& mapKeyListValSet_) {
    mapKeyListValSet_ref() = std::forward<T_ComplexNestedStruct_mapKeyListValSet_struct_setter>(mapKeyListValSet_);
    return __fbthrift_field_mapKeyListValSet;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ComplexNestedStruct>;
  friend void swap(ComplexNestedStruct& a, ComplexNestedStruct& b);
};

template <class Protocol_>
unsigned long ComplexNestedStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/complex-struct/src/module.thrift", "name": "MyUnion", "kind": "union" } */
class MyUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 6;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::myEnum,
    ::apache::thrift::ident::myStruct,
    ::apache::thrift::ident::myDataItem,
    ::apache::thrift::ident::complexNestedStruct,
    ::apache::thrift::ident::longValue,
    ::apache::thrift::ident::intValue
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::enum_t<::cpp2::MyEnum>,
    ::apache::thrift::type::struct_t<::cpp2::MyStruct>,
    ::apache::thrift::type::struct_t<::cpp2::MyDataItem>,
    ::apache::thrift::type::struct_t<::cpp2::ComplexNestedStruct>,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i32_t
  >;
  void __fbthrift_clear();
  void __fbthrift_destruct();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:
  enum class Type : int {
    __EMPTY__ = 0,
    myEnum = 1,
    myStruct = 2,
    myDataItem = 3,
    complexNestedStruct = 4,
    longValue = 5,
    intValue = 6,
  } ;

  MyUnion()
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {}

  MyUnion(MyUnion&& rhs) noexcept
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::myEnum:
      {
        set_myEnum(std::move(rhs.value_.myEnum));
        break;
      }
      case Type::myStruct:
      {
        set_myStruct(std::move(rhs.value_.myStruct));
        break;
      }
      case Type::myDataItem:
      {
        set_myDataItem(std::move(rhs.value_.myDataItem));
        break;
      }
      case Type::complexNestedStruct:
      {
        set_complexNestedStruct(std::move(rhs.value_.complexNestedStruct));
        break;
      }
      case Type::longValue:
      {
        set_longValue(std::move(rhs.value_.longValue));
        break;
      }
      case Type::intValue:
      {
        set_intValue(std::move(rhs.value_.intValue));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  MyUnion(const MyUnion& rhs);

  MyUnion& operator=(MyUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        __fbthrift_clear();
        return *this;
      }
      case Type::myEnum:
      {
        set_myEnum(std::move(rhs.value_.myEnum));
        break;
      }
      case Type::myStruct:
      {
        set_myStruct(std::move(rhs.value_.myStruct));
        break;
      }
      case Type::myDataItem:
      {
        set_myDataItem(std::move(rhs.value_.myDataItem));
        break;
      }
      case Type::complexNestedStruct:
      {
        set_complexNestedStruct(std::move(rhs.value_.complexNestedStruct));
        break;
      }
      case Type::longValue:
      {
        set_longValue(std::move(rhs.value_.longValue));
        break;
      }
      case Type::intValue:
      {
        set_intValue(std::move(rhs.value_.intValue));
        break;
      }
      default:
      {
        assert(false);
        __fbthrift_clear();
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  MyUnion& operator=(const MyUnion& rhs);

  ~MyUnion();

  union storage_type {
    ::cpp2::MyEnum myEnum;
    ::cpp2::MyStruct myStruct;
    ::cpp2::MyDataItem myDataItem;
    ::cpp2::ComplexNestedStruct complexNestedStruct;
    ::std::int64_t longValue;
    ::std::int32_t intValue;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const MyUnion&) const;
  bool operator<(const MyUnion&) const;

  /** Glean { "field": "myEnum" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::cpp2::MyEnum& set_myEnum(::cpp2::MyEnum t = ::cpp2::MyEnum()) {
    using T0 = ::cpp2::MyEnum;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::myEnum);
    ::new (std::addressof(value_.myEnum)) T(t);
    return value_.myEnum;
  }


  /** Glean { "field": "myStruct" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::cpp2::MyStruct& set_myStruct(::cpp2::MyStruct const &t) {
    using T0 = ::cpp2::MyStruct;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::myStruct);
    ::new (std::addressof(value_.myStruct)) T(t);
    return value_.myStruct;
  }

  /** Glean { "field": "myStruct" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::cpp2::MyStruct& set_myStruct(::cpp2::MyStruct&& t) {
    using T0 = ::cpp2::MyStruct;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::myStruct);
    ::new (std::addressof(value_.myStruct)) T(std::move(t));
    return value_.myStruct;
  }

  /** Glean { "field": "myStruct" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::cpp2::MyStruct, T...>> ::cpp2::MyStruct& set_myStruct(T&&... t) {
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::myStruct);
    ::new (std::addressof(value_.myStruct)) ::cpp2::MyStruct(std::forward<T>(t)...);
    return value_.myStruct;
  }

  /** Glean { "field": "myDataItem" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::cpp2::MyDataItem& set_myDataItem(::cpp2::MyDataItem const &t) {
    using T0 = ::cpp2::MyDataItem;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::myDataItem);
    ::new (std::addressof(value_.myDataItem)) T(t);
    return value_.myDataItem;
  }

  /** Glean { "field": "myDataItem" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::cpp2::MyDataItem& set_myDataItem(::cpp2::MyDataItem&& t) {
    using T0 = ::cpp2::MyDataItem;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::myDataItem);
    ::new (std::addressof(value_.myDataItem)) T(std::move(t));
    return value_.myDataItem;
  }

  /** Glean { "field": "myDataItem" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::cpp2::MyDataItem, T...>> ::cpp2::MyDataItem& set_myDataItem(T&&... t) {
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::myDataItem);
    ::new (std::addressof(value_.myDataItem)) ::cpp2::MyDataItem(std::forward<T>(t)...);
    return value_.myDataItem;
  }

  /** Glean { "field": "complexNestedStruct" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::cpp2::ComplexNestedStruct& set_complexNestedStruct(::cpp2::ComplexNestedStruct const &t) {
    using T0 = ::cpp2::ComplexNestedStruct;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::complexNestedStruct);
    ::new (std::addressof(value_.complexNestedStruct)) T(t);
    return value_.complexNestedStruct;
  }

  /** Glean { "field": "complexNestedStruct" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::cpp2::ComplexNestedStruct& set_complexNestedStruct(::cpp2::ComplexNestedStruct&& t) {
    using T0 = ::cpp2::ComplexNestedStruct;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::complexNestedStruct);
    ::new (std::addressof(value_.complexNestedStruct)) T(std::move(t));
    return value_.complexNestedStruct;
  }

  /** Glean { "field": "complexNestedStruct" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::cpp2::ComplexNestedStruct, T...>> ::cpp2::ComplexNestedStruct& set_complexNestedStruct(T&&... t) {
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::complexNestedStruct);
    ::new (std::addressof(value_.complexNestedStruct)) ::cpp2::ComplexNestedStruct(std::forward<T>(t)...);
    return value_.complexNestedStruct;
  }

  /** Glean { "field": "longValue" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::std::int64_t& set_longValue(::std::int64_t t = ::std::int64_t()) {
    using T0 = ::std::int64_t;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::longValue);
    ::new (std::addressof(value_.longValue)) T(t);
    return value_.longValue;
  }


  /** Glean { "field": "intValue" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::std::int32_t& set_intValue(::std::int32_t t = ::std::int32_t()) {
    using T0 = ::std::int32_t;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::intValue);
    ::new (std::addressof(value_.intValue)) T(t);
    return value_.intValue;
  }


  /** Glean { "field": "myEnum" } */
  ::cpp2::MyEnum const& get_myEnum() const {
    if (getType() != Type::myEnum) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.myEnum;
  }

  /** Glean { "field": "myStruct" } */
  ::cpp2::MyStruct const& get_myStruct() const {
    if (getType() != Type::myStruct) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.myStruct;
  }

  /** Glean { "field": "myDataItem" } */
  ::cpp2::MyDataItem const& get_myDataItem() const {
    if (getType() != Type::myDataItem) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.myDataItem;
  }

  /** Glean { "field": "complexNestedStruct" } */
  ::cpp2::ComplexNestedStruct const& get_complexNestedStruct() const {
    if (getType() != Type::complexNestedStruct) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.complexNestedStruct;
  }

  /** Glean { "field": "longValue" } */
  ::std::int64_t const& get_longValue() const {
    if (getType() != Type::longValue) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.longValue;
  }

  /** Glean { "field": "intValue" } */
  ::std::int32_t const& get_intValue() const {
    if (getType() != Type::intValue) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.intValue;
  }

  ::cpp2::MyEnum& mutable_myEnum() {
    assert(getType() == Type::myEnum);
    return value_.myEnum;
  }

  ::cpp2::MyStruct& mutable_myStruct() {
    assert(getType() == Type::myStruct);
    return value_.myStruct;
  }

  ::cpp2::MyDataItem& mutable_myDataItem() {
    assert(getType() == Type::myDataItem);
    return value_.myDataItem;
  }

  ::cpp2::ComplexNestedStruct& mutable_complexNestedStruct() {
    assert(getType() == Type::complexNestedStruct);
    return value_.complexNestedStruct;
  }

  ::std::int64_t& mutable_longValue() {
    assert(getType() == Type::longValue);
    return value_.longValue;
  }

  ::std::int32_t& mutable_intValue() {
    assert(getType() == Type::intValue);
    return value_.intValue;
  }

  template <typename..., typename T = ::cpp2::MyEnum>
  T move_myEnum() {
    assert(getType() == Type::myEnum);
    return std::move(value_.myEnum);
  }

  template <typename..., typename T = ::cpp2::MyStruct>
  T move_myStruct() {
    assert(getType() == Type::myStruct);
    return std::move(value_.myStruct);
  }

  template <typename..., typename T = ::cpp2::MyDataItem>
  T move_myDataItem() {
    assert(getType() == Type::myDataItem);
    return std::move(value_.myDataItem);
  }

  template <typename..., typename T = ::cpp2::ComplexNestedStruct>
  T move_complexNestedStruct() {
    assert(getType() == Type::complexNestedStruct);
    return std::move(value_.complexNestedStruct);
  }

  template <typename..., typename T = ::std::int64_t>
  T move_longValue() {
    assert(getType() == Type::longValue);
    return std::move(value_.longValue);
  }

  template <typename..., typename T = ::std::int32_t>
  T move_intValue() {
    assert(getType() == Type::intValue);
    return std::move(value_.intValue);
  }

  /** Glean { "field": "myEnum" } */
  template <typename..., typename T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> myEnum_ref() const& {
    return {value_.myEnum, fbthrift_type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myEnum" } */
  template <typename..., typename T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> myEnum_ref() & {
    return {value_.myEnum, fbthrift_type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myEnum" } */
  template <typename..., typename T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> myEnum_ref() && {
    return {std::move(value_.myEnum), fbthrift_type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myEnum" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::cpp2::MyEnum&> myEnum() const& {
    return {value_.myEnum, fbthrift_type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myEnum" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::cpp2::MyEnum&> myEnum() & {
    return {value_.myEnum, fbthrift_type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myEnum" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::cpp2::MyEnum&&> myEnum() && {
    return {std::move(value_.myEnum), fbthrift_type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "myStruct" } */
  template <typename..., typename T = ::cpp2::MyStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> myStruct_ref() const& {
    return {value_.myStruct, fbthrift_type_, folly::to_underlying(Type::myStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myStruct" } */
  template <typename..., typename T = ::cpp2::MyStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> myStruct_ref() & {
    return {value_.myStruct, fbthrift_type_, folly::to_underlying(Type::myStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myStruct" } */
  template <typename..., typename T = ::cpp2::MyStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> myStruct_ref() && {
    return {std::move(value_.myStruct), fbthrift_type_, folly::to_underlying(Type::myStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myStruct" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::cpp2::MyStruct&> myStruct() const& {
    return {value_.myStruct, fbthrift_type_, folly::to_underlying(Type::myStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myStruct" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::cpp2::MyStruct&> myStruct() & {
    return {value_.myStruct, fbthrift_type_, folly::to_underlying(Type::myStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myStruct" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::cpp2::MyStruct&&> myStruct() && {
    return {std::move(value_.myStruct), fbthrift_type_, folly::to_underlying(Type::myStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "myDataItem" } */
  template <typename..., typename T = ::cpp2::MyDataItem>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> myDataItem_ref() const& {
    return {value_.myDataItem, fbthrift_type_, folly::to_underlying(Type::myDataItem), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myDataItem" } */
  template <typename..., typename T = ::cpp2::MyDataItem>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> myDataItem_ref() & {
    return {value_.myDataItem, fbthrift_type_, folly::to_underlying(Type::myDataItem), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myDataItem" } */
  template <typename..., typename T = ::cpp2::MyDataItem>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> myDataItem_ref() && {
    return {std::move(value_.myDataItem), fbthrift_type_, folly::to_underlying(Type::myDataItem), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myDataItem" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::cpp2::MyDataItem&> myDataItem() const& {
    return {value_.myDataItem, fbthrift_type_, folly::to_underlying(Type::myDataItem), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myDataItem" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::cpp2::MyDataItem&> myDataItem() & {
    return {value_.myDataItem, fbthrift_type_, folly::to_underlying(Type::myDataItem), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myDataItem" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::cpp2::MyDataItem&&> myDataItem() && {
    return {std::move(value_.myDataItem), fbthrift_type_, folly::to_underlying(Type::myDataItem), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "complexNestedStruct" } */
  template <typename..., typename T = ::cpp2::ComplexNestedStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> complexNestedStruct_ref() const& {
    return {value_.complexNestedStruct, fbthrift_type_, folly::to_underlying(Type::complexNestedStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "complexNestedStruct" } */
  template <typename..., typename T = ::cpp2::ComplexNestedStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> complexNestedStruct_ref() & {
    return {value_.complexNestedStruct, fbthrift_type_, folly::to_underlying(Type::complexNestedStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "complexNestedStruct" } */
  template <typename..., typename T = ::cpp2::ComplexNestedStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> complexNestedStruct_ref() && {
    return {std::move(value_.complexNestedStruct), fbthrift_type_, folly::to_underlying(Type::complexNestedStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "complexNestedStruct" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::cpp2::ComplexNestedStruct&> complexNestedStruct() const& {
    return {value_.complexNestedStruct, fbthrift_type_, folly::to_underlying(Type::complexNestedStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "complexNestedStruct" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::cpp2::ComplexNestedStruct&> complexNestedStruct() & {
    return {value_.complexNestedStruct, fbthrift_type_, folly::to_underlying(Type::complexNestedStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "complexNestedStruct" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::cpp2::ComplexNestedStruct&&> complexNestedStruct() && {
    return {std::move(value_.complexNestedStruct), fbthrift_type_, folly::to_underlying(Type::complexNestedStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "longValue" } */
  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> longValue_ref() const& {
    return {value_.longValue, fbthrift_type_, folly::to_underlying(Type::longValue), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "longValue" } */
  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> longValue_ref() & {
    return {value_.longValue, fbthrift_type_, folly::to_underlying(Type::longValue), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "longValue" } */
  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> longValue_ref() && {
    return {std::move(value_.longValue), fbthrift_type_, folly::to_underlying(Type::longValue), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "longValue" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::std::int64_t&> longValue() const& {
    return {value_.longValue, fbthrift_type_, folly::to_underlying(Type::longValue), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "longValue" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::int64_t&> longValue() & {
    return {value_.longValue, fbthrift_type_, folly::to_underlying(Type::longValue), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "longValue" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::int64_t&&> longValue() && {
    return {std::move(value_.longValue), fbthrift_type_, folly::to_underlying(Type::longValue), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "intValue" } */
  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> intValue_ref() const& {
    return {value_.intValue, fbthrift_type_, folly::to_underlying(Type::intValue), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "intValue" } */
  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> intValue_ref() & {
    return {value_.intValue, fbthrift_type_, folly::to_underlying(Type::intValue), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "intValue" } */
  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> intValue_ref() && {
    return {std::move(value_.intValue), fbthrift_type_, folly::to_underlying(Type::intValue), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "intValue" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::std::int32_t&> intValue() const& {
    return {value_.intValue, fbthrift_type_, folly::to_underlying(Type::intValue), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "intValue" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::int32_t&> intValue() & {
    return {value_.intValue, fbthrift_type_, folly::to_underlying(Type::intValue), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "intValue" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::int32_t&&> intValue() && {
    return {std::move(value_.intValue), fbthrift_type_, folly::to_underlying(Type::intValue), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(fbthrift_type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  storage_type value_;
  std::underlying_type_t<Type> fbthrift_type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyUnion>;
  friend void swap(MyUnion& a, MyUnion& b);
};

template <class Protocol_>
unsigned long MyUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/complex-struct/src/module.thrift", "name": "defaultStruct", "kind": "struct" } */
class defaultStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 22;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::myLongDFset,
    ::apache::thrift::ident::myLongDF,
    ::apache::thrift::ident::portDFset,
    ::apache::thrift::ident::portNum,
    ::apache::thrift::ident::myBinaryDFset,
    ::apache::thrift::ident::myBinary,
    ::apache::thrift::ident::myByteDFSet,
    ::apache::thrift::ident::myByte,
    ::apache::thrift::ident::myDoubleDFset,
    ::apache::thrift::ident::myDoubleDFZero,
    ::apache::thrift::ident::myDouble,
    ::apache::thrift::ident::field3,
    ::apache::thrift::ident::myList,
    ::apache::thrift::ident::mySet,
    ::apache::thrift::ident::simpleStruct,
    ::apache::thrift::ident::listStructDFset,
    ::apache::thrift::ident::myUnion,
    ::apache::thrift::ident::listUnionDFset,
    ::apache::thrift::ident::mapNestlistStructDfSet,
    ::apache::thrift::ident::mapJavaTypeDFset,
    ::apache::thrift::ident::emptyMap,
    ::apache::thrift::ident::enumMapDFset
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::binary_t,
    ::apache::thrift::type::binary_t,
    ::apache::thrift::type::byte_t,
    ::apache::thrift::type::byte_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::list<::apache::thrift::type::enum_t<::cpp2::MyEnum>>,
    ::apache::thrift::type::set<::apache::thrift::type::string_t>,
    ::apache::thrift::type::struct_t<::cpp2::SimpleStruct>,
    ::apache::thrift::type::list<::apache::thrift::type::struct_t<::cpp2::SimpleStruct>>,
    ::apache::thrift::type::union_t<::cpp2::MyUnion>,
    ::apache::thrift::type::list<::apache::thrift::type::union_t<::cpp2::MyUnion>>,
    ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::list<::apache::thrift::type::struct_t<::cpp2::SimpleStruct>>>,
    ::apache::thrift::type::map<::apache::thrift::type::i64_t, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::map<::apache::thrift::type::i64_t, ::apache::thrift::type::i32_t>,
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::enum_t<::cpp2::MyEnum>>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = defaultStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  defaultStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  defaultStruct(apache::thrift::FragileConstructor, ::std::int64_t myLongDFset__arg, ::std::int64_t myLongDF__arg, ::std::int32_t portDFset__arg, ::std::int32_t portNum__arg, ::std::string myBinaryDFset__arg, ::std::string myBinary__arg, ::std::int8_t myByteDFSet__arg, ::std::int8_t myByte__arg, double myDoubleDFset__arg, double myDoubleDFZero__arg, double myDouble__arg, ::std::map<::std::int32_t, ::std::string> field3__arg, ::std::vector<::cpp2::MyEnum> myList__arg, ::std::set<::std::string> mySet__arg, ::cpp2::SimpleStruct simpleStruct__arg, ::std::vector<::cpp2::SimpleStruct> listStructDFset__arg, ::cpp2::MyUnion myUnion__arg, ::std::vector<::cpp2::MyUnion> listUnionDFset__arg, ::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>> mapNestlistStructDfSet__arg, ::cpp2::map_i64_string_5732 mapJavaTypeDFset__arg, ::std::map<::std::int64_t, ::std::int32_t> emptyMap__arg, ::std::map<::std::string, ::std::map<::std::int32_t, ::cpp2::MyEnum>> enumMapDFset__arg);

  defaultStruct(defaultStruct&&) noexcept;

  defaultStruct(const defaultStruct& src);


  defaultStruct& operator=(defaultStruct&&) noexcept;
  defaultStruct& operator=(const defaultStruct& src);

  ~defaultStruct();

 private:
  ::std::int64_t __fbthrift_field_myLongDFset;
 private:
  ::std::int64_t __fbthrift_field_myLongDF;
 private:
  ::std::int32_t __fbthrift_field_portDFset;
 private:
  ::std::int32_t __fbthrift_field_portNum;
 private:
  ::std::string __fbthrift_field_myBinaryDFset;
 private:
  ::std::string __fbthrift_field_myBinary;
 private:
  ::std::int8_t __fbthrift_field_myByteDFSet;
 private:
  ::std::int8_t __fbthrift_field_myByte;
 private:
  double __fbthrift_field_myDoubleDFset;
 private:
  double __fbthrift_field_myDoubleDFZero;
 private:
  double __fbthrift_field_myDouble;
 private:
  ::std::map<::std::int32_t, ::std::string> __fbthrift_field_field3;
 private:
  ::std::vector<::cpp2::MyEnum> __fbthrift_field_myList;
 private:
  ::std::set<::std::string> __fbthrift_field_mySet;
 private:
  ::cpp2::SimpleStruct __fbthrift_field_simpleStruct;
 private:
  ::std::vector<::cpp2::SimpleStruct> __fbthrift_field_listStructDFset;
 private:
  ::cpp2::MyUnion __fbthrift_field_myUnion;
 private:
  ::std::vector<::cpp2::MyUnion> __fbthrift_field_listUnionDFset;
 private:
  ::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>> __fbthrift_field_mapNestlistStructDfSet;
 private:
  ::cpp2::map_i64_string_5732 __fbthrift_field_mapJavaTypeDFset;
 private:
  ::std::map<::std::int64_t, ::std::int32_t> __fbthrift_field_emptyMap;
 private:
  ::std::map<::std::string, ::std::map<::std::int32_t, ::cpp2::MyEnum>> __fbthrift_field_enumMapDFset;
 private:
  apache::thrift::detail::isset_bitset<22, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const defaultStruct&) const;
  bool operator<(const defaultStruct&) const;

  /** Glean { "field": "myLongDFset" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myLongDFset_ref() const& {
    return {this->__fbthrift_field_myLongDFset, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "myLongDFset" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myLongDFset_ref() & {
    return {this->__fbthrift_field_myLongDFset, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "myLongDFset" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myLongDFset_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myLongDFset), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "myLongDFset" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myLongDFset() const& {
    return {this->__fbthrift_field_myLongDFset, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "myLongDFset" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myLongDFset() & {
    return {this->__fbthrift_field_myLongDFset, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "myLongDFset" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myLongDFset() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myLongDFset), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "myLongDF" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myLongDF_ref() const& {
    return {this->__fbthrift_field_myLongDF, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "myLongDF" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myLongDF_ref() & {
    return {this->__fbthrift_field_myLongDF, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "myLongDF" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myLongDF_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myLongDF), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "myLongDF" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myLongDF() const& {
    return {this->__fbthrift_field_myLongDF, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "myLongDF" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myLongDF() & {
    return {this->__fbthrift_field_myLongDF, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "myLongDF" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myLongDF() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myLongDF), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "portDFset" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> portDFset_ref() const& {
    return {this->__fbthrift_field_portDFset, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "portDFset" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> portDFset_ref() & {
    return {this->__fbthrift_field_portDFset, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "portDFset" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> portDFset_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_portDFset), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "portDFset" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> portDFset() const& {
    return {this->__fbthrift_field_portDFset, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "portDFset" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> portDFset() & {
    return {this->__fbthrift_field_portDFset, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "portDFset" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> portDFset() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_portDFset), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "portNum" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> portNum_ref() const& {
    return {this->__fbthrift_field_portNum, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "portNum" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> portNum_ref() & {
    return {this->__fbthrift_field_portNum, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "portNum" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> portNum_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_portNum), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "portNum" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> portNum() const& {
    return {this->__fbthrift_field_portNum, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "portNum" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> portNum() & {
    return {this->__fbthrift_field_portNum, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "portNum" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> portNum() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_portNum), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myBinaryDFset" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myBinaryDFset_ref() const& {
    return {this->__fbthrift_field_myBinaryDFset, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "myBinaryDFset" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myBinaryDFset_ref() & {
    return {this->__fbthrift_field_myBinaryDFset, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "myBinaryDFset" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myBinaryDFset_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myBinaryDFset), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "myBinaryDFset" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myBinaryDFset() const& {
    return {this->__fbthrift_field_myBinaryDFset, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "myBinaryDFset" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myBinaryDFset() & {
    return {this->__fbthrift_field_myBinaryDFset, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "myBinaryDFset" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myBinaryDFset() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myBinaryDFset), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "myBinary" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myBinary_ref() const& {
    return {this->__fbthrift_field_myBinary, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "myBinary" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myBinary_ref() & {
    return {this->__fbthrift_field_myBinary, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "myBinary" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myBinary_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myBinary), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "myBinary" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myBinary() const& {
    return {this->__fbthrift_field_myBinary, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "myBinary" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myBinary() & {
    return {this->__fbthrift_field_myBinary, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "myBinary" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myBinary() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myBinary), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "myByteDFSet" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myByteDFSet_ref() const& {
    return {this->__fbthrift_field_myByteDFSet, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "myByteDFSet" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myByteDFSet_ref() & {
    return {this->__fbthrift_field_myByteDFSet, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "myByteDFSet" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myByteDFSet_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myByteDFSet), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "myByteDFSet" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myByteDFSet() const& {
    return {this->__fbthrift_field_myByteDFSet, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "myByteDFSet" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myByteDFSet() & {
    return {this->__fbthrift_field_myByteDFSet, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "myByteDFSet" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myByteDFSet() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myByteDFSet), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "myByte" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myByte_ref() const& {
    return {this->__fbthrift_field_myByte, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "myByte" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myByte_ref() & {
    return {this->__fbthrift_field_myByte, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "myByte" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myByte_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myByte), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "myByte" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myByte() const& {
    return {this->__fbthrift_field_myByte, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "myByte" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myByte() & {
    return {this->__fbthrift_field_myByte, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "myByte" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myByte() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myByte), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "myDoubleDFset" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myDoubleDFset_ref() const& {
    return {this->__fbthrift_field_myDoubleDFset, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "myDoubleDFset" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myDoubleDFset_ref() & {
    return {this->__fbthrift_field_myDoubleDFset, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "myDoubleDFset" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myDoubleDFset_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myDoubleDFset), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "myDoubleDFset" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myDoubleDFset() const& {
    return {this->__fbthrift_field_myDoubleDFset, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "myDoubleDFset" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myDoubleDFset() & {
    return {this->__fbthrift_field_myDoubleDFset, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "myDoubleDFset" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myDoubleDFset() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myDoubleDFset), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "myDoubleDFZero" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myDoubleDFZero_ref() const& {
    return {this->__fbthrift_field_myDoubleDFZero, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "myDoubleDFZero" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myDoubleDFZero_ref() & {
    return {this->__fbthrift_field_myDoubleDFZero, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "myDoubleDFZero" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myDoubleDFZero_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myDoubleDFZero), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "myDoubleDFZero" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myDoubleDFZero() const& {
    return {this->__fbthrift_field_myDoubleDFZero, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "myDoubleDFZero" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myDoubleDFZero() & {
    return {this->__fbthrift_field_myDoubleDFZero, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "myDoubleDFZero" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myDoubleDFZero() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myDoubleDFZero), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "myDouble" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myDouble_ref() const& {
    return {this->__fbthrift_field_myDouble, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "myDouble" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myDouble_ref() & {
    return {this->__fbthrift_field_myDouble, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "myDouble" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myDouble_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myDouble), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "myDouble" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myDouble() const& {
    return {this->__fbthrift_field_myDouble, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "myDouble" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myDouble() & {
    return {this->__fbthrift_field_myDouble, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "myDouble" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myDouble() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myDouble), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field3_ref() const& {
    return {this->__fbthrift_field_field3, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field3_ref() & {
    return {this->__fbthrift_field_field3, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field3_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field3), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field3() const& {
    return {this->__fbthrift_field_field3, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field3() & {
    return {this->__fbthrift_field_field3, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field3() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field3), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "myList" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myList_ref() const& {
    return {this->__fbthrift_field_myList, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "myList" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myList_ref() & {
    return {this->__fbthrift_field_myList, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "myList" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myList_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myList), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "myList" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myList() const& {
    return {this->__fbthrift_field_myList, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "myList" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myList() & {
    return {this->__fbthrift_field_myList, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "myList" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myList() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myList), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "mySet" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mySet_ref() const& {
    return {this->__fbthrift_field_mySet, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "mySet" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mySet_ref() & {
    return {this->__fbthrift_field_mySet, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "mySet" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mySet_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mySet), __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "mySet" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mySet() const& {
    return {this->__fbthrift_field_mySet, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "mySet" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mySet() & {
    return {this->__fbthrift_field_mySet, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "mySet" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mySet() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mySet), __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "simpleStruct" } */
  template <typename..., typename fbthrift_T = ::cpp2::SimpleStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> simpleStruct_ref() const& {
    return {this->__fbthrift_field_simpleStruct, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "simpleStruct" } */
  template <typename..., typename fbthrift_T = ::cpp2::SimpleStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> simpleStruct_ref() & {
    return {this->__fbthrift_field_simpleStruct, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "simpleStruct" } */
  template <typename..., typename fbthrift_T = ::cpp2::SimpleStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> simpleStruct_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_simpleStruct), __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "simpleStruct" } */
  template <typename..., typename fbthrift_T = ::cpp2::SimpleStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> simpleStruct() const& {
    return {this->__fbthrift_field_simpleStruct, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "simpleStruct" } */
  template <typename..., typename fbthrift_T = ::cpp2::SimpleStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> simpleStruct() & {
    return {this->__fbthrift_field_simpleStruct, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "simpleStruct" } */
  template <typename..., typename fbthrift_T = ::cpp2::SimpleStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> simpleStruct() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_simpleStruct), __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "listStructDFset" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::SimpleStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> listStructDFset_ref() const& {
    return {this->__fbthrift_field_listStructDFset, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "listStructDFset" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::SimpleStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> listStructDFset_ref() & {
    return {this->__fbthrift_field_listStructDFset, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "listStructDFset" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::SimpleStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> listStructDFset_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_listStructDFset), __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "listStructDFset" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::SimpleStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> listStructDFset() const& {
    return {this->__fbthrift_field_listStructDFset, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "listStructDFset" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::SimpleStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> listStructDFset() & {
    return {this->__fbthrift_field_listStructDFset, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "listStructDFset" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::SimpleStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> listStructDFset() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_listStructDFset), __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "myUnion" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myUnion_ref() const& {
    return {this->__fbthrift_field_myUnion, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "myUnion" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myUnion_ref() & {
    return {this->__fbthrift_field_myUnion, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "myUnion" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myUnion_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myUnion), __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "myUnion" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myUnion() const& {
    return {this->__fbthrift_field_myUnion, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "myUnion" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myUnion() & {
    return {this->__fbthrift_field_myUnion, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "myUnion" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myUnion() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myUnion), __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "listUnionDFset" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::MyUnion>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> listUnionDFset_ref() const& {
    return {this->__fbthrift_field_listUnionDFset, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "listUnionDFset" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::MyUnion>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> listUnionDFset_ref() & {
    return {this->__fbthrift_field_listUnionDFset, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "listUnionDFset" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::MyUnion>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> listUnionDFset_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_listUnionDFset), __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "listUnionDFset" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::MyUnion>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> listUnionDFset() const& {
    return {this->__fbthrift_field_listUnionDFset, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "listUnionDFset" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::MyUnion>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> listUnionDFset() & {
    return {this->__fbthrift_field_listUnionDFset, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "listUnionDFset" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::MyUnion>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> listUnionDFset() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_listUnionDFset), __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "mapNestlistStructDfSet" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mapNestlistStructDfSet_ref() const& {
    return {this->__fbthrift_field_mapNestlistStructDfSet, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "mapNestlistStructDfSet" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mapNestlistStructDfSet_ref() & {
    return {this->__fbthrift_field_mapNestlistStructDfSet, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "mapNestlistStructDfSet" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mapNestlistStructDfSet_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mapNestlistStructDfSet), __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "mapNestlistStructDfSet" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mapNestlistStructDfSet() const& {
    return {this->__fbthrift_field_mapNestlistStructDfSet, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "mapNestlistStructDfSet" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mapNestlistStructDfSet() & {
    return {this->__fbthrift_field_mapNestlistStructDfSet, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "mapNestlistStructDfSet" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mapNestlistStructDfSet() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mapNestlistStructDfSet), __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "mapJavaTypeDFset" } */
  template <typename..., typename fbthrift_T = ::cpp2::map_i64_string_5732>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mapJavaTypeDFset_ref() const& {
    return {this->__fbthrift_field_mapJavaTypeDFset, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "mapJavaTypeDFset" } */
  template <typename..., typename fbthrift_T = ::cpp2::map_i64_string_5732>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mapJavaTypeDFset_ref() & {
    return {this->__fbthrift_field_mapJavaTypeDFset, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "mapJavaTypeDFset" } */
  template <typename..., typename fbthrift_T = ::cpp2::map_i64_string_5732>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mapJavaTypeDFset_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mapJavaTypeDFset), __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "mapJavaTypeDFset" } */
  template <typename..., typename fbthrift_T = ::cpp2::map_i64_string_5732>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mapJavaTypeDFset() const& {
    return {this->__fbthrift_field_mapJavaTypeDFset, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "mapJavaTypeDFset" } */
  template <typename..., typename fbthrift_T = ::cpp2::map_i64_string_5732>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mapJavaTypeDFset() & {
    return {this->__fbthrift_field_mapJavaTypeDFset, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "mapJavaTypeDFset" } */
  template <typename..., typename fbthrift_T = ::cpp2::map_i64_string_5732>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mapJavaTypeDFset() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mapJavaTypeDFset), __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "emptyMap" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int64_t, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> emptyMap_ref() const& {
    return {this->__fbthrift_field_emptyMap, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "emptyMap" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int64_t, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> emptyMap_ref() & {
    return {this->__fbthrift_field_emptyMap, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "emptyMap" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int64_t, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> emptyMap_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_emptyMap), __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "emptyMap" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int64_t, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> emptyMap() const& {
    return {this->__fbthrift_field_emptyMap, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "emptyMap" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int64_t, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> emptyMap() & {
    return {this->__fbthrift_field_emptyMap, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "emptyMap" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int64_t, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> emptyMap() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_emptyMap), __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "enumMapDFset" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::map<::std::int32_t, ::cpp2::MyEnum>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> enumMapDFset_ref() const& {
    return {this->__fbthrift_field_enumMapDFset, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "enumMapDFset" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::map<::std::int32_t, ::cpp2::MyEnum>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> enumMapDFset_ref() & {
    return {this->__fbthrift_field_enumMapDFset, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "enumMapDFset" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::map<::std::int32_t, ::cpp2::MyEnum>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> enumMapDFset_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_enumMapDFset), __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "enumMapDFset" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::map<::std::int32_t, ::cpp2::MyEnum>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> enumMapDFset() const& {
    return {this->__fbthrift_field_enumMapDFset, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "enumMapDFset" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::map<::std::int32_t, ::cpp2::MyEnum>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> enumMapDFset() & {
    return {this->__fbthrift_field_enumMapDFset, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "enumMapDFset" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::map<::std::int32_t, ::cpp2::MyEnum>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> enumMapDFset() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_enumMapDFset), __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "myLongDFset" } */
  [[deprecated("Use `FOO.myLongDFset().value()` instead of `FOO.get_myLongDFset()`")]]
  ::std::int64_t get_myLongDFset() const;

  /** Glean { "field": "myLongDFset" } */
  [[deprecated("Use `FOO.myLongDFset() = BAR` instead of `FOO.set_myLongDFset(BAR)`")]]
  ::std::int64_t& set_myLongDFset(::std::int64_t myLongDFset_);

  /** Glean { "field": "myLongDF" } */
  [[deprecated("Use `FOO.myLongDF().value()` instead of `FOO.get_myLongDF()`")]]
  ::std::int64_t get_myLongDF() const;

  /** Glean { "field": "myLongDF" } */
  [[deprecated("Use `FOO.myLongDF() = BAR` instead of `FOO.set_myLongDF(BAR)`")]]
  ::std::int64_t& set_myLongDF(::std::int64_t myLongDF_);

  /** Glean { "field": "portDFset" } */
  [[deprecated("Use `FOO.portDFset().value()` instead of `FOO.get_portDFset()`")]]
  ::std::int32_t get_portDFset() const;

  /** Glean { "field": "portDFset" } */
  [[deprecated("Use `FOO.portDFset() = BAR` instead of `FOO.set_portDFset(BAR)`")]]
  ::std::int32_t& set_portDFset(::std::int32_t portDFset_);

  /** Glean { "field": "portNum" } */
  [[deprecated("Use `FOO.portNum().value()` instead of `FOO.get_portNum()`")]]
  ::std::int32_t get_portNum() const;

  /** Glean { "field": "portNum" } */
  [[deprecated("Use `FOO.portNum() = BAR` instead of `FOO.set_portNum(BAR)`")]]
  ::std::int32_t& set_portNum(::std::int32_t portNum_);

  /** Glean { "field": "myBinaryDFset" } */
  [[deprecated("Use `FOO.myBinaryDFset().value()` instead of `FOO.get_myBinaryDFset()`")]]
  const ::std::string& get_myBinaryDFset() const& {
    return __fbthrift_field_myBinaryDFset;
  }

  /** Glean { "field": "myBinaryDFset" } */
  [[deprecated("Use `FOO.myBinaryDFset().value()` instead of `FOO.get_myBinaryDFset()`")]]
  ::std::string get_myBinaryDFset() && {
    return static_cast<::std::string&&>(__fbthrift_field_myBinaryDFset);
  }

  /** Glean { "field": "myBinaryDFset" } */
  template <typename T_defaultStruct_myBinaryDFset_struct_setter = ::std::string>
  [[deprecated("Use `FOO.myBinaryDFset() = BAR` instead of `FOO.set_myBinaryDFset(BAR)`")]]
  ::std::string& set_myBinaryDFset(T_defaultStruct_myBinaryDFset_struct_setter&& myBinaryDFset_) {
    myBinaryDFset_ref() = std::forward<T_defaultStruct_myBinaryDFset_struct_setter>(myBinaryDFset_);
    return __fbthrift_field_myBinaryDFset;
  }

  /** Glean { "field": "myBinary" } */
  [[deprecated("Use `FOO.myBinary().value()` instead of `FOO.get_myBinary()`")]]
  const ::std::string& get_myBinary() const& {
    return __fbthrift_field_myBinary;
  }

  /** Glean { "field": "myBinary" } */
  [[deprecated("Use `FOO.myBinary().value()` instead of `FOO.get_myBinary()`")]]
  ::std::string get_myBinary() && {
    return static_cast<::std::string&&>(__fbthrift_field_myBinary);
  }

  /** Glean { "field": "myBinary" } */
  template <typename T_defaultStruct_myBinary_struct_setter = ::std::string>
  [[deprecated("Use `FOO.myBinary() = BAR` instead of `FOO.set_myBinary(BAR)`")]]
  ::std::string& set_myBinary(T_defaultStruct_myBinary_struct_setter&& myBinary_) {
    myBinary_ref() = std::forward<T_defaultStruct_myBinary_struct_setter>(myBinary_);
    return __fbthrift_field_myBinary;
  }

  /** Glean { "field": "myByteDFSet" } */
  [[deprecated("Use `FOO.myByteDFSet().value()` instead of `FOO.get_myByteDFSet()`")]]
  ::std::int8_t get_myByteDFSet() const;

  /** Glean { "field": "myByteDFSet" } */
  [[deprecated("Use `FOO.myByteDFSet() = BAR` instead of `FOO.set_myByteDFSet(BAR)`")]]
  ::std::int8_t& set_myByteDFSet(::std::int8_t myByteDFSet_);

  /** Glean { "field": "myByte" } */
  [[deprecated("Use `FOO.myByte().value()` instead of `FOO.get_myByte()`")]]
  ::std::int8_t get_myByte() const;

  /** Glean { "field": "myByte" } */
  [[deprecated("Use `FOO.myByte() = BAR` instead of `FOO.set_myByte(BAR)`")]]
  ::std::int8_t& set_myByte(::std::int8_t myByte_);

  /** Glean { "field": "myDoubleDFset" } */
  [[deprecated("Use `FOO.myDoubleDFset().value()` instead of `FOO.get_myDoubleDFset()`")]]
  double get_myDoubleDFset() const;

  /** Glean { "field": "myDoubleDFset" } */
  [[deprecated("Use `FOO.myDoubleDFset() = BAR` instead of `FOO.set_myDoubleDFset(BAR)`")]]
  double& set_myDoubleDFset(double myDoubleDFset_);

  /** Glean { "field": "myDoubleDFZero" } */
  [[deprecated("Use `FOO.myDoubleDFZero().value()` instead of `FOO.get_myDoubleDFZero()`")]]
  double get_myDoubleDFZero() const;

  /** Glean { "field": "myDoubleDFZero" } */
  [[deprecated("Use `FOO.myDoubleDFZero() = BAR` instead of `FOO.set_myDoubleDFZero(BAR)`")]]
  double& set_myDoubleDFZero(double myDoubleDFZero_);

  /** Glean { "field": "myDouble" } */
  [[deprecated("Use `FOO.myDouble().value()` instead of `FOO.get_myDouble()`")]]
  double get_myDouble() const;

  /** Glean { "field": "myDouble" } */
  [[deprecated("Use `FOO.myDouble() = BAR` instead of `FOO.set_myDouble(BAR)`")]]
  double& set_myDouble(double myDouble_);

  /** Glean { "field": "field3" } */
  [[deprecated("Use `FOO.field3().value()` instead of `FOO.get_field3()`")]]
  const ::std::map<::std::int32_t, ::std::string>& get_field3() const&;

  /** Glean { "field": "field3" } */
  [[deprecated("Use `FOO.field3().value()` instead of `FOO.get_field3()`")]]
  ::std::map<::std::int32_t, ::std::string> get_field3() &&;

  /** Glean { "field": "field3" } */
  template <typename T_defaultStruct_field3_struct_setter = ::std::map<::std::int32_t, ::std::string>>
  [[deprecated("Use `FOO.field3() = BAR` instead of `FOO.set_field3(BAR)`")]]
  ::std::map<::std::int32_t, ::std::string>& set_field3(T_defaultStruct_field3_struct_setter&& field3_) {
    field3_ref() = std::forward<T_defaultStruct_field3_struct_setter>(field3_);
    return __fbthrift_field_field3;
  }

  /** Glean { "field": "myList" } */
  [[deprecated("Use `FOO.myList().value()` instead of `FOO.get_myList()`")]]
  const ::std::vector<::cpp2::MyEnum>& get_myList() const&;

  /** Glean { "field": "myList" } */
  [[deprecated("Use `FOO.myList().value()` instead of `FOO.get_myList()`")]]
  ::std::vector<::cpp2::MyEnum> get_myList() &&;

  /** Glean { "field": "myList" } */
  template <typename T_defaultStruct_myList_struct_setter = ::std::vector<::cpp2::MyEnum>>
  [[deprecated("Use `FOO.myList() = BAR` instead of `FOO.set_myList(BAR)`")]]
  ::std::vector<::cpp2::MyEnum>& set_myList(T_defaultStruct_myList_struct_setter&& myList_) {
    myList_ref() = std::forward<T_defaultStruct_myList_struct_setter>(myList_);
    return __fbthrift_field_myList;
  }

  /** Glean { "field": "mySet" } */
  [[deprecated("Use `FOO.mySet().value()` instead of `FOO.get_mySet()`")]]
  const ::std::set<::std::string>& get_mySet() const&;

  /** Glean { "field": "mySet" } */
  [[deprecated("Use `FOO.mySet().value()` instead of `FOO.get_mySet()`")]]
  ::std::set<::std::string> get_mySet() &&;

  /** Glean { "field": "mySet" } */
  template <typename T_defaultStruct_mySet_struct_setter = ::std::set<::std::string>>
  [[deprecated("Use `FOO.mySet() = BAR` instead of `FOO.set_mySet(BAR)`")]]
  ::std::set<::std::string>& set_mySet(T_defaultStruct_mySet_struct_setter&& mySet_) {
    mySet_ref() = std::forward<T_defaultStruct_mySet_struct_setter>(mySet_);
    return __fbthrift_field_mySet;
  }

  /** Glean { "field": "simpleStruct" } */
  [[deprecated("Use `FOO.simpleStruct().value()` instead of `FOO.get_simpleStruct()`")]]
  const ::cpp2::SimpleStruct& get_simpleStruct() const&;

  /** Glean { "field": "simpleStruct" } */
  [[deprecated("Use `FOO.simpleStruct().value()` instead of `FOO.get_simpleStruct()`")]]
  ::cpp2::SimpleStruct get_simpleStruct() &&;

  /** Glean { "field": "simpleStruct" } */
  template <typename T_defaultStruct_simpleStruct_struct_setter = ::cpp2::SimpleStruct>
  [[deprecated("Use `FOO.simpleStruct() = BAR` instead of `FOO.set_simpleStruct(BAR)`")]]
  ::cpp2::SimpleStruct& set_simpleStruct(T_defaultStruct_simpleStruct_struct_setter&& simpleStruct_) {
    simpleStruct_ref() = std::forward<T_defaultStruct_simpleStruct_struct_setter>(simpleStruct_);
    return __fbthrift_field_simpleStruct;
  }

  /** Glean { "field": "listStructDFset" } */
  [[deprecated("Use `FOO.listStructDFset().value()` instead of `FOO.get_listStructDFset()`")]]
  const ::std::vector<::cpp2::SimpleStruct>& get_listStructDFset() const&;

  /** Glean { "field": "listStructDFset" } */
  [[deprecated("Use `FOO.listStructDFset().value()` instead of `FOO.get_listStructDFset()`")]]
  ::std::vector<::cpp2::SimpleStruct> get_listStructDFset() &&;

  /** Glean { "field": "listStructDFset" } */
  template <typename T_defaultStruct_listStructDFset_struct_setter = ::std::vector<::cpp2::SimpleStruct>>
  [[deprecated("Use `FOO.listStructDFset() = BAR` instead of `FOO.set_listStructDFset(BAR)`")]]
  ::std::vector<::cpp2::SimpleStruct>& set_listStructDFset(T_defaultStruct_listStructDFset_struct_setter&& listStructDFset_) {
    listStructDFset_ref() = std::forward<T_defaultStruct_listStructDFset_struct_setter>(listStructDFset_);
    return __fbthrift_field_listStructDFset;
  }

  /** Glean { "field": "myUnion" } */
  [[deprecated("Use `FOO.myUnion().value()` instead of `FOO.get_myUnion()`")]]
  const ::cpp2::MyUnion& get_myUnion() const&;

  /** Glean { "field": "myUnion" } */
  [[deprecated("Use `FOO.myUnion().value()` instead of `FOO.get_myUnion()`")]]
  ::cpp2::MyUnion get_myUnion() &&;

  /** Glean { "field": "myUnion" } */
  template <typename T_defaultStruct_myUnion_struct_setter = ::cpp2::MyUnion>
  [[deprecated("Use `FOO.myUnion() = BAR` instead of `FOO.set_myUnion(BAR)`")]]
  ::cpp2::MyUnion& set_myUnion(T_defaultStruct_myUnion_struct_setter&& myUnion_) {
    myUnion_ref() = std::forward<T_defaultStruct_myUnion_struct_setter>(myUnion_);
    return __fbthrift_field_myUnion;
  }

  /** Glean { "field": "listUnionDFset" } */
  [[deprecated("Use `FOO.listUnionDFset().value()` instead of `FOO.get_listUnionDFset()`")]]
  const ::std::vector<::cpp2::MyUnion>& get_listUnionDFset() const&;

  /** Glean { "field": "listUnionDFset" } */
  [[deprecated("Use `FOO.listUnionDFset().value()` instead of `FOO.get_listUnionDFset()`")]]
  ::std::vector<::cpp2::MyUnion> get_listUnionDFset() &&;

  /** Glean { "field": "listUnionDFset" } */
  template <typename T_defaultStruct_listUnionDFset_struct_setter = ::std::vector<::cpp2::MyUnion>>
  [[deprecated("Use `FOO.listUnionDFset() = BAR` instead of `FOO.set_listUnionDFset(BAR)`")]]
  ::std::vector<::cpp2::MyUnion>& set_listUnionDFset(T_defaultStruct_listUnionDFset_struct_setter&& listUnionDFset_) {
    listUnionDFset_ref() = std::forward<T_defaultStruct_listUnionDFset_struct_setter>(listUnionDFset_);
    return __fbthrift_field_listUnionDFset;
  }

  /** Glean { "field": "mapNestlistStructDfSet" } */
  [[deprecated("Use `FOO.mapNestlistStructDfSet().value()` instead of `FOO.get_mapNestlistStructDfSet()`")]]
  const ::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>>& get_mapNestlistStructDfSet() const&;

  /** Glean { "field": "mapNestlistStructDfSet" } */
  [[deprecated("Use `FOO.mapNestlistStructDfSet().value()` instead of `FOO.get_mapNestlistStructDfSet()`")]]
  ::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>> get_mapNestlistStructDfSet() &&;

  /** Glean { "field": "mapNestlistStructDfSet" } */
  template <typename T_defaultStruct_mapNestlistStructDfSet_struct_setter = ::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>>>
  [[deprecated("Use `FOO.mapNestlistStructDfSet() = BAR` instead of `FOO.set_mapNestlistStructDfSet(BAR)`")]]
  ::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>>& set_mapNestlistStructDfSet(T_defaultStruct_mapNestlistStructDfSet_struct_setter&& mapNestlistStructDfSet_) {
    mapNestlistStructDfSet_ref() = std::forward<T_defaultStruct_mapNestlistStructDfSet_struct_setter>(mapNestlistStructDfSet_);
    return __fbthrift_field_mapNestlistStructDfSet;
  }

  /** Glean { "field": "mapJavaTypeDFset" } */
  [[deprecated("Use `FOO.mapJavaTypeDFset().value()` instead of `FOO.get_mapJavaTypeDFset()`")]]
  const ::cpp2::map_i64_string_5732& get_mapJavaTypeDFset() const&;

  /** Glean { "field": "mapJavaTypeDFset" } */
  [[deprecated("Use `FOO.mapJavaTypeDFset().value()` instead of `FOO.get_mapJavaTypeDFset()`")]]
  ::cpp2::map_i64_string_5732 get_mapJavaTypeDFset() &&;

  /** Glean { "field": "mapJavaTypeDFset" } */
  template <typename T_defaultStruct_mapJavaTypeDFset_struct_setter = ::cpp2::map_i64_string_5732>
  [[deprecated("Use `FOO.mapJavaTypeDFset() = BAR` instead of `FOO.set_mapJavaTypeDFset(BAR)`")]]
  ::cpp2::map_i64_string_5732& set_mapJavaTypeDFset(T_defaultStruct_mapJavaTypeDFset_struct_setter&& mapJavaTypeDFset_) {
    mapJavaTypeDFset_ref() = std::forward<T_defaultStruct_mapJavaTypeDFset_struct_setter>(mapJavaTypeDFset_);
    return __fbthrift_field_mapJavaTypeDFset;
  }

  /** Glean { "field": "emptyMap" } */
  [[deprecated("Use `FOO.emptyMap().value()` instead of `FOO.get_emptyMap()`")]]
  const ::std::map<::std::int64_t, ::std::int32_t>& get_emptyMap() const&;

  /** Glean { "field": "emptyMap" } */
  [[deprecated("Use `FOO.emptyMap().value()` instead of `FOO.get_emptyMap()`")]]
  ::std::map<::std::int64_t, ::std::int32_t> get_emptyMap() &&;

  /** Glean { "field": "emptyMap" } */
  template <typename T_defaultStruct_emptyMap_struct_setter = ::std::map<::std::int64_t, ::std::int32_t>>
  [[deprecated("Use `FOO.emptyMap() = BAR` instead of `FOO.set_emptyMap(BAR)`")]]
  ::std::map<::std::int64_t, ::std::int32_t>& set_emptyMap(T_defaultStruct_emptyMap_struct_setter&& emptyMap_) {
    emptyMap_ref() = std::forward<T_defaultStruct_emptyMap_struct_setter>(emptyMap_);
    return __fbthrift_field_emptyMap;
  }

  /** Glean { "field": "enumMapDFset" } */
  [[deprecated("Use `FOO.enumMapDFset().value()` instead of `FOO.get_enumMapDFset()`")]]
  const ::std::map<::std::string, ::std::map<::std::int32_t, ::cpp2::MyEnum>>& get_enumMapDFset() const&;

  /** Glean { "field": "enumMapDFset" } */
  [[deprecated("Use `FOO.enumMapDFset().value()` instead of `FOO.get_enumMapDFset()`")]]
  ::std::map<::std::string, ::std::map<::std::int32_t, ::cpp2::MyEnum>> get_enumMapDFset() &&;

  /** Glean { "field": "enumMapDFset" } */
  template <typename T_defaultStruct_enumMapDFset_struct_setter = ::std::map<::std::string, ::std::map<::std::int32_t, ::cpp2::MyEnum>>>
  [[deprecated("Use `FOO.enumMapDFset() = BAR` instead of `FOO.set_enumMapDFset(BAR)`")]]
  ::std::map<::std::string, ::std::map<::std::int32_t, ::cpp2::MyEnum>>& set_enumMapDFset(T_defaultStruct_enumMapDFset_struct_setter&& enumMapDFset_) {
    enumMapDFset_ref() = std::forward<T_defaultStruct_enumMapDFset_struct_setter>(enumMapDFset_);
    return __fbthrift_field_enumMapDFset;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<defaultStruct>;
  friend void swap(defaultStruct& a, defaultStruct& b);
};

template <class Protocol_>
unsigned long defaultStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/complex-struct/src/module.thrift", "name": "MyStructTypeDef", "kind": "struct" } */
class MyStructTypeDef final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 9;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::myLongField,
    ::apache::thrift::ident::myLongTypeDef,
    ::apache::thrift::ident::myStringField,
    ::apache::thrift::ident::myStringTypedef,
    ::apache::thrift::ident::myMapField,
    ::apache::thrift::ident::myMapTypedef,
    ::apache::thrift::ident::myListField,
    ::apache::thrift::ident::myListTypedef,
    ::apache::thrift::ident::myMapListOfTypeDef
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::list<::apache::thrift::type::list<::apache::thrift::type::double_t>>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructTypeDef;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  MyStructTypeDef();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructTypeDef(apache::thrift::FragileConstructor, ::std::int64_t myLongField__arg, ::cpp2::longTypeDef myLongTypeDef__arg, ::std::string myStringField__arg, ::cpp2::stringTypedef myStringTypedef__arg, ::std::map<::std::int16_t, ::std::string> myMapField__arg, ::cpp2::mapTypedef myMapTypedef__arg, ::std::vector<double> myListField__arg, ::cpp2::listTypedef myListTypedef__arg, ::std::map<::std::int16_t, ::std::vector<::cpp2::listTypedef>> myMapListOfTypeDef__arg);

  MyStructTypeDef(MyStructTypeDef&&) noexcept;

  MyStructTypeDef(const MyStructTypeDef& src);


  MyStructTypeDef& operator=(MyStructTypeDef&&) noexcept;
  MyStructTypeDef& operator=(const MyStructTypeDef& src);

  ~MyStructTypeDef();

 private:
  ::std::int64_t __fbthrift_field_myLongField;
 private:
  ::cpp2::longTypeDef __fbthrift_field_myLongTypeDef;
 private:
  ::std::string __fbthrift_field_myStringField;
 private:
  ::cpp2::stringTypedef __fbthrift_field_myStringTypedef;
 private:
  ::std::map<::std::int16_t, ::std::string> __fbthrift_field_myMapField;
 private:
  ::cpp2::mapTypedef __fbthrift_field_myMapTypedef;
 private:
  ::std::vector<double> __fbthrift_field_myListField;
 private:
  ::cpp2::listTypedef __fbthrift_field_myListTypedef;
 private:
  ::std::map<::std::int16_t, ::std::vector<::cpp2::listTypedef>> __fbthrift_field_myMapListOfTypeDef;
 private:
  apache::thrift::detail::isset_bitset<9, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructTypeDef&) const;
  bool operator<(const MyStructTypeDef&) const;

  /** Glean { "field": "myLongField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myLongField_ref() const& {
    return {this->__fbthrift_field_myLongField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "myLongField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myLongField_ref() & {
    return {this->__fbthrift_field_myLongField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "myLongField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myLongField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myLongField), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "myLongField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myLongField() const& {
    return {this->__fbthrift_field_myLongField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "myLongField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myLongField() & {
    return {this->__fbthrift_field_myLongField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "myLongField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myLongField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myLongField), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "myLongTypeDef" } */
  template <typename..., typename fbthrift_T = ::cpp2::longTypeDef>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myLongTypeDef_ref() const& {
    return {this->__fbthrift_field_myLongTypeDef, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "myLongTypeDef" } */
  template <typename..., typename fbthrift_T = ::cpp2::longTypeDef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myLongTypeDef_ref() & {
    return {this->__fbthrift_field_myLongTypeDef, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "myLongTypeDef" } */
  template <typename..., typename fbthrift_T = ::cpp2::longTypeDef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myLongTypeDef_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myLongTypeDef), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "myLongTypeDef" } */
  template <typename..., typename fbthrift_T = ::cpp2::longTypeDef>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myLongTypeDef() const& {
    return {this->__fbthrift_field_myLongTypeDef, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "myLongTypeDef" } */
  template <typename..., typename fbthrift_T = ::cpp2::longTypeDef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myLongTypeDef() & {
    return {this->__fbthrift_field_myLongTypeDef, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "myLongTypeDef" } */
  template <typename..., typename fbthrift_T = ::cpp2::longTypeDef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myLongTypeDef() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myLongTypeDef), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "myStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myStringField_ref() const& {
    return {this->__fbthrift_field_myStringField, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myStringField_ref() & {
    return {this->__fbthrift_field_myStringField, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myStringField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myStringField), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myStringField() const& {
    return {this->__fbthrift_field_myStringField, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myStringField() & {
    return {this->__fbthrift_field_myStringField, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myStringField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myStringField), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myStringTypedef" } */
  template <typename..., typename fbthrift_T = ::cpp2::stringTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myStringTypedef_ref() const& {
    return {this->__fbthrift_field_myStringTypedef, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myStringTypedef" } */
  template <typename..., typename fbthrift_T = ::cpp2::stringTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myStringTypedef_ref() & {
    return {this->__fbthrift_field_myStringTypedef, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myStringTypedef" } */
  template <typename..., typename fbthrift_T = ::cpp2::stringTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myStringTypedef_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myStringTypedef), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myStringTypedef" } */
  template <typename..., typename fbthrift_T = ::cpp2::stringTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myStringTypedef() const& {
    return {this->__fbthrift_field_myStringTypedef, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myStringTypedef" } */
  template <typename..., typename fbthrift_T = ::cpp2::stringTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myStringTypedef() & {
    return {this->__fbthrift_field_myStringTypedef, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myStringTypedef" } */
  template <typename..., typename fbthrift_T = ::cpp2::stringTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myStringTypedef() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myStringTypedef), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myMapField" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myMapField_ref() const& {
    return {this->__fbthrift_field_myMapField, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "myMapField" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myMapField_ref() & {
    return {this->__fbthrift_field_myMapField, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "myMapField" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myMapField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myMapField), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "myMapField" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myMapField() const& {
    return {this->__fbthrift_field_myMapField, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "myMapField" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myMapField() & {
    return {this->__fbthrift_field_myMapField, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "myMapField" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myMapField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myMapField), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "myMapTypedef" } */
  template <typename..., typename fbthrift_T = ::cpp2::mapTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myMapTypedef_ref() const& {
    return {this->__fbthrift_field_myMapTypedef, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "myMapTypedef" } */
  template <typename..., typename fbthrift_T = ::cpp2::mapTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myMapTypedef_ref() & {
    return {this->__fbthrift_field_myMapTypedef, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "myMapTypedef" } */
  template <typename..., typename fbthrift_T = ::cpp2::mapTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myMapTypedef_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myMapTypedef), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "myMapTypedef" } */
  template <typename..., typename fbthrift_T = ::cpp2::mapTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myMapTypedef() const& {
    return {this->__fbthrift_field_myMapTypedef, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "myMapTypedef" } */
  template <typename..., typename fbthrift_T = ::cpp2::mapTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myMapTypedef() & {
    return {this->__fbthrift_field_myMapTypedef, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "myMapTypedef" } */
  template <typename..., typename fbthrift_T = ::cpp2::mapTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myMapTypedef() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myMapTypedef), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "myListField" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myListField_ref() const& {
    return {this->__fbthrift_field_myListField, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "myListField" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myListField_ref() & {
    return {this->__fbthrift_field_myListField, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "myListField" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myListField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myListField), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "myListField" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myListField() const& {
    return {this->__fbthrift_field_myListField, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "myListField" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myListField() & {
    return {this->__fbthrift_field_myListField, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "myListField" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myListField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myListField), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "myListTypedef" } */
  template <typename..., typename fbthrift_T = ::cpp2::listTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myListTypedef_ref() const& {
    return {this->__fbthrift_field_myListTypedef, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "myListTypedef" } */
  template <typename..., typename fbthrift_T = ::cpp2::listTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myListTypedef_ref() & {
    return {this->__fbthrift_field_myListTypedef, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "myListTypedef" } */
  template <typename..., typename fbthrift_T = ::cpp2::listTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myListTypedef_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myListTypedef), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "myListTypedef" } */
  template <typename..., typename fbthrift_T = ::cpp2::listTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myListTypedef() const& {
    return {this->__fbthrift_field_myListTypedef, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "myListTypedef" } */
  template <typename..., typename fbthrift_T = ::cpp2::listTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myListTypedef() & {
    return {this->__fbthrift_field_myListTypedef, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "myListTypedef" } */
  template <typename..., typename fbthrift_T = ::cpp2::listTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myListTypedef() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myListTypedef), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "myMapListOfTypeDef" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::vector<::cpp2::listTypedef>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myMapListOfTypeDef_ref() const& {
    return {this->__fbthrift_field_myMapListOfTypeDef, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "myMapListOfTypeDef" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::vector<::cpp2::listTypedef>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myMapListOfTypeDef_ref() & {
    return {this->__fbthrift_field_myMapListOfTypeDef, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "myMapListOfTypeDef" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::vector<::cpp2::listTypedef>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myMapListOfTypeDef_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myMapListOfTypeDef), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "myMapListOfTypeDef" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::vector<::cpp2::listTypedef>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myMapListOfTypeDef() const& {
    return {this->__fbthrift_field_myMapListOfTypeDef, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "myMapListOfTypeDef" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::vector<::cpp2::listTypedef>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myMapListOfTypeDef() & {
    return {this->__fbthrift_field_myMapListOfTypeDef, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "myMapListOfTypeDef" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::vector<::cpp2::listTypedef>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myMapListOfTypeDef() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myMapListOfTypeDef), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "myLongField" } */
  [[deprecated("Use `FOO.myLongField().value()` instead of `FOO.get_myLongField()`")]]
  ::std::int64_t get_myLongField() const;

  /** Glean { "field": "myLongField" } */
  [[deprecated("Use `FOO.myLongField() = BAR` instead of `FOO.set_myLongField(BAR)`")]]
  ::std::int64_t& set_myLongField(::std::int64_t myLongField_);

  /** Glean { "field": "myLongTypeDef" } */
  [[deprecated("Use `FOO.myLongTypeDef().value()` instead of `FOO.get_myLongTypeDef()`")]]
  ::cpp2::longTypeDef get_myLongTypeDef() const;

  /** Glean { "field": "myLongTypeDef" } */
  [[deprecated("Use `FOO.myLongTypeDef() = BAR` instead of `FOO.set_myLongTypeDef(BAR)`")]]
  ::cpp2::longTypeDef& set_myLongTypeDef(::cpp2::longTypeDef myLongTypeDef_);

  /** Glean { "field": "myStringField" } */
  [[deprecated("Use `FOO.myStringField().value()` instead of `FOO.get_myStringField()`")]]
  const ::std::string& get_myStringField() const& {
    return __fbthrift_field_myStringField;
  }

  /** Glean { "field": "myStringField" } */
  [[deprecated("Use `FOO.myStringField().value()` instead of `FOO.get_myStringField()`")]]
  ::std::string get_myStringField() && {
    return static_cast<::std::string&&>(__fbthrift_field_myStringField);
  }

  /** Glean { "field": "myStringField" } */
  template <typename T_MyStructTypeDef_myStringField_struct_setter = ::std::string>
  [[deprecated("Use `FOO.myStringField() = BAR` instead of `FOO.set_myStringField(BAR)`")]]
  ::std::string& set_myStringField(T_MyStructTypeDef_myStringField_struct_setter&& myStringField_) {
    myStringField_ref() = std::forward<T_MyStructTypeDef_myStringField_struct_setter>(myStringField_);
    return __fbthrift_field_myStringField;
  }

  /** Glean { "field": "myStringTypedef" } */
  [[deprecated("Use `FOO.myStringTypedef().value()` instead of `FOO.get_myStringTypedef()`")]]
  const ::cpp2::stringTypedef& get_myStringTypedef() const& {
    return __fbthrift_field_myStringTypedef;
  }

  /** Glean { "field": "myStringTypedef" } */
  [[deprecated("Use `FOO.myStringTypedef().value()` instead of `FOO.get_myStringTypedef()`")]]
  ::cpp2::stringTypedef get_myStringTypedef() && {
    return static_cast<::cpp2::stringTypedef&&>(__fbthrift_field_myStringTypedef);
  }

  /** Glean { "field": "myStringTypedef" } */
  template <typename T_MyStructTypeDef_myStringTypedef_struct_setter = ::cpp2::stringTypedef>
  [[deprecated("Use `FOO.myStringTypedef() = BAR` instead of `FOO.set_myStringTypedef(BAR)`")]]
  ::cpp2::stringTypedef& set_myStringTypedef(T_MyStructTypeDef_myStringTypedef_struct_setter&& myStringTypedef_) {
    myStringTypedef_ref() = std::forward<T_MyStructTypeDef_myStringTypedef_struct_setter>(myStringTypedef_);
    return __fbthrift_field_myStringTypedef;
  }

  /** Glean { "field": "myMapField" } */
  [[deprecated("Use `FOO.myMapField().value()` instead of `FOO.get_myMapField()`")]]
  const ::std::map<::std::int16_t, ::std::string>& get_myMapField() const&;

  /** Glean { "field": "myMapField" } */
  [[deprecated("Use `FOO.myMapField().value()` instead of `FOO.get_myMapField()`")]]
  ::std::map<::std::int16_t, ::std::string> get_myMapField() &&;

  /** Glean { "field": "myMapField" } */
  template <typename T_MyStructTypeDef_myMapField_struct_setter = ::std::map<::std::int16_t, ::std::string>>
  [[deprecated("Use `FOO.myMapField() = BAR` instead of `FOO.set_myMapField(BAR)`")]]
  ::std::map<::std::int16_t, ::std::string>& set_myMapField(T_MyStructTypeDef_myMapField_struct_setter&& myMapField_) {
    myMapField_ref() = std::forward<T_MyStructTypeDef_myMapField_struct_setter>(myMapField_);
    return __fbthrift_field_myMapField;
  }

  /** Glean { "field": "myMapTypedef" } */
  [[deprecated("Use `FOO.myMapTypedef().value()` instead of `FOO.get_myMapTypedef()`")]]
  const ::cpp2::mapTypedef& get_myMapTypedef() const&;

  /** Glean { "field": "myMapTypedef" } */
  [[deprecated("Use `FOO.myMapTypedef().value()` instead of `FOO.get_myMapTypedef()`")]]
  ::cpp2::mapTypedef get_myMapTypedef() &&;

  /** Glean { "field": "myMapTypedef" } */
  template <typename T_MyStructTypeDef_myMapTypedef_struct_setter = ::cpp2::mapTypedef>
  [[deprecated("Use `FOO.myMapTypedef() = BAR` instead of `FOO.set_myMapTypedef(BAR)`")]]
  ::cpp2::mapTypedef& set_myMapTypedef(T_MyStructTypeDef_myMapTypedef_struct_setter&& myMapTypedef_) {
    myMapTypedef_ref() = std::forward<T_MyStructTypeDef_myMapTypedef_struct_setter>(myMapTypedef_);
    return __fbthrift_field_myMapTypedef;
  }

  /** Glean { "field": "myListField" } */
  [[deprecated("Use `FOO.myListField().value()` instead of `FOO.get_myListField()`")]]
  const ::std::vector<double>& get_myListField() const&;

  /** Glean { "field": "myListField" } */
  [[deprecated("Use `FOO.myListField().value()` instead of `FOO.get_myListField()`")]]
  ::std::vector<double> get_myListField() &&;

  /** Glean { "field": "myListField" } */
  template <typename T_MyStructTypeDef_myListField_struct_setter = ::std::vector<double>>
  [[deprecated("Use `FOO.myListField() = BAR` instead of `FOO.set_myListField(BAR)`")]]
  ::std::vector<double>& set_myListField(T_MyStructTypeDef_myListField_struct_setter&& myListField_) {
    myListField_ref() = std::forward<T_MyStructTypeDef_myListField_struct_setter>(myListField_);
    return __fbthrift_field_myListField;
  }

  /** Glean { "field": "myListTypedef" } */
  [[deprecated("Use `FOO.myListTypedef().value()` instead of `FOO.get_myListTypedef()`")]]
  const ::cpp2::listTypedef& get_myListTypedef() const&;

  /** Glean { "field": "myListTypedef" } */
  [[deprecated("Use `FOO.myListTypedef().value()` instead of `FOO.get_myListTypedef()`")]]
  ::cpp2::listTypedef get_myListTypedef() &&;

  /** Glean { "field": "myListTypedef" } */
  template <typename T_MyStructTypeDef_myListTypedef_struct_setter = ::cpp2::listTypedef>
  [[deprecated("Use `FOO.myListTypedef() = BAR` instead of `FOO.set_myListTypedef(BAR)`")]]
  ::cpp2::listTypedef& set_myListTypedef(T_MyStructTypeDef_myListTypedef_struct_setter&& myListTypedef_) {
    myListTypedef_ref() = std::forward<T_MyStructTypeDef_myListTypedef_struct_setter>(myListTypedef_);
    return __fbthrift_field_myListTypedef;
  }

  /** Glean { "field": "myMapListOfTypeDef" } */
  [[deprecated("Use `FOO.myMapListOfTypeDef().value()` instead of `FOO.get_myMapListOfTypeDef()`")]]
  const ::std::map<::std::int16_t, ::std::vector<::cpp2::listTypedef>>& get_myMapListOfTypeDef() const&;

  /** Glean { "field": "myMapListOfTypeDef" } */
  [[deprecated("Use `FOO.myMapListOfTypeDef().value()` instead of `FOO.get_myMapListOfTypeDef()`")]]
  ::std::map<::std::int16_t, ::std::vector<::cpp2::listTypedef>> get_myMapListOfTypeDef() &&;

  /** Glean { "field": "myMapListOfTypeDef" } */
  template <typename T_MyStructTypeDef_myMapListOfTypeDef_struct_setter = ::std::map<::std::int16_t, ::std::vector<::cpp2::listTypedef>>>
  [[deprecated("Use `FOO.myMapListOfTypeDef() = BAR` instead of `FOO.set_myMapListOfTypeDef(BAR)`")]]
  ::std::map<::std::int16_t, ::std::vector<::cpp2::listTypedef>>& set_myMapListOfTypeDef(T_MyStructTypeDef_myMapListOfTypeDef_struct_setter&& myMapListOfTypeDef_) {
    myMapListOfTypeDef_ref() = std::forward<T_MyStructTypeDef_myMapListOfTypeDef_struct_setter>(myMapListOfTypeDef_);
    return __fbthrift_field_myMapListOfTypeDef;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructTypeDef>;
  friend void swap(MyStructTypeDef& a, MyStructTypeDef& b);
};

template <class Protocol_>
unsigned long MyStructTypeDef::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/complex-struct/src/module.thrift", "name": "MyUnionFloatFieldThrowExp", "kind": "union" } */
class MyUnionFloatFieldThrowExp final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 4;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::myEnum,
    ::apache::thrift::ident::setFloat,
    ::apache::thrift::ident::myDataItem,
    ::apache::thrift::ident::complexNestedStruct
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::enum_t<::cpp2::MyEnum>,
    ::apache::thrift::type::list<::apache::thrift::type::list<::apache::thrift::type::float_t>>,
    ::apache::thrift::type::struct_t<::cpp2::MyDataItem>,
    ::apache::thrift::type::struct_t<::cpp2::ComplexNestedStruct>
  >;
  void __fbthrift_clear();
  void __fbthrift_destruct();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyUnionFloatFieldThrowExp;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:
  enum class Type : int {
    __EMPTY__ = 0,
    myEnum = 1,
    setFloat = 2,
    myDataItem = 3,
    complexNestedStruct = 4,
  } ;

  MyUnionFloatFieldThrowExp()
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {}

  MyUnionFloatFieldThrowExp(MyUnionFloatFieldThrowExp&& rhs) noexcept
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::myEnum:
      {
        set_myEnum(std::move(rhs.value_.myEnum));
        break;
      }
      case Type::setFloat:
      {
        set_setFloat(std::move(rhs.value_.setFloat));
        break;
      }
      case Type::myDataItem:
      {
        set_myDataItem(std::move(rhs.value_.myDataItem));
        break;
      }
      case Type::complexNestedStruct:
      {
        set_complexNestedStruct(std::move(rhs.value_.complexNestedStruct));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  MyUnionFloatFieldThrowExp(const MyUnionFloatFieldThrowExp& rhs);

  MyUnionFloatFieldThrowExp& operator=(MyUnionFloatFieldThrowExp&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        __fbthrift_clear();
        return *this;
      }
      case Type::myEnum:
      {
        set_myEnum(std::move(rhs.value_.myEnum));
        break;
      }
      case Type::setFloat:
      {
        set_setFloat(std::move(rhs.value_.setFloat));
        break;
      }
      case Type::myDataItem:
      {
        set_myDataItem(std::move(rhs.value_.myDataItem));
        break;
      }
      case Type::complexNestedStruct:
      {
        set_complexNestedStruct(std::move(rhs.value_.complexNestedStruct));
        break;
      }
      default:
      {
        assert(false);
        __fbthrift_clear();
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  MyUnionFloatFieldThrowExp& operator=(const MyUnionFloatFieldThrowExp& rhs);

  ~MyUnionFloatFieldThrowExp();

  union storage_type {
    ::cpp2::MyEnum myEnum;
    ::std::vector<::std::vector<float>> setFloat;
    ::cpp2::MyDataItem myDataItem;
    ::cpp2::ComplexNestedStruct complexNestedStruct;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const MyUnionFloatFieldThrowExp&) const;
  bool operator<(const MyUnionFloatFieldThrowExp&) const;

  /** Glean { "field": "myEnum" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::cpp2::MyEnum& set_myEnum(::cpp2::MyEnum t = ::cpp2::MyEnum()) {
    using T0 = ::cpp2::MyEnum;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::myEnum);
    ::new (std::addressof(value_.myEnum)) T(t);
    return value_.myEnum;
  }


  /** Glean { "field": "setFloat" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::std::vector<::std::vector<float>>& set_setFloat(::std::vector<::std::vector<float>> const &t) {
    using T0 = ::std::vector<::std::vector<float>>;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::setFloat);
    ::new (std::addressof(value_.setFloat)) T(t);
    return value_.setFloat;
  }

  /** Glean { "field": "setFloat" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::std::vector<::std::vector<float>>& set_setFloat(::std::vector<::std::vector<float>>&& t) {
    using T0 = ::std::vector<::std::vector<float>>;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::setFloat);
    ::new (std::addressof(value_.setFloat)) T(std::move(t));
    return value_.setFloat;
  }

  /** Glean { "field": "setFloat" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::vector<::std::vector<float>>, T...>> ::std::vector<::std::vector<float>>& set_setFloat(T&&... t) {
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::setFloat);
    ::new (std::addressof(value_.setFloat)) ::std::vector<::std::vector<float>>(std::forward<T>(t)...);
    return value_.setFloat;
  }

  /** Glean { "field": "myDataItem" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::cpp2::MyDataItem& set_myDataItem(::cpp2::MyDataItem const &t) {
    using T0 = ::cpp2::MyDataItem;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::myDataItem);
    ::new (std::addressof(value_.myDataItem)) T(t);
    return value_.myDataItem;
  }

  /** Glean { "field": "myDataItem" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::cpp2::MyDataItem& set_myDataItem(::cpp2::MyDataItem&& t) {
    using T0 = ::cpp2::MyDataItem;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::myDataItem);
    ::new (std::addressof(value_.myDataItem)) T(std::move(t));
    return value_.myDataItem;
  }

  /** Glean { "field": "myDataItem" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::cpp2::MyDataItem, T...>> ::cpp2::MyDataItem& set_myDataItem(T&&... t) {
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::myDataItem);
    ::new (std::addressof(value_.myDataItem)) ::cpp2::MyDataItem(std::forward<T>(t)...);
    return value_.myDataItem;
  }

  /** Glean { "field": "complexNestedStruct" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::cpp2::ComplexNestedStruct& set_complexNestedStruct(::cpp2::ComplexNestedStruct const &t) {
    using T0 = ::cpp2::ComplexNestedStruct;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::complexNestedStruct);
    ::new (std::addressof(value_.complexNestedStruct)) T(t);
    return value_.complexNestedStruct;
  }

  /** Glean { "field": "complexNestedStruct" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::cpp2::ComplexNestedStruct& set_complexNestedStruct(::cpp2::ComplexNestedStruct&& t) {
    using T0 = ::cpp2::ComplexNestedStruct;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::complexNestedStruct);
    ::new (std::addressof(value_.complexNestedStruct)) T(std::move(t));
    return value_.complexNestedStruct;
  }

  /** Glean { "field": "complexNestedStruct" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::cpp2::ComplexNestedStruct, T...>> ::cpp2::ComplexNestedStruct& set_complexNestedStruct(T&&... t) {
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::complexNestedStruct);
    ::new (std::addressof(value_.complexNestedStruct)) ::cpp2::ComplexNestedStruct(std::forward<T>(t)...);
    return value_.complexNestedStruct;
  }

  /** Glean { "field": "myEnum" } */
  ::cpp2::MyEnum const& get_myEnum() const {
    if (getType() != Type::myEnum) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.myEnum;
  }

  /** Glean { "field": "setFloat" } */
  ::std::vector<::std::vector<float>> const& get_setFloat() const {
    if (getType() != Type::setFloat) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.setFloat;
  }

  /** Glean { "field": "myDataItem" } */
  ::cpp2::MyDataItem const& get_myDataItem() const {
    if (getType() != Type::myDataItem) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.myDataItem;
  }

  /** Glean { "field": "complexNestedStruct" } */
  ::cpp2::ComplexNestedStruct const& get_complexNestedStruct() const {
    if (getType() != Type::complexNestedStruct) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.complexNestedStruct;
  }

  ::cpp2::MyEnum& mutable_myEnum() {
    assert(getType() == Type::myEnum);
    return value_.myEnum;
  }

  ::std::vector<::std::vector<float>>& mutable_setFloat() {
    assert(getType() == Type::setFloat);
    return value_.setFloat;
  }

  ::cpp2::MyDataItem& mutable_myDataItem() {
    assert(getType() == Type::myDataItem);
    return value_.myDataItem;
  }

  ::cpp2::ComplexNestedStruct& mutable_complexNestedStruct() {
    assert(getType() == Type::complexNestedStruct);
    return value_.complexNestedStruct;
  }

  template <typename..., typename T = ::cpp2::MyEnum>
  T move_myEnum() {
    assert(getType() == Type::myEnum);
    return std::move(value_.myEnum);
  }

  template <typename..., typename T = ::std::vector<::std::vector<float>>>
  T move_setFloat() {
    assert(getType() == Type::setFloat);
    return std::move(value_.setFloat);
  }

  template <typename..., typename T = ::cpp2::MyDataItem>
  T move_myDataItem() {
    assert(getType() == Type::myDataItem);
    return std::move(value_.myDataItem);
  }

  template <typename..., typename T = ::cpp2::ComplexNestedStruct>
  T move_complexNestedStruct() {
    assert(getType() == Type::complexNestedStruct);
    return std::move(value_.complexNestedStruct);
  }

  /** Glean { "field": "myEnum" } */
  template <typename..., typename T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> myEnum_ref() const& {
    return {value_.myEnum, fbthrift_type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myEnum" } */
  template <typename..., typename T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> myEnum_ref() & {
    return {value_.myEnum, fbthrift_type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myEnum" } */
  template <typename..., typename T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> myEnum_ref() && {
    return {std::move(value_.myEnum), fbthrift_type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myEnum" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::cpp2::MyEnum&> myEnum() const& {
    return {value_.myEnum, fbthrift_type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myEnum" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::cpp2::MyEnum&> myEnum() & {
    return {value_.myEnum, fbthrift_type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myEnum" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::cpp2::MyEnum&&> myEnum() && {
    return {std::move(value_.myEnum), fbthrift_type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "setFloat" } */
  template <typename..., typename T = ::std::vector<::std::vector<float>>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> setFloat_ref() const& {
    return {value_.setFloat, fbthrift_type_, folly::to_underlying(Type::setFloat), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "setFloat" } */
  template <typename..., typename T = ::std::vector<::std::vector<float>>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> setFloat_ref() & {
    return {value_.setFloat, fbthrift_type_, folly::to_underlying(Type::setFloat), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "setFloat" } */
  template <typename..., typename T = ::std::vector<::std::vector<float>>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> setFloat_ref() && {
    return {std::move(value_.setFloat), fbthrift_type_, folly::to_underlying(Type::setFloat), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "setFloat" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::std::vector<::std::vector<float>>&> setFloat() const& {
    return {value_.setFloat, fbthrift_type_, folly::to_underlying(Type::setFloat), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "setFloat" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::vector<::std::vector<float>>&> setFloat() & {
    return {value_.setFloat, fbthrift_type_, folly::to_underlying(Type::setFloat), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "setFloat" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::vector<::std::vector<float>>&&> setFloat() && {
    return {std::move(value_.setFloat), fbthrift_type_, folly::to_underlying(Type::setFloat), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "myDataItem" } */
  template <typename..., typename T = ::cpp2::MyDataItem>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> myDataItem_ref() const& {
    return {value_.myDataItem, fbthrift_type_, folly::to_underlying(Type::myDataItem), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myDataItem" } */
  template <typename..., typename T = ::cpp2::MyDataItem>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> myDataItem_ref() & {
    return {value_.myDataItem, fbthrift_type_, folly::to_underlying(Type::myDataItem), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myDataItem" } */
  template <typename..., typename T = ::cpp2::MyDataItem>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> myDataItem_ref() && {
    return {std::move(value_.myDataItem), fbthrift_type_, folly::to_underlying(Type::myDataItem), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myDataItem" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::cpp2::MyDataItem&> myDataItem() const& {
    return {value_.myDataItem, fbthrift_type_, folly::to_underlying(Type::myDataItem), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myDataItem" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::cpp2::MyDataItem&> myDataItem() & {
    return {value_.myDataItem, fbthrift_type_, folly::to_underlying(Type::myDataItem), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myDataItem" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::cpp2::MyDataItem&&> myDataItem() && {
    return {std::move(value_.myDataItem), fbthrift_type_, folly::to_underlying(Type::myDataItem), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "complexNestedStruct" } */
  template <typename..., typename T = ::cpp2::ComplexNestedStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> complexNestedStruct_ref() const& {
    return {value_.complexNestedStruct, fbthrift_type_, folly::to_underlying(Type::complexNestedStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "complexNestedStruct" } */
  template <typename..., typename T = ::cpp2::ComplexNestedStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> complexNestedStruct_ref() & {
    return {value_.complexNestedStruct, fbthrift_type_, folly::to_underlying(Type::complexNestedStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "complexNestedStruct" } */
  template <typename..., typename T = ::cpp2::ComplexNestedStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> complexNestedStruct_ref() && {
    return {std::move(value_.complexNestedStruct), fbthrift_type_, folly::to_underlying(Type::complexNestedStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "complexNestedStruct" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::cpp2::ComplexNestedStruct&> complexNestedStruct() const& {
    return {value_.complexNestedStruct, fbthrift_type_, folly::to_underlying(Type::complexNestedStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "complexNestedStruct" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::cpp2::ComplexNestedStruct&> complexNestedStruct() & {
    return {value_.complexNestedStruct, fbthrift_type_, folly::to_underlying(Type::complexNestedStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "complexNestedStruct" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::cpp2::ComplexNestedStruct&&> complexNestedStruct() && {
    return {std::move(value_.complexNestedStruct), fbthrift_type_, folly::to_underlying(Type::complexNestedStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(fbthrift_type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  storage_type value_;
  std::underlying_type_t<Type> fbthrift_type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyUnionFloatFieldThrowExp>;
  friend void swap(MyUnionFloatFieldThrowExp& a, MyUnionFloatFieldThrowExp& b);
};

template <class Protocol_>
unsigned long MyUnionFloatFieldThrowExp::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/complex-struct/src/module.thrift", "name": "TypeRemapped", "kind": "struct" } */
class TypeRemapped final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 4;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::lsMap,
    ::apache::thrift::ident::ioMap,
    ::apache::thrift::ident::BigInteger,
    ::apache::thrift::ident::binaryTestBuffer
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::map<::apache::thrift::type::i64_t, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::i64_t>>,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::binary_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TypeRemapped;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  TypeRemapped();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TypeRemapped(apache::thrift::FragileConstructor, ::cpp2::map_i64_string_5732 lsMap__arg, ::cpp2::map_i32_FMap_6797 ioMap__arg, ::cpp2::i32_1194 BigInteger__arg, ::cpp2::binary_4918 binaryTestBuffer__arg);

  TypeRemapped(TypeRemapped&&) noexcept;

  TypeRemapped(const TypeRemapped& src);


  TypeRemapped& operator=(TypeRemapped&&) noexcept;
  TypeRemapped& operator=(const TypeRemapped& src);

  ~TypeRemapped();

 private:
  ::cpp2::map_i64_string_5732 __fbthrift_field_lsMap;
 private:
  ::cpp2::map_i32_FMap_6797 __fbthrift_field_ioMap;
 private:
  ::cpp2::i32_1194 __fbthrift_field_BigInteger;
 private:
  ::cpp2::binary_4918 __fbthrift_field_binaryTestBuffer;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const TypeRemapped&) const;
  bool operator<(const TypeRemapped&) const;

  /** Glean { "field": "lsMap" } */
  template <typename..., typename fbthrift_T = ::cpp2::map_i64_string_5732>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lsMap_ref() const& {
    return {this->__fbthrift_field_lsMap, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lsMap" } */
  template <typename..., typename fbthrift_T = ::cpp2::map_i64_string_5732>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lsMap_ref() & {
    return {this->__fbthrift_field_lsMap, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lsMap" } */
  template <typename..., typename fbthrift_T = ::cpp2::map_i64_string_5732>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lsMap_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lsMap), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lsMap" } */
  template <typename..., typename fbthrift_T = ::cpp2::map_i64_string_5732>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lsMap() const& {
    return {this->__fbthrift_field_lsMap, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lsMap" } */
  template <typename..., typename fbthrift_T = ::cpp2::map_i64_string_5732>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lsMap() & {
    return {this->__fbthrift_field_lsMap, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "lsMap" } */
  template <typename..., typename fbthrift_T = ::cpp2::map_i64_string_5732>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lsMap() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lsMap), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "ioMap" } */
  template <typename..., typename fbthrift_T = ::cpp2::map_i32_FMap_6797>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> ioMap_ref() const& {
    return {this->__fbthrift_field_ioMap, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "ioMap" } */
  template <typename..., typename fbthrift_T = ::cpp2::map_i32_FMap_6797>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> ioMap_ref() & {
    return {this->__fbthrift_field_ioMap, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "ioMap" } */
  template <typename..., typename fbthrift_T = ::cpp2::map_i32_FMap_6797>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> ioMap_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_ioMap), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "ioMap" } */
  template <typename..., typename fbthrift_T = ::cpp2::map_i32_FMap_6797>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> ioMap() const& {
    return {this->__fbthrift_field_ioMap, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "ioMap" } */
  template <typename..., typename fbthrift_T = ::cpp2::map_i32_FMap_6797>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> ioMap() & {
    return {this->__fbthrift_field_ioMap, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "ioMap" } */
  template <typename..., typename fbthrift_T = ::cpp2::map_i32_FMap_6797>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> ioMap() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_ioMap), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "BigInteger" } */
  template <typename..., typename fbthrift_T = ::cpp2::i32_1194>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> BigInteger_ref() const& {
    return {this->__fbthrift_field_BigInteger, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "BigInteger" } */
  template <typename..., typename fbthrift_T = ::cpp2::i32_1194>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> BigInteger_ref() & {
    return {this->__fbthrift_field_BigInteger, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "BigInteger" } */
  template <typename..., typename fbthrift_T = ::cpp2::i32_1194>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> BigInteger_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_BigInteger), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "BigInteger" } */
  template <typename..., typename fbthrift_T = ::cpp2::i32_1194>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> BigInteger() const& {
    return {this->__fbthrift_field_BigInteger, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "BigInteger" } */
  template <typename..., typename fbthrift_T = ::cpp2::i32_1194>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> BigInteger() & {
    return {this->__fbthrift_field_BigInteger, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "BigInteger" } */
  template <typename..., typename fbthrift_T = ::cpp2::i32_1194>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> BigInteger() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_BigInteger), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "binaryTestBuffer" } */
  template <typename..., typename fbthrift_T = ::cpp2::binary_4918>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> binaryTestBuffer_ref() const& {
    return {this->__fbthrift_field_binaryTestBuffer, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "binaryTestBuffer" } */
  template <typename..., typename fbthrift_T = ::cpp2::binary_4918>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> binaryTestBuffer_ref() & {
    return {this->__fbthrift_field_binaryTestBuffer, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "binaryTestBuffer" } */
  template <typename..., typename fbthrift_T = ::cpp2::binary_4918>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> binaryTestBuffer_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_binaryTestBuffer), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "binaryTestBuffer" } */
  template <typename..., typename fbthrift_T = ::cpp2::binary_4918>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> binaryTestBuffer() const& {
    return {this->__fbthrift_field_binaryTestBuffer, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "binaryTestBuffer" } */
  template <typename..., typename fbthrift_T = ::cpp2::binary_4918>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> binaryTestBuffer() & {
    return {this->__fbthrift_field_binaryTestBuffer, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "binaryTestBuffer" } */
  template <typename..., typename fbthrift_T = ::cpp2::binary_4918>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> binaryTestBuffer() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_binaryTestBuffer), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "lsMap" } */
  [[deprecated("Use `FOO.lsMap().value()` instead of `FOO.get_lsMap()`")]]
  const ::cpp2::map_i64_string_5732& get_lsMap() const&;

  /** Glean { "field": "lsMap" } */
  [[deprecated("Use `FOO.lsMap().value()` instead of `FOO.get_lsMap()`")]]
  ::cpp2::map_i64_string_5732 get_lsMap() &&;

  /** Glean { "field": "lsMap" } */
  template <typename T_TypeRemapped_lsMap_struct_setter = ::cpp2::map_i64_string_5732>
  [[deprecated("Use `FOO.lsMap() = BAR` instead of `FOO.set_lsMap(BAR)`")]]
  ::cpp2::map_i64_string_5732& set_lsMap(T_TypeRemapped_lsMap_struct_setter&& lsMap_) {
    lsMap_ref() = std::forward<T_TypeRemapped_lsMap_struct_setter>(lsMap_);
    return __fbthrift_field_lsMap;
  }

  /** Glean { "field": "ioMap" } */
  [[deprecated("Use `FOO.ioMap().value()` instead of `FOO.get_ioMap()`")]]
  const ::cpp2::map_i32_FMap_6797& get_ioMap() const&;

  /** Glean { "field": "ioMap" } */
  [[deprecated("Use `FOO.ioMap().value()` instead of `FOO.get_ioMap()`")]]
  ::cpp2::map_i32_FMap_6797 get_ioMap() &&;

  /** Glean { "field": "ioMap" } */
  template <typename T_TypeRemapped_ioMap_struct_setter = ::cpp2::map_i32_FMap_6797>
  [[deprecated("Use `FOO.ioMap() = BAR` instead of `FOO.set_ioMap(BAR)`")]]
  ::cpp2::map_i32_FMap_6797& set_ioMap(T_TypeRemapped_ioMap_struct_setter&& ioMap_) {
    ioMap_ref() = std::forward<T_TypeRemapped_ioMap_struct_setter>(ioMap_);
    return __fbthrift_field_ioMap;
  }

  /** Glean { "field": "BigInteger" } */
  [[deprecated("Use `FOO.BigInteger().value()` instead of `FOO.get_BigInteger()`")]]
  ::cpp2::i32_1194 get_BigInteger() const;

  /** Glean { "field": "BigInteger" } */
  [[deprecated("Use `FOO.BigInteger() = BAR` instead of `FOO.set_BigInteger(BAR)`")]]
  ::cpp2::i32_1194& set_BigInteger(::cpp2::i32_1194 BigInteger_);

  /** Glean { "field": "binaryTestBuffer" } */
  [[deprecated("Use `FOO.binaryTestBuffer().value()` instead of `FOO.get_binaryTestBuffer()`")]]
  const ::cpp2::binary_4918& get_binaryTestBuffer() const& {
    return __fbthrift_field_binaryTestBuffer;
  }

  /** Glean { "field": "binaryTestBuffer" } */
  [[deprecated("Use `FOO.binaryTestBuffer().value()` instead of `FOO.get_binaryTestBuffer()`")]]
  ::cpp2::binary_4918 get_binaryTestBuffer() && {
    return static_cast<::cpp2::binary_4918&&>(__fbthrift_field_binaryTestBuffer);
  }

  /** Glean { "field": "binaryTestBuffer" } */
  template <typename T_TypeRemapped_binaryTestBuffer_struct_setter = ::cpp2::binary_4918>
  [[deprecated("Use `FOO.binaryTestBuffer() = BAR` instead of `FOO.set_binaryTestBuffer(BAR)`")]]
  ::cpp2::binary_4918& set_binaryTestBuffer(T_TypeRemapped_binaryTestBuffer_struct_setter&& binaryTestBuffer_) {
    binaryTestBuffer_ref() = std::forward<T_TypeRemapped_binaryTestBuffer_struct_setter>(binaryTestBuffer_);
    return __fbthrift_field_binaryTestBuffer;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TypeRemapped>;
  friend void swap(TypeRemapped& a, TypeRemapped& b);
};

template <class Protocol_>
unsigned long TypeRemapped::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/complex-struct/src/module.thrift", "name": "emptyXcep", "kind": "exception" } */
class FOLLY_EXPORT emptyXcep : public virtual apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::UNSPECIFIED;

 public:
  using __fbthrift_cpp2_type = emptyXcep;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  emptyXcep();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  emptyXcep(apache::thrift::FragileConstructor);

  emptyXcep(emptyXcep&&) noexcept;

  emptyXcep(const emptyXcep& src);


  emptyXcep& operator=(emptyXcep&&) noexcept;
  emptyXcep& operator=(const emptyXcep& src);

  ~emptyXcep() override;


 public:

  bool operator==(const emptyXcep&) const;
  bool operator<(const emptyXcep&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return "::cpp2::emptyXcep";
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<emptyXcep>;
  friend void swap(emptyXcep& a, emptyXcep& b);
};

template <class Protocol_>
unsigned long emptyXcep::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/complex-struct/src/module.thrift", "name": "reqXcep", "kind": "exception" } */
class FOLLY_EXPORT reqXcep : public virtual apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::message,
    ::apache::thrift::ident::errorCode
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::i32_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::UNSPECIFIED;

 public:
  using __fbthrift_cpp2_type = reqXcep;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  reqXcep();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  reqXcep(apache::thrift::FragileConstructor, ::std::string message__arg, ::std::int32_t errorCode__arg);

  reqXcep(reqXcep&&) noexcept;

  reqXcep(const reqXcep& src);


  reqXcep& operator=(reqXcep&&) noexcept;
  reqXcep& operator=(const reqXcep& src);

  ~reqXcep() override;

 private:
  ::std::string __fbthrift_field_message;
 private:
  ::std::int32_t __fbthrift_field_errorCode;

 public:

  bool operator==(const reqXcep&) const;
  bool operator<(const reqXcep&) const;

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> message_ref() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_message};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> message_ref() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_message};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> message_ref() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_message)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> message() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_message};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> message() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_message};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> message() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_message)};
  }

  /** Glean { "field": "errorCode" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> errorCode_ref() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_errorCode};
  }

  /** Glean { "field": "errorCode" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> errorCode_ref() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_errorCode};
  }

  /** Glean { "field": "errorCode" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> errorCode_ref() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_errorCode)};
  }

  /** Glean { "field": "errorCode" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> errorCode() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_errorCode};
  }

  /** Glean { "field": "errorCode" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> errorCode() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_errorCode};
  }

  /** Glean { "field": "errorCode" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> errorCode() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_errorCode)};
  }

  /** Glean { "field": "message" } */
  [[deprecated("Use `FOO.message().value()` instead of `FOO.get_message()`")]]
  const ::std::string& get_message() const& {
    return __fbthrift_field_message;
  }

  /** Glean { "field": "message" } */
  [[deprecated("Use `FOO.message().value()` instead of `FOO.get_message()`")]]
  ::std::string get_message() && {
    return static_cast<::std::string&&>(__fbthrift_field_message);
  }

  /** Glean { "field": "message" } */
  template <typename T_reqXcep_message_struct_setter = ::std::string>
  [[deprecated("Use `FOO.message() = BAR` instead of `FOO.set_message(BAR)`")]]
  ::std::string& set_message(T_reqXcep_message_struct_setter&& message_) {
    message_ref() = std::forward<T_reqXcep_message_struct_setter>(message_);
    return __fbthrift_field_message;
  }

  /** Glean { "field": "errorCode" } */
  [[deprecated("Use `FOO.errorCode().value()` instead of `FOO.get_errorCode()`")]]
  ::std::int32_t get_errorCode() const;

  /** Glean { "field": "errorCode" } */
  [[deprecated("Use `FOO.errorCode() = BAR` instead of `FOO.set_errorCode(BAR)`")]]
  ::std::int32_t& set_errorCode(::std::int32_t errorCode_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return "::cpp2::reqXcep";
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<reqXcep>;
  friend void swap(reqXcep& a, reqXcep& b);
};

template <class Protocol_>
unsigned long reqXcep::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/complex-struct/src/module.thrift", "name": "optXcep", "kind": "exception" } */
class FOLLY_EXPORT optXcep : public virtual apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::message,
    ::apache::thrift::ident::errorCode
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::i32_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::UNSPECIFIED;

 public:
  using __fbthrift_cpp2_type = optXcep;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  optXcep();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  optXcep(apache::thrift::FragileConstructor, ::std::string message__arg, ::std::int32_t errorCode__arg);

  optXcep(optXcep&&) noexcept;

  optXcep(const optXcep& src);


  optXcep& operator=(optXcep&&) noexcept;
  optXcep& operator=(const optXcep& src);

  ~optXcep() override;

 private:
  ::std::string __fbthrift_field_message;
 private:
  ::std::int32_t __fbthrift_field_errorCode;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const optXcep&) const;
  bool operator<(const optXcep&) const;

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> message_ref() const& {
    return {this->__fbthrift_field_message, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> message_ref() & {
    return {this->__fbthrift_field_message, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> message_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_message), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> message() const& {
    return {this->__fbthrift_field_message, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> message() & {
    return {this->__fbthrift_field_message, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> message() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_message), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "errorCode" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> errorCode_ref() const& {
    return {this->__fbthrift_field_errorCode, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "errorCode" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> errorCode_ref() & {
    return {this->__fbthrift_field_errorCode, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "errorCode" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> errorCode_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_errorCode), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "errorCode" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> errorCode() const& {
    return {this->__fbthrift_field_errorCode, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "errorCode" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> errorCode() & {
    return {this->__fbthrift_field_errorCode, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "errorCode" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> errorCode() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_errorCode), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "message" } */
  [[deprecated("Use `FOO.message().value()` instead of `FOO.get_message()`")]]
  const ::std::string* get_message() const&;

  /** Glean { "field": "message" } */
  [[deprecated("Use `FOO.message().value()` instead of `FOO.get_message()`")]]
  ::std::string* get_message() &;

  ::std::string* get_message() && = delete;

  /** Glean { "field": "message" } */
  template <typename T_optXcep_message_struct_setter = ::std::string>
  [[deprecated("Use `FOO.message() = BAR` instead of `FOO.set_message(BAR)`")]]
  ::std::string& set_message(T_optXcep_message_struct_setter&& message_) {
    message_ref() = std::forward<T_optXcep_message_struct_setter>(message_);
    return __fbthrift_field_message;
  }

  /** Glean { "field": "errorCode" } */
  [[deprecated("Use `FOO.errorCode().value()` instead of `FOO.get_errorCode()`")]]
  const ::std::int32_t* get_errorCode() const&;

  /** Glean { "field": "errorCode" } */
  [[deprecated("Use `FOO.errorCode().value()` instead of `FOO.get_errorCode()`")]]
  ::std::int32_t* get_errorCode() &;

  ::std::int32_t* get_errorCode() && = delete;

  /** Glean { "field": "errorCode" } */
  [[deprecated("Use `FOO.errorCode() = BAR` instead of `FOO.set_errorCode(BAR)`")]]
  ::std::int32_t& set_errorCode(::std::int32_t errorCode_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return "::cpp2::optXcep";
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<optXcep>;
  friend void swap(optXcep& a, optXcep& b);
};

template <class Protocol_>
unsigned long optXcep::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/complex-struct/src/module.thrift", "name": "complexException", "kind": "exception" } */
class FOLLY_EXPORT complexException : public virtual apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 6;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::message,
    ::apache::thrift::ident::listStrings,
    ::apache::thrift::ident::errorEnum,
    ::apache::thrift::ident::unionError,
    ::apache::thrift::ident::structError,
    ::apache::thrift::ident::lsMap
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::list<::apache::thrift::type::string_t>,
    ::apache::thrift::type::enum_t<::cpp2::MyEnum>,
    ::apache::thrift::type::union_t<::cpp2::MyUnion>,
    ::apache::thrift::type::struct_t<::cpp2::MyStruct>,
    ::apache::thrift::type::map<::apache::thrift::type::i64_t, ::apache::thrift::type::string_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::UNSPECIFIED;

 public:
  using __fbthrift_cpp2_type = complexException;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  complexException();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  complexException(apache::thrift::FragileConstructor, ::std::string message__arg, ::std::vector<::std::string> listStrings__arg, ::cpp2::MyEnum errorEnum__arg, ::cpp2::MyUnion unionError__arg, ::cpp2::MyStruct structError__arg, ::cpp2::map_i64_string_5732 lsMap__arg);

  complexException(complexException&&) noexcept;

  complexException(const complexException& src);


  complexException& operator=(complexException&&) noexcept;
  complexException& operator=(const complexException& src);

  ~complexException() override;

 private:
  ::std::string __fbthrift_field_message;
 private:
  ::std::vector<::std::string> __fbthrift_field_listStrings;
 private:
  ::cpp2::MyEnum __fbthrift_field_errorEnum;
 private:
  ::cpp2::MyUnion __fbthrift_field_unionError;
 private:
  ::cpp2::MyStruct __fbthrift_field_structError;
 private:
  ::cpp2::map_i64_string_5732 __fbthrift_field_lsMap;
 private:
  apache::thrift::detail::isset_bitset<6, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const complexException&) const;
  bool operator<(const complexException&) const;

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> message_ref() const& {
    return {this->__fbthrift_field_message, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> message_ref() & {
    return {this->__fbthrift_field_message, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> message_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_message), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> message() const& {
    return {this->__fbthrift_field_message, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> message() & {
    return {this->__fbthrift_field_message, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> message() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_message), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "listStrings" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> listStrings_ref() const& {
    return {this->__fbthrift_field_listStrings, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "listStrings" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> listStrings_ref() & {
    return {this->__fbthrift_field_listStrings, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "listStrings" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> listStrings_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_listStrings), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "listStrings" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> listStrings() const& {
    return {this->__fbthrift_field_listStrings, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "listStrings" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> listStrings() & {
    return {this->__fbthrift_field_listStrings, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "listStrings" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> listStrings() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_listStrings), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "errorEnum" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> errorEnum_ref() const& {
    return {this->__fbthrift_field_errorEnum, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "errorEnum" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> errorEnum_ref() & {
    return {this->__fbthrift_field_errorEnum, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "errorEnum" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> errorEnum_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_errorEnum), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "errorEnum" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> errorEnum() const& {
    return {this->__fbthrift_field_errorEnum, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "errorEnum" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> errorEnum() & {
    return {this->__fbthrift_field_errorEnum, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "errorEnum" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> errorEnum() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_errorEnum), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "unionError" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyUnion>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> unionError_ref() const& {
    return {this->__fbthrift_field_unionError, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "unionError" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyUnion>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> unionError_ref() & {
    return {this->__fbthrift_field_unionError, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "unionError" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyUnion>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> unionError_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_unionError), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "unionError" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyUnion>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> unionError() const& {
    return {this->__fbthrift_field_unionError, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "unionError" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyUnion>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> unionError() & {
    return {this->__fbthrift_field_unionError, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "unionError" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyUnion>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> unionError() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_unionError), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "structError" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> structError_ref() const& {
    return {this->__fbthrift_field_structError, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "structError" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> structError_ref() & {
    return {this->__fbthrift_field_structError, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "structError" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> structError_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_structError), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "structError" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> structError() const& {
    return {this->__fbthrift_field_structError, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "structError" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> structError() & {
    return {this->__fbthrift_field_structError, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "structError" } */
  template <typename..., typename fbthrift_T = ::cpp2::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> structError() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_structError), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "lsMap" } */
  template <typename..., typename fbthrift_T = ::cpp2::map_i64_string_5732>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lsMap_ref() const& {
    return {this->__fbthrift_field_lsMap, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "lsMap" } */
  template <typename..., typename fbthrift_T = ::cpp2::map_i64_string_5732>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lsMap_ref() & {
    return {this->__fbthrift_field_lsMap, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "lsMap" } */
  template <typename..., typename fbthrift_T = ::cpp2::map_i64_string_5732>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lsMap_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lsMap), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "lsMap" } */
  template <typename..., typename fbthrift_T = ::cpp2::map_i64_string_5732>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> lsMap() const& {
    return {this->__fbthrift_field_lsMap, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "lsMap" } */
  template <typename..., typename fbthrift_T = ::cpp2::map_i64_string_5732>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> lsMap() & {
    return {this->__fbthrift_field_lsMap, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "lsMap" } */
  template <typename..., typename fbthrift_T = ::cpp2::map_i64_string_5732>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> lsMap() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_lsMap), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "message" } */
  [[deprecated("Use `FOO.message().value()` instead of `FOO.get_message()`")]]
  const ::std::string& get_message() const& {
    return __fbthrift_field_message;
  }

  /** Glean { "field": "message" } */
  [[deprecated("Use `FOO.message().value()` instead of `FOO.get_message()`")]]
  ::std::string get_message() && {
    return static_cast<::std::string&&>(__fbthrift_field_message);
  }

  /** Glean { "field": "message" } */
  template <typename T_complexException_message_struct_setter = ::std::string>
  [[deprecated("Use `FOO.message() = BAR` instead of `FOO.set_message(BAR)`")]]
  ::std::string& set_message(T_complexException_message_struct_setter&& message_) {
    message_ref() = std::forward<T_complexException_message_struct_setter>(message_);
    return __fbthrift_field_message;
  }

  /** Glean { "field": "listStrings" } */
  [[deprecated("Use `FOO.listStrings().value()` instead of `FOO.get_listStrings()`")]]
  const ::std::vector<::std::string>& get_listStrings() const&;

  /** Glean { "field": "listStrings" } */
  [[deprecated("Use `FOO.listStrings().value()` instead of `FOO.get_listStrings()`")]]
  ::std::vector<::std::string> get_listStrings() &&;

  /** Glean { "field": "listStrings" } */
  template <typename T_complexException_listStrings_struct_setter = ::std::vector<::std::string>>
  [[deprecated("Use `FOO.listStrings() = BAR` instead of `FOO.set_listStrings(BAR)`")]]
  ::std::vector<::std::string>& set_listStrings(T_complexException_listStrings_struct_setter&& listStrings_) {
    listStrings_ref() = std::forward<T_complexException_listStrings_struct_setter>(listStrings_);
    return __fbthrift_field_listStrings;
  }

  /** Glean { "field": "errorEnum" } */
  [[deprecated("Use `FOO.errorEnum().value()` instead of `FOO.get_errorEnum()`")]]
  ::cpp2::MyEnum get_errorEnum() const;

  /** Glean { "field": "errorEnum" } */
  [[deprecated("Use `FOO.errorEnum() = BAR` instead of `FOO.set_errorEnum(BAR)`")]]
  ::cpp2::MyEnum& set_errorEnum(::cpp2::MyEnum errorEnum_);

  /** Glean { "field": "unionError" } */
  [[deprecated("Use `FOO.unionError().value()` instead of `FOO.get_unionError()`")]]
  const ::cpp2::MyUnion* get_unionError() const&;

  /** Glean { "field": "unionError" } */
  [[deprecated("Use `FOO.unionError().value()` instead of `FOO.get_unionError()`")]]
  ::cpp2::MyUnion* get_unionError() &;

  ::cpp2::MyUnion* get_unionError() && = delete;

  /** Glean { "field": "unionError" } */
  template <typename T_complexException_unionError_struct_setter = ::cpp2::MyUnion>
  [[deprecated("Use `FOO.unionError() = BAR` instead of `FOO.set_unionError(BAR)`")]]
  ::cpp2::MyUnion& set_unionError(T_complexException_unionError_struct_setter&& unionError_) {
    unionError_ref() = std::forward<T_complexException_unionError_struct_setter>(unionError_);
    return __fbthrift_field_unionError;
  }

  /** Glean { "field": "structError" } */
  [[deprecated("Use `FOO.structError().value()` instead of `FOO.get_structError()`")]]
  const ::cpp2::MyStruct& get_structError() const&;

  /** Glean { "field": "structError" } */
  [[deprecated("Use `FOO.structError().value()` instead of `FOO.get_structError()`")]]
  ::cpp2::MyStruct get_structError() &&;

  /** Glean { "field": "structError" } */
  template <typename T_complexException_structError_struct_setter = ::cpp2::MyStruct>
  [[deprecated("Use `FOO.structError() = BAR` instead of `FOO.set_structError(BAR)`")]]
  ::cpp2::MyStruct& set_structError(T_complexException_structError_struct_setter&& structError_) {
    structError_ref() = std::forward<T_complexException_structError_struct_setter>(structError_);
    return __fbthrift_field_structError;
  }

  /** Glean { "field": "lsMap" } */
  [[deprecated("Use `FOO.lsMap().value()` instead of `FOO.get_lsMap()`")]]
  const ::cpp2::map_i64_string_5732& get_lsMap() const&;

  /** Glean { "field": "lsMap" } */
  [[deprecated("Use `FOO.lsMap().value()` instead of `FOO.get_lsMap()`")]]
  ::cpp2::map_i64_string_5732 get_lsMap() &&;

  /** Glean { "field": "lsMap" } */
  template <typename T_complexException_lsMap_struct_setter = ::cpp2::map_i64_string_5732>
  [[deprecated("Use `FOO.lsMap() = BAR` instead of `FOO.set_lsMap(BAR)`")]]
  ::cpp2::map_i64_string_5732& set_lsMap(T_complexException_lsMap_struct_setter&& lsMap_) {
    lsMap_ref() = std::forward<T_complexException_lsMap_struct_setter>(lsMap_);
    return __fbthrift_field_lsMap;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return "::cpp2::complexException";
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<complexException>;
  friend void swap(complexException& a, complexException& b);
};

template <class Protocol_>
unsigned long complexException::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/complex-struct/src/module.thrift", "name": "Containers", "kind": "struct" } */
class Containers final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 37;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::struct_list,
    ::apache::thrift::ident::union_list,
    ::apache::thrift::ident::enum_list,
    ::apache::thrift::ident::struct_set,
    ::apache::thrift::ident::union_set,
    ::apache::thrift::ident::enum_set,
    ::apache::thrift::ident::struct_map,
    ::apache::thrift::ident::union_map,
    ::apache::thrift::ident::enum_map,
    ::apache::thrift::ident::struct_map_2,
    ::apache::thrift::ident::union_map_2,
    ::apache::thrift::ident::enum_map_2,
    ::apache::thrift::ident::list_map,
    ::apache::thrift::ident::list_map_2,
    ::apache::thrift::ident::set_map,
    ::apache::thrift::ident::set_map_2,
    ::apache::thrift::ident::map_map,
    ::apache::thrift::ident::map_map_2,
    ::apache::thrift::ident::list_list_i32,
    ::apache::thrift::ident::list_list_struct,
    ::apache::thrift::ident::list_set_i32,
    ::apache::thrift::ident::list_set_struct,
    ::apache::thrift::ident::list_map_i32_i32,
    ::apache::thrift::ident::list_map_i32_struct,
    ::apache::thrift::ident::list_map_struct_i32,
    ::apache::thrift::ident::set_list_i32,
    ::apache::thrift::ident::set_list_struct,
    ::apache::thrift::ident::set_set_i32,
    ::apache::thrift::ident::set_set_struct,
    ::apache::thrift::ident::set_map_i32_i32,
    ::apache::thrift::ident::set_map_i32_struct,
    ::apache::thrift::ident::set_map_struct_i32,
    ::apache::thrift::ident::map_i32_map_i32_i32,
    ::apache::thrift::ident::map_i32_map_struct_i32,
    ::apache::thrift::ident::map_i32_map_i32_struct,
    ::apache::thrift::ident::map_i32_map_list_i32_i32,
    ::apache::thrift::ident::map_i32_map_list_struct_i32
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::struct_t<::cpp2::MyStruct>>,
    ::apache::thrift::type::list<::apache::thrift::type::union_t<::cpp2::MyUnion>>,
    ::apache::thrift::type::list<::apache::thrift::type::enum_t<::cpp2::MyEnum>>,
    ::apache::thrift::type::set<::apache::thrift::type::struct_t<::cpp2::MyStruct>>,
    ::apache::thrift::type::set<::apache::thrift::type::union_t<::cpp2::MyUnion>>,
    ::apache::thrift::type::set<::apache::thrift::type::enum_t<::cpp2::MyEnum>>,
    ::apache::thrift::type::map<::apache::thrift::type::struct_t<::cpp2::MyStruct>, ::apache::thrift::type::i64_t>,
    ::apache::thrift::type::map<::apache::thrift::type::union_t<::cpp2::MyUnion>, ::apache::thrift::type::i64_t>,
    ::apache::thrift::type::map<::apache::thrift::type::enum_t<::cpp2::MyEnum>, ::apache::thrift::type::i64_t>,
    ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::struct_t<::cpp2::MyStruct>>,
    ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::union_t<::cpp2::MyUnion>>,
    ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::enum_t<::cpp2::MyEnum>>,
    ::apache::thrift::type::map<::apache::thrift::type::list<::apache::thrift::type::i32_t>, ::apache::thrift::type::i32_t>,
    ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::list<::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::map<::apache::thrift::type::set<::apache::thrift::type::i32_t>, ::apache::thrift::type::i32_t>,
    ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::set<::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::map<::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::i32_t>, ::apache::thrift::type::i32_t>,
    ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::list<::apache::thrift::type::list<::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::list<::apache::thrift::type::list<::apache::thrift::type::struct_t<::cpp2::MyStruct>>>,
    ::apache::thrift::type::list<::apache::thrift::type::set<::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::list<::apache::thrift::type::set<::apache::thrift::type::struct_t<::cpp2::MyStruct>>>,
    ::apache::thrift::type::list<::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::list<::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::struct_t<::cpp2::MyStruct>>>,
    ::apache::thrift::type::list<::apache::thrift::type::map<::apache::thrift::type::struct_t<::cpp2::MyStruct>, ::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::set<::apache::thrift::type::list<::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::set<::apache::thrift::type::list<::apache::thrift::type::struct_t<::cpp2::MyStruct>>>,
    ::apache::thrift::type::set<::apache::thrift::type::set<::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::set<::apache::thrift::type::set<::apache::thrift::type::struct_t<::cpp2::MyStruct>>>,
    ::apache::thrift::type::set<::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::set<::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::struct_t<::cpp2::MyStruct>>>,
    ::apache::thrift::type::set<::apache::thrift::type::map<::apache::thrift::type::struct_t<::cpp2::MyStruct>, ::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::map<::apache::thrift::type::struct_t<::cpp2::MyStruct>, ::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::struct_t<::cpp2::MyStruct>>>,
    ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::list<::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::i32_t>>>,
    ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::list<::apache::thrift::type::map<::apache::thrift::type::struct_t<::cpp2::MyStruct>, ::apache::thrift::type::i32_t>>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Containers;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  Containers();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Containers(apache::thrift::FragileConstructor, ::std::vector<::cpp2::MyStruct> struct_list__arg, ::std::vector<::cpp2::MyUnion> union_list__arg, ::std::vector<::cpp2::MyEnum> enum_list__arg, ::std::set<::cpp2::MyStruct> struct_set__arg, ::std::set<::cpp2::MyUnion> union_set__arg, ::std::set<::cpp2::MyEnum> enum_set__arg, ::std::map<::cpp2::MyStruct, ::std::int64_t> struct_map__arg, ::std::map<::cpp2::MyUnion, ::std::int64_t> union_map__arg, ::std::map<::cpp2::MyEnum, ::std::int64_t> enum_map__arg, ::std::map<::std::int32_t, ::cpp2::MyStruct> struct_map_2__arg, ::std::map<::std::int32_t, ::cpp2::MyUnion> union_map_2__arg, ::std::map<::std::int32_t, ::cpp2::MyEnum> enum_map_2__arg, ::std::map<::std::vector<::std::int32_t>, ::std::int32_t> list_map__arg, ::std::map<::std::int32_t, ::std::vector<::std::int32_t>> list_map_2__arg, ::std::map<::std::set<::std::int32_t>, ::std::int32_t> set_map__arg, ::std::map<::std::int32_t, ::std::set<::std::int32_t>> set_map_2__arg, ::std::map<::std::map<::std::int32_t, ::std::int32_t>, ::std::int32_t> map_map__arg, ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>> map_map_2__arg, ::std::vector<::std::vector<::std::int32_t>> list_list_i32__arg, ::std::vector<::std::vector<::cpp2::MyStruct>> list_list_struct__arg, ::std::vector<::std::set<::std::int32_t>> list_set_i32__arg, ::std::vector<::std::set<::cpp2::MyStruct>> list_set_struct__arg, ::std::vector<::std::map<::std::int32_t, ::std::int32_t>> list_map_i32_i32__arg, ::std::vector<::std::map<::std::int32_t, ::cpp2::MyStruct>> list_map_i32_struct__arg, ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>> list_map_struct_i32__arg, ::std::set<::std::vector<::std::int32_t>> set_list_i32__arg, ::std::set<::std::vector<::cpp2::MyStruct>> set_list_struct__arg, ::std::set<::std::set<::std::int32_t>> set_set_i32__arg, ::std::set<::std::set<::cpp2::MyStruct>> set_set_struct__arg, ::std::set<::std::map<::std::int32_t, ::std::int32_t>> set_map_i32_i32__arg, ::std::set<::std::map<::std::int32_t, ::cpp2::MyStruct>> set_map_i32_struct__arg, ::std::set<::std::map<::cpp2::MyStruct, ::std::int32_t>> set_map_struct_i32__arg, ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>> map_i32_map_i32_i32__arg, ::std::map<::std::int32_t, ::std::map<::cpp2::MyStruct, ::std::int32_t>> map_i32_map_struct_i32__arg, ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::cpp2::MyStruct>> map_i32_map_i32_struct__arg, ::std::map<::std::int32_t, ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>> map_i32_map_list_i32_i32__arg, ::std::map<::std::int32_t, ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>>> map_i32_map_list_struct_i32__arg);

  Containers(Containers&&) noexcept;

  Containers(const Containers& src);


  Containers& operator=(Containers&&) noexcept;
  Containers& operator=(const Containers& src);

  ~Containers();

 private:
  ::std::vector<::cpp2::MyStruct> __fbthrift_field_struct_list;
 private:
  ::std::vector<::cpp2::MyUnion> __fbthrift_field_union_list;
 private:
  ::std::vector<::cpp2::MyEnum> __fbthrift_field_enum_list;
 private:
  ::std::set<::cpp2::MyStruct> __fbthrift_field_struct_set;
 private:
  ::std::set<::cpp2::MyUnion> __fbthrift_field_union_set;
 private:
  ::std::set<::cpp2::MyEnum> __fbthrift_field_enum_set;
 private:
  ::std::map<::cpp2::MyStruct, ::std::int64_t> __fbthrift_field_struct_map;
 private:
  ::std::map<::cpp2::MyUnion, ::std::int64_t> __fbthrift_field_union_map;
 private:
  ::std::map<::cpp2::MyEnum, ::std::int64_t> __fbthrift_field_enum_map;
 private:
  ::std::map<::std::int32_t, ::cpp2::MyStruct> __fbthrift_field_struct_map_2;
 private:
  ::std::map<::std::int32_t, ::cpp2::MyUnion> __fbthrift_field_union_map_2;
 private:
  ::std::map<::std::int32_t, ::cpp2::MyEnum> __fbthrift_field_enum_map_2;
 private:
  ::std::map<::std::vector<::std::int32_t>, ::std::int32_t> __fbthrift_field_list_map;
 private:
  ::std::map<::std::int32_t, ::std::vector<::std::int32_t>> __fbthrift_field_list_map_2;
 private:
  ::std::map<::std::set<::std::int32_t>, ::std::int32_t> __fbthrift_field_set_map;
 private:
  ::std::map<::std::int32_t, ::std::set<::std::int32_t>> __fbthrift_field_set_map_2;
 private:
  ::std::map<::std::map<::std::int32_t, ::std::int32_t>, ::std::int32_t> __fbthrift_field_map_map;
 private:
  ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>> __fbthrift_field_map_map_2;
 private:
  ::std::vector<::std::vector<::std::int32_t>> __fbthrift_field_list_list_i32;
 private:
  ::std::vector<::std::vector<::cpp2::MyStruct>> __fbthrift_field_list_list_struct;
 private:
  ::std::vector<::std::set<::std::int32_t>> __fbthrift_field_list_set_i32;
 private:
  ::std::vector<::std::set<::cpp2::MyStruct>> __fbthrift_field_list_set_struct;
 private:
  ::std::vector<::std::map<::std::int32_t, ::std::int32_t>> __fbthrift_field_list_map_i32_i32;
 private:
  ::std::vector<::std::map<::std::int32_t, ::cpp2::MyStruct>> __fbthrift_field_list_map_i32_struct;
 private:
  ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>> __fbthrift_field_list_map_struct_i32;
 private:
  ::std::set<::std::vector<::std::int32_t>> __fbthrift_field_set_list_i32;
 private:
  ::std::set<::std::vector<::cpp2::MyStruct>> __fbthrift_field_set_list_struct;
 private:
  ::std::set<::std::set<::std::int32_t>> __fbthrift_field_set_set_i32;
 private:
  ::std::set<::std::set<::cpp2::MyStruct>> __fbthrift_field_set_set_struct;
 private:
  ::std::set<::std::map<::std::int32_t, ::std::int32_t>> __fbthrift_field_set_map_i32_i32;
 private:
  ::std::set<::std::map<::std::int32_t, ::cpp2::MyStruct>> __fbthrift_field_set_map_i32_struct;
 private:
  ::std::set<::std::map<::cpp2::MyStruct, ::std::int32_t>> __fbthrift_field_set_map_struct_i32;
 private:
  ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>> __fbthrift_field_map_i32_map_i32_i32;
 private:
  ::std::map<::std::int32_t, ::std::map<::cpp2::MyStruct, ::std::int32_t>> __fbthrift_field_map_i32_map_struct_i32;
 private:
  ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::cpp2::MyStruct>> __fbthrift_field_map_i32_map_i32_struct;
 private:
  ::std::map<::std::int32_t, ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>> __fbthrift_field_map_i32_map_list_i32_i32;
 private:
  ::std::map<::std::int32_t, ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>>> __fbthrift_field_map_i32_map_list_struct_i32;
 private:
  apache::thrift::detail::isset_bitset<37, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const Containers&) const;
  bool operator<(const Containers&) const;

  /** Glean { "field": "struct_list" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> struct_list_ref() const& {
    return {this->__fbthrift_field_struct_list, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "struct_list" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> struct_list_ref() & {
    return {this->__fbthrift_field_struct_list, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "struct_list" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> struct_list_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_struct_list), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "struct_list" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> struct_list() const& {
    return {this->__fbthrift_field_struct_list, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "struct_list" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> struct_list() & {
    return {this->__fbthrift_field_struct_list, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "struct_list" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> struct_list() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_struct_list), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "union_list" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::MyUnion>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> union_list_ref() const& {
    return {this->__fbthrift_field_union_list, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "union_list" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::MyUnion>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> union_list_ref() & {
    return {this->__fbthrift_field_union_list, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "union_list" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::MyUnion>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> union_list_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_union_list), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "union_list" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::MyUnion>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> union_list() const& {
    return {this->__fbthrift_field_union_list, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "union_list" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::MyUnion>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> union_list() & {
    return {this->__fbthrift_field_union_list, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "union_list" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::MyUnion>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> union_list() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_union_list), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "enum_list" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> enum_list_ref() const& {
    return {this->__fbthrift_field_enum_list, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "enum_list" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> enum_list_ref() & {
    return {this->__fbthrift_field_enum_list, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "enum_list" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> enum_list_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_enum_list), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "enum_list" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> enum_list() const& {
    return {this->__fbthrift_field_enum_list, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "enum_list" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> enum_list() & {
    return {this->__fbthrift_field_enum_list, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "enum_list" } */
  template <typename..., typename fbthrift_T = ::std::vector<::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> enum_list() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_enum_list), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "struct_set" } */
  template <typename..., typename fbthrift_T = ::std::set<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> struct_set_ref() const& {
    return {this->__fbthrift_field_struct_set, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "struct_set" } */
  template <typename..., typename fbthrift_T = ::std::set<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> struct_set_ref() & {
    return {this->__fbthrift_field_struct_set, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "struct_set" } */
  template <typename..., typename fbthrift_T = ::std::set<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> struct_set_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_struct_set), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "struct_set" } */
  template <typename..., typename fbthrift_T = ::std::set<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> struct_set() const& {
    return {this->__fbthrift_field_struct_set, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "struct_set" } */
  template <typename..., typename fbthrift_T = ::std::set<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> struct_set() & {
    return {this->__fbthrift_field_struct_set, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "struct_set" } */
  template <typename..., typename fbthrift_T = ::std::set<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> struct_set() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_struct_set), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "union_set" } */
  template <typename..., typename fbthrift_T = ::std::set<::cpp2::MyUnion>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> union_set_ref() const& {
    return {this->__fbthrift_field_union_set, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "union_set" } */
  template <typename..., typename fbthrift_T = ::std::set<::cpp2::MyUnion>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> union_set_ref() & {
    return {this->__fbthrift_field_union_set, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "union_set" } */
  template <typename..., typename fbthrift_T = ::std::set<::cpp2::MyUnion>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> union_set_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_union_set), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "union_set" } */
  template <typename..., typename fbthrift_T = ::std::set<::cpp2::MyUnion>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> union_set() const& {
    return {this->__fbthrift_field_union_set, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "union_set" } */
  template <typename..., typename fbthrift_T = ::std::set<::cpp2::MyUnion>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> union_set() & {
    return {this->__fbthrift_field_union_set, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "union_set" } */
  template <typename..., typename fbthrift_T = ::std::set<::cpp2::MyUnion>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> union_set() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_union_set), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "enum_set" } */
  template <typename..., typename fbthrift_T = ::std::set<::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> enum_set_ref() const& {
    return {this->__fbthrift_field_enum_set, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "enum_set" } */
  template <typename..., typename fbthrift_T = ::std::set<::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> enum_set_ref() & {
    return {this->__fbthrift_field_enum_set, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "enum_set" } */
  template <typename..., typename fbthrift_T = ::std::set<::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> enum_set_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_enum_set), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "enum_set" } */
  template <typename..., typename fbthrift_T = ::std::set<::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> enum_set() const& {
    return {this->__fbthrift_field_enum_set, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "enum_set" } */
  template <typename..., typename fbthrift_T = ::std::set<::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> enum_set() & {
    return {this->__fbthrift_field_enum_set, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "enum_set" } */
  template <typename..., typename fbthrift_T = ::std::set<::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> enum_set() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_enum_set), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "struct_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::cpp2::MyStruct, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> struct_map_ref() const& {
    return {this->__fbthrift_field_struct_map, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "struct_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::cpp2::MyStruct, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> struct_map_ref() & {
    return {this->__fbthrift_field_struct_map, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "struct_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::cpp2::MyStruct, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> struct_map_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_struct_map), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "struct_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::cpp2::MyStruct, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> struct_map() const& {
    return {this->__fbthrift_field_struct_map, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "struct_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::cpp2::MyStruct, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> struct_map() & {
    return {this->__fbthrift_field_struct_map, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "struct_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::cpp2::MyStruct, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> struct_map() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_struct_map), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "union_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::cpp2::MyUnion, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> union_map_ref() const& {
    return {this->__fbthrift_field_union_map, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "union_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::cpp2::MyUnion, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> union_map_ref() & {
    return {this->__fbthrift_field_union_map, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "union_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::cpp2::MyUnion, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> union_map_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_union_map), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "union_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::cpp2::MyUnion, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> union_map() const& {
    return {this->__fbthrift_field_union_map, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "union_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::cpp2::MyUnion, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> union_map() & {
    return {this->__fbthrift_field_union_map, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "union_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::cpp2::MyUnion, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> union_map() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_union_map), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "enum_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::cpp2::MyEnum, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> enum_map_ref() const& {
    return {this->__fbthrift_field_enum_map, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "enum_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::cpp2::MyEnum, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> enum_map_ref() & {
    return {this->__fbthrift_field_enum_map, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "enum_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::cpp2::MyEnum, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> enum_map_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_enum_map), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "enum_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::cpp2::MyEnum, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> enum_map() const& {
    return {this->__fbthrift_field_enum_map, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "enum_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::cpp2::MyEnum, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> enum_map() & {
    return {this->__fbthrift_field_enum_map, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "enum_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::cpp2::MyEnum, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> enum_map() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_enum_map), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "struct_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> struct_map_2_ref() const& {
    return {this->__fbthrift_field_struct_map_2, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "struct_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> struct_map_2_ref() & {
    return {this->__fbthrift_field_struct_map_2, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "struct_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> struct_map_2_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_struct_map_2), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "struct_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> struct_map_2() const& {
    return {this->__fbthrift_field_struct_map_2, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "struct_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> struct_map_2() & {
    return {this->__fbthrift_field_struct_map_2, __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "struct_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> struct_map_2() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_struct_map_2), __isset.at(9), __isset.bit(9)};
  }

  /** Glean { "field": "union_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::cpp2::MyUnion>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> union_map_2_ref() const& {
    return {this->__fbthrift_field_union_map_2, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "union_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::cpp2::MyUnion>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> union_map_2_ref() & {
    return {this->__fbthrift_field_union_map_2, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "union_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::cpp2::MyUnion>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> union_map_2_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_union_map_2), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "union_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::cpp2::MyUnion>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> union_map_2() const& {
    return {this->__fbthrift_field_union_map_2, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "union_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::cpp2::MyUnion>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> union_map_2() & {
    return {this->__fbthrift_field_union_map_2, __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "union_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::cpp2::MyUnion>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> union_map_2() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_union_map_2), __isset.at(10), __isset.bit(10)};
  }

  /** Glean { "field": "enum_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> enum_map_2_ref() const& {
    return {this->__fbthrift_field_enum_map_2, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "enum_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> enum_map_2_ref() & {
    return {this->__fbthrift_field_enum_map_2, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "enum_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> enum_map_2_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_enum_map_2), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "enum_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> enum_map_2() const& {
    return {this->__fbthrift_field_enum_map_2, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "enum_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> enum_map_2() & {
    return {this->__fbthrift_field_enum_map_2, __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "enum_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> enum_map_2() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_enum_map_2), __isset.at(11), __isset.bit(11)};
  }

  /** Glean { "field": "list_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::vector<::std::int32_t>, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_map_ref() const& {
    return {this->__fbthrift_field_list_map, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "list_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::vector<::std::int32_t>, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_map_ref() & {
    return {this->__fbthrift_field_list_map, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "list_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::vector<::std::int32_t>, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_map_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_map), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "list_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::vector<::std::int32_t>, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_map() const& {
    return {this->__fbthrift_field_list_map, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "list_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::vector<::std::int32_t>, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_map() & {
    return {this->__fbthrift_field_list_map, __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "list_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::vector<::std::int32_t>, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_map() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_map), __isset.at(12), __isset.bit(12)};
  }

  /** Glean { "field": "list_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_map_2_ref() const& {
    return {this->__fbthrift_field_list_map_2, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "list_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_map_2_ref() & {
    return {this->__fbthrift_field_list_map_2, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "list_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_map_2_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_map_2), __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "list_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_map_2() const& {
    return {this->__fbthrift_field_list_map_2, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "list_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_map_2() & {
    return {this->__fbthrift_field_list_map_2, __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "list_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_map_2() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_map_2), __isset.at(13), __isset.bit(13)};
  }

  /** Glean { "field": "set_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::set<::std::int32_t>, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_map_ref() const& {
    return {this->__fbthrift_field_set_map, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "set_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::set<::std::int32_t>, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_map_ref() & {
    return {this->__fbthrift_field_set_map, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "set_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::set<::std::int32_t>, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_map_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_map), __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "set_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::set<::std::int32_t>, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_map() const& {
    return {this->__fbthrift_field_set_map, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "set_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::set<::std::int32_t>, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_map() & {
    return {this->__fbthrift_field_set_map, __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "set_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::set<::std::int32_t>, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_map() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_map), __isset.at(14), __isset.bit(14)};
  }

  /** Glean { "field": "set_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_map_2_ref() const& {
    return {this->__fbthrift_field_set_map_2, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "set_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_map_2_ref() & {
    return {this->__fbthrift_field_set_map_2, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "set_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_map_2_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_map_2), __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "set_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_map_2() const& {
    return {this->__fbthrift_field_set_map_2, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "set_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_map_2() & {
    return {this->__fbthrift_field_set_map_2, __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "set_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_map_2() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_map_2), __isset.at(15), __isset.bit(15)};
  }

  /** Glean { "field": "map_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::map<::std::int32_t, ::std::int32_t>, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> map_map_ref() const& {
    return {this->__fbthrift_field_map_map, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "map_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::map<::std::int32_t, ::std::int32_t>, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> map_map_ref() & {
    return {this->__fbthrift_field_map_map, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "map_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::map<::std::int32_t, ::std::int32_t>, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> map_map_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_map_map), __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "map_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::map<::std::int32_t, ::std::int32_t>, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> map_map() const& {
    return {this->__fbthrift_field_map_map, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "map_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::map<::std::int32_t, ::std::int32_t>, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> map_map() & {
    return {this->__fbthrift_field_map_map, __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "map_map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::map<::std::int32_t, ::std::int32_t>, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> map_map() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_map_map), __isset.at(16), __isset.bit(16)};
  }

  /** Glean { "field": "map_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> map_map_2_ref() const& {
    return {this->__fbthrift_field_map_map_2, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "map_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> map_map_2_ref() & {
    return {this->__fbthrift_field_map_map_2, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "map_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> map_map_2_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_map_map_2), __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "map_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> map_map_2() const& {
    return {this->__fbthrift_field_map_map_2, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "map_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> map_map_2() & {
    return {this->__fbthrift_field_map_map_2, __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "map_map_2" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> map_map_2() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_map_map_2), __isset.at(17), __isset.bit(17)};
  }

  /** Glean { "field": "list_list_i32" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_list_i32_ref() const& {
    return {this->__fbthrift_field_list_list_i32, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "list_list_i32" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_list_i32_ref() & {
    return {this->__fbthrift_field_list_list_i32, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "list_list_i32" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_list_i32_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_list_i32), __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "list_list_i32" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_list_i32() const& {
    return {this->__fbthrift_field_list_list_i32, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "list_list_i32" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_list_i32() & {
    return {this->__fbthrift_field_list_list_i32, __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "list_list_i32" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_list_i32() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_list_i32), __isset.at(18), __isset.bit(18)};
  }

  /** Glean { "field": "list_list_struct" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_list_struct_ref() const& {
    return {this->__fbthrift_field_list_list_struct, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "list_list_struct" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_list_struct_ref() & {
    return {this->__fbthrift_field_list_list_struct, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "list_list_struct" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_list_struct_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_list_struct), __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "list_list_struct" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_list_struct() const& {
    return {this->__fbthrift_field_list_list_struct, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "list_list_struct" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_list_struct() & {
    return {this->__fbthrift_field_list_list_struct, __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "list_list_struct" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_list_struct() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_list_struct), __isset.at(19), __isset.bit(19)};
  }

  /** Glean { "field": "list_set_i32" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_set_i32_ref() const& {
    return {this->__fbthrift_field_list_set_i32, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "list_set_i32" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_set_i32_ref() & {
    return {this->__fbthrift_field_list_set_i32, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "list_set_i32" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_set_i32_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_set_i32), __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "list_set_i32" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_set_i32() const& {
    return {this->__fbthrift_field_list_set_i32, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "list_set_i32" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_set_i32() & {
    return {this->__fbthrift_field_list_set_i32, __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "list_set_i32" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_set_i32() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_set_i32), __isset.at(20), __isset.bit(20)};
  }

  /** Glean { "field": "list_set_struct" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::set<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_set_struct_ref() const& {
    return {this->__fbthrift_field_list_set_struct, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "list_set_struct" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::set<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_set_struct_ref() & {
    return {this->__fbthrift_field_list_set_struct, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "list_set_struct" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::set<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_set_struct_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_set_struct), __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "list_set_struct" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::set<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_set_struct() const& {
    return {this->__fbthrift_field_list_set_struct, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "list_set_struct" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::set<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_set_struct() & {
    return {this->__fbthrift_field_list_set_struct, __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "list_set_struct" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::set<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_set_struct() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_set_struct), __isset.at(21), __isset.bit(21)};
  }

  /** Glean { "field": "list_map_i32_i32" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_map_i32_i32_ref() const& {
    return {this->__fbthrift_field_list_map_i32_i32, __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "list_map_i32_i32" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_map_i32_i32_ref() & {
    return {this->__fbthrift_field_list_map_i32_i32, __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "list_map_i32_i32" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_map_i32_i32_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_map_i32_i32), __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "list_map_i32_i32" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_map_i32_i32() const& {
    return {this->__fbthrift_field_list_map_i32_i32, __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "list_map_i32_i32" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_map_i32_i32() & {
    return {this->__fbthrift_field_list_map_i32_i32, __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "list_map_i32_i32" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_map_i32_i32() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_map_i32_i32), __isset.at(22), __isset.bit(22)};
  }

  /** Glean { "field": "list_map_i32_struct" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::std::int32_t, ::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_map_i32_struct_ref() const& {
    return {this->__fbthrift_field_list_map_i32_struct, __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "list_map_i32_struct" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::std::int32_t, ::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_map_i32_struct_ref() & {
    return {this->__fbthrift_field_list_map_i32_struct, __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "list_map_i32_struct" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::std::int32_t, ::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_map_i32_struct_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_map_i32_struct), __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "list_map_i32_struct" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::std::int32_t, ::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_map_i32_struct() const& {
    return {this->__fbthrift_field_list_map_i32_struct, __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "list_map_i32_struct" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::std::int32_t, ::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_map_i32_struct() & {
    return {this->__fbthrift_field_list_map_i32_struct, __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "list_map_i32_struct" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::std::int32_t, ::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_map_i32_struct() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_map_i32_struct), __isset.at(23), __isset.bit(23)};
  }

  /** Glean { "field": "list_map_struct_i32" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_map_struct_i32_ref() const& {
    return {this->__fbthrift_field_list_map_struct_i32, __isset.at(24), __isset.bit(24)};
  }

  /** Glean { "field": "list_map_struct_i32" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_map_struct_i32_ref() & {
    return {this->__fbthrift_field_list_map_struct_i32, __isset.at(24), __isset.bit(24)};
  }

  /** Glean { "field": "list_map_struct_i32" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_map_struct_i32_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_map_struct_i32), __isset.at(24), __isset.bit(24)};
  }

  /** Glean { "field": "list_map_struct_i32" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> list_map_struct_i32() const& {
    return {this->__fbthrift_field_list_map_struct_i32, __isset.at(24), __isset.bit(24)};
  }

  /** Glean { "field": "list_map_struct_i32" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> list_map_struct_i32() & {
    return {this->__fbthrift_field_list_map_struct_i32, __isset.at(24), __isset.bit(24)};
  }

  /** Glean { "field": "list_map_struct_i32" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> list_map_struct_i32() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_list_map_struct_i32), __isset.at(24), __isset.bit(24)};
  }

  /** Glean { "field": "set_list_i32" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_list_i32_ref() const& {
    return {this->__fbthrift_field_set_list_i32, __isset.at(25), __isset.bit(25)};
  }

  /** Glean { "field": "set_list_i32" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_list_i32_ref() & {
    return {this->__fbthrift_field_set_list_i32, __isset.at(25), __isset.bit(25)};
  }

  /** Glean { "field": "set_list_i32" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_list_i32_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_list_i32), __isset.at(25), __isset.bit(25)};
  }

  /** Glean { "field": "set_list_i32" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_list_i32() const& {
    return {this->__fbthrift_field_set_list_i32, __isset.at(25), __isset.bit(25)};
  }

  /** Glean { "field": "set_list_i32" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_list_i32() & {
    return {this->__fbthrift_field_set_list_i32, __isset.at(25), __isset.bit(25)};
  }

  /** Glean { "field": "set_list_i32" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_list_i32() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_list_i32), __isset.at(25), __isset.bit(25)};
  }

  /** Glean { "field": "set_list_struct" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_list_struct_ref() const& {
    return {this->__fbthrift_field_set_list_struct, __isset.at(26), __isset.bit(26)};
  }

  /** Glean { "field": "set_list_struct" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_list_struct_ref() & {
    return {this->__fbthrift_field_set_list_struct, __isset.at(26), __isset.bit(26)};
  }

  /** Glean { "field": "set_list_struct" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_list_struct_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_list_struct), __isset.at(26), __isset.bit(26)};
  }

  /** Glean { "field": "set_list_struct" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_list_struct() const& {
    return {this->__fbthrift_field_set_list_struct, __isset.at(26), __isset.bit(26)};
  }

  /** Glean { "field": "set_list_struct" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_list_struct() & {
    return {this->__fbthrift_field_set_list_struct, __isset.at(26), __isset.bit(26)};
  }

  /** Glean { "field": "set_list_struct" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_list_struct() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_list_struct), __isset.at(26), __isset.bit(26)};
  }

  /** Glean { "field": "set_set_i32" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_set_i32_ref() const& {
    return {this->__fbthrift_field_set_set_i32, __isset.at(27), __isset.bit(27)};
  }

  /** Glean { "field": "set_set_i32" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_set_i32_ref() & {
    return {this->__fbthrift_field_set_set_i32, __isset.at(27), __isset.bit(27)};
  }

  /** Glean { "field": "set_set_i32" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_set_i32_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_set_i32), __isset.at(27), __isset.bit(27)};
  }

  /** Glean { "field": "set_set_i32" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_set_i32() const& {
    return {this->__fbthrift_field_set_set_i32, __isset.at(27), __isset.bit(27)};
  }

  /** Glean { "field": "set_set_i32" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_set_i32() & {
    return {this->__fbthrift_field_set_set_i32, __isset.at(27), __isset.bit(27)};
  }

  /** Glean { "field": "set_set_i32" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_set_i32() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_set_i32), __isset.at(27), __isset.bit(27)};
  }

  /** Glean { "field": "set_set_struct" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::set<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_set_struct_ref() const& {
    return {this->__fbthrift_field_set_set_struct, __isset.at(28), __isset.bit(28)};
  }

  /** Glean { "field": "set_set_struct" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::set<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_set_struct_ref() & {
    return {this->__fbthrift_field_set_set_struct, __isset.at(28), __isset.bit(28)};
  }

  /** Glean { "field": "set_set_struct" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::set<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_set_struct_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_set_struct), __isset.at(28), __isset.bit(28)};
  }

  /** Glean { "field": "set_set_struct" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::set<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_set_struct() const& {
    return {this->__fbthrift_field_set_set_struct, __isset.at(28), __isset.bit(28)};
  }

  /** Glean { "field": "set_set_struct" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::set<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_set_struct() & {
    return {this->__fbthrift_field_set_set_struct, __isset.at(28), __isset.bit(28)};
  }

  /** Glean { "field": "set_set_struct" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::set<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_set_struct() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_set_struct), __isset.at(28), __isset.bit(28)};
  }

  /** Glean { "field": "set_map_i32_i32" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_map_i32_i32_ref() const& {
    return {this->__fbthrift_field_set_map_i32_i32, __isset.at(29), __isset.bit(29)};
  }

  /** Glean { "field": "set_map_i32_i32" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_map_i32_i32_ref() & {
    return {this->__fbthrift_field_set_map_i32_i32, __isset.at(29), __isset.bit(29)};
  }

  /** Glean { "field": "set_map_i32_i32" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_map_i32_i32_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_map_i32_i32), __isset.at(29), __isset.bit(29)};
  }

  /** Glean { "field": "set_map_i32_i32" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_map_i32_i32() const& {
    return {this->__fbthrift_field_set_map_i32_i32, __isset.at(29), __isset.bit(29)};
  }

  /** Glean { "field": "set_map_i32_i32" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_map_i32_i32() & {
    return {this->__fbthrift_field_set_map_i32_i32, __isset.at(29), __isset.bit(29)};
  }

  /** Glean { "field": "set_map_i32_i32" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_map_i32_i32() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_map_i32_i32), __isset.at(29), __isset.bit(29)};
  }

  /** Glean { "field": "set_map_i32_struct" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::map<::std::int32_t, ::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_map_i32_struct_ref() const& {
    return {this->__fbthrift_field_set_map_i32_struct, __isset.at(30), __isset.bit(30)};
  }

  /** Glean { "field": "set_map_i32_struct" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::map<::std::int32_t, ::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_map_i32_struct_ref() & {
    return {this->__fbthrift_field_set_map_i32_struct, __isset.at(30), __isset.bit(30)};
  }

  /** Glean { "field": "set_map_i32_struct" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::map<::std::int32_t, ::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_map_i32_struct_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_map_i32_struct), __isset.at(30), __isset.bit(30)};
  }

  /** Glean { "field": "set_map_i32_struct" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::map<::std::int32_t, ::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_map_i32_struct() const& {
    return {this->__fbthrift_field_set_map_i32_struct, __isset.at(30), __isset.bit(30)};
  }

  /** Glean { "field": "set_map_i32_struct" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::map<::std::int32_t, ::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_map_i32_struct() & {
    return {this->__fbthrift_field_set_map_i32_struct, __isset.at(30), __isset.bit(30)};
  }

  /** Glean { "field": "set_map_i32_struct" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::map<::std::int32_t, ::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_map_i32_struct() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_map_i32_struct), __isset.at(30), __isset.bit(30)};
  }

  /** Glean { "field": "set_map_struct_i32" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::map<::cpp2::MyStruct, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_map_struct_i32_ref() const& {
    return {this->__fbthrift_field_set_map_struct_i32, __isset.at(31), __isset.bit(31)};
  }

  /** Glean { "field": "set_map_struct_i32" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::map<::cpp2::MyStruct, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_map_struct_i32_ref() & {
    return {this->__fbthrift_field_set_map_struct_i32, __isset.at(31), __isset.bit(31)};
  }

  /** Glean { "field": "set_map_struct_i32" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::map<::cpp2::MyStruct, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_map_struct_i32_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_map_struct_i32), __isset.at(31), __isset.bit(31)};
  }

  /** Glean { "field": "set_map_struct_i32" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::map<::cpp2::MyStruct, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> set_map_struct_i32() const& {
    return {this->__fbthrift_field_set_map_struct_i32, __isset.at(31), __isset.bit(31)};
  }

  /** Glean { "field": "set_map_struct_i32" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::map<::cpp2::MyStruct, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> set_map_struct_i32() & {
    return {this->__fbthrift_field_set_map_struct_i32, __isset.at(31), __isset.bit(31)};
  }

  /** Glean { "field": "set_map_struct_i32" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::map<::cpp2::MyStruct, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> set_map_struct_i32() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_set_map_struct_i32), __isset.at(31), __isset.bit(31)};
  }

  /** Glean { "field": "map_i32_map_i32_i32" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> map_i32_map_i32_i32_ref() const& {
    return {this->__fbthrift_field_map_i32_map_i32_i32, __isset.at(32), __isset.bit(32)};
  }

  /** Glean { "field": "map_i32_map_i32_i32" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> map_i32_map_i32_i32_ref() & {
    return {this->__fbthrift_field_map_i32_map_i32_i32, __isset.at(32), __isset.bit(32)};
  }

  /** Glean { "field": "map_i32_map_i32_i32" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> map_i32_map_i32_i32_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_map_i32_map_i32_i32), __isset.at(32), __isset.bit(32)};
  }

  /** Glean { "field": "map_i32_map_i32_i32" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> map_i32_map_i32_i32() const& {
    return {this->__fbthrift_field_map_i32_map_i32_i32, __isset.at(32), __isset.bit(32)};
  }

  /** Glean { "field": "map_i32_map_i32_i32" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> map_i32_map_i32_i32() & {
    return {this->__fbthrift_field_map_i32_map_i32_i32, __isset.at(32), __isset.bit(32)};
  }

  /** Glean { "field": "map_i32_map_i32_i32" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> map_i32_map_i32_i32() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_map_i32_map_i32_i32), __isset.at(32), __isset.bit(32)};
  }

  /** Glean { "field": "map_i32_map_struct_i32" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::map<::cpp2::MyStruct, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> map_i32_map_struct_i32_ref() const& {
    return {this->__fbthrift_field_map_i32_map_struct_i32, __isset.at(33), __isset.bit(33)};
  }

  /** Glean { "field": "map_i32_map_struct_i32" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::map<::cpp2::MyStruct, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> map_i32_map_struct_i32_ref() & {
    return {this->__fbthrift_field_map_i32_map_struct_i32, __isset.at(33), __isset.bit(33)};
  }

  /** Glean { "field": "map_i32_map_struct_i32" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::map<::cpp2::MyStruct, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> map_i32_map_struct_i32_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_map_i32_map_struct_i32), __isset.at(33), __isset.bit(33)};
  }

  /** Glean { "field": "map_i32_map_struct_i32" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::map<::cpp2::MyStruct, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> map_i32_map_struct_i32() const& {
    return {this->__fbthrift_field_map_i32_map_struct_i32, __isset.at(33), __isset.bit(33)};
  }

  /** Glean { "field": "map_i32_map_struct_i32" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::map<::cpp2::MyStruct, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> map_i32_map_struct_i32() & {
    return {this->__fbthrift_field_map_i32_map_struct_i32, __isset.at(33), __isset.bit(33)};
  }

  /** Glean { "field": "map_i32_map_struct_i32" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::map<::cpp2::MyStruct, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> map_i32_map_struct_i32() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_map_i32_map_struct_i32), __isset.at(33), __isset.bit(33)};
  }

  /** Glean { "field": "map_i32_map_i32_struct" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> map_i32_map_i32_struct_ref() const& {
    return {this->__fbthrift_field_map_i32_map_i32_struct, __isset.at(34), __isset.bit(34)};
  }

  /** Glean { "field": "map_i32_map_i32_struct" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> map_i32_map_i32_struct_ref() & {
    return {this->__fbthrift_field_map_i32_map_i32_struct, __isset.at(34), __isset.bit(34)};
  }

  /** Glean { "field": "map_i32_map_i32_struct" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> map_i32_map_i32_struct_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_map_i32_map_i32_struct), __isset.at(34), __isset.bit(34)};
  }

  /** Glean { "field": "map_i32_map_i32_struct" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> map_i32_map_i32_struct() const& {
    return {this->__fbthrift_field_map_i32_map_i32_struct, __isset.at(34), __isset.bit(34)};
  }

  /** Glean { "field": "map_i32_map_i32_struct" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> map_i32_map_i32_struct() & {
    return {this->__fbthrift_field_map_i32_map_i32_struct, __isset.at(34), __isset.bit(34)};
  }

  /** Glean { "field": "map_i32_map_i32_struct" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> map_i32_map_i32_struct() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_map_i32_map_i32_struct), __isset.at(34), __isset.bit(34)};
  }

  /** Glean { "field": "map_i32_map_list_i32_i32" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> map_i32_map_list_i32_i32_ref() const& {
    return {this->__fbthrift_field_map_i32_map_list_i32_i32, __isset.at(35), __isset.bit(35)};
  }

  /** Glean { "field": "map_i32_map_list_i32_i32" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> map_i32_map_list_i32_i32_ref() & {
    return {this->__fbthrift_field_map_i32_map_list_i32_i32, __isset.at(35), __isset.bit(35)};
  }

  /** Glean { "field": "map_i32_map_list_i32_i32" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> map_i32_map_list_i32_i32_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_map_i32_map_list_i32_i32), __isset.at(35), __isset.bit(35)};
  }

  /** Glean { "field": "map_i32_map_list_i32_i32" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> map_i32_map_list_i32_i32() const& {
    return {this->__fbthrift_field_map_i32_map_list_i32_i32, __isset.at(35), __isset.bit(35)};
  }

  /** Glean { "field": "map_i32_map_list_i32_i32" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> map_i32_map_list_i32_i32() & {
    return {this->__fbthrift_field_map_i32_map_list_i32_i32, __isset.at(35), __isset.bit(35)};
  }

  /** Glean { "field": "map_i32_map_list_i32_i32" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> map_i32_map_list_i32_i32() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_map_i32_map_list_i32_i32), __isset.at(35), __isset.bit(35)};
  }

  /** Glean { "field": "map_i32_map_list_struct_i32" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> map_i32_map_list_struct_i32_ref() const& {
    return {this->__fbthrift_field_map_i32_map_list_struct_i32, __isset.at(36), __isset.bit(36)};
  }

  /** Glean { "field": "map_i32_map_list_struct_i32" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> map_i32_map_list_struct_i32_ref() & {
    return {this->__fbthrift_field_map_i32_map_list_struct_i32, __isset.at(36), __isset.bit(36)};
  }

  /** Glean { "field": "map_i32_map_list_struct_i32" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> map_i32_map_list_struct_i32_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_map_i32_map_list_struct_i32), __isset.at(36), __isset.bit(36)};
  }

  /** Glean { "field": "map_i32_map_list_struct_i32" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> map_i32_map_list_struct_i32() const& {
    return {this->__fbthrift_field_map_i32_map_list_struct_i32, __isset.at(36), __isset.bit(36)};
  }

  /** Glean { "field": "map_i32_map_list_struct_i32" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> map_i32_map_list_struct_i32() & {
    return {this->__fbthrift_field_map_i32_map_list_struct_i32, __isset.at(36), __isset.bit(36)};
  }

  /** Glean { "field": "map_i32_map_list_struct_i32" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int32_t, ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> map_i32_map_list_struct_i32() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_map_i32_map_list_struct_i32), __isset.at(36), __isset.bit(36)};
  }

  /** Glean { "field": "struct_list" } */
  [[deprecated("Use `FOO.struct_list().value()` instead of `FOO.get_struct_list()`")]]
  const ::std::vector<::cpp2::MyStruct>& get_struct_list() const&;

  /** Glean { "field": "struct_list" } */
  [[deprecated("Use `FOO.struct_list().value()` instead of `FOO.get_struct_list()`")]]
  ::std::vector<::cpp2::MyStruct> get_struct_list() &&;

  /** Glean { "field": "struct_list" } */
  template <typename T_Containers_struct_list_struct_setter = ::std::vector<::cpp2::MyStruct>>
  [[deprecated("Use `FOO.struct_list() = BAR` instead of `FOO.set_struct_list(BAR)`")]]
  ::std::vector<::cpp2::MyStruct>& set_struct_list(T_Containers_struct_list_struct_setter&& struct_list_) {
    struct_list_ref() = std::forward<T_Containers_struct_list_struct_setter>(struct_list_);
    return __fbthrift_field_struct_list;
  }

  /** Glean { "field": "union_list" } */
  [[deprecated("Use `FOO.union_list().value()` instead of `FOO.get_union_list()`")]]
  const ::std::vector<::cpp2::MyUnion>& get_union_list() const&;

  /** Glean { "field": "union_list" } */
  [[deprecated("Use `FOO.union_list().value()` instead of `FOO.get_union_list()`")]]
  ::std::vector<::cpp2::MyUnion> get_union_list() &&;

  /** Glean { "field": "union_list" } */
  template <typename T_Containers_union_list_struct_setter = ::std::vector<::cpp2::MyUnion>>
  [[deprecated("Use `FOO.union_list() = BAR` instead of `FOO.set_union_list(BAR)`")]]
  ::std::vector<::cpp2::MyUnion>& set_union_list(T_Containers_union_list_struct_setter&& union_list_) {
    union_list_ref() = std::forward<T_Containers_union_list_struct_setter>(union_list_);
    return __fbthrift_field_union_list;
  }

  /** Glean { "field": "enum_list" } */
  [[deprecated("Use `FOO.enum_list().value()` instead of `FOO.get_enum_list()`")]]
  const ::std::vector<::cpp2::MyEnum>& get_enum_list() const&;

  /** Glean { "field": "enum_list" } */
  [[deprecated("Use `FOO.enum_list().value()` instead of `FOO.get_enum_list()`")]]
  ::std::vector<::cpp2::MyEnum> get_enum_list() &&;

  /** Glean { "field": "enum_list" } */
  template <typename T_Containers_enum_list_struct_setter = ::std::vector<::cpp2::MyEnum>>
  [[deprecated("Use `FOO.enum_list() = BAR` instead of `FOO.set_enum_list(BAR)`")]]
  ::std::vector<::cpp2::MyEnum>& set_enum_list(T_Containers_enum_list_struct_setter&& enum_list_) {
    enum_list_ref() = std::forward<T_Containers_enum_list_struct_setter>(enum_list_);
    return __fbthrift_field_enum_list;
  }

  /** Glean { "field": "struct_set" } */
  [[deprecated("Use `FOO.struct_set().value()` instead of `FOO.get_struct_set()`")]]
  const ::std::set<::cpp2::MyStruct>& get_struct_set() const&;

  /** Glean { "field": "struct_set" } */
  [[deprecated("Use `FOO.struct_set().value()` instead of `FOO.get_struct_set()`")]]
  ::std::set<::cpp2::MyStruct> get_struct_set() &&;

  /** Glean { "field": "struct_set" } */
  template <typename T_Containers_struct_set_struct_setter = ::std::set<::cpp2::MyStruct>>
  [[deprecated("Use `FOO.struct_set() = BAR` instead of `FOO.set_struct_set(BAR)`")]]
  ::std::set<::cpp2::MyStruct>& set_struct_set(T_Containers_struct_set_struct_setter&& struct_set_) {
    struct_set_ref() = std::forward<T_Containers_struct_set_struct_setter>(struct_set_);
    return __fbthrift_field_struct_set;
  }

  /** Glean { "field": "union_set" } */
  [[deprecated("Use `FOO.union_set().value()` instead of `FOO.get_union_set()`")]]
  const ::std::set<::cpp2::MyUnion>& get_union_set() const&;

  /** Glean { "field": "union_set" } */
  [[deprecated("Use `FOO.union_set().value()` instead of `FOO.get_union_set()`")]]
  ::std::set<::cpp2::MyUnion> get_union_set() &&;

  /** Glean { "field": "union_set" } */
  template <typename T_Containers_union_set_struct_setter = ::std::set<::cpp2::MyUnion>>
  [[deprecated("Use `FOO.union_set() = BAR` instead of `FOO.set_union_set(BAR)`")]]
  ::std::set<::cpp2::MyUnion>& set_union_set(T_Containers_union_set_struct_setter&& union_set_) {
    union_set_ref() = std::forward<T_Containers_union_set_struct_setter>(union_set_);
    return __fbthrift_field_union_set;
  }

  /** Glean { "field": "enum_set" } */
  [[deprecated("Use `FOO.enum_set().value()` instead of `FOO.get_enum_set()`")]]
  const ::std::set<::cpp2::MyEnum>& get_enum_set() const&;

  /** Glean { "field": "enum_set" } */
  [[deprecated("Use `FOO.enum_set().value()` instead of `FOO.get_enum_set()`")]]
  ::std::set<::cpp2::MyEnum> get_enum_set() &&;

  /** Glean { "field": "enum_set" } */
  template <typename T_Containers_enum_set_struct_setter = ::std::set<::cpp2::MyEnum>>
  [[deprecated("Use `FOO.enum_set() = BAR` instead of `FOO.set_enum_set(BAR)`")]]
  ::std::set<::cpp2::MyEnum>& set_enum_set(T_Containers_enum_set_struct_setter&& enum_set_) {
    enum_set_ref() = std::forward<T_Containers_enum_set_struct_setter>(enum_set_);
    return __fbthrift_field_enum_set;
  }

  /** Glean { "field": "struct_map" } */
  [[deprecated("Use `FOO.struct_map().value()` instead of `FOO.get_struct_map()`")]]
  const ::std::map<::cpp2::MyStruct, ::std::int64_t>& get_struct_map() const&;

  /** Glean { "field": "struct_map" } */
  [[deprecated("Use `FOO.struct_map().value()` instead of `FOO.get_struct_map()`")]]
  ::std::map<::cpp2::MyStruct, ::std::int64_t> get_struct_map() &&;

  /** Glean { "field": "struct_map" } */
  template <typename T_Containers_struct_map_struct_setter = ::std::map<::cpp2::MyStruct, ::std::int64_t>>
  [[deprecated("Use `FOO.struct_map() = BAR` instead of `FOO.set_struct_map(BAR)`")]]
  ::std::map<::cpp2::MyStruct, ::std::int64_t>& set_struct_map(T_Containers_struct_map_struct_setter&& struct_map_) {
    struct_map_ref() = std::forward<T_Containers_struct_map_struct_setter>(struct_map_);
    return __fbthrift_field_struct_map;
  }

  /** Glean { "field": "union_map" } */
  [[deprecated("Use `FOO.union_map().value()` instead of `FOO.get_union_map()`")]]
  const ::std::map<::cpp2::MyUnion, ::std::int64_t>& get_union_map() const&;

  /** Glean { "field": "union_map" } */
  [[deprecated("Use `FOO.union_map().value()` instead of `FOO.get_union_map()`")]]
  ::std::map<::cpp2::MyUnion, ::std::int64_t> get_union_map() &&;

  /** Glean { "field": "union_map" } */
  template <typename T_Containers_union_map_struct_setter = ::std::map<::cpp2::MyUnion, ::std::int64_t>>
  [[deprecated("Use `FOO.union_map() = BAR` instead of `FOO.set_union_map(BAR)`")]]
  ::std::map<::cpp2::MyUnion, ::std::int64_t>& set_union_map(T_Containers_union_map_struct_setter&& union_map_) {
    union_map_ref() = std::forward<T_Containers_union_map_struct_setter>(union_map_);
    return __fbthrift_field_union_map;
  }

  /** Glean { "field": "enum_map" } */
  [[deprecated("Use `FOO.enum_map().value()` instead of `FOO.get_enum_map()`")]]
  const ::std::map<::cpp2::MyEnum, ::std::int64_t>& get_enum_map() const&;

  /** Glean { "field": "enum_map" } */
  [[deprecated("Use `FOO.enum_map().value()` instead of `FOO.get_enum_map()`")]]
  ::std::map<::cpp2::MyEnum, ::std::int64_t> get_enum_map() &&;

  /** Glean { "field": "enum_map" } */
  template <typename T_Containers_enum_map_struct_setter = ::std::map<::cpp2::MyEnum, ::std::int64_t>>
  [[deprecated("Use `FOO.enum_map() = BAR` instead of `FOO.set_enum_map(BAR)`")]]
  ::std::map<::cpp2::MyEnum, ::std::int64_t>& set_enum_map(T_Containers_enum_map_struct_setter&& enum_map_) {
    enum_map_ref() = std::forward<T_Containers_enum_map_struct_setter>(enum_map_);
    return __fbthrift_field_enum_map;
  }

  /** Glean { "field": "struct_map_2" } */
  [[deprecated("Use `FOO.struct_map_2().value()` instead of `FOO.get_struct_map_2()`")]]
  const ::std::map<::std::int32_t, ::cpp2::MyStruct>& get_struct_map_2() const&;

  /** Glean { "field": "struct_map_2" } */
  [[deprecated("Use `FOO.struct_map_2().value()` instead of `FOO.get_struct_map_2()`")]]
  ::std::map<::std::int32_t, ::cpp2::MyStruct> get_struct_map_2() &&;

  /** Glean { "field": "struct_map_2" } */
  template <typename T_Containers_struct_map_2_struct_setter = ::std::map<::std::int32_t, ::cpp2::MyStruct>>
  [[deprecated("Use `FOO.struct_map_2() = BAR` instead of `FOO.set_struct_map_2(BAR)`")]]
  ::std::map<::std::int32_t, ::cpp2::MyStruct>& set_struct_map_2(T_Containers_struct_map_2_struct_setter&& struct_map_2_) {
    struct_map_2_ref() = std::forward<T_Containers_struct_map_2_struct_setter>(struct_map_2_);
    return __fbthrift_field_struct_map_2;
  }

  /** Glean { "field": "union_map_2" } */
  [[deprecated("Use `FOO.union_map_2().value()` instead of `FOO.get_union_map_2()`")]]
  const ::std::map<::std::int32_t, ::cpp2::MyUnion>& get_union_map_2() const&;

  /** Glean { "field": "union_map_2" } */
  [[deprecated("Use `FOO.union_map_2().value()` instead of `FOO.get_union_map_2()`")]]
  ::std::map<::std::int32_t, ::cpp2::MyUnion> get_union_map_2() &&;

  /** Glean { "field": "union_map_2" } */
  template <typename T_Containers_union_map_2_struct_setter = ::std::map<::std::int32_t, ::cpp2::MyUnion>>
  [[deprecated("Use `FOO.union_map_2() = BAR` instead of `FOO.set_union_map_2(BAR)`")]]
  ::std::map<::std::int32_t, ::cpp2::MyUnion>& set_union_map_2(T_Containers_union_map_2_struct_setter&& union_map_2_) {
    union_map_2_ref() = std::forward<T_Containers_union_map_2_struct_setter>(union_map_2_);
    return __fbthrift_field_union_map_2;
  }

  /** Glean { "field": "enum_map_2" } */
  [[deprecated("Use `FOO.enum_map_2().value()` instead of `FOO.get_enum_map_2()`")]]
  const ::std::map<::std::int32_t, ::cpp2::MyEnum>& get_enum_map_2() const&;

  /** Glean { "field": "enum_map_2" } */
  [[deprecated("Use `FOO.enum_map_2().value()` instead of `FOO.get_enum_map_2()`")]]
  ::std::map<::std::int32_t, ::cpp2::MyEnum> get_enum_map_2() &&;

  /** Glean { "field": "enum_map_2" } */
  template <typename T_Containers_enum_map_2_struct_setter = ::std::map<::std::int32_t, ::cpp2::MyEnum>>
  [[deprecated("Use `FOO.enum_map_2() = BAR` instead of `FOO.set_enum_map_2(BAR)`")]]
  ::std::map<::std::int32_t, ::cpp2::MyEnum>& set_enum_map_2(T_Containers_enum_map_2_struct_setter&& enum_map_2_) {
    enum_map_2_ref() = std::forward<T_Containers_enum_map_2_struct_setter>(enum_map_2_);
    return __fbthrift_field_enum_map_2;
  }

  /** Glean { "field": "list_map" } */
  [[deprecated("Use `FOO.list_map().value()` instead of `FOO.get_list_map()`")]]
  const ::std::map<::std::vector<::std::int32_t>, ::std::int32_t>& get_list_map() const&;

  /** Glean { "field": "list_map" } */
  [[deprecated("Use `FOO.list_map().value()` instead of `FOO.get_list_map()`")]]
  ::std::map<::std::vector<::std::int32_t>, ::std::int32_t> get_list_map() &&;

  /** Glean { "field": "list_map" } */
  template <typename T_Containers_list_map_struct_setter = ::std::map<::std::vector<::std::int32_t>, ::std::int32_t>>
  [[deprecated("Use `FOO.list_map() = BAR` instead of `FOO.set_list_map(BAR)`")]]
  ::std::map<::std::vector<::std::int32_t>, ::std::int32_t>& set_list_map(T_Containers_list_map_struct_setter&& list_map_) {
    list_map_ref() = std::forward<T_Containers_list_map_struct_setter>(list_map_);
    return __fbthrift_field_list_map;
  }

  /** Glean { "field": "list_map_2" } */
  [[deprecated("Use `FOO.list_map_2().value()` instead of `FOO.get_list_map_2()`")]]
  const ::std::map<::std::int32_t, ::std::vector<::std::int32_t>>& get_list_map_2() const&;

  /** Glean { "field": "list_map_2" } */
  [[deprecated("Use `FOO.list_map_2().value()` instead of `FOO.get_list_map_2()`")]]
  ::std::map<::std::int32_t, ::std::vector<::std::int32_t>> get_list_map_2() &&;

  /** Glean { "field": "list_map_2" } */
  template <typename T_Containers_list_map_2_struct_setter = ::std::map<::std::int32_t, ::std::vector<::std::int32_t>>>
  [[deprecated("Use `FOO.list_map_2() = BAR` instead of `FOO.set_list_map_2(BAR)`")]]
  ::std::map<::std::int32_t, ::std::vector<::std::int32_t>>& set_list_map_2(T_Containers_list_map_2_struct_setter&& list_map_2_) {
    list_map_2_ref() = std::forward<T_Containers_list_map_2_struct_setter>(list_map_2_);
    return __fbthrift_field_list_map_2;
  }

  /** Glean { "field": "set_map" } */
  [[deprecated("Use `FOO.set_map().value()` instead of `FOO.get_set_map()`")]]
  const ::std::map<::std::set<::std::int32_t>, ::std::int32_t>& get_set_map() const&;

  /** Glean { "field": "set_map" } */
  [[deprecated("Use `FOO.set_map().value()` instead of `FOO.get_set_map()`")]]
  ::std::map<::std::set<::std::int32_t>, ::std::int32_t> get_set_map() &&;

  /** Glean { "field": "set_map" } */
  template <typename T_Containers_set_map_struct_setter = ::std::map<::std::set<::std::int32_t>, ::std::int32_t>>
  [[deprecated("Use `FOO.set_map() = BAR` instead of `FOO.set_set_map(BAR)`")]]
  ::std::map<::std::set<::std::int32_t>, ::std::int32_t>& set_set_map(T_Containers_set_map_struct_setter&& set_map_) {
    set_map_ref() = std::forward<T_Containers_set_map_struct_setter>(set_map_);
    return __fbthrift_field_set_map;
  }

  /** Glean { "field": "set_map_2" } */
  [[deprecated("Use `FOO.set_map_2().value()` instead of `FOO.get_set_map_2()`")]]
  const ::std::map<::std::int32_t, ::std::set<::std::int32_t>>& get_set_map_2() const&;

  /** Glean { "field": "set_map_2" } */
  [[deprecated("Use `FOO.set_map_2().value()` instead of `FOO.get_set_map_2()`")]]
  ::std::map<::std::int32_t, ::std::set<::std::int32_t>> get_set_map_2() &&;

  /** Glean { "field": "set_map_2" } */
  template <typename T_Containers_set_map_2_struct_setter = ::std::map<::std::int32_t, ::std::set<::std::int32_t>>>
  [[deprecated("Use `FOO.set_map_2() = BAR` instead of `FOO.set_set_map_2(BAR)`")]]
  ::std::map<::std::int32_t, ::std::set<::std::int32_t>>& set_set_map_2(T_Containers_set_map_2_struct_setter&& set_map_2_) {
    set_map_2_ref() = std::forward<T_Containers_set_map_2_struct_setter>(set_map_2_);
    return __fbthrift_field_set_map_2;
  }

  /** Glean { "field": "map_map" } */
  [[deprecated("Use `FOO.map_map().value()` instead of `FOO.get_map_map()`")]]
  const ::std::map<::std::map<::std::int32_t, ::std::int32_t>, ::std::int32_t>& get_map_map() const&;

  /** Glean { "field": "map_map" } */
  [[deprecated("Use `FOO.map_map().value()` instead of `FOO.get_map_map()`")]]
  ::std::map<::std::map<::std::int32_t, ::std::int32_t>, ::std::int32_t> get_map_map() &&;

  /** Glean { "field": "map_map" } */
  template <typename T_Containers_map_map_struct_setter = ::std::map<::std::map<::std::int32_t, ::std::int32_t>, ::std::int32_t>>
  [[deprecated("Use `FOO.map_map() = BAR` instead of `FOO.set_map_map(BAR)`")]]
  ::std::map<::std::map<::std::int32_t, ::std::int32_t>, ::std::int32_t>& set_map_map(T_Containers_map_map_struct_setter&& map_map_) {
    map_map_ref() = std::forward<T_Containers_map_map_struct_setter>(map_map_);
    return __fbthrift_field_map_map;
  }

  /** Glean { "field": "map_map_2" } */
  [[deprecated("Use `FOO.map_map_2().value()` instead of `FOO.get_map_map_2()`")]]
  const ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>>& get_map_map_2() const&;

  /** Glean { "field": "map_map_2" } */
  [[deprecated("Use `FOO.map_map_2().value()` instead of `FOO.get_map_map_2()`")]]
  ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>> get_map_map_2() &&;

  /** Glean { "field": "map_map_2" } */
  template <typename T_Containers_map_map_2_struct_setter = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>>>
  [[deprecated("Use `FOO.map_map_2() = BAR` instead of `FOO.set_map_map_2(BAR)`")]]
  ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>>& set_map_map_2(T_Containers_map_map_2_struct_setter&& map_map_2_) {
    map_map_2_ref() = std::forward<T_Containers_map_map_2_struct_setter>(map_map_2_);
    return __fbthrift_field_map_map_2;
  }

  /** Glean { "field": "list_list_i32" } */
  [[deprecated("Use `FOO.list_list_i32().value()` instead of `FOO.get_list_list_i32()`")]]
  const ::std::vector<::std::vector<::std::int32_t>>& get_list_list_i32() const&;

  /** Glean { "field": "list_list_i32" } */
  [[deprecated("Use `FOO.list_list_i32().value()` instead of `FOO.get_list_list_i32()`")]]
  ::std::vector<::std::vector<::std::int32_t>> get_list_list_i32() &&;

  /** Glean { "field": "list_list_i32" } */
  template <typename T_Containers_list_list_i32_struct_setter = ::std::vector<::std::vector<::std::int32_t>>>
  [[deprecated("Use `FOO.list_list_i32() = BAR` instead of `FOO.set_list_list_i32(BAR)`")]]
  ::std::vector<::std::vector<::std::int32_t>>& set_list_list_i32(T_Containers_list_list_i32_struct_setter&& list_list_i32_) {
    list_list_i32_ref() = std::forward<T_Containers_list_list_i32_struct_setter>(list_list_i32_);
    return __fbthrift_field_list_list_i32;
  }

  /** Glean { "field": "list_list_struct" } */
  [[deprecated("Use `FOO.list_list_struct().value()` instead of `FOO.get_list_list_struct()`")]]
  const ::std::vector<::std::vector<::cpp2::MyStruct>>& get_list_list_struct() const&;

  /** Glean { "field": "list_list_struct" } */
  [[deprecated("Use `FOO.list_list_struct().value()` instead of `FOO.get_list_list_struct()`")]]
  ::std::vector<::std::vector<::cpp2::MyStruct>> get_list_list_struct() &&;

  /** Glean { "field": "list_list_struct" } */
  template <typename T_Containers_list_list_struct_struct_setter = ::std::vector<::std::vector<::cpp2::MyStruct>>>
  [[deprecated("Use `FOO.list_list_struct() = BAR` instead of `FOO.set_list_list_struct(BAR)`")]]
  ::std::vector<::std::vector<::cpp2::MyStruct>>& set_list_list_struct(T_Containers_list_list_struct_struct_setter&& list_list_struct_) {
    list_list_struct_ref() = std::forward<T_Containers_list_list_struct_struct_setter>(list_list_struct_);
    return __fbthrift_field_list_list_struct;
  }

  /** Glean { "field": "list_set_i32" } */
  [[deprecated("Use `FOO.list_set_i32().value()` instead of `FOO.get_list_set_i32()`")]]
  const ::std::vector<::std::set<::std::int32_t>>& get_list_set_i32() const&;

  /** Glean { "field": "list_set_i32" } */
  [[deprecated("Use `FOO.list_set_i32().value()` instead of `FOO.get_list_set_i32()`")]]
  ::std::vector<::std::set<::std::int32_t>> get_list_set_i32() &&;

  /** Glean { "field": "list_set_i32" } */
  template <typename T_Containers_list_set_i32_struct_setter = ::std::vector<::std::set<::std::int32_t>>>
  [[deprecated("Use `FOO.list_set_i32() = BAR` instead of `FOO.set_list_set_i32(BAR)`")]]
  ::std::vector<::std::set<::std::int32_t>>& set_list_set_i32(T_Containers_list_set_i32_struct_setter&& list_set_i32_) {
    list_set_i32_ref() = std::forward<T_Containers_list_set_i32_struct_setter>(list_set_i32_);
    return __fbthrift_field_list_set_i32;
  }

  /** Glean { "field": "list_set_struct" } */
  [[deprecated("Use `FOO.list_set_struct().value()` instead of `FOO.get_list_set_struct()`")]]
  const ::std::vector<::std::set<::cpp2::MyStruct>>& get_list_set_struct() const&;

  /** Glean { "field": "list_set_struct" } */
  [[deprecated("Use `FOO.list_set_struct().value()` instead of `FOO.get_list_set_struct()`")]]
  ::std::vector<::std::set<::cpp2::MyStruct>> get_list_set_struct() &&;

  /** Glean { "field": "list_set_struct" } */
  template <typename T_Containers_list_set_struct_struct_setter = ::std::vector<::std::set<::cpp2::MyStruct>>>
  [[deprecated("Use `FOO.list_set_struct() = BAR` instead of `FOO.set_list_set_struct(BAR)`")]]
  ::std::vector<::std::set<::cpp2::MyStruct>>& set_list_set_struct(T_Containers_list_set_struct_struct_setter&& list_set_struct_) {
    list_set_struct_ref() = std::forward<T_Containers_list_set_struct_struct_setter>(list_set_struct_);
    return __fbthrift_field_list_set_struct;
  }

  /** Glean { "field": "list_map_i32_i32" } */
  [[deprecated("Use `FOO.list_map_i32_i32().value()` instead of `FOO.get_list_map_i32_i32()`")]]
  const ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>& get_list_map_i32_i32() const&;

  /** Glean { "field": "list_map_i32_i32" } */
  [[deprecated("Use `FOO.list_map_i32_i32().value()` instead of `FOO.get_list_map_i32_i32()`")]]
  ::std::vector<::std::map<::std::int32_t, ::std::int32_t>> get_list_map_i32_i32() &&;

  /** Glean { "field": "list_map_i32_i32" } */
  template <typename T_Containers_list_map_i32_i32_struct_setter = ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>
  [[deprecated("Use `FOO.list_map_i32_i32() = BAR` instead of `FOO.set_list_map_i32_i32(BAR)`")]]
  ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>& set_list_map_i32_i32(T_Containers_list_map_i32_i32_struct_setter&& list_map_i32_i32_) {
    list_map_i32_i32_ref() = std::forward<T_Containers_list_map_i32_i32_struct_setter>(list_map_i32_i32_);
    return __fbthrift_field_list_map_i32_i32;
  }

  /** Glean { "field": "list_map_i32_struct" } */
  [[deprecated("Use `FOO.list_map_i32_struct().value()` instead of `FOO.get_list_map_i32_struct()`")]]
  const ::std::vector<::std::map<::std::int32_t, ::cpp2::MyStruct>>& get_list_map_i32_struct() const&;

  /** Glean { "field": "list_map_i32_struct" } */
  [[deprecated("Use `FOO.list_map_i32_struct().value()` instead of `FOO.get_list_map_i32_struct()`")]]
  ::std::vector<::std::map<::std::int32_t, ::cpp2::MyStruct>> get_list_map_i32_struct() &&;

  /** Glean { "field": "list_map_i32_struct" } */
  template <typename T_Containers_list_map_i32_struct_struct_setter = ::std::vector<::std::map<::std::int32_t, ::cpp2::MyStruct>>>
  [[deprecated("Use `FOO.list_map_i32_struct() = BAR` instead of `FOO.set_list_map_i32_struct(BAR)`")]]
  ::std::vector<::std::map<::std::int32_t, ::cpp2::MyStruct>>& set_list_map_i32_struct(T_Containers_list_map_i32_struct_struct_setter&& list_map_i32_struct_) {
    list_map_i32_struct_ref() = std::forward<T_Containers_list_map_i32_struct_struct_setter>(list_map_i32_struct_);
    return __fbthrift_field_list_map_i32_struct;
  }

  /** Glean { "field": "list_map_struct_i32" } */
  [[deprecated("Use `FOO.list_map_struct_i32().value()` instead of `FOO.get_list_map_struct_i32()`")]]
  const ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>>& get_list_map_struct_i32() const&;

  /** Glean { "field": "list_map_struct_i32" } */
  [[deprecated("Use `FOO.list_map_struct_i32().value()` instead of `FOO.get_list_map_struct_i32()`")]]
  ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>> get_list_map_struct_i32() &&;

  /** Glean { "field": "list_map_struct_i32" } */
  template <typename T_Containers_list_map_struct_i32_struct_setter = ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>>>
  [[deprecated("Use `FOO.list_map_struct_i32() = BAR` instead of `FOO.set_list_map_struct_i32(BAR)`")]]
  ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>>& set_list_map_struct_i32(T_Containers_list_map_struct_i32_struct_setter&& list_map_struct_i32_) {
    list_map_struct_i32_ref() = std::forward<T_Containers_list_map_struct_i32_struct_setter>(list_map_struct_i32_);
    return __fbthrift_field_list_map_struct_i32;
  }

  /** Glean { "field": "set_list_i32" } */
  [[deprecated("Use `FOO.set_list_i32().value()` instead of `FOO.get_set_list_i32()`")]]
  const ::std::set<::std::vector<::std::int32_t>>& get_set_list_i32() const&;

  /** Glean { "field": "set_list_i32" } */
  [[deprecated("Use `FOO.set_list_i32().value()` instead of `FOO.get_set_list_i32()`")]]
  ::std::set<::std::vector<::std::int32_t>> get_set_list_i32() &&;

  /** Glean { "field": "set_list_i32" } */
  template <typename T_Containers_set_list_i32_struct_setter = ::std::set<::std::vector<::std::int32_t>>>
  [[deprecated("Use `FOO.set_list_i32() = BAR` instead of `FOO.set_set_list_i32(BAR)`")]]
  ::std::set<::std::vector<::std::int32_t>>& set_set_list_i32(T_Containers_set_list_i32_struct_setter&& set_list_i32_) {
    set_list_i32_ref() = std::forward<T_Containers_set_list_i32_struct_setter>(set_list_i32_);
    return __fbthrift_field_set_list_i32;
  }

  /** Glean { "field": "set_list_struct" } */
  [[deprecated("Use `FOO.set_list_struct().value()` instead of `FOO.get_set_list_struct()`")]]
  const ::std::set<::std::vector<::cpp2::MyStruct>>& get_set_list_struct() const&;

  /** Glean { "field": "set_list_struct" } */
  [[deprecated("Use `FOO.set_list_struct().value()` instead of `FOO.get_set_list_struct()`")]]
  ::std::set<::std::vector<::cpp2::MyStruct>> get_set_list_struct() &&;

  /** Glean { "field": "set_list_struct" } */
  template <typename T_Containers_set_list_struct_struct_setter = ::std::set<::std::vector<::cpp2::MyStruct>>>
  [[deprecated("Use `FOO.set_list_struct() = BAR` instead of `FOO.set_set_list_struct(BAR)`")]]
  ::std::set<::std::vector<::cpp2::MyStruct>>& set_set_list_struct(T_Containers_set_list_struct_struct_setter&& set_list_struct_) {
    set_list_struct_ref() = std::forward<T_Containers_set_list_struct_struct_setter>(set_list_struct_);
    return __fbthrift_field_set_list_struct;
  }

  /** Glean { "field": "set_set_i32" } */
  [[deprecated("Use `FOO.set_set_i32().value()` instead of `FOO.get_set_set_i32()`")]]
  const ::std::set<::std::set<::std::int32_t>>& get_set_set_i32() const&;

  /** Glean { "field": "set_set_i32" } */
  [[deprecated("Use `FOO.set_set_i32().value()` instead of `FOO.get_set_set_i32()`")]]
  ::std::set<::std::set<::std::int32_t>> get_set_set_i32() &&;

  /** Glean { "field": "set_set_i32" } */
  template <typename T_Containers_set_set_i32_struct_setter = ::std::set<::std::set<::std::int32_t>>>
  [[deprecated("Use `FOO.set_set_i32() = BAR` instead of `FOO.set_set_set_i32(BAR)`")]]
  ::std::set<::std::set<::std::int32_t>>& set_set_set_i32(T_Containers_set_set_i32_struct_setter&& set_set_i32_) {
    set_set_i32_ref() = std::forward<T_Containers_set_set_i32_struct_setter>(set_set_i32_);
    return __fbthrift_field_set_set_i32;
  }

  /** Glean { "field": "set_set_struct" } */
  [[deprecated("Use `FOO.set_set_struct().value()` instead of `FOO.get_set_set_struct()`")]]
  const ::std::set<::std::set<::cpp2::MyStruct>>& get_set_set_struct() const&;

  /** Glean { "field": "set_set_struct" } */
  [[deprecated("Use `FOO.set_set_struct().value()` instead of `FOO.get_set_set_struct()`")]]
  ::std::set<::std::set<::cpp2::MyStruct>> get_set_set_struct() &&;

  /** Glean { "field": "set_set_struct" } */
  template <typename T_Containers_set_set_struct_struct_setter = ::std::set<::std::set<::cpp2::MyStruct>>>
  [[deprecated("Use `FOO.set_set_struct() = BAR` instead of `FOO.set_set_set_struct(BAR)`")]]
  ::std::set<::std::set<::cpp2::MyStruct>>& set_set_set_struct(T_Containers_set_set_struct_struct_setter&& set_set_struct_) {
    set_set_struct_ref() = std::forward<T_Containers_set_set_struct_struct_setter>(set_set_struct_);
    return __fbthrift_field_set_set_struct;
  }

  /** Glean { "field": "set_map_i32_i32" } */
  [[deprecated("Use `FOO.set_map_i32_i32().value()` instead of `FOO.get_set_map_i32_i32()`")]]
  const ::std::set<::std::map<::std::int32_t, ::std::int32_t>>& get_set_map_i32_i32() const&;

  /** Glean { "field": "set_map_i32_i32" } */
  [[deprecated("Use `FOO.set_map_i32_i32().value()` instead of `FOO.get_set_map_i32_i32()`")]]
  ::std::set<::std::map<::std::int32_t, ::std::int32_t>> get_set_map_i32_i32() &&;

  /** Glean { "field": "set_map_i32_i32" } */
  template <typename T_Containers_set_map_i32_i32_struct_setter = ::std::set<::std::map<::std::int32_t, ::std::int32_t>>>
  [[deprecated("Use `FOO.set_map_i32_i32() = BAR` instead of `FOO.set_set_map_i32_i32(BAR)`")]]
  ::std::set<::std::map<::std::int32_t, ::std::int32_t>>& set_set_map_i32_i32(T_Containers_set_map_i32_i32_struct_setter&& set_map_i32_i32_) {
    set_map_i32_i32_ref() = std::forward<T_Containers_set_map_i32_i32_struct_setter>(set_map_i32_i32_);
    return __fbthrift_field_set_map_i32_i32;
  }

  /** Glean { "field": "set_map_i32_struct" } */
  [[deprecated("Use `FOO.set_map_i32_struct().value()` instead of `FOO.get_set_map_i32_struct()`")]]
  const ::std::set<::std::map<::std::int32_t, ::cpp2::MyStruct>>& get_set_map_i32_struct() const&;

  /** Glean { "field": "set_map_i32_struct" } */
  [[deprecated("Use `FOO.set_map_i32_struct().value()` instead of `FOO.get_set_map_i32_struct()`")]]
  ::std::set<::std::map<::std::int32_t, ::cpp2::MyStruct>> get_set_map_i32_struct() &&;

  /** Glean { "field": "set_map_i32_struct" } */
  template <typename T_Containers_set_map_i32_struct_struct_setter = ::std::set<::std::map<::std::int32_t, ::cpp2::MyStruct>>>
  [[deprecated("Use `FOO.set_map_i32_struct() = BAR` instead of `FOO.set_set_map_i32_struct(BAR)`")]]
  ::std::set<::std::map<::std::int32_t, ::cpp2::MyStruct>>& set_set_map_i32_struct(T_Containers_set_map_i32_struct_struct_setter&& set_map_i32_struct_) {
    set_map_i32_struct_ref() = std::forward<T_Containers_set_map_i32_struct_struct_setter>(set_map_i32_struct_);
    return __fbthrift_field_set_map_i32_struct;
  }

  /** Glean { "field": "set_map_struct_i32" } */
  [[deprecated("Use `FOO.set_map_struct_i32().value()` instead of `FOO.get_set_map_struct_i32()`")]]
  const ::std::set<::std::map<::cpp2::MyStruct, ::std::int32_t>>& get_set_map_struct_i32() const&;

  /** Glean { "field": "set_map_struct_i32" } */
  [[deprecated("Use `FOO.set_map_struct_i32().value()` instead of `FOO.get_set_map_struct_i32()`")]]
  ::std::set<::std::map<::cpp2::MyStruct, ::std::int32_t>> get_set_map_struct_i32() &&;

  /** Glean { "field": "set_map_struct_i32" } */
  template <typename T_Containers_set_map_struct_i32_struct_setter = ::std::set<::std::map<::cpp2::MyStruct, ::std::int32_t>>>
  [[deprecated("Use `FOO.set_map_struct_i32() = BAR` instead of `FOO.set_set_map_struct_i32(BAR)`")]]
  ::std::set<::std::map<::cpp2::MyStruct, ::std::int32_t>>& set_set_map_struct_i32(T_Containers_set_map_struct_i32_struct_setter&& set_map_struct_i32_) {
    set_map_struct_i32_ref() = std::forward<T_Containers_set_map_struct_i32_struct_setter>(set_map_struct_i32_);
    return __fbthrift_field_set_map_struct_i32;
  }

  /** Glean { "field": "map_i32_map_i32_i32" } */
  [[deprecated("Use `FOO.map_i32_map_i32_i32().value()` instead of `FOO.get_map_i32_map_i32_i32()`")]]
  const ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>>& get_map_i32_map_i32_i32() const&;

  /** Glean { "field": "map_i32_map_i32_i32" } */
  [[deprecated("Use `FOO.map_i32_map_i32_i32().value()` instead of `FOO.get_map_i32_map_i32_i32()`")]]
  ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>> get_map_i32_map_i32_i32() &&;

  /** Glean { "field": "map_i32_map_i32_i32" } */
  template <typename T_Containers_map_i32_map_i32_i32_struct_setter = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>>>
  [[deprecated("Use `FOO.map_i32_map_i32_i32() = BAR` instead of `FOO.set_map_i32_map_i32_i32(BAR)`")]]
  ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>>& set_map_i32_map_i32_i32(T_Containers_map_i32_map_i32_i32_struct_setter&& map_i32_map_i32_i32_) {
    map_i32_map_i32_i32_ref() = std::forward<T_Containers_map_i32_map_i32_i32_struct_setter>(map_i32_map_i32_i32_);
    return __fbthrift_field_map_i32_map_i32_i32;
  }

  /** Glean { "field": "map_i32_map_struct_i32" } */
  [[deprecated("Use `FOO.map_i32_map_struct_i32().value()` instead of `FOO.get_map_i32_map_struct_i32()`")]]
  const ::std::map<::std::int32_t, ::std::map<::cpp2::MyStruct, ::std::int32_t>>& get_map_i32_map_struct_i32() const&;

  /** Glean { "field": "map_i32_map_struct_i32" } */
  [[deprecated("Use `FOO.map_i32_map_struct_i32().value()` instead of `FOO.get_map_i32_map_struct_i32()`")]]
  ::std::map<::std::int32_t, ::std::map<::cpp2::MyStruct, ::std::int32_t>> get_map_i32_map_struct_i32() &&;

  /** Glean { "field": "map_i32_map_struct_i32" } */
  template <typename T_Containers_map_i32_map_struct_i32_struct_setter = ::std::map<::std::int32_t, ::std::map<::cpp2::MyStruct, ::std::int32_t>>>
  [[deprecated("Use `FOO.map_i32_map_struct_i32() = BAR` instead of `FOO.set_map_i32_map_struct_i32(BAR)`")]]
  ::std::map<::std::int32_t, ::std::map<::cpp2::MyStruct, ::std::int32_t>>& set_map_i32_map_struct_i32(T_Containers_map_i32_map_struct_i32_struct_setter&& map_i32_map_struct_i32_) {
    map_i32_map_struct_i32_ref() = std::forward<T_Containers_map_i32_map_struct_i32_struct_setter>(map_i32_map_struct_i32_);
    return __fbthrift_field_map_i32_map_struct_i32;
  }

  /** Glean { "field": "map_i32_map_i32_struct" } */
  [[deprecated("Use `FOO.map_i32_map_i32_struct().value()` instead of `FOO.get_map_i32_map_i32_struct()`")]]
  const ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::cpp2::MyStruct>>& get_map_i32_map_i32_struct() const&;

  /** Glean { "field": "map_i32_map_i32_struct" } */
  [[deprecated("Use `FOO.map_i32_map_i32_struct().value()` instead of `FOO.get_map_i32_map_i32_struct()`")]]
  ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::cpp2::MyStruct>> get_map_i32_map_i32_struct() &&;

  /** Glean { "field": "map_i32_map_i32_struct" } */
  template <typename T_Containers_map_i32_map_i32_struct_struct_setter = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::cpp2::MyStruct>>>
  [[deprecated("Use `FOO.map_i32_map_i32_struct() = BAR` instead of `FOO.set_map_i32_map_i32_struct(BAR)`")]]
  ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::cpp2::MyStruct>>& set_map_i32_map_i32_struct(T_Containers_map_i32_map_i32_struct_struct_setter&& map_i32_map_i32_struct_) {
    map_i32_map_i32_struct_ref() = std::forward<T_Containers_map_i32_map_i32_struct_struct_setter>(map_i32_map_i32_struct_);
    return __fbthrift_field_map_i32_map_i32_struct;
  }

  /** Glean { "field": "map_i32_map_list_i32_i32" } */
  [[deprecated("Use `FOO.map_i32_map_list_i32_i32().value()` instead of `FOO.get_map_i32_map_list_i32_i32()`")]]
  const ::std::map<::std::int32_t, ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>& get_map_i32_map_list_i32_i32() const&;

  /** Glean { "field": "map_i32_map_list_i32_i32" } */
  [[deprecated("Use `FOO.map_i32_map_list_i32_i32().value()` instead of `FOO.get_map_i32_map_list_i32_i32()`")]]
  ::std::map<::std::int32_t, ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>> get_map_i32_map_list_i32_i32() &&;

  /** Glean { "field": "map_i32_map_list_i32_i32" } */
  template <typename T_Containers_map_i32_map_list_i32_i32_struct_setter = ::std::map<::std::int32_t, ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>>
  [[deprecated("Use `FOO.map_i32_map_list_i32_i32() = BAR` instead of `FOO.set_map_i32_map_list_i32_i32(BAR)`")]]
  ::std::map<::std::int32_t, ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>& set_map_i32_map_list_i32_i32(T_Containers_map_i32_map_list_i32_i32_struct_setter&& map_i32_map_list_i32_i32_) {
    map_i32_map_list_i32_i32_ref() = std::forward<T_Containers_map_i32_map_list_i32_i32_struct_setter>(map_i32_map_list_i32_i32_);
    return __fbthrift_field_map_i32_map_list_i32_i32;
  }

  /** Glean { "field": "map_i32_map_list_struct_i32" } */
  [[deprecated("Use `FOO.map_i32_map_list_struct_i32().value()` instead of `FOO.get_map_i32_map_list_struct_i32()`")]]
  const ::std::map<::std::int32_t, ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>>>& get_map_i32_map_list_struct_i32() const&;

  /** Glean { "field": "map_i32_map_list_struct_i32" } */
  [[deprecated("Use `FOO.map_i32_map_list_struct_i32().value()` instead of `FOO.get_map_i32_map_list_struct_i32()`")]]
  ::std::map<::std::int32_t, ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>>> get_map_i32_map_list_struct_i32() &&;

  /** Glean { "field": "map_i32_map_list_struct_i32" } */
  template <typename T_Containers_map_i32_map_list_struct_i32_struct_setter = ::std::map<::std::int32_t, ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>>>>
  [[deprecated("Use `FOO.map_i32_map_list_struct_i32() = BAR` instead of `FOO.set_map_i32_map_list_struct_i32(BAR)`")]]
  ::std::map<::std::int32_t, ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>>>& set_map_i32_map_list_struct_i32(T_Containers_map_i32_map_list_struct_i32_struct_setter&& map_i32_map_list_struct_i32_) {
    map_i32_map_list_struct_i32_ref() = std::forward<T_Containers_map_i32_map_list_struct_i32_struct_setter>(map_i32_map_list_struct_i32_);
    return __fbthrift_field_map_i32_map_list_struct_i32;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Containers>;
  friend void swap(Containers& a, Containers& b);
};

template <class Protocol_>
unsigned long Containers::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace cpp2

namespace apache::thrift {

template <> struct TEnumDataStorage<::cpp2::MyUnion::Type>;

template <> struct TEnumTraits<::cpp2::MyUnion::Type> {
  using type = ::cpp2::MyUnion::Type;

  static constexpr std::size_t const size = 6;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }

  static constexpr type min() { return type::myEnum; }
  static constexpr type max() { return type::intValue; }
};

template <> struct TEnumDataStorage<::cpp2::MyUnionFloatFieldThrowExp::Type>;

template <> struct TEnumTraits<::cpp2::MyUnionFloatFieldThrowExp::Type> {
  using type = ::cpp2::MyUnionFloatFieldThrowExp::Type;

  static constexpr std::size_t const size = 4;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }

  static constexpr type min() { return type::myEnum; }
  static constexpr type max() { return type::complexNestedStruct; }
};
} // namespace apache::thrift

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::cpp2::MyStructFloatFieldThrowExp, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -3322898400657203290;
  static constexpr ::std::string_view definitionKey = {"\x1a\xf2\x21\x22\x8d\x1f\xb5\x3c\x4e\x7f\x96\xcc\x14\xc8\x09\x8b", 16};
};
template <> struct TSchemaAssociation<::cpp2::MyStructMapFloatThrowExp, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -3322898400657203290;
  static constexpr ::std::string_view definitionKey = {"\xd1\x47\x09\xc3\xc8\x0d\x48\xce\x34\x8f\xf8\x0a\x6a\x90\xb8\xc8", 16};
};
template <> struct TSchemaAssociation<::cpp2::MyStruct, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -3322898400657203290;
  static constexpr ::std::string_view definitionKey = {"\x5a\x9a\x29\x1b\xf8\x64\xe8\xb0\x6f\x07\x92\x1e\x08\xa6\x89\x28", 16};
};
template <> struct TSchemaAssociation<::cpp2::SimpleStruct, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -3322898400657203290;
  static constexpr ::std::string_view definitionKey = {"\xa3\xb8\xff\x20\x1e\xb1\x95\x9f\x38\x8f\xeb\x5f\x74\xa5\xc6\x93", 16};
};
template <> struct TSchemaAssociation<::cpp2::defaultStruct, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -3322898400657203290;
  static constexpr ::std::string_view definitionKey = {"\x49\xe8\x2e\xf7\xd9\x71\x5e\xa6\x39\xf8\xf3\x17\xcc\x0f\xe6\xf4", 16};
};
template <> struct TSchemaAssociation<::cpp2::MyStructTypeDef, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -3322898400657203290;
  static constexpr ::std::string_view definitionKey = {"\x8d\x05\x49\x79\xa5\xbd\x2d\xf2\xc9\xd8\x00\xd7\x2f\x50\x02\x86", 16};
};
template <> struct TSchemaAssociation<::cpp2::MyDataItem, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -3322898400657203290;
  static constexpr ::std::string_view definitionKey = {"\x13\xe2\x42\xa9\x1b\xe5\x26\xba\x93\xb1\x7f\xc6\x61\x22\xd1\x84", 16};
};
template <> struct TSchemaAssociation<::cpp2::MyUnion, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -3322898400657203290;
  static constexpr ::std::string_view definitionKey = {"\x85\xcd\x05\x30\xe4\xb4\xa8\xa5\xb7\xc1\x13\x5e\xe1\x2b\x17\xc3", 16};
};
template <> struct TSchemaAssociation<::cpp2::MyUnionFloatFieldThrowExp, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -3322898400657203290;
  static constexpr ::std::string_view definitionKey = {"\xb7\xf7\xf6\xda\x35\xa1\xca\x4c\x64\x4b\x18\x57\xa8\xca\x96\xb1", 16};
};
template <> struct TSchemaAssociation<::cpp2::ComplexNestedStruct, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -3322898400657203290;
  static constexpr ::std::string_view definitionKey = {"\xe2\x08\x14\x2d\x4d\x12\xf2\x82\x50\xbe\x13\xcf\xcc\x42\x9c\x97", 16};
};
template <> struct TSchemaAssociation<::cpp2::TypeRemapped, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -3322898400657203290;
  static constexpr ::std::string_view definitionKey = {"\x19\x3c\x56\x47\xc1\xf5\x0b\x1f\x84\xb2\x9f\x2c\x3c\x10\xac\xd2", 16};
};
template <> struct TSchemaAssociation<::cpp2::emptyXcep, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -3322898400657203290;
  static constexpr ::std::string_view definitionKey = {"\x99\xf2\xab\x70\xe2\x8c\xa4\x71\xbd\x2b\x2c\x9a\x81\x57\x2b\x0b", 16};
};
template <> struct TSchemaAssociation<::cpp2::reqXcep, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -3322898400657203290;
  static constexpr ::std::string_view definitionKey = {"\xa4\x57\x0d\x75\x0f\x90\xc5\x7f\x3d\xf1\x3c\x8c\x99\x89\x80\x30", 16};
};
template <> struct TSchemaAssociation<::cpp2::optXcep, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -3322898400657203290;
  static constexpr ::std::string_view definitionKey = {"\x67\x67\xa0\x69\x9f\x56\x8a\xcc\x3e\xf5\x32\x2e\x4d\x1a\x81\x98", 16};
};
template <> struct TSchemaAssociation<::cpp2::complexException, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -3322898400657203290;
  static constexpr ::std::string_view definitionKey = {"\xb3\xe3\xfd\xb8\xf5\xaf\xb3\x22\x12\xfe\x5e\xba\x04\x91\x54\x67", 16};
};
template <> struct TSchemaAssociation<::cpp2::Containers, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -3322898400657203290;
  static constexpr ::std::string_view definitionKey = {"\xcc\xd2\x95\xcc\x27\x3c\xae\x12\xf8\xb6\xa2\x5c\x07\x1f\x01\xe7", 16};
};
template <> struct TSchemaAssociation<::cpp2::MyEnum, true> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -3322898400657203290;
  static constexpr ::std::string_view definitionKey = {"\xd1\x4b\xda\xaf\x04\x29\x99\x49\x9d\x48\x8f\x4d\x7e\xb8\x10\xce", 16};
};
} // namespace apache::thrift::detail
