/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.basic;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.service.*;
import com.facebook.thrift.client.*;
import com.google.common.util.concurrent.ListenableFuture;
import java.io.*;
import java.util.*;
import reactor.core.publisher.Mono;

@SwiftGenerated
@com.facebook.swift.service.ThriftService("FooService")
public interface FooService extends java.io.Closeable, com.facebook.thrift.util.BlockingService {
    static com.facebook.thrift.server.RpcServerHandlerBuilder<FooService> serverHandlerBuilder(FooService _serverImpl) {
        return new com.facebook.thrift.server.RpcServerHandlerBuilder<FooService>(_serverImpl) {
                @java.lang.Override
                public com.facebook.thrift.server.RpcServerHandler build() {
                return new FooServiceRpcServerHandler(impl, eventHandlers);
            }
        };
    }

    static com.facebook.thrift.client.ClientBuilder<FooService> clientBuilder() {
        return new ClientBuilder<FooService>() {
            @java.lang.Override
            public FooService build(Mono<RpcClient> rpcClientMono) {
                FooService.Reactive _delegate =
                    new FooServiceReactiveClient(protocolId, rpcClientMono, headers, persistentHeaders);
                return new FooServiceReactiveBlockingWrapper(_delegate);
            }
        };
    }

    @com.facebook.swift.service.ThriftService("FooService")
    public interface Async extends java.io.Closeable, com.facebook.thrift.util.AsyncService {
        static com.facebook.thrift.server.RpcServerHandlerBuilder<FooService.Async> serverHandlerBuilder(FooService.Async _serverImpl) {
            return new com.facebook.thrift.server.RpcServerHandlerBuilder<FooService.Async>(_serverImpl) {
                @java.lang.Override
                public com.facebook.thrift.server.RpcServerHandler build() {
                    return new FooServiceRpcServerHandler(impl, eventHandlers);
                }
            };
        }

        static com.facebook.thrift.client.ClientBuilder<FooService.Async> clientBuilder() {
            return new ClientBuilder<FooService.Async>() {
                @java.lang.Override
                public FooService.Async build(Mono<RpcClient> rpcClientMono) {
                    FooService.Reactive _delegate =
                        new FooServiceReactiveClient(protocolId, rpcClientMono, headers, persistentHeaders);
                    return new FooServiceReactiveAsyncWrapper(_delegate);
                }
            };
        }

        @java.lang.Override void close();

        @ThriftMethod(value = "simple_rpc")
        ListenableFuture<Void> simpleRpc();

        default ListenableFuture<Void> simpleRpc(
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default ListenableFuture<ResponseWrapper<Void>> simpleRpcWrapper(
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }
    }
    @java.lang.Override void close();

    @ThriftMethod(value = "simple_rpc")
    void simpleRpc() throws org.apache.thrift.TException;

    default void simpleRpc(
        RpcOptions rpcOptions) throws org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    default ResponseWrapper<Void> simpleRpcWrapper(
        RpcOptions rpcOptions) throws org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    @com.facebook.swift.service.ThriftService("FooService")
    interface Reactive extends reactor.core.Disposable, com.facebook.thrift.util.ReactiveService {
        static com.facebook.thrift.server.RpcServerHandlerBuilder<FooService.Reactive> serverHandlerBuilder(FooService.Reactive _serverImpl) {
            return new com.facebook.thrift.server.RpcServerHandlerBuilder<FooService.Reactive>(_serverImpl) {
                @java.lang.Override
                public com.facebook.thrift.server.RpcServerHandler build() {
                    return new FooServiceRpcServerHandler(impl, eventHandlers);
                }
            };
        }

        static com.facebook.thrift.client.ClientBuilder<FooService.Reactive> clientBuilder() {
            return new ClientBuilder<FooService.Reactive>() {
                @java.lang.Override
                public FooService.Reactive build(Mono<RpcClient> rpcClientMono) {
                    return new FooServiceReactiveClient(protocolId, rpcClientMono, headers, persistentHeaders);
                }
            };
        }

        @ThriftMethod(value = "simple_rpc")
        reactor.core.publisher.Mono<Void> simpleRpc();

        default reactor.core.publisher.Mono<Void> simpleRpc(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default reactor.core.publisher.Mono<ResponseWrapper<Void>> simpleRpcWrapper(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

    }
}
