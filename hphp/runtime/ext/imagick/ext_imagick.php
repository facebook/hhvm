<?hh
// @generated by docskel.php

class ImagickException extends RuntimeException { }
class ImagickDrawException extends RuntimeException { }
class ImagickPixelException extends RuntimeException { }
class ImagickPixelIteratorException extends RuntimeException { }

class Imagick {
  // Colortype constants
  const COLOR_BLACK = 0;
  const COLOR_BLUE = 1;
  const COLOR_CYAN = 2;
  const COLOR_GREEN = 3;
  const COLOR_RED = 4;
  const COLOR_YELLOW = 5;
  const COLOR_MAGENTA = 6;
  const COLOR_OPACITY = 7;
  const COLOR_ALPHA = 8;
  const COLOR_FUZZ = 9;

  private resource $wand;

  /**
   * The Imagick constructor
   *
   * @param mixed $files -
   *
   * @return  - Returns a new Imagick object on success.
   */
  <<__Native>>
  function __construct(mixed $files = null): void;
}

class ImagickPixel {
  private resource $wand;
  private bool $initByIterator;

  /**
   * Clears resources associated with this object
   *
   * @return bool -
   */
  <<__Native>>
  function clear(): bool;

  /**
   * The ImagickPixel constructor
   *
   * @param string $color - The optional color string to use as the
   *   initial value of this object.
   *
   * @return  - Returns an ImagickPixel object on success, throwing
   *   ImagickPixelException on failure.
   */
  <<__Native>>
  function __construct(string $color = ''): void;

  /**
   * Deallocates resources associated with this object
   *
   * @return bool -
   */
  <<__Native>>
  function destroy(): bool;

  /**
   * Returns the color
   *
   * @param bool $normalized - Normalize the color values
   *
   * @return array - An array of channel values, each normalized if TRUE
   *   is given as param. Throws ImagickPixelException on error.
   */
  <<__Native>>
  function getColor(bool $normalized = false): array;

  /**
   * Returns the color as a string
   *
   * @return string - Returns the color of the ImagickPixel object as a
   *   string.
   */
  <<__Native>>
  function getColorAsString(): string;

  /**
   * Returns the color count associated with this color
   *
   * @return int - Returns the color count as an integer on success,
   *   throws ImagickPixelException on failure.
   */
  <<__Native>>
  function getColorCount(): int;

  /**
   * Gets the normalized value of the provided color channel
   *
   * @param int $color - The color to get the value of, specified as one
   *   of the Imagick color constants. This can be one of the RGB colors,
   *   CMYK colors, alpha and opacity e.g (Imagick::COLOR_BLUE,
   *   Imagick::COLOR_MAGENTA).
   *
   * @return float - The value of the channel, as a normalized
   *   floating-point number, throwing ImagickPixelException on error.
   */
  <<__Native>>
  function getColorValue(int $color): float;

  /**
   * Returns the normalized HSL color of the ImagickPixel object
   *
   * @return array - Returns the HSL value in an array with the keys
   *   "hue", "saturation", and "luminosity". Throws ImagickPixelException
   *   on failure.
   */
  <<__Native>>
  function getHSL(): array;

  /**
   * Check the distance between this color and another
   *
   * @param imagickpixel $color - The ImagickPixel object to compare this
   *   object against.
   * @param float $fuzz - The maximum distance within which to consider
   *   these colors as similar. The theoretical maximum for this value is
   *   the square root of three (1.732).
   *
   * @return bool -
   */
  <<__Native>>
  function isPixelSimilar(mixed $color,
                          float $fuzz): bool;

  /**
   * Check the distance between this color and another
   *
   * @param imagickpixel $color - The ImagickPixel object to compare this
   *   object against.
   * @param float $fuzz - The maximum distance within which to consider
   *   these colors as similar. The theoretical maximum for this value is
   *   the square root of three (1.732).
   *
   * @return bool -
   */
  <<__Native>>
  function isSimilar(mixed $color,
                     float $fuzz): bool;

  /**
   * Sets the color
   *
   * @param string $color - The color definition to use in order to
   *   initialise the ImagickPixel object.
   *
   * @return bool - Returns TRUE if the specified color was set, FALSE
   *   otherwise.
   */
  <<__Native>>
  function setColor(string $color): bool;

  /**
   * Sets the normalized value of one of the channels
   *
   * @param int $color - One of the Imagick color constants e.g.
   *   \Imagick::COLOR_GREEN or \Imagick::COLOR_ALPHA.
   * @param float $value - The value to set this channel to, ranging from
   *   0 to 1.
   *
   * @return bool -
   */
  <<__Native>>
  function setColorValue(int $color,
                         float $value): bool;

  /**
   * Sets the normalized HSL color
   *
   * @param float $hue - The normalized value for hue, described as a
   *   fractional arc (between 0 and 1) of the hue circle, where the zero
   *   value is red.
   * @param float $saturation - The normalized value for saturation, with
   *   1 as full saturation.
   * @param float $luminosity - The normalized value for luminosity, on a
   *   scale from black at 0 to white at 1, with the full HS value at 0.5
   *   luminosity.
   *
   * @return bool -
   */
  <<__Native>>
  function setHSL(float $hue,
                  float $saturation,
                  float $luminosity): bool;

}

class ImagickPixelIterator {
  private resource $wand;

  <<__Native>>
  static function getPixelIterator(Imagick $wand): ImagickPixelIterator;

  <<__Native>>
  static function getPixelRegionIterator(Imagick $wand,
                                         int $x,
                                         int $y,
                                         int $columns,
                                         int $rows): ImagickPixelIterator;

  /**
   * Clear resources associated with a PixelIterator
   *
   * @return bool -
   */
  <<__Native>>
  function clear(): bool;

  /**
   * The ImagickPixelIterator constructor
   *
   * @param imagick $wand -
   *
   * @return  -
   */
  <<__Native>>
  function __construct(Imagick $wand): void;

  /**
   * Deallocates resources associated with a PixelIterator
   *
   * @return bool -
   */
  <<__Native>>
  function destroy(): bool;

  /**
   * Returns the current row of ImagickPixel objects
   *
   * @return array - Returns a row as an array of ImagickPixel objects
   *   that can themselves be iterated.
   */
  <<__Native>>
  function getCurrentIteratorRow(): array;

  /**
   * Returns the current pixel iterator row
   *
   * @return int - Returns the integer offset of the row, throwing
   *   ImagickPixelIteratorException on error.
   */
  <<__Native>>
  function getIteratorRow(): int;

  /**
   * Returns the next row of the pixel iterator
   *
   * @return array - Returns the next row as an array of ImagickPixel
   *   objects, throwing ImagickPixelIteratorException on error.
   */
  <<__Native>>
  function getNextIteratorRow(): array;

  /**
   * Returns the previous row
   *
   * @return array - Returns the previous row as an array of
   *   ImagickPixelWand objects from the ImagickPixelIterator, throwing
   *   ImagickPixelIteratorException on error.
   */
  <<__Native>>
  function getPreviousIteratorRow(): array;

  /**
   * Returns a new pixel iterator
   *
   * @param imagick $wand -
   *
   * @return bool - Throwing ImagickPixelIteratorException.
   */
  <<__Native>>
  function newPixelIterator(Imagick $wand): bool;

  /**
   * Returns a new pixel iterator
   *
   * @param imagick $wand -
   * @param int $x -
   * @param int $y -
   * @param int $columns -
   * @param int $rows -
   *
   * @return bool - Returns a new ImagickPixelIterator on success; on
   *   failure, throws ImagickPixelIteratorException.
   */
  <<__Native>>
  function newPixelRegionIterator(Imagick $wand,
                                  int $x,
                                  int $y,
                                  int $columns,
                                  int $rows): bool;

  /**
   * Resets the pixel iterator
   *
   * @return bool -
   */
  <<__Native>>
  function resetIterator(): bool;

  /**
   * Sets the pixel iterator to the first pixel row
   *
   * @return bool -
   */
  <<__Native>>
  function setIteratorFirstRow(): bool;

  /**
   * Sets the pixel iterator to the last pixel row
   *
   * @return bool -
   */
  <<__Native>>
  function setIteratorLastRow(): bool;

  /**
   * Set the pixel iterator row
   *
   * @param int $row -
   *
   * @return bool -
   */
  <<__Native>>
  function setIteratorRow(int $row): bool;

  /**
   * Syncs the pixel iterator
   *
   * @return bool -
   */
  <<__Native>>
  function syncIterator(): bool;

}

