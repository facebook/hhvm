// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"debug_backtrace", T(Array), S(0), "provide_object", T(Boolean), "b:1;", "true", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.debug-backtrace.php )\n *\n * debug_backtrace() generates a PHP backtrace.\n *\n * @provide_object\n *             bool    Whether or not to populate the \"object\" index.\n *\n * @return     vector  Returns an associative array. The possible returned\n *                     elements are as follows:\n *\n *                     Possible returned elements from debug_backtrace()\n *                     Name Type Description function string The current\n *                     function name. See also __FUNCTION__. line integer\n *                     The current line number. See also __LINE__. file\n *                     string The current file name. See also __FILE__.\n *                     class string The current class name. See also\n *                     __CLASS__ object object The current object. type\n *                     string The current call type. If a method call, \"->\"\n *                     is returned. If a static method call, \"::\" is\n *                     returned. If a function call, nothing is returned.\n *                     args array If inside a function, this lists the\n *                     functions arguments. If inside an included file,\n *                     this lists the included file name(s).\n */", 
"debug_print_backtrace", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.debug-print-backtrace.php )\n *\n * debug_print_backtrace() prints a PHP backtrace. It prints the function\n * calls, included/required files and eval()ed stuff.\n * This function has no parameters.\n *\n * @return     mixed   No value is returned.\n */", 
"error_get_last", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.error-get-last.php )\n *\n * Gets information about the last error that occurred.\n *\n * @return     vector  Returns an associative array describing the last\n *                     error with keys \"type\", \"message\", \"file\" and\n *                     \"line\". Returns NULL if there hasn't been an error\n *                     yet.\n */", 
"error_log", T(Boolean), S(0), "message", T(String), NULL, NULL, S(0), "message_type", T(Int32), "i:0;", "0", S(0), "destination", T(String), "N;", "null", S(0), "extra_headers", T(String), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.error-log.php )\n *\n * Sends an error message to the web server's error log, a TCP port or to\n * a file.\n *\n * @message    string  The error message that should be logged.\n * @message_type\n *             int     Says where the error should go. The possible message\n *                     types are as follows:\n *\n *                     error_log() log types 0 message is sent to PHP's\n *                     system logger, using the Operating System's system\n *                     logging mechanism or a file, depending on what the\n *                     error_log configuration directive is set to. This is\n *                     the default option. 1 message is sent by email to\n *                     the address in the destination parameter. This is\n *                     the only message type where the fourth parameter,\n *                     extra_headers is used. 2 No longer an option. 3\n *                     message is appended to the file destination. A\n *                     newline is not automatically added to the end of the\n *                     message string. 4 message is sent directly to the\n *                     SAPI logging handler.\n * @destination\n *             string  The destination. Its meaning depends on the\n *                     message_type parameter as described above.\n * @extra_headers\n *             string  The extra headers. It's used when the message_type\n *                     parameter is set to 1. This message type uses the\n *                     same internal function as mail() does.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"error_reporting", T(Int32), S(0), "level", T(Variant), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.error-reporting.php )\n *\n * The error_reporting() function sets the error_reporting directive at\n * runtime. PHP has many levels of errors, using this function sets that\n * level for the duration (runtime) of your script. If the optional level\n * is not set, error_reporting() will just return the current error\n * reporting level.\n *\n * @level      mixed   The new error_reporting level. It takes on either a\n *                     bitmask, or named constants. Using named constants\n *                     is strongly encouraged to ensure compatibility for\n *                     future versions. As error levels are added, the\n *                     range of integers increases, so older integer-based\n *                     error levels will not always behave as expected.\n *\n *                     The available error level constants and the actual\n *                     meanings of these error levels are described in the\n *                     predefined constants.\n *\n * @return     int     Returns the old error_reporting level or the current\n *                     level if no level parameter is given.\n */", 
"restore_error_handler", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.restore-error-handler.php )\n *\n * Used after changing the error handler function using\n * set_error_handler(), to revert to the previous error handler (which\n * could be the built-in or a user defined function).\n *\n * @return     bool    This function always returns TRUE.\n */", 
"restore_exception_handler", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.restore-exception-handler.php )\n *\n * Used after changing the exception handler function using\n * set_exception_handler(), to revert to the previous exception handler\n * (which could be the built-in or a user defined function).\n *\n * @return     bool    This function always returns TRUE.\n */", 
"set_error_handler", T(Variant), S(0), "error_handler", T(Variant), NULL, NULL, S(0), "error_types", T(Int32), "i:6143;", "E_ALL", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.set-error-handler.php )\n *\n * Sets a user function (error_handler) to handle errors in a script.\n *\n * This function can be used for defining your own way of handling errors\n * during runtime, for example in applications in which you need to do\n * cleanup of data/files when a critical error happens, or when you need to\n * trigger an error under certain conditions (using trigger_error()).\n *\n * It is important to remember that the standard PHP error handler is\n * completely bypassed for the error types specified by error_types unless\n * the callback function returns FALSE. error_reporting() settings will\n * have no effect and your error handler will be called regardless -\n * however you are still able to read the current value of error_reporting\n * and act appropriately. Of particular note is that this value will be 0\n * if the statement that caused the error was prepended by the @\n * error-control operator.\n *\n * Also note that it is your responsibility to die() if necessary. If the\n * error-handler function returns, script execution will continue with the\n * next statement after the one that caused an error.\n *\n * The following error types cannot be handled with a user defined\n * function: E_ERROR, E_PARSE, E_CORE_ERROR, E_CORE_WARNING,\n * E_COMPILE_ERROR, E_COMPILE_WARNING, and most of E_STRICT raised in the\n * file where set_error_handler() is called.\n *\n * If errors occur before the script is executed (e.g. on file uploads)\n * the custom error handler cannot be called since it is not registered at\n * that time.\n *\n * @error_handler\n *             mixed   The user function needs to accept two parameters:\n *                     the error code, and a string describing the error.\n *                     Then there are three optional parameters that may be\n *                     supplied: the filename in which the error occurred,\n *                     the line number in which the error occurred, and the\n *                     context in which the error occurred (an array that\n *                     points to the active symbol table at the point the\n *                     error occurred). The function can be shown as:\n *\n *                     handler ( int $errno , string $errstr [, string\n *                     $errfile [, int $errline [, array $errcontext ]]] )\n *                     errno The first parameter, errno, contains the level\n *                     of the error raised, as an integer.\n * @error_types\n *             int     The second parameter, errstr, contains the error\n *                     message, as a string.\n *\n * @return     mixed   Returns a string containing the previously defined\n *                     error handler (if any). If the built-in error\n *                     handler is used NULL is returned. NULL is also\n *                     returned in case of an error such as an invalid\n *                     callback. If the previous error handler was a class\n *                     method, this function will return an indexed array\n *                     with the class and the method name.\n */", 
"set_exception_handler", T(String), S(0), "exception_handler", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.set-exception-handler.php )\n *\n * Sets the default exception handler if an exception is not caught within\n * a try/catch block. Execution will stop after the exception_handler is\n * called.\n *\n * @exception_handler\n *             mixed   Name of the function to be called when an uncaught\n *                     exception occurs. This function must be defined\n *                     before calling set_exception_handler(). This handler\n *                     function needs to accept one parameter, which will\n *                     be the exception object that was thrown.\n *\n * @return     string  Returns the name of the previously defined exception\n *                     handler, or NULL on error. If no previous handler\n *                     was defined, NULL is also returned.\n */", 
"hphp_set_error_page", T(Void), S(0), "page", T(String), NULL, NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Displays fatal errors with this PHP document. When 500 fatal error is\n * about to display, it will invoke this PHP page with all global states\n * right at when the error happens. This is useful for gracefully\n * displaying something helpful information to end users when a fatal error\n * has happened. Otherwise, a blank page will be displayed by default.\n *\n * @page       string  Relative path of the PHP document.\n */", 
"hphp_throw_fatal_error", T(Void), S(0), "error_msg", T(String), NULL, NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Raises a fatal error.\n *\n * @error_msg  string  The error message for the fatal.\n */", 
"hphp_clear_unflushed", T(Void), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Clears any output contents that have not been flushed to networked.\n * This is useful when handling a fatal error. Before displaying a\n * customized PHP page, one may call this function to clear previously\n * written content, so to replay what will be displayed.\n *\n */", 
"hphp_debug_caller_info", T(Array), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Retrieves information about the caller that invoked the current\n * function or method\n *\n * @return     vector  Returns an associative array. On success, the array\n *                     will contain two keys 'file' and 'line' which\n *                     indicate the filename and line number of the\n *                     callsite that invoked the current function or\n *                     method.\n */", 
"trigger_error", T(Boolean), S(0), "error_msg", T(String), NULL, NULL, S(0), "error_type", T(Int32), "i:1024;", "E_USER_NOTICE", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.trigger-error.php )\n *\n * Used to trigger a user error condition, it can be used by in\n * conjunction with the built-in error handler, or with a user defined\n * function that has been set as the new error handler\n * (set_error_handler()).\n *\n * This function is useful when you need to generate a particular response\n * to an exception at runtime.\n *\n * @error_msg  string  The designated error message for this error. It's\n *                     limited to 1024 characters in length. Any additional\n *                     characters beyond 1024 will be truncated.\n * @error_type int     The designated error type for this error. It only\n *                     works with the E_USER family of constants, and will\n *                     default to E_USER_NOTICE.\n *\n * @return     bool    This function returns FALSE if wrong error_type is\n *                     specified, TRUE otherwise.\n */", 
"user_error", T(Boolean), S(0), "error_msg", T(String), NULL, NULL, S(0), "error_type", T(Int32), "i:1024;", "E_USER_NOTICE", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.user-error.php )\n *\n *\n * @error_msg  string\n * @error_type int\n *\n * @return     bool\n */", 

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2

#elif EXT_TYPE == 3

#endif
