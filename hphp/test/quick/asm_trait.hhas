.hh_file 1;
#
# Try making some traits
#

.main {
  DefCls 0
  DefCls 1
  DefCls 2
  DefCls 3
  DefCls 4
  DefCls 5
  DefCls 6
  NullUninit
  NullUninit
  NullUninit
  FPushFuncD 0 "main"
  FCall <> 0 1 "" - "" ""
  RetC
}

.class [trait] Frobbable {
  .default_ctor;

  .method [public] frob() {
    String "Frobbed\n"
    Print
    RetC
  }
}

.class UseFrob {
  .use Frobbable;
  .default_ctor;
}

.class AliasFrob {
  .use Frobbable { frob as heh; }
  .default_ctor;
}

.class [trait] PrivateFoo {
  .default_ctor;
  .method [private] foo() {
    String "PrivateFoo::foo()\n"
    Print
    RetC
  }
}

.class Publicize {
  .use PrivateFoo { foo as [public]; }
  .default_ctor;
}

.class [trait] Conflicting {
  .default_ctor;

  .method [public] frob() {
    String "Conflicting::Frobbed\n"
    Print
    RetC
  }
}

.class Resolution {
  .default_ctor;
  .use Conflicting Frobbable {
    Conflicting::frob insteadof Frobbable;
    Frobbable::frob as yo;
  }
}

.function main() {
  NewObjD "UseFrob"
  Dup
  NullUninit
  NullUninit
  FCallCtor <> 0 1 "" - ""
  PopC
  LockObj
  SetL $obj
  PopC

  CGetL $obj
  NullUninit
  NullUninit
  FCallObjMethodD <> 0 1 "" - "" NullThrows "frob"
  PopC

  NewObjD "AliasFrob"
  Dup
  NullUninit
  NullUninit
  FCallCtor <> 0 1 "" - ""
  PopC
  LockObj
  SetL $obj
  PopC

  CGetL $obj
  NullUninit
  NullUninit
  FCallObjMethodD <> 0 1 "" - "" NullThrows "heh"
  PopC

  NewObjD "Publicize"
  Dup
  NullUninit
  NullUninit
  FCallCtor <> 0 1 "" - ""
  PopC
  LockObj
  SetL $obj
  PopC

  CGetL $obj
  NullUninit
  NullUninit
  FCallObjMethodD <> 0 1 "" - "" NullThrows "foo"
  PopC

  NewObjD "Resolution"
  Dup
  NullUninit
  NullUninit
  FCallCtor <> 0 1 "" - ""
  PopC
  LockObj
  SetL $obj
  PopC

  CGetL $obj
  NullUninit
  NullUninit
  FCallObjMethodD <> 0 1 "" - "" NullThrows "frob"
  PopC

  CGetL $obj
  NullUninit
  NullUninit
  FCallObjMethodD <> 0 1 "" - "" NullThrows "yo"
  PopC

  Int 1
  RetC
}
