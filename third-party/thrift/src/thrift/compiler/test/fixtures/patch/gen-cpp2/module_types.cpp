/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/patch/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/patch/gen-cpp2/module_types.h"
#include "thrift/compiler/test/fixtures/patch/gen-cpp2/module_types.tcc"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "thrift/compiler/test/fixtures/patch/gen-cpp2/module_data.h"


namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::test::fixtures::patch::MyEnum>::size;
folly::Range<::test::fixtures::patch::MyEnum const*> const TEnumTraits<::test::fixtures::patch::MyEnum>::values = folly::range(TEnumDataStorage<::test::fixtures::patch::MyEnum>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::test::fixtures::patch::MyEnum>::names = folly::range(TEnumDataStorage<::test::fixtures::patch::MyEnum>::names);

bool TEnumTraits<::test::fixtures::patch::MyEnum>::findName(type value, folly::StringPiece* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::test::fixtures::patch::MyEnum>::findValue(folly::StringPiece name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

}} // apache::thrift

namespace test { namespace fixtures { namespace patch {
#ifndef ANDROID
FOLLY_PUSH_WARNING
FOLLY_GNU_DISABLE_WARNING("-Wdeprecated-declarations")
const _MyEnum_EnumMapFactory::ValuesToNamesMapType _MyEnum_VALUES_TO_NAMES = _MyEnum_EnumMapFactory::makeValuesToNamesMap();
const _MyEnum_EnumMapFactory::NamesToValuesMapType _MyEnum_NAMES_TO_VALUES = _MyEnum_EnumMapFactory::makeNamesToValuesMap();
FOLLY_POP_WARNING
#endif
}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyData>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyData>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyData::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyData";
}

const folly::StringPiece MyData::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyData>::fields_names[folly::to_underlying(ord) - 1];
}

MyData::MyData(const MyData&) = default;
MyData& MyData::operator=(const MyData&) = default;
MyData::MyData(FOLLY_MAYBE_UNUSED MyData&& other) noexcept :
    __fbthrift_field_data1(std::move(other.__fbthrift_field_data1)),
    __fbthrift_field_data2(std::move(other.__fbthrift_field_data2)) {
}

MyData& MyData::operator=(FOLLY_MAYBE_UNUSED MyData&& other) noexcept {
    this->__fbthrift_field_data1 = std::move(other.__fbthrift_field_data1);
    this->__fbthrift_field_data2 = std::move(other.__fbthrift_field_data2);
    return *this;
}


MyData::MyData(apache::thrift::FragileConstructor, ::std::string data1__arg, ::std::int32_t data2__arg) :
    __fbthrift_field_data1(std::move(data1__arg)),
    __fbthrift_field_data2(std::move(data2__arg)) {
}


void MyData::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_data1 = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_data2 = ::std::int32_t();
}

void MyData::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_data1 = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_data2 = ::std::int32_t();
}

bool MyData::__fbthrift_is_empty() const {
  return ::apache::thrift::op::isEmpty<::apache::thrift::type::string_t>(this->__fbthrift_field_data1) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::i32_t>(this->__fbthrift_field_data2);
}

bool MyData::operator==(FOLLY_MAYBE_UNUSED const MyData& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.data1_ref() == rhs.data1_ref())) {
    return false;
  }
  if (!(lhs.data2_ref() == rhs.data2_ref())) {
    return false;
  }
  return true;
}

bool MyData::operator<(FOLLY_MAYBE_UNUSED const MyData& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.data1_ref() == rhs.data1_ref())) {
    return lhs.data1_ref() < rhs.data1_ref();
  }
  if (!(lhs.data2_ref() == rhs.data2_ref())) {
    return lhs.data2_ref() < rhs.data2_ref();
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED MyData& a, FOLLY_MAYBE_UNUSED MyData& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_data1, b.__fbthrift_field_data1);
  swap(a.__fbthrift_field_data2, b.__fbthrift_field_data2);
}

template void MyData::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyData::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyData::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyData::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyData::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyData::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyData::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyData::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::InnerUnion>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::InnerUnion>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::test::fixtures::patch::InnerUnion::Type>::size;
folly::Range<::test::fixtures::patch::InnerUnion::Type const*> const TEnumTraits<::test::fixtures::patch::InnerUnion::Type>::values = folly::range(TEnumDataStorage<::test::fixtures::patch::InnerUnion::Type>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::test::fixtures::patch::InnerUnion::Type>::names = folly::range(TEnumDataStorage<::test::fixtures::patch::InnerUnion::Type>::names);

bool TEnumTraits<::test::fixtures::patch::InnerUnion::Type>::findName(type value, folly::StringPiece* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::test::fixtures::patch::InnerUnion::Type>::findValue(folly::StringPiece name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace test { namespace fixtures { namespace patch {

const char* InnerUnion::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/InnerUnion";
}

const folly::StringPiece InnerUnion::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<InnerUnion>::fields_names[folly::to_underlying(ord) - 1];
}

void InnerUnion::__fbthrift_clear() {
  // clear all fields
  if (getType() == Type::__EMPTY__) { return; }
  switch(getType()) {
    case Type::innerOption:
      destruct(value_.innerOption);
      break;
    default:
      assert(false);
      break;
  }
  type_ = folly::to_underlying(Type::__EMPTY__);
}

bool InnerUnion::__fbthrift_is_empty() const {
  return getType() == Type::__EMPTY__;
}

bool InnerUnion::operator==(const InnerUnion& rhs) const {
  if (getType() != rhs.getType()) { return false; }
  switch(getType()) {
    case Type::innerOption:
      return apache::thrift::StringTraits<std::string>::isEqual(
          value_.innerOption,
          rhs.value_.innerOption);
    default:
      return true;
  }
}

bool InnerUnion::operator<(FOLLY_MAYBE_UNUSED const InnerUnion& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (lhs.getType() != rhs.getType()) {
    return lhs.getType() < rhs.getType();
  }
  switch (lhs.getType()) {
    case Type::innerOption:
    return !apache::thrift::StringTraits<std::string>::isEqual(value_.innerOption, rhs.value_.innerOption) &&
      apache::thrift::StringTraits<std::string>::isLess(value_.innerOption, rhs.value_.innerOption);
    default:
      return false;
  }
}

void swap(InnerUnion& a, InnerUnion& b) {
  InnerUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

template void InnerUnion::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t InnerUnion::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t InnerUnion::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t InnerUnion::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void InnerUnion::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t InnerUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t InnerUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t InnerUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyUnion>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyUnion>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::test::fixtures::patch::MyUnion::Type>::size;
folly::Range<::test::fixtures::patch::MyUnion::Type const*> const TEnumTraits<::test::fixtures::patch::MyUnion::Type>::values = folly::range(TEnumDataStorage<::test::fixtures::patch::MyUnion::Type>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::test::fixtures::patch::MyUnion::Type>::names = folly::range(TEnumDataStorage<::test::fixtures::patch::MyUnion::Type>::names);

bool TEnumTraits<::test::fixtures::patch::MyUnion::Type>::findName(type value, folly::StringPiece* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::test::fixtures::patch::MyUnion::Type>::findValue(folly::StringPiece name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace test { namespace fixtures { namespace patch {

const char* MyUnion::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyUnion";
}

const folly::StringPiece MyUnion::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyUnion>::fields_names[folly::to_underlying(ord) - 1];
}

void MyUnion::__fbthrift_clear() {
  // clear all fields
  if (getType() == Type::__EMPTY__) { return; }
  switch(getType()) {
    case Type::option1:
      destruct(value_.option1);
      break;
    case Type::option2:
      destruct(value_.option2);
      break;
    case Type::option3:
      destruct(value_.option3);
      break;
    default:
      assert(false);
      break;
  }
  type_ = folly::to_underlying(Type::__EMPTY__);
}

bool MyUnion::__fbthrift_is_empty() const {
  return getType() == Type::__EMPTY__;
}

bool MyUnion::operator==(const MyUnion& rhs) const {
  if (getType() != rhs.getType()) { return false; }
  switch(getType()) {
    case Type::option1:
      return value_.option1 == rhs.value_.option1;
    case Type::option2:
      return value_.option2 == rhs.value_.option2;
    case Type::option3:
      return value_.option3 == rhs.value_.option3;
    default:
      return true;
  }
}

bool MyUnion::operator<(FOLLY_MAYBE_UNUSED const MyUnion& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (lhs.getType() != rhs.getType()) {
    return lhs.getType() < rhs.getType();
  }
  switch (lhs.getType()) {
    case Type::option1:
      return lhs.value_.option1 < rhs.value_.option1;
    case Type::option2:
      return lhs.value_.option2 < rhs.value_.option2;
    case Type::option3:
      return lhs.value_.option3 < rhs.value_.option3;
    default:
      return false;
  }
}

void swap(MyUnion& a, MyUnion& b) {
  MyUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

template void MyUnion::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyUnion::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyUnion::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyUnion::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyUnion::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnion,
        ::apache::thrift::type_class::variant,
        ::test::fixtures::patch::InnerUnion>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStruct";
}

const folly::StringPiece MyStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStruct>::fields_names[folly::to_underlying(ord) - 1];
}

MyStruct::MyStruct(const MyStruct&) = default;
MyStruct& MyStruct::operator=(const MyStruct&) = default;
MyStruct::MyStruct() :
      __fbthrift_field_boolVal(),
      __fbthrift_field_byteVal(),
      __fbthrift_field_i16Val(),
      __fbthrift_field_i32Val(),
      __fbthrift_field_i64Val(),
      __fbthrift_field_floatVal(),
      __fbthrift_field_doubleVal(),
      __fbthrift_field_enumVal(),
      __fbthrift_field_optBoolVal(),
      __fbthrift_field_optByteVal(),
      __fbthrift_field_optI16Val(),
      __fbthrift_field_optI32Val(),
      __fbthrift_field_optI64Val(),
      __fbthrift_field_optFloatVal(),
      __fbthrift_field_optDoubleVal(),
      __fbthrift_field_optEnumVal() {
}


MyStruct::~MyStruct() {}

MyStruct::MyStruct(FOLLY_MAYBE_UNUSED MyStruct&& other) noexcept :
    __fbthrift_field_boolVal(std::move(other.__fbthrift_field_boolVal)),
    __fbthrift_field_byteVal(std::move(other.__fbthrift_field_byteVal)),
    __fbthrift_field_i16Val(std::move(other.__fbthrift_field_i16Val)),
    __fbthrift_field_i32Val(std::move(other.__fbthrift_field_i32Val)),
    __fbthrift_field_i64Val(std::move(other.__fbthrift_field_i64Val)),
    __fbthrift_field_floatVal(std::move(other.__fbthrift_field_floatVal)),
    __fbthrift_field_doubleVal(std::move(other.__fbthrift_field_doubleVal)),
    __fbthrift_field_stringVal(std::move(other.__fbthrift_field_stringVal)),
    __fbthrift_field_binaryVal(std::move(other.__fbthrift_field_binaryVal)),
    __fbthrift_field_enumVal(std::move(other.__fbthrift_field_enumVal)),
    __fbthrift_field_structVal(std::move(other.__fbthrift_field_structVal)),
    __fbthrift_field_unionVal(std::move(other.__fbthrift_field_unionVal)),
    __fbthrift_field_lateStructVal(std::move(other.__fbthrift_field_lateStructVal)),
    __fbthrift_field_durationVal(std::move(other.__fbthrift_field_durationVal)),
    __fbthrift_field_timeVal(std::move(other.__fbthrift_field_timeVal)),
    __fbthrift_field_optBoolVal(std::move(other.__fbthrift_field_optBoolVal)),
    __fbthrift_field_optByteVal(std::move(other.__fbthrift_field_optByteVal)),
    __fbthrift_field_optI16Val(std::move(other.__fbthrift_field_optI16Val)),
    __fbthrift_field_optI32Val(std::move(other.__fbthrift_field_optI32Val)),
    __fbthrift_field_optI64Val(std::move(other.__fbthrift_field_optI64Val)),
    __fbthrift_field_optFloatVal(std::move(other.__fbthrift_field_optFloatVal)),
    __fbthrift_field_optDoubleVal(std::move(other.__fbthrift_field_optDoubleVal)),
    __fbthrift_field_optStringVal(std::move(other.__fbthrift_field_optStringVal)),
    __fbthrift_field_optBinaryVal(std::move(other.__fbthrift_field_optBinaryVal)),
    __fbthrift_field_optEnumVal(std::move(other.__fbthrift_field_optEnumVal)),
    __fbthrift_field_optStructVal(std::move(other.__fbthrift_field_optStructVal)),
    __fbthrift_field_optLateStructVal(std::move(other.__fbthrift_field_optLateStructVal)),
    __fbthrift_field_optListVal(std::move(other.__fbthrift_field_optListVal)),
    __fbthrift_field_optSetVal(std::move(other.__fbthrift_field_optSetVal)),
    __fbthrift_field_optMapVal(std::move(other.__fbthrift_field_optMapVal)),
    __fbthrift_field_listMap(std::move(other.__fbthrift_field_listMap)),
    __fbthrift_field_mapMap(std::move(other.__fbthrift_field_mapMap)),
    __isset(other.__isset) {
}

MyStruct& MyStruct::operator=(FOLLY_MAYBE_UNUSED MyStruct&& other) noexcept {
    this->__fbthrift_field_boolVal = std::move(other.__fbthrift_field_boolVal);
    this->__fbthrift_field_byteVal = std::move(other.__fbthrift_field_byteVal);
    this->__fbthrift_field_i16Val = std::move(other.__fbthrift_field_i16Val);
    this->__fbthrift_field_i32Val = std::move(other.__fbthrift_field_i32Val);
    this->__fbthrift_field_i64Val = std::move(other.__fbthrift_field_i64Val);
    this->__fbthrift_field_floatVal = std::move(other.__fbthrift_field_floatVal);
    this->__fbthrift_field_doubleVal = std::move(other.__fbthrift_field_doubleVal);
    this->__fbthrift_field_stringVal = std::move(other.__fbthrift_field_stringVal);
    this->__fbthrift_field_binaryVal = std::move(other.__fbthrift_field_binaryVal);
    this->__fbthrift_field_enumVal = std::move(other.__fbthrift_field_enumVal);
    this->__fbthrift_field_structVal = std::move(other.__fbthrift_field_structVal);
    this->__fbthrift_field_unionVal = std::move(other.__fbthrift_field_unionVal);
    this->__fbthrift_field_lateStructVal = std::move(other.__fbthrift_field_lateStructVal);
    this->__fbthrift_field_durationVal = std::move(other.__fbthrift_field_durationVal);
    this->__fbthrift_field_timeVal = std::move(other.__fbthrift_field_timeVal);
    this->__fbthrift_field_optBoolVal = std::move(other.__fbthrift_field_optBoolVal);
    this->__fbthrift_field_optByteVal = std::move(other.__fbthrift_field_optByteVal);
    this->__fbthrift_field_optI16Val = std::move(other.__fbthrift_field_optI16Val);
    this->__fbthrift_field_optI32Val = std::move(other.__fbthrift_field_optI32Val);
    this->__fbthrift_field_optI64Val = std::move(other.__fbthrift_field_optI64Val);
    this->__fbthrift_field_optFloatVal = std::move(other.__fbthrift_field_optFloatVal);
    this->__fbthrift_field_optDoubleVal = std::move(other.__fbthrift_field_optDoubleVal);
    this->__fbthrift_field_optStringVal = std::move(other.__fbthrift_field_optStringVal);
    this->__fbthrift_field_optBinaryVal = std::move(other.__fbthrift_field_optBinaryVal);
    this->__fbthrift_field_optEnumVal = std::move(other.__fbthrift_field_optEnumVal);
    this->__fbthrift_field_optStructVal = std::move(other.__fbthrift_field_optStructVal);
    this->__fbthrift_field_optLateStructVal = std::move(other.__fbthrift_field_optLateStructVal);
    this->__fbthrift_field_optListVal = std::move(other.__fbthrift_field_optListVal);
    this->__fbthrift_field_optSetVal = std::move(other.__fbthrift_field_optSetVal);
    this->__fbthrift_field_optMapVal = std::move(other.__fbthrift_field_optMapVal);
    this->__fbthrift_field_listMap = std::move(other.__fbthrift_field_listMap);
    this->__fbthrift_field_mapMap = std::move(other.__fbthrift_field_mapMap);
    __isset = other.__isset;
    return *this;
}


MyStruct::MyStruct(apache::thrift::FragileConstructor, bool boolVal__arg, ::std::int8_t byteVal__arg, ::std::int16_t i16Val__arg, ::std::int32_t i32Val__arg, ::std::int64_t i64Val__arg, float floatVal__arg, double doubleVal__arg, ::std::string stringVal__arg, folly::IOBuf binaryVal__arg, ::test::fixtures::patch::MyEnum enumVal__arg, ::test::fixtures::patch::MyData structVal__arg, ::test::fixtures::patch::MyUnion unionVal__arg, ::test::fixtures::patch::LateDefStruct lateStructVal__arg, ::apache::thrift::type::DurationStruct durationVal__arg, ::apache::thrift::type::TimeStruct timeVal__arg, bool optBoolVal__arg, ::std::int8_t optByteVal__arg, ::std::int16_t optI16Val__arg, ::std::int32_t optI32Val__arg, ::std::int64_t optI64Val__arg, float optFloatVal__arg, double optDoubleVal__arg, ::std::string optStringVal__arg, folly::IOBuf optBinaryVal__arg, ::test::fixtures::patch::MyEnum optEnumVal__arg, ::test::fixtures::patch::MyData optStructVal__arg, ::test::fixtures::patch::LateDefStruct optLateStructVal__arg, ::std::vector<::std::int16_t> optListVal__arg, ::std::set<::std::string> optSetVal__arg, ::std::map<::std::string, ::std::string> optMapVal__arg, ::std::vector<::std::map<::std::string, ::std::int32_t>> listMap__arg, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>> mapMap__arg) :
    __fbthrift_field_boolVal(std::move(boolVal__arg)),
    __fbthrift_field_byteVal(std::move(byteVal__arg)),
    __fbthrift_field_i16Val(std::move(i16Val__arg)),
    __fbthrift_field_i32Val(std::move(i32Val__arg)),
    __fbthrift_field_i64Val(std::move(i64Val__arg)),
    __fbthrift_field_floatVal(std::move(floatVal__arg)),
    __fbthrift_field_doubleVal(std::move(doubleVal__arg)),
    __fbthrift_field_stringVal(std::move(stringVal__arg)),
    __fbthrift_field_binaryVal(std::move(binaryVal__arg)),
    __fbthrift_field_enumVal(std::move(enumVal__arg)),
    __fbthrift_field_structVal(std::move(structVal__arg)),
    __fbthrift_field_unionVal(std::move(unionVal__arg)),
    __fbthrift_field_lateStructVal(std::move(lateStructVal__arg)),
    __fbthrift_field_durationVal(std::move(durationVal__arg)),
    __fbthrift_field_timeVal(std::move(timeVal__arg)),
    __fbthrift_field_optBoolVal(std::move(optBoolVal__arg)),
    __fbthrift_field_optByteVal(std::move(optByteVal__arg)),
    __fbthrift_field_optI16Val(std::move(optI16Val__arg)),
    __fbthrift_field_optI32Val(std::move(optI32Val__arg)),
    __fbthrift_field_optI64Val(std::move(optI64Val__arg)),
    __fbthrift_field_optFloatVal(std::move(optFloatVal__arg)),
    __fbthrift_field_optDoubleVal(std::move(optDoubleVal__arg)),
    __fbthrift_field_optStringVal(std::move(optStringVal__arg)),
    __fbthrift_field_optBinaryVal(std::move(optBinaryVal__arg)),
    __fbthrift_field_optEnumVal(std::move(optEnumVal__arg)),
    __fbthrift_field_optStructVal(std::move(optStructVal__arg)),
    __fbthrift_field_optLateStructVal(std::move(optLateStructVal__arg)),
    __fbthrift_field_optListVal(std::move(optListVal__arg)),
    __fbthrift_field_optSetVal(std::move(optSetVal__arg)),
    __fbthrift_field_optMapVal(std::move(optMapVal__arg)),
    __fbthrift_field_listMap(std::move(listMap__arg)),
    __fbthrift_field_mapMap(std::move(mapMap__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
  __isset.set(folly::index_constant<11>(), true);
  __isset.set(folly::index_constant<12>(), true);
  __isset.set(folly::index_constant<13>(), true);
  __isset.set(folly::index_constant<14>(), true);
}


void MyStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_boolVal = bool();
  this->__fbthrift_field_byteVal = ::std::int8_t();
  this->__fbthrift_field_i16Val = ::std::int16_t();
  this->__fbthrift_field_i32Val = ::std::int32_t();
  this->__fbthrift_field_i64Val = ::std::int64_t();
  this->__fbthrift_field_floatVal = float();
  this->__fbthrift_field_doubleVal = double();
  this->__fbthrift_field_stringVal = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_binaryVal = apache::thrift::StringTraits<folly::IOBuf>::fromStringLiteral("");
  this->__fbthrift_field_enumVal = ::test::fixtures::patch::MyEnum();
  ::apache::thrift::clear(this->__fbthrift_field_structVal);
  ::apache::thrift::clear(this->__fbthrift_field_unionVal);
  ::apache::thrift::clear(this->__fbthrift_field_durationVal);
  ::apache::thrift::clear(this->__fbthrift_field_timeVal);
  this->__fbthrift_field_optBoolVal = bool();
  this->__fbthrift_field_optByteVal = ::std::int8_t();
  this->__fbthrift_field_optI16Val = ::std::int16_t();
  this->__fbthrift_field_optI32Val = ::std::int32_t();
  this->__fbthrift_field_optI64Val = ::std::int64_t();
  this->__fbthrift_field_optFloatVal = float();
  this->__fbthrift_field_optDoubleVal = double();
  this->__fbthrift_field_optStringVal = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_optBinaryVal = apache::thrift::StringTraits<folly::IOBuf>::fromStringLiteral("");
  this->__fbthrift_field_optEnumVal = ::test::fixtures::patch::MyEnum();
  ::apache::thrift::clear(this->__fbthrift_field_optStructVal);
  this->__fbthrift_field_optListVal.clear();
  this->__fbthrift_field_optSetVal.clear();
  this->__fbthrift_field_optMapVal.clear();
  this->__fbthrift_field_listMap.clear();
  this->__fbthrift_field_mapMap.clear();
  __isset = {};
}

void MyStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_boolVal = bool();
  this->__fbthrift_field_byteVal = ::std::int8_t();
  this->__fbthrift_field_i16Val = ::std::int16_t();
  this->__fbthrift_field_i32Val = ::std::int32_t();
  this->__fbthrift_field_i64Val = ::std::int64_t();
  this->__fbthrift_field_floatVal = float();
  this->__fbthrift_field_doubleVal = double();
  this->__fbthrift_field_stringVal = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_binaryVal = apache::thrift::StringTraits<folly::IOBuf>::fromStringLiteral("");
  this->__fbthrift_field_enumVal = ::test::fixtures::patch::MyEnum();
  ::apache::thrift::detail::st::clear_terse_fields(this->__fbthrift_field_structVal);
  ::apache::thrift::detail::st::clear_terse_fields(this->__fbthrift_field_unionVal);
  ::apache::thrift::detail::st::clear_terse_fields(this->__fbthrift_field_durationVal);
  ::apache::thrift::detail::st::clear_terse_fields(this->__fbthrift_field_timeVal);
  this->__fbthrift_field_listMap.clear();
  this->__fbthrift_field_mapMap.clear();
}

bool MyStruct::__fbthrift_is_empty() const {
  return ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_boolVal) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::byte_t>(this->__fbthrift_field_byteVal) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::i16_t>(this->__fbthrift_field_i16Val) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::i32_t>(this->__fbthrift_field_i32Val) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::i64_t>(this->__fbthrift_field_i64Val) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::float_t>(this->__fbthrift_field_floatVal) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::double_t>(this->__fbthrift_field_doubleVal) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::string_t>(this->__fbthrift_field_stringVal) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::cpp_type<folly::IOBuf, ::apache::thrift::type::binary_t>>(this->__fbthrift_field_binaryVal) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::enum_t<::test::fixtures::patch::MyEnum>>(this->__fbthrift_field_enumVal) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::struct_t<::test::fixtures::patch::MyData>>(this->__fbthrift_field_structVal) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::union_t<::test::fixtures::patch::MyUnion>>(this->__fbthrift_field_unionVal) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStruct>>(this->__fbthrift_field_lateStructVal) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::struct_t<::apache::thrift::type::DurationStruct>>(this->__fbthrift_field_durationVal) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::struct_t<::apache::thrift::type::TimeStruct>>(this->__fbthrift_field_timeVal) &&
 !(this->__isset.get(0)) &&
 !(this->__isset.get(1)) &&
 !(this->__isset.get(2)) &&
 !(this->__isset.get(3)) &&
 !(this->__isset.get(4)) &&
 !(this->__isset.get(5)) &&
 !(this->__isset.get(6)) &&
 !(this->__isset.get(7)) &&
 !(this->__isset.get(8)) &&
 !(this->__isset.get(9)) &&
 !(this->__isset.get(10)) &&
 !(this->__isset.get(11)) &&
 !(this->__isset.get(12)) &&
 !(this->__isset.get(13)) &&
 !(this->__isset.get(14)) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::list<::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i32_t>>>(this->__fbthrift_field_listMap) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i32_t>>>(this->__fbthrift_field_mapMap);
}

bool MyStruct::operator==(FOLLY_MAYBE_UNUSED const MyStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.boolVal_ref() == rhs.boolVal_ref())) {
    return false;
  }
  if (!(lhs.byteVal_ref() == rhs.byteVal_ref())) {
    return false;
  }
  if (!(lhs.i16Val_ref() == rhs.i16Val_ref())) {
    return false;
  }
  if (!(lhs.i32Val_ref() == rhs.i32Val_ref())) {
    return false;
  }
  if (!(lhs.i64Val_ref() == rhs.i64Val_ref())) {
    return false;
  }
  if (!(lhs.floatVal_ref() == rhs.floatVal_ref())) {
    return false;
  }
  if (!(lhs.doubleVal_ref() == rhs.doubleVal_ref())) {
    return false;
  }
  if (!(lhs.stringVal_ref() == rhs.stringVal_ref())) {
    return false;
  }
  if (!apache::thrift::StringTraits<folly::IOBuf>::isEqual(lhs.__fbthrift_field_binaryVal, rhs.__fbthrift_field_binaryVal)) {
    return false;
  }
  if (!(lhs.enumVal_ref() == rhs.enumVal_ref())) {
    return false;
  }
  if (!(lhs.structVal_ref() == rhs.structVal_ref())) {
    return false;
  }
  if (!(lhs.unionVal_ref() == rhs.unionVal_ref())) {
    return false;
  }
  if (!(lhs.lateStructVal_ref() == rhs.lateStructVal_ref())) {
    return false;
  }
  if (!(lhs.durationVal_ref() == rhs.durationVal_ref())) {
    return false;
  }
  if (!(lhs.timeVal_ref() == rhs.timeVal_ref())) {
    return false;
  }
  if (!(lhs.optBoolVal_ref() == rhs.optBoolVal_ref())) {
    return false;
  }
  if (!(lhs.optByteVal_ref() == rhs.optByteVal_ref())) {
    return false;
  }
  if (!(lhs.optI16Val_ref() == rhs.optI16Val_ref())) {
    return false;
  }
  if (!(lhs.optI32Val_ref() == rhs.optI32Val_ref())) {
    return false;
  }
  if (!(lhs.optI64Val_ref() == rhs.optI64Val_ref())) {
    return false;
  }
  if (!(lhs.optFloatVal_ref() == rhs.optFloatVal_ref())) {
    return false;
  }
  if (!(lhs.optDoubleVal_ref() == rhs.optDoubleVal_ref())) {
    return false;
  }
  if (!(lhs.optStringVal_ref() == rhs.optStringVal_ref())) {
    return false;
  }
  if (lhs.optBinaryVal_ref().has_value() != rhs.optBinaryVal_ref().has_value() || (lhs.optBinaryVal_ref().has_value() && !apache::thrift::StringTraits<folly::IOBuf>::isEqual(lhs.__fbthrift_field_optBinaryVal, rhs.__fbthrift_field_optBinaryVal))) {
    return false;
  }
  if (!(lhs.optEnumVal_ref() == rhs.optEnumVal_ref())) {
    return false;
  }
  if (!(lhs.optStructVal_ref() == rhs.optStructVal_ref())) {
    return false;
  }
  if (!(lhs.optLateStructVal_ref() == rhs.optLateStructVal_ref())) {
    return false;
  }
  if (!(lhs.optListVal_ref() == rhs.optListVal_ref())) {
    return false;
  }
  if (!(lhs.optSetVal_ref() == rhs.optSetVal_ref())) {
    return false;
  }
  if (!(lhs.optMapVal_ref() == rhs.optMapVal_ref())) {
    return false;
  }
  if (!(lhs.listMap_ref() == rhs.listMap_ref())) {
    return false;
  }
  if (!(lhs.mapMap_ref() == rhs.mapMap_ref())) {
    return false;
  }
  return true;
}

bool MyStruct::operator<(FOLLY_MAYBE_UNUSED const MyStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.boolVal_ref() == rhs.boolVal_ref())) {
    return lhs.boolVal_ref() < rhs.boolVal_ref();
  }
  if (!(lhs.byteVal_ref() == rhs.byteVal_ref())) {
    return lhs.byteVal_ref() < rhs.byteVal_ref();
  }
  if (!(lhs.i16Val_ref() == rhs.i16Val_ref())) {
    return lhs.i16Val_ref() < rhs.i16Val_ref();
  }
  if (!(lhs.i32Val_ref() == rhs.i32Val_ref())) {
    return lhs.i32Val_ref() < rhs.i32Val_ref();
  }
  if (!(lhs.i64Val_ref() == rhs.i64Val_ref())) {
    return lhs.i64Val_ref() < rhs.i64Val_ref();
  }
  if (!(lhs.floatVal_ref() == rhs.floatVal_ref())) {
    return lhs.floatVal_ref() < rhs.floatVal_ref();
  }
  if (!(lhs.doubleVal_ref() == rhs.doubleVal_ref())) {
    return lhs.doubleVal_ref() < rhs.doubleVal_ref();
  }
  if (!(lhs.stringVal_ref() == rhs.stringVal_ref())) {
    return lhs.stringVal_ref() < rhs.stringVal_ref();
  }
  if (!apache::thrift::StringTraits<folly::IOBuf>::isEqual(lhs.__fbthrift_field_binaryVal, rhs.__fbthrift_field_binaryVal)) {
    return apache::thrift::StringTraits<folly::IOBuf>::isLess(lhs.__fbthrift_field_binaryVal, rhs.__fbthrift_field_binaryVal);
  }
  if (!(lhs.enumVal_ref() == rhs.enumVal_ref())) {
    return lhs.enumVal_ref() < rhs.enumVal_ref();
  }
  if (!(lhs.structVal_ref() == rhs.structVal_ref())) {
    return lhs.structVal_ref() < rhs.structVal_ref();
  }
  if (!(lhs.unionVal_ref() == rhs.unionVal_ref())) {
    return lhs.unionVal_ref() < rhs.unionVal_ref();
  }
  if (!(lhs.lateStructVal_ref() == rhs.lateStructVal_ref())) {
    return lhs.lateStructVal_ref() < rhs.lateStructVal_ref();
  }
  if (!(lhs.durationVal_ref() == rhs.durationVal_ref())) {
    return lhs.durationVal_ref() < rhs.durationVal_ref();
  }
  if (!(lhs.timeVal_ref() == rhs.timeVal_ref())) {
    return lhs.timeVal_ref() < rhs.timeVal_ref();
  }
  if (!(lhs.optBoolVal_ref() == rhs.optBoolVal_ref())) {
    return lhs.optBoolVal_ref() < rhs.optBoolVal_ref();
  }
  if (!(lhs.optByteVal_ref() == rhs.optByteVal_ref())) {
    return lhs.optByteVal_ref() < rhs.optByteVal_ref();
  }
  if (!(lhs.optI16Val_ref() == rhs.optI16Val_ref())) {
    return lhs.optI16Val_ref() < rhs.optI16Val_ref();
  }
  if (!(lhs.optI32Val_ref() == rhs.optI32Val_ref())) {
    return lhs.optI32Val_ref() < rhs.optI32Val_ref();
  }
  if (!(lhs.optI64Val_ref() == rhs.optI64Val_ref())) {
    return lhs.optI64Val_ref() < rhs.optI64Val_ref();
  }
  if (!(lhs.optFloatVal_ref() == rhs.optFloatVal_ref())) {
    return lhs.optFloatVal_ref() < rhs.optFloatVal_ref();
  }
  if (!(lhs.optDoubleVal_ref() == rhs.optDoubleVal_ref())) {
    return lhs.optDoubleVal_ref() < rhs.optDoubleVal_ref();
  }
  if (!(lhs.optStringVal_ref() == rhs.optStringVal_ref())) {
    return lhs.optStringVal_ref() < rhs.optStringVal_ref();
  }
  if (lhs.optBinaryVal_ref().has_value() != rhs.optBinaryVal_ref().has_value() || (lhs.optBinaryVal_ref().has_value() && !apache::thrift::StringTraits<folly::IOBuf>::isEqual(lhs.__fbthrift_field_optBinaryVal, rhs.__fbthrift_field_optBinaryVal))) {
    return !lhs.optBinaryVal_ref().has_value() || (rhs.optBinaryVal_ref().has_value() && apache::thrift::StringTraits<folly::IOBuf>::isLess(lhs.__fbthrift_field_optBinaryVal, rhs.__fbthrift_field_optBinaryVal));
  }
  if (!(lhs.optEnumVal_ref() == rhs.optEnumVal_ref())) {
    return lhs.optEnumVal_ref() < rhs.optEnumVal_ref();
  }
  if (!(lhs.optStructVal_ref() == rhs.optStructVal_ref())) {
    return lhs.optStructVal_ref() < rhs.optStructVal_ref();
  }
  if (!(lhs.optLateStructVal_ref() == rhs.optLateStructVal_ref())) {
    return lhs.optLateStructVal_ref() < rhs.optLateStructVal_ref();
  }
  if (!(lhs.optListVal_ref() == rhs.optListVal_ref())) {
    return lhs.optListVal_ref() < rhs.optListVal_ref();
  }
  if (!(lhs.optSetVal_ref() == rhs.optSetVal_ref())) {
    return lhs.optSetVal_ref() < rhs.optSetVal_ref();
  }
  if (!(lhs.optMapVal_ref() == rhs.optMapVal_ref())) {
    return lhs.optMapVal_ref() < rhs.optMapVal_ref();
  }
  if (!(lhs.listMap_ref() == rhs.listMap_ref())) {
    return lhs.listMap_ref() < rhs.listMap_ref();
  }
  if (!(lhs.mapMap_ref() == rhs.mapMap_ref())) {
    return lhs.mapMap_ref() < rhs.mapMap_ref();
  }
  return false;
}

const ::test::fixtures::patch::MyData& MyStruct::get_structVal() const& {
  return __fbthrift_field_structVal;
}

::test::fixtures::patch::MyData MyStruct::get_structVal() && {
  return std::move(__fbthrift_field_structVal);
}

const ::test::fixtures::patch::MyUnion& MyStruct::get_unionVal() const& {
  return __fbthrift_field_unionVal;
}

::test::fixtures::patch::MyUnion MyStruct::get_unionVal() && {
  return std::move(__fbthrift_field_unionVal);
}

const ::test::fixtures::patch::LateDefStruct& MyStruct::get_lateStructVal() const& {
  return __fbthrift_field_lateStructVal;
}

::test::fixtures::patch::LateDefStruct MyStruct::get_lateStructVal() && {
  return std::move(__fbthrift_field_lateStructVal);
}

const ::apache::thrift::type::DurationStruct& MyStruct::get_durationVal() const& {
  return __fbthrift_field_durationVal;
}

::apache::thrift::type::DurationStruct MyStruct::get_durationVal() && {
  return std::move(__fbthrift_field_durationVal);
}

const ::apache::thrift::type::TimeStruct& MyStruct::get_timeVal() const& {
  return __fbthrift_field_timeVal;
}

::apache::thrift::type::TimeStruct MyStruct::get_timeVal() && {
  return std::move(__fbthrift_field_timeVal);
}

const ::test::fixtures::patch::MyData* MyStruct::get_optStructVal() const& {
  return optStructVal_ref().has_value() ? std::addressof(__fbthrift_field_optStructVal) : nullptr;
}

::test::fixtures::patch::MyData* MyStruct::get_optStructVal() & {
  return optStructVal_ref().has_value() ? std::addressof(__fbthrift_field_optStructVal) : nullptr;
}

const ::test::fixtures::patch::LateDefStruct* MyStruct::get_optLateStructVal() const& {
  return optLateStructVal_ref().has_value() ? std::addressof(__fbthrift_field_optLateStructVal) : nullptr;
}

::test::fixtures::patch::LateDefStruct* MyStruct::get_optLateStructVal() & {
  return optLateStructVal_ref().has_value() ? std::addressof(__fbthrift_field_optLateStructVal) : nullptr;
}

const ::std::vector<::std::int16_t>* MyStruct::get_optListVal() const& {
  return optListVal_ref().has_value() ? std::addressof(__fbthrift_field_optListVal) : nullptr;
}

::std::vector<::std::int16_t>* MyStruct::get_optListVal() & {
  return optListVal_ref().has_value() ? std::addressof(__fbthrift_field_optListVal) : nullptr;
}

const ::std::set<::std::string>* MyStruct::get_optSetVal() const& {
  return optSetVal_ref().has_value() ? std::addressof(__fbthrift_field_optSetVal) : nullptr;
}

::std::set<::std::string>* MyStruct::get_optSetVal() & {
  return optSetVal_ref().has_value() ? std::addressof(__fbthrift_field_optSetVal) : nullptr;
}

const ::std::map<::std::string, ::std::string>* MyStruct::get_optMapVal() const& {
  return optMapVal_ref().has_value() ? std::addressof(__fbthrift_field_optMapVal) : nullptr;
}

::std::map<::std::string, ::std::string>* MyStruct::get_optMapVal() & {
  return optMapVal_ref().has_value() ? std::addressof(__fbthrift_field_optMapVal) : nullptr;
}

const ::std::vector<::std::map<::std::string, ::std::int32_t>>& MyStruct::get_listMap() const& {
  return __fbthrift_field_listMap;
}

::std::vector<::std::map<::std::string, ::std::int32_t>> MyStruct::get_listMap() && {
  return std::move(__fbthrift_field_listMap);
}

const ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>& MyStruct::get_mapMap() const& {
  return __fbthrift_field_mapMap;
}

::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>> MyStruct::get_mapMap() && {
  return std::move(__fbthrift_field_mapMap);
}


void swap(FOLLY_MAYBE_UNUSED MyStruct& a, FOLLY_MAYBE_UNUSED MyStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_boolVal, b.__fbthrift_field_boolVal);
  swap(a.__fbthrift_field_byteVal, b.__fbthrift_field_byteVal);
  swap(a.__fbthrift_field_i16Val, b.__fbthrift_field_i16Val);
  swap(a.__fbthrift_field_i32Val, b.__fbthrift_field_i32Val);
  swap(a.__fbthrift_field_i64Val, b.__fbthrift_field_i64Val);
  swap(a.__fbthrift_field_floatVal, b.__fbthrift_field_floatVal);
  swap(a.__fbthrift_field_doubleVal, b.__fbthrift_field_doubleVal);
  swap(a.__fbthrift_field_stringVal, b.__fbthrift_field_stringVal);
  swap(a.__fbthrift_field_binaryVal, b.__fbthrift_field_binaryVal);
  swap(a.__fbthrift_field_enumVal, b.__fbthrift_field_enumVal);
  swap(a.__fbthrift_field_structVal, b.__fbthrift_field_structVal);
  swap(a.__fbthrift_field_unionVal, b.__fbthrift_field_unionVal);
  swap(a.__fbthrift_field_lateStructVal, b.__fbthrift_field_lateStructVal);
  swap(a.__fbthrift_field_durationVal, b.__fbthrift_field_durationVal);
  swap(a.__fbthrift_field_timeVal, b.__fbthrift_field_timeVal);
  swap(a.__fbthrift_field_optBoolVal, b.__fbthrift_field_optBoolVal);
  swap(a.__fbthrift_field_optByteVal, b.__fbthrift_field_optByteVal);
  swap(a.__fbthrift_field_optI16Val, b.__fbthrift_field_optI16Val);
  swap(a.__fbthrift_field_optI32Val, b.__fbthrift_field_optI32Val);
  swap(a.__fbthrift_field_optI64Val, b.__fbthrift_field_optI64Val);
  swap(a.__fbthrift_field_optFloatVal, b.__fbthrift_field_optFloatVal);
  swap(a.__fbthrift_field_optDoubleVal, b.__fbthrift_field_optDoubleVal);
  swap(a.__fbthrift_field_optStringVal, b.__fbthrift_field_optStringVal);
  swap(a.__fbthrift_field_optBinaryVal, b.__fbthrift_field_optBinaryVal);
  swap(a.__fbthrift_field_optEnumVal, b.__fbthrift_field_optEnumVal);
  swap(a.__fbthrift_field_optStructVal, b.__fbthrift_field_optStructVal);
  swap(a.__fbthrift_field_optLateStructVal, b.__fbthrift_field_optLateStructVal);
  swap(a.__fbthrift_field_optListVal, b.__fbthrift_field_optListVal);
  swap(a.__fbthrift_field_optSetVal, b.__fbthrift_field_optSetVal);
  swap(a.__fbthrift_field_optMapVal, b.__fbthrift_field_optMapVal);
  swap(a.__fbthrift_field_listMap, b.__fbthrift_field_listMap);
  swap(a.__fbthrift_field_mapMap, b.__fbthrift_field_mapMap);
  swap(a.__isset, b.__isset);
}

template void MyStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyData>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::variant,
        ::test::fixtures::patch::MyUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::LateDefStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::type::DurationStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::type::TimeStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyData>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::LateDefStruct>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::LateDefStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::LateDefStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* LateDefStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/LateDefStruct";
}

const folly::StringPiece LateDefStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<LateDefStruct>::fields_names[folly::to_underlying(ord) - 1];
}


LateDefStruct::LateDefStruct(apache::thrift::FragileConstructor) {}


void LateDefStruct::__fbthrift_clear() {
  // clear all fields
}

void LateDefStruct::__fbthrift_clear_terse_fields() {
}

bool LateDefStruct::__fbthrift_is_empty() const {
  return true;
}

bool LateDefStruct::operator==(FOLLY_MAYBE_UNUSED const LateDefStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  return true;
}

bool LateDefStruct::operator<(FOLLY_MAYBE_UNUSED const LateDefStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  return false;
}


void swap(FOLLY_MAYBE_UNUSED LateDefStruct& a, FOLLY_MAYBE_UNUSED LateDefStruct& b) {
  using ::std::swap;
}

template void LateDefStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t LateDefStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t LateDefStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t LateDefStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void LateDefStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t LateDefStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t LateDefStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t LateDefStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::Recursive>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::Recursive>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* Recursive::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/Recursive";
}

const folly::StringPiece Recursive::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Recursive>::fields_names[folly::to_underlying(ord) - 1];
}

Recursive::Recursive(const Recursive&) = default;
Recursive& Recursive::operator=(const Recursive&) = default;
Recursive::Recursive(FOLLY_MAYBE_UNUSED Recursive&& other) noexcept :
    __fbthrift_field_nodes(std::move(other.__fbthrift_field_nodes)) {
}

Recursive& Recursive::operator=(FOLLY_MAYBE_UNUSED Recursive&& other) noexcept {
    this->__fbthrift_field_nodes = std::move(other.__fbthrift_field_nodes);
    return *this;
}


Recursive::Recursive(apache::thrift::FragileConstructor, ::std::map<::std::string, ::test::fixtures::patch::Recursive> nodes__arg) :
    __fbthrift_field_nodes(std::move(nodes__arg)) {
}


void Recursive::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_nodes.clear();
}

void Recursive::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_nodes.clear();
}

bool Recursive::__fbthrift_is_empty() const {
  return ::apache::thrift::op::isEmpty<::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::test::fixtures::patch::Recursive>>>(this->__fbthrift_field_nodes);
}

bool Recursive::operator==(FOLLY_MAYBE_UNUSED const Recursive& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.nodes_ref() == rhs.nodes_ref())) {
    return false;
  }
  return true;
}

bool Recursive::operator<(FOLLY_MAYBE_UNUSED const Recursive& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.nodes_ref() == rhs.nodes_ref())) {
    return lhs.nodes_ref() < rhs.nodes_ref();
  }
  return false;
}

const ::std::map<::std::string, ::test::fixtures::patch::Recursive>& Recursive::get_nodes() const& {
  return __fbthrift_field_nodes;
}

::std::map<::std::string, ::test::fixtures::patch::Recursive> Recursive::get_nodes() && {
  return std::move(__fbthrift_field_nodes);
}


void swap(FOLLY_MAYBE_UNUSED Recursive& a, FOLLY_MAYBE_UNUSED Recursive& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_nodes, b.__fbthrift_field_nodes);
}

template void Recursive::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Recursive::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Recursive::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Recursive::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void Recursive::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Recursive::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Recursive::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Recursive::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::Bar>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::Bar>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* Bar::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/Bar";
}

const folly::StringPiece Bar::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Bar>::fields_names[folly::to_underlying(ord) - 1];
}

Bar::Bar(const Bar& srcObj) :
    __fbthrift_field_loop(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::structure>(srcObj.__fbthrift_field_loop)) {
}

Bar& Bar::operator=(const Bar& other) {
  Bar tmp(other);
  swap(*this, tmp);
  return *this;
}

Bar::Bar(FOLLY_MAYBE_UNUSED Bar&& other) noexcept :
    __fbthrift_field_loop(std::move(other.__fbthrift_field_loop)) {
}

Bar& Bar::operator=(FOLLY_MAYBE_UNUSED Bar&& other) noexcept {
    this->__fbthrift_field_loop = std::move(other.__fbthrift_field_loop);
    return *this;
}


Bar::Bar(apache::thrift::FragileConstructor, ::std::unique_ptr<::test::fixtures::patch::Loop> loop__arg) :
    __fbthrift_field_loop(std::move(loop__arg)) {
}


void Bar::__fbthrift_clear() {
  // clear all fields
  if (this->__fbthrift_field_loop) ::apache::thrift::clear(*this->__fbthrift_field_loop);
}

void Bar::__fbthrift_clear_terse_fields() {
  if (this->__fbthrift_field_loop) ::apache::thrift::detail::st::clear_terse_fields(*this->__fbthrift_field_loop);
}

bool Bar::__fbthrift_is_empty() const {
  return this->__fbthrift_field_loop && ::apache::thrift::op::isEmpty<::apache::thrift::type::struct_t<::test::fixtures::patch::Loop>>(*this->__fbthrift_field_loop);
}

bool Bar::operator==(FOLLY_MAYBE_UNUSED const Bar& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if ((!::apache::thrift::detail::pointer_equal(lhs.loop_ref(), rhs.loop_ref()))) {
    return false;
  }
  return true;
}

bool Bar::operator<(FOLLY_MAYBE_UNUSED const Bar& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if ((!::apache::thrift::detail::pointer_equal(lhs.loop_ref(), rhs.loop_ref()))) {
    return ::apache::thrift::detail::pointer_less(lhs.loop_ref(), rhs.loop_ref());
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED Bar& a, FOLLY_MAYBE_UNUSED Bar& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_loop, b.__fbthrift_field_loop);
}

template void Bar::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Bar::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Bar::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Bar::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void Bar::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Bar::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Bar::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Bar::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Bar,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::Loop>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::Loop>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::Loop>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* Loop::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/Loop";
}

const folly::StringPiece Loop::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Loop>::fields_names[folly::to_underlying(ord) - 1];
}

Loop::Loop(const Loop&) = default;
Loop& Loop::operator=(const Loop&) = default;
Loop::Loop(FOLLY_MAYBE_UNUSED Loop&& other) noexcept :
    __fbthrift_field_bar(std::move(other.__fbthrift_field_bar)) {
}

Loop& Loop::operator=(FOLLY_MAYBE_UNUSED Loop&& other) noexcept {
    this->__fbthrift_field_bar = std::move(other.__fbthrift_field_bar);
    return *this;
}


Loop::Loop(apache::thrift::FragileConstructor, ::test::fixtures::patch::Bar bar__arg) :
    __fbthrift_field_bar(std::move(bar__arg)) {
}


void Loop::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::clear(this->__fbthrift_field_bar);
}

void Loop::__fbthrift_clear_terse_fields() {
  ::apache::thrift::detail::st::clear_terse_fields(this->__fbthrift_field_bar);
}

bool Loop::__fbthrift_is_empty() const {
  return ::apache::thrift::op::isEmpty<::apache::thrift::type::struct_t<::test::fixtures::patch::Bar>>(this->__fbthrift_field_bar);
}

bool Loop::operator==(FOLLY_MAYBE_UNUSED const Loop& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.bar_ref() == rhs.bar_ref())) {
    return false;
  }
  return true;
}

bool Loop::operator<(FOLLY_MAYBE_UNUSED const Loop& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.bar_ref() == rhs.bar_ref())) {
    return lhs.bar_ref() < rhs.bar_ref();
  }
  return false;
}

const ::test::fixtures::patch::Bar& Loop::get_bar() const& {
  return __fbthrift_field_bar;
}

::test::fixtures::patch::Bar Loop::get_bar() && {
  return std::move(__fbthrift_field_bar);
}


void swap(FOLLY_MAYBE_UNUSED Loop& a, FOLLY_MAYBE_UNUSED Loop& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_bar, b.__fbthrift_field_bar);
}

template void Loop::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Loop::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Loop::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Loop::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void Loop::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Loop::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Loop::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Loop::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Loop,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::Bar>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyDataFieldPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyDataFieldPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyDataFieldPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyDataFieldPatch";
}

const folly::StringPiece MyDataFieldPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyDataFieldPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

MyDataFieldPatchStruct::MyDataFieldPatchStruct(const MyDataFieldPatchStruct& srcObj) :
    __fbthrift_field_data1(srcObj.__fbthrift_field_data1),
    __fbthrift_field_data2(srcObj.__fbthrift_field_data2),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, 1>(__fbthrift_field_data1, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_data2, *this);
}

MyDataFieldPatchStruct& MyDataFieldPatchStruct::operator=(const MyDataFieldPatchStruct& other) {
  MyDataFieldPatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

MyDataFieldPatchStruct::MyDataFieldPatchStruct(FOLLY_MAYBE_UNUSED MyDataFieldPatchStruct&& other) noexcept :
    __fbthrift_field_data1(std::move(other.__fbthrift_field_data1)),
    __fbthrift_field_data2(std::move(other.__fbthrift_field_data2)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, 1>(__fbthrift_field_data1, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_data2, *this);
}

MyDataFieldPatchStruct& MyDataFieldPatchStruct::operator=(FOLLY_MAYBE_UNUSED MyDataFieldPatchStruct&& other) noexcept {
    this->__fbthrift_field_data1 = std::move(other.__fbthrift_field_data1);
    this->__fbthrift_field_data2 = std::move(other.__fbthrift_field_data2);
    __isset = other.__isset;
    return *this;
}


MyDataFieldPatchStruct::MyDataFieldPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::op::StringPatch data1__arg, ::apache::thrift::op::I32Patch data2__arg) :
    __fbthrift_field_data1(std::move(data1__arg)),
    __fbthrift_field_data2(std::move(data2__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, 1>(__fbthrift_field_data1, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_data2, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}


void MyDataFieldPatchStruct::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::StringPatchAdapter, 1>(__fbthrift_field_data1, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_data2, *this);
  __isset = {};
}

void MyDataFieldPatchStruct::__fbthrift_clear_terse_fields() {
}

bool MyDataFieldPatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyDataFieldPatchStruct::operator==(FOLLY_MAYBE_UNUSED const MyDataFieldPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StringPatchAdapter>(lhs.__fbthrift_field_data1, rhs.__fbthrift_field_data1)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_data2, rhs.__fbthrift_field_data2)) {
    return false;
  }
  return true;
}

bool MyDataFieldPatchStruct::operator<(FOLLY_MAYBE_UNUSED const MyDataFieldPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StringPatchAdapter>(lhs.__fbthrift_field_data1, rhs.__fbthrift_field_data1)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::StringPatchAdapter>(lhs.__fbthrift_field_data1, rhs.__fbthrift_field_data1);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_data2, rhs.__fbthrift_field_data2)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_data2, rhs.__fbthrift_field_data2);
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED MyDataFieldPatchStruct& a, FOLLY_MAYBE_UNUSED MyDataFieldPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_data1, b.__fbthrift_field_data1);
  swap(a.__fbthrift_field_data2, b.__fbthrift_field_data2);
  swap(a.__isset, b.__isset);
}

template void MyDataFieldPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyDataFieldPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyDataFieldPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyDataFieldPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyDataFieldPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyDataFieldPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyDataFieldPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyDataFieldPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::StringPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::I32Patch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyDataPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyDataPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyDataPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyDataPatch";
}

const folly::StringPiece MyDataPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyDataPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

MyDataPatchStruct::MyDataPatchStruct(const MyDataPatchStruct& srcObj) :
    __fbthrift_field_assign(srcObj.__fbthrift_field_assign),
    __fbthrift_field_clear(srcObj.__fbthrift_field_clear),
    __fbthrift_field_patchPrior(srcObj.__fbthrift_field_patchPrior),
    __fbthrift_field_ensure(srcObj.__fbthrift_field_ensure),
    __fbthrift_field_patch(srcObj.__fbthrift_field_patch),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

MyDataPatchStruct& MyDataPatchStruct::operator=(const MyDataPatchStruct& other) {
  MyDataPatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

MyDataPatchStruct::MyDataPatchStruct() :
      __fbthrift_field_clear() {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
}


MyDataPatchStruct::~MyDataPatchStruct() {}

MyDataPatchStruct::MyDataPatchStruct(FOLLY_MAYBE_UNUSED MyDataPatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

MyDataPatchStruct& MyDataPatchStruct::operator=(FOLLY_MAYBE_UNUSED MyDataPatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    __isset = other.__isset;
    return *this;
}


MyDataPatchStruct::MyDataPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData> assign__arg, bool clear__arg, ::test::fixtures::patch::MyDataFieldPatch patchPrior__arg, ::test::fixtures::patch::MyData ensure__arg, ::test::fixtures::patch::MyDataFieldPatch patch__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patch(std::move(patch__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void MyDataPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.reset();
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::clear(this->__fbthrift_field_ensure);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset = {};
}

void MyDataPatchStruct::__fbthrift_clear_terse_fields() {
}

bool MyDataPatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyDataPatchStruct::operator==(FOLLY_MAYBE_UNUSED const MyDataPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if ((!::apache::thrift::detail::pointer_equal(lhs.assign_ref(), rhs.assign_ref()))) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return false;
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return false;
  }
  return true;
}

bool MyDataPatchStruct::operator<(FOLLY_MAYBE_UNUSED const MyDataPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if ((!::apache::thrift::detail::pointer_equal(lhs.assign_ref(), rhs.assign_ref()))) {
    return ::apache::thrift::detail::pointer_less(lhs.assign_ref(), rhs.assign_ref());
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior);
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return lhs.ensure_ref() < rhs.ensure_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch);
  }
  return false;
}

const ::test::fixtures::patch::MyData& MyDataPatchStruct::get_ensure() const& {
  return __fbthrift_field_ensure;
}

::test::fixtures::patch::MyData MyDataPatchStruct::get_ensure() && {
  return std::move(__fbthrift_field_ensure);
}


void swap(FOLLY_MAYBE_UNUSED MyDataPatchStruct& a, FOLLY_MAYBE_UNUSED MyDataPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__isset, b.__isset);
}

template void MyDataPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyDataPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyDataPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyDataPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyDataPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyDataPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyDataPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyDataPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyData>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyDataFieldPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyData>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyDataFieldPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::InnerUnionFieldPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::InnerUnionFieldPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* InnerUnionFieldPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/InnerUnionFieldPatch";
}

const folly::StringPiece InnerUnionFieldPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<InnerUnionFieldPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

InnerUnionFieldPatchStruct::InnerUnionFieldPatchStruct(const InnerUnionFieldPatchStruct& srcObj) :
    __fbthrift_field_innerOption(srcObj.__fbthrift_field_innerOption),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BinaryPatchAdapter, 1>(__fbthrift_field_innerOption, *this);
}

InnerUnionFieldPatchStruct& InnerUnionFieldPatchStruct::operator=(const InnerUnionFieldPatchStruct& other) {
  InnerUnionFieldPatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

InnerUnionFieldPatchStruct::InnerUnionFieldPatchStruct(FOLLY_MAYBE_UNUSED InnerUnionFieldPatchStruct&& other) noexcept :
    __fbthrift_field_innerOption(std::move(other.__fbthrift_field_innerOption)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BinaryPatchAdapter, 1>(__fbthrift_field_innerOption, *this);
}

InnerUnionFieldPatchStruct& InnerUnionFieldPatchStruct::operator=(FOLLY_MAYBE_UNUSED InnerUnionFieldPatchStruct&& other) noexcept {
    this->__fbthrift_field_innerOption = std::move(other.__fbthrift_field_innerOption);
    __isset = other.__isset;
    return *this;
}


InnerUnionFieldPatchStruct::InnerUnionFieldPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::op::BinaryPatch innerOption__arg) :
    __fbthrift_field_innerOption(std::move(innerOption__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BinaryPatchAdapter, 1>(__fbthrift_field_innerOption, *this);
  __isset.set(folly::index_constant<0>(), true);
}


void InnerUnionFieldPatchStruct::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::BinaryPatchAdapter, 1>(__fbthrift_field_innerOption, *this);
  __isset = {};
}

void InnerUnionFieldPatchStruct::__fbthrift_clear_terse_fields() {
}

bool InnerUnionFieldPatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool InnerUnionFieldPatchStruct::operator==(FOLLY_MAYBE_UNUSED const InnerUnionFieldPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::BinaryPatchAdapter>(lhs.__fbthrift_field_innerOption, rhs.__fbthrift_field_innerOption)) {
    return false;
  }
  return true;
}

bool InnerUnionFieldPatchStruct::operator<(FOLLY_MAYBE_UNUSED const InnerUnionFieldPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::BinaryPatchAdapter>(lhs.__fbthrift_field_innerOption, rhs.__fbthrift_field_innerOption)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::BinaryPatchAdapter>(lhs.__fbthrift_field_innerOption, rhs.__fbthrift_field_innerOption);
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED InnerUnionFieldPatchStruct& a, FOLLY_MAYBE_UNUSED InnerUnionFieldPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_innerOption, b.__fbthrift_field_innerOption);
  swap(a.__isset, b.__isset);
}

template void InnerUnionFieldPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t InnerUnionFieldPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t InnerUnionFieldPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t InnerUnionFieldPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void InnerUnionFieldPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t InnerUnionFieldPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t InnerUnionFieldPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t InnerUnionFieldPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        InnerUnionFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::BinaryPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::InnerUnionPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::InnerUnionPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* InnerUnionPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/InnerUnionPatch";
}

const folly::StringPiece InnerUnionPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<InnerUnionPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

InnerUnionPatchStruct::InnerUnionPatchStruct(const InnerUnionPatchStruct& srcObj) :
    __fbthrift_field_assign(srcObj.__fbthrift_field_assign),
    __fbthrift_field_clear(srcObj.__fbthrift_field_clear),
    __fbthrift_field_patchPrior(srcObj.__fbthrift_field_patchPrior),
    __fbthrift_field_ensure(srcObj.__fbthrift_field_ensure),
    __fbthrift_field_patch(srcObj.__fbthrift_field_patch),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

InnerUnionPatchStruct& InnerUnionPatchStruct::operator=(const InnerUnionPatchStruct& other) {
  InnerUnionPatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

InnerUnionPatchStruct::InnerUnionPatchStruct() :
      __fbthrift_field_clear() {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
}


InnerUnionPatchStruct::~InnerUnionPatchStruct() {}

InnerUnionPatchStruct::InnerUnionPatchStruct(FOLLY_MAYBE_UNUSED InnerUnionPatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

InnerUnionPatchStruct& InnerUnionPatchStruct::operator=(FOLLY_MAYBE_UNUSED InnerUnionPatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    __isset = other.__isset;
    return *this;
}


InnerUnionPatchStruct::InnerUnionPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::InnerUnion> assign__arg, bool clear__arg, ::test::fixtures::patch::InnerUnionFieldPatch patchPrior__arg, ::test::fixtures::patch::InnerUnion ensure__arg, ::test::fixtures::patch::InnerUnionFieldPatch patch__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patch(std::move(patch__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void InnerUnionPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.reset();
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::clear(this->__fbthrift_field_ensure);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset = {};
}

void InnerUnionPatchStruct::__fbthrift_clear_terse_fields() {
}

bool InnerUnionPatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool InnerUnionPatchStruct::operator==(FOLLY_MAYBE_UNUSED const InnerUnionPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if ((!::apache::thrift::detail::pointer_equal(lhs.assign_ref(), rhs.assign_ref()))) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return false;
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return false;
  }
  return true;
}

bool InnerUnionPatchStruct::operator<(FOLLY_MAYBE_UNUSED const InnerUnionPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if ((!::apache::thrift::detail::pointer_equal(lhs.assign_ref(), rhs.assign_ref()))) {
    return ::apache::thrift::detail::pointer_less(lhs.assign_ref(), rhs.assign_ref());
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior);
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return lhs.ensure_ref() < rhs.ensure_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch);
  }
  return false;
}

const ::test::fixtures::patch::InnerUnion& InnerUnionPatchStruct::get_ensure() const& {
  return __fbthrift_field_ensure;
}

::test::fixtures::patch::InnerUnion InnerUnionPatchStruct::get_ensure() && {
  return std::move(__fbthrift_field_ensure);
}


void swap(FOLLY_MAYBE_UNUSED InnerUnionPatchStruct& a, FOLLY_MAYBE_UNUSED InnerUnionPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__isset, b.__isset);
}

template void InnerUnionPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t InnerUnionPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t InnerUnionPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t InnerUnionPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void InnerUnionPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t InnerUnionPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t InnerUnionPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t InnerUnionPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        InnerUnionPatchStruct,
        ::apache::thrift::type_class::variant,
        ::test::fixtures::patch::InnerUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        InnerUnionPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::InnerUnionFieldPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        InnerUnionPatchStruct,
        ::apache::thrift::type_class::variant,
        ::test::fixtures::patch::InnerUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        InnerUnionPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::InnerUnionFieldPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyUnionFieldPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyUnionFieldPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyUnionFieldPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyUnionFieldPatch";
}

const folly::StringPiece MyUnionFieldPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyUnionFieldPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

MyUnionFieldPatchStruct::MyUnionFieldPatchStruct(const MyUnionFieldPatchStruct& srcObj) :
    __fbthrift_field_option1(srcObj.__fbthrift_field_option1),
    __fbthrift_field_option2(srcObj.__fbthrift_field_option2),
    __fbthrift_field_option3(srcObj.__fbthrift_field_option3),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, 1>(__fbthrift_field_option1, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_option2, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 3>(__fbthrift_field_option3, *this);
}

MyUnionFieldPatchStruct& MyUnionFieldPatchStruct::operator=(const MyUnionFieldPatchStruct& other) {
  MyUnionFieldPatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

MyUnionFieldPatchStruct::MyUnionFieldPatchStruct(FOLLY_MAYBE_UNUSED MyUnionFieldPatchStruct&& other) noexcept :
    __fbthrift_field_option1(std::move(other.__fbthrift_field_option1)),
    __fbthrift_field_option2(std::move(other.__fbthrift_field_option2)),
    __fbthrift_field_option3(std::move(other.__fbthrift_field_option3)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, 1>(__fbthrift_field_option1, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_option2, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 3>(__fbthrift_field_option3, *this);
}

MyUnionFieldPatchStruct& MyUnionFieldPatchStruct::operator=(FOLLY_MAYBE_UNUSED MyUnionFieldPatchStruct&& other) noexcept {
    this->__fbthrift_field_option1 = std::move(other.__fbthrift_field_option1);
    this->__fbthrift_field_option2 = std::move(other.__fbthrift_field_option2);
    this->__fbthrift_field_option3 = std::move(other.__fbthrift_field_option3);
    __isset = other.__isset;
    return *this;
}


MyUnionFieldPatchStruct::MyUnionFieldPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::op::StringPatch option1__arg, ::apache::thrift::op::I32Patch option2__arg, ::test::fixtures::patch::InnerUnionPatch option3__arg) :
    __fbthrift_field_option1(std::move(option1__arg)),
    __fbthrift_field_option2(std::move(option2__arg)),
    __fbthrift_field_option3(std::move(option3__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, 1>(__fbthrift_field_option1, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_option2, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 3>(__fbthrift_field_option3, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
}


void MyUnionFieldPatchStruct::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::StringPatchAdapter, 1>(__fbthrift_field_option1, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_option2, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::UnionPatchAdapter, 3>(__fbthrift_field_option3, *this);
  __isset = {};
}

void MyUnionFieldPatchStruct::__fbthrift_clear_terse_fields() {
}

bool MyUnionFieldPatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyUnionFieldPatchStruct::operator==(FOLLY_MAYBE_UNUSED const MyUnionFieldPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StringPatchAdapter>(lhs.__fbthrift_field_option1, rhs.__fbthrift_field_option1)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_option2, rhs.__fbthrift_field_option2)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_option3, rhs.__fbthrift_field_option3)) {
    return false;
  }
  return true;
}

bool MyUnionFieldPatchStruct::operator<(FOLLY_MAYBE_UNUSED const MyUnionFieldPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StringPatchAdapter>(lhs.__fbthrift_field_option1, rhs.__fbthrift_field_option1)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::StringPatchAdapter>(lhs.__fbthrift_field_option1, rhs.__fbthrift_field_option1);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_option2, rhs.__fbthrift_field_option2)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_option2, rhs.__fbthrift_field_option2);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_option3, rhs.__fbthrift_field_option3)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_option3, rhs.__fbthrift_field_option3);
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED MyUnionFieldPatchStruct& a, FOLLY_MAYBE_UNUSED MyUnionFieldPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_option1, b.__fbthrift_field_option1);
  swap(a.__fbthrift_field_option2, b.__fbthrift_field_option2);
  swap(a.__fbthrift_field_option3, b.__fbthrift_field_option3);
  swap(a.__isset, b.__isset);
}

template void MyUnionFieldPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyUnionFieldPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyUnionFieldPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyUnionFieldPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyUnionFieldPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyUnionFieldPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyUnionFieldPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyUnionFieldPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnionFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::StringPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnionFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::I32Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnionFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::InnerUnionPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyUnionPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyUnionPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyUnionPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyUnionPatch";
}

const folly::StringPiece MyUnionPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyUnionPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

MyUnionPatchStruct::MyUnionPatchStruct(const MyUnionPatchStruct& srcObj) :
    __fbthrift_field_assign(srcObj.__fbthrift_field_assign),
    __fbthrift_field_clear(srcObj.__fbthrift_field_clear),
    __fbthrift_field_patchPrior(srcObj.__fbthrift_field_patchPrior),
    __fbthrift_field_ensure(srcObj.__fbthrift_field_ensure),
    __fbthrift_field_patch(srcObj.__fbthrift_field_patch),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

MyUnionPatchStruct& MyUnionPatchStruct::operator=(const MyUnionPatchStruct& other) {
  MyUnionPatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

MyUnionPatchStruct::MyUnionPatchStruct() :
      __fbthrift_field_clear() {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
}


MyUnionPatchStruct::~MyUnionPatchStruct() {}

MyUnionPatchStruct::MyUnionPatchStruct(FOLLY_MAYBE_UNUSED MyUnionPatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

MyUnionPatchStruct& MyUnionPatchStruct::operator=(FOLLY_MAYBE_UNUSED MyUnionPatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    __isset = other.__isset;
    return *this;
}


MyUnionPatchStruct::MyUnionPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion> assign__arg, bool clear__arg, ::test::fixtures::patch::MyUnionFieldPatch patchPrior__arg, ::test::fixtures::patch::MyUnion ensure__arg, ::test::fixtures::patch::MyUnionFieldPatch patch__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patch(std::move(patch__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void MyUnionPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.reset();
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::clear(this->__fbthrift_field_ensure);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset = {};
}

void MyUnionPatchStruct::__fbthrift_clear_terse_fields() {
}

bool MyUnionPatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyUnionPatchStruct::operator==(FOLLY_MAYBE_UNUSED const MyUnionPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if ((!::apache::thrift::detail::pointer_equal(lhs.assign_ref(), rhs.assign_ref()))) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return false;
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return false;
  }
  return true;
}

bool MyUnionPatchStruct::operator<(FOLLY_MAYBE_UNUSED const MyUnionPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if ((!::apache::thrift::detail::pointer_equal(lhs.assign_ref(), rhs.assign_ref()))) {
    return ::apache::thrift::detail::pointer_less(lhs.assign_ref(), rhs.assign_ref());
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior);
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return lhs.ensure_ref() < rhs.ensure_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch);
  }
  return false;
}

const ::test::fixtures::patch::MyUnion& MyUnionPatchStruct::get_ensure() const& {
  return __fbthrift_field_ensure;
}

::test::fixtures::patch::MyUnion MyUnionPatchStruct::get_ensure() && {
  return std::move(__fbthrift_field_ensure);
}


void swap(FOLLY_MAYBE_UNUSED MyUnionPatchStruct& a, FOLLY_MAYBE_UNUSED MyUnionPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__isset, b.__isset);
}

template void MyUnionPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyUnionPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyUnionPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyUnionPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyUnionPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyUnionPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyUnionPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyUnionPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnionPatchStruct,
        ::apache::thrift::type_class::variant,
        ::test::fixtures::patch::MyUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnionPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyUnionFieldPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnionPatchStruct,
        ::apache::thrift::type_class::variant,
        ::test::fixtures::patch::MyUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnionPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyUnionFieldPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructField10PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructField10PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructField10PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructField10Patch";
}

const folly::StringPiece MyStructField10PatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructField10PatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}


MyStructField10PatchStruct::MyStructField10PatchStruct(apache::thrift::FragileConstructor, ::test::fixtures::patch::MyEnum assign__arg, bool clear__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}


void MyStructField10PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign = ::test::fixtures::patch::MyEnum();
  this->__fbthrift_field_clear = bool();
  __isset = {};
}

void MyStructField10PatchStruct::__fbthrift_clear_terse_fields() {
}

bool MyStructField10PatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyStructField10PatchStruct::operator==(FOLLY_MAYBE_UNUSED const MyStructField10PatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  return true;
}

bool MyStructField10PatchStruct::operator<(FOLLY_MAYBE_UNUSED const MyStructField10PatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return lhs.assign_ref() < rhs.assign_ref();
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED MyStructField10PatchStruct& a, FOLLY_MAYBE_UNUSED MyStructField10PatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__isset, b.__isset);
}

template void MyStructField10PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructField10PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructField10PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructField10PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructField10PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructField10PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructField10PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructField10PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructField25PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructField25PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructField25PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructField25Patch";
}

const folly::StringPiece MyStructField25PatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructField25PatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}


MyStructField25PatchStruct::MyStructField25PatchStruct(apache::thrift::FragileConstructor, ::test::fixtures::patch::MyEnum assign__arg, bool clear__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}


void MyStructField25PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign = ::test::fixtures::patch::MyEnum();
  this->__fbthrift_field_clear = bool();
  __isset = {};
}

void MyStructField25PatchStruct::__fbthrift_clear_terse_fields() {
}

bool MyStructField25PatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyStructField25PatchStruct::operator==(FOLLY_MAYBE_UNUSED const MyStructField25PatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  return true;
}

bool MyStructField25PatchStruct::operator<(FOLLY_MAYBE_UNUSED const MyStructField25PatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return lhs.assign_ref() < rhs.assign_ref();
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED MyStructField25PatchStruct& a, FOLLY_MAYBE_UNUSED MyStructField25PatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__isset, b.__isset);
}

template void MyStructField25PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructField25PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructField25PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructField25PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructField25PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructField25PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructField25PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructField25PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructField28PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructField28PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructField28PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructField28Patch";
}

const folly::StringPiece MyStructField28PatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructField28PatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

MyStructField28PatchStruct::MyStructField28PatchStruct(const MyStructField28PatchStruct&) = default;
MyStructField28PatchStruct& MyStructField28PatchStruct::operator=(const MyStructField28PatchStruct&) = default;
MyStructField28PatchStruct::MyStructField28PatchStruct() :
      __fbthrift_field_clear() {
}


MyStructField28PatchStruct::~MyStructField28PatchStruct() {}

MyStructField28PatchStruct::MyStructField28PatchStruct(FOLLY_MAYBE_UNUSED MyStructField28PatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __fbthrift_field_remove(std::move(other.__fbthrift_field_remove)),
    __fbthrift_field_prepend(std::move(other.__fbthrift_field_prepend)),
    __fbthrift_field_append(std::move(other.__fbthrift_field_append)),
    __isset(other.__isset) {
}

MyStructField28PatchStruct& MyStructField28PatchStruct::operator=(FOLLY_MAYBE_UNUSED MyStructField28PatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    this->__fbthrift_field_remove = std::move(other.__fbthrift_field_remove);
    this->__fbthrift_field_prepend = std::move(other.__fbthrift_field_prepend);
    this->__fbthrift_field_append = std::move(other.__fbthrift_field_append);
    __isset = other.__isset;
    return *this;
}


MyStructField28PatchStruct::MyStructField28PatchStruct(apache::thrift::FragileConstructor, ::std::vector<::std::int16_t> assign__arg, bool clear__arg, ::std::unordered_map<::std::int32_t, ::apache::thrift::op::I16Patch> patch__arg, ::std::vector<::std::int16_t> remove__arg, ::std::vector<::std::int16_t> prepend__arg, ::std::vector<::std::int16_t> append__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patch(std::move(patch__arg)),
    __fbthrift_field_remove(std::move(remove__arg)),
    __fbthrift_field_prepend(std::move(prepend__arg)),
    __fbthrift_field_append(std::move(append__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
}


void MyStructField28PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.clear();
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_patch.clear();
  this->__fbthrift_field_remove.clear();
  this->__fbthrift_field_prepend.clear();
  this->__fbthrift_field_append.clear();
  __isset = {};
}

void MyStructField28PatchStruct::__fbthrift_clear_terse_fields() {
}

bool MyStructField28PatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyStructField28PatchStruct::operator==(FOLLY_MAYBE_UNUSED const MyStructField28PatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (!(lhs.patch_ref() == rhs.patch_ref())) {
    return false;
  }
  if (!(lhs.remove_ref() == rhs.remove_ref())) {
    return false;
  }
  if (!(lhs.prepend_ref() == rhs.prepend_ref())) {
    return false;
  }
  if (!(lhs.append_ref() == rhs.append_ref())) {
    return false;
  }
  return true;
}

const ::std::vector<::std::int16_t>* MyStructField28PatchStruct::get_assign() const& {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

::std::vector<::std::int16_t>* MyStructField28PatchStruct::get_assign() & {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

const ::std::unordered_map<::std::int32_t, ::apache::thrift::op::I16Patch>& MyStructField28PatchStruct::get_patch() const& {
  return __fbthrift_field_patch;
}

::std::unordered_map<::std::int32_t, ::apache::thrift::op::I16Patch> MyStructField28PatchStruct::get_patch() && {
  return std::move(__fbthrift_field_patch);
}

const ::std::vector<::std::int16_t>& MyStructField28PatchStruct::get_remove() const& {
  return __fbthrift_field_remove;
}

::std::vector<::std::int16_t> MyStructField28PatchStruct::get_remove() && {
  return std::move(__fbthrift_field_remove);
}

const ::std::vector<::std::int16_t>& MyStructField28PatchStruct::get_prepend() const& {
  return __fbthrift_field_prepend;
}

::std::vector<::std::int16_t> MyStructField28PatchStruct::get_prepend() && {
  return std::move(__fbthrift_field_prepend);
}

const ::std::vector<::std::int16_t>& MyStructField28PatchStruct::get_append() const& {
  return __fbthrift_field_append;
}

::std::vector<::std::int16_t> MyStructField28PatchStruct::get_append() && {
  return std::move(__fbthrift_field_append);
}


void swap(FOLLY_MAYBE_UNUSED MyStructField28PatchStruct& a, FOLLY_MAYBE_UNUSED MyStructField28PatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__fbthrift_field_remove, b.__fbthrift_field_remove);
  swap(a.__fbthrift_field_prepend, b.__fbthrift_field_prepend);
  swap(a.__fbthrift_field_append, b.__fbthrift_field_append);
  swap(a.__isset, b.__isset);
}

template void MyStructField28PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructField28PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructField28PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructField28PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructField28PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructField28PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructField28PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructField28PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructField28PatchStruct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
        ::std::unordered_map<::std::int32_t, ::apache::thrift::op::I16Patch>>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructField29PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructField29PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructField29PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructField29Patch";
}

const folly::StringPiece MyStructField29PatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructField29PatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

MyStructField29PatchStruct::MyStructField29PatchStruct(const MyStructField29PatchStruct&) = default;
MyStructField29PatchStruct& MyStructField29PatchStruct::operator=(const MyStructField29PatchStruct&) = default;
MyStructField29PatchStruct::MyStructField29PatchStruct(FOLLY_MAYBE_UNUSED MyStructField29PatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_remove(std::move(other.__fbthrift_field_remove)),
    __fbthrift_field_add(std::move(other.__fbthrift_field_add)),
    __isset(other.__isset) {
}

MyStructField29PatchStruct& MyStructField29PatchStruct::operator=(FOLLY_MAYBE_UNUSED MyStructField29PatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_remove = std::move(other.__fbthrift_field_remove);
    this->__fbthrift_field_add = std::move(other.__fbthrift_field_add);
    __isset = other.__isset;
    return *this;
}


MyStructField29PatchStruct::MyStructField29PatchStruct(apache::thrift::FragileConstructor, ::std::set<::std::string> assign__arg, bool clear__arg, ::std::set<::std::string> remove__arg, ::std::set<::std::string> add__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_remove(std::move(remove__arg)),
    __fbthrift_field_add(std::move(add__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void MyStructField29PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.clear();
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_remove.clear();
  this->__fbthrift_field_add.clear();
  __isset = {};
}

void MyStructField29PatchStruct::__fbthrift_clear_terse_fields() {
}

bool MyStructField29PatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyStructField29PatchStruct::operator==(FOLLY_MAYBE_UNUSED const MyStructField29PatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (!(lhs.remove_ref() == rhs.remove_ref())) {
    return false;
  }
  if (!(lhs.add_ref() == rhs.add_ref())) {
    return false;
  }
  return true;
}

bool MyStructField29PatchStruct::operator<(FOLLY_MAYBE_UNUSED const MyStructField29PatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return lhs.assign_ref() < rhs.assign_ref();
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (!(lhs.remove_ref() == rhs.remove_ref())) {
    return lhs.remove_ref() < rhs.remove_ref();
  }
  if (!(lhs.add_ref() == rhs.add_ref())) {
    return lhs.add_ref() < rhs.add_ref();
  }
  return false;
}

const ::std::set<::std::string>* MyStructField29PatchStruct::get_assign() const& {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

::std::set<::std::string>* MyStructField29PatchStruct::get_assign() & {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

const ::std::set<::std::string>& MyStructField29PatchStruct::get_remove() const& {
  return __fbthrift_field_remove;
}

::std::set<::std::string> MyStructField29PatchStruct::get_remove() && {
  return std::move(__fbthrift_field_remove);
}

const ::std::set<::std::string>& MyStructField29PatchStruct::get_add() const& {
  return __fbthrift_field_add;
}

::std::set<::std::string> MyStructField29PatchStruct::get_add() && {
  return std::move(__fbthrift_field_add);
}


void swap(FOLLY_MAYBE_UNUSED MyStructField29PatchStruct& a, FOLLY_MAYBE_UNUSED MyStructField29PatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_remove, b.__fbthrift_field_remove);
  swap(a.__fbthrift_field_add, b.__fbthrift_field_add);
  swap(a.__isset, b.__isset);
}

template void MyStructField29PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructField29PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructField29PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructField29PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructField29PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructField29PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructField29PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructField29PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructField30PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructField30PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructField30PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructField30Patch";
}

const folly::StringPiece MyStructField30PatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructField30PatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

MyStructField30PatchStruct::MyStructField30PatchStruct(const MyStructField30PatchStruct&) = default;
MyStructField30PatchStruct& MyStructField30PatchStruct::operator=(const MyStructField30PatchStruct&) = default;
MyStructField30PatchStruct::MyStructField30PatchStruct() :
      __fbthrift_field_clear() {
}


MyStructField30PatchStruct::~MyStructField30PatchStruct() {}

MyStructField30PatchStruct::MyStructField30PatchStruct(FOLLY_MAYBE_UNUSED MyStructField30PatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_add(std::move(other.__fbthrift_field_add)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __fbthrift_field_remove(std::move(other.__fbthrift_field_remove)),
    __fbthrift_field_put(std::move(other.__fbthrift_field_put)),
    __isset(other.__isset) {
}

MyStructField30PatchStruct& MyStructField30PatchStruct::operator=(FOLLY_MAYBE_UNUSED MyStructField30PatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_add = std::move(other.__fbthrift_field_add);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    this->__fbthrift_field_remove = std::move(other.__fbthrift_field_remove);
    this->__fbthrift_field_put = std::move(other.__fbthrift_field_put);
    __isset = other.__isset;
    return *this;
}


MyStructField30PatchStruct::MyStructField30PatchStruct(apache::thrift::FragileConstructor, ::std::map<::std::string, ::std::string> assign__arg, bool clear__arg, ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch> patchPrior__arg, ::std::map<::std::string, ::std::string> add__arg, ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch> patch__arg, ::std::unordered_set<::std::string> remove__arg, ::std::map<::std::string, ::std::string> put__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_add(std::move(add__arg)),
    __fbthrift_field_patch(std::move(patch__arg)),
    __fbthrift_field_remove(std::move(remove__arg)),
    __fbthrift_field_put(std::move(put__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
}


void MyStructField30PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.clear();
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_patchPrior.clear();
  this->__fbthrift_field_add.clear();
  this->__fbthrift_field_patch.clear();
  this->__fbthrift_field_remove.clear();
  this->__fbthrift_field_put.clear();
  __isset = {};
}

void MyStructField30PatchStruct::__fbthrift_clear_terse_fields() {
}

bool MyStructField30PatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyStructField30PatchStruct::operator==(FOLLY_MAYBE_UNUSED const MyStructField30PatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (!(lhs.patchPrior_ref() == rhs.patchPrior_ref())) {
    return false;
  }
  if (!(lhs.add_ref() == rhs.add_ref())) {
    return false;
  }
  if (!(lhs.patch_ref() == rhs.patch_ref())) {
    return false;
  }
  if (!(lhs.remove_ref() == rhs.remove_ref())) {
    return false;
  }
  if (!(lhs.put_ref() == rhs.put_ref())) {
    return false;
  }
  return true;
}

const ::std::map<::std::string, ::std::string>* MyStructField30PatchStruct::get_assign() const& {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

::std::map<::std::string, ::std::string>* MyStructField30PatchStruct::get_assign() & {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

const ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>& MyStructField30PatchStruct::get_patchPrior() const& {
  return __fbthrift_field_patchPrior;
}

::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch> MyStructField30PatchStruct::get_patchPrior() && {
  return std::move(__fbthrift_field_patchPrior);
}

const ::std::map<::std::string, ::std::string>& MyStructField30PatchStruct::get_add() const& {
  return __fbthrift_field_add;
}

::std::map<::std::string, ::std::string> MyStructField30PatchStruct::get_add() && {
  return std::move(__fbthrift_field_add);
}

const ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>& MyStructField30PatchStruct::get_patch() const& {
  return __fbthrift_field_patch;
}

::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch> MyStructField30PatchStruct::get_patch() && {
  return std::move(__fbthrift_field_patch);
}

const ::std::unordered_set<::std::string>& MyStructField30PatchStruct::get_remove() const& {
  return __fbthrift_field_remove;
}

::std::unordered_set<::std::string> MyStructField30PatchStruct::get_remove() && {
  return std::move(__fbthrift_field_remove);
}

const ::std::map<::std::string, ::std::string>& MyStructField30PatchStruct::get_put() const& {
  return __fbthrift_field_put;
}

::std::map<::std::string, ::std::string> MyStructField30PatchStruct::get_put() && {
  return std::move(__fbthrift_field_put);
}


void swap(FOLLY_MAYBE_UNUSED MyStructField30PatchStruct& a, FOLLY_MAYBE_UNUSED MyStructField30PatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_add, b.__fbthrift_field_add);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__fbthrift_field_remove, b.__fbthrift_field_remove);
  swap(a.__fbthrift_field_put, b.__fbthrift_field_put);
  swap(a.__isset, b.__isset);
}

template void MyStructField30PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructField30PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructField30PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructField30PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructField30PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructField30PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructField30PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructField30PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructField30PatchStruct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructField30PatchStruct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructField31PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructField31PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructField31PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructField31Patch";
}

const folly::StringPiece MyStructField31PatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructField31PatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

MyStructField31PatchStruct::MyStructField31PatchStruct(const MyStructField31PatchStruct&) = default;
MyStructField31PatchStruct& MyStructField31PatchStruct::operator=(const MyStructField31PatchStruct&) = default;
MyStructField31PatchStruct::MyStructField31PatchStruct() :
      __fbthrift_field_clear() {
}


MyStructField31PatchStruct::~MyStructField31PatchStruct() {}

MyStructField31PatchStruct::MyStructField31PatchStruct(FOLLY_MAYBE_UNUSED MyStructField31PatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __fbthrift_field_remove(std::move(other.__fbthrift_field_remove)),
    __fbthrift_field_prepend(std::move(other.__fbthrift_field_prepend)),
    __fbthrift_field_append(std::move(other.__fbthrift_field_append)),
    __isset(other.__isset) {
}

MyStructField31PatchStruct& MyStructField31PatchStruct::operator=(FOLLY_MAYBE_UNUSED MyStructField31PatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    this->__fbthrift_field_remove = std::move(other.__fbthrift_field_remove);
    this->__fbthrift_field_prepend = std::move(other.__fbthrift_field_prepend);
    this->__fbthrift_field_append = std::move(other.__fbthrift_field_append);
    __isset = other.__isset;
    return *this;
}


MyStructField31PatchStruct::MyStructField31PatchStruct(apache::thrift::FragileConstructor, ::std::vector<::std::map<::std::string, ::std::int32_t>> assign__arg, bool clear__arg, ::std::unordered_map<::std::int32_t, ::test::fixtures::patch::MyStructField31Patch1> patch__arg, ::std::vector<::std::map<::std::string, ::std::int32_t>> remove__arg, ::std::vector<::std::map<::std::string, ::std::int32_t>> prepend__arg, ::std::vector<::std::map<::std::string, ::std::int32_t>> append__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patch(std::move(patch__arg)),
    __fbthrift_field_remove(std::move(remove__arg)),
    __fbthrift_field_prepend(std::move(prepend__arg)),
    __fbthrift_field_append(std::move(append__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
}


void MyStructField31PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.clear();
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_patch.clear();
  this->__fbthrift_field_remove.clear();
  this->__fbthrift_field_prepend.clear();
  this->__fbthrift_field_append.clear();
  __isset = {};
}

void MyStructField31PatchStruct::__fbthrift_clear_terse_fields() {
}

bool MyStructField31PatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyStructField31PatchStruct::operator==(FOLLY_MAYBE_UNUSED const MyStructField31PatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (!(lhs.patch_ref() == rhs.patch_ref())) {
    return false;
  }
  if (!(lhs.remove_ref() == rhs.remove_ref())) {
    return false;
  }
  if (!(lhs.prepend_ref() == rhs.prepend_ref())) {
    return false;
  }
  if (!(lhs.append_ref() == rhs.append_ref())) {
    return false;
  }
  return true;
}

const ::std::vector<::std::map<::std::string, ::std::int32_t>>* MyStructField31PatchStruct::get_assign() const& {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

::std::vector<::std::map<::std::string, ::std::int32_t>>* MyStructField31PatchStruct::get_assign() & {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

const ::std::unordered_map<::std::int32_t, ::test::fixtures::patch::MyStructField31Patch1>& MyStructField31PatchStruct::get_patch() const& {
  return __fbthrift_field_patch;
}

::std::unordered_map<::std::int32_t, ::test::fixtures::patch::MyStructField31Patch1> MyStructField31PatchStruct::get_patch() && {
  return std::move(__fbthrift_field_patch);
}

const ::std::vector<::std::map<::std::string, ::std::int32_t>>& MyStructField31PatchStruct::get_remove() const& {
  return __fbthrift_field_remove;
}

::std::vector<::std::map<::std::string, ::std::int32_t>> MyStructField31PatchStruct::get_remove() && {
  return std::move(__fbthrift_field_remove);
}

const ::std::vector<::std::map<::std::string, ::std::int32_t>>& MyStructField31PatchStruct::get_prepend() const& {
  return __fbthrift_field_prepend;
}

::std::vector<::std::map<::std::string, ::std::int32_t>> MyStructField31PatchStruct::get_prepend() && {
  return std::move(__fbthrift_field_prepend);
}

const ::std::vector<::std::map<::std::string, ::std::int32_t>>& MyStructField31PatchStruct::get_append() const& {
  return __fbthrift_field_append;
}

::std::vector<::std::map<::std::string, ::std::int32_t>> MyStructField31PatchStruct::get_append() && {
  return std::move(__fbthrift_field_append);
}


void swap(FOLLY_MAYBE_UNUSED MyStructField31PatchStruct& a, FOLLY_MAYBE_UNUSED MyStructField31PatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__fbthrift_field_remove, b.__fbthrift_field_remove);
  swap(a.__fbthrift_field_prepend, b.__fbthrift_field_prepend);
  swap(a.__fbthrift_field_append, b.__fbthrift_field_append);
  swap(a.__isset, b.__isset);
}

template void MyStructField31PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructField31PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructField31PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructField31PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructField31PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructField31PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructField31PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructField31PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructField31PatchStruct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
        ::std::unordered_map<::std::int32_t, ::test::fixtures::patch::MyStructField31Patch1>>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructField31Patch1Struct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructField31Patch1Struct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructField31Patch1Struct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructField31Patch1";
}

const folly::StringPiece MyStructField31Patch1Struct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructField31Patch1Struct>::fields_names[folly::to_underlying(ord) - 1];
}

MyStructField31Patch1Struct::MyStructField31Patch1Struct(const MyStructField31Patch1Struct&) = default;
MyStructField31Patch1Struct& MyStructField31Patch1Struct::operator=(const MyStructField31Patch1Struct&) = default;
MyStructField31Patch1Struct::MyStructField31Patch1Struct() :
      __fbthrift_field_clear() {
}


MyStructField31Patch1Struct::~MyStructField31Patch1Struct() {}

MyStructField31Patch1Struct::MyStructField31Patch1Struct(FOLLY_MAYBE_UNUSED MyStructField31Patch1Struct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_add(std::move(other.__fbthrift_field_add)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __fbthrift_field_remove(std::move(other.__fbthrift_field_remove)),
    __fbthrift_field_put(std::move(other.__fbthrift_field_put)),
    __isset(other.__isset) {
}

MyStructField31Patch1Struct& MyStructField31Patch1Struct::operator=(FOLLY_MAYBE_UNUSED MyStructField31Patch1Struct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_add = std::move(other.__fbthrift_field_add);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    this->__fbthrift_field_remove = std::move(other.__fbthrift_field_remove);
    this->__fbthrift_field_put = std::move(other.__fbthrift_field_put);
    __isset = other.__isset;
    return *this;
}


MyStructField31Patch1Struct::MyStructField31Patch1Struct(apache::thrift::FragileConstructor, ::std::map<::std::string, ::std::int32_t> assign__arg, bool clear__arg, ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch> patchPrior__arg, ::std::map<::std::string, ::std::int32_t> add__arg, ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch> patch__arg, ::std::unordered_set<::std::string> remove__arg, ::std::map<::std::string, ::std::int32_t> put__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_add(std::move(add__arg)),
    __fbthrift_field_patch(std::move(patch__arg)),
    __fbthrift_field_remove(std::move(remove__arg)),
    __fbthrift_field_put(std::move(put__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
}


void MyStructField31Patch1Struct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.clear();
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_patchPrior.clear();
  this->__fbthrift_field_add.clear();
  this->__fbthrift_field_patch.clear();
  this->__fbthrift_field_remove.clear();
  this->__fbthrift_field_put.clear();
  __isset = {};
}

void MyStructField31Patch1Struct::__fbthrift_clear_terse_fields() {
}

bool MyStructField31Patch1Struct::__fbthrift_is_empty() const {
  return false;
}

bool MyStructField31Patch1Struct::operator==(FOLLY_MAYBE_UNUSED const MyStructField31Patch1Struct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (!(lhs.patchPrior_ref() == rhs.patchPrior_ref())) {
    return false;
  }
  if (!(lhs.add_ref() == rhs.add_ref())) {
    return false;
  }
  if (!(lhs.patch_ref() == rhs.patch_ref())) {
    return false;
  }
  if (!(lhs.remove_ref() == rhs.remove_ref())) {
    return false;
  }
  if (!(lhs.put_ref() == rhs.put_ref())) {
    return false;
  }
  return true;
}

const ::std::map<::std::string, ::std::int32_t>* MyStructField31Patch1Struct::get_assign() const& {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

::std::map<::std::string, ::std::int32_t>* MyStructField31Patch1Struct::get_assign() & {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

const ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>& MyStructField31Patch1Struct::get_patchPrior() const& {
  return __fbthrift_field_patchPrior;
}

::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch> MyStructField31Patch1Struct::get_patchPrior() && {
  return std::move(__fbthrift_field_patchPrior);
}

const ::std::map<::std::string, ::std::int32_t>& MyStructField31Patch1Struct::get_add() const& {
  return __fbthrift_field_add;
}

::std::map<::std::string, ::std::int32_t> MyStructField31Patch1Struct::get_add() && {
  return std::move(__fbthrift_field_add);
}

const ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>& MyStructField31Patch1Struct::get_patch() const& {
  return __fbthrift_field_patch;
}

::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch> MyStructField31Patch1Struct::get_patch() && {
  return std::move(__fbthrift_field_patch);
}

const ::std::unordered_set<::std::string>& MyStructField31Patch1Struct::get_remove() const& {
  return __fbthrift_field_remove;
}

::std::unordered_set<::std::string> MyStructField31Patch1Struct::get_remove() && {
  return std::move(__fbthrift_field_remove);
}

const ::std::map<::std::string, ::std::int32_t>& MyStructField31Patch1Struct::get_put() const& {
  return __fbthrift_field_put;
}

::std::map<::std::string, ::std::int32_t> MyStructField31Patch1Struct::get_put() && {
  return std::move(__fbthrift_field_put);
}


void swap(FOLLY_MAYBE_UNUSED MyStructField31Patch1Struct& a, FOLLY_MAYBE_UNUSED MyStructField31Patch1Struct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_add, b.__fbthrift_field_add);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__fbthrift_field_remove, b.__fbthrift_field_remove);
  swap(a.__fbthrift_field_put, b.__fbthrift_field_put);
  swap(a.__isset, b.__isset);
}

template void MyStructField31Patch1Struct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructField31Patch1Struct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructField31Patch1Struct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructField31Patch1Struct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructField31Patch1Struct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructField31Patch1Struct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructField31Patch1Struct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructField31Patch1Struct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructField31Patch1Struct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructField31Patch1Struct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructField32PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructField32PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructField32PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructField32Patch";
}

const folly::StringPiece MyStructField32PatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructField32PatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

MyStructField32PatchStruct::MyStructField32PatchStruct(const MyStructField32PatchStruct&) = default;
MyStructField32PatchStruct& MyStructField32PatchStruct::operator=(const MyStructField32PatchStruct&) = default;
MyStructField32PatchStruct::MyStructField32PatchStruct() :
      __fbthrift_field_clear() {
}


MyStructField32PatchStruct::~MyStructField32PatchStruct() {}

MyStructField32PatchStruct::MyStructField32PatchStruct(FOLLY_MAYBE_UNUSED MyStructField32PatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_add(std::move(other.__fbthrift_field_add)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __fbthrift_field_remove(std::move(other.__fbthrift_field_remove)),
    __fbthrift_field_put(std::move(other.__fbthrift_field_put)),
    __isset(other.__isset) {
}

MyStructField32PatchStruct& MyStructField32PatchStruct::operator=(FOLLY_MAYBE_UNUSED MyStructField32PatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_add = std::move(other.__fbthrift_field_add);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    this->__fbthrift_field_remove = std::move(other.__fbthrift_field_remove);
    this->__fbthrift_field_put = std::move(other.__fbthrift_field_put);
    __isset = other.__isset;
    return *this;
}


MyStructField32PatchStruct::MyStructField32PatchStruct(apache::thrift::FragileConstructor, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>> assign__arg, bool clear__arg, ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField32Patch1> patchPrior__arg, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>> add__arg, ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField32Patch1> patch__arg, ::std::unordered_set<::std::string> remove__arg, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>> put__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_add(std::move(add__arg)),
    __fbthrift_field_patch(std::move(patch__arg)),
    __fbthrift_field_remove(std::move(remove__arg)),
    __fbthrift_field_put(std::move(put__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
}


void MyStructField32PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.clear();
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_patchPrior.clear();
  this->__fbthrift_field_add.clear();
  this->__fbthrift_field_patch.clear();
  this->__fbthrift_field_remove.clear();
  this->__fbthrift_field_put.clear();
  __isset = {};
}

void MyStructField32PatchStruct::__fbthrift_clear_terse_fields() {
}

bool MyStructField32PatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyStructField32PatchStruct::operator==(FOLLY_MAYBE_UNUSED const MyStructField32PatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (!(lhs.patchPrior_ref() == rhs.patchPrior_ref())) {
    return false;
  }
  if (!(lhs.add_ref() == rhs.add_ref())) {
    return false;
  }
  if (!(lhs.patch_ref() == rhs.patch_ref())) {
    return false;
  }
  if (!(lhs.remove_ref() == rhs.remove_ref())) {
    return false;
  }
  if (!(lhs.put_ref() == rhs.put_ref())) {
    return false;
  }
  return true;
}

const ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>* MyStructField32PatchStruct::get_assign() const& {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>* MyStructField32PatchStruct::get_assign() & {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

const ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField32Patch1>& MyStructField32PatchStruct::get_patchPrior() const& {
  return __fbthrift_field_patchPrior;
}

::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField32Patch1> MyStructField32PatchStruct::get_patchPrior() && {
  return std::move(__fbthrift_field_patchPrior);
}

const ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>& MyStructField32PatchStruct::get_add() const& {
  return __fbthrift_field_add;
}

::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>> MyStructField32PatchStruct::get_add() && {
  return std::move(__fbthrift_field_add);
}

const ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField32Patch1>& MyStructField32PatchStruct::get_patch() const& {
  return __fbthrift_field_patch;
}

::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField32Patch1> MyStructField32PatchStruct::get_patch() && {
  return std::move(__fbthrift_field_patch);
}

const ::std::unordered_set<::std::string>& MyStructField32PatchStruct::get_remove() const& {
  return __fbthrift_field_remove;
}

::std::unordered_set<::std::string> MyStructField32PatchStruct::get_remove() && {
  return std::move(__fbthrift_field_remove);
}

const ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>& MyStructField32PatchStruct::get_put() const& {
  return __fbthrift_field_put;
}

::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>> MyStructField32PatchStruct::get_put() && {
  return std::move(__fbthrift_field_put);
}


void swap(FOLLY_MAYBE_UNUSED MyStructField32PatchStruct& a, FOLLY_MAYBE_UNUSED MyStructField32PatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_add, b.__fbthrift_field_add);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__fbthrift_field_remove, b.__fbthrift_field_remove);
  swap(a.__fbthrift_field_put, b.__fbthrift_field_put);
  swap(a.__isset, b.__isset);
}

template void MyStructField32PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructField32PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructField32PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructField32PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructField32PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructField32PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructField32PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructField32PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructField32PatchStruct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField32Patch1>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructField32PatchStruct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField32Patch1>>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructField32Patch1Struct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructField32Patch1Struct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructField32Patch1Struct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructField32Patch1";
}

const folly::StringPiece MyStructField32Patch1Struct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructField32Patch1Struct>::fields_names[folly::to_underlying(ord) - 1];
}

MyStructField32Patch1Struct::MyStructField32Patch1Struct(const MyStructField32Patch1Struct&) = default;
MyStructField32Patch1Struct& MyStructField32Patch1Struct::operator=(const MyStructField32Patch1Struct&) = default;
MyStructField32Patch1Struct::MyStructField32Patch1Struct() :
      __fbthrift_field_clear() {
}


MyStructField32Patch1Struct::~MyStructField32Patch1Struct() {}

MyStructField32Patch1Struct::MyStructField32Patch1Struct(FOLLY_MAYBE_UNUSED MyStructField32Patch1Struct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_add(std::move(other.__fbthrift_field_add)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __fbthrift_field_remove(std::move(other.__fbthrift_field_remove)),
    __fbthrift_field_put(std::move(other.__fbthrift_field_put)),
    __isset(other.__isset) {
}

MyStructField32Patch1Struct& MyStructField32Patch1Struct::operator=(FOLLY_MAYBE_UNUSED MyStructField32Patch1Struct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_add = std::move(other.__fbthrift_field_add);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    this->__fbthrift_field_remove = std::move(other.__fbthrift_field_remove);
    this->__fbthrift_field_put = std::move(other.__fbthrift_field_put);
    __isset = other.__isset;
    return *this;
}


MyStructField32Patch1Struct::MyStructField32Patch1Struct(apache::thrift::FragileConstructor, ::std::map<::std::string, ::std::int32_t> assign__arg, bool clear__arg, ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch> patchPrior__arg, ::std::map<::std::string, ::std::int32_t> add__arg, ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch> patch__arg, ::std::unordered_set<::std::string> remove__arg, ::std::map<::std::string, ::std::int32_t> put__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_add(std::move(add__arg)),
    __fbthrift_field_patch(std::move(patch__arg)),
    __fbthrift_field_remove(std::move(remove__arg)),
    __fbthrift_field_put(std::move(put__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
}


void MyStructField32Patch1Struct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.clear();
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_patchPrior.clear();
  this->__fbthrift_field_add.clear();
  this->__fbthrift_field_patch.clear();
  this->__fbthrift_field_remove.clear();
  this->__fbthrift_field_put.clear();
  __isset = {};
}

void MyStructField32Patch1Struct::__fbthrift_clear_terse_fields() {
}

bool MyStructField32Patch1Struct::__fbthrift_is_empty() const {
  return false;
}

bool MyStructField32Patch1Struct::operator==(FOLLY_MAYBE_UNUSED const MyStructField32Patch1Struct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (!(lhs.patchPrior_ref() == rhs.patchPrior_ref())) {
    return false;
  }
  if (!(lhs.add_ref() == rhs.add_ref())) {
    return false;
  }
  if (!(lhs.patch_ref() == rhs.patch_ref())) {
    return false;
  }
  if (!(lhs.remove_ref() == rhs.remove_ref())) {
    return false;
  }
  if (!(lhs.put_ref() == rhs.put_ref())) {
    return false;
  }
  return true;
}

const ::std::map<::std::string, ::std::int32_t>* MyStructField32Patch1Struct::get_assign() const& {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

::std::map<::std::string, ::std::int32_t>* MyStructField32Patch1Struct::get_assign() & {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

const ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>& MyStructField32Patch1Struct::get_patchPrior() const& {
  return __fbthrift_field_patchPrior;
}

::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch> MyStructField32Patch1Struct::get_patchPrior() && {
  return std::move(__fbthrift_field_patchPrior);
}

const ::std::map<::std::string, ::std::int32_t>& MyStructField32Patch1Struct::get_add() const& {
  return __fbthrift_field_add;
}

::std::map<::std::string, ::std::int32_t> MyStructField32Patch1Struct::get_add() && {
  return std::move(__fbthrift_field_add);
}

const ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>& MyStructField32Patch1Struct::get_patch() const& {
  return __fbthrift_field_patch;
}

::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch> MyStructField32Patch1Struct::get_patch() && {
  return std::move(__fbthrift_field_patch);
}

const ::std::unordered_set<::std::string>& MyStructField32Patch1Struct::get_remove() const& {
  return __fbthrift_field_remove;
}

::std::unordered_set<::std::string> MyStructField32Patch1Struct::get_remove() && {
  return std::move(__fbthrift_field_remove);
}

const ::std::map<::std::string, ::std::int32_t>& MyStructField32Patch1Struct::get_put() const& {
  return __fbthrift_field_put;
}

::std::map<::std::string, ::std::int32_t> MyStructField32Patch1Struct::get_put() && {
  return std::move(__fbthrift_field_put);
}


void swap(FOLLY_MAYBE_UNUSED MyStructField32Patch1Struct& a, FOLLY_MAYBE_UNUSED MyStructField32Patch1Struct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_add, b.__fbthrift_field_add);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__fbthrift_field_remove, b.__fbthrift_field_remove);
  swap(a.__fbthrift_field_put, b.__fbthrift_field_put);
  swap(a.__isset, b.__isset);
}

template void MyStructField32Patch1Struct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructField32Patch1Struct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructField32Patch1Struct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructField32Patch1Struct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructField32Patch1Struct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructField32Patch1Struct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructField32Patch1Struct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructField32Patch1Struct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructField32Patch1Struct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructField32Patch1Struct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructFieldPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructFieldPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructFieldPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructFieldPatch";
}

const folly::StringPiece MyStructFieldPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructFieldPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

MyStructFieldPatchStruct::MyStructFieldPatchStruct(const MyStructFieldPatchStruct& srcObj) :
    __fbthrift_field_mapMap(srcObj.__fbthrift_field_mapMap),
    __fbthrift_field_listMap(srcObj.__fbthrift_field_listMap),
    __fbthrift_field_optMapVal(srcObj.__fbthrift_field_optMapVal),
    __fbthrift_field_optSetVal(srcObj.__fbthrift_field_optSetVal),
    __fbthrift_field_optListVal(srcObj.__fbthrift_field_optListVal),
    __fbthrift_field_optLateStructVal(srcObj.__fbthrift_field_optLateStructVal),
    __fbthrift_field_optStructVal(srcObj.__fbthrift_field_optStructVal),
    __fbthrift_field_optEnumVal(srcObj.__fbthrift_field_optEnumVal),
    __fbthrift_field_optBinaryVal(srcObj.__fbthrift_field_optBinaryVal),
    __fbthrift_field_optStringVal(srcObj.__fbthrift_field_optStringVal),
    __fbthrift_field_optDoubleVal(srcObj.__fbthrift_field_optDoubleVal),
    __fbthrift_field_optFloatVal(srcObj.__fbthrift_field_optFloatVal),
    __fbthrift_field_optI64Val(srcObj.__fbthrift_field_optI64Val),
    __fbthrift_field_optI32Val(srcObj.__fbthrift_field_optI32Val),
    __fbthrift_field_optI16Val(srcObj.__fbthrift_field_optI16Val),
    __fbthrift_field_optByteVal(srcObj.__fbthrift_field_optByteVal),
    __fbthrift_field_optBoolVal(srcObj.__fbthrift_field_optBoolVal),
    __fbthrift_field_timeVal(srcObj.__fbthrift_field_timeVal),
    __fbthrift_field_durationVal(srcObj.__fbthrift_field_durationVal),
    __fbthrift_field_lateStructVal(srcObj.__fbthrift_field_lateStructVal),
    __fbthrift_field_unionVal(srcObj.__fbthrift_field_unionVal),
    __fbthrift_field_structVal(srcObj.__fbthrift_field_structVal),
    __fbthrift_field_enumVal(srcObj.__fbthrift_field_enumVal),
    __fbthrift_field_binaryVal(srcObj.__fbthrift_field_binaryVal),
    __fbthrift_field_stringVal(srcObj.__fbthrift_field_stringVal),
    __fbthrift_field_doubleVal(srcObj.__fbthrift_field_doubleVal),
    __fbthrift_field_floatVal(srcObj.__fbthrift_field_floatVal),
    __fbthrift_field_i64Val(srcObj.__fbthrift_field_i64Val),
    __fbthrift_field_i32Val(srcObj.__fbthrift_field_i32Val),
    __fbthrift_field_i16Val(srcObj.__fbthrift_field_i16Val),
    __fbthrift_field_byteVal(srcObj.__fbthrift_field_byteVal),
    __fbthrift_field_boolVal(srcObj.__fbthrift_field_boolVal),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::MapPatchAdapter, -32>(__fbthrift_field_mapMap, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter, -31>(__fbthrift_field_listMap, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::MapPatchAdapter, -30>(__fbthrift_field_optMapVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::SetPatchAdapter, -29>(__fbthrift_field_optSetVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter, -28>(__fbthrift_field_optListVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, -27>(__fbthrift_field_optLateStructVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, -26>(__fbthrift_field_optStructVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, -25>(__fbthrift_field_optEnumVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BinaryPatchAdapter, -24>(__fbthrift_field_optBinaryVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, -23>(__fbthrift_field_optStringVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -22>(__fbthrift_field_optDoubleVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -21>(__fbthrift_field_optFloatVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -20>(__fbthrift_field_optI64Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -19>(__fbthrift_field_optI32Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -18>(__fbthrift_field_optI16Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -17>(__fbthrift_field_optByteVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BoolPatchAdapter, -16>(__fbthrift_field_optBoolVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, -15>(__fbthrift_field_timeVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, -14>(__fbthrift_field_durationVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, -13>(__fbthrift_field_lateStructVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, -12>(__fbthrift_field_unionVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, -11>(__fbthrift_field_structVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, -10>(__fbthrift_field_enumVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BinaryPatchAdapter, -9>(__fbthrift_field_binaryVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, -8>(__fbthrift_field_stringVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -7>(__fbthrift_field_doubleVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -6>(__fbthrift_field_floatVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -5>(__fbthrift_field_i64Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -4>(__fbthrift_field_i32Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -3>(__fbthrift_field_i16Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -2>(__fbthrift_field_byteVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BoolPatchAdapter, -1>(__fbthrift_field_boolVal, *this);
}

MyStructFieldPatchStruct& MyStructFieldPatchStruct::operator=(const MyStructFieldPatchStruct& other) {
  MyStructFieldPatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

MyStructFieldPatchStruct::MyStructFieldPatchStruct(FOLLY_MAYBE_UNUSED MyStructFieldPatchStruct&& other) noexcept :
    __fbthrift_field_mapMap(std::move(other.__fbthrift_field_mapMap)),
    __fbthrift_field_listMap(std::move(other.__fbthrift_field_listMap)),
    __fbthrift_field_optMapVal(std::move(other.__fbthrift_field_optMapVal)),
    __fbthrift_field_optSetVal(std::move(other.__fbthrift_field_optSetVal)),
    __fbthrift_field_optListVal(std::move(other.__fbthrift_field_optListVal)),
    __fbthrift_field_optLateStructVal(std::move(other.__fbthrift_field_optLateStructVal)),
    __fbthrift_field_optStructVal(std::move(other.__fbthrift_field_optStructVal)),
    __fbthrift_field_optEnumVal(std::move(other.__fbthrift_field_optEnumVal)),
    __fbthrift_field_optBinaryVal(std::move(other.__fbthrift_field_optBinaryVal)),
    __fbthrift_field_optStringVal(std::move(other.__fbthrift_field_optStringVal)),
    __fbthrift_field_optDoubleVal(std::move(other.__fbthrift_field_optDoubleVal)),
    __fbthrift_field_optFloatVal(std::move(other.__fbthrift_field_optFloatVal)),
    __fbthrift_field_optI64Val(std::move(other.__fbthrift_field_optI64Val)),
    __fbthrift_field_optI32Val(std::move(other.__fbthrift_field_optI32Val)),
    __fbthrift_field_optI16Val(std::move(other.__fbthrift_field_optI16Val)),
    __fbthrift_field_optByteVal(std::move(other.__fbthrift_field_optByteVal)),
    __fbthrift_field_optBoolVal(std::move(other.__fbthrift_field_optBoolVal)),
    __fbthrift_field_timeVal(std::move(other.__fbthrift_field_timeVal)),
    __fbthrift_field_durationVal(std::move(other.__fbthrift_field_durationVal)),
    __fbthrift_field_lateStructVal(std::move(other.__fbthrift_field_lateStructVal)),
    __fbthrift_field_unionVal(std::move(other.__fbthrift_field_unionVal)),
    __fbthrift_field_structVal(std::move(other.__fbthrift_field_structVal)),
    __fbthrift_field_enumVal(std::move(other.__fbthrift_field_enumVal)),
    __fbthrift_field_binaryVal(std::move(other.__fbthrift_field_binaryVal)),
    __fbthrift_field_stringVal(std::move(other.__fbthrift_field_stringVal)),
    __fbthrift_field_doubleVal(std::move(other.__fbthrift_field_doubleVal)),
    __fbthrift_field_floatVal(std::move(other.__fbthrift_field_floatVal)),
    __fbthrift_field_i64Val(std::move(other.__fbthrift_field_i64Val)),
    __fbthrift_field_i32Val(std::move(other.__fbthrift_field_i32Val)),
    __fbthrift_field_i16Val(std::move(other.__fbthrift_field_i16Val)),
    __fbthrift_field_byteVal(std::move(other.__fbthrift_field_byteVal)),
    __fbthrift_field_boolVal(std::move(other.__fbthrift_field_boolVal)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::MapPatchAdapter, -32>(__fbthrift_field_mapMap, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter, -31>(__fbthrift_field_listMap, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::MapPatchAdapter, -30>(__fbthrift_field_optMapVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::SetPatchAdapter, -29>(__fbthrift_field_optSetVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter, -28>(__fbthrift_field_optListVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, -27>(__fbthrift_field_optLateStructVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, -26>(__fbthrift_field_optStructVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, -25>(__fbthrift_field_optEnumVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BinaryPatchAdapter, -24>(__fbthrift_field_optBinaryVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, -23>(__fbthrift_field_optStringVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -22>(__fbthrift_field_optDoubleVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -21>(__fbthrift_field_optFloatVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -20>(__fbthrift_field_optI64Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -19>(__fbthrift_field_optI32Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -18>(__fbthrift_field_optI16Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -17>(__fbthrift_field_optByteVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BoolPatchAdapter, -16>(__fbthrift_field_optBoolVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, -15>(__fbthrift_field_timeVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, -14>(__fbthrift_field_durationVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, -13>(__fbthrift_field_lateStructVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, -12>(__fbthrift_field_unionVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, -11>(__fbthrift_field_structVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, -10>(__fbthrift_field_enumVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BinaryPatchAdapter, -9>(__fbthrift_field_binaryVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, -8>(__fbthrift_field_stringVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -7>(__fbthrift_field_doubleVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -6>(__fbthrift_field_floatVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -5>(__fbthrift_field_i64Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -4>(__fbthrift_field_i32Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -3>(__fbthrift_field_i16Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -2>(__fbthrift_field_byteVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BoolPatchAdapter, -1>(__fbthrift_field_boolVal, *this);
}

MyStructFieldPatchStruct& MyStructFieldPatchStruct::operator=(FOLLY_MAYBE_UNUSED MyStructFieldPatchStruct&& other) noexcept {
    this->__fbthrift_field_mapMap = std::move(other.__fbthrift_field_mapMap);
    this->__fbthrift_field_listMap = std::move(other.__fbthrift_field_listMap);
    this->__fbthrift_field_optMapVal = std::move(other.__fbthrift_field_optMapVal);
    this->__fbthrift_field_optSetVal = std::move(other.__fbthrift_field_optSetVal);
    this->__fbthrift_field_optListVal = std::move(other.__fbthrift_field_optListVal);
    this->__fbthrift_field_optLateStructVal = std::move(other.__fbthrift_field_optLateStructVal);
    this->__fbthrift_field_optStructVal = std::move(other.__fbthrift_field_optStructVal);
    this->__fbthrift_field_optEnumVal = std::move(other.__fbthrift_field_optEnumVal);
    this->__fbthrift_field_optBinaryVal = std::move(other.__fbthrift_field_optBinaryVal);
    this->__fbthrift_field_optStringVal = std::move(other.__fbthrift_field_optStringVal);
    this->__fbthrift_field_optDoubleVal = std::move(other.__fbthrift_field_optDoubleVal);
    this->__fbthrift_field_optFloatVal = std::move(other.__fbthrift_field_optFloatVal);
    this->__fbthrift_field_optI64Val = std::move(other.__fbthrift_field_optI64Val);
    this->__fbthrift_field_optI32Val = std::move(other.__fbthrift_field_optI32Val);
    this->__fbthrift_field_optI16Val = std::move(other.__fbthrift_field_optI16Val);
    this->__fbthrift_field_optByteVal = std::move(other.__fbthrift_field_optByteVal);
    this->__fbthrift_field_optBoolVal = std::move(other.__fbthrift_field_optBoolVal);
    this->__fbthrift_field_timeVal = std::move(other.__fbthrift_field_timeVal);
    this->__fbthrift_field_durationVal = std::move(other.__fbthrift_field_durationVal);
    this->__fbthrift_field_lateStructVal = std::move(other.__fbthrift_field_lateStructVal);
    this->__fbthrift_field_unionVal = std::move(other.__fbthrift_field_unionVal);
    this->__fbthrift_field_structVal = std::move(other.__fbthrift_field_structVal);
    this->__fbthrift_field_enumVal = std::move(other.__fbthrift_field_enumVal);
    this->__fbthrift_field_binaryVal = std::move(other.__fbthrift_field_binaryVal);
    this->__fbthrift_field_stringVal = std::move(other.__fbthrift_field_stringVal);
    this->__fbthrift_field_doubleVal = std::move(other.__fbthrift_field_doubleVal);
    this->__fbthrift_field_floatVal = std::move(other.__fbthrift_field_floatVal);
    this->__fbthrift_field_i64Val = std::move(other.__fbthrift_field_i64Val);
    this->__fbthrift_field_i32Val = std::move(other.__fbthrift_field_i32Val);
    this->__fbthrift_field_i16Val = std::move(other.__fbthrift_field_i16Val);
    this->__fbthrift_field_byteVal = std::move(other.__fbthrift_field_byteVal);
    this->__fbthrift_field_boolVal = std::move(other.__fbthrift_field_boolVal);
    __isset = other.__isset;
    return *this;
}


MyStructFieldPatchStruct::MyStructFieldPatchStruct(apache::thrift::FragileConstructor, ::test::fixtures::patch::MyStructField32Patch mapMap__arg, ::test::fixtures::patch::MyStructField31Patch listMap__arg, ::test::fixtures::patch::MyStructField30Patch optMapVal__arg, ::test::fixtures::patch::MyStructField29Patch optSetVal__arg, ::test::fixtures::patch::MyStructField28Patch optListVal__arg, ::test::fixtures::patch::LateDefStructPatch optLateStructVal__arg, ::test::fixtures::patch::MyDataPatch optStructVal__arg, ::test::fixtures::patch::MyStructField25Patch optEnumVal__arg, ::apache::thrift::op::BinaryPatch optBinaryVal__arg, ::apache::thrift::op::StringPatch optStringVal__arg, ::apache::thrift::op::DoublePatch optDoubleVal__arg, ::apache::thrift::op::FloatPatch optFloatVal__arg, ::apache::thrift::op::I64Patch optI64Val__arg, ::apache::thrift::op::I32Patch optI32Val__arg, ::apache::thrift::op::I16Patch optI16Val__arg, ::apache::thrift::op::BytePatch optByteVal__arg, ::apache::thrift::op::BoolPatch optBoolVal__arg, ::apache::thrift::op::TimePatch timeVal__arg, ::apache::thrift::op::DurationPatch durationVal__arg, ::test::fixtures::patch::LateDefStructPatch lateStructVal__arg, ::test::fixtures::patch::MyUnionPatch unionVal__arg, ::test::fixtures::patch::MyDataPatch structVal__arg, ::test::fixtures::patch::MyStructField10Patch enumVal__arg, ::apache::thrift::op::BinaryPatch binaryVal__arg, ::apache::thrift::op::StringPatch stringVal__arg, ::apache::thrift::op::DoublePatch doubleVal__arg, ::apache::thrift::op::FloatPatch floatVal__arg, ::apache::thrift::op::I64Patch i64Val__arg, ::apache::thrift::op::I32Patch i32Val__arg, ::apache::thrift::op::I16Patch i16Val__arg, ::apache::thrift::op::BytePatch byteVal__arg, ::apache::thrift::op::BoolPatch boolVal__arg) :
    __fbthrift_field_mapMap(std::move(mapMap__arg)),
    __fbthrift_field_listMap(std::move(listMap__arg)),
    __fbthrift_field_optMapVal(std::move(optMapVal__arg)),
    __fbthrift_field_optSetVal(std::move(optSetVal__arg)),
    __fbthrift_field_optListVal(std::move(optListVal__arg)),
    __fbthrift_field_optLateStructVal(std::move(optLateStructVal__arg)),
    __fbthrift_field_optStructVal(std::move(optStructVal__arg)),
    __fbthrift_field_optEnumVal(std::move(optEnumVal__arg)),
    __fbthrift_field_optBinaryVal(std::move(optBinaryVal__arg)),
    __fbthrift_field_optStringVal(std::move(optStringVal__arg)),
    __fbthrift_field_optDoubleVal(std::move(optDoubleVal__arg)),
    __fbthrift_field_optFloatVal(std::move(optFloatVal__arg)),
    __fbthrift_field_optI64Val(std::move(optI64Val__arg)),
    __fbthrift_field_optI32Val(std::move(optI32Val__arg)),
    __fbthrift_field_optI16Val(std::move(optI16Val__arg)),
    __fbthrift_field_optByteVal(std::move(optByteVal__arg)),
    __fbthrift_field_optBoolVal(std::move(optBoolVal__arg)),
    __fbthrift_field_timeVal(std::move(timeVal__arg)),
    __fbthrift_field_durationVal(std::move(durationVal__arg)),
    __fbthrift_field_lateStructVal(std::move(lateStructVal__arg)),
    __fbthrift_field_unionVal(std::move(unionVal__arg)),
    __fbthrift_field_structVal(std::move(structVal__arg)),
    __fbthrift_field_enumVal(std::move(enumVal__arg)),
    __fbthrift_field_binaryVal(std::move(binaryVal__arg)),
    __fbthrift_field_stringVal(std::move(stringVal__arg)),
    __fbthrift_field_doubleVal(std::move(doubleVal__arg)),
    __fbthrift_field_floatVal(std::move(floatVal__arg)),
    __fbthrift_field_i64Val(std::move(i64Val__arg)),
    __fbthrift_field_i32Val(std::move(i32Val__arg)),
    __fbthrift_field_i16Val(std::move(i16Val__arg)),
    __fbthrift_field_byteVal(std::move(byteVal__arg)),
    __fbthrift_field_boolVal(std::move(boolVal__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::MapPatchAdapter, -32>(__fbthrift_field_mapMap, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter, -31>(__fbthrift_field_listMap, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::MapPatchAdapter, -30>(__fbthrift_field_optMapVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::SetPatchAdapter, -29>(__fbthrift_field_optSetVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter, -28>(__fbthrift_field_optListVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, -27>(__fbthrift_field_optLateStructVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, -26>(__fbthrift_field_optStructVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, -25>(__fbthrift_field_optEnumVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BinaryPatchAdapter, -24>(__fbthrift_field_optBinaryVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, -23>(__fbthrift_field_optStringVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -22>(__fbthrift_field_optDoubleVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -21>(__fbthrift_field_optFloatVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -20>(__fbthrift_field_optI64Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -19>(__fbthrift_field_optI32Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -18>(__fbthrift_field_optI16Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -17>(__fbthrift_field_optByteVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BoolPatchAdapter, -16>(__fbthrift_field_optBoolVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, -15>(__fbthrift_field_timeVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, -14>(__fbthrift_field_durationVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, -13>(__fbthrift_field_lateStructVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, -12>(__fbthrift_field_unionVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, -11>(__fbthrift_field_structVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, -10>(__fbthrift_field_enumVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BinaryPatchAdapter, -9>(__fbthrift_field_binaryVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, -8>(__fbthrift_field_stringVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -7>(__fbthrift_field_doubleVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -6>(__fbthrift_field_floatVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -5>(__fbthrift_field_i64Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -4>(__fbthrift_field_i32Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -3>(__fbthrift_field_i16Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, -2>(__fbthrift_field_byteVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BoolPatchAdapter, -1>(__fbthrift_field_boolVal, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
  __isset.set(folly::index_constant<11>(), true);
  __isset.set(folly::index_constant<12>(), true);
  __isset.set(folly::index_constant<13>(), true);
  __isset.set(folly::index_constant<14>(), true);
  __isset.set(folly::index_constant<15>(), true);
  __isset.set(folly::index_constant<16>(), true);
  __isset.set(folly::index_constant<17>(), true);
  __isset.set(folly::index_constant<18>(), true);
  __isset.set(folly::index_constant<19>(), true);
  __isset.set(folly::index_constant<20>(), true);
  __isset.set(folly::index_constant<21>(), true);
  __isset.set(folly::index_constant<22>(), true);
  __isset.set(folly::index_constant<23>(), true);
  __isset.set(folly::index_constant<24>(), true);
  __isset.set(folly::index_constant<25>(), true);
  __isset.set(folly::index_constant<26>(), true);
  __isset.set(folly::index_constant<27>(), true);
  __isset.set(folly::index_constant<28>(), true);
  __isset.set(folly::index_constant<29>(), true);
  __isset.set(folly::index_constant<30>(), true);
  __isset.set(folly::index_constant<31>(), true);
}


void MyStructFieldPatchStruct::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::MapPatchAdapter, -32>(__fbthrift_field_mapMap, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::ListPatchAdapter, -31>(__fbthrift_field_listMap, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::MapPatchAdapter, -30>(__fbthrift_field_optMapVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::SetPatchAdapter, -29>(__fbthrift_field_optSetVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::ListPatchAdapter, -28>(__fbthrift_field_optListVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::StructPatchAdapter, -27>(__fbthrift_field_optLateStructVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::StructPatchAdapter, -26>(__fbthrift_field_optStructVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::AssignPatchAdapter, -25>(__fbthrift_field_optEnumVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::BinaryPatchAdapter, -24>(__fbthrift_field_optBinaryVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::StringPatchAdapter, -23>(__fbthrift_field_optStringVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::NumberPatchAdapter, -22>(__fbthrift_field_optDoubleVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::NumberPatchAdapter, -21>(__fbthrift_field_optFloatVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::NumberPatchAdapter, -20>(__fbthrift_field_optI64Val, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::NumberPatchAdapter, -19>(__fbthrift_field_optI32Val, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::NumberPatchAdapter, -18>(__fbthrift_field_optI16Val, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::NumberPatchAdapter, -17>(__fbthrift_field_optByteVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::BoolPatchAdapter, -16>(__fbthrift_field_optBoolVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::AssignPatchAdapter, -15>(__fbthrift_field_timeVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::AssignPatchAdapter, -14>(__fbthrift_field_durationVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::StructPatchAdapter, -13>(__fbthrift_field_lateStructVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::UnionPatchAdapter, -12>(__fbthrift_field_unionVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::StructPatchAdapter, -11>(__fbthrift_field_structVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::AssignPatchAdapter, -10>(__fbthrift_field_enumVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::BinaryPatchAdapter, -9>(__fbthrift_field_binaryVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::StringPatchAdapter, -8>(__fbthrift_field_stringVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::NumberPatchAdapter, -7>(__fbthrift_field_doubleVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::NumberPatchAdapter, -6>(__fbthrift_field_floatVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::NumberPatchAdapter, -5>(__fbthrift_field_i64Val, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::NumberPatchAdapter, -4>(__fbthrift_field_i32Val, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::NumberPatchAdapter, -3>(__fbthrift_field_i16Val, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::NumberPatchAdapter, -2>(__fbthrift_field_byteVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::BoolPatchAdapter, -1>(__fbthrift_field_boolVal, *this);
  __isset = {};
}

void MyStructFieldPatchStruct::__fbthrift_clear_terse_fields() {
}

bool MyStructFieldPatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyStructFieldPatchStruct::operator==(FOLLY_MAYBE_UNUSED const MyStructFieldPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::MapPatchAdapter>(lhs.__fbthrift_field_mapMap, rhs.__fbthrift_field_mapMap)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::ListPatchAdapter>(lhs.__fbthrift_field_listMap, rhs.__fbthrift_field_listMap)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::MapPatchAdapter>(lhs.__fbthrift_field_optMapVal, rhs.__fbthrift_field_optMapVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::SetPatchAdapter>(lhs.__fbthrift_field_optSetVal, rhs.__fbthrift_field_optSetVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::ListPatchAdapter>(lhs.__fbthrift_field_optListVal, rhs.__fbthrift_field_optListVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StructPatchAdapter>(lhs.__fbthrift_field_optLateStructVal, rhs.__fbthrift_field_optLateStructVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StructPatchAdapter>(lhs.__fbthrift_field_optStructVal, rhs.__fbthrift_field_optStructVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::AssignPatchAdapter>(lhs.__fbthrift_field_optEnumVal, rhs.__fbthrift_field_optEnumVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::BinaryPatchAdapter>(lhs.__fbthrift_field_optBinaryVal, rhs.__fbthrift_field_optBinaryVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StringPatchAdapter>(lhs.__fbthrift_field_optStringVal, rhs.__fbthrift_field_optStringVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_optDoubleVal, rhs.__fbthrift_field_optDoubleVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_optFloatVal, rhs.__fbthrift_field_optFloatVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_optI64Val, rhs.__fbthrift_field_optI64Val)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_optI32Val, rhs.__fbthrift_field_optI32Val)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_optI16Val, rhs.__fbthrift_field_optI16Val)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_optByteVal, rhs.__fbthrift_field_optByteVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::BoolPatchAdapter>(lhs.__fbthrift_field_optBoolVal, rhs.__fbthrift_field_optBoolVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::AssignPatchAdapter>(lhs.__fbthrift_field_timeVal, rhs.__fbthrift_field_timeVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::AssignPatchAdapter>(lhs.__fbthrift_field_durationVal, rhs.__fbthrift_field_durationVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StructPatchAdapter>(lhs.__fbthrift_field_lateStructVal, rhs.__fbthrift_field_lateStructVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_unionVal, rhs.__fbthrift_field_unionVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StructPatchAdapter>(lhs.__fbthrift_field_structVal, rhs.__fbthrift_field_structVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::AssignPatchAdapter>(lhs.__fbthrift_field_enumVal, rhs.__fbthrift_field_enumVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::BinaryPatchAdapter>(lhs.__fbthrift_field_binaryVal, rhs.__fbthrift_field_binaryVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StringPatchAdapter>(lhs.__fbthrift_field_stringVal, rhs.__fbthrift_field_stringVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_doubleVal, rhs.__fbthrift_field_doubleVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_floatVal, rhs.__fbthrift_field_floatVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_i64Val, rhs.__fbthrift_field_i64Val)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_i32Val, rhs.__fbthrift_field_i32Val)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_i16Val, rhs.__fbthrift_field_i16Val)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_byteVal, rhs.__fbthrift_field_byteVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::BoolPatchAdapter>(lhs.__fbthrift_field_boolVal, rhs.__fbthrift_field_boolVal)) {
    return false;
  }
  return true;
}


void swap(FOLLY_MAYBE_UNUSED MyStructFieldPatchStruct& a, FOLLY_MAYBE_UNUSED MyStructFieldPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_mapMap, b.__fbthrift_field_mapMap);
  swap(a.__fbthrift_field_listMap, b.__fbthrift_field_listMap);
  swap(a.__fbthrift_field_optMapVal, b.__fbthrift_field_optMapVal);
  swap(a.__fbthrift_field_optSetVal, b.__fbthrift_field_optSetVal);
  swap(a.__fbthrift_field_optListVal, b.__fbthrift_field_optListVal);
  swap(a.__fbthrift_field_optLateStructVal, b.__fbthrift_field_optLateStructVal);
  swap(a.__fbthrift_field_optStructVal, b.__fbthrift_field_optStructVal);
  swap(a.__fbthrift_field_optEnumVal, b.__fbthrift_field_optEnumVal);
  swap(a.__fbthrift_field_optBinaryVal, b.__fbthrift_field_optBinaryVal);
  swap(a.__fbthrift_field_optStringVal, b.__fbthrift_field_optStringVal);
  swap(a.__fbthrift_field_optDoubleVal, b.__fbthrift_field_optDoubleVal);
  swap(a.__fbthrift_field_optFloatVal, b.__fbthrift_field_optFloatVal);
  swap(a.__fbthrift_field_optI64Val, b.__fbthrift_field_optI64Val);
  swap(a.__fbthrift_field_optI32Val, b.__fbthrift_field_optI32Val);
  swap(a.__fbthrift_field_optI16Val, b.__fbthrift_field_optI16Val);
  swap(a.__fbthrift_field_optByteVal, b.__fbthrift_field_optByteVal);
  swap(a.__fbthrift_field_optBoolVal, b.__fbthrift_field_optBoolVal);
  swap(a.__fbthrift_field_timeVal, b.__fbthrift_field_timeVal);
  swap(a.__fbthrift_field_durationVal, b.__fbthrift_field_durationVal);
  swap(a.__fbthrift_field_lateStructVal, b.__fbthrift_field_lateStructVal);
  swap(a.__fbthrift_field_unionVal, b.__fbthrift_field_unionVal);
  swap(a.__fbthrift_field_structVal, b.__fbthrift_field_structVal);
  swap(a.__fbthrift_field_enumVal, b.__fbthrift_field_enumVal);
  swap(a.__fbthrift_field_binaryVal, b.__fbthrift_field_binaryVal);
  swap(a.__fbthrift_field_stringVal, b.__fbthrift_field_stringVal);
  swap(a.__fbthrift_field_doubleVal, b.__fbthrift_field_doubleVal);
  swap(a.__fbthrift_field_floatVal, b.__fbthrift_field_floatVal);
  swap(a.__fbthrift_field_i64Val, b.__fbthrift_field_i64Val);
  swap(a.__fbthrift_field_i32Val, b.__fbthrift_field_i32Val);
  swap(a.__fbthrift_field_i16Val, b.__fbthrift_field_i16Val);
  swap(a.__fbthrift_field_byteVal, b.__fbthrift_field_byteVal);
  swap(a.__fbthrift_field_boolVal, b.__fbthrift_field_boolVal);
  swap(a.__isset, b.__isset);
}

template void MyStructFieldPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructFieldPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructFieldPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructFieldPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructFieldPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructFieldPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructFieldPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructFieldPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructField32Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructField31Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructField30Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructField29Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructField28Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::LateDefStructPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyDataPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructField25Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::BinaryPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::StringPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::DoublePatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::FloatPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::I64Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::I32Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::I16Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::BytePatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::BoolPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::TimePatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::DurationPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::LateDefStructPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyUnionPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyDataPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructField10Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::BinaryPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::StringPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::DoublePatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::FloatPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::I64Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::I32Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::I16Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::BytePatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::BoolPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructPatch";
}

const folly::StringPiece MyStructPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

MyStructPatchStruct::MyStructPatchStruct(const MyStructPatchStruct& srcObj) :
    __fbthrift_field_assign(srcObj.__fbthrift_field_assign),
    __fbthrift_field_clear(srcObj.__fbthrift_field_clear),
    __fbthrift_field_patchPrior(srcObj.__fbthrift_field_patchPrior),
    __fbthrift_field_ensure(srcObj.__fbthrift_field_ensure),
    __fbthrift_field_patch(srcObj.__fbthrift_field_patch),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

MyStructPatchStruct& MyStructPatchStruct::operator=(const MyStructPatchStruct& other) {
  MyStructPatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

MyStructPatchStruct::MyStructPatchStruct() :
      __fbthrift_field_clear() {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
}


MyStructPatchStruct::~MyStructPatchStruct() {}

MyStructPatchStruct::MyStructPatchStruct(FOLLY_MAYBE_UNUSED MyStructPatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

MyStructPatchStruct& MyStructPatchStruct::operator=(FOLLY_MAYBE_UNUSED MyStructPatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    __isset = other.__isset;
    return *this;
}


MyStructPatchStruct::MyStructPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct> assign__arg, bool clear__arg, ::test::fixtures::patch::MyStructFieldPatch patchPrior__arg, ::test::fixtures::patch::MyStruct ensure__arg, ::test::fixtures::patch::MyStructFieldPatch patch__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patch(std::move(patch__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void MyStructPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.reset();
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::clear(this->__fbthrift_field_ensure);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset = {};
}

void MyStructPatchStruct::__fbthrift_clear_terse_fields() {
}

bool MyStructPatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyStructPatchStruct::operator==(FOLLY_MAYBE_UNUSED const MyStructPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if ((!::apache::thrift::detail::pointer_equal(lhs.assign_ref(), rhs.assign_ref()))) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return false;
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return false;
  }
  return true;
}

const ::test::fixtures::patch::MyStruct& MyStructPatchStruct::get_ensure() const& {
  return __fbthrift_field_ensure;
}

::test::fixtures::patch::MyStruct MyStructPatchStruct::get_ensure() && {
  return std::move(__fbthrift_field_ensure);
}


void swap(FOLLY_MAYBE_UNUSED MyStructPatchStruct& a, FOLLY_MAYBE_UNUSED MyStructPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__isset, b.__isset);
}

template void MyStructPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructFieldPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructFieldPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::LateDefStructFieldPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::LateDefStructFieldPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* LateDefStructFieldPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/LateDefStructFieldPatch";
}

const folly::StringPiece LateDefStructFieldPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<LateDefStructFieldPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}


LateDefStructFieldPatchStruct::LateDefStructFieldPatchStruct(apache::thrift::FragileConstructor) {}


void LateDefStructFieldPatchStruct::__fbthrift_clear() {
  // clear all fields
}

void LateDefStructFieldPatchStruct::__fbthrift_clear_terse_fields() {
}

bool LateDefStructFieldPatchStruct::__fbthrift_is_empty() const {
  return true;
}

bool LateDefStructFieldPatchStruct::operator==(FOLLY_MAYBE_UNUSED const LateDefStructFieldPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  return true;
}

bool LateDefStructFieldPatchStruct::operator<(FOLLY_MAYBE_UNUSED const LateDefStructFieldPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  return false;
}


void swap(FOLLY_MAYBE_UNUSED LateDefStructFieldPatchStruct& a, FOLLY_MAYBE_UNUSED LateDefStructFieldPatchStruct& b) {
  using ::std::swap;
}

template void LateDefStructFieldPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t LateDefStructFieldPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t LateDefStructFieldPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t LateDefStructFieldPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void LateDefStructFieldPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t LateDefStructFieldPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t LateDefStructFieldPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t LateDefStructFieldPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::LateDefStructPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::LateDefStructPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* LateDefStructPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/LateDefStructPatch";
}

const folly::StringPiece LateDefStructPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<LateDefStructPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

LateDefStructPatchStruct::LateDefStructPatchStruct(const LateDefStructPatchStruct& srcObj) :
    __fbthrift_field_assign(srcObj.__fbthrift_field_assign),
    __fbthrift_field_clear(srcObj.__fbthrift_field_clear),
    __fbthrift_field_patchPrior(srcObj.__fbthrift_field_patchPrior),
    __fbthrift_field_ensure(srcObj.__fbthrift_field_ensure),
    __fbthrift_field_patch(srcObj.__fbthrift_field_patch),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

LateDefStructPatchStruct& LateDefStructPatchStruct::operator=(const LateDefStructPatchStruct& other) {
  LateDefStructPatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

LateDefStructPatchStruct::LateDefStructPatchStruct() :
      __fbthrift_field_clear() {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
}


LateDefStructPatchStruct::~LateDefStructPatchStruct() {}

LateDefStructPatchStruct::LateDefStructPatchStruct(FOLLY_MAYBE_UNUSED LateDefStructPatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

LateDefStructPatchStruct& LateDefStructPatchStruct::operator=(FOLLY_MAYBE_UNUSED LateDefStructPatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    __isset = other.__isset;
    return *this;
}


LateDefStructPatchStruct::LateDefStructPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct> assign__arg, bool clear__arg, ::test::fixtures::patch::LateDefStructFieldPatch patchPrior__arg, ::test::fixtures::patch::LateDefStruct ensure__arg, ::test::fixtures::patch::LateDefStructFieldPatch patch__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patch(std::move(patch__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void LateDefStructPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_clear = bool();
  __isset = {};
}

void LateDefStructPatchStruct::__fbthrift_clear_terse_fields() {
}

bool LateDefStructPatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool LateDefStructPatchStruct::operator==(FOLLY_MAYBE_UNUSED const LateDefStructPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if ((!::apache::thrift::detail::pointer_equal(lhs.assign_ref(), rhs.assign_ref()))) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return false;
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return false;
  }
  return true;
}

bool LateDefStructPatchStruct::operator<(FOLLY_MAYBE_UNUSED const LateDefStructPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if ((!::apache::thrift::detail::pointer_equal(lhs.assign_ref(), rhs.assign_ref()))) {
    return ::apache::thrift::detail::pointer_less(lhs.assign_ref(), rhs.assign_ref());
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior);
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return lhs.ensure_ref() < rhs.ensure_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch);
  }
  return false;
}

const ::test::fixtures::patch::LateDefStruct& LateDefStructPatchStruct::get_ensure() const& {
  return __fbthrift_field_ensure;
}

::test::fixtures::patch::LateDefStruct LateDefStructPatchStruct::get_ensure() && {
  return std::move(__fbthrift_field_ensure);
}


void swap(FOLLY_MAYBE_UNUSED LateDefStructPatchStruct& a, FOLLY_MAYBE_UNUSED LateDefStructPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__isset, b.__isset);
}

template void LateDefStructPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t LateDefStructPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t LateDefStructPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t LateDefStructPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void LateDefStructPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t LateDefStructPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t LateDefStructPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t LateDefStructPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        LateDefStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::LateDefStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        LateDefStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::LateDefStructFieldPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        LateDefStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::LateDefStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        LateDefStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::LateDefStructFieldPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::RecursiveField1PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::RecursiveField1PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* RecursiveField1PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/RecursiveField1Patch";
}

const folly::StringPiece RecursiveField1PatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<RecursiveField1PatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

RecursiveField1PatchStruct::RecursiveField1PatchStruct(const RecursiveField1PatchStruct&) = default;
RecursiveField1PatchStruct& RecursiveField1PatchStruct::operator=(const RecursiveField1PatchStruct&) = default;
RecursiveField1PatchStruct::RecursiveField1PatchStruct(FOLLY_MAYBE_UNUSED RecursiveField1PatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __isset(other.__isset) {
}

RecursiveField1PatchStruct& RecursiveField1PatchStruct::operator=(FOLLY_MAYBE_UNUSED RecursiveField1PatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    __isset = other.__isset;
    return *this;
}


RecursiveField1PatchStruct::RecursiveField1PatchStruct(apache::thrift::FragileConstructor, ::std::map<::std::string, ::test::fixtures::patch::Recursive> assign__arg, bool clear__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}


void RecursiveField1PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.clear();
  this->__fbthrift_field_clear = bool();
  __isset = {};
}

void RecursiveField1PatchStruct::__fbthrift_clear_terse_fields() {
}

bool RecursiveField1PatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool RecursiveField1PatchStruct::operator==(FOLLY_MAYBE_UNUSED const RecursiveField1PatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  return true;
}

bool RecursiveField1PatchStruct::operator<(FOLLY_MAYBE_UNUSED const RecursiveField1PatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return lhs.assign_ref() < rhs.assign_ref();
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  return false;
}

const ::std::map<::std::string, ::test::fixtures::patch::Recursive>* RecursiveField1PatchStruct::get_assign() const& {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

::std::map<::std::string, ::test::fixtures::patch::Recursive>* RecursiveField1PatchStruct::get_assign() & {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}


void swap(FOLLY_MAYBE_UNUSED RecursiveField1PatchStruct& a, FOLLY_MAYBE_UNUSED RecursiveField1PatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__isset, b.__isset);
}

template void RecursiveField1PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t RecursiveField1PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t RecursiveField1PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t RecursiveField1PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void RecursiveField1PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t RecursiveField1PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t RecursiveField1PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t RecursiveField1PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::RecursiveFieldPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::RecursiveFieldPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* RecursiveFieldPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/RecursiveFieldPatch";
}

const folly::StringPiece RecursiveFieldPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<RecursiveFieldPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

RecursiveFieldPatchStruct::RecursiveFieldPatchStruct(const RecursiveFieldPatchStruct& srcObj) :
    __fbthrift_field_nodes(srcObj.__fbthrift_field_nodes),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, -1>(__fbthrift_field_nodes, *this);
}

RecursiveFieldPatchStruct& RecursiveFieldPatchStruct::operator=(const RecursiveFieldPatchStruct& other) {
  RecursiveFieldPatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

RecursiveFieldPatchStruct::RecursiveFieldPatchStruct(FOLLY_MAYBE_UNUSED RecursiveFieldPatchStruct&& other) noexcept :
    __fbthrift_field_nodes(std::move(other.__fbthrift_field_nodes)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, -1>(__fbthrift_field_nodes, *this);
}

RecursiveFieldPatchStruct& RecursiveFieldPatchStruct::operator=(FOLLY_MAYBE_UNUSED RecursiveFieldPatchStruct&& other) noexcept {
    this->__fbthrift_field_nodes = std::move(other.__fbthrift_field_nodes);
    __isset = other.__isset;
    return *this;
}


RecursiveFieldPatchStruct::RecursiveFieldPatchStruct(apache::thrift::FragileConstructor, ::test::fixtures::patch::RecursiveField1Patch nodes__arg) :
    __fbthrift_field_nodes(std::move(nodes__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, -1>(__fbthrift_field_nodes, *this);
  __isset.set(folly::index_constant<0>(), true);
}


void RecursiveFieldPatchStruct::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::AssignPatchAdapter, -1>(__fbthrift_field_nodes, *this);
  __isset = {};
}

void RecursiveFieldPatchStruct::__fbthrift_clear_terse_fields() {
}

bool RecursiveFieldPatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool RecursiveFieldPatchStruct::operator==(FOLLY_MAYBE_UNUSED const RecursiveFieldPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::AssignPatchAdapter>(lhs.__fbthrift_field_nodes, rhs.__fbthrift_field_nodes)) {
    return false;
  }
  return true;
}

bool RecursiveFieldPatchStruct::operator<(FOLLY_MAYBE_UNUSED const RecursiveFieldPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::AssignPatchAdapter>(lhs.__fbthrift_field_nodes, rhs.__fbthrift_field_nodes)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::AssignPatchAdapter>(lhs.__fbthrift_field_nodes, rhs.__fbthrift_field_nodes);
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED RecursiveFieldPatchStruct& a, FOLLY_MAYBE_UNUSED RecursiveFieldPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_nodes, b.__fbthrift_field_nodes);
  swap(a.__isset, b.__isset);
}

template void RecursiveFieldPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t RecursiveFieldPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t RecursiveFieldPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t RecursiveFieldPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void RecursiveFieldPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t RecursiveFieldPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t RecursiveFieldPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t RecursiveFieldPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        RecursiveFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::RecursiveField1Patch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::RecursivePatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::RecursivePatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* RecursivePatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/RecursivePatch";
}

const folly::StringPiece RecursivePatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<RecursivePatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

RecursivePatchStruct::RecursivePatchStruct(const RecursivePatchStruct& srcObj) :
    __fbthrift_field_assign(srcObj.__fbthrift_field_assign),
    __fbthrift_field_clear(srcObj.__fbthrift_field_clear),
    __fbthrift_field_patchPrior(srcObj.__fbthrift_field_patchPrior),
    __fbthrift_field_ensure(srcObj.__fbthrift_field_ensure),
    __fbthrift_field_patch(srcObj.__fbthrift_field_patch),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

RecursivePatchStruct& RecursivePatchStruct::operator=(const RecursivePatchStruct& other) {
  RecursivePatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

RecursivePatchStruct::RecursivePatchStruct() :
      __fbthrift_field_clear() {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
}


RecursivePatchStruct::~RecursivePatchStruct() {}

RecursivePatchStruct::RecursivePatchStruct(FOLLY_MAYBE_UNUSED RecursivePatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

RecursivePatchStruct& RecursivePatchStruct::operator=(FOLLY_MAYBE_UNUSED RecursivePatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    __isset = other.__isset;
    return *this;
}


RecursivePatchStruct::RecursivePatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Recursive> assign__arg, bool clear__arg, ::test::fixtures::patch::RecursiveFieldPatch patchPrior__arg, ::test::fixtures::patch::Recursive ensure__arg, ::test::fixtures::patch::RecursiveFieldPatch patch__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patch(std::move(patch__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void RecursivePatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.reset();
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::clear(this->__fbthrift_field_ensure);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset = {};
}

void RecursivePatchStruct::__fbthrift_clear_terse_fields() {
}

bool RecursivePatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool RecursivePatchStruct::operator==(FOLLY_MAYBE_UNUSED const RecursivePatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if ((!::apache::thrift::detail::pointer_equal(lhs.assign_ref(), rhs.assign_ref()))) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return false;
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return false;
  }
  return true;
}

bool RecursivePatchStruct::operator<(FOLLY_MAYBE_UNUSED const RecursivePatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if ((!::apache::thrift::detail::pointer_equal(lhs.assign_ref(), rhs.assign_ref()))) {
    return ::apache::thrift::detail::pointer_less(lhs.assign_ref(), rhs.assign_ref());
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior);
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return lhs.ensure_ref() < rhs.ensure_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch);
  }
  return false;
}

const ::test::fixtures::patch::Recursive& RecursivePatchStruct::get_ensure() const& {
  return __fbthrift_field_ensure;
}

::test::fixtures::patch::Recursive RecursivePatchStruct::get_ensure() && {
  return std::move(__fbthrift_field_ensure);
}


void swap(FOLLY_MAYBE_UNUSED RecursivePatchStruct& a, FOLLY_MAYBE_UNUSED RecursivePatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__isset, b.__isset);
}

template void RecursivePatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t RecursivePatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t RecursivePatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t RecursivePatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void RecursivePatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t RecursivePatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t RecursivePatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t RecursivePatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        RecursivePatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::Recursive>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        RecursivePatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::RecursiveFieldPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        RecursivePatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::Recursive>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        RecursivePatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::RecursiveFieldPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::BarFieldPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::BarFieldPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* BarFieldPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/BarFieldPatch";
}

const folly::StringPiece BarFieldPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<BarFieldPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

BarFieldPatchStruct::BarFieldPatchStruct(const BarFieldPatchStruct& srcObj) :
    __fbthrift_field_loop(srcObj.__fbthrift_field_loop),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, -1>(__fbthrift_field_loop, *this);
}

BarFieldPatchStruct& BarFieldPatchStruct::operator=(const BarFieldPatchStruct& other) {
  BarFieldPatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

BarFieldPatchStruct::BarFieldPatchStruct(FOLLY_MAYBE_UNUSED BarFieldPatchStruct&& other) noexcept :
    __fbthrift_field_loop(std::move(other.__fbthrift_field_loop)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, -1>(__fbthrift_field_loop, *this);
}

BarFieldPatchStruct& BarFieldPatchStruct::operator=(FOLLY_MAYBE_UNUSED BarFieldPatchStruct&& other) noexcept {
    this->__fbthrift_field_loop = std::move(other.__fbthrift_field_loop);
    __isset = other.__isset;
    return *this;
}


BarFieldPatchStruct::BarFieldPatchStruct(apache::thrift::FragileConstructor, ::test::fixtures::patch::LoopPatch loop__arg) :
    __fbthrift_field_loop(std::move(loop__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, -1>(__fbthrift_field_loop, *this);
  __isset.set(folly::index_constant<0>(), true);
}


void BarFieldPatchStruct::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::AssignPatchAdapter, -1>(__fbthrift_field_loop, *this);
  __isset = {};
}

void BarFieldPatchStruct::__fbthrift_clear_terse_fields() {
}

bool BarFieldPatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool BarFieldPatchStruct::operator==(FOLLY_MAYBE_UNUSED const BarFieldPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::AssignPatchAdapter>(lhs.__fbthrift_field_loop, rhs.__fbthrift_field_loop)) {
    return false;
  }
  return true;
}

bool BarFieldPatchStruct::operator<(FOLLY_MAYBE_UNUSED const BarFieldPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::AssignPatchAdapter>(lhs.__fbthrift_field_loop, rhs.__fbthrift_field_loop)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::AssignPatchAdapter>(lhs.__fbthrift_field_loop, rhs.__fbthrift_field_loop);
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED BarFieldPatchStruct& a, FOLLY_MAYBE_UNUSED BarFieldPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_loop, b.__fbthrift_field_loop);
  swap(a.__isset, b.__isset);
}

template void BarFieldPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t BarFieldPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t BarFieldPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t BarFieldPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void BarFieldPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t BarFieldPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t BarFieldPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t BarFieldPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        BarFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::LoopPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::BarPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::BarPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* BarPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/BarPatch";
}

const folly::StringPiece BarPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<BarPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

BarPatchStruct::BarPatchStruct(const BarPatchStruct& srcObj) :
    __fbthrift_field_assign(srcObj.__fbthrift_field_assign),
    __fbthrift_field_clear(srcObj.__fbthrift_field_clear),
    __fbthrift_field_patchPrior(srcObj.__fbthrift_field_patchPrior),
    __fbthrift_field_ensure(srcObj.__fbthrift_field_ensure),
    __fbthrift_field_patch(srcObj.__fbthrift_field_patch),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

BarPatchStruct& BarPatchStruct::operator=(const BarPatchStruct& other) {
  BarPatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

BarPatchStruct::BarPatchStruct() :
      __fbthrift_field_clear() {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
}


BarPatchStruct::~BarPatchStruct() {}

BarPatchStruct::BarPatchStruct(FOLLY_MAYBE_UNUSED BarPatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

BarPatchStruct& BarPatchStruct::operator=(FOLLY_MAYBE_UNUSED BarPatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    __isset = other.__isset;
    return *this;
}


BarPatchStruct::BarPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Bar> assign__arg, bool clear__arg, ::test::fixtures::patch::BarFieldPatch patchPrior__arg, ::test::fixtures::patch::Bar ensure__arg, ::test::fixtures::patch::BarFieldPatch patch__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patch(std::move(patch__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void BarPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.reset();
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::clear(this->__fbthrift_field_ensure);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset = {};
}

void BarPatchStruct::__fbthrift_clear_terse_fields() {
}

bool BarPatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool BarPatchStruct::operator==(FOLLY_MAYBE_UNUSED const BarPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if ((!::apache::thrift::detail::pointer_equal(lhs.assign_ref(), rhs.assign_ref()))) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return false;
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return false;
  }
  return true;
}

bool BarPatchStruct::operator<(FOLLY_MAYBE_UNUSED const BarPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if ((!::apache::thrift::detail::pointer_equal(lhs.assign_ref(), rhs.assign_ref()))) {
    return ::apache::thrift::detail::pointer_less(lhs.assign_ref(), rhs.assign_ref());
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior);
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return lhs.ensure_ref() < rhs.ensure_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch);
  }
  return false;
}

const ::test::fixtures::patch::Bar& BarPatchStruct::get_ensure() const& {
  return __fbthrift_field_ensure;
}

::test::fixtures::patch::Bar BarPatchStruct::get_ensure() && {
  return std::move(__fbthrift_field_ensure);
}


void swap(FOLLY_MAYBE_UNUSED BarPatchStruct& a, FOLLY_MAYBE_UNUSED BarPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__isset, b.__isset);
}

template void BarPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t BarPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t BarPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t BarPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void BarPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t BarPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t BarPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t BarPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        BarPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::Bar>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        BarPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::BarFieldPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        BarPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::Bar>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        BarPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::BarFieldPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::LoopFieldPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::LoopFieldPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* LoopFieldPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/LoopFieldPatch";
}

const folly::StringPiece LoopFieldPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<LoopFieldPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

LoopFieldPatchStruct::LoopFieldPatchStruct(const LoopFieldPatchStruct& srcObj) :
    __fbthrift_field_bar(srcObj.__fbthrift_field_bar),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, -1>(__fbthrift_field_bar, *this);
}

LoopFieldPatchStruct& LoopFieldPatchStruct::operator=(const LoopFieldPatchStruct& other) {
  LoopFieldPatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

LoopFieldPatchStruct::LoopFieldPatchStruct(FOLLY_MAYBE_UNUSED LoopFieldPatchStruct&& other) noexcept :
    __fbthrift_field_bar(std::move(other.__fbthrift_field_bar)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, -1>(__fbthrift_field_bar, *this);
}

LoopFieldPatchStruct& LoopFieldPatchStruct::operator=(FOLLY_MAYBE_UNUSED LoopFieldPatchStruct&& other) noexcept {
    this->__fbthrift_field_bar = std::move(other.__fbthrift_field_bar);
    __isset = other.__isset;
    return *this;
}


LoopFieldPatchStruct::LoopFieldPatchStruct(apache::thrift::FragileConstructor, ::test::fixtures::patch::BarPatch bar__arg) :
    __fbthrift_field_bar(std::move(bar__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, -1>(__fbthrift_field_bar, *this);
  __isset.set(folly::index_constant<0>(), true);
}


void LoopFieldPatchStruct::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::StructPatchAdapter, -1>(__fbthrift_field_bar, *this);
  __isset = {};
}

void LoopFieldPatchStruct::__fbthrift_clear_terse_fields() {
}

bool LoopFieldPatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool LoopFieldPatchStruct::operator==(FOLLY_MAYBE_UNUSED const LoopFieldPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StructPatchAdapter>(lhs.__fbthrift_field_bar, rhs.__fbthrift_field_bar)) {
    return false;
  }
  return true;
}

bool LoopFieldPatchStruct::operator<(FOLLY_MAYBE_UNUSED const LoopFieldPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StructPatchAdapter>(lhs.__fbthrift_field_bar, rhs.__fbthrift_field_bar)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::StructPatchAdapter>(lhs.__fbthrift_field_bar, rhs.__fbthrift_field_bar);
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED LoopFieldPatchStruct& a, FOLLY_MAYBE_UNUSED LoopFieldPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_bar, b.__fbthrift_field_bar);
  swap(a.__isset, b.__isset);
}

template void LoopFieldPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t LoopFieldPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t LoopFieldPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t LoopFieldPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void LoopFieldPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t LoopFieldPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t LoopFieldPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t LoopFieldPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        LoopFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::BarPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::LoopPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::LoopPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* LoopPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/LoopPatch";
}

const folly::StringPiece LoopPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<LoopPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

LoopPatchStruct::LoopPatchStruct(const LoopPatchStruct&) = default;
LoopPatchStruct& LoopPatchStruct::operator=(const LoopPatchStruct&) = default;
LoopPatchStruct::LoopPatchStruct(FOLLY_MAYBE_UNUSED LoopPatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __isset(other.__isset) {
}

LoopPatchStruct& LoopPatchStruct::operator=(FOLLY_MAYBE_UNUSED LoopPatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    __isset = other.__isset;
    return *this;
}


LoopPatchStruct::LoopPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Loop> assign__arg, bool clear__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void LoopPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.reset();
  this->__fbthrift_field_clear = bool();
  __isset = {};
}

void LoopPatchStruct::__fbthrift_clear_terse_fields() {
}

bool LoopPatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool LoopPatchStruct::operator==(FOLLY_MAYBE_UNUSED const LoopPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if ((!::apache::thrift::detail::pointer_equal(lhs.assign_ref(), rhs.assign_ref()))) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  return true;
}

bool LoopPatchStruct::operator<(FOLLY_MAYBE_UNUSED const LoopPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if ((!::apache::thrift::detail::pointer_equal(lhs.assign_ref(), rhs.assign_ref()))) {
    return ::apache::thrift::detail::pointer_less(lhs.assign_ref(), rhs.assign_ref());
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED LoopPatchStruct& a, FOLLY_MAYBE_UNUSED LoopPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__isset, b.__isset);
}

template void LoopPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t LoopPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t LoopPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t LoopPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void LoopPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t LoopPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t LoopPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t LoopPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        LoopPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::Loop>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace test { namespace fixtures { namespace patch { namespace {
FOLLY_MAYBE_UNUSED FOLLY_ERASE void validateAdapters() {
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StringPatchAdapter, 1, ::apache::thrift::op::StringPatchStruct, ::test::fixtures::patch::MyDataFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter, 2, ::apache::thrift::op::I32PatchStruct, ::test::fixtures::patch::MyDataFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter, 3, ::test::fixtures::patch::MyDataFieldPatchStruct, ::test::fixtures::patch::MyDataPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter, 6, ::test::fixtures::patch::MyDataFieldPatchStruct, ::test::fixtures::patch::MyDataPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::BinaryPatchAdapter, 1, ::apache::thrift::op::BinaryPatchStruct, ::test::fixtures::patch::InnerUnionFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter, 3, ::test::fixtures::patch::InnerUnionFieldPatchStruct, ::test::fixtures::patch::InnerUnionPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter, 6, ::test::fixtures::patch::InnerUnionFieldPatchStruct, ::test::fixtures::patch::InnerUnionPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StringPatchAdapter, 1, ::apache::thrift::op::StringPatchStruct, ::test::fixtures::patch::MyUnionFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter, 2, ::apache::thrift::op::I32PatchStruct, ::test::fixtures::patch::MyUnionFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::UnionPatchAdapter, 3, ::test::fixtures::patch::InnerUnionPatchStruct, ::test::fixtures::patch::MyUnionFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter, 3, ::test::fixtures::patch::MyUnionFieldPatchStruct, ::test::fixtures::patch::MyUnionPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter, 6, ::test::fixtures::patch::MyUnionFieldPatchStruct, ::test::fixtures::patch::MyUnionPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::MapPatchAdapter, -32, ::test::fixtures::patch::MyStructField32PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::ListPatchAdapter, -31, ::test::fixtures::patch::MyStructField31PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::MapPatchAdapter, -30, ::test::fixtures::patch::MyStructField30PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::SetPatchAdapter, -29, ::test::fixtures::patch::MyStructField29PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::ListPatchAdapter, -28, ::test::fixtures::patch::MyStructField28PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StructPatchAdapter, -27, ::test::fixtures::patch::LateDefStructPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StructPatchAdapter, -26, ::test::fixtures::patch::MyDataPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::AssignPatchAdapter, -25, ::test::fixtures::patch::MyStructField25PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::BinaryPatchAdapter, -24, ::apache::thrift::op::BinaryPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StringPatchAdapter, -23, ::apache::thrift::op::StringPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter, -22, ::apache::thrift::op::DoublePatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter, -21, ::apache::thrift::op::FloatPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter, -20, ::apache::thrift::op::I64PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter, -19, ::apache::thrift::op::I32PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter, -18, ::apache::thrift::op::I16PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter, -17, ::apache::thrift::op::BytePatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::BoolPatchAdapter, -16, ::apache::thrift::op::BoolPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::AssignPatchAdapter, -15, ::apache::thrift::op::TimeStructPatch, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::AssignPatchAdapter, -14, ::apache::thrift::op::DurationStructPatch, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StructPatchAdapter, -13, ::test::fixtures::patch::LateDefStructPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::UnionPatchAdapter, -12, ::test::fixtures::patch::MyUnionPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StructPatchAdapter, -11, ::test::fixtures::patch::MyDataPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::AssignPatchAdapter, -10, ::test::fixtures::patch::MyStructField10PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::BinaryPatchAdapter, -9, ::apache::thrift::op::BinaryPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StringPatchAdapter, -8, ::apache::thrift::op::StringPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter, -7, ::apache::thrift::op::DoublePatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter, -6, ::apache::thrift::op::FloatPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter, -5, ::apache::thrift::op::I64PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter, -4, ::apache::thrift::op::I32PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter, -3, ::apache::thrift::op::I16PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter, -2, ::apache::thrift::op::BytePatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::BoolPatchAdapter, -1, ::apache::thrift::op::BoolPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter, 3, ::test::fixtures::patch::MyStructFieldPatchStruct, ::test::fixtures::patch::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter, 6, ::test::fixtures::patch::MyStructFieldPatchStruct, ::test::fixtures::patch::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter, 3, ::test::fixtures::patch::LateDefStructFieldPatchStruct, ::test::fixtures::patch::LateDefStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter, 6, ::test::fixtures::patch::LateDefStructFieldPatchStruct, ::test::fixtures::patch::LateDefStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::AssignPatchAdapter, -1, ::test::fixtures::patch::RecursiveField1PatchStruct, ::test::fixtures::patch::RecursiveFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter, 3, ::test::fixtures::patch::RecursiveFieldPatchStruct, ::test::fixtures::patch::RecursivePatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter, 6, ::test::fixtures::patch::RecursiveFieldPatchStruct, ::test::fixtures::patch::RecursivePatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::AssignPatchAdapter, -1, ::test::fixtures::patch::LoopPatchStruct, ::test::fixtures::patch::BarFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter, 3, ::test::fixtures::patch::BarFieldPatchStruct, ::test::fixtures::patch::BarPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter, 6, ::test::fixtures::patch::BarFieldPatchStruct, ::test::fixtures::patch::BarPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StructPatchAdapter, -1, ::test::fixtures::patch::BarPatchStruct, ::test::fixtures::patch::LoopFieldPatchStruct>();
}
}}}} // test::fixtures::patch
