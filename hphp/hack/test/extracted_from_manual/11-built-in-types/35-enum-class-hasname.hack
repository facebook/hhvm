// @generated by hh_manual from manual/hack/11-built-in-types/35-enum-class.md
// @codegen-command : buck run fbcode//hphp/hack/src/hh_manual:hh_manual extract fbcode/hphp/hack/manual/hack/
// Some class definitions to make a more involved example
interface IHasName {
  public function name(): string;
}

class HasName implements IHasName {
  public function __construct(private string $name)[] {}
  public function name(): string {
    return $this->name;
  }
}

class ConstName implements IHasName {
  public function name(): string {
    return "bar";
  }
}

// enum class which base type is the IHasName interface: each enum value
// can be any subtype of IHasName, here we see HasName and ConstName
enum class Names: IHasName {
  HasName Hello = new HasName('hello');
  HasName World = new HasName('world');
  ConstName Bar = new ConstName();
}

// abstract enum class with some abstract members
abstract enum class AbstractNames: IHasName {
  abstract HasName Foo;
  HasName Bar = new HasName('bar');
}

enum class ConcreteNames: IHasName extends AbstractNames {
  HasName Foo = new HasName('foo'); // one must provide all the abstract members
  // Bar is inherited from AbstractNames
}
