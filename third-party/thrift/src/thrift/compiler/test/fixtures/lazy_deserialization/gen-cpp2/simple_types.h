/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/lazy_deserialization/src/simple.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>


#include "thrift/annotation/gen-cpp2/cpp_types.h"

namespace apache {
namespace thrift {
namespace ident {
struct field1;
struct field2;
struct field3;
struct field4;
struct field1;
struct field2;
struct field3;
struct field4;
struct field1;
struct field2;
struct field3;
struct field4;
struct field1;
struct field2;
struct field3;
struct field4;
struct field1;
struct field2;
struct field3;
struct field4;
struct serialized_data_size;
struct field1;
struct field2;
struct field3;
struct field4;
struct field_id_to_size;
struct serialized_data_size;
struct field1;
struct field2;
struct field3;
struct field4;
struct field_id_to_size;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_field1
#define APACHE_THRIFT_ACCESSOR_field1
APACHE_THRIFT_DEFINE_ACCESSOR(field1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field2
#define APACHE_THRIFT_ACCESSOR_field2
APACHE_THRIFT_DEFINE_ACCESSOR(field2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field3
#define APACHE_THRIFT_ACCESSOR_field3
APACHE_THRIFT_DEFINE_ACCESSOR(field3);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field4
#define APACHE_THRIFT_ACCESSOR_field4
APACHE_THRIFT_DEFINE_ACCESSOR(field4);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field1
#define APACHE_THRIFT_ACCESSOR_field1
APACHE_THRIFT_DEFINE_ACCESSOR(field1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field2
#define APACHE_THRIFT_ACCESSOR_field2
APACHE_THRIFT_DEFINE_ACCESSOR(field2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field3
#define APACHE_THRIFT_ACCESSOR_field3
APACHE_THRIFT_DEFINE_ACCESSOR(field3);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field4
#define APACHE_THRIFT_ACCESSOR_field4
APACHE_THRIFT_DEFINE_ACCESSOR(field4);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field1
#define APACHE_THRIFT_ACCESSOR_field1
APACHE_THRIFT_DEFINE_ACCESSOR(field1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field2
#define APACHE_THRIFT_ACCESSOR_field2
APACHE_THRIFT_DEFINE_ACCESSOR(field2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field3
#define APACHE_THRIFT_ACCESSOR_field3
APACHE_THRIFT_DEFINE_ACCESSOR(field3);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field4
#define APACHE_THRIFT_ACCESSOR_field4
APACHE_THRIFT_DEFINE_ACCESSOR(field4);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field1
#define APACHE_THRIFT_ACCESSOR_field1
APACHE_THRIFT_DEFINE_ACCESSOR(field1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field2
#define APACHE_THRIFT_ACCESSOR_field2
APACHE_THRIFT_DEFINE_ACCESSOR(field2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field3
#define APACHE_THRIFT_ACCESSOR_field3
APACHE_THRIFT_DEFINE_ACCESSOR(field3);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field4
#define APACHE_THRIFT_ACCESSOR_field4
APACHE_THRIFT_DEFINE_ACCESSOR(field4);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field1
#define APACHE_THRIFT_ACCESSOR_field1
APACHE_THRIFT_DEFINE_ACCESSOR(field1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field2
#define APACHE_THRIFT_ACCESSOR_field2
APACHE_THRIFT_DEFINE_ACCESSOR(field2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field3
#define APACHE_THRIFT_ACCESSOR_field3
APACHE_THRIFT_DEFINE_ACCESSOR(field3);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field4
#define APACHE_THRIFT_ACCESSOR_field4
APACHE_THRIFT_DEFINE_ACCESSOR(field4);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_serialized_data_size
#define APACHE_THRIFT_ACCESSOR_serialized_data_size
APACHE_THRIFT_DEFINE_ACCESSOR(serialized_data_size);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field1
#define APACHE_THRIFT_ACCESSOR_field1
APACHE_THRIFT_DEFINE_ACCESSOR(field1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field2
#define APACHE_THRIFT_ACCESSOR_field2
APACHE_THRIFT_DEFINE_ACCESSOR(field2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field3
#define APACHE_THRIFT_ACCESSOR_field3
APACHE_THRIFT_DEFINE_ACCESSOR(field3);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field4
#define APACHE_THRIFT_ACCESSOR_field4
APACHE_THRIFT_DEFINE_ACCESSOR(field4);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field_id_to_size
#define APACHE_THRIFT_ACCESSOR_field_id_to_size
APACHE_THRIFT_DEFINE_ACCESSOR(field_id_to_size);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_serialized_data_size
#define APACHE_THRIFT_ACCESSOR_serialized_data_size
APACHE_THRIFT_DEFINE_ACCESSOR(serialized_data_size);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field1
#define APACHE_THRIFT_ACCESSOR_field1
APACHE_THRIFT_DEFINE_ACCESSOR(field1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field2
#define APACHE_THRIFT_ACCESSOR_field2
APACHE_THRIFT_DEFINE_ACCESSOR(field2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field3
#define APACHE_THRIFT_ACCESSOR_field3
APACHE_THRIFT_DEFINE_ACCESSOR(field3);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field4
#define APACHE_THRIFT_ACCESSOR_field4
APACHE_THRIFT_DEFINE_ACCESSOR(field4);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field_id_to_size
#define APACHE_THRIFT_ACCESSOR_field_id_to_size
APACHE_THRIFT_DEFINE_ACCESSOR(field_id_to_size);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums

// END declare_enums
// BEGIN forward_declare
namespace apache { namespace thrift { namespace test {
class Foo;
class LazyFoo;
class OptionalFoo;
class OptionalLazyFoo;
class LazyCppRef;
class IndexedFoo;
class OptionalIndexedFoo;
class Empty;
}}} // apache::thrift::test
// END forward_declare
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace apache { namespace thrift { namespace test {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;


class Foo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::field1,
    ::apache::thrift::ident::field2,
    ::apache::thrift::ident::field3,
    ::apache::thrift::ident::field4
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 4;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Foo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  Foo() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Foo(apache::thrift::FragileConstructor, ::std::vector<double> field1__arg, ::std::vector<::std::int32_t> field2__arg, ::std::vector<double> field3__arg, ::std::vector<::std::int32_t> field4__arg);

  Foo(Foo&&) noexcept;

  Foo(const Foo& src);


  Foo& operator=(Foo&&) noexcept;
  Foo& operator=(const Foo& src);
 private:
  ::std::vector<double> __fbthrift_field_field1;
 private:
  ::std::vector<::std::int32_t> __fbthrift_field_field2;
 private:
  ::std::vector<double> __fbthrift_field_field3;
 private:
  ::std::vector<::std::int32_t> __fbthrift_field_field4;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const Foo&) const;
  bool operator<(const Foo&) const;

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field1_ref() const& {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field1_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field1_ref() & {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field1_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field1() const& {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field1() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field1() & {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field1() && {
    return {static_cast<T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field2_ref() const& {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field2_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field2_ref() & {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field2_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_field2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field2() const& {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field2() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field2() & {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field2() && {
    return {static_cast<T&&>(this->__fbthrift_field_field2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field3_ref() const& {
    return {this->__fbthrift_field_field3, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field3_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field3), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field3_ref() & {
    return {this->__fbthrift_field_field3, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field3_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_field3), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field3() const& {
    return {this->__fbthrift_field_field3, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field3() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field3), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field3() & {
    return {this->__fbthrift_field_field3, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field3() && {
    return {static_cast<T&&>(this->__fbthrift_field_field3), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field4_ref() const& {
    return {this->__fbthrift_field_field4, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field4_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field4), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field4_ref() & {
    return {this->__fbthrift_field_field4, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field4_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_field4), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field4() const& {
    return {this->__fbthrift_field_field4, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field4() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field4), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field4() & {
    return {this->__fbthrift_field_field4, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field4() && {
    return {static_cast<T&&>(this->__fbthrift_field_field4), __isset.at(3), __isset.bit(3)};
  }
  const ::std::vector<double>& get_field1() const&;
  ::std::vector<double> get_field1() &&;

  template <typename T_Foo_field1_struct_setter = ::std::vector<double>>
  [[deprecated("Use `FOO.field1_ref() = BAR;` instead of `FOO.set_field1(BAR);`")]]
  ::std::vector<double>& set_field1(T_Foo_field1_struct_setter&& field1_) {
    field1_ref() = std::forward<T_Foo_field1_struct_setter>(field1_);
    return __fbthrift_field_field1;
  }
  const ::std::vector<::std::int32_t>& get_field2() const&;
  ::std::vector<::std::int32_t> get_field2() &&;

  template <typename T_Foo_field2_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.field2_ref() = BAR;` instead of `FOO.set_field2(BAR);`")]]
  ::std::vector<::std::int32_t>& set_field2(T_Foo_field2_struct_setter&& field2_) {
    field2_ref() = std::forward<T_Foo_field2_struct_setter>(field2_);
    return __fbthrift_field_field2;
  }
  const ::std::vector<double>& get_field3() const&;
  ::std::vector<double> get_field3() &&;

  template <typename T_Foo_field3_struct_setter = ::std::vector<double>>
  [[deprecated("Use `FOO.field3_ref() = BAR;` instead of `FOO.set_field3(BAR);`")]]
  ::std::vector<double>& set_field3(T_Foo_field3_struct_setter&& field3_) {
    field3_ref() = std::forward<T_Foo_field3_struct_setter>(field3_);
    return __fbthrift_field_field3;
  }
  const ::std::vector<::std::int32_t>& get_field4() const&;
  ::std::vector<::std::int32_t> get_field4() &&;

  template <typename T_Foo_field4_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.field4_ref() = BAR;` instead of `FOO.set_field4(BAR);`")]]
  ::std::vector<::std::int32_t>& set_field4(T_Foo_field4_struct_setter&& field4_) {
    field4_ref() = std::forward<T_Foo_field4_struct_setter>(field4_);
    return __fbthrift_field_field4;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Foo>;
  friend void swap(Foo& a, Foo& b);
};

template <class Protocol_>
unsigned long Foo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class LazyFoo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::field1,
    ::apache::thrift::ident::field2,
    ::apache::thrift::ident::field3,
    ::apache::thrift::ident::field4
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 4;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = LazyFoo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  LazyFoo() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  LazyFoo(apache::thrift::FragileConstructor, ::std::vector<double> field1__arg, ::std::vector<::std::int32_t> field2__arg, ::std::vector<double> field3__arg, ::std::vector<::std::int32_t> field4__arg);

  LazyFoo(LazyFoo&&) noexcept;
  LazyFoo(const LazyFoo& src);


  LazyFoo& operator=(LazyFoo&&) noexcept;
  LazyFoo& operator=(const LazyFoo& src);
 private:
  ::std::vector<double> __fbthrift_field_field1;
 private:
  ::std::vector<::std::int32_t> __fbthrift_field_field2;
 private:
  mutable ::std::vector<double> __fbthrift_field_field3;
 private:
  mutable ::std::vector<::std::int32_t> __fbthrift_field_field4;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const LazyFoo&) const;
  bool operator<(const LazyFoo&) const;

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field1_ref() const& {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field1_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field1_ref() & {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field1_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field1() const& {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field1() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field1() & {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field1() && {
    return {static_cast<T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field2_ref() const& {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field2_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field2_ref() & {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field2_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_field2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field2() const& {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field2() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field2() & {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field2() && {
    return {static_cast<T&&>(this->__fbthrift_field_field2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field3_ref() const& {
    return {this->__fbthrift_read_field_field3(), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field3_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_read_field_field3()), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field3_ref() & {
    return {this->__fbthrift_read_field_field3(), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field3_ref() && {
    return {static_cast<T&&>(this->__fbthrift_read_field_field3()), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field3() const& {
    return {this->__fbthrift_read_field_field3(), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field3() const&& {
    return {static_cast<const T&&>(this->__fbthrift_read_field_field3()), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field3() & {
    return {this->__fbthrift_read_field_field3(), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field3() && {
    return {static_cast<T&&>(this->__fbthrift_read_field_field3()), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field4_ref() const& {
    return {this->__fbthrift_read_field_field4(), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field4_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_read_field_field4()), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field4_ref() & {
    return {this->__fbthrift_read_field_field4(), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field4_ref() && {
    return {static_cast<T&&>(this->__fbthrift_read_field_field4()), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field4() const& {
    return {this->__fbthrift_read_field_field4(), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field4() const&& {
    return {static_cast<const T&&>(this->__fbthrift_read_field_field4()), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field4() & {
    return {this->__fbthrift_read_field_field4(), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field4() && {
    return {static_cast<T&&>(this->__fbthrift_read_field_field4()), __isset.at(3), __isset.bit(3)};
  }
  const ::std::vector<double>& get_field1() const&;
  ::std::vector<double> get_field1() &&;

  template <typename T_LazyFoo_field1_struct_setter = ::std::vector<double>>
  [[deprecated("Use `FOO.field1_ref() = BAR;` instead of `FOO.set_field1(BAR);`")]]
  ::std::vector<double>& set_field1(T_LazyFoo_field1_struct_setter&& field1_) {
    field1_ref() = std::forward<T_LazyFoo_field1_struct_setter>(field1_);
    return __fbthrift_field_field1;
  }
  const ::std::vector<::std::int32_t>& get_field2() const&;
  ::std::vector<::std::int32_t> get_field2() &&;

  template <typename T_LazyFoo_field2_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.field2_ref() = BAR;` instead of `FOO.set_field2(BAR);`")]]
  ::std::vector<::std::int32_t>& set_field2(T_LazyFoo_field2_struct_setter&& field2_) {
    field2_ref() = std::forward<T_LazyFoo_field2_struct_setter>(field2_);
    return __fbthrift_field_field2;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
 private:
  mutable struct __fbthrift_SerializedData {
    folly::IOBuf field3;
    std::unique_ptr<folly::IOBuf> field4;
  } __fbthrift_serializedData_;

  mutable ::apache::thrift::detail::st::DeserializationMutex __fbthrift_deserializationMutex_;
  ::apache::thrift::ProtocolType __fbthrift_protocol_{};

  mutable struct __fbthrift_IsDeserialized {
    std::atomic<uint8_t> field3{::apache::thrift::detail::LazyDeserializationState::UNTAINTED | ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED};
    std::atomic<uint8_t> field4{::apache::thrift::detail::LazyDeserializationState::UNTAINTED | ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED};
  } __fbthrift_isDeserialized_;

  const ::std::vector<double>& __fbthrift_read_field_field3() const;
  ::std::vector<double>& __fbthrift_read_field_field3();
  void __fbthrift_read_field_field3_slow() const;
  template<class ProtocolReader> void __fbthrift_read_field_field3_impl() const;
  const ::std::vector<::std::int32_t>& __fbthrift_read_field_field4() const;
  ::std::vector<::std::int32_t>& __fbthrift_read_field_field4();
  void __fbthrift_read_field_field4_slow() const;
  template<class ProtocolReader> void __fbthrift_read_field_field4_impl() const;

  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<LazyFoo>;
  friend void swap(LazyFoo& a, LazyFoo& b);
};

template <class Protocol_>
unsigned long LazyFoo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class OptionalFoo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::field1,
    ::apache::thrift::ident::field2,
    ::apache::thrift::ident::field3,
    ::apache::thrift::ident::field4
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 4;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = OptionalFoo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  OptionalFoo() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  OptionalFoo(apache::thrift::FragileConstructor, ::std::vector<double> field1__arg, ::std::vector<::std::int32_t> field2__arg, ::std::vector<double> field3__arg, ::std::vector<::std::int32_t> field4__arg);

  OptionalFoo(OptionalFoo&&) noexcept;

  OptionalFoo(const OptionalFoo& src);


  OptionalFoo& operator=(OptionalFoo&&) noexcept;
  OptionalFoo& operator=(const OptionalFoo& src);
 private:
  ::std::vector<double> __fbthrift_field_field1;
 private:
  ::std::vector<::std::int32_t> __fbthrift_field_field2;
 private:
  ::std::vector<double> __fbthrift_field_field3;
 private:
  ::std::vector<::std::int32_t> __fbthrift_field_field4;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const OptionalFoo&) const;
  bool operator<(const OptionalFoo&) const;

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> field1_ref() const& {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> field1_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> field1_ref() & {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> field1_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> field1() const& {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> field1() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> field1() & {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> field1() && {
    return {static_cast<T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> field2_ref() const& {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> field2_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> field2_ref() & {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> field2_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_field2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> field2() const& {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> field2() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> field2() & {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> field2() && {
    return {static_cast<T&&>(this->__fbthrift_field_field2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> field3_ref() const& {
    return {this->__fbthrift_field_field3, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> field3_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field3), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> field3_ref() & {
    return {this->__fbthrift_field_field3, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> field3_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_field3), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> field3() const& {
    return {this->__fbthrift_field_field3, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> field3() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field3), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> field3() & {
    return {this->__fbthrift_field_field3, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> field3() && {
    return {static_cast<T&&>(this->__fbthrift_field_field3), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> field4_ref() const& {
    return {this->__fbthrift_field_field4, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> field4_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field4), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> field4_ref() & {
    return {this->__fbthrift_field_field4, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> field4_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_field4), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> field4() const& {
    return {this->__fbthrift_field_field4, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> field4() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field4), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> field4() & {
    return {this->__fbthrift_field_field4, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> field4() && {
    return {static_cast<T&&>(this->__fbthrift_field_field4), __isset.at(3), __isset.bit(3)};
  }
  const ::std::vector<double>* get_field1() const&;
  ::std::vector<double>* get_field1() &;
  ::std::vector<double>* get_field1() && = delete;

  template <typename T_OptionalFoo_field1_struct_setter = ::std::vector<double>>
  [[deprecated("Use `FOO.field1_ref() = BAR;` instead of `FOO.set_field1(BAR);`")]]
  ::std::vector<double>& set_field1(T_OptionalFoo_field1_struct_setter&& field1_) {
    field1_ref() = std::forward<T_OptionalFoo_field1_struct_setter>(field1_);
    return __fbthrift_field_field1;
  }
  const ::std::vector<::std::int32_t>* get_field2() const&;
  ::std::vector<::std::int32_t>* get_field2() &;
  ::std::vector<::std::int32_t>* get_field2() && = delete;

  template <typename T_OptionalFoo_field2_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.field2_ref() = BAR;` instead of `FOO.set_field2(BAR);`")]]
  ::std::vector<::std::int32_t>& set_field2(T_OptionalFoo_field2_struct_setter&& field2_) {
    field2_ref() = std::forward<T_OptionalFoo_field2_struct_setter>(field2_);
    return __fbthrift_field_field2;
  }
  const ::std::vector<double>* get_field3() const&;
  ::std::vector<double>* get_field3() &;
  ::std::vector<double>* get_field3() && = delete;

  template <typename T_OptionalFoo_field3_struct_setter = ::std::vector<double>>
  [[deprecated("Use `FOO.field3_ref() = BAR;` instead of `FOO.set_field3(BAR);`")]]
  ::std::vector<double>& set_field3(T_OptionalFoo_field3_struct_setter&& field3_) {
    field3_ref() = std::forward<T_OptionalFoo_field3_struct_setter>(field3_);
    return __fbthrift_field_field3;
  }
  const ::std::vector<::std::int32_t>* get_field4() const&;
  ::std::vector<::std::int32_t>* get_field4() &;
  ::std::vector<::std::int32_t>* get_field4() && = delete;

  template <typename T_OptionalFoo_field4_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.field4_ref() = BAR;` instead of `FOO.set_field4(BAR);`")]]
  ::std::vector<::std::int32_t>& set_field4(T_OptionalFoo_field4_struct_setter&& field4_) {
    field4_ref() = std::forward<T_OptionalFoo_field4_struct_setter>(field4_);
    return __fbthrift_field_field4;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<OptionalFoo>;
  friend void swap(OptionalFoo& a, OptionalFoo& b);
};

template <class Protocol_>
unsigned long OptionalFoo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class OptionalLazyFoo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::field1,
    ::apache::thrift::ident::field2,
    ::apache::thrift::ident::field3,
    ::apache::thrift::ident::field4
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 4;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = OptionalLazyFoo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  OptionalLazyFoo() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  OptionalLazyFoo(apache::thrift::FragileConstructor, ::std::vector<double> field1__arg, ::std::vector<::std::int32_t> field2__arg, ::std::vector<double> field3__arg, ::std::vector<::std::int32_t> field4__arg);

  OptionalLazyFoo(OptionalLazyFoo&&) noexcept;
  OptionalLazyFoo(const OptionalLazyFoo& src);


  OptionalLazyFoo& operator=(OptionalLazyFoo&&) noexcept;
  OptionalLazyFoo& operator=(const OptionalLazyFoo& src);
 private:
  ::std::vector<double> __fbthrift_field_field1;
 private:
  ::std::vector<::std::int32_t> __fbthrift_field_field2;
 private:
  mutable ::std::vector<double> __fbthrift_field_field3;
 private:
  mutable ::std::vector<::std::int32_t> __fbthrift_field_field4;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const OptionalLazyFoo&) const;
  bool operator<(const OptionalLazyFoo&) const;

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> field1_ref() const& {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> field1_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> field1_ref() & {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> field1_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> field1() const& {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> field1() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> field1() & {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> field1() && {
    return {static_cast<T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> field2_ref() const& {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> field2_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> field2_ref() & {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> field2_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_field2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> field2() const& {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> field2() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> field2() & {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> field2() && {
    return {static_cast<T&&>(this->__fbthrift_field_field2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> field3_ref() const& {
    return {this->__fbthrift_read_field_field3(), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> field3_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_read_field_field3()), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> field3_ref() & {
    return {this->__fbthrift_read_field_field3(), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> field3_ref() && {
    return {static_cast<T&&>(this->__fbthrift_read_field_field3()), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> field3() const& {
    return {this->__fbthrift_read_field_field3(), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> field3() const&& {
    return {static_cast<const T&&>(this->__fbthrift_read_field_field3()), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> field3() & {
    return {this->__fbthrift_read_field_field3(), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> field3() && {
    return {static_cast<T&&>(this->__fbthrift_read_field_field3()), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> field4_ref() const& {
    return {this->__fbthrift_read_field_field4(), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> field4_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_read_field_field4()), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> field4_ref() & {
    return {this->__fbthrift_read_field_field4(), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> field4_ref() && {
    return {static_cast<T&&>(this->__fbthrift_read_field_field4()), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> field4() const& {
    return {this->__fbthrift_read_field_field4(), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> field4() const&& {
    return {static_cast<const T&&>(this->__fbthrift_read_field_field4()), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> field4() & {
    return {this->__fbthrift_read_field_field4(), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> field4() && {
    return {static_cast<T&&>(this->__fbthrift_read_field_field4()), __isset.at(3), __isset.bit(3)};
  }
  const ::std::vector<double>* get_field1() const&;
  ::std::vector<double>* get_field1() &;
  ::std::vector<double>* get_field1() && = delete;

  template <typename T_OptionalLazyFoo_field1_struct_setter = ::std::vector<double>>
  [[deprecated("Use `FOO.field1_ref() = BAR;` instead of `FOO.set_field1(BAR);`")]]
  ::std::vector<double>& set_field1(T_OptionalLazyFoo_field1_struct_setter&& field1_) {
    field1_ref() = std::forward<T_OptionalLazyFoo_field1_struct_setter>(field1_);
    return __fbthrift_field_field1;
  }
  const ::std::vector<::std::int32_t>* get_field2() const&;
  ::std::vector<::std::int32_t>* get_field2() &;
  ::std::vector<::std::int32_t>* get_field2() && = delete;

  template <typename T_OptionalLazyFoo_field2_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.field2_ref() = BAR;` instead of `FOO.set_field2(BAR);`")]]
  ::std::vector<::std::int32_t>& set_field2(T_OptionalLazyFoo_field2_struct_setter&& field2_) {
    field2_ref() = std::forward<T_OptionalLazyFoo_field2_struct_setter>(field2_);
    return __fbthrift_field_field2;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
 private:
  mutable struct __fbthrift_SerializedData {
    folly::IOBuf field3;
    folly::IOBuf field4;
  } __fbthrift_serializedData_;

  mutable ::apache::thrift::detail::st::DeserializationMutex __fbthrift_deserializationMutex_;
  ::apache::thrift::ProtocolType __fbthrift_protocol_{};

  mutable struct __fbthrift_IsDeserialized {
    std::atomic<uint8_t> field3{::apache::thrift::detail::LazyDeserializationState::UNTAINTED | ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED};
    std::atomic<uint8_t> field4{::apache::thrift::detail::LazyDeserializationState::UNTAINTED | ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED};
  } __fbthrift_isDeserialized_;

  const ::std::vector<double>& __fbthrift_read_field_field3() const;
  ::std::vector<double>& __fbthrift_read_field_field3();
  void __fbthrift_read_field_field3_slow() const;
  template<class ProtocolReader> void __fbthrift_read_field_field3_impl() const;
  const ::std::vector<::std::int32_t>& __fbthrift_read_field_field4() const;
  ::std::vector<::std::int32_t>& __fbthrift_read_field_field4();
  void __fbthrift_read_field_field4_slow() const;
  template<class ProtocolReader> void __fbthrift_read_field_field4_impl() const;

  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<OptionalLazyFoo>;
  friend void swap(OptionalLazyFoo& a, OptionalLazyFoo& b);
};

template <class Protocol_>
unsigned long OptionalLazyFoo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class LazyCppRef final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::field1,
    ::apache::thrift::ident::field2,
    ::apache::thrift::ident::field3,
    ::apache::thrift::ident::field4
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 4;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = LazyCppRef;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  LazyCppRef() :
      __fbthrift_field_field4(std::make_unique<::std::vector<::std::int32_t>>()) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  LazyCppRef(apache::thrift::FragileConstructor, ::std::unique_ptr<::std::vector<::std::int32_t>> field1__arg, ::std::shared_ptr<::std::vector<::std::int32_t>> field2__arg, ::std::shared_ptr<const ::std::vector<::std::int32_t>> field3__arg, ::std::unique_ptr<::std::vector<::std::int32_t>> field4__arg);

  LazyCppRef(LazyCppRef&&) noexcept;
  LazyCppRef(const LazyCppRef& src);


  LazyCppRef& operator=(LazyCppRef&&) noexcept;
  LazyCppRef& operator=(const LazyCppRef& src);
 private:
  mutable ::std::unique_ptr<::std::vector<::std::int32_t>> __fbthrift_field_field1;
 private:
  mutable ::std::shared_ptr<::std::vector<::std::int32_t>> __fbthrift_field_field2;
 private:
  mutable ::std::shared_ptr<const ::std::vector<::std::int32_t>> __fbthrift_field_field3;
 private:
  mutable ::std::unique_ptr<::std::vector<::std::int32_t>> __fbthrift_field_field4;

 public:

  bool operator==(const LazyCppRef&) const;
  bool operator<(const LazyCppRef&) const;
  template <typename ..., typename T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE T& field1_ref() & {
    return __fbthrift_read_field_field1();
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const T& field1_ref() const& {
    return __fbthrift_read_field_field1();
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE T&& field1_ref() && {
    return static_cast<T&&>(__fbthrift_read_field_field1());
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const T&& field1_ref() const&& {
    return static_cast<const T&&>(__fbthrift_read_field_field1());
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE T& field1() & {
    return __fbthrift_read_field_field1();
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const T& field1() const& {
    return __fbthrift_read_field_field1();
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE T&& field1() && {
    return static_cast<T&&>(__fbthrift_read_field_field1());
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const T&& field1() const&& {
    return static_cast<const T&&>(__fbthrift_read_field_field1());
  }
  template <typename ..., typename T = ::std::shared_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE T& field2_ref() & {
    return __fbthrift_read_field_field2();
  }

  template <typename ..., typename T = ::std::shared_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const T& field2_ref() const& {
    return __fbthrift_read_field_field2();
  }

  template <typename ..., typename T = ::std::shared_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE T&& field2_ref() && {
    return static_cast<T&&>(__fbthrift_read_field_field2());
  }

  template <typename ..., typename T = ::std::shared_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const T&& field2_ref() const&& {
    return static_cast<const T&&>(__fbthrift_read_field_field2());
  }

  template <typename ..., typename T = ::std::shared_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE T& field2() & {
    return __fbthrift_read_field_field2();
  }

  template <typename ..., typename T = ::std::shared_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const T& field2() const& {
    return __fbthrift_read_field_field2();
  }

  template <typename ..., typename T = ::std::shared_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE T&& field2() && {
    return static_cast<T&&>(__fbthrift_read_field_field2());
  }

  template <typename ..., typename T = ::std::shared_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const T&& field2() const&& {
    return static_cast<const T&&>(__fbthrift_read_field_field2());
  }
  template <typename ..., typename T = ::std::shared_ptr<const ::std::vector<::std::int32_t>>>
  FOLLY_ERASE T& field3_ref() & {
    return __fbthrift_read_field_field3();
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::std::vector<::std::int32_t>>>
  FOLLY_ERASE const T& field3_ref() const& {
    return __fbthrift_read_field_field3();
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::std::vector<::std::int32_t>>>
  FOLLY_ERASE T&& field3_ref() && {
    return static_cast<T&&>(__fbthrift_read_field_field3());
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::std::vector<::std::int32_t>>>
  FOLLY_ERASE const T&& field3_ref() const&& {
    return static_cast<const T&&>(__fbthrift_read_field_field3());
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::std::vector<::std::int32_t>>>
  FOLLY_ERASE T& field3() & {
    return __fbthrift_read_field_field3();
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::std::vector<::std::int32_t>>>
  FOLLY_ERASE const T& field3() const& {
    return __fbthrift_read_field_field3();
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::std::vector<::std::int32_t>>>
  FOLLY_ERASE T&& field3() && {
    return static_cast<T&&>(__fbthrift_read_field_field3());
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::std::vector<::std::int32_t>>>
  FOLLY_ERASE const T&& field3() const&& {
    return static_cast<const T&&>(__fbthrift_read_field_field3());
  }
  template <typename ..., typename T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE T& field4_ref() & {
    return __fbthrift_read_field_field4();
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const T& field4_ref() const& {
    return __fbthrift_read_field_field4();
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE T&& field4_ref() && {
    return static_cast<T&&>(__fbthrift_read_field_field4());
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const T&& field4_ref() const&& {
    return static_cast<const T&&>(__fbthrift_read_field_field4());
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE T& field4() & {
    return __fbthrift_read_field_field4();
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const T& field4() const& {
    return __fbthrift_read_field_field4();
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE T&& field4() && {
    return static_cast<T&&>(__fbthrift_read_field_field4());
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const T&& field4() const&& {
    return static_cast<const T&&>(__fbthrift_read_field_field4());
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
 private:
  mutable struct __fbthrift_SerializedData {
    folly::IOBuf field1;
    folly::IOBuf field2;
    folly::IOBuf field3;
    folly::IOBuf field4;
  } __fbthrift_serializedData_;

  mutable ::apache::thrift::detail::st::DeserializationMutex __fbthrift_deserializationMutex_;
  ::apache::thrift::ProtocolType __fbthrift_protocol_{};

  mutable struct __fbthrift_IsDeserialized {
    std::atomic<uint8_t> field1{::apache::thrift::detail::LazyDeserializationState::UNTAINTED | ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED};
    std::atomic<uint8_t> field2{::apache::thrift::detail::LazyDeserializationState::UNTAINTED | ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED};
    std::atomic<uint8_t> field3{::apache::thrift::detail::LazyDeserializationState::UNTAINTED | ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED};
    std::atomic<uint8_t> field4{::apache::thrift::detail::LazyDeserializationState::UNTAINTED | ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED};
  } __fbthrift_isDeserialized_;

  const ::std::unique_ptr<::std::vector<::std::int32_t>>& __fbthrift_read_field_field1() const;
  ::std::unique_ptr<::std::vector<::std::int32_t>>& __fbthrift_read_field_field1();
  void __fbthrift_read_field_field1_slow() const;
  template<class ProtocolReader> void __fbthrift_read_field_field1_impl() const;
  const ::std::shared_ptr<::std::vector<::std::int32_t>>& __fbthrift_read_field_field2() const;
  ::std::shared_ptr<::std::vector<::std::int32_t>>& __fbthrift_read_field_field2();
  void __fbthrift_read_field_field2_slow() const;
  template<class ProtocolReader> void __fbthrift_read_field_field2_impl() const;
  const ::std::shared_ptr<const ::std::vector<::std::int32_t>>& __fbthrift_read_field_field3() const;
  ::std::shared_ptr<const ::std::vector<::std::int32_t>>& __fbthrift_read_field_field3();
  void __fbthrift_read_field_field3_slow() const;
  template<class ProtocolReader> void __fbthrift_read_field_field3_impl() const;
  const ::std::unique_ptr<::std::vector<::std::int32_t>>& __fbthrift_read_field_field4() const;
  ::std::unique_ptr<::std::vector<::std::int32_t>>& __fbthrift_read_field_field4();
  void __fbthrift_read_field_field4_slow() const;
  template<class ProtocolReader> void __fbthrift_read_field_field4_impl() const;

  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<LazyCppRef>;
  friend void swap(LazyCppRef& a, LazyCppRef& b);
};

template <class Protocol_>
unsigned long LazyCppRef::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class IndexedFoo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::serialized_data_size,
    ::apache::thrift::ident::field1,
    ::apache::thrift::ident::field2,
    ::apache::thrift::ident::field3,
    ::apache::thrift::ident::field4,
    ::apache::thrift::ident::field_id_to_size
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,100,1,2,3,4,101};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::i64_t>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 6;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = IndexedFoo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  IndexedFoo();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  IndexedFoo(apache::thrift::FragileConstructor, double serialized_data_size__arg, ::std::vector<double> field1__arg, ::std::vector<::std::int32_t> field2__arg, ::std::vector<double> field3__arg, ::std::vector<::std::int32_t> field4__arg, ::std::map<::std::int16_t, ::std::int64_t> field_id_to_size__arg);

  IndexedFoo(IndexedFoo&&) noexcept;

  IndexedFoo(const IndexedFoo& src);


  IndexedFoo& operator=(IndexedFoo&&) noexcept;
  IndexedFoo& operator=(const IndexedFoo& src);

  ~IndexedFoo();

 private:
  double __fbthrift_field_serialized_data_size;
 private:
  ::std::vector<double> __fbthrift_field_field1;
 private:
  ::std::vector<::std::int32_t> __fbthrift_field_field2;
 private:
  ::std::vector<double> __fbthrift_field_field3;
 private:
  ::std::vector<::std::int32_t> __fbthrift_field_field4;
 private:
  ::std::map<::std::int16_t, ::std::int64_t> __fbthrift_field_field_id_to_size;
 private:
  apache::thrift::detail::isset_bitset<6, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const IndexedFoo&) const;
  bool operator<(const IndexedFoo&) const;

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> serialized_data_size_ref() const& {
    return {this->__fbthrift_field_serialized_data_size, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> serialized_data_size_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_serialized_data_size), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> serialized_data_size_ref() & {
    return {this->__fbthrift_field_serialized_data_size, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> serialized_data_size_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_serialized_data_size), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> serialized_data_size() const& {
    return {this->__fbthrift_field_serialized_data_size, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> serialized_data_size() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_serialized_data_size), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> serialized_data_size() & {
    return {this->__fbthrift_field_serialized_data_size, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> serialized_data_size() && {
    return {static_cast<T&&>(this->__fbthrift_field_serialized_data_size), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field1_ref() const& {
    return {this->__fbthrift_field_field1, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field1_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field1), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field1_ref() & {
    return {this->__fbthrift_field_field1, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field1_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_field1), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field1() const& {
    return {this->__fbthrift_field_field1, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field1() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field1), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field1() & {
    return {this->__fbthrift_field_field1, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field1() && {
    return {static_cast<T&&>(this->__fbthrift_field_field1), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field2_ref() const& {
    return {this->__fbthrift_field_field2, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field2_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field2), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field2_ref() & {
    return {this->__fbthrift_field_field2, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field2_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_field2), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field2() const& {
    return {this->__fbthrift_field_field2, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field2() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field2), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field2() & {
    return {this->__fbthrift_field_field2, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field2() && {
    return {static_cast<T&&>(this->__fbthrift_field_field2), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field3_ref() const& {
    return {this->__fbthrift_field_field3, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field3_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field3), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field3_ref() & {
    return {this->__fbthrift_field_field3, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field3_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_field3), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field3() const& {
    return {this->__fbthrift_field_field3, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field3() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field3), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field3() & {
    return {this->__fbthrift_field_field3, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field3() && {
    return {static_cast<T&&>(this->__fbthrift_field_field3), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field4_ref() const& {
    return {this->__fbthrift_field_field4, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field4_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field4), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field4_ref() & {
    return {this->__fbthrift_field_field4, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field4_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_field4), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field4() const& {
    return {this->__fbthrift_field_field4, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field4() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field4), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field4() & {
    return {this->__fbthrift_field_field4, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field4() && {
    return {static_cast<T&&>(this->__fbthrift_field_field4), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field_id_to_size_ref() const& {
    return {this->__fbthrift_field_field_id_to_size, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field_id_to_size_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field_id_to_size), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field_id_to_size_ref() & {
    return {this->__fbthrift_field_field_id_to_size, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field_id_to_size_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_field_id_to_size), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field_id_to_size() const& {
    return {this->__fbthrift_field_field_id_to_size, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field_id_to_size() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field_id_to_size), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field_id_to_size() & {
    return {this->__fbthrift_field_field_id_to_size, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field_id_to_size() && {
    return {static_cast<T&&>(this->__fbthrift_field_field_id_to_size), __isset.at(5), __isset.bit(5)};
  }

  double get_serialized_data_size() const {
    return __fbthrift_field_serialized_data_size;
  }

  [[deprecated("Use `FOO.serialized_data_size_ref() = BAR;` instead of `FOO.set_serialized_data_size(BAR);`")]]
  double& set_serialized_data_size(double serialized_data_size_) {
    serialized_data_size_ref() = serialized_data_size_;
    return __fbthrift_field_serialized_data_size;
  }
  const ::std::vector<double>& get_field1() const&;
  ::std::vector<double> get_field1() &&;

  template <typename T_IndexedFoo_field1_struct_setter = ::std::vector<double>>
  [[deprecated("Use `FOO.field1_ref() = BAR;` instead of `FOO.set_field1(BAR);`")]]
  ::std::vector<double>& set_field1(T_IndexedFoo_field1_struct_setter&& field1_) {
    field1_ref() = std::forward<T_IndexedFoo_field1_struct_setter>(field1_);
    return __fbthrift_field_field1;
  }
  const ::std::vector<::std::int32_t>& get_field2() const&;
  ::std::vector<::std::int32_t> get_field2() &&;

  template <typename T_IndexedFoo_field2_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.field2_ref() = BAR;` instead of `FOO.set_field2(BAR);`")]]
  ::std::vector<::std::int32_t>& set_field2(T_IndexedFoo_field2_struct_setter&& field2_) {
    field2_ref() = std::forward<T_IndexedFoo_field2_struct_setter>(field2_);
    return __fbthrift_field_field2;
  }
  const ::std::vector<double>& get_field3() const&;
  ::std::vector<double> get_field3() &&;

  template <typename T_IndexedFoo_field3_struct_setter = ::std::vector<double>>
  [[deprecated("Use `FOO.field3_ref() = BAR;` instead of `FOO.set_field3(BAR);`")]]
  ::std::vector<double>& set_field3(T_IndexedFoo_field3_struct_setter&& field3_) {
    field3_ref() = std::forward<T_IndexedFoo_field3_struct_setter>(field3_);
    return __fbthrift_field_field3;
  }
  const ::std::vector<::std::int32_t>& get_field4() const&;
  ::std::vector<::std::int32_t> get_field4() &&;

  template <typename T_IndexedFoo_field4_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.field4_ref() = BAR;` instead of `FOO.set_field4(BAR);`")]]
  ::std::vector<::std::int32_t>& set_field4(T_IndexedFoo_field4_struct_setter&& field4_) {
    field4_ref() = std::forward<T_IndexedFoo_field4_struct_setter>(field4_);
    return __fbthrift_field_field4;
  }
  const ::std::map<::std::int16_t, ::std::int64_t>& get_field_id_to_size() const&;
  ::std::map<::std::int16_t, ::std::int64_t> get_field_id_to_size() &&;

  template <typename T_IndexedFoo_field_id_to_size_struct_setter = ::std::map<::std::int16_t, ::std::int64_t>>
  [[deprecated("Use `FOO.field_id_to_size_ref() = BAR;` instead of `FOO.set_field_id_to_size(BAR);`")]]
  ::std::map<::std::int16_t, ::std::int64_t>& set_field_id_to_size(T_IndexedFoo_field_id_to_size_struct_setter&& field_id_to_size_) {
    field_id_to_size_ref() = std::forward<T_IndexedFoo_field_id_to_size_struct_setter>(field_id_to_size_);
    return __fbthrift_field_field_id_to_size;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<IndexedFoo>;
  friend void swap(IndexedFoo& a, IndexedFoo& b);
};

template <class Protocol_>
unsigned long IndexedFoo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class OptionalIndexedFoo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::serialized_data_size,
    ::apache::thrift::ident::field1,
    ::apache::thrift::ident::field2,
    ::apache::thrift::ident::field3,
    ::apache::thrift::ident::field4,
    ::apache::thrift::ident::field_id_to_size
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,100,1,2,3,4,101};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::i64_t>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 6;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = OptionalIndexedFoo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  OptionalIndexedFoo();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  OptionalIndexedFoo(apache::thrift::FragileConstructor, double serialized_data_size__arg, ::std::vector<double> field1__arg, ::std::vector<::std::int32_t> field2__arg, ::std::vector<double> field3__arg, ::std::vector<::std::int32_t> field4__arg, ::std::map<::std::int16_t, ::std::int64_t> field_id_to_size__arg);

  OptionalIndexedFoo(OptionalIndexedFoo&&) noexcept;

  OptionalIndexedFoo(const OptionalIndexedFoo& src);


  OptionalIndexedFoo& operator=(OptionalIndexedFoo&&) noexcept;
  OptionalIndexedFoo& operator=(const OptionalIndexedFoo& src);

  ~OptionalIndexedFoo();

 private:
  double __fbthrift_field_serialized_data_size;
 private:
  ::std::vector<double> __fbthrift_field_field1;
 private:
  ::std::vector<::std::int32_t> __fbthrift_field_field2;
 private:
  ::std::vector<double> __fbthrift_field_field3;
 private:
  ::std::vector<::std::int32_t> __fbthrift_field_field4;
 private:
  ::std::map<::std::int16_t, ::std::int64_t> __fbthrift_field_field_id_to_size;
 private:
  apache::thrift::detail::isset_bitset<6, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const OptionalIndexedFoo&) const;
  bool operator<(const OptionalIndexedFoo&) const;

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> serialized_data_size_ref() const& {
    return {this->__fbthrift_field_serialized_data_size, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> serialized_data_size_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_serialized_data_size), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> serialized_data_size_ref() & {
    return {this->__fbthrift_field_serialized_data_size, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> serialized_data_size_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_serialized_data_size), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> serialized_data_size() const& {
    return {this->__fbthrift_field_serialized_data_size, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> serialized_data_size() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_serialized_data_size), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> serialized_data_size() & {
    return {this->__fbthrift_field_serialized_data_size, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> serialized_data_size() && {
    return {static_cast<T&&>(this->__fbthrift_field_serialized_data_size), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> field1_ref() const& {
    return {this->__fbthrift_field_field1, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> field1_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field1), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> field1_ref() & {
    return {this->__fbthrift_field_field1, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> field1_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_field1), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> field1() const& {
    return {this->__fbthrift_field_field1, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> field1() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field1), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> field1() & {
    return {this->__fbthrift_field_field1, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> field1() && {
    return {static_cast<T&&>(this->__fbthrift_field_field1), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> field2_ref() const& {
    return {this->__fbthrift_field_field2, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> field2_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field2), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> field2_ref() & {
    return {this->__fbthrift_field_field2, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> field2_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_field2), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> field2() const& {
    return {this->__fbthrift_field_field2, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> field2() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field2), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> field2() & {
    return {this->__fbthrift_field_field2, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> field2() && {
    return {static_cast<T&&>(this->__fbthrift_field_field2), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> field3_ref() const& {
    return {this->__fbthrift_field_field3, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> field3_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field3), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> field3_ref() & {
    return {this->__fbthrift_field_field3, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> field3_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_field3), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> field3() const& {
    return {this->__fbthrift_field_field3, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> field3() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field3), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> field3() & {
    return {this->__fbthrift_field_field3, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> field3() && {
    return {static_cast<T&&>(this->__fbthrift_field_field3), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> field4_ref() const& {
    return {this->__fbthrift_field_field4, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> field4_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field4), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> field4_ref() & {
    return {this->__fbthrift_field_field4, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> field4_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_field4), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> field4() const& {
    return {this->__fbthrift_field_field4, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> field4() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field4), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> field4() & {
    return {this->__fbthrift_field_field4, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> field4() && {
    return {static_cast<T&&>(this->__fbthrift_field_field4), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field_id_to_size_ref() const& {
    return {this->__fbthrift_field_field_id_to_size, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field_id_to_size_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field_id_to_size), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field_id_to_size_ref() & {
    return {this->__fbthrift_field_field_id_to_size, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field_id_to_size_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_field_id_to_size), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field_id_to_size() const& {
    return {this->__fbthrift_field_field_id_to_size, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field_id_to_size() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field_id_to_size), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field_id_to_size() & {
    return {this->__fbthrift_field_field_id_to_size, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field_id_to_size() && {
    return {static_cast<T&&>(this->__fbthrift_field_field_id_to_size), __isset.at(5), __isset.bit(5)};
  }

  double get_serialized_data_size() const {
    return __fbthrift_field_serialized_data_size;
  }

  [[deprecated("Use `FOO.serialized_data_size_ref() = BAR;` instead of `FOO.set_serialized_data_size(BAR);`")]]
  double& set_serialized_data_size(double serialized_data_size_) {
    serialized_data_size_ref() = serialized_data_size_;
    return __fbthrift_field_serialized_data_size;
  }
  const ::std::vector<double>* get_field1() const&;
  ::std::vector<double>* get_field1() &;
  ::std::vector<double>* get_field1() && = delete;

  template <typename T_OptionalIndexedFoo_field1_struct_setter = ::std::vector<double>>
  [[deprecated("Use `FOO.field1_ref() = BAR;` instead of `FOO.set_field1(BAR);`")]]
  ::std::vector<double>& set_field1(T_OptionalIndexedFoo_field1_struct_setter&& field1_) {
    field1_ref() = std::forward<T_OptionalIndexedFoo_field1_struct_setter>(field1_);
    return __fbthrift_field_field1;
  }
  const ::std::vector<::std::int32_t>* get_field2() const&;
  ::std::vector<::std::int32_t>* get_field2() &;
  ::std::vector<::std::int32_t>* get_field2() && = delete;

  template <typename T_OptionalIndexedFoo_field2_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.field2_ref() = BAR;` instead of `FOO.set_field2(BAR);`")]]
  ::std::vector<::std::int32_t>& set_field2(T_OptionalIndexedFoo_field2_struct_setter&& field2_) {
    field2_ref() = std::forward<T_OptionalIndexedFoo_field2_struct_setter>(field2_);
    return __fbthrift_field_field2;
  }
  const ::std::vector<double>* get_field3() const&;
  ::std::vector<double>* get_field3() &;
  ::std::vector<double>* get_field3() && = delete;

  template <typename T_OptionalIndexedFoo_field3_struct_setter = ::std::vector<double>>
  [[deprecated("Use `FOO.field3_ref() = BAR;` instead of `FOO.set_field3(BAR);`")]]
  ::std::vector<double>& set_field3(T_OptionalIndexedFoo_field3_struct_setter&& field3_) {
    field3_ref() = std::forward<T_OptionalIndexedFoo_field3_struct_setter>(field3_);
    return __fbthrift_field_field3;
  }
  const ::std::vector<::std::int32_t>* get_field4() const&;
  ::std::vector<::std::int32_t>* get_field4() &;
  ::std::vector<::std::int32_t>* get_field4() && = delete;

  template <typename T_OptionalIndexedFoo_field4_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.field4_ref() = BAR;` instead of `FOO.set_field4(BAR);`")]]
  ::std::vector<::std::int32_t>& set_field4(T_OptionalIndexedFoo_field4_struct_setter&& field4_) {
    field4_ref() = std::forward<T_OptionalIndexedFoo_field4_struct_setter>(field4_);
    return __fbthrift_field_field4;
  }
  const ::std::map<::std::int16_t, ::std::int64_t>& get_field_id_to_size() const&;
  ::std::map<::std::int16_t, ::std::int64_t> get_field_id_to_size() &&;

  template <typename T_OptionalIndexedFoo_field_id_to_size_struct_setter = ::std::map<::std::int16_t, ::std::int64_t>>
  [[deprecated("Use `FOO.field_id_to_size_ref() = BAR;` instead of `FOO.set_field_id_to_size(BAR);`")]]
  ::std::map<::std::int16_t, ::std::int64_t>& set_field_id_to_size(T_OptionalIndexedFoo_field_id_to_size_struct_setter&& field_id_to_size_) {
    field_id_to_size_ref() = std::forward<T_OptionalIndexedFoo_field_id_to_size_struct_setter>(field_id_to_size_);
    return __fbthrift_field_field_id_to_size;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<OptionalIndexedFoo>;
  friend void swap(OptionalIndexedFoo& a, OptionalIndexedFoo& b);
};

template <class Protocol_>
unsigned long OptionalIndexedFoo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class Empty final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0};
  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 0;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Empty;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  Empty() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Empty(apache::thrift::FragileConstructor);

  Empty(Empty&&) = default;

  Empty(const Empty&) = default;


  Empty& operator=(Empty&&) = default;

  Empty& operator=(const Empty&) = default;

 public:

  bool operator==(const Empty&) const;
  bool operator<(const Empty&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Empty>;
  friend void swap(Empty& a, Empty& b);
};

template <class Protocol_>
unsigned long Empty::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


}}} // apache::thrift::test
