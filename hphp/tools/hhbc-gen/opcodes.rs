// Copyright (c) Facebook, Inc. and its affiliates.
//
// This source code is licensed under the MIT license found in the
// LICENSE file in the "hack" directory of this source tree.
// @generated by gen-rust.cpp
// buck2 run :gen-rust > opcodes.rs

pub use crate::{InstrFlags, Inputs, OpcodeData, Outputs, FlavorDesc, ImmType};
use once_cell::sync::OnceCell;

pub fn opcode_data() -> &'static [OpcodeData] {
    static INSTANCE: OnceCell<Box<[OpcodeData]>> = OnceCell::new();
    INSTANCE.get_or_init(|| {
        vec![
            OpcodeData{name: "Nop", immediates: vec![], inputs: Inputs::NOV, outputs: Outputs::NOV, flags: InstrFlags::NF, },
            OpcodeData{name: "EntryNop", immediates: vec![], inputs: Inputs::NOV, outputs: Outputs::NOV, flags: InstrFlags::NF, },
            OpcodeData{name: "BreakTraceHint", immediates: vec![], inputs: Inputs::NOV, outputs: Outputs::NOV, flags: InstrFlags::NF, },
            OpcodeData{name: "PopC", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::NOV, flags: InstrFlags::NF, },
            OpcodeData{name: "PopU", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::UV].into()), outputs: Outputs::NOV, flags: InstrFlags::NF, },
            OpcodeData{name: "PopU2", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::UV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "PopL", immediates: vec![("loc1", ImmType::LA), ], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::NOV, flags: InstrFlags::NF, },
            OpcodeData{name: "Dup", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "CGetCUNop", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CUV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "UGetCUNop", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CUV].into()), outputs: Outputs::Fixed([FlavorDesc::UV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Null", immediates: vec![], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "NullUninit", immediates: vec![], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::UV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "True", immediates: vec![], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "False", immediates: vec![], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "FuncCred", immediates: vec![], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Int", immediates: vec![("arg1", ImmType::I64A), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Double", immediates: vec![("dbl1", ImmType::DA), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "String", immediates: vec![("str1", ImmType::SA), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Dict", immediates: vec![("arr1", ImmType::AA), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Keyset", immediates: vec![("arr1", ImmType::AA), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Vec", immediates: vec![("arr1", ImmType::AA), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "NewDictArray", immediates: vec![("arg1", ImmType::IVA), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "NewStructDict", immediates: vec![("keys", ImmType::VSA), ], inputs: Inputs::SMany, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "NewVec", immediates: vec![("arg1", ImmType::IVA), ], inputs: Inputs::CMany, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "NewKeysetArray", immediates: vec![("arg1", ImmType::IVA), ], inputs: Inputs::CMany, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "AddElemC", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "AddNewElemC", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "NewCol", immediates: vec![("subop1", ImmType::OA("CollectionType")), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "NewPair", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "ColFromArray", immediates: vec![("subop1", ImmType::OA("CollectionType")), ], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "CnsE", immediates: vec![("str1", ImmType::SA), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "ClsCns", immediates: vec![("str1", ImmType::SA), ], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "ClsCnsD", immediates: vec![("str1", ImmType::SA), ("str2", ImmType::SA), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "ClsCnsL", immediates: vec![("loc1", ImmType::LA), ], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "ClassName", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "LazyClassFromClass", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "File", immediates: vec![], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Dir", immediates: vec![], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Method", immediates: vec![], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Concat", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "ConcatN", immediates: vec![("arg1", ImmType::IVA), ], inputs: Inputs::CMany, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Add", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Sub", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Mul", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "AddO", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "SubO", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "MulO", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Div", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Mod", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Pow", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Not", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Same", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "NSame", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Eq", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Neq", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Lt", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Lte", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Gt", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Gte", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Cmp", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "BitAnd", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "BitOr", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "BitXor", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "BitNot", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Shl", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Shr", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "CastBool", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "CastInt", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "CastDouble", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "CastString", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "CastDict", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "CastKeyset", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "CastVec", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "DblAsBits", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "InstanceOf", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "InstanceOfD", immediates: vec![("str1", ImmType::SA), ], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "IsLateBoundCls", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "IsTypeStructC", immediates: vec![("subop1", ImmType::OA("TypeStructResolveOp")), ], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "ThrowAsTypeStructException", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::NOV, flags: InstrFlags::TF, },
            OpcodeData{name: "CombineAndResolveTypeStruct", immediates: vec![("arg1", ImmType::IVA), ], inputs: Inputs::CMany, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Select", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Print", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Clone", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Exit", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::TF, },
            OpcodeData{name: "Fatal", immediates: vec![("subop1", ImmType::OA("FatalOp")), ], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::NOV, flags: InstrFlags::TF, },
            OpcodeData{name: "Jmp", immediates: vec![("target1", ImmType::BA), ], inputs: Inputs::NOV, outputs: Outputs::NOV, flags: InstrFlags::CF | InstrFlags::TF, },
            OpcodeData{name: "JmpNS", immediates: vec![("target1", ImmType::BA), ], inputs: Inputs::NOV, outputs: Outputs::NOV, flags: InstrFlags::CF | InstrFlags::TF, },
            OpcodeData{name: "JmpZ", immediates: vec![("target1", ImmType::BA), ], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::NOV, flags: InstrFlags::CF, },
            OpcodeData{name: "JmpNZ", immediates: vec![("target1", ImmType::BA), ], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::NOV, flags: InstrFlags::CF, },
            OpcodeData{name: "Switch", immediates: vec![("subop1", ImmType::OA("SwitchKind")), ("arg2", ImmType::I64A), ("targets", ImmType::BLA), ], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::NOV, flags: InstrFlags::CF | InstrFlags::TF, },
            OpcodeData{name: "SSwitch", immediates: vec![("targets", ImmType::SLA), ], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::NOV, flags: InstrFlags::CF | InstrFlags::TF, },
            OpcodeData{name: "RetC", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::NOV, flags: InstrFlags::CF | InstrFlags::TF, },
            OpcodeData{name: "RetM", immediates: vec![("arg1", ImmType::IVA), ], inputs: Inputs::CMany, outputs: Outputs::NOV, flags: InstrFlags::CF | InstrFlags::TF, },
            OpcodeData{name: "RetCSuspended", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::NOV, flags: InstrFlags::CF | InstrFlags::TF, },
            OpcodeData{name: "Throw", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::NOV, flags: InstrFlags::CF | InstrFlags::TF, },
            OpcodeData{name: "CGetL", immediates: vec![("nloc1", ImmType::NLA), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "CGetQuietL", immediates: vec![("loc1", ImmType::LA), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "CUGetL", immediates: vec![("loc1", ImmType::LA), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CUV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "CGetL2", immediates: vec![("nloc1", ImmType::NLA), ], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "PushL", immediates: vec![("loc1", ImmType::LA), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "CGetG", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "CGetS", immediates: vec![("subop1", ImmType::OA("ReadonlyOp")), ], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "ClassGetC", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "ClassGetTS", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "GetMemoKeyL", immediates: vec![("nloc1", ImmType::NLA), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "AKExists", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "IssetL", immediates: vec![("loc1", ImmType::LA), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "IssetG", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "IssetS", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "IsUnsetL", immediates: vec![("loc1", ImmType::LA), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "IsTypeC", immediates: vec![("subop1", ImmType::OA("IsTypeOp")), ], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "IsTypeL", immediates: vec![("nloc1", ImmType::NLA), ("subop2", ImmType::OA("IsTypeOp")), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "AssertRATL", immediates: vec![("loc1", ImmType::ILA), ("rat", ImmType::RATA), ], inputs: Inputs::NOV, outputs: Outputs::NOV, flags: InstrFlags::NF, },
            OpcodeData{name: "AssertRATStk", immediates: vec![("arg1", ImmType::IVA), ("rat", ImmType::RATA), ], inputs: Inputs::NOV, outputs: Outputs::NOV, flags: InstrFlags::NF, },
            OpcodeData{name: "SetL", immediates: vec![("loc1", ImmType::LA), ], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "SetG", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "SetS", immediates: vec![("subop1", ImmType::OA("ReadonlyOp")), ], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "SetOpL", immediates: vec![("loc1", ImmType::LA), ("subop2", ImmType::OA("SetOpOp")), ], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "SetOpG", immediates: vec![("subop1", ImmType::OA("SetOpOp")), ], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "SetOpS", immediates: vec![("subop1", ImmType::OA("SetOpOp")), ], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "IncDecL", immediates: vec![("nloc1", ImmType::NLA), ("subop2", ImmType::OA("IncDecOp")), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "IncDecG", immediates: vec![("subop1", ImmType::OA("IncDecOp")), ], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "IncDecS", immediates: vec![("subop1", ImmType::OA("IncDecOp")), ], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "UnsetL", immediates: vec![("loc1", ImmType::LA), ], inputs: Inputs::NOV, outputs: Outputs::NOV, flags: InstrFlags::NF, },
            OpcodeData{name: "UnsetG", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::NOV, flags: InstrFlags::NF, },
            OpcodeData{name: "ResolveFunc", immediates: vec![("str1", ImmType::SA), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "ResolveMethCaller", immediates: vec![("str1", ImmType::SA), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "ResolveRFunc", immediates: vec![("str1", ImmType::SA), ], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "ResolveClsMethod", immediates: vec![("str1", ImmType::SA), ], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "ResolveClsMethodD", immediates: vec![("str1", ImmType::SA), ("str2", ImmType::SA), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "ResolveClsMethodS", immediates: vec![("subop1", ImmType::OA("SpecialClsRef")), ("str2", ImmType::SA), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "ResolveRClsMethod", immediates: vec![("str1", ImmType::SA), ], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "ResolveRClsMethodD", immediates: vec![("str1", ImmType::SA), ("str2", ImmType::SA), ], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "ResolveRClsMethodS", immediates: vec![("subop1", ImmType::OA("SpecialClsRef")), ("str2", ImmType::SA), ], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "ResolveClass", immediates: vec![("str1", ImmType::SA), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "LazyClass", immediates: vec![("str1", ImmType::SA), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "NewObj", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "NewObjR", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "NewObjD", immediates: vec![("str1", ImmType::SA), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "NewObjRD", immediates: vec![("str1", ImmType::SA), ], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "NewObjS", immediates: vec![("subop1", ImmType::OA("SpecialClsRef")), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "LockObj", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "FCallClsMethod", immediates: vec![("fca", ImmType::FCA), ("str2", ImmType::SA), ("subop3", ImmType::OA("IsLogAsDynamicCallOp")), ], inputs: Inputs::FCall{inp: 2, obj: 0}, outputs: Outputs::FCall, flags: InstrFlags::CF, },
            OpcodeData{name: "FCallClsMethodD", immediates: vec![("fca", ImmType::FCA), ("str2", ImmType::SA), ("str3", ImmType::SA), ("str4", ImmType::SA), ], inputs: Inputs::FCall{inp: 0, obj: 0}, outputs: Outputs::FCall, flags: InstrFlags::CF, },
            OpcodeData{name: "FCallClsMethodS", immediates: vec![("fca", ImmType::FCA), ("str2", ImmType::SA), ("subop3", ImmType::OA("SpecialClsRef")), ], inputs: Inputs::FCall{inp: 1, obj: 0}, outputs: Outputs::FCall, flags: InstrFlags::CF, },
            OpcodeData{name: "FCallClsMethodSD", immediates: vec![("fca", ImmType::FCA), ("str2", ImmType::SA), ("subop3", ImmType::OA("SpecialClsRef")), ("str4", ImmType::SA), ], inputs: Inputs::FCall{inp: 0, obj: 0}, outputs: Outputs::FCall, flags: InstrFlags::CF, },
            OpcodeData{name: "FCallCtor", immediates: vec![("fca", ImmType::FCA), ("str2", ImmType::SA), ], inputs: Inputs::FCall{inp: 0, obj: 1}, outputs: Outputs::FCall, flags: InstrFlags::CF, },
            OpcodeData{name: "FCallFunc", immediates: vec![("fca", ImmType::FCA), ], inputs: Inputs::FCall{inp: 1, obj: 0}, outputs: Outputs::FCall, flags: InstrFlags::CF, },
            OpcodeData{name: "FCallFuncD", immediates: vec![("fca", ImmType::FCA), ("str2", ImmType::SA), ], inputs: Inputs::FCall{inp: 0, obj: 0}, outputs: Outputs::FCall, flags: InstrFlags::CF, },
            OpcodeData{name: "FCallObjMethod", immediates: vec![("fca", ImmType::FCA), ("str2", ImmType::SA), ("subop3", ImmType::OA("ObjMethodOp")), ], inputs: Inputs::FCall{inp: 1, obj: 1}, outputs: Outputs::FCall, flags: InstrFlags::CF, },
            OpcodeData{name: "FCallObjMethodD", immediates: vec![("fca", ImmType::FCA), ("str2", ImmType::SA), ("subop3", ImmType::OA("ObjMethodOp")), ("str4", ImmType::SA), ], inputs: Inputs::FCall{inp: 0, obj: 1}, outputs: Outputs::FCall, flags: InstrFlags::CF, },
            OpcodeData{name: "IterInit", immediates: vec![("ita", ImmType::ITA), ("target2", ImmType::BA), ], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::NOV, flags: InstrFlags::CF, },
            OpcodeData{name: "LIterInit", immediates: vec![("ita", ImmType::ITA), ("loc2", ImmType::LA), ("target3", ImmType::BA), ], inputs: Inputs::NOV, outputs: Outputs::NOV, flags: InstrFlags::CF, },
            OpcodeData{name: "IterNext", immediates: vec![("ita", ImmType::ITA), ("target2", ImmType::BA), ], inputs: Inputs::NOV, outputs: Outputs::NOV, flags: InstrFlags::CF, },
            OpcodeData{name: "LIterNext", immediates: vec![("ita", ImmType::ITA), ("loc2", ImmType::LA), ("target3", ImmType::BA), ], inputs: Inputs::NOV, outputs: Outputs::NOV, flags: InstrFlags::CF, },
            OpcodeData{name: "IterFree", immediates: vec![("iter1", ImmType::IA), ], inputs: Inputs::NOV, outputs: Outputs::NOV, flags: InstrFlags::NF, },
            OpcodeData{name: "LIterFree", immediates: vec![("iter1", ImmType::IA), ("loc2", ImmType::LA), ], inputs: Inputs::NOV, outputs: Outputs::NOV, flags: InstrFlags::NF, },
            OpcodeData{name: "Incl", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "InclOnce", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Req", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "ReqOnce", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "ReqDoc", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Eval", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "This", immediates: vec![], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "BareThis", immediates: vec![("subop1", ImmType::OA("BareThisOp")), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "CheckThis", immediates: vec![], inputs: Inputs::NOV, outputs: Outputs::NOV, flags: InstrFlags::NF, },
            OpcodeData{name: "ChainFaults", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "OODeclExists", immediates: vec![("subop1", ImmType::OA("OODeclExistsOp")), ], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "VerifyOutType", immediates: vec![("arg1", ImmType::IVA), ], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "VerifyParamType", immediates: vec![("loc1", ImmType::ILA), ], inputs: Inputs::NOV, outputs: Outputs::NOV, flags: InstrFlags::NF, },
            OpcodeData{name: "VerifyParamTypeTS", immediates: vec![("loc1", ImmType::ILA), ], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::NOV, flags: InstrFlags::NF, },
            OpcodeData{name: "VerifyRetTypeC", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "VerifyRetTypeTS", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "VerifyRetNonNullC", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "SelfCls", immediates: vec![], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "ParentCls", immediates: vec![], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "LateBoundCls", immediates: vec![], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "RecordReifiedGeneric", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "CheckReifiedGenericMismatch", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::NOV, flags: InstrFlags::NF, },
            OpcodeData{name: "NativeImpl", immediates: vec![], inputs: Inputs::NOV, outputs: Outputs::NOV, flags: InstrFlags::CF | InstrFlags::TF, },
            OpcodeData{name: "CreateCl", immediates: vec![("arg1", ImmType::IVA), ("arg2", ImmType::IVA), ], inputs: Inputs::CUMany, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "CreateCont", immediates: vec![], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::CF, },
            OpcodeData{name: "ContEnter", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::CF, },
            OpcodeData{name: "ContRaise", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::CF, },
            OpcodeData{name: "Yield", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::CF, },
            OpcodeData{name: "YieldK", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::CF, },
            OpcodeData{name: "ContCheck", immediates: vec![("subop1", ImmType::OA("ContCheckOp")), ], inputs: Inputs::NOV, outputs: Outputs::NOV, flags: InstrFlags::NF, },
            OpcodeData{name: "ContValid", immediates: vec![], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "ContKey", immediates: vec![], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "ContCurrent", immediates: vec![], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "ContGetReturn", immediates: vec![], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "WHResult", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "SetImplicitContextByValue", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "Await", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::CF, },
            OpcodeData{name: "AwaitAll", immediates: vec![("locrange", ImmType::LAR), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::CF, },
            OpcodeData{name: "Idx", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "ArrayIdx", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "ArrayMarkLegacy", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "ArrayUnmarkLegacy", immediates: vec![], inputs: Inputs::Fixed([FlavorDesc::CV, FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "CheckProp", immediates: vec![("str1", ImmType::SA), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "InitProp", immediates: vec![("str1", ImmType::SA), ("subop2", ImmType::OA("InitPropOp")), ], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::NOV, flags: InstrFlags::NF, },
            OpcodeData{name: "Silence", immediates: vec![("loc1", ImmType::LA), ("subop2", ImmType::OA("SilenceOp")), ], inputs: Inputs::NOV, outputs: Outputs::NOV, flags: InstrFlags::NF, },
            OpcodeData{name: "ThrowNonExhaustiveSwitch", immediates: vec![], inputs: Inputs::NOV, outputs: Outputs::NOV, flags: InstrFlags::NF, },
            OpcodeData{name: "RaiseClassStringConversionWarning", immediates: vec![], inputs: Inputs::NOV, outputs: Outputs::NOV, flags: InstrFlags::NF, },
            OpcodeData{name: "BaseGC", immediates: vec![("arg1", ImmType::IVA), ("subop2", ImmType::OA("MOpMode")), ], inputs: Inputs::NOV, outputs: Outputs::NOV, flags: InstrFlags::NF, },
            OpcodeData{name: "BaseGL", immediates: vec![("loc1", ImmType::LA), ("subop2", ImmType::OA("MOpMode")), ], inputs: Inputs::NOV, outputs: Outputs::NOV, flags: InstrFlags::NF, },
            OpcodeData{name: "BaseSC", immediates: vec![("arg1", ImmType::IVA), ("arg2", ImmType::IVA), ("subop3", ImmType::OA("MOpMode")), ("subop4", ImmType::OA("ReadonlyOp")), ], inputs: Inputs::NOV, outputs: Outputs::NOV, flags: InstrFlags::NF, },
            OpcodeData{name: "BaseL", immediates: vec![("nloc1", ImmType::NLA), ("subop2", ImmType::OA("MOpMode")), ("subop3", ImmType::OA("ReadonlyOp")), ], inputs: Inputs::NOV, outputs: Outputs::NOV, flags: InstrFlags::NF, },
            OpcodeData{name: "BaseC", immediates: vec![("arg1", ImmType::IVA), ("subop2", ImmType::OA("MOpMode")), ], inputs: Inputs::NOV, outputs: Outputs::NOV, flags: InstrFlags::NF, },
            OpcodeData{name: "BaseH", immediates: vec![], inputs: Inputs::NOV, outputs: Outputs::NOV, flags: InstrFlags::NF, },
            OpcodeData{name: "Dim", immediates: vec![("subop1", ImmType::OA("MOpMode")), ("mkey", ImmType::KA), ], inputs: Inputs::NOV, outputs: Outputs::NOV, flags: InstrFlags::NF, },
            OpcodeData{name: "QueryM", immediates: vec![("arg1", ImmType::IVA), ("subop2", ImmType::OA("QueryMOp")), ("mkey", ImmType::KA), ], inputs: Inputs::MFinal, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "SetM", immediates: vec![("arg1", ImmType::IVA), ("mkey", ImmType::KA), ], inputs: Inputs::CMFinal(1), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "SetRangeM", immediates: vec![("arg1", ImmType::IVA), ("arg2", ImmType::IVA), ("subop3", ImmType::OA("SetRangeOp")), ], inputs: Inputs::CMFinal(3), outputs: Outputs::NOV, flags: InstrFlags::NF, },
            OpcodeData{name: "IncDecM", immediates: vec![("arg1", ImmType::IVA), ("subop2", ImmType::OA("IncDecOp")), ("mkey", ImmType::KA), ], inputs: Inputs::MFinal, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "SetOpM", immediates: vec![("arg1", ImmType::IVA), ("subop2", ImmType::OA("SetOpOp")), ("mkey", ImmType::KA), ], inputs: Inputs::CMFinal(1), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "UnsetM", immediates: vec![("arg1", ImmType::IVA), ("mkey", ImmType::KA), ], inputs: Inputs::MFinal, outputs: Outputs::NOV, flags: InstrFlags::NF, },
            OpcodeData{name: "MemoGet", immediates: vec![("target1", ImmType::BA), ("locrange", ImmType::LAR), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::CF, },
            OpcodeData{name: "MemoGetEager", immediates: vec![("target1", ImmType::BA), ("target2", ImmType::BA), ("locrange", ImmType::LAR), ], inputs: Inputs::NOV, outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::CF, },
            OpcodeData{name: "MemoSet", immediates: vec![("locrange", ImmType::LAR), ], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
            OpcodeData{name: "MemoSetEager", immediates: vec![("locrange", ImmType::LAR), ], inputs: Inputs::Fixed([FlavorDesc::CV].into()), outputs: Outputs::Fixed([FlavorDesc::CV].into()), flags: InstrFlags::NF, },
        ].into()
    })
}
